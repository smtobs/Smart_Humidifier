
Smart_Humidifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d058  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003e2c  0800d208  0800d208  0001d208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011034  08011034  00030108  2**0
                  CONTENTS
  4 .ARM          00000008  08011034  08011034  00021034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801103c  0801103c  00030108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801103c  0801103c  0002103c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011040  08011040  00021040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08011044  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002f60c  20000108  0801114c  00030108  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2002f714  0801114c  0003f714  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032dbe  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f90  00000000  00000000  00062ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021f0  00000000  00000000  00068e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f88  00000000  00000000  0006b078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bd6e  00000000  00000000  0006d000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000291d5  00000000  00000000  00098d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0b13  00000000  00000000  000c1f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b2a56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099b8  00000000  00000000  001b2aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000108 	.word	0x20000108
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d1f0 	.word	0x0800d1f0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000010c 	.word	0x2000010c
 80001ec:	0800d1f0 	.word	0x0800d1f0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <Wifi_SendRaw>:

Wifi_t	Wifi;

//#########################################################################################################
bool Wifi_SendRaw(uint8_t *data,uint16_t len)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	460b      	mov	r3, r1
 80005a2:	807b      	strh	r3, [r7, #2]
	if(len <= _WIFI_TX_SIZE)
 80005a4:	887b      	ldrh	r3, [r7, #2]
 80005a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80005aa:	d812      	bhi.n	80005d2 <Wifi_SendRaw+0x3a>
	{
		memcpy(Wifi.TxBuffer,data,len);
 80005ac:	887b      	ldrh	r3, [r7, #2]
 80005ae:	461a      	mov	r2, r3
 80005b0:	6879      	ldr	r1, [r7, #4]
 80005b2:	480a      	ldr	r0, [pc, #40]	; (80005dc <Wifi_SendRaw+0x44>)
 80005b4:	f00b fbd1 	bl	800bd5a <memcpy>
		if(HAL_UART_Transmit(&_WIFI_USART,data,len,100) == HAL_OK)
 80005b8:	887a      	ldrh	r2, [r7, #2]
 80005ba:	2364      	movs	r3, #100	; 0x64
 80005bc:	6879      	ldr	r1, [r7, #4]
 80005be:	4808      	ldr	r0, [pc, #32]	; (80005e0 <Wifi_SendRaw+0x48>)
 80005c0:	f007 ff6b 	bl	800849a <HAL_UART_Transmit>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d101      	bne.n	80005ce <Wifi_SendRaw+0x36>
			return true;
 80005ca:	2301      	movs	r3, #1
 80005cc:	e002      	b.n	80005d4 <Wifi_SendRaw+0x3c>
		else
			return false;
 80005ce:	2300      	movs	r3, #0
 80005d0:	e000      	b.n	80005d4 <Wifi_SendRaw+0x3c>
	}
	else
		return false;
 80005d2:	2300      	movs	r3, #0
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	2002ea45 	.word	0x2002ea45
 80005e0:	2002f2a4 	.word	0x2002f2a4

080005e4 <Wifi_SendString>:

bool Wifi_SendString(char *data)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	return Wifi_SendRaw((uint8_t*)data,strlen(data));
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f7ff fdff 	bl	80001f0 <strlen>
 80005f2:	4603      	mov	r3, r0
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	4619      	mov	r1, r3
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f7ff ffcd 	bl	8000598 <Wifi_SendRaw>
 80005fe:	4603      	mov	r3, r0
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <Wifi_WaitForString>:
	osDelay(DelayMs);
	return true;
}

bool Wifi_WaitForString(uint32_t TimeOut_ms,uint8_t *result,uint8_t CountOfParameter,...)
{
 8000608:	b40c      	push	{r2, r3}
 800060a:	b5b0      	push	{r4, r5, r7, lr}
 800060c:	b088      	sub	sp, #32
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
 8000612:	6039      	str	r1, [r7, #0]
 8000614:	466b      	mov	r3, sp
 8000616:	461d      	mov	r5, r3
	
	if(result == NULL)
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d101      	bne.n	8000622 <Wifi_WaitForString+0x1a>
		return false;
 800061e:	2300      	movs	r3, #0
 8000620:	e070      	b.n	8000704 <Wifi_WaitForString+0xfc>
	if(CountOfParameter == 0)
 8000622:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000626:	2b00      	cmp	r3, #0
 8000628:	d101      	bne.n	800062e <Wifi_WaitForString+0x26>
		return false;
 800062a:	2300      	movs	r3, #0
 800062c:	e06a      	b.n	8000704 <Wifi_WaitForString+0xfc>

	*result=0;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]

  va_list tag;
	va_start (tag,CountOfParameter);
 8000634:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000638:	60bb      	str	r3, [r7, #8]
	char *arg[CountOfParameter];
 800063a:	f897 4030 	ldrb.w	r4, [r7, #48]	; 0x30
 800063e:	4623      	mov	r3, r4
 8000640:	3b01      	subs	r3, #1
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	b2e0      	uxtb	r0, r4
 8000646:	f04f 0100 	mov.w	r1, #0
 800064a:	f04f 0200 	mov.w	r2, #0
 800064e:	f04f 0300 	mov.w	r3, #0
 8000652:	014b      	lsls	r3, r1, #5
 8000654:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000658:	0142      	lsls	r2, r0, #5
 800065a:	b2e0      	uxtb	r0, r4
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	f04f 0200 	mov.w	r2, #0
 8000664:	f04f 0300 	mov.w	r3, #0
 8000668:	014b      	lsls	r3, r1, #5
 800066a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800066e:	0142      	lsls	r2, r0, #5
 8000670:	4623      	mov	r3, r4
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	3307      	adds	r3, #7
 8000676:	08db      	lsrs	r3, r3, #3
 8000678:	00db      	lsls	r3, r3, #3
 800067a:	ebad 0d03 	sub.w	sp, sp, r3
 800067e:	466b      	mov	r3, sp
 8000680:	3303      	adds	r3, #3
 8000682:	089b      	lsrs	r3, r3, #2
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 8000688:	2300      	movs	r3, #0
 800068a:	75fb      	strb	r3, [r7, #23]
 800068c:	e00a      	b.n	80006a4 <Wifi_WaitForString+0x9c>
		arg[i] = va_arg (tag, char *);	
 800068e:	7dfa      	ldrb	r2, [r7, #23]
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	1d19      	adds	r1, r3, #4
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	6819      	ldr	r1, [r3, #0]
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 800069e:	7dfb      	ldrb	r3, [r7, #23]
 80006a0:	3301      	adds	r3, #1
 80006a2:	75fb      	strb	r3, [r7, #23]
 80006a4:	7dfa      	ldrb	r2, [r7, #23]
 80006a6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d3ef      	bcc.n	800068e <Wifi_WaitForString+0x86>
  va_end (tag);
	
		
	//////////////////////////////////	
	for(uint32_t t=0 ; t<TimeOut_ms ; t+=50)
 80006ae:	2300      	movs	r3, #0
 80006b0:	61bb      	str	r3, [r7, #24]
 80006b2:	e022      	b.n	80006fa <Wifi_WaitForString+0xf2>
	{
		osDelay(50);
 80006b4:	2032      	movs	r0, #50	; 0x32
 80006b6:	f008 fee8 	bl	800948a <osDelay>
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 80006ba:	2300      	movs	r3, #0
 80006bc:	77fb      	strb	r3, [r7, #31]
 80006be:	e014      	b.n	80006ea <Wifi_WaitForString+0xe2>
		{
			//HAL_UART_Transmit(&huart1, (uint8_t *)"Wifi.RxBuffer : ", strlen("Wifi.RxBuffer : "), 1000);
			//HAL_UART_Transmit(&huart1, Wifi.RxBuffer, strlen((char *)Wifi.RxBuffer), 1000);
			//HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n", strlen("\r\n"), 1000);

			if(strstr((char*)Wifi.RxBuffer,arg[mx])!=NULL)
 80006c0:	7ffa      	ldrb	r2, [r7, #31]
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006c8:	4619      	mov	r1, r3
 80006ca:	4812      	ldr	r0, [pc, #72]	; (8000714 <Wifi_WaitForString+0x10c>)
 80006cc:	f00b fccf 	bl	800c06e <strstr>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d006      	beq.n	80006e4 <Wifi_WaitForString+0xdc>
			{
				*result = mx+1;
 80006d6:	7ffb      	ldrb	r3, [r7, #31]
 80006d8:	3301      	adds	r3, #1
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	701a      	strb	r2, [r3, #0]
				return true;
 80006e0:	2301      	movs	r3, #1
 80006e2:	e00f      	b.n	8000704 <Wifi_WaitForString+0xfc>
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 80006e4:	7ffb      	ldrb	r3, [r7, #31]
 80006e6:	3301      	adds	r3, #1
 80006e8:	77fb      	strb	r3, [r7, #31]
 80006ea:	7ffa      	ldrb	r2, [r7, #31]
 80006ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d3e5      	bcc.n	80006c0 <Wifi_WaitForString+0xb8>
	for(uint32_t t=0 ; t<TimeOut_ms ; t+=50)
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	3332      	adds	r3, #50	; 0x32
 80006f8:	61bb      	str	r3, [r7, #24]
 80006fa:	69ba      	ldr	r2, [r7, #24]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d3d8      	bcc.n	80006b4 <Wifi_WaitForString+0xac>
			}				
		}				
	}
	// timeout
	return false;
 8000702:	2300      	movs	r3, #0
 8000704:	46ad      	mov	sp, r5
	
}
 8000706:	4618      	mov	r0, r3
 8000708:	3720      	adds	r7, #32
 800070a:	46bd      	mov	sp, r7
 800070c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000710:	b002      	add	sp, #8
 8000712:	4770      	bx	lr
 8000714:	2002e845 	.word	0x2002e845

08000718 <Wifi_ReturnString>:
//#########################################################################################################
bool Wifi_ReturnString(char *result,uint8_t WantWhichOne,char *SplitterChars)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	460b      	mov	r3, r1
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	72fb      	strb	r3, [r7, #11]
	if(result == NULL) 
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d101      	bne.n	8000730 <Wifi_ReturnString+0x18>
		return false;
 800072c:	2300      	movs	r3, #0
 800072e:	e02e      	b.n	800078e <Wifi_ReturnString+0x76>
	if(WantWhichOne==0)
 8000730:	7afb      	ldrb	r3, [r7, #11]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d101      	bne.n	800073a <Wifi_ReturnString+0x22>
		return false;
 8000736:	2300      	movs	r3, #0
 8000738:	e029      	b.n	800078e <Wifi_ReturnString+0x76>

	char *str = (char*)Wifi.RxBuffer;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <Wifi_ReturnString+0x80>)
 800073c:	617b      	str	r3, [r7, #20]
	

	str = strtok (str,SplitterChars);
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	6978      	ldr	r0, [r7, #20]
 8000742:	f00b fcab 	bl	800c09c <strtok>
 8000746:	6178      	str	r0, [r7, #20]
	if(str == NULL)
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d118      	bne.n	8000780 <Wifi_ReturnString+0x68>
	{
		strcpy(result,"");
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
		return false;
 8000754:	2300      	movs	r3, #0
 8000756:	e01a      	b.n	800078e <Wifi_ReturnString+0x76>
	}
	while (str != NULL)
  {
    str = strtok (NULL,SplitterChars);
 8000758:	6879      	ldr	r1, [r7, #4]
 800075a:	2000      	movs	r0, #0
 800075c:	f00b fc9e 	bl	800c09c <strtok>
 8000760:	6178      	str	r0, [r7, #20]
		if(str != NULL)
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d002      	beq.n	800076e <Wifi_ReturnString+0x56>
			WantWhichOne--;
 8000768:	7afb      	ldrb	r3, [r7, #11]
 800076a:	3b01      	subs	r3, #1
 800076c:	72fb      	strb	r3, [r7, #11]
		if(WantWhichOne==0)
 800076e:	7afb      	ldrb	r3, [r7, #11]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d105      	bne.n	8000780 <Wifi_ReturnString+0x68>
		{
			strcpy(result,str);
 8000774:	6979      	ldr	r1, [r7, #20]
 8000776:	68f8      	ldr	r0, [r7, #12]
 8000778:	f00b fc71 	bl	800c05e <strcpy>
			return true;
 800077c:	2301      	movs	r3, #1
 800077e:	e006      	b.n	800078e <Wifi_ReturnString+0x76>
	while (str != NULL)
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d1e8      	bne.n	8000758 <Wifi_ReturnString+0x40>
		}
  }
	strcpy(result,"");
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
	return false;	
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	2002e845 	.word	0x2002e845

0800079c <Wifi_ReturnInteger>:
	return false;	
	
}
//#########################################################################################################
bool	Wifi_ReturnInteger(int32_t	*result,uint8_t WantWhichOne,char *SplitterChars)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	460b      	mov	r3, r1
 80007a6:	607a      	str	r2, [r7, #4]
 80007a8:	72fb      	strb	r3, [r7, #11]
	if((char*)Wifi.RxBuffer == NULL)
		return false;
	if(Wifi_ReturnString((char*)Wifi.RxBuffer,WantWhichOne,SplitterChars)==false)
 80007aa:	7afb      	ldrb	r3, [r7, #11]
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	4619      	mov	r1, r3
 80007b0:	480a      	ldr	r0, [pc, #40]	; (80007dc <Wifi_ReturnInteger+0x40>)
 80007b2:	f7ff ffb1 	bl	8000718 <Wifi_ReturnString>
 80007b6:	4603      	mov	r3, r0
 80007b8:	f083 0301 	eor.w	r3, r3, #1
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <Wifi_ReturnInteger+0x2a>
		return false;
 80007c2:	2300      	movs	r3, #0
 80007c4:	e006      	b.n	80007d4 <Wifi_ReturnInteger+0x38>
	*result = atoi((char*)Wifi.RxBuffer);
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <Wifi_ReturnInteger+0x40>)
 80007c8:	f00b f9a0 	bl	800bb0c <atoi>
 80007cc:	4602      	mov	r2, r0
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	601a      	str	r2, [r3, #0]
	return true;
 80007d2:	2301      	movs	r3, #1
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	2002e845 	.word	0x2002e845

080007e0 <Wifi_RxClear>:
	}
	*dst = '\0';
}
//#########################################################################################################
void Wifi_RxClear(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	memset(Wifi.RxBuffer,0,_WIFI_RX_SIZE);
 80007e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e8:	2100      	movs	r1, #0
 80007ea:	4807      	ldr	r0, [pc, #28]	; (8000808 <Wifi_RxClear+0x28>)
 80007ec:	f00b fac3 	bl	800bd76 <memset>
	Wifi.RxIndex=0;	
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <Wifi_RxClear+0x2c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
  HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 80007f8:	2201      	movs	r2, #1
 80007fa:	4904      	ldr	r1, [pc, #16]	; (800080c <Wifi_RxClear+0x2c>)
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <Wifi_RxClear+0x30>)
 80007fe:	f007 fede 	bl	80085be <HAL_UART_Receive_IT>
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	2002e845 	.word	0x2002e845
 800080c:	2002e844 	.word	0x2002e844
 8000810:	2002f2a4 	.word	0x2002f2a4

08000814 <Wifi_TxClear>:
//#########################################################################################################
void Wifi_TxClear(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	memset(Wifi.TxBuffer,0,_WIFI_TX_SIZE);
 8000818:	f44f 7280 	mov.w	r2, #256	; 0x100
 800081c:	2100      	movs	r1, #0
 800081e:	4802      	ldr	r0, [pc, #8]	; (8000828 <Wifi_TxClear+0x14>)
 8000820:	f00b faa9 	bl	800bd76 <memset>
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	2002ea45 	.word	0x2002ea45

0800082c <Wifi_RxCallBack>:
//#########################################################################################################
void Wifi_RxCallBack(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  //+++ at command buffer
  if(Wifi.RxIsData==false)                                              
 8000830:	4b9a      	ldr	r3, [pc, #616]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000832:	f893 3718 	ldrb.w	r3, [r3, #1816]	; 0x718
 8000836:	f083 0301 	eor.w	r3, r3, #1
 800083a:	b2db      	uxtb	r3, r3
 800083c:	2b00      	cmp	r3, #0
 800083e:	d018      	beq.n	8000872 <Wifi_RxCallBack+0x46>
  {
    Wifi.RxBuffer[Wifi.RxIndex] = Wifi.usartBuff;
 8000840:	4b96      	ldr	r3, [pc, #600]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000842:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000846:	4619      	mov	r1, r3
 8000848:	4b94      	ldr	r3, [pc, #592]	; (8000a9c <Wifi_RxCallBack+0x270>)
 800084a:	781a      	ldrb	r2, [r3, #0]
 800084c:	4b93      	ldr	r3, [pc, #588]	; (8000a9c <Wifi_RxCallBack+0x270>)
 800084e:	440b      	add	r3, r1
 8000850:	705a      	strb	r2, [r3, #1]
    if(Wifi.RxIndex < _WIFI_RX_SIZE)
 8000852:	4b92      	ldr	r3, [pc, #584]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000854:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800085c:	f080 80ab 	bcs.w	80009b6 <Wifi_RxCallBack+0x18a>
      Wifi.RxIndex++;
 8000860:	4b8e      	ldr	r3, [pc, #568]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000862:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000866:	3301      	adds	r3, #1
 8000868:	b29a      	uxth	r2, r3
 800086a:	4b8c      	ldr	r3, [pc, #560]	; (8000a9c <Wifi_RxCallBack+0x270>)
 800086c:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
 8000870:	e0a1      	b.n	80009b6 <Wifi_RxCallBack+0x18a>
  }
  //--- at command buffer
  //+++  data buffer
  else                                                                  
  {
    if( HAL_GetTick()-Wifi.RxDataLastTime > 50)
 8000872:	f003 fc67 	bl	8004144 <HAL_GetTick>
 8000876:	4602      	mov	r2, r0
 8000878:	4b88      	ldr	r3, [pc, #544]	; (8000a9c <Wifi_RxCallBack+0x270>)
 800087a:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	2b32      	cmp	r3, #50	; 0x32
 8000882:	d903      	bls.n	800088c <Wifi_RxCallBack+0x60>
      Wifi.RxIsData=false;
 8000884:	4b85      	ldr	r3, [pc, #532]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000886:	2200      	movs	r2, #0
 8000888:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
    //+++ Calculate Data len after +IPD
    if(Wifi.RxDataLen==0)
 800088c:	4b83      	ldr	r3, [pc, #524]	; (8000a9c <Wifi_RxCallBack+0x270>)
 800088e:	f8b3 3710 	ldrh.w	r3, [r3, #1808]	; 0x710
 8000892:	2b00      	cmp	r3, #0
 8000894:	d167      	bne.n	8000966 <Wifi_RxCallBack+0x13a>
    {
      //+++ Calculate Data len after +IPD ++++++ Multi Connection OFF
      if (Wifi.TcpIpMultiConnection==false)
 8000896:	4b81      	ldr	r3, [pc, #516]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000898:	f893 3819 	ldrb.w	r3, [r3, #2073]	; 0x819
 800089c:	f083 0301 	eor.w	r3, r3, #1
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d028      	beq.n	80008f8 <Wifi_RxCallBack+0xcc>
      {
        Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp] = Wifi.usartBuff;
 80008a6:	4b7d      	ldr	r3, [pc, #500]	; (8000a9c <Wifi_RxCallBack+0x270>)
 80008a8:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 80008ac:	4619      	mov	r1, r3
 80008ae:	4b7b      	ldr	r3, [pc, #492]	; (8000a9c <Wifi_RxCallBack+0x270>)
 80008b0:	781a      	ldrb	r2, [r3, #0]
 80008b2:	4b7a      	ldr	r3, [pc, #488]	; (8000a9c <Wifi_RxCallBack+0x270>)
 80008b4:	440b      	add	r3, r1
 80008b6:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
        Wifi.RxIndexForDataTmp++;
 80008ba:	4b78      	ldr	r3, [pc, #480]	; (8000a9c <Wifi_RxCallBack+0x270>)
 80008bc:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 80008c0:	3301      	adds	r3, #1
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	4b75      	ldr	r3, [pc, #468]	; (8000a9c <Wifi_RxCallBack+0x270>)
 80008c6:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
        if(Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp-1]==':')
 80008ca:	4b74      	ldr	r3, [pc, #464]	; (8000a9c <Wifi_RxCallBack+0x270>)
 80008cc:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 80008d0:	3b01      	subs	r3, #1
 80008d2:	4a72      	ldr	r2, [pc, #456]	; (8000a9c <Wifi_RxCallBack+0x270>)
 80008d4:	4413      	add	r3, r2
 80008d6:	f893 3704 	ldrb.w	r3, [r3, #1796]	; 0x704
 80008da:	2b3a      	cmp	r3, #58	; 0x3a
 80008dc:	d16b      	bne.n	80009b6 <Wifi_RxCallBack+0x18a>
        {
          Wifi.RxDataConnectionNumber=0;
 80008de:	4b6f      	ldr	r3, [pc, #444]	; (8000a9c <Wifi_RxCallBack+0x270>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	f883 2712 	strb.w	r2, [r3, #1810]	; 0x712
          Wifi.RxDataLen=atoi((char*)&Wifi.RxBufferForDataTmp[1]);
 80008e6:	486e      	ldr	r0, [pc, #440]	; (8000aa0 <Wifi_RxCallBack+0x274>)
 80008e8:	f00b f910 	bl	800bb0c <atoi>
 80008ec:	4603      	mov	r3, r0
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	4b6a      	ldr	r3, [pc, #424]	; (8000a9c <Wifi_RxCallBack+0x270>)
 80008f2:	f8a3 2710 	strh.w	r2, [r3, #1808]	; 0x710
 80008f6:	e05e      	b.n	80009b6 <Wifi_RxCallBack+0x18a>
      }
      //--- Calculate Data len after +IPD ++++++ Multi Connection OFF
      //+++ Calculate Data len after +IPD ++++++ Multi Connection ON
      else
      {
        Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp] = Wifi.usartBuff;
 80008f8:	4b68      	ldr	r3, [pc, #416]	; (8000a9c <Wifi_RxCallBack+0x270>)
 80008fa:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 80008fe:	4619      	mov	r1, r3
 8000900:	4b66      	ldr	r3, [pc, #408]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000902:	781a      	ldrb	r2, [r3, #0]
 8000904:	4b65      	ldr	r3, [pc, #404]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000906:	440b      	add	r3, r1
 8000908:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
        Wifi.RxIndexForDataTmp++;
 800090c:	4b63      	ldr	r3, [pc, #396]	; (8000a9c <Wifi_RxCallBack+0x270>)
 800090e:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8000912:	3301      	adds	r3, #1
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4b61      	ldr	r3, [pc, #388]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000918:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
        if(Wifi.RxBufferForDataTmp[2]==',')
 800091c:	4b5f      	ldr	r3, [pc, #380]	; (8000a9c <Wifi_RxCallBack+0x270>)
 800091e:	f893 3706 	ldrb.w	r3, [r3, #1798]	; 0x706
 8000922:	2b2c      	cmp	r3, #44	; 0x2c
 8000924:	d107      	bne.n	8000936 <Wifi_RxCallBack+0x10a>
        {
          Wifi.RxDataConnectionNumber=Wifi.RxBufferForDataTmp[1]-48;
 8000926:	4b5d      	ldr	r3, [pc, #372]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000928:	f893 3705 	ldrb.w	r3, [r3, #1797]	; 0x705
 800092c:	3b30      	subs	r3, #48	; 0x30
 800092e:	b2da      	uxtb	r2, r3
 8000930:	4b5a      	ldr	r3, [pc, #360]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000932:	f883 2712 	strb.w	r2, [r3, #1810]	; 0x712
        }
        if((Wifi.RxIndexForDataTmp>3) && (Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp-1]==':'))
 8000936:	4b59      	ldr	r3, [pc, #356]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000938:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 800093c:	2b03      	cmp	r3, #3
 800093e:	d93a      	bls.n	80009b6 <Wifi_RxCallBack+0x18a>
 8000940:	4b56      	ldr	r3, [pc, #344]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000942:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8000946:	3b01      	subs	r3, #1
 8000948:	4a54      	ldr	r2, [pc, #336]	; (8000a9c <Wifi_RxCallBack+0x270>)
 800094a:	4413      	add	r3, r2
 800094c:	f893 3704 	ldrb.w	r3, [r3, #1796]	; 0x704
 8000950:	2b3a      	cmp	r3, #58	; 0x3a
 8000952:	d130      	bne.n	80009b6 <Wifi_RxCallBack+0x18a>
          Wifi.RxDataLen=atoi((char*)&Wifi.RxBufferForDataTmp[3]);
 8000954:	4853      	ldr	r0, [pc, #332]	; (8000aa4 <Wifi_RxCallBack+0x278>)
 8000956:	f00b f8d9 	bl	800bb0c <atoi>
 800095a:	4603      	mov	r3, r0
 800095c:	b29a      	uxth	r2, r3
 800095e:	4b4f      	ldr	r3, [pc, #316]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000960:	f8a3 2710 	strh.w	r2, [r3, #1808]	; 0x710
 8000964:	e027      	b.n	80009b6 <Wifi_RxCallBack+0x18a>
    }
    //--- Calculate Data len after +IPD
    //+++ Fill Data Buffer
    else  
    {      
      Wifi.RxBufferForData[Wifi.RxIndexForData] = Wifi.usartBuff;
 8000966:	4b4d      	ldr	r3, [pc, #308]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000968:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	; 0x70e
 800096c:	4619      	mov	r1, r3
 800096e:	4b4b      	ldr	r3, [pc, #300]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000970:	781a      	ldrb	r2, [r3, #0]
 8000972:	4b4a      	ldr	r3, [pc, #296]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000974:	440b      	add	r3, r1
 8000976:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
      if(Wifi.RxIndexForData < _WIFI_RX_FOR_DATA_SIZE)
 800097a:	4b48      	ldr	r3, [pc, #288]	; (8000a9c <Wifi_RxCallBack+0x270>)
 800097c:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	; 0x70e
 8000980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000984:	d207      	bcs.n	8000996 <Wifi_RxCallBack+0x16a>
        Wifi.RxIndexForData++;
 8000986:	4b45      	ldr	r3, [pc, #276]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000988:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	; 0x70e
 800098c:	3301      	adds	r3, #1
 800098e:	b29a      	uxth	r2, r3
 8000990:	4b42      	ldr	r3, [pc, #264]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000992:	f8a3 270e 	strh.w	r2, [r3, #1806]	; 0x70e
      if( Wifi.RxIndexForData>= Wifi.RxDataLen)
 8000996:	4b41      	ldr	r3, [pc, #260]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000998:	f8b3 270e 	ldrh.w	r2, [r3, #1806]	; 0x70e
 800099c:	4b3f      	ldr	r3, [pc, #252]	; (8000a9c <Wifi_RxCallBack+0x270>)
 800099e:	f8b3 3710 	ldrh.w	r3, [r3, #1808]	; 0x710
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d307      	bcc.n	80009b6 <Wifi_RxCallBack+0x18a>
      {
        Wifi.RxIsData=false;         
 80009a6:	4b3d      	ldr	r3, [pc, #244]	; (8000a9c <Wifi_RxCallBack+0x270>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
        Wifi.GotNewData=true;
 80009ae:	4b3b      	ldr	r3, [pc, #236]	; (8000a9c <Wifi_RxCallBack+0x270>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	f883 2719 	strb.w	r2, [r3, #1817]	; 0x719
      }
    }
    //--- Fill Data Buffer    
  }           
  //--- data buffer
	HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 80009b6:	2201      	movs	r2, #1
 80009b8:	4938      	ldr	r1, [pc, #224]	; (8000a9c <Wifi_RxCallBack+0x270>)
 80009ba:	483b      	ldr	r0, [pc, #236]	; (8000aa8 <Wifi_RxCallBack+0x27c>)
 80009bc:	f007 fdff 	bl	80085be <HAL_UART_Receive_IT>
  //+++ check +IPD in At command buffer
  if(Wifi.RxIndex>4)
 80009c0:	4b36      	ldr	r3, [pc, #216]	; (8000a9c <Wifi_RxCallBack+0x270>)
 80009c2:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	d966      	bls.n	8000a98 <Wifi_RxCallBack+0x26c>
  {
    if( (Wifi.RxBuffer[Wifi.RxIndex-4]=='+') && (Wifi.RxBuffer[Wifi.RxIndex-3]=='I') && (Wifi.RxBuffer[Wifi.RxIndex-2]=='P') && (Wifi.RxBuffer[Wifi.RxIndex-1]=='D'))
 80009ca:	4b34      	ldr	r3, [pc, #208]	; (8000a9c <Wifi_RxCallBack+0x270>)
 80009cc:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 80009d0:	3b04      	subs	r3, #4
 80009d2:	4a32      	ldr	r2, [pc, #200]	; (8000a9c <Wifi_RxCallBack+0x270>)
 80009d4:	4413      	add	r3, r2
 80009d6:	785b      	ldrb	r3, [r3, #1]
 80009d8:	2b2b      	cmp	r3, #43	; 0x2b
 80009da:	d15d      	bne.n	8000a98 <Wifi_RxCallBack+0x26c>
 80009dc:	4b2f      	ldr	r3, [pc, #188]	; (8000a9c <Wifi_RxCallBack+0x270>)
 80009de:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 80009e2:	3b03      	subs	r3, #3
 80009e4:	4a2d      	ldr	r2, [pc, #180]	; (8000a9c <Wifi_RxCallBack+0x270>)
 80009e6:	4413      	add	r3, r2
 80009e8:	785b      	ldrb	r3, [r3, #1]
 80009ea:	2b49      	cmp	r3, #73	; 0x49
 80009ec:	d154      	bne.n	8000a98 <Wifi_RxCallBack+0x26c>
 80009ee:	4b2b      	ldr	r3, [pc, #172]	; (8000a9c <Wifi_RxCallBack+0x270>)
 80009f0:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 80009f4:	3b02      	subs	r3, #2
 80009f6:	4a29      	ldr	r2, [pc, #164]	; (8000a9c <Wifi_RxCallBack+0x270>)
 80009f8:	4413      	add	r3, r2
 80009fa:	785b      	ldrb	r3, [r3, #1]
 80009fc:	2b50      	cmp	r3, #80	; 0x50
 80009fe:	d14b      	bne.n	8000a98 <Wifi_RxCallBack+0x26c>
 8000a00:	4b26      	ldr	r3, [pc, #152]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000a02:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000a06:	3b01      	subs	r3, #1
 8000a08:	4a24      	ldr	r2, [pc, #144]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000a0a:	4413      	add	r3, r2
 8000a0c:	785b      	ldrb	r3, [r3, #1]
 8000a0e:	2b44      	cmp	r3, #68	; 0x44
 8000a10:	d142      	bne.n	8000a98 <Wifi_RxCallBack+0x26c>
    {
      memset(Wifi.RxBufferForDataTmp,0,sizeof(Wifi.RxBufferForDataTmp));
 8000a12:	2208      	movs	r2, #8
 8000a14:	2100      	movs	r1, #0
 8000a16:	4825      	ldr	r0, [pc, #148]	; (8000aac <Wifi_RxCallBack+0x280>)
 8000a18:	f00b f9ad 	bl	800bd76 <memset>
      Wifi.RxBuffer[Wifi.RxIndex-4]=0;
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000a1e:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000a22:	3b04      	subs	r3, #4
 8000a24:	4a1d      	ldr	r2, [pc, #116]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000a26:	4413      	add	r3, r2
 8000a28:	2200      	movs	r2, #0
 8000a2a:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-3]=0;
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000a2e:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000a32:	3b03      	subs	r3, #3
 8000a34:	4a19      	ldr	r2, [pc, #100]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000a36:	4413      	add	r3, r2
 8000a38:	2200      	movs	r2, #0
 8000a3a:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-2]=0;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000a3e:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000a42:	3b02      	subs	r3, #2
 8000a44:	4a15      	ldr	r2, [pc, #84]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000a46:	4413      	add	r3, r2
 8000a48:	2200      	movs	r2, #0
 8000a4a:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-1]=0;
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000a4e:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000a52:	3b01      	subs	r3, #1
 8000a54:	4a11      	ldr	r2, [pc, #68]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000a56:	4413      	add	r3, r2
 8000a58:	2200      	movs	r2, #0
 8000a5a:	705a      	strb	r2, [r3, #1]
      Wifi.RxIndex-=4;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000a5e:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000a62:	3b04      	subs	r3, #4
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000a68:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
      Wifi.RxIndexForData=0;
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f8a3 270e 	strh.w	r2, [r3, #1806]	; 0x70e
      Wifi.RxIndexForDataTmp=0;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
      Wifi.RxIsData=true;
 8000a7c:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
      Wifi.RxDataLen=0;  
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	f8a3 2710 	strh.w	r2, [r3, #1808]	; 0x710
      Wifi.RxDataLastTime = HAL_GetTick();      
 8000a8c:	f003 fb5a 	bl	8004144 <HAL_GetTick>
 8000a90:	4603      	mov	r3, r0
 8000a92:	4a02      	ldr	r2, [pc, #8]	; (8000a9c <Wifi_RxCallBack+0x270>)
 8000a94:	f8c2 3714 	str.w	r3, [r2, #1812]	; 0x714
    }
  }
  //--- check +IPD in At command buffer  
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	2002e844 	.word	0x2002e844
 8000aa0:	2002ef49 	.word	0x2002ef49
 8000aa4:	2002ef4b 	.word	0x2002ef4b
 8000aa8:	2002f2a4 	.word	0x2002f2a4
 8000aac:	2002ef48 	.word	0x2002ef48

08000ab0 <WifiTask>:
//#########################################################################################################
//#########################################################################################################
extern int32_t MQTT_Socket;

void WifiTask(void const * argument)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b096      	sub	sp, #88	; 0x58
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
#if (1)
	char sp[] = {"me STM32"};
 8000ab8:	4a23      	ldr	r2, [pc, #140]	; (8000b48 <WifiTask+0x98>)
 8000aba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000abe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ac0:	c303      	stmia	r3!, {r0, r1}
 8000ac2:	701a      	strb	r2, [r3, #0]

	DEBUG_PRINT("Start WiFi Task !");
 8000ac4:	f240 131f 	movw	r3, #287	; 0x11f
 8000ac8:	4a20      	ldr	r2, [pc, #128]	; (8000b4c <WifiTask+0x9c>)
 8000aca:	4921      	ldr	r1, [pc, #132]	; (8000b50 <WifiTask+0xa0>)
 8000acc:	4821      	ldr	r0, [pc, #132]	; (8000b54 <WifiTask+0xa4>)
 8000ace:	f001 fdb7 	bl	8002640 <_debugPrint>

	HAL_UART_Transmit(&huart1, (uint8_t *)"hello\r\n", (uint16_t)strlen("hello\r\n"), 1000);
 8000ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad6:	2207      	movs	r2, #7
 8000ad8:	491f      	ldr	r1, [pc, #124]	; (8000b58 <WifiTask+0xa8>)
 8000ada:	4820      	ldr	r0, [pc, #128]	; (8000b5c <WifiTask+0xac>)
 8000adc:	f007 fcdd 	bl	800849a <HAL_UART_Transmit>

	Wifi_SendString("AT\r\n");
 8000ae0:	481f      	ldr	r0, [pc, #124]	; (8000b60 <WifiTask+0xb0>)
 8000ae2:	f7ff fd7f 	bl	80005e4 <Wifi_SendString>
 	Wifi_SetRfPower(82);
 8000ae6:	2052      	movs	r0, #82	; 0x52
 8000ae8:	f000 f88a 	bl	8000c00 <Wifi_SetRfPower>

    Wifi_TcpIp_GetMultiConnection();
 8000aec:	f000 fada 	bl	80010a4 <Wifi_TcpIp_GetMultiConnection>
    Wifi_TcpIp_Close(0);
 8000af0:	2000      	movs	r0, #0
 8000af2:	f000 fb3b 	bl	800116c <Wifi_TcpIp_Close>
    Wifi_TcpIp_Close(1);
 8000af6:	2001      	movs	r0, #1
 8000af8:	f000 fb38 	bl	800116c <Wifi_TcpIp_Close>
    Wifi_TcpIp_Close(2);
 8000afc:	2002      	movs	r0, #2
 8000afe:	f000 fb35 	bl	800116c <Wifi_TcpIp_Close>
    Wifi_TcpIp_Close(3);
 8000b02:	2003      	movs	r0, #3
 8000b04:	f000 fb32 	bl	800116c <Wifi_TcpIp_Close>
    Wifi_TcpIp_Close(4);
 8000b08:	2004      	movs	r0, #4
 8000b0a:	f000 fb2f 	bl	800116c <Wifi_TcpIp_Close>
    Wifi_TcpIp_SetMultiConnection(true);
 8000b0e:	2001      	movs	r0, #1
 8000b10:	f000 fa74 	bl	8000ffc <Wifi_TcpIp_SetMultiConnection>

	Wifi_GetMode();
 8000b14:	f000 f916 	bl	8000d44 <Wifi_GetMode>
	Wifi_Station_DhcpIsEnable();
 8000b18:	f000 f9e2 	bl	8000ee0 <Wifi_Station_DhcpIsEnable>
	Wifi_UserInit();
 8000b1c:	f000 fb98 	bl	8001250 <Wifi_UserInit>

	//Wifi_TcpIp_StartTcpConnection(0, "192.168.219.103", 1883, 500);
	Connect_Broker("192.168.219.101","1883");
 8000b20:	4910      	ldr	r1, [pc, #64]	; (8000b64 <WifiTask+0xb4>)
 8000b22:	4811      	ldr	r0, [pc, #68]	; (8000b68 <WifiTask+0xb8>)
 8000b24:	f000 ff80 	bl	8001a28 <Connect_Broker>
	osDelay(1000);
 8000b28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b2c:	f008 fcad 	bl	800948a <osDelay>
	Subscribe("IOT");
 8000b30:	480e      	ldr	r0, [pc, #56]	; (8000b6c <WifiTask+0xbc>)
 8000b32:	f001 f865 	bl	8001c00 <Subscribe>
	//Wifi_TcpIp_SendDataTcp(0, (uint16_t)strlen("Hi"), (uint8_t *)"Hi");


	while (1)
	{
		osDelay(2000);
 8000b36:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b3a:	f008 fca6 	bl	800948a <osDelay>
		publish("test","deneme");
 8000b3e:	490c      	ldr	r1, [pc, #48]	; (8000b70 <WifiTask+0xc0>)
 8000b40:	480c      	ldr	r0, [pc, #48]	; (8000b74 <WifiTask+0xc4>)
 8000b42:	f001 f8cf 	bl	8001ce4 <publish>
		osDelay(2000);
 8000b46:	e7f6      	b.n	8000b36 <WifiTask+0x86>
 8000b48:	0800d26c 	.word	0x0800d26c
 8000b4c:	0800d854 	.word	0x0800d854
 8000b50:	0800d208 	.word	0x0800d208
 8000b54:	0800d21c 	.word	0x0800d21c
 8000b58:	0800d230 	.word	0x0800d230
 8000b5c:	2002f25c 	.word	0x2002f25c
 8000b60:	0800d238 	.word	0x0800d238
 8000b64:	0800d240 	.word	0x0800d240
 8000b68:	0800d248 	.word	0x0800d248
 8000b6c:	0800d258 	.word	0x0800d258
 8000b70:	0800d25c 	.word	0x0800d25c
 8000b74:	0800d264 	.word	0x0800d264

08000b78 <Wifi_Init>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
void Wifi_Init(osPriority	Priority)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08c      	sub	sp, #48	; 0x30
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 8000b82:	2201      	movs	r2, #1
 8000b84:	4918      	ldr	r1, [pc, #96]	; (8000be8 <Wifi_Init+0x70>)
 8000b86:	4819      	ldr	r0, [pc, #100]	; (8000bec <Wifi_Init+0x74>)
 8000b88:	f007 fd19 	bl	80085be <HAL_UART_Receive_IT>
	Wifi_RxClear();
 8000b8c:	f7ff fe28 	bl	80007e0 <Wifi_RxClear>
	Wifi_TxClear();
 8000b90:	f7ff fe40 	bl	8000814 <Wifi_TxClear>
	osSemaphoreDef(WifiSemHandle);
 8000b94:	2300      	movs	r3, #0
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	WifiSemHandle = osSemaphoreCreate(osSemaphore(WifiSemHandle), 1);
 8000b9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f008 fc85 	bl	80094b2 <osSemaphoreCreate>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	4a11      	ldr	r2, [pc, #68]	; (8000bf0 <Wifi_Init+0x78>)
 8000bac:	6013      	str	r3, [r2, #0]
	osThreadDef(WifiTaskName, WifiTask, Priority, 0, _WIFI_TASK_SIZE);
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <Wifi_Init+0x7c>)
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <Wifi_Init+0x80>)
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	88fb      	ldrh	r3, [r7, #6]
 8000bb8:	82bb      	strh	r3, [r7, #20]
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61bb      	str	r3, [r7, #24]
 8000bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bc2:	61fb      	str	r3, [r7, #28]
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
	WifiTaskHandle = osThreadCreate(osThread(WifiTaskName), NULL);	
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f008 fc0d 	bl	80093f2 <osThreadCreate>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	4a08      	ldr	r2, [pc, #32]	; (8000bfc <Wifi_Init+0x84>)
 8000bdc:	6013      	str	r3, [r2, #0]
}
 8000bde:	bf00      	nop
 8000be0:	3730      	adds	r7, #48	; 0x30
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2002e844 	.word	0x2002e844
 8000bec:	2002f2a4 	.word	0x2002f2a4
 8000bf0:	2002e840 	.word	0x2002e840
 8000bf4:	0800d278 	.word	0x0800d278
 8000bf8:	08000ab1 	.word	0x08000ab1
 8000bfc:	2002f0f8 	.word	0x2002f0f8

08000c00 <Wifi_SetRfPower>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;			
}
//#########################################################################################################
bool	Wifi_SetRfPower(uint8_t Power_0_to_82)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af02      	add	r7, sp, #8
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <Wifi_SetRfPower+0x88>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f04f 31ff 	mov.w	r1, #4294967295
 8000c12:	4618      	mov	r0, r3
 8000c14:	f008 fc80 	bl	8009518 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8000c1c:	f7ff fde0 	bl	80007e0 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+RFPOWER=%d\r\n",Power_0_to_82);
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	461a      	mov	r2, r3
 8000c24:	4919      	ldr	r1, [pc, #100]	; (8000c8c <Wifi_SetRfPower+0x8c>)
 8000c26:	481a      	ldr	r0, [pc, #104]	; (8000c90 <Wifi_SetRfPower+0x90>)
 8000c28:	f00b f9b6 	bl	800bf98 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8000c2c:	4818      	ldr	r0, [pc, #96]	; (8000c90 <Wifi_SetRfPower+0x90>)
 8000c2e:	f7ff fcd9 	bl	80005e4 <Wifi_SendString>
 8000c32:	4603      	mov	r3, r0
 8000c34:	f083 0301 	eor.w	r3, r3, #1
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d115      	bne.n	8000c6a <Wifi_SetRfPower+0x6a>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8000c3e:	f107 010e 	add.w	r1, r7, #14
 8000c42:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <Wifi_SetRfPower+0x94>)
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <Wifi_SetRfPower+0x98>)
 8000c48:	2202      	movs	r2, #2
 8000c4a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c4e:	f7ff fcdb 	bl	8000608 <Wifi_WaitForString>
 8000c52:	4603      	mov	r3, r0
 8000c54:	f083 0301 	eor.w	r3, r3, #1
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d107      	bne.n	8000c6e <Wifi_SetRfPower+0x6e>
			break;
		if(result == 2)
 8000c5e:	7bbb      	ldrb	r3, [r7, #14]
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d006      	beq.n	8000c72 <Wifi_SetRfPower+0x72>
			break;			
		returnVal=true;	
 8000c64:	2301      	movs	r3, #1
 8000c66:	73fb      	strb	r3, [r7, #15]
 8000c68:	e004      	b.n	8000c74 <Wifi_SetRfPower+0x74>
			break;
 8000c6a:	bf00      	nop
 8000c6c:	e002      	b.n	8000c74 <Wifi_SetRfPower+0x74>
			break;
 8000c6e:	bf00      	nop
 8000c70:	e000      	b.n	8000c74 <Wifi_SetRfPower+0x74>
			break;			
 8000c72:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <Wifi_SetRfPower+0x88>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f008 fc9b 	bl	80095b4 <osSemaphoreRelease>
	return returnVal;		
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	2002e840 	.word	0x2002e840
 8000c8c:	0800d2d0 	.word	0x0800d2d0
 8000c90:	2002ea45 	.word	0x2002ea45
 8000c94:	0800d298 	.word	0x0800d298
 8000c98:	0800d294 	.word	0x0800d294

08000c9c <Wifi_SetMode>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool Wifi_SetMode(WifiMode_t	WifiMode_)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af02      	add	r7, sp, #8
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 8000ca6:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <Wifi_SetMode+0x90>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f04f 31ff 	mov.w	r1, #4294967295
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f008 fc32 	bl	8009518 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8000cb8:	f7ff fd92 	bl	80007e0 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWMODE_CUR=%d\r\n",WifiMode_);
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	491b      	ldr	r1, [pc, #108]	; (8000d30 <Wifi_SetMode+0x94>)
 8000cc2:	481c      	ldr	r0, [pc, #112]	; (8000d34 <Wifi_SetMode+0x98>)
 8000cc4:	f00b f968 	bl	800bf98 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8000cc8:	481a      	ldr	r0, [pc, #104]	; (8000d34 <Wifi_SetMode+0x98>)
 8000cca:	f7ff fc8b 	bl	80005e4 <Wifi_SendString>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	f083 0301 	eor.w	r3, r3, #1
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d119      	bne.n	8000d0e <Wifi_SetMode+0x72>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8000cda:	f107 010e 	add.w	r1, r7, #14
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <Wifi_SetMode+0x9c>)
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <Wifi_SetMode+0xa0>)
 8000ce4:	2202      	movs	r2, #2
 8000ce6:	f241 3088 	movw	r0, #5000	; 0x1388
 8000cea:	f7ff fc8d 	bl	8000608 <Wifi_WaitForString>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	f083 0301 	eor.w	r3, r3, #1
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d10b      	bne.n	8000d12 <Wifi_SetMode+0x76>
			break;
		if(result == 2)
 8000cfa:	7bbb      	ldrb	r3, [r7, #14]
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d00a      	beq.n	8000d16 <Wifi_SetMode+0x7a>
			break;			
		Wifi.Mode = WifiMode_;
 8000d00:	4a0f      	ldr	r2, [pc, #60]	; (8000d40 <Wifi_SetMode+0xa4>)
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	f882 371a 	strb.w	r3, [r2, #1818]	; 0x71a
		returnVal=true;	
 8000d08:	2301      	movs	r3, #1
 8000d0a:	73fb      	strb	r3, [r7, #15]
 8000d0c:	e004      	b.n	8000d18 <Wifi_SetMode+0x7c>
			break;
 8000d0e:	bf00      	nop
 8000d10:	e002      	b.n	8000d18 <Wifi_SetMode+0x7c>
			break;
 8000d12:	bf00      	nop
 8000d14:	e000      	b.n	8000d18 <Wifi_SetMode+0x7c>
			break;			
 8000d16:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <Wifi_SetMode+0x90>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f008 fc49 	bl	80095b4 <osSemaphoreRelease>
	return returnVal;		
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	2002e840 	.word	0x2002e840
 8000d30:	0800d2e0 	.word	0x0800d2e0
 8000d34:	2002ea45 	.word	0x2002ea45
 8000d38:	0800d298 	.word	0x0800d298
 8000d3c:	0800d294 	.word	0x0800d294
 8000d40:	2002e844 	.word	0x2002e844

08000d44 <Wifi_GetMode>:
//#########################################################################################################
bool Wifi_GetMode(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af02      	add	r7, sp, #8
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 8000d4a:	4b27      	ldr	r3, [pc, #156]	; (8000de8 <Wifi_GetMode+0xa4>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f04f 31ff 	mov.w	r1, #4294967295
 8000d52:	4618      	mov	r0, r3
 8000d54:	f008 fbe0 	bl	8009518 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 8000d5c:	f7ff fd40 	bl	80007e0 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWMODE_CUR?\r\n");
 8000d60:	4922      	ldr	r1, [pc, #136]	; (8000dec <Wifi_GetMode+0xa8>)
 8000d62:	4823      	ldr	r0, [pc, #140]	; (8000df0 <Wifi_GetMode+0xac>)
 8000d64:	f00b f918 	bl	800bf98 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8000d68:	4821      	ldr	r0, [pc, #132]	; (8000df0 <Wifi_GetMode+0xac>)
 8000d6a:	f7ff fc3b 	bl	80005e4 <Wifi_SendString>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	f083 0301 	eor.w	r3, r3, #1
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d126      	bne.n	8000dc8 <Wifi_GetMode+0x84>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8000d7a:	1db9      	adds	r1, r7, #6
 8000d7c:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <Wifi_GetMode+0xb0>)
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <Wifi_GetMode+0xb4>)
 8000d82:	2202      	movs	r2, #2
 8000d84:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d88:	f7ff fc3e 	bl	8000608 <Wifi_WaitForString>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	f083 0301 	eor.w	r3, r3, #1
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d119      	bne.n	8000dcc <Wifi_GetMode+0x88>
			break;
		if(result == 2)
 8000d98:	79bb      	ldrb	r3, [r7, #6]
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d018      	beq.n	8000dd0 <Wifi_GetMode+0x8c>
			break;			
		if(Wifi_ReturnInteger((int32_t*)&result,1,":"))
 8000d9e:	1dbb      	adds	r3, r7, #6
 8000da0:	4a16      	ldr	r2, [pc, #88]	; (8000dfc <Wifi_GetMode+0xb8>)
 8000da2:	2101      	movs	r1, #1
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fcf9 	bl	800079c <Wifi_ReturnInteger>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d004      	beq.n	8000dba <Wifi_GetMode+0x76>
			Wifi.Mode = (WifiMode_t)result ;
 8000db0:	79ba      	ldrb	r2, [r7, #6]
 8000db2:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <Wifi_GetMode+0xbc>)
 8000db4:	f883 271a 	strb.w	r2, [r3, #1818]	; 0x71a
 8000db8:	e003      	b.n	8000dc2 <Wifi_GetMode+0x7e>
		else
			Wifi.Mode = WifiMode_Error;
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <Wifi_GetMode+0xbc>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 271a 	strb.w	r2, [r3, #1818]	; 0x71a
		returnVal=true;	
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	71fb      	strb	r3, [r7, #7]
 8000dc6:	e004      	b.n	8000dd2 <Wifi_GetMode+0x8e>
			break;
 8000dc8:	bf00      	nop
 8000dca:	e002      	b.n	8000dd2 <Wifi_GetMode+0x8e>
			break;
 8000dcc:	bf00      	nop
 8000dce:	e000      	b.n	8000dd2 <Wifi_GetMode+0x8e>
			break;			
 8000dd0:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <Wifi_GetMode+0xa4>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f008 fbec 	bl	80095b4 <osSemaphoreRelease>
	return returnVal;
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	2002e840 	.word	0x2002e840
 8000dec:	0800d2f4 	.word	0x0800d2f4
 8000df0:	2002ea45 	.word	0x2002ea45
 8000df4:	0800d298 	.word	0x0800d298
 8000df8:	0800d294 	.word	0x0800d294
 8000dfc:	0800d308 	.word	0x0800d308
 8000e00:	2002e844 	.word	0x2002e844

08000e04 <Wifi_Station_ConnectToAp>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool	Wifi_Station_ConnectToAp(char *SSID,char *Pass,char *MAC)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af02      	add	r7, sp, #8
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 8000e10:	4b29      	ldr	r3, [pc, #164]	; (8000eb8 <Wifi_Station_ConnectToAp+0xb4>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f008 fb7d 	bl	8009518 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	75fb      	strb	r3, [r7, #23]
	do
	{
		Wifi_RxClear();
 8000e22:	f7ff fcdd 	bl	80007e0 <Wifi_RxClear>
		if(MAC==NULL)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d106      	bne.n	8000e3a <Wifi_Station_ConnectToAp+0x36>
		{
			//sprintf((char*)Wifi.TxBuffer,"AT+CWJAP_CUR=\"%s\",\"%s\"\r\n",SSID,Pass);
			sprintf((char*)Wifi.TxBuffer,"AT+CWJAP=\"%s\",\"%s\"\r\n",SSID,Pass);
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	4922      	ldr	r1, [pc, #136]	; (8000ebc <Wifi_Station_ConnectToAp+0xb8>)
 8000e32:	4823      	ldr	r0, [pc, #140]	; (8000ec0 <Wifi_Station_ConnectToAp+0xbc>)
 8000e34:	f00b f8b0 	bl	800bf98 <siprintf>
 8000e38:	e007      	b.n	8000e4a <Wifi_Station_ConnectToAp+0x46>
		}
		else
		{
			//sprintf((char*)Wifi.TxBuffer,"AT+CWJAP_CUR=\"%s\",\"%s\",\"%s\"\r\n",SSID,Pass,MAC);
			sprintf((char*)Wifi.TxBuffer,"AT+CWJAP=\"%s\",\"%s\",\"%s\"\r\n",SSID,Pass,MAC);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	4920      	ldr	r1, [pc, #128]	; (8000ec4 <Wifi_Station_ConnectToAp+0xc0>)
 8000e44:	481e      	ldr	r0, [pc, #120]	; (8000ec0 <Wifi_Station_ConnectToAp+0xbc>)
 8000e46:	f00b f8a7 	bl	800bf98 <siprintf>
		}
		if (Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8000e4a:	481d      	ldr	r0, [pc, #116]	; (8000ec0 <Wifi_Station_ConnectToAp+0xbc>)
 8000e4c:	f7ff fbca 	bl	80005e4 <Wifi_SendString>
 8000e50:	4603      	mov	r3, r0
 8000e52:	f083 0301 	eor.w	r3, r3, #1
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d007      	beq.n	8000e6c <Wifi_Station_ConnectToAp+0x68>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)"111\r\n", (uint16_t)strlen("111\r\n"), 1000);
 8000e5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e60:	2205      	movs	r2, #5
 8000e62:	4919      	ldr	r1, [pc, #100]	; (8000ec8 <Wifi_Station_ConnectToAp+0xc4>)
 8000e64:	4819      	ldr	r0, [pc, #100]	; (8000ecc <Wifi_Station_ConnectToAp+0xc8>)
 8000e66:	f007 fb18 	bl	800849a <HAL_UART_Transmit>
			break;
 8000e6a:	e01b      	b.n	8000ea4 <Wifi_Station_ConnectToAp+0xa0>
		}
		if (Wifi_WaitForString(_WIFI_WAIT_TIME_VERYHIGH,&result,3,"\r\nOK\r\n","\r\nERROR\r\n","\r\nFAIL\r\n")==false)
 8000e6c:	f107 0116 	add.w	r1, r7, #22
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <Wifi_Station_ConnectToAp+0xcc>)
 8000e72:	9301      	str	r3, [sp, #4]
 8000e74:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <Wifi_Station_ConnectToAp+0xd0>)
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <Wifi_Station_ConnectToAp+0xd4>)
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000e80:	f7ff fbc2 	bl	8000608 <Wifi_WaitForString>
 8000e84:	4603      	mov	r3, r0
 8000e86:	f083 0301 	eor.w	r3, r3, #1
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d007      	beq.n	8000ea0 <Wifi_Station_ConnectToAp+0x9c>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)"ERROR!!!!!!!!!!!!!\r\n", (uint16_t)strlen("ERROR!!!!!!!!!!!!!\r\n"), 1000);
 8000e90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e94:	2214      	movs	r2, #20
 8000e96:	4911      	ldr	r1, [pc, #68]	; (8000edc <Wifi_Station_ConnectToAp+0xd8>)
 8000e98:	480c      	ldr	r0, [pc, #48]	; (8000ecc <Wifi_Station_ConnectToAp+0xc8>)
 8000e9a:	f007 fafe 	bl	800849a <HAL_UART_Transmit>
			break;
 8000e9e:	e001      	b.n	8000ea4 <Wifi_Station_ConnectToAp+0xa0>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)"222\r\n", (uint16_t)strlen("222\r\n"), 1000);
			break;
		}
#endif
		returnVal=true;	
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	75fb      	strb	r3, [r7, #23]
	}while(0);

	osSemaphoreRelease(WifiSemHandle);
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <Wifi_Station_ConnectToAp+0xb4>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f008 fb83 	bl	80095b4 <osSemaphoreRelease>
	return returnVal;		
 8000eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	2002e840 	.word	0x2002e840
 8000ebc:	0800d378 	.word	0x0800d378
 8000ec0:	2002ea45 	.word	0x2002ea45
 8000ec4:	0800d390 	.word	0x0800d390
 8000ec8:	0800d3ac 	.word	0x0800d3ac
 8000ecc:	2002f25c 	.word	0x2002f25c
 8000ed0:	0800d3bc 	.word	0x0800d3bc
 8000ed4:	0800d3c8 	.word	0x0800d3c8
 8000ed8:	0800d3b4 	.word	0x0800d3b4
 8000edc:	0800d3d4 	.word	0x0800d3d4

08000ee0 <Wifi_Station_DhcpIsEnable>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;		
}
//#########################################################################################################
bool	Wifi_Station_DhcpIsEnable(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af02      	add	r7, sp, #8
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 8000ee6:	4b3e      	ldr	r3, [pc, #248]	; (8000fe0 <Wifi_Station_DhcpIsEnable+0x100>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f04f 31ff 	mov.w	r1, #4294967295
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f008 fb12 	bl	8009518 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 8000ef8:	f7ff fc72 	bl	80007e0 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWDHCP_CUR?\r\n");
 8000efc:	4939      	ldr	r1, [pc, #228]	; (8000fe4 <Wifi_Station_DhcpIsEnable+0x104>)
 8000efe:	483a      	ldr	r0, [pc, #232]	; (8000fe8 <Wifi_Station_DhcpIsEnable+0x108>)
 8000f00:	f00b f84a 	bl	800bf98 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8000f04:	4838      	ldr	r0, [pc, #224]	; (8000fe8 <Wifi_Station_DhcpIsEnable+0x108>)
 8000f06:	f7ff fb6d 	bl	80005e4 <Wifi_SendString>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	f083 0301 	eor.w	r3, r3, #1
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d153      	bne.n	8000fbe <Wifi_Station_DhcpIsEnable+0xde>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8000f16:	1db9      	adds	r1, r7, #6
 8000f18:	4b34      	ldr	r3, [pc, #208]	; (8000fec <Wifi_Station_DhcpIsEnable+0x10c>)
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	4b34      	ldr	r3, [pc, #208]	; (8000ff0 <Wifi_Station_DhcpIsEnable+0x110>)
 8000f1e:	2202      	movs	r2, #2
 8000f20:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f24:	f7ff fb70 	bl	8000608 <Wifi_WaitForString>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	f083 0301 	eor.w	r3, r3, #1
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d146      	bne.n	8000fc2 <Wifi_Station_DhcpIsEnable+0xe2>
			break;
		if(result == 2)
 8000f34:	79bb      	ldrb	r3, [r7, #6]
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d045      	beq.n	8000fc6 <Wifi_Station_DhcpIsEnable+0xe6>
			break;		
		if(Wifi_ReturnInteger((int32_t*)&result,1,":")==false)
 8000f3a:	1dbb      	adds	r3, r7, #6
 8000f3c:	4a2d      	ldr	r2, [pc, #180]	; (8000ff4 <Wifi_Station_DhcpIsEnable+0x114>)
 8000f3e:	2101      	movs	r1, #1
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fc2b 	bl	800079c <Wifi_ReturnInteger>
 8000f46:	4603      	mov	r3, r0
 8000f48:	f083 0301 	eor.w	r3, r3, #1
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d13b      	bne.n	8000fca <Wifi_Station_DhcpIsEnable+0xea>
			break;
		switch(result)
 8000f52:	79bb      	ldrb	r3, [r7, #6]
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d82f      	bhi.n	8000fb8 <Wifi_Station_DhcpIsEnable+0xd8>
 8000f58:	a201      	add	r2, pc, #4	; (adr r2, 8000f60 <Wifi_Station_DhcpIsEnable+0x80>)
 8000f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5e:	bf00      	nop
 8000f60:	08000f71 	.word	0x08000f71
 8000f64:	08000f83 	.word	0x08000f83
 8000f68:	08000f95 	.word	0x08000f95
 8000f6c:	08000fa7 	.word	0x08000fa7
		{
			case 0:
				Wifi.StationDhcp=false;
 8000f70:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <Wifi_Station_DhcpIsEnable+0x118>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
				Wifi.SoftApDhcp=false;				
 8000f78:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <Wifi_Station_DhcpIsEnable+0x118>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
			break;
 8000f80:	e01a      	b.n	8000fb8 <Wifi_Station_DhcpIsEnable+0xd8>
			case 1:
				Wifi.StationDhcp=false;
 8000f82:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <Wifi_Station_DhcpIsEnable+0x118>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
				Wifi.SoftApDhcp=true;				
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <Wifi_Station_DhcpIsEnable+0x118>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
			break;
 8000f92:	e011      	b.n	8000fb8 <Wifi_Station_DhcpIsEnable+0xd8>
			case 2:
				Wifi.StationDhcp=true;
 8000f94:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <Wifi_Station_DhcpIsEnable+0x118>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
				Wifi.SoftApDhcp=false;				
 8000f9c:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <Wifi_Station_DhcpIsEnable+0x118>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
			break;
 8000fa4:	e008      	b.n	8000fb8 <Wifi_Station_DhcpIsEnable+0xd8>
			case 3:
				Wifi.StationDhcp=true;
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <Wifi_Station_DhcpIsEnable+0x118>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
				Wifi.SoftApDhcp=true;				
 8000fae:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <Wifi_Station_DhcpIsEnable+0x118>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
			break;			
 8000fb6:	bf00      	nop
		}
		returnVal=true;	
 8000fb8:	2301      	movs	r3, #1
 8000fba:	71fb      	strb	r3, [r7, #7]
 8000fbc:	e006      	b.n	8000fcc <Wifi_Station_DhcpIsEnable+0xec>
			break;
 8000fbe:	bf00      	nop
 8000fc0:	e004      	b.n	8000fcc <Wifi_Station_DhcpIsEnable+0xec>
			break;
 8000fc2:	bf00      	nop
 8000fc4:	e002      	b.n	8000fcc <Wifi_Station_DhcpIsEnable+0xec>
			break;		
 8000fc6:	bf00      	nop
 8000fc8:	e000      	b.n	8000fcc <Wifi_Station_DhcpIsEnable+0xec>
			break;
 8000fca:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <Wifi_Station_DhcpIsEnable+0x100>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f008 faef 	bl	80095b4 <osSemaphoreRelease>
	return returnVal;		
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2002e840 	.word	0x2002e840
 8000fe4:	0800d410 	.word	0x0800d410
 8000fe8:	2002ea45 	.word	0x2002ea45
 8000fec:	0800d298 	.word	0x0800d298
 8000ff0:	0800d294 	.word	0x0800d294
 8000ff4:	0800d308 	.word	0x0800d308
 8000ff8:	2002e844 	.word	0x2002e844

08000ffc <Wifi_TcpIp_SetMultiConnection>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;		
}
//#########################################################################################################
bool  Wifi_TcpIp_SetMultiConnection(bool EnableMultiConnections)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af02      	add	r7, sp, #8
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <Wifi_TcpIp_SetMultiConnection+0x90>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f04f 31ff 	mov.w	r1, #4294967295
 800100e:	4618      	mov	r0, r3
 8001010:	f008 fa82 	bl	8009518 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8001014:	2300      	movs	r3, #0
 8001016:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8001018:	f7ff fbe2 	bl	80007e0 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPMUX=%d\r\n",EnableMultiConnections);
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	461a      	mov	r2, r3
 8001020:	491b      	ldr	r1, [pc, #108]	; (8001090 <Wifi_TcpIp_SetMultiConnection+0x94>)
 8001022:	481c      	ldr	r0, [pc, #112]	; (8001094 <Wifi_TcpIp_SetMultiConnection+0x98>)
 8001024:	f00a ffb8 	bl	800bf98 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8001028:	481a      	ldr	r0, [pc, #104]	; (8001094 <Wifi_TcpIp_SetMultiConnection+0x98>)
 800102a:	f7ff fadb 	bl	80005e4 <Wifi_SendString>
 800102e:	4603      	mov	r3, r0
 8001030:	f083 0301 	eor.w	r3, r3, #1
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d119      	bne.n	800106e <Wifi_TcpIp_SetMultiConnection+0x72>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800103a:	f107 010e 	add.w	r1, r7, #14
 800103e:	4b16      	ldr	r3, [pc, #88]	; (8001098 <Wifi_TcpIp_SetMultiConnection+0x9c>)
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <Wifi_TcpIp_SetMultiConnection+0xa0>)
 8001044:	2202      	movs	r2, #2
 8001046:	f241 3088 	movw	r0, #5000	; 0x1388
 800104a:	f7ff fadd 	bl	8000608 <Wifi_WaitForString>
 800104e:	4603      	mov	r3, r0
 8001050:	f083 0301 	eor.w	r3, r3, #1
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d10b      	bne.n	8001072 <Wifi_TcpIp_SetMultiConnection+0x76>
			break;
		if(result == 2)
 800105a:	7bbb      	ldrb	r3, [r7, #14]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d00a      	beq.n	8001076 <Wifi_TcpIp_SetMultiConnection+0x7a>
			break;				
    Wifi.TcpIpMultiConnection=EnableMultiConnections;		
 8001060:	4a0f      	ldr	r2, [pc, #60]	; (80010a0 <Wifi_TcpIp_SetMultiConnection+0xa4>)
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	f882 3819 	strb.w	r3, [r2, #2073]	; 0x819
		returnVal=true;	
 8001068:	2301      	movs	r3, #1
 800106a:	73fb      	strb	r3, [r7, #15]
 800106c:	e004      	b.n	8001078 <Wifi_TcpIp_SetMultiConnection+0x7c>
			break;
 800106e:	bf00      	nop
 8001070:	e002      	b.n	8001078 <Wifi_TcpIp_SetMultiConnection+0x7c>
			break;
 8001072:	bf00      	nop
 8001074:	e000      	b.n	8001078 <Wifi_TcpIp_SetMultiConnection+0x7c>
			break;				
 8001076:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <Wifi_TcpIp_SetMultiConnection+0x90>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f008 fa99 	bl	80095b4 <osSemaphoreRelease>
	return returnVal;			
 8001082:	7bfb      	ldrb	r3, [r7, #15]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	2002e840 	.word	0x2002e840
 8001090:	0800d4dc 	.word	0x0800d4dc
 8001094:	2002ea45 	.word	0x2002ea45
 8001098:	0800d298 	.word	0x0800d298
 800109c:	0800d294 	.word	0x0800d294
 80010a0:	2002e844 	.word	0x2002e844

080010a4 <Wifi_TcpIp_GetMultiConnection>:
//#########################################################################################################
bool  Wifi_TcpIp_GetMultiConnection(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af02      	add	r7, sp, #8
  
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 80010aa:	4b29      	ldr	r3, [pc, #164]	; (8001150 <Wifi_TcpIp_GetMultiConnection+0xac>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f04f 31ff 	mov.w	r1, #4294967295
 80010b2:	4618      	mov	r0, r3
 80010b4:	f008 fa30 	bl	8009518 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 80010b8:	2300      	movs	r3, #0
 80010ba:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 80010bc:	f7ff fb90 	bl	80007e0 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPMUX?\r\n");
 80010c0:	4924      	ldr	r1, [pc, #144]	; (8001154 <Wifi_TcpIp_GetMultiConnection+0xb0>)
 80010c2:	4825      	ldr	r0, [pc, #148]	; (8001158 <Wifi_TcpIp_GetMultiConnection+0xb4>)
 80010c4:	f00a ff68 	bl	800bf98 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80010c8:	4823      	ldr	r0, [pc, #140]	; (8001158 <Wifi_TcpIp_GetMultiConnection+0xb4>)
 80010ca:	f7ff fa8b 	bl	80005e4 <Wifi_SendString>
 80010ce:	4603      	mov	r3, r0
 80010d0:	f083 0301 	eor.w	r3, r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d129      	bne.n	800112e <Wifi_TcpIp_GetMultiConnection+0x8a>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 80010da:	1db9      	adds	r1, r7, #6
 80010dc:	4b1f      	ldr	r3, [pc, #124]	; (800115c <Wifi_TcpIp_GetMultiConnection+0xb8>)
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <Wifi_TcpIp_GetMultiConnection+0xbc>)
 80010e2:	2202      	movs	r2, #2
 80010e4:	f241 3088 	movw	r0, #5000	; 0x1388
 80010e8:	f7ff fa8e 	bl	8000608 <Wifi_WaitForString>
 80010ec:	4603      	mov	r3, r0
 80010ee:	f083 0301 	eor.w	r3, r3, #1
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d11c      	bne.n	8001132 <Wifi_TcpIp_GetMultiConnection+0x8e>
			break;
		if(result == 2)
 80010f8:	79bb      	ldrb	r3, [r7, #6]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d01b      	beq.n	8001136 <Wifi_TcpIp_GetMultiConnection+0x92>
			break;				
    if(Wifi_ReturnInteger((int32_t*)&result,1,":")==false)
 80010fe:	1dbb      	adds	r3, r7, #6
 8001100:	4a18      	ldr	r2, [pc, #96]	; (8001164 <Wifi_TcpIp_GetMultiConnection+0xc0>)
 8001102:	2101      	movs	r1, #1
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fb49 	bl	800079c <Wifi_ReturnInteger>
 800110a:	4603      	mov	r3, r0
 800110c:	f083 0301 	eor.w	r3, r3, #1
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d111      	bne.n	800113a <Wifi_TcpIp_GetMultiConnection+0x96>
      break;
    Wifi.TcpIpMultiConnection=(bool)result;		
 8001116:	79bb      	ldrb	r3, [r7, #6]
 8001118:	2b00      	cmp	r3, #0
 800111a:	bf14      	ite	ne
 800111c:	2301      	movne	r3, #1
 800111e:	2300      	moveq	r3, #0
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <Wifi_TcpIp_GetMultiConnection+0xc4>)
 8001124:	f883 2819 	strb.w	r2, [r3, #2073]	; 0x819
		returnVal=true;	
 8001128:	2301      	movs	r3, #1
 800112a:	71fb      	strb	r3, [r7, #7]
 800112c:	e006      	b.n	800113c <Wifi_TcpIp_GetMultiConnection+0x98>
			break;
 800112e:	bf00      	nop
 8001130:	e004      	b.n	800113c <Wifi_TcpIp_GetMultiConnection+0x98>
			break;
 8001132:	bf00      	nop
 8001134:	e002      	b.n	800113c <Wifi_TcpIp_GetMultiConnection+0x98>
			break;				
 8001136:	bf00      	nop
 8001138:	e000      	b.n	800113c <Wifi_TcpIp_GetMultiConnection+0x98>
      break;
 800113a:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <Wifi_TcpIp_GetMultiConnection+0xac>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f008 fa37 	bl	80095b4 <osSemaphoreRelease>
	return returnVal;			
 8001146:	79fb      	ldrb	r3, [r7, #7]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2002e840 	.word	0x2002e840
 8001154:	0800d4ec 	.word	0x0800d4ec
 8001158:	2002ea45 	.word	0x2002ea45
 800115c:	0800d298 	.word	0x0800d298
 8001160:	0800d294 	.word	0x0800d294
 8001164:	0800d308 	.word	0x0800d308
 8001168:	2002e844 	.word	0x2002e844

0800116c <Wifi_TcpIp_Close>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;		
}
//#########################################################################################################
bool  Wifi_TcpIp_Close(uint8_t LinkId)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af02      	add	r7, sp, #8
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 8001176:	4b26      	ldr	r3, [pc, #152]	; (8001210 <Wifi_TcpIp_Close+0xa4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f04f 31ff 	mov.w	r1, #4294967295
 800117e:	4618      	mov	r0, r3
 8001180:	f008 f9ca 	bl	8009518 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8001184:	2300      	movs	r3, #0
 8001186:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8001188:	f7ff fb2a 	bl	80007e0 <Wifi_RxClear>
    if(Wifi.TcpIpMultiConnection==false)
 800118c:	4b21      	ldr	r3, [pc, #132]	; (8001214 <Wifi_TcpIp_Close+0xa8>)
 800118e:	f893 3819 	ldrb.w	r3, [r3, #2073]	; 0x819
 8001192:	f083 0301 	eor.w	r3, r3, #1
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	d004      	beq.n	80011a6 <Wifi_TcpIp_Close+0x3a>
      sprintf((char*)Wifi.TxBuffer,"AT+CIPCLOSE\r\n");
 800119c:	491e      	ldr	r1, [pc, #120]	; (8001218 <Wifi_TcpIp_Close+0xac>)
 800119e:	481f      	ldr	r0, [pc, #124]	; (800121c <Wifi_TcpIp_Close+0xb0>)
 80011a0:	f00a fefa 	bl	800bf98 <siprintf>
 80011a4:	e005      	b.n	80011b2 <Wifi_TcpIp_Close+0x46>
    else
      sprintf((char*)Wifi.TxBuffer,"AT+CIPCLOSE=%d\r\n",LinkId);
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	461a      	mov	r2, r3
 80011aa:	491d      	ldr	r1, [pc, #116]	; (8001220 <Wifi_TcpIp_Close+0xb4>)
 80011ac:	481b      	ldr	r0, [pc, #108]	; (800121c <Wifi_TcpIp_Close+0xb0>)
 80011ae:	f00a fef3 	bl	800bf98 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80011b2:	481a      	ldr	r0, [pc, #104]	; (800121c <Wifi_TcpIp_Close+0xb0>)
 80011b4:	f7ff fa16 	bl	80005e4 <Wifi_SendString>
 80011b8:	4603      	mov	r3, r0
 80011ba:	f083 0301 	eor.w	r3, r3, #1
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d115      	bne.n	80011f0 <Wifi_TcpIp_Close+0x84>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 80011c4:	f107 010e 	add.w	r1, r7, #14
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <Wifi_TcpIp_Close+0xb8>)
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <Wifi_TcpIp_Close+0xbc>)
 80011ce:	2202      	movs	r2, #2
 80011d0:	f241 3088 	movw	r0, #5000	; 0x1388
 80011d4:	f7ff fa18 	bl	8000608 <Wifi_WaitForString>
 80011d8:	4603      	mov	r3, r0
 80011da:	f083 0301 	eor.w	r3, r3, #1
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d107      	bne.n	80011f4 <Wifi_TcpIp_Close+0x88>
			break;
		if(result == 2)
 80011e4:	7bbb      	ldrb	r3, [r7, #14]
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d006      	beq.n	80011f8 <Wifi_TcpIp_Close+0x8c>
			break;		
		returnVal=true;	
 80011ea:	2301      	movs	r3, #1
 80011ec:	73fb      	strb	r3, [r7, #15]
 80011ee:	e004      	b.n	80011fa <Wifi_TcpIp_Close+0x8e>
			break;
 80011f0:	bf00      	nop
 80011f2:	e002      	b.n	80011fa <Wifi_TcpIp_Close+0x8e>
			break;
 80011f4:	bf00      	nop
 80011f6:	e000      	b.n	80011fa <Wifi_TcpIp_Close+0x8e>
			break;		
 80011f8:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <Wifi_TcpIp_Close+0xa4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f008 f9d8 	bl	80095b4 <osSemaphoreRelease>
	return returnVal;		
 8001204:	7bfb      	ldrb	r3, [r7, #15]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2002e840 	.word	0x2002e840
 8001214:	2002e844 	.word	0x2002e844
 8001218:	0800d5a8 	.word	0x0800d5a8
 800121c:	2002ea45 	.word	0x2002ea45
 8001220:	0800d5b8 	.word	0x0800d5b8
 8001224:	0800d298 	.word	0x0800d298
 8001228:	0800d294 	.word	0x0800d294

0800122c <HAL_UART_RxCpltCallback>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
    if (huart->Instance == huart6.Instance)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <HAL_UART_RxCpltCallback+0x20>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	429a      	cmp	r2, r3
 800123e:	d101      	bne.n	8001244 <HAL_UART_RxCpltCallback+0x18>
    {
    	//HAL_UART_Transmit(&huart1, (uint8_t *)"Hi~~\r\n", (uint16_t)strlen("Hi~~\r\n"), 1000);
    	Wifi_RxCallBack();
 8001240:	f7ff faf4 	bl	800082c <Wifi_RxCallBack>
    }
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	2002f2a4 	.word	0x2002f2a4

08001250 <Wifi_UserInit>:

#include "Wifi.h"

//#######################################################################################
void Wifi_UserInit(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	Wifi_SetMode(WifiMode_Station);
 8001254:	2001      	movs	r0, #1
 8001256:	f7ff fd21 	bl	8000c9c <Wifi_SetMode>
  //Wifi_SetMode(WifiMode_SoftAp); 

  //while (Wifi_Station_ConnectToAp("L70_9587","33559366",NULL) == false);
	while (Wifi_Station_ConnectToAp("U+NetC568","P91352@4BB",NULL) == false);
 800125a:	bf00      	nop
 800125c:	2200      	movs	r2, #0
 800125e:	4906      	ldr	r1, [pc, #24]	; (8001278 <Wifi_UserInit+0x28>)
 8001260:	4806      	ldr	r0, [pc, #24]	; (800127c <Wifi_UserInit+0x2c>)
 8001262:	f7ff fdcf 	bl	8000e04 <Wifi_Station_ConnectToAp>
 8001266:	4603      	mov	r3, r0
 8001268:	f083 0301 	eor.w	r3, r3, #1
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f4      	bne.n	800125c <Wifi_UserInit+0xc>
 
    
}
 8001272:	bf00      	nop
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	0800d6b4 	.word	0x0800d6b4
 800127c:	0800d6c0 	.word	0x0800d6c0

08001280 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4a07      	ldr	r2, [pc, #28]	; (80012ac <vApplicationGetIdleTaskMemory+0x2c>)
 8001290:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	4a06      	ldr	r2, [pc, #24]	; (80012b0 <vApplicationGetIdleTaskMemory+0x30>)
 8001296:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800129e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	20000124 	.word	0x20000124
 80012b0:	200001d8 	.word	0x200001d8

080012b4 <lcdInit>:
osSemaphoreId 	lcdHandle;

static uint16_t frame_buffer[76800];

void lcdInit(osPriority	Priority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08c      	sub	sp, #48	; 0x30
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	80fb      	strh	r3, [r7, #6]
	osSemaphoreDef(lcdHandle);
 80012be:	2300      	movs	r3, #0
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80012c2:	2300      	movs	r3, #0
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	lcdHandle = osSemaphoreCreate(osSemaphore(lcdHandle), 1);
 80012c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ca:	2101      	movs	r1, #1
 80012cc:	4618      	mov	r0, r3
 80012ce:	f008 f8f0 	bl	80094b2 <osSemaphoreCreate>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <lcdInit+0x5c>)
 80012d6:	6013      	str	r3, [r2, #0]
	osThreadDef(lcdTaskName, lcdTask, Priority, 0, _LCD_TASK_SIZE);
 80012d8:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <lcdInit+0x60>)
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <lcdInit+0x64>)
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	82bb      	strh	r3, [r7, #20]
 80012e4:	2300      	movs	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
 80012e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ec:	61fb      	str	r3, [r7, #28]
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
	lcdTaskHandle = osThreadCreate(osThread(lcdTaskName), NULL);
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f008 f878 	bl	80093f2 <osThreadCreate>
 8001302:	4603      	mov	r3, r0
 8001304:	4a05      	ldr	r2, [pc, #20]	; (800131c <lcdInit+0x68>)
 8001306:	6013      	str	r3, [r2, #0]
}
 8001308:	bf00      	nop
 800130a:	3730      	adds	r7, #48	; 0x30
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	2002f100 	.word	0x2002f100
 8001314:	0800d6d8 	.word	0x0800d6d8
 8001318:	08001321 	.word	0x08001321
 800131c:	2002f0fc 	.word	0x2002f0fc

08001320 <lcdTask>:

void lcdTask(void const * argument)
{
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b093      	sub	sp, #76	; 0x4c
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	  TS_StateTypeDef  TS_State;

	  static uint32_t x = 0, y = 0;
	  uint8_t buffer_str[50]={0,};
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	222e      	movs	r2, #46	; 0x2e
 8001332:	2100      	movs	r1, #0
 8001334:	4618      	mov	r0, r3
 8001336:	f00a fd1e 	bl	800bd76 <memset>

	  BSP_LCD_Init();
 800133a:	f002 f981 	bl	8003640 <BSP_LCD_Init>
	  BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, (uint32_t)frame_buffer);
 800133e:	4b3c      	ldr	r3, [pc, #240]	; (8001430 <lcdTask+0x110>)
 8001340:	4619      	mov	r1, r3
 8001342:	2000      	movs	r0, #0
 8001344:	f002 f9fc 	bl	8003740 <BSP_LCD_LayerDefaultInit>
	  BSP_LCD_SelectLayer(LCD_BACKGROUND_LAYER);
 8001348:	2000      	movs	r0, #0
 800134a:	f002 fa55 	bl	80037f8 <BSP_LCD_SelectLayer>
	  BSP_LCD_DisplayOn();
 800134e:	f002 fbd9 	bl	8003b04 <BSP_LCD_DisplayOn>
	  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001352:	f04f 30ff 	mov.w	r0, #4294967295
 8001356:	f002 faab 	bl	80038b0 <BSP_LCD_Clear>

	  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800135a:	f002 f9d9 	bl	8003710 <BSP_LCD_GetXSize>
 800135e:	4603      	mov	r3, r0
 8001360:	b29c      	uxth	r4, r3
 8001362:	f002 f9e1 	bl	8003728 <BSP_LCD_GetYSize>
 8001366:	4603      	mov	r3, r0
 8001368:	b29b      	uxth	r3, r3
 800136a:	4619      	mov	r1, r3
 800136c:	4620      	mov	r0, r4
 800136e:	f002 fdc7 	bl	8003f00 <BSP_TS_Init>


	  BSP_LCD_SetBackColor(RGB_LCD_COLOR_WHITE);
 8001372:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001376:	f002 fa67 	bl	8003848 <BSP_LCD_SetBackColor>
	  BSP_LCD_SetTextColor(RGB_LCD_COLOR_BLACK);
 800137a:	2000      	movs	r0, #0
 800137c:	f002 fa4c 	bl	8003818 <BSP_LCD_SetTextColor>
	  BSP_LCD_SetFont(&LCD_20_FONT);
 8001380:	482c      	ldr	r0, [pc, #176]	; (8001434 <lcdTask+0x114>)
 8001382:	f002 fa7b 	bl	800387c <BSP_LCD_SetFont>
	  BSP_LCD_DisplayStringAt(0,150, (uint8_t*)"Welcome", CENTER_MODE);
 8001386:	2301      	movs	r3, #1
 8001388:	4a2b      	ldr	r2, [pc, #172]	; (8001438 <lcdTask+0x118>)
 800138a:	2196      	movs	r1, #150	; 0x96
 800138c:	2000      	movs	r0, #0
 800138e:	f002 fafb 	bl	8003988 <BSP_LCD_DisplayStringAt>
	  BSP_LCD_SetFont(&LCD_16_FONT);
 8001392:	482a      	ldr	r0, [pc, #168]	; (800143c <lcdTask+0x11c>)
 8001394:	f002 fa72 	bl	800387c <BSP_LCD_SetFont>
	  BSP_LCD_DisplayStringAt(0,180, (uint8_t*)"STM32", CENTER_MODE);
 8001398:	2301      	movs	r3, #1
 800139a:	4a29      	ldr	r2, [pc, #164]	; (8001440 <lcdTask+0x120>)
 800139c:	21b4      	movs	r1, #180	; 0xb4
 800139e:	2000      	movs	r0, #0
 80013a0:	f002 faf2 	bl	8003988 <BSP_LCD_DisplayStringAt>
	  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80013a4:	4827      	ldr	r0, [pc, #156]	; (8001444 <lcdTask+0x124>)
 80013a6:	f002 fa69 	bl	800387c <BSP_LCD_SetFont>

	  while (1)
	  {
		    BSP_TS_GetState(&TS_State);
 80013aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013ae:	4618      	mov	r0, r3
 80013b0:	f002 fde0 	bl	8003f74 <BSP_TS_GetState>
		    if ((TS_State.TouchDetected))
 80013b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0f6      	beq.n	80013aa <lcdTask+0x8a>
		    {
		      x = TS_State.X;
 80013bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b21      	ldr	r3, [pc, #132]	; (8001448 <lcdTask+0x128>)
 80013c4:	601a      	str	r2, [r3, #0]
		      y = TS_State.Y;
 80013c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b1f      	ldr	r3, [pc, #124]	; (800144c <lcdTask+0x12c>)
 80013ce:	601a      	str	r2, [r3, #0]
		      sprintf((char *)buffer_str, "X=%d   ",(int)x);
 80013d0:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <lcdTask+0x128>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	f107 030c 	add.w	r3, r7, #12
 80013da:	491d      	ldr	r1, [pc, #116]	; (8001450 <lcdTask+0x130>)
 80013dc:	4618      	mov	r0, r3
 80013de:	f00a fddb 	bl	800bf98 <siprintf>
		      BSP_LCD_DisplayStringAt(0,50, (uint8_t*)buffer_str, LEFT_MODE);
 80013e2:	f107 020c 	add.w	r2, r7, #12
 80013e6:	2303      	movs	r3, #3
 80013e8:	2132      	movs	r1, #50	; 0x32
 80013ea:	2000      	movs	r0, #0
 80013ec:	f002 facc 	bl	8003988 <BSP_LCD_DisplayStringAt>
		      memset(buffer_str,0,50);
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	2232      	movs	r2, #50	; 0x32
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f00a fcbc 	bl	800bd76 <memset>

		      sprintf((char *)buffer_str, "Y=%d   ",(int)y);
 80013fe:	4b13      	ldr	r3, [pc, #76]	; (800144c <lcdTask+0x12c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	4912      	ldr	r1, [pc, #72]	; (8001454 <lcdTask+0x134>)
 800140a:	4618      	mov	r0, r3
 800140c:	f00a fdc4 	bl	800bf98 <siprintf>
		      BSP_LCD_DisplayStringAt(0,100, (uint8_t*)buffer_str, LEFT_MODE);
 8001410:	f107 020c 	add.w	r2, r7, #12
 8001414:	2303      	movs	r3, #3
 8001416:	2164      	movs	r1, #100	; 0x64
 8001418:	2000      	movs	r0, #0
 800141a:	f002 fab5 	bl	8003988 <BSP_LCD_DisplayStringAt>
		      memset(buffer_str,0,50);
 800141e:	f107 030c 	add.w	r3, r7, #12
 8001422:	2232      	movs	r2, #50	; 0x32
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f00a fca5 	bl	800bd76 <memset>
		    BSP_TS_GetState(&TS_State);
 800142c:	e7bd      	b.n	80013aa <lcdTask+0x8a>
 800142e:	bf00      	nop
 8001430:	200005d8 	.word	0x200005d8
 8001434:	20000088 	.word	0x20000088
 8001438:	0800d6e4 	.word	0x0800d6e4
 800143c:	20000080 	.word	0x20000080
 8001440:	0800d6ec 	.word	0x0800d6ec
 8001444:	20000090 	.word	0x20000090
 8001448:	20025dd8 	.word	0x20025dd8
 800144c:	20025ddc 	.word	0x20025ddc
 8001450:	0800d6f4 	.word	0x0800d6f4
 8001454:	0800d6fc 	.word	0x0800d6fc

08001458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001458:	b5b0      	push	{r4, r5, r7, lr}
 800145a:	b08e      	sub	sp, #56	; 0x38
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145e:	f002 fe3b 	bl	80040d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001462:	f000 f845 	bl	80014f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001466:	f000 fa49 	bl	80018fc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800146a:	f000 f9f3 	bl	8001854 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800146e:	f000 fa1b 	bl	80018a8 <MX_USART6_UART_Init>
  MX_LTDC_Init();
 8001472:	f000 f939 	bl	80016e8 <MX_LTDC_Init>
  MX_SPI5_Init();
 8001476:	f000 f9b7 	bl	80017e8 <MX_SPI5_Init>
  MX_DMA2D_Init();
 800147a:	f000 f8c3 	bl	8001604 <MX_DMA2D_Init>
  MX_I2C3_Init();
 800147e:	f000 f8f3 	bl	8001668 <MX_I2C3_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8001482:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <main+0x88>)
 8001484:	f107 041c 	add.w	r4, r7, #28
 8001488:	461d      	mov	r5, r3
 800148a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800148c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800148e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001492:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001496:	f107 031c 	add.w	r3, r7, #28
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f007 ffa8 	bl	80093f2 <osThreadCreate>
 80014a2:	4603      	mov	r3, r0
 80014a4:	4a0f      	ldr	r2, [pc, #60]	; (80014e4 <main+0x8c>)
 80014a6:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityLow, 0, 256);
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <main+0x90>)
 80014aa:	463c      	mov	r4, r7
 80014ac:	461d      	mov	r5, r3
 80014ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80014ba:	463b      	mov	r3, r7
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f007 ff97 	bl	80093f2 <osThreadCreate>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4a09      	ldr	r2, [pc, #36]	; (80014ec <main+0x94>)
 80014c8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  Wifi_Init(osPriorityIdle);
 80014ca:	f06f 0002 	mvn.w	r0, #2
 80014ce:	f7ff fb53 	bl	8000b78 <Wifi_Init>
  lcdInit(osPriorityIdle);
 80014d2:	f06f 0002 	mvn.w	r0, #2
 80014d6:	f7ff feed 	bl	80012b4 <lcdInit>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80014da:	f007 ff83 	bl	80093e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014de:	e7fe      	b.n	80014de <main+0x86>
 80014e0:	0800d71c 	.word	0x0800d71c
 80014e4:	2002f104 	.word	0x2002f104
 80014e8:	0800d738 	.word	0x0800d738
 80014ec:	2002f2a0 	.word	0x2002f2a0

080014f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b0a0      	sub	sp, #128	; 0x80
 80014f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014fa:	2230      	movs	r2, #48	; 0x30
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f00a fc39 	bl	800bd76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001504:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	2230      	movs	r2, #48	; 0x30
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f00a fc2a 	bl	800bd76 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	4b35      	ldr	r3, [pc, #212]	; (80015fc <SystemClock_Config+0x10c>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a34      	ldr	r2, [pc, #208]	; (80015fc <SystemClock_Config+0x10c>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
 8001532:	4b32      	ldr	r3, [pc, #200]	; (80015fc <SystemClock_Config+0x10c>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <SystemClock_Config+0x110>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a2e      	ldr	r2, [pc, #184]	; (8001600 <SystemClock_Config+0x110>)
 8001548:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	4b2c      	ldr	r3, [pc, #176]	; (8001600 <SystemClock_Config+0x110>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800155a:	2302      	movs	r3, #2
 800155c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800155e:	2301      	movs	r3, #1
 8001560:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001562:	2310      	movs	r3, #16
 8001564:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001566:	2302      	movs	r3, #2
 8001568:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800156a:	2300      	movs	r3, #0
 800156c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800156e:	2308      	movs	r3, #8
 8001570:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001572:	23b4      	movs	r3, #180	; 0xb4
 8001574:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001576:	2302      	movs	r3, #2
 8001578:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800157a:	2304      	movs	r3, #4
 800157c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800157e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001582:	4618      	mov	r0, r3
 8001584:	f005 f878 	bl	8006678 <HAL_RCC_OscConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800158e:	f000 fa45 	bl	8001a1c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001592:	f005 f821 	bl	80065d8 <HAL_PWREx_EnableOverDrive>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800159c:	f000 fa3e 	bl	8001a1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a0:	230f      	movs	r3, #15
 80015a2:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a4:	2302      	movs	r3, #2
 80015a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015bc:	2105      	movs	r1, #5
 80015be:	4618      	mov	r0, r3
 80015c0:	f005 fad2 	bl	8006b68 <HAL_RCC_ClockConfig>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <SystemClock_Config+0xde>
  {
    Error_Handler();
 80015ca:	f000 fa27 	bl	8001a1c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80015ce:	2308      	movs	r3, #8
 80015d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 80015d2:	233c      	movs	r3, #60	; 0x3c
 80015d4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80015d6:	2305      	movs	r3, #5
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80015da:	2300      	movs	r3, #0
 80015dc:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	4618      	mov	r0, r3
 80015e4:	f005 fcc2 	bl	8006f6c <HAL_RCCEx_PeriphCLKConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0x102>
  {
    Error_Handler();
 80015ee:	f000 fa15 	bl	8001a1c <Error_Handler>
  }
}
 80015f2:	bf00      	nop
 80015f4:	3780      	adds	r7, #128	; 0x80
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	40007000 	.word	0x40007000

08001604 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001608:	4b15      	ldr	r3, [pc, #84]	; (8001660 <MX_DMA2D_Init+0x5c>)
 800160a:	4a16      	ldr	r2, [pc, #88]	; (8001664 <MX_DMA2D_Init+0x60>)
 800160c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <MX_DMA2D_Init+0x5c>)
 8001610:	2200      	movs	r2, #0
 8001612:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <MX_DMA2D_Init+0x5c>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_DMA2D_Init+0x5c>)
 800161c:	2200      	movs	r2, #0
 800161e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <MX_DMA2D_Init+0x5c>)
 8001622:	2200      	movs	r2, #0
 8001624:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <MX_DMA2D_Init+0x5c>)
 8001628:	2200      	movs	r2, #0
 800162a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <MX_DMA2D_Init+0x5c>)
 800162e:	2200      	movs	r2, #0
 8001630:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <MX_DMA2D_Init+0x5c>)
 8001634:	2200      	movs	r2, #0
 8001636:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001638:	4809      	ldr	r0, [pc, #36]	; (8001660 <MX_DMA2D_Init+0x5c>)
 800163a:	f002 ff27 	bl	800448c <HAL_DMA2D_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001644:	f000 f9ea 	bl	8001a1c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001648:	2101      	movs	r1, #1
 800164a:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_DMA2D_Init+0x5c>)
 800164c:	f003 f87c 	bl	8004748 <HAL_DMA2D_ConfigLayer>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001656:	f000 f9e1 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	2002f2e8 	.word	0x2002f2e8
 8001664:	4002b000 	.word	0x4002b000

08001668 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800166c:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <MX_I2C3_Init+0x74>)
 800166e:	4a1c      	ldr	r2, [pc, #112]	; (80016e0 <MX_I2C3_Init+0x78>)
 8001670:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001672:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <MX_I2C3_Init+0x74>)
 8001674:	4a1b      	ldr	r2, [pc, #108]	; (80016e4 <MX_I2C3_Init+0x7c>)
 8001676:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001678:	4b18      	ldr	r3, [pc, #96]	; (80016dc <MX_I2C3_Init+0x74>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800167e:	4b17      	ldr	r3, [pc, #92]	; (80016dc <MX_I2C3_Init+0x74>)
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001684:	4b15      	ldr	r3, [pc, #84]	; (80016dc <MX_I2C3_Init+0x74>)
 8001686:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800168a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <MX_I2C3_Init+0x74>)
 800168e:	2200      	movs	r2, #0
 8001690:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <MX_I2C3_Init+0x74>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001698:	4b10      	ldr	r3, [pc, #64]	; (80016dc <MX_I2C3_Init+0x74>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800169e:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <MX_I2C3_Init+0x74>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80016a4:	480d      	ldr	r0, [pc, #52]	; (80016dc <MX_I2C3_Init+0x74>)
 80016a6:	f003 fc4f 	bl	8004f48 <HAL_I2C_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80016b0:	f000 f9b4 	bl	8001a1c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016b4:	2100      	movs	r1, #0
 80016b6:	4809      	ldr	r0, [pc, #36]	; (80016dc <MX_I2C3_Init+0x74>)
 80016b8:	f004 fc43 	bl	8005f42 <HAL_I2CEx_ConfigAnalogFilter>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80016c2:	f000 f9ab 	bl	8001a1c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80016c6:	2100      	movs	r1, #0
 80016c8:	4804      	ldr	r0, [pc, #16]	; (80016dc <MX_I2C3_Init+0x74>)
 80016ca:	f004 fc76 	bl	8005fba <HAL_I2CEx_ConfigDigitalFilter>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80016d4:	f000 f9a2 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	2002f108 	.word	0x2002f108
 80016e0:	40005c00 	.word	0x40005c00
 80016e4:	000186a0 	.word	0x000186a0

080016e8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08e      	sub	sp, #56	; 0x38
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	2234      	movs	r2, #52	; 0x34
 80016f2:	2100      	movs	r1, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	f00a fb3e 	bl	800bd76 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80016fa:	4b39      	ldr	r3, [pc, #228]	; (80017e0 <MX_LTDC_Init+0xf8>)
 80016fc:	4a39      	ldr	r2, [pc, #228]	; (80017e4 <MX_LTDC_Init+0xfc>)
 80016fe:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001700:	4b37      	ldr	r3, [pc, #220]	; (80017e0 <MX_LTDC_Init+0xf8>)
 8001702:	2200      	movs	r2, #0
 8001704:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001706:	4b36      	ldr	r3, [pc, #216]	; (80017e0 <MX_LTDC_Init+0xf8>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800170c:	4b34      	ldr	r3, [pc, #208]	; (80017e0 <MX_LTDC_Init+0xf8>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001712:	4b33      	ldr	r3, [pc, #204]	; (80017e0 <MX_LTDC_Init+0xf8>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8001718:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <MX_LTDC_Init+0xf8>)
 800171a:	2209      	movs	r2, #9
 800171c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800171e:	4b30      	ldr	r3, [pc, #192]	; (80017e0 <MX_LTDC_Init+0xf8>)
 8001720:	2201      	movs	r2, #1
 8001722:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8001724:	4b2e      	ldr	r3, [pc, #184]	; (80017e0 <MX_LTDC_Init+0xf8>)
 8001726:	221d      	movs	r2, #29
 8001728:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800172a:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <MX_LTDC_Init+0xf8>)
 800172c:	2203      	movs	r2, #3
 800172e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8001730:	4b2b      	ldr	r3, [pc, #172]	; (80017e0 <MX_LTDC_Init+0xf8>)
 8001732:	f240 120d 	movw	r2, #269	; 0x10d
 8001736:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8001738:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <MX_LTDC_Init+0xf8>)
 800173a:	f240 1243 	movw	r2, #323	; 0x143
 800173e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8001740:	4b27      	ldr	r3, [pc, #156]	; (80017e0 <MX_LTDC_Init+0xf8>)
 8001742:	f240 1217 	movw	r2, #279	; 0x117
 8001746:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8001748:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <MX_LTDC_Init+0xf8>)
 800174a:	f240 1247 	movw	r2, #327	; 0x147
 800174e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001750:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <MX_LTDC_Init+0xf8>)
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001758:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <MX_LTDC_Init+0xf8>)
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001760:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <MX_LTDC_Init+0xf8>)
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001768:	481d      	ldr	r0, [pc, #116]	; (80017e0 <MX_LTDC_Init+0xf8>)
 800176a:	f004 fc65 	bl	8006038 <HAL_LTDC_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001774:	f000 f952 	bl	8001a1c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 800177c:	23f0      	movs	r3, #240	; 0xf0
 800177e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8001784:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001788:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800178e:	23ff      	movs	r3, #255	; 0xff
 8001790:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800179a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800179c:	2305      	movs	r3, #5
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80017a4:	23f0      	movs	r3, #240	; 0xf0
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80017a8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80017ac:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	2200      	movs	r2, #0
 80017c4:	4619      	mov	r1, r3
 80017c6:	4806      	ldr	r0, [pc, #24]	; (80017e0 <MX_LTDC_Init+0xf8>)
 80017c8:	f004 fd06 	bl	80061d8 <HAL_LTDC_ConfigLayer>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 80017d2:	f000 f923 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	3738      	adds	r7, #56	; 0x38
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2002f1b4 	.word	0x2002f1b4
 80017e4:	40016800 	.word	0x40016800

080017e8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80017ec:	4b17      	ldr	r3, [pc, #92]	; (800184c <MX_SPI5_Init+0x64>)
 80017ee:	4a18      	ldr	r2, [pc, #96]	; (8001850 <MX_SPI5_Init+0x68>)
 80017f0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80017f2:	4b16      	ldr	r3, [pc, #88]	; (800184c <MX_SPI5_Init+0x64>)
 80017f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017f8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <MX_SPI5_Init+0x64>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <MX_SPI5_Init+0x64>)
 8001802:	2200      	movs	r2, #0
 8001804:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_SPI5_Init+0x64>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <MX_SPI5_Init+0x64>)
 800180e:	2200      	movs	r2, #0
 8001810:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <MX_SPI5_Init+0x64>)
 8001814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001818:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <MX_SPI5_Init+0x64>)
 800181c:	2200      	movs	r2, #0
 800181e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001820:	4b0a      	ldr	r3, [pc, #40]	; (800184c <MX_SPI5_Init+0x64>)
 8001822:	2200      	movs	r2, #0
 8001824:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <MX_SPI5_Init+0x64>)
 8001828:	2200      	movs	r2, #0
 800182a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800182c:	4b07      	ldr	r3, [pc, #28]	; (800184c <MX_SPI5_Init+0x64>)
 800182e:	2200      	movs	r2, #0
 8001830:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <MX_SPI5_Init+0x64>)
 8001834:	220a      	movs	r2, #10
 8001836:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001838:	4804      	ldr	r0, [pc, #16]	; (800184c <MX_SPI5_Init+0x64>)
 800183a:	f005 fd55 	bl	80072e8 <HAL_SPI_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001844:	f000 f8ea 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	2002f15c 	.word	0x2002f15c
 8001850:	40015000 	.word	0x40015000

08001854 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 800185a:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <MX_USART1_UART_Init+0x50>)
 800185c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001864:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001878:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 800187a:	220c      	movs	r2, #12
 800187c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187e:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800188a:	4805      	ldr	r0, [pc, #20]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 800188c:	f006 fdb8 	bl	8008400 <HAL_UART_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001896:	f000 f8c1 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	2002f25c 	.word	0x2002f25c
 80018a4:	40011000 	.word	0x40011000

080018a8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <MX_USART6_UART_Init+0x4c>)
 80018ae:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <MX_USART6_UART_Init+0x50>)
 80018b0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <MX_USART6_UART_Init+0x4c>)
 80018b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018b8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <MX_USART6_UART_Init+0x4c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <MX_USART6_UART_Init+0x4c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <MX_USART6_UART_Init+0x4c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <MX_USART6_UART_Init+0x4c>)
 80018ce:	220c      	movs	r2, #12
 80018d0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d2:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <MX_USART6_UART_Init+0x4c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <MX_USART6_UART_Init+0x4c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <MX_USART6_UART_Init+0x4c>)
 80018e0:	f006 fd8e 	bl	8008400 <HAL_UART_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80018ea:	f000 f897 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	2002f2a4 	.word	0x2002f2a4
 80018f8:	40011400 	.word	0x40011400

080018fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b089      	sub	sp, #36	; 0x24
 8001900:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	4b33      	ldr	r3, [pc, #204]	; (80019d4 <MX_GPIO_Init+0xd8>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a32      	ldr	r2, [pc, #200]	; (80019d4 <MX_GPIO_Init+0xd8>)
 800190c:	f043 0320 	orr.w	r3, r3, #32
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b30      	ldr	r3, [pc, #192]	; (80019d4 <MX_GPIO_Init+0xd8>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0320 	and.w	r3, r3, #32
 800191a:	61fb      	str	r3, [r7, #28]
 800191c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
 8001922:	4b2c      	ldr	r3, [pc, #176]	; (80019d4 <MX_GPIO_Init+0xd8>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a2b      	ldr	r2, [pc, #172]	; (80019d4 <MX_GPIO_Init+0xd8>)
 8001928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b29      	ldr	r3, [pc, #164]	; (80019d4 <MX_GPIO_Init+0xd8>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001936:	61bb      	str	r3, [r7, #24]
 8001938:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <MX_GPIO_Init+0xd8>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a24      	ldr	r2, [pc, #144]	; (80019d4 <MX_GPIO_Init+0xd8>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <MX_GPIO_Init+0xd8>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <MX_GPIO_Init+0xd8>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <MX_GPIO_Init+0xd8>)
 8001960:	f043 0302 	orr.w	r3, r3, #2
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <MX_GPIO_Init+0xd8>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	4b17      	ldr	r3, [pc, #92]	; (80019d4 <MX_GPIO_Init+0xd8>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a16      	ldr	r2, [pc, #88]	; (80019d4 <MX_GPIO_Init+0xd8>)
 800197c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <MX_GPIO_Init+0xd8>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <MX_GPIO_Init+0xd8>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <MX_GPIO_Init+0xd8>)
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <MX_GPIO_Init+0xd8>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <MX_GPIO_Init+0xd8>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a08      	ldr	r2, [pc, #32]	; (80019d4 <MX_GPIO_Init+0xd8>)
 80019b4:	f043 0308 	orr.w	r3, r3, #8
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <MX_GPIO_Init+0xd8>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]

}
 80019c6:	bf00      	nop
 80019c8:	3724      	adds	r7, #36	; 0x24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800

080019d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80019e0:	2001      	movs	r0, #1
 80019e2:	f007 fd52 	bl	800948a <osDelay>
 80019e6:	e7fb      	b.n	80019e0 <StartDefaultTask+0x8>

080019e8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80019f0:	2001      	movs	r0, #1
 80019f2:	f007 fd4a 	bl	800948a <osDelay>
 80019f6:	e7fb      	b.n	80019f0 <StartTask02+0x8>

080019f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d101      	bne.n	8001a0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a0a:	f002 fb87 	bl	800411c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40001000 	.word	0x40001000

08001a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a20:	b672      	cpsid	i
}
 8001a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <Error_Handler+0x8>
	...

08001a28 <Connect_Broker>:
uint16_t packetID = 0x01;
uint8_t Qos = 0x00;
char *clientID = "Topuz";

void Connect_Broker(char *Ip ,char *Port)
{
 8001a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2a:	b091      	sub	sp, #68	; 0x44
 8001a2c:	af0a      	add	r7, sp, #40	; 0x28
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)"AT+CIPCLOSE\r\n",strlen("AT+CIPCLOSE\r\n"),1000);
 8001a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a36:	220d      	movs	r2, #13
 8001a38:	4961      	ldr	r1, [pc, #388]	; (8001bc0 <Connect_Broker+0x198>)
 8001a3a:	4862      	ldr	r0, [pc, #392]	; (8001bc4 <Connect_Broker+0x19c>)
 8001a3c:	f006 fd2d 	bl	800849a <HAL_UART_Transmit>
	osDelay(100);
 8001a40:	2064      	movs	r0, #100	; 0x64
 8001a42:	f007 fd22 	bl	800948a <osDelay>
	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"),1000);
 8001a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4a:	220d      	movs	r2, #13
 8001a4c:	495e      	ldr	r1, [pc, #376]	; (8001bc8 <Connect_Broker+0x1a0>)
 8001a4e:	485d      	ldr	r0, [pc, #372]	; (8001bc4 <Connect_Broker+0x19c>)
 8001a50:	f006 fd23 	bl	800849a <HAL_UART_Transmit>
	osDelay(100);
 8001a54:	2064      	movs	r0, #100	; 0x64
 8001a56:	f007 fd18 	bl	800948a <osDelay>
	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)"AT+CIFSR\r\n",strlen("AT+CIFSR\r\n"),1000);
 8001a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5e:	220a      	movs	r2, #10
 8001a60:	495a      	ldr	r1, [pc, #360]	; (8001bcc <Connect_Broker+0x1a4>)
 8001a62:	4858      	ldr	r0, [pc, #352]	; (8001bc4 <Connect_Broker+0x19c>)
 8001a64:	f006 fd19 	bl	800849a <HAL_UART_Transmit>
	osDelay(100);
 8001a68:	2064      	movs	r0, #100	; 0x64
 8001a6a:	f007 fd0e 	bl	800948a <osDelay>
	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)tx_buffer,sprintf(tx_buffer,"AT+CIPSTART=\"TCP\",\"%s\",%s\r\n",Ip,Port),5000);
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	4957      	ldr	r1, [pc, #348]	; (8001bd0 <Connect_Broker+0x1a8>)
 8001a74:	4857      	ldr	r0, [pc, #348]	; (8001bd4 <Connect_Broker+0x1ac>)
 8001a76:	f00a fa8f 	bl	800bf98 <siprintf>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a82:	4954      	ldr	r1, [pc, #336]	; (8001bd4 <Connect_Broker+0x1ac>)
 8001a84:	484f      	ldr	r0, [pc, #316]	; (8001bc4 <Connect_Broker+0x19c>)
 8001a86:	f006 fd08 	bl	800849a <HAL_UART_Transmit>
	osDelay(2000);
 8001a8a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a8e:	f007 fcfc 	bl	800948a <osDelay>

	//connect packet

	ProtocolNameLength = strlen(protocolName);
 8001a92:	4b51      	ldr	r3, [pc, #324]	; (8001bd8 <Connect_Broker+0x1b0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fbaa 	bl	80001f0 <strlen>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	4b4e      	ldr	r3, [pc, #312]	; (8001bdc <Connect_Broker+0x1b4>)
 8001aa2:	801a      	strh	r2, [r3, #0]
	ClientIDLength     = strlen(clientID);
 8001aa4:	4b4e      	ldr	r3, [pc, #312]	; (8001be0 <Connect_Broker+0x1b8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fba1 	bl	80001f0 <strlen>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	4b4c      	ldr	r3, [pc, #304]	; (8001be4 <Connect_Broker+0x1bc>)
 8001ab4:	801a      	strh	r2, [r3, #0]
	uint8_t Remainlength;
	Remainlength = 2+ProtocolNameLength+6+ClientIDLength;
 8001ab6:	4b49      	ldr	r3, [pc, #292]	; (8001bdc <Connect_Broker+0x1b4>)
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	4b49      	ldr	r3, [pc, #292]	; (8001be4 <Connect_Broker+0x1bc>)
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	3308      	adds	r3, #8
 8001ac8:	75fb      	strb	r3, [r7, #23]
	uint16_t length = sprintf(tx_buffer,"%c%c%c%c%s%c%c%c%c%c%c%s",(char)connect,(char)Remainlength,(char)(ProtocolNameLength << 8),(char)ProtocolNameLength,protocolName,(char)level,(char)flag,(char)(keepAlive << 8),(char)keepAlive,(char)(ClientIDLength << 8),(char)ClientIDLength,clientID);
 8001aca:	4b47      	ldr	r3, [pc, #284]	; (8001be8 <Connect_Broker+0x1c0>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	469c      	mov	ip, r3
 8001ad0:	7df9      	ldrb	r1, [r7, #23]
 8001ad2:	4b42      	ldr	r3, [pc, #264]	; (8001bdc <Connect_Broker+0x1b4>)
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	4618      	mov	r0, r3
 8001ada:	4b3f      	ldr	r3, [pc, #252]	; (8001bd8 <Connect_Broker+0x1b0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a43      	ldr	r2, [pc, #268]	; (8001bec <Connect_Broker+0x1c4>)
 8001ae0:	7812      	ldrb	r2, [r2, #0]
 8001ae2:	4614      	mov	r4, r2
 8001ae4:	4a42      	ldr	r2, [pc, #264]	; (8001bf0 <Connect_Broker+0x1c8>)
 8001ae6:	7812      	ldrb	r2, [r2, #0]
 8001ae8:	4615      	mov	r5, r2
 8001aea:	4a42      	ldr	r2, [pc, #264]	; (8001bf4 <Connect_Broker+0x1cc>)
 8001aec:	8812      	ldrh	r2, [r2, #0]
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	4616      	mov	r6, r2
 8001af2:	4a3c      	ldr	r2, [pc, #240]	; (8001be4 <Connect_Broker+0x1bc>)
 8001af4:	8812      	ldrh	r2, [r2, #0]
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	607a      	str	r2, [r7, #4]
 8001afa:	4a39      	ldr	r2, [pc, #228]	; (8001be0 <Connect_Broker+0x1b8>)
 8001afc:	6812      	ldr	r2, [r2, #0]
 8001afe:	9209      	str	r2, [sp, #36]	; 0x24
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	9208      	str	r2, [sp, #32]
 8001b04:	2200      	movs	r2, #0
 8001b06:	9207      	str	r2, [sp, #28]
 8001b08:	9606      	str	r6, [sp, #24]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	9205      	str	r2, [sp, #20]
 8001b0e:	9504      	str	r5, [sp, #16]
 8001b10:	9403      	str	r4, [sp, #12]
 8001b12:	9302      	str	r3, [sp, #8]
 8001b14:	9001      	str	r0, [sp, #4]
 8001b16:	2300      	movs	r3, #0
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4662      	mov	r2, ip
 8001b1e:	4936      	ldr	r1, [pc, #216]	; (8001bf8 <Connect_Broker+0x1d0>)
 8001b20:	482c      	ldr	r0, [pc, #176]	; (8001bd4 <Connect_Broker+0x1ac>)
 8001b22:	f00a fa39 	bl	800bf98 <siprintf>
 8001b26:	4603      	mov	r3, r0
 8001b28:	82bb      	strh	r3, [r7, #20]

	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)tx_buffer,sprintf(tx_buffer,"AT+CIPSEND=%d\r\n",length),1000);
 8001b2a:	8abb      	ldrh	r3, [r7, #20]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4933      	ldr	r1, [pc, #204]	; (8001bfc <Connect_Broker+0x1d4>)
 8001b30:	4828      	ldr	r0, [pc, #160]	; (8001bd4 <Connect_Broker+0x1ac>)
 8001b32:	f00a fa31 	bl	800bf98 <siprintf>
 8001b36:	4603      	mov	r3, r0
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3e:	4925      	ldr	r1, [pc, #148]	; (8001bd4 <Connect_Broker+0x1ac>)
 8001b40:	4820      	ldr	r0, [pc, #128]	; (8001bc4 <Connect_Broker+0x19c>)
 8001b42:	f006 fcaa 	bl	800849a <HAL_UART_Transmit>
	osDelay(100);
 8001b46:	2064      	movs	r0, #100	; 0x64
 8001b48:	f007 fc9f 	bl	800948a <osDelay>
	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)tx_buffer,sprintf(tx_buffer,"%c%c%c%c%s%c%c%c%c%c%c%s",(char)connect,(char)Remainlength,(char)(ProtocolNameLength << 8),(char)ProtocolNameLength,protocolName,(char)level,(char)flag,(char)(keepAlive << 8),(char)keepAlive,(char)(ClientIDLength << 8),(char)ClientIDLength,clientID),5000);
 8001b4c:	4b26      	ldr	r3, [pc, #152]	; (8001be8 <Connect_Broker+0x1c0>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	469c      	mov	ip, r3
 8001b52:	7df9      	ldrb	r1, [r7, #23]
 8001b54:	4b21      	ldr	r3, [pc, #132]	; (8001bdc <Connect_Broker+0x1b4>)
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <Connect_Broker+0x1b0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a22      	ldr	r2, [pc, #136]	; (8001bec <Connect_Broker+0x1c4>)
 8001b62:	7812      	ldrb	r2, [r2, #0]
 8001b64:	4614      	mov	r4, r2
 8001b66:	4a22      	ldr	r2, [pc, #136]	; (8001bf0 <Connect_Broker+0x1c8>)
 8001b68:	7812      	ldrb	r2, [r2, #0]
 8001b6a:	4615      	mov	r5, r2
 8001b6c:	4a21      	ldr	r2, [pc, #132]	; (8001bf4 <Connect_Broker+0x1cc>)
 8001b6e:	8812      	ldrh	r2, [r2, #0]
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	4616      	mov	r6, r2
 8001b74:	4a1b      	ldr	r2, [pc, #108]	; (8001be4 <Connect_Broker+0x1bc>)
 8001b76:	8812      	ldrh	r2, [r2, #0]
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	4a18      	ldr	r2, [pc, #96]	; (8001be0 <Connect_Broker+0x1b8>)
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	9209      	str	r2, [sp, #36]	; 0x24
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	9208      	str	r2, [sp, #32]
 8001b86:	2200      	movs	r2, #0
 8001b88:	9207      	str	r2, [sp, #28]
 8001b8a:	9606      	str	r6, [sp, #24]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	9205      	str	r2, [sp, #20]
 8001b90:	9504      	str	r5, [sp, #16]
 8001b92:	9403      	str	r4, [sp, #12]
 8001b94:	9302      	str	r3, [sp, #8]
 8001b96:	9001      	str	r0, [sp, #4]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4662      	mov	r2, ip
 8001ba0:	4915      	ldr	r1, [pc, #84]	; (8001bf8 <Connect_Broker+0x1d0>)
 8001ba2:	480c      	ldr	r0, [pc, #48]	; (8001bd4 <Connect_Broker+0x1ac>)
 8001ba4:	f00a f9f8 	bl	800bf98 <siprintf>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bb0:	4908      	ldr	r1, [pc, #32]	; (8001bd4 <Connect_Broker+0x1ac>)
 8001bb2:	4804      	ldr	r0, [pc, #16]	; (8001bc4 <Connect_Broker+0x19c>)
 8001bb4:	f006 fc71 	bl	800849a <HAL_UART_Transmit>


}
 8001bb8:	bf00      	nop
 8001bba:	371c      	adds	r7, #28
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bc0:	0800d764 	.word	0x0800d764
 8001bc4:	2002f2a4 	.word	0x2002f2a4
 8001bc8:	0800d774 	.word	0x0800d774
 8001bcc:	0800d784 	.word	0x0800d784
 8001bd0:	0800d790 	.word	0x0800d790
 8001bd4:	2002f51c 	.word	0x2002f51c
 8001bd8:	20000004 	.word	0x20000004
 8001bdc:	2002f5b2 	.word	0x2002f5b2
 8001be0:	20000010 	.word	0x20000010
 8001be4:	2002f5b4 	.word	0x2002f5b4
 8001be8:	20000000 	.word	0x20000000
 8001bec:	20000008 	.word	0x20000008
 8001bf0:	20000009 	.word	0x20000009
 8001bf4:	2000000a 	.word	0x2000000a
 8001bf8:	0800d7ac 	.word	0x0800d7ac
 8001bfc:	0800d7c8 	.word	0x0800d7c8

08001c00 <Subscribe>:
void Subscribe(char *topic)
{
 8001c00:	b590      	push	{r4, r7, lr}
 8001c02:	b08b      	sub	sp, #44	; 0x2c
 8001c04:	af06      	add	r7, sp, #24
 8001c06:	6078      	str	r0, [r7, #4]
	uint16_t TopicLength = strlen(topic);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7fe faf1 	bl	80001f0 <strlen>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	81fb      	strh	r3, [r7, #14]
	uint8_t RemainLength = 2+2+TopicLength+1; // packetIDlength(2) + topiclengthdata(2)+topiclength+Qos
 8001c12:	89fb      	ldrh	r3, [r7, #14]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	3305      	adds	r3, #5
 8001c18:	737b      	strb	r3, [r7, #13]
	uint16_t length = sprintf(tx_buffer,"%c%c%c%c%c%c%s%c",(char)subscribeCon,(char)RemainLength,(char)(packetID << 8),(char)packetID,(char)(TopicLength << 8),(char)TopicLength,topic,(char)Qos);
 8001c1a:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <Subscribe+0xc8>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	461c      	mov	r4, r3
 8001c20:	7b7a      	ldrb	r2, [r7, #13]
 8001c22:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <Subscribe+0xcc>)
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	4619      	mov	r1, r3
 8001c2a:	89fb      	ldrh	r3, [r7, #14]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	4618      	mov	r0, r3
 8001c30:	4b27      	ldr	r3, [pc, #156]	; (8001cd0 <Subscribe+0xd0>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	9305      	str	r3, [sp, #20]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	9304      	str	r3, [sp, #16]
 8001c3a:	9003      	str	r0, [sp, #12]
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	9302      	str	r3, [sp, #8]
 8001c40:	9101      	str	r1, [sp, #4]
 8001c42:	2300      	movs	r3, #0
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	4613      	mov	r3, r2
 8001c48:	4622      	mov	r2, r4
 8001c4a:	4922      	ldr	r1, [pc, #136]	; (8001cd4 <Subscribe+0xd4>)
 8001c4c:	4822      	ldr	r0, [pc, #136]	; (8001cd8 <Subscribe+0xd8>)
 8001c4e:	f00a f9a3 	bl	800bf98 <siprintf>
 8001c52:	4603      	mov	r3, r0
 8001c54:	817b      	strh	r3, [r7, #10]
	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)tx_buffer,sprintf(tx_buffer,"AT+CIPSEND=%d\r\n",length),1000);
 8001c56:	897b      	ldrh	r3, [r7, #10]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4920      	ldr	r1, [pc, #128]	; (8001cdc <Subscribe+0xdc>)
 8001c5c:	481e      	ldr	r0, [pc, #120]	; (8001cd8 <Subscribe+0xd8>)
 8001c5e:	f00a f99b 	bl	800bf98 <siprintf>
 8001c62:	4603      	mov	r3, r0
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6a:	491b      	ldr	r1, [pc, #108]	; (8001cd8 <Subscribe+0xd8>)
 8001c6c:	481c      	ldr	r0, [pc, #112]	; (8001ce0 <Subscribe+0xe0>)
 8001c6e:	f006 fc14 	bl	800849a <HAL_UART_Transmit>
	osDelay(100);
 8001c72:	2064      	movs	r0, #100	; 0x64
 8001c74:	f007 fc09 	bl	800948a <osDelay>
	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)tx_buffer,sprintf(tx_buffer,"%c%c%c%c%c%c%s%c",(char)subscribeCon,(char)RemainLength,(char)(packetID << 8),(char)packetID,(char)(TopicLength << 8),(char)TopicLength,topic,(char)Qos),5000);
 8001c78:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <Subscribe+0xc8>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	461c      	mov	r4, r3
 8001c7e:	7b7a      	ldrb	r2, [r7, #13]
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <Subscribe+0xcc>)
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	4619      	mov	r1, r3
 8001c88:	89fb      	ldrh	r3, [r7, #14]
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <Subscribe+0xd0>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	9305      	str	r3, [sp, #20]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	9304      	str	r3, [sp, #16]
 8001c98:	9003      	str	r0, [sp, #12]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	9302      	str	r3, [sp, #8]
 8001c9e:	9101      	str	r1, [sp, #4]
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	4622      	mov	r2, r4
 8001ca8:	490a      	ldr	r1, [pc, #40]	; (8001cd4 <Subscribe+0xd4>)
 8001caa:	480b      	ldr	r0, [pc, #44]	; (8001cd8 <Subscribe+0xd8>)
 8001cac:	f00a f974 	bl	800bf98 <siprintf>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cb8:	4907      	ldr	r1, [pc, #28]	; (8001cd8 <Subscribe+0xd8>)
 8001cba:	4809      	ldr	r0, [pc, #36]	; (8001ce0 <Subscribe+0xe0>)
 8001cbc:	f006 fbed 	bl	800849a <HAL_UART_Transmit>

}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd90      	pop	{r4, r7, pc}
 8001cc8:	20000002 	.word	0x20000002
 8001ccc:	2000000c 	.word	0x2000000c
 8001cd0:	20025de0 	.word	0x20025de0
 8001cd4:	0800d7d8 	.word	0x0800d7d8
 8001cd8:	2002f51c 	.word	0x2002f51c
 8001cdc:	0800d7c8 	.word	0x0800d7c8
 8001ce0:	2002f2a4 	.word	0x2002f2a4

08001ce4 <publish>:
void publish(char *topic, char *message)
{
 8001ce4:	b590      	push	{r4, r7, lr}
 8001ce6:	b089      	sub	sp, #36	; 0x24
 8001ce8:	af04      	add	r7, sp, #16
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]

	uint16_t topiclength = strlen(topic);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7fe fa7e 	bl	80001f0 <strlen>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	81fb      	strh	r3, [r7, #14]
	uint8_t remainlength = 2+topiclength+strlen(message);
 8001cf8:	89fb      	ldrh	r3, [r7, #14]
 8001cfa:	b2dc      	uxtb	r4, r3
 8001cfc:	6838      	ldr	r0, [r7, #0]
 8001cfe:	f7fe fa77 	bl	80001f0 <strlen>
 8001d02:	4603      	mov	r3, r0
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	4423      	add	r3, r4
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	737b      	strb	r3, [r7, #13]
	int length = sprintf(tx_buffer,"%c%c%c%c%s%s",(char)publishCon,(char)remainlength,(char)(topiclength << 8),(char)topiclength,topic,message);
 8001d0e:	4b23      	ldr	r3, [pc, #140]	; (8001d9c <publish+0xb8>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	7b7a      	ldrb	r2, [r7, #13]
 8001d16:	89fb      	ldrh	r3, [r7, #14]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	9303      	str	r3, [sp, #12]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	9302      	str	r3, [sp, #8]
 8001d24:	9101      	str	r1, [sp, #4]
 8001d26:	2300      	movs	r3, #0
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	491c      	ldr	r1, [pc, #112]	; (8001da0 <publish+0xbc>)
 8001d30:	481c      	ldr	r0, [pc, #112]	; (8001da4 <publish+0xc0>)
 8001d32:	f00a f931 	bl	800bf98 <siprintf>
 8001d36:	60b8      	str	r0, [r7, #8]
	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)tx_buffer,sprintf(tx_buffer,"AT+CIPSEND=%d\r\n",length),100);
 8001d38:	68ba      	ldr	r2, [r7, #8]
 8001d3a:	491b      	ldr	r1, [pc, #108]	; (8001da8 <publish+0xc4>)
 8001d3c:	4819      	ldr	r0, [pc, #100]	; (8001da4 <publish+0xc0>)
 8001d3e:	f00a f92b 	bl	800bf98 <siprintf>
 8001d42:	4603      	mov	r3, r0
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	2364      	movs	r3, #100	; 0x64
 8001d48:	4916      	ldr	r1, [pc, #88]	; (8001da4 <publish+0xc0>)
 8001d4a:	4818      	ldr	r0, [pc, #96]	; (8001dac <publish+0xc8>)
 8001d4c:	f006 fba5 	bl	800849a <HAL_UART_Transmit>
	osDelay(100);
 8001d50:	2064      	movs	r0, #100	; 0x64
 8001d52:	f007 fb9a 	bl	800948a <osDelay>
	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)tx_buffer,sprintf(tx_buffer,"%c%c%c%c%s%s",(char)publishCon,(char)remainlength,(char)(topiclength << 8),(char)topiclength,topic,message),5000);
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <publish+0xb8>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	7b7a      	ldrb	r2, [r7, #13]
 8001d5e:	89fb      	ldrh	r3, [r7, #14]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	4619      	mov	r1, r3
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	9303      	str	r3, [sp, #12]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	9302      	str	r3, [sp, #8]
 8001d6c:	9101      	str	r1, [sp, #4]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	4613      	mov	r3, r2
 8001d74:	4602      	mov	r2, r0
 8001d76:	490a      	ldr	r1, [pc, #40]	; (8001da0 <publish+0xbc>)
 8001d78:	480a      	ldr	r0, [pc, #40]	; (8001da4 <publish+0xc0>)
 8001d7a:	f00a f90d 	bl	800bf98 <siprintf>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d86:	4907      	ldr	r1, [pc, #28]	; (8001da4 <publish+0xc0>)
 8001d88:	4808      	ldr	r0, [pc, #32]	; (8001dac <publish+0xc8>)
 8001d8a:	f006 fb86 	bl	800849a <HAL_UART_Transmit>
	osDelay(100);
 8001d8e:	2064      	movs	r0, #100	; 0x64
 8001d90:	f007 fb7b 	bl	800948a <osDelay>

}
 8001d94:	bf00      	nop
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd90      	pop	{r4, r7, pc}
 8001d9c:	20000001 	.word	0x20000001
 8001da0:	0800d7ec 	.word	0x0800d7ec
 8001da4:	2002f51c 	.word	0x2002f51c
 8001da8:	0800d7c8 	.word	0x0800d7c8
 8001dac:	2002f2a4 	.word	0x2002f2a4

08001db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_MspInit+0x54>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	4a11      	ldr	r2, [pc, #68]	; (8001e04 <HAL_MspInit+0x54>)
 8001dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <HAL_MspInit+0x54>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	603b      	str	r3, [r7, #0]
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_MspInit+0x54>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <HAL_MspInit+0x54>)
 8001ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de0:	6413      	str	r3, [r2, #64]	; 0x40
 8001de2:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <HAL_MspInit+0x54>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dee:	2200      	movs	r2, #0
 8001df0:	210f      	movs	r1, #15
 8001df2:	f06f 0001 	mvn.w	r0, #1
 8001df6:	f002 fa8d 	bl	8004314 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800

08001e08 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0b      	ldr	r2, [pc, #44]	; (8001e44 <HAL_DMA2D_MspInit+0x3c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d10d      	bne.n	8001e36 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <HAL_DMA2D_MspInit+0x40>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4a09      	ldr	r2, [pc, #36]	; (8001e48 <HAL_DMA2D_MspInit+0x40>)
 8001e24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <HAL_DMA2D_MspInit+0x40>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001e36:	bf00      	nop
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	4002b000 	.word	0x4002b000
 8001e48:	40023800 	.word	0x40023800

08001e4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	; 0x28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a29      	ldr	r2, [pc, #164]	; (8001f10 <HAL_I2C_MspInit+0xc4>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d14b      	bne.n	8001f06 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	4b28      	ldr	r3, [pc, #160]	; (8001f14 <HAL_I2C_MspInit+0xc8>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a27      	ldr	r2, [pc, #156]	; (8001f14 <HAL_I2C_MspInit+0xc8>)
 8001e78:	f043 0304 	orr.w	r3, r3, #4
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <HAL_I2C_MspInit+0xc8>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <HAL_I2C_MspInit+0xc8>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	4a20      	ldr	r2, [pc, #128]	; (8001f14 <HAL_I2C_MspInit+0xc8>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9a:	4b1e      	ldr	r3, [pc, #120]	; (8001f14 <HAL_I2C_MspInit+0xc8>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ea6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eac:	2312      	movs	r3, #18
 8001eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001eb8:	2304      	movs	r3, #4
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4815      	ldr	r0, [pc, #84]	; (8001f18 <HAL_I2C_MspInit+0xcc>)
 8001ec4:	f002 fd6e 	bl	80049a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ec8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ece:	2312      	movs	r3, #18
 8001ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001eda:	2304      	movs	r3, #4
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ede:	f107 0314 	add.w	r3, r7, #20
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	480d      	ldr	r0, [pc, #52]	; (8001f1c <HAL_I2C_MspInit+0xd0>)
 8001ee6:	f002 fd5d 	bl	80049a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <HAL_I2C_MspInit+0xc8>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	4a08      	ldr	r2, [pc, #32]	; (8001f14 <HAL_I2C_MspInit+0xc8>)
 8001ef4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_I2C_MspInit+0xc8>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001f06:	bf00      	nop
 8001f08:	3728      	adds	r7, #40	; 0x28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40005c00 	.word	0x40005c00
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40020800 	.word	0x40020800
 8001f1c:	40020000 	.word	0x40020000

08001f20 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0b      	ldr	r2, [pc, #44]	; (8001f5c <HAL_I2C_MspDeInit+0x3c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d10f      	bne.n	8001f52 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001f32:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_I2C_MspDeInit+0x40>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <HAL_I2C_MspDeInit+0x40>)
 8001f38:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f3c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8001f3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f42:	4808      	ldr	r0, [pc, #32]	; (8001f64 <HAL_I2C_MspDeInit+0x44>)
 8001f44:	f002 feda 	bl	8004cfc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8001f48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f4c:	4806      	ldr	r0, [pc, #24]	; (8001f68 <HAL_I2C_MspDeInit+0x48>)
 8001f4e:	f002 fed5 	bl	8004cfc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40005c00 	.word	0x40005c00
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40020800 	.word	0x40020800
 8001f68:	40020000 	.word	0x40020000

08001f6c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08e      	sub	sp, #56	; 0x38
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a77      	ldr	r2, [pc, #476]	; (8002168 <HAL_LTDC_MspInit+0x1fc>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	f040 80e7 	bne.w	800215e <HAL_LTDC_MspInit+0x1f2>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001f90:	2300      	movs	r3, #0
 8001f92:	623b      	str	r3, [r7, #32]
 8001f94:	4b75      	ldr	r3, [pc, #468]	; (800216c <HAL_LTDC_MspInit+0x200>)
 8001f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f98:	4a74      	ldr	r2, [pc, #464]	; (800216c <HAL_LTDC_MspInit+0x200>)
 8001f9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f9e:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa0:	4b72      	ldr	r3, [pc, #456]	; (800216c <HAL_LTDC_MspInit+0x200>)
 8001fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fa8:	623b      	str	r3, [r7, #32]
 8001faa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fac:	2300      	movs	r3, #0
 8001fae:	61fb      	str	r3, [r7, #28]
 8001fb0:	4b6e      	ldr	r3, [pc, #440]	; (800216c <HAL_LTDC_MspInit+0x200>)
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	4a6d      	ldr	r2, [pc, #436]	; (800216c <HAL_LTDC_MspInit+0x200>)
 8001fb6:	f043 0320 	orr.w	r3, r3, #32
 8001fba:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbc:	4b6b      	ldr	r3, [pc, #428]	; (800216c <HAL_LTDC_MspInit+0x200>)
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc0:	f003 0320 	and.w	r3, r3, #32
 8001fc4:	61fb      	str	r3, [r7, #28]
 8001fc6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61bb      	str	r3, [r7, #24]
 8001fcc:	4b67      	ldr	r3, [pc, #412]	; (800216c <HAL_LTDC_MspInit+0x200>)
 8001fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd0:	4a66      	ldr	r2, [pc, #408]	; (800216c <HAL_LTDC_MspInit+0x200>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd8:	4b64      	ldr	r3, [pc, #400]	; (800216c <HAL_LTDC_MspInit+0x200>)
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	61bb      	str	r3, [r7, #24]
 8001fe2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	4b60      	ldr	r3, [pc, #384]	; (800216c <HAL_LTDC_MspInit+0x200>)
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	4a5f      	ldr	r2, [pc, #380]	; (800216c <HAL_LTDC_MspInit+0x200>)
 8001fee:	f043 0302 	orr.w	r3, r3, #2
 8001ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff4:	4b5d      	ldr	r3, [pc, #372]	; (800216c <HAL_LTDC_MspInit+0x200>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002000:	2300      	movs	r3, #0
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	4b59      	ldr	r3, [pc, #356]	; (800216c <HAL_LTDC_MspInit+0x200>)
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002008:	4a58      	ldr	r2, [pc, #352]	; (800216c <HAL_LTDC_MspInit+0x200>)
 800200a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800200e:	6313      	str	r3, [r2, #48]	; 0x30
 8002010:	4b56      	ldr	r3, [pc, #344]	; (800216c <HAL_LTDC_MspInit+0x200>)
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	4b52      	ldr	r3, [pc, #328]	; (800216c <HAL_LTDC_MspInit+0x200>)
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	4a51      	ldr	r2, [pc, #324]	; (800216c <HAL_LTDC_MspInit+0x200>)
 8002026:	f043 0304 	orr.w	r3, r3, #4
 800202a:	6313      	str	r3, [r2, #48]	; 0x30
 800202c:	4b4f      	ldr	r3, [pc, #316]	; (800216c <HAL_LTDC_MspInit+0x200>)
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	4b4b      	ldr	r3, [pc, #300]	; (800216c <HAL_LTDC_MspInit+0x200>)
 800203e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002040:	4a4a      	ldr	r2, [pc, #296]	; (800216c <HAL_LTDC_MspInit+0x200>)
 8002042:	f043 0308 	orr.w	r3, r3, #8
 8002046:	6313      	str	r3, [r2, #48]	; 0x30
 8002048:	4b48      	ldr	r3, [pc, #288]	; (800216c <HAL_LTDC_MspInit+0x200>)
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205a:	2302      	movs	r3, #2
 800205c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002062:	2300      	movs	r3, #0
 8002064:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002066:	230e      	movs	r3, #14
 8002068:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800206a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800206e:	4619      	mov	r1, r3
 8002070:	483f      	ldr	r0, [pc, #252]	; (8002170 <HAL_LTDC_MspInit+0x204>)
 8002072:	f002 fc97 	bl	80049a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8002076:	f641 0358 	movw	r3, #6232	; 0x1858
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002084:	2300      	movs	r3, #0
 8002086:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002088:	230e      	movs	r3, #14
 800208a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002090:	4619      	mov	r1, r3
 8002092:	4838      	ldr	r0, [pc, #224]	; (8002174 <HAL_LTDC_MspInit+0x208>)
 8002094:	f002 fc86 	bl	80049a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002098:	2303      	movs	r3, #3
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a4:	2300      	movs	r3, #0
 80020a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80020a8:	2309      	movs	r3, #9
 80020aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b0:	4619      	mov	r1, r3
 80020b2:	4831      	ldr	r0, [pc, #196]	; (8002178 <HAL_LTDC_MspInit+0x20c>)
 80020b4:	f002 fc76 	bl	80049a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 80020b8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020ca:	230e      	movs	r3, #14
 80020cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d2:	4619      	mov	r1, r3
 80020d4:	4828      	ldr	r0, [pc, #160]	; (8002178 <HAL_LTDC_MspInit+0x20c>)
 80020d6:	f002 fc65 	bl	80049a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 80020da:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e0:	2302      	movs	r3, #2
 80020e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e8:	2300      	movs	r3, #0
 80020ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020ec:	230e      	movs	r3, #14
 80020ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f4:	4619      	mov	r1, r3
 80020f6:	4821      	ldr	r0, [pc, #132]	; (800217c <HAL_LTDC_MspInit+0x210>)
 80020f8:	f002 fc54 	bl	80049a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020fc:	23c0      	movs	r3, #192	; 0xc0
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002108:	2300      	movs	r3, #0
 800210a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800210c:	230e      	movs	r3, #14
 800210e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002114:	4619      	mov	r1, r3
 8002116:	481a      	ldr	r0, [pc, #104]	; (8002180 <HAL_LTDC_MspInit+0x214>)
 8002118:	f002 fc44 	bl	80049a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 800211c:	2348      	movs	r3, #72	; 0x48
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002128:	2300      	movs	r3, #0
 800212a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800212c:	230e      	movs	r3, #14
 800212e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002134:	4619      	mov	r1, r3
 8002136:	4813      	ldr	r0, [pc, #76]	; (8002184 <HAL_LTDC_MspInit+0x218>)
 8002138:	f002 fc34 	bl	80049a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800213c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	2300      	movs	r3, #0
 800214c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800214e:	2309      	movs	r3, #9
 8002150:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002156:	4619      	mov	r1, r3
 8002158:	4808      	ldr	r0, [pc, #32]	; (800217c <HAL_LTDC_MspInit+0x210>)
 800215a:	f002 fc23 	bl	80049a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800215e:	bf00      	nop
 8002160:	3738      	adds	r7, #56	; 0x38
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40016800 	.word	0x40016800
 800216c:	40023800 	.word	0x40023800
 8002170:	40021400 	.word	0x40021400
 8002174:	40020000 	.word	0x40020000
 8002178:	40020400 	.word	0x40020400
 800217c:	40021800 	.word	0x40021800
 8002180:	40020800 	.word	0x40020800
 8002184:	40020c00 	.word	0x40020c00

08002188 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08a      	sub	sp, #40	; 0x28
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a19      	ldr	r2, [pc, #100]	; (800220c <HAL_SPI_MspInit+0x84>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d12c      	bne.n	8002204 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	4b18      	ldr	r3, [pc, #96]	; (8002210 <HAL_SPI_MspInit+0x88>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	4a17      	ldr	r2, [pc, #92]	; (8002210 <HAL_SPI_MspInit+0x88>)
 80021b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021b8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ba:	4b15      	ldr	r3, [pc, #84]	; (8002210 <HAL_SPI_MspInit+0x88>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4b11      	ldr	r3, [pc, #68]	; (8002210 <HAL_SPI_MspInit+0x88>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	4a10      	ldr	r2, [pc, #64]	; (8002210 <HAL_SPI_MspInit+0x88>)
 80021d0:	f043 0320 	orr.w	r3, r3, #32
 80021d4:	6313      	str	r3, [r2, #48]	; 0x30
 80021d6:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <HAL_SPI_MspInit+0x88>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80021e2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80021e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f0:	2303      	movs	r3, #3
 80021f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80021f4:	2305      	movs	r3, #5
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	4619      	mov	r1, r3
 80021fe:	4805      	ldr	r0, [pc, #20]	; (8002214 <HAL_SPI_MspInit+0x8c>)
 8002200:	f002 fbd0 	bl	80049a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002204:	bf00      	nop
 8002206:	3728      	adds	r7, #40	; 0x28
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40015000 	.word	0x40015000
 8002210:	40023800 	.word	0x40023800
 8002214:	40021400 	.word	0x40021400

08002218 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a08      	ldr	r2, [pc, #32]	; (8002248 <HAL_SPI_MspDeInit+0x30>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d10a      	bne.n	8002240 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <HAL_SPI_MspDeInit+0x34>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	4a07      	ldr	r2, [pc, #28]	; (800224c <HAL_SPI_MspDeInit+0x34>)
 8002230:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002234:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8002236:	f44f 7160 	mov.w	r1, #896	; 0x380
 800223a:	4805      	ldr	r0, [pc, #20]	; (8002250 <HAL_SPI_MspDeInit+0x38>)
 800223c:	f002 fd5e 	bl	8004cfc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40015000 	.word	0x40015000
 800224c:	40023800 	.word	0x40023800
 8002250:	40021400 	.word	0x40021400

08002254 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08c      	sub	sp, #48	; 0x30
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225c:	f107 031c 	add.w	r3, r7, #28
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a3b      	ldr	r2, [pc, #236]	; (8002360 <HAL_UART_MspInit+0x10c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d135      	bne.n	80022e2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	61bb      	str	r3, [r7, #24]
 800227a:	4b3a      	ldr	r3, [pc, #232]	; (8002364 <HAL_UART_MspInit+0x110>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	4a39      	ldr	r2, [pc, #228]	; (8002364 <HAL_UART_MspInit+0x110>)
 8002280:	f043 0310 	orr.w	r3, r3, #16
 8002284:	6453      	str	r3, [r2, #68]	; 0x44
 8002286:	4b37      	ldr	r3, [pc, #220]	; (8002364 <HAL_UART_MspInit+0x110>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	f003 0310 	and.w	r3, r3, #16
 800228e:	61bb      	str	r3, [r7, #24]
 8002290:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	4b33      	ldr	r3, [pc, #204]	; (8002364 <HAL_UART_MspInit+0x110>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4a32      	ldr	r2, [pc, #200]	; (8002364 <HAL_UART_MspInit+0x110>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
 80022a2:	4b30      	ldr	r3, [pc, #192]	; (8002364 <HAL_UART_MspInit+0x110>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b4:	2302      	movs	r3, #2
 80022b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022bc:	2303      	movs	r3, #3
 80022be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022c0:	2307      	movs	r3, #7
 80022c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c4:	f107 031c 	add.w	r3, r7, #28
 80022c8:	4619      	mov	r1, r3
 80022ca:	4827      	ldr	r0, [pc, #156]	; (8002368 <HAL_UART_MspInit+0x114>)
 80022cc:	f002 fb6a 	bl	80049a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80022d0:	2200      	movs	r2, #0
 80022d2:	2105      	movs	r1, #5
 80022d4:	2025      	movs	r0, #37	; 0x25
 80022d6:	f002 f81d 	bl	8004314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022da:	2025      	movs	r0, #37	; 0x25
 80022dc:	f002 f836 	bl	800434c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80022e0:	e039      	b.n	8002356 <HAL_UART_MspInit+0x102>
  else if(huart->Instance==USART6)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a21      	ldr	r2, [pc, #132]	; (800236c <HAL_UART_MspInit+0x118>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d134      	bne.n	8002356 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART6_CLK_ENABLE();
 80022ec:	2300      	movs	r3, #0
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	4b1c      	ldr	r3, [pc, #112]	; (8002364 <HAL_UART_MspInit+0x110>)
 80022f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f4:	4a1b      	ldr	r2, [pc, #108]	; (8002364 <HAL_UART_MspInit+0x110>)
 80022f6:	f043 0320 	orr.w	r3, r3, #32
 80022fa:	6453      	str	r3, [r2, #68]	; 0x44
 80022fc:	4b19      	ldr	r3, [pc, #100]	; (8002364 <HAL_UART_MspInit+0x110>)
 80022fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002300:	f003 0320 	and.w	r3, r3, #32
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	4b15      	ldr	r3, [pc, #84]	; (8002364 <HAL_UART_MspInit+0x110>)
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	4a14      	ldr	r2, [pc, #80]	; (8002364 <HAL_UART_MspInit+0x110>)
 8002312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002316:	6313      	str	r3, [r2, #48]	; 0x30
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <HAL_UART_MspInit+0x110>)
 800231a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8002324:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232a:	2302      	movs	r3, #2
 800232c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002332:	2303      	movs	r3, #3
 8002334:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002336:	2308      	movs	r3, #8
 8002338:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800233a:	f107 031c 	add.w	r3, r7, #28
 800233e:	4619      	mov	r1, r3
 8002340:	480b      	ldr	r0, [pc, #44]	; (8002370 <HAL_UART_MspInit+0x11c>)
 8002342:	f002 fb2f 	bl	80049a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002346:	2200      	movs	r2, #0
 8002348:	2105      	movs	r1, #5
 800234a:	2047      	movs	r0, #71	; 0x47
 800234c:	f001 ffe2 	bl	8004314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002350:	2047      	movs	r0, #71	; 0x47
 8002352:	f001 fffb 	bl	800434c <HAL_NVIC_EnableIRQ>
}
 8002356:	bf00      	nop
 8002358:	3730      	adds	r7, #48	; 0x30
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40011000 	.word	0x40011000
 8002364:	40023800 	.word	0x40023800
 8002368:	40020000 	.word	0x40020000
 800236c:	40011400 	.word	0x40011400
 8002370:	40021800 	.word	0x40021800

08002374 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08c      	sub	sp, #48	; 0x30
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002384:	2200      	movs	r2, #0
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	2036      	movs	r0, #54	; 0x36
 800238a:	f001 ffc3 	bl	8004314 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800238e:	2036      	movs	r0, #54	; 0x36
 8002390:	f001 ffdc 	bl	800434c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	4b1f      	ldr	r3, [pc, #124]	; (8002418 <HAL_InitTick+0xa4>)
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	4a1e      	ldr	r2, [pc, #120]	; (8002418 <HAL_InitTick+0xa4>)
 800239e:	f043 0310 	orr.w	r3, r3, #16
 80023a2:	6413      	str	r3, [r2, #64]	; 0x40
 80023a4:	4b1c      	ldr	r3, [pc, #112]	; (8002418 <HAL_InitTick+0xa4>)
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	f003 0310 	and.w	r3, r3, #16
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023b0:	f107 0210 	add.w	r2, r7, #16
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f004 fda4 	bl	8006f08 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80023c0:	f004 fd7a 	bl	8006eb8 <HAL_RCC_GetPCLK1Freq>
 80023c4:	4603      	mov	r3, r0
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023cc:	4a13      	ldr	r2, [pc, #76]	; (800241c <HAL_InitTick+0xa8>)
 80023ce:	fba2 2303 	umull	r2, r3, r2, r3
 80023d2:	0c9b      	lsrs	r3, r3, #18
 80023d4:	3b01      	subs	r3, #1
 80023d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <HAL_InitTick+0xac>)
 80023da:	4a12      	ldr	r2, [pc, #72]	; (8002424 <HAL_InitTick+0xb0>)
 80023dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80023de:	4b10      	ldr	r3, [pc, #64]	; (8002420 <HAL_InitTick+0xac>)
 80023e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023e4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80023e6:	4a0e      	ldr	r2, [pc, #56]	; (8002420 <HAL_InitTick+0xac>)
 80023e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ea:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80023ec:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <HAL_InitTick+0xac>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023f2:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <HAL_InitTick+0xac>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80023f8:	4809      	ldr	r0, [pc, #36]	; (8002420 <HAL_InitTick+0xac>)
 80023fa:	f005 fd53 	bl	8007ea4 <HAL_TIM_Base_Init>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d104      	bne.n	800240e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002404:	4806      	ldr	r0, [pc, #24]	; (8002420 <HAL_InitTick+0xac>)
 8002406:	f005 fda7 	bl	8007f58 <HAL_TIM_Base_Start_IT>
 800240a:	4603      	mov	r3, r0
 800240c:	e000      	b.n	8002410 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
}
 8002410:	4618      	mov	r0, r3
 8002412:	3730      	adds	r7, #48	; 0x30
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40023800 	.word	0x40023800
 800241c:	431bde83 	.word	0x431bde83
 8002420:	2002f5b8 	.word	0x2002f5b8
 8002424:	40001000 	.word	0x40001000

08002428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800242c:	e7fe      	b.n	800242c <NMI_Handler+0x4>

0800242e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002432:	e7fe      	b.n	8002432 <HardFault_Handler+0x4>

08002434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002438:	e7fe      	b.n	8002438 <MemManage_Handler+0x4>

0800243a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800243e:	e7fe      	b.n	800243e <BusFault_Handler+0x4>

08002440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002444:	e7fe      	b.n	8002444 <UsageFault_Handler+0x4>

08002446 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002458:	4802      	ldr	r0, [pc, #8]	; (8002464 <USART1_IRQHandler+0x10>)
 800245a:	f006 f8e1 	bl	8008620 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	2002f25c 	.word	0x2002f25c

08002468 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <TIM6_DAC_IRQHandler+0x10>)
 800246e:	f005 fde3 	bl	8008038 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	2002f5b8 	.word	0x2002f5b8

0800247c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <USART6_IRQHandler+0x10>)
 8002482:	f006 f8cd 	bl	8008620 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	2002f2a4 	.word	0x2002f2a4

08002490 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
	return 1;
 8002494:	2301      	movs	r3, #1
}
 8002496:	4618      	mov	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <_kill>:

int _kill(int pid, int sig)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024aa:	f009 fb33 	bl	800bb14 <__errno>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2216      	movs	r2, #22
 80024b2:	601a      	str	r2, [r3, #0]
	return -1;
 80024b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <_exit>:

void _exit (int status)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024c8:	f04f 31ff 	mov.w	r1, #4294967295
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff ffe7 	bl	80024a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80024d2:	e7fe      	b.n	80024d2 <_exit+0x12>

080024d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	e00a      	b.n	80024fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024e6:	f3af 8000 	nop.w
 80024ea:	4601      	mov	r1, r0
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	60ba      	str	r2, [r7, #8]
 80024f2:	b2ca      	uxtb	r2, r1
 80024f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	3301      	adds	r3, #1
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	429a      	cmp	r2, r3
 8002502:	dbf0      	blt.n	80024e6 <_read+0x12>
	}

return len;
 8002504:	687b      	ldr	r3, [r7, #4]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b086      	sub	sp, #24
 8002512:	af00      	add	r7, sp, #0
 8002514:	60f8      	str	r0, [r7, #12]
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	e009      	b.n	8002534 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	1c5a      	adds	r2, r3, #1
 8002524:	60ba      	str	r2, [r7, #8]
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	3301      	adds	r3, #1
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	429a      	cmp	r2, r3
 800253a:	dbf1      	blt.n	8002520 <_write+0x12>
	}
	return len;
 800253c:	687b      	ldr	r3, [r7, #4]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <_close>:

int _close(int file)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
	return -1;
 800254e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800256e:	605a      	str	r2, [r3, #4]
	return 0;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <_isatty>:

int _isatty(int file)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
	return 1;
 8002586:	2301      	movs	r3, #1
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
	return 0;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025b8:	4a14      	ldr	r2, [pc, #80]	; (800260c <_sbrk+0x5c>)
 80025ba:	4b15      	ldr	r3, [pc, #84]	; (8002610 <_sbrk+0x60>)
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025c4:	4b13      	ldr	r3, [pc, #76]	; (8002614 <_sbrk+0x64>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d102      	bne.n	80025d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025cc:	4b11      	ldr	r3, [pc, #68]	; (8002614 <_sbrk+0x64>)
 80025ce:	4a12      	ldr	r2, [pc, #72]	; (8002618 <_sbrk+0x68>)
 80025d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025d2:	4b10      	ldr	r3, [pc, #64]	; (8002614 <_sbrk+0x64>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d207      	bcs.n	80025f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025e0:	f009 fa98 	bl	800bb14 <__errno>
 80025e4:	4603      	mov	r3, r0
 80025e6:	220c      	movs	r2, #12
 80025e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ea:	f04f 33ff 	mov.w	r3, #4294967295
 80025ee:	e009      	b.n	8002604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025f0:	4b08      	ldr	r3, [pc, #32]	; (8002614 <_sbrk+0x64>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025f6:	4b07      	ldr	r3, [pc, #28]	; (8002614 <_sbrk+0x64>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4413      	add	r3, r2
 80025fe:	4a05      	ldr	r2, [pc, #20]	; (8002614 <_sbrk+0x64>)
 8002600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002602:	68fb      	ldr	r3, [r7, #12]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	20030000 	.word	0x20030000
 8002610:	00000400 	.word	0x00000400
 8002614:	20025de4 	.word	0x20025de4
 8002618:	2002f718 	.word	0x2002f718

0800261c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <SystemInit+0x20>)
 8002622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002626:	4a05      	ldr	r2, [pc, #20]	; (800263c <SystemInit+0x20>)
 8002628:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800262c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <_debugPrint>:
#include "util.h"

char debugBuff[MAX_DEBUG_BUFF] = {0,};

void _debugPrint(char *debugMsg, char *file, const char *func, int line)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08a      	sub	sp, #40	; 0x28
 8002644:	af04      	add	r7, sp, #16
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	603b      	str	r3, [r7, #0]
	int n;

	n = snprintf(debugBuff, MAX_DEBUG_BUFF,
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	9302      	str	r3, [sp, #8]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	9301      	str	r3, [sp, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	4a12      	ldr	r2, [pc, #72]	; (80026a8 <_debugPrint+0x68>)
 800265e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002662:	4812      	ldr	r0, [pc, #72]	; (80026ac <_debugPrint+0x6c>)
 8002664:	f009 fc64 	bl	800bf30 <sniprintf>
 8002668:	6178      	str	r0, [r7, #20]
				"File : %s \r\nFunction : %s \r\nLine : %d \r\nDebug : %s\r\n\r\n", file, func, line, debugMsg);
	if ( n < 0 || n >= MAX_DEBUG_BUFF )
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b00      	cmp	r3, #0
 800266e:	db03      	blt.n	8002678 <_debugPrint+0x38>
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002676:	db06      	blt.n	8002686 <_debugPrint+0x46>

	{
		HAL_UART_Transmit(&DEBUG_UART, (uint8_t *)"debugPrint Error!!!\r\n", strlen("debugPrint Error!!!r\n"), 100);
 8002678:	2364      	movs	r3, #100	; 0x64
 800267a:	2215      	movs	r2, #21
 800267c:	490c      	ldr	r1, [pc, #48]	; (80026b0 <_debugPrint+0x70>)
 800267e:	480d      	ldr	r0, [pc, #52]	; (80026b4 <_debugPrint+0x74>)
 8002680:	f005 ff0b 	bl	800849a <HAL_UART_Transmit>
 8002684:	e006      	b.n	8002694 <_debugPrint+0x54>
	}
	else
	{
		HAL_UART_Transmit(&DEBUG_UART, (uint8_t *)debugBuff, n, 100);
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	b29a      	uxth	r2, r3
 800268a:	2364      	movs	r3, #100	; 0x64
 800268c:	4907      	ldr	r1, [pc, #28]	; (80026ac <_debugPrint+0x6c>)
 800268e:	4809      	ldr	r0, [pc, #36]	; (80026b4 <_debugPrint+0x74>)
 8002690:	f005 ff03 	bl	800849a <HAL_UART_Transmit>
	}
	memset(debugBuff, 0x0, MAX_DEBUG_BUFF);
 8002694:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002698:	2100      	movs	r1, #0
 800269a:	4804      	ldr	r0, [pc, #16]	; (80026ac <_debugPrint+0x6c>)
 800269c:	f009 fb6b 	bl	800bd76 <memset>
}
 80026a0:	bf00      	nop
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	0800d7fc 	.word	0x0800d7fc
 80026ac:	20025de8 	.word	0x20025de8
 80026b0:	0800d834 	.word	0x0800d834
 80026b4:	2002f25c 	.word	0x2002f25c

080026b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80026b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026f0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026bc:	480d      	ldr	r0, [pc, #52]	; (80026f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026be:	490e      	ldr	r1, [pc, #56]	; (80026f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026c0:	4a0e      	ldr	r2, [pc, #56]	; (80026fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c4:	e002      	b.n	80026cc <LoopCopyDataInit>

080026c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ca:	3304      	adds	r3, #4

080026cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d0:	d3f9      	bcc.n	80026c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026d2:	4a0b      	ldr	r2, [pc, #44]	; (8002700 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026d4:	4c0b      	ldr	r4, [pc, #44]	; (8002704 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d8:	e001      	b.n	80026de <LoopFillZerobss>

080026da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026dc:	3204      	adds	r2, #4

080026de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e0:	d3fb      	bcc.n	80026da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026e2:	f7ff ff9b 	bl	800261c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026e6:	f009 fb11 	bl	800bd0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ea:	f7fe feb5 	bl	8001458 <main>
  bx  lr    
 80026ee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80026f0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80026f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026f8:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 80026fc:	08011044 	.word	0x08011044
  ldr r2, =_sbss
 8002700:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8002704:	2002f714 	.word	0x2002f714

08002708 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002708:	e7fe      	b.n	8002708 <ADC_IRQHandler>

0800270a <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800270e:	f000 fe49 	bl	80033a4 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8002712:	20ca      	movs	r0, #202	; 0xca
 8002714:	f000 f95d 	bl	80029d2 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002718:	20c3      	movs	r0, #195	; 0xc3
 800271a:	f000 f967 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800271e:	2008      	movs	r0, #8
 8002720:	f000 f964 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002724:	2050      	movs	r0, #80	; 0x50
 8002726:	f000 f961 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800272a:	20cf      	movs	r0, #207	; 0xcf
 800272c:	f000 f951 	bl	80029d2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002730:	2000      	movs	r0, #0
 8002732:	f000 f95b 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8002736:	20c1      	movs	r0, #193	; 0xc1
 8002738:	f000 f958 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x30);
 800273c:	2030      	movs	r0, #48	; 0x30
 800273e:	f000 f955 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8002742:	20ed      	movs	r0, #237	; 0xed
 8002744:	f000 f945 	bl	80029d2 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002748:	2064      	movs	r0, #100	; 0x64
 800274a:	f000 f94f 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800274e:	2003      	movs	r0, #3
 8002750:	f000 f94c 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002754:	2012      	movs	r0, #18
 8002756:	f000 f949 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800275a:	2081      	movs	r0, #129	; 0x81
 800275c:	f000 f946 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8002760:	20e8      	movs	r0, #232	; 0xe8
 8002762:	f000 f936 	bl	80029d2 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002766:	2085      	movs	r0, #133	; 0x85
 8002768:	f000 f940 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800276c:	2000      	movs	r0, #0
 800276e:	f000 f93d 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002772:	2078      	movs	r0, #120	; 0x78
 8002774:	f000 f93a 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002778:	20cb      	movs	r0, #203	; 0xcb
 800277a:	f000 f92a 	bl	80029d2 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800277e:	2039      	movs	r0, #57	; 0x39
 8002780:	f000 f934 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002784:	202c      	movs	r0, #44	; 0x2c
 8002786:	f000 f931 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800278a:	2000      	movs	r0, #0
 800278c:	f000 f92e 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002790:	2034      	movs	r0, #52	; 0x34
 8002792:	f000 f92b 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002796:	2002      	movs	r0, #2
 8002798:	f000 f928 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800279c:	20f7      	movs	r0, #247	; 0xf7
 800279e:	f000 f918 	bl	80029d2 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80027a2:	2020      	movs	r0, #32
 80027a4:	f000 f922 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80027a8:	20ea      	movs	r0, #234	; 0xea
 80027aa:	f000 f912 	bl	80029d2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80027ae:	2000      	movs	r0, #0
 80027b0:	f000 f91c 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80027b4:	2000      	movs	r0, #0
 80027b6:	f000 f919 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80027ba:	20b1      	movs	r0, #177	; 0xb1
 80027bc:	f000 f909 	bl	80029d2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80027c0:	2000      	movs	r0, #0
 80027c2:	f000 f913 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80027c6:	201b      	movs	r0, #27
 80027c8:	f000 f910 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80027cc:	20b6      	movs	r0, #182	; 0xb6
 80027ce:	f000 f900 	bl	80029d2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80027d2:	200a      	movs	r0, #10
 80027d4:	f000 f90a 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80027d8:	20a2      	movs	r0, #162	; 0xa2
 80027da:	f000 f907 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80027de:	20c0      	movs	r0, #192	; 0xc0
 80027e0:	f000 f8f7 	bl	80029d2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80027e4:	2010      	movs	r0, #16
 80027e6:	f000 f901 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80027ea:	20c1      	movs	r0, #193	; 0xc1
 80027ec:	f000 f8f1 	bl	80029d2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80027f0:	2010      	movs	r0, #16
 80027f2:	f000 f8fb 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80027f6:	20c5      	movs	r0, #197	; 0xc5
 80027f8:	f000 f8eb 	bl	80029d2 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80027fc:	2045      	movs	r0, #69	; 0x45
 80027fe:	f000 f8f5 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8002802:	2015      	movs	r0, #21
 8002804:	f000 f8f2 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002808:	20c7      	movs	r0, #199	; 0xc7
 800280a:	f000 f8e2 	bl	80029d2 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800280e:	2090      	movs	r0, #144	; 0x90
 8002810:	f000 f8ec 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002814:	2036      	movs	r0, #54	; 0x36
 8002816:	f000 f8dc 	bl	80029d2 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800281a:	20c8      	movs	r0, #200	; 0xc8
 800281c:	f000 f8e6 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002820:	20f2      	movs	r0, #242	; 0xf2
 8002822:	f000 f8d6 	bl	80029d2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002826:	2000      	movs	r0, #0
 8002828:	f000 f8e0 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800282c:	20b0      	movs	r0, #176	; 0xb0
 800282e:	f000 f8d0 	bl	80029d2 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8002832:	20c2      	movs	r0, #194	; 0xc2
 8002834:	f000 f8da 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002838:	20b6      	movs	r0, #182	; 0xb6
 800283a:	f000 f8ca 	bl	80029d2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800283e:	200a      	movs	r0, #10
 8002840:	f000 f8d4 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002844:	20a7      	movs	r0, #167	; 0xa7
 8002846:	f000 f8d1 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800284a:	2027      	movs	r0, #39	; 0x27
 800284c:	f000 f8ce 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002850:	2004      	movs	r0, #4
 8002852:	f000 f8cb 	bl	80029ec <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002856:	202a      	movs	r0, #42	; 0x2a
 8002858:	f000 f8bb 	bl	80029d2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800285c:	2000      	movs	r0, #0
 800285e:	f000 f8c5 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002862:	2000      	movs	r0, #0
 8002864:	f000 f8c2 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002868:	2000      	movs	r0, #0
 800286a:	f000 f8bf 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800286e:	20ef      	movs	r0, #239	; 0xef
 8002870:	f000 f8bc 	bl	80029ec <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002874:	202b      	movs	r0, #43	; 0x2b
 8002876:	f000 f8ac 	bl	80029d2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800287a:	2000      	movs	r0, #0
 800287c:	f000 f8b6 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002880:	2000      	movs	r0, #0
 8002882:	f000 f8b3 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002886:	2001      	movs	r0, #1
 8002888:	f000 f8b0 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800288c:	203f      	movs	r0, #63	; 0x3f
 800288e:	f000 f8ad 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8002892:	20f6      	movs	r0, #246	; 0xf6
 8002894:	f000 f89d 	bl	80029d2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002898:	2001      	movs	r0, #1
 800289a:	f000 f8a7 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800289e:	2000      	movs	r0, #0
 80028a0:	f000 f8a4 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80028a4:	2006      	movs	r0, #6
 80028a6:	f000 f8a1 	bl	80029ec <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80028aa:	202c      	movs	r0, #44	; 0x2c
 80028ac:	f000 f891 	bl	80029d2 <ili9341_WriteReg>
  LCD_Delay(200);
 80028b0:	20c8      	movs	r0, #200	; 0xc8
 80028b2:	f000 fe65 	bl	8003580 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80028b6:	2026      	movs	r0, #38	; 0x26
 80028b8:	f000 f88b 	bl	80029d2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80028bc:	2001      	movs	r0, #1
 80028be:	f000 f895 	bl	80029ec <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80028c2:	20e0      	movs	r0, #224	; 0xe0
 80028c4:	f000 f885 	bl	80029d2 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80028c8:	200f      	movs	r0, #15
 80028ca:	f000 f88f 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80028ce:	2029      	movs	r0, #41	; 0x29
 80028d0:	f000 f88c 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80028d4:	2024      	movs	r0, #36	; 0x24
 80028d6:	f000 f889 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80028da:	200c      	movs	r0, #12
 80028dc:	f000 f886 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80028e0:	200e      	movs	r0, #14
 80028e2:	f000 f883 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80028e6:	2009      	movs	r0, #9
 80028e8:	f000 f880 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80028ec:	204e      	movs	r0, #78	; 0x4e
 80028ee:	f000 f87d 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80028f2:	2078      	movs	r0, #120	; 0x78
 80028f4:	f000 f87a 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80028f8:	203c      	movs	r0, #60	; 0x3c
 80028fa:	f000 f877 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80028fe:	2009      	movs	r0, #9
 8002900:	f000 f874 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002904:	2013      	movs	r0, #19
 8002906:	f000 f871 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800290a:	2005      	movs	r0, #5
 800290c:	f000 f86e 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002910:	2017      	movs	r0, #23
 8002912:	f000 f86b 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002916:	2011      	movs	r0, #17
 8002918:	f000 f868 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800291c:	2000      	movs	r0, #0
 800291e:	f000 f865 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8002922:	20e1      	movs	r0, #225	; 0xe1
 8002924:	f000 f855 	bl	80029d2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002928:	2000      	movs	r0, #0
 800292a:	f000 f85f 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800292e:	2016      	movs	r0, #22
 8002930:	f000 f85c 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002934:	201b      	movs	r0, #27
 8002936:	f000 f859 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800293a:	2004      	movs	r0, #4
 800293c:	f000 f856 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002940:	2011      	movs	r0, #17
 8002942:	f000 f853 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002946:	2007      	movs	r0, #7
 8002948:	f000 f850 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800294c:	2031      	movs	r0, #49	; 0x31
 800294e:	f000 f84d 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8002952:	2033      	movs	r0, #51	; 0x33
 8002954:	f000 f84a 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002958:	2042      	movs	r0, #66	; 0x42
 800295a:	f000 f847 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800295e:	2005      	movs	r0, #5
 8002960:	f000 f844 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002964:	200c      	movs	r0, #12
 8002966:	f000 f841 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800296a:	200a      	movs	r0, #10
 800296c:	f000 f83e 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8002970:	2028      	movs	r0, #40	; 0x28
 8002972:	f000 f83b 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002976:	202f      	movs	r0, #47	; 0x2f
 8002978:	f000 f838 	bl	80029ec <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800297c:	200f      	movs	r0, #15
 800297e:	f000 f835 	bl	80029ec <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8002982:	2011      	movs	r0, #17
 8002984:	f000 f825 	bl	80029d2 <ili9341_WriteReg>
  LCD_Delay(200);
 8002988:	20c8      	movs	r0, #200	; 0xc8
 800298a:	f000 fdf9 	bl	8003580 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800298e:	2029      	movs	r0, #41	; 0x29
 8002990:	f000 f81f 	bl	80029d2 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002994:	202c      	movs	r0, #44	; 0x2c
 8002996:	f000 f81c 	bl	80029d2 <ili9341_WriteReg>
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}

0800299e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80029a2:	f000 fcff 	bl	80033a4 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80029a6:	2103      	movs	r1, #3
 80029a8:	20d3      	movs	r0, #211	; 0xd3
 80029aa:	f000 f82c 	bl	8002a06 <ili9341_ReadData>
 80029ae:	4603      	mov	r3, r0
 80029b0:	b29b      	uxth	r3, r3
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80029ba:	2029      	movs	r0, #41	; 0x29
 80029bc:	f000 f809 	bl	80029d2 <ili9341_WriteReg>
}
 80029c0:	bf00      	nop
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80029c8:	2028      	movs	r0, #40	; 0x28
 80029ca:	f000 f802 	bl	80029d2 <ili9341_WriteReg>
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	4603      	mov	r3, r0
 80029da:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 fd7a 	bl	80034d8 <LCD_IO_WriteReg>
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80029f6:	88fb      	ldrh	r3, [r7, #6]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 fd4b 	bl	8003494 <LCD_IO_WriteData>
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	460a      	mov	r2, r1
 8002a10:	80fb      	strh	r3, [r7, #6]
 8002a12:	4613      	mov	r3, r2
 8002a14:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002a16:	797a      	ldrb	r2, [r7, #5]
 8002a18:	88fb      	ldrh	r3, [r7, #6]
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 fd7d 	bl	800351c <LCD_IO_ReadData>
 8002a22:	4603      	mov	r3, r0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002a30:	23f0      	movs	r3, #240	; 0xf0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002a40:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8002a5a:	88fb      	ldrh	r3, [r7, #6]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 fa59 	bl	8002f14 <stmpe811_GetInstance>
 8002a62:	4603      	mov	r3, r0
 8002a64:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	2bff      	cmp	r3, #255	; 0xff
 8002a6a:	d112      	bne.n	8002a92 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f000 fa51 	bl	8002f14 <stmpe811_GetInstance>
 8002a72:	4603      	mov	r3, r0
 8002a74:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8002a76:	7bbb      	ldrb	r3, [r7, #14]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d80a      	bhi.n	8002a92 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8002a7c:	7bbb      	ldrb	r3, [r7, #14]
 8002a7e:	88fa      	ldrh	r2, [r7, #6]
 8002a80:	b2d1      	uxtb	r1, r2
 8002a82:	4a06      	ldr	r2, [pc, #24]	; (8002a9c <stmpe811_Init+0x4c>)
 8002a84:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8002a86:	f000 fd86 	bl	8003596 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8002a8a:	88fb      	ldrh	r3, [r7, #6]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 f807 	bl	8002aa0 <stmpe811_Reset>
    }
  }
}
 8002a92:	bf00      	nop
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	200265e8 	.word	0x200265e8

08002aa0 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8002aaa:	88fb      	ldrh	r3, [r7, #6]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2202      	movs	r2, #2
 8002ab0:	2103      	movs	r1, #3
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fd7b 	bl	80035ae <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8002ab8:	200a      	movs	r0, #10
 8002aba:	f000 fdb5 	bl	8003628 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2103      	movs	r1, #3
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 fd71 	bl	80035ae <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8002acc:	2002      	movs	r0, #2
 8002ace:	f000 fdab 	bl	8003628 <IOE_Delay>
}
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8002ada:	b590      	push	{r4, r7, lr}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8002ae4:	f000 fd57 	bl	8003596 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2100      	movs	r1, #0
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 fd70 	bl	80035d4 <IOE_Read>
 8002af4:	4603      	mov	r3, r0
 8002af6:	021b      	lsls	r3, r3, #8
 8002af8:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8002afa:	88fb      	ldrh	r3, [r7, #6]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2101      	movs	r1, #1
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fd67 	bl	80035d4 <IOE_Read>
 8002b06:	4603      	mov	r3, r0
 8002b08:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002b0a:	4323      	orrs	r3, r4
 8002b0c:	b21b      	sxth	r3, r3
 8002b0e:	b29b      	uxth	r3, r3
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd90      	pop	{r4, r7, pc}

08002b18 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002b22:	2300      	movs	r3, #0
 8002b24:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2109      	movs	r1, #9
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 fd51 	bl	80035d4 <IOE_Read>
 8002b32:	4603      	mov	r3, r0
 8002b34:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	7bfa      	ldrb	r2, [r7, #15]
 8002b44:	2109      	movs	r1, #9
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 fd31 	bl	80035ae <IOE_Write>
}
 8002b4c:	bf00      	nop
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002b62:	88fb      	ldrh	r3, [r7, #6]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2109      	movs	r1, #9
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 fd33 	bl	80035d4 <IOE_Read>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	f023 0301 	bic.w	r3, r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8002b7a:	88fb      	ldrh	r3, [r7, #6]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	7bfa      	ldrb	r2, [r7, #15]
 8002b80:	2109      	movs	r1, #9
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fd13 	bl	80035ae <IOE_Write>
    
}
 8002b88:	bf00      	nop
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	460a      	mov	r2, r1
 8002b9a:	80fb      	strh	r3, [r7, #6]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002ba4:	88fb      	ldrh	r3, [r7, #6]
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	210a      	movs	r1, #10
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 fd12 	bl	80035d4 <IOE_Read>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	797b      	ldrb	r3, [r7, #5]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002bbc:	88fb      	ldrh	r3, [r7, #6]
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	7bfa      	ldrb	r2, [r7, #15]
 8002bc2:	210a      	movs	r1, #10
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 fcf2 	bl	80035ae <IOE_Write>
}
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b084      	sub	sp, #16
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	4603      	mov	r3, r0
 8002bda:	460a      	mov	r2, r1
 8002bdc:	80fb      	strh	r3, [r7, #6]
 8002bde:	4613      	mov	r3, r2
 8002be0:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002be2:	2300      	movs	r3, #0
 8002be4:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002be6:	88fb      	ldrh	r3, [r7, #6]
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	210a      	movs	r1, #10
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 fcf1 	bl	80035d4 <IOE_Read>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8002bf6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	b25a      	sxtb	r2, r3
 8002bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c02:	4013      	ands	r3, r2
 8002c04:	b25b      	sxtb	r3, r3
 8002c06:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002c08:	88fb      	ldrh	r3, [r7, #6]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	7bfa      	ldrb	r2, [r7, #15]
 8002c0e:	210a      	movs	r1, #10
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 fccc 	bl	80035ae <IOE_Write>
}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	4603      	mov	r3, r0
 8002c26:	460a      	mov	r2, r1
 8002c28:	80fb      	strh	r3, [r7, #6]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8002c2e:	88fb      	ldrh	r3, [r7, #6]
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	210b      	movs	r1, #11
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 fccd 	bl	80035d4 <IOE_Read>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	797b      	ldrb	r3, [r7, #5]
 8002c40:	4013      	ands	r3, r2
 8002c42:	b2db      	uxtb	r3, r3
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	460a      	mov	r2, r1
 8002c56:	80fb      	strh	r3, [r7, #6]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8002c5c:	88fb      	ldrh	r3, [r7, #6]
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	797a      	ldrb	r2, [r7, #5]
 8002c62:	210b      	movs	r1, #11
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fca2 	bl	80035ae <IOE_Write>
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b084      	sub	sp, #16
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	4603      	mov	r3, r0
 8002c7a:	6039      	str	r1, [r7, #0]
 8002c7c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2117      	movs	r1, #23
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 fca3 	bl	80035d4 <IOE_Read>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	b25b      	sxtb	r3, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	b25a      	sxtb	r2, r3
 8002c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	b25b      	sxtb	r3, r3
 8002ca2:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8002ca4:	88fb      	ldrh	r3, [r7, #6]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	7bfa      	ldrb	r2, [r7, #15]
 8002caa:	2117      	movs	r1, #23
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 fc7e 	bl	80035ae <IOE_Write>
}
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8002cc4:	88fb      	ldrh	r3, [r7, #6]
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2104      	movs	r1, #4
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 fc82 	bl	80035d4 <IOE_Read>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	f023 0304 	bic.w	r3, r3, #4
 8002cda:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002cdc:	88fb      	ldrh	r3, [r7, #6]
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	7bfa      	ldrb	r2, [r7, #15]
 8002ce2:	2104      	movs	r1, #4
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 fc62 	bl	80035ae <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	21f0      	movs	r1, #240	; 0xf0
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff ffbf 	bl	8002c72 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	f023 0303 	bic.w	r3, r3, #3
 8002cfa:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	7bfa      	ldrb	r2, [r7, #15]
 8002d02:	2104      	movs	r1, #4
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fc52 	bl	80035ae <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2249      	movs	r2, #73	; 0x49
 8002d10:	2120      	movs	r1, #32
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 fc4b 	bl	80035ae <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8002d18:	2002      	movs	r0, #2
 8002d1a:	f000 fc85 	bl	8003628 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8002d1e:	88fb      	ldrh	r3, [r7, #6]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2201      	movs	r2, #1
 8002d24:	2121      	movs	r1, #33	; 0x21
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 fc41 	bl	80035ae <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8002d2c:	88fb      	ldrh	r3, [r7, #6]
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	229a      	movs	r2, #154	; 0x9a
 8002d32:	2141      	movs	r1, #65	; 0x41
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 fc3a 	bl	80035ae <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8002d3a:	88fb      	ldrh	r3, [r7, #6]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2201      	movs	r2, #1
 8002d40:	214a      	movs	r1, #74	; 0x4a
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 fc33 	bl	80035ae <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002d48:	88fb      	ldrh	r3, [r7, #6]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	214b      	movs	r1, #75	; 0x4b
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 fc2c 	bl	80035ae <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002d56:	88fb      	ldrh	r3, [r7, #6]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	214b      	movs	r1, #75	; 0x4b
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fc25 	bl	80035ae <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8002d64:	88fb      	ldrh	r3, [r7, #6]
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2201      	movs	r2, #1
 8002d6a:	2156      	movs	r1, #86	; 0x56
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 fc1e 	bl	80035ae <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8002d72:	88fb      	ldrh	r3, [r7, #6]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2201      	movs	r2, #1
 8002d78:	2158      	movs	r1, #88	; 0x58
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 fc17 	bl	80035ae <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8002d80:	88fb      	ldrh	r3, [r7, #6]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2201      	movs	r2, #1
 8002d86:	2140      	movs	r1, #64	; 0x40
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 fc10 	bl	80035ae <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	22ff      	movs	r2, #255	; 0xff
 8002d94:	210b      	movs	r1, #11
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 fc09 	bl	80035ae <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002d9c:	2002      	movs	r0, #2
 8002d9e:	f000 fc43 	bl	8003628 <IOE_Delay>
}
 8002da2:	bf00      	nop
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b084      	sub	sp, #16
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	4603      	mov	r3, r0
 8002db2:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8002db4:	2300      	movs	r3, #0
 8002db6:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8002db8:	88fb      	ldrh	r3, [r7, #6]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2140      	movs	r1, #64	; 0x40
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fc08 	bl	80035d4 <IOE_Read>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dca:	2b80      	cmp	r3, #128	; 0x80
 8002dcc:	bf0c      	ite	eq
 8002dce:	2301      	moveq	r3, #1
 8002dd0:	2300      	movne	r3, #0
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8002dd6:	7bbb      	ldrb	r3, [r7, #14]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00b      	beq.n	8002df4 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	214c      	movs	r1, #76	; 0x4c
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 fbf6 	bl	80035d4 <IOE_Read>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d010      	beq.n	8002e10 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8002dee:	2301      	movs	r3, #1
 8002df0:	73fb      	strb	r3, [r7, #15]
 8002df2:	e00d      	b.n	8002e10 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002df4:	88fb      	ldrh	r3, [r7, #6]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2201      	movs	r2, #1
 8002dfa:	214b      	movs	r1, #75	; 0x4b
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 fbd6 	bl	80035ae <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002e02:	88fb      	ldrh	r3, [r7, #6]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2200      	movs	r2, #0
 8002e08:	214b      	movs	r1, #75	; 0x4b
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fbcf 	bl	80035ae <IOE_Write>
  }
  
  return ret;
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b086      	sub	sp, #24
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4603      	mov	r3, r0
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	607a      	str	r2, [r7, #4]
 8002e26:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8002e28:	89fb      	ldrh	r3, [r7, #14]
 8002e2a:	b2d8      	uxtb	r0, r3
 8002e2c:	f107 0210 	add.w	r2, r7, #16
 8002e30:	2304      	movs	r3, #4
 8002e32:	21d7      	movs	r1, #215	; 0xd7
 8002e34:	f000 fbe1 	bl	80035fa <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8002e38:	7c3b      	ldrb	r3, [r7, #16]
 8002e3a:	061a      	lsls	r2, r3, #24
 8002e3c:	7c7b      	ldrb	r3, [r7, #17]
 8002e3e:	041b      	lsls	r3, r3, #16
 8002e40:	431a      	orrs	r2, r3
 8002e42:	7cbb      	ldrb	r3, [r7, #18]
 8002e44:	021b      	lsls	r3, r3, #8
 8002e46:	4313      	orrs	r3, r2
 8002e48:	7cfa      	ldrb	r2, [r7, #19]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	0d1b      	lsrs	r3, r3, #20
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	0a1b      	lsrs	r3, r3, #8
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002e68:	89fb      	ldrh	r3, [r7, #14]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	214b      	movs	r1, #75	; 0x4b
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 fb9c 	bl	80035ae <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002e76:	89fb      	ldrh	r3, [r7, #14]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	214b      	movs	r1, #75	; 0x4b
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 fb95 	bl	80035ae <IOE_Write>
}
 8002e84:	bf00      	nop
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8002e96:	f000 fb84 	bl	80035a2 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002e9a:	88fb      	ldrh	r3, [r7, #6]
 8002e9c:	211f      	movs	r1, #31
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff fe76 	bl	8002b90 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8002ea4:	88fb      	ldrh	r3, [r7, #6]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff fe36 	bl	8002b18 <stmpe811_EnableGlobalIT>
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8002ebe:	88fb      	ldrh	r3, [r7, #6]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff fe47 	bl	8002b54 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002ec6:	88fb      	ldrh	r3, [r7, #6]
 8002ec8:	211f      	movs	r1, #31
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fe81 	bl	8002bd2 <stmpe811_DisableITSource>
}
 8002ed0:	bf00      	nop
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8002ee2:	88fb      	ldrh	r3, [r7, #6]
 8002ee4:	211f      	movs	r1, #31
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff fe99 	bl	8002c1e <stmpe811_ReadGITStatus>
 8002eec:	4603      	mov	r3, r0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	4603      	mov	r3, r0
 8002efe:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	211f      	movs	r1, #31
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fea1 	bl	8002c4c <stmpe811_ClearGlobalIT>
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002f22:	2300      	movs	r3, #0
 8002f24:	73fb      	strb	r3, [r7, #15]
 8002f26:	e00b      	b.n	8002f40 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	4a0a      	ldr	r2, [pc, #40]	; (8002f54 <stmpe811_GetInstance+0x40>)
 8002f2c:	5cd3      	ldrb	r3, [r2, r3]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	88fa      	ldrh	r2, [r7, #6]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d101      	bne.n	8002f3a <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	e006      	b.n	8002f48 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d9f0      	bls.n	8002f28 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002f46:	23ff      	movs	r3, #255	; 0xff
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	200265e8 	.word	0x200265e8

08002f58 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08a      	sub	sp, #40	; 0x28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a33      	ldr	r2, [pc, #204]	; (8003034 <I2Cx_MspInit+0xdc>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d15f      	bne.n	800302a <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	4b32      	ldr	r3, [pc, #200]	; (8003038 <I2Cx_MspInit+0xe0>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	4a31      	ldr	r2, [pc, #196]	; (8003038 <I2Cx_MspInit+0xe0>)
 8002f74:	f043 0304 	orr.w	r3, r3, #4
 8002f78:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7a:	4b2f      	ldr	r3, [pc, #188]	; (8003038 <I2Cx_MspInit+0xe0>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	4b2b      	ldr	r3, [pc, #172]	; (8003038 <I2Cx_MspInit+0xe0>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	4a2a      	ldr	r2, [pc, #168]	; (8003038 <I2Cx_MspInit+0xe0>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	6313      	str	r3, [r2, #48]	; 0x30
 8002f96:	4b28      	ldr	r3, [pc, #160]	; (8003038 <I2Cx_MspInit+0xe0>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8002fa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002fa8:	2312      	movs	r3, #18
 8002faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002fb8:	f107 0314 	add.w	r3, r7, #20
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	481f      	ldr	r0, [pc, #124]	; (800303c <I2Cx_MspInit+0xe4>)
 8002fc0:	f001 fcf0 	bl	80049a4 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8002fc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fc8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002fca:	f107 0314 	add.w	r3, r7, #20
 8002fce:	4619      	mov	r1, r3
 8002fd0:	481b      	ldr	r0, [pc, #108]	; (8003040 <I2Cx_MspInit+0xe8>)
 8002fd2:	f001 fce7 	bl	80049a4 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	4b17      	ldr	r3, [pc, #92]	; (8003038 <I2Cx_MspInit+0xe0>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	4a16      	ldr	r2, [pc, #88]	; (8003038 <I2Cx_MspInit+0xe0>)
 8002fe0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe6:	4b14      	ldr	r3, [pc, #80]	; (8003038 <I2Cx_MspInit+0xe0>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8002ff2:	4b11      	ldr	r3, [pc, #68]	; (8003038 <I2Cx_MspInit+0xe0>)
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	4a10      	ldr	r2, [pc, #64]	; (8003038 <I2Cx_MspInit+0xe0>)
 8002ff8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ffc:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8002ffe:	4b0e      	ldr	r3, [pc, #56]	; (8003038 <I2Cx_MspInit+0xe0>)
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	4a0d      	ldr	r2, [pc, #52]	; (8003038 <I2Cx_MspInit+0xe0>)
 8003004:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003008:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800300a:	2200      	movs	r2, #0
 800300c:	210f      	movs	r1, #15
 800300e:	2048      	movs	r0, #72	; 0x48
 8003010:	f001 f980 	bl	8004314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003014:	2048      	movs	r0, #72	; 0x48
 8003016:	f001 f999 	bl	800434c <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800301a:	2200      	movs	r2, #0
 800301c:	210f      	movs	r1, #15
 800301e:	2049      	movs	r0, #73	; 0x49
 8003020:	f001 f978 	bl	8004314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8003024:	2049      	movs	r0, #73	; 0x49
 8003026:	f001 f991 	bl	800434c <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 800302a:	bf00      	nop
 800302c:	3728      	adds	r7, #40	; 0x28
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40005c00 	.word	0x40005c00
 8003038:	40023800 	.word	0x40023800
 800303c:	40020000 	.word	0x40020000
 8003040:	40020800 	.word	0x40020800

08003044 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8003048:	4814      	ldr	r0, [pc, #80]	; (800309c <I2Cx_Init+0x58>)
 800304a:	f002 fc11 	bl	8005870 <HAL_I2C_GetState>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d121      	bne.n	8003098 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8003054:	4b11      	ldr	r3, [pc, #68]	; (800309c <I2Cx_Init+0x58>)
 8003056:	4a12      	ldr	r2, [pc, #72]	; (80030a0 <I2Cx_Init+0x5c>)
 8003058:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 800305a:	4b10      	ldr	r3, [pc, #64]	; (800309c <I2Cx_Init+0x58>)
 800305c:	4a11      	ldr	r2, [pc, #68]	; (80030a4 <I2Cx_Init+0x60>)
 800305e:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8003060:	4b0e      	ldr	r3, [pc, #56]	; (800309c <I2Cx_Init+0x58>)
 8003062:	2200      	movs	r2, #0
 8003064:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8003066:	4b0d      	ldr	r3, [pc, #52]	; (800309c <I2Cx_Init+0x58>)
 8003068:	2200      	movs	r2, #0
 800306a:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800306c:	4b0b      	ldr	r3, [pc, #44]	; (800309c <I2Cx_Init+0x58>)
 800306e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003072:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8003074:	4b09      	ldr	r3, [pc, #36]	; (800309c <I2Cx_Init+0x58>)
 8003076:	2200      	movs	r2, #0
 8003078:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 800307a:	4b08      	ldr	r3, [pc, #32]	; (800309c <I2Cx_Init+0x58>)
 800307c:	2200      	movs	r2, #0
 800307e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8003080:	4b06      	ldr	r3, [pc, #24]	; (800309c <I2Cx_Init+0x58>)
 8003082:	2200      	movs	r2, #0
 8003084:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8003086:	4b05      	ldr	r3, [pc, #20]	; (800309c <I2Cx_Init+0x58>)
 8003088:	2200      	movs	r2, #0
 800308a:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 800308c:	4803      	ldr	r0, [pc, #12]	; (800309c <I2Cx_Init+0x58>)
 800308e:	f7ff ff63 	bl	8002f58 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8003092:	4802      	ldr	r0, [pc, #8]	; (800309c <I2Cx_Init+0x58>)
 8003094:	f001 ff58 	bl	8004f48 <HAL_I2C_Init>
  }
}
 8003098:	bf00      	nop
 800309a:	bd80      	pop	{r7, pc}
 800309c:	2002f600 	.word	0x2002f600
 80030a0:	40005c00 	.word	0x40005c00
 80030a4:	000186a0 	.word	0x000186a0

080030a8 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	4b13      	ldr	r3, [pc, #76]	; (8003100 <I2Cx_ITConfig+0x58>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a12      	ldr	r2, [pc, #72]	; (8003100 <I2Cx_ITConfig+0x58>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b10      	ldr	r3, [pc, #64]	; (8003100 <I2Cx_ITConfig+0x58>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80030ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80030d0:	2301      	movs	r3, #1
 80030d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80030d4:	2300      	movs	r3, #0
 80030d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80030d8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80030dc:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80030de:	1d3b      	adds	r3, r7, #4
 80030e0:	4619      	mov	r1, r3
 80030e2:	4808      	ldr	r0, [pc, #32]	; (8003104 <I2Cx_ITConfig+0x5c>)
 80030e4:	f001 fc5e 	bl	80049a4 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80030e8:	2200      	movs	r2, #0
 80030ea:	210f      	movs	r1, #15
 80030ec:	2028      	movs	r0, #40	; 0x28
 80030ee:	f001 f911 	bl	8004314 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 80030f2:	2028      	movs	r0, #40	; 0x28
 80030f4:	f001 f92a 	bl	800434c <HAL_NVIC_EnableIRQ>
}
 80030f8:	bf00      	nop
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40023800 	.word	0x40023800
 8003104:	40020000 	.word	0x40020000

08003108 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8003108:	b580      	push	{r7, lr}
 800310a:	b088      	sub	sp, #32
 800310c:	af04      	add	r7, sp, #16
 800310e:	4603      	mov	r3, r0
 8003110:	71fb      	strb	r3, [r7, #7]
 8003112:	460b      	mov	r3, r1
 8003114:	71bb      	strb	r3, [r7, #6]
 8003116:	4613      	mov	r3, r2
 8003118:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	b299      	uxth	r1, r3
 8003122:	79bb      	ldrb	r3, [r7, #6]
 8003124:	b29a      	uxth	r2, r3
 8003126:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <I2Cx_WriteData+0x4c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	9302      	str	r3, [sp, #8]
 800312c:	2301      	movs	r3, #1
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	1d7b      	adds	r3, r7, #5
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	2301      	movs	r3, #1
 8003136:	4808      	ldr	r0, [pc, #32]	; (8003158 <I2Cx_WriteData+0x50>)
 8003138:	f002 f87a 	bl	8005230 <HAL_I2C_Mem_Write>
 800313c:	4603      	mov	r3, r0
 800313e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003146:	f000 f863 	bl	8003210 <I2Cx_Error>
  }        
}
 800314a:	bf00      	nop
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000078 	.word	0x20000078
 8003158:	2002f600 	.word	0x2002f600

0800315c <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af04      	add	r7, sp, #16
 8003162:	4603      	mov	r3, r0
 8003164:	460a      	mov	r2, r1
 8003166:	71fb      	strb	r3, [r7, #7]
 8003168:	4613      	mov	r3, r2
 800316a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8003170:	2300      	movs	r3, #0
 8003172:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	b299      	uxth	r1, r3
 8003178:	79bb      	ldrb	r3, [r7, #6]
 800317a:	b29a      	uxth	r2, r3
 800317c:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <I2Cx_ReadData+0x50>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	9302      	str	r3, [sp, #8]
 8003182:	2301      	movs	r3, #1
 8003184:	9301      	str	r3, [sp, #4]
 8003186:	f107 030e 	add.w	r3, r7, #14
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	2301      	movs	r3, #1
 800318e:	4808      	ldr	r0, [pc, #32]	; (80031b0 <I2Cx_ReadData+0x54>)
 8003190:	f002 f948 	bl	8005424 <HAL_I2C_Mem_Read>
 8003194:	4603      	mov	r3, r0
 8003196:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8003198:	7bfb      	ldrb	r3, [r7, #15]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800319e:	f000 f837 	bl	8003210 <I2Cx_Error>
  
  }
  return value;
 80031a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	20000078 	.word	0x20000078
 80031b0:	2002f600 	.word	0x2002f600

080031b4 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b088      	sub	sp, #32
 80031b8:	af04      	add	r7, sp, #16
 80031ba:	603a      	str	r2, [r7, #0]
 80031bc:	461a      	mov	r2, r3
 80031be:	4603      	mov	r3, r0
 80031c0:	71fb      	strb	r3, [r7, #7]
 80031c2:	460b      	mov	r3, r1
 80031c4:	71bb      	strb	r3, [r7, #6]
 80031c6:	4613      	mov	r3, r2
 80031c8:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 80031ce:	79fb      	ldrb	r3, [r7, #7]
 80031d0:	b299      	uxth	r1, r3
 80031d2:	79bb      	ldrb	r3, [r7, #6]
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <I2Cx_ReadBuffer+0x54>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	9302      	str	r3, [sp, #8]
 80031dc:	88bb      	ldrh	r3, [r7, #4]
 80031de:	9301      	str	r3, [sp, #4]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	2301      	movs	r3, #1
 80031e6:	4809      	ldr	r0, [pc, #36]	; (800320c <I2Cx_ReadBuffer+0x58>)
 80031e8:	f002 f91c 	bl	8005424 <HAL_I2C_Mem_Read>
 80031ec:	4603      	mov	r3, r0
 80031ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 80031f6:	2300      	movs	r3, #0
 80031f8:	e002      	b.n	8003200 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80031fa:	f000 f809 	bl	8003210 <I2Cx_Error>

    return 1;
 80031fe:	2301      	movs	r3, #1
  }
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	20000078 	.word	0x20000078
 800320c:	2002f600 	.word	0x2002f600

08003210 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8003214:	4803      	ldr	r0, [pc, #12]	; (8003224 <I2Cx_Error+0x14>)
 8003216:	f001 ffdb 	bl	80051d0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 800321a:	f7ff ff13 	bl	8003044 <I2Cx_Init>
}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	2002f600 	.word	0x2002f600

08003228 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800322c:	4819      	ldr	r0, [pc, #100]	; (8003294 <SPIx_Init+0x6c>)
 800322e:	f004 fcfb 	bl	8007c28 <HAL_SPI_GetState>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d12b      	bne.n	8003290 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8003238:	4b16      	ldr	r3, [pc, #88]	; (8003294 <SPIx_Init+0x6c>)
 800323a:	4a17      	ldr	r2, [pc, #92]	; (8003298 <SPIx_Init+0x70>)
 800323c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800323e:	4b15      	ldr	r3, [pc, #84]	; (8003294 <SPIx_Init+0x6c>)
 8003240:	2218      	movs	r2, #24
 8003242:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003244:	4b13      	ldr	r3, [pc, #76]	; (8003294 <SPIx_Init+0x6c>)
 8003246:	2200      	movs	r2, #0
 8003248:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800324a:	4b12      	ldr	r3, [pc, #72]	; (8003294 <SPIx_Init+0x6c>)
 800324c:	2200      	movs	r2, #0
 800324e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003250:	4b10      	ldr	r3, [pc, #64]	; (8003294 <SPIx_Init+0x6c>)
 8003252:	2200      	movs	r2, #0
 8003254:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003256:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <SPIx_Init+0x6c>)
 8003258:	2200      	movs	r2, #0
 800325a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800325c:	4b0d      	ldr	r3, [pc, #52]	; (8003294 <SPIx_Init+0x6c>)
 800325e:	2207      	movs	r2, #7
 8003260:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003262:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <SPIx_Init+0x6c>)
 8003264:	2200      	movs	r2, #0
 8003266:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003268:	4b0a      	ldr	r3, [pc, #40]	; (8003294 <SPIx_Init+0x6c>)
 800326a:	2200      	movs	r2, #0
 800326c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800326e:	4b09      	ldr	r3, [pc, #36]	; (8003294 <SPIx_Init+0x6c>)
 8003270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003274:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8003276:	4b07      	ldr	r3, [pc, #28]	; (8003294 <SPIx_Init+0x6c>)
 8003278:	2200      	movs	r2, #0
 800327a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800327c:	4b05      	ldr	r3, [pc, #20]	; (8003294 <SPIx_Init+0x6c>)
 800327e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003282:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8003284:	4803      	ldr	r0, [pc, #12]	; (8003294 <SPIx_Init+0x6c>)
 8003286:	f000 f853 	bl	8003330 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800328a:	4802      	ldr	r0, [pc, #8]	; (8003294 <SPIx_Init+0x6c>)
 800328c:	f004 f82c 	bl	80072e8 <HAL_SPI_Init>
  } 
}
 8003290:	bf00      	nop
 8003292:	bd80      	pop	{r7, pc}
 8003294:	200265ec 	.word	0x200265ec
 8003298:	40015000 	.word	0x40015000

0800329c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80032a6:	2300      	movs	r3, #0
 80032a8:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <SPIx_Read+0x38>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f107 0108 	add.w	r1, r7, #8
 80032b6:	4808      	ldr	r0, [pc, #32]	; (80032d8 <SPIx_Read+0x3c>)
 80032b8:	f004 fa03 	bl	80076c2 <HAL_SPI_Receive>
 80032bc:	4603      	mov	r3, r0
 80032be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80032c6:	f000 f827 	bl	8003318 <SPIx_Error>
  }
  
  return readvalue;
 80032ca:	68bb      	ldr	r3, [r7, #8]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	2000007c 	.word	0x2000007c
 80032d8:	200265ec 	.word	0x200265ec

080032dc <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80032ea:	4b09      	ldr	r3, [pc, #36]	; (8003310 <SPIx_Write+0x34>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	1db9      	adds	r1, r7, #6
 80032f0:	2201      	movs	r2, #1
 80032f2:	4808      	ldr	r0, [pc, #32]	; (8003314 <SPIx_Write+0x38>)
 80032f4:	f004 f8a9 	bl	800744a <HAL_SPI_Transmit>
 80032f8:	4603      	mov	r3, r0
 80032fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003302:	f000 f809 	bl	8003318 <SPIx_Error>
  }
}
 8003306:	bf00      	nop
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	2000007c 	.word	0x2000007c
 8003314:	200265ec 	.word	0x200265ec

08003318 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800331c:	4803      	ldr	r0, [pc, #12]	; (800332c <SPIx_Error+0x14>)
 800331e:	f004 f86c 	bl	80073fa <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8003322:	f7ff ff81 	bl	8003228 <SPIx_Init>
}
 8003326:	bf00      	nop
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	200265ec 	.word	0x200265ec

08003330 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08a      	sub	sp, #40	; 0x28
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8003338:	2300      	movs	r3, #0
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	4b17      	ldr	r3, [pc, #92]	; (800339c <SPIx_MspInit+0x6c>)
 800333e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003340:	4a16      	ldr	r2, [pc, #88]	; (800339c <SPIx_MspInit+0x6c>)
 8003342:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003346:	6453      	str	r3, [r2, #68]	; 0x44
 8003348:	4b14      	ldr	r3, [pc, #80]	; (800339c <SPIx_MspInit+0x6c>)
 800334a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	4b10      	ldr	r3, [pc, #64]	; (800339c <SPIx_MspInit+0x6c>)
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	4a0f      	ldr	r2, [pc, #60]	; (800339c <SPIx_MspInit+0x6c>)
 800335e:	f043 0320 	orr.w	r3, r3, #32
 8003362:	6313      	str	r3, [r2, #48]	; 0x30
 8003364:	4b0d      	ldr	r3, [pc, #52]	; (800339c <SPIx_MspInit+0x6c>)
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	f003 0320 	and.w	r3, r3, #32
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8003370:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003374:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8003376:	2302      	movs	r3, #2
 8003378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800337a:	2302      	movs	r3, #2
 800337c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800337e:	2301      	movs	r3, #1
 8003380:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8003382:	2305      	movs	r3, #5
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8003386:	f107 0314 	add.w	r3, r7, #20
 800338a:	4619      	mov	r1, r3
 800338c:	4804      	ldr	r0, [pc, #16]	; (80033a0 <SPIx_MspInit+0x70>)
 800338e:	f001 fb09 	bl	80049a4 <HAL_GPIO_Init>
}
 8003392:	bf00      	nop
 8003394:	3728      	adds	r7, #40	; 0x28
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40023800 	.word	0x40023800
 80033a0:	40021400 	.word	0x40021400

080033a4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80033aa:	4b36      	ldr	r3, [pc, #216]	; (8003484 <LCD_IO_Init+0xe0>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d164      	bne.n	800347c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80033b2:	4b34      	ldr	r3, [pc, #208]	; (8003484 <LCD_IO_Init+0xe0>)
 80033b4:	2201      	movs	r2, #1
 80033b6:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80033b8:	2300      	movs	r3, #0
 80033ba:	60bb      	str	r3, [r7, #8]
 80033bc:	4b32      	ldr	r3, [pc, #200]	; (8003488 <LCD_IO_Init+0xe4>)
 80033be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c0:	4a31      	ldr	r2, [pc, #196]	; (8003488 <LCD_IO_Init+0xe4>)
 80033c2:	f043 0308 	orr.w	r3, r3, #8
 80033c6:	6313      	str	r3, [r2, #48]	; 0x30
 80033c8:	4b2f      	ldr	r3, [pc, #188]	; (8003488 <LCD_IO_Init+0xe4>)
 80033ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	60bb      	str	r3, [r7, #8]
 80033d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80033d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80033da:	2301      	movs	r3, #1
 80033dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80033de:	2300      	movs	r3, #0
 80033e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80033e2:	2302      	movs	r3, #2
 80033e4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80033e6:	f107 030c 	add.w	r3, r7, #12
 80033ea:	4619      	mov	r1, r3
 80033ec:	4827      	ldr	r0, [pc, #156]	; (800348c <LCD_IO_Init+0xe8>)
 80033ee:	f001 fad9 	bl	80049a4 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	607b      	str	r3, [r7, #4]
 80033f6:	4b24      	ldr	r3, [pc, #144]	; (8003488 <LCD_IO_Init+0xe4>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	4a23      	ldr	r2, [pc, #140]	; (8003488 <LCD_IO_Init+0xe4>)
 80033fc:	f043 0308 	orr.w	r3, r3, #8
 8003400:	6313      	str	r3, [r2, #48]	; 0x30
 8003402:	4b21      	ldr	r3, [pc, #132]	; (8003488 <LCD_IO_Init+0xe4>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	607b      	str	r3, [r7, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800340e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003412:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003414:	2301      	movs	r3, #1
 8003416:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800341c:	2302      	movs	r3, #2
 800341e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003420:	f107 030c 	add.w	r3, r7, #12
 8003424:	4619      	mov	r1, r3
 8003426:	4819      	ldr	r0, [pc, #100]	; (800348c <LCD_IO_Init+0xe8>)
 8003428:	f001 fabc 	bl	80049a4 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800342c:	2300      	movs	r3, #0
 800342e:	603b      	str	r3, [r7, #0]
 8003430:	4b15      	ldr	r3, [pc, #84]	; (8003488 <LCD_IO_Init+0xe4>)
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	4a14      	ldr	r2, [pc, #80]	; (8003488 <LCD_IO_Init+0xe4>)
 8003436:	f043 0304 	orr.w	r3, r3, #4
 800343a:	6313      	str	r3, [r2, #48]	; 0x30
 800343c:	4b12      	ldr	r3, [pc, #72]	; (8003488 <LCD_IO_Init+0xe4>)
 800343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	603b      	str	r3, [r7, #0]
 8003446:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003448:	2304      	movs	r3, #4
 800344a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800344c:	2301      	movs	r3, #1
 800344e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003450:	2300      	movs	r3, #0
 8003452:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003454:	2302      	movs	r3, #2
 8003456:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003458:	f107 030c 	add.w	r3, r7, #12
 800345c:	4619      	mov	r1, r3
 800345e:	480c      	ldr	r0, [pc, #48]	; (8003490 <LCD_IO_Init+0xec>)
 8003460:	f001 faa0 	bl	80049a4 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003464:	2200      	movs	r2, #0
 8003466:	2104      	movs	r1, #4
 8003468:	4809      	ldr	r0, [pc, #36]	; (8003490 <LCD_IO_Init+0xec>)
 800346a:	f001 fd53 	bl	8004f14 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800346e:	2201      	movs	r2, #1
 8003470:	2104      	movs	r1, #4
 8003472:	4807      	ldr	r0, [pc, #28]	; (8003490 <LCD_IO_Init+0xec>)
 8003474:	f001 fd4e 	bl	8004f14 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8003478:	f7ff fed6 	bl	8003228 <SPIx_Init>
  }
}
 800347c:	bf00      	nop
 800347e:	3720      	adds	r7, #32
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	20026644 	.word	0x20026644
 8003488:	40023800 	.word	0x40023800
 800348c:	40020c00 	.word	0x40020c00
 8003490:	40020800 	.word	0x40020800

08003494 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800349e:	2201      	movs	r2, #1
 80034a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034a4:	480a      	ldr	r0, [pc, #40]	; (80034d0 <LCD_IO_WriteData+0x3c>)
 80034a6:	f001 fd35 	bl	8004f14 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80034aa:	2200      	movs	r2, #0
 80034ac:	2104      	movs	r1, #4
 80034ae:	4809      	ldr	r0, [pc, #36]	; (80034d4 <LCD_IO_WriteData+0x40>)
 80034b0:	f001 fd30 	bl	8004f14 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80034b4:	88fb      	ldrh	r3, [r7, #6]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff ff10 	bl	80032dc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80034bc:	2201      	movs	r2, #1
 80034be:	2104      	movs	r1, #4
 80034c0:	4804      	ldr	r0, [pc, #16]	; (80034d4 <LCD_IO_WriteData+0x40>)
 80034c2:	f001 fd27 	bl	8004f14 <HAL_GPIO_WritePin>
}
 80034c6:	bf00      	nop
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40020c00 	.word	0x40020c00
 80034d4:	40020800 	.word	0x40020800

080034d8 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80034e2:	2200      	movs	r2, #0
 80034e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034e8:	480a      	ldr	r0, [pc, #40]	; (8003514 <LCD_IO_WriteReg+0x3c>)
 80034ea:	f001 fd13 	bl	8004f14 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80034ee:	2200      	movs	r2, #0
 80034f0:	2104      	movs	r1, #4
 80034f2:	4809      	ldr	r0, [pc, #36]	; (8003518 <LCD_IO_WriteReg+0x40>)
 80034f4:	f001 fd0e 	bl	8004f14 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff feed 	bl	80032dc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003502:	2201      	movs	r2, #1
 8003504:	2104      	movs	r1, #4
 8003506:	4804      	ldr	r0, [pc, #16]	; (8003518 <LCD_IO_WriteReg+0x40>)
 8003508:	f001 fd04 	bl	8004f14 <HAL_GPIO_WritePin>
}
 800350c:	bf00      	nop
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40020c00 	.word	0x40020c00
 8003518:	40020800 	.word	0x40020800

0800351c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	460a      	mov	r2, r1
 8003526:	80fb      	strh	r3, [r7, #6]
 8003528:	4613      	mov	r3, r2
 800352a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8003530:	2200      	movs	r2, #0
 8003532:	2104      	movs	r1, #4
 8003534:	4810      	ldr	r0, [pc, #64]	; (8003578 <LCD_IO_ReadData+0x5c>)
 8003536:	f001 fced 	bl	8004f14 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800353a:	2200      	movs	r2, #0
 800353c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003540:	480e      	ldr	r0, [pc, #56]	; (800357c <LCD_IO_ReadData+0x60>)
 8003542:	f001 fce7 	bl	8004f14 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8003546:	88fb      	ldrh	r3, [r7, #6]
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff fec7 	bl	80032dc <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800354e:	797b      	ldrb	r3, [r7, #5]
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff fea3 	bl	800329c <SPIx_Read>
 8003556:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003558:	2201      	movs	r2, #1
 800355a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800355e:	4807      	ldr	r0, [pc, #28]	; (800357c <LCD_IO_ReadData+0x60>)
 8003560:	f001 fcd8 	bl	8004f14 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003564:	2201      	movs	r2, #1
 8003566:	2104      	movs	r1, #4
 8003568:	4803      	ldr	r0, [pc, #12]	; (8003578 <LCD_IO_ReadData+0x5c>)
 800356a:	f001 fcd3 	bl	8004f14 <HAL_GPIO_WritePin>
  
  return readvalue;
 800356e:	68fb      	ldr	r3, [r7, #12]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40020800 	.word	0x40020800
 800357c:	40020c00 	.word	0x40020c00

08003580 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 fde7 	bl	800415c <HAL_Delay>
}
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8003596:	b580      	push	{r7, lr}
 8003598:	af00      	add	r7, sp, #0
  I2Cx_Init();
 800359a:	f7ff fd53 	bl	8003044 <I2Cx_Init>
}
 800359e:	bf00      	nop
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 80035a6:	f7ff fd7f 	bl	80030a8 <I2Cx_ITConfig>
}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}

080035ae <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	4603      	mov	r3, r0
 80035b6:	71fb      	strb	r3, [r7, #7]
 80035b8:	460b      	mov	r3, r1
 80035ba:	71bb      	strb	r3, [r7, #6]
 80035bc:	4613      	mov	r3, r2
 80035be:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 80035c0:	797a      	ldrb	r2, [r7, #5]
 80035c2:	79b9      	ldrb	r1, [r7, #6]
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff fd9e 	bl	8003108 <I2Cx_WriteData>
}
 80035cc:	bf00      	nop
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	460a      	mov	r2, r1
 80035de:	71fb      	strb	r3, [r7, #7]
 80035e0:	4613      	mov	r3, r2
 80035e2:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 80035e4:	79ba      	ldrb	r2, [r7, #6]
 80035e6:	79fb      	ldrb	r3, [r7, #7]
 80035e8:	4611      	mov	r1, r2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff fdb6 	bl	800315c <I2Cx_ReadData>
 80035f0:	4603      	mov	r3, r0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	603a      	str	r2, [r7, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	4603      	mov	r3, r0
 8003606:	71fb      	strb	r3, [r7, #7]
 8003608:	460b      	mov	r3, r1
 800360a:	71bb      	strb	r3, [r7, #6]
 800360c:	4613      	mov	r3, r2
 800360e:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8003610:	88bb      	ldrh	r3, [r7, #4]
 8003612:	79b9      	ldrb	r1, [r7, #6]
 8003614:	79f8      	ldrb	r0, [r7, #7]
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	f7ff fdcc 	bl	80031b4 <I2Cx_ReadBuffer>
 800361c:	4603      	mov	r3, r0
 800361e:	b29b      	uxth	r3, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 fd93 	bl	800415c <HAL_Delay>
}
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8003644:	4b2c      	ldr	r3, [pc, #176]	; (80036f8 <BSP_LCD_Init+0xb8>)
 8003646:	4a2d      	ldr	r2, [pc, #180]	; (80036fc <BSP_LCD_Init+0xbc>)
 8003648:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800364a:	4b2b      	ldr	r3, [pc, #172]	; (80036f8 <BSP_LCD_Init+0xb8>)
 800364c:	2209      	movs	r2, #9
 800364e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8003650:	4b29      	ldr	r3, [pc, #164]	; (80036f8 <BSP_LCD_Init+0xb8>)
 8003652:	2201      	movs	r2, #1
 8003654:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8003656:	4b28      	ldr	r3, [pc, #160]	; (80036f8 <BSP_LCD_Init+0xb8>)
 8003658:	221d      	movs	r2, #29
 800365a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 800365c:	4b26      	ldr	r3, [pc, #152]	; (80036f8 <BSP_LCD_Init+0xb8>)
 800365e:	2203      	movs	r2, #3
 8003660:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8003662:	4b25      	ldr	r3, [pc, #148]	; (80036f8 <BSP_LCD_Init+0xb8>)
 8003664:	f240 120d 	movw	r2, #269	; 0x10d
 8003668:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800366a:	4b23      	ldr	r3, [pc, #140]	; (80036f8 <BSP_LCD_Init+0xb8>)
 800366c:	f240 1243 	movw	r2, #323	; 0x143
 8003670:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8003672:	4b21      	ldr	r3, [pc, #132]	; (80036f8 <BSP_LCD_Init+0xb8>)
 8003674:	f240 1217 	movw	r2, #279	; 0x117
 8003678:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800367a:	4b1f      	ldr	r3, [pc, #124]	; (80036f8 <BSP_LCD_Init+0xb8>)
 800367c:	f240 1247 	movw	r2, #327	; 0x147
 8003680:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8003682:	4b1d      	ldr	r3, [pc, #116]	; (80036f8 <BSP_LCD_Init+0xb8>)
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800368a:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <BSP_LCD_Init+0xb8>)
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8003692:	4b19      	ldr	r3, [pc, #100]	; (80036f8 <BSP_LCD_Init+0xb8>)
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800369a:	4b19      	ldr	r3, [pc, #100]	; (8003700 <BSP_LCD_Init+0xc0>)
 800369c:	2208      	movs	r2, #8
 800369e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80036a0:	4b17      	ldr	r3, [pc, #92]	; (8003700 <BSP_LCD_Init+0xc0>)
 80036a2:	22c0      	movs	r2, #192	; 0xc0
 80036a4:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80036a6:	4b16      	ldr	r3, [pc, #88]	; (8003700 <BSP_LCD_Init+0xc0>)
 80036a8:	2204      	movs	r2, #4
 80036aa:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80036ac:	4b14      	ldr	r3, [pc, #80]	; (8003700 <BSP_LCD_Init+0xc0>)
 80036ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036b2:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80036b4:	4812      	ldr	r0, [pc, #72]	; (8003700 <BSP_LCD_Init+0xc0>)
 80036b6:	f003 fc59 	bl	8006f6c <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80036ba:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <BSP_LCD_Init+0xb8>)
 80036bc:	2200      	movs	r2, #0
 80036be:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80036c0:	4b0d      	ldr	r3, [pc, #52]	; (80036f8 <BSP_LCD_Init+0xb8>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80036c6:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <BSP_LCD_Init+0xb8>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80036cc:	4b0a      	ldr	r3, [pc, #40]	; (80036f8 <BSP_LCD_Init+0xb8>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80036d2:	f000 fa27 	bl	8003b24 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80036d6:	4808      	ldr	r0, [pc, #32]	; (80036f8 <BSP_LCD_Init+0xb8>)
 80036d8:	f002 fcae 	bl	8006038 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80036dc:	4b09      	ldr	r3, [pc, #36]	; (8003704 <BSP_LCD_Init+0xc4>)
 80036de:	4a0a      	ldr	r2, [pc, #40]	; (8003708 <BSP_LCD_Init+0xc8>)
 80036e0:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80036e2:	4b08      	ldr	r3, [pc, #32]	; (8003704 <BSP_LCD_Init+0xc4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4798      	blx	r3

    /* Initialize the SDRAM */
    //BSP_SDRAM_Init();

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80036ea:	4808      	ldr	r0, [pc, #32]	; (800370c <BSP_LCD_Init+0xcc>)
 80036ec:	f000 f8c6 	bl	800387c <BSP_LCD_SetFont>

  return LCD_OK;
 80036f0:	2300      	movs	r3, #0
}  
 80036f2:	4618      	mov	r0, r3
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	2002f654 	.word	0x2002f654
 80036fc:	40016800 	.word	0x40016800
 8003700:	20026688 	.word	0x20026688
 8003704:	2002f6fc 	.word	0x2002f6fc
 8003708:	20000018 	.word	0x20000018
 800370c:	20000090 	.word	0x20000090

08003710 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8003714:	4b03      	ldr	r3, [pc, #12]	; (8003724 <BSP_LCD_GetXSize+0x14>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371a:	4798      	blx	r3
 800371c:	4603      	mov	r3, r0
}
 800371e:	4618      	mov	r0, r3
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	2002f6fc 	.word	0x2002f6fc

08003728 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 800372c:	4b03      	ldr	r3, [pc, #12]	; (800373c <BSP_LCD_GetYSize+0x14>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	4798      	blx	r3
 8003734:	4603      	mov	r3, r0
}
 8003736:	4618      	mov	r0, r3
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	2002f6fc 	.word	0x2002f6fc

08003740 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003740:	b580      	push	{r7, lr}
 8003742:	b090      	sub	sp, #64	; 0x40
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	6039      	str	r1, [r7, #0]
 800374a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = 240;//BSP_LCD_GetXSize();
 8003750:	23f0      	movs	r3, #240	; 0xf0
 8003752:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = 320;//BSP_LCD_GetYSize(); 
 8003758:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800375c:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800375e:	2302      	movs	r3, #2
 8003760:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8003766:	23ff      	movs	r3, #255	; 0xff
 8003768:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 800376e:	2300      	movs	r3, #0
 8003770:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8003774:	2300      	movs	r3, #0
 8003776:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 800377a:	2300      	movs	r3, #0
 800377c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003780:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003784:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003786:	2307      	movs	r3, #7
 8003788:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = 240;//BSP_LCD_GetXSize();
 800378a:	23f0      	movs	r3, #240	; 0xf0
 800378c:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = 320;//BSP_LCD_GetYSize();
 800378e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003792:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8003794:	88fa      	ldrh	r2, [r7, #6]
 8003796:	f107 030c 	add.w	r3, r7, #12
 800379a:	4619      	mov	r1, r3
 800379c:	4813      	ldr	r0, [pc, #76]	; (80037ec <BSP_LCD_LayerDefaultInit+0xac>)
 800379e:	f002 fd1b 	bl	80061d8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = RGB_LCD_COLOR_WHITE;
 80037a2:	88fa      	ldrh	r2, [r7, #6]
 80037a4:	4912      	ldr	r1, [pc, #72]	; (80037f0 <BSP_LCD_LayerDefaultInit+0xb0>)
 80037a6:	4613      	mov	r3, r2
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	3304      	adds	r3, #4
 80037b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037b6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font20;
 80037b8:	88fa      	ldrh	r2, [r7, #6]
 80037ba:	490d      	ldr	r1, [pc, #52]	; (80037f0 <BSP_LCD_LayerDefaultInit+0xb0>)
 80037bc:	4613      	mov	r3, r2
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	4413      	add	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	3308      	adds	r3, #8
 80037c8:	4a0a      	ldr	r2, [pc, #40]	; (80037f4 <BSP_LCD_LayerDefaultInit+0xb4>)
 80037ca:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = RGB_LCD_COLOR_BLACK; 
 80037cc:	88fa      	ldrh	r2, [r7, #6]
 80037ce:	4908      	ldr	r1, [pc, #32]	; (80037f0 <BSP_LCD_LayerDefaultInit+0xb0>)
 80037d0:	4613      	mov	r3, r2
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80037de:	4803      	ldr	r0, [pc, #12]	; (80037ec <BSP_LCD_LayerDefaultInit+0xac>)
 80037e0:	f002 fd38 	bl	8006254 <HAL_LTDC_EnableDither>
}
 80037e4:	bf00      	nop
 80037e6:	3740      	adds	r7, #64	; 0x40
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	2002f654 	.word	0x2002f654
 80037f0:	200266bc 	.word	0x200266bc
 80037f4:	20000088 	.word	0x20000088

080037f8 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003800:	4a04      	ldr	r2, [pc, #16]	; (8003814 <BSP_LCD_SelectLayer+0x1c>)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6013      	str	r3, [r2, #0]
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	200266b8 	.word	0x200266b8

08003818 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003820:	4b07      	ldr	r3, [pc, #28]	; (8003840 <BSP_LCD_SetTextColor+0x28>)
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	4907      	ldr	r1, [pc, #28]	; (8003844 <BSP_LCD_SetTextColor+0x2c>)
 8003826:	4613      	mov	r3, r2
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	4413      	add	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	601a      	str	r2, [r3, #0]
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	200266b8 	.word	0x200266b8
 8003844:	200266bc 	.word	0x200266bc

08003848 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003850:	4b08      	ldr	r3, [pc, #32]	; (8003874 <BSP_LCD_SetBackColor+0x2c>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	4908      	ldr	r1, [pc, #32]	; (8003878 <BSP_LCD_SetBackColor+0x30>)
 8003856:	4613      	mov	r3, r2
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	3304      	adds	r3, #4
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	601a      	str	r2, [r3, #0]
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	200266b8 	.word	0x200266b8
 8003878:	200266bc 	.word	0x200266bc

0800387c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8003884:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <BSP_LCD_SetFont+0x2c>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	4908      	ldr	r1, [pc, #32]	; (80038ac <BSP_LCD_SetFont+0x30>)
 800388a:	4613      	mov	r3, r2
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	4413      	add	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	3308      	adds	r3, #8
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	601a      	str	r2, [r3, #0]
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	200266b8 	.word	0x200266b8
 80038ac:	200266bc 	.word	0x200266bc

080038b0 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80038b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af02      	add	r7, sp, #8
 80038b6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80038b8:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <BSP_LCD_Clear+0x48>)
 80038ba:	681c      	ldr	r4, [r3, #0]
 80038bc:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <BSP_LCD_Clear+0x48>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a0e      	ldr	r2, [pc, #56]	; (80038fc <BSP_LCD_Clear+0x4c>)
 80038c2:	2134      	movs	r1, #52	; 0x34
 80038c4:	fb01 f303 	mul.w	r3, r1, r3
 80038c8:	4413      	add	r3, r2
 80038ca:	335c      	adds	r3, #92	; 0x5c
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	461e      	mov	r6, r3
 80038d0:	f7ff ff1e 	bl	8003710 <BSP_LCD_GetXSize>
 80038d4:	4605      	mov	r5, r0
 80038d6:	f7ff ff27 	bl	8003728 <BSP_LCD_GetYSize>
 80038da:	4602      	mov	r2, r0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	9301      	str	r3, [sp, #4]
 80038e0:	2300      	movs	r3, #0
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	4613      	mov	r3, r2
 80038e6:	462a      	mov	r2, r5
 80038e8:	4631      	mov	r1, r6
 80038ea:	4620      	mov	r0, r4
 80038ec:	f000 fad0 	bl	8003e90 <FillBuffer>
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038f8:	200266b8 	.word	0x200266b8
 80038fc:	2002f654 	.word	0x2002f654

08003900 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003900:	b590      	push	{r4, r7, lr}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	80fb      	strh	r3, [r7, #6]
 800390a:	460b      	mov	r3, r1
 800390c:	80bb      	strh	r3, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003912:	4b1b      	ldr	r3, [pc, #108]	; (8003980 <BSP_LCD_DisplayChar+0x80>)
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	491b      	ldr	r1, [pc, #108]	; (8003984 <BSP_LCD_DisplayChar+0x84>)
 8003918:	4613      	mov	r3, r2
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	3308      	adds	r3, #8
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6819      	ldr	r1, [r3, #0]
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800392e:	4b14      	ldr	r3, [pc, #80]	; (8003980 <BSP_LCD_DisplayChar+0x80>)
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	4c14      	ldr	r4, [pc, #80]	; (8003984 <BSP_LCD_DisplayChar+0x84>)
 8003934:	4613      	mov	r3, r2
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4423      	add	r3, r4
 800393e:	3308      	adds	r3, #8
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003944:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003948:	4b0d      	ldr	r3, [pc, #52]	; (8003980 <BSP_LCD_DisplayChar+0x80>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	4c0d      	ldr	r4, [pc, #52]	; (8003984 <BSP_LCD_DisplayChar+0x84>)
 800394e:	4613      	mov	r3, r2
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	4413      	add	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4423      	add	r3, r4
 8003958:	3308      	adds	r3, #8
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	889b      	ldrh	r3, [r3, #4]
 800395e:	3307      	adds	r3, #7
 8003960:	2b00      	cmp	r3, #0
 8003962:	da00      	bge.n	8003966 <BSP_LCD_DisplayChar+0x66>
 8003964:	3307      	adds	r3, #7
 8003966:	10db      	asrs	r3, r3, #3
 8003968:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800396c:	18ca      	adds	r2, r1, r3
 800396e:	88b9      	ldrh	r1, [r7, #4]
 8003970:	88fb      	ldrh	r3, [r7, #6]
 8003972:	4618      	mov	r0, r3
 8003974:	f000 f9d2 	bl	8003d1c <DrawChar>
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	bd90      	pop	{r4, r7, pc}
 8003980:	200266b8 	.word	0x200266b8
 8003984:	200266bc 	.word	0x200266bc

08003988 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8003988:	b5b0      	push	{r4, r5, r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af00      	add	r7, sp, #0
 800398e:	60ba      	str	r2, [r7, #8]
 8003990:	461a      	mov	r2, r3
 8003992:	4603      	mov	r3, r0
 8003994:	81fb      	strh	r3, [r7, #14]
 8003996:	460b      	mov	r3, r1
 8003998:	81bb      	strh	r3, [r7, #12]
 800399a:	4613      	mov	r3, r2
 800399c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800399e:	2301      	movs	r3, #1
 80039a0:	83fb      	strh	r3, [r7, #30]
 80039a2:	2300      	movs	r3, #0
 80039a4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80039a6:	2300      	movs	r3, #0
 80039a8:	61bb      	str	r3, [r7, #24]
 80039aa:	2300      	movs	r3, #0
 80039ac:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80039b2:	e002      	b.n	80039ba <BSP_LCD_DisplayStringAt+0x32>
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	3301      	adds	r3, #1
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	617a      	str	r2, [r7, #20]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f6      	bne.n	80039b4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80039c6:	f7ff fea3 	bl	8003710 <BSP_LCD_GetXSize>
 80039ca:	4601      	mov	r1, r0
 80039cc:	4b4b      	ldr	r3, [pc, #300]	; (8003afc <BSP_LCD_DisplayStringAt+0x174>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	484b      	ldr	r0, [pc, #300]	; (8003b00 <BSP_LCD_DisplayStringAt+0x178>)
 80039d2:	4613      	mov	r3, r2
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	4413      	add	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4403      	add	r3, r0
 80039dc:	3308      	adds	r3, #8
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	889b      	ldrh	r3, [r3, #4]
 80039e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80039e6:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80039e8:	79fb      	ldrb	r3, [r7, #7]
 80039ea:	2b03      	cmp	r3, #3
 80039ec:	d01c      	beq.n	8003a28 <BSP_LCD_DisplayStringAt+0xa0>
 80039ee:	2b03      	cmp	r3, #3
 80039f0:	dc33      	bgt.n	8003a5a <BSP_LCD_DisplayStringAt+0xd2>
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d002      	beq.n	80039fc <BSP_LCD_DisplayStringAt+0x74>
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d019      	beq.n	8003a2e <BSP_LCD_DisplayStringAt+0xa6>
 80039fa:	e02e      	b.n	8003a5a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	1ad1      	subs	r1, r2, r3
 8003a02:	4b3e      	ldr	r3, [pc, #248]	; (8003afc <BSP_LCD_DisplayStringAt+0x174>)
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	483e      	ldr	r0, [pc, #248]	; (8003b00 <BSP_LCD_DisplayStringAt+0x178>)
 8003a08:	4613      	mov	r3, r2
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	4413      	add	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4403      	add	r3, r0
 8003a12:	3308      	adds	r3, #8
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	889b      	ldrh	r3, [r3, #4]
 8003a18:	fb03 f301 	mul.w	r3, r3, r1
 8003a1c:	085b      	lsrs	r3, r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	89fb      	ldrh	r3, [r7, #14]
 8003a22:	4413      	add	r3, r2
 8003a24:	83fb      	strh	r3, [r7, #30]
      break;
 8003a26:	e01b      	b.n	8003a60 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003a28:	89fb      	ldrh	r3, [r7, #14]
 8003a2a:	83fb      	strh	r3, [r7, #30]
      break;
 8003a2c:	e018      	b.n	8003a60 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	b299      	uxth	r1, r3
 8003a36:	4b31      	ldr	r3, [pc, #196]	; (8003afc <BSP_LCD_DisplayStringAt+0x174>)
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	4831      	ldr	r0, [pc, #196]	; (8003b00 <BSP_LCD_DisplayStringAt+0x178>)
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4403      	add	r3, r0
 8003a46:	3308      	adds	r3, #8
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	889b      	ldrh	r3, [r3, #4]
 8003a4c:	fb11 f303 	smulbb	r3, r1, r3
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	89fb      	ldrh	r3, [r7, #14]
 8003a54:	4413      	add	r3, r2
 8003a56:	83fb      	strh	r3, [r7, #30]
      break;
 8003a58:	e002      	b.n	8003a60 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8003a5a:	89fb      	ldrh	r3, [r7, #14]
 8003a5c:	83fb      	strh	r3, [r7, #30]
      break;
 8003a5e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003a60:	e01a      	b.n	8003a98 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	781a      	ldrb	r2, [r3, #0]
 8003a66:	89b9      	ldrh	r1, [r7, #12]
 8003a68:	8bfb      	ldrh	r3, [r7, #30]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff ff48 	bl	8003900 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003a70:	4b22      	ldr	r3, [pc, #136]	; (8003afc <BSP_LCD_DisplayStringAt+0x174>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	4922      	ldr	r1, [pc, #136]	; (8003b00 <BSP_LCD_DisplayStringAt+0x178>)
 8003a76:	4613      	mov	r3, r2
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	3308      	adds	r3, #8
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	889a      	ldrh	r2, [r3, #4]
 8003a86:	8bfb      	ldrh	r3, [r7, #30]
 8003a88:	4413      	add	r3, r2
 8003a8a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	60bb      	str	r3, [r7, #8]
    i++;
 8003a92:	8bbb      	ldrh	r3, [r7, #28]
 8003a94:	3301      	adds	r3, #1
 8003a96:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	bf14      	ite	ne
 8003aa0:	2301      	movne	r3, #1
 8003aa2:	2300      	moveq	r3, #0
 8003aa4:	b2dc      	uxtb	r4, r3
 8003aa6:	f7ff fe33 	bl	8003710 <BSP_LCD_GetXSize>
 8003aaa:	8bb9      	ldrh	r1, [r7, #28]
 8003aac:	4b13      	ldr	r3, [pc, #76]	; (8003afc <BSP_LCD_DisplayStringAt+0x174>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	4d13      	ldr	r5, [pc, #76]	; (8003b00 <BSP_LCD_DisplayStringAt+0x178>)
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	4413      	add	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	442b      	add	r3, r5
 8003abc:	3308      	adds	r3, #8
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	889b      	ldrh	r3, [r3, #4]
 8003ac2:	fb03 f301 	mul.w	r3, r3, r1
 8003ac6:	1ac3      	subs	r3, r0, r3
 8003ac8:	b299      	uxth	r1, r3
 8003aca:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <BSP_LCD_DisplayStringAt+0x174>)
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	480c      	ldr	r0, [pc, #48]	; (8003b00 <BSP_LCD_DisplayStringAt+0x178>)
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4403      	add	r3, r0
 8003ada:	3308      	adds	r3, #8
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	889b      	ldrh	r3, [r3, #4]
 8003ae0:	4299      	cmp	r1, r3
 8003ae2:	bf2c      	ite	cs
 8003ae4:	2301      	movcs	r3, #1
 8003ae6:	2300      	movcc	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	4023      	ands	r3, r4
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1b7      	bne.n	8003a62 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8003af2:	bf00      	nop
 8003af4:	bf00      	nop
 8003af6:	3720      	adds	r7, #32
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bdb0      	pop	{r4, r5, r7, pc}
 8003afc:	200266b8 	.word	0x200266b8
 8003b00:	200266bc 	.word	0x200266bc

08003b04 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003b08:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <BSP_LCD_DisplayOn+0x1c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003b12:	4b03      	ldr	r3, [pc, #12]	; (8003b20 <BSP_LCD_DisplayOn+0x1c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	4798      	blx	r3
  }
}
 8003b1a:	bf00      	nop
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	2002f6fc 	.word	0x2002f6fc

08003b24 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08e      	sub	sp, #56	; 0x38
 8003b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	623b      	str	r3, [r7, #32]
 8003b2e:	4b61      	ldr	r3, [pc, #388]	; (8003cb4 <BSP_LCD_MspInit+0x190>)
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	4a60      	ldr	r2, [pc, #384]	; (8003cb4 <BSP_LCD_MspInit+0x190>)
 8003b34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b38:	6453      	str	r3, [r2, #68]	; 0x44
 8003b3a:	4b5e      	ldr	r3, [pc, #376]	; (8003cb4 <BSP_LCD_MspInit+0x190>)
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b42:	623b      	str	r3, [r7, #32]
 8003b44:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003b46:	2300      	movs	r3, #0
 8003b48:	61fb      	str	r3, [r7, #28]
 8003b4a:	4b5a      	ldr	r3, [pc, #360]	; (8003cb4 <BSP_LCD_MspInit+0x190>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	4a59      	ldr	r2, [pc, #356]	; (8003cb4 <BSP_LCD_MspInit+0x190>)
 8003b50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b54:	6313      	str	r3, [r2, #48]	; 0x30
 8003b56:	4b57      	ldr	r3, [pc, #348]	; (8003cb4 <BSP_LCD_MspInit+0x190>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b5e:	61fb      	str	r3, [r7, #28]
 8003b60:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	61bb      	str	r3, [r7, #24]
 8003b66:	4b53      	ldr	r3, [pc, #332]	; (8003cb4 <BSP_LCD_MspInit+0x190>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	4a52      	ldr	r2, [pc, #328]	; (8003cb4 <BSP_LCD_MspInit+0x190>)
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	6313      	str	r3, [r2, #48]	; 0x30
 8003b72:	4b50      	ldr	r3, [pc, #320]	; (8003cb4 <BSP_LCD_MspInit+0x190>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	61bb      	str	r3, [r7, #24]
 8003b7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b7e:	2300      	movs	r3, #0
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	4b4c      	ldr	r3, [pc, #304]	; (8003cb4 <BSP_LCD_MspInit+0x190>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	4a4b      	ldr	r2, [pc, #300]	; (8003cb4 <BSP_LCD_MspInit+0x190>)
 8003b88:	f043 0302 	orr.w	r3, r3, #2
 8003b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b8e:	4b49      	ldr	r3, [pc, #292]	; (8003cb4 <BSP_LCD_MspInit+0x190>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	4b45      	ldr	r3, [pc, #276]	; (8003cb4 <BSP_LCD_MspInit+0x190>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	4a44      	ldr	r2, [pc, #272]	; (8003cb4 <BSP_LCD_MspInit+0x190>)
 8003ba4:	f043 0304 	orr.w	r3, r3, #4
 8003ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8003baa:	4b42      	ldr	r3, [pc, #264]	; (8003cb4 <BSP_LCD_MspInit+0x190>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	613b      	str	r3, [r7, #16]
 8003bb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	4b3e      	ldr	r3, [pc, #248]	; (8003cb4 <BSP_LCD_MspInit+0x190>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	4a3d      	ldr	r2, [pc, #244]	; (8003cb4 <BSP_LCD_MspInit+0x190>)
 8003bc0:	f043 0308 	orr.w	r3, r3, #8
 8003bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bc6:	4b3b      	ldr	r3, [pc, #236]	; (8003cb4 <BSP_LCD_MspInit+0x190>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60bb      	str	r3, [r7, #8]
 8003bd6:	4b37      	ldr	r3, [pc, #220]	; (8003cb4 <BSP_LCD_MspInit+0x190>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	4a36      	ldr	r2, [pc, #216]	; (8003cb4 <BSP_LCD_MspInit+0x190>)
 8003bdc:	f043 0320 	orr.w	r3, r3, #32
 8003be0:	6313      	str	r3, [r2, #48]	; 0x30
 8003be2:	4b34      	ldr	r3, [pc, #208]	; (8003cb4 <BSP_LCD_MspInit+0x190>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	60bb      	str	r3, [r7, #8]
 8003bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003bee:	2300      	movs	r3, #0
 8003bf0:	607b      	str	r3, [r7, #4]
 8003bf2:	4b30      	ldr	r3, [pc, #192]	; (8003cb4 <BSP_LCD_MspInit+0x190>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	4a2f      	ldr	r2, [pc, #188]	; (8003cb4 <BSP_LCD_MspInit+0x190>)
 8003bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfe:	4b2d      	ldr	r3, [pc, #180]	; (8003cb4 <BSP_LCD_MspInit+0x190>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c06:	607b      	str	r3, [r7, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003c0a:	f641 0358 	movw	r3, #6232	; 0x1858
 8003c0e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003c10:	2302      	movs	r3, #2
 8003c12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003c14:	2300      	movs	r3, #0
 8003c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003c18:	2302      	movs	r3, #2
 8003c1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003c1c:	230e      	movs	r3, #14
 8003c1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c24:	4619      	mov	r1, r3
 8003c26:	4824      	ldr	r0, [pc, #144]	; (8003cb8 <BSP_LCD_MspInit+0x194>)
 8003c28:	f000 febc 	bl	80049a4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003c2c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c36:	4619      	mov	r1, r3
 8003c38:	4820      	ldr	r0, [pc, #128]	; (8003cbc <BSP_LCD_MspInit+0x198>)
 8003c3a:	f000 feb3 	bl	80049a4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003c3e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c48:	4619      	mov	r1, r3
 8003c4a:	481d      	ldr	r0, [pc, #116]	; (8003cc0 <BSP_LCD_MspInit+0x19c>)
 8003c4c:	f000 feaa 	bl	80049a4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003c50:	2348      	movs	r3, #72	; 0x48
 8003c52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c58:	4619      	mov	r1, r3
 8003c5a:	481a      	ldr	r0, [pc, #104]	; (8003cc4 <BSP_LCD_MspInit+0x1a0>)
 8003c5c:	f000 fea2 	bl	80049a4 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4816      	ldr	r0, [pc, #88]	; (8003cc8 <BSP_LCD_MspInit+0x1a4>)
 8003c6e:	f000 fe99 	bl	80049a4 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003c72:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4813      	ldr	r0, [pc, #76]	; (8003ccc <BSP_LCD_MspInit+0x1a8>)
 8003c80:	f000 fe90 	bl	80049a4 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003c84:	2303      	movs	r3, #3
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003c88:	2309      	movs	r3, #9
 8003c8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c90:	4619      	mov	r1, r3
 8003c92:	480a      	ldr	r0, [pc, #40]	; (8003cbc <BSP_LCD_MspInit+0x198>)
 8003c94:	f000 fe86 	bl	80049a4 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003c98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4809      	ldr	r0, [pc, #36]	; (8003ccc <BSP_LCD_MspInit+0x1a8>)
 8003ca6:	f000 fe7d 	bl	80049a4 <HAL_GPIO_Init>
}
 8003caa:	bf00      	nop
 8003cac:	3738      	adds	r7, #56	; 0x38
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	40020000 	.word	0x40020000
 8003cbc:	40020400 	.word	0x40020400
 8003cc0:	40020800 	.word	0x40020800
 8003cc4:	40020c00 	.word	0x40020c00
 8003cc8:	40021400 	.word	0x40021400
 8003ccc:	40021800 	.word	0x40021800

08003cd0 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003cd0:	b5b0      	push	{r4, r5, r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	603a      	str	r2, [r7, #0]
 8003cda:	80fb      	strh	r3, [r7, #6]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint16_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003ce0:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <BSP_LCD_DrawPixel+0x44>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a0c      	ldr	r2, [pc, #48]	; (8003d18 <BSP_LCD_DrawPixel+0x48>)
 8003ce6:	2134      	movs	r1, #52	; 0x34
 8003ce8:	fb01 f303 	mul.w	r3, r1, r3
 8003cec:	4413      	add	r3, r2
 8003cee:	335c      	adds	r3, #92	; 0x5c
 8003cf0:	681c      	ldr	r4, [r3, #0]
 8003cf2:	88bd      	ldrh	r5, [r7, #4]
 8003cf4:	f7ff fd0c 	bl	8003710 <BSP_LCD_GetXSize>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	fb03 f205 	mul.w	r2, r3, r5
 8003cfe:	88fb      	ldrh	r3, [r7, #6]
 8003d00:	4413      	add	r3, r2
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	4423      	add	r3, r4
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	b292      	uxth	r2, r2
 8003d0a:	801a      	strh	r2, [r3, #0]
}
 8003d0c:	bf00      	nop
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bdb0      	pop	{r4, r5, r7, pc}
 8003d14:	200266b8 	.word	0x200266b8
 8003d18:	2002f654 	.word	0x2002f654

08003d1c <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b088      	sub	sp, #32
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	4603      	mov	r3, r0
 8003d24:	603a      	str	r2, [r7, #0]
 8003d26:	80fb      	strh	r3, [r7, #6]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	61fb      	str	r3, [r7, #28]
 8003d30:	2300      	movs	r3, #0
 8003d32:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003d38:	4b53      	ldr	r3, [pc, #332]	; (8003e88 <DrawChar+0x16c>)
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	4953      	ldr	r1, [pc, #332]	; (8003e8c <DrawChar+0x170>)
 8003d3e:	4613      	mov	r3, r2
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	4413      	add	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	440b      	add	r3, r1
 8003d48:	3308      	adds	r3, #8
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	88db      	ldrh	r3, [r3, #6]
 8003d4e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003d50:	4b4d      	ldr	r3, [pc, #308]	; (8003e88 <DrawChar+0x16c>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	494d      	ldr	r1, [pc, #308]	; (8003e8c <DrawChar+0x170>)
 8003d56:	4613      	mov	r3, r2
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	4413      	add	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	3308      	adds	r3, #8
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	889b      	ldrh	r3, [r3, #4]
 8003d66:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003d68:	8a3b      	ldrh	r3, [r7, #16]
 8003d6a:	3307      	adds	r3, #7
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	da00      	bge.n	8003d72 <DrawChar+0x56>
 8003d70:	3307      	adds	r3, #7
 8003d72:	10db      	asrs	r3, r3, #3
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	8a3b      	ldrh	r3, [r7, #16]
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8003d82:	2300      	movs	r3, #0
 8003d84:	61fb      	str	r3, [r7, #28]
 8003d86:	e076      	b.n	8003e76 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003d88:	8a3b      	ldrh	r3, [r7, #16]
 8003d8a:	3307      	adds	r3, #7
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	da00      	bge.n	8003d92 <DrawChar+0x76>
 8003d90:	3307      	adds	r3, #7
 8003d92:	10db      	asrs	r3, r3, #3
 8003d94:	461a      	mov	r2, r3
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	fb03 f302 	mul.w	r3, r3, r2
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	4413      	add	r3, r2
 8003da0:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8003da2:	8a3b      	ldrh	r3, [r7, #16]
 8003da4:	3307      	adds	r3, #7
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	da00      	bge.n	8003dac <DrawChar+0x90>
 8003daa:	3307      	adds	r3, #7
 8003dac:	10db      	asrs	r3, r3, #3
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d002      	beq.n	8003db8 <DrawChar+0x9c>
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d004      	beq.n	8003dc0 <DrawChar+0xa4>
 8003db6:	e00c      	b.n	8003dd2 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	617b      	str	r3, [r7, #20]
      break;
 8003dbe:	e016      	b.n	8003dee <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	021b      	lsls	r3, r3, #8
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	3201      	adds	r2, #1
 8003dca:	7812      	ldrb	r2, [r2, #0]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]
      break;
 8003dd0:	e00d      	b.n	8003dee <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	041a      	lsls	r2, r3, #16
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	021b      	lsls	r3, r3, #8
 8003de0:	4313      	orrs	r3, r2
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	3202      	adds	r2, #2
 8003de6:	7812      	ldrb	r2, [r2, #0]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	617b      	str	r3, [r7, #20]
      break;
 8003dec:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003dee:	2300      	movs	r3, #0
 8003df0:	61bb      	str	r3, [r7, #24]
 8003df2:	e036      	b.n	8003e62 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003df4:	8a3a      	ldrh	r2, [r7, #16]
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	1ad2      	subs	r2, r2, r3
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	2201      	movs	r2, #1
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	461a      	mov	r2, r3
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d012      	beq.n	8003e36 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	88fb      	ldrh	r3, [r7, #6]
 8003e16:	4413      	add	r3, r2
 8003e18:	b298      	uxth	r0, r3
 8003e1a:	4b1b      	ldr	r3, [pc, #108]	; (8003e88 <DrawChar+0x16c>)
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	491b      	ldr	r1, [pc, #108]	; (8003e8c <DrawChar+0x170>)
 8003e20:	4613      	mov	r3, r2
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	4413      	add	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	88bb      	ldrh	r3, [r7, #4]
 8003e2e:	4619      	mov	r1, r3
 8003e30:	f7ff ff4e 	bl	8003cd0 <BSP_LCD_DrawPixel>
 8003e34:	e012      	b.n	8003e5c <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	88fb      	ldrh	r3, [r7, #6]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	b298      	uxth	r0, r3
 8003e40:	4b11      	ldr	r3, [pc, #68]	; (8003e88 <DrawChar+0x16c>)
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	4911      	ldr	r1, [pc, #68]	; (8003e8c <DrawChar+0x170>)
 8003e46:	4613      	mov	r3, r2
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	440b      	add	r3, r1
 8003e50:	3304      	adds	r3, #4
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	88bb      	ldrh	r3, [r7, #4]
 8003e56:	4619      	mov	r1, r3
 8003e58:	f7ff ff3a 	bl	8003cd0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	61bb      	str	r3, [r7, #24]
 8003e62:	8a3b      	ldrh	r3, [r7, #16]
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d3c4      	bcc.n	8003df4 <DrawChar+0xd8>
      }

    }
    Ypos++;
 8003e6a:	88bb      	ldrh	r3, [r7, #4]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	3301      	adds	r3, #1
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	8a7b      	ldrh	r3, [r7, #18]
 8003e78:	69fa      	ldr	r2, [r7, #28]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d384      	bcc.n	8003d88 <DrawChar+0x6c>
    
  }
}
 8003e7e:	bf00      	nop
 8003e80:	bf00      	nop
 8003e82:	3720      	adds	r7, #32
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	200266b8 	.word	0x200266b8
 8003e8c:	200266bc 	.word	0x200266bc

08003e90 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af02      	add	r7, sp, #8
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
 8003e9c:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003e9e:	4b16      	ldr	r3, [pc, #88]	; (8003ef8 <FillBuffer+0x68>)
 8003ea0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003ea4:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_OUTPUT_RGB565;//DMA2D_ARGB8888;
 8003ea6:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <FillBuffer+0x68>)
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003eac:	4a12      	ldr	r2, [pc, #72]	; (8003ef8 <FillBuffer+0x68>)
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8003eb2:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <FillBuffer+0x68>)
 8003eb4:	4a11      	ldr	r2, [pc, #68]	; (8003efc <FillBuffer+0x6c>)
 8003eb6:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003eb8:	480f      	ldr	r0, [pc, #60]	; (8003ef8 <FillBuffer+0x68>)
 8003eba:	f000 fae7 	bl	800448c <HAL_DMA2D_Init>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d115      	bne.n	8003ef0 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003ec4:	68f9      	ldr	r1, [r7, #12]
 8003ec6:	480c      	ldr	r0, [pc, #48]	; (8003ef8 <FillBuffer+0x68>)
 8003ec8:	f000 fc3e 	bl	8004748 <HAL_DMA2D_ConfigLayer>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10e      	bne.n	8003ef0 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	69f9      	ldr	r1, [r7, #28]
 8003edc:	4806      	ldr	r0, [pc, #24]	; (8003ef8 <FillBuffer+0x68>)
 8003ede:	f000 fb1e 	bl	800451e <HAL_DMA2D_Start>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d103      	bne.n	8003ef0 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003ee8:	210a      	movs	r1, #10
 8003eea:	4803      	ldr	r0, [pc, #12]	; (8003ef8 <FillBuffer+0x68>)
 8003eec:	f000 fb42 	bl	8004574 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003ef0:	bf00      	nop
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	20026648 	.word	0x20026648
 8003efc:	4002b000 	.word	0x4002b000

08003f00 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	4603      	mov	r3, r0
 8003f08:	460a      	mov	r2, r1
 8003f0a:	80fb      	strh	r3, [r7, #6]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8003f14:	4a13      	ldr	r2, [pc, #76]	; (8003f64 <BSP_TS_Init+0x64>)
 8003f16:	88fb      	ldrh	r3, [r7, #6]
 8003f18:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8003f1a:	4a13      	ldr	r2, [pc, #76]	; (8003f68 <BSP_TS_Init+0x68>)
 8003f1c:	88bb      	ldrh	r3, [r7, #4]
 8003f1e:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8003f20:	4b12      	ldr	r3, [pc, #72]	; (8003f6c <BSP_TS_Init+0x6c>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2082      	movs	r0, #130	; 0x82
 8003f26:	4798      	blx	r3
 8003f28:	4603      	mov	r3, r0
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f640 0311 	movw	r3, #2065	; 0x811
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d104      	bne.n	8003f3e <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8003f34:	4b0e      	ldr	r3, [pc, #56]	; (8003f70 <BSP_TS_Init+0x70>)
 8003f36:	4a0d      	ldr	r2, [pc, #52]	; (8003f6c <BSP_TS_Init+0x6c>)
 8003f38:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d109      	bne.n	8003f58 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8003f44:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <BSP_TS_Init+0x70>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2082      	movs	r0, #130	; 0x82
 8003f4c:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8003f4e:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <BSP_TS_Init+0x70>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	2082      	movs	r0, #130	; 0x82
 8003f56:	4798      	blx	r3
  }

  return ret;
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	200266d8 	.word	0x200266d8
 8003f68:	200266da 	.word	0x200266da
 8003f6c:	20000050 	.word	0x20000050
 8003f70:	200266d4 	.word	0x200266d4

08003f74 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8003f7c:	4b4f      	ldr	r3, [pc, #316]	; (80040bc <BSP_TS_GetState+0x148>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	2082      	movs	r0, #130	; 0x82
 8003f84:	4798      	blx	r3
 8003f86:	4603      	mov	r3, r0
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 808d 	beq.w	80040b2 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8003f98:	4b48      	ldr	r3, [pc, #288]	; (80040bc <BSP_TS_GetState+0x148>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	f107 020c 	add.w	r2, r7, #12
 8003fa2:	f107 010e 	add.w	r1, r7, #14
 8003fa6:	2082      	movs	r0, #130	; 0x82
 8003fa8:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8003faa:	89bb      	ldrh	r3, [r7, #12]
 8003fac:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8003fb4:	89bb      	ldrh	r3, [r7, #12]
 8003fb6:	4a42      	ldr	r2, [pc, #264]	; (80040c0 <BSP_TS_GetState+0x14c>)
 8003fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbc:	08db      	lsrs	r3, r3, #3
 8003fbe:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8003fc0:	8abb      	ldrh	r3, [r7, #20]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d102      	bne.n	8003fcc <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	82bb      	strh	r3, [r7, #20]
 8003fca:	e008      	b.n	8003fde <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8003fcc:	4b3d      	ldr	r3, [pc, #244]	; (80040c4 <BSP_TS_GetState+0x150>)
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	8aba      	ldrh	r2, [r7, #20]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d903      	bls.n	8003fde <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8003fd6:	4b3b      	ldr	r3, [pc, #236]	; (80040c4 <BSP_TS_GetState+0x150>)
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8003fde:	8abb      	ldrh	r3, [r7, #20]
 8003fe0:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8003fe2:	89fb      	ldrh	r3, [r7, #14]
 8003fe4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d806      	bhi.n	8003ffa <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8003fec:	89fb      	ldrh	r3, [r7, #14]
 8003fee:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8003ff2:	330e      	adds	r3, #14
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	81fb      	strh	r3, [r7, #14]
 8003ff8:	e005      	b.n	8004006 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8003ffa:	89fb      	ldrh	r3, [r7, #14]
 8003ffc:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8004000:	3308      	adds	r3, #8
 8004002:	b29b      	uxth	r3, r3
 8004004:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8004006:	89fb      	ldrh	r3, [r7, #14]
 8004008:	4a2f      	ldr	r2, [pc, #188]	; (80040c8 <BSP_TS_GetState+0x154>)
 800400a:	fba2 2303 	umull	r2, r3, r2, r3
 800400e:	08db      	lsrs	r3, r3, #3
 8004010:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8004012:	8afb      	ldrh	r3, [r7, #22]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d102      	bne.n	800401e <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8004018:	2300      	movs	r3, #0
 800401a:	82fb      	strh	r3, [r7, #22]
 800401c:	e008      	b.n	8004030 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 800401e:	4b2b      	ldr	r3, [pc, #172]	; (80040cc <BSP_TS_GetState+0x158>)
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	8afa      	ldrh	r2, [r7, #22]
 8004024:	429a      	cmp	r2, r3
 8004026:	d903      	bls.n	8004030 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8004028:	4b28      	ldr	r3, [pc, #160]	; (80040cc <BSP_TS_GetState+0x158>)
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	3b01      	subs	r3, #1
 800402e:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8004030:	8afb      	ldrh	r3, [r7, #22]
 8004032:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8004034:	89fb      	ldrh	r3, [r7, #14]
 8004036:	461a      	mov	r2, r3
 8004038:	4b25      	ldr	r3, [pc, #148]	; (80040d0 <BSP_TS_GetState+0x15c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	429a      	cmp	r2, r3
 800403e:	d906      	bls.n	800404e <BSP_TS_GetState+0xda>
 8004040:	89fa      	ldrh	r2, [r7, #14]
 8004042:	4b23      	ldr	r3, [pc, #140]	; (80040d0 <BSP_TS_GetState+0x15c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	b29b      	uxth	r3, r3
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	b29b      	uxth	r3, r3
 800404c:	e005      	b.n	800405a <BSP_TS_GetState+0xe6>
 800404e:	4b20      	ldr	r3, [pc, #128]	; (80040d0 <BSP_TS_GetState+0x15c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	b29a      	uxth	r2, r3
 8004054:	89fb      	ldrh	r3, [r7, #14]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	b29b      	uxth	r3, r3
 800405a:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 800405c:	89bb      	ldrh	r3, [r7, #12]
 800405e:	461a      	mov	r2, r3
 8004060:	4b1c      	ldr	r3, [pc, #112]	; (80040d4 <BSP_TS_GetState+0x160>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d906      	bls.n	8004076 <BSP_TS_GetState+0x102>
 8004068:	89ba      	ldrh	r2, [r7, #12]
 800406a:	4b1a      	ldr	r3, [pc, #104]	; (80040d4 <BSP_TS_GetState+0x160>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	b29b      	uxth	r3, r3
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	b29b      	uxth	r3, r3
 8004074:	e005      	b.n	8004082 <BSP_TS_GetState+0x10e>
 8004076:	4b17      	ldr	r3, [pc, #92]	; (80040d4 <BSP_TS_GetState+0x160>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	b29a      	uxth	r2, r3
 800407c:	89bb      	ldrh	r3, [r7, #12]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	b29b      	uxth	r3, r3
 8004082:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8004084:	8a7a      	ldrh	r2, [r7, #18]
 8004086:	8a3b      	ldrh	r3, [r7, #16]
 8004088:	4413      	add	r3, r2
 800408a:	2b05      	cmp	r3, #5
 800408c:	dd07      	ble.n	800409e <BSP_TS_GetState+0x12a>
    {
      _x = x;
 800408e:	89fb      	ldrh	r3, [r7, #14]
 8004090:	461a      	mov	r2, r3
 8004092:	4b0f      	ldr	r3, [pc, #60]	; (80040d0 <BSP_TS_GetState+0x15c>)
 8004094:	601a      	str	r2, [r3, #0]
      _y = y; 
 8004096:	89bb      	ldrh	r3, [r7, #12]
 8004098:	461a      	mov	r2, r3
 800409a:	4b0e      	ldr	r3, [pc, #56]	; (80040d4 <BSP_TS_GetState+0x160>)
 800409c:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 800409e:	4b0c      	ldr	r3, [pc, #48]	; (80040d0 <BSP_TS_GetState+0x15c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 80040a8:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <BSP_TS_GetState+0x160>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	809a      	strh	r2, [r3, #4]
  }
}
 80040b2:	bf00      	nop
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	200266d4 	.word	0x200266d4
 80040c0:	ba2e8ba3 	.word	0xba2e8ba3
 80040c4:	200266da 	.word	0x200266da
 80040c8:	88888889 	.word	0x88888889
 80040cc:	200266d8 	.word	0x200266d8
 80040d0:	200266dc 	.word	0x200266dc
 80040d4:	200266e0 	.word	0x200266e0

080040d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040dc:	4b0e      	ldr	r3, [pc, #56]	; (8004118 <HAL_Init+0x40>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a0d      	ldr	r2, [pc, #52]	; (8004118 <HAL_Init+0x40>)
 80040e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80040e8:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <HAL_Init+0x40>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a0a      	ldr	r2, [pc, #40]	; (8004118 <HAL_Init+0x40>)
 80040ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040f4:	4b08      	ldr	r3, [pc, #32]	; (8004118 <HAL_Init+0x40>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a07      	ldr	r2, [pc, #28]	; (8004118 <HAL_Init+0x40>)
 80040fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004100:	2003      	movs	r0, #3
 8004102:	f000 f8fc 	bl	80042fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004106:	2000      	movs	r0, #0
 8004108:	f7fe f934 	bl	8002374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800410c:	f7fd fe50 	bl	8001db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40023c00 	.word	0x40023c00

0800411c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004120:	4b06      	ldr	r3, [pc, #24]	; (800413c <HAL_IncTick+0x20>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	4b06      	ldr	r3, [pc, #24]	; (8004140 <HAL_IncTick+0x24>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4413      	add	r3, r2
 800412c:	4a04      	ldr	r2, [pc, #16]	; (8004140 <HAL_IncTick+0x24>)
 800412e:	6013      	str	r3, [r2, #0]
}
 8004130:	bf00      	nop
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	2000009c 	.word	0x2000009c
 8004140:	2002f700 	.word	0x2002f700

08004144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  return uwTick;
 8004148:	4b03      	ldr	r3, [pc, #12]	; (8004158 <HAL_GetTick+0x14>)
 800414a:	681b      	ldr	r3, [r3, #0]
}
 800414c:	4618      	mov	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	2002f700 	.word	0x2002f700

0800415c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004164:	f7ff ffee 	bl	8004144 <HAL_GetTick>
 8004168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004174:	d005      	beq.n	8004182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004176:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <HAL_Delay+0x44>)
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4413      	add	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004182:	bf00      	nop
 8004184:	f7ff ffde 	bl	8004144 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	429a      	cmp	r2, r3
 8004192:	d8f7      	bhi.n	8004184 <HAL_Delay+0x28>
  {
  }
}
 8004194:	bf00      	nop
 8004196:	bf00      	nop
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	2000009c 	.word	0x2000009c

080041a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041b4:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <__NVIC_SetPriorityGrouping+0x44>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041c0:	4013      	ands	r3, r2
 80041c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041d6:	4a04      	ldr	r2, [pc, #16]	; (80041e8 <__NVIC_SetPriorityGrouping+0x44>)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	60d3      	str	r3, [r2, #12]
}
 80041dc:	bf00      	nop
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	e000ed00 	.word	0xe000ed00

080041ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041f0:	4b04      	ldr	r3, [pc, #16]	; (8004204 <__NVIC_GetPriorityGrouping+0x18>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	0a1b      	lsrs	r3, r3, #8
 80041f6:	f003 0307 	and.w	r3, r3, #7
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	e000ed00 	.word	0xe000ed00

08004208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004216:	2b00      	cmp	r3, #0
 8004218:	db0b      	blt.n	8004232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800421a:	79fb      	ldrb	r3, [r7, #7]
 800421c:	f003 021f 	and.w	r2, r3, #31
 8004220:	4907      	ldr	r1, [pc, #28]	; (8004240 <__NVIC_EnableIRQ+0x38>)
 8004222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	2001      	movs	r0, #1
 800422a:	fa00 f202 	lsl.w	r2, r0, r2
 800422e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	e000e100 	.word	0xe000e100

08004244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	4603      	mov	r3, r0
 800424c:	6039      	str	r1, [r7, #0]
 800424e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004254:	2b00      	cmp	r3, #0
 8004256:	db0a      	blt.n	800426e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	b2da      	uxtb	r2, r3
 800425c:	490c      	ldr	r1, [pc, #48]	; (8004290 <__NVIC_SetPriority+0x4c>)
 800425e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004262:	0112      	lsls	r2, r2, #4
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	440b      	add	r3, r1
 8004268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800426c:	e00a      	b.n	8004284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	b2da      	uxtb	r2, r3
 8004272:	4908      	ldr	r1, [pc, #32]	; (8004294 <__NVIC_SetPriority+0x50>)
 8004274:	79fb      	ldrb	r3, [r7, #7]
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	3b04      	subs	r3, #4
 800427c:	0112      	lsls	r2, r2, #4
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	440b      	add	r3, r1
 8004282:	761a      	strb	r2, [r3, #24]
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	e000e100 	.word	0xe000e100
 8004294:	e000ed00 	.word	0xe000ed00

08004298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004298:	b480      	push	{r7}
 800429a:	b089      	sub	sp, #36	; 0x24
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f1c3 0307 	rsb	r3, r3, #7
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	bf28      	it	cs
 80042b6:	2304      	movcs	r3, #4
 80042b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	3304      	adds	r3, #4
 80042be:	2b06      	cmp	r3, #6
 80042c0:	d902      	bls.n	80042c8 <NVIC_EncodePriority+0x30>
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	3b03      	subs	r3, #3
 80042c6:	e000      	b.n	80042ca <NVIC_EncodePriority+0x32>
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042cc:	f04f 32ff 	mov.w	r2, #4294967295
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	43da      	mvns	r2, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	401a      	ands	r2, r3
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042e0:	f04f 31ff 	mov.w	r1, #4294967295
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ea:	43d9      	mvns	r1, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042f0:	4313      	orrs	r3, r2
         );
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3724      	adds	r7, #36	; 0x24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7ff ff4c 	bl	80041a4 <__NVIC_SetPriorityGrouping>
}
 800430c:	bf00      	nop
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004326:	f7ff ff61 	bl	80041ec <__NVIC_GetPriorityGrouping>
 800432a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	68b9      	ldr	r1, [r7, #8]
 8004330:	6978      	ldr	r0, [r7, #20]
 8004332:	f7ff ffb1 	bl	8004298 <NVIC_EncodePriority>
 8004336:	4602      	mov	r2, r0
 8004338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800433c:	4611      	mov	r1, r2
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff ff80 	bl	8004244 <__NVIC_SetPriority>
}
 8004344:	bf00      	nop
 8004346:	3718      	adds	r7, #24
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	4603      	mov	r3, r0
 8004354:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff ff54 	bl	8004208 <__NVIC_EnableIRQ>
}
 8004360:	bf00      	nop
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004374:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004376:	f7ff fee5 	bl	8004144 <HAL_GetTick>
 800437a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d008      	beq.n	800439a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2280      	movs	r2, #128	; 0x80
 800438c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e052      	b.n	8004440 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0216 	bic.w	r2, r2, #22
 80043a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695a      	ldr	r2, [r3, #20]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d103      	bne.n	80043ca <HAL_DMA_Abort+0x62>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d007      	beq.n	80043da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0208 	bic.w	r2, r2, #8
 80043d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0201 	bic.w	r2, r2, #1
 80043e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043ea:	e013      	b.n	8004414 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043ec:	f7ff feaa 	bl	8004144 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b05      	cmp	r3, #5
 80043f8:	d90c      	bls.n	8004414 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2220      	movs	r2, #32
 80043fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2203      	movs	r2, #3
 8004404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e015      	b.n	8004440 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1e4      	bne.n	80043ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004426:	223f      	movs	r2, #63	; 0x3f
 8004428:	409a      	lsls	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d004      	beq.n	8004466 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2280      	movs	r2, #128	; 0x80
 8004460:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e00c      	b.n	8004480 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2205      	movs	r2, #5
 800446a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0201 	bic.w	r2, r2, #1
 800447c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e03b      	b.n	8004516 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7fd fca8 	bl	8001e08 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2202      	movs	r2, #2
 80044bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044dc:	f023 0107 	bic.w	r1, r3, #7
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80044f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	68d1      	ldr	r1, [r2, #12]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6812      	ldr	r2, [r2, #0]
 8004502:	430b      	orrs	r3, r1
 8004504:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b086      	sub	sp, #24
 8004522:	af02      	add	r7, sp, #8
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	607a      	str	r2, [r7, #4]
 800452a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_DMA2D_Start+0x1c>
 8004536:	2302      	movs	r3, #2
 8004538:	e018      	b.n	800456c <HAL_DMA2D_Start+0x4e>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2202      	movs	r2, #2
 8004546:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	68b9      	ldr	r1, [r7, #8]
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 f989 	bl	800486c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0201 	orr.w	r2, r2, #1
 8004568:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800457e:	2300      	movs	r3, #0
 8004580:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d056      	beq.n	800463e <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004590:	f7ff fdd8 	bl	8004144 <HAL_GetTick>
 8004594:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004596:	e04b      	b.n	8004630 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d023      	beq.n	80045f2 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f003 0320 	and.w	r3, r3, #32
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b8:	f043 0202 	orr.w	r2, r3, #2
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d005      	beq.n	80045d6 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ce:	f043 0201 	orr.w	r2, r3, #1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2221      	movs	r2, #33	; 0x21
 80045dc:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2204      	movs	r2, #4
 80045e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e0a5      	b.n	800473e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f8:	d01a      	beq.n	8004630 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045fa:	f7ff fda3 	bl	8004144 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d302      	bcc.n	8004610 <HAL_DMA2D_PollForTransfer+0x9c>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10f      	bne.n	8004630 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004614:	f043 0220 	orr.w	r2, r3, #32
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2203      	movs	r2, #3
 8004620:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e086      	b.n	800473e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0ac      	beq.n	8004598 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	f003 0320 	and.w	r3, r3, #32
 8004648:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	f003 0320 	and.w	r3, r3, #32
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4313      	orrs	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d061      	beq.n	8004724 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004660:	f7ff fd70 	bl	8004144 <HAL_GetTick>
 8004664:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004666:	e056      	b.n	8004716 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004676:	2b00      	cmp	r3, #0
 8004678:	d02e      	beq.n	80046d8 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b00      	cmp	r3, #0
 8004682:	d005      	beq.n	8004690 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004688:	f043 0204 	orr.w	r2, r3, #4
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f003 0320 	and.w	r3, r3, #32
 8004696:	2b00      	cmp	r3, #0
 8004698:	d005      	beq.n	80046a6 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469e:	f043 0202 	orr.w	r2, r3, #2
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d005      	beq.n	80046bc <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b4:	f043 0201 	orr.w	r2, r3, #1
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2229      	movs	r2, #41	; 0x29
 80046c2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2204      	movs	r2, #4
 80046c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e032      	b.n	800473e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046de:	d01a      	beq.n	8004716 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046e0:	f7ff fd30 	bl	8004144 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d302      	bcc.n	80046f6 <HAL_DMA2D_PollForTransfer+0x182>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10f      	bne.n	8004716 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fa:	f043 0220 	orr.w	r2, r3, #32
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2203      	movs	r2, #3
 8004706:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e013      	b.n	800473e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f003 0310 	and.w	r3, r3, #16
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0a1      	beq.n	8004668 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2212      	movs	r2, #18
 800472a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004748:	b480      	push	{r7}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004760:	2b01      	cmp	r3, #1
 8004762:	d101      	bne.n	8004768 <HAL_DMA2D_ConfigLayer+0x20>
 8004764:	2302      	movs	r3, #2
 8004766:	e079      	b.n	800485c <HAL_DMA2D_ConfigLayer+0x114>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	3318      	adds	r3, #24
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	4413      	add	r3, r2
 8004782:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	041b      	lsls	r3, r3, #16
 800478e:	4313      	orrs	r3, r2
 8004790:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004792:	4b35      	ldr	r3, [pc, #212]	; (8004868 <HAL_DMA2D_ConfigLayer+0x120>)
 8004794:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b0a      	cmp	r3, #10
 800479c:	d003      	beq.n	80047a6 <HAL_DMA2D_ConfigLayer+0x5e>
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b09      	cmp	r3, #9
 80047a4:	d107      	bne.n	80047b6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	e005      	b.n	80047c2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	061b      	lsls	r3, r3, #24
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	4313      	orrs	r3, r2
 80047c0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d120      	bne.n	800480a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	43db      	mvns	r3, r3
 80047d2:	ea02 0103 	and.w	r1, r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	430a      	orrs	r2, r1
 80047de:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	6812      	ldr	r2, [r2, #0]
 80047e8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2b0a      	cmp	r3, #10
 80047f0:	d003      	beq.n	80047fa <HAL_DMA2D_ConfigLayer+0xb2>
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	2b09      	cmp	r3, #9
 80047f8:	d127      	bne.n	800484a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004806:	629a      	str	r2, [r3, #40]	; 0x28
 8004808:	e01f      	b.n	800484a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	69da      	ldr	r2, [r3, #28]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	43db      	mvns	r3, r3
 8004814:	ea02 0103 	and.w	r1, r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	430a      	orrs	r2, r1
 8004820:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	6812      	ldr	r2, [r2, #0]
 800482a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2b0a      	cmp	r3, #10
 8004832:	d003      	beq.n	800483c <HAL_DMA2D_ConfigLayer+0xf4>
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2b09      	cmp	r3, #9
 800483a:	d106      	bne.n	800484a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004848:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	371c      	adds	r7, #28
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	ff03000f 	.word	0xff03000f

0800486c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800486c:	b480      	push	{r7}
 800486e:	b08b      	sub	sp, #44	; 0x2c
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
 8004878:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004880:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	041a      	lsls	r2, r3, #16
 8004888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488a:	431a      	orrs	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048a4:	d174      	bne.n	8004990 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80048ac:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80048b4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80048bc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d108      	bne.n	80048de <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	431a      	orrs	r2, r3
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	4313      	orrs	r3, r2
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
 80048dc:	e053      	b.n	8004986 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d106      	bne.n	80048f4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	627b      	str	r3, [r7, #36]	; 0x24
 80048f2:	e048      	b.n	8004986 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d111      	bne.n	8004920 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	0cdb      	lsrs	r3, r3, #19
 8004900:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	0a9b      	lsrs	r3, r3, #10
 8004906:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	08db      	lsrs	r3, r3, #3
 800490c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	02db      	lsls	r3, r3, #11
 8004916:	4313      	orrs	r3, r2
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	4313      	orrs	r3, r2
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
 800491e:	e032      	b.n	8004986 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	2b03      	cmp	r3, #3
 8004926:	d117      	bne.n	8004958 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	0fdb      	lsrs	r3, r3, #31
 800492c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	0cdb      	lsrs	r3, r3, #19
 8004932:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	0adb      	lsrs	r3, r3, #11
 8004938:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	08db      	lsrs	r3, r3, #3
 800493e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	029b      	lsls	r3, r3, #10
 8004948:	431a      	orrs	r2, r3
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	03db      	lsls	r3, r3, #15
 800494e:	4313      	orrs	r3, r2
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	4313      	orrs	r3, r2
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
 8004956:	e016      	b.n	8004986 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	0f1b      	lsrs	r3, r3, #28
 800495c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	0d1b      	lsrs	r3, r3, #20
 8004962:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	0b1b      	lsrs	r3, r3, #12
 8004968:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	091b      	lsrs	r3, r3, #4
 800496e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	011a      	lsls	r2, r3, #4
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	021b      	lsls	r3, r3, #8
 8004978:	431a      	orrs	r2, r3
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	031b      	lsls	r3, r3, #12
 800497e:	4313      	orrs	r3, r2
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	4313      	orrs	r3, r2
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800498c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800498e:	e003      	b.n	8004998 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	60da      	str	r2, [r3, #12]
}
 8004998:	bf00      	nop
 800499a:	372c      	adds	r7, #44	; 0x2c
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b089      	sub	sp, #36	; 0x24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80049b6:	2300      	movs	r3, #0
 80049b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049ba:	2300      	movs	r3, #0
 80049bc:	61fb      	str	r3, [r7, #28]
 80049be:	e177      	b.n	8004cb0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80049c0:	2201      	movs	r2, #1
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	fa02 f303 	lsl.w	r3, r2, r3
 80049c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	4013      	ands	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	429a      	cmp	r2, r3
 80049da:	f040 8166 	bne.w	8004caa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d005      	beq.n	80049f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d130      	bne.n	8004a58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	2203      	movs	r2, #3
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	43db      	mvns	r3, r3
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	68da      	ldr	r2, [r3, #12]
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	fa02 f303 	lsl.w	r3, r2, r3
 8004a34:	43db      	mvns	r3, r3
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	091b      	lsrs	r3, r3, #4
 8004a42:	f003 0201 	and.w	r2, r3, #1
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f003 0303 	and.w	r3, r3, #3
 8004a60:	2b03      	cmp	r3, #3
 8004a62:	d017      	beq.n	8004a94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	2203      	movs	r2, #3
 8004a70:	fa02 f303 	lsl.w	r3, r2, r3
 8004a74:	43db      	mvns	r3, r3
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f003 0303 	and.w	r3, r3, #3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d123      	bne.n	8004ae8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	08da      	lsrs	r2, r3, #3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3208      	adds	r2, #8
 8004aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	220f      	movs	r2, #15
 8004ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8004abc:	43db      	mvns	r3, r3
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	08da      	lsrs	r2, r3, #3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	3208      	adds	r2, #8
 8004ae2:	69b9      	ldr	r1, [r7, #24]
 8004ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	2203      	movs	r2, #3
 8004af4:	fa02 f303 	lsl.w	r3, r2, r3
 8004af8:	43db      	mvns	r3, r3
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	4013      	ands	r3, r2
 8004afe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f003 0203 	and.w	r2, r3, #3
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 80c0 	beq.w	8004caa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	4b66      	ldr	r3, [pc, #408]	; (8004cc8 <HAL_GPIO_Init+0x324>)
 8004b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b32:	4a65      	ldr	r2, [pc, #404]	; (8004cc8 <HAL_GPIO_Init+0x324>)
 8004b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b38:	6453      	str	r3, [r2, #68]	; 0x44
 8004b3a:	4b63      	ldr	r3, [pc, #396]	; (8004cc8 <HAL_GPIO_Init+0x324>)
 8004b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b46:	4a61      	ldr	r2, [pc, #388]	; (8004ccc <HAL_GPIO_Init+0x328>)
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	089b      	lsrs	r3, r3, #2
 8004b4c:	3302      	adds	r3, #2
 8004b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	220f      	movs	r2, #15
 8004b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b62:	43db      	mvns	r3, r3
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	4013      	ands	r3, r2
 8004b68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a58      	ldr	r2, [pc, #352]	; (8004cd0 <HAL_GPIO_Init+0x32c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d037      	beq.n	8004be2 <HAL_GPIO_Init+0x23e>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a57      	ldr	r2, [pc, #348]	; (8004cd4 <HAL_GPIO_Init+0x330>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d031      	beq.n	8004bde <HAL_GPIO_Init+0x23a>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a56      	ldr	r2, [pc, #344]	; (8004cd8 <HAL_GPIO_Init+0x334>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d02b      	beq.n	8004bda <HAL_GPIO_Init+0x236>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a55      	ldr	r2, [pc, #340]	; (8004cdc <HAL_GPIO_Init+0x338>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d025      	beq.n	8004bd6 <HAL_GPIO_Init+0x232>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a54      	ldr	r2, [pc, #336]	; (8004ce0 <HAL_GPIO_Init+0x33c>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d01f      	beq.n	8004bd2 <HAL_GPIO_Init+0x22e>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a53      	ldr	r2, [pc, #332]	; (8004ce4 <HAL_GPIO_Init+0x340>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d019      	beq.n	8004bce <HAL_GPIO_Init+0x22a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a52      	ldr	r2, [pc, #328]	; (8004ce8 <HAL_GPIO_Init+0x344>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d013      	beq.n	8004bca <HAL_GPIO_Init+0x226>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a51      	ldr	r2, [pc, #324]	; (8004cec <HAL_GPIO_Init+0x348>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d00d      	beq.n	8004bc6 <HAL_GPIO_Init+0x222>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a50      	ldr	r2, [pc, #320]	; (8004cf0 <HAL_GPIO_Init+0x34c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d007      	beq.n	8004bc2 <HAL_GPIO_Init+0x21e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a4f      	ldr	r2, [pc, #316]	; (8004cf4 <HAL_GPIO_Init+0x350>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d101      	bne.n	8004bbe <HAL_GPIO_Init+0x21a>
 8004bba:	2309      	movs	r3, #9
 8004bbc:	e012      	b.n	8004be4 <HAL_GPIO_Init+0x240>
 8004bbe:	230a      	movs	r3, #10
 8004bc0:	e010      	b.n	8004be4 <HAL_GPIO_Init+0x240>
 8004bc2:	2308      	movs	r3, #8
 8004bc4:	e00e      	b.n	8004be4 <HAL_GPIO_Init+0x240>
 8004bc6:	2307      	movs	r3, #7
 8004bc8:	e00c      	b.n	8004be4 <HAL_GPIO_Init+0x240>
 8004bca:	2306      	movs	r3, #6
 8004bcc:	e00a      	b.n	8004be4 <HAL_GPIO_Init+0x240>
 8004bce:	2305      	movs	r3, #5
 8004bd0:	e008      	b.n	8004be4 <HAL_GPIO_Init+0x240>
 8004bd2:	2304      	movs	r3, #4
 8004bd4:	e006      	b.n	8004be4 <HAL_GPIO_Init+0x240>
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e004      	b.n	8004be4 <HAL_GPIO_Init+0x240>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e002      	b.n	8004be4 <HAL_GPIO_Init+0x240>
 8004bde:	2301      	movs	r3, #1
 8004be0:	e000      	b.n	8004be4 <HAL_GPIO_Init+0x240>
 8004be2:	2300      	movs	r3, #0
 8004be4:	69fa      	ldr	r2, [r7, #28]
 8004be6:	f002 0203 	and.w	r2, r2, #3
 8004bea:	0092      	lsls	r2, r2, #2
 8004bec:	4093      	lsls	r3, r2
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bf4:	4935      	ldr	r1, [pc, #212]	; (8004ccc <HAL_GPIO_Init+0x328>)
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	089b      	lsrs	r3, r3, #2
 8004bfa:	3302      	adds	r3, #2
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c02:	4b3d      	ldr	r3, [pc, #244]	; (8004cf8 <HAL_GPIO_Init+0x354>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c26:	4a34      	ldr	r2, [pc, #208]	; (8004cf8 <HAL_GPIO_Init+0x354>)
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004c2c:	4b32      	ldr	r3, [pc, #200]	; (8004cf8 <HAL_GPIO_Init+0x354>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	43db      	mvns	r3, r3
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c50:	4a29      	ldr	r2, [pc, #164]	; (8004cf8 <HAL_GPIO_Init+0x354>)
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c56:	4b28      	ldr	r3, [pc, #160]	; (8004cf8 <HAL_GPIO_Init+0x354>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	4013      	ands	r3, r2
 8004c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c7a:	4a1f      	ldr	r2, [pc, #124]	; (8004cf8 <HAL_GPIO_Init+0x354>)
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c80:	4b1d      	ldr	r3, [pc, #116]	; (8004cf8 <HAL_GPIO_Init+0x354>)
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	43db      	mvns	r3, r3
 8004c8a:	69ba      	ldr	r2, [r7, #24]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ca4:	4a14      	ldr	r2, [pc, #80]	; (8004cf8 <HAL_GPIO_Init+0x354>)
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	3301      	adds	r3, #1
 8004cae:	61fb      	str	r3, [r7, #28]
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	2b0f      	cmp	r3, #15
 8004cb4:	f67f ae84 	bls.w	80049c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004cb8:	bf00      	nop
 8004cba:	bf00      	nop
 8004cbc:	3724      	adds	r7, #36	; 0x24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	40013800 	.word	0x40013800
 8004cd0:	40020000 	.word	0x40020000
 8004cd4:	40020400 	.word	0x40020400
 8004cd8:	40020800 	.word	0x40020800
 8004cdc:	40020c00 	.word	0x40020c00
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	40021400 	.word	0x40021400
 8004ce8:	40021800 	.word	0x40021800
 8004cec:	40021c00 	.word	0x40021c00
 8004cf0:	40022000 	.word	0x40022000
 8004cf4:	40022400 	.word	0x40022400
 8004cf8:	40013c00 	.word	0x40013c00

08004cfc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d12:	2300      	movs	r3, #0
 8004d14:	617b      	str	r3, [r7, #20]
 8004d16:	e0d9      	b.n	8004ecc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d18:	2201      	movs	r2, #1
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d20:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	4013      	ands	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	f040 80c9 	bne.w	8004ec6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004d34:	4a6b      	ldr	r2, [pc, #428]	; (8004ee4 <HAL_GPIO_DeInit+0x1e8>)
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	089b      	lsrs	r3, r3, #2
 8004d3a:	3302      	adds	r3, #2
 8004d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d40:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f003 0303 	and.w	r3, r3, #3
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	220f      	movs	r2, #15
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	4013      	ands	r3, r2
 8004d54:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a63      	ldr	r2, [pc, #396]	; (8004ee8 <HAL_GPIO_DeInit+0x1ec>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d037      	beq.n	8004dce <HAL_GPIO_DeInit+0xd2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a62      	ldr	r2, [pc, #392]	; (8004eec <HAL_GPIO_DeInit+0x1f0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d031      	beq.n	8004dca <HAL_GPIO_DeInit+0xce>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a61      	ldr	r2, [pc, #388]	; (8004ef0 <HAL_GPIO_DeInit+0x1f4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d02b      	beq.n	8004dc6 <HAL_GPIO_DeInit+0xca>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a60      	ldr	r2, [pc, #384]	; (8004ef4 <HAL_GPIO_DeInit+0x1f8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d025      	beq.n	8004dc2 <HAL_GPIO_DeInit+0xc6>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a5f      	ldr	r2, [pc, #380]	; (8004ef8 <HAL_GPIO_DeInit+0x1fc>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d01f      	beq.n	8004dbe <HAL_GPIO_DeInit+0xc2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a5e      	ldr	r2, [pc, #376]	; (8004efc <HAL_GPIO_DeInit+0x200>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d019      	beq.n	8004dba <HAL_GPIO_DeInit+0xbe>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a5d      	ldr	r2, [pc, #372]	; (8004f00 <HAL_GPIO_DeInit+0x204>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d013      	beq.n	8004db6 <HAL_GPIO_DeInit+0xba>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a5c      	ldr	r2, [pc, #368]	; (8004f04 <HAL_GPIO_DeInit+0x208>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d00d      	beq.n	8004db2 <HAL_GPIO_DeInit+0xb6>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a5b      	ldr	r2, [pc, #364]	; (8004f08 <HAL_GPIO_DeInit+0x20c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d007      	beq.n	8004dae <HAL_GPIO_DeInit+0xb2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a5a      	ldr	r2, [pc, #360]	; (8004f0c <HAL_GPIO_DeInit+0x210>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d101      	bne.n	8004daa <HAL_GPIO_DeInit+0xae>
 8004da6:	2309      	movs	r3, #9
 8004da8:	e012      	b.n	8004dd0 <HAL_GPIO_DeInit+0xd4>
 8004daa:	230a      	movs	r3, #10
 8004dac:	e010      	b.n	8004dd0 <HAL_GPIO_DeInit+0xd4>
 8004dae:	2308      	movs	r3, #8
 8004db0:	e00e      	b.n	8004dd0 <HAL_GPIO_DeInit+0xd4>
 8004db2:	2307      	movs	r3, #7
 8004db4:	e00c      	b.n	8004dd0 <HAL_GPIO_DeInit+0xd4>
 8004db6:	2306      	movs	r3, #6
 8004db8:	e00a      	b.n	8004dd0 <HAL_GPIO_DeInit+0xd4>
 8004dba:	2305      	movs	r3, #5
 8004dbc:	e008      	b.n	8004dd0 <HAL_GPIO_DeInit+0xd4>
 8004dbe:	2304      	movs	r3, #4
 8004dc0:	e006      	b.n	8004dd0 <HAL_GPIO_DeInit+0xd4>
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e004      	b.n	8004dd0 <HAL_GPIO_DeInit+0xd4>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e002      	b.n	8004dd0 <HAL_GPIO_DeInit+0xd4>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e000      	b.n	8004dd0 <HAL_GPIO_DeInit+0xd4>
 8004dce:	2300      	movs	r3, #0
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	f002 0203 	and.w	r2, r2, #3
 8004dd6:	0092      	lsls	r2, r2, #2
 8004dd8:	4093      	lsls	r3, r2
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d132      	bne.n	8004e46 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004de0:	4b4b      	ldr	r3, [pc, #300]	; (8004f10 <HAL_GPIO_DeInit+0x214>)
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	43db      	mvns	r3, r3
 8004de8:	4949      	ldr	r1, [pc, #292]	; (8004f10 <HAL_GPIO_DeInit+0x214>)
 8004dea:	4013      	ands	r3, r2
 8004dec:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004dee:	4b48      	ldr	r3, [pc, #288]	; (8004f10 <HAL_GPIO_DeInit+0x214>)
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	43db      	mvns	r3, r3
 8004df6:	4946      	ldr	r1, [pc, #280]	; (8004f10 <HAL_GPIO_DeInit+0x214>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004dfc:	4b44      	ldr	r3, [pc, #272]	; (8004f10 <HAL_GPIO_DeInit+0x214>)
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	43db      	mvns	r3, r3
 8004e04:	4942      	ldr	r1, [pc, #264]	; (8004f10 <HAL_GPIO_DeInit+0x214>)
 8004e06:	4013      	ands	r3, r2
 8004e08:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004e0a:	4b41      	ldr	r3, [pc, #260]	; (8004f10 <HAL_GPIO_DeInit+0x214>)
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	43db      	mvns	r3, r3
 8004e12:	493f      	ldr	r1, [pc, #252]	; (8004f10 <HAL_GPIO_DeInit+0x214>)
 8004e14:	4013      	ands	r3, r2
 8004e16:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	220f      	movs	r2, #15
 8004e22:	fa02 f303 	lsl.w	r3, r2, r3
 8004e26:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004e28:	4a2e      	ldr	r2, [pc, #184]	; (8004ee4 <HAL_GPIO_DeInit+0x1e8>)
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	089b      	lsrs	r3, r3, #2
 8004e2e:	3302      	adds	r3, #2
 8004e30:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	43da      	mvns	r2, r3
 8004e38:	482a      	ldr	r0, [pc, #168]	; (8004ee4 <HAL_GPIO_DeInit+0x1e8>)
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	089b      	lsrs	r3, r3, #2
 8004e3e:	400a      	ands	r2, r1
 8004e40:	3302      	adds	r3, #2
 8004e42:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	2103      	movs	r1, #3
 8004e50:	fa01 f303 	lsl.w	r3, r1, r3
 8004e54:	43db      	mvns	r3, r3
 8004e56:	401a      	ands	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	08da      	lsrs	r2, r3, #3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3208      	adds	r2, #8
 8004e64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f003 0307 	and.w	r3, r3, #7
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	220f      	movs	r2, #15
 8004e72:	fa02 f303 	lsl.w	r3, r2, r3
 8004e76:	43db      	mvns	r3, r3
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	08d2      	lsrs	r2, r2, #3
 8004e7c:	4019      	ands	r1, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	3208      	adds	r2, #8
 8004e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	2103      	movs	r1, #3
 8004e90:	fa01 f303 	lsl.w	r3, r1, r3
 8004e94:	43db      	mvns	r3, r3
 8004e96:	401a      	ands	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea8:	43db      	mvns	r3, r3
 8004eaa:	401a      	ands	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	2103      	movs	r1, #3
 8004eba:	fa01 f303 	lsl.w	r3, r1, r3
 8004ebe:	43db      	mvns	r3, r3
 8004ec0:	401a      	ands	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	617b      	str	r3, [r7, #20]
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	2b0f      	cmp	r3, #15
 8004ed0:	f67f af22 	bls.w	8004d18 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004ed4:	bf00      	nop
 8004ed6:	bf00      	nop
 8004ed8:	371c      	adds	r7, #28
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	40013800 	.word	0x40013800
 8004ee8:	40020000 	.word	0x40020000
 8004eec:	40020400 	.word	0x40020400
 8004ef0:	40020800 	.word	0x40020800
 8004ef4:	40020c00 	.word	0x40020c00
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	40021400 	.word	0x40021400
 8004f00:	40021800 	.word	0x40021800
 8004f04:	40021c00 	.word	0x40021c00
 8004f08:	40022000 	.word	0x40022000
 8004f0c:	40022400 	.word	0x40022400
 8004f10:	40013c00 	.word	0x40013c00

08004f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	807b      	strh	r3, [r7, #2]
 8004f20:	4613      	mov	r3, r2
 8004f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f24:	787b      	ldrb	r3, [r7, #1]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f2a:	887a      	ldrh	r2, [r7, #2]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f30:	e003      	b.n	8004f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f32:	887b      	ldrh	r3, [r7, #2]
 8004f34:	041a      	lsls	r2, r3, #16
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	619a      	str	r2, [r3, #24]
}
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
	...

08004f48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e12b      	b.n	80051b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7fc ff6c 	bl	8001e4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2224      	movs	r2, #36	; 0x24
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0201 	bic.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004faa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004fac:	f001 ff84 	bl	8006eb8 <HAL_RCC_GetPCLK1Freq>
 8004fb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	4a81      	ldr	r2, [pc, #516]	; (80051bc <HAL_I2C_Init+0x274>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d807      	bhi.n	8004fcc <HAL_I2C_Init+0x84>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4a80      	ldr	r2, [pc, #512]	; (80051c0 <HAL_I2C_Init+0x278>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	bf94      	ite	ls
 8004fc4:	2301      	movls	r3, #1
 8004fc6:	2300      	movhi	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	e006      	b.n	8004fda <HAL_I2C_Init+0x92>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4a7d      	ldr	r2, [pc, #500]	; (80051c4 <HAL_I2C_Init+0x27c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	bf94      	ite	ls
 8004fd4:	2301      	movls	r3, #1
 8004fd6:	2300      	movhi	r3, #0
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e0e7      	b.n	80051b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	4a78      	ldr	r2, [pc, #480]	; (80051c8 <HAL_I2C_Init+0x280>)
 8004fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fea:	0c9b      	lsrs	r3, r3, #18
 8004fec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	4a6a      	ldr	r2, [pc, #424]	; (80051bc <HAL_I2C_Init+0x274>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d802      	bhi.n	800501c <HAL_I2C_Init+0xd4>
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	3301      	adds	r3, #1
 800501a:	e009      	b.n	8005030 <HAL_I2C_Init+0xe8>
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005022:	fb02 f303 	mul.w	r3, r2, r3
 8005026:	4a69      	ldr	r2, [pc, #420]	; (80051cc <HAL_I2C_Init+0x284>)
 8005028:	fba2 2303 	umull	r2, r3, r2, r3
 800502c:	099b      	lsrs	r3, r3, #6
 800502e:	3301      	adds	r3, #1
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6812      	ldr	r2, [r2, #0]
 8005034:	430b      	orrs	r3, r1
 8005036:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005042:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	495c      	ldr	r1, [pc, #368]	; (80051bc <HAL_I2C_Init+0x274>)
 800504c:	428b      	cmp	r3, r1
 800504e:	d819      	bhi.n	8005084 <HAL_I2C_Init+0x13c>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	1e59      	subs	r1, r3, #1
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	fbb1 f3f3 	udiv	r3, r1, r3
 800505e:	1c59      	adds	r1, r3, #1
 8005060:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005064:	400b      	ands	r3, r1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00a      	beq.n	8005080 <HAL_I2C_Init+0x138>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	1e59      	subs	r1, r3, #1
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	fbb1 f3f3 	udiv	r3, r1, r3
 8005078:	3301      	adds	r3, #1
 800507a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800507e:	e051      	b.n	8005124 <HAL_I2C_Init+0x1dc>
 8005080:	2304      	movs	r3, #4
 8005082:	e04f      	b.n	8005124 <HAL_I2C_Init+0x1dc>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d111      	bne.n	80050b0 <HAL_I2C_Init+0x168>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	1e58      	subs	r0, r3, #1
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6859      	ldr	r1, [r3, #4]
 8005094:	460b      	mov	r3, r1
 8005096:	005b      	lsls	r3, r3, #1
 8005098:	440b      	add	r3, r1
 800509a:	fbb0 f3f3 	udiv	r3, r0, r3
 800509e:	3301      	adds	r3, #1
 80050a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	bf0c      	ite	eq
 80050a8:	2301      	moveq	r3, #1
 80050aa:	2300      	movne	r3, #0
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	e012      	b.n	80050d6 <HAL_I2C_Init+0x18e>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	1e58      	subs	r0, r3, #1
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6859      	ldr	r1, [r3, #4]
 80050b8:	460b      	mov	r3, r1
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	440b      	add	r3, r1
 80050be:	0099      	lsls	r1, r3, #2
 80050c0:	440b      	add	r3, r1
 80050c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80050c6:	3301      	adds	r3, #1
 80050c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	bf0c      	ite	eq
 80050d0:	2301      	moveq	r3, #1
 80050d2:	2300      	movne	r3, #0
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <HAL_I2C_Init+0x196>
 80050da:	2301      	movs	r3, #1
 80050dc:	e022      	b.n	8005124 <HAL_I2C_Init+0x1dc>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10e      	bne.n	8005104 <HAL_I2C_Init+0x1bc>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	1e58      	subs	r0, r3, #1
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6859      	ldr	r1, [r3, #4]
 80050ee:	460b      	mov	r3, r1
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	440b      	add	r3, r1
 80050f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80050f8:	3301      	adds	r3, #1
 80050fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005102:	e00f      	b.n	8005124 <HAL_I2C_Init+0x1dc>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	1e58      	subs	r0, r3, #1
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6859      	ldr	r1, [r3, #4]
 800510c:	460b      	mov	r3, r1
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	440b      	add	r3, r1
 8005112:	0099      	lsls	r1, r3, #2
 8005114:	440b      	add	r3, r1
 8005116:	fbb0 f3f3 	udiv	r3, r0, r3
 800511a:	3301      	adds	r3, #1
 800511c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005120:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005124:	6879      	ldr	r1, [r7, #4]
 8005126:	6809      	ldr	r1, [r1, #0]
 8005128:	4313      	orrs	r3, r2
 800512a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	69da      	ldr	r2, [r3, #28]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005152:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6911      	ldr	r1, [r2, #16]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	68d2      	ldr	r2, [r2, #12]
 800515e:	4311      	orrs	r1, r2
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6812      	ldr	r2, [r2, #0]
 8005164:	430b      	orrs	r3, r1
 8005166:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	695a      	ldr	r2, [r3, #20]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	430a      	orrs	r2, r1
 8005182:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0201 	orr.w	r2, r2, #1
 8005192:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2220      	movs	r2, #32
 800519e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	000186a0 	.word	0x000186a0
 80051c0:	001e847f 	.word	0x001e847f
 80051c4:	003d08ff 	.word	0x003d08ff
 80051c8:	431bde83 	.word	0x431bde83
 80051cc:	10624dd3 	.word	0x10624dd3

080051d0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e021      	b.n	8005226 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2224      	movs	r2, #36	; 0x24
 80051e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 0201 	bic.w	r2, r2, #1
 80051f8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7fc fe90 	bl	8001f20 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af02      	add	r7, sp, #8
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	4608      	mov	r0, r1
 800523a:	4611      	mov	r1, r2
 800523c:	461a      	mov	r2, r3
 800523e:	4603      	mov	r3, r0
 8005240:	817b      	strh	r3, [r7, #10]
 8005242:	460b      	mov	r3, r1
 8005244:	813b      	strh	r3, [r7, #8]
 8005246:	4613      	mov	r3, r2
 8005248:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800524a:	f7fe ff7b 	bl	8004144 <HAL_GetTick>
 800524e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b20      	cmp	r3, #32
 800525a:	f040 80d9 	bne.w	8005410 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	2319      	movs	r3, #25
 8005264:	2201      	movs	r2, #1
 8005266:	496d      	ldr	r1, [pc, #436]	; (800541c <HAL_I2C_Mem_Write+0x1ec>)
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 fc8d 	bl	8005b88 <I2C_WaitOnFlagUntilTimeout>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005274:	2302      	movs	r3, #2
 8005276:	e0cc      	b.n	8005412 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800527e:	2b01      	cmp	r3, #1
 8005280:	d101      	bne.n	8005286 <HAL_I2C_Mem_Write+0x56>
 8005282:	2302      	movs	r3, #2
 8005284:	e0c5      	b.n	8005412 <HAL_I2C_Mem_Write+0x1e2>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b01      	cmp	r3, #1
 800529a:	d007      	beq.n	80052ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0201 	orr.w	r2, r2, #1
 80052aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2221      	movs	r2, #33	; 0x21
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2240      	movs	r2, #64	; 0x40
 80052c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a3a      	ldr	r2, [r7, #32]
 80052d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80052dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4a4d      	ldr	r2, [pc, #308]	; (8005420 <HAL_I2C_Mem_Write+0x1f0>)
 80052ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052ee:	88f8      	ldrh	r0, [r7, #6]
 80052f0:	893a      	ldrh	r2, [r7, #8]
 80052f2:	8979      	ldrh	r1, [r7, #10]
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	9301      	str	r3, [sp, #4]
 80052f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	4603      	mov	r3, r0
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 fac4 	bl	800588c <I2C_RequestMemoryWrite>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d052      	beq.n	80053b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e081      	b.n	8005412 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 fd0e 	bl	8005d34 <I2C_WaitOnTXEFlagUntilTimeout>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00d      	beq.n	800533a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005322:	2b04      	cmp	r3, #4
 8005324:	d107      	bne.n	8005336 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005334:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e06b      	b.n	8005412 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	781a      	ldrb	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005354:	3b01      	subs	r3, #1
 8005356:	b29a      	uxth	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005360:	b29b      	uxth	r3, r3
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b04      	cmp	r3, #4
 8005376:	d11b      	bne.n	80053b0 <HAL_I2C_Mem_Write+0x180>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800537c:	2b00      	cmp	r3, #0
 800537e:	d017      	beq.n	80053b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	781a      	ldrb	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800539a:	3b01      	subs	r3, #1
 800539c:	b29a      	uxth	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	3b01      	subs	r3, #1
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1aa      	bne.n	800530e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 fcfa 	bl	8005db6 <I2C_WaitOnBTFFlagUntilTimeout>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00d      	beq.n	80053e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053cc:	2b04      	cmp	r3, #4
 80053ce:	d107      	bne.n	80053e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e016      	b.n	8005412 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800540c:	2300      	movs	r3, #0
 800540e:	e000      	b.n	8005412 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005410:	2302      	movs	r3, #2
  }
}
 8005412:	4618      	mov	r0, r3
 8005414:	3718      	adds	r7, #24
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	00100002 	.word	0x00100002
 8005420:	ffff0000 	.word	0xffff0000

08005424 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08c      	sub	sp, #48	; 0x30
 8005428:	af02      	add	r7, sp, #8
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	4608      	mov	r0, r1
 800542e:	4611      	mov	r1, r2
 8005430:	461a      	mov	r2, r3
 8005432:	4603      	mov	r3, r0
 8005434:	817b      	strh	r3, [r7, #10]
 8005436:	460b      	mov	r3, r1
 8005438:	813b      	strh	r3, [r7, #8]
 800543a:	4613      	mov	r3, r2
 800543c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800543e:	f7fe fe81 	bl	8004144 <HAL_GetTick>
 8005442:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b20      	cmp	r3, #32
 800544e:	f040 8208 	bne.w	8005862 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	2319      	movs	r3, #25
 8005458:	2201      	movs	r2, #1
 800545a:	497b      	ldr	r1, [pc, #492]	; (8005648 <HAL_I2C_Mem_Read+0x224>)
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 fb93 	bl	8005b88 <I2C_WaitOnFlagUntilTimeout>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005468:	2302      	movs	r3, #2
 800546a:	e1fb      	b.n	8005864 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005472:	2b01      	cmp	r3, #1
 8005474:	d101      	bne.n	800547a <HAL_I2C_Mem_Read+0x56>
 8005476:	2302      	movs	r3, #2
 8005478:	e1f4      	b.n	8005864 <HAL_I2C_Mem_Read+0x440>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b01      	cmp	r3, #1
 800548e:	d007      	beq.n	80054a0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0201 	orr.w	r2, r2, #1
 800549e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2222      	movs	r2, #34	; 0x22
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2240      	movs	r2, #64	; 0x40
 80054bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80054d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4a5b      	ldr	r2, [pc, #364]	; (800564c <HAL_I2C_Mem_Read+0x228>)
 80054e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054e2:	88f8      	ldrh	r0, [r7, #6]
 80054e4:	893a      	ldrh	r2, [r7, #8]
 80054e6:	8979      	ldrh	r1, [r7, #10]
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	9301      	str	r3, [sp, #4]
 80054ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	4603      	mov	r3, r0
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f000 fa60 	bl	80059b8 <I2C_RequestMemoryRead>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e1b0      	b.n	8005864 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005506:	2b00      	cmp	r3, #0
 8005508:	d113      	bne.n	8005532 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800550a:	2300      	movs	r3, #0
 800550c:	623b      	str	r3, [r7, #32]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	623b      	str	r3, [r7, #32]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	623b      	str	r3, [r7, #32]
 800551e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	e184      	b.n	800583c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005536:	2b01      	cmp	r3, #1
 8005538:	d11b      	bne.n	8005572 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005548:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800554a:	2300      	movs	r3, #0
 800554c:	61fb      	str	r3, [r7, #28]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	61fb      	str	r3, [r7, #28]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	61fb      	str	r3, [r7, #28]
 800555e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	e164      	b.n	800583c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005576:	2b02      	cmp	r3, #2
 8005578:	d11b      	bne.n	80055b2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005588:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005598:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800559a:	2300      	movs	r3, #0
 800559c:	61bb      	str	r3, [r7, #24]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	61bb      	str	r3, [r7, #24]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	61bb      	str	r3, [r7, #24]
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	e144      	b.n	800583c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055b2:	2300      	movs	r3, #0
 80055b4:	617b      	str	r3, [r7, #20]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	617b      	str	r3, [r7, #20]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80055c8:	e138      	b.n	800583c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ce:	2b03      	cmp	r3, #3
 80055d0:	f200 80f1 	bhi.w	80057b6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d123      	bne.n	8005624 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 fc29 	bl	8005e38 <I2C_WaitOnRXNEFlagUntilTimeout>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e139      	b.n	8005864 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	691a      	ldr	r2, [r3, #16]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800560c:	3b01      	subs	r3, #1
 800560e:	b29a      	uxth	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005618:	b29b      	uxth	r3, r3
 800561a:	3b01      	subs	r3, #1
 800561c:	b29a      	uxth	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005622:	e10b      	b.n	800583c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005628:	2b02      	cmp	r3, #2
 800562a:	d14e      	bne.n	80056ca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005632:	2200      	movs	r2, #0
 8005634:	4906      	ldr	r1, [pc, #24]	; (8005650 <HAL_I2C_Mem_Read+0x22c>)
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f000 faa6 	bl	8005b88 <I2C_WaitOnFlagUntilTimeout>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d008      	beq.n	8005654 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e10e      	b.n	8005864 <HAL_I2C_Mem_Read+0x440>
 8005646:	bf00      	nop
 8005648:	00100002 	.word	0x00100002
 800564c:	ffff0000 	.word	0xffff0000
 8005650:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005662:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691a      	ldr	r2, [r3, #16]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566e:	b2d2      	uxtb	r2, r2
 8005670:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	1c5a      	adds	r2, r3, #1
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005680:	3b01      	subs	r3, #1
 8005682:	b29a      	uxth	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800568c:	b29b      	uxth	r3, r3
 800568e:	3b01      	subs	r3, #1
 8005690:	b29a      	uxth	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	b2d2      	uxtb	r2, r2
 80056a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	1c5a      	adds	r2, r3, #1
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056be:	b29b      	uxth	r3, r3
 80056c0:	3b01      	subs	r3, #1
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056c8:	e0b8      	b.n	800583c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d0:	2200      	movs	r2, #0
 80056d2:	4966      	ldr	r1, [pc, #408]	; (800586c <HAL_I2C_Mem_Read+0x448>)
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f000 fa57 	bl	8005b88 <I2C_WaitOnFlagUntilTimeout>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e0bf      	b.n	8005864 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	691a      	ldr	r2, [r3, #16]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fe:	b2d2      	uxtb	r2, r2
 8005700:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005706:	1c5a      	adds	r2, r3, #1
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005710:	3b01      	subs	r3, #1
 8005712:	b29a      	uxth	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800571c:	b29b      	uxth	r3, r3
 800571e:	3b01      	subs	r3, #1
 8005720:	b29a      	uxth	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572c:	2200      	movs	r2, #0
 800572e:	494f      	ldr	r1, [pc, #316]	; (800586c <HAL_I2C_Mem_Read+0x448>)
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 fa29 	bl	8005b88 <I2C_WaitOnFlagUntilTimeout>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d001      	beq.n	8005740 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e091      	b.n	8005864 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800574e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691a      	ldr	r2, [r3, #16]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	b2d2      	uxtb	r2, r2
 800575c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800576c:	3b01      	subs	r3, #1
 800576e:	b29a      	uxth	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005778:	b29b      	uxth	r3, r3
 800577a:	3b01      	subs	r3, #1
 800577c:	b29a      	uxth	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	691a      	ldr	r2, [r3, #16]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	b2d2      	uxtb	r2, r2
 800578e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800579e:	3b01      	subs	r3, #1
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057b4:	e042      	b.n	800583c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f000 fb3c 	bl	8005e38 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e04c      	b.n	8005864 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691a      	ldr	r2, [r3, #16]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	b2d2      	uxtb	r2, r2
 80057d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	3b01      	subs	r3, #1
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	f003 0304 	and.w	r3, r3, #4
 8005806:	2b04      	cmp	r3, #4
 8005808:	d118      	bne.n	800583c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005826:	3b01      	subs	r3, #1
 8005828:	b29a      	uxth	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005832:	b29b      	uxth	r3, r3
 8005834:	3b01      	subs	r3, #1
 8005836:	b29a      	uxth	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005840:	2b00      	cmp	r3, #0
 8005842:	f47f aec2 	bne.w	80055ca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2220      	movs	r2, #32
 800584a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	e000      	b.n	8005864 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005862:	2302      	movs	r3, #2
  }
}
 8005864:	4618      	mov	r0, r3
 8005866:	3728      	adds	r7, #40	; 0x28
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	00010004 	.word	0x00010004

08005870 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800587e:	b2db      	uxtb	r3, r3
}
 8005880:	4618      	mov	r0, r3
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b088      	sub	sp, #32
 8005890:	af02      	add	r7, sp, #8
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	4608      	mov	r0, r1
 8005896:	4611      	mov	r1, r2
 8005898:	461a      	mov	r2, r3
 800589a:	4603      	mov	r3, r0
 800589c:	817b      	strh	r3, [r7, #10]
 800589e:	460b      	mov	r3, r1
 80058a0:	813b      	strh	r3, [r7, #8]
 80058a2:	4613      	mov	r3, r2
 80058a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	2200      	movs	r2, #0
 80058be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 f960 	bl	8005b88 <I2C_WaitOnFlagUntilTimeout>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00d      	beq.n	80058ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058dc:	d103      	bne.n	80058e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e05f      	b.n	80059aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058ea:	897b      	ldrh	r3, [r7, #10]
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	461a      	mov	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	6a3a      	ldr	r2, [r7, #32]
 80058fe:	492d      	ldr	r1, [pc, #180]	; (80059b4 <I2C_RequestMemoryWrite+0x128>)
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f000 f998 	bl	8005c36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e04c      	b.n	80059aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005910:	2300      	movs	r3, #0
 8005912:	617b      	str	r3, [r7, #20]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005928:	6a39      	ldr	r1, [r7, #32]
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 fa02 	bl	8005d34 <I2C_WaitOnTXEFlagUntilTimeout>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00d      	beq.n	8005952 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593a:	2b04      	cmp	r3, #4
 800593c:	d107      	bne.n	800594e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800594c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e02b      	b.n	80059aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005952:	88fb      	ldrh	r3, [r7, #6]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d105      	bne.n	8005964 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005958:	893b      	ldrh	r3, [r7, #8]
 800595a:	b2da      	uxtb	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	611a      	str	r2, [r3, #16]
 8005962:	e021      	b.n	80059a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005964:	893b      	ldrh	r3, [r7, #8]
 8005966:	0a1b      	lsrs	r3, r3, #8
 8005968:	b29b      	uxth	r3, r3
 800596a:	b2da      	uxtb	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005974:	6a39      	ldr	r1, [r7, #32]
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f000 f9dc 	bl	8005d34 <I2C_WaitOnTXEFlagUntilTimeout>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00d      	beq.n	800599e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005986:	2b04      	cmp	r3, #4
 8005988:	d107      	bne.n	800599a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005998:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e005      	b.n	80059aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800599e:	893b      	ldrh	r3, [r7, #8]
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3718      	adds	r7, #24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	00010002 	.word	0x00010002

080059b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b088      	sub	sp, #32
 80059bc:	af02      	add	r7, sp, #8
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	4608      	mov	r0, r1
 80059c2:	4611      	mov	r1, r2
 80059c4:	461a      	mov	r2, r3
 80059c6:	4603      	mov	r3, r0
 80059c8:	817b      	strh	r3, [r7, #10]
 80059ca:	460b      	mov	r3, r1
 80059cc:	813b      	strh	r3, [r7, #8]
 80059ce:	4613      	mov	r3, r2
 80059d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f000 f8c2 	bl	8005b88 <I2C_WaitOnFlagUntilTimeout>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00d      	beq.n	8005a26 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a18:	d103      	bne.n	8005a22 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e0aa      	b.n	8005b7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a26:	897b      	ldrh	r3, [r7, #10]
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a38:	6a3a      	ldr	r2, [r7, #32]
 8005a3a:	4952      	ldr	r1, [pc, #328]	; (8005b84 <I2C_RequestMemoryRead+0x1cc>)
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f000 f8fa 	bl	8005c36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e097      	b.n	8005b7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	617b      	str	r3, [r7, #20]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	617b      	str	r3, [r7, #20]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a64:	6a39      	ldr	r1, [r7, #32]
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 f964 	bl	8005d34 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00d      	beq.n	8005a8e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a76:	2b04      	cmp	r3, #4
 8005a78:	d107      	bne.n	8005a8a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e076      	b.n	8005b7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a8e:	88fb      	ldrh	r3, [r7, #6]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d105      	bne.n	8005aa0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a94:	893b      	ldrh	r3, [r7, #8]
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	611a      	str	r2, [r3, #16]
 8005a9e:	e021      	b.n	8005ae4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005aa0:	893b      	ldrh	r3, [r7, #8]
 8005aa2:	0a1b      	lsrs	r3, r3, #8
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab0:	6a39      	ldr	r1, [r7, #32]
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 f93e 	bl	8005d34 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00d      	beq.n	8005ada <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	2b04      	cmp	r3, #4
 8005ac4:	d107      	bne.n	8005ad6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ad4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e050      	b.n	8005b7c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ada:	893b      	ldrh	r3, [r7, #8]
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae6:	6a39      	ldr	r1, [r7, #32]
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 f923 	bl	8005d34 <I2C_WaitOnTXEFlagUntilTimeout>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00d      	beq.n	8005b10 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af8:	2b04      	cmp	r3, #4
 8005afa:	d107      	bne.n	8005b0c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b0a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e035      	b.n	8005b7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b1e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 f82b 	bl	8005b88 <I2C_WaitOnFlagUntilTimeout>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00d      	beq.n	8005b54 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b46:	d103      	bne.n	8005b50 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e013      	b.n	8005b7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b54:	897b      	ldrh	r3, [r7, #10]
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	f043 0301 	orr.w	r3, r3, #1
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b66:	6a3a      	ldr	r2, [r7, #32]
 8005b68:	4906      	ldr	r1, [pc, #24]	; (8005b84 <I2C_RequestMemoryRead+0x1cc>)
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f000 f863 	bl	8005c36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	00010002 	.word	0x00010002

08005b88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	603b      	str	r3, [r7, #0]
 8005b94:	4613      	mov	r3, r2
 8005b96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b98:	e025      	b.n	8005be6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba0:	d021      	beq.n	8005be6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ba2:	f7fe facf 	bl	8004144 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	683a      	ldr	r2, [r7, #0]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d302      	bcc.n	8005bb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d116      	bne.n	8005be6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	f043 0220 	orr.w	r2, r3, #32
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e023      	b.n	8005c2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	0c1b      	lsrs	r3, r3, #16
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d10d      	bne.n	8005c0c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	43da      	mvns	r2, r3
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	bf0c      	ite	eq
 8005c02:	2301      	moveq	r3, #1
 8005c04:	2300      	movne	r3, #0
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	461a      	mov	r2, r3
 8005c0a:	e00c      	b.n	8005c26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	43da      	mvns	r2, r3
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	4013      	ands	r3, r2
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	bf0c      	ite	eq
 8005c1e:	2301      	moveq	r3, #1
 8005c20:	2300      	movne	r3, #0
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	461a      	mov	r2, r3
 8005c26:	79fb      	ldrb	r3, [r7, #7]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d0b6      	beq.n	8005b9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b084      	sub	sp, #16
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	60f8      	str	r0, [r7, #12]
 8005c3e:	60b9      	str	r1, [r7, #8]
 8005c40:	607a      	str	r2, [r7, #4]
 8005c42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c44:	e051      	b.n	8005cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c54:	d123      	bne.n	8005c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	f043 0204 	orr.w	r2, r3, #4
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e046      	b.n	8005d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca4:	d021      	beq.n	8005cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca6:	f7fe fa4d 	bl	8004144 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d302      	bcc.n	8005cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d116      	bne.n	8005cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	f043 0220 	orr.w	r2, r3, #32
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e020      	b.n	8005d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	0c1b      	lsrs	r3, r3, #16
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d10c      	bne.n	8005d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	43da      	mvns	r2, r3
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	bf14      	ite	ne
 8005d06:	2301      	movne	r3, #1
 8005d08:	2300      	moveq	r3, #0
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	e00b      	b.n	8005d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	43da      	mvns	r2, r3
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	4013      	ands	r3, r2
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	bf14      	ite	ne
 8005d20:	2301      	movne	r3, #1
 8005d22:	2300      	moveq	r3, #0
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d18d      	bne.n	8005c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d40:	e02d      	b.n	8005d9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f000 f8ce 	bl	8005ee4 <I2C_IsAcknowledgeFailed>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e02d      	b.n	8005dae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d58:	d021      	beq.n	8005d9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d5a:	f7fe f9f3 	bl	8004144 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d302      	bcc.n	8005d70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d116      	bne.n	8005d9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8a:	f043 0220 	orr.w	r2, r3, #32
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e007      	b.n	8005dae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da8:	2b80      	cmp	r3, #128	; 0x80
 8005daa:	d1ca      	bne.n	8005d42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b084      	sub	sp, #16
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005dc2:	e02d      	b.n	8005e20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 f88d 	bl	8005ee4 <I2C_IsAcknowledgeFailed>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e02d      	b.n	8005e30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dda:	d021      	beq.n	8005e20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ddc:	f7fe f9b2 	bl	8004144 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d302      	bcc.n	8005df2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d116      	bne.n	8005e20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0c:	f043 0220 	orr.w	r2, r3, #32
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e007      	b.n	8005e30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	f003 0304 	and.w	r3, r3, #4
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	d1ca      	bne.n	8005dc4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e44:	e042      	b.n	8005ecc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	f003 0310 	and.w	r3, r3, #16
 8005e50:	2b10      	cmp	r3, #16
 8005e52:	d119      	bne.n	8005e88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f06f 0210 	mvn.w	r2, #16
 8005e5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e029      	b.n	8005edc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e88:	f7fe f95c 	bl	8004144 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d302      	bcc.n	8005e9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d116      	bne.n	8005ecc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb8:	f043 0220 	orr.w	r2, r3, #32
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e007      	b.n	8005edc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed6:	2b40      	cmp	r3, #64	; 0x40
 8005ed8:	d1b5      	bne.n	8005e46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005efa:	d11b      	bne.n	8005f34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	f043 0204 	orr.w	r2, r3, #4
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e000      	b.n	8005f36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
 8005f4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b20      	cmp	r3, #32
 8005f56:	d129      	bne.n	8005fac <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2224      	movs	r2, #36	; 0x24
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f022 0201 	bic.w	r2, r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f022 0210 	bic.w	r2, r2, #16
 8005f7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f042 0201 	orr.w	r2, r2, #1
 8005f9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	e000      	b.n	8005fae <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005fac:	2302      	movs	r3, #2
  }
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b085      	sub	sp, #20
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b20      	cmp	r3, #32
 8005fd2:	d12a      	bne.n	800602a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2224      	movs	r2, #36	; 0x24
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0201 	bic.w	r2, r2, #1
 8005fea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005ff4:	89fb      	ldrh	r3, [r7, #14]
 8005ff6:	f023 030f 	bic.w	r3, r3, #15
 8005ffa:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	89fb      	ldrh	r3, [r7, #14]
 8006002:	4313      	orrs	r3, r2
 8006004:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	89fa      	ldrh	r2, [r7, #14]
 800600c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f042 0201 	orr.w	r2, r2, #1
 800601c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2220      	movs	r2, #32
 8006022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	e000      	b.n	800602c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800602a:	2302      	movs	r3, #2
  }
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e0bf      	b.n	80061ca <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d106      	bne.n	8006064 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7fb ff84 	bl	8001f6c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2202      	movs	r2, #2
 8006068:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	699a      	ldr	r2, [r3, #24]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800607a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6999      	ldr	r1, [r3, #24]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006090:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	430a      	orrs	r2, r1
 800609e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6899      	ldr	r1, [r3, #8]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	4b4a      	ldr	r3, [pc, #296]	; (80061d4 <HAL_LTDC_Init+0x19c>)
 80060ac:	400b      	ands	r3, r1
 80060ae:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	041b      	lsls	r3, r3, #16
 80060b6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6899      	ldr	r1, [r3, #8]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	699a      	ldr	r2, [r3, #24]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	431a      	orrs	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68d9      	ldr	r1, [r3, #12]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	4b3e      	ldr	r3, [pc, #248]	; (80061d4 <HAL_LTDC_Init+0x19c>)
 80060da:	400b      	ands	r3, r1
 80060dc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	041b      	lsls	r3, r3, #16
 80060e4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68d9      	ldr	r1, [r3, #12]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a1a      	ldr	r2, [r3, #32]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	431a      	orrs	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6919      	ldr	r1, [r3, #16]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	4b33      	ldr	r3, [pc, #204]	; (80061d4 <HAL_LTDC_Init+0x19c>)
 8006108:	400b      	ands	r3, r1
 800610a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	041b      	lsls	r3, r3, #16
 8006112:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6919      	ldr	r1, [r3, #16]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	431a      	orrs	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6959      	ldr	r1, [r3, #20]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	4b27      	ldr	r3, [pc, #156]	; (80061d4 <HAL_LTDC_Init+0x19c>)
 8006136:	400b      	ands	r3, r1
 8006138:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613e:	041b      	lsls	r3, r3, #16
 8006140:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6959      	ldr	r1, [r3, #20]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	431a      	orrs	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	430a      	orrs	r2, r1
 8006156:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800615e:	021b      	lsls	r3, r3, #8
 8006160:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006168:	041b      	lsls	r3, r3, #16
 800616a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800617a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4313      	orrs	r3, r2
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800618e:	431a      	orrs	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	430a      	orrs	r2, r1
 8006196:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f042 0206 	orr.w	r2, r2, #6
 80061a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	699a      	ldr	r2, [r3, #24]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f042 0201 	orr.w	r2, r2, #1
 80061b6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	f000f800 	.word	0xf000f800

080061d8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80061d8:	b5b0      	push	{r4, r5, r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d101      	bne.n	80061f2 <HAL_LTDC_ConfigLayer+0x1a>
 80061ee:	2302      	movs	r3, #2
 80061f0:	e02c      	b.n	800624c <HAL_LTDC_ConfigLayer+0x74>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2202      	movs	r2, #2
 80061fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2134      	movs	r1, #52	; 0x34
 8006208:	fb01 f303 	mul.w	r3, r1, r3
 800620c:	4413      	add	r3, r2
 800620e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	4614      	mov	r4, r2
 8006216:	461d      	mov	r5, r3
 8006218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800621a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800621c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800621e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006224:	682b      	ldr	r3, [r5, #0]
 8006226:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	68b9      	ldr	r1, [r7, #8]
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 f83b 	bl	80062a8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2201      	movs	r2, #1
 8006238:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bdb0      	pop	{r4, r5, r7, pc}

08006254 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006262:	2b01      	cmp	r3, #1
 8006264:	d101      	bne.n	800626a <HAL_LTDC_EnableDither+0x16>
 8006266:	2302      	movs	r3, #2
 8006268:	e016      	b.n	8006298 <HAL_LTDC_EnableDither+0x44>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2202      	movs	r2, #2
 8006276:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800627a:	4b0a      	ldr	r3, [pc, #40]	; (80062a4 <HAL_LTDC_EnableDither+0x50>)
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	4a09      	ldr	r2, [pc, #36]	; (80062a4 <HAL_LTDC_EnableDither+0x50>)
 8006280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006284:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	40016800 	.word	0x40016800

080062a8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b089      	sub	sp, #36	; 0x24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	0c1b      	lsrs	r3, r3, #16
 80062c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062c4:	4413      	add	r3, r2
 80062c6:	041b      	lsls	r3, r3, #16
 80062c8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	01db      	lsls	r3, r3, #7
 80062d4:	4413      	add	r3, r2
 80062d6:	3384      	adds	r3, #132	; 0x84
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	6812      	ldr	r2, [r2, #0]
 80062de:	4611      	mov	r1, r2
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	01d2      	lsls	r2, r2, #7
 80062e4:	440a      	add	r2, r1
 80062e6:	3284      	adds	r2, #132	; 0x84
 80062e8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80062ec:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	0c1b      	lsrs	r3, r3, #16
 80062fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062fe:	4413      	add	r3, r2
 8006300:	1c5a      	adds	r2, r3, #1
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4619      	mov	r1, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	01db      	lsls	r3, r3, #7
 800630c:	440b      	add	r3, r1
 800630e:	3384      	adds	r3, #132	; 0x84
 8006310:	4619      	mov	r1, r3
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	4313      	orrs	r3, r2
 8006316:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006326:	4413      	add	r3, r2
 8006328:	041b      	lsls	r3, r3, #16
 800632a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	461a      	mov	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	01db      	lsls	r3, r3, #7
 8006336:	4413      	add	r3, r2
 8006338:	3384      	adds	r3, #132	; 0x84
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	6812      	ldr	r2, [r2, #0]
 8006340:	4611      	mov	r1, r2
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	01d2      	lsls	r2, r2, #7
 8006346:	440a      	add	r2, r1
 8006348:	3284      	adds	r2, #132	; 0x84
 800634a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800634e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800635e:	4413      	add	r3, r2
 8006360:	1c5a      	adds	r2, r3, #1
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4619      	mov	r1, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	01db      	lsls	r3, r3, #7
 800636c:	440b      	add	r3, r1
 800636e:	3384      	adds	r3, #132	; 0x84
 8006370:	4619      	mov	r1, r3
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	4313      	orrs	r3, r2
 8006376:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	01db      	lsls	r3, r3, #7
 8006382:	4413      	add	r3, r2
 8006384:	3384      	adds	r3, #132	; 0x84
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	6812      	ldr	r2, [r2, #0]
 800638c:	4611      	mov	r1, r2
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	01d2      	lsls	r2, r2, #7
 8006392:	440a      	add	r2, r1
 8006394:	3284      	adds	r2, #132	; 0x84
 8006396:	f023 0307 	bic.w	r3, r3, #7
 800639a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	461a      	mov	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	01db      	lsls	r3, r3, #7
 80063a6:	4413      	add	r3, r2
 80063a8:	3384      	adds	r3, #132	; 0x84
 80063aa:	461a      	mov	r2, r3
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80063b8:	021b      	lsls	r3, r3, #8
 80063ba:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80063c2:	041b      	lsls	r3, r3, #16
 80063c4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	061b      	lsls	r3, r3, #24
 80063cc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	461a      	mov	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	01db      	lsls	r3, r3, #7
 80063d8:	4413      	add	r3, r2
 80063da:	3384      	adds	r3, #132	; 0x84
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	461a      	mov	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	01db      	lsls	r3, r3, #7
 80063e8:	4413      	add	r3, r2
 80063ea:	3384      	adds	r3, #132	; 0x84
 80063ec:	461a      	mov	r2, r3
 80063ee:	2300      	movs	r3, #0
 80063f0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80063f8:	461a      	mov	r2, r3
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	431a      	orrs	r2, r3
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	431a      	orrs	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4619      	mov	r1, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	01db      	lsls	r3, r3, #7
 800640c:	440b      	add	r3, r1
 800640e:	3384      	adds	r3, #132	; 0x84
 8006410:	4619      	mov	r1, r3
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	4313      	orrs	r3, r2
 8006416:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	461a      	mov	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	01db      	lsls	r3, r3, #7
 8006422:	4413      	add	r3, r2
 8006424:	3384      	adds	r3, #132	; 0x84
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	6812      	ldr	r2, [r2, #0]
 800642c:	4611      	mov	r1, r2
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	01d2      	lsls	r2, r2, #7
 8006432:	440a      	add	r2, r1
 8006434:	3284      	adds	r2, #132	; 0x84
 8006436:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800643a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	461a      	mov	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	01db      	lsls	r3, r3, #7
 8006446:	4413      	add	r3, r2
 8006448:	3384      	adds	r3, #132	; 0x84
 800644a:	461a      	mov	r2, r3
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	461a      	mov	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	01db      	lsls	r3, r3, #7
 800645c:	4413      	add	r3, r2
 800645e:	3384      	adds	r3, #132	; 0x84
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	6812      	ldr	r2, [r2, #0]
 8006466:	4611      	mov	r1, r2
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	01d2      	lsls	r2, r2, #7
 800646c:	440a      	add	r2, r1
 800646e:	3284      	adds	r2, #132	; 0x84
 8006470:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006474:	f023 0307 	bic.w	r3, r3, #7
 8006478:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	69da      	ldr	r2, [r3, #28]
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	68f9      	ldr	r1, [r7, #12]
 8006484:	6809      	ldr	r1, [r1, #0]
 8006486:	4608      	mov	r0, r1
 8006488:	6879      	ldr	r1, [r7, #4]
 800648a:	01c9      	lsls	r1, r1, #7
 800648c:	4401      	add	r1, r0
 800648e:	3184      	adds	r1, #132	; 0x84
 8006490:	4313      	orrs	r3, r2
 8006492:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	461a      	mov	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	01db      	lsls	r3, r3, #7
 800649e:	4413      	add	r3, r2
 80064a0:	3384      	adds	r3, #132	; 0x84
 80064a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	461a      	mov	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	01db      	lsls	r3, r3, #7
 80064ae:	4413      	add	r3, r2
 80064b0:	3384      	adds	r3, #132	; 0x84
 80064b2:	461a      	mov	r2, r3
 80064b4:	2300      	movs	r3, #0
 80064b6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	461a      	mov	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	01db      	lsls	r3, r3, #7
 80064c2:	4413      	add	r3, r2
 80064c4:	3384      	adds	r3, #132	; 0x84
 80064c6:	461a      	mov	r2, r3
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d102      	bne.n	80064dc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80064d6:	2304      	movs	r3, #4
 80064d8:	61fb      	str	r3, [r7, #28]
 80064da:	e01b      	b.n	8006514 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d102      	bne.n	80064ea <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80064e4:	2303      	movs	r3, #3
 80064e6:	61fb      	str	r3, [r7, #28]
 80064e8:	e014      	b.n	8006514 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	2b04      	cmp	r3, #4
 80064f0:	d00b      	beq.n	800650a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d007      	beq.n	800650a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80064fe:	2b03      	cmp	r3, #3
 8006500:	d003      	beq.n	800650a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006506:	2b07      	cmp	r3, #7
 8006508:	d102      	bne.n	8006510 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800650a:	2302      	movs	r3, #2
 800650c:	61fb      	str	r3, [r7, #28]
 800650e:	e001      	b.n	8006514 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006510:	2301      	movs	r3, #1
 8006512:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	461a      	mov	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	01db      	lsls	r3, r3, #7
 800651e:	4413      	add	r3, r2
 8006520:	3384      	adds	r3, #132	; 0x84
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	6812      	ldr	r2, [r2, #0]
 8006528:	4611      	mov	r1, r2
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	01d2      	lsls	r2, r2, #7
 800652e:	440a      	add	r2, r1
 8006530:	3284      	adds	r2, #132	; 0x84
 8006532:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006536:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653c:	69fa      	ldr	r2, [r7, #28]
 800653e:	fb02 f303 	mul.w	r3, r2, r3
 8006542:	041a      	lsls	r2, r3, #16
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	6859      	ldr	r1, [r3, #4]
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	1acb      	subs	r3, r1, r3
 800654e:	69f9      	ldr	r1, [r7, #28]
 8006550:	fb01 f303 	mul.w	r3, r1, r3
 8006554:	3303      	adds	r3, #3
 8006556:	68f9      	ldr	r1, [r7, #12]
 8006558:	6809      	ldr	r1, [r1, #0]
 800655a:	4608      	mov	r0, r1
 800655c:	6879      	ldr	r1, [r7, #4]
 800655e:	01c9      	lsls	r1, r1, #7
 8006560:	4401      	add	r1, r0
 8006562:	3184      	adds	r1, #132	; 0x84
 8006564:	4313      	orrs	r3, r2
 8006566:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	461a      	mov	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	01db      	lsls	r3, r3, #7
 8006572:	4413      	add	r3, r2
 8006574:	3384      	adds	r3, #132	; 0x84
 8006576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	6812      	ldr	r2, [r2, #0]
 800657c:	4611      	mov	r1, r2
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	01d2      	lsls	r2, r2, #7
 8006582:	440a      	add	r2, r1
 8006584:	3284      	adds	r2, #132	; 0x84
 8006586:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800658a:	f023 0307 	bic.w	r3, r3, #7
 800658e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	461a      	mov	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	01db      	lsls	r3, r3, #7
 800659a:	4413      	add	r3, r2
 800659c:	3384      	adds	r3, #132	; 0x84
 800659e:	461a      	mov	r2, r3
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	461a      	mov	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	01db      	lsls	r3, r3, #7
 80065b0:	4413      	add	r3, r2
 80065b2:	3384      	adds	r3, #132	; 0x84
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	6812      	ldr	r2, [r2, #0]
 80065ba:	4611      	mov	r1, r2
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	01d2      	lsls	r2, r2, #7
 80065c0:	440a      	add	r2, r1
 80065c2:	3284      	adds	r2, #132	; 0x84
 80065c4:	f043 0301 	orr.w	r3, r3, #1
 80065c8:	6013      	str	r3, [r2, #0]
}
 80065ca:	bf00      	nop
 80065cc:	3724      	adds	r7, #36	; 0x24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
	...

080065d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80065e2:	2300      	movs	r3, #0
 80065e4:	603b      	str	r3, [r7, #0]
 80065e6:	4b20      	ldr	r3, [pc, #128]	; (8006668 <HAL_PWREx_EnableOverDrive+0x90>)
 80065e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ea:	4a1f      	ldr	r2, [pc, #124]	; (8006668 <HAL_PWREx_EnableOverDrive+0x90>)
 80065ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065f0:	6413      	str	r3, [r2, #64]	; 0x40
 80065f2:	4b1d      	ldr	r3, [pc, #116]	; (8006668 <HAL_PWREx_EnableOverDrive+0x90>)
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065fa:	603b      	str	r3, [r7, #0]
 80065fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80065fe:	4b1b      	ldr	r3, [pc, #108]	; (800666c <HAL_PWREx_EnableOverDrive+0x94>)
 8006600:	2201      	movs	r2, #1
 8006602:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006604:	f7fd fd9e 	bl	8004144 <HAL_GetTick>
 8006608:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800660a:	e009      	b.n	8006620 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800660c:	f7fd fd9a 	bl	8004144 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800661a:	d901      	bls.n	8006620 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e01f      	b.n	8006660 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006620:	4b13      	ldr	r3, [pc, #76]	; (8006670 <HAL_PWREx_EnableOverDrive+0x98>)
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800662c:	d1ee      	bne.n	800660c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800662e:	4b11      	ldr	r3, [pc, #68]	; (8006674 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006630:	2201      	movs	r2, #1
 8006632:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006634:	f7fd fd86 	bl	8004144 <HAL_GetTick>
 8006638:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800663a:	e009      	b.n	8006650 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800663c:	f7fd fd82 	bl	8004144 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800664a:	d901      	bls.n	8006650 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e007      	b.n	8006660 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006650:	4b07      	ldr	r3, [pc, #28]	; (8006670 <HAL_PWREx_EnableOverDrive+0x98>)
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006658:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800665c:	d1ee      	bne.n	800663c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	40023800 	.word	0x40023800
 800666c:	420e0040 	.word	0x420e0040
 8006670:	40007000 	.word	0x40007000
 8006674:	420e0044 	.word	0x420e0044

08006678 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d101      	bne.n	800668a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e264      	b.n	8006b54 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b00      	cmp	r3, #0
 8006694:	d075      	beq.n	8006782 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006696:	4ba3      	ldr	r3, [pc, #652]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f003 030c 	and.w	r3, r3, #12
 800669e:	2b04      	cmp	r3, #4
 80066a0:	d00c      	beq.n	80066bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066a2:	4ba0      	ldr	r3, [pc, #640]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066aa:	2b08      	cmp	r3, #8
 80066ac:	d112      	bne.n	80066d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066ae:	4b9d      	ldr	r3, [pc, #628]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066ba:	d10b      	bne.n	80066d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066bc:	4b99      	ldr	r3, [pc, #612]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d05b      	beq.n	8006780 <HAL_RCC_OscConfig+0x108>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d157      	bne.n	8006780 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e23f      	b.n	8006b54 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066dc:	d106      	bne.n	80066ec <HAL_RCC_OscConfig+0x74>
 80066de:	4b91      	ldr	r3, [pc, #580]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a90      	ldr	r2, [pc, #576]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 80066e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066e8:	6013      	str	r3, [r2, #0]
 80066ea:	e01d      	b.n	8006728 <HAL_RCC_OscConfig+0xb0>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066f4:	d10c      	bne.n	8006710 <HAL_RCC_OscConfig+0x98>
 80066f6:	4b8b      	ldr	r3, [pc, #556]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a8a      	ldr	r2, [pc, #552]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 80066fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006700:	6013      	str	r3, [r2, #0]
 8006702:	4b88      	ldr	r3, [pc, #544]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a87      	ldr	r2, [pc, #540]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 8006708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800670c:	6013      	str	r3, [r2, #0]
 800670e:	e00b      	b.n	8006728 <HAL_RCC_OscConfig+0xb0>
 8006710:	4b84      	ldr	r3, [pc, #528]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a83      	ldr	r2, [pc, #524]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 8006716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800671a:	6013      	str	r3, [r2, #0]
 800671c:	4b81      	ldr	r3, [pc, #516]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a80      	ldr	r2, [pc, #512]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 8006722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d013      	beq.n	8006758 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006730:	f7fd fd08 	bl	8004144 <HAL_GetTick>
 8006734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006736:	e008      	b.n	800674a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006738:	f7fd fd04 	bl	8004144 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	2b64      	cmp	r3, #100	; 0x64
 8006744:	d901      	bls.n	800674a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e204      	b.n	8006b54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800674a:	4b76      	ldr	r3, [pc, #472]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0f0      	beq.n	8006738 <HAL_RCC_OscConfig+0xc0>
 8006756:	e014      	b.n	8006782 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006758:	f7fd fcf4 	bl	8004144 <HAL_GetTick>
 800675c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800675e:	e008      	b.n	8006772 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006760:	f7fd fcf0 	bl	8004144 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	2b64      	cmp	r3, #100	; 0x64
 800676c:	d901      	bls.n	8006772 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e1f0      	b.n	8006b54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006772:	4b6c      	ldr	r3, [pc, #432]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1f0      	bne.n	8006760 <HAL_RCC_OscConfig+0xe8>
 800677e:	e000      	b.n	8006782 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d063      	beq.n	8006856 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800678e:	4b65      	ldr	r3, [pc, #404]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f003 030c 	and.w	r3, r3, #12
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00b      	beq.n	80067b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800679a:	4b62      	ldr	r3, [pc, #392]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067a2:	2b08      	cmp	r3, #8
 80067a4:	d11c      	bne.n	80067e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067a6:	4b5f      	ldr	r3, [pc, #380]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d116      	bne.n	80067e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067b2:	4b5c      	ldr	r3, [pc, #368]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d005      	beq.n	80067ca <HAL_RCC_OscConfig+0x152>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d001      	beq.n	80067ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e1c4      	b.n	8006b54 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067ca:	4b56      	ldr	r3, [pc, #344]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	00db      	lsls	r3, r3, #3
 80067d8:	4952      	ldr	r1, [pc, #328]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067de:	e03a      	b.n	8006856 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d020      	beq.n	800682a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067e8:	4b4f      	ldr	r3, [pc, #316]	; (8006928 <HAL_RCC_OscConfig+0x2b0>)
 80067ea:	2201      	movs	r2, #1
 80067ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ee:	f7fd fca9 	bl	8004144 <HAL_GetTick>
 80067f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067f4:	e008      	b.n	8006808 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067f6:	f7fd fca5 	bl	8004144 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	2b02      	cmp	r3, #2
 8006802:	d901      	bls.n	8006808 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e1a5      	b.n	8006b54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006808:	4b46      	ldr	r3, [pc, #280]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d0f0      	beq.n	80067f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006814:	4b43      	ldr	r3, [pc, #268]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	00db      	lsls	r3, r3, #3
 8006822:	4940      	ldr	r1, [pc, #256]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 8006824:	4313      	orrs	r3, r2
 8006826:	600b      	str	r3, [r1, #0]
 8006828:	e015      	b.n	8006856 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800682a:	4b3f      	ldr	r3, [pc, #252]	; (8006928 <HAL_RCC_OscConfig+0x2b0>)
 800682c:	2200      	movs	r2, #0
 800682e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006830:	f7fd fc88 	bl	8004144 <HAL_GetTick>
 8006834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006836:	e008      	b.n	800684a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006838:	f7fd fc84 	bl	8004144 <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	2b02      	cmp	r3, #2
 8006844:	d901      	bls.n	800684a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e184      	b.n	8006b54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800684a:	4b36      	ldr	r3, [pc, #216]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1f0      	bne.n	8006838 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0308 	and.w	r3, r3, #8
 800685e:	2b00      	cmp	r3, #0
 8006860:	d030      	beq.n	80068c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d016      	beq.n	8006898 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800686a:	4b30      	ldr	r3, [pc, #192]	; (800692c <HAL_RCC_OscConfig+0x2b4>)
 800686c:	2201      	movs	r2, #1
 800686e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006870:	f7fd fc68 	bl	8004144 <HAL_GetTick>
 8006874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006876:	e008      	b.n	800688a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006878:	f7fd fc64 	bl	8004144 <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	2b02      	cmp	r3, #2
 8006884:	d901      	bls.n	800688a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e164      	b.n	8006b54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800688a:	4b26      	ldr	r3, [pc, #152]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 800688c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d0f0      	beq.n	8006878 <HAL_RCC_OscConfig+0x200>
 8006896:	e015      	b.n	80068c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006898:	4b24      	ldr	r3, [pc, #144]	; (800692c <HAL_RCC_OscConfig+0x2b4>)
 800689a:	2200      	movs	r2, #0
 800689c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800689e:	f7fd fc51 	bl	8004144 <HAL_GetTick>
 80068a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068a4:	e008      	b.n	80068b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068a6:	f7fd fc4d 	bl	8004144 <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d901      	bls.n	80068b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e14d      	b.n	8006b54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068b8:	4b1a      	ldr	r3, [pc, #104]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 80068ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1f0      	bne.n	80068a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 80a0 	beq.w	8006a12 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068d2:	2300      	movs	r3, #0
 80068d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068d6:	4b13      	ldr	r3, [pc, #76]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 80068d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10f      	bne.n	8006902 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068e2:	2300      	movs	r3, #0
 80068e4:	60bb      	str	r3, [r7, #8]
 80068e6:	4b0f      	ldr	r3, [pc, #60]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	4a0e      	ldr	r2, [pc, #56]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 80068ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068f0:	6413      	str	r3, [r2, #64]	; 0x40
 80068f2:	4b0c      	ldr	r3, [pc, #48]	; (8006924 <HAL_RCC_OscConfig+0x2ac>)
 80068f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068fa:	60bb      	str	r3, [r7, #8]
 80068fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068fe:	2301      	movs	r3, #1
 8006900:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006902:	4b0b      	ldr	r3, [pc, #44]	; (8006930 <HAL_RCC_OscConfig+0x2b8>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800690a:	2b00      	cmp	r3, #0
 800690c:	d121      	bne.n	8006952 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800690e:	4b08      	ldr	r3, [pc, #32]	; (8006930 <HAL_RCC_OscConfig+0x2b8>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a07      	ldr	r2, [pc, #28]	; (8006930 <HAL_RCC_OscConfig+0x2b8>)
 8006914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800691a:	f7fd fc13 	bl	8004144 <HAL_GetTick>
 800691e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006920:	e011      	b.n	8006946 <HAL_RCC_OscConfig+0x2ce>
 8006922:	bf00      	nop
 8006924:	40023800 	.word	0x40023800
 8006928:	42470000 	.word	0x42470000
 800692c:	42470e80 	.word	0x42470e80
 8006930:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006934:	f7fd fc06 	bl	8004144 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b02      	cmp	r3, #2
 8006940:	d901      	bls.n	8006946 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e106      	b.n	8006b54 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006946:	4b85      	ldr	r3, [pc, #532]	; (8006b5c <HAL_RCC_OscConfig+0x4e4>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800694e:	2b00      	cmp	r3, #0
 8006950:	d0f0      	beq.n	8006934 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d106      	bne.n	8006968 <HAL_RCC_OscConfig+0x2f0>
 800695a:	4b81      	ldr	r3, [pc, #516]	; (8006b60 <HAL_RCC_OscConfig+0x4e8>)
 800695c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695e:	4a80      	ldr	r2, [pc, #512]	; (8006b60 <HAL_RCC_OscConfig+0x4e8>)
 8006960:	f043 0301 	orr.w	r3, r3, #1
 8006964:	6713      	str	r3, [r2, #112]	; 0x70
 8006966:	e01c      	b.n	80069a2 <HAL_RCC_OscConfig+0x32a>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	2b05      	cmp	r3, #5
 800696e:	d10c      	bne.n	800698a <HAL_RCC_OscConfig+0x312>
 8006970:	4b7b      	ldr	r3, [pc, #492]	; (8006b60 <HAL_RCC_OscConfig+0x4e8>)
 8006972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006974:	4a7a      	ldr	r2, [pc, #488]	; (8006b60 <HAL_RCC_OscConfig+0x4e8>)
 8006976:	f043 0304 	orr.w	r3, r3, #4
 800697a:	6713      	str	r3, [r2, #112]	; 0x70
 800697c:	4b78      	ldr	r3, [pc, #480]	; (8006b60 <HAL_RCC_OscConfig+0x4e8>)
 800697e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006980:	4a77      	ldr	r2, [pc, #476]	; (8006b60 <HAL_RCC_OscConfig+0x4e8>)
 8006982:	f043 0301 	orr.w	r3, r3, #1
 8006986:	6713      	str	r3, [r2, #112]	; 0x70
 8006988:	e00b      	b.n	80069a2 <HAL_RCC_OscConfig+0x32a>
 800698a:	4b75      	ldr	r3, [pc, #468]	; (8006b60 <HAL_RCC_OscConfig+0x4e8>)
 800698c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698e:	4a74      	ldr	r2, [pc, #464]	; (8006b60 <HAL_RCC_OscConfig+0x4e8>)
 8006990:	f023 0301 	bic.w	r3, r3, #1
 8006994:	6713      	str	r3, [r2, #112]	; 0x70
 8006996:	4b72      	ldr	r3, [pc, #456]	; (8006b60 <HAL_RCC_OscConfig+0x4e8>)
 8006998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699a:	4a71      	ldr	r2, [pc, #452]	; (8006b60 <HAL_RCC_OscConfig+0x4e8>)
 800699c:	f023 0304 	bic.w	r3, r3, #4
 80069a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d015      	beq.n	80069d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069aa:	f7fd fbcb 	bl	8004144 <HAL_GetTick>
 80069ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069b0:	e00a      	b.n	80069c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069b2:	f7fd fbc7 	bl	8004144 <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d901      	bls.n	80069c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e0c5      	b.n	8006b54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069c8:	4b65      	ldr	r3, [pc, #404]	; (8006b60 <HAL_RCC_OscConfig+0x4e8>)
 80069ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d0ee      	beq.n	80069b2 <HAL_RCC_OscConfig+0x33a>
 80069d4:	e014      	b.n	8006a00 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069d6:	f7fd fbb5 	bl	8004144 <HAL_GetTick>
 80069da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069dc:	e00a      	b.n	80069f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069de:	f7fd fbb1 	bl	8004144 <HAL_GetTick>
 80069e2:	4602      	mov	r2, r0
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d901      	bls.n	80069f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e0af      	b.n	8006b54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069f4:	4b5a      	ldr	r3, [pc, #360]	; (8006b60 <HAL_RCC_OscConfig+0x4e8>)
 80069f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f8:	f003 0302 	and.w	r3, r3, #2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1ee      	bne.n	80069de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a00:	7dfb      	ldrb	r3, [r7, #23]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d105      	bne.n	8006a12 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a06:	4b56      	ldr	r3, [pc, #344]	; (8006b60 <HAL_RCC_OscConfig+0x4e8>)
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	4a55      	ldr	r2, [pc, #340]	; (8006b60 <HAL_RCC_OscConfig+0x4e8>)
 8006a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f000 809b 	beq.w	8006b52 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a1c:	4b50      	ldr	r3, [pc, #320]	; (8006b60 <HAL_RCC_OscConfig+0x4e8>)
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f003 030c 	and.w	r3, r3, #12
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d05c      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d141      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a30:	4b4c      	ldr	r3, [pc, #304]	; (8006b64 <HAL_RCC_OscConfig+0x4ec>)
 8006a32:	2200      	movs	r2, #0
 8006a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a36:	f7fd fb85 	bl	8004144 <HAL_GetTick>
 8006a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a3c:	e008      	b.n	8006a50 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a3e:	f7fd fb81 	bl	8004144 <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d901      	bls.n	8006a50 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e081      	b.n	8006b54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a50:	4b43      	ldr	r3, [pc, #268]	; (8006b60 <HAL_RCC_OscConfig+0x4e8>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1f0      	bne.n	8006a3e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	69da      	ldr	r2, [r3, #28]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	431a      	orrs	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6a:	019b      	lsls	r3, r3, #6
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a72:	085b      	lsrs	r3, r3, #1
 8006a74:	3b01      	subs	r3, #1
 8006a76:	041b      	lsls	r3, r3, #16
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7e:	061b      	lsls	r3, r3, #24
 8006a80:	4937      	ldr	r1, [pc, #220]	; (8006b60 <HAL_RCC_OscConfig+0x4e8>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a86:	4b37      	ldr	r3, [pc, #220]	; (8006b64 <HAL_RCC_OscConfig+0x4ec>)
 8006a88:	2201      	movs	r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a8c:	f7fd fb5a 	bl	8004144 <HAL_GetTick>
 8006a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a92:	e008      	b.n	8006aa6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a94:	f7fd fb56 	bl	8004144 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e056      	b.n	8006b54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aa6:	4b2e      	ldr	r3, [pc, #184]	; (8006b60 <HAL_RCC_OscConfig+0x4e8>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0f0      	beq.n	8006a94 <HAL_RCC_OscConfig+0x41c>
 8006ab2:	e04e      	b.n	8006b52 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ab4:	4b2b      	ldr	r3, [pc, #172]	; (8006b64 <HAL_RCC_OscConfig+0x4ec>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aba:	f7fd fb43 	bl	8004144 <HAL_GetTick>
 8006abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ac0:	e008      	b.n	8006ad4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ac2:	f7fd fb3f 	bl	8004144 <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d901      	bls.n	8006ad4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e03f      	b.n	8006b54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ad4:	4b22      	ldr	r3, [pc, #136]	; (8006b60 <HAL_RCC_OscConfig+0x4e8>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1f0      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x44a>
 8006ae0:	e037      	b.n	8006b52 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d101      	bne.n	8006aee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e032      	b.n	8006b54 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006aee:	4b1c      	ldr	r3, [pc, #112]	; (8006b60 <HAL_RCC_OscConfig+0x4e8>)
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d028      	beq.n	8006b4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d121      	bne.n	8006b4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d11a      	bne.n	8006b4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b1e:	4013      	ands	r3, r2
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b24:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d111      	bne.n	8006b4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b34:	085b      	lsrs	r3, r3, #1
 8006b36:	3b01      	subs	r3, #1
 8006b38:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d107      	bne.n	8006b4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b48:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d001      	beq.n	8006b52 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e000      	b.n	8006b54 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3718      	adds	r7, #24
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	40007000 	.word	0x40007000
 8006b60:	40023800 	.word	0x40023800
 8006b64:	42470060 	.word	0x42470060

08006b68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d101      	bne.n	8006b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e0cc      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b7c:	4b68      	ldr	r3, [pc, #416]	; (8006d20 <HAL_RCC_ClockConfig+0x1b8>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 030f 	and.w	r3, r3, #15
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d90c      	bls.n	8006ba4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b8a:	4b65      	ldr	r3, [pc, #404]	; (8006d20 <HAL_RCC_ClockConfig+0x1b8>)
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	b2d2      	uxtb	r2, r2
 8006b90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b92:	4b63      	ldr	r3, [pc, #396]	; (8006d20 <HAL_RCC_ClockConfig+0x1b8>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 030f 	and.w	r3, r3, #15
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d001      	beq.n	8006ba4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e0b8      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0302 	and.w	r3, r3, #2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d020      	beq.n	8006bf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0304 	and.w	r3, r3, #4
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d005      	beq.n	8006bc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bbc:	4b59      	ldr	r3, [pc, #356]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	4a58      	ldr	r2, [pc, #352]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006bc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0308 	and.w	r3, r3, #8
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d005      	beq.n	8006be0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bd4:	4b53      	ldr	r3, [pc, #332]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	4a52      	ldr	r2, [pc, #328]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006bda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006bde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006be0:	4b50      	ldr	r3, [pc, #320]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	494d      	ldr	r1, [pc, #308]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d044      	beq.n	8006c88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d107      	bne.n	8006c16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c06:	4b47      	ldr	r3, [pc, #284]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d119      	bne.n	8006c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e07f      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d003      	beq.n	8006c26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c22:	2b03      	cmp	r3, #3
 8006c24:	d107      	bne.n	8006c36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c26:	4b3f      	ldr	r3, [pc, #252]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d109      	bne.n	8006c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e06f      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c36:	4b3b      	ldr	r3, [pc, #236]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e067      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c46:	4b37      	ldr	r3, [pc, #220]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f023 0203 	bic.w	r2, r3, #3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	4934      	ldr	r1, [pc, #208]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006c54:	4313      	orrs	r3, r2
 8006c56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c58:	f7fd fa74 	bl	8004144 <HAL_GetTick>
 8006c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c5e:	e00a      	b.n	8006c76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c60:	f7fd fa70 	bl	8004144 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e04f      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c76:	4b2b      	ldr	r3, [pc, #172]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f003 020c 	and.w	r2, r3, #12
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d1eb      	bne.n	8006c60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c88:	4b25      	ldr	r3, [pc, #148]	; (8006d20 <HAL_RCC_ClockConfig+0x1b8>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 030f 	and.w	r3, r3, #15
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d20c      	bcs.n	8006cb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c96:	4b22      	ldr	r3, [pc, #136]	; (8006d20 <HAL_RCC_ClockConfig+0x1b8>)
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	b2d2      	uxtb	r2, r2
 8006c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c9e:	4b20      	ldr	r3, [pc, #128]	; (8006d20 <HAL_RCC_ClockConfig+0x1b8>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 030f 	and.w	r3, r3, #15
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d001      	beq.n	8006cb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e032      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0304 	and.w	r3, r3, #4
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d008      	beq.n	8006cce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cbc:	4b19      	ldr	r3, [pc, #100]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	4916      	ldr	r1, [pc, #88]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0308 	and.w	r3, r3, #8
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d009      	beq.n	8006cee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cda:	4b12      	ldr	r3, [pc, #72]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	00db      	lsls	r3, r3, #3
 8006ce8:	490e      	ldr	r1, [pc, #56]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006cee:	f000 f821 	bl	8006d34 <HAL_RCC_GetSysClockFreq>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	4b0b      	ldr	r3, [pc, #44]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	091b      	lsrs	r3, r3, #4
 8006cfa:	f003 030f 	and.w	r3, r3, #15
 8006cfe:	490a      	ldr	r1, [pc, #40]	; (8006d28 <HAL_RCC_ClockConfig+0x1c0>)
 8006d00:	5ccb      	ldrb	r3, [r1, r3]
 8006d02:	fa22 f303 	lsr.w	r3, r2, r3
 8006d06:	4a09      	ldr	r2, [pc, #36]	; (8006d2c <HAL_RCC_ClockConfig+0x1c4>)
 8006d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d0a:	4b09      	ldr	r3, [pc, #36]	; (8006d30 <HAL_RCC_ClockConfig+0x1c8>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fb fb30 	bl	8002374 <HAL_InitTick>

  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	40023c00 	.word	0x40023c00
 8006d24:	40023800 	.word	0x40023800
 8006d28:	0800d860 	.word	0x0800d860
 8006d2c:	20000014 	.word	0x20000014
 8006d30:	20000098 	.word	0x20000098

08006d34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d34:	b5b0      	push	{r4, r5, r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	6079      	str	r1, [r7, #4]
 8006d3e:	2100      	movs	r1, #0
 8006d40:	60f9      	str	r1, [r7, #12]
 8006d42:	2100      	movs	r1, #0
 8006d44:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006d46:	2100      	movs	r1, #0
 8006d48:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d4a:	4952      	ldr	r1, [pc, #328]	; (8006e94 <HAL_RCC_GetSysClockFreq+0x160>)
 8006d4c:	6889      	ldr	r1, [r1, #8]
 8006d4e:	f001 010c 	and.w	r1, r1, #12
 8006d52:	2908      	cmp	r1, #8
 8006d54:	d00d      	beq.n	8006d72 <HAL_RCC_GetSysClockFreq+0x3e>
 8006d56:	2908      	cmp	r1, #8
 8006d58:	f200 8094 	bhi.w	8006e84 <HAL_RCC_GetSysClockFreq+0x150>
 8006d5c:	2900      	cmp	r1, #0
 8006d5e:	d002      	beq.n	8006d66 <HAL_RCC_GetSysClockFreq+0x32>
 8006d60:	2904      	cmp	r1, #4
 8006d62:	d003      	beq.n	8006d6c <HAL_RCC_GetSysClockFreq+0x38>
 8006d64:	e08e      	b.n	8006e84 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d66:	4b4c      	ldr	r3, [pc, #304]	; (8006e98 <HAL_RCC_GetSysClockFreq+0x164>)
 8006d68:	60bb      	str	r3, [r7, #8]
       break;
 8006d6a:	e08e      	b.n	8006e8a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d6c:	4b4b      	ldr	r3, [pc, #300]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x168>)
 8006d6e:	60bb      	str	r3, [r7, #8]
      break;
 8006d70:	e08b      	b.n	8006e8a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d72:	4948      	ldr	r1, [pc, #288]	; (8006e94 <HAL_RCC_GetSysClockFreq+0x160>)
 8006d74:	6849      	ldr	r1, [r1, #4]
 8006d76:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006d7a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d7c:	4945      	ldr	r1, [pc, #276]	; (8006e94 <HAL_RCC_GetSysClockFreq+0x160>)
 8006d7e:	6849      	ldr	r1, [r1, #4]
 8006d80:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006d84:	2900      	cmp	r1, #0
 8006d86:	d024      	beq.n	8006dd2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d88:	4942      	ldr	r1, [pc, #264]	; (8006e94 <HAL_RCC_GetSysClockFreq+0x160>)
 8006d8a:	6849      	ldr	r1, [r1, #4]
 8006d8c:	0989      	lsrs	r1, r1, #6
 8006d8e:	4608      	mov	r0, r1
 8006d90:	f04f 0100 	mov.w	r1, #0
 8006d94:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006d98:	f04f 0500 	mov.w	r5, #0
 8006d9c:	ea00 0204 	and.w	r2, r0, r4
 8006da0:	ea01 0305 	and.w	r3, r1, r5
 8006da4:	493d      	ldr	r1, [pc, #244]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x168>)
 8006da6:	fb01 f003 	mul.w	r0, r1, r3
 8006daa:	2100      	movs	r1, #0
 8006dac:	fb01 f102 	mul.w	r1, r1, r2
 8006db0:	1844      	adds	r4, r0, r1
 8006db2:	493a      	ldr	r1, [pc, #232]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x168>)
 8006db4:	fba2 0101 	umull	r0, r1, r2, r1
 8006db8:	1863      	adds	r3, r4, r1
 8006dba:	4619      	mov	r1, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	f04f 0300 	mov.w	r3, #0
 8006dc4:	f7f9 fa6c 	bl	80002a0 <__aeabi_uldivmod>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4613      	mov	r3, r2
 8006dce:	60fb      	str	r3, [r7, #12]
 8006dd0:	e04a      	b.n	8006e68 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dd2:	4b30      	ldr	r3, [pc, #192]	; (8006e94 <HAL_RCC_GetSysClockFreq+0x160>)
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	099b      	lsrs	r3, r3, #6
 8006dd8:	461a      	mov	r2, r3
 8006dda:	f04f 0300 	mov.w	r3, #0
 8006dde:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006de2:	f04f 0100 	mov.w	r1, #0
 8006de6:	ea02 0400 	and.w	r4, r2, r0
 8006dea:	ea03 0501 	and.w	r5, r3, r1
 8006dee:	4620      	mov	r0, r4
 8006df0:	4629      	mov	r1, r5
 8006df2:	f04f 0200 	mov.w	r2, #0
 8006df6:	f04f 0300 	mov.w	r3, #0
 8006dfa:	014b      	lsls	r3, r1, #5
 8006dfc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006e00:	0142      	lsls	r2, r0, #5
 8006e02:	4610      	mov	r0, r2
 8006e04:	4619      	mov	r1, r3
 8006e06:	1b00      	subs	r0, r0, r4
 8006e08:	eb61 0105 	sbc.w	r1, r1, r5
 8006e0c:	f04f 0200 	mov.w	r2, #0
 8006e10:	f04f 0300 	mov.w	r3, #0
 8006e14:	018b      	lsls	r3, r1, #6
 8006e16:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006e1a:	0182      	lsls	r2, r0, #6
 8006e1c:	1a12      	subs	r2, r2, r0
 8006e1e:	eb63 0301 	sbc.w	r3, r3, r1
 8006e22:	f04f 0000 	mov.w	r0, #0
 8006e26:	f04f 0100 	mov.w	r1, #0
 8006e2a:	00d9      	lsls	r1, r3, #3
 8006e2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e30:	00d0      	lsls	r0, r2, #3
 8006e32:	4602      	mov	r2, r0
 8006e34:	460b      	mov	r3, r1
 8006e36:	1912      	adds	r2, r2, r4
 8006e38:	eb45 0303 	adc.w	r3, r5, r3
 8006e3c:	f04f 0000 	mov.w	r0, #0
 8006e40:	f04f 0100 	mov.w	r1, #0
 8006e44:	0299      	lsls	r1, r3, #10
 8006e46:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006e4a:	0290      	lsls	r0, r2, #10
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	460b      	mov	r3, r1
 8006e50:	4610      	mov	r0, r2
 8006e52:	4619      	mov	r1, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	461a      	mov	r2, r3
 8006e58:	f04f 0300 	mov.w	r3, #0
 8006e5c:	f7f9 fa20 	bl	80002a0 <__aeabi_uldivmod>
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	4613      	mov	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e68:	4b0a      	ldr	r3, [pc, #40]	; (8006e94 <HAL_RCC_GetSysClockFreq+0x160>)
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	0c1b      	lsrs	r3, r3, #16
 8006e6e:	f003 0303 	and.w	r3, r3, #3
 8006e72:	3301      	adds	r3, #1
 8006e74:	005b      	lsls	r3, r3, #1
 8006e76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e80:	60bb      	str	r3, [r7, #8]
      break;
 8006e82:	e002      	b.n	8006e8a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e84:	4b04      	ldr	r3, [pc, #16]	; (8006e98 <HAL_RCC_GetSysClockFreq+0x164>)
 8006e86:	60bb      	str	r3, [r7, #8]
      break;
 8006e88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e8a:	68bb      	ldr	r3, [r7, #8]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bdb0      	pop	{r4, r5, r7, pc}
 8006e94:	40023800 	.word	0x40023800
 8006e98:	00f42400 	.word	0x00f42400
 8006e9c:	017d7840 	.word	0x017d7840

08006ea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ea4:	4b03      	ldr	r3, [pc, #12]	; (8006eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	20000014 	.word	0x20000014

08006eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ebc:	f7ff fff0 	bl	8006ea0 <HAL_RCC_GetHCLKFreq>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	0a9b      	lsrs	r3, r3, #10
 8006ec8:	f003 0307 	and.w	r3, r3, #7
 8006ecc:	4903      	ldr	r1, [pc, #12]	; (8006edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ece:	5ccb      	ldrb	r3, [r1, r3]
 8006ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	40023800 	.word	0x40023800
 8006edc:	0800d870 	.word	0x0800d870

08006ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006ee4:	f7ff ffdc 	bl	8006ea0 <HAL_RCC_GetHCLKFreq>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	4b05      	ldr	r3, [pc, #20]	; (8006f00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	0b5b      	lsrs	r3, r3, #13
 8006ef0:	f003 0307 	and.w	r3, r3, #7
 8006ef4:	4903      	ldr	r1, [pc, #12]	; (8006f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ef6:	5ccb      	ldrb	r3, [r1, r3]
 8006ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	40023800 	.word	0x40023800
 8006f04:	0800d870 	.word	0x0800d870

08006f08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	220f      	movs	r2, #15
 8006f16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f18:	4b12      	ldr	r3, [pc, #72]	; (8006f64 <HAL_RCC_GetClockConfig+0x5c>)
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f003 0203 	and.w	r2, r3, #3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006f24:	4b0f      	ldr	r3, [pc, #60]	; (8006f64 <HAL_RCC_GetClockConfig+0x5c>)
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006f30:	4b0c      	ldr	r3, [pc, #48]	; (8006f64 <HAL_RCC_GetClockConfig+0x5c>)
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006f3c:	4b09      	ldr	r3, [pc, #36]	; (8006f64 <HAL_RCC_GetClockConfig+0x5c>)
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	08db      	lsrs	r3, r3, #3
 8006f42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006f4a:	4b07      	ldr	r3, [pc, #28]	; (8006f68 <HAL_RCC_GetClockConfig+0x60>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 020f 	and.w	r2, r3, #15
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	601a      	str	r2, [r3, #0]
}
 8006f56:	bf00      	nop
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	40023800 	.word	0x40023800
 8006f68:	40023c00 	.word	0x40023c00

08006f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f74:	2300      	movs	r3, #0
 8006f76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10b      	bne.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d105      	bne.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d075      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006fa0:	4bad      	ldr	r3, [pc, #692]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fa6:	f7fd f8cd 	bl	8004144 <HAL_GetTick>
 8006faa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fac:	e008      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006fae:	f7fd f8c9 	bl	8004144 <HAL_GetTick>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d901      	bls.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e18b      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fc0:	4ba6      	ldr	r3, [pc, #664]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1f0      	bne.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d009      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	019a      	lsls	r2, r3, #6
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	071b      	lsls	r3, r3, #28
 8006fe4:	499d      	ldr	r1, [pc, #628]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0302 	and.w	r3, r3, #2
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d01f      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006ff8:	4b98      	ldr	r3, [pc, #608]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ffe:	0f1b      	lsrs	r3, r3, #28
 8007000:	f003 0307 	and.w	r3, r3, #7
 8007004:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	019a      	lsls	r2, r3, #6
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	061b      	lsls	r3, r3, #24
 8007012:	431a      	orrs	r2, r3
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	071b      	lsls	r3, r3, #28
 8007018:	4990      	ldr	r1, [pc, #576]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800701a:	4313      	orrs	r3, r2
 800701c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007020:	4b8e      	ldr	r3, [pc, #568]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007026:	f023 021f 	bic.w	r2, r3, #31
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	3b01      	subs	r3, #1
 8007030:	498a      	ldr	r1, [pc, #552]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007032:	4313      	orrs	r3, r2
 8007034:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00d      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	019a      	lsls	r2, r3, #6
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	061b      	lsls	r3, r3, #24
 8007050:	431a      	orrs	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	071b      	lsls	r3, r3, #28
 8007058:	4980      	ldr	r1, [pc, #512]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800705a:	4313      	orrs	r3, r2
 800705c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007060:	4b7d      	ldr	r3, [pc, #500]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007062:	2201      	movs	r2, #1
 8007064:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007066:	f7fd f86d 	bl	8004144 <HAL_GetTick>
 800706a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800706c:	e008      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800706e:	f7fd f869 	bl	8004144 <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	2b02      	cmp	r3, #2
 800707a:	d901      	bls.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e12b      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007080:	4b76      	ldr	r3, [pc, #472]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d0f0      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b00      	cmp	r3, #0
 8007096:	d105      	bne.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d079      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80070a4:	4b6e      	ldr	r3, [pc, #440]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070a6:	2200      	movs	r2, #0
 80070a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070aa:	f7fd f84b 	bl	8004144 <HAL_GetTick>
 80070ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80070b0:	e008      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80070b2:	f7fd f847 	bl	8004144 <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d901      	bls.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e109      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80070c4:	4b65      	ldr	r3, [pc, #404]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070d0:	d0ef      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0304 	and.w	r3, r3, #4
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d020      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80070de:	4b5f      	ldr	r3, [pc, #380]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80070e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e4:	0f1b      	lsrs	r3, r3, #28
 80070e6:	f003 0307 	and.w	r3, r3, #7
 80070ea:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	019a      	lsls	r2, r3, #6
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	061b      	lsls	r3, r3, #24
 80070f8:	431a      	orrs	r2, r3
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	071b      	lsls	r3, r3, #28
 80070fe:	4957      	ldr	r1, [pc, #348]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007100:	4313      	orrs	r3, r2
 8007102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007106:	4b55      	ldr	r3, [pc, #340]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007108:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800710c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a1b      	ldr	r3, [r3, #32]
 8007114:	3b01      	subs	r3, #1
 8007116:	021b      	lsls	r3, r3, #8
 8007118:	4950      	ldr	r1, [pc, #320]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800711a:	4313      	orrs	r3, r2
 800711c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0308 	and.w	r3, r3, #8
 8007128:	2b00      	cmp	r3, #0
 800712a:	d01e      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800712c:	4b4b      	ldr	r3, [pc, #300]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800712e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007132:	0e1b      	lsrs	r3, r3, #24
 8007134:	f003 030f 	and.w	r3, r3, #15
 8007138:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	019a      	lsls	r2, r3, #6
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	061b      	lsls	r3, r3, #24
 8007144:	431a      	orrs	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	071b      	lsls	r3, r3, #28
 800714c:	4943      	ldr	r1, [pc, #268]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800714e:	4313      	orrs	r3, r2
 8007150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007154:	4b41      	ldr	r3, [pc, #260]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800715a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007162:	493e      	ldr	r1, [pc, #248]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007164:	4313      	orrs	r3, r2
 8007166:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800716a:	4b3d      	ldr	r3, [pc, #244]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800716c:	2201      	movs	r2, #1
 800716e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007170:	f7fc ffe8 	bl	8004144 <HAL_GetTick>
 8007174:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007176:	e008      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007178:	f7fc ffe4 	bl	8004144 <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	2b02      	cmp	r3, #2
 8007184:	d901      	bls.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e0a6      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800718a:	4b34      	ldr	r3, [pc, #208]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007192:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007196:	d1ef      	bne.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0320 	and.w	r3, r3, #32
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 808d 	beq.w	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80071a6:	2300      	movs	r3, #0
 80071a8:	60fb      	str	r3, [r7, #12]
 80071aa:	4b2c      	ldr	r3, [pc, #176]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	4a2b      	ldr	r2, [pc, #172]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071b4:	6413      	str	r3, [r2, #64]	; 0x40
 80071b6:	4b29      	ldr	r3, [pc, #164]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80071c2:	4b28      	ldr	r3, [pc, #160]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a27      	ldr	r2, [pc, #156]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80071c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071ce:	f7fc ffb9 	bl	8004144 <HAL_GetTick>
 80071d2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80071d4:	e008      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80071d6:	f7fc ffb5 	bl	8004144 <HAL_GetTick>
 80071da:	4602      	mov	r2, r0
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d901      	bls.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e077      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80071e8:	4b1e      	ldr	r3, [pc, #120]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d0f0      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071f4:	4b19      	ldr	r3, [pc, #100]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071fc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d039      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007208:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	429a      	cmp	r2, r3
 8007210:	d032      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007212:	4b12      	ldr	r3, [pc, #72]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800721a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800721c:	4b12      	ldr	r3, [pc, #72]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800721e:	2201      	movs	r2, #1
 8007220:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007222:	4b11      	ldr	r3, [pc, #68]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007224:	2200      	movs	r2, #0
 8007226:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007228:	4a0c      	ldr	r2, [pc, #48]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800722e:	4b0b      	ldr	r3, [pc, #44]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	2b01      	cmp	r3, #1
 8007238:	d11e      	bne.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800723a:	f7fc ff83 	bl	8004144 <HAL_GetTick>
 800723e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007240:	e014      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007242:	f7fc ff7f 	bl	8004144 <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007250:	4293      	cmp	r3, r2
 8007252:	d90b      	bls.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e03f      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8007258:	42470068 	.word	0x42470068
 800725c:	40023800 	.word	0x40023800
 8007260:	42470070 	.word	0x42470070
 8007264:	40007000 	.word	0x40007000
 8007268:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800726c:	4b1c      	ldr	r3, [pc, #112]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800726e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007270:	f003 0302 	and.w	r3, r3, #2
 8007274:	2b00      	cmp	r3, #0
 8007276:	d0e4      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007280:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007284:	d10d      	bne.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007286:	4b16      	ldr	r3, [pc, #88]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007292:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800729a:	4911      	ldr	r1, [pc, #68]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800729c:	4313      	orrs	r3, r2
 800729e:	608b      	str	r3, [r1, #8]
 80072a0:	e005      	b.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x342>
 80072a2:	4b0f      	ldr	r3, [pc, #60]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	4a0e      	ldr	r2, [pc, #56]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072a8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80072ac:	6093      	str	r3, [r2, #8]
 80072ae:	4b0c      	ldr	r3, [pc, #48]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072ba:	4909      	ldr	r1, [pc, #36]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072bc:	4313      	orrs	r3, r2
 80072be:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0310 	and.w	r3, r3, #16
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d004      	beq.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80072d2:	4b04      	ldr	r3, [pc, #16]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80072d4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3718      	adds	r7, #24
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	40023800 	.word	0x40023800
 80072e4:	424711e0 	.word	0x424711e0

080072e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e07b      	b.n	80073f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d108      	bne.n	8007314 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800730a:	d009      	beq.n	8007320 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	61da      	str	r2, [r3, #28]
 8007312:	e005      	b.n	8007320 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d106      	bne.n	8007340 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7fa ff24 	bl	8002188 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2202      	movs	r2, #2
 8007344:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007356:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007368:	431a      	orrs	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007372:	431a      	orrs	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	f003 0302 	and.w	r3, r3, #2
 800737c:	431a      	orrs	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	431a      	orrs	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007390:	431a      	orrs	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	69db      	ldr	r3, [r3, #28]
 8007396:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800739a:	431a      	orrs	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a1b      	ldr	r3, [r3, #32]
 80073a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073a4:	ea42 0103 	orr.w	r1, r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	430a      	orrs	r2, r1
 80073b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	0c1b      	lsrs	r3, r3, #16
 80073be:	f003 0104 	and.w	r1, r3, #4
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	f003 0210 	and.w	r2, r3, #16
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	69da      	ldr	r2, [r3, #28]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b082      	sub	sp, #8
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d101      	bne.n	800740c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e01a      	b.n	8007442 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2202      	movs	r2, #2
 8007410:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007422:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7fa fef7 	bl	8002218 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b088      	sub	sp, #32
 800744e:	af00      	add	r7, sp, #0
 8007450:	60f8      	str	r0, [r7, #12]
 8007452:	60b9      	str	r1, [r7, #8]
 8007454:	603b      	str	r3, [r7, #0]
 8007456:	4613      	mov	r3, r2
 8007458:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007464:	2b01      	cmp	r3, #1
 8007466:	d101      	bne.n	800746c <HAL_SPI_Transmit+0x22>
 8007468:	2302      	movs	r3, #2
 800746a:	e126      	b.n	80076ba <HAL_SPI_Transmit+0x270>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007474:	f7fc fe66 	bl	8004144 <HAL_GetTick>
 8007478:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800747a:	88fb      	ldrh	r3, [r7, #6]
 800747c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b01      	cmp	r3, #1
 8007488:	d002      	beq.n	8007490 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800748a:	2302      	movs	r3, #2
 800748c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800748e:	e10b      	b.n	80076a8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d002      	beq.n	800749c <HAL_SPI_Transmit+0x52>
 8007496:	88fb      	ldrh	r3, [r7, #6]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d102      	bne.n	80074a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074a0:	e102      	b.n	80076a8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2203      	movs	r2, #3
 80074a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	88fa      	ldrh	r2, [r7, #6]
 80074ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	88fa      	ldrh	r2, [r7, #6]
 80074c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074e8:	d10f      	bne.n	800750a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007508:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007514:	2b40      	cmp	r3, #64	; 0x40
 8007516:	d007      	beq.n	8007528 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007526:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007530:	d14b      	bne.n	80075ca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d002      	beq.n	8007540 <HAL_SPI_Transmit+0xf6>
 800753a:	8afb      	ldrh	r3, [r7, #22]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d13e      	bne.n	80075be <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007544:	881a      	ldrh	r2, [r3, #0]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007550:	1c9a      	adds	r2, r3, #2
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800755a:	b29b      	uxth	r3, r3
 800755c:	3b01      	subs	r3, #1
 800755e:	b29a      	uxth	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007564:	e02b      	b.n	80075be <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f003 0302 	and.w	r3, r3, #2
 8007570:	2b02      	cmp	r3, #2
 8007572:	d112      	bne.n	800759a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007578:	881a      	ldrh	r2, [r3, #0]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007584:	1c9a      	adds	r2, r3, #2
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800758e:	b29b      	uxth	r3, r3
 8007590:	3b01      	subs	r3, #1
 8007592:	b29a      	uxth	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	86da      	strh	r2, [r3, #54]	; 0x36
 8007598:	e011      	b.n	80075be <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800759a:	f7fc fdd3 	bl	8004144 <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	683a      	ldr	r2, [r7, #0]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d803      	bhi.n	80075b2 <HAL_SPI_Transmit+0x168>
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b0:	d102      	bne.n	80075b8 <HAL_SPI_Transmit+0x16e>
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d102      	bne.n	80075be <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075bc:	e074      	b.n	80076a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1ce      	bne.n	8007566 <HAL_SPI_Transmit+0x11c>
 80075c8:	e04c      	b.n	8007664 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d002      	beq.n	80075d8 <HAL_SPI_Transmit+0x18e>
 80075d2:	8afb      	ldrh	r3, [r7, #22]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d140      	bne.n	800765a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	330c      	adds	r3, #12
 80075e2:	7812      	ldrb	r2, [r2, #0]
 80075e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	3b01      	subs	r3, #1
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80075fe:	e02c      	b.n	800765a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f003 0302 	and.w	r3, r3, #2
 800760a:	2b02      	cmp	r3, #2
 800760c:	d113      	bne.n	8007636 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	330c      	adds	r3, #12
 8007618:	7812      	ldrb	r2, [r2, #0]
 800761a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007620:	1c5a      	adds	r2, r3, #1
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800762a:	b29b      	uxth	r3, r3
 800762c:	3b01      	subs	r3, #1
 800762e:	b29a      	uxth	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	86da      	strh	r2, [r3, #54]	; 0x36
 8007634:	e011      	b.n	800765a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007636:	f7fc fd85 	bl	8004144 <HAL_GetTick>
 800763a:	4602      	mov	r2, r0
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	683a      	ldr	r2, [r7, #0]
 8007642:	429a      	cmp	r2, r3
 8007644:	d803      	bhi.n	800764e <HAL_SPI_Transmit+0x204>
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800764c:	d102      	bne.n	8007654 <HAL_SPI_Transmit+0x20a>
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d102      	bne.n	800765a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007658:	e026      	b.n	80076a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800765e:	b29b      	uxth	r3, r3
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1cd      	bne.n	8007600 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007664:	69ba      	ldr	r2, [r7, #24]
 8007666:	6839      	ldr	r1, [r7, #0]
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 fbd9 	bl	8007e20 <SPI_EndRxTxTransaction>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2220      	movs	r2, #32
 8007678:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10a      	bne.n	8007698 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007682:	2300      	movs	r3, #0
 8007684:	613b      	str	r3, [r7, #16]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	613b      	str	r3, [r7, #16]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	613b      	str	r3, [r7, #16]
 8007696:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800769c:	2b00      	cmp	r3, #0
 800769e:	d002      	beq.n	80076a6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	77fb      	strb	r3, [r7, #31]
 80076a4:	e000      	b.n	80076a8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80076a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80076b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3720      	adds	r7, #32
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b088      	sub	sp, #32
 80076c6:	af02      	add	r7, sp, #8
 80076c8:	60f8      	str	r0, [r7, #12]
 80076ca:	60b9      	str	r1, [r7, #8]
 80076cc:	603b      	str	r3, [r7, #0]
 80076ce:	4613      	mov	r3, r2
 80076d0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076de:	d112      	bne.n	8007706 <HAL_SPI_Receive+0x44>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d10e      	bne.n	8007706 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2204      	movs	r2, #4
 80076ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80076f0:	88fa      	ldrh	r2, [r7, #6]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	4613      	mov	r3, r2
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	68b9      	ldr	r1, [r7, #8]
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 f8f1 	bl	80078e4 <HAL_SPI_TransmitReceive>
 8007702:	4603      	mov	r3, r0
 8007704:	e0ea      	b.n	80078dc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800770c:	2b01      	cmp	r3, #1
 800770e:	d101      	bne.n	8007714 <HAL_SPI_Receive+0x52>
 8007710:	2302      	movs	r3, #2
 8007712:	e0e3      	b.n	80078dc <HAL_SPI_Receive+0x21a>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800771c:	f7fc fd12 	bl	8004144 <HAL_GetTick>
 8007720:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b01      	cmp	r3, #1
 800772c:	d002      	beq.n	8007734 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800772e:	2302      	movs	r3, #2
 8007730:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007732:	e0ca      	b.n	80078ca <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d002      	beq.n	8007740 <HAL_SPI_Receive+0x7e>
 800773a:	88fb      	ldrh	r3, [r7, #6]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d102      	bne.n	8007746 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007744:	e0c1      	b.n	80078ca <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2204      	movs	r2, #4
 800774a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	88fa      	ldrh	r2, [r7, #6]
 800775e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	88fa      	ldrh	r2, [r7, #6]
 8007764:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800778c:	d10f      	bne.n	80077ae <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800779c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80077ac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b8:	2b40      	cmp	r3, #64	; 0x40
 80077ba:	d007      	beq.n	80077cc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d162      	bne.n	800789a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80077d4:	e02e      	b.n	8007834 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f003 0301 	and.w	r3, r3, #1
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d115      	bne.n	8007810 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f103 020c 	add.w	r2, r3, #12
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f0:	7812      	ldrb	r2, [r2, #0]
 80077f2:	b2d2      	uxtb	r2, r2
 80077f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fa:	1c5a      	adds	r2, r3, #1
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007804:	b29b      	uxth	r3, r3
 8007806:	3b01      	subs	r3, #1
 8007808:	b29a      	uxth	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800780e:	e011      	b.n	8007834 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007810:	f7fc fc98 	bl	8004144 <HAL_GetTick>
 8007814:	4602      	mov	r2, r0
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	683a      	ldr	r2, [r7, #0]
 800781c:	429a      	cmp	r2, r3
 800781e:	d803      	bhi.n	8007828 <HAL_SPI_Receive+0x166>
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007826:	d102      	bne.n	800782e <HAL_SPI_Receive+0x16c>
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d102      	bne.n	8007834 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007832:	e04a      	b.n	80078ca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007838:	b29b      	uxth	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1cb      	bne.n	80077d6 <HAL_SPI_Receive+0x114>
 800783e:	e031      	b.n	80078a4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	2b01      	cmp	r3, #1
 800784c:	d113      	bne.n	8007876 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68da      	ldr	r2, [r3, #12]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007858:	b292      	uxth	r2, r2
 800785a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007860:	1c9a      	adds	r2, r3, #2
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800786a:	b29b      	uxth	r3, r3
 800786c:	3b01      	subs	r3, #1
 800786e:	b29a      	uxth	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007874:	e011      	b.n	800789a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007876:	f7fc fc65 	bl	8004144 <HAL_GetTick>
 800787a:	4602      	mov	r2, r0
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	429a      	cmp	r2, r3
 8007884:	d803      	bhi.n	800788e <HAL_SPI_Receive+0x1cc>
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800788c:	d102      	bne.n	8007894 <HAL_SPI_Receive+0x1d2>
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d102      	bne.n	800789a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007894:	2303      	movs	r3, #3
 8007896:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007898:	e017      	b.n	80078ca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800789e:	b29b      	uxth	r3, r3
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1cd      	bne.n	8007840 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078a4:	693a      	ldr	r2, [r7, #16]
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f000 fa53 	bl	8007d54 <SPI_EndRxTransaction>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d002      	beq.n	80078ba <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2220      	movs	r2, #32
 80078b8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d002      	beq.n	80078c8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	75fb      	strb	r3, [r7, #23]
 80078c6:	e000      	b.n	80078ca <HAL_SPI_Receive+0x208>
  }

error :
 80078c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80078da:	7dfb      	ldrb	r3, [r7, #23]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3718      	adds	r7, #24
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08c      	sub	sp, #48	; 0x30
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
 80078f0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80078f2:	2301      	movs	r3, #1
 80078f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80078f6:	2300      	movs	r3, #0
 80078f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007902:	2b01      	cmp	r3, #1
 8007904:	d101      	bne.n	800790a <HAL_SPI_TransmitReceive+0x26>
 8007906:	2302      	movs	r3, #2
 8007908:	e18a      	b.n	8007c20 <HAL_SPI_TransmitReceive+0x33c>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007912:	f7fc fc17 	bl	8004144 <HAL_GetTick>
 8007916:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800791e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007928:	887b      	ldrh	r3, [r7, #2]
 800792a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800792c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007930:	2b01      	cmp	r3, #1
 8007932:	d00f      	beq.n	8007954 <HAL_SPI_TransmitReceive+0x70>
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800793a:	d107      	bne.n	800794c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d103      	bne.n	800794c <HAL_SPI_TransmitReceive+0x68>
 8007944:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007948:	2b04      	cmp	r3, #4
 800794a:	d003      	beq.n	8007954 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800794c:	2302      	movs	r3, #2
 800794e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007952:	e15b      	b.n	8007c0c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d005      	beq.n	8007966 <HAL_SPI_TransmitReceive+0x82>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d002      	beq.n	8007966 <HAL_SPI_TransmitReceive+0x82>
 8007960:	887b      	ldrh	r3, [r7, #2]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d103      	bne.n	800796e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800796c:	e14e      	b.n	8007c0c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b04      	cmp	r3, #4
 8007978:	d003      	beq.n	8007982 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2205      	movs	r2, #5
 800797e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	887a      	ldrh	r2, [r7, #2]
 8007992:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	887a      	ldrh	r2, [r7, #2]
 8007998:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	68ba      	ldr	r2, [r7, #8]
 800799e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	887a      	ldrh	r2, [r7, #2]
 80079a4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	887a      	ldrh	r2, [r7, #2]
 80079aa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c2:	2b40      	cmp	r3, #64	; 0x40
 80079c4:	d007      	beq.n	80079d6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079de:	d178      	bne.n	8007ad2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d002      	beq.n	80079ee <HAL_SPI_TransmitReceive+0x10a>
 80079e8:	8b7b      	ldrh	r3, [r7, #26]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d166      	bne.n	8007abc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f2:	881a      	ldrh	r2, [r3, #0]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fe:	1c9a      	adds	r2, r3, #2
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a12:	e053      	b.n	8007abc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	f003 0302 	and.w	r3, r3, #2
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d11b      	bne.n	8007a5a <HAL_SPI_TransmitReceive+0x176>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d016      	beq.n	8007a5a <HAL_SPI_TransmitReceive+0x176>
 8007a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d113      	bne.n	8007a5a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a36:	881a      	ldrh	r2, [r3, #0]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a42:	1c9a      	adds	r2, r3, #2
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d119      	bne.n	8007a9c <HAL_SPI_TransmitReceive+0x1b8>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d014      	beq.n	8007a9c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68da      	ldr	r2, [r3, #12]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7c:	b292      	uxth	r2, r2
 8007a7e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a84:	1c9a      	adds	r2, r3, #2
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	3b01      	subs	r3, #1
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a9c:	f7fc fb52 	bl	8004144 <HAL_GetTick>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d807      	bhi.n	8007abc <HAL_SPI_TransmitReceive+0x1d8>
 8007aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab2:	d003      	beq.n	8007abc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007aba:	e0a7      	b.n	8007c0c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1a6      	bne.n	8007a14 <HAL_SPI_TransmitReceive+0x130>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1a1      	bne.n	8007a14 <HAL_SPI_TransmitReceive+0x130>
 8007ad0:	e07c      	b.n	8007bcc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d002      	beq.n	8007ae0 <HAL_SPI_TransmitReceive+0x1fc>
 8007ada:	8b7b      	ldrh	r3, [r7, #26]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d16b      	bne.n	8007bb8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	330c      	adds	r3, #12
 8007aea:	7812      	ldrb	r2, [r2, #0]
 8007aec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af2:	1c5a      	adds	r2, r3, #1
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	3b01      	subs	r3, #1
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b06:	e057      	b.n	8007bb8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f003 0302 	and.w	r3, r3, #2
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d11c      	bne.n	8007b50 <HAL_SPI_TransmitReceive+0x26c>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d017      	beq.n	8007b50 <HAL_SPI_TransmitReceive+0x26c>
 8007b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d114      	bne.n	8007b50 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	330c      	adds	r3, #12
 8007b30:	7812      	ldrb	r2, [r2, #0]
 8007b32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b38:	1c5a      	adds	r2, r3, #1
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	3b01      	subs	r3, #1
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d119      	bne.n	8007b92 <HAL_SPI_TransmitReceive+0x2ae>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d014      	beq.n	8007b92 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68da      	ldr	r2, [r3, #12]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b72:	b2d2      	uxtb	r2, r2
 8007b74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7a:	1c5a      	adds	r2, r3, #1
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	3b01      	subs	r3, #1
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b92:	f7fc fad7 	bl	8004144 <HAL_GetTick>
 8007b96:	4602      	mov	r2, r0
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d803      	bhi.n	8007baa <HAL_SPI_TransmitReceive+0x2c6>
 8007ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba8:	d102      	bne.n	8007bb0 <HAL_SPI_TransmitReceive+0x2cc>
 8007baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d103      	bne.n	8007bb8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007bb6:	e029      	b.n	8007c0c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1a2      	bne.n	8007b08 <HAL_SPI_TransmitReceive+0x224>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d19d      	bne.n	8007b08 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f000 f925 	bl	8007e20 <SPI_EndRxTxTransaction>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d006      	beq.n	8007bea <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2220      	movs	r2, #32
 8007be6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007be8:	e010      	b.n	8007c0c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10b      	bne.n	8007c0a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	617b      	str	r3, [r7, #20]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	617b      	str	r3, [r7, #20]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	617b      	str	r3, [r7, #20]
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	e000      	b.n	8007c0c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007c0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007c1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3730      	adds	r7, #48	; 0x30
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c36:	b2db      	uxtb	r3, r3
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b088      	sub	sp, #32
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	603b      	str	r3, [r7, #0]
 8007c50:	4613      	mov	r3, r2
 8007c52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c54:	f7fc fa76 	bl	8004144 <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5c:	1a9b      	subs	r3, r3, r2
 8007c5e:	683a      	ldr	r2, [r7, #0]
 8007c60:	4413      	add	r3, r2
 8007c62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c64:	f7fc fa6e 	bl	8004144 <HAL_GetTick>
 8007c68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c6a:	4b39      	ldr	r3, [pc, #228]	; (8007d50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	015b      	lsls	r3, r3, #5
 8007c70:	0d1b      	lsrs	r3, r3, #20
 8007c72:	69fa      	ldr	r2, [r7, #28]
 8007c74:	fb02 f303 	mul.w	r3, r2, r3
 8007c78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c7a:	e054      	b.n	8007d26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c82:	d050      	beq.n	8007d26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c84:	f7fc fa5e 	bl	8004144 <HAL_GetTick>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	1ad3      	subs	r3, r2, r3
 8007c8e:	69fa      	ldr	r2, [r7, #28]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d902      	bls.n	8007c9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d13d      	bne.n	8007d16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	685a      	ldr	r2, [r3, #4]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ca8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cb2:	d111      	bne.n	8007cd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cbc:	d004      	beq.n	8007cc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cc6:	d107      	bne.n	8007cd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ce0:	d10f      	bne.n	8007d02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cf0:	601a      	str	r2, [r3, #0]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e017      	b.n	8007d46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d101      	bne.n	8007d20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	3b01      	subs	r3, #1
 8007d24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	689a      	ldr	r2, [r3, #8]
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	4013      	ands	r3, r2
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	bf0c      	ite	eq
 8007d36:	2301      	moveq	r3, #1
 8007d38:	2300      	movne	r3, #0
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	79fb      	ldrb	r3, [r7, #7]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d19b      	bne.n	8007c7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3720      	adds	r7, #32
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	20000014 	.word	0x20000014

08007d54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af02      	add	r7, sp, #8
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d68:	d111      	bne.n	8007d8e <SPI_EndRxTransaction+0x3a>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d72:	d004      	beq.n	8007d7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d7c:	d107      	bne.n	8007d8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d8c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d96:	d12a      	bne.n	8007dee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007da0:	d012      	beq.n	8007dc8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	2200      	movs	r2, #0
 8007daa:	2180      	movs	r1, #128	; 0x80
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f7ff ff49 	bl	8007c44 <SPI_WaitFlagStateUntilTimeout>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d02d      	beq.n	8007e14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dbc:	f043 0220 	orr.w	r2, r3, #32
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e026      	b.n	8007e16 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	9300      	str	r3, [sp, #0]
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f7ff ff36 	bl	8007c44 <SPI_WaitFlagStateUntilTimeout>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d01a      	beq.n	8007e14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de2:	f043 0220 	orr.w	r2, r3, #32
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007dea:	2303      	movs	r3, #3
 8007dec:	e013      	b.n	8007e16 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	2200      	movs	r2, #0
 8007df6:	2101      	movs	r1, #1
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f7ff ff23 	bl	8007c44 <SPI_WaitFlagStateUntilTimeout>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d007      	beq.n	8007e14 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e08:	f043 0220 	orr.w	r2, r3, #32
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e000      	b.n	8007e16 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
	...

08007e20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b088      	sub	sp, #32
 8007e24:	af02      	add	r7, sp, #8
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007e2c:	4b1b      	ldr	r3, [pc, #108]	; (8007e9c <SPI_EndRxTxTransaction+0x7c>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a1b      	ldr	r2, [pc, #108]	; (8007ea0 <SPI_EndRxTxTransaction+0x80>)
 8007e32:	fba2 2303 	umull	r2, r3, r2, r3
 8007e36:	0d5b      	lsrs	r3, r3, #21
 8007e38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e3c:	fb02 f303 	mul.w	r3, r2, r3
 8007e40:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e4a:	d112      	bne.n	8007e72 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	2200      	movs	r2, #0
 8007e54:	2180      	movs	r1, #128	; 0x80
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	f7ff fef4 	bl	8007c44 <SPI_WaitFlagStateUntilTimeout>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d016      	beq.n	8007e90 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e66:	f043 0220 	orr.w	r2, r3, #32
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e00f      	b.n	8007e92 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00a      	beq.n	8007e8e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e88:	2b80      	cmp	r3, #128	; 0x80
 8007e8a:	d0f2      	beq.n	8007e72 <SPI_EndRxTxTransaction+0x52>
 8007e8c:	e000      	b.n	8007e90 <SPI_EndRxTxTransaction+0x70>
        break;
 8007e8e:	bf00      	nop
  }

  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3718      	adds	r7, #24
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	20000014 	.word	0x20000014
 8007ea0:	165e9f81 	.word	0x165e9f81

08007ea4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e041      	b.n	8007f3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d106      	bne.n	8007ed0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f839 	bl	8007f42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	3304      	adds	r3, #4
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	4610      	mov	r0, r2
 8007ee4:	f000 f9d8 	bl	8008298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3708      	adds	r7, #8
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b083      	sub	sp, #12
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007f4a:	bf00      	nop
 8007f4c:	370c      	adds	r7, #12
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr
	...

08007f58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d001      	beq.n	8007f70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e04e      	b.n	800800e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2202      	movs	r2, #2
 8007f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68da      	ldr	r2, [r3, #12]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f042 0201 	orr.w	r2, r2, #1
 8007f86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a23      	ldr	r2, [pc, #140]	; (800801c <HAL_TIM_Base_Start_IT+0xc4>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d022      	beq.n	8007fd8 <HAL_TIM_Base_Start_IT+0x80>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f9a:	d01d      	beq.n	8007fd8 <HAL_TIM_Base_Start_IT+0x80>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a1f      	ldr	r2, [pc, #124]	; (8008020 <HAL_TIM_Base_Start_IT+0xc8>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d018      	beq.n	8007fd8 <HAL_TIM_Base_Start_IT+0x80>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a1e      	ldr	r2, [pc, #120]	; (8008024 <HAL_TIM_Base_Start_IT+0xcc>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d013      	beq.n	8007fd8 <HAL_TIM_Base_Start_IT+0x80>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a1c      	ldr	r2, [pc, #112]	; (8008028 <HAL_TIM_Base_Start_IT+0xd0>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d00e      	beq.n	8007fd8 <HAL_TIM_Base_Start_IT+0x80>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a1b      	ldr	r2, [pc, #108]	; (800802c <HAL_TIM_Base_Start_IT+0xd4>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d009      	beq.n	8007fd8 <HAL_TIM_Base_Start_IT+0x80>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a19      	ldr	r2, [pc, #100]	; (8008030 <HAL_TIM_Base_Start_IT+0xd8>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d004      	beq.n	8007fd8 <HAL_TIM_Base_Start_IT+0x80>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a18      	ldr	r2, [pc, #96]	; (8008034 <HAL_TIM_Base_Start_IT+0xdc>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d111      	bne.n	8007ffc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f003 0307 	and.w	r3, r3, #7
 8007fe2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2b06      	cmp	r3, #6
 8007fe8:	d010      	beq.n	800800c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f042 0201 	orr.w	r2, r2, #1
 8007ff8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ffa:	e007      	b.n	800800c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f042 0201 	orr.w	r2, r2, #1
 800800a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	40010000 	.word	0x40010000
 8008020:	40000400 	.word	0x40000400
 8008024:	40000800 	.word	0x40000800
 8008028:	40000c00 	.word	0x40000c00
 800802c:	40010400 	.word	0x40010400
 8008030:	40014000 	.word	0x40014000
 8008034:	40001800 	.word	0x40001800

08008038 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	f003 0302 	and.w	r3, r3, #2
 800804a:	2b02      	cmp	r3, #2
 800804c:	d122      	bne.n	8008094 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	f003 0302 	and.w	r3, r3, #2
 8008058:	2b02      	cmp	r3, #2
 800805a:	d11b      	bne.n	8008094 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f06f 0202 	mvn.w	r2, #2
 8008064:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	699b      	ldr	r3, [r3, #24]
 8008072:	f003 0303 	and.w	r3, r3, #3
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f8ee 	bl	800825c <HAL_TIM_IC_CaptureCallback>
 8008080:	e005      	b.n	800808e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f8e0 	bl	8008248 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f8f1 	bl	8008270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	f003 0304 	and.w	r3, r3, #4
 800809e:	2b04      	cmp	r3, #4
 80080a0:	d122      	bne.n	80080e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	f003 0304 	and.w	r3, r3, #4
 80080ac:	2b04      	cmp	r3, #4
 80080ae:	d11b      	bne.n	80080e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f06f 0204 	mvn.w	r2, #4
 80080b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2202      	movs	r2, #2
 80080be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d003      	beq.n	80080d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f8c4 	bl	800825c <HAL_TIM_IC_CaptureCallback>
 80080d4:	e005      	b.n	80080e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f8b6 	bl	8008248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f8c7 	bl	8008270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	f003 0308 	and.w	r3, r3, #8
 80080f2:	2b08      	cmp	r3, #8
 80080f4:	d122      	bne.n	800813c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	f003 0308 	and.w	r3, r3, #8
 8008100:	2b08      	cmp	r3, #8
 8008102:	d11b      	bne.n	800813c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f06f 0208 	mvn.w	r2, #8
 800810c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2204      	movs	r2, #4
 8008112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	69db      	ldr	r3, [r3, #28]
 800811a:	f003 0303 	and.w	r3, r3, #3
 800811e:	2b00      	cmp	r3, #0
 8008120:	d003      	beq.n	800812a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f89a 	bl	800825c <HAL_TIM_IC_CaptureCallback>
 8008128:	e005      	b.n	8008136 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f88c 	bl	8008248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f89d 	bl	8008270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	f003 0310 	and.w	r3, r3, #16
 8008146:	2b10      	cmp	r3, #16
 8008148:	d122      	bne.n	8008190 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	f003 0310 	and.w	r3, r3, #16
 8008154:	2b10      	cmp	r3, #16
 8008156:	d11b      	bne.n	8008190 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f06f 0210 	mvn.w	r2, #16
 8008160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2208      	movs	r2, #8
 8008166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	69db      	ldr	r3, [r3, #28]
 800816e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f870 	bl	800825c <HAL_TIM_IC_CaptureCallback>
 800817c:	e005      	b.n	800818a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f862 	bl	8008248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f873 	bl	8008270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	f003 0301 	and.w	r3, r3, #1
 800819a:	2b01      	cmp	r3, #1
 800819c:	d10e      	bne.n	80081bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	f003 0301 	and.w	r3, r3, #1
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d107      	bne.n	80081bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f06f 0201 	mvn.w	r2, #1
 80081b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7f9 fc1e 	bl	80019f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081c6:	2b80      	cmp	r3, #128	; 0x80
 80081c8:	d10e      	bne.n	80081e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081d4:	2b80      	cmp	r3, #128	; 0x80
 80081d6:	d107      	bne.n	80081e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80081e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f902 	bl	80083ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f2:	2b40      	cmp	r3, #64	; 0x40
 80081f4:	d10e      	bne.n	8008214 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008200:	2b40      	cmp	r3, #64	; 0x40
 8008202:	d107      	bne.n	8008214 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800820c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f838 	bl	8008284 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	f003 0320 	and.w	r3, r3, #32
 800821e:	2b20      	cmp	r3, #32
 8008220:	d10e      	bne.n	8008240 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	f003 0320 	and.w	r3, r3, #32
 800822c:	2b20      	cmp	r3, #32
 800822e:	d107      	bne.n	8008240 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f06f 0220 	mvn.w	r2, #32
 8008238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f8cc 	bl	80083d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008240:	bf00      	nop
 8008242:	3708      	adds	r7, #8
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008278:	bf00      	nop
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800828c:	bf00      	nop
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4a40      	ldr	r2, [pc, #256]	; (80083ac <TIM_Base_SetConfig+0x114>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d013      	beq.n	80082d8 <TIM_Base_SetConfig+0x40>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082b6:	d00f      	beq.n	80082d8 <TIM_Base_SetConfig+0x40>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a3d      	ldr	r2, [pc, #244]	; (80083b0 <TIM_Base_SetConfig+0x118>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d00b      	beq.n	80082d8 <TIM_Base_SetConfig+0x40>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a3c      	ldr	r2, [pc, #240]	; (80083b4 <TIM_Base_SetConfig+0x11c>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d007      	beq.n	80082d8 <TIM_Base_SetConfig+0x40>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a3b      	ldr	r2, [pc, #236]	; (80083b8 <TIM_Base_SetConfig+0x120>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d003      	beq.n	80082d8 <TIM_Base_SetConfig+0x40>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a3a      	ldr	r2, [pc, #232]	; (80083bc <TIM_Base_SetConfig+0x124>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d108      	bne.n	80082ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a2f      	ldr	r2, [pc, #188]	; (80083ac <TIM_Base_SetConfig+0x114>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d02b      	beq.n	800834a <TIM_Base_SetConfig+0xb2>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082f8:	d027      	beq.n	800834a <TIM_Base_SetConfig+0xb2>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a2c      	ldr	r2, [pc, #176]	; (80083b0 <TIM_Base_SetConfig+0x118>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d023      	beq.n	800834a <TIM_Base_SetConfig+0xb2>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a2b      	ldr	r2, [pc, #172]	; (80083b4 <TIM_Base_SetConfig+0x11c>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d01f      	beq.n	800834a <TIM_Base_SetConfig+0xb2>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a2a      	ldr	r2, [pc, #168]	; (80083b8 <TIM_Base_SetConfig+0x120>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d01b      	beq.n	800834a <TIM_Base_SetConfig+0xb2>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a29      	ldr	r2, [pc, #164]	; (80083bc <TIM_Base_SetConfig+0x124>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d017      	beq.n	800834a <TIM_Base_SetConfig+0xb2>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a28      	ldr	r2, [pc, #160]	; (80083c0 <TIM_Base_SetConfig+0x128>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d013      	beq.n	800834a <TIM_Base_SetConfig+0xb2>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a27      	ldr	r2, [pc, #156]	; (80083c4 <TIM_Base_SetConfig+0x12c>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d00f      	beq.n	800834a <TIM_Base_SetConfig+0xb2>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a26      	ldr	r2, [pc, #152]	; (80083c8 <TIM_Base_SetConfig+0x130>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d00b      	beq.n	800834a <TIM_Base_SetConfig+0xb2>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a25      	ldr	r2, [pc, #148]	; (80083cc <TIM_Base_SetConfig+0x134>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d007      	beq.n	800834a <TIM_Base_SetConfig+0xb2>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a24      	ldr	r2, [pc, #144]	; (80083d0 <TIM_Base_SetConfig+0x138>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d003      	beq.n	800834a <TIM_Base_SetConfig+0xb2>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a23      	ldr	r2, [pc, #140]	; (80083d4 <TIM_Base_SetConfig+0x13c>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d108      	bne.n	800835c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	4313      	orrs	r3, r2
 800835a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	4313      	orrs	r3, r2
 8008368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	689a      	ldr	r2, [r3, #8]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a0a      	ldr	r2, [pc, #40]	; (80083ac <TIM_Base_SetConfig+0x114>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d003      	beq.n	8008390 <TIM_Base_SetConfig+0xf8>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a0c      	ldr	r2, [pc, #48]	; (80083bc <TIM_Base_SetConfig+0x124>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d103      	bne.n	8008398 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	691a      	ldr	r2, [r3, #16]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	615a      	str	r2, [r3, #20]
}
 800839e:	bf00      	nop
 80083a0:	3714      	adds	r7, #20
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	40010000 	.word	0x40010000
 80083b0:	40000400 	.word	0x40000400
 80083b4:	40000800 	.word	0x40000800
 80083b8:	40000c00 	.word	0x40000c00
 80083bc:	40010400 	.word	0x40010400
 80083c0:	40014000 	.word	0x40014000
 80083c4:	40014400 	.word	0x40014400
 80083c8:	40014800 	.word	0x40014800
 80083cc:	40001800 	.word	0x40001800
 80083d0:	40001c00 	.word	0x40001c00
 80083d4:	40002000 	.word	0x40002000

080083d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d101      	bne.n	8008412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e03f      	b.n	8008492 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b00      	cmp	r3, #0
 800841c:	d106      	bne.n	800842c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f7f9 ff14 	bl	8002254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2224      	movs	r2, #36	; 0x24
 8008430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68da      	ldr	r2, [r3, #12]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008442:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fddb 	bl	8009000 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	691a      	ldr	r2, [r3, #16]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008458:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	695a      	ldr	r2, [r3, #20]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008468:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68da      	ldr	r2, [r3, #12]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008478:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2220      	movs	r2, #32
 8008484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2220      	movs	r2, #32
 800848c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3708      	adds	r7, #8
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b08a      	sub	sp, #40	; 0x28
 800849e:	af02      	add	r7, sp, #8
 80084a0:	60f8      	str	r0, [r7, #12]
 80084a2:	60b9      	str	r1, [r7, #8]
 80084a4:	603b      	str	r3, [r7, #0]
 80084a6:	4613      	mov	r3, r2
 80084a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80084aa:	2300      	movs	r3, #0
 80084ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	2b20      	cmp	r3, #32
 80084b8:	d17c      	bne.n	80085b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d002      	beq.n	80084c6 <HAL_UART_Transmit+0x2c>
 80084c0:	88fb      	ldrh	r3, [r7, #6]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d101      	bne.n	80084ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e075      	b.n	80085b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d101      	bne.n	80084d8 <HAL_UART_Transmit+0x3e>
 80084d4:	2302      	movs	r3, #2
 80084d6:	e06e      	b.n	80085b6 <HAL_UART_Transmit+0x11c>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2200      	movs	r2, #0
 80084e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2221      	movs	r2, #33	; 0x21
 80084ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084ee:	f7fb fe29 	bl	8004144 <HAL_GetTick>
 80084f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	88fa      	ldrh	r2, [r7, #6]
 80084f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	88fa      	ldrh	r2, [r7, #6]
 80084fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008508:	d108      	bne.n	800851c <HAL_UART_Transmit+0x82>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d104      	bne.n	800851c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008512:	2300      	movs	r3, #0
 8008514:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	61bb      	str	r3, [r7, #24]
 800851a:	e003      	b.n	8008524 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008520:	2300      	movs	r3, #0
 8008522:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800852c:	e02a      	b.n	8008584 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	2200      	movs	r2, #0
 8008536:	2180      	movs	r1, #128	; 0x80
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f000 fb1f 	bl	8008b7c <UART_WaitOnFlagUntilTimeout>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008544:	2303      	movs	r3, #3
 8008546:	e036      	b.n	80085b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10b      	bne.n	8008566 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	881b      	ldrh	r3, [r3, #0]
 8008552:	461a      	mov	r2, r3
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800855c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	3302      	adds	r3, #2
 8008562:	61bb      	str	r3, [r7, #24]
 8008564:	e007      	b.n	8008576 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	781a      	ldrb	r2, [r3, #0]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	3301      	adds	r3, #1
 8008574:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800857a:	b29b      	uxth	r3, r3
 800857c:	3b01      	subs	r3, #1
 800857e:	b29a      	uxth	r2, r3
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008588:	b29b      	uxth	r3, r3
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1cf      	bne.n	800852e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	2200      	movs	r2, #0
 8008596:	2140      	movs	r1, #64	; 0x40
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f000 faef 	bl	8008b7c <UART_WaitOnFlagUntilTimeout>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d001      	beq.n	80085a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80085a4:	2303      	movs	r3, #3
 80085a6:	e006      	b.n	80085b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2220      	movs	r2, #32
 80085ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	e000      	b.n	80085b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80085b4:	2302      	movs	r3, #2
  }
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3720      	adds	r7, #32
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b084      	sub	sp, #16
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	60f8      	str	r0, [r7, #12]
 80085c6:	60b9      	str	r1, [r7, #8]
 80085c8:	4613      	mov	r3, r2
 80085ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	2b20      	cmp	r3, #32
 80085d6:	d11d      	bne.n	8008614 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d002      	beq.n	80085e4 <HAL_UART_Receive_IT+0x26>
 80085de:	88fb      	ldrh	r3, [r7, #6]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d101      	bne.n	80085e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	e016      	b.n	8008616 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d101      	bne.n	80085f6 <HAL_UART_Receive_IT+0x38>
 80085f2:	2302      	movs	r3, #2
 80085f4:	e00f      	b.n	8008616 <HAL_UART_Receive_IT+0x58>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008604:	88fb      	ldrh	r3, [r7, #6]
 8008606:	461a      	mov	r2, r3
 8008608:	68b9      	ldr	r1, [r7, #8]
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f000 fb24 	bl	8008c58 <UART_Start_Receive_IT>
 8008610:	4603      	mov	r3, r0
 8008612:	e000      	b.n	8008616 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008614:	2302      	movs	r3, #2
  }
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
	...

08008620 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b0ba      	sub	sp, #232	; 0xe8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	695b      	ldr	r3, [r3, #20]
 8008642:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008646:	2300      	movs	r3, #0
 8008648:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800864c:	2300      	movs	r3, #0
 800864e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008656:	f003 030f 	and.w	r3, r3, #15
 800865a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800865e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10f      	bne.n	8008686 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800866a:	f003 0320 	and.w	r3, r3, #32
 800866e:	2b00      	cmp	r3, #0
 8008670:	d009      	beq.n	8008686 <HAL_UART_IRQHandler+0x66>
 8008672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008676:	f003 0320 	and.w	r3, r3, #32
 800867a:	2b00      	cmp	r3, #0
 800867c:	d003      	beq.n	8008686 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fc03 	bl	8008e8a <UART_Receive_IT>
      return;
 8008684:	e256      	b.n	8008b34 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008686:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800868a:	2b00      	cmp	r3, #0
 800868c:	f000 80de 	beq.w	800884c <HAL_UART_IRQHandler+0x22c>
 8008690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008694:	f003 0301 	and.w	r3, r3, #1
 8008698:	2b00      	cmp	r3, #0
 800869a:	d106      	bne.n	80086aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800869c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 80d1 	beq.w	800884c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80086aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ae:	f003 0301 	and.w	r3, r3, #1
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00b      	beq.n	80086ce <HAL_UART_IRQHandler+0xae>
 80086b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d005      	beq.n	80086ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c6:	f043 0201 	orr.w	r2, r3, #1
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086d2:	f003 0304 	and.w	r3, r3, #4
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00b      	beq.n	80086f2 <HAL_UART_IRQHandler+0xd2>
 80086da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086de:	f003 0301 	and.w	r3, r3, #1
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d005      	beq.n	80086f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ea:	f043 0202 	orr.w	r2, r3, #2
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086f6:	f003 0302 	and.w	r3, r3, #2
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00b      	beq.n	8008716 <HAL_UART_IRQHandler+0xf6>
 80086fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008702:	f003 0301 	and.w	r3, r3, #1
 8008706:	2b00      	cmp	r3, #0
 8008708:	d005      	beq.n	8008716 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870e:	f043 0204 	orr.w	r2, r3, #4
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800871a:	f003 0308 	and.w	r3, r3, #8
 800871e:	2b00      	cmp	r3, #0
 8008720:	d011      	beq.n	8008746 <HAL_UART_IRQHandler+0x126>
 8008722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008726:	f003 0320 	and.w	r3, r3, #32
 800872a:	2b00      	cmp	r3, #0
 800872c:	d105      	bne.n	800873a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800872e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008732:	f003 0301 	and.w	r3, r3, #1
 8008736:	2b00      	cmp	r3, #0
 8008738:	d005      	beq.n	8008746 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873e:	f043 0208 	orr.w	r2, r3, #8
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874a:	2b00      	cmp	r3, #0
 800874c:	f000 81ed 	beq.w	8008b2a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008754:	f003 0320 	and.w	r3, r3, #32
 8008758:	2b00      	cmp	r3, #0
 800875a:	d008      	beq.n	800876e <HAL_UART_IRQHandler+0x14e>
 800875c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008760:	f003 0320 	and.w	r3, r3, #32
 8008764:	2b00      	cmp	r3, #0
 8008766:	d002      	beq.n	800876e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fb8e 	bl	8008e8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	695b      	ldr	r3, [r3, #20]
 8008774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008778:	2b40      	cmp	r3, #64	; 0x40
 800877a:	bf0c      	ite	eq
 800877c:	2301      	moveq	r3, #1
 800877e:	2300      	movne	r3, #0
 8008780:	b2db      	uxtb	r3, r3
 8008782:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878a:	f003 0308 	and.w	r3, r3, #8
 800878e:	2b00      	cmp	r3, #0
 8008790:	d103      	bne.n	800879a <HAL_UART_IRQHandler+0x17a>
 8008792:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008796:	2b00      	cmp	r3, #0
 8008798:	d04f      	beq.n	800883a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fa96 	bl	8008ccc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087aa:	2b40      	cmp	r3, #64	; 0x40
 80087ac:	d141      	bne.n	8008832 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	3314      	adds	r3, #20
 80087b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087bc:	e853 3f00 	ldrex	r3, [r3]
 80087c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80087c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3314      	adds	r3, #20
 80087d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80087da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80087de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80087e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80087ea:	e841 2300 	strex	r3, r2, [r1]
 80087ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80087f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1d9      	bne.n	80087ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d013      	beq.n	800882a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008806:	4a7d      	ldr	r2, [pc, #500]	; (80089fc <HAL_UART_IRQHandler+0x3dc>)
 8008808:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880e:	4618      	mov	r0, r3
 8008810:	f7fb fe1a 	bl	8004448 <HAL_DMA_Abort_IT>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d016      	beq.n	8008848 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008824:	4610      	mov	r0, r2
 8008826:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008828:	e00e      	b.n	8008848 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f990 	bl	8008b50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008830:	e00a      	b.n	8008848 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 f98c 	bl	8008b50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008838:	e006      	b.n	8008848 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f988 	bl	8008b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008846:	e170      	b.n	8008b2a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008848:	bf00      	nop
    return;
 800884a:	e16e      	b.n	8008b2a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008850:	2b01      	cmp	r3, #1
 8008852:	f040 814a 	bne.w	8008aea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800885a:	f003 0310 	and.w	r3, r3, #16
 800885e:	2b00      	cmp	r3, #0
 8008860:	f000 8143 	beq.w	8008aea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008868:	f003 0310 	and.w	r3, r3, #16
 800886c:	2b00      	cmp	r3, #0
 800886e:	f000 813c 	beq.w	8008aea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008872:	2300      	movs	r3, #0
 8008874:	60bb      	str	r3, [r7, #8]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	60bb      	str	r3, [r7, #8]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	60bb      	str	r3, [r7, #8]
 8008886:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	695b      	ldr	r3, [r3, #20]
 800888e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008892:	2b40      	cmp	r3, #64	; 0x40
 8008894:	f040 80b4 	bne.w	8008a00 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80088a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f000 8140 	beq.w	8008b2e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088b6:	429a      	cmp	r2, r3
 80088b8:	f080 8139 	bcs.w	8008b2e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c8:	69db      	ldr	r3, [r3, #28]
 80088ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088ce:	f000 8088 	beq.w	80089e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	330c      	adds	r3, #12
 80088d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088e0:	e853 3f00 	ldrex	r3, [r3]
 80088e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80088e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	330c      	adds	r3, #12
 80088fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80088fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008902:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008906:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800890a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800890e:	e841 2300 	strex	r3, r2, [r1]
 8008912:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008916:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1d9      	bne.n	80088d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	3314      	adds	r3, #20
 8008924:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008926:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008928:	e853 3f00 	ldrex	r3, [r3]
 800892c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800892e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008930:	f023 0301 	bic.w	r3, r3, #1
 8008934:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	3314      	adds	r3, #20
 800893e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008942:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008946:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008948:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800894a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800894e:	e841 2300 	strex	r3, r2, [r1]
 8008952:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008954:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1e1      	bne.n	800891e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	3314      	adds	r3, #20
 8008960:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008962:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008964:	e853 3f00 	ldrex	r3, [r3]
 8008968:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800896a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800896c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008970:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	3314      	adds	r3, #20
 800897a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800897e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008980:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008982:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008984:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008986:	e841 2300 	strex	r3, r2, [r1]
 800898a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800898c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1e3      	bne.n	800895a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2220      	movs	r2, #32
 8008996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	330c      	adds	r3, #12
 80089a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089aa:	e853 3f00 	ldrex	r3, [r3]
 80089ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80089b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089b2:	f023 0310 	bic.w	r3, r3, #16
 80089b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	330c      	adds	r3, #12
 80089c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80089c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80089c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089cc:	e841 2300 	strex	r3, r2, [r1]
 80089d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80089d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d1e3      	bne.n	80089a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089dc:	4618      	mov	r0, r3
 80089de:	f7fb fcc3 	bl	8004368 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	4619      	mov	r1, r3
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f8b6 	bl	8008b64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80089f8:	e099      	b.n	8008b2e <HAL_UART_IRQHandler+0x50e>
 80089fa:	bf00      	nop
 80089fc:	08008d93 	.word	0x08008d93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	1ad3      	subs	r3, r2, r3
 8008a0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f000 808b 	beq.w	8008b32 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008a1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f000 8086 	beq.w	8008b32 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	330c      	adds	r3, #12
 8008a2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a30:	e853 3f00 	ldrex	r3, [r3]
 8008a34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	330c      	adds	r3, #12
 8008a46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008a4a:	647a      	str	r2, [r7, #68]	; 0x44
 8008a4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a52:	e841 2300 	strex	r3, r2, [r1]
 8008a56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1e3      	bne.n	8008a26 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	3314      	adds	r3, #20
 8008a64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a68:	e853 3f00 	ldrex	r3, [r3]
 8008a6c:	623b      	str	r3, [r7, #32]
   return(result);
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	f023 0301 	bic.w	r3, r3, #1
 8008a74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	3314      	adds	r3, #20
 8008a7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a82:	633a      	str	r2, [r7, #48]	; 0x30
 8008a84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a8a:	e841 2300 	strex	r3, r2, [r1]
 8008a8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1e3      	bne.n	8008a5e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2220      	movs	r2, #32
 8008a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	330c      	adds	r3, #12
 8008aaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	e853 3f00 	ldrex	r3, [r3]
 8008ab2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f023 0310 	bic.w	r3, r3, #16
 8008aba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	330c      	adds	r3, #12
 8008ac4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008ac8:	61fa      	str	r2, [r7, #28]
 8008aca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008acc:	69b9      	ldr	r1, [r7, #24]
 8008ace:	69fa      	ldr	r2, [r7, #28]
 8008ad0:	e841 2300 	strex	r3, r2, [r1]
 8008ad4:	617b      	str	r3, [r7, #20]
   return(result);
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1e3      	bne.n	8008aa4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008adc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 f83e 	bl	8008b64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ae8:	e023      	b.n	8008b32 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d009      	beq.n	8008b0a <HAL_UART_IRQHandler+0x4ea>
 8008af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d003      	beq.n	8008b0a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f959 	bl	8008dba <UART_Transmit_IT>
    return;
 8008b08:	e014      	b.n	8008b34 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00e      	beq.n	8008b34 <HAL_UART_IRQHandler+0x514>
 8008b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d008      	beq.n	8008b34 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f999 	bl	8008e5a <UART_EndTransmit_IT>
    return;
 8008b28:	e004      	b.n	8008b34 <HAL_UART_IRQHandler+0x514>
    return;
 8008b2a:	bf00      	nop
 8008b2c:	e002      	b.n	8008b34 <HAL_UART_IRQHandler+0x514>
      return;
 8008b2e:	bf00      	nop
 8008b30:	e000      	b.n	8008b34 <HAL_UART_IRQHandler+0x514>
      return;
 8008b32:	bf00      	nop
  }
}
 8008b34:	37e8      	adds	r7, #232	; 0xe8
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop

08008b3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b58:	bf00      	nop
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b090      	sub	sp, #64	; 0x40
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	603b      	str	r3, [r7, #0]
 8008b88:	4613      	mov	r3, r2
 8008b8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b8c:	e050      	b.n	8008c30 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b94:	d04c      	beq.n	8008c30 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d007      	beq.n	8008bac <UART_WaitOnFlagUntilTimeout+0x30>
 8008b9c:	f7fb fad2 	bl	8004144 <HAL_GetTick>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d241      	bcs.n	8008c30 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	330c      	adds	r3, #12
 8008bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb6:	e853 3f00 	ldrex	r3, [r3]
 8008bba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	330c      	adds	r3, #12
 8008bca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008bcc:	637a      	str	r2, [r7, #52]	; 0x34
 8008bce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bd4:	e841 2300 	strex	r3, r2, [r1]
 8008bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1e5      	bne.n	8008bac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	3314      	adds	r3, #20
 8008be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	e853 3f00 	ldrex	r3, [r3]
 8008bee:	613b      	str	r3, [r7, #16]
   return(result);
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	f023 0301 	bic.w	r3, r3, #1
 8008bf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	3314      	adds	r3, #20
 8008bfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c00:	623a      	str	r2, [r7, #32]
 8008c02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c04:	69f9      	ldr	r1, [r7, #28]
 8008c06:	6a3a      	ldr	r2, [r7, #32]
 8008c08:	e841 2300 	strex	r3, r2, [r1]
 8008c0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1e5      	bne.n	8008be0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2220      	movs	r2, #32
 8008c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2220      	movs	r2, #32
 8008c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	e00f      	b.n	8008c50 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	4013      	ands	r3, r2
 8008c3a:	68ba      	ldr	r2, [r7, #8]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	bf0c      	ite	eq
 8008c40:	2301      	moveq	r3, #1
 8008c42:	2300      	movne	r3, #0
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	461a      	mov	r2, r3
 8008c48:	79fb      	ldrb	r3, [r7, #7]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d09f      	beq.n	8008b8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3740      	adds	r7, #64	; 0x40
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	4613      	mov	r3, r2
 8008c64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	68ba      	ldr	r2, [r7, #8]
 8008c6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	88fa      	ldrh	r2, [r7, #6]
 8008c70:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	88fa      	ldrh	r2, [r7, #6]
 8008c76:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2222      	movs	r2, #34	; 0x22
 8008c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	68da      	ldr	r2, [r3, #12]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c9c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	695a      	ldr	r2, [r3, #20]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f042 0201 	orr.w	r2, r2, #1
 8008cac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	68da      	ldr	r2, [r3, #12]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f042 0220 	orr.w	r2, r2, #32
 8008cbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3714      	adds	r7, #20
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b095      	sub	sp, #84	; 0x54
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	330c      	adds	r3, #12
 8008cda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cde:	e853 3f00 	ldrex	r3, [r3]
 8008ce2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	330c      	adds	r3, #12
 8008cf2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008cf4:	643a      	str	r2, [r7, #64]	; 0x40
 8008cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008cfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008cfc:	e841 2300 	strex	r3, r2, [r1]
 8008d00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1e5      	bne.n	8008cd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	3314      	adds	r3, #20
 8008d0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d10:	6a3b      	ldr	r3, [r7, #32]
 8008d12:	e853 3f00 	ldrex	r3, [r3]
 8008d16:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	f023 0301 	bic.w	r3, r3, #1
 8008d1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	3314      	adds	r3, #20
 8008d26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d30:	e841 2300 	strex	r3, r2, [r1]
 8008d34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d1e5      	bne.n	8008d08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d119      	bne.n	8008d78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	330c      	adds	r3, #12
 8008d4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	e853 3f00 	ldrex	r3, [r3]
 8008d52:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	f023 0310 	bic.w	r3, r3, #16
 8008d5a:	647b      	str	r3, [r7, #68]	; 0x44
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	330c      	adds	r3, #12
 8008d62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d64:	61ba      	str	r2, [r7, #24]
 8008d66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d68:	6979      	ldr	r1, [r7, #20]
 8008d6a:	69ba      	ldr	r2, [r7, #24]
 8008d6c:	e841 2300 	strex	r3, r2, [r1]
 8008d70:	613b      	str	r3, [r7, #16]
   return(result);
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d1e5      	bne.n	8008d44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2220      	movs	r2, #32
 8008d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008d86:	bf00      	nop
 8008d88:	3754      	adds	r7, #84	; 0x54
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr

08008d92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b084      	sub	sp, #16
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2200      	movs	r2, #0
 8008da4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f7ff fecf 	bl	8008b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008db2:	bf00      	nop
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b085      	sub	sp, #20
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	2b21      	cmp	r3, #33	; 0x21
 8008dcc:	d13e      	bne.n	8008e4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dd6:	d114      	bne.n	8008e02 <UART_Transmit_IT+0x48>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d110      	bne.n	8008e02 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a1b      	ldr	r3, [r3, #32]
 8008de4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	881b      	ldrh	r3, [r3, #0]
 8008dea:	461a      	mov	r2, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008df4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a1b      	ldr	r3, [r3, #32]
 8008dfa:	1c9a      	adds	r2, r3, #2
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	621a      	str	r2, [r3, #32]
 8008e00:	e008      	b.n	8008e14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a1b      	ldr	r3, [r3, #32]
 8008e06:	1c59      	adds	r1, r3, #1
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	6211      	str	r1, [r2, #32]
 8008e0c:	781a      	ldrb	r2, [r3, #0]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	4619      	mov	r1, r3
 8008e22:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10f      	bne.n	8008e48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68da      	ldr	r2, [r3, #12]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68da      	ldr	r2, [r3, #12]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	e000      	b.n	8008e4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008e4c:	2302      	movs	r3, #2
  }
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3714      	adds	r7, #20
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr

08008e5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b082      	sub	sp, #8
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	68da      	ldr	r2, [r3, #12]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2220      	movs	r2, #32
 8008e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f7ff fe5e 	bl	8008b3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b08c      	sub	sp, #48	; 0x30
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	2b22      	cmp	r3, #34	; 0x22
 8008e9c:	f040 80ab 	bne.w	8008ff6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ea8:	d117      	bne.n	8008eda <UART_Receive_IT+0x50>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d113      	bne.n	8008eda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ecc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed2:	1c9a      	adds	r2, r3, #2
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	629a      	str	r2, [r3, #40]	; 0x28
 8008ed8:	e026      	b.n	8008f28 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ede:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eec:	d007      	beq.n	8008efe <UART_Receive_IT+0x74>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d10a      	bne.n	8008f0c <UART_Receive_IT+0x82>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d106      	bne.n	8008f0c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	b2da      	uxtb	r2, r3
 8008f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f08:	701a      	strb	r2, [r3, #0]
 8008f0a:	e008      	b.n	8008f1e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f18:	b2da      	uxtb	r2, r3
 8008f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f22:	1c5a      	adds	r2, r3, #1
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	4619      	mov	r1, r3
 8008f36:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d15a      	bne.n	8008ff2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68da      	ldr	r2, [r3, #12]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f022 0220 	bic.w	r2, r2, #32
 8008f4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68da      	ldr	r2, [r3, #12]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	695a      	ldr	r2, [r3, #20]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f022 0201 	bic.w	r2, r2, #1
 8008f6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2220      	movs	r2, #32
 8008f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d135      	bne.n	8008fe8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	330c      	adds	r3, #12
 8008f88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	e853 3f00 	ldrex	r3, [r3]
 8008f90:	613b      	str	r3, [r7, #16]
   return(result);
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	f023 0310 	bic.w	r3, r3, #16
 8008f98:	627b      	str	r3, [r7, #36]	; 0x24
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	330c      	adds	r3, #12
 8008fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fa2:	623a      	str	r2, [r7, #32]
 8008fa4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa6:	69f9      	ldr	r1, [r7, #28]
 8008fa8:	6a3a      	ldr	r2, [r7, #32]
 8008faa:	e841 2300 	strex	r3, r2, [r1]
 8008fae:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1e5      	bne.n	8008f82 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 0310 	and.w	r3, r3, #16
 8008fc0:	2b10      	cmp	r3, #16
 8008fc2:	d10a      	bne.n	8008fda <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	60fb      	str	r3, [r7, #12]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	60fb      	str	r3, [r7, #12]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	60fb      	str	r3, [r7, #12]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008fde:	4619      	mov	r1, r3
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f7ff fdbf 	bl	8008b64 <HAL_UARTEx_RxEventCallback>
 8008fe6:	e002      	b.n	8008fee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f7f8 f91f 	bl	800122c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	e002      	b.n	8008ff8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	e000      	b.n	8008ff8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008ff6:	2302      	movs	r3, #2
  }
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3730      	adds	r7, #48	; 0x30
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009004:	b09f      	sub	sp, #124	; 0x7c
 8009006:	af00      	add	r7, sp, #0
 8009008:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800900a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009016:	68d9      	ldr	r1, [r3, #12]
 8009018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	ea40 0301 	orr.w	r3, r0, r1
 8009020:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009024:	689a      	ldr	r2, [r3, #8]
 8009026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	431a      	orrs	r2, r3
 800902c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800902e:	695b      	ldr	r3, [r3, #20]
 8009030:	431a      	orrs	r2, r3
 8009032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009034:	69db      	ldr	r3, [r3, #28]
 8009036:	4313      	orrs	r3, r2
 8009038:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800903a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009044:	f021 010c 	bic.w	r1, r1, #12
 8009048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800904e:	430b      	orrs	r3, r1
 8009050:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	695b      	ldr	r3, [r3, #20]
 8009058:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800905c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800905e:	6999      	ldr	r1, [r3, #24]
 8009060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	ea40 0301 	orr.w	r3, r0, r1
 8009068:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800906a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	4bc5      	ldr	r3, [pc, #788]	; (8009384 <UART_SetConfig+0x384>)
 8009070:	429a      	cmp	r2, r3
 8009072:	d004      	beq.n	800907e <UART_SetConfig+0x7e>
 8009074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	4bc3      	ldr	r3, [pc, #780]	; (8009388 <UART_SetConfig+0x388>)
 800907a:	429a      	cmp	r2, r3
 800907c:	d103      	bne.n	8009086 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800907e:	f7fd ff2f 	bl	8006ee0 <HAL_RCC_GetPCLK2Freq>
 8009082:	6778      	str	r0, [r7, #116]	; 0x74
 8009084:	e002      	b.n	800908c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009086:	f7fd ff17 	bl	8006eb8 <HAL_RCC_GetPCLK1Freq>
 800908a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800908c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800908e:	69db      	ldr	r3, [r3, #28]
 8009090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009094:	f040 80b6 	bne.w	8009204 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009098:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800909a:	461c      	mov	r4, r3
 800909c:	f04f 0500 	mov.w	r5, #0
 80090a0:	4622      	mov	r2, r4
 80090a2:	462b      	mov	r3, r5
 80090a4:	1891      	adds	r1, r2, r2
 80090a6:	6439      	str	r1, [r7, #64]	; 0x40
 80090a8:	415b      	adcs	r3, r3
 80090aa:	647b      	str	r3, [r7, #68]	; 0x44
 80090ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80090b0:	1912      	adds	r2, r2, r4
 80090b2:	eb45 0303 	adc.w	r3, r5, r3
 80090b6:	f04f 0000 	mov.w	r0, #0
 80090ba:	f04f 0100 	mov.w	r1, #0
 80090be:	00d9      	lsls	r1, r3, #3
 80090c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80090c4:	00d0      	lsls	r0, r2, #3
 80090c6:	4602      	mov	r2, r0
 80090c8:	460b      	mov	r3, r1
 80090ca:	1911      	adds	r1, r2, r4
 80090cc:	6639      	str	r1, [r7, #96]	; 0x60
 80090ce:	416b      	adcs	r3, r5
 80090d0:	667b      	str	r3, [r7, #100]	; 0x64
 80090d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	461a      	mov	r2, r3
 80090d8:	f04f 0300 	mov.w	r3, #0
 80090dc:	1891      	adds	r1, r2, r2
 80090de:	63b9      	str	r1, [r7, #56]	; 0x38
 80090e0:	415b      	adcs	r3, r3
 80090e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80090e8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80090ec:	f7f7 f8d8 	bl	80002a0 <__aeabi_uldivmod>
 80090f0:	4602      	mov	r2, r0
 80090f2:	460b      	mov	r3, r1
 80090f4:	4ba5      	ldr	r3, [pc, #660]	; (800938c <UART_SetConfig+0x38c>)
 80090f6:	fba3 2302 	umull	r2, r3, r3, r2
 80090fa:	095b      	lsrs	r3, r3, #5
 80090fc:	011e      	lsls	r6, r3, #4
 80090fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009100:	461c      	mov	r4, r3
 8009102:	f04f 0500 	mov.w	r5, #0
 8009106:	4622      	mov	r2, r4
 8009108:	462b      	mov	r3, r5
 800910a:	1891      	adds	r1, r2, r2
 800910c:	6339      	str	r1, [r7, #48]	; 0x30
 800910e:	415b      	adcs	r3, r3
 8009110:	637b      	str	r3, [r7, #52]	; 0x34
 8009112:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009116:	1912      	adds	r2, r2, r4
 8009118:	eb45 0303 	adc.w	r3, r5, r3
 800911c:	f04f 0000 	mov.w	r0, #0
 8009120:	f04f 0100 	mov.w	r1, #0
 8009124:	00d9      	lsls	r1, r3, #3
 8009126:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800912a:	00d0      	lsls	r0, r2, #3
 800912c:	4602      	mov	r2, r0
 800912e:	460b      	mov	r3, r1
 8009130:	1911      	adds	r1, r2, r4
 8009132:	65b9      	str	r1, [r7, #88]	; 0x58
 8009134:	416b      	adcs	r3, r5
 8009136:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	461a      	mov	r2, r3
 800913e:	f04f 0300 	mov.w	r3, #0
 8009142:	1891      	adds	r1, r2, r2
 8009144:	62b9      	str	r1, [r7, #40]	; 0x28
 8009146:	415b      	adcs	r3, r3
 8009148:	62fb      	str	r3, [r7, #44]	; 0x2c
 800914a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800914e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009152:	f7f7 f8a5 	bl	80002a0 <__aeabi_uldivmod>
 8009156:	4602      	mov	r2, r0
 8009158:	460b      	mov	r3, r1
 800915a:	4b8c      	ldr	r3, [pc, #560]	; (800938c <UART_SetConfig+0x38c>)
 800915c:	fba3 1302 	umull	r1, r3, r3, r2
 8009160:	095b      	lsrs	r3, r3, #5
 8009162:	2164      	movs	r1, #100	; 0x64
 8009164:	fb01 f303 	mul.w	r3, r1, r3
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	00db      	lsls	r3, r3, #3
 800916c:	3332      	adds	r3, #50	; 0x32
 800916e:	4a87      	ldr	r2, [pc, #540]	; (800938c <UART_SetConfig+0x38c>)
 8009170:	fba2 2303 	umull	r2, r3, r2, r3
 8009174:	095b      	lsrs	r3, r3, #5
 8009176:	005b      	lsls	r3, r3, #1
 8009178:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800917c:	441e      	add	r6, r3
 800917e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009180:	4618      	mov	r0, r3
 8009182:	f04f 0100 	mov.w	r1, #0
 8009186:	4602      	mov	r2, r0
 8009188:	460b      	mov	r3, r1
 800918a:	1894      	adds	r4, r2, r2
 800918c:	623c      	str	r4, [r7, #32]
 800918e:	415b      	adcs	r3, r3
 8009190:	627b      	str	r3, [r7, #36]	; 0x24
 8009192:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009196:	1812      	adds	r2, r2, r0
 8009198:	eb41 0303 	adc.w	r3, r1, r3
 800919c:	f04f 0400 	mov.w	r4, #0
 80091a0:	f04f 0500 	mov.w	r5, #0
 80091a4:	00dd      	lsls	r5, r3, #3
 80091a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80091aa:	00d4      	lsls	r4, r2, #3
 80091ac:	4622      	mov	r2, r4
 80091ae:	462b      	mov	r3, r5
 80091b0:	1814      	adds	r4, r2, r0
 80091b2:	653c      	str	r4, [r7, #80]	; 0x50
 80091b4:	414b      	adcs	r3, r1
 80091b6:	657b      	str	r3, [r7, #84]	; 0x54
 80091b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	461a      	mov	r2, r3
 80091be:	f04f 0300 	mov.w	r3, #0
 80091c2:	1891      	adds	r1, r2, r2
 80091c4:	61b9      	str	r1, [r7, #24]
 80091c6:	415b      	adcs	r3, r3
 80091c8:	61fb      	str	r3, [r7, #28]
 80091ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80091ce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80091d2:	f7f7 f865 	bl	80002a0 <__aeabi_uldivmod>
 80091d6:	4602      	mov	r2, r0
 80091d8:	460b      	mov	r3, r1
 80091da:	4b6c      	ldr	r3, [pc, #432]	; (800938c <UART_SetConfig+0x38c>)
 80091dc:	fba3 1302 	umull	r1, r3, r3, r2
 80091e0:	095b      	lsrs	r3, r3, #5
 80091e2:	2164      	movs	r1, #100	; 0x64
 80091e4:	fb01 f303 	mul.w	r3, r1, r3
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	00db      	lsls	r3, r3, #3
 80091ec:	3332      	adds	r3, #50	; 0x32
 80091ee:	4a67      	ldr	r2, [pc, #412]	; (800938c <UART_SetConfig+0x38c>)
 80091f0:	fba2 2303 	umull	r2, r3, r2, r3
 80091f4:	095b      	lsrs	r3, r3, #5
 80091f6:	f003 0207 	and.w	r2, r3, #7
 80091fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4432      	add	r2, r6
 8009200:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009202:	e0b9      	b.n	8009378 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009204:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009206:	461c      	mov	r4, r3
 8009208:	f04f 0500 	mov.w	r5, #0
 800920c:	4622      	mov	r2, r4
 800920e:	462b      	mov	r3, r5
 8009210:	1891      	adds	r1, r2, r2
 8009212:	6139      	str	r1, [r7, #16]
 8009214:	415b      	adcs	r3, r3
 8009216:	617b      	str	r3, [r7, #20]
 8009218:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800921c:	1912      	adds	r2, r2, r4
 800921e:	eb45 0303 	adc.w	r3, r5, r3
 8009222:	f04f 0000 	mov.w	r0, #0
 8009226:	f04f 0100 	mov.w	r1, #0
 800922a:	00d9      	lsls	r1, r3, #3
 800922c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009230:	00d0      	lsls	r0, r2, #3
 8009232:	4602      	mov	r2, r0
 8009234:	460b      	mov	r3, r1
 8009236:	eb12 0804 	adds.w	r8, r2, r4
 800923a:	eb43 0905 	adc.w	r9, r3, r5
 800923e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	4618      	mov	r0, r3
 8009244:	f04f 0100 	mov.w	r1, #0
 8009248:	f04f 0200 	mov.w	r2, #0
 800924c:	f04f 0300 	mov.w	r3, #0
 8009250:	008b      	lsls	r3, r1, #2
 8009252:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009256:	0082      	lsls	r2, r0, #2
 8009258:	4640      	mov	r0, r8
 800925a:	4649      	mov	r1, r9
 800925c:	f7f7 f820 	bl	80002a0 <__aeabi_uldivmod>
 8009260:	4602      	mov	r2, r0
 8009262:	460b      	mov	r3, r1
 8009264:	4b49      	ldr	r3, [pc, #292]	; (800938c <UART_SetConfig+0x38c>)
 8009266:	fba3 2302 	umull	r2, r3, r3, r2
 800926a:	095b      	lsrs	r3, r3, #5
 800926c:	011e      	lsls	r6, r3, #4
 800926e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009270:	4618      	mov	r0, r3
 8009272:	f04f 0100 	mov.w	r1, #0
 8009276:	4602      	mov	r2, r0
 8009278:	460b      	mov	r3, r1
 800927a:	1894      	adds	r4, r2, r2
 800927c:	60bc      	str	r4, [r7, #8]
 800927e:	415b      	adcs	r3, r3
 8009280:	60fb      	str	r3, [r7, #12]
 8009282:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009286:	1812      	adds	r2, r2, r0
 8009288:	eb41 0303 	adc.w	r3, r1, r3
 800928c:	f04f 0400 	mov.w	r4, #0
 8009290:	f04f 0500 	mov.w	r5, #0
 8009294:	00dd      	lsls	r5, r3, #3
 8009296:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800929a:	00d4      	lsls	r4, r2, #3
 800929c:	4622      	mov	r2, r4
 800929e:	462b      	mov	r3, r5
 80092a0:	1814      	adds	r4, r2, r0
 80092a2:	64bc      	str	r4, [r7, #72]	; 0x48
 80092a4:	414b      	adcs	r3, r1
 80092a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	4618      	mov	r0, r3
 80092ae:	f04f 0100 	mov.w	r1, #0
 80092b2:	f04f 0200 	mov.w	r2, #0
 80092b6:	f04f 0300 	mov.w	r3, #0
 80092ba:	008b      	lsls	r3, r1, #2
 80092bc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80092c0:	0082      	lsls	r2, r0, #2
 80092c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80092c6:	f7f6 ffeb 	bl	80002a0 <__aeabi_uldivmod>
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	4b2f      	ldr	r3, [pc, #188]	; (800938c <UART_SetConfig+0x38c>)
 80092d0:	fba3 1302 	umull	r1, r3, r3, r2
 80092d4:	095b      	lsrs	r3, r3, #5
 80092d6:	2164      	movs	r1, #100	; 0x64
 80092d8:	fb01 f303 	mul.w	r3, r1, r3
 80092dc:	1ad3      	subs	r3, r2, r3
 80092de:	011b      	lsls	r3, r3, #4
 80092e0:	3332      	adds	r3, #50	; 0x32
 80092e2:	4a2a      	ldr	r2, [pc, #168]	; (800938c <UART_SetConfig+0x38c>)
 80092e4:	fba2 2303 	umull	r2, r3, r2, r3
 80092e8:	095b      	lsrs	r3, r3, #5
 80092ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092ee:	441e      	add	r6, r3
 80092f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092f2:	4618      	mov	r0, r3
 80092f4:	f04f 0100 	mov.w	r1, #0
 80092f8:	4602      	mov	r2, r0
 80092fa:	460b      	mov	r3, r1
 80092fc:	1894      	adds	r4, r2, r2
 80092fe:	603c      	str	r4, [r7, #0]
 8009300:	415b      	adcs	r3, r3
 8009302:	607b      	str	r3, [r7, #4]
 8009304:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009308:	1812      	adds	r2, r2, r0
 800930a:	eb41 0303 	adc.w	r3, r1, r3
 800930e:	f04f 0400 	mov.w	r4, #0
 8009312:	f04f 0500 	mov.w	r5, #0
 8009316:	00dd      	lsls	r5, r3, #3
 8009318:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800931c:	00d4      	lsls	r4, r2, #3
 800931e:	4622      	mov	r2, r4
 8009320:	462b      	mov	r3, r5
 8009322:	eb12 0a00 	adds.w	sl, r2, r0
 8009326:	eb43 0b01 	adc.w	fp, r3, r1
 800932a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	4618      	mov	r0, r3
 8009330:	f04f 0100 	mov.w	r1, #0
 8009334:	f04f 0200 	mov.w	r2, #0
 8009338:	f04f 0300 	mov.w	r3, #0
 800933c:	008b      	lsls	r3, r1, #2
 800933e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009342:	0082      	lsls	r2, r0, #2
 8009344:	4650      	mov	r0, sl
 8009346:	4659      	mov	r1, fp
 8009348:	f7f6 ffaa 	bl	80002a0 <__aeabi_uldivmod>
 800934c:	4602      	mov	r2, r0
 800934e:	460b      	mov	r3, r1
 8009350:	4b0e      	ldr	r3, [pc, #56]	; (800938c <UART_SetConfig+0x38c>)
 8009352:	fba3 1302 	umull	r1, r3, r3, r2
 8009356:	095b      	lsrs	r3, r3, #5
 8009358:	2164      	movs	r1, #100	; 0x64
 800935a:	fb01 f303 	mul.w	r3, r1, r3
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	011b      	lsls	r3, r3, #4
 8009362:	3332      	adds	r3, #50	; 0x32
 8009364:	4a09      	ldr	r2, [pc, #36]	; (800938c <UART_SetConfig+0x38c>)
 8009366:	fba2 2303 	umull	r2, r3, r2, r3
 800936a:	095b      	lsrs	r3, r3, #5
 800936c:	f003 020f 	and.w	r2, r3, #15
 8009370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4432      	add	r2, r6
 8009376:	609a      	str	r2, [r3, #8]
}
 8009378:	bf00      	nop
 800937a:	377c      	adds	r7, #124	; 0x7c
 800937c:	46bd      	mov	sp, r7
 800937e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009382:	bf00      	nop
 8009384:	40011000 	.word	0x40011000
 8009388:	40011400 	.word	0x40011400
 800938c:	51eb851f 	.word	0x51eb851f

08009390 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009390:	b480      	push	{r7}
 8009392:	b085      	sub	sp, #20
 8009394:	af00      	add	r7, sp, #0
 8009396:	4603      	mov	r3, r0
 8009398:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800939a:	2300      	movs	r3, #0
 800939c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800939e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80093a2:	2b84      	cmp	r3, #132	; 0x84
 80093a4:	d005      	beq.n	80093b2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80093a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	4413      	add	r3, r2
 80093ae:	3303      	adds	r3, #3
 80093b0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80093b2:	68fb      	ldr	r3, [r7, #12]
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3714      	adds	r7, #20
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093c6:	f3ef 8305 	mrs	r3, IPSR
 80093ca:	607b      	str	r3, [r7, #4]
  return(result);
 80093cc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	bf14      	ite	ne
 80093d2:	2301      	movne	r3, #1
 80093d4:	2300      	moveq	r3, #0
 80093d6:	b2db      	uxtb	r3, r3
}
 80093d8:	4618      	mov	r0, r3
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80093e8:	f001 f926 	bl	800a638 <vTaskStartScheduler>
  
  return osOK;
 80093ec:	2300      	movs	r3, #0
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80093f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093f4:	b089      	sub	sp, #36	; 0x24
 80093f6:	af04      	add	r7, sp, #16
 80093f8:	6078      	str	r0, [r7, #4]
 80093fa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	695b      	ldr	r3, [r3, #20]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d020      	beq.n	8009446 <osThreadCreate+0x54>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	699b      	ldr	r3, [r3, #24]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d01c      	beq.n	8009446 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685c      	ldr	r4, [r3, #4]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681d      	ldr	r5, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	691e      	ldr	r6, [r3, #16]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800941e:	4618      	mov	r0, r3
 8009420:	f7ff ffb6 	bl	8009390 <makeFreeRtosPriority>
 8009424:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	695b      	ldr	r3, [r3, #20]
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800942e:	9202      	str	r2, [sp, #8]
 8009430:	9301      	str	r3, [sp, #4]
 8009432:	9100      	str	r1, [sp, #0]
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	4632      	mov	r2, r6
 8009438:	4629      	mov	r1, r5
 800943a:	4620      	mov	r0, r4
 800943c:	f000 ff1e 	bl	800a27c <xTaskCreateStatic>
 8009440:	4603      	mov	r3, r0
 8009442:	60fb      	str	r3, [r7, #12]
 8009444:	e01c      	b.n	8009480 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	685c      	ldr	r4, [r3, #4]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009452:	b29e      	uxth	r6, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800945a:	4618      	mov	r0, r3
 800945c:	f7ff ff98 	bl	8009390 <makeFreeRtosPriority>
 8009460:	4602      	mov	r2, r0
 8009462:	f107 030c 	add.w	r3, r7, #12
 8009466:	9301      	str	r3, [sp, #4]
 8009468:	9200      	str	r2, [sp, #0]
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	4632      	mov	r2, r6
 800946e:	4629      	mov	r1, r5
 8009470:	4620      	mov	r0, r4
 8009472:	f000 ff60 	bl	800a336 <xTaskCreate>
 8009476:	4603      	mov	r3, r0
 8009478:	2b01      	cmp	r3, #1
 800947a:	d001      	beq.n	8009480 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800947c:	2300      	movs	r3, #0
 800947e:	e000      	b.n	8009482 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009480:	68fb      	ldr	r3, [r7, #12]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800948a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b084      	sub	sp, #16
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d001      	beq.n	80094a0 <osDelay+0x16>
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	e000      	b.n	80094a2 <osDelay+0x18>
 80094a0:	2301      	movs	r3, #1
 80094a2:	4618      	mov	r0, r3
 80094a4:	f001 f894 	bl	800a5d0 <vTaskDelay>
  
  return osOK;
 80094a8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b086      	sub	sp, #24
 80094b6:	af02      	add	r7, sp, #8
 80094b8:	6078      	str	r0, [r7, #4]
 80094ba:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00f      	beq.n	80094e4 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d10a      	bne.n	80094e0 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	2203      	movs	r2, #3
 80094d0:	9200      	str	r2, [sp, #0]
 80094d2:	2200      	movs	r2, #0
 80094d4:	2100      	movs	r1, #0
 80094d6:	2001      	movs	r0, #1
 80094d8:	f000 f9be 	bl	8009858 <xQueueGenericCreateStatic>
 80094dc:	4603      	mov	r3, r0
 80094de:	e016      	b.n	800950e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80094e0:	2300      	movs	r3, #0
 80094e2:	e014      	b.n	800950e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d110      	bne.n	800950c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80094ea:	2203      	movs	r2, #3
 80094ec:	2100      	movs	r1, #0
 80094ee:	2001      	movs	r0, #1
 80094f0:	f000 fa2a 	bl	8009948 <xQueueGenericCreate>
 80094f4:	60f8      	str	r0, [r7, #12]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d005      	beq.n	8009508 <osSemaphoreCreate+0x56>
 80094fc:	2300      	movs	r3, #0
 80094fe:	2200      	movs	r2, #0
 8009500:	2100      	movs	r1, #0
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f000 fa7a 	bl	80099fc <xQueueGenericSend>
      return sema;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	e000      	b.n	800950e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800950c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
	...

08009518 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009522:	2300      	movs	r3, #0
 8009524:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d101      	bne.n	8009530 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800952c:	2380      	movs	r3, #128	; 0x80
 800952e:	e03a      	b.n	80095a6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009530:	2300      	movs	r3, #0
 8009532:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800953a:	d103      	bne.n	8009544 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800953c:	f04f 33ff 	mov.w	r3, #4294967295
 8009540:	60fb      	str	r3, [r7, #12]
 8009542:	e009      	b.n	8009558 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d006      	beq.n	8009558 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d101      	bne.n	8009558 <osSemaphoreWait+0x40>
      ticks = 1;
 8009554:	2301      	movs	r3, #1
 8009556:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009558:	f7ff ff32 	bl	80093c0 <inHandlerMode>
 800955c:	4603      	mov	r3, r0
 800955e:	2b00      	cmp	r3, #0
 8009560:	d017      	beq.n	8009592 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009562:	f107 0308 	add.w	r3, r7, #8
 8009566:	461a      	mov	r2, r3
 8009568:	2100      	movs	r1, #0
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 fcde 	bl	8009f2c <xQueueReceiveFromISR>
 8009570:	4603      	mov	r3, r0
 8009572:	2b01      	cmp	r3, #1
 8009574:	d001      	beq.n	800957a <osSemaphoreWait+0x62>
      return osErrorOS;
 8009576:	23ff      	movs	r3, #255	; 0xff
 8009578:	e015      	b.n	80095a6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d011      	beq.n	80095a4 <osSemaphoreWait+0x8c>
 8009580:	4b0b      	ldr	r3, [pc, #44]	; (80095b0 <osSemaphoreWait+0x98>)
 8009582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009586:	601a      	str	r2, [r3, #0]
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	f3bf 8f6f 	isb	sy
 8009590:	e008      	b.n	80095a4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009592:	68f9      	ldr	r1, [r7, #12]
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 fbbd 	bl	8009d14 <xQueueSemaphoreTake>
 800959a:	4603      	mov	r3, r0
 800959c:	2b01      	cmp	r3, #1
 800959e:	d001      	beq.n	80095a4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80095a0:	23ff      	movs	r3, #255	; 0xff
 80095a2:	e000      	b.n	80095a6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	e000ed04 	.word	0xe000ed04

080095b4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80095bc:	2300      	movs	r3, #0
 80095be:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80095c0:	2300      	movs	r3, #0
 80095c2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80095c4:	f7ff fefc 	bl	80093c0 <inHandlerMode>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d016      	beq.n	80095fc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80095ce:	f107 0308 	add.w	r3, r7, #8
 80095d2:	4619      	mov	r1, r3
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 fb0f 	bl	8009bf8 <xQueueGiveFromISR>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d001      	beq.n	80095e4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80095e0:	23ff      	movs	r3, #255	; 0xff
 80095e2:	e017      	b.n	8009614 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d013      	beq.n	8009612 <osSemaphoreRelease+0x5e>
 80095ea:	4b0c      	ldr	r3, [pc, #48]	; (800961c <osSemaphoreRelease+0x68>)
 80095ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095f0:	601a      	str	r2, [r3, #0]
 80095f2:	f3bf 8f4f 	dsb	sy
 80095f6:	f3bf 8f6f 	isb	sy
 80095fa:	e00a      	b.n	8009612 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80095fc:	2300      	movs	r3, #0
 80095fe:	2200      	movs	r2, #0
 8009600:	2100      	movs	r1, #0
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 f9fa 	bl	80099fc <xQueueGenericSend>
 8009608:	4603      	mov	r3, r0
 800960a:	2b01      	cmp	r3, #1
 800960c:	d001      	beq.n	8009612 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800960e:	23ff      	movs	r3, #255	; 0xff
 8009610:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009612:	68fb      	ldr	r3, [r7, #12]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}
 800961c:	e000ed04 	.word	0xe000ed04

08009620 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009620:	b480      	push	{r7}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f103 0208 	add.w	r2, r3, #8
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f04f 32ff 	mov.w	r2, #4294967295
 8009638:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f103 0208 	add.w	r2, r3, #8
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f103 0208 	add.w	r2, r3, #8
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009654:	bf00      	nop
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800966e:	bf00      	nop
 8009670:	370c      	adds	r7, #12
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr

0800967a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800967a:	b480      	push	{r7}
 800967c:	b085      	sub	sp, #20
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	68fa      	ldr	r2, [r7, #12]
 800968e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	689a      	ldr	r2, [r3, #8]
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	683a      	ldr	r2, [r7, #0]
 800969e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	683a      	ldr	r2, [r7, #0]
 80096a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	1c5a      	adds	r2, r3, #1
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	601a      	str	r2, [r3, #0]
}
 80096b6:	bf00      	nop
 80096b8:	3714      	adds	r7, #20
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr

080096c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80096c2:	b480      	push	{r7}
 80096c4:	b085      	sub	sp, #20
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
 80096ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d8:	d103      	bne.n	80096e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	691b      	ldr	r3, [r3, #16]
 80096de:	60fb      	str	r3, [r7, #12]
 80096e0:	e00c      	b.n	80096fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	3308      	adds	r3, #8
 80096e6:	60fb      	str	r3, [r7, #12]
 80096e8:	e002      	b.n	80096f0 <vListInsert+0x2e>
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	60fb      	str	r3, [r7, #12]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	68ba      	ldr	r2, [r7, #8]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d2f6      	bcs.n	80096ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	685a      	ldr	r2, [r3, #4]
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	683a      	ldr	r2, [r7, #0]
 800970a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	683a      	ldr	r2, [r7, #0]
 8009716:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	1c5a      	adds	r2, r3, #1
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	601a      	str	r2, [r3, #0]
}
 8009728:	bf00      	nop
 800972a:	3714      	adds	r7, #20
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	6892      	ldr	r2, [r2, #8]
 800974a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	6852      	ldr	r2, [r2, #4]
 8009754:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	429a      	cmp	r2, r3
 800975e:	d103      	bne.n	8009768 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	689a      	ldr	r2, [r3, #8]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	1e5a      	subs	r2, r3, #1
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3714      	adds	r7, #20
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d10a      	bne.n	80097b2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800979c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a0:	f383 8811 	msr	BASEPRI, r3
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	f3bf 8f4f 	dsb	sy
 80097ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80097ae:	bf00      	nop
 80097b0:	e7fe      	b.n	80097b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80097b2:	f001 fe9f 	bl	800b4f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097be:	68f9      	ldr	r1, [r7, #12]
 80097c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80097c2:	fb01 f303 	mul.w	r3, r1, r3
 80097c6:	441a      	add	r2, r3
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2200      	movs	r2, #0
 80097d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097e2:	3b01      	subs	r3, #1
 80097e4:	68f9      	ldr	r1, [r7, #12]
 80097e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80097e8:	fb01 f303 	mul.w	r3, r1, r3
 80097ec:	441a      	add	r2, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	22ff      	movs	r2, #255	; 0xff
 80097f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	22ff      	movs	r2, #255	; 0xff
 80097fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d114      	bne.n	8009832 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	691b      	ldr	r3, [r3, #16]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d01a      	beq.n	8009846 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	3310      	adds	r3, #16
 8009814:	4618      	mov	r0, r3
 8009816:	f001 f961 	bl	800aadc <xTaskRemoveFromEventList>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d012      	beq.n	8009846 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009820:	4b0c      	ldr	r3, [pc, #48]	; (8009854 <xQueueGenericReset+0xcc>)
 8009822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009826:	601a      	str	r2, [r3, #0]
 8009828:	f3bf 8f4f 	dsb	sy
 800982c:	f3bf 8f6f 	isb	sy
 8009830:	e009      	b.n	8009846 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	3310      	adds	r3, #16
 8009836:	4618      	mov	r0, r3
 8009838:	f7ff fef2 	bl	8009620 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	3324      	adds	r3, #36	; 0x24
 8009840:	4618      	mov	r0, r3
 8009842:	f7ff feed 	bl	8009620 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009846:	f001 fe85 	bl	800b554 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800984a:	2301      	movs	r3, #1
}
 800984c:	4618      	mov	r0, r3
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	e000ed04 	.word	0xe000ed04

08009858 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009858:	b580      	push	{r7, lr}
 800985a:	b08e      	sub	sp, #56	; 0x38
 800985c:	af02      	add	r7, sp, #8
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
 8009864:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10a      	bne.n	8009882 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800986c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009870:	f383 8811 	msr	BASEPRI, r3
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	f3bf 8f4f 	dsb	sy
 800987c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800987e:	bf00      	nop
 8009880:	e7fe      	b.n	8009880 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d10a      	bne.n	800989e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988c:	f383 8811 	msr	BASEPRI, r3
 8009890:	f3bf 8f6f 	isb	sy
 8009894:	f3bf 8f4f 	dsb	sy
 8009898:	627b      	str	r3, [r7, #36]	; 0x24
}
 800989a:	bf00      	nop
 800989c:	e7fe      	b.n	800989c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d002      	beq.n	80098aa <xQueueGenericCreateStatic+0x52>
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d001      	beq.n	80098ae <xQueueGenericCreateStatic+0x56>
 80098aa:	2301      	movs	r3, #1
 80098ac:	e000      	b.n	80098b0 <xQueueGenericCreateStatic+0x58>
 80098ae:	2300      	movs	r3, #0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d10a      	bne.n	80098ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80098b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b8:	f383 8811 	msr	BASEPRI, r3
 80098bc:	f3bf 8f6f 	isb	sy
 80098c0:	f3bf 8f4f 	dsb	sy
 80098c4:	623b      	str	r3, [r7, #32]
}
 80098c6:	bf00      	nop
 80098c8:	e7fe      	b.n	80098c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d102      	bne.n	80098d6 <xQueueGenericCreateStatic+0x7e>
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d101      	bne.n	80098da <xQueueGenericCreateStatic+0x82>
 80098d6:	2301      	movs	r3, #1
 80098d8:	e000      	b.n	80098dc <xQueueGenericCreateStatic+0x84>
 80098da:	2300      	movs	r3, #0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10a      	bne.n	80098f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80098e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e4:	f383 8811 	msr	BASEPRI, r3
 80098e8:	f3bf 8f6f 	isb	sy
 80098ec:	f3bf 8f4f 	dsb	sy
 80098f0:	61fb      	str	r3, [r7, #28]
}
 80098f2:	bf00      	nop
 80098f4:	e7fe      	b.n	80098f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80098f6:	2348      	movs	r3, #72	; 0x48
 80098f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	2b48      	cmp	r3, #72	; 0x48
 80098fe:	d00a      	beq.n	8009916 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009904:	f383 8811 	msr	BASEPRI, r3
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	61bb      	str	r3, [r7, #24]
}
 8009912:	bf00      	nop
 8009914:	e7fe      	b.n	8009914 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009916:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800991c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991e:	2b00      	cmp	r3, #0
 8009920:	d00d      	beq.n	800993e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009924:	2201      	movs	r2, #1
 8009926:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800992a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800992e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009930:	9300      	str	r3, [sp, #0]
 8009932:	4613      	mov	r3, r2
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	68b9      	ldr	r1, [r7, #8]
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	f000 f83f 	bl	80099bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800993e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009940:	4618      	mov	r0, r3
 8009942:	3730      	adds	r7, #48	; 0x30
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009948:	b580      	push	{r7, lr}
 800994a:	b08a      	sub	sp, #40	; 0x28
 800994c:	af02      	add	r7, sp, #8
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	4613      	mov	r3, r2
 8009954:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10a      	bne.n	8009972 <xQueueGenericCreate+0x2a>
	__asm volatile
 800995c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009960:	f383 8811 	msr	BASEPRI, r3
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	613b      	str	r3, [r7, #16]
}
 800996e:	bf00      	nop
 8009970:	e7fe      	b.n	8009970 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	fb02 f303 	mul.w	r3, r2, r3
 800997a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	3348      	adds	r3, #72	; 0x48
 8009980:	4618      	mov	r0, r3
 8009982:	f001 fed9 	bl	800b738 <pvPortMalloc>
 8009986:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009988:	69bb      	ldr	r3, [r7, #24]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d011      	beq.n	80099b2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	3348      	adds	r3, #72	; 0x48
 8009996:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	2200      	movs	r2, #0
 800999c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80099a0:	79fa      	ldrb	r2, [r7, #7]
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	9300      	str	r3, [sp, #0]
 80099a6:	4613      	mov	r3, r2
 80099a8:	697a      	ldr	r2, [r7, #20]
 80099aa:	68b9      	ldr	r1, [r7, #8]
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f000 f805 	bl	80099bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80099b2:	69bb      	ldr	r3, [r7, #24]
	}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3720      	adds	r7, #32
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	607a      	str	r2, [r7, #4]
 80099c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d103      	bne.n	80099d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	69ba      	ldr	r2, [r7, #24]
 80099d4:	601a      	str	r2, [r3, #0]
 80099d6:	e002      	b.n	80099de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	68ba      	ldr	r2, [r7, #8]
 80099e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80099ea:	2101      	movs	r1, #1
 80099ec:	69b8      	ldr	r0, [r7, #24]
 80099ee:	f7ff fecb 	bl	8009788 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80099f2:	bf00      	nop
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
	...

080099fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b08e      	sub	sp, #56	; 0x38
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	60b9      	str	r1, [r7, #8]
 8009a06:	607a      	str	r2, [r7, #4]
 8009a08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d10a      	bne.n	8009a2e <xQueueGenericSend+0x32>
	__asm volatile
 8009a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1c:	f383 8811 	msr	BASEPRI, r3
 8009a20:	f3bf 8f6f 	isb	sy
 8009a24:	f3bf 8f4f 	dsb	sy
 8009a28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a2a:	bf00      	nop
 8009a2c:	e7fe      	b.n	8009a2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d103      	bne.n	8009a3c <xQueueGenericSend+0x40>
 8009a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d101      	bne.n	8009a40 <xQueueGenericSend+0x44>
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e000      	b.n	8009a42 <xQueueGenericSend+0x46>
 8009a40:	2300      	movs	r3, #0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d10a      	bne.n	8009a5c <xQueueGenericSend+0x60>
	__asm volatile
 8009a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4a:	f383 8811 	msr	BASEPRI, r3
 8009a4e:	f3bf 8f6f 	isb	sy
 8009a52:	f3bf 8f4f 	dsb	sy
 8009a56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a58:	bf00      	nop
 8009a5a:	e7fe      	b.n	8009a5a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	d103      	bne.n	8009a6a <xQueueGenericSend+0x6e>
 8009a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d101      	bne.n	8009a6e <xQueueGenericSend+0x72>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e000      	b.n	8009a70 <xQueueGenericSend+0x74>
 8009a6e:	2300      	movs	r3, #0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d10a      	bne.n	8009a8a <xQueueGenericSend+0x8e>
	__asm volatile
 8009a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a78:	f383 8811 	msr	BASEPRI, r3
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	f3bf 8f4f 	dsb	sy
 8009a84:	623b      	str	r3, [r7, #32]
}
 8009a86:	bf00      	nop
 8009a88:	e7fe      	b.n	8009a88 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a8a:	f001 f9e7 	bl	800ae5c <xTaskGetSchedulerState>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d102      	bne.n	8009a9a <xQueueGenericSend+0x9e>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d101      	bne.n	8009a9e <xQueueGenericSend+0xa2>
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	e000      	b.n	8009aa0 <xQueueGenericSend+0xa4>
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d10a      	bne.n	8009aba <xQueueGenericSend+0xbe>
	__asm volatile
 8009aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	61fb      	str	r3, [r7, #28]
}
 8009ab6:	bf00      	nop
 8009ab8:	e7fe      	b.n	8009ab8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009aba:	f001 fd1b 	bl	800b4f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d302      	bcc.n	8009ad0 <xQueueGenericSend+0xd4>
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	2b02      	cmp	r3, #2
 8009ace:	d129      	bne.n	8009b24 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ad0:	683a      	ldr	r2, [r7, #0]
 8009ad2:	68b9      	ldr	r1, [r7, #8]
 8009ad4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ad6:	f000 fac1 	bl	800a05c <prvCopyDataToQueue>
 8009ada:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d010      	beq.n	8009b06 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae6:	3324      	adds	r3, #36	; 0x24
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f000 fff7 	bl	800aadc <xTaskRemoveFromEventList>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d013      	beq.n	8009b1c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009af4:	4b3f      	ldr	r3, [pc, #252]	; (8009bf4 <xQueueGenericSend+0x1f8>)
 8009af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009afa:	601a      	str	r2, [r3, #0]
 8009afc:	f3bf 8f4f 	dsb	sy
 8009b00:	f3bf 8f6f 	isb	sy
 8009b04:	e00a      	b.n	8009b1c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d007      	beq.n	8009b1c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009b0c:	4b39      	ldr	r3, [pc, #228]	; (8009bf4 <xQueueGenericSend+0x1f8>)
 8009b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b12:	601a      	str	r2, [r3, #0]
 8009b14:	f3bf 8f4f 	dsb	sy
 8009b18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009b1c:	f001 fd1a 	bl	800b554 <vPortExitCritical>
				return pdPASS;
 8009b20:	2301      	movs	r3, #1
 8009b22:	e063      	b.n	8009bec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d103      	bne.n	8009b32 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b2a:	f001 fd13 	bl	800b554 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	e05c      	b.n	8009bec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d106      	bne.n	8009b46 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b38:	f107 0314 	add.w	r3, r7, #20
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f001 f82f 	bl	800aba0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b42:	2301      	movs	r3, #1
 8009b44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b46:	f001 fd05 	bl	800b554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b4a:	f000 fddf 	bl	800a70c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b4e:	f001 fcd1 	bl	800b4f4 <vPortEnterCritical>
 8009b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b58:	b25b      	sxtb	r3, r3
 8009b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b5e:	d103      	bne.n	8009b68 <xQueueGenericSend+0x16c>
 8009b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b62:	2200      	movs	r2, #0
 8009b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b6e:	b25b      	sxtb	r3, r3
 8009b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b74:	d103      	bne.n	8009b7e <xQueueGenericSend+0x182>
 8009b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b7e:	f001 fce9 	bl	800b554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b82:	1d3a      	adds	r2, r7, #4
 8009b84:	f107 0314 	add.w	r3, r7, #20
 8009b88:	4611      	mov	r1, r2
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f001 f81e 	bl	800abcc <xTaskCheckForTimeOut>
 8009b90:	4603      	mov	r3, r0
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d124      	bne.n	8009be0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009b96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b98:	f000 fb58 	bl	800a24c <prvIsQueueFull>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d018      	beq.n	8009bd4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba4:	3310      	adds	r3, #16
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	4611      	mov	r1, r2
 8009baa:	4618      	mov	r0, r3
 8009bac:	f000 ff72 	bl	800aa94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009bb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bb2:	f000 fae3 	bl	800a17c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009bb6:	f000 fdb7 	bl	800a728 <xTaskResumeAll>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	f47f af7c 	bne.w	8009aba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009bc2:	4b0c      	ldr	r3, [pc, #48]	; (8009bf4 <xQueueGenericSend+0x1f8>)
 8009bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bc8:	601a      	str	r2, [r3, #0]
 8009bca:	f3bf 8f4f 	dsb	sy
 8009bce:	f3bf 8f6f 	isb	sy
 8009bd2:	e772      	b.n	8009aba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009bd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bd6:	f000 fad1 	bl	800a17c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009bda:	f000 fda5 	bl	800a728 <xTaskResumeAll>
 8009bde:	e76c      	b.n	8009aba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009be0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009be2:	f000 facb 	bl	800a17c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009be6:	f000 fd9f 	bl	800a728 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009bea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3738      	adds	r7, #56	; 0x38
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	e000ed04 	.word	0xe000ed04

08009bf8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b08e      	sub	sp, #56	; 0x38
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d10a      	bne.n	8009c22 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c10:	f383 8811 	msr	BASEPRI, r3
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	f3bf 8f4f 	dsb	sy
 8009c1c:	623b      	str	r3, [r7, #32]
}
 8009c1e:	bf00      	nop
 8009c20:	e7fe      	b.n	8009c20 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00a      	beq.n	8009c40 <xQueueGiveFromISR+0x48>
	__asm volatile
 8009c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2e:	f383 8811 	msr	BASEPRI, r3
 8009c32:	f3bf 8f6f 	isb	sy
 8009c36:	f3bf 8f4f 	dsb	sy
 8009c3a:	61fb      	str	r3, [r7, #28]
}
 8009c3c:	bf00      	nop
 8009c3e:	e7fe      	b.n	8009c3e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d103      	bne.n	8009c50 <xQueueGiveFromISR+0x58>
 8009c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d101      	bne.n	8009c54 <xQueueGiveFromISR+0x5c>
 8009c50:	2301      	movs	r3, #1
 8009c52:	e000      	b.n	8009c56 <xQueueGiveFromISR+0x5e>
 8009c54:	2300      	movs	r3, #0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d10a      	bne.n	8009c70 <xQueueGiveFromISR+0x78>
	__asm volatile
 8009c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5e:	f383 8811 	msr	BASEPRI, r3
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	f3bf 8f4f 	dsb	sy
 8009c6a:	61bb      	str	r3, [r7, #24]
}
 8009c6c:	bf00      	nop
 8009c6e:	e7fe      	b.n	8009c6e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c70:	f001 fd22 	bl	800b6b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009c74:	f3ef 8211 	mrs	r2, BASEPRI
 8009c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7c:	f383 8811 	msr	BASEPRI, r3
 8009c80:	f3bf 8f6f 	isb	sy
 8009c84:	f3bf 8f4f 	dsb	sy
 8009c88:	617a      	str	r2, [r7, #20]
 8009c8a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009c8c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c94:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d22b      	bcs.n	8009cf8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cac:	1c5a      	adds	r2, r3, #1
 8009cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009cb2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cba:	d112      	bne.n	8009ce2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d016      	beq.n	8009cf2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc6:	3324      	adds	r3, #36	; 0x24
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f000 ff07 	bl	800aadc <xTaskRemoveFromEventList>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00e      	beq.n	8009cf2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00b      	beq.n	8009cf2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	601a      	str	r2, [r3, #0]
 8009ce0:	e007      	b.n	8009cf2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009ce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	b25a      	sxtb	r2, r3
 8009cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8009cf6:	e001      	b.n	8009cfc <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	637b      	str	r3, [r7, #52]	; 0x34
 8009cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfe:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009d06:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3738      	adds	r7, #56	; 0x38
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
	...

08009d14 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b08e      	sub	sp, #56	; 0x38
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009d26:	2300      	movs	r3, #0
 8009d28:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d10a      	bne.n	8009d46 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d34:	f383 8811 	msr	BASEPRI, r3
 8009d38:	f3bf 8f6f 	isb	sy
 8009d3c:	f3bf 8f4f 	dsb	sy
 8009d40:	623b      	str	r3, [r7, #32]
}
 8009d42:	bf00      	nop
 8009d44:	e7fe      	b.n	8009d44 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00a      	beq.n	8009d64 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d52:	f383 8811 	msr	BASEPRI, r3
 8009d56:	f3bf 8f6f 	isb	sy
 8009d5a:	f3bf 8f4f 	dsb	sy
 8009d5e:	61fb      	str	r3, [r7, #28]
}
 8009d60:	bf00      	nop
 8009d62:	e7fe      	b.n	8009d62 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d64:	f001 f87a 	bl	800ae5c <xTaskGetSchedulerState>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d102      	bne.n	8009d74 <xQueueSemaphoreTake+0x60>
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d101      	bne.n	8009d78 <xQueueSemaphoreTake+0x64>
 8009d74:	2301      	movs	r3, #1
 8009d76:	e000      	b.n	8009d7a <xQueueSemaphoreTake+0x66>
 8009d78:	2300      	movs	r3, #0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d10a      	bne.n	8009d94 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d82:	f383 8811 	msr	BASEPRI, r3
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	61bb      	str	r3, [r7, #24]
}
 8009d90:	bf00      	nop
 8009d92:	e7fe      	b.n	8009d92 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d94:	f001 fbae 	bl	800b4f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d9c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d024      	beq.n	8009dee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da6:	1e5a      	subs	r2, r3, #1
 8009da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009daa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d104      	bne.n	8009dbe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009db4:	f001 f9fa 	bl	800b1ac <pvTaskIncrementMutexHeldCount>
 8009db8:	4602      	mov	r2, r0
 8009dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dbc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00f      	beq.n	8009de6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc8:	3310      	adds	r3, #16
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f000 fe86 	bl	800aadc <xTaskRemoveFromEventList>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d007      	beq.n	8009de6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009dd6:	4b54      	ldr	r3, [pc, #336]	; (8009f28 <xQueueSemaphoreTake+0x214>)
 8009dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ddc:	601a      	str	r2, [r3, #0]
 8009dde:	f3bf 8f4f 	dsb	sy
 8009de2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009de6:	f001 fbb5 	bl	800b554 <vPortExitCritical>
				return pdPASS;
 8009dea:	2301      	movs	r3, #1
 8009dec:	e097      	b.n	8009f1e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d111      	bne.n	8009e18 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00a      	beq.n	8009e10 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfe:	f383 8811 	msr	BASEPRI, r3
 8009e02:	f3bf 8f6f 	isb	sy
 8009e06:	f3bf 8f4f 	dsb	sy
 8009e0a:	617b      	str	r3, [r7, #20]
}
 8009e0c:	bf00      	nop
 8009e0e:	e7fe      	b.n	8009e0e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009e10:	f001 fba0 	bl	800b554 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009e14:	2300      	movs	r3, #0
 8009e16:	e082      	b.n	8009f1e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d106      	bne.n	8009e2c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e1e:	f107 030c 	add.w	r3, r7, #12
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 febc 	bl	800aba0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e2c:	f001 fb92 	bl	800b554 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e30:	f000 fc6c 	bl	800a70c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e34:	f001 fb5e 	bl	800b4f4 <vPortEnterCritical>
 8009e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e3e:	b25b      	sxtb	r3, r3
 8009e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e44:	d103      	bne.n	8009e4e <xQueueSemaphoreTake+0x13a>
 8009e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e54:	b25b      	sxtb	r3, r3
 8009e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e5a:	d103      	bne.n	8009e64 <xQueueSemaphoreTake+0x150>
 8009e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e64:	f001 fb76 	bl	800b554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e68:	463a      	mov	r2, r7
 8009e6a:	f107 030c 	add.w	r3, r7, #12
 8009e6e:	4611      	mov	r1, r2
 8009e70:	4618      	mov	r0, r3
 8009e72:	f000 feab 	bl	800abcc <xTaskCheckForTimeOut>
 8009e76:	4603      	mov	r3, r0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d132      	bne.n	8009ee2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e7e:	f000 f9cf 	bl	800a220 <prvIsQueueEmpty>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d026      	beq.n	8009ed6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d109      	bne.n	8009ea4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009e90:	f001 fb30 	bl	800b4f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f000 fffd 	bl	800ae98 <xTaskPriorityInherit>
 8009e9e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009ea0:	f001 fb58 	bl	800b554 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea6:	3324      	adds	r3, #36	; 0x24
 8009ea8:	683a      	ldr	r2, [r7, #0]
 8009eaa:	4611      	mov	r1, r2
 8009eac:	4618      	mov	r0, r3
 8009eae:	f000 fdf1 	bl	800aa94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009eb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009eb4:	f000 f962 	bl	800a17c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009eb8:	f000 fc36 	bl	800a728 <xTaskResumeAll>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f47f af68 	bne.w	8009d94 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009ec4:	4b18      	ldr	r3, [pc, #96]	; (8009f28 <xQueueSemaphoreTake+0x214>)
 8009ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eca:	601a      	str	r2, [r3, #0]
 8009ecc:	f3bf 8f4f 	dsb	sy
 8009ed0:	f3bf 8f6f 	isb	sy
 8009ed4:	e75e      	b.n	8009d94 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009ed6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ed8:	f000 f950 	bl	800a17c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009edc:	f000 fc24 	bl	800a728 <xTaskResumeAll>
 8009ee0:	e758      	b.n	8009d94 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009ee2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ee4:	f000 f94a 	bl	800a17c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ee8:	f000 fc1e 	bl	800a728 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009eec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009eee:	f000 f997 	bl	800a220 <prvIsQueueEmpty>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f43f af4d 	beq.w	8009d94 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d00d      	beq.n	8009f1c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009f00:	f001 faf8 	bl	800b4f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009f04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f06:	f000 f891 	bl	800a02c <prvGetDisinheritPriorityAfterTimeout>
 8009f0a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f12:	4618      	mov	r0, r3
 8009f14:	f001 f8bc 	bl	800b090 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009f18:	f001 fb1c 	bl	800b554 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009f1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3738      	adds	r7, #56	; 0x38
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	e000ed04 	.word	0xe000ed04

08009f2c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b08e      	sub	sp, #56	; 0x38
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	60b9      	str	r1, [r7, #8]
 8009f36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d10a      	bne.n	8009f58 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f46:	f383 8811 	msr	BASEPRI, r3
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	623b      	str	r3, [r7, #32]
}
 8009f54:	bf00      	nop
 8009f56:	e7fe      	b.n	8009f56 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d103      	bne.n	8009f66 <xQueueReceiveFromISR+0x3a>
 8009f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d101      	bne.n	8009f6a <xQueueReceiveFromISR+0x3e>
 8009f66:	2301      	movs	r3, #1
 8009f68:	e000      	b.n	8009f6c <xQueueReceiveFromISR+0x40>
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d10a      	bne.n	8009f86 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f74:	f383 8811 	msr	BASEPRI, r3
 8009f78:	f3bf 8f6f 	isb	sy
 8009f7c:	f3bf 8f4f 	dsb	sy
 8009f80:	61fb      	str	r3, [r7, #28]
}
 8009f82:	bf00      	nop
 8009f84:	e7fe      	b.n	8009f84 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f86:	f001 fb97 	bl	800b6b8 <vPortValidateInterruptPriority>
	__asm volatile
 8009f8a:	f3ef 8211 	mrs	r2, BASEPRI
 8009f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	61ba      	str	r2, [r7, #24]
 8009fa0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009fa2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009faa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d02f      	beq.n	800a012 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009fbc:	68b9      	ldr	r1, [r7, #8]
 8009fbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fc0:	f000 f8b6 	bl	800a130 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc6:	1e5a      	subs	r2, r3, #1
 8009fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009fcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fd4:	d112      	bne.n	8009ffc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd8:	691b      	ldr	r3, [r3, #16]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d016      	beq.n	800a00c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe0:	3310      	adds	r3, #16
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f000 fd7a 	bl	800aadc <xTaskRemoveFromEventList>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d00e      	beq.n	800a00c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d00b      	beq.n	800a00c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	601a      	str	r2, [r3, #0]
 8009ffa:	e007      	b.n	800a00c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a000:	3301      	adds	r3, #1
 800a002:	b2db      	uxtb	r3, r3
 800a004:	b25a      	sxtb	r2, r3
 800a006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a00c:	2301      	movs	r3, #1
 800a00e:	637b      	str	r3, [r7, #52]	; 0x34
 800a010:	e001      	b.n	800a016 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a012:	2300      	movs	r3, #0
 800a014:	637b      	str	r3, [r7, #52]	; 0x34
 800a016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a018:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	f383 8811 	msr	BASEPRI, r3
}
 800a020:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a024:	4618      	mov	r0, r3
 800a026:	3738      	adds	r7, #56	; 0x38
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d006      	beq.n	800a04a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f1c3 0307 	rsb	r3, r3, #7
 800a046:	60fb      	str	r3, [r7, #12]
 800a048:	e001      	b.n	800a04e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a04a:	2300      	movs	r3, #0
 800a04c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a04e:	68fb      	ldr	r3, [r7, #12]
	}
 800a050:	4618      	mov	r0, r3
 800a052:	3714      	adds	r7, #20
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b086      	sub	sp, #24
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a068:	2300      	movs	r3, #0
 800a06a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a070:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a076:	2b00      	cmp	r3, #0
 800a078:	d10d      	bne.n	800a096 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d14d      	bne.n	800a11e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	4618      	mov	r0, r3
 800a088:	f000 ff7c 	bl	800af84 <xTaskPriorityDisinherit>
 800a08c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2200      	movs	r2, #0
 800a092:	609a      	str	r2, [r3, #8]
 800a094:	e043      	b.n	800a11e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d119      	bne.n	800a0d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6858      	ldr	r0, [r3, #4]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	68b9      	ldr	r1, [r7, #8]
 800a0a8:	f001 fe57 	bl	800bd5a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	685a      	ldr	r2, [r3, #4]
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b4:	441a      	add	r2, r3
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	685a      	ldr	r2, [r3, #4]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d32b      	bcc.n	800a11e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	605a      	str	r2, [r3, #4]
 800a0ce:	e026      	b.n	800a11e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	68d8      	ldr	r0, [r3, #12]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d8:	461a      	mov	r2, r3
 800a0da:	68b9      	ldr	r1, [r7, #8]
 800a0dc:	f001 fe3d 	bl	800bd5a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	68da      	ldr	r2, [r3, #12]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e8:	425b      	negs	r3, r3
 800a0ea:	441a      	add	r2, r3
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	68da      	ldr	r2, [r3, #12]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d207      	bcs.n	800a10c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	689a      	ldr	r2, [r3, #8]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a104:	425b      	negs	r3, r3
 800a106:	441a      	add	r2, r3
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2b02      	cmp	r3, #2
 800a110:	d105      	bne.n	800a11e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d002      	beq.n	800a11e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	3b01      	subs	r3, #1
 800a11c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	1c5a      	adds	r2, r3, #1
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a126:	697b      	ldr	r3, [r7, #20]
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3718      	adds	r7, #24
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d018      	beq.n	800a174 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	68da      	ldr	r2, [r3, #12]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a14a:	441a      	add	r2, r3
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	68da      	ldr	r2, [r3, #12]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d303      	bcc.n	800a164 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	68d9      	ldr	r1, [r3, #12]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a16c:	461a      	mov	r2, r3
 800a16e:	6838      	ldr	r0, [r7, #0]
 800a170:	f001 fdf3 	bl	800bd5a <memcpy>
	}
}
 800a174:	bf00      	nop
 800a176:	3708      	adds	r7, #8
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a184:	f001 f9b6 	bl	800b4f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a18e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a190:	e011      	b.n	800a1b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a196:	2b00      	cmp	r3, #0
 800a198:	d012      	beq.n	800a1c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	3324      	adds	r3, #36	; 0x24
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f000 fc9c 	bl	800aadc <xTaskRemoveFromEventList>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d001      	beq.n	800a1ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a1aa:	f000 fd71 	bl	800ac90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a1ae:	7bfb      	ldrb	r3, [r7, #15]
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a1b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	dce9      	bgt.n	800a192 <prvUnlockQueue+0x16>
 800a1be:	e000      	b.n	800a1c2 <prvUnlockQueue+0x46>
					break;
 800a1c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	22ff      	movs	r2, #255	; 0xff
 800a1c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a1ca:	f001 f9c3 	bl	800b554 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a1ce:	f001 f991 	bl	800b4f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a1da:	e011      	b.n	800a200 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d012      	beq.n	800a20a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	3310      	adds	r3, #16
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f000 fc77 	bl	800aadc <xTaskRemoveFromEventList>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d001      	beq.n	800a1f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a1f4:	f000 fd4c 	bl	800ac90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a1f8:	7bbb      	ldrb	r3, [r7, #14]
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a200:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a204:	2b00      	cmp	r3, #0
 800a206:	dce9      	bgt.n	800a1dc <prvUnlockQueue+0x60>
 800a208:	e000      	b.n	800a20c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a20a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	22ff      	movs	r2, #255	; 0xff
 800a210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a214:	f001 f99e 	bl	800b554 <vPortExitCritical>
}
 800a218:	bf00      	nop
 800a21a:	3710      	adds	r7, #16
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a228:	f001 f964 	bl	800b4f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a230:	2b00      	cmp	r3, #0
 800a232:	d102      	bne.n	800a23a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a234:	2301      	movs	r3, #1
 800a236:	60fb      	str	r3, [r7, #12]
 800a238:	e001      	b.n	800a23e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a23a:	2300      	movs	r3, #0
 800a23c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a23e:	f001 f989 	bl	800b554 <vPortExitCritical>

	return xReturn;
 800a242:	68fb      	ldr	r3, [r7, #12]
}
 800a244:	4618      	mov	r0, r3
 800a246:	3710      	adds	r7, #16
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a254:	f001 f94e 	bl	800b4f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a260:	429a      	cmp	r2, r3
 800a262:	d102      	bne.n	800a26a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a264:	2301      	movs	r3, #1
 800a266:	60fb      	str	r3, [r7, #12]
 800a268:	e001      	b.n	800a26e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a26a:	2300      	movs	r3, #0
 800a26c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a26e:	f001 f971 	bl	800b554 <vPortExitCritical>

	return xReturn;
 800a272:	68fb      	ldr	r3, [r7, #12]
}
 800a274:	4618      	mov	r0, r3
 800a276:	3710      	adds	r7, #16
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b08e      	sub	sp, #56	; 0x38
 800a280:	af04      	add	r7, sp, #16
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	60b9      	str	r1, [r7, #8]
 800a286:	607a      	str	r2, [r7, #4]
 800a288:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a28a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d10a      	bne.n	800a2a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a294:	f383 8811 	msr	BASEPRI, r3
 800a298:	f3bf 8f6f 	isb	sy
 800a29c:	f3bf 8f4f 	dsb	sy
 800a2a0:	623b      	str	r3, [r7, #32]
}
 800a2a2:	bf00      	nop
 800a2a4:	e7fe      	b.n	800a2a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d10a      	bne.n	800a2c2 <xTaskCreateStatic+0x46>
	__asm volatile
 800a2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b0:	f383 8811 	msr	BASEPRI, r3
 800a2b4:	f3bf 8f6f 	isb	sy
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	61fb      	str	r3, [r7, #28]
}
 800a2be:	bf00      	nop
 800a2c0:	e7fe      	b.n	800a2c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a2c2:	23b4      	movs	r3, #180	; 0xb4
 800a2c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	2bb4      	cmp	r3, #180	; 0xb4
 800a2ca:	d00a      	beq.n	800a2e2 <xTaskCreateStatic+0x66>
	__asm volatile
 800a2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d0:	f383 8811 	msr	BASEPRI, r3
 800a2d4:	f3bf 8f6f 	isb	sy
 800a2d8:	f3bf 8f4f 	dsb	sy
 800a2dc:	61bb      	str	r3, [r7, #24]
}
 800a2de:	bf00      	nop
 800a2e0:	e7fe      	b.n	800a2e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a2e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d01e      	beq.n	800a328 <xTaskCreateStatic+0xac>
 800a2ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d01b      	beq.n	800a328 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fc:	2202      	movs	r2, #2
 800a2fe:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a302:	2300      	movs	r3, #0
 800a304:	9303      	str	r3, [sp, #12]
 800a306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a308:	9302      	str	r3, [sp, #8]
 800a30a:	f107 0314 	add.w	r3, r7, #20
 800a30e:	9301      	str	r3, [sp, #4]
 800a310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	68b9      	ldr	r1, [r7, #8]
 800a31a:	68f8      	ldr	r0, [r7, #12]
 800a31c:	f000 f850 	bl	800a3c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a320:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a322:	f000 f8eb 	bl	800a4fc <prvAddNewTaskToReadyList>
 800a326:	e001      	b.n	800a32c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a328:	2300      	movs	r3, #0
 800a32a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a32c:	697b      	ldr	r3, [r7, #20]
	}
 800a32e:	4618      	mov	r0, r3
 800a330:	3728      	adds	r7, #40	; 0x28
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a336:	b580      	push	{r7, lr}
 800a338:	b08c      	sub	sp, #48	; 0x30
 800a33a:	af04      	add	r7, sp, #16
 800a33c:	60f8      	str	r0, [r7, #12]
 800a33e:	60b9      	str	r1, [r7, #8]
 800a340:	603b      	str	r3, [r7, #0]
 800a342:	4613      	mov	r3, r2
 800a344:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a346:	88fb      	ldrh	r3, [r7, #6]
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	4618      	mov	r0, r3
 800a34c:	f001 f9f4 	bl	800b738 <pvPortMalloc>
 800a350:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d00e      	beq.n	800a376 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a358:	20b4      	movs	r0, #180	; 0xb4
 800a35a:	f001 f9ed 	bl	800b738 <pvPortMalloc>
 800a35e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d003      	beq.n	800a36e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	697a      	ldr	r2, [r7, #20]
 800a36a:	631a      	str	r2, [r3, #48]	; 0x30
 800a36c:	e005      	b.n	800a37a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a36e:	6978      	ldr	r0, [r7, #20]
 800a370:	f001 faae 	bl	800b8d0 <vPortFree>
 800a374:	e001      	b.n	800a37a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a376:	2300      	movs	r3, #0
 800a378:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a37a:	69fb      	ldr	r3, [r7, #28]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d017      	beq.n	800a3b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a380:	69fb      	ldr	r3, [r7, #28]
 800a382:	2200      	movs	r2, #0
 800a384:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a388:	88fa      	ldrh	r2, [r7, #6]
 800a38a:	2300      	movs	r3, #0
 800a38c:	9303      	str	r3, [sp, #12]
 800a38e:	69fb      	ldr	r3, [r7, #28]
 800a390:	9302      	str	r3, [sp, #8]
 800a392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a394:	9301      	str	r3, [sp, #4]
 800a396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a398:	9300      	str	r3, [sp, #0]
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	68b9      	ldr	r1, [r7, #8]
 800a39e:	68f8      	ldr	r0, [r7, #12]
 800a3a0:	f000 f80e 	bl	800a3c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a3a4:	69f8      	ldr	r0, [r7, #28]
 800a3a6:	f000 f8a9 	bl	800a4fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	61bb      	str	r3, [r7, #24]
 800a3ae:	e002      	b.n	800a3b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a3b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a3b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a3b6:	69bb      	ldr	r3, [r7, #24]
	}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3720      	adds	r7, #32
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b088      	sub	sp, #32
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	607a      	str	r2, [r7, #4]
 800a3cc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	4413      	add	r3, r2
 800a3de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	f023 0307 	bic.w	r3, r3, #7
 800a3e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a3e8:	69bb      	ldr	r3, [r7, #24]
 800a3ea:	f003 0307 	and.w	r3, r3, #7
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d00a      	beq.n	800a408 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f6:	f383 8811 	msr	BASEPRI, r3
 800a3fa:	f3bf 8f6f 	isb	sy
 800a3fe:	f3bf 8f4f 	dsb	sy
 800a402:	617b      	str	r3, [r7, #20]
}
 800a404:	bf00      	nop
 800a406:	e7fe      	b.n	800a406 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d01f      	beq.n	800a44e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a40e:	2300      	movs	r3, #0
 800a410:	61fb      	str	r3, [r7, #28]
 800a412:	e012      	b.n	800a43a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a414:	68ba      	ldr	r2, [r7, #8]
 800a416:	69fb      	ldr	r3, [r7, #28]
 800a418:	4413      	add	r3, r2
 800a41a:	7819      	ldrb	r1, [r3, #0]
 800a41c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a41e:	69fb      	ldr	r3, [r7, #28]
 800a420:	4413      	add	r3, r2
 800a422:	3334      	adds	r3, #52	; 0x34
 800a424:	460a      	mov	r2, r1
 800a426:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a428:	68ba      	ldr	r2, [r7, #8]
 800a42a:	69fb      	ldr	r3, [r7, #28]
 800a42c:	4413      	add	r3, r2
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d006      	beq.n	800a442 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a434:	69fb      	ldr	r3, [r7, #28]
 800a436:	3301      	adds	r3, #1
 800a438:	61fb      	str	r3, [r7, #28]
 800a43a:	69fb      	ldr	r3, [r7, #28]
 800a43c:	2b0f      	cmp	r3, #15
 800a43e:	d9e9      	bls.n	800a414 <prvInitialiseNewTask+0x54>
 800a440:	e000      	b.n	800a444 <prvInitialiseNewTask+0x84>
			{
				break;
 800a442:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a446:	2200      	movs	r2, #0
 800a448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a44c:	e003      	b.n	800a456 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a450:	2200      	movs	r2, #0
 800a452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a458:	2b06      	cmp	r3, #6
 800a45a:	d901      	bls.n	800a460 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a45c:	2306      	movs	r3, #6
 800a45e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a462:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a464:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a46a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46e:	2200      	movs	r2, #0
 800a470:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a474:	3304      	adds	r3, #4
 800a476:	4618      	mov	r0, r3
 800a478:	f7ff f8f2 	bl	8009660 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47e:	3318      	adds	r3, #24
 800a480:	4618      	mov	r0, r3
 800a482:	f7ff f8ed 	bl	8009660 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a48a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48e:	f1c3 0207 	rsb	r2, r3, #7
 800a492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a494:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a49a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ae:	334c      	adds	r3, #76	; 0x4c
 800a4b0:	2260      	movs	r2, #96	; 0x60
 800a4b2:	2100      	movs	r1, #0
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f001 fc5e 	bl	800bd76 <memset>
 800a4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4bc:	4a0c      	ldr	r2, [pc, #48]	; (800a4f0 <prvInitialiseNewTask+0x130>)
 800a4be:	651a      	str	r2, [r3, #80]	; 0x50
 800a4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c2:	4a0c      	ldr	r2, [pc, #48]	; (800a4f4 <prvInitialiseNewTask+0x134>)
 800a4c4:	655a      	str	r2, [r3, #84]	; 0x54
 800a4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c8:	4a0b      	ldr	r2, [pc, #44]	; (800a4f8 <prvInitialiseNewTask+0x138>)
 800a4ca:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a4cc:	683a      	ldr	r2, [r7, #0]
 800a4ce:	68f9      	ldr	r1, [r7, #12]
 800a4d0:	69b8      	ldr	r0, [r7, #24]
 800a4d2:	f000 fee5 	bl	800b2a0 <pxPortInitialiseStack>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d002      	beq.n	800a4e8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4e8:	bf00      	nop
 800a4ea:	3720      	adds	r7, #32
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	08010e08 	.word	0x08010e08
 800a4f4:	08010e28 	.word	0x08010e28
 800a4f8:	08010de8 	.word	0x08010de8

0800a4fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a504:	f000 fff6 	bl	800b4f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a508:	4b2a      	ldr	r3, [pc, #168]	; (800a5b4 <prvAddNewTaskToReadyList+0xb8>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	3301      	adds	r3, #1
 800a50e:	4a29      	ldr	r2, [pc, #164]	; (800a5b4 <prvAddNewTaskToReadyList+0xb8>)
 800a510:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a512:	4b29      	ldr	r3, [pc, #164]	; (800a5b8 <prvAddNewTaskToReadyList+0xbc>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d109      	bne.n	800a52e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a51a:	4a27      	ldr	r2, [pc, #156]	; (800a5b8 <prvAddNewTaskToReadyList+0xbc>)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a520:	4b24      	ldr	r3, [pc, #144]	; (800a5b4 <prvAddNewTaskToReadyList+0xb8>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	2b01      	cmp	r3, #1
 800a526:	d110      	bne.n	800a54a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a528:	f000 fbd6 	bl	800acd8 <prvInitialiseTaskLists>
 800a52c:	e00d      	b.n	800a54a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a52e:	4b23      	ldr	r3, [pc, #140]	; (800a5bc <prvAddNewTaskToReadyList+0xc0>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d109      	bne.n	800a54a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a536:	4b20      	ldr	r3, [pc, #128]	; (800a5b8 <prvAddNewTaskToReadyList+0xbc>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a540:	429a      	cmp	r2, r3
 800a542:	d802      	bhi.n	800a54a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a544:	4a1c      	ldr	r2, [pc, #112]	; (800a5b8 <prvAddNewTaskToReadyList+0xbc>)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a54a:	4b1d      	ldr	r3, [pc, #116]	; (800a5c0 <prvAddNewTaskToReadyList+0xc4>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	3301      	adds	r3, #1
 800a550:	4a1b      	ldr	r2, [pc, #108]	; (800a5c0 <prvAddNewTaskToReadyList+0xc4>)
 800a552:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a558:	2201      	movs	r2, #1
 800a55a:	409a      	lsls	r2, r3
 800a55c:	4b19      	ldr	r3, [pc, #100]	; (800a5c4 <prvAddNewTaskToReadyList+0xc8>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4313      	orrs	r3, r2
 800a562:	4a18      	ldr	r2, [pc, #96]	; (800a5c4 <prvAddNewTaskToReadyList+0xc8>)
 800a564:	6013      	str	r3, [r2, #0]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a56a:	4613      	mov	r3, r2
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	4413      	add	r3, r2
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	4a15      	ldr	r2, [pc, #84]	; (800a5c8 <prvAddNewTaskToReadyList+0xcc>)
 800a574:	441a      	add	r2, r3
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	3304      	adds	r3, #4
 800a57a:	4619      	mov	r1, r3
 800a57c:	4610      	mov	r0, r2
 800a57e:	f7ff f87c 	bl	800967a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a582:	f000 ffe7 	bl	800b554 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a586:	4b0d      	ldr	r3, [pc, #52]	; (800a5bc <prvAddNewTaskToReadyList+0xc0>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00e      	beq.n	800a5ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a58e:	4b0a      	ldr	r3, [pc, #40]	; (800a5b8 <prvAddNewTaskToReadyList+0xbc>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a598:	429a      	cmp	r2, r3
 800a59a:	d207      	bcs.n	800a5ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a59c:	4b0b      	ldr	r3, [pc, #44]	; (800a5cc <prvAddNewTaskToReadyList+0xd0>)
 800a59e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5a2:	601a      	str	r2, [r3, #0]
 800a5a4:	f3bf 8f4f 	dsb	sy
 800a5a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5ac:	bf00      	nop
 800a5ae:	3708      	adds	r7, #8
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	200267e4 	.word	0x200267e4
 800a5b8:	200266e4 	.word	0x200266e4
 800a5bc:	200267f0 	.word	0x200267f0
 800a5c0:	20026800 	.word	0x20026800
 800a5c4:	200267ec 	.word	0x200267ec
 800a5c8:	200266e8 	.word	0x200266e8
 800a5cc:	e000ed04 	.word	0xe000ed04

0800a5d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d017      	beq.n	800a612 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a5e2:	4b13      	ldr	r3, [pc, #76]	; (800a630 <vTaskDelay+0x60>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d00a      	beq.n	800a600 <vTaskDelay+0x30>
	__asm volatile
 800a5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ee:	f383 8811 	msr	BASEPRI, r3
 800a5f2:	f3bf 8f6f 	isb	sy
 800a5f6:	f3bf 8f4f 	dsb	sy
 800a5fa:	60bb      	str	r3, [r7, #8]
}
 800a5fc:	bf00      	nop
 800a5fe:	e7fe      	b.n	800a5fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a600:	f000 f884 	bl	800a70c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a604:	2100      	movs	r1, #0
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 fde4 	bl	800b1d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a60c:	f000 f88c 	bl	800a728 <xTaskResumeAll>
 800a610:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d107      	bne.n	800a628 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a618:	4b06      	ldr	r3, [pc, #24]	; (800a634 <vTaskDelay+0x64>)
 800a61a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a61e:	601a      	str	r2, [r3, #0]
 800a620:	f3bf 8f4f 	dsb	sy
 800a624:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a628:	bf00      	nop
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}
 800a630:	2002680c 	.word	0x2002680c
 800a634:	e000ed04 	.word	0xe000ed04

0800a638 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b08a      	sub	sp, #40	; 0x28
 800a63c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a63e:	2300      	movs	r3, #0
 800a640:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a642:	2300      	movs	r3, #0
 800a644:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a646:	463a      	mov	r2, r7
 800a648:	1d39      	adds	r1, r7, #4
 800a64a:	f107 0308 	add.w	r3, r7, #8
 800a64e:	4618      	mov	r0, r3
 800a650:	f7f6 fe16 	bl	8001280 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a654:	6839      	ldr	r1, [r7, #0]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	68ba      	ldr	r2, [r7, #8]
 800a65a:	9202      	str	r2, [sp, #8]
 800a65c:	9301      	str	r3, [sp, #4]
 800a65e:	2300      	movs	r3, #0
 800a660:	9300      	str	r3, [sp, #0]
 800a662:	2300      	movs	r3, #0
 800a664:	460a      	mov	r2, r1
 800a666:	4921      	ldr	r1, [pc, #132]	; (800a6ec <vTaskStartScheduler+0xb4>)
 800a668:	4821      	ldr	r0, [pc, #132]	; (800a6f0 <vTaskStartScheduler+0xb8>)
 800a66a:	f7ff fe07 	bl	800a27c <xTaskCreateStatic>
 800a66e:	4603      	mov	r3, r0
 800a670:	4a20      	ldr	r2, [pc, #128]	; (800a6f4 <vTaskStartScheduler+0xbc>)
 800a672:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a674:	4b1f      	ldr	r3, [pc, #124]	; (800a6f4 <vTaskStartScheduler+0xbc>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d002      	beq.n	800a682 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a67c:	2301      	movs	r3, #1
 800a67e:	617b      	str	r3, [r7, #20]
 800a680:	e001      	b.n	800a686 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a682:	2300      	movs	r3, #0
 800a684:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d11b      	bne.n	800a6c4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800a68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a690:	f383 8811 	msr	BASEPRI, r3
 800a694:	f3bf 8f6f 	isb	sy
 800a698:	f3bf 8f4f 	dsb	sy
 800a69c:	613b      	str	r3, [r7, #16]
}
 800a69e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a6a0:	4b15      	ldr	r3, [pc, #84]	; (800a6f8 <vTaskStartScheduler+0xc0>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	334c      	adds	r3, #76	; 0x4c
 800a6a6:	4a15      	ldr	r2, [pc, #84]	; (800a6fc <vTaskStartScheduler+0xc4>)
 800a6a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a6aa:	4b15      	ldr	r3, [pc, #84]	; (800a700 <vTaskStartScheduler+0xc8>)
 800a6ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a6b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a6b2:	4b14      	ldr	r3, [pc, #80]	; (800a704 <vTaskStartScheduler+0xcc>)
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a6b8:	4b13      	ldr	r3, [pc, #76]	; (800a708 <vTaskStartScheduler+0xd0>)
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a6be:	f000 fe77 	bl	800b3b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a6c2:	e00e      	b.n	800a6e2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ca:	d10a      	bne.n	800a6e2 <vTaskStartScheduler+0xaa>
	__asm volatile
 800a6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d0:	f383 8811 	msr	BASEPRI, r3
 800a6d4:	f3bf 8f6f 	isb	sy
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	60fb      	str	r3, [r7, #12]
}
 800a6de:	bf00      	nop
 800a6e0:	e7fe      	b.n	800a6e0 <vTaskStartScheduler+0xa8>
}
 800a6e2:	bf00      	nop
 800a6e4:	3718      	adds	r7, #24
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	0800d84c 	.word	0x0800d84c
 800a6f0:	0800aca9 	.word	0x0800aca9
 800a6f4:	20026808 	.word	0x20026808
 800a6f8:	200266e4 	.word	0x200266e4
 800a6fc:	200000a4 	.word	0x200000a4
 800a700:	20026804 	.word	0x20026804
 800a704:	200267f0 	.word	0x200267f0
 800a708:	200267e8 	.word	0x200267e8

0800a70c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a70c:	b480      	push	{r7}
 800a70e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a710:	4b04      	ldr	r3, [pc, #16]	; (800a724 <vTaskSuspendAll+0x18>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	3301      	adds	r3, #1
 800a716:	4a03      	ldr	r2, [pc, #12]	; (800a724 <vTaskSuspendAll+0x18>)
 800a718:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a71a:	bf00      	nop
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr
 800a724:	2002680c 	.word	0x2002680c

0800a728 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a72e:	2300      	movs	r3, #0
 800a730:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a732:	2300      	movs	r3, #0
 800a734:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a736:	4b41      	ldr	r3, [pc, #260]	; (800a83c <xTaskResumeAll+0x114>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d10a      	bne.n	800a754 <xTaskResumeAll+0x2c>
	__asm volatile
 800a73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a742:	f383 8811 	msr	BASEPRI, r3
 800a746:	f3bf 8f6f 	isb	sy
 800a74a:	f3bf 8f4f 	dsb	sy
 800a74e:	603b      	str	r3, [r7, #0]
}
 800a750:	bf00      	nop
 800a752:	e7fe      	b.n	800a752 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a754:	f000 fece 	bl	800b4f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a758:	4b38      	ldr	r3, [pc, #224]	; (800a83c <xTaskResumeAll+0x114>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	3b01      	subs	r3, #1
 800a75e:	4a37      	ldr	r2, [pc, #220]	; (800a83c <xTaskResumeAll+0x114>)
 800a760:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a762:	4b36      	ldr	r3, [pc, #216]	; (800a83c <xTaskResumeAll+0x114>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d161      	bne.n	800a82e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a76a:	4b35      	ldr	r3, [pc, #212]	; (800a840 <xTaskResumeAll+0x118>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d05d      	beq.n	800a82e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a772:	e02e      	b.n	800a7d2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a774:	4b33      	ldr	r3, [pc, #204]	; (800a844 <xTaskResumeAll+0x11c>)
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	3318      	adds	r3, #24
 800a780:	4618      	mov	r0, r3
 800a782:	f7fe ffd7 	bl	8009734 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	3304      	adds	r3, #4
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7fe ffd2 	bl	8009734 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a794:	2201      	movs	r2, #1
 800a796:	409a      	lsls	r2, r3
 800a798:	4b2b      	ldr	r3, [pc, #172]	; (800a848 <xTaskResumeAll+0x120>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4313      	orrs	r3, r2
 800a79e:	4a2a      	ldr	r2, [pc, #168]	; (800a848 <xTaskResumeAll+0x120>)
 800a7a0:	6013      	str	r3, [r2, #0]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	4413      	add	r3, r2
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	4a27      	ldr	r2, [pc, #156]	; (800a84c <xTaskResumeAll+0x124>)
 800a7b0:	441a      	add	r2, r3
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	3304      	adds	r3, #4
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	4610      	mov	r0, r2
 800a7ba:	f7fe ff5e 	bl	800967a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7c2:	4b23      	ldr	r3, [pc, #140]	; (800a850 <xTaskResumeAll+0x128>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d302      	bcc.n	800a7d2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a7cc:	4b21      	ldr	r3, [pc, #132]	; (800a854 <xTaskResumeAll+0x12c>)
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a7d2:	4b1c      	ldr	r3, [pc, #112]	; (800a844 <xTaskResumeAll+0x11c>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d1cc      	bne.n	800a774 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d001      	beq.n	800a7e4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a7e0:	f000 fb1c 	bl	800ae1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a7e4:	4b1c      	ldr	r3, [pc, #112]	; (800a858 <xTaskResumeAll+0x130>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d010      	beq.n	800a812 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a7f0:	f000 f836 	bl	800a860 <xTaskIncrementTick>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d002      	beq.n	800a800 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a7fa:	4b16      	ldr	r3, [pc, #88]	; (800a854 <xTaskResumeAll+0x12c>)
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	3b01      	subs	r3, #1
 800a804:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d1f1      	bne.n	800a7f0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a80c:	4b12      	ldr	r3, [pc, #72]	; (800a858 <xTaskResumeAll+0x130>)
 800a80e:	2200      	movs	r2, #0
 800a810:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a812:	4b10      	ldr	r3, [pc, #64]	; (800a854 <xTaskResumeAll+0x12c>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d009      	beq.n	800a82e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a81a:	2301      	movs	r3, #1
 800a81c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a81e:	4b0f      	ldr	r3, [pc, #60]	; (800a85c <xTaskResumeAll+0x134>)
 800a820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a824:	601a      	str	r2, [r3, #0]
 800a826:	f3bf 8f4f 	dsb	sy
 800a82a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a82e:	f000 fe91 	bl	800b554 <vPortExitCritical>

	return xAlreadyYielded;
 800a832:	68bb      	ldr	r3, [r7, #8]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3710      	adds	r7, #16
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	2002680c 	.word	0x2002680c
 800a840:	200267e4 	.word	0x200267e4
 800a844:	200267a4 	.word	0x200267a4
 800a848:	200267ec 	.word	0x200267ec
 800a84c:	200266e8 	.word	0x200266e8
 800a850:	200266e4 	.word	0x200266e4
 800a854:	200267f8 	.word	0x200267f8
 800a858:	200267f4 	.word	0x200267f4
 800a85c:	e000ed04 	.word	0xe000ed04

0800a860 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b086      	sub	sp, #24
 800a864:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a866:	2300      	movs	r3, #0
 800a868:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a86a:	4b4e      	ldr	r3, [pc, #312]	; (800a9a4 <xTaskIncrementTick+0x144>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	f040 808e 	bne.w	800a990 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a874:	4b4c      	ldr	r3, [pc, #304]	; (800a9a8 <xTaskIncrementTick+0x148>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	3301      	adds	r3, #1
 800a87a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a87c:	4a4a      	ldr	r2, [pc, #296]	; (800a9a8 <xTaskIncrementTick+0x148>)
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d120      	bne.n	800a8ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a888:	4b48      	ldr	r3, [pc, #288]	; (800a9ac <xTaskIncrementTick+0x14c>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d00a      	beq.n	800a8a8 <xTaskIncrementTick+0x48>
	__asm volatile
 800a892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a896:	f383 8811 	msr	BASEPRI, r3
 800a89a:	f3bf 8f6f 	isb	sy
 800a89e:	f3bf 8f4f 	dsb	sy
 800a8a2:	603b      	str	r3, [r7, #0]
}
 800a8a4:	bf00      	nop
 800a8a6:	e7fe      	b.n	800a8a6 <xTaskIncrementTick+0x46>
 800a8a8:	4b40      	ldr	r3, [pc, #256]	; (800a9ac <xTaskIncrementTick+0x14c>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	60fb      	str	r3, [r7, #12]
 800a8ae:	4b40      	ldr	r3, [pc, #256]	; (800a9b0 <xTaskIncrementTick+0x150>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4a3e      	ldr	r2, [pc, #248]	; (800a9ac <xTaskIncrementTick+0x14c>)
 800a8b4:	6013      	str	r3, [r2, #0]
 800a8b6:	4a3e      	ldr	r2, [pc, #248]	; (800a9b0 <xTaskIncrementTick+0x150>)
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	6013      	str	r3, [r2, #0]
 800a8bc:	4b3d      	ldr	r3, [pc, #244]	; (800a9b4 <xTaskIncrementTick+0x154>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	4a3c      	ldr	r2, [pc, #240]	; (800a9b4 <xTaskIncrementTick+0x154>)
 800a8c4:	6013      	str	r3, [r2, #0]
 800a8c6:	f000 faa9 	bl	800ae1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a8ca:	4b3b      	ldr	r3, [pc, #236]	; (800a9b8 <xTaskIncrementTick+0x158>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	693a      	ldr	r2, [r7, #16]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d348      	bcc.n	800a966 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8d4:	4b35      	ldr	r3, [pc, #212]	; (800a9ac <xTaskIncrementTick+0x14c>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d104      	bne.n	800a8e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8de:	4b36      	ldr	r3, [pc, #216]	; (800a9b8 <xTaskIncrementTick+0x158>)
 800a8e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a8e4:	601a      	str	r2, [r3, #0]
					break;
 800a8e6:	e03e      	b.n	800a966 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8e8:	4b30      	ldr	r3, [pc, #192]	; (800a9ac <xTaskIncrementTick+0x14c>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	68db      	ldr	r3, [r3, #12]
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a8f8:	693a      	ldr	r2, [r7, #16]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d203      	bcs.n	800a908 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a900:	4a2d      	ldr	r2, [pc, #180]	; (800a9b8 <xTaskIncrementTick+0x158>)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a906:	e02e      	b.n	800a966 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	3304      	adds	r3, #4
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7fe ff11 	bl	8009734 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a916:	2b00      	cmp	r3, #0
 800a918:	d004      	beq.n	800a924 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	3318      	adds	r3, #24
 800a91e:	4618      	mov	r0, r3
 800a920:	f7fe ff08 	bl	8009734 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a928:	2201      	movs	r2, #1
 800a92a:	409a      	lsls	r2, r3
 800a92c:	4b23      	ldr	r3, [pc, #140]	; (800a9bc <xTaskIncrementTick+0x15c>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4313      	orrs	r3, r2
 800a932:	4a22      	ldr	r2, [pc, #136]	; (800a9bc <xTaskIncrementTick+0x15c>)
 800a934:	6013      	str	r3, [r2, #0]
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a93a:	4613      	mov	r3, r2
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	4413      	add	r3, r2
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	4a1f      	ldr	r2, [pc, #124]	; (800a9c0 <xTaskIncrementTick+0x160>)
 800a944:	441a      	add	r2, r3
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	3304      	adds	r3, #4
 800a94a:	4619      	mov	r1, r3
 800a94c:	4610      	mov	r0, r2
 800a94e:	f7fe fe94 	bl	800967a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a956:	4b1b      	ldr	r3, [pc, #108]	; (800a9c4 <xTaskIncrementTick+0x164>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d3b9      	bcc.n	800a8d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a960:	2301      	movs	r3, #1
 800a962:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a964:	e7b6      	b.n	800a8d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a966:	4b17      	ldr	r3, [pc, #92]	; (800a9c4 <xTaskIncrementTick+0x164>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a96c:	4914      	ldr	r1, [pc, #80]	; (800a9c0 <xTaskIncrementTick+0x160>)
 800a96e:	4613      	mov	r3, r2
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	4413      	add	r3, r2
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	440b      	add	r3, r1
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d901      	bls.n	800a982 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a97e:	2301      	movs	r3, #1
 800a980:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a982:	4b11      	ldr	r3, [pc, #68]	; (800a9c8 <xTaskIncrementTick+0x168>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d007      	beq.n	800a99a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a98a:	2301      	movs	r3, #1
 800a98c:	617b      	str	r3, [r7, #20]
 800a98e:	e004      	b.n	800a99a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a990:	4b0e      	ldr	r3, [pc, #56]	; (800a9cc <xTaskIncrementTick+0x16c>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	3301      	adds	r3, #1
 800a996:	4a0d      	ldr	r2, [pc, #52]	; (800a9cc <xTaskIncrementTick+0x16c>)
 800a998:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a99a:	697b      	ldr	r3, [r7, #20]
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3718      	adds	r7, #24
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	2002680c 	.word	0x2002680c
 800a9a8:	200267e8 	.word	0x200267e8
 800a9ac:	2002679c 	.word	0x2002679c
 800a9b0:	200267a0 	.word	0x200267a0
 800a9b4:	200267fc 	.word	0x200267fc
 800a9b8:	20026804 	.word	0x20026804
 800a9bc:	200267ec 	.word	0x200267ec
 800a9c0:	200266e8 	.word	0x200266e8
 800a9c4:	200266e4 	.word	0x200266e4
 800a9c8:	200267f8 	.word	0x200267f8
 800a9cc:	200267f4 	.word	0x200267f4

0800a9d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b087      	sub	sp, #28
 800a9d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a9d6:	4b29      	ldr	r3, [pc, #164]	; (800aa7c <vTaskSwitchContext+0xac>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d003      	beq.n	800a9e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a9de:	4b28      	ldr	r3, [pc, #160]	; (800aa80 <vTaskSwitchContext+0xb0>)
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a9e4:	e044      	b.n	800aa70 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800a9e6:	4b26      	ldr	r3, [pc, #152]	; (800aa80 <vTaskSwitchContext+0xb0>)
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9ec:	4b25      	ldr	r3, [pc, #148]	; (800aa84 <vTaskSwitchContext+0xb4>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	fab3 f383 	clz	r3, r3
 800a9f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a9fa:	7afb      	ldrb	r3, [r7, #11]
 800a9fc:	f1c3 031f 	rsb	r3, r3, #31
 800aa00:	617b      	str	r3, [r7, #20]
 800aa02:	4921      	ldr	r1, [pc, #132]	; (800aa88 <vTaskSwitchContext+0xb8>)
 800aa04:	697a      	ldr	r2, [r7, #20]
 800aa06:	4613      	mov	r3, r2
 800aa08:	009b      	lsls	r3, r3, #2
 800aa0a:	4413      	add	r3, r2
 800aa0c:	009b      	lsls	r3, r3, #2
 800aa0e:	440b      	add	r3, r1
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d10a      	bne.n	800aa2c <vTaskSwitchContext+0x5c>
	__asm volatile
 800aa16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1a:	f383 8811 	msr	BASEPRI, r3
 800aa1e:	f3bf 8f6f 	isb	sy
 800aa22:	f3bf 8f4f 	dsb	sy
 800aa26:	607b      	str	r3, [r7, #4]
}
 800aa28:	bf00      	nop
 800aa2a:	e7fe      	b.n	800aa2a <vTaskSwitchContext+0x5a>
 800aa2c:	697a      	ldr	r2, [r7, #20]
 800aa2e:	4613      	mov	r3, r2
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	4413      	add	r3, r2
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	4a14      	ldr	r2, [pc, #80]	; (800aa88 <vTaskSwitchContext+0xb8>)
 800aa38:	4413      	add	r3, r2
 800aa3a:	613b      	str	r3, [r7, #16]
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	685a      	ldr	r2, [r3, #4]
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	605a      	str	r2, [r3, #4]
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	685a      	ldr	r2, [r3, #4]
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	3308      	adds	r3, #8
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d104      	bne.n	800aa5c <vTaskSwitchContext+0x8c>
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	685a      	ldr	r2, [r3, #4]
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	605a      	str	r2, [r3, #4]
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	4a0a      	ldr	r2, [pc, #40]	; (800aa8c <vTaskSwitchContext+0xbc>)
 800aa64:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aa66:	4b09      	ldr	r3, [pc, #36]	; (800aa8c <vTaskSwitchContext+0xbc>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	334c      	adds	r3, #76	; 0x4c
 800aa6c:	4a08      	ldr	r2, [pc, #32]	; (800aa90 <vTaskSwitchContext+0xc0>)
 800aa6e:	6013      	str	r3, [r2, #0]
}
 800aa70:	bf00      	nop
 800aa72:	371c      	adds	r7, #28
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr
 800aa7c:	2002680c 	.word	0x2002680c
 800aa80:	200267f8 	.word	0x200267f8
 800aa84:	200267ec 	.word	0x200267ec
 800aa88:	200266e8 	.word	0x200266e8
 800aa8c:	200266e4 	.word	0x200266e4
 800aa90:	200000a4 	.word	0x200000a4

0800aa94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d10a      	bne.n	800aaba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800aaa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa8:	f383 8811 	msr	BASEPRI, r3
 800aaac:	f3bf 8f6f 	isb	sy
 800aab0:	f3bf 8f4f 	dsb	sy
 800aab4:	60fb      	str	r3, [r7, #12]
}
 800aab6:	bf00      	nop
 800aab8:	e7fe      	b.n	800aab8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aaba:	4b07      	ldr	r3, [pc, #28]	; (800aad8 <vTaskPlaceOnEventList+0x44>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	3318      	adds	r3, #24
 800aac0:	4619      	mov	r1, r3
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f7fe fdfd 	bl	80096c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aac8:	2101      	movs	r1, #1
 800aaca:	6838      	ldr	r0, [r7, #0]
 800aacc:	f000 fb82 	bl	800b1d4 <prvAddCurrentTaskToDelayedList>
}
 800aad0:	bf00      	nop
 800aad2:	3710      	adds	r7, #16
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	200266e4 	.word	0x200266e4

0800aadc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b086      	sub	sp, #24
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	68db      	ldr	r3, [r3, #12]
 800aaea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d10a      	bne.n	800ab08 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800aaf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf6:	f383 8811 	msr	BASEPRI, r3
 800aafa:	f3bf 8f6f 	isb	sy
 800aafe:	f3bf 8f4f 	dsb	sy
 800ab02:	60fb      	str	r3, [r7, #12]
}
 800ab04:	bf00      	nop
 800ab06:	e7fe      	b.n	800ab06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	3318      	adds	r3, #24
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7fe fe11 	bl	8009734 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab12:	4b1d      	ldr	r3, [pc, #116]	; (800ab88 <xTaskRemoveFromEventList+0xac>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d11c      	bne.n	800ab54 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	3304      	adds	r3, #4
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7fe fe08 	bl	8009734 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab28:	2201      	movs	r2, #1
 800ab2a:	409a      	lsls	r2, r3
 800ab2c:	4b17      	ldr	r3, [pc, #92]	; (800ab8c <xTaskRemoveFromEventList+0xb0>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4313      	orrs	r3, r2
 800ab32:	4a16      	ldr	r2, [pc, #88]	; (800ab8c <xTaskRemoveFromEventList+0xb0>)
 800ab34:	6013      	str	r3, [r2, #0]
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	4413      	add	r3, r2
 800ab40:	009b      	lsls	r3, r3, #2
 800ab42:	4a13      	ldr	r2, [pc, #76]	; (800ab90 <xTaskRemoveFromEventList+0xb4>)
 800ab44:	441a      	add	r2, r3
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	3304      	adds	r3, #4
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	4610      	mov	r0, r2
 800ab4e:	f7fe fd94 	bl	800967a <vListInsertEnd>
 800ab52:	e005      	b.n	800ab60 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	3318      	adds	r3, #24
 800ab58:	4619      	mov	r1, r3
 800ab5a:	480e      	ldr	r0, [pc, #56]	; (800ab94 <xTaskRemoveFromEventList+0xb8>)
 800ab5c:	f7fe fd8d 	bl	800967a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab64:	4b0c      	ldr	r3, [pc, #48]	; (800ab98 <xTaskRemoveFromEventList+0xbc>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d905      	bls.n	800ab7a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ab72:	4b0a      	ldr	r3, [pc, #40]	; (800ab9c <xTaskRemoveFromEventList+0xc0>)
 800ab74:	2201      	movs	r2, #1
 800ab76:	601a      	str	r2, [r3, #0]
 800ab78:	e001      	b.n	800ab7e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ab7e:	697b      	ldr	r3, [r7, #20]
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3718      	adds	r7, #24
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	2002680c 	.word	0x2002680c
 800ab8c:	200267ec 	.word	0x200267ec
 800ab90:	200266e8 	.word	0x200266e8
 800ab94:	200267a4 	.word	0x200267a4
 800ab98:	200266e4 	.word	0x200266e4
 800ab9c:	200267f8 	.word	0x200267f8

0800aba0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aba8:	4b06      	ldr	r3, [pc, #24]	; (800abc4 <vTaskInternalSetTimeOutState+0x24>)
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800abb0:	4b05      	ldr	r3, [pc, #20]	; (800abc8 <vTaskInternalSetTimeOutState+0x28>)
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	605a      	str	r2, [r3, #4]
}
 800abb8:	bf00      	nop
 800abba:	370c      	adds	r7, #12
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr
 800abc4:	200267fc 	.word	0x200267fc
 800abc8:	200267e8 	.word	0x200267e8

0800abcc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b088      	sub	sp, #32
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d10a      	bne.n	800abf2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800abdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe0:	f383 8811 	msr	BASEPRI, r3
 800abe4:	f3bf 8f6f 	isb	sy
 800abe8:	f3bf 8f4f 	dsb	sy
 800abec:	613b      	str	r3, [r7, #16]
}
 800abee:	bf00      	nop
 800abf0:	e7fe      	b.n	800abf0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d10a      	bne.n	800ac0e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800abf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfc:	f383 8811 	msr	BASEPRI, r3
 800ac00:	f3bf 8f6f 	isb	sy
 800ac04:	f3bf 8f4f 	dsb	sy
 800ac08:	60fb      	str	r3, [r7, #12]
}
 800ac0a:	bf00      	nop
 800ac0c:	e7fe      	b.n	800ac0c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ac0e:	f000 fc71 	bl	800b4f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ac12:	4b1d      	ldr	r3, [pc, #116]	; (800ac88 <xTaskCheckForTimeOut+0xbc>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	69ba      	ldr	r2, [r7, #24]
 800ac1e:	1ad3      	subs	r3, r2, r3
 800ac20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac2a:	d102      	bne.n	800ac32 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	61fb      	str	r3, [r7, #28]
 800ac30:	e023      	b.n	800ac7a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	4b15      	ldr	r3, [pc, #84]	; (800ac8c <xTaskCheckForTimeOut+0xc0>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d007      	beq.n	800ac4e <xTaskCheckForTimeOut+0x82>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	69ba      	ldr	r2, [r7, #24]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d302      	bcc.n	800ac4e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	61fb      	str	r3, [r7, #28]
 800ac4c:	e015      	b.n	800ac7a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	697a      	ldr	r2, [r7, #20]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d20b      	bcs.n	800ac70 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	1ad2      	subs	r2, r2, r3
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f7ff ff9b 	bl	800aba0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	61fb      	str	r3, [r7, #28]
 800ac6e:	e004      	b.n	800ac7a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	2200      	movs	r2, #0
 800ac74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ac76:	2301      	movs	r3, #1
 800ac78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ac7a:	f000 fc6b 	bl	800b554 <vPortExitCritical>

	return xReturn;
 800ac7e:	69fb      	ldr	r3, [r7, #28]
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3720      	adds	r7, #32
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	200267e8 	.word	0x200267e8
 800ac8c:	200267fc 	.word	0x200267fc

0800ac90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ac90:	b480      	push	{r7}
 800ac92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ac94:	4b03      	ldr	r3, [pc, #12]	; (800aca4 <vTaskMissedYield+0x14>)
 800ac96:	2201      	movs	r2, #1
 800ac98:	601a      	str	r2, [r3, #0]
}
 800ac9a:	bf00      	nop
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr
 800aca4:	200267f8 	.word	0x200267f8

0800aca8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800acb0:	f000 f852 	bl	800ad58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800acb4:	4b06      	ldr	r3, [pc, #24]	; (800acd0 <prvIdleTask+0x28>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d9f9      	bls.n	800acb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800acbc:	4b05      	ldr	r3, [pc, #20]	; (800acd4 <prvIdleTask+0x2c>)
 800acbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acc2:	601a      	str	r2, [r3, #0]
 800acc4:	f3bf 8f4f 	dsb	sy
 800acc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800accc:	e7f0      	b.n	800acb0 <prvIdleTask+0x8>
 800acce:	bf00      	nop
 800acd0:	200266e8 	.word	0x200266e8
 800acd4:	e000ed04 	.word	0xe000ed04

0800acd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800acde:	2300      	movs	r3, #0
 800ace0:	607b      	str	r3, [r7, #4]
 800ace2:	e00c      	b.n	800acfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	4613      	mov	r3, r2
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	4413      	add	r3, r2
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	4a12      	ldr	r2, [pc, #72]	; (800ad38 <prvInitialiseTaskLists+0x60>)
 800acf0:	4413      	add	r3, r2
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7fe fc94 	bl	8009620 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	3301      	adds	r3, #1
 800acfc:	607b      	str	r3, [r7, #4]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2b06      	cmp	r3, #6
 800ad02:	d9ef      	bls.n	800ace4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ad04:	480d      	ldr	r0, [pc, #52]	; (800ad3c <prvInitialiseTaskLists+0x64>)
 800ad06:	f7fe fc8b 	bl	8009620 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ad0a:	480d      	ldr	r0, [pc, #52]	; (800ad40 <prvInitialiseTaskLists+0x68>)
 800ad0c:	f7fe fc88 	bl	8009620 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ad10:	480c      	ldr	r0, [pc, #48]	; (800ad44 <prvInitialiseTaskLists+0x6c>)
 800ad12:	f7fe fc85 	bl	8009620 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ad16:	480c      	ldr	r0, [pc, #48]	; (800ad48 <prvInitialiseTaskLists+0x70>)
 800ad18:	f7fe fc82 	bl	8009620 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ad1c:	480b      	ldr	r0, [pc, #44]	; (800ad4c <prvInitialiseTaskLists+0x74>)
 800ad1e:	f7fe fc7f 	bl	8009620 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ad22:	4b0b      	ldr	r3, [pc, #44]	; (800ad50 <prvInitialiseTaskLists+0x78>)
 800ad24:	4a05      	ldr	r2, [pc, #20]	; (800ad3c <prvInitialiseTaskLists+0x64>)
 800ad26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ad28:	4b0a      	ldr	r3, [pc, #40]	; (800ad54 <prvInitialiseTaskLists+0x7c>)
 800ad2a:	4a05      	ldr	r2, [pc, #20]	; (800ad40 <prvInitialiseTaskLists+0x68>)
 800ad2c:	601a      	str	r2, [r3, #0]
}
 800ad2e:	bf00      	nop
 800ad30:	3708      	adds	r7, #8
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	200266e8 	.word	0x200266e8
 800ad3c:	20026774 	.word	0x20026774
 800ad40:	20026788 	.word	0x20026788
 800ad44:	200267a4 	.word	0x200267a4
 800ad48:	200267b8 	.word	0x200267b8
 800ad4c:	200267d0 	.word	0x200267d0
 800ad50:	2002679c 	.word	0x2002679c
 800ad54:	200267a0 	.word	0x200267a0

0800ad58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad5e:	e019      	b.n	800ad94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ad60:	f000 fbc8 	bl	800b4f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad64:	4b10      	ldr	r3, [pc, #64]	; (800ada8 <prvCheckTasksWaitingTermination+0x50>)
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	68db      	ldr	r3, [r3, #12]
 800ad6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	3304      	adds	r3, #4
 800ad70:	4618      	mov	r0, r3
 800ad72:	f7fe fcdf 	bl	8009734 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ad76:	4b0d      	ldr	r3, [pc, #52]	; (800adac <prvCheckTasksWaitingTermination+0x54>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	3b01      	subs	r3, #1
 800ad7c:	4a0b      	ldr	r2, [pc, #44]	; (800adac <prvCheckTasksWaitingTermination+0x54>)
 800ad7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ad80:	4b0b      	ldr	r3, [pc, #44]	; (800adb0 <prvCheckTasksWaitingTermination+0x58>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	3b01      	subs	r3, #1
 800ad86:	4a0a      	ldr	r2, [pc, #40]	; (800adb0 <prvCheckTasksWaitingTermination+0x58>)
 800ad88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ad8a:	f000 fbe3 	bl	800b554 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 f810 	bl	800adb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad94:	4b06      	ldr	r3, [pc, #24]	; (800adb0 <prvCheckTasksWaitingTermination+0x58>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d1e1      	bne.n	800ad60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ad9c:	bf00      	nop
 800ad9e:	bf00      	nop
 800ada0:	3708      	adds	r7, #8
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	200267b8 	.word	0x200267b8
 800adac:	200267e4 	.word	0x200267e4
 800adb0:	200267cc 	.word	0x200267cc

0800adb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	334c      	adds	r3, #76	; 0x4c
 800adc0:	4618      	mov	r0, r3
 800adc2:	f001 f849 	bl	800be58 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d108      	bne.n	800ade2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800add4:	4618      	mov	r0, r3
 800add6:	f000 fd7b 	bl	800b8d0 <vPortFree>
				vPortFree( pxTCB );
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 fd78 	bl	800b8d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ade0:	e018      	b.n	800ae14 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d103      	bne.n	800adf4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f000 fd6f 	bl	800b8d0 <vPortFree>
	}
 800adf2:	e00f      	b.n	800ae14 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800adfa:	2b02      	cmp	r3, #2
 800adfc:	d00a      	beq.n	800ae14 <prvDeleteTCB+0x60>
	__asm volatile
 800adfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae02:	f383 8811 	msr	BASEPRI, r3
 800ae06:	f3bf 8f6f 	isb	sy
 800ae0a:	f3bf 8f4f 	dsb	sy
 800ae0e:	60fb      	str	r3, [r7, #12]
}
 800ae10:	bf00      	nop
 800ae12:	e7fe      	b.n	800ae12 <prvDeleteTCB+0x5e>
	}
 800ae14:	bf00      	nop
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae22:	4b0c      	ldr	r3, [pc, #48]	; (800ae54 <prvResetNextTaskUnblockTime+0x38>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d104      	bne.n	800ae36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ae2c:	4b0a      	ldr	r3, [pc, #40]	; (800ae58 <prvResetNextTaskUnblockTime+0x3c>)
 800ae2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ae34:	e008      	b.n	800ae48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae36:	4b07      	ldr	r3, [pc, #28]	; (800ae54 <prvResetNextTaskUnblockTime+0x38>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	4a04      	ldr	r2, [pc, #16]	; (800ae58 <prvResetNextTaskUnblockTime+0x3c>)
 800ae46:	6013      	str	r3, [r2, #0]
}
 800ae48:	bf00      	nop
 800ae4a:	370c      	adds	r7, #12
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr
 800ae54:	2002679c 	.word	0x2002679c
 800ae58:	20026804 	.word	0x20026804

0800ae5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ae62:	4b0b      	ldr	r3, [pc, #44]	; (800ae90 <xTaskGetSchedulerState+0x34>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d102      	bne.n	800ae70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	607b      	str	r3, [r7, #4]
 800ae6e:	e008      	b.n	800ae82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae70:	4b08      	ldr	r3, [pc, #32]	; (800ae94 <xTaskGetSchedulerState+0x38>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d102      	bne.n	800ae7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ae78:	2302      	movs	r3, #2
 800ae7a:	607b      	str	r3, [r7, #4]
 800ae7c:	e001      	b.n	800ae82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ae82:	687b      	ldr	r3, [r7, #4]
	}
 800ae84:	4618      	mov	r0, r3
 800ae86:	370c      	adds	r7, #12
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr
 800ae90:	200267f0 	.word	0x200267f0
 800ae94:	2002680c 	.word	0x2002680c

0800ae98 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800aea4:	2300      	movs	r3, #0
 800aea6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d05e      	beq.n	800af6c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeb2:	4b31      	ldr	r3, [pc, #196]	; (800af78 <xTaskPriorityInherit+0xe0>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d24e      	bcs.n	800af5a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	699b      	ldr	r3, [r3, #24]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	db06      	blt.n	800aed2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aec4:	4b2c      	ldr	r3, [pc, #176]	; (800af78 <xTaskPriorityInherit+0xe0>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeca:	f1c3 0207 	rsb	r2, r3, #7
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	6959      	ldr	r1, [r3, #20]
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeda:	4613      	mov	r3, r2
 800aedc:	009b      	lsls	r3, r3, #2
 800aede:	4413      	add	r3, r2
 800aee0:	009b      	lsls	r3, r3, #2
 800aee2:	4a26      	ldr	r2, [pc, #152]	; (800af7c <xTaskPriorityInherit+0xe4>)
 800aee4:	4413      	add	r3, r2
 800aee6:	4299      	cmp	r1, r3
 800aee8:	d12f      	bne.n	800af4a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	3304      	adds	r3, #4
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7fe fc20 	bl	8009734 <uxListRemove>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d10a      	bne.n	800af10 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aefe:	2201      	movs	r2, #1
 800af00:	fa02 f303 	lsl.w	r3, r2, r3
 800af04:	43da      	mvns	r2, r3
 800af06:	4b1e      	ldr	r3, [pc, #120]	; (800af80 <xTaskPriorityInherit+0xe8>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4013      	ands	r3, r2
 800af0c:	4a1c      	ldr	r2, [pc, #112]	; (800af80 <xTaskPriorityInherit+0xe8>)
 800af0e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800af10:	4b19      	ldr	r3, [pc, #100]	; (800af78 <xTaskPriorityInherit+0xe0>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af1e:	2201      	movs	r2, #1
 800af20:	409a      	lsls	r2, r3
 800af22:	4b17      	ldr	r3, [pc, #92]	; (800af80 <xTaskPriorityInherit+0xe8>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4313      	orrs	r3, r2
 800af28:	4a15      	ldr	r2, [pc, #84]	; (800af80 <xTaskPriorityInherit+0xe8>)
 800af2a:	6013      	str	r3, [r2, #0]
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af30:	4613      	mov	r3, r2
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4413      	add	r3, r2
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	4a10      	ldr	r2, [pc, #64]	; (800af7c <xTaskPriorityInherit+0xe4>)
 800af3a:	441a      	add	r2, r3
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	3304      	adds	r3, #4
 800af40:	4619      	mov	r1, r3
 800af42:	4610      	mov	r0, r2
 800af44:	f7fe fb99 	bl	800967a <vListInsertEnd>
 800af48:	e004      	b.n	800af54 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800af4a:	4b0b      	ldr	r3, [pc, #44]	; (800af78 <xTaskPriorityInherit+0xe0>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800af54:	2301      	movs	r3, #1
 800af56:	60fb      	str	r3, [r7, #12]
 800af58:	e008      	b.n	800af6c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af5e:	4b06      	ldr	r3, [pc, #24]	; (800af78 <xTaskPriorityInherit+0xe0>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af64:	429a      	cmp	r2, r3
 800af66:	d201      	bcs.n	800af6c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800af68:	2301      	movs	r3, #1
 800af6a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800af6c:	68fb      	ldr	r3, [r7, #12]
	}
 800af6e:	4618      	mov	r0, r3
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	200266e4 	.word	0x200266e4
 800af7c:	200266e8 	.word	0x200266e8
 800af80:	200267ec 	.word	0x200267ec

0800af84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800af84:	b580      	push	{r7, lr}
 800af86:	b086      	sub	sp, #24
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800af90:	2300      	movs	r3, #0
 800af92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d06e      	beq.n	800b078 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800af9a:	4b3a      	ldr	r3, [pc, #232]	; (800b084 <xTaskPriorityDisinherit+0x100>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	693a      	ldr	r2, [r7, #16]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d00a      	beq.n	800afba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800afa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa8:	f383 8811 	msr	BASEPRI, r3
 800afac:	f3bf 8f6f 	isb	sy
 800afb0:	f3bf 8f4f 	dsb	sy
 800afb4:	60fb      	str	r3, [r7, #12]
}
 800afb6:	bf00      	nop
 800afb8:	e7fe      	b.n	800afb8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d10a      	bne.n	800afd8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800afc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc6:	f383 8811 	msr	BASEPRI, r3
 800afca:	f3bf 8f6f 	isb	sy
 800afce:	f3bf 8f4f 	dsb	sy
 800afd2:	60bb      	str	r3, [r7, #8]
}
 800afd4:	bf00      	nop
 800afd6:	e7fe      	b.n	800afd6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afdc:	1e5a      	subs	r2, r3, #1
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afea:	429a      	cmp	r2, r3
 800afec:	d044      	beq.n	800b078 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d140      	bne.n	800b078 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	3304      	adds	r3, #4
 800affa:	4618      	mov	r0, r3
 800affc:	f7fe fb9a 	bl	8009734 <uxListRemove>
 800b000:	4603      	mov	r3, r0
 800b002:	2b00      	cmp	r3, #0
 800b004:	d115      	bne.n	800b032 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b00a:	491f      	ldr	r1, [pc, #124]	; (800b088 <xTaskPriorityDisinherit+0x104>)
 800b00c:	4613      	mov	r3, r2
 800b00e:	009b      	lsls	r3, r3, #2
 800b010:	4413      	add	r3, r2
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	440b      	add	r3, r1
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d10a      	bne.n	800b032 <xTaskPriorityDisinherit+0xae>
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b020:	2201      	movs	r2, #1
 800b022:	fa02 f303 	lsl.w	r3, r2, r3
 800b026:	43da      	mvns	r2, r3
 800b028:	4b18      	ldr	r3, [pc, #96]	; (800b08c <xTaskPriorityDisinherit+0x108>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4013      	ands	r3, r2
 800b02e:	4a17      	ldr	r2, [pc, #92]	; (800b08c <xTaskPriorityDisinherit+0x108>)
 800b030:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b03e:	f1c3 0207 	rsb	r2, r3, #7
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b04a:	2201      	movs	r2, #1
 800b04c:	409a      	lsls	r2, r3
 800b04e:	4b0f      	ldr	r3, [pc, #60]	; (800b08c <xTaskPriorityDisinherit+0x108>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4313      	orrs	r3, r2
 800b054:	4a0d      	ldr	r2, [pc, #52]	; (800b08c <xTaskPriorityDisinherit+0x108>)
 800b056:	6013      	str	r3, [r2, #0]
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b05c:	4613      	mov	r3, r2
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	4413      	add	r3, r2
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	4a08      	ldr	r2, [pc, #32]	; (800b088 <xTaskPriorityDisinherit+0x104>)
 800b066:	441a      	add	r2, r3
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	3304      	adds	r3, #4
 800b06c:	4619      	mov	r1, r3
 800b06e:	4610      	mov	r0, r2
 800b070:	f7fe fb03 	bl	800967a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b074:	2301      	movs	r3, #1
 800b076:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b078:	697b      	ldr	r3, [r7, #20]
	}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3718      	adds	r7, #24
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	200266e4 	.word	0x200266e4
 800b088:	200266e8 	.word	0x200266e8
 800b08c:	200267ec 	.word	0x200267ec

0800b090 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b090:	b580      	push	{r7, lr}
 800b092:	b088      	sub	sp, #32
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b09e:	2301      	movs	r3, #1
 800b0a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d077      	beq.n	800b198 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b0a8:	69bb      	ldr	r3, [r7, #24]
 800b0aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d10a      	bne.n	800b0c6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b4:	f383 8811 	msr	BASEPRI, r3
 800b0b8:	f3bf 8f6f 	isb	sy
 800b0bc:	f3bf 8f4f 	dsb	sy
 800b0c0:	60fb      	str	r3, [r7, #12]
}
 800b0c2:	bf00      	nop
 800b0c4:	e7fe      	b.n	800b0c4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b0c6:	69bb      	ldr	r3, [r7, #24]
 800b0c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0ca:	683a      	ldr	r2, [r7, #0]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d902      	bls.n	800b0d6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	61fb      	str	r3, [r7, #28]
 800b0d4:	e002      	b.n	800b0dc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b0d6:	69bb      	ldr	r3, [r7, #24]
 800b0d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0da:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b0dc:	69bb      	ldr	r3, [r7, #24]
 800b0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0e0:	69fa      	ldr	r2, [r7, #28]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d058      	beq.n	800b198 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0ea:	697a      	ldr	r2, [r7, #20]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d153      	bne.n	800b198 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b0f0:	4b2b      	ldr	r3, [pc, #172]	; (800b1a0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	69ba      	ldr	r2, [r7, #24]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d10a      	bne.n	800b110 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fe:	f383 8811 	msr	BASEPRI, r3
 800b102:	f3bf 8f6f 	isb	sy
 800b106:	f3bf 8f4f 	dsb	sy
 800b10a:	60bb      	str	r3, [r7, #8]
}
 800b10c:	bf00      	nop
 800b10e:	e7fe      	b.n	800b10e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b114:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b116:	69bb      	ldr	r3, [r7, #24]
 800b118:	69fa      	ldr	r2, [r7, #28]
 800b11a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b11c:	69bb      	ldr	r3, [r7, #24]
 800b11e:	699b      	ldr	r3, [r3, #24]
 800b120:	2b00      	cmp	r3, #0
 800b122:	db04      	blt.n	800b12e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b124:	69fb      	ldr	r3, [r7, #28]
 800b126:	f1c3 0207 	rsb	r2, r3, #7
 800b12a:	69bb      	ldr	r3, [r7, #24]
 800b12c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b12e:	69bb      	ldr	r3, [r7, #24]
 800b130:	6959      	ldr	r1, [r3, #20]
 800b132:	693a      	ldr	r2, [r7, #16]
 800b134:	4613      	mov	r3, r2
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	4413      	add	r3, r2
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	4a19      	ldr	r2, [pc, #100]	; (800b1a4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b13e:	4413      	add	r3, r2
 800b140:	4299      	cmp	r1, r3
 800b142:	d129      	bne.n	800b198 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b144:	69bb      	ldr	r3, [r7, #24]
 800b146:	3304      	adds	r3, #4
 800b148:	4618      	mov	r0, r3
 800b14a:	f7fe faf3 	bl	8009734 <uxListRemove>
 800b14e:	4603      	mov	r3, r0
 800b150:	2b00      	cmp	r3, #0
 800b152:	d10a      	bne.n	800b16a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b154:	69bb      	ldr	r3, [r7, #24]
 800b156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b158:	2201      	movs	r2, #1
 800b15a:	fa02 f303 	lsl.w	r3, r2, r3
 800b15e:	43da      	mvns	r2, r3
 800b160:	4b11      	ldr	r3, [pc, #68]	; (800b1a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4013      	ands	r3, r2
 800b166:	4a10      	ldr	r2, [pc, #64]	; (800b1a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b168:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b16a:	69bb      	ldr	r3, [r7, #24]
 800b16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b16e:	2201      	movs	r2, #1
 800b170:	409a      	lsls	r2, r3
 800b172:	4b0d      	ldr	r3, [pc, #52]	; (800b1a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4313      	orrs	r3, r2
 800b178:	4a0b      	ldr	r2, [pc, #44]	; (800b1a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b17a:	6013      	str	r3, [r2, #0]
 800b17c:	69bb      	ldr	r3, [r7, #24]
 800b17e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b180:	4613      	mov	r3, r2
 800b182:	009b      	lsls	r3, r3, #2
 800b184:	4413      	add	r3, r2
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	4a06      	ldr	r2, [pc, #24]	; (800b1a4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b18a:	441a      	add	r2, r3
 800b18c:	69bb      	ldr	r3, [r7, #24]
 800b18e:	3304      	adds	r3, #4
 800b190:	4619      	mov	r1, r3
 800b192:	4610      	mov	r0, r2
 800b194:	f7fe fa71 	bl	800967a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b198:	bf00      	nop
 800b19a:	3720      	adds	r7, #32
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	200266e4 	.word	0x200266e4
 800b1a4:	200266e8 	.word	0x200266e8
 800b1a8:	200267ec 	.word	0x200267ec

0800b1ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b1ac:	b480      	push	{r7}
 800b1ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b1b0:	4b07      	ldr	r3, [pc, #28]	; (800b1d0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d004      	beq.n	800b1c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b1b8:	4b05      	ldr	r3, [pc, #20]	; (800b1d0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b1be:	3201      	adds	r2, #1
 800b1c0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800b1c2:	4b03      	ldr	r3, [pc, #12]	; (800b1d0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
	}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr
 800b1d0:	200266e4 	.word	0x200266e4

0800b1d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b1de:	4b29      	ldr	r3, [pc, #164]	; (800b284 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1e4:	4b28      	ldr	r3, [pc, #160]	; (800b288 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	3304      	adds	r3, #4
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7fe faa2 	bl	8009734 <uxListRemove>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d10b      	bne.n	800b20e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b1f6:	4b24      	ldr	r3, [pc, #144]	; (800b288 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b202:	43da      	mvns	r2, r3
 800b204:	4b21      	ldr	r3, [pc, #132]	; (800b28c <prvAddCurrentTaskToDelayedList+0xb8>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4013      	ands	r3, r2
 800b20a:	4a20      	ldr	r2, [pc, #128]	; (800b28c <prvAddCurrentTaskToDelayedList+0xb8>)
 800b20c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b214:	d10a      	bne.n	800b22c <prvAddCurrentTaskToDelayedList+0x58>
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d007      	beq.n	800b22c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b21c:	4b1a      	ldr	r3, [pc, #104]	; (800b288 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	3304      	adds	r3, #4
 800b222:	4619      	mov	r1, r3
 800b224:	481a      	ldr	r0, [pc, #104]	; (800b290 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b226:	f7fe fa28 	bl	800967a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b22a:	e026      	b.n	800b27a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b22c:	68fa      	ldr	r2, [r7, #12]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	4413      	add	r3, r2
 800b232:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b234:	4b14      	ldr	r3, [pc, #80]	; (800b288 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	68ba      	ldr	r2, [r7, #8]
 800b23a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b23c:	68ba      	ldr	r2, [r7, #8]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	429a      	cmp	r2, r3
 800b242:	d209      	bcs.n	800b258 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b244:	4b13      	ldr	r3, [pc, #76]	; (800b294 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b246:	681a      	ldr	r2, [r3, #0]
 800b248:	4b0f      	ldr	r3, [pc, #60]	; (800b288 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	3304      	adds	r3, #4
 800b24e:	4619      	mov	r1, r3
 800b250:	4610      	mov	r0, r2
 800b252:	f7fe fa36 	bl	80096c2 <vListInsert>
}
 800b256:	e010      	b.n	800b27a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b258:	4b0f      	ldr	r3, [pc, #60]	; (800b298 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b25a:	681a      	ldr	r2, [r3, #0]
 800b25c:	4b0a      	ldr	r3, [pc, #40]	; (800b288 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	3304      	adds	r3, #4
 800b262:	4619      	mov	r1, r3
 800b264:	4610      	mov	r0, r2
 800b266:	f7fe fa2c 	bl	80096c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b26a:	4b0c      	ldr	r3, [pc, #48]	; (800b29c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	68ba      	ldr	r2, [r7, #8]
 800b270:	429a      	cmp	r2, r3
 800b272:	d202      	bcs.n	800b27a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b274:	4a09      	ldr	r2, [pc, #36]	; (800b29c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	6013      	str	r3, [r2, #0]
}
 800b27a:	bf00      	nop
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	200267e8 	.word	0x200267e8
 800b288:	200266e4 	.word	0x200266e4
 800b28c:	200267ec 	.word	0x200267ec
 800b290:	200267d0 	.word	0x200267d0
 800b294:	200267a0 	.word	0x200267a0
 800b298:	2002679c 	.word	0x2002679c
 800b29c:	20026804 	.word	0x20026804

0800b2a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b085      	sub	sp, #20
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	3b04      	subs	r3, #4
 800b2b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b2b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	3b04      	subs	r3, #4
 800b2be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	f023 0201 	bic.w	r2, r3, #1
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	3b04      	subs	r3, #4
 800b2ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b2d0:	4a0c      	ldr	r2, [pc, #48]	; (800b304 <pxPortInitialiseStack+0x64>)
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	3b14      	subs	r3, #20
 800b2da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	3b04      	subs	r3, #4
 800b2e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f06f 0202 	mvn.w	r2, #2
 800b2ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	3b20      	subs	r3, #32
 800b2f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3714      	adds	r7, #20
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr
 800b304:	0800b309 	.word	0x0800b309

0800b308 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b308:	b480      	push	{r7}
 800b30a:	b085      	sub	sp, #20
 800b30c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b30e:	2300      	movs	r3, #0
 800b310:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b312:	4b12      	ldr	r3, [pc, #72]	; (800b35c <prvTaskExitError+0x54>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b31a:	d00a      	beq.n	800b332 <prvTaskExitError+0x2a>
	__asm volatile
 800b31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b320:	f383 8811 	msr	BASEPRI, r3
 800b324:	f3bf 8f6f 	isb	sy
 800b328:	f3bf 8f4f 	dsb	sy
 800b32c:	60fb      	str	r3, [r7, #12]
}
 800b32e:	bf00      	nop
 800b330:	e7fe      	b.n	800b330 <prvTaskExitError+0x28>
	__asm volatile
 800b332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b336:	f383 8811 	msr	BASEPRI, r3
 800b33a:	f3bf 8f6f 	isb	sy
 800b33e:	f3bf 8f4f 	dsb	sy
 800b342:	60bb      	str	r3, [r7, #8]
}
 800b344:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b346:	bf00      	nop
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d0fc      	beq.n	800b348 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b34e:	bf00      	nop
 800b350:	bf00      	nop
 800b352:	3714      	adds	r7, #20
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr
 800b35c:	200000a0 	.word	0x200000a0

0800b360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b360:	4b07      	ldr	r3, [pc, #28]	; (800b380 <pxCurrentTCBConst2>)
 800b362:	6819      	ldr	r1, [r3, #0]
 800b364:	6808      	ldr	r0, [r1, #0]
 800b366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b36a:	f380 8809 	msr	PSP, r0
 800b36e:	f3bf 8f6f 	isb	sy
 800b372:	f04f 0000 	mov.w	r0, #0
 800b376:	f380 8811 	msr	BASEPRI, r0
 800b37a:	4770      	bx	lr
 800b37c:	f3af 8000 	nop.w

0800b380 <pxCurrentTCBConst2>:
 800b380:	200266e4 	.word	0x200266e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b384:	bf00      	nop
 800b386:	bf00      	nop

0800b388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b388:	4808      	ldr	r0, [pc, #32]	; (800b3ac <prvPortStartFirstTask+0x24>)
 800b38a:	6800      	ldr	r0, [r0, #0]
 800b38c:	6800      	ldr	r0, [r0, #0]
 800b38e:	f380 8808 	msr	MSP, r0
 800b392:	f04f 0000 	mov.w	r0, #0
 800b396:	f380 8814 	msr	CONTROL, r0
 800b39a:	b662      	cpsie	i
 800b39c:	b661      	cpsie	f
 800b39e:	f3bf 8f4f 	dsb	sy
 800b3a2:	f3bf 8f6f 	isb	sy
 800b3a6:	df00      	svc	0
 800b3a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b3aa:	bf00      	nop
 800b3ac:	e000ed08 	.word	0xe000ed08

0800b3b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b086      	sub	sp, #24
 800b3b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b3b6:	4b46      	ldr	r3, [pc, #280]	; (800b4d0 <xPortStartScheduler+0x120>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4a46      	ldr	r2, [pc, #280]	; (800b4d4 <xPortStartScheduler+0x124>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d10a      	bne.n	800b3d6 <xPortStartScheduler+0x26>
	__asm volatile
 800b3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c4:	f383 8811 	msr	BASEPRI, r3
 800b3c8:	f3bf 8f6f 	isb	sy
 800b3cc:	f3bf 8f4f 	dsb	sy
 800b3d0:	613b      	str	r3, [r7, #16]
}
 800b3d2:	bf00      	nop
 800b3d4:	e7fe      	b.n	800b3d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b3d6:	4b3e      	ldr	r3, [pc, #248]	; (800b4d0 <xPortStartScheduler+0x120>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a3f      	ldr	r2, [pc, #252]	; (800b4d8 <xPortStartScheduler+0x128>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d10a      	bne.n	800b3f6 <xPortStartScheduler+0x46>
	__asm volatile
 800b3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e4:	f383 8811 	msr	BASEPRI, r3
 800b3e8:	f3bf 8f6f 	isb	sy
 800b3ec:	f3bf 8f4f 	dsb	sy
 800b3f0:	60fb      	str	r3, [r7, #12]
}
 800b3f2:	bf00      	nop
 800b3f4:	e7fe      	b.n	800b3f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b3f6:	4b39      	ldr	r3, [pc, #228]	; (800b4dc <xPortStartScheduler+0x12c>)
 800b3f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	22ff      	movs	r2, #255	; 0xff
 800b406:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b410:	78fb      	ldrb	r3, [r7, #3]
 800b412:	b2db      	uxtb	r3, r3
 800b414:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b418:	b2da      	uxtb	r2, r3
 800b41a:	4b31      	ldr	r3, [pc, #196]	; (800b4e0 <xPortStartScheduler+0x130>)
 800b41c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b41e:	4b31      	ldr	r3, [pc, #196]	; (800b4e4 <xPortStartScheduler+0x134>)
 800b420:	2207      	movs	r2, #7
 800b422:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b424:	e009      	b.n	800b43a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b426:	4b2f      	ldr	r3, [pc, #188]	; (800b4e4 <xPortStartScheduler+0x134>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	3b01      	subs	r3, #1
 800b42c:	4a2d      	ldr	r2, [pc, #180]	; (800b4e4 <xPortStartScheduler+0x134>)
 800b42e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b430:	78fb      	ldrb	r3, [r7, #3]
 800b432:	b2db      	uxtb	r3, r3
 800b434:	005b      	lsls	r3, r3, #1
 800b436:	b2db      	uxtb	r3, r3
 800b438:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b43a:	78fb      	ldrb	r3, [r7, #3]
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b442:	2b80      	cmp	r3, #128	; 0x80
 800b444:	d0ef      	beq.n	800b426 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b446:	4b27      	ldr	r3, [pc, #156]	; (800b4e4 <xPortStartScheduler+0x134>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f1c3 0307 	rsb	r3, r3, #7
 800b44e:	2b04      	cmp	r3, #4
 800b450:	d00a      	beq.n	800b468 <xPortStartScheduler+0xb8>
	__asm volatile
 800b452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b456:	f383 8811 	msr	BASEPRI, r3
 800b45a:	f3bf 8f6f 	isb	sy
 800b45e:	f3bf 8f4f 	dsb	sy
 800b462:	60bb      	str	r3, [r7, #8]
}
 800b464:	bf00      	nop
 800b466:	e7fe      	b.n	800b466 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b468:	4b1e      	ldr	r3, [pc, #120]	; (800b4e4 <xPortStartScheduler+0x134>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	021b      	lsls	r3, r3, #8
 800b46e:	4a1d      	ldr	r2, [pc, #116]	; (800b4e4 <xPortStartScheduler+0x134>)
 800b470:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b472:	4b1c      	ldr	r3, [pc, #112]	; (800b4e4 <xPortStartScheduler+0x134>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b47a:	4a1a      	ldr	r2, [pc, #104]	; (800b4e4 <xPortStartScheduler+0x134>)
 800b47c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	b2da      	uxtb	r2, r3
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b486:	4b18      	ldr	r3, [pc, #96]	; (800b4e8 <xPortStartScheduler+0x138>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a17      	ldr	r2, [pc, #92]	; (800b4e8 <xPortStartScheduler+0x138>)
 800b48c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b490:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b492:	4b15      	ldr	r3, [pc, #84]	; (800b4e8 <xPortStartScheduler+0x138>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a14      	ldr	r2, [pc, #80]	; (800b4e8 <xPortStartScheduler+0x138>)
 800b498:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b49c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b49e:	f000 f8dd 	bl	800b65c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b4a2:	4b12      	ldr	r3, [pc, #72]	; (800b4ec <xPortStartScheduler+0x13c>)
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b4a8:	f000 f8fc 	bl	800b6a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b4ac:	4b10      	ldr	r3, [pc, #64]	; (800b4f0 <xPortStartScheduler+0x140>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a0f      	ldr	r2, [pc, #60]	; (800b4f0 <xPortStartScheduler+0x140>)
 800b4b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b4b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b4b8:	f7ff ff66 	bl	800b388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b4bc:	f7ff fa88 	bl	800a9d0 <vTaskSwitchContext>
	prvTaskExitError();
 800b4c0:	f7ff ff22 	bl	800b308 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3718      	adds	r7, #24
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	e000ed00 	.word	0xe000ed00
 800b4d4:	410fc271 	.word	0x410fc271
 800b4d8:	410fc270 	.word	0x410fc270
 800b4dc:	e000e400 	.word	0xe000e400
 800b4e0:	20026810 	.word	0x20026810
 800b4e4:	20026814 	.word	0x20026814
 800b4e8:	e000ed20 	.word	0xe000ed20
 800b4ec:	200000a0 	.word	0x200000a0
 800b4f0:	e000ef34 	.word	0xe000ef34

0800b4f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
	__asm volatile
 800b4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fe:	f383 8811 	msr	BASEPRI, r3
 800b502:	f3bf 8f6f 	isb	sy
 800b506:	f3bf 8f4f 	dsb	sy
 800b50a:	607b      	str	r3, [r7, #4]
}
 800b50c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b50e:	4b0f      	ldr	r3, [pc, #60]	; (800b54c <vPortEnterCritical+0x58>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	3301      	adds	r3, #1
 800b514:	4a0d      	ldr	r2, [pc, #52]	; (800b54c <vPortEnterCritical+0x58>)
 800b516:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b518:	4b0c      	ldr	r3, [pc, #48]	; (800b54c <vPortEnterCritical+0x58>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d10f      	bne.n	800b540 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b520:	4b0b      	ldr	r3, [pc, #44]	; (800b550 <vPortEnterCritical+0x5c>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	b2db      	uxtb	r3, r3
 800b526:	2b00      	cmp	r3, #0
 800b528:	d00a      	beq.n	800b540 <vPortEnterCritical+0x4c>
	__asm volatile
 800b52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b52e:	f383 8811 	msr	BASEPRI, r3
 800b532:	f3bf 8f6f 	isb	sy
 800b536:	f3bf 8f4f 	dsb	sy
 800b53a:	603b      	str	r3, [r7, #0]
}
 800b53c:	bf00      	nop
 800b53e:	e7fe      	b.n	800b53e <vPortEnterCritical+0x4a>
	}
}
 800b540:	bf00      	nop
 800b542:	370c      	adds	r7, #12
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr
 800b54c:	200000a0 	.word	0x200000a0
 800b550:	e000ed04 	.word	0xe000ed04

0800b554 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b554:	b480      	push	{r7}
 800b556:	b083      	sub	sp, #12
 800b558:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b55a:	4b12      	ldr	r3, [pc, #72]	; (800b5a4 <vPortExitCritical+0x50>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d10a      	bne.n	800b578 <vPortExitCritical+0x24>
	__asm volatile
 800b562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b566:	f383 8811 	msr	BASEPRI, r3
 800b56a:	f3bf 8f6f 	isb	sy
 800b56e:	f3bf 8f4f 	dsb	sy
 800b572:	607b      	str	r3, [r7, #4]
}
 800b574:	bf00      	nop
 800b576:	e7fe      	b.n	800b576 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b578:	4b0a      	ldr	r3, [pc, #40]	; (800b5a4 <vPortExitCritical+0x50>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	3b01      	subs	r3, #1
 800b57e:	4a09      	ldr	r2, [pc, #36]	; (800b5a4 <vPortExitCritical+0x50>)
 800b580:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b582:	4b08      	ldr	r3, [pc, #32]	; (800b5a4 <vPortExitCritical+0x50>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d105      	bne.n	800b596 <vPortExitCritical+0x42>
 800b58a:	2300      	movs	r3, #0
 800b58c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	f383 8811 	msr	BASEPRI, r3
}
 800b594:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b596:	bf00      	nop
 800b598:	370c      	adds	r7, #12
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop
 800b5a4:	200000a0 	.word	0x200000a0
	...

0800b5b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b5b0:	f3ef 8009 	mrs	r0, PSP
 800b5b4:	f3bf 8f6f 	isb	sy
 800b5b8:	4b15      	ldr	r3, [pc, #84]	; (800b610 <pxCurrentTCBConst>)
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	f01e 0f10 	tst.w	lr, #16
 800b5c0:	bf08      	it	eq
 800b5c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b5c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ca:	6010      	str	r0, [r2, #0]
 800b5cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b5d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b5d4:	f380 8811 	msr	BASEPRI, r0
 800b5d8:	f3bf 8f4f 	dsb	sy
 800b5dc:	f3bf 8f6f 	isb	sy
 800b5e0:	f7ff f9f6 	bl	800a9d0 <vTaskSwitchContext>
 800b5e4:	f04f 0000 	mov.w	r0, #0
 800b5e8:	f380 8811 	msr	BASEPRI, r0
 800b5ec:	bc09      	pop	{r0, r3}
 800b5ee:	6819      	ldr	r1, [r3, #0]
 800b5f0:	6808      	ldr	r0, [r1, #0]
 800b5f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f6:	f01e 0f10 	tst.w	lr, #16
 800b5fa:	bf08      	it	eq
 800b5fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b600:	f380 8809 	msr	PSP, r0
 800b604:	f3bf 8f6f 	isb	sy
 800b608:	4770      	bx	lr
 800b60a:	bf00      	nop
 800b60c:	f3af 8000 	nop.w

0800b610 <pxCurrentTCBConst>:
 800b610:	200266e4 	.word	0x200266e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b614:	bf00      	nop
 800b616:	bf00      	nop

0800b618 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b082      	sub	sp, #8
 800b61c:	af00      	add	r7, sp, #0
	__asm volatile
 800b61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b622:	f383 8811 	msr	BASEPRI, r3
 800b626:	f3bf 8f6f 	isb	sy
 800b62a:	f3bf 8f4f 	dsb	sy
 800b62e:	607b      	str	r3, [r7, #4]
}
 800b630:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b632:	f7ff f915 	bl	800a860 <xTaskIncrementTick>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d003      	beq.n	800b644 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b63c:	4b06      	ldr	r3, [pc, #24]	; (800b658 <SysTick_Handler+0x40>)
 800b63e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b642:	601a      	str	r2, [r3, #0]
 800b644:	2300      	movs	r3, #0
 800b646:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	f383 8811 	msr	BASEPRI, r3
}
 800b64e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b650:	bf00      	nop
 800b652:	3708      	adds	r7, #8
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}
 800b658:	e000ed04 	.word	0xe000ed04

0800b65c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b65c:	b480      	push	{r7}
 800b65e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b660:	4b0b      	ldr	r3, [pc, #44]	; (800b690 <vPortSetupTimerInterrupt+0x34>)
 800b662:	2200      	movs	r2, #0
 800b664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b666:	4b0b      	ldr	r3, [pc, #44]	; (800b694 <vPortSetupTimerInterrupt+0x38>)
 800b668:	2200      	movs	r2, #0
 800b66a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b66c:	4b0a      	ldr	r3, [pc, #40]	; (800b698 <vPortSetupTimerInterrupt+0x3c>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a0a      	ldr	r2, [pc, #40]	; (800b69c <vPortSetupTimerInterrupt+0x40>)
 800b672:	fba2 2303 	umull	r2, r3, r2, r3
 800b676:	099b      	lsrs	r3, r3, #6
 800b678:	4a09      	ldr	r2, [pc, #36]	; (800b6a0 <vPortSetupTimerInterrupt+0x44>)
 800b67a:	3b01      	subs	r3, #1
 800b67c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b67e:	4b04      	ldr	r3, [pc, #16]	; (800b690 <vPortSetupTimerInterrupt+0x34>)
 800b680:	2207      	movs	r2, #7
 800b682:	601a      	str	r2, [r3, #0]
}
 800b684:	bf00      	nop
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr
 800b68e:	bf00      	nop
 800b690:	e000e010 	.word	0xe000e010
 800b694:	e000e018 	.word	0xe000e018
 800b698:	20000014 	.word	0x20000014
 800b69c:	10624dd3 	.word	0x10624dd3
 800b6a0:	e000e014 	.word	0xe000e014

0800b6a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b6a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b6b4 <vPortEnableVFP+0x10>
 800b6a8:	6801      	ldr	r1, [r0, #0]
 800b6aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b6ae:	6001      	str	r1, [r0, #0]
 800b6b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b6b2:	bf00      	nop
 800b6b4:	e000ed88 	.word	0xe000ed88

0800b6b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b085      	sub	sp, #20
 800b6bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b6be:	f3ef 8305 	mrs	r3, IPSR
 800b6c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2b0f      	cmp	r3, #15
 800b6c8:	d914      	bls.n	800b6f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b6ca:	4a17      	ldr	r2, [pc, #92]	; (800b728 <vPortValidateInterruptPriority+0x70>)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	4413      	add	r3, r2
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b6d4:	4b15      	ldr	r3, [pc, #84]	; (800b72c <vPortValidateInterruptPriority+0x74>)
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	7afa      	ldrb	r2, [r7, #11]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d20a      	bcs.n	800b6f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e2:	f383 8811 	msr	BASEPRI, r3
 800b6e6:	f3bf 8f6f 	isb	sy
 800b6ea:	f3bf 8f4f 	dsb	sy
 800b6ee:	607b      	str	r3, [r7, #4]
}
 800b6f0:	bf00      	nop
 800b6f2:	e7fe      	b.n	800b6f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b6f4:	4b0e      	ldr	r3, [pc, #56]	; (800b730 <vPortValidateInterruptPriority+0x78>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b6fc:	4b0d      	ldr	r3, [pc, #52]	; (800b734 <vPortValidateInterruptPriority+0x7c>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	429a      	cmp	r2, r3
 800b702:	d90a      	bls.n	800b71a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b708:	f383 8811 	msr	BASEPRI, r3
 800b70c:	f3bf 8f6f 	isb	sy
 800b710:	f3bf 8f4f 	dsb	sy
 800b714:	603b      	str	r3, [r7, #0]
}
 800b716:	bf00      	nop
 800b718:	e7fe      	b.n	800b718 <vPortValidateInterruptPriority+0x60>
	}
 800b71a:	bf00      	nop
 800b71c:	3714      	adds	r7, #20
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr
 800b726:	bf00      	nop
 800b728:	e000e3f0 	.word	0xe000e3f0
 800b72c:	20026810 	.word	0x20026810
 800b730:	e000ed0c 	.word	0xe000ed0c
 800b734:	20026814 	.word	0x20026814

0800b738 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b08a      	sub	sp, #40	; 0x28
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b740:	2300      	movs	r3, #0
 800b742:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b744:	f7fe ffe2 	bl	800a70c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b748:	4b5b      	ldr	r3, [pc, #364]	; (800b8b8 <pvPortMalloc+0x180>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d101      	bne.n	800b754 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b750:	f000 f920 	bl	800b994 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b754:	4b59      	ldr	r3, [pc, #356]	; (800b8bc <pvPortMalloc+0x184>)
 800b756:	681a      	ldr	r2, [r3, #0]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	4013      	ands	r3, r2
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	f040 8093 	bne.w	800b888 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d01d      	beq.n	800b7a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b768:	2208      	movs	r2, #8
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	4413      	add	r3, r2
 800b76e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f003 0307 	and.w	r3, r3, #7
 800b776:	2b00      	cmp	r3, #0
 800b778:	d014      	beq.n	800b7a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f023 0307 	bic.w	r3, r3, #7
 800b780:	3308      	adds	r3, #8
 800b782:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f003 0307 	and.w	r3, r3, #7
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d00a      	beq.n	800b7a4 <pvPortMalloc+0x6c>
	__asm volatile
 800b78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b792:	f383 8811 	msr	BASEPRI, r3
 800b796:	f3bf 8f6f 	isb	sy
 800b79a:	f3bf 8f4f 	dsb	sy
 800b79e:	617b      	str	r3, [r7, #20]
}
 800b7a0:	bf00      	nop
 800b7a2:	e7fe      	b.n	800b7a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d06e      	beq.n	800b888 <pvPortMalloc+0x150>
 800b7aa:	4b45      	ldr	r3, [pc, #276]	; (800b8c0 <pvPortMalloc+0x188>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d869      	bhi.n	800b888 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b7b4:	4b43      	ldr	r3, [pc, #268]	; (800b8c4 <pvPortMalloc+0x18c>)
 800b7b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b7b8:	4b42      	ldr	r3, [pc, #264]	; (800b8c4 <pvPortMalloc+0x18c>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7be:	e004      	b.n	800b7ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d903      	bls.n	800b7dc <pvPortMalloc+0xa4>
 800b7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d1f1      	bne.n	800b7c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b7dc:	4b36      	ldr	r3, [pc, #216]	; (800b8b8 <pvPortMalloc+0x180>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d050      	beq.n	800b888 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b7e6:	6a3b      	ldr	r3, [r7, #32]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	2208      	movs	r2, #8
 800b7ec:	4413      	add	r3, r2
 800b7ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f2:	681a      	ldr	r2, [r3, #0]
 800b7f4:	6a3b      	ldr	r3, [r7, #32]
 800b7f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fa:	685a      	ldr	r2, [r3, #4]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	1ad2      	subs	r2, r2, r3
 800b800:	2308      	movs	r3, #8
 800b802:	005b      	lsls	r3, r3, #1
 800b804:	429a      	cmp	r2, r3
 800b806:	d91f      	bls.n	800b848 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4413      	add	r3, r2
 800b80e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b810:	69bb      	ldr	r3, [r7, #24]
 800b812:	f003 0307 	and.w	r3, r3, #7
 800b816:	2b00      	cmp	r3, #0
 800b818:	d00a      	beq.n	800b830 <pvPortMalloc+0xf8>
	__asm volatile
 800b81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b81e:	f383 8811 	msr	BASEPRI, r3
 800b822:	f3bf 8f6f 	isb	sy
 800b826:	f3bf 8f4f 	dsb	sy
 800b82a:	613b      	str	r3, [r7, #16]
}
 800b82c:	bf00      	nop
 800b82e:	e7fe      	b.n	800b82e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b832:	685a      	ldr	r2, [r3, #4]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	1ad2      	subs	r2, r2, r3
 800b838:	69bb      	ldr	r3, [r7, #24]
 800b83a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b842:	69b8      	ldr	r0, [r7, #24]
 800b844:	f000 f908 	bl	800ba58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b848:	4b1d      	ldr	r3, [pc, #116]	; (800b8c0 <pvPortMalloc+0x188>)
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	1ad3      	subs	r3, r2, r3
 800b852:	4a1b      	ldr	r2, [pc, #108]	; (800b8c0 <pvPortMalloc+0x188>)
 800b854:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b856:	4b1a      	ldr	r3, [pc, #104]	; (800b8c0 <pvPortMalloc+0x188>)
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	4b1b      	ldr	r3, [pc, #108]	; (800b8c8 <pvPortMalloc+0x190>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d203      	bcs.n	800b86a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b862:	4b17      	ldr	r3, [pc, #92]	; (800b8c0 <pvPortMalloc+0x188>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a18      	ldr	r2, [pc, #96]	; (800b8c8 <pvPortMalloc+0x190>)
 800b868:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86c:	685a      	ldr	r2, [r3, #4]
 800b86e:	4b13      	ldr	r3, [pc, #76]	; (800b8bc <pvPortMalloc+0x184>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	431a      	orrs	r2, r3
 800b874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b876:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87a:	2200      	movs	r2, #0
 800b87c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b87e:	4b13      	ldr	r3, [pc, #76]	; (800b8cc <pvPortMalloc+0x194>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	3301      	adds	r3, #1
 800b884:	4a11      	ldr	r2, [pc, #68]	; (800b8cc <pvPortMalloc+0x194>)
 800b886:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b888:	f7fe ff4e 	bl	800a728 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b88c:	69fb      	ldr	r3, [r7, #28]
 800b88e:	f003 0307 	and.w	r3, r3, #7
 800b892:	2b00      	cmp	r3, #0
 800b894:	d00a      	beq.n	800b8ac <pvPortMalloc+0x174>
	__asm volatile
 800b896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89a:	f383 8811 	msr	BASEPRI, r3
 800b89e:	f3bf 8f6f 	isb	sy
 800b8a2:	f3bf 8f4f 	dsb	sy
 800b8a6:	60fb      	str	r3, [r7, #12]
}
 800b8a8:	bf00      	nop
 800b8aa:	e7fe      	b.n	800b8aa <pvPortMalloc+0x172>
	return pvReturn;
 800b8ac:	69fb      	ldr	r3, [r7, #28]
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3728      	adds	r7, #40	; 0x28
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	2002e820 	.word	0x2002e820
 800b8bc:	2002e834 	.word	0x2002e834
 800b8c0:	2002e824 	.word	0x2002e824
 800b8c4:	2002e818 	.word	0x2002e818
 800b8c8:	2002e828 	.word	0x2002e828
 800b8cc:	2002e82c 	.word	0x2002e82c

0800b8d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b086      	sub	sp, #24
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d04d      	beq.n	800b97e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b8e2:	2308      	movs	r3, #8
 800b8e4:	425b      	negs	r3, r3
 800b8e6:	697a      	ldr	r2, [r7, #20]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	685a      	ldr	r2, [r3, #4]
 800b8f4:	4b24      	ldr	r3, [pc, #144]	; (800b988 <vPortFree+0xb8>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4013      	ands	r3, r2
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d10a      	bne.n	800b914 <vPortFree+0x44>
	__asm volatile
 800b8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b902:	f383 8811 	msr	BASEPRI, r3
 800b906:	f3bf 8f6f 	isb	sy
 800b90a:	f3bf 8f4f 	dsb	sy
 800b90e:	60fb      	str	r3, [r7, #12]
}
 800b910:	bf00      	nop
 800b912:	e7fe      	b.n	800b912 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d00a      	beq.n	800b932 <vPortFree+0x62>
	__asm volatile
 800b91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b920:	f383 8811 	msr	BASEPRI, r3
 800b924:	f3bf 8f6f 	isb	sy
 800b928:	f3bf 8f4f 	dsb	sy
 800b92c:	60bb      	str	r3, [r7, #8]
}
 800b92e:	bf00      	nop
 800b930:	e7fe      	b.n	800b930 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	685a      	ldr	r2, [r3, #4]
 800b936:	4b14      	ldr	r3, [pc, #80]	; (800b988 <vPortFree+0xb8>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	4013      	ands	r3, r2
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d01e      	beq.n	800b97e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d11a      	bne.n	800b97e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	685a      	ldr	r2, [r3, #4]
 800b94c:	4b0e      	ldr	r3, [pc, #56]	; (800b988 <vPortFree+0xb8>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	43db      	mvns	r3, r3
 800b952:	401a      	ands	r2, r3
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b958:	f7fe fed8 	bl	800a70c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	685a      	ldr	r2, [r3, #4]
 800b960:	4b0a      	ldr	r3, [pc, #40]	; (800b98c <vPortFree+0xbc>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4413      	add	r3, r2
 800b966:	4a09      	ldr	r2, [pc, #36]	; (800b98c <vPortFree+0xbc>)
 800b968:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b96a:	6938      	ldr	r0, [r7, #16]
 800b96c:	f000 f874 	bl	800ba58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b970:	4b07      	ldr	r3, [pc, #28]	; (800b990 <vPortFree+0xc0>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	3301      	adds	r3, #1
 800b976:	4a06      	ldr	r2, [pc, #24]	; (800b990 <vPortFree+0xc0>)
 800b978:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b97a:	f7fe fed5 	bl	800a728 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b97e:	bf00      	nop
 800b980:	3718      	adds	r7, #24
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	2002e834 	.word	0x2002e834
 800b98c:	2002e824 	.word	0x2002e824
 800b990:	2002e830 	.word	0x2002e830

0800b994 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b994:	b480      	push	{r7}
 800b996:	b085      	sub	sp, #20
 800b998:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b99a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b99e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b9a0:	4b27      	ldr	r3, [pc, #156]	; (800ba40 <prvHeapInit+0xac>)
 800b9a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f003 0307 	and.w	r3, r3, #7
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d00c      	beq.n	800b9c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	3307      	adds	r3, #7
 800b9b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f023 0307 	bic.w	r3, r3, #7
 800b9ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b9bc:	68ba      	ldr	r2, [r7, #8]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	1ad3      	subs	r3, r2, r3
 800b9c2:	4a1f      	ldr	r2, [pc, #124]	; (800ba40 <prvHeapInit+0xac>)
 800b9c4:	4413      	add	r3, r2
 800b9c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b9cc:	4a1d      	ldr	r2, [pc, #116]	; (800ba44 <prvHeapInit+0xb0>)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b9d2:	4b1c      	ldr	r3, [pc, #112]	; (800ba44 <prvHeapInit+0xb0>)
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	68ba      	ldr	r2, [r7, #8]
 800b9dc:	4413      	add	r3, r2
 800b9de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b9e0:	2208      	movs	r2, #8
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	1a9b      	subs	r3, r3, r2
 800b9e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f023 0307 	bic.w	r3, r3, #7
 800b9ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	4a15      	ldr	r2, [pc, #84]	; (800ba48 <prvHeapInit+0xb4>)
 800b9f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b9f6:	4b14      	ldr	r3, [pc, #80]	; (800ba48 <prvHeapInit+0xb4>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b9fe:	4b12      	ldr	r3, [pc, #72]	; (800ba48 <prvHeapInit+0xb4>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2200      	movs	r2, #0
 800ba04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	68fa      	ldr	r2, [r7, #12]
 800ba0e:	1ad2      	subs	r2, r2, r3
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba14:	4b0c      	ldr	r3, [pc, #48]	; (800ba48 <prvHeapInit+0xb4>)
 800ba16:	681a      	ldr	r2, [r3, #0]
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	4a0a      	ldr	r2, [pc, #40]	; (800ba4c <prvHeapInit+0xb8>)
 800ba22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	4a09      	ldr	r2, [pc, #36]	; (800ba50 <prvHeapInit+0xbc>)
 800ba2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ba2c:	4b09      	ldr	r3, [pc, #36]	; (800ba54 <prvHeapInit+0xc0>)
 800ba2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ba32:	601a      	str	r2, [r3, #0]
}
 800ba34:	bf00      	nop
 800ba36:	3714      	adds	r7, #20
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr
 800ba40:	20026818 	.word	0x20026818
 800ba44:	2002e818 	.word	0x2002e818
 800ba48:	2002e820 	.word	0x2002e820
 800ba4c:	2002e828 	.word	0x2002e828
 800ba50:	2002e824 	.word	0x2002e824
 800ba54:	2002e834 	.word	0x2002e834

0800ba58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ba60:	4b28      	ldr	r3, [pc, #160]	; (800bb04 <prvInsertBlockIntoFreeList+0xac>)
 800ba62:	60fb      	str	r3, [r7, #12]
 800ba64:	e002      	b.n	800ba6c <prvInsertBlockIntoFreeList+0x14>
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	60fb      	str	r3, [r7, #12]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d8f7      	bhi.n	800ba66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	68ba      	ldr	r2, [r7, #8]
 800ba80:	4413      	add	r3, r2
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d108      	bne.n	800ba9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	685a      	ldr	r2, [r3, #4]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	441a      	add	r2, r3
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	68ba      	ldr	r2, [r7, #8]
 800baa4:	441a      	add	r2, r3
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	429a      	cmp	r2, r3
 800baac:	d118      	bne.n	800bae0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	4b15      	ldr	r3, [pc, #84]	; (800bb08 <prvInsertBlockIntoFreeList+0xb0>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d00d      	beq.n	800bad6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	685a      	ldr	r2, [r3, #4]
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	441a      	add	r2, r3
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	601a      	str	r2, [r3, #0]
 800bad4:	e008      	b.n	800bae8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bad6:	4b0c      	ldr	r3, [pc, #48]	; (800bb08 <prvInsertBlockIntoFreeList+0xb0>)
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	601a      	str	r2, [r3, #0]
 800bade:	e003      	b.n	800bae8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bae8:	68fa      	ldr	r2, [r7, #12]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	429a      	cmp	r2, r3
 800baee:	d002      	beq.n	800baf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800baf6:	bf00      	nop
 800baf8:	3714      	adds	r7, #20
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr
 800bb02:	bf00      	nop
 800bb04:	2002e818 	.word	0x2002e818
 800bb08:	2002e820 	.word	0x2002e820

0800bb0c <atoi>:
 800bb0c:	220a      	movs	r2, #10
 800bb0e:	2100      	movs	r1, #0
 800bb10:	f000 bba4 	b.w	800c25c <strtol>

0800bb14 <__errno>:
 800bb14:	4b01      	ldr	r3, [pc, #4]	; (800bb1c <__errno+0x8>)
 800bb16:	6818      	ldr	r0, [r3, #0]
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop
 800bb1c:	200000a4 	.word	0x200000a4

0800bb20 <std>:
 800bb20:	2300      	movs	r3, #0
 800bb22:	b510      	push	{r4, lr}
 800bb24:	4604      	mov	r4, r0
 800bb26:	e9c0 3300 	strd	r3, r3, [r0]
 800bb2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb2e:	6083      	str	r3, [r0, #8]
 800bb30:	8181      	strh	r1, [r0, #12]
 800bb32:	6643      	str	r3, [r0, #100]	; 0x64
 800bb34:	81c2      	strh	r2, [r0, #14]
 800bb36:	6183      	str	r3, [r0, #24]
 800bb38:	4619      	mov	r1, r3
 800bb3a:	2208      	movs	r2, #8
 800bb3c:	305c      	adds	r0, #92	; 0x5c
 800bb3e:	f000 f91a 	bl	800bd76 <memset>
 800bb42:	4b05      	ldr	r3, [pc, #20]	; (800bb58 <std+0x38>)
 800bb44:	6263      	str	r3, [r4, #36]	; 0x24
 800bb46:	4b05      	ldr	r3, [pc, #20]	; (800bb5c <std+0x3c>)
 800bb48:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb4a:	4b05      	ldr	r3, [pc, #20]	; (800bb60 <std+0x40>)
 800bb4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb4e:	4b05      	ldr	r3, [pc, #20]	; (800bb64 <std+0x44>)
 800bb50:	6224      	str	r4, [r4, #32]
 800bb52:	6323      	str	r3, [r4, #48]	; 0x30
 800bb54:	bd10      	pop	{r4, pc}
 800bb56:	bf00      	nop
 800bb58:	0800bfd9 	.word	0x0800bfd9
 800bb5c:	0800bffb 	.word	0x0800bffb
 800bb60:	0800c033 	.word	0x0800c033
 800bb64:	0800c057 	.word	0x0800c057

0800bb68 <_cleanup_r>:
 800bb68:	4901      	ldr	r1, [pc, #4]	; (800bb70 <_cleanup_r+0x8>)
 800bb6a:	f000 b8af 	b.w	800bccc <_fwalk_reent>
 800bb6e:	bf00      	nop
 800bb70:	0800c3fd 	.word	0x0800c3fd

0800bb74 <__sfmoreglue>:
 800bb74:	b570      	push	{r4, r5, r6, lr}
 800bb76:	1e4a      	subs	r2, r1, #1
 800bb78:	2568      	movs	r5, #104	; 0x68
 800bb7a:	4355      	muls	r5, r2
 800bb7c:	460e      	mov	r6, r1
 800bb7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bb82:	f000 f901 	bl	800bd88 <_malloc_r>
 800bb86:	4604      	mov	r4, r0
 800bb88:	b140      	cbz	r0, 800bb9c <__sfmoreglue+0x28>
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	e9c0 1600 	strd	r1, r6, [r0]
 800bb90:	300c      	adds	r0, #12
 800bb92:	60a0      	str	r0, [r4, #8]
 800bb94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bb98:	f000 f8ed 	bl	800bd76 <memset>
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	bd70      	pop	{r4, r5, r6, pc}

0800bba0 <__sfp_lock_acquire>:
 800bba0:	4801      	ldr	r0, [pc, #4]	; (800bba8 <__sfp_lock_acquire+0x8>)
 800bba2:	f000 b8d8 	b.w	800bd56 <__retarget_lock_acquire_recursive>
 800bba6:	bf00      	nop
 800bba8:	2002f70c 	.word	0x2002f70c

0800bbac <__sfp_lock_release>:
 800bbac:	4801      	ldr	r0, [pc, #4]	; (800bbb4 <__sfp_lock_release+0x8>)
 800bbae:	f000 b8d3 	b.w	800bd58 <__retarget_lock_release_recursive>
 800bbb2:	bf00      	nop
 800bbb4:	2002f70c 	.word	0x2002f70c

0800bbb8 <__sinit_lock_acquire>:
 800bbb8:	4801      	ldr	r0, [pc, #4]	; (800bbc0 <__sinit_lock_acquire+0x8>)
 800bbba:	f000 b8cc 	b.w	800bd56 <__retarget_lock_acquire_recursive>
 800bbbe:	bf00      	nop
 800bbc0:	2002f707 	.word	0x2002f707

0800bbc4 <__sinit_lock_release>:
 800bbc4:	4801      	ldr	r0, [pc, #4]	; (800bbcc <__sinit_lock_release+0x8>)
 800bbc6:	f000 b8c7 	b.w	800bd58 <__retarget_lock_release_recursive>
 800bbca:	bf00      	nop
 800bbcc:	2002f707 	.word	0x2002f707

0800bbd0 <__sinit>:
 800bbd0:	b510      	push	{r4, lr}
 800bbd2:	4604      	mov	r4, r0
 800bbd4:	f7ff fff0 	bl	800bbb8 <__sinit_lock_acquire>
 800bbd8:	69a3      	ldr	r3, [r4, #24]
 800bbda:	b11b      	cbz	r3, 800bbe4 <__sinit+0x14>
 800bbdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbe0:	f7ff bff0 	b.w	800bbc4 <__sinit_lock_release>
 800bbe4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bbe8:	6523      	str	r3, [r4, #80]	; 0x50
 800bbea:	4b13      	ldr	r3, [pc, #76]	; (800bc38 <__sinit+0x68>)
 800bbec:	4a13      	ldr	r2, [pc, #76]	; (800bc3c <__sinit+0x6c>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	62a2      	str	r2, [r4, #40]	; 0x28
 800bbf2:	42a3      	cmp	r3, r4
 800bbf4:	bf04      	itt	eq
 800bbf6:	2301      	moveq	r3, #1
 800bbf8:	61a3      	streq	r3, [r4, #24]
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	f000 f820 	bl	800bc40 <__sfp>
 800bc00:	6060      	str	r0, [r4, #4]
 800bc02:	4620      	mov	r0, r4
 800bc04:	f000 f81c 	bl	800bc40 <__sfp>
 800bc08:	60a0      	str	r0, [r4, #8]
 800bc0a:	4620      	mov	r0, r4
 800bc0c:	f000 f818 	bl	800bc40 <__sfp>
 800bc10:	2200      	movs	r2, #0
 800bc12:	60e0      	str	r0, [r4, #12]
 800bc14:	2104      	movs	r1, #4
 800bc16:	6860      	ldr	r0, [r4, #4]
 800bc18:	f7ff ff82 	bl	800bb20 <std>
 800bc1c:	68a0      	ldr	r0, [r4, #8]
 800bc1e:	2201      	movs	r2, #1
 800bc20:	2109      	movs	r1, #9
 800bc22:	f7ff ff7d 	bl	800bb20 <std>
 800bc26:	68e0      	ldr	r0, [r4, #12]
 800bc28:	2202      	movs	r2, #2
 800bc2a:	2112      	movs	r1, #18
 800bc2c:	f7ff ff78 	bl	800bb20 <std>
 800bc30:	2301      	movs	r3, #1
 800bc32:	61a3      	str	r3, [r4, #24]
 800bc34:	e7d2      	b.n	800bbdc <__sinit+0xc>
 800bc36:	bf00      	nop
 800bc38:	08010e48 	.word	0x08010e48
 800bc3c:	0800bb69 	.word	0x0800bb69

0800bc40 <__sfp>:
 800bc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc42:	4607      	mov	r7, r0
 800bc44:	f7ff ffac 	bl	800bba0 <__sfp_lock_acquire>
 800bc48:	4b1e      	ldr	r3, [pc, #120]	; (800bcc4 <__sfp+0x84>)
 800bc4a:	681e      	ldr	r6, [r3, #0]
 800bc4c:	69b3      	ldr	r3, [r6, #24]
 800bc4e:	b913      	cbnz	r3, 800bc56 <__sfp+0x16>
 800bc50:	4630      	mov	r0, r6
 800bc52:	f7ff ffbd 	bl	800bbd0 <__sinit>
 800bc56:	3648      	adds	r6, #72	; 0x48
 800bc58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bc5c:	3b01      	subs	r3, #1
 800bc5e:	d503      	bpl.n	800bc68 <__sfp+0x28>
 800bc60:	6833      	ldr	r3, [r6, #0]
 800bc62:	b30b      	cbz	r3, 800bca8 <__sfp+0x68>
 800bc64:	6836      	ldr	r6, [r6, #0]
 800bc66:	e7f7      	b.n	800bc58 <__sfp+0x18>
 800bc68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bc6c:	b9d5      	cbnz	r5, 800bca4 <__sfp+0x64>
 800bc6e:	4b16      	ldr	r3, [pc, #88]	; (800bcc8 <__sfp+0x88>)
 800bc70:	60e3      	str	r3, [r4, #12]
 800bc72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bc76:	6665      	str	r5, [r4, #100]	; 0x64
 800bc78:	f000 f86c 	bl	800bd54 <__retarget_lock_init_recursive>
 800bc7c:	f7ff ff96 	bl	800bbac <__sfp_lock_release>
 800bc80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bc84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bc88:	6025      	str	r5, [r4, #0]
 800bc8a:	61a5      	str	r5, [r4, #24]
 800bc8c:	2208      	movs	r2, #8
 800bc8e:	4629      	mov	r1, r5
 800bc90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bc94:	f000 f86f 	bl	800bd76 <memset>
 800bc98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bc9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bca0:	4620      	mov	r0, r4
 800bca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bca4:	3468      	adds	r4, #104	; 0x68
 800bca6:	e7d9      	b.n	800bc5c <__sfp+0x1c>
 800bca8:	2104      	movs	r1, #4
 800bcaa:	4638      	mov	r0, r7
 800bcac:	f7ff ff62 	bl	800bb74 <__sfmoreglue>
 800bcb0:	4604      	mov	r4, r0
 800bcb2:	6030      	str	r0, [r6, #0]
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	d1d5      	bne.n	800bc64 <__sfp+0x24>
 800bcb8:	f7ff ff78 	bl	800bbac <__sfp_lock_release>
 800bcbc:	230c      	movs	r3, #12
 800bcbe:	603b      	str	r3, [r7, #0]
 800bcc0:	e7ee      	b.n	800bca0 <__sfp+0x60>
 800bcc2:	bf00      	nop
 800bcc4:	08010e48 	.word	0x08010e48
 800bcc8:	ffff0001 	.word	0xffff0001

0800bccc <_fwalk_reent>:
 800bccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcd0:	4606      	mov	r6, r0
 800bcd2:	4688      	mov	r8, r1
 800bcd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bcd8:	2700      	movs	r7, #0
 800bcda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bcde:	f1b9 0901 	subs.w	r9, r9, #1
 800bce2:	d505      	bpl.n	800bcf0 <_fwalk_reent+0x24>
 800bce4:	6824      	ldr	r4, [r4, #0]
 800bce6:	2c00      	cmp	r4, #0
 800bce8:	d1f7      	bne.n	800bcda <_fwalk_reent+0xe>
 800bcea:	4638      	mov	r0, r7
 800bcec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcf0:	89ab      	ldrh	r3, [r5, #12]
 800bcf2:	2b01      	cmp	r3, #1
 800bcf4:	d907      	bls.n	800bd06 <_fwalk_reent+0x3a>
 800bcf6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	d003      	beq.n	800bd06 <_fwalk_reent+0x3a>
 800bcfe:	4629      	mov	r1, r5
 800bd00:	4630      	mov	r0, r6
 800bd02:	47c0      	blx	r8
 800bd04:	4307      	orrs	r7, r0
 800bd06:	3568      	adds	r5, #104	; 0x68
 800bd08:	e7e9      	b.n	800bcde <_fwalk_reent+0x12>
	...

0800bd0c <__libc_init_array>:
 800bd0c:	b570      	push	{r4, r5, r6, lr}
 800bd0e:	4d0d      	ldr	r5, [pc, #52]	; (800bd44 <__libc_init_array+0x38>)
 800bd10:	4c0d      	ldr	r4, [pc, #52]	; (800bd48 <__libc_init_array+0x3c>)
 800bd12:	1b64      	subs	r4, r4, r5
 800bd14:	10a4      	asrs	r4, r4, #2
 800bd16:	2600      	movs	r6, #0
 800bd18:	42a6      	cmp	r6, r4
 800bd1a:	d109      	bne.n	800bd30 <__libc_init_array+0x24>
 800bd1c:	4d0b      	ldr	r5, [pc, #44]	; (800bd4c <__libc_init_array+0x40>)
 800bd1e:	4c0c      	ldr	r4, [pc, #48]	; (800bd50 <__libc_init_array+0x44>)
 800bd20:	f001 fa66 	bl	800d1f0 <_init>
 800bd24:	1b64      	subs	r4, r4, r5
 800bd26:	10a4      	asrs	r4, r4, #2
 800bd28:	2600      	movs	r6, #0
 800bd2a:	42a6      	cmp	r6, r4
 800bd2c:	d105      	bne.n	800bd3a <__libc_init_array+0x2e>
 800bd2e:	bd70      	pop	{r4, r5, r6, pc}
 800bd30:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd34:	4798      	blx	r3
 800bd36:	3601      	adds	r6, #1
 800bd38:	e7ee      	b.n	800bd18 <__libc_init_array+0xc>
 800bd3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd3e:	4798      	blx	r3
 800bd40:	3601      	adds	r6, #1
 800bd42:	e7f2      	b.n	800bd2a <__libc_init_array+0x1e>
 800bd44:	0801103c 	.word	0x0801103c
 800bd48:	0801103c 	.word	0x0801103c
 800bd4c:	0801103c 	.word	0x0801103c
 800bd50:	08011040 	.word	0x08011040

0800bd54 <__retarget_lock_init_recursive>:
 800bd54:	4770      	bx	lr

0800bd56 <__retarget_lock_acquire_recursive>:
 800bd56:	4770      	bx	lr

0800bd58 <__retarget_lock_release_recursive>:
 800bd58:	4770      	bx	lr

0800bd5a <memcpy>:
 800bd5a:	440a      	add	r2, r1
 800bd5c:	4291      	cmp	r1, r2
 800bd5e:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd62:	d100      	bne.n	800bd66 <memcpy+0xc>
 800bd64:	4770      	bx	lr
 800bd66:	b510      	push	{r4, lr}
 800bd68:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd70:	4291      	cmp	r1, r2
 800bd72:	d1f9      	bne.n	800bd68 <memcpy+0xe>
 800bd74:	bd10      	pop	{r4, pc}

0800bd76 <memset>:
 800bd76:	4402      	add	r2, r0
 800bd78:	4603      	mov	r3, r0
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d100      	bne.n	800bd80 <memset+0xa>
 800bd7e:	4770      	bx	lr
 800bd80:	f803 1b01 	strb.w	r1, [r3], #1
 800bd84:	e7f9      	b.n	800bd7a <memset+0x4>
	...

0800bd88 <_malloc_r>:
 800bd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd8a:	1ccd      	adds	r5, r1, #3
 800bd8c:	f025 0503 	bic.w	r5, r5, #3
 800bd90:	3508      	adds	r5, #8
 800bd92:	2d0c      	cmp	r5, #12
 800bd94:	bf38      	it	cc
 800bd96:	250c      	movcc	r5, #12
 800bd98:	2d00      	cmp	r5, #0
 800bd9a:	4606      	mov	r6, r0
 800bd9c:	db01      	blt.n	800bda2 <_malloc_r+0x1a>
 800bd9e:	42a9      	cmp	r1, r5
 800bda0:	d903      	bls.n	800bdaa <_malloc_r+0x22>
 800bda2:	230c      	movs	r3, #12
 800bda4:	6033      	str	r3, [r6, #0]
 800bda6:	2000      	movs	r0, #0
 800bda8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdaa:	f000 fb8f 	bl	800c4cc <__malloc_lock>
 800bdae:	4921      	ldr	r1, [pc, #132]	; (800be34 <_malloc_r+0xac>)
 800bdb0:	680a      	ldr	r2, [r1, #0]
 800bdb2:	4614      	mov	r4, r2
 800bdb4:	b99c      	cbnz	r4, 800bdde <_malloc_r+0x56>
 800bdb6:	4f20      	ldr	r7, [pc, #128]	; (800be38 <_malloc_r+0xb0>)
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	b923      	cbnz	r3, 800bdc6 <_malloc_r+0x3e>
 800bdbc:	4621      	mov	r1, r4
 800bdbe:	4630      	mov	r0, r6
 800bdc0:	f000 f8a6 	bl	800bf10 <_sbrk_r>
 800bdc4:	6038      	str	r0, [r7, #0]
 800bdc6:	4629      	mov	r1, r5
 800bdc8:	4630      	mov	r0, r6
 800bdca:	f000 f8a1 	bl	800bf10 <_sbrk_r>
 800bdce:	1c43      	adds	r3, r0, #1
 800bdd0:	d123      	bne.n	800be1a <_malloc_r+0x92>
 800bdd2:	230c      	movs	r3, #12
 800bdd4:	6033      	str	r3, [r6, #0]
 800bdd6:	4630      	mov	r0, r6
 800bdd8:	f000 fb7e 	bl	800c4d8 <__malloc_unlock>
 800bddc:	e7e3      	b.n	800bda6 <_malloc_r+0x1e>
 800bdde:	6823      	ldr	r3, [r4, #0]
 800bde0:	1b5b      	subs	r3, r3, r5
 800bde2:	d417      	bmi.n	800be14 <_malloc_r+0x8c>
 800bde4:	2b0b      	cmp	r3, #11
 800bde6:	d903      	bls.n	800bdf0 <_malloc_r+0x68>
 800bde8:	6023      	str	r3, [r4, #0]
 800bdea:	441c      	add	r4, r3
 800bdec:	6025      	str	r5, [r4, #0]
 800bdee:	e004      	b.n	800bdfa <_malloc_r+0x72>
 800bdf0:	6863      	ldr	r3, [r4, #4]
 800bdf2:	42a2      	cmp	r2, r4
 800bdf4:	bf0c      	ite	eq
 800bdf6:	600b      	streq	r3, [r1, #0]
 800bdf8:	6053      	strne	r3, [r2, #4]
 800bdfa:	4630      	mov	r0, r6
 800bdfc:	f000 fb6c 	bl	800c4d8 <__malloc_unlock>
 800be00:	f104 000b 	add.w	r0, r4, #11
 800be04:	1d23      	adds	r3, r4, #4
 800be06:	f020 0007 	bic.w	r0, r0, #7
 800be0a:	1ac2      	subs	r2, r0, r3
 800be0c:	d0cc      	beq.n	800bda8 <_malloc_r+0x20>
 800be0e:	1a1b      	subs	r3, r3, r0
 800be10:	50a3      	str	r3, [r4, r2]
 800be12:	e7c9      	b.n	800bda8 <_malloc_r+0x20>
 800be14:	4622      	mov	r2, r4
 800be16:	6864      	ldr	r4, [r4, #4]
 800be18:	e7cc      	b.n	800bdb4 <_malloc_r+0x2c>
 800be1a:	1cc4      	adds	r4, r0, #3
 800be1c:	f024 0403 	bic.w	r4, r4, #3
 800be20:	42a0      	cmp	r0, r4
 800be22:	d0e3      	beq.n	800bdec <_malloc_r+0x64>
 800be24:	1a21      	subs	r1, r4, r0
 800be26:	4630      	mov	r0, r6
 800be28:	f000 f872 	bl	800bf10 <_sbrk_r>
 800be2c:	3001      	adds	r0, #1
 800be2e:	d1dd      	bne.n	800bdec <_malloc_r+0x64>
 800be30:	e7cf      	b.n	800bdd2 <_malloc_r+0x4a>
 800be32:	bf00      	nop
 800be34:	2002e838 	.word	0x2002e838
 800be38:	2002e83c 	.word	0x2002e83c

0800be3c <cleanup_glue>:
 800be3c:	b538      	push	{r3, r4, r5, lr}
 800be3e:	460c      	mov	r4, r1
 800be40:	6809      	ldr	r1, [r1, #0]
 800be42:	4605      	mov	r5, r0
 800be44:	b109      	cbz	r1, 800be4a <cleanup_glue+0xe>
 800be46:	f7ff fff9 	bl	800be3c <cleanup_glue>
 800be4a:	4621      	mov	r1, r4
 800be4c:	4628      	mov	r0, r5
 800be4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be52:	f000 bb47 	b.w	800c4e4 <_free_r>
	...

0800be58 <_reclaim_reent>:
 800be58:	4b2c      	ldr	r3, [pc, #176]	; (800bf0c <_reclaim_reent+0xb4>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4283      	cmp	r3, r0
 800be5e:	b570      	push	{r4, r5, r6, lr}
 800be60:	4604      	mov	r4, r0
 800be62:	d051      	beq.n	800bf08 <_reclaim_reent+0xb0>
 800be64:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800be66:	b143      	cbz	r3, 800be7a <_reclaim_reent+0x22>
 800be68:	68db      	ldr	r3, [r3, #12]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d14a      	bne.n	800bf04 <_reclaim_reent+0xac>
 800be6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be70:	6819      	ldr	r1, [r3, #0]
 800be72:	b111      	cbz	r1, 800be7a <_reclaim_reent+0x22>
 800be74:	4620      	mov	r0, r4
 800be76:	f000 fb35 	bl	800c4e4 <_free_r>
 800be7a:	6961      	ldr	r1, [r4, #20]
 800be7c:	b111      	cbz	r1, 800be84 <_reclaim_reent+0x2c>
 800be7e:	4620      	mov	r0, r4
 800be80:	f000 fb30 	bl	800c4e4 <_free_r>
 800be84:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800be86:	b111      	cbz	r1, 800be8e <_reclaim_reent+0x36>
 800be88:	4620      	mov	r0, r4
 800be8a:	f000 fb2b 	bl	800c4e4 <_free_r>
 800be8e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800be90:	b111      	cbz	r1, 800be98 <_reclaim_reent+0x40>
 800be92:	4620      	mov	r0, r4
 800be94:	f000 fb26 	bl	800c4e4 <_free_r>
 800be98:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800be9a:	b111      	cbz	r1, 800bea2 <_reclaim_reent+0x4a>
 800be9c:	4620      	mov	r0, r4
 800be9e:	f000 fb21 	bl	800c4e4 <_free_r>
 800bea2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bea4:	b111      	cbz	r1, 800beac <_reclaim_reent+0x54>
 800bea6:	4620      	mov	r0, r4
 800bea8:	f000 fb1c 	bl	800c4e4 <_free_r>
 800beac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800beae:	b111      	cbz	r1, 800beb6 <_reclaim_reent+0x5e>
 800beb0:	4620      	mov	r0, r4
 800beb2:	f000 fb17 	bl	800c4e4 <_free_r>
 800beb6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800beb8:	b111      	cbz	r1, 800bec0 <_reclaim_reent+0x68>
 800beba:	4620      	mov	r0, r4
 800bebc:	f000 fb12 	bl	800c4e4 <_free_r>
 800bec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bec2:	b111      	cbz	r1, 800beca <_reclaim_reent+0x72>
 800bec4:	4620      	mov	r0, r4
 800bec6:	f000 fb0d 	bl	800c4e4 <_free_r>
 800beca:	69a3      	ldr	r3, [r4, #24]
 800becc:	b1e3      	cbz	r3, 800bf08 <_reclaim_reent+0xb0>
 800bece:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bed0:	4620      	mov	r0, r4
 800bed2:	4798      	blx	r3
 800bed4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bed6:	b1b9      	cbz	r1, 800bf08 <_reclaim_reent+0xb0>
 800bed8:	4620      	mov	r0, r4
 800beda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bede:	f7ff bfad 	b.w	800be3c <cleanup_glue>
 800bee2:	5949      	ldr	r1, [r1, r5]
 800bee4:	b941      	cbnz	r1, 800bef8 <_reclaim_reent+0xa0>
 800bee6:	3504      	adds	r5, #4
 800bee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800beea:	2d80      	cmp	r5, #128	; 0x80
 800beec:	68d9      	ldr	r1, [r3, #12]
 800beee:	d1f8      	bne.n	800bee2 <_reclaim_reent+0x8a>
 800bef0:	4620      	mov	r0, r4
 800bef2:	f000 faf7 	bl	800c4e4 <_free_r>
 800bef6:	e7ba      	b.n	800be6e <_reclaim_reent+0x16>
 800bef8:	680e      	ldr	r6, [r1, #0]
 800befa:	4620      	mov	r0, r4
 800befc:	f000 faf2 	bl	800c4e4 <_free_r>
 800bf00:	4631      	mov	r1, r6
 800bf02:	e7ef      	b.n	800bee4 <_reclaim_reent+0x8c>
 800bf04:	2500      	movs	r5, #0
 800bf06:	e7ef      	b.n	800bee8 <_reclaim_reent+0x90>
 800bf08:	bd70      	pop	{r4, r5, r6, pc}
 800bf0a:	bf00      	nop
 800bf0c:	200000a4 	.word	0x200000a4

0800bf10 <_sbrk_r>:
 800bf10:	b538      	push	{r3, r4, r5, lr}
 800bf12:	4d06      	ldr	r5, [pc, #24]	; (800bf2c <_sbrk_r+0x1c>)
 800bf14:	2300      	movs	r3, #0
 800bf16:	4604      	mov	r4, r0
 800bf18:	4608      	mov	r0, r1
 800bf1a:	602b      	str	r3, [r5, #0]
 800bf1c:	f7f6 fb48 	bl	80025b0 <_sbrk>
 800bf20:	1c43      	adds	r3, r0, #1
 800bf22:	d102      	bne.n	800bf2a <_sbrk_r+0x1a>
 800bf24:	682b      	ldr	r3, [r5, #0]
 800bf26:	b103      	cbz	r3, 800bf2a <_sbrk_r+0x1a>
 800bf28:	6023      	str	r3, [r4, #0]
 800bf2a:	bd38      	pop	{r3, r4, r5, pc}
 800bf2c:	2002f710 	.word	0x2002f710

0800bf30 <sniprintf>:
 800bf30:	b40c      	push	{r2, r3}
 800bf32:	b530      	push	{r4, r5, lr}
 800bf34:	4b17      	ldr	r3, [pc, #92]	; (800bf94 <sniprintf+0x64>)
 800bf36:	1e0c      	subs	r4, r1, #0
 800bf38:	681d      	ldr	r5, [r3, #0]
 800bf3a:	b09d      	sub	sp, #116	; 0x74
 800bf3c:	da08      	bge.n	800bf50 <sniprintf+0x20>
 800bf3e:	238b      	movs	r3, #139	; 0x8b
 800bf40:	602b      	str	r3, [r5, #0]
 800bf42:	f04f 30ff 	mov.w	r0, #4294967295
 800bf46:	b01d      	add	sp, #116	; 0x74
 800bf48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf4c:	b002      	add	sp, #8
 800bf4e:	4770      	bx	lr
 800bf50:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bf54:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bf58:	bf14      	ite	ne
 800bf5a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bf5e:	4623      	moveq	r3, r4
 800bf60:	9304      	str	r3, [sp, #16]
 800bf62:	9307      	str	r3, [sp, #28]
 800bf64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bf68:	9002      	str	r0, [sp, #8]
 800bf6a:	9006      	str	r0, [sp, #24]
 800bf6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bf70:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bf72:	ab21      	add	r3, sp, #132	; 0x84
 800bf74:	a902      	add	r1, sp, #8
 800bf76:	4628      	mov	r0, r5
 800bf78:	9301      	str	r3, [sp, #4]
 800bf7a:	f000 fb5f 	bl	800c63c <_svfiprintf_r>
 800bf7e:	1c43      	adds	r3, r0, #1
 800bf80:	bfbc      	itt	lt
 800bf82:	238b      	movlt	r3, #139	; 0x8b
 800bf84:	602b      	strlt	r3, [r5, #0]
 800bf86:	2c00      	cmp	r4, #0
 800bf88:	d0dd      	beq.n	800bf46 <sniprintf+0x16>
 800bf8a:	9b02      	ldr	r3, [sp, #8]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	701a      	strb	r2, [r3, #0]
 800bf90:	e7d9      	b.n	800bf46 <sniprintf+0x16>
 800bf92:	bf00      	nop
 800bf94:	200000a4 	.word	0x200000a4

0800bf98 <siprintf>:
 800bf98:	b40e      	push	{r1, r2, r3}
 800bf9a:	b500      	push	{lr}
 800bf9c:	b09c      	sub	sp, #112	; 0x70
 800bf9e:	ab1d      	add	r3, sp, #116	; 0x74
 800bfa0:	9002      	str	r0, [sp, #8]
 800bfa2:	9006      	str	r0, [sp, #24]
 800bfa4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bfa8:	4809      	ldr	r0, [pc, #36]	; (800bfd0 <siprintf+0x38>)
 800bfaa:	9107      	str	r1, [sp, #28]
 800bfac:	9104      	str	r1, [sp, #16]
 800bfae:	4909      	ldr	r1, [pc, #36]	; (800bfd4 <siprintf+0x3c>)
 800bfb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfb4:	9105      	str	r1, [sp, #20]
 800bfb6:	6800      	ldr	r0, [r0, #0]
 800bfb8:	9301      	str	r3, [sp, #4]
 800bfba:	a902      	add	r1, sp, #8
 800bfbc:	f000 fb3e 	bl	800c63c <_svfiprintf_r>
 800bfc0:	9b02      	ldr	r3, [sp, #8]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	701a      	strb	r2, [r3, #0]
 800bfc6:	b01c      	add	sp, #112	; 0x70
 800bfc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfcc:	b003      	add	sp, #12
 800bfce:	4770      	bx	lr
 800bfd0:	200000a4 	.word	0x200000a4
 800bfd4:	ffff0208 	.word	0xffff0208

0800bfd8 <__sread>:
 800bfd8:	b510      	push	{r4, lr}
 800bfda:	460c      	mov	r4, r1
 800bfdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfe0:	f000 ff1a 	bl	800ce18 <_read_r>
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	bfab      	itete	ge
 800bfe8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bfea:	89a3      	ldrhlt	r3, [r4, #12]
 800bfec:	181b      	addge	r3, r3, r0
 800bfee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bff2:	bfac      	ite	ge
 800bff4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bff6:	81a3      	strhlt	r3, [r4, #12]
 800bff8:	bd10      	pop	{r4, pc}

0800bffa <__swrite>:
 800bffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bffe:	461f      	mov	r7, r3
 800c000:	898b      	ldrh	r3, [r1, #12]
 800c002:	05db      	lsls	r3, r3, #23
 800c004:	4605      	mov	r5, r0
 800c006:	460c      	mov	r4, r1
 800c008:	4616      	mov	r6, r2
 800c00a:	d505      	bpl.n	800c018 <__swrite+0x1e>
 800c00c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c010:	2302      	movs	r3, #2
 800c012:	2200      	movs	r2, #0
 800c014:	f000 fa40 	bl	800c498 <_lseek_r>
 800c018:	89a3      	ldrh	r3, [r4, #12]
 800c01a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c01e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c022:	81a3      	strh	r3, [r4, #12]
 800c024:	4632      	mov	r2, r6
 800c026:	463b      	mov	r3, r7
 800c028:	4628      	mov	r0, r5
 800c02a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c02e:	f000 b91f 	b.w	800c270 <_write_r>

0800c032 <__sseek>:
 800c032:	b510      	push	{r4, lr}
 800c034:	460c      	mov	r4, r1
 800c036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c03a:	f000 fa2d 	bl	800c498 <_lseek_r>
 800c03e:	1c43      	adds	r3, r0, #1
 800c040:	89a3      	ldrh	r3, [r4, #12]
 800c042:	bf15      	itete	ne
 800c044:	6560      	strne	r0, [r4, #84]	; 0x54
 800c046:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c04a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c04e:	81a3      	strheq	r3, [r4, #12]
 800c050:	bf18      	it	ne
 800c052:	81a3      	strhne	r3, [r4, #12]
 800c054:	bd10      	pop	{r4, pc}

0800c056 <__sclose>:
 800c056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c05a:	f000 b939 	b.w	800c2d0 <_close_r>

0800c05e <strcpy>:
 800c05e:	4603      	mov	r3, r0
 800c060:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c064:	f803 2b01 	strb.w	r2, [r3], #1
 800c068:	2a00      	cmp	r2, #0
 800c06a:	d1f9      	bne.n	800c060 <strcpy+0x2>
 800c06c:	4770      	bx	lr

0800c06e <strstr>:
 800c06e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c070:	780c      	ldrb	r4, [r1, #0]
 800c072:	b164      	cbz	r4, 800c08e <strstr+0x20>
 800c074:	4603      	mov	r3, r0
 800c076:	781a      	ldrb	r2, [r3, #0]
 800c078:	4618      	mov	r0, r3
 800c07a:	1c5e      	adds	r6, r3, #1
 800c07c:	b90a      	cbnz	r2, 800c082 <strstr+0x14>
 800c07e:	4610      	mov	r0, r2
 800c080:	e005      	b.n	800c08e <strstr+0x20>
 800c082:	4294      	cmp	r4, r2
 800c084:	d108      	bne.n	800c098 <strstr+0x2a>
 800c086:	460d      	mov	r5, r1
 800c088:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800c08c:	b902      	cbnz	r2, 800c090 <strstr+0x22>
 800c08e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c090:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800c094:	4297      	cmp	r7, r2
 800c096:	d0f7      	beq.n	800c088 <strstr+0x1a>
 800c098:	4633      	mov	r3, r6
 800c09a:	e7ec      	b.n	800c076 <strstr+0x8>

0800c09c <strtok>:
 800c09c:	4b16      	ldr	r3, [pc, #88]	; (800c0f8 <strtok+0x5c>)
 800c09e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0a0:	681e      	ldr	r6, [r3, #0]
 800c0a2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800c0a4:	4605      	mov	r5, r0
 800c0a6:	b9fc      	cbnz	r4, 800c0e8 <strtok+0x4c>
 800c0a8:	2050      	movs	r0, #80	; 0x50
 800c0aa:	9101      	str	r1, [sp, #4]
 800c0ac:	f000 fa06 	bl	800c4bc <malloc>
 800c0b0:	9901      	ldr	r1, [sp, #4]
 800c0b2:	65b0      	str	r0, [r6, #88]	; 0x58
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	b920      	cbnz	r0, 800c0c2 <strtok+0x26>
 800c0b8:	4b10      	ldr	r3, [pc, #64]	; (800c0fc <strtok+0x60>)
 800c0ba:	4811      	ldr	r0, [pc, #68]	; (800c100 <strtok+0x64>)
 800c0bc:	2157      	movs	r1, #87	; 0x57
 800c0be:	f000 f8e9 	bl	800c294 <__assert_func>
 800c0c2:	e9c0 4400 	strd	r4, r4, [r0]
 800c0c6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c0ca:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c0ce:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c0d2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c0d6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c0da:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c0de:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c0e2:	6184      	str	r4, [r0, #24]
 800c0e4:	7704      	strb	r4, [r0, #28]
 800c0e6:	6244      	str	r4, [r0, #36]	; 0x24
 800c0e8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	4628      	mov	r0, r5
 800c0ee:	b002      	add	sp, #8
 800c0f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c0f4:	f000 b806 	b.w	800c104 <__strtok_r>
 800c0f8:	200000a4 	.word	0x200000a4
 800c0fc:	08010e4c 	.word	0x08010e4c
 800c100:	08010e63 	.word	0x08010e63

0800c104 <__strtok_r>:
 800c104:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c106:	b908      	cbnz	r0, 800c10c <__strtok_r+0x8>
 800c108:	6810      	ldr	r0, [r2, #0]
 800c10a:	b188      	cbz	r0, 800c130 <__strtok_r+0x2c>
 800c10c:	4604      	mov	r4, r0
 800c10e:	4620      	mov	r0, r4
 800c110:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c114:	460f      	mov	r7, r1
 800c116:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c11a:	b91e      	cbnz	r6, 800c124 <__strtok_r+0x20>
 800c11c:	b965      	cbnz	r5, 800c138 <__strtok_r+0x34>
 800c11e:	6015      	str	r5, [r2, #0]
 800c120:	4628      	mov	r0, r5
 800c122:	e005      	b.n	800c130 <__strtok_r+0x2c>
 800c124:	42b5      	cmp	r5, r6
 800c126:	d1f6      	bne.n	800c116 <__strtok_r+0x12>
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d1f0      	bne.n	800c10e <__strtok_r+0xa>
 800c12c:	6014      	str	r4, [r2, #0]
 800c12e:	7003      	strb	r3, [r0, #0]
 800c130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c132:	461c      	mov	r4, r3
 800c134:	e00c      	b.n	800c150 <__strtok_r+0x4c>
 800c136:	b915      	cbnz	r5, 800c13e <__strtok_r+0x3a>
 800c138:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c13c:	460e      	mov	r6, r1
 800c13e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c142:	42ab      	cmp	r3, r5
 800c144:	d1f7      	bne.n	800c136 <__strtok_r+0x32>
 800c146:	2b00      	cmp	r3, #0
 800c148:	d0f3      	beq.n	800c132 <__strtok_r+0x2e>
 800c14a:	2300      	movs	r3, #0
 800c14c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c150:	6014      	str	r4, [r2, #0]
 800c152:	e7ed      	b.n	800c130 <__strtok_r+0x2c>

0800c154 <_strtol_l.isra.0>:
 800c154:	2b01      	cmp	r3, #1
 800c156:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c15a:	d001      	beq.n	800c160 <_strtol_l.isra.0+0xc>
 800c15c:	2b24      	cmp	r3, #36	; 0x24
 800c15e:	d906      	bls.n	800c16e <_strtol_l.isra.0+0x1a>
 800c160:	f7ff fcd8 	bl	800bb14 <__errno>
 800c164:	2316      	movs	r3, #22
 800c166:	6003      	str	r3, [r0, #0]
 800c168:	2000      	movs	r0, #0
 800c16a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c16e:	4f3a      	ldr	r7, [pc, #232]	; (800c258 <_strtol_l.isra.0+0x104>)
 800c170:	468e      	mov	lr, r1
 800c172:	4676      	mov	r6, lr
 800c174:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c178:	5de5      	ldrb	r5, [r4, r7]
 800c17a:	f015 0508 	ands.w	r5, r5, #8
 800c17e:	d1f8      	bne.n	800c172 <_strtol_l.isra.0+0x1e>
 800c180:	2c2d      	cmp	r4, #45	; 0x2d
 800c182:	d134      	bne.n	800c1ee <_strtol_l.isra.0+0x9a>
 800c184:	f89e 4000 	ldrb.w	r4, [lr]
 800c188:	f04f 0801 	mov.w	r8, #1
 800c18c:	f106 0e02 	add.w	lr, r6, #2
 800c190:	2b00      	cmp	r3, #0
 800c192:	d05c      	beq.n	800c24e <_strtol_l.isra.0+0xfa>
 800c194:	2b10      	cmp	r3, #16
 800c196:	d10c      	bne.n	800c1b2 <_strtol_l.isra.0+0x5e>
 800c198:	2c30      	cmp	r4, #48	; 0x30
 800c19a:	d10a      	bne.n	800c1b2 <_strtol_l.isra.0+0x5e>
 800c19c:	f89e 4000 	ldrb.w	r4, [lr]
 800c1a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c1a4:	2c58      	cmp	r4, #88	; 0x58
 800c1a6:	d14d      	bne.n	800c244 <_strtol_l.isra.0+0xf0>
 800c1a8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800c1ac:	2310      	movs	r3, #16
 800c1ae:	f10e 0e02 	add.w	lr, lr, #2
 800c1b2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800c1b6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c1ba:	2600      	movs	r6, #0
 800c1bc:	fbbc f9f3 	udiv	r9, ip, r3
 800c1c0:	4635      	mov	r5, r6
 800c1c2:	fb03 ca19 	mls	sl, r3, r9, ip
 800c1c6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c1ca:	2f09      	cmp	r7, #9
 800c1cc:	d818      	bhi.n	800c200 <_strtol_l.isra.0+0xac>
 800c1ce:	463c      	mov	r4, r7
 800c1d0:	42a3      	cmp	r3, r4
 800c1d2:	dd24      	ble.n	800c21e <_strtol_l.isra.0+0xca>
 800c1d4:	2e00      	cmp	r6, #0
 800c1d6:	db1f      	blt.n	800c218 <_strtol_l.isra.0+0xc4>
 800c1d8:	45a9      	cmp	r9, r5
 800c1da:	d31d      	bcc.n	800c218 <_strtol_l.isra.0+0xc4>
 800c1dc:	d101      	bne.n	800c1e2 <_strtol_l.isra.0+0x8e>
 800c1de:	45a2      	cmp	sl, r4
 800c1e0:	db1a      	blt.n	800c218 <_strtol_l.isra.0+0xc4>
 800c1e2:	fb05 4503 	mla	r5, r5, r3, r4
 800c1e6:	2601      	movs	r6, #1
 800c1e8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c1ec:	e7eb      	b.n	800c1c6 <_strtol_l.isra.0+0x72>
 800c1ee:	2c2b      	cmp	r4, #43	; 0x2b
 800c1f0:	bf08      	it	eq
 800c1f2:	f89e 4000 	ldrbeq.w	r4, [lr]
 800c1f6:	46a8      	mov	r8, r5
 800c1f8:	bf08      	it	eq
 800c1fa:	f106 0e02 	addeq.w	lr, r6, #2
 800c1fe:	e7c7      	b.n	800c190 <_strtol_l.isra.0+0x3c>
 800c200:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c204:	2f19      	cmp	r7, #25
 800c206:	d801      	bhi.n	800c20c <_strtol_l.isra.0+0xb8>
 800c208:	3c37      	subs	r4, #55	; 0x37
 800c20a:	e7e1      	b.n	800c1d0 <_strtol_l.isra.0+0x7c>
 800c20c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c210:	2f19      	cmp	r7, #25
 800c212:	d804      	bhi.n	800c21e <_strtol_l.isra.0+0xca>
 800c214:	3c57      	subs	r4, #87	; 0x57
 800c216:	e7db      	b.n	800c1d0 <_strtol_l.isra.0+0x7c>
 800c218:	f04f 36ff 	mov.w	r6, #4294967295
 800c21c:	e7e4      	b.n	800c1e8 <_strtol_l.isra.0+0x94>
 800c21e:	2e00      	cmp	r6, #0
 800c220:	da05      	bge.n	800c22e <_strtol_l.isra.0+0xda>
 800c222:	2322      	movs	r3, #34	; 0x22
 800c224:	6003      	str	r3, [r0, #0]
 800c226:	4665      	mov	r5, ip
 800c228:	b942      	cbnz	r2, 800c23c <_strtol_l.isra.0+0xe8>
 800c22a:	4628      	mov	r0, r5
 800c22c:	e79d      	b.n	800c16a <_strtol_l.isra.0+0x16>
 800c22e:	f1b8 0f00 	cmp.w	r8, #0
 800c232:	d000      	beq.n	800c236 <_strtol_l.isra.0+0xe2>
 800c234:	426d      	negs	r5, r5
 800c236:	2a00      	cmp	r2, #0
 800c238:	d0f7      	beq.n	800c22a <_strtol_l.isra.0+0xd6>
 800c23a:	b10e      	cbz	r6, 800c240 <_strtol_l.isra.0+0xec>
 800c23c:	f10e 31ff 	add.w	r1, lr, #4294967295
 800c240:	6011      	str	r1, [r2, #0]
 800c242:	e7f2      	b.n	800c22a <_strtol_l.isra.0+0xd6>
 800c244:	2430      	movs	r4, #48	; 0x30
 800c246:	2b00      	cmp	r3, #0
 800c248:	d1b3      	bne.n	800c1b2 <_strtol_l.isra.0+0x5e>
 800c24a:	2308      	movs	r3, #8
 800c24c:	e7b1      	b.n	800c1b2 <_strtol_l.isra.0+0x5e>
 800c24e:	2c30      	cmp	r4, #48	; 0x30
 800c250:	d0a4      	beq.n	800c19c <_strtol_l.isra.0+0x48>
 800c252:	230a      	movs	r3, #10
 800c254:	e7ad      	b.n	800c1b2 <_strtol_l.isra.0+0x5e>
 800c256:	bf00      	nop
 800c258:	08010f01 	.word	0x08010f01

0800c25c <strtol>:
 800c25c:	4613      	mov	r3, r2
 800c25e:	460a      	mov	r2, r1
 800c260:	4601      	mov	r1, r0
 800c262:	4802      	ldr	r0, [pc, #8]	; (800c26c <strtol+0x10>)
 800c264:	6800      	ldr	r0, [r0, #0]
 800c266:	f7ff bf75 	b.w	800c154 <_strtol_l.isra.0>
 800c26a:	bf00      	nop
 800c26c:	200000a4 	.word	0x200000a4

0800c270 <_write_r>:
 800c270:	b538      	push	{r3, r4, r5, lr}
 800c272:	4d07      	ldr	r5, [pc, #28]	; (800c290 <_write_r+0x20>)
 800c274:	4604      	mov	r4, r0
 800c276:	4608      	mov	r0, r1
 800c278:	4611      	mov	r1, r2
 800c27a:	2200      	movs	r2, #0
 800c27c:	602a      	str	r2, [r5, #0]
 800c27e:	461a      	mov	r2, r3
 800c280:	f7f6 f945 	bl	800250e <_write>
 800c284:	1c43      	adds	r3, r0, #1
 800c286:	d102      	bne.n	800c28e <_write_r+0x1e>
 800c288:	682b      	ldr	r3, [r5, #0]
 800c28a:	b103      	cbz	r3, 800c28e <_write_r+0x1e>
 800c28c:	6023      	str	r3, [r4, #0]
 800c28e:	bd38      	pop	{r3, r4, r5, pc}
 800c290:	2002f710 	.word	0x2002f710

0800c294 <__assert_func>:
 800c294:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c296:	4614      	mov	r4, r2
 800c298:	461a      	mov	r2, r3
 800c29a:	4b09      	ldr	r3, [pc, #36]	; (800c2c0 <__assert_func+0x2c>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	4605      	mov	r5, r0
 800c2a0:	68d8      	ldr	r0, [r3, #12]
 800c2a2:	b14c      	cbz	r4, 800c2b8 <__assert_func+0x24>
 800c2a4:	4b07      	ldr	r3, [pc, #28]	; (800c2c4 <__assert_func+0x30>)
 800c2a6:	9100      	str	r1, [sp, #0]
 800c2a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c2ac:	4906      	ldr	r1, [pc, #24]	; (800c2c8 <__assert_func+0x34>)
 800c2ae:	462b      	mov	r3, r5
 800c2b0:	f000 f8e0 	bl	800c474 <fiprintf>
 800c2b4:	f000 fe82 	bl	800cfbc <abort>
 800c2b8:	4b04      	ldr	r3, [pc, #16]	; (800c2cc <__assert_func+0x38>)
 800c2ba:	461c      	mov	r4, r3
 800c2bc:	e7f3      	b.n	800c2a6 <__assert_func+0x12>
 800c2be:	bf00      	nop
 800c2c0:	200000a4 	.word	0x200000a4
 800c2c4:	08010ec4 	.word	0x08010ec4
 800c2c8:	08010ed1 	.word	0x08010ed1
 800c2cc:	08010eff 	.word	0x08010eff

0800c2d0 <_close_r>:
 800c2d0:	b538      	push	{r3, r4, r5, lr}
 800c2d2:	4d06      	ldr	r5, [pc, #24]	; (800c2ec <_close_r+0x1c>)
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	4604      	mov	r4, r0
 800c2d8:	4608      	mov	r0, r1
 800c2da:	602b      	str	r3, [r5, #0]
 800c2dc:	f7f6 f933 	bl	8002546 <_close>
 800c2e0:	1c43      	adds	r3, r0, #1
 800c2e2:	d102      	bne.n	800c2ea <_close_r+0x1a>
 800c2e4:	682b      	ldr	r3, [r5, #0]
 800c2e6:	b103      	cbz	r3, 800c2ea <_close_r+0x1a>
 800c2e8:	6023      	str	r3, [r4, #0]
 800c2ea:	bd38      	pop	{r3, r4, r5, pc}
 800c2ec:	2002f710 	.word	0x2002f710

0800c2f0 <__sflush_r>:
 800c2f0:	898a      	ldrh	r2, [r1, #12]
 800c2f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2f6:	4605      	mov	r5, r0
 800c2f8:	0710      	lsls	r0, r2, #28
 800c2fa:	460c      	mov	r4, r1
 800c2fc:	d458      	bmi.n	800c3b0 <__sflush_r+0xc0>
 800c2fe:	684b      	ldr	r3, [r1, #4]
 800c300:	2b00      	cmp	r3, #0
 800c302:	dc05      	bgt.n	800c310 <__sflush_r+0x20>
 800c304:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c306:	2b00      	cmp	r3, #0
 800c308:	dc02      	bgt.n	800c310 <__sflush_r+0x20>
 800c30a:	2000      	movs	r0, #0
 800c30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c312:	2e00      	cmp	r6, #0
 800c314:	d0f9      	beq.n	800c30a <__sflush_r+0x1a>
 800c316:	2300      	movs	r3, #0
 800c318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c31c:	682f      	ldr	r7, [r5, #0]
 800c31e:	602b      	str	r3, [r5, #0]
 800c320:	d032      	beq.n	800c388 <__sflush_r+0x98>
 800c322:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c324:	89a3      	ldrh	r3, [r4, #12]
 800c326:	075a      	lsls	r2, r3, #29
 800c328:	d505      	bpl.n	800c336 <__sflush_r+0x46>
 800c32a:	6863      	ldr	r3, [r4, #4]
 800c32c:	1ac0      	subs	r0, r0, r3
 800c32e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c330:	b10b      	cbz	r3, 800c336 <__sflush_r+0x46>
 800c332:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c334:	1ac0      	subs	r0, r0, r3
 800c336:	2300      	movs	r3, #0
 800c338:	4602      	mov	r2, r0
 800c33a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c33c:	6a21      	ldr	r1, [r4, #32]
 800c33e:	4628      	mov	r0, r5
 800c340:	47b0      	blx	r6
 800c342:	1c43      	adds	r3, r0, #1
 800c344:	89a3      	ldrh	r3, [r4, #12]
 800c346:	d106      	bne.n	800c356 <__sflush_r+0x66>
 800c348:	6829      	ldr	r1, [r5, #0]
 800c34a:	291d      	cmp	r1, #29
 800c34c:	d82c      	bhi.n	800c3a8 <__sflush_r+0xb8>
 800c34e:	4a2a      	ldr	r2, [pc, #168]	; (800c3f8 <__sflush_r+0x108>)
 800c350:	40ca      	lsrs	r2, r1
 800c352:	07d6      	lsls	r6, r2, #31
 800c354:	d528      	bpl.n	800c3a8 <__sflush_r+0xb8>
 800c356:	2200      	movs	r2, #0
 800c358:	6062      	str	r2, [r4, #4]
 800c35a:	04d9      	lsls	r1, r3, #19
 800c35c:	6922      	ldr	r2, [r4, #16]
 800c35e:	6022      	str	r2, [r4, #0]
 800c360:	d504      	bpl.n	800c36c <__sflush_r+0x7c>
 800c362:	1c42      	adds	r2, r0, #1
 800c364:	d101      	bne.n	800c36a <__sflush_r+0x7a>
 800c366:	682b      	ldr	r3, [r5, #0]
 800c368:	b903      	cbnz	r3, 800c36c <__sflush_r+0x7c>
 800c36a:	6560      	str	r0, [r4, #84]	; 0x54
 800c36c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c36e:	602f      	str	r7, [r5, #0]
 800c370:	2900      	cmp	r1, #0
 800c372:	d0ca      	beq.n	800c30a <__sflush_r+0x1a>
 800c374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c378:	4299      	cmp	r1, r3
 800c37a:	d002      	beq.n	800c382 <__sflush_r+0x92>
 800c37c:	4628      	mov	r0, r5
 800c37e:	f000 f8b1 	bl	800c4e4 <_free_r>
 800c382:	2000      	movs	r0, #0
 800c384:	6360      	str	r0, [r4, #52]	; 0x34
 800c386:	e7c1      	b.n	800c30c <__sflush_r+0x1c>
 800c388:	6a21      	ldr	r1, [r4, #32]
 800c38a:	2301      	movs	r3, #1
 800c38c:	4628      	mov	r0, r5
 800c38e:	47b0      	blx	r6
 800c390:	1c41      	adds	r1, r0, #1
 800c392:	d1c7      	bne.n	800c324 <__sflush_r+0x34>
 800c394:	682b      	ldr	r3, [r5, #0]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d0c4      	beq.n	800c324 <__sflush_r+0x34>
 800c39a:	2b1d      	cmp	r3, #29
 800c39c:	d001      	beq.n	800c3a2 <__sflush_r+0xb2>
 800c39e:	2b16      	cmp	r3, #22
 800c3a0:	d101      	bne.n	800c3a6 <__sflush_r+0xb6>
 800c3a2:	602f      	str	r7, [r5, #0]
 800c3a4:	e7b1      	b.n	800c30a <__sflush_r+0x1a>
 800c3a6:	89a3      	ldrh	r3, [r4, #12]
 800c3a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3ac:	81a3      	strh	r3, [r4, #12]
 800c3ae:	e7ad      	b.n	800c30c <__sflush_r+0x1c>
 800c3b0:	690f      	ldr	r7, [r1, #16]
 800c3b2:	2f00      	cmp	r7, #0
 800c3b4:	d0a9      	beq.n	800c30a <__sflush_r+0x1a>
 800c3b6:	0793      	lsls	r3, r2, #30
 800c3b8:	680e      	ldr	r6, [r1, #0]
 800c3ba:	bf08      	it	eq
 800c3bc:	694b      	ldreq	r3, [r1, #20]
 800c3be:	600f      	str	r7, [r1, #0]
 800c3c0:	bf18      	it	ne
 800c3c2:	2300      	movne	r3, #0
 800c3c4:	eba6 0807 	sub.w	r8, r6, r7
 800c3c8:	608b      	str	r3, [r1, #8]
 800c3ca:	f1b8 0f00 	cmp.w	r8, #0
 800c3ce:	dd9c      	ble.n	800c30a <__sflush_r+0x1a>
 800c3d0:	6a21      	ldr	r1, [r4, #32]
 800c3d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c3d4:	4643      	mov	r3, r8
 800c3d6:	463a      	mov	r2, r7
 800c3d8:	4628      	mov	r0, r5
 800c3da:	47b0      	blx	r6
 800c3dc:	2800      	cmp	r0, #0
 800c3de:	dc06      	bgt.n	800c3ee <__sflush_r+0xfe>
 800c3e0:	89a3      	ldrh	r3, [r4, #12]
 800c3e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3e6:	81a3      	strh	r3, [r4, #12]
 800c3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ec:	e78e      	b.n	800c30c <__sflush_r+0x1c>
 800c3ee:	4407      	add	r7, r0
 800c3f0:	eba8 0800 	sub.w	r8, r8, r0
 800c3f4:	e7e9      	b.n	800c3ca <__sflush_r+0xda>
 800c3f6:	bf00      	nop
 800c3f8:	20400001 	.word	0x20400001

0800c3fc <_fflush_r>:
 800c3fc:	b538      	push	{r3, r4, r5, lr}
 800c3fe:	690b      	ldr	r3, [r1, #16]
 800c400:	4605      	mov	r5, r0
 800c402:	460c      	mov	r4, r1
 800c404:	b913      	cbnz	r3, 800c40c <_fflush_r+0x10>
 800c406:	2500      	movs	r5, #0
 800c408:	4628      	mov	r0, r5
 800c40a:	bd38      	pop	{r3, r4, r5, pc}
 800c40c:	b118      	cbz	r0, 800c416 <_fflush_r+0x1a>
 800c40e:	6983      	ldr	r3, [r0, #24]
 800c410:	b90b      	cbnz	r3, 800c416 <_fflush_r+0x1a>
 800c412:	f7ff fbdd 	bl	800bbd0 <__sinit>
 800c416:	4b14      	ldr	r3, [pc, #80]	; (800c468 <_fflush_r+0x6c>)
 800c418:	429c      	cmp	r4, r3
 800c41a:	d11b      	bne.n	800c454 <_fflush_r+0x58>
 800c41c:	686c      	ldr	r4, [r5, #4]
 800c41e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d0ef      	beq.n	800c406 <_fflush_r+0xa>
 800c426:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c428:	07d0      	lsls	r0, r2, #31
 800c42a:	d404      	bmi.n	800c436 <_fflush_r+0x3a>
 800c42c:	0599      	lsls	r1, r3, #22
 800c42e:	d402      	bmi.n	800c436 <_fflush_r+0x3a>
 800c430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c432:	f7ff fc90 	bl	800bd56 <__retarget_lock_acquire_recursive>
 800c436:	4628      	mov	r0, r5
 800c438:	4621      	mov	r1, r4
 800c43a:	f7ff ff59 	bl	800c2f0 <__sflush_r>
 800c43e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c440:	07da      	lsls	r2, r3, #31
 800c442:	4605      	mov	r5, r0
 800c444:	d4e0      	bmi.n	800c408 <_fflush_r+0xc>
 800c446:	89a3      	ldrh	r3, [r4, #12]
 800c448:	059b      	lsls	r3, r3, #22
 800c44a:	d4dd      	bmi.n	800c408 <_fflush_r+0xc>
 800c44c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c44e:	f7ff fc83 	bl	800bd58 <__retarget_lock_release_recursive>
 800c452:	e7d9      	b.n	800c408 <_fflush_r+0xc>
 800c454:	4b05      	ldr	r3, [pc, #20]	; (800c46c <_fflush_r+0x70>)
 800c456:	429c      	cmp	r4, r3
 800c458:	d101      	bne.n	800c45e <_fflush_r+0x62>
 800c45a:	68ac      	ldr	r4, [r5, #8]
 800c45c:	e7df      	b.n	800c41e <_fflush_r+0x22>
 800c45e:	4b04      	ldr	r3, [pc, #16]	; (800c470 <_fflush_r+0x74>)
 800c460:	429c      	cmp	r4, r3
 800c462:	bf08      	it	eq
 800c464:	68ec      	ldreq	r4, [r5, #12]
 800c466:	e7da      	b.n	800c41e <_fflush_r+0x22>
 800c468:	08010e08 	.word	0x08010e08
 800c46c:	08010e28 	.word	0x08010e28
 800c470:	08010de8 	.word	0x08010de8

0800c474 <fiprintf>:
 800c474:	b40e      	push	{r1, r2, r3}
 800c476:	b503      	push	{r0, r1, lr}
 800c478:	4601      	mov	r1, r0
 800c47a:	ab03      	add	r3, sp, #12
 800c47c:	4805      	ldr	r0, [pc, #20]	; (800c494 <fiprintf+0x20>)
 800c47e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c482:	6800      	ldr	r0, [r0, #0]
 800c484:	9301      	str	r3, [sp, #4]
 800c486:	f000 fa03 	bl	800c890 <_vfiprintf_r>
 800c48a:	b002      	add	sp, #8
 800c48c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c490:	b003      	add	sp, #12
 800c492:	4770      	bx	lr
 800c494:	200000a4 	.word	0x200000a4

0800c498 <_lseek_r>:
 800c498:	b538      	push	{r3, r4, r5, lr}
 800c49a:	4d07      	ldr	r5, [pc, #28]	; (800c4b8 <_lseek_r+0x20>)
 800c49c:	4604      	mov	r4, r0
 800c49e:	4608      	mov	r0, r1
 800c4a0:	4611      	mov	r1, r2
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	602a      	str	r2, [r5, #0]
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	f7f6 f874 	bl	8002594 <_lseek>
 800c4ac:	1c43      	adds	r3, r0, #1
 800c4ae:	d102      	bne.n	800c4b6 <_lseek_r+0x1e>
 800c4b0:	682b      	ldr	r3, [r5, #0]
 800c4b2:	b103      	cbz	r3, 800c4b6 <_lseek_r+0x1e>
 800c4b4:	6023      	str	r3, [r4, #0]
 800c4b6:	bd38      	pop	{r3, r4, r5, pc}
 800c4b8:	2002f710 	.word	0x2002f710

0800c4bc <malloc>:
 800c4bc:	4b02      	ldr	r3, [pc, #8]	; (800c4c8 <malloc+0xc>)
 800c4be:	4601      	mov	r1, r0
 800c4c0:	6818      	ldr	r0, [r3, #0]
 800c4c2:	f7ff bc61 	b.w	800bd88 <_malloc_r>
 800c4c6:	bf00      	nop
 800c4c8:	200000a4 	.word	0x200000a4

0800c4cc <__malloc_lock>:
 800c4cc:	4801      	ldr	r0, [pc, #4]	; (800c4d4 <__malloc_lock+0x8>)
 800c4ce:	f7ff bc42 	b.w	800bd56 <__retarget_lock_acquire_recursive>
 800c4d2:	bf00      	nop
 800c4d4:	2002f708 	.word	0x2002f708

0800c4d8 <__malloc_unlock>:
 800c4d8:	4801      	ldr	r0, [pc, #4]	; (800c4e0 <__malloc_unlock+0x8>)
 800c4da:	f7ff bc3d 	b.w	800bd58 <__retarget_lock_release_recursive>
 800c4de:	bf00      	nop
 800c4e0:	2002f708 	.word	0x2002f708

0800c4e4 <_free_r>:
 800c4e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4e6:	2900      	cmp	r1, #0
 800c4e8:	d048      	beq.n	800c57c <_free_r+0x98>
 800c4ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4ee:	9001      	str	r0, [sp, #4]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	f1a1 0404 	sub.w	r4, r1, #4
 800c4f6:	bfb8      	it	lt
 800c4f8:	18e4      	addlt	r4, r4, r3
 800c4fa:	f7ff ffe7 	bl	800c4cc <__malloc_lock>
 800c4fe:	4a20      	ldr	r2, [pc, #128]	; (800c580 <_free_r+0x9c>)
 800c500:	9801      	ldr	r0, [sp, #4]
 800c502:	6813      	ldr	r3, [r2, #0]
 800c504:	4615      	mov	r5, r2
 800c506:	b933      	cbnz	r3, 800c516 <_free_r+0x32>
 800c508:	6063      	str	r3, [r4, #4]
 800c50a:	6014      	str	r4, [r2, #0]
 800c50c:	b003      	add	sp, #12
 800c50e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c512:	f7ff bfe1 	b.w	800c4d8 <__malloc_unlock>
 800c516:	42a3      	cmp	r3, r4
 800c518:	d90b      	bls.n	800c532 <_free_r+0x4e>
 800c51a:	6821      	ldr	r1, [r4, #0]
 800c51c:	1862      	adds	r2, r4, r1
 800c51e:	4293      	cmp	r3, r2
 800c520:	bf04      	itt	eq
 800c522:	681a      	ldreq	r2, [r3, #0]
 800c524:	685b      	ldreq	r3, [r3, #4]
 800c526:	6063      	str	r3, [r4, #4]
 800c528:	bf04      	itt	eq
 800c52a:	1852      	addeq	r2, r2, r1
 800c52c:	6022      	streq	r2, [r4, #0]
 800c52e:	602c      	str	r4, [r5, #0]
 800c530:	e7ec      	b.n	800c50c <_free_r+0x28>
 800c532:	461a      	mov	r2, r3
 800c534:	685b      	ldr	r3, [r3, #4]
 800c536:	b10b      	cbz	r3, 800c53c <_free_r+0x58>
 800c538:	42a3      	cmp	r3, r4
 800c53a:	d9fa      	bls.n	800c532 <_free_r+0x4e>
 800c53c:	6811      	ldr	r1, [r2, #0]
 800c53e:	1855      	adds	r5, r2, r1
 800c540:	42a5      	cmp	r5, r4
 800c542:	d10b      	bne.n	800c55c <_free_r+0x78>
 800c544:	6824      	ldr	r4, [r4, #0]
 800c546:	4421      	add	r1, r4
 800c548:	1854      	adds	r4, r2, r1
 800c54a:	42a3      	cmp	r3, r4
 800c54c:	6011      	str	r1, [r2, #0]
 800c54e:	d1dd      	bne.n	800c50c <_free_r+0x28>
 800c550:	681c      	ldr	r4, [r3, #0]
 800c552:	685b      	ldr	r3, [r3, #4]
 800c554:	6053      	str	r3, [r2, #4]
 800c556:	4421      	add	r1, r4
 800c558:	6011      	str	r1, [r2, #0]
 800c55a:	e7d7      	b.n	800c50c <_free_r+0x28>
 800c55c:	d902      	bls.n	800c564 <_free_r+0x80>
 800c55e:	230c      	movs	r3, #12
 800c560:	6003      	str	r3, [r0, #0]
 800c562:	e7d3      	b.n	800c50c <_free_r+0x28>
 800c564:	6825      	ldr	r5, [r4, #0]
 800c566:	1961      	adds	r1, r4, r5
 800c568:	428b      	cmp	r3, r1
 800c56a:	bf04      	itt	eq
 800c56c:	6819      	ldreq	r1, [r3, #0]
 800c56e:	685b      	ldreq	r3, [r3, #4]
 800c570:	6063      	str	r3, [r4, #4]
 800c572:	bf04      	itt	eq
 800c574:	1949      	addeq	r1, r1, r5
 800c576:	6021      	streq	r1, [r4, #0]
 800c578:	6054      	str	r4, [r2, #4]
 800c57a:	e7c7      	b.n	800c50c <_free_r+0x28>
 800c57c:	b003      	add	sp, #12
 800c57e:	bd30      	pop	{r4, r5, pc}
 800c580:	2002e838 	.word	0x2002e838

0800c584 <__ssputs_r>:
 800c584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c588:	688e      	ldr	r6, [r1, #8]
 800c58a:	429e      	cmp	r6, r3
 800c58c:	4682      	mov	sl, r0
 800c58e:	460c      	mov	r4, r1
 800c590:	4690      	mov	r8, r2
 800c592:	461f      	mov	r7, r3
 800c594:	d838      	bhi.n	800c608 <__ssputs_r+0x84>
 800c596:	898a      	ldrh	r2, [r1, #12]
 800c598:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c59c:	d032      	beq.n	800c604 <__ssputs_r+0x80>
 800c59e:	6825      	ldr	r5, [r4, #0]
 800c5a0:	6909      	ldr	r1, [r1, #16]
 800c5a2:	eba5 0901 	sub.w	r9, r5, r1
 800c5a6:	6965      	ldr	r5, [r4, #20]
 800c5a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	444b      	add	r3, r9
 800c5b4:	106d      	asrs	r5, r5, #1
 800c5b6:	429d      	cmp	r5, r3
 800c5b8:	bf38      	it	cc
 800c5ba:	461d      	movcc	r5, r3
 800c5bc:	0553      	lsls	r3, r2, #21
 800c5be:	d531      	bpl.n	800c624 <__ssputs_r+0xa0>
 800c5c0:	4629      	mov	r1, r5
 800c5c2:	f7ff fbe1 	bl	800bd88 <_malloc_r>
 800c5c6:	4606      	mov	r6, r0
 800c5c8:	b950      	cbnz	r0, 800c5e0 <__ssputs_r+0x5c>
 800c5ca:	230c      	movs	r3, #12
 800c5cc:	f8ca 3000 	str.w	r3, [sl]
 800c5d0:	89a3      	ldrh	r3, [r4, #12]
 800c5d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5d6:	81a3      	strh	r3, [r4, #12]
 800c5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5e0:	6921      	ldr	r1, [r4, #16]
 800c5e2:	464a      	mov	r2, r9
 800c5e4:	f7ff fbb9 	bl	800bd5a <memcpy>
 800c5e8:	89a3      	ldrh	r3, [r4, #12]
 800c5ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c5ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5f2:	81a3      	strh	r3, [r4, #12]
 800c5f4:	6126      	str	r6, [r4, #16]
 800c5f6:	6165      	str	r5, [r4, #20]
 800c5f8:	444e      	add	r6, r9
 800c5fa:	eba5 0509 	sub.w	r5, r5, r9
 800c5fe:	6026      	str	r6, [r4, #0]
 800c600:	60a5      	str	r5, [r4, #8]
 800c602:	463e      	mov	r6, r7
 800c604:	42be      	cmp	r6, r7
 800c606:	d900      	bls.n	800c60a <__ssputs_r+0x86>
 800c608:	463e      	mov	r6, r7
 800c60a:	4632      	mov	r2, r6
 800c60c:	6820      	ldr	r0, [r4, #0]
 800c60e:	4641      	mov	r1, r8
 800c610:	f000 fd40 	bl	800d094 <memmove>
 800c614:	68a3      	ldr	r3, [r4, #8]
 800c616:	6822      	ldr	r2, [r4, #0]
 800c618:	1b9b      	subs	r3, r3, r6
 800c61a:	4432      	add	r2, r6
 800c61c:	60a3      	str	r3, [r4, #8]
 800c61e:	6022      	str	r2, [r4, #0]
 800c620:	2000      	movs	r0, #0
 800c622:	e7db      	b.n	800c5dc <__ssputs_r+0x58>
 800c624:	462a      	mov	r2, r5
 800c626:	f000 fd4f 	bl	800d0c8 <_realloc_r>
 800c62a:	4606      	mov	r6, r0
 800c62c:	2800      	cmp	r0, #0
 800c62e:	d1e1      	bne.n	800c5f4 <__ssputs_r+0x70>
 800c630:	6921      	ldr	r1, [r4, #16]
 800c632:	4650      	mov	r0, sl
 800c634:	f7ff ff56 	bl	800c4e4 <_free_r>
 800c638:	e7c7      	b.n	800c5ca <__ssputs_r+0x46>
	...

0800c63c <_svfiprintf_r>:
 800c63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c640:	4698      	mov	r8, r3
 800c642:	898b      	ldrh	r3, [r1, #12]
 800c644:	061b      	lsls	r3, r3, #24
 800c646:	b09d      	sub	sp, #116	; 0x74
 800c648:	4607      	mov	r7, r0
 800c64a:	460d      	mov	r5, r1
 800c64c:	4614      	mov	r4, r2
 800c64e:	d50e      	bpl.n	800c66e <_svfiprintf_r+0x32>
 800c650:	690b      	ldr	r3, [r1, #16]
 800c652:	b963      	cbnz	r3, 800c66e <_svfiprintf_r+0x32>
 800c654:	2140      	movs	r1, #64	; 0x40
 800c656:	f7ff fb97 	bl	800bd88 <_malloc_r>
 800c65a:	6028      	str	r0, [r5, #0]
 800c65c:	6128      	str	r0, [r5, #16]
 800c65e:	b920      	cbnz	r0, 800c66a <_svfiprintf_r+0x2e>
 800c660:	230c      	movs	r3, #12
 800c662:	603b      	str	r3, [r7, #0]
 800c664:	f04f 30ff 	mov.w	r0, #4294967295
 800c668:	e0d1      	b.n	800c80e <_svfiprintf_r+0x1d2>
 800c66a:	2340      	movs	r3, #64	; 0x40
 800c66c:	616b      	str	r3, [r5, #20]
 800c66e:	2300      	movs	r3, #0
 800c670:	9309      	str	r3, [sp, #36]	; 0x24
 800c672:	2320      	movs	r3, #32
 800c674:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c678:	f8cd 800c 	str.w	r8, [sp, #12]
 800c67c:	2330      	movs	r3, #48	; 0x30
 800c67e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c828 <_svfiprintf_r+0x1ec>
 800c682:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c686:	f04f 0901 	mov.w	r9, #1
 800c68a:	4623      	mov	r3, r4
 800c68c:	469a      	mov	sl, r3
 800c68e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c692:	b10a      	cbz	r2, 800c698 <_svfiprintf_r+0x5c>
 800c694:	2a25      	cmp	r2, #37	; 0x25
 800c696:	d1f9      	bne.n	800c68c <_svfiprintf_r+0x50>
 800c698:	ebba 0b04 	subs.w	fp, sl, r4
 800c69c:	d00b      	beq.n	800c6b6 <_svfiprintf_r+0x7a>
 800c69e:	465b      	mov	r3, fp
 800c6a0:	4622      	mov	r2, r4
 800c6a2:	4629      	mov	r1, r5
 800c6a4:	4638      	mov	r0, r7
 800c6a6:	f7ff ff6d 	bl	800c584 <__ssputs_r>
 800c6aa:	3001      	adds	r0, #1
 800c6ac:	f000 80aa 	beq.w	800c804 <_svfiprintf_r+0x1c8>
 800c6b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6b2:	445a      	add	r2, fp
 800c6b4:	9209      	str	r2, [sp, #36]	; 0x24
 800c6b6:	f89a 3000 	ldrb.w	r3, [sl]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	f000 80a2 	beq.w	800c804 <_svfiprintf_r+0x1c8>
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c6c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6ca:	f10a 0a01 	add.w	sl, sl, #1
 800c6ce:	9304      	str	r3, [sp, #16]
 800c6d0:	9307      	str	r3, [sp, #28]
 800c6d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6d6:	931a      	str	r3, [sp, #104]	; 0x68
 800c6d8:	4654      	mov	r4, sl
 800c6da:	2205      	movs	r2, #5
 800c6dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6e0:	4851      	ldr	r0, [pc, #324]	; (800c828 <_svfiprintf_r+0x1ec>)
 800c6e2:	f7f3 fd8d 	bl	8000200 <memchr>
 800c6e6:	9a04      	ldr	r2, [sp, #16]
 800c6e8:	b9d8      	cbnz	r0, 800c722 <_svfiprintf_r+0xe6>
 800c6ea:	06d0      	lsls	r0, r2, #27
 800c6ec:	bf44      	itt	mi
 800c6ee:	2320      	movmi	r3, #32
 800c6f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6f4:	0711      	lsls	r1, r2, #28
 800c6f6:	bf44      	itt	mi
 800c6f8:	232b      	movmi	r3, #43	; 0x2b
 800c6fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6fe:	f89a 3000 	ldrb.w	r3, [sl]
 800c702:	2b2a      	cmp	r3, #42	; 0x2a
 800c704:	d015      	beq.n	800c732 <_svfiprintf_r+0xf6>
 800c706:	9a07      	ldr	r2, [sp, #28]
 800c708:	4654      	mov	r4, sl
 800c70a:	2000      	movs	r0, #0
 800c70c:	f04f 0c0a 	mov.w	ip, #10
 800c710:	4621      	mov	r1, r4
 800c712:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c716:	3b30      	subs	r3, #48	; 0x30
 800c718:	2b09      	cmp	r3, #9
 800c71a:	d94e      	bls.n	800c7ba <_svfiprintf_r+0x17e>
 800c71c:	b1b0      	cbz	r0, 800c74c <_svfiprintf_r+0x110>
 800c71e:	9207      	str	r2, [sp, #28]
 800c720:	e014      	b.n	800c74c <_svfiprintf_r+0x110>
 800c722:	eba0 0308 	sub.w	r3, r0, r8
 800c726:	fa09 f303 	lsl.w	r3, r9, r3
 800c72a:	4313      	orrs	r3, r2
 800c72c:	9304      	str	r3, [sp, #16]
 800c72e:	46a2      	mov	sl, r4
 800c730:	e7d2      	b.n	800c6d8 <_svfiprintf_r+0x9c>
 800c732:	9b03      	ldr	r3, [sp, #12]
 800c734:	1d19      	adds	r1, r3, #4
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	9103      	str	r1, [sp, #12]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	bfbb      	ittet	lt
 800c73e:	425b      	neglt	r3, r3
 800c740:	f042 0202 	orrlt.w	r2, r2, #2
 800c744:	9307      	strge	r3, [sp, #28]
 800c746:	9307      	strlt	r3, [sp, #28]
 800c748:	bfb8      	it	lt
 800c74a:	9204      	strlt	r2, [sp, #16]
 800c74c:	7823      	ldrb	r3, [r4, #0]
 800c74e:	2b2e      	cmp	r3, #46	; 0x2e
 800c750:	d10c      	bne.n	800c76c <_svfiprintf_r+0x130>
 800c752:	7863      	ldrb	r3, [r4, #1]
 800c754:	2b2a      	cmp	r3, #42	; 0x2a
 800c756:	d135      	bne.n	800c7c4 <_svfiprintf_r+0x188>
 800c758:	9b03      	ldr	r3, [sp, #12]
 800c75a:	1d1a      	adds	r2, r3, #4
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	9203      	str	r2, [sp, #12]
 800c760:	2b00      	cmp	r3, #0
 800c762:	bfb8      	it	lt
 800c764:	f04f 33ff 	movlt.w	r3, #4294967295
 800c768:	3402      	adds	r4, #2
 800c76a:	9305      	str	r3, [sp, #20]
 800c76c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c838 <_svfiprintf_r+0x1fc>
 800c770:	7821      	ldrb	r1, [r4, #0]
 800c772:	2203      	movs	r2, #3
 800c774:	4650      	mov	r0, sl
 800c776:	f7f3 fd43 	bl	8000200 <memchr>
 800c77a:	b140      	cbz	r0, 800c78e <_svfiprintf_r+0x152>
 800c77c:	2340      	movs	r3, #64	; 0x40
 800c77e:	eba0 000a 	sub.w	r0, r0, sl
 800c782:	fa03 f000 	lsl.w	r0, r3, r0
 800c786:	9b04      	ldr	r3, [sp, #16]
 800c788:	4303      	orrs	r3, r0
 800c78a:	3401      	adds	r4, #1
 800c78c:	9304      	str	r3, [sp, #16]
 800c78e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c792:	4826      	ldr	r0, [pc, #152]	; (800c82c <_svfiprintf_r+0x1f0>)
 800c794:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c798:	2206      	movs	r2, #6
 800c79a:	f7f3 fd31 	bl	8000200 <memchr>
 800c79e:	2800      	cmp	r0, #0
 800c7a0:	d038      	beq.n	800c814 <_svfiprintf_r+0x1d8>
 800c7a2:	4b23      	ldr	r3, [pc, #140]	; (800c830 <_svfiprintf_r+0x1f4>)
 800c7a4:	bb1b      	cbnz	r3, 800c7ee <_svfiprintf_r+0x1b2>
 800c7a6:	9b03      	ldr	r3, [sp, #12]
 800c7a8:	3307      	adds	r3, #7
 800c7aa:	f023 0307 	bic.w	r3, r3, #7
 800c7ae:	3308      	adds	r3, #8
 800c7b0:	9303      	str	r3, [sp, #12]
 800c7b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7b4:	4433      	add	r3, r6
 800c7b6:	9309      	str	r3, [sp, #36]	; 0x24
 800c7b8:	e767      	b.n	800c68a <_svfiprintf_r+0x4e>
 800c7ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7be:	460c      	mov	r4, r1
 800c7c0:	2001      	movs	r0, #1
 800c7c2:	e7a5      	b.n	800c710 <_svfiprintf_r+0xd4>
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	3401      	adds	r4, #1
 800c7c8:	9305      	str	r3, [sp, #20]
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	f04f 0c0a 	mov.w	ip, #10
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7d6:	3a30      	subs	r2, #48	; 0x30
 800c7d8:	2a09      	cmp	r2, #9
 800c7da:	d903      	bls.n	800c7e4 <_svfiprintf_r+0x1a8>
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d0c5      	beq.n	800c76c <_svfiprintf_r+0x130>
 800c7e0:	9105      	str	r1, [sp, #20]
 800c7e2:	e7c3      	b.n	800c76c <_svfiprintf_r+0x130>
 800c7e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7e8:	4604      	mov	r4, r0
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	e7f0      	b.n	800c7d0 <_svfiprintf_r+0x194>
 800c7ee:	ab03      	add	r3, sp, #12
 800c7f0:	9300      	str	r3, [sp, #0]
 800c7f2:	462a      	mov	r2, r5
 800c7f4:	4b0f      	ldr	r3, [pc, #60]	; (800c834 <_svfiprintf_r+0x1f8>)
 800c7f6:	a904      	add	r1, sp, #16
 800c7f8:	4638      	mov	r0, r7
 800c7fa:	f3af 8000 	nop.w
 800c7fe:	1c42      	adds	r2, r0, #1
 800c800:	4606      	mov	r6, r0
 800c802:	d1d6      	bne.n	800c7b2 <_svfiprintf_r+0x176>
 800c804:	89ab      	ldrh	r3, [r5, #12]
 800c806:	065b      	lsls	r3, r3, #25
 800c808:	f53f af2c 	bmi.w	800c664 <_svfiprintf_r+0x28>
 800c80c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c80e:	b01d      	add	sp, #116	; 0x74
 800c810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c814:	ab03      	add	r3, sp, #12
 800c816:	9300      	str	r3, [sp, #0]
 800c818:	462a      	mov	r2, r5
 800c81a:	4b06      	ldr	r3, [pc, #24]	; (800c834 <_svfiprintf_r+0x1f8>)
 800c81c:	a904      	add	r1, sp, #16
 800c81e:	4638      	mov	r0, r7
 800c820:	f000 f9d4 	bl	800cbcc <_printf_i>
 800c824:	e7eb      	b.n	800c7fe <_svfiprintf_r+0x1c2>
 800c826:	bf00      	nop
 800c828:	08011001 	.word	0x08011001
 800c82c:	0801100b 	.word	0x0801100b
 800c830:	00000000 	.word	0x00000000
 800c834:	0800c585 	.word	0x0800c585
 800c838:	08011007 	.word	0x08011007

0800c83c <__sfputc_r>:
 800c83c:	6893      	ldr	r3, [r2, #8]
 800c83e:	3b01      	subs	r3, #1
 800c840:	2b00      	cmp	r3, #0
 800c842:	b410      	push	{r4}
 800c844:	6093      	str	r3, [r2, #8]
 800c846:	da08      	bge.n	800c85a <__sfputc_r+0x1e>
 800c848:	6994      	ldr	r4, [r2, #24]
 800c84a:	42a3      	cmp	r3, r4
 800c84c:	db01      	blt.n	800c852 <__sfputc_r+0x16>
 800c84e:	290a      	cmp	r1, #10
 800c850:	d103      	bne.n	800c85a <__sfputc_r+0x1e>
 800c852:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c856:	f000 baf1 	b.w	800ce3c <__swbuf_r>
 800c85a:	6813      	ldr	r3, [r2, #0]
 800c85c:	1c58      	adds	r0, r3, #1
 800c85e:	6010      	str	r0, [r2, #0]
 800c860:	7019      	strb	r1, [r3, #0]
 800c862:	4608      	mov	r0, r1
 800c864:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c868:	4770      	bx	lr

0800c86a <__sfputs_r>:
 800c86a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c86c:	4606      	mov	r6, r0
 800c86e:	460f      	mov	r7, r1
 800c870:	4614      	mov	r4, r2
 800c872:	18d5      	adds	r5, r2, r3
 800c874:	42ac      	cmp	r4, r5
 800c876:	d101      	bne.n	800c87c <__sfputs_r+0x12>
 800c878:	2000      	movs	r0, #0
 800c87a:	e007      	b.n	800c88c <__sfputs_r+0x22>
 800c87c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c880:	463a      	mov	r2, r7
 800c882:	4630      	mov	r0, r6
 800c884:	f7ff ffda 	bl	800c83c <__sfputc_r>
 800c888:	1c43      	adds	r3, r0, #1
 800c88a:	d1f3      	bne.n	800c874 <__sfputs_r+0xa>
 800c88c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c890 <_vfiprintf_r>:
 800c890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c894:	460d      	mov	r5, r1
 800c896:	b09d      	sub	sp, #116	; 0x74
 800c898:	4614      	mov	r4, r2
 800c89a:	4698      	mov	r8, r3
 800c89c:	4606      	mov	r6, r0
 800c89e:	b118      	cbz	r0, 800c8a8 <_vfiprintf_r+0x18>
 800c8a0:	6983      	ldr	r3, [r0, #24]
 800c8a2:	b90b      	cbnz	r3, 800c8a8 <_vfiprintf_r+0x18>
 800c8a4:	f7ff f994 	bl	800bbd0 <__sinit>
 800c8a8:	4b89      	ldr	r3, [pc, #548]	; (800cad0 <_vfiprintf_r+0x240>)
 800c8aa:	429d      	cmp	r5, r3
 800c8ac:	d11b      	bne.n	800c8e6 <_vfiprintf_r+0x56>
 800c8ae:	6875      	ldr	r5, [r6, #4]
 800c8b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8b2:	07d9      	lsls	r1, r3, #31
 800c8b4:	d405      	bmi.n	800c8c2 <_vfiprintf_r+0x32>
 800c8b6:	89ab      	ldrh	r3, [r5, #12]
 800c8b8:	059a      	lsls	r2, r3, #22
 800c8ba:	d402      	bmi.n	800c8c2 <_vfiprintf_r+0x32>
 800c8bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8be:	f7ff fa4a 	bl	800bd56 <__retarget_lock_acquire_recursive>
 800c8c2:	89ab      	ldrh	r3, [r5, #12]
 800c8c4:	071b      	lsls	r3, r3, #28
 800c8c6:	d501      	bpl.n	800c8cc <_vfiprintf_r+0x3c>
 800c8c8:	692b      	ldr	r3, [r5, #16]
 800c8ca:	b9eb      	cbnz	r3, 800c908 <_vfiprintf_r+0x78>
 800c8cc:	4629      	mov	r1, r5
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	f000 fb06 	bl	800cee0 <__swsetup_r>
 800c8d4:	b1c0      	cbz	r0, 800c908 <_vfiprintf_r+0x78>
 800c8d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8d8:	07dc      	lsls	r4, r3, #31
 800c8da:	d50e      	bpl.n	800c8fa <_vfiprintf_r+0x6a>
 800c8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e0:	b01d      	add	sp, #116	; 0x74
 800c8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8e6:	4b7b      	ldr	r3, [pc, #492]	; (800cad4 <_vfiprintf_r+0x244>)
 800c8e8:	429d      	cmp	r5, r3
 800c8ea:	d101      	bne.n	800c8f0 <_vfiprintf_r+0x60>
 800c8ec:	68b5      	ldr	r5, [r6, #8]
 800c8ee:	e7df      	b.n	800c8b0 <_vfiprintf_r+0x20>
 800c8f0:	4b79      	ldr	r3, [pc, #484]	; (800cad8 <_vfiprintf_r+0x248>)
 800c8f2:	429d      	cmp	r5, r3
 800c8f4:	bf08      	it	eq
 800c8f6:	68f5      	ldreq	r5, [r6, #12]
 800c8f8:	e7da      	b.n	800c8b0 <_vfiprintf_r+0x20>
 800c8fa:	89ab      	ldrh	r3, [r5, #12]
 800c8fc:	0598      	lsls	r0, r3, #22
 800c8fe:	d4ed      	bmi.n	800c8dc <_vfiprintf_r+0x4c>
 800c900:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c902:	f7ff fa29 	bl	800bd58 <__retarget_lock_release_recursive>
 800c906:	e7e9      	b.n	800c8dc <_vfiprintf_r+0x4c>
 800c908:	2300      	movs	r3, #0
 800c90a:	9309      	str	r3, [sp, #36]	; 0x24
 800c90c:	2320      	movs	r3, #32
 800c90e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c912:	f8cd 800c 	str.w	r8, [sp, #12]
 800c916:	2330      	movs	r3, #48	; 0x30
 800c918:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cadc <_vfiprintf_r+0x24c>
 800c91c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c920:	f04f 0901 	mov.w	r9, #1
 800c924:	4623      	mov	r3, r4
 800c926:	469a      	mov	sl, r3
 800c928:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c92c:	b10a      	cbz	r2, 800c932 <_vfiprintf_r+0xa2>
 800c92e:	2a25      	cmp	r2, #37	; 0x25
 800c930:	d1f9      	bne.n	800c926 <_vfiprintf_r+0x96>
 800c932:	ebba 0b04 	subs.w	fp, sl, r4
 800c936:	d00b      	beq.n	800c950 <_vfiprintf_r+0xc0>
 800c938:	465b      	mov	r3, fp
 800c93a:	4622      	mov	r2, r4
 800c93c:	4629      	mov	r1, r5
 800c93e:	4630      	mov	r0, r6
 800c940:	f7ff ff93 	bl	800c86a <__sfputs_r>
 800c944:	3001      	adds	r0, #1
 800c946:	f000 80aa 	beq.w	800ca9e <_vfiprintf_r+0x20e>
 800c94a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c94c:	445a      	add	r2, fp
 800c94e:	9209      	str	r2, [sp, #36]	; 0x24
 800c950:	f89a 3000 	ldrb.w	r3, [sl]
 800c954:	2b00      	cmp	r3, #0
 800c956:	f000 80a2 	beq.w	800ca9e <_vfiprintf_r+0x20e>
 800c95a:	2300      	movs	r3, #0
 800c95c:	f04f 32ff 	mov.w	r2, #4294967295
 800c960:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c964:	f10a 0a01 	add.w	sl, sl, #1
 800c968:	9304      	str	r3, [sp, #16]
 800c96a:	9307      	str	r3, [sp, #28]
 800c96c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c970:	931a      	str	r3, [sp, #104]	; 0x68
 800c972:	4654      	mov	r4, sl
 800c974:	2205      	movs	r2, #5
 800c976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c97a:	4858      	ldr	r0, [pc, #352]	; (800cadc <_vfiprintf_r+0x24c>)
 800c97c:	f7f3 fc40 	bl	8000200 <memchr>
 800c980:	9a04      	ldr	r2, [sp, #16]
 800c982:	b9d8      	cbnz	r0, 800c9bc <_vfiprintf_r+0x12c>
 800c984:	06d1      	lsls	r1, r2, #27
 800c986:	bf44      	itt	mi
 800c988:	2320      	movmi	r3, #32
 800c98a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c98e:	0713      	lsls	r3, r2, #28
 800c990:	bf44      	itt	mi
 800c992:	232b      	movmi	r3, #43	; 0x2b
 800c994:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c998:	f89a 3000 	ldrb.w	r3, [sl]
 800c99c:	2b2a      	cmp	r3, #42	; 0x2a
 800c99e:	d015      	beq.n	800c9cc <_vfiprintf_r+0x13c>
 800c9a0:	9a07      	ldr	r2, [sp, #28]
 800c9a2:	4654      	mov	r4, sl
 800c9a4:	2000      	movs	r0, #0
 800c9a6:	f04f 0c0a 	mov.w	ip, #10
 800c9aa:	4621      	mov	r1, r4
 800c9ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9b0:	3b30      	subs	r3, #48	; 0x30
 800c9b2:	2b09      	cmp	r3, #9
 800c9b4:	d94e      	bls.n	800ca54 <_vfiprintf_r+0x1c4>
 800c9b6:	b1b0      	cbz	r0, 800c9e6 <_vfiprintf_r+0x156>
 800c9b8:	9207      	str	r2, [sp, #28]
 800c9ba:	e014      	b.n	800c9e6 <_vfiprintf_r+0x156>
 800c9bc:	eba0 0308 	sub.w	r3, r0, r8
 800c9c0:	fa09 f303 	lsl.w	r3, r9, r3
 800c9c4:	4313      	orrs	r3, r2
 800c9c6:	9304      	str	r3, [sp, #16]
 800c9c8:	46a2      	mov	sl, r4
 800c9ca:	e7d2      	b.n	800c972 <_vfiprintf_r+0xe2>
 800c9cc:	9b03      	ldr	r3, [sp, #12]
 800c9ce:	1d19      	adds	r1, r3, #4
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	9103      	str	r1, [sp, #12]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	bfbb      	ittet	lt
 800c9d8:	425b      	neglt	r3, r3
 800c9da:	f042 0202 	orrlt.w	r2, r2, #2
 800c9de:	9307      	strge	r3, [sp, #28]
 800c9e0:	9307      	strlt	r3, [sp, #28]
 800c9e2:	bfb8      	it	lt
 800c9e4:	9204      	strlt	r2, [sp, #16]
 800c9e6:	7823      	ldrb	r3, [r4, #0]
 800c9e8:	2b2e      	cmp	r3, #46	; 0x2e
 800c9ea:	d10c      	bne.n	800ca06 <_vfiprintf_r+0x176>
 800c9ec:	7863      	ldrb	r3, [r4, #1]
 800c9ee:	2b2a      	cmp	r3, #42	; 0x2a
 800c9f0:	d135      	bne.n	800ca5e <_vfiprintf_r+0x1ce>
 800c9f2:	9b03      	ldr	r3, [sp, #12]
 800c9f4:	1d1a      	adds	r2, r3, #4
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	9203      	str	r2, [sp, #12]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	bfb8      	it	lt
 800c9fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca02:	3402      	adds	r4, #2
 800ca04:	9305      	str	r3, [sp, #20]
 800ca06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800caec <_vfiprintf_r+0x25c>
 800ca0a:	7821      	ldrb	r1, [r4, #0]
 800ca0c:	2203      	movs	r2, #3
 800ca0e:	4650      	mov	r0, sl
 800ca10:	f7f3 fbf6 	bl	8000200 <memchr>
 800ca14:	b140      	cbz	r0, 800ca28 <_vfiprintf_r+0x198>
 800ca16:	2340      	movs	r3, #64	; 0x40
 800ca18:	eba0 000a 	sub.w	r0, r0, sl
 800ca1c:	fa03 f000 	lsl.w	r0, r3, r0
 800ca20:	9b04      	ldr	r3, [sp, #16]
 800ca22:	4303      	orrs	r3, r0
 800ca24:	3401      	adds	r4, #1
 800ca26:	9304      	str	r3, [sp, #16]
 800ca28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca2c:	482c      	ldr	r0, [pc, #176]	; (800cae0 <_vfiprintf_r+0x250>)
 800ca2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca32:	2206      	movs	r2, #6
 800ca34:	f7f3 fbe4 	bl	8000200 <memchr>
 800ca38:	2800      	cmp	r0, #0
 800ca3a:	d03f      	beq.n	800cabc <_vfiprintf_r+0x22c>
 800ca3c:	4b29      	ldr	r3, [pc, #164]	; (800cae4 <_vfiprintf_r+0x254>)
 800ca3e:	bb1b      	cbnz	r3, 800ca88 <_vfiprintf_r+0x1f8>
 800ca40:	9b03      	ldr	r3, [sp, #12]
 800ca42:	3307      	adds	r3, #7
 800ca44:	f023 0307 	bic.w	r3, r3, #7
 800ca48:	3308      	adds	r3, #8
 800ca4a:	9303      	str	r3, [sp, #12]
 800ca4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca4e:	443b      	add	r3, r7
 800ca50:	9309      	str	r3, [sp, #36]	; 0x24
 800ca52:	e767      	b.n	800c924 <_vfiprintf_r+0x94>
 800ca54:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca58:	460c      	mov	r4, r1
 800ca5a:	2001      	movs	r0, #1
 800ca5c:	e7a5      	b.n	800c9aa <_vfiprintf_r+0x11a>
 800ca5e:	2300      	movs	r3, #0
 800ca60:	3401      	adds	r4, #1
 800ca62:	9305      	str	r3, [sp, #20]
 800ca64:	4619      	mov	r1, r3
 800ca66:	f04f 0c0a 	mov.w	ip, #10
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca70:	3a30      	subs	r2, #48	; 0x30
 800ca72:	2a09      	cmp	r2, #9
 800ca74:	d903      	bls.n	800ca7e <_vfiprintf_r+0x1ee>
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d0c5      	beq.n	800ca06 <_vfiprintf_r+0x176>
 800ca7a:	9105      	str	r1, [sp, #20]
 800ca7c:	e7c3      	b.n	800ca06 <_vfiprintf_r+0x176>
 800ca7e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca82:	4604      	mov	r4, r0
 800ca84:	2301      	movs	r3, #1
 800ca86:	e7f0      	b.n	800ca6a <_vfiprintf_r+0x1da>
 800ca88:	ab03      	add	r3, sp, #12
 800ca8a:	9300      	str	r3, [sp, #0]
 800ca8c:	462a      	mov	r2, r5
 800ca8e:	4b16      	ldr	r3, [pc, #88]	; (800cae8 <_vfiprintf_r+0x258>)
 800ca90:	a904      	add	r1, sp, #16
 800ca92:	4630      	mov	r0, r6
 800ca94:	f3af 8000 	nop.w
 800ca98:	4607      	mov	r7, r0
 800ca9a:	1c78      	adds	r0, r7, #1
 800ca9c:	d1d6      	bne.n	800ca4c <_vfiprintf_r+0x1bc>
 800ca9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800caa0:	07d9      	lsls	r1, r3, #31
 800caa2:	d405      	bmi.n	800cab0 <_vfiprintf_r+0x220>
 800caa4:	89ab      	ldrh	r3, [r5, #12]
 800caa6:	059a      	lsls	r2, r3, #22
 800caa8:	d402      	bmi.n	800cab0 <_vfiprintf_r+0x220>
 800caaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800caac:	f7ff f954 	bl	800bd58 <__retarget_lock_release_recursive>
 800cab0:	89ab      	ldrh	r3, [r5, #12]
 800cab2:	065b      	lsls	r3, r3, #25
 800cab4:	f53f af12 	bmi.w	800c8dc <_vfiprintf_r+0x4c>
 800cab8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800caba:	e711      	b.n	800c8e0 <_vfiprintf_r+0x50>
 800cabc:	ab03      	add	r3, sp, #12
 800cabe:	9300      	str	r3, [sp, #0]
 800cac0:	462a      	mov	r2, r5
 800cac2:	4b09      	ldr	r3, [pc, #36]	; (800cae8 <_vfiprintf_r+0x258>)
 800cac4:	a904      	add	r1, sp, #16
 800cac6:	4630      	mov	r0, r6
 800cac8:	f000 f880 	bl	800cbcc <_printf_i>
 800cacc:	e7e4      	b.n	800ca98 <_vfiprintf_r+0x208>
 800cace:	bf00      	nop
 800cad0:	08010e08 	.word	0x08010e08
 800cad4:	08010e28 	.word	0x08010e28
 800cad8:	08010de8 	.word	0x08010de8
 800cadc:	08011001 	.word	0x08011001
 800cae0:	0801100b 	.word	0x0801100b
 800cae4:	00000000 	.word	0x00000000
 800cae8:	0800c86b 	.word	0x0800c86b
 800caec:	08011007 	.word	0x08011007

0800caf0 <_printf_common>:
 800caf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caf4:	4616      	mov	r6, r2
 800caf6:	4699      	mov	r9, r3
 800caf8:	688a      	ldr	r2, [r1, #8]
 800cafa:	690b      	ldr	r3, [r1, #16]
 800cafc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb00:	4293      	cmp	r3, r2
 800cb02:	bfb8      	it	lt
 800cb04:	4613      	movlt	r3, r2
 800cb06:	6033      	str	r3, [r6, #0]
 800cb08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb0c:	4607      	mov	r7, r0
 800cb0e:	460c      	mov	r4, r1
 800cb10:	b10a      	cbz	r2, 800cb16 <_printf_common+0x26>
 800cb12:	3301      	adds	r3, #1
 800cb14:	6033      	str	r3, [r6, #0]
 800cb16:	6823      	ldr	r3, [r4, #0]
 800cb18:	0699      	lsls	r1, r3, #26
 800cb1a:	bf42      	ittt	mi
 800cb1c:	6833      	ldrmi	r3, [r6, #0]
 800cb1e:	3302      	addmi	r3, #2
 800cb20:	6033      	strmi	r3, [r6, #0]
 800cb22:	6825      	ldr	r5, [r4, #0]
 800cb24:	f015 0506 	ands.w	r5, r5, #6
 800cb28:	d106      	bne.n	800cb38 <_printf_common+0x48>
 800cb2a:	f104 0a19 	add.w	sl, r4, #25
 800cb2e:	68e3      	ldr	r3, [r4, #12]
 800cb30:	6832      	ldr	r2, [r6, #0]
 800cb32:	1a9b      	subs	r3, r3, r2
 800cb34:	42ab      	cmp	r3, r5
 800cb36:	dc26      	bgt.n	800cb86 <_printf_common+0x96>
 800cb38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cb3c:	1e13      	subs	r3, r2, #0
 800cb3e:	6822      	ldr	r2, [r4, #0]
 800cb40:	bf18      	it	ne
 800cb42:	2301      	movne	r3, #1
 800cb44:	0692      	lsls	r2, r2, #26
 800cb46:	d42b      	bmi.n	800cba0 <_printf_common+0xb0>
 800cb48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb4c:	4649      	mov	r1, r9
 800cb4e:	4638      	mov	r0, r7
 800cb50:	47c0      	blx	r8
 800cb52:	3001      	adds	r0, #1
 800cb54:	d01e      	beq.n	800cb94 <_printf_common+0xa4>
 800cb56:	6823      	ldr	r3, [r4, #0]
 800cb58:	68e5      	ldr	r5, [r4, #12]
 800cb5a:	6832      	ldr	r2, [r6, #0]
 800cb5c:	f003 0306 	and.w	r3, r3, #6
 800cb60:	2b04      	cmp	r3, #4
 800cb62:	bf08      	it	eq
 800cb64:	1aad      	subeq	r5, r5, r2
 800cb66:	68a3      	ldr	r3, [r4, #8]
 800cb68:	6922      	ldr	r2, [r4, #16]
 800cb6a:	bf0c      	ite	eq
 800cb6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb70:	2500      	movne	r5, #0
 800cb72:	4293      	cmp	r3, r2
 800cb74:	bfc4      	itt	gt
 800cb76:	1a9b      	subgt	r3, r3, r2
 800cb78:	18ed      	addgt	r5, r5, r3
 800cb7a:	2600      	movs	r6, #0
 800cb7c:	341a      	adds	r4, #26
 800cb7e:	42b5      	cmp	r5, r6
 800cb80:	d11a      	bne.n	800cbb8 <_printf_common+0xc8>
 800cb82:	2000      	movs	r0, #0
 800cb84:	e008      	b.n	800cb98 <_printf_common+0xa8>
 800cb86:	2301      	movs	r3, #1
 800cb88:	4652      	mov	r2, sl
 800cb8a:	4649      	mov	r1, r9
 800cb8c:	4638      	mov	r0, r7
 800cb8e:	47c0      	blx	r8
 800cb90:	3001      	adds	r0, #1
 800cb92:	d103      	bne.n	800cb9c <_printf_common+0xac>
 800cb94:	f04f 30ff 	mov.w	r0, #4294967295
 800cb98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb9c:	3501      	adds	r5, #1
 800cb9e:	e7c6      	b.n	800cb2e <_printf_common+0x3e>
 800cba0:	18e1      	adds	r1, r4, r3
 800cba2:	1c5a      	adds	r2, r3, #1
 800cba4:	2030      	movs	r0, #48	; 0x30
 800cba6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cbaa:	4422      	add	r2, r4
 800cbac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cbb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cbb4:	3302      	adds	r3, #2
 800cbb6:	e7c7      	b.n	800cb48 <_printf_common+0x58>
 800cbb8:	2301      	movs	r3, #1
 800cbba:	4622      	mov	r2, r4
 800cbbc:	4649      	mov	r1, r9
 800cbbe:	4638      	mov	r0, r7
 800cbc0:	47c0      	blx	r8
 800cbc2:	3001      	adds	r0, #1
 800cbc4:	d0e6      	beq.n	800cb94 <_printf_common+0xa4>
 800cbc6:	3601      	adds	r6, #1
 800cbc8:	e7d9      	b.n	800cb7e <_printf_common+0x8e>
	...

0800cbcc <_printf_i>:
 800cbcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cbd0:	460c      	mov	r4, r1
 800cbd2:	4691      	mov	r9, r2
 800cbd4:	7e27      	ldrb	r7, [r4, #24]
 800cbd6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cbd8:	2f78      	cmp	r7, #120	; 0x78
 800cbda:	4680      	mov	r8, r0
 800cbdc:	469a      	mov	sl, r3
 800cbde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cbe2:	d807      	bhi.n	800cbf4 <_printf_i+0x28>
 800cbe4:	2f62      	cmp	r7, #98	; 0x62
 800cbe6:	d80a      	bhi.n	800cbfe <_printf_i+0x32>
 800cbe8:	2f00      	cmp	r7, #0
 800cbea:	f000 80d8 	beq.w	800cd9e <_printf_i+0x1d2>
 800cbee:	2f58      	cmp	r7, #88	; 0x58
 800cbf0:	f000 80a3 	beq.w	800cd3a <_printf_i+0x16e>
 800cbf4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cbf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cbfc:	e03a      	b.n	800cc74 <_printf_i+0xa8>
 800cbfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cc02:	2b15      	cmp	r3, #21
 800cc04:	d8f6      	bhi.n	800cbf4 <_printf_i+0x28>
 800cc06:	a001      	add	r0, pc, #4	; (adr r0, 800cc0c <_printf_i+0x40>)
 800cc08:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cc0c:	0800cc65 	.word	0x0800cc65
 800cc10:	0800cc79 	.word	0x0800cc79
 800cc14:	0800cbf5 	.word	0x0800cbf5
 800cc18:	0800cbf5 	.word	0x0800cbf5
 800cc1c:	0800cbf5 	.word	0x0800cbf5
 800cc20:	0800cbf5 	.word	0x0800cbf5
 800cc24:	0800cc79 	.word	0x0800cc79
 800cc28:	0800cbf5 	.word	0x0800cbf5
 800cc2c:	0800cbf5 	.word	0x0800cbf5
 800cc30:	0800cbf5 	.word	0x0800cbf5
 800cc34:	0800cbf5 	.word	0x0800cbf5
 800cc38:	0800cd85 	.word	0x0800cd85
 800cc3c:	0800cca9 	.word	0x0800cca9
 800cc40:	0800cd67 	.word	0x0800cd67
 800cc44:	0800cbf5 	.word	0x0800cbf5
 800cc48:	0800cbf5 	.word	0x0800cbf5
 800cc4c:	0800cda7 	.word	0x0800cda7
 800cc50:	0800cbf5 	.word	0x0800cbf5
 800cc54:	0800cca9 	.word	0x0800cca9
 800cc58:	0800cbf5 	.word	0x0800cbf5
 800cc5c:	0800cbf5 	.word	0x0800cbf5
 800cc60:	0800cd6f 	.word	0x0800cd6f
 800cc64:	680b      	ldr	r3, [r1, #0]
 800cc66:	1d1a      	adds	r2, r3, #4
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	600a      	str	r2, [r1, #0]
 800cc6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cc70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc74:	2301      	movs	r3, #1
 800cc76:	e0a3      	b.n	800cdc0 <_printf_i+0x1f4>
 800cc78:	6825      	ldr	r5, [r4, #0]
 800cc7a:	6808      	ldr	r0, [r1, #0]
 800cc7c:	062e      	lsls	r6, r5, #24
 800cc7e:	f100 0304 	add.w	r3, r0, #4
 800cc82:	d50a      	bpl.n	800cc9a <_printf_i+0xce>
 800cc84:	6805      	ldr	r5, [r0, #0]
 800cc86:	600b      	str	r3, [r1, #0]
 800cc88:	2d00      	cmp	r5, #0
 800cc8a:	da03      	bge.n	800cc94 <_printf_i+0xc8>
 800cc8c:	232d      	movs	r3, #45	; 0x2d
 800cc8e:	426d      	negs	r5, r5
 800cc90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc94:	485e      	ldr	r0, [pc, #376]	; (800ce10 <_printf_i+0x244>)
 800cc96:	230a      	movs	r3, #10
 800cc98:	e019      	b.n	800ccce <_printf_i+0x102>
 800cc9a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cc9e:	6805      	ldr	r5, [r0, #0]
 800cca0:	600b      	str	r3, [r1, #0]
 800cca2:	bf18      	it	ne
 800cca4:	b22d      	sxthne	r5, r5
 800cca6:	e7ef      	b.n	800cc88 <_printf_i+0xbc>
 800cca8:	680b      	ldr	r3, [r1, #0]
 800ccaa:	6825      	ldr	r5, [r4, #0]
 800ccac:	1d18      	adds	r0, r3, #4
 800ccae:	6008      	str	r0, [r1, #0]
 800ccb0:	0628      	lsls	r0, r5, #24
 800ccb2:	d501      	bpl.n	800ccb8 <_printf_i+0xec>
 800ccb4:	681d      	ldr	r5, [r3, #0]
 800ccb6:	e002      	b.n	800ccbe <_printf_i+0xf2>
 800ccb8:	0669      	lsls	r1, r5, #25
 800ccba:	d5fb      	bpl.n	800ccb4 <_printf_i+0xe8>
 800ccbc:	881d      	ldrh	r5, [r3, #0]
 800ccbe:	4854      	ldr	r0, [pc, #336]	; (800ce10 <_printf_i+0x244>)
 800ccc0:	2f6f      	cmp	r7, #111	; 0x6f
 800ccc2:	bf0c      	ite	eq
 800ccc4:	2308      	moveq	r3, #8
 800ccc6:	230a      	movne	r3, #10
 800ccc8:	2100      	movs	r1, #0
 800ccca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ccce:	6866      	ldr	r6, [r4, #4]
 800ccd0:	60a6      	str	r6, [r4, #8]
 800ccd2:	2e00      	cmp	r6, #0
 800ccd4:	bfa2      	ittt	ge
 800ccd6:	6821      	ldrge	r1, [r4, #0]
 800ccd8:	f021 0104 	bicge.w	r1, r1, #4
 800ccdc:	6021      	strge	r1, [r4, #0]
 800ccde:	b90d      	cbnz	r5, 800cce4 <_printf_i+0x118>
 800cce0:	2e00      	cmp	r6, #0
 800cce2:	d04d      	beq.n	800cd80 <_printf_i+0x1b4>
 800cce4:	4616      	mov	r6, r2
 800cce6:	fbb5 f1f3 	udiv	r1, r5, r3
 800ccea:	fb03 5711 	mls	r7, r3, r1, r5
 800ccee:	5dc7      	ldrb	r7, [r0, r7]
 800ccf0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ccf4:	462f      	mov	r7, r5
 800ccf6:	42bb      	cmp	r3, r7
 800ccf8:	460d      	mov	r5, r1
 800ccfa:	d9f4      	bls.n	800cce6 <_printf_i+0x11a>
 800ccfc:	2b08      	cmp	r3, #8
 800ccfe:	d10b      	bne.n	800cd18 <_printf_i+0x14c>
 800cd00:	6823      	ldr	r3, [r4, #0]
 800cd02:	07df      	lsls	r7, r3, #31
 800cd04:	d508      	bpl.n	800cd18 <_printf_i+0x14c>
 800cd06:	6923      	ldr	r3, [r4, #16]
 800cd08:	6861      	ldr	r1, [r4, #4]
 800cd0a:	4299      	cmp	r1, r3
 800cd0c:	bfde      	ittt	le
 800cd0e:	2330      	movle	r3, #48	; 0x30
 800cd10:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cd14:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cd18:	1b92      	subs	r2, r2, r6
 800cd1a:	6122      	str	r2, [r4, #16]
 800cd1c:	f8cd a000 	str.w	sl, [sp]
 800cd20:	464b      	mov	r3, r9
 800cd22:	aa03      	add	r2, sp, #12
 800cd24:	4621      	mov	r1, r4
 800cd26:	4640      	mov	r0, r8
 800cd28:	f7ff fee2 	bl	800caf0 <_printf_common>
 800cd2c:	3001      	adds	r0, #1
 800cd2e:	d14c      	bne.n	800cdca <_printf_i+0x1fe>
 800cd30:	f04f 30ff 	mov.w	r0, #4294967295
 800cd34:	b004      	add	sp, #16
 800cd36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd3a:	4835      	ldr	r0, [pc, #212]	; (800ce10 <_printf_i+0x244>)
 800cd3c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cd40:	6823      	ldr	r3, [r4, #0]
 800cd42:	680e      	ldr	r6, [r1, #0]
 800cd44:	061f      	lsls	r7, r3, #24
 800cd46:	f856 5b04 	ldr.w	r5, [r6], #4
 800cd4a:	600e      	str	r6, [r1, #0]
 800cd4c:	d514      	bpl.n	800cd78 <_printf_i+0x1ac>
 800cd4e:	07d9      	lsls	r1, r3, #31
 800cd50:	bf44      	itt	mi
 800cd52:	f043 0320 	orrmi.w	r3, r3, #32
 800cd56:	6023      	strmi	r3, [r4, #0]
 800cd58:	b91d      	cbnz	r5, 800cd62 <_printf_i+0x196>
 800cd5a:	6823      	ldr	r3, [r4, #0]
 800cd5c:	f023 0320 	bic.w	r3, r3, #32
 800cd60:	6023      	str	r3, [r4, #0]
 800cd62:	2310      	movs	r3, #16
 800cd64:	e7b0      	b.n	800ccc8 <_printf_i+0xfc>
 800cd66:	6823      	ldr	r3, [r4, #0]
 800cd68:	f043 0320 	orr.w	r3, r3, #32
 800cd6c:	6023      	str	r3, [r4, #0]
 800cd6e:	2378      	movs	r3, #120	; 0x78
 800cd70:	4828      	ldr	r0, [pc, #160]	; (800ce14 <_printf_i+0x248>)
 800cd72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cd76:	e7e3      	b.n	800cd40 <_printf_i+0x174>
 800cd78:	065e      	lsls	r6, r3, #25
 800cd7a:	bf48      	it	mi
 800cd7c:	b2ad      	uxthmi	r5, r5
 800cd7e:	e7e6      	b.n	800cd4e <_printf_i+0x182>
 800cd80:	4616      	mov	r6, r2
 800cd82:	e7bb      	b.n	800ccfc <_printf_i+0x130>
 800cd84:	680b      	ldr	r3, [r1, #0]
 800cd86:	6826      	ldr	r6, [r4, #0]
 800cd88:	6960      	ldr	r0, [r4, #20]
 800cd8a:	1d1d      	adds	r5, r3, #4
 800cd8c:	600d      	str	r5, [r1, #0]
 800cd8e:	0635      	lsls	r5, r6, #24
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	d501      	bpl.n	800cd98 <_printf_i+0x1cc>
 800cd94:	6018      	str	r0, [r3, #0]
 800cd96:	e002      	b.n	800cd9e <_printf_i+0x1d2>
 800cd98:	0671      	lsls	r1, r6, #25
 800cd9a:	d5fb      	bpl.n	800cd94 <_printf_i+0x1c8>
 800cd9c:	8018      	strh	r0, [r3, #0]
 800cd9e:	2300      	movs	r3, #0
 800cda0:	6123      	str	r3, [r4, #16]
 800cda2:	4616      	mov	r6, r2
 800cda4:	e7ba      	b.n	800cd1c <_printf_i+0x150>
 800cda6:	680b      	ldr	r3, [r1, #0]
 800cda8:	1d1a      	adds	r2, r3, #4
 800cdaa:	600a      	str	r2, [r1, #0]
 800cdac:	681e      	ldr	r6, [r3, #0]
 800cdae:	6862      	ldr	r2, [r4, #4]
 800cdb0:	2100      	movs	r1, #0
 800cdb2:	4630      	mov	r0, r6
 800cdb4:	f7f3 fa24 	bl	8000200 <memchr>
 800cdb8:	b108      	cbz	r0, 800cdbe <_printf_i+0x1f2>
 800cdba:	1b80      	subs	r0, r0, r6
 800cdbc:	6060      	str	r0, [r4, #4]
 800cdbe:	6863      	ldr	r3, [r4, #4]
 800cdc0:	6123      	str	r3, [r4, #16]
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdc8:	e7a8      	b.n	800cd1c <_printf_i+0x150>
 800cdca:	6923      	ldr	r3, [r4, #16]
 800cdcc:	4632      	mov	r2, r6
 800cdce:	4649      	mov	r1, r9
 800cdd0:	4640      	mov	r0, r8
 800cdd2:	47d0      	blx	sl
 800cdd4:	3001      	adds	r0, #1
 800cdd6:	d0ab      	beq.n	800cd30 <_printf_i+0x164>
 800cdd8:	6823      	ldr	r3, [r4, #0]
 800cdda:	079b      	lsls	r3, r3, #30
 800cddc:	d413      	bmi.n	800ce06 <_printf_i+0x23a>
 800cdde:	68e0      	ldr	r0, [r4, #12]
 800cde0:	9b03      	ldr	r3, [sp, #12]
 800cde2:	4298      	cmp	r0, r3
 800cde4:	bfb8      	it	lt
 800cde6:	4618      	movlt	r0, r3
 800cde8:	e7a4      	b.n	800cd34 <_printf_i+0x168>
 800cdea:	2301      	movs	r3, #1
 800cdec:	4632      	mov	r2, r6
 800cdee:	4649      	mov	r1, r9
 800cdf0:	4640      	mov	r0, r8
 800cdf2:	47d0      	blx	sl
 800cdf4:	3001      	adds	r0, #1
 800cdf6:	d09b      	beq.n	800cd30 <_printf_i+0x164>
 800cdf8:	3501      	adds	r5, #1
 800cdfa:	68e3      	ldr	r3, [r4, #12]
 800cdfc:	9903      	ldr	r1, [sp, #12]
 800cdfe:	1a5b      	subs	r3, r3, r1
 800ce00:	42ab      	cmp	r3, r5
 800ce02:	dcf2      	bgt.n	800cdea <_printf_i+0x21e>
 800ce04:	e7eb      	b.n	800cdde <_printf_i+0x212>
 800ce06:	2500      	movs	r5, #0
 800ce08:	f104 0619 	add.w	r6, r4, #25
 800ce0c:	e7f5      	b.n	800cdfa <_printf_i+0x22e>
 800ce0e:	bf00      	nop
 800ce10:	08011012 	.word	0x08011012
 800ce14:	08011023 	.word	0x08011023

0800ce18 <_read_r>:
 800ce18:	b538      	push	{r3, r4, r5, lr}
 800ce1a:	4d07      	ldr	r5, [pc, #28]	; (800ce38 <_read_r+0x20>)
 800ce1c:	4604      	mov	r4, r0
 800ce1e:	4608      	mov	r0, r1
 800ce20:	4611      	mov	r1, r2
 800ce22:	2200      	movs	r2, #0
 800ce24:	602a      	str	r2, [r5, #0]
 800ce26:	461a      	mov	r2, r3
 800ce28:	f7f5 fb54 	bl	80024d4 <_read>
 800ce2c:	1c43      	adds	r3, r0, #1
 800ce2e:	d102      	bne.n	800ce36 <_read_r+0x1e>
 800ce30:	682b      	ldr	r3, [r5, #0]
 800ce32:	b103      	cbz	r3, 800ce36 <_read_r+0x1e>
 800ce34:	6023      	str	r3, [r4, #0]
 800ce36:	bd38      	pop	{r3, r4, r5, pc}
 800ce38:	2002f710 	.word	0x2002f710

0800ce3c <__swbuf_r>:
 800ce3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce3e:	460e      	mov	r6, r1
 800ce40:	4614      	mov	r4, r2
 800ce42:	4605      	mov	r5, r0
 800ce44:	b118      	cbz	r0, 800ce4e <__swbuf_r+0x12>
 800ce46:	6983      	ldr	r3, [r0, #24]
 800ce48:	b90b      	cbnz	r3, 800ce4e <__swbuf_r+0x12>
 800ce4a:	f7fe fec1 	bl	800bbd0 <__sinit>
 800ce4e:	4b21      	ldr	r3, [pc, #132]	; (800ced4 <__swbuf_r+0x98>)
 800ce50:	429c      	cmp	r4, r3
 800ce52:	d12b      	bne.n	800ceac <__swbuf_r+0x70>
 800ce54:	686c      	ldr	r4, [r5, #4]
 800ce56:	69a3      	ldr	r3, [r4, #24]
 800ce58:	60a3      	str	r3, [r4, #8]
 800ce5a:	89a3      	ldrh	r3, [r4, #12]
 800ce5c:	071a      	lsls	r2, r3, #28
 800ce5e:	d52f      	bpl.n	800cec0 <__swbuf_r+0x84>
 800ce60:	6923      	ldr	r3, [r4, #16]
 800ce62:	b36b      	cbz	r3, 800cec0 <__swbuf_r+0x84>
 800ce64:	6923      	ldr	r3, [r4, #16]
 800ce66:	6820      	ldr	r0, [r4, #0]
 800ce68:	1ac0      	subs	r0, r0, r3
 800ce6a:	6963      	ldr	r3, [r4, #20]
 800ce6c:	b2f6      	uxtb	r6, r6
 800ce6e:	4283      	cmp	r3, r0
 800ce70:	4637      	mov	r7, r6
 800ce72:	dc04      	bgt.n	800ce7e <__swbuf_r+0x42>
 800ce74:	4621      	mov	r1, r4
 800ce76:	4628      	mov	r0, r5
 800ce78:	f7ff fac0 	bl	800c3fc <_fflush_r>
 800ce7c:	bb30      	cbnz	r0, 800cecc <__swbuf_r+0x90>
 800ce7e:	68a3      	ldr	r3, [r4, #8]
 800ce80:	3b01      	subs	r3, #1
 800ce82:	60a3      	str	r3, [r4, #8]
 800ce84:	6823      	ldr	r3, [r4, #0]
 800ce86:	1c5a      	adds	r2, r3, #1
 800ce88:	6022      	str	r2, [r4, #0]
 800ce8a:	701e      	strb	r6, [r3, #0]
 800ce8c:	6963      	ldr	r3, [r4, #20]
 800ce8e:	3001      	adds	r0, #1
 800ce90:	4283      	cmp	r3, r0
 800ce92:	d004      	beq.n	800ce9e <__swbuf_r+0x62>
 800ce94:	89a3      	ldrh	r3, [r4, #12]
 800ce96:	07db      	lsls	r3, r3, #31
 800ce98:	d506      	bpl.n	800cea8 <__swbuf_r+0x6c>
 800ce9a:	2e0a      	cmp	r6, #10
 800ce9c:	d104      	bne.n	800cea8 <__swbuf_r+0x6c>
 800ce9e:	4621      	mov	r1, r4
 800cea0:	4628      	mov	r0, r5
 800cea2:	f7ff faab 	bl	800c3fc <_fflush_r>
 800cea6:	b988      	cbnz	r0, 800cecc <__swbuf_r+0x90>
 800cea8:	4638      	mov	r0, r7
 800ceaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ceac:	4b0a      	ldr	r3, [pc, #40]	; (800ced8 <__swbuf_r+0x9c>)
 800ceae:	429c      	cmp	r4, r3
 800ceb0:	d101      	bne.n	800ceb6 <__swbuf_r+0x7a>
 800ceb2:	68ac      	ldr	r4, [r5, #8]
 800ceb4:	e7cf      	b.n	800ce56 <__swbuf_r+0x1a>
 800ceb6:	4b09      	ldr	r3, [pc, #36]	; (800cedc <__swbuf_r+0xa0>)
 800ceb8:	429c      	cmp	r4, r3
 800ceba:	bf08      	it	eq
 800cebc:	68ec      	ldreq	r4, [r5, #12]
 800cebe:	e7ca      	b.n	800ce56 <__swbuf_r+0x1a>
 800cec0:	4621      	mov	r1, r4
 800cec2:	4628      	mov	r0, r5
 800cec4:	f000 f80c 	bl	800cee0 <__swsetup_r>
 800cec8:	2800      	cmp	r0, #0
 800ceca:	d0cb      	beq.n	800ce64 <__swbuf_r+0x28>
 800cecc:	f04f 37ff 	mov.w	r7, #4294967295
 800ced0:	e7ea      	b.n	800cea8 <__swbuf_r+0x6c>
 800ced2:	bf00      	nop
 800ced4:	08010e08 	.word	0x08010e08
 800ced8:	08010e28 	.word	0x08010e28
 800cedc:	08010de8 	.word	0x08010de8

0800cee0 <__swsetup_r>:
 800cee0:	4b32      	ldr	r3, [pc, #200]	; (800cfac <__swsetup_r+0xcc>)
 800cee2:	b570      	push	{r4, r5, r6, lr}
 800cee4:	681d      	ldr	r5, [r3, #0]
 800cee6:	4606      	mov	r6, r0
 800cee8:	460c      	mov	r4, r1
 800ceea:	b125      	cbz	r5, 800cef6 <__swsetup_r+0x16>
 800ceec:	69ab      	ldr	r3, [r5, #24]
 800ceee:	b913      	cbnz	r3, 800cef6 <__swsetup_r+0x16>
 800cef0:	4628      	mov	r0, r5
 800cef2:	f7fe fe6d 	bl	800bbd0 <__sinit>
 800cef6:	4b2e      	ldr	r3, [pc, #184]	; (800cfb0 <__swsetup_r+0xd0>)
 800cef8:	429c      	cmp	r4, r3
 800cefa:	d10f      	bne.n	800cf1c <__swsetup_r+0x3c>
 800cefc:	686c      	ldr	r4, [r5, #4]
 800cefe:	89a3      	ldrh	r3, [r4, #12]
 800cf00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf04:	0719      	lsls	r1, r3, #28
 800cf06:	d42c      	bmi.n	800cf62 <__swsetup_r+0x82>
 800cf08:	06dd      	lsls	r5, r3, #27
 800cf0a:	d411      	bmi.n	800cf30 <__swsetup_r+0x50>
 800cf0c:	2309      	movs	r3, #9
 800cf0e:	6033      	str	r3, [r6, #0]
 800cf10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cf14:	81a3      	strh	r3, [r4, #12]
 800cf16:	f04f 30ff 	mov.w	r0, #4294967295
 800cf1a:	e03e      	b.n	800cf9a <__swsetup_r+0xba>
 800cf1c:	4b25      	ldr	r3, [pc, #148]	; (800cfb4 <__swsetup_r+0xd4>)
 800cf1e:	429c      	cmp	r4, r3
 800cf20:	d101      	bne.n	800cf26 <__swsetup_r+0x46>
 800cf22:	68ac      	ldr	r4, [r5, #8]
 800cf24:	e7eb      	b.n	800cefe <__swsetup_r+0x1e>
 800cf26:	4b24      	ldr	r3, [pc, #144]	; (800cfb8 <__swsetup_r+0xd8>)
 800cf28:	429c      	cmp	r4, r3
 800cf2a:	bf08      	it	eq
 800cf2c:	68ec      	ldreq	r4, [r5, #12]
 800cf2e:	e7e6      	b.n	800cefe <__swsetup_r+0x1e>
 800cf30:	0758      	lsls	r0, r3, #29
 800cf32:	d512      	bpl.n	800cf5a <__swsetup_r+0x7a>
 800cf34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf36:	b141      	cbz	r1, 800cf4a <__swsetup_r+0x6a>
 800cf38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf3c:	4299      	cmp	r1, r3
 800cf3e:	d002      	beq.n	800cf46 <__swsetup_r+0x66>
 800cf40:	4630      	mov	r0, r6
 800cf42:	f7ff facf 	bl	800c4e4 <_free_r>
 800cf46:	2300      	movs	r3, #0
 800cf48:	6363      	str	r3, [r4, #52]	; 0x34
 800cf4a:	89a3      	ldrh	r3, [r4, #12]
 800cf4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cf50:	81a3      	strh	r3, [r4, #12]
 800cf52:	2300      	movs	r3, #0
 800cf54:	6063      	str	r3, [r4, #4]
 800cf56:	6923      	ldr	r3, [r4, #16]
 800cf58:	6023      	str	r3, [r4, #0]
 800cf5a:	89a3      	ldrh	r3, [r4, #12]
 800cf5c:	f043 0308 	orr.w	r3, r3, #8
 800cf60:	81a3      	strh	r3, [r4, #12]
 800cf62:	6923      	ldr	r3, [r4, #16]
 800cf64:	b94b      	cbnz	r3, 800cf7a <__swsetup_r+0x9a>
 800cf66:	89a3      	ldrh	r3, [r4, #12]
 800cf68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cf6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf70:	d003      	beq.n	800cf7a <__swsetup_r+0x9a>
 800cf72:	4621      	mov	r1, r4
 800cf74:	4630      	mov	r0, r6
 800cf76:	f000 f84d 	bl	800d014 <__smakebuf_r>
 800cf7a:	89a0      	ldrh	r0, [r4, #12]
 800cf7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf80:	f010 0301 	ands.w	r3, r0, #1
 800cf84:	d00a      	beq.n	800cf9c <__swsetup_r+0xbc>
 800cf86:	2300      	movs	r3, #0
 800cf88:	60a3      	str	r3, [r4, #8]
 800cf8a:	6963      	ldr	r3, [r4, #20]
 800cf8c:	425b      	negs	r3, r3
 800cf8e:	61a3      	str	r3, [r4, #24]
 800cf90:	6923      	ldr	r3, [r4, #16]
 800cf92:	b943      	cbnz	r3, 800cfa6 <__swsetup_r+0xc6>
 800cf94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cf98:	d1ba      	bne.n	800cf10 <__swsetup_r+0x30>
 800cf9a:	bd70      	pop	{r4, r5, r6, pc}
 800cf9c:	0781      	lsls	r1, r0, #30
 800cf9e:	bf58      	it	pl
 800cfa0:	6963      	ldrpl	r3, [r4, #20]
 800cfa2:	60a3      	str	r3, [r4, #8]
 800cfa4:	e7f4      	b.n	800cf90 <__swsetup_r+0xb0>
 800cfa6:	2000      	movs	r0, #0
 800cfa8:	e7f7      	b.n	800cf9a <__swsetup_r+0xba>
 800cfaa:	bf00      	nop
 800cfac:	200000a4 	.word	0x200000a4
 800cfb0:	08010e08 	.word	0x08010e08
 800cfb4:	08010e28 	.word	0x08010e28
 800cfb8:	08010de8 	.word	0x08010de8

0800cfbc <abort>:
 800cfbc:	b508      	push	{r3, lr}
 800cfbe:	2006      	movs	r0, #6
 800cfc0:	f000 f8d0 	bl	800d164 <raise>
 800cfc4:	2001      	movs	r0, #1
 800cfc6:	f7f5 fa7b 	bl	80024c0 <_exit>

0800cfca <__swhatbuf_r>:
 800cfca:	b570      	push	{r4, r5, r6, lr}
 800cfcc:	460e      	mov	r6, r1
 800cfce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfd2:	2900      	cmp	r1, #0
 800cfd4:	b096      	sub	sp, #88	; 0x58
 800cfd6:	4614      	mov	r4, r2
 800cfd8:	461d      	mov	r5, r3
 800cfda:	da07      	bge.n	800cfec <__swhatbuf_r+0x22>
 800cfdc:	2300      	movs	r3, #0
 800cfde:	602b      	str	r3, [r5, #0]
 800cfe0:	89b3      	ldrh	r3, [r6, #12]
 800cfe2:	061a      	lsls	r2, r3, #24
 800cfe4:	d410      	bmi.n	800d008 <__swhatbuf_r+0x3e>
 800cfe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfea:	e00e      	b.n	800d00a <__swhatbuf_r+0x40>
 800cfec:	466a      	mov	r2, sp
 800cfee:	f000 f8d5 	bl	800d19c <_fstat_r>
 800cff2:	2800      	cmp	r0, #0
 800cff4:	dbf2      	blt.n	800cfdc <__swhatbuf_r+0x12>
 800cff6:	9a01      	ldr	r2, [sp, #4]
 800cff8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cffc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d000:	425a      	negs	r2, r3
 800d002:	415a      	adcs	r2, r3
 800d004:	602a      	str	r2, [r5, #0]
 800d006:	e7ee      	b.n	800cfe6 <__swhatbuf_r+0x1c>
 800d008:	2340      	movs	r3, #64	; 0x40
 800d00a:	2000      	movs	r0, #0
 800d00c:	6023      	str	r3, [r4, #0]
 800d00e:	b016      	add	sp, #88	; 0x58
 800d010:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d014 <__smakebuf_r>:
 800d014:	898b      	ldrh	r3, [r1, #12]
 800d016:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d018:	079d      	lsls	r5, r3, #30
 800d01a:	4606      	mov	r6, r0
 800d01c:	460c      	mov	r4, r1
 800d01e:	d507      	bpl.n	800d030 <__smakebuf_r+0x1c>
 800d020:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d024:	6023      	str	r3, [r4, #0]
 800d026:	6123      	str	r3, [r4, #16]
 800d028:	2301      	movs	r3, #1
 800d02a:	6163      	str	r3, [r4, #20]
 800d02c:	b002      	add	sp, #8
 800d02e:	bd70      	pop	{r4, r5, r6, pc}
 800d030:	ab01      	add	r3, sp, #4
 800d032:	466a      	mov	r2, sp
 800d034:	f7ff ffc9 	bl	800cfca <__swhatbuf_r>
 800d038:	9900      	ldr	r1, [sp, #0]
 800d03a:	4605      	mov	r5, r0
 800d03c:	4630      	mov	r0, r6
 800d03e:	f7fe fea3 	bl	800bd88 <_malloc_r>
 800d042:	b948      	cbnz	r0, 800d058 <__smakebuf_r+0x44>
 800d044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d048:	059a      	lsls	r2, r3, #22
 800d04a:	d4ef      	bmi.n	800d02c <__smakebuf_r+0x18>
 800d04c:	f023 0303 	bic.w	r3, r3, #3
 800d050:	f043 0302 	orr.w	r3, r3, #2
 800d054:	81a3      	strh	r3, [r4, #12]
 800d056:	e7e3      	b.n	800d020 <__smakebuf_r+0xc>
 800d058:	4b0d      	ldr	r3, [pc, #52]	; (800d090 <__smakebuf_r+0x7c>)
 800d05a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d05c:	89a3      	ldrh	r3, [r4, #12]
 800d05e:	6020      	str	r0, [r4, #0]
 800d060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d064:	81a3      	strh	r3, [r4, #12]
 800d066:	9b00      	ldr	r3, [sp, #0]
 800d068:	6163      	str	r3, [r4, #20]
 800d06a:	9b01      	ldr	r3, [sp, #4]
 800d06c:	6120      	str	r0, [r4, #16]
 800d06e:	b15b      	cbz	r3, 800d088 <__smakebuf_r+0x74>
 800d070:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d074:	4630      	mov	r0, r6
 800d076:	f000 f8a3 	bl	800d1c0 <_isatty_r>
 800d07a:	b128      	cbz	r0, 800d088 <__smakebuf_r+0x74>
 800d07c:	89a3      	ldrh	r3, [r4, #12]
 800d07e:	f023 0303 	bic.w	r3, r3, #3
 800d082:	f043 0301 	orr.w	r3, r3, #1
 800d086:	81a3      	strh	r3, [r4, #12]
 800d088:	89a0      	ldrh	r0, [r4, #12]
 800d08a:	4305      	orrs	r5, r0
 800d08c:	81a5      	strh	r5, [r4, #12]
 800d08e:	e7cd      	b.n	800d02c <__smakebuf_r+0x18>
 800d090:	0800bb69 	.word	0x0800bb69

0800d094 <memmove>:
 800d094:	4288      	cmp	r0, r1
 800d096:	b510      	push	{r4, lr}
 800d098:	eb01 0402 	add.w	r4, r1, r2
 800d09c:	d902      	bls.n	800d0a4 <memmove+0x10>
 800d09e:	4284      	cmp	r4, r0
 800d0a0:	4623      	mov	r3, r4
 800d0a2:	d807      	bhi.n	800d0b4 <memmove+0x20>
 800d0a4:	1e43      	subs	r3, r0, #1
 800d0a6:	42a1      	cmp	r1, r4
 800d0a8:	d008      	beq.n	800d0bc <memmove+0x28>
 800d0aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d0b2:	e7f8      	b.n	800d0a6 <memmove+0x12>
 800d0b4:	4402      	add	r2, r0
 800d0b6:	4601      	mov	r1, r0
 800d0b8:	428a      	cmp	r2, r1
 800d0ba:	d100      	bne.n	800d0be <memmove+0x2a>
 800d0bc:	bd10      	pop	{r4, pc}
 800d0be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0c6:	e7f7      	b.n	800d0b8 <memmove+0x24>

0800d0c8 <_realloc_r>:
 800d0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ca:	4607      	mov	r7, r0
 800d0cc:	4614      	mov	r4, r2
 800d0ce:	460e      	mov	r6, r1
 800d0d0:	b921      	cbnz	r1, 800d0dc <_realloc_r+0x14>
 800d0d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d0d6:	4611      	mov	r1, r2
 800d0d8:	f7fe be56 	b.w	800bd88 <_malloc_r>
 800d0dc:	b922      	cbnz	r2, 800d0e8 <_realloc_r+0x20>
 800d0de:	f7ff fa01 	bl	800c4e4 <_free_r>
 800d0e2:	4625      	mov	r5, r4
 800d0e4:	4628      	mov	r0, r5
 800d0e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0e8:	f000 f87a 	bl	800d1e0 <_malloc_usable_size_r>
 800d0ec:	42a0      	cmp	r0, r4
 800d0ee:	d20f      	bcs.n	800d110 <_realloc_r+0x48>
 800d0f0:	4621      	mov	r1, r4
 800d0f2:	4638      	mov	r0, r7
 800d0f4:	f7fe fe48 	bl	800bd88 <_malloc_r>
 800d0f8:	4605      	mov	r5, r0
 800d0fa:	2800      	cmp	r0, #0
 800d0fc:	d0f2      	beq.n	800d0e4 <_realloc_r+0x1c>
 800d0fe:	4631      	mov	r1, r6
 800d100:	4622      	mov	r2, r4
 800d102:	f7fe fe2a 	bl	800bd5a <memcpy>
 800d106:	4631      	mov	r1, r6
 800d108:	4638      	mov	r0, r7
 800d10a:	f7ff f9eb 	bl	800c4e4 <_free_r>
 800d10e:	e7e9      	b.n	800d0e4 <_realloc_r+0x1c>
 800d110:	4635      	mov	r5, r6
 800d112:	e7e7      	b.n	800d0e4 <_realloc_r+0x1c>

0800d114 <_raise_r>:
 800d114:	291f      	cmp	r1, #31
 800d116:	b538      	push	{r3, r4, r5, lr}
 800d118:	4604      	mov	r4, r0
 800d11a:	460d      	mov	r5, r1
 800d11c:	d904      	bls.n	800d128 <_raise_r+0x14>
 800d11e:	2316      	movs	r3, #22
 800d120:	6003      	str	r3, [r0, #0]
 800d122:	f04f 30ff 	mov.w	r0, #4294967295
 800d126:	bd38      	pop	{r3, r4, r5, pc}
 800d128:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d12a:	b112      	cbz	r2, 800d132 <_raise_r+0x1e>
 800d12c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d130:	b94b      	cbnz	r3, 800d146 <_raise_r+0x32>
 800d132:	4620      	mov	r0, r4
 800d134:	f000 f830 	bl	800d198 <_getpid_r>
 800d138:	462a      	mov	r2, r5
 800d13a:	4601      	mov	r1, r0
 800d13c:	4620      	mov	r0, r4
 800d13e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d142:	f000 b817 	b.w	800d174 <_kill_r>
 800d146:	2b01      	cmp	r3, #1
 800d148:	d00a      	beq.n	800d160 <_raise_r+0x4c>
 800d14a:	1c59      	adds	r1, r3, #1
 800d14c:	d103      	bne.n	800d156 <_raise_r+0x42>
 800d14e:	2316      	movs	r3, #22
 800d150:	6003      	str	r3, [r0, #0]
 800d152:	2001      	movs	r0, #1
 800d154:	e7e7      	b.n	800d126 <_raise_r+0x12>
 800d156:	2400      	movs	r4, #0
 800d158:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d15c:	4628      	mov	r0, r5
 800d15e:	4798      	blx	r3
 800d160:	2000      	movs	r0, #0
 800d162:	e7e0      	b.n	800d126 <_raise_r+0x12>

0800d164 <raise>:
 800d164:	4b02      	ldr	r3, [pc, #8]	; (800d170 <raise+0xc>)
 800d166:	4601      	mov	r1, r0
 800d168:	6818      	ldr	r0, [r3, #0]
 800d16a:	f7ff bfd3 	b.w	800d114 <_raise_r>
 800d16e:	bf00      	nop
 800d170:	200000a4 	.word	0x200000a4

0800d174 <_kill_r>:
 800d174:	b538      	push	{r3, r4, r5, lr}
 800d176:	4d07      	ldr	r5, [pc, #28]	; (800d194 <_kill_r+0x20>)
 800d178:	2300      	movs	r3, #0
 800d17a:	4604      	mov	r4, r0
 800d17c:	4608      	mov	r0, r1
 800d17e:	4611      	mov	r1, r2
 800d180:	602b      	str	r3, [r5, #0]
 800d182:	f7f5 f98d 	bl	80024a0 <_kill>
 800d186:	1c43      	adds	r3, r0, #1
 800d188:	d102      	bne.n	800d190 <_kill_r+0x1c>
 800d18a:	682b      	ldr	r3, [r5, #0]
 800d18c:	b103      	cbz	r3, 800d190 <_kill_r+0x1c>
 800d18e:	6023      	str	r3, [r4, #0]
 800d190:	bd38      	pop	{r3, r4, r5, pc}
 800d192:	bf00      	nop
 800d194:	2002f710 	.word	0x2002f710

0800d198 <_getpid_r>:
 800d198:	f7f5 b97a 	b.w	8002490 <_getpid>

0800d19c <_fstat_r>:
 800d19c:	b538      	push	{r3, r4, r5, lr}
 800d19e:	4d07      	ldr	r5, [pc, #28]	; (800d1bc <_fstat_r+0x20>)
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	4608      	mov	r0, r1
 800d1a6:	4611      	mov	r1, r2
 800d1a8:	602b      	str	r3, [r5, #0]
 800d1aa:	f7f5 f9d8 	bl	800255e <_fstat>
 800d1ae:	1c43      	adds	r3, r0, #1
 800d1b0:	d102      	bne.n	800d1b8 <_fstat_r+0x1c>
 800d1b2:	682b      	ldr	r3, [r5, #0]
 800d1b4:	b103      	cbz	r3, 800d1b8 <_fstat_r+0x1c>
 800d1b6:	6023      	str	r3, [r4, #0]
 800d1b8:	bd38      	pop	{r3, r4, r5, pc}
 800d1ba:	bf00      	nop
 800d1bc:	2002f710 	.word	0x2002f710

0800d1c0 <_isatty_r>:
 800d1c0:	b538      	push	{r3, r4, r5, lr}
 800d1c2:	4d06      	ldr	r5, [pc, #24]	; (800d1dc <_isatty_r+0x1c>)
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	4604      	mov	r4, r0
 800d1c8:	4608      	mov	r0, r1
 800d1ca:	602b      	str	r3, [r5, #0]
 800d1cc:	f7f5 f9d7 	bl	800257e <_isatty>
 800d1d0:	1c43      	adds	r3, r0, #1
 800d1d2:	d102      	bne.n	800d1da <_isatty_r+0x1a>
 800d1d4:	682b      	ldr	r3, [r5, #0]
 800d1d6:	b103      	cbz	r3, 800d1da <_isatty_r+0x1a>
 800d1d8:	6023      	str	r3, [r4, #0]
 800d1da:	bd38      	pop	{r3, r4, r5, pc}
 800d1dc:	2002f710 	.word	0x2002f710

0800d1e0 <_malloc_usable_size_r>:
 800d1e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1e4:	1f18      	subs	r0, r3, #4
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	bfbc      	itt	lt
 800d1ea:	580b      	ldrlt	r3, [r1, r0]
 800d1ec:	18c0      	addlt	r0, r0, r3
 800d1ee:	4770      	bx	lr

0800d1f0 <_init>:
 800d1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1f2:	bf00      	nop
 800d1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1f6:	bc08      	pop	{r3}
 800d1f8:	469e      	mov	lr, r3
 800d1fa:	4770      	bx	lr

0800d1fc <_fini>:
 800d1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1fe:	bf00      	nop
 800d200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d202:	bc08      	pop	{r3}
 800d204:	469e      	mov	lr, r3
 800d206:	4770      	bx	lr
