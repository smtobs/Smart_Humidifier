
SmartHumidfier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024be8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003e1c  08024d98  08024d98  00034d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00001956  08028bb4  08028bb4  00038bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 0000000c  0802a50c  0802a50c  0003a50c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00037580  0802a518  0802a518  0003a518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000001c  08061a98  08061a98  00071a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08061ab4  08061ab4  00080160  2**0
                  CONTENTS
  8 .ARM          00000008  08061ab4  08061ab4  00071ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  08061abc  08061abc  00080160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  08061abc  08061abc  00071abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  08061ad0  08061ad0  00071ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000160  20000000  08061ad8  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0000ae5c  20000160  08061c38  00080160  2**2
                  ALLOC
 14 ._user_heap_stack 00000604  2000afbc  08061c38  0008afbc  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  00080160  2**0
                  CONTENTS, READONLY
 16 .debug_info   000aa7ed  00000000  00000000  00080190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00012e32  00000000  00000000  0012a97d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003b88  00000000  00000000  0013d7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00003580  00000000  00000000  00141338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00037d1a  00000000  00000000  001448b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00048a23  00000000  00000000  0017c5d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00114610  00000000  00000000  001c4ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  002d9605  2**0
                  CONTENTS, READONLY
 24 .debug_frame  000111ac  00000000  00000000  002d96d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000160 	.word	0x20000160
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08024d80 	.word	0x08024d80

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000164 	.word	0x20000164
 80001ec:	08024d80 	.word	0x08024d80

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <Wifi_RxCallBack>:
{
	memset(Wifi.TxBuffer,0,_WIFI_TX_SIZE);
}
//#########################################################################################################
void Wifi_RxCallBack(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  //+++ at command buffer
  if(Wifi.RxIsData==false)                                              
 800059c:	4b9a      	ldr	r3, [pc, #616]	; (8000808 <Wifi_RxCallBack+0x270>)
 800059e:	f893 3718 	ldrb.w	r3, [r3, #1816]	; 0x718
 80005a2:	f083 0301 	eor.w	r3, r3, #1
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d018      	beq.n	80005de <Wifi_RxCallBack+0x46>
  {
    Wifi.RxBuffer[Wifi.RxIndex] = Wifi.usartBuff;
 80005ac:	4b96      	ldr	r3, [pc, #600]	; (8000808 <Wifi_RxCallBack+0x270>)
 80005ae:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 80005b2:	4619      	mov	r1, r3
 80005b4:	4b94      	ldr	r3, [pc, #592]	; (8000808 <Wifi_RxCallBack+0x270>)
 80005b6:	781a      	ldrb	r2, [r3, #0]
 80005b8:	4b93      	ldr	r3, [pc, #588]	; (8000808 <Wifi_RxCallBack+0x270>)
 80005ba:	440b      	add	r3, r1
 80005bc:	705a      	strb	r2, [r3, #1]
    if(Wifi.RxIndex < _WIFI_RX_SIZE)
 80005be:	4b92      	ldr	r3, [pc, #584]	; (8000808 <Wifi_RxCallBack+0x270>)
 80005c0:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 80005c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005c8:	f080 80ab 	bcs.w	8000722 <Wifi_RxCallBack+0x18a>
      Wifi.RxIndex++;
 80005cc:	4b8e      	ldr	r3, [pc, #568]	; (8000808 <Wifi_RxCallBack+0x270>)
 80005ce:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 80005d2:	3301      	adds	r3, #1
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	4b8c      	ldr	r3, [pc, #560]	; (8000808 <Wifi_RxCallBack+0x270>)
 80005d8:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
 80005dc:	e0a1      	b.n	8000722 <Wifi_RxCallBack+0x18a>
  }
  //--- at command buffer
  //+++  data buffer
  else                                                                  
  {
    if( HAL_GetTick()-Wifi.RxDataLastTime > 50)
 80005de:	f003 f8cb 	bl	8003778 <HAL_GetTick>
 80005e2:	4602      	mov	r2, r0
 80005e4:	4b88      	ldr	r3, [pc, #544]	; (8000808 <Wifi_RxCallBack+0x270>)
 80005e6:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 80005ea:	1ad3      	subs	r3, r2, r3
 80005ec:	2b32      	cmp	r3, #50	; 0x32
 80005ee:	d903      	bls.n	80005f8 <Wifi_RxCallBack+0x60>
      Wifi.RxIsData=false;
 80005f0:	4b85      	ldr	r3, [pc, #532]	; (8000808 <Wifi_RxCallBack+0x270>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
    //+++ Calculate Data len after +IPD
    if(Wifi.RxDataLen==0)
 80005f8:	4b83      	ldr	r3, [pc, #524]	; (8000808 <Wifi_RxCallBack+0x270>)
 80005fa:	f8b3 3710 	ldrh.w	r3, [r3, #1808]	; 0x710
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d167      	bne.n	80006d2 <Wifi_RxCallBack+0x13a>
    {
      //+++ Calculate Data len after +IPD ++++++ Multi Connection OFF
      if (Wifi.TcpIpMultiConnection==false)
 8000602:	4b81      	ldr	r3, [pc, #516]	; (8000808 <Wifi_RxCallBack+0x270>)
 8000604:	f893 3819 	ldrb.w	r3, [r3, #2073]	; 0x819
 8000608:	f083 0301 	eor.w	r3, r3, #1
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b00      	cmp	r3, #0
 8000610:	d028      	beq.n	8000664 <Wifi_RxCallBack+0xcc>
      {
        Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp] = Wifi.usartBuff;
 8000612:	4b7d      	ldr	r3, [pc, #500]	; (8000808 <Wifi_RxCallBack+0x270>)
 8000614:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8000618:	4619      	mov	r1, r3
 800061a:	4b7b      	ldr	r3, [pc, #492]	; (8000808 <Wifi_RxCallBack+0x270>)
 800061c:	781a      	ldrb	r2, [r3, #0]
 800061e:	4b7a      	ldr	r3, [pc, #488]	; (8000808 <Wifi_RxCallBack+0x270>)
 8000620:	440b      	add	r3, r1
 8000622:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
        Wifi.RxIndexForDataTmp++;
 8000626:	4b78      	ldr	r3, [pc, #480]	; (8000808 <Wifi_RxCallBack+0x270>)
 8000628:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 800062c:	3301      	adds	r3, #1
 800062e:	b2da      	uxtb	r2, r3
 8000630:	4b75      	ldr	r3, [pc, #468]	; (8000808 <Wifi_RxCallBack+0x270>)
 8000632:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
        if(Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp-1]==':')
 8000636:	4b74      	ldr	r3, [pc, #464]	; (8000808 <Wifi_RxCallBack+0x270>)
 8000638:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 800063c:	3b01      	subs	r3, #1
 800063e:	4a72      	ldr	r2, [pc, #456]	; (8000808 <Wifi_RxCallBack+0x270>)
 8000640:	4413      	add	r3, r2
 8000642:	f893 3704 	ldrb.w	r3, [r3, #1796]	; 0x704
 8000646:	2b3a      	cmp	r3, #58	; 0x3a
 8000648:	d16b      	bne.n	8000722 <Wifi_RxCallBack+0x18a>
        {
          Wifi.RxDataConnectionNumber=0;
 800064a:	4b6f      	ldr	r3, [pc, #444]	; (8000808 <Wifi_RxCallBack+0x270>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2712 	strb.w	r2, [r3, #1810]	; 0x712
          Wifi.RxDataLen=atoi((char*)&Wifi.RxBufferForDataTmp[1]);
 8000652:	486e      	ldr	r0, [pc, #440]	; (800080c <Wifi_RxCallBack+0x274>)
 8000654:	f023 f89a 	bl	802378c <atoi>
 8000658:	4603      	mov	r3, r0
 800065a:	b29a      	uxth	r2, r3
 800065c:	4b6a      	ldr	r3, [pc, #424]	; (8000808 <Wifi_RxCallBack+0x270>)
 800065e:	f8a3 2710 	strh.w	r2, [r3, #1808]	; 0x710
 8000662:	e05e      	b.n	8000722 <Wifi_RxCallBack+0x18a>
      }
      //--- Calculate Data len after +IPD ++++++ Multi Connection OFF
      //+++ Calculate Data len after +IPD ++++++ Multi Connection ON
      else
      {
        Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp] = Wifi.usartBuff;
 8000664:	4b68      	ldr	r3, [pc, #416]	; (8000808 <Wifi_RxCallBack+0x270>)
 8000666:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 800066a:	4619      	mov	r1, r3
 800066c:	4b66      	ldr	r3, [pc, #408]	; (8000808 <Wifi_RxCallBack+0x270>)
 800066e:	781a      	ldrb	r2, [r3, #0]
 8000670:	4b65      	ldr	r3, [pc, #404]	; (8000808 <Wifi_RxCallBack+0x270>)
 8000672:	440b      	add	r3, r1
 8000674:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
        Wifi.RxIndexForDataTmp++;
 8000678:	4b63      	ldr	r3, [pc, #396]	; (8000808 <Wifi_RxCallBack+0x270>)
 800067a:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 800067e:	3301      	adds	r3, #1
 8000680:	b2da      	uxtb	r2, r3
 8000682:	4b61      	ldr	r3, [pc, #388]	; (8000808 <Wifi_RxCallBack+0x270>)
 8000684:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
        if(Wifi.RxBufferForDataTmp[2]==',')
 8000688:	4b5f      	ldr	r3, [pc, #380]	; (8000808 <Wifi_RxCallBack+0x270>)
 800068a:	f893 3706 	ldrb.w	r3, [r3, #1798]	; 0x706
 800068e:	2b2c      	cmp	r3, #44	; 0x2c
 8000690:	d107      	bne.n	80006a2 <Wifi_RxCallBack+0x10a>
        {
          Wifi.RxDataConnectionNumber=Wifi.RxBufferForDataTmp[1]-48;
 8000692:	4b5d      	ldr	r3, [pc, #372]	; (8000808 <Wifi_RxCallBack+0x270>)
 8000694:	f893 3705 	ldrb.w	r3, [r3, #1797]	; 0x705
 8000698:	3b30      	subs	r3, #48	; 0x30
 800069a:	b2da      	uxtb	r2, r3
 800069c:	4b5a      	ldr	r3, [pc, #360]	; (8000808 <Wifi_RxCallBack+0x270>)
 800069e:	f883 2712 	strb.w	r2, [r3, #1810]	; 0x712
        }
        if((Wifi.RxIndexForDataTmp>3) && (Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp-1]==':'))
 80006a2:	4b59      	ldr	r3, [pc, #356]	; (8000808 <Wifi_RxCallBack+0x270>)
 80006a4:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 80006a8:	2b03      	cmp	r3, #3
 80006aa:	d93a      	bls.n	8000722 <Wifi_RxCallBack+0x18a>
 80006ac:	4b56      	ldr	r3, [pc, #344]	; (8000808 <Wifi_RxCallBack+0x270>)
 80006ae:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 80006b2:	3b01      	subs	r3, #1
 80006b4:	4a54      	ldr	r2, [pc, #336]	; (8000808 <Wifi_RxCallBack+0x270>)
 80006b6:	4413      	add	r3, r2
 80006b8:	f893 3704 	ldrb.w	r3, [r3, #1796]	; 0x704
 80006bc:	2b3a      	cmp	r3, #58	; 0x3a
 80006be:	d130      	bne.n	8000722 <Wifi_RxCallBack+0x18a>
          Wifi.RxDataLen=atoi((char*)&Wifi.RxBufferForDataTmp[3]);
 80006c0:	4853      	ldr	r0, [pc, #332]	; (8000810 <Wifi_RxCallBack+0x278>)
 80006c2:	f023 f863 	bl	802378c <atoi>
 80006c6:	4603      	mov	r3, r0
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	4b4f      	ldr	r3, [pc, #316]	; (8000808 <Wifi_RxCallBack+0x270>)
 80006cc:	f8a3 2710 	strh.w	r2, [r3, #1808]	; 0x710
 80006d0:	e027      	b.n	8000722 <Wifi_RxCallBack+0x18a>
    }
    //--- Calculate Data len after +IPD
    //+++ Fill Data Buffer
    else  
    {      
      Wifi.RxBufferForData[Wifi.RxIndexForData] = Wifi.usartBuff;
 80006d2:	4b4d      	ldr	r3, [pc, #308]	; (8000808 <Wifi_RxCallBack+0x270>)
 80006d4:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	; 0x70e
 80006d8:	4619      	mov	r1, r3
 80006da:	4b4b      	ldr	r3, [pc, #300]	; (8000808 <Wifi_RxCallBack+0x270>)
 80006dc:	781a      	ldrb	r2, [r3, #0]
 80006de:	4b4a      	ldr	r3, [pc, #296]	; (8000808 <Wifi_RxCallBack+0x270>)
 80006e0:	440b      	add	r3, r1
 80006e2:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
      if(Wifi.RxIndexForData < _WIFI_RX_FOR_DATA_SIZE)
 80006e6:	4b48      	ldr	r3, [pc, #288]	; (8000808 <Wifi_RxCallBack+0x270>)
 80006e8:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	; 0x70e
 80006ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006f0:	d207      	bcs.n	8000702 <Wifi_RxCallBack+0x16a>
        Wifi.RxIndexForData++;
 80006f2:	4b45      	ldr	r3, [pc, #276]	; (8000808 <Wifi_RxCallBack+0x270>)
 80006f4:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	; 0x70e
 80006f8:	3301      	adds	r3, #1
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <Wifi_RxCallBack+0x270>)
 80006fe:	f8a3 270e 	strh.w	r2, [r3, #1806]	; 0x70e
      if( Wifi.RxIndexForData>= Wifi.RxDataLen)
 8000702:	4b41      	ldr	r3, [pc, #260]	; (8000808 <Wifi_RxCallBack+0x270>)
 8000704:	f8b3 270e 	ldrh.w	r2, [r3, #1806]	; 0x70e
 8000708:	4b3f      	ldr	r3, [pc, #252]	; (8000808 <Wifi_RxCallBack+0x270>)
 800070a:	f8b3 3710 	ldrh.w	r3, [r3, #1808]	; 0x710
 800070e:	429a      	cmp	r2, r3
 8000710:	d307      	bcc.n	8000722 <Wifi_RxCallBack+0x18a>
      {
        Wifi.RxIsData=false;         
 8000712:	4b3d      	ldr	r3, [pc, #244]	; (8000808 <Wifi_RxCallBack+0x270>)
 8000714:	2200      	movs	r2, #0
 8000716:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
        Wifi.GotNewData=true;
 800071a:	4b3b      	ldr	r3, [pc, #236]	; (8000808 <Wifi_RxCallBack+0x270>)
 800071c:	2201      	movs	r2, #1
 800071e:	f883 2719 	strb.w	r2, [r3, #1817]	; 0x719
      }
    }
    //--- Fill Data Buffer    
  }           
  //--- data buffer
	HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 8000722:	2201      	movs	r2, #1
 8000724:	4938      	ldr	r1, [pc, #224]	; (8000808 <Wifi_RxCallBack+0x270>)
 8000726:	483b      	ldr	r0, [pc, #236]	; (8000814 <Wifi_RxCallBack+0x27c>)
 8000728:	f007 fd07 	bl	800813a <HAL_UART_Receive_IT>
  //+++ check +IPD in At command buffer
  if(Wifi.RxIndex>4)
 800072c:	4b36      	ldr	r3, [pc, #216]	; (8000808 <Wifi_RxCallBack+0x270>)
 800072e:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000732:	2b04      	cmp	r3, #4
 8000734:	d966      	bls.n	8000804 <Wifi_RxCallBack+0x26c>
  {
    if( (Wifi.RxBuffer[Wifi.RxIndex-4]=='+') && (Wifi.RxBuffer[Wifi.RxIndex-3]=='I') && (Wifi.RxBuffer[Wifi.RxIndex-2]=='P') && (Wifi.RxBuffer[Wifi.RxIndex-1]=='D'))
 8000736:	4b34      	ldr	r3, [pc, #208]	; (8000808 <Wifi_RxCallBack+0x270>)
 8000738:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 800073c:	3b04      	subs	r3, #4
 800073e:	4a32      	ldr	r2, [pc, #200]	; (8000808 <Wifi_RxCallBack+0x270>)
 8000740:	4413      	add	r3, r2
 8000742:	785b      	ldrb	r3, [r3, #1]
 8000744:	2b2b      	cmp	r3, #43	; 0x2b
 8000746:	d15d      	bne.n	8000804 <Wifi_RxCallBack+0x26c>
 8000748:	4b2f      	ldr	r3, [pc, #188]	; (8000808 <Wifi_RxCallBack+0x270>)
 800074a:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 800074e:	3b03      	subs	r3, #3
 8000750:	4a2d      	ldr	r2, [pc, #180]	; (8000808 <Wifi_RxCallBack+0x270>)
 8000752:	4413      	add	r3, r2
 8000754:	785b      	ldrb	r3, [r3, #1]
 8000756:	2b49      	cmp	r3, #73	; 0x49
 8000758:	d154      	bne.n	8000804 <Wifi_RxCallBack+0x26c>
 800075a:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <Wifi_RxCallBack+0x270>)
 800075c:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000760:	3b02      	subs	r3, #2
 8000762:	4a29      	ldr	r2, [pc, #164]	; (8000808 <Wifi_RxCallBack+0x270>)
 8000764:	4413      	add	r3, r2
 8000766:	785b      	ldrb	r3, [r3, #1]
 8000768:	2b50      	cmp	r3, #80	; 0x50
 800076a:	d14b      	bne.n	8000804 <Wifi_RxCallBack+0x26c>
 800076c:	4b26      	ldr	r3, [pc, #152]	; (8000808 <Wifi_RxCallBack+0x270>)
 800076e:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8000772:	3b01      	subs	r3, #1
 8000774:	4a24      	ldr	r2, [pc, #144]	; (8000808 <Wifi_RxCallBack+0x270>)
 8000776:	4413      	add	r3, r2
 8000778:	785b      	ldrb	r3, [r3, #1]
 800077a:	2b44      	cmp	r3, #68	; 0x44
 800077c:	d142      	bne.n	8000804 <Wifi_RxCallBack+0x26c>
    {
      memset(Wifi.RxBufferForDataTmp,0,sizeof(Wifi.RxBufferForDataTmp));
 800077e:	2208      	movs	r2, #8
 8000780:	2100      	movs	r1, #0
 8000782:	4825      	ldr	r0, [pc, #148]	; (8000818 <Wifi_RxCallBack+0x280>)
 8000784:	f023 f888 	bl	8023898 <memset>
      Wifi.RxBuffer[Wifi.RxIndex-4]=0;
 8000788:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <Wifi_RxCallBack+0x270>)
 800078a:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 800078e:	3b04      	subs	r3, #4
 8000790:	4a1d      	ldr	r2, [pc, #116]	; (8000808 <Wifi_RxCallBack+0x270>)
 8000792:	4413      	add	r3, r2
 8000794:	2200      	movs	r2, #0
 8000796:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-3]=0;
 8000798:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <Wifi_RxCallBack+0x270>)
 800079a:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 800079e:	3b03      	subs	r3, #3
 80007a0:	4a19      	ldr	r2, [pc, #100]	; (8000808 <Wifi_RxCallBack+0x270>)
 80007a2:	4413      	add	r3, r2
 80007a4:	2200      	movs	r2, #0
 80007a6:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-2]=0;
 80007a8:	4b17      	ldr	r3, [pc, #92]	; (8000808 <Wifi_RxCallBack+0x270>)
 80007aa:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 80007ae:	3b02      	subs	r3, #2
 80007b0:	4a15      	ldr	r2, [pc, #84]	; (8000808 <Wifi_RxCallBack+0x270>)
 80007b2:	4413      	add	r3, r2
 80007b4:	2200      	movs	r2, #0
 80007b6:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-1]=0;
 80007b8:	4b13      	ldr	r3, [pc, #76]	; (8000808 <Wifi_RxCallBack+0x270>)
 80007ba:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 80007be:	3b01      	subs	r3, #1
 80007c0:	4a11      	ldr	r2, [pc, #68]	; (8000808 <Wifi_RxCallBack+0x270>)
 80007c2:	4413      	add	r3, r2
 80007c4:	2200      	movs	r2, #0
 80007c6:	705a      	strb	r2, [r3, #1]
      Wifi.RxIndex-=4;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <Wifi_RxCallBack+0x270>)
 80007ca:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 80007ce:	3b04      	subs	r3, #4
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <Wifi_RxCallBack+0x270>)
 80007d4:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
      Wifi.RxIndexForData=0;
 80007d8:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <Wifi_RxCallBack+0x270>)
 80007da:	2200      	movs	r2, #0
 80007dc:	f8a3 270e 	strh.w	r2, [r3, #1806]	; 0x70e
      Wifi.RxIndexForDataTmp=0;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <Wifi_RxCallBack+0x270>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
      Wifi.RxIsData=true;
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <Wifi_RxCallBack+0x270>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
      Wifi.RxDataLen=0;  
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <Wifi_RxCallBack+0x270>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	f8a3 2710 	strh.w	r2, [r3, #1808]	; 0x710
      Wifi.RxDataLastTime = HAL_GetTick();      
 80007f8:	f002 ffbe 	bl	8003778 <HAL_GetTick>
 80007fc:	4603      	mov	r3, r0
 80007fe:	4a02      	ldr	r2, [pc, #8]	; (8000808 <Wifi_RxCallBack+0x270>)
 8000800:	f8c2 3714 	str.w	r3, [r2, #1812]	; 0x714
    }
  }
  //--- check +IPD in At command buffer  
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	2000a2e0 	.word	0x2000a2e0
 800080c:	2000a9e5 	.word	0x2000a9e5
 8000810:	2000a9e7 	.word	0x2000a9e7
 8000814:	2000af10 	.word	0x2000af10
 8000818:	2000a9e4 	.word	0x2000a9e4

0800081c <HAL_UART_RxCpltCallback>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
    if (huart->Instance == huart5.Instance)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <HAL_UART_RxCpltCallback+0x20>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	429a      	cmp	r2, r3
 800082e:	d101      	bne.n	8000834 <HAL_UART_RxCpltCallback+0x18>
    {
    	//HAL_UART_Transmit(&huart1, (uint8_t *)"Hi~~\r\n", (uint16_t)strlen("Hi~~\r\n"), 1000);
    	Wifi_RxCallBack();
 8000830:	f7ff feb2 	bl	8000598 <Wifi_RxCallBack>
    }
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	2000af10 	.word	0x2000af10

08000840 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_CRC_Init+0x20>)
 8000846:	4a07      	ldr	r2, [pc, #28]	; (8000864 <MX_CRC_Init+0x24>)
 8000848:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_CRC_Init+0x20>)
 800084c:	f003 f8a6 	bl	800399c <HAL_CRC_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000856:	f001 f893 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	2000ab98 	.word	0x2000ab98
 8000864:	40023000 	.word	0x40023000

08000868 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <HAL_CRC_MspInit+0x3c>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d10d      	bne.n	8000896 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <HAL_CRC_MspInit+0x40>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a09      	ldr	r2, [pc, #36]	; (80008a8 <HAL_CRC_MspInit+0x40>)
 8000884:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <HAL_CRC_MspInit+0x40>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000896:	bf00      	nop
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	40023000 	.word	0x40023000
 80008a8:	40023800 	.word	0x40023800

080008ac <polDelayUs>:
 */

#include "dht11.h"

__STATIC_INLINE void polDelayUs(volatile uint32_t microseconds)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	/* Go to number of cycles for system */
	microseconds *= (SystemCoreClock / 10000000);
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <polDelayUs+0x38>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <polDelayUs+0x3c>)
 80008ba:	fba2 2303 	umull	r2, r3, r2, r3
 80008be:	0d9b      	lsrs	r3, r3, #22
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	fb02 f303 	mul.w	r3, r2, r3
 80008c6:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while (microseconds--);
 80008c8:	bf00      	nop
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	1e5a      	subs	r2, r3, #1
 80008ce:	607a      	str	r2, [r7, #4]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d1fa      	bne.n	80008ca <polDelayUs+0x1e>
}
 80008d4:	bf00      	nop
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	20000004 	.word	0x20000004
 80008e8:	6b5fca6b 	.word	0x6b5fca6b

080008ec <setPinOutput>:

void setPinOutput (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	460b      	mov	r3, r1
 80008f6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000908:	887b      	ldrh	r3, [r7, #2]
 800090a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	4619      	mov	r1, r3
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f003 fad8 	bl	8003ed0 <HAL_GPIO_Init>
}
 8000920:	bf00      	nop
 8000922:	3720      	adds	r7, #32
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <setPinInput>:

void setPinInput (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	460b      	mov	r3, r1
 8000932:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000944:	887b      	ldrh	r3, [r7, #2]
 8000946:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800094c:	2301      	movs	r3, #1
 800094e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	4619      	mov	r1, r3
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f003 faba 	bl	8003ed0 <HAL_GPIO_Init>
}
 800095c:	bf00      	nop
 800095e:	3720      	adds	r7, #32
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <dht11Init>:

/*********************************** DHT11 FUNCTIONS ********************************************/
void dht11Init(DHT11_Dev *dev)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	dev->port = DHT11_GPIO_Port;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <dht11Init+0x20>)
 8000970:	605a      	str	r2, [r3, #4]
	dev->pin = DHT11_Pin;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2240      	movs	r2, #64	; 0x40
 8000976:	609a      	str	r2, [r3, #8]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	40021400 	.word	0x40021400

08000988 <dht11Start>:

void dht11Start (DHT11_Dev *dev)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	setPinOutput (dev->port, dev->pin); // set the pin as output
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	685a      	ldr	r2, [r3, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	b29b      	uxth	r3, r3
 800099a:	4619      	mov	r1, r3
 800099c:	4610      	mov	r0, r2
 800099e:	f7ff ffa5 	bl	80008ec <setPinOutput>

	HAL_GPIO_WritePin (dev->port, dev->pin, GPIO_PIN_RESET);   // pull the pin low
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6858      	ldr	r0, [r3, #4]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	2200      	movs	r2, #0
 80009ae:	4619      	mov	r1, r3
 80009b0:	f003 fd5e 	bl	8004470 <HAL_GPIO_WritePin>
	HAL_Delay(18);   // wait for 18ms
 80009b4:	2012      	movs	r0, #18
 80009b6:	f002 feeb 	bl	8003790 <HAL_Delay>

    HAL_GPIO_WritePin (dev->port, dev->pin, GPIO_PIN_SET);   // pull the pin high
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6858      	ldr	r0, [r3, #4]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	2201      	movs	r2, #1
 80009c6:	4619      	mov	r1, r3
 80009c8:	f003 fd52 	bl	8004470 <HAL_GPIO_WritePin>
	polDelayUs(20);   // wait for 20us
 80009cc:	2014      	movs	r0, #20
 80009ce:	f7ff ff6d 	bl	80008ac <polDelayUs>

	setPinInput(dev->port, dev->pin);    // set as input
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	685a      	ldr	r2, [r3, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	b29b      	uxth	r3, r3
 80009dc:	4619      	mov	r1, r3
 80009de:	4610      	mov	r0, r2
 80009e0:	f7ff ffa2 	bl	8000928 <setPinInput>
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <dht11CheckResponse>:

uint8_t dht11CheckResponse (DHT11_Dev *dev)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	uint8_t response = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	73fb      	strb	r3, [r7, #15]
	polDelayUs(40);
 80009f8:	2028      	movs	r0, #40	; 0x28
 80009fa:	f7ff ff57 	bl	80008ac <polDelayUs>
	if (!(HAL_GPIO_ReadPin (dev->port, dev->pin)))
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	685a      	ldr	r2, [r3, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	f003 fd18 	bl	8004440 <HAL_GPIO_ReadPin>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d113      	bne.n	8000a3e <dht11CheckResponse+0x52>
	{
		polDelayUs(80);
 8000a16:	2050      	movs	r0, #80	; 0x50
 8000a18:	f7ff ff48 	bl	80008ac <polDelayUs>
		if ((HAL_GPIO_ReadPin (dev->port, dev->pin))) response = DHT11_SUCCESS;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	685a      	ldr	r2, [r3, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	4619      	mov	r1, r3
 8000a28:	4610      	mov	r0, r2
 8000a2a:	f003 fd09 	bl	8004440 <HAL_GPIO_ReadPin>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <dht11CheckResponse+0x4e>
 8000a34:	2301      	movs	r3, #1
 8000a36:	73fb      	strb	r3, [r7, #15]
 8000a38:	e001      	b.n	8000a3e <dht11CheckResponse+0x52>
		else response = DHT11_ERROR_TIMEOUT; // 255
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	73fb      	strb	r3, [r7, #15]
	}
	while ((HAL_GPIO_ReadPin (dev->port, dev->pin)));   // wait for the pin to go low
 8000a3e:	bf00      	nop
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	685a      	ldr	r2, [r3, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4610      	mov	r0, r2
 8000a4e:	f003 fcf7 	bl	8004440 <HAL_GPIO_ReadPin>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d1f3      	bne.n	8000a40 <dht11CheckResponse+0x54>

	return response;
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <dht11Read>:

uint8_t dht11Read (DHT11_Dev *dev)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b084      	sub	sp, #16
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	73bb      	strb	r3, [r7, #14]
 8000a6e:	e046      	b.n	8000afe <dht11Read+0x9c>
	{
		while (!(HAL_GPIO_ReadPin (dev->port, dev->pin)));   // wait for the pin to go high
 8000a70:	bf00      	nop
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685a      	ldr	r2, [r3, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4610      	mov	r0, r2
 8000a80:	f003 fcde 	bl	8004440 <HAL_GPIO_ReadPin>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d0f3      	beq.n	8000a72 <dht11Read+0x10>
		polDelayUs(40);   // wait for 40 us
 8000a8a:	2028      	movs	r0, #40	; 0x28
 8000a8c:	f7ff ff0e 	bl	80008ac <polDelayUs>

		if (!(HAL_GPIO_ReadPin (dev->port, dev->pin)))   // if the pin is low
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	685a      	ldr	r2, [r3, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4610      	mov	r0, r2
 8000a9e:	f003 fccf 	bl	8004440 <HAL_GPIO_ReadPin>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d10e      	bne.n	8000ac6 <dht11Read+0x64>
		{
			i&= ~(1<<(7-j));   // write 0
 8000aa8:	7bbb      	ldrb	r3, [r7, #14]
 8000aaa:	f1c3 0307 	rsb	r3, r3, #7
 8000aae:	2201      	movs	r2, #1
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	b25b      	sxtb	r3, r3
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	b25a      	sxtb	r2, r3
 8000aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	b25b      	sxtb	r3, r3
 8000ac2:	73fb      	strb	r3, [r7, #15]
 8000ac4:	e00b      	b.n	8000ade <dht11Read+0x7c>
		}
		else
		{
			i|= (1<<(7-j));  // if the pin is high, write 1
 8000ac6:	7bbb      	ldrb	r3, [r7, #14]
 8000ac8:	f1c3 0307 	rsb	r3, r3, #7
 8000acc:	2201      	movs	r2, #1
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	b25a      	sxtb	r2, r3
 8000ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	b25b      	sxtb	r3, r3
 8000adc:	73fb      	strb	r3, [r7, #15]
		}
		while ((HAL_GPIO_ReadPin (dev->port, dev->pin)));  // wait for the pin to go low
 8000ade:	bf00      	nop
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685a      	ldr	r2, [r3, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	4619      	mov	r1, r3
 8000aec:	4610      	mov	r0, r2
 8000aee:	f003 fca7 	bl	8004440 <HAL_GPIO_ReadPin>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d1f3      	bne.n	8000ae0 <dht11Read+0x7e>
	for (j=0;j<8;j++)
 8000af8:	7bbb      	ldrb	r3, [r7, #14]
 8000afa:	3301      	adds	r3, #1
 8000afc:	73bb      	strb	r3, [r7, #14]
 8000afe:	7bbb      	ldrb	r3, [r7, #14]
 8000b00:	2b07      	cmp	r3, #7
 8000b02:	d9b5      	bls.n	8000a70 <dht11Read+0xe>
	}
	return i;
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000b14:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <MX_DMA2D_Init+0x5c>)
 8000b16:	4a16      	ldr	r2, [pc, #88]	; (8000b70 <MX_DMA2D_Init+0x60>)
 8000b18:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <MX_DMA2D_Init+0x5c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <MX_DMA2D_Init+0x5c>)
 8000b22:	2202      	movs	r2, #2
 8000b24:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_DMA2D_Init+0x5c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_DMA2D_Init+0x5c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_DMA2D_Init+0x5c>)
 8000b34:	2202      	movs	r2, #2
 8000b36:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_DMA2D_Init+0x5c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <MX_DMA2D_Init+0x5c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000b44:	4809      	ldr	r0, [pc, #36]	; (8000b6c <MX_DMA2D_Init+0x5c>)
 8000b46:	f002 ffd7 	bl	8003af8 <HAL_DMA2D_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000b50:	f000 ff16 	bl	8001980 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000b54:	2101      	movs	r1, #1
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_DMA2D_Init+0x5c>)
 8000b58:	f003 f928 	bl	8003dac <HAL_DMA2D_ConfigLayer>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000b62:	f000 ff0d 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	2000abac 	.word	0x2000abac
 8000b70:	4002b000 	.word	0x4002b000

08000b74 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <HAL_DMA2D_MspInit+0x48>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d115      	bne.n	8000bb2 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <HAL_DMA2D_MspInit+0x4c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a0c      	ldr	r2, [pc, #48]	; (8000bc0 <HAL_DMA2D_MspInit+0x4c>)
 8000b90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <HAL_DMA2D_MspInit+0x4c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2105      	movs	r1, #5
 8000ba6:	205a      	movs	r0, #90	; 0x5a
 8000ba8:	f002 fece 	bl	8003948 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000bac:	205a      	movs	r0, #90	; 0x5a
 8000bae:	f002 fee7 	bl	8003980 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	4002b000 	.word	0x4002b000
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <eventLoopTask>:
 */

#include "event_loop.h"

void eventLoopTask(void const * argument)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	int32_t i;

  /* Infinite loop */
  for (;;)
  {
		evt = osSignalWait(0x000F, 100);
 8000bcc:	f107 0308 	add.w	r3, r7, #8
 8000bd0:	2264      	movs	r2, #100	; 0x64
 8000bd2:	210f      	movs	r1, #15
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f008 fbab 	bl	8009330 <osSignalWait>
		if (evt.status == osEventSignal)
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	2b08      	cmp	r3, #8
 8000bde:	d131      	bne.n	8000c44 <eventLoopTask+0x80>
		{
			for (i=0; i<=4; i++)
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	e02b      	b.n	8000c3e <eventLoopTask+0x7a>
			{
				switch ( (evt.value.signals) & (1U << i))
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	4619      	mov	r1, r3
 8000bea:	2201      	movs	r2, #1
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	400b      	ands	r3, r1
 8000bf4:	2b08      	cmp	r3, #8
 8000bf6:	bf8c      	ite	hi
 8000bf8:	2201      	movhi	r2, #1
 8000bfa:	2200      	movls	r2, #0
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	2a00      	cmp	r2, #0
 8000c00:	d119      	bne.n	8000c36 <eventLoopTask+0x72>
 8000c02:	2201      	movs	r2, #1
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	f403 738b 	and.w	r3, r3, #278	; 0x116
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	bf14      	ite	ne
 8000c10:	2301      	movne	r3, #1
 8000c12:	2300      	moveq	r3, #0
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d00d      	beq.n	8000c36 <eventLoopTask+0x72>
					case BUZZER_ON:
					case BUZZER_OFF:
					case HUM_ON:
					case HUM_OFF:

						ring_buffer_queue(&ring_buffer, (char)(evt.value.signals) & (1U << i));
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	2101      	movs	r1, #1
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	4013      	ands	r3, r2
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4807      	ldr	r0, [pc, #28]	; (8000c4c <eventLoopTask+0x88>)
 8000c30:	f000 feeb 	bl	8001a0a <ring_buffer_queue>
						break;
 8000c34:	e000      	b.n	8000c38 <eventLoopTask+0x74>

					default:
						break;
 8000c36:	bf00      	nop
			for (i=0; i<=4; i++)
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	2b04      	cmp	r3, #4
 8000c42:	ddd0      	ble.n	8000be6 <eventLoopTask+0x22>
				}
			}
		}
		osDelay(1);
 8000c44:	2001      	movs	r0, #1
 8000c46:	f008 fb1f 	bl	8009288 <osDelay>
		evt = osSignalWait(0x000F, 100);
 8000c4a:	e7bf      	b.n	8000bcc <eventLoopTask+0x8>
 8000c4c:	2000ac30 	.word	0x2000ac30

08000c50 <eventLoopInit>:
  }
  /* USER CODE END StartDefaultTask */
}

void eventLoopInit(osPriority Priority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08c      	sub	sp, #48	; 0x30
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	80fb      	strh	r3, [r7, #6]
	osSemaphoreDef(eventLoopHandle);
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
	eventLoopHandle = osSemaphoreCreate(osSemaphore(eventLoopHandle), 1);
 8000c62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c66:	2101      	movs	r1, #1
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f008 fbad 	bl	80093c8 <osSemaphoreCreate>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <eventLoopInit+0x5c>)
 8000c72:	6013      	str	r3, [r2, #0]
	osThreadDef(eventLoopTaskName, eventLoopTask, Priority, 0, _EVENT_LOOP_TASK_SIZE);
 8000c74:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <eventLoopInit+0x60>)
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <eventLoopInit+0x64>)
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	82bb      	strh	r3, [r7, #20]
 8000c80:	2300      	movs	r3, #0
 8000c82:	61bb      	str	r3, [r7, #24]
 8000c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c88:	61fb      	str	r3, [r7, #28]
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
	eventLoopTaskHandle = osThreadCreate(osThread(eventLoopTaskName), NULL);
 8000c92:	f107 030c 	add.w	r3, r7, #12
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f008 faa9 	bl	80091f0 <osThreadCreate>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <eventLoopInit+0x68>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	3730      	adds	r7, #48	; 0x30
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	2000abf0 	.word	0x2000abf0
 8000cb0:	08024d98 	.word	0x08024d98
 8000cb4:	08000bc5 	.word	0x08000bc5
 8000cb8:	2000abec 	.word	0x2000abec

08000cbc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08c      	sub	sp, #48	; 0x30
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]
 8000cd2:	615a      	str	r2, [r3, #20]
 8000cd4:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000cd6:	4b45      	ldr	r3, [pc, #276]	; (8000dec <MX_FMC_Init+0x130>)
 8000cd8:	4a45      	ldr	r2, [pc, #276]	; (8000df0 <MX_FMC_Init+0x134>)
 8000cda:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000cdc:	4b43      	ldr	r3, [pc, #268]	; (8000dec <MX_FMC_Init+0x130>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000ce2:	4b42      	ldr	r3, [pc, #264]	; (8000dec <MX_FMC_Init+0x130>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000ce8:	4b40      	ldr	r3, [pc, #256]	; (8000dec <MX_FMC_Init+0x130>)
 8000cea:	2204      	movs	r2, #4
 8000cec:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000cee:	4b3f      	ldr	r3, [pc, #252]	; (8000dec <MX_FMC_Init+0x130>)
 8000cf0:	2210      	movs	r2, #16
 8000cf2:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000cf4:	4b3d      	ldr	r3, [pc, #244]	; (8000dec <MX_FMC_Init+0x130>)
 8000cf6:	2240      	movs	r2, #64	; 0x40
 8000cf8:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000cfa:	4b3c      	ldr	r3, [pc, #240]	; (8000dec <MX_FMC_Init+0x130>)
 8000cfc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000d00:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000d02:	4b3a      	ldr	r3, [pc, #232]	; (8000dec <MX_FMC_Init+0x130>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000d08:	4b38      	ldr	r3, [pc, #224]	; (8000dec <MX_FMC_Init+0x130>)
 8000d0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d0e:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000d10:	4b36      	ldr	r3, [pc, #216]	; (8000dec <MX_FMC_Init+0x130>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000d16:	4b35      	ldr	r3, [pc, #212]	; (8000dec <MX_FMC_Init+0x130>)
 8000d18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d1c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000d22:	2307      	movs	r3, #7
 8000d24:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 4;
 8000d26:	2304      	movs	r3, #4
 8000d28:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 7;
 8000d2a:	2307      	movs	r3, #7
 8000d2c:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 3;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 8000d32:	2302      	movs	r3, #2
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 8000d36:	2302      	movs	r3, #2
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	482a      	ldr	r0, [pc, #168]	; (8000dec <MX_FMC_Init+0x130>)
 8000d42:	f005 fe3b 	bl	80069bc <HAL_SDRAM_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d002      	beq.n	8000d52 <MX_FMC_Init+0x96>
  {
    Error_Handler( );
 8000d4c:	f000 fe18 	bl	8001980 <Error_Handler>
       *
       */
      HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1386);
  }
  /* USER CODE END FMC_Init 2 */
}
 8000d50:	e048      	b.n	8000de4 <MX_FMC_Init+0x128>
      __IO uint32_t tmpmrd =0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
      Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8000d56:	2301      	movs	r3, #1
 8000d58:	603b      	str	r3, [r7, #0]
      Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000d5a:	2308      	movs	r3, #8
 8000d5c:	607b      	str	r3, [r7, #4]
      Command.AutoRefreshNumber       = 1;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	60bb      	str	r3, [r7, #8]
      Command.ModeRegisterDefinition  = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
      HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8000d66:	463b      	mov	r3, r7
 8000d68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	481f      	ldr	r0, [pc, #124]	; (8000dec <MX_FMC_Init+0x130>)
 8000d70:	f005 fe58 	bl	8006a24 <HAL_SDRAM_SendCommand>
      HAL_Delay(100);
 8000d74:	2064      	movs	r0, #100	; 0x64
 8000d76:	f002 fd0b 	bl	8003790 <HAL_Delay>
      Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	603b      	str	r3, [r7, #0]
      Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000d7e:	2308      	movs	r3, #8
 8000d80:	607b      	str	r3, [r7, #4]
      Command.AutoRefreshNumber       = 1;
 8000d82:	2301      	movs	r3, #1
 8000d84:	60bb      	str	r3, [r7, #8]
      Command.ModeRegisterDefinition  = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
      HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d90:	4619      	mov	r1, r3
 8000d92:	4816      	ldr	r0, [pc, #88]	; (8000dec <MX_FMC_Init+0x130>)
 8000d94:	f005 fe46 	bl	8006a24 <HAL_SDRAM_SendCommand>
      Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	603b      	str	r3, [r7, #0]
      Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000d9c:	2308      	movs	r3, #8
 8000d9e:	607b      	str	r3, [r7, #4]
      Command.AutoRefreshNumber       = 4;
 8000da0:	2304      	movs	r3, #4
 8000da2:	60bb      	str	r3, [r7, #8]
      Command.ModeRegisterDefinition  = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
      HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8000da8:	463b      	mov	r3, r7
 8000daa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dae:	4619      	mov	r1, r3
 8000db0:	480e      	ldr	r0, [pc, #56]	; (8000dec <MX_FMC_Init+0x130>)
 8000db2:	f005 fe37 	bl	8006a24 <HAL_SDRAM_SendCommand>
      tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8000db6:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000dba:	613b      	str	r3, [r7, #16]
      Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	603b      	str	r3, [r7, #0]
      Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000dc0:	2308      	movs	r3, #8
 8000dc2:	607b      	str	r3, [r7, #4]
      Command.AutoRefreshNumber       = 1;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	60bb      	str	r3, [r7, #8]
      Command.ModeRegisterDefinition  = tmpmrd;
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	60fb      	str	r3, [r7, #12]
      HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8000dcc:	463b      	mov	r3, r7
 8000dce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_FMC_Init+0x130>)
 8000dd6:	f005 fe25 	bl	8006a24 <HAL_SDRAM_SendCommand>
      HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1386);
 8000dda:	f240 516a 	movw	r1, #1386	; 0x56a
 8000dde:	4803      	ldr	r0, [pc, #12]	; (8000dec <MX_FMC_Init+0x130>)
 8000de0:	f005 fe4b 	bl	8006a7a <HAL_SDRAM_ProgramRefreshRate>
}
 8000de4:	bf00      	nop
 8000de6:	3730      	adds	r7, #48	; 0x30
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	2000abf4 	.word	0x2000abf4
 8000df0:	a0000140 	.word	0xa0000140

08000df4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000e08:	4b3b      	ldr	r3, [pc, #236]	; (8000ef8 <HAL_FMC_MspInit+0x104>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d16f      	bne.n	8000ef0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000e10:	4b39      	ldr	r3, [pc, #228]	; (8000ef8 <HAL_FMC_MspInit+0x104>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	603b      	str	r3, [r7, #0]
 8000e1a:	4b38      	ldr	r3, [pc, #224]	; (8000efc <HAL_FMC_MspInit+0x108>)
 8000e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e1e:	4a37      	ldr	r2, [pc, #220]	; (8000efc <HAL_FMC_MspInit+0x108>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6393      	str	r3, [r2, #56]	; 0x38
 8000e26:	4b35      	ldr	r3, [pc, #212]	; (8000efc <HAL_FMC_MspInit+0x108>)
 8000e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000e32:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000e36:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e44:	230c      	movs	r3, #12
 8000e46:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	482c      	ldr	r0, [pc, #176]	; (8000f00 <HAL_FMC_MspInit+0x10c>)
 8000e4e:	f003 f83f 	bl	8003ed0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000e52:	2301      	movs	r3, #1
 8000e54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e62:	230c      	movs	r3, #12
 8000e64:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4826      	ldr	r0, [pc, #152]	; (8000f04 <HAL_FMC_MspInit+0x110>)
 8000e6c:	f003 f830 	bl	8003ed0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000e70:	f248 1333 	movw	r3, #33075	; 0x8133
 8000e74:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e82:	230c      	movs	r3, #12
 8000e84:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	4619      	mov	r1, r3
 8000e8a:	481f      	ldr	r0, [pc, #124]	; (8000f08 <HAL_FMC_MspInit+0x114>)
 8000e8c:	f003 f820 	bl	8003ed0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000e90:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000e94:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ea2:	230c      	movs	r3, #12
 8000ea4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4818      	ldr	r0, [pc, #96]	; (8000f0c <HAL_FMC_MspInit+0x118>)
 8000eac:	f003 f810 	bl	8003ed0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000eb0:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000eb4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ec2:	230c      	movs	r3, #12
 8000ec4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4811      	ldr	r0, [pc, #68]	; (8000f10 <HAL_FMC_MspInit+0x11c>)
 8000ecc:	f003 f800 	bl	8003ed0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000ed0:	2360      	movs	r3, #96	; 0x60
 8000ed2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000edc:	2303      	movs	r3, #3
 8000ede:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ee0:	230c      	movs	r3, #12
 8000ee2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	480a      	ldr	r0, [pc, #40]	; (8000f14 <HAL_FMC_MspInit+0x120>)
 8000eea:	f002 fff1 	bl	8003ed0 <HAL_GPIO_Init>
 8000eee:	e000      	b.n	8000ef2 <HAL_FMC_MspInit+0xfe>
    return;
 8000ef0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	2000017c 	.word	0x2000017c
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40021400 	.word	0x40021400
 8000f04:	40020800 	.word	0x40020800
 8000f08:	40021800 	.word	0x40021800
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40020c00 	.word	0x40020c00
 8000f14:	40020400 	.word	0x40020400

08000f18 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000f20:	f7ff ff68 	bl	8000df4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <vApplicationGetIdleTaskMemory+0x2c>)
 8000f70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	4a06      	ldr	r2, [pc, #24]	; (8000f90 <vApplicationGetIdleTaskMemory+0x30>)
 8000f76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2280      	movs	r2, #128	; 0x80
 8000f7c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000180 	.word	0x20000180
 8000f90:	200001d8 	.word	0x200001d8

08000f94 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f94:	b5b0      	push	{r4, r5, r7, lr}
 8000f96:	b08c      	sub	sp, #48	; 0x30
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of envQueue */
  //osMessageQDef(envQueue, 16, ENV_MSG);
  osMessageQDef(envQueue, 16, ENV_MSG);
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <MX_FREERTOS_Init+0x50>)
 8000f9c:	f107 0420 	add.w	r4, r7, #32
 8000fa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  envQueueHandle = osMessageCreate(osMessageQ(envQueue), NULL);
 8000fa6:	f107 0320 	add.w	r3, r7, #32
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f008 facf 	bl	8009550 <osMessageCreate>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4a0c      	ldr	r2, [pc, #48]	; (8000fe8 <MX_FREERTOS_Init+0x54>)
 8000fb6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_FREERTOS_Init+0x58>)
 8000fba:	1d3c      	adds	r4, r7, #4
 8000fbc:	461d      	mov	r5, r3
 8000fbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f008 f90e 	bl	80091f0 <osThreadCreate>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <MX_FREERTOS_Init+0x5c>)
 8000fd8:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  //osThreadDef(touchTask, TouchGFX_Task, osPriorityNormal, 0, 4086);
  //touchGFXTaskHandle = osThreadCreate(osThread(touchTask), NULL);
  /* USER CODE END RTOS_THREADS */

}
 8000fda:	bf00      	nop
 8000fdc:	3730      	adds	r7, #48	; 0x30
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	08024db8 	.word	0x08024db8
 8000fe8:	2000acbc 	.word	0x2000acbc
 8000fec:	08024dc8 	.word	0x08024dc8
 8000ff0:	2000acc0 	.word	0x2000acc0

08000ff4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for (;;)
  {
		evt = osSignalWait(0x000F, 100);
 8000ffc:	f107 0308 	add.w	r3, r7, #8
 8001000:	2264      	movs	r2, #100	; 0x64
 8001002:	210f      	movs	r1, #15
 8001004:	4618      	mov	r0, r3
 8001006:	f008 f993 	bl	8009330 <osSignalWait>
			{
				DEBUG_PRINT("HUM_OFF");
			}
#else
		}
			for (i=0; i<=4; i++)
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	e02b      	b.n	8001068 <StartDefaultTask+0x74>
			{
#if (1)
				switch ( (evt.value.signals) & (1U << i))
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4619      	mov	r1, r3
 8001014:	2201      	movs	r2, #1
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	400b      	ands	r3, r1
 800101e:	2b08      	cmp	r3, #8
 8001020:	bf8c      	ite	hi
 8001022:	2201      	movhi	r2, #1
 8001024:	2200      	movls	r2, #0
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	2a00      	cmp	r2, #0
 800102a:	d119      	bne.n	8001060 <StartDefaultTask+0x6c>
 800102c:	2201      	movs	r2, #1
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	f403 738b 	and.w	r3, r3, #278	; 0x116
 8001036:	2b00      	cmp	r3, #0
 8001038:	bf14      	ite	ne
 800103a:	2301      	movne	r3, #1
 800103c:	2300      	moveq	r3, #0
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d00d      	beq.n	8001060 <StartDefaultTask+0x6c>
					case BUZZER_ON:
					case BUZZER_OFF:
					case HUM_ON:
					case HUM_OFF:

						ring_buffer_queue(&ring_buffer, (char)(evt.value.signals) & (1U << i));
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	2101      	movs	r1, #1
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	fa01 f303 	lsl.w	r3, r1, r3
 8001050:	b2db      	uxtb	r3, r3
 8001052:	4013      	ands	r3, r2
 8001054:	b2db      	uxtb	r3, r3
 8001056:	4619      	mov	r1, r3
 8001058:	4807      	ldr	r0, [pc, #28]	; (8001078 <StartDefaultTask+0x84>)
 800105a:	f000 fcd6 	bl	8001a0a <ring_buffer_queue>
						break;
 800105e:	e000      	b.n	8001062 <StartDefaultTask+0x6e>

					default:
						break;
 8001060:	bf00      	nop
			for (i=0; i<=4; i++)
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	2b04      	cmp	r3, #4
 800106c:	ddd0      	ble.n	8001010 <StartDefaultTask+0x1c>
					ring_buffer_queue(&ring_buffer, (char)evt.value.signals & i);
				}
#endif
			}
#endif
		osDelay(1);
 800106e:	2001      	movs	r0, #1
 8001070:	f008 f90a 	bl	8009288 <osDelay>
		evt = osSignalWait(0x000F, 100);
 8001074:	e7c2      	b.n	8000ffc <StartDefaultTask+0x8>
 8001076:	bf00      	nop
 8001078:	2000ac30 	.word	0x2000ac30

0800107c <MX_GPIO_Init>:
     PB13   ------> USB_OTG_HS_VBUS
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08e      	sub	sp, #56	; 0x38
 8001080:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
 8001090:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	623b      	str	r3, [r7, #32]
 8001096:	4b9d      	ldr	r3, [pc, #628]	; (800130c <MX_GPIO_Init+0x290>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a9c      	ldr	r2, [pc, #624]	; (800130c <MX_GPIO_Init+0x290>)
 800109c:	f043 0310 	orr.w	r3, r3, #16
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b9a      	ldr	r3, [pc, #616]	; (800130c <MX_GPIO_Init+0x290>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0310 	and.w	r3, r3, #16
 80010aa:	623b      	str	r3, [r7, #32]
 80010ac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
 80010b2:	4b96      	ldr	r3, [pc, #600]	; (800130c <MX_GPIO_Init+0x290>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a95      	ldr	r2, [pc, #596]	; (800130c <MX_GPIO_Init+0x290>)
 80010b8:	f043 0304 	orr.w	r3, r3, #4
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b93      	ldr	r3, [pc, #588]	; (800130c <MX_GPIO_Init+0x290>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0304 	and.w	r3, r3, #4
 80010c6:	61fb      	str	r3, [r7, #28]
 80010c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
 80010ce:	4b8f      	ldr	r3, [pc, #572]	; (800130c <MX_GPIO_Init+0x290>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a8e      	ldr	r2, [pc, #568]	; (800130c <MX_GPIO_Init+0x290>)
 80010d4:	f043 0320 	orr.w	r3, r3, #32
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b8c      	ldr	r3, [pc, #560]	; (800130c <MX_GPIO_Init+0x290>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0320 	and.w	r3, r3, #32
 80010e2:	61bb      	str	r3, [r7, #24]
 80010e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	4b88      	ldr	r3, [pc, #544]	; (800130c <MX_GPIO_Init+0x290>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a87      	ldr	r2, [pc, #540]	; (800130c <MX_GPIO_Init+0x290>)
 80010f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b85      	ldr	r3, [pc, #532]	; (800130c <MX_GPIO_Init+0x290>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	4b81      	ldr	r3, [pc, #516]	; (800130c <MX_GPIO_Init+0x290>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a80      	ldr	r2, [pc, #512]	; (800130c <MX_GPIO_Init+0x290>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b7e      	ldr	r3, [pc, #504]	; (800130c <MX_GPIO_Init+0x290>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	4b7a      	ldr	r3, [pc, #488]	; (800130c <MX_GPIO_Init+0x290>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a79      	ldr	r2, [pc, #484]	; (800130c <MX_GPIO_Init+0x290>)
 8001128:	f043 0302 	orr.w	r3, r3, #2
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b77      	ldr	r3, [pc, #476]	; (800130c <MX_GPIO_Init+0x290>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	4b73      	ldr	r3, [pc, #460]	; (800130c <MX_GPIO_Init+0x290>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a72      	ldr	r2, [pc, #456]	; (800130c <MX_GPIO_Init+0x290>)
 8001144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b70      	ldr	r3, [pc, #448]	; (800130c <MX_GPIO_Init+0x290>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	4b6c      	ldr	r3, [pc, #432]	; (800130c <MX_GPIO_Init+0x290>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a6b      	ldr	r2, [pc, #428]	; (800130c <MX_GPIO_Init+0x290>)
 8001160:	f043 0308 	orr.w	r3, r3, #8
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b69      	ldr	r3, [pc, #420]	; (800130c <MX_GPIO_Init+0x290>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HUMIDIFIER_SW_PIN_GPIO_Port, HUMIDIFIER_SW_PIN_Pin, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	2104      	movs	r1, #4
 8001176:	4866      	ldr	r0, [pc, #408]	; (8001310 <MX_GPIO_Init+0x294>)
 8001178:	f003 f97a 	bl	8004470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	2140      	movs	r1, #64	; 0x40
 8001180:	4864      	ldr	r0, [pc, #400]	; (8001314 <MX_GPIO_Init+0x298>)
 8001182:	f003 f975 	bl	8004470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	2116      	movs	r1, #22
 800118a:	4863      	ldr	r0, [pc, #396]	; (8001318 <MX_GPIO_Init+0x29c>)
 800118c:	f003 f970 	bl	8004470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	2180      	movs	r1, #128	; 0x80
 8001194:	4861      	ldr	r0, [pc, #388]	; (800131c <MX_GPIO_Init+0x2a0>)
 8001196:	f003 f96b 	bl	8004470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80011a0:	485f      	ldr	r0, [pc, #380]	; (8001320 <MX_GPIO_Init+0x2a4>)
 80011a2:	f003 f965 	bl	8004470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80011ac:	485d      	ldr	r0, [pc, #372]	; (8001324 <MX_GPIO_Init+0x2a8>)
 80011ae:	f003 f95f 	bl	8004470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HUMIDIFIER_SW_PIN_Pin;
 80011b2:	2304      	movs	r3, #4
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HUMIDIFIER_SW_PIN_GPIO_Port, &GPIO_InitStruct);
 80011c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c6:	4619      	mov	r1, r3
 80011c8:	4851      	ldr	r0, [pc, #324]	; (8001310 <MX_GPIO_Init+0x294>)
 80011ca:	f002 fe81 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80011ce:	2340      	movs	r3, #64	; 0x40
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80011de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e2:	4619      	mov	r1, r3
 80011e4:	484b      	ldr	r0, [pc, #300]	; (8001314 <MX_GPIO_Init+0x298>)
 80011e6:	f002 fe73 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80011ea:	2316      	movs	r3, #22
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fe:	4619      	mov	r1, r3
 8001200:	4845      	ldr	r0, [pc, #276]	; (8001318 <MX_GPIO_Init+0x29c>)
 8001202:	f002 fe65 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001206:	f248 0307 	movw	r3, #32775	; 0x8007
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800120c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121a:	4619      	mov	r1, r3
 800121c:	483f      	ldr	r0, [pc, #252]	; (800131c <MX_GPIO_Init+0x2a0>)
 800121e:	f002 fe57 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001226:	2301      	movs	r3, #1
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001236:	4619      	mov	r1, r3
 8001238:	4838      	ldr	r0, [pc, #224]	; (800131c <MX_GPIO_Init+0x2a0>)
 800123a:	f002 fe49 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800123e:	2320      	movs	r3, #32
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001242:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800124c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001250:	4619      	mov	r1, r3
 8001252:	4831      	ldr	r0, [pc, #196]	; (8001318 <MX_GPIO_Init+0x29c>)
 8001254:	f002 fe3c 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001258:	2304      	movs	r3, #4
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125c:	2300      	movs	r3, #0
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001268:	4619      	mov	r1, r3
 800126a:	482f      	ldr	r0, [pc, #188]	; (8001328 <MX_GPIO_Init+0x2ac>)
 800126c:	f002 fe30 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001270:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127e:	2300      	movs	r3, #0
 8001280:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001282:	230c      	movs	r3, #12
 8001284:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128a:	4619      	mov	r1, r3
 800128c:	4826      	ldr	r0, [pc, #152]	; (8001328 <MX_GPIO_Init+0x2ac>)
 800128e:	f002 fe1f 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001292:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001298:	2300      	movs	r3, #0
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a4:	4619      	mov	r1, r3
 80012a6:	4820      	ldr	r0, [pc, #128]	; (8001328 <MX_GPIO_Init+0x2ac>)
 80012a8:	f002 fe12 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 80012ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80012ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012be:	4619      	mov	r1, r3
 80012c0:	4817      	ldr	r0, [pc, #92]	; (8001320 <MX_GPIO_Init+0x2a4>)
 80012c2:	f002 fe05 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80012c6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012dc:	4619      	mov	r1, r3
 80012de:	4810      	ldr	r0, [pc, #64]	; (8001320 <MX_GPIO_Init+0x2a4>)
 80012e0:	f002 fdf6 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80012e4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fa:	4619      	mov	r1, r3
 80012fc:	4809      	ldr	r0, [pc, #36]	; (8001324 <MX_GPIO_Init+0x2a8>)
 80012fe:	f002 fde7 	bl	8003ed0 <HAL_GPIO_Init>

}
 8001302:	bf00      	nop
 8001304:	3738      	adds	r7, #56	; 0x38
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800
 8001310:	40021000 	.word	0x40021000
 8001314:	40021400 	.word	0x40021400
 8001318:	40020800 	.word	0x40020800
 800131c:	40020000 	.word	0x40020000
 8001320:	40020c00 	.word	0x40020c00
 8001324:	40021800 	.word	0x40021800
 8001328:	40020400 	.word	0x40020400

0800132c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001330:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <MX_I2C3_Init+0x74>)
 8001332:	4a1c      	ldr	r2, [pc, #112]	; (80013a4 <MX_I2C3_Init+0x78>)
 8001334:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001336:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <MX_I2C3_Init+0x74>)
 8001338:	4a1b      	ldr	r2, [pc, #108]	; (80013a8 <MX_I2C3_Init+0x7c>)
 800133a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800133c:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <MX_I2C3_Init+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <MX_I2C3_Init+0x74>)
 8001344:	2200      	movs	r2, #0
 8001346:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <MX_I2C3_Init+0x74>)
 800134a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800134e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001350:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <MX_I2C3_Init+0x74>)
 8001352:	2200      	movs	r2, #0
 8001354:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001356:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <MX_I2C3_Init+0x74>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800135c:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <MX_I2C3_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001362:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <MX_I2C3_Init+0x74>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001368:	480d      	ldr	r0, [pc, #52]	; (80013a0 <MX_I2C3_Init+0x74>)
 800136a:	f003 f8b5 	bl	80044d8 <HAL_I2C_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001374:	f000 fb04 	bl	8001980 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001378:	2100      	movs	r1, #0
 800137a:	4809      	ldr	r0, [pc, #36]	; (80013a0 <MX_I2C3_Init+0x74>)
 800137c:	f004 f8a9 	bl	80054d2 <HAL_I2CEx_ConfigAnalogFilter>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001386:	f000 fafb 	bl	8001980 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800138a:	2100      	movs	r1, #0
 800138c:	4804      	ldr	r0, [pc, #16]	; (80013a0 <MX_I2C3_Init+0x74>)
 800138e:	f004 f8dc 	bl	800554a <HAL_I2CEx_ConfigDigitalFilter>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001398:	f000 faf2 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	2000accc 	.word	0x2000accc
 80013a4:	40005c00 	.word	0x40005c00
 80013a8:	000186a0 	.word	0x000186a0

080013ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a29      	ldr	r2, [pc, #164]	; (8001470 <HAL_I2C_MspInit+0xc4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d14b      	bne.n	8001466 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	4b28      	ldr	r3, [pc, #160]	; (8001474 <HAL_I2C_MspInit+0xc8>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a27      	ldr	r2, [pc, #156]	; (8001474 <HAL_I2C_MspInit+0xc8>)
 80013d8:	f043 0304 	orr.w	r3, r3, #4
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b25      	ldr	r3, [pc, #148]	; (8001474 <HAL_I2C_MspInit+0xc8>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b21      	ldr	r3, [pc, #132]	; (8001474 <HAL_I2C_MspInit+0xc8>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a20      	ldr	r2, [pc, #128]	; (8001474 <HAL_I2C_MspInit+0xc8>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <HAL_I2C_MspInit+0xc8>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001406:	f44f 7300 	mov.w	r3, #512	; 0x200
 800140a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800140c:	2312      	movs	r3, #18
 800140e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001410:	2301      	movs	r3, #1
 8001412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001418:	2304      	movs	r3, #4
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	4815      	ldr	r0, [pc, #84]	; (8001478 <HAL_I2C_MspInit+0xcc>)
 8001424:	f002 fd54 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800142c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800142e:	2312      	movs	r3, #18
 8001430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001432:	2301      	movs	r3, #1
 8001434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800143a:	2304      	movs	r3, #4
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	480d      	ldr	r0, [pc, #52]	; (800147c <HAL_I2C_MspInit+0xd0>)
 8001446:	f002 fd43 	bl	8003ed0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_I2C_MspInit+0xc8>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	4a08      	ldr	r2, [pc, #32]	; (8001474 <HAL_I2C_MspInit+0xc8>)
 8001454:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001458:	6413      	str	r3, [r2, #64]	; 0x40
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_I2C_MspInit+0xc8>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001466:	bf00      	nop
 8001468:	3728      	adds	r7, #40	; 0x28
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40005c00 	.word	0x40005c00
 8001474:	40023800 	.word	0x40023800
 8001478:	40020800 	.word	0x40020800
 800147c:	40020000 	.word	0x40020000

08001480 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <HAL_I2C_MspDeInit+0x3c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d10f      	bne.n	80014b2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <HAL_I2C_MspDeInit+0x40>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <HAL_I2C_MspDeInit+0x40>)
 8001498:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800149c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 800149e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014a2:	4808      	ldr	r0, [pc, #32]	; (80014c4 <HAL_I2C_MspDeInit+0x44>)
 80014a4:	f002 fec0 	bl	8004228 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 80014a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ac:	4806      	ldr	r0, [pc, #24]	; (80014c8 <HAL_I2C_MspDeInit+0x48>)
 80014ae:	f002 febb 	bl	8004228 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40005c00 	.word	0x40005c00
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020800 	.word	0x40020800
 80014c8:	40020000 	.word	0x40020000

080014cc <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08e      	sub	sp, #56	; 0x38
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2234      	movs	r2, #52	; 0x34
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f022 f9dd 	bl	8023898 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80014de:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <MX_LTDC_Init+0xf8>)
 80014e0:	4a39      	ldr	r2, [pc, #228]	; (80015c8 <MX_LTDC_Init+0xfc>)
 80014e2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80014e4:	4b37      	ldr	r3, [pc, #220]	; (80015c4 <MX_LTDC_Init+0xf8>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80014ea:	4b36      	ldr	r3, [pc, #216]	; (80015c4 <MX_LTDC_Init+0xf8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80014f0:	4b34      	ldr	r3, [pc, #208]	; (80015c4 <MX_LTDC_Init+0xf8>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80014f6:	4b33      	ldr	r3, [pc, #204]	; (80015c4 <MX_LTDC_Init+0xf8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80014fc:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <MX_LTDC_Init+0xf8>)
 80014fe:	2209      	movs	r2, #9
 8001500:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001502:	4b30      	ldr	r3, [pc, #192]	; (80015c4 <MX_LTDC_Init+0xf8>)
 8001504:	2201      	movs	r2, #1
 8001506:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8001508:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <MX_LTDC_Init+0xf8>)
 800150a:	221d      	movs	r2, #29
 800150c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800150e:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <MX_LTDC_Init+0xf8>)
 8001510:	2203      	movs	r2, #3
 8001512:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8001514:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <MX_LTDC_Init+0xf8>)
 8001516:	f240 120d 	movw	r2, #269	; 0x10d
 800151a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800151c:	4b29      	ldr	r3, [pc, #164]	; (80015c4 <MX_LTDC_Init+0xf8>)
 800151e:	f240 1243 	movw	r2, #323	; 0x143
 8001522:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8001524:	4b27      	ldr	r3, [pc, #156]	; (80015c4 <MX_LTDC_Init+0xf8>)
 8001526:	f240 1217 	movw	r2, #279	; 0x117
 800152a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 800152c:	4b25      	ldr	r3, [pc, #148]	; (80015c4 <MX_LTDC_Init+0xf8>)
 800152e:	f240 1247 	movw	r2, #327	; 0x147
 8001532:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001534:	4b23      	ldr	r3, [pc, #140]	; (80015c4 <MX_LTDC_Init+0xf8>)
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800153c:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <MX_LTDC_Init+0xf8>)
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001544:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <MX_LTDC_Init+0xf8>)
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800154c:	481d      	ldr	r0, [pc, #116]	; (80015c4 <MX_LTDC_Init+0xf8>)
 800154e:	f004 f83b 	bl	80055c8 <HAL_LTDC_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001558:	f000 fa12 	bl	8001980 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8001560:	23f0      	movs	r3, #240	; 0xf0
 8001562:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8001568:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800156c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800156e:	2302      	movs	r3, #2
 8001570:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001572:	23ff      	movs	r3, #255	; 0xff
 8001574:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800157a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800157e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001580:	2305      	movs	r3, #5
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001584:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800158a:	23f0      	movs	r3, #240	; 0xf0
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800158e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001592:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	2200      	movs	r2, #0
 80015aa:	4619      	mov	r1, r3
 80015ac:	4805      	ldr	r0, [pc, #20]	; (80015c4 <MX_LTDC_Init+0xf8>)
 80015ae:	f004 f993 	bl	80058d8 <HAL_LTDC_ConfigLayer>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80015b8:	f000 f9e2 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80015bc:	bf00      	nop
 80015be:	3738      	adds	r7, #56	; 0x38
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	2000ad20 	.word	0x2000ad20
 80015c8:	40016800 	.word	0x40016800

080015cc <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08e      	sub	sp, #56	; 0x38
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a7b      	ldr	r2, [pc, #492]	; (80017d8 <HAL_LTDC_MspInit+0x20c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	f040 80f0 	bne.w	80017d0 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80015f0:	2300      	movs	r3, #0
 80015f2:	623b      	str	r3, [r7, #32]
 80015f4:	4b79      	ldr	r3, [pc, #484]	; (80017dc <HAL_LTDC_MspInit+0x210>)
 80015f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f8:	4a78      	ldr	r2, [pc, #480]	; (80017dc <HAL_LTDC_MspInit+0x210>)
 80015fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015fe:	6453      	str	r3, [r2, #68]	; 0x44
 8001600:	4b76      	ldr	r3, [pc, #472]	; (80017dc <HAL_LTDC_MspInit+0x210>)
 8001602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001604:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001608:	623b      	str	r3, [r7, #32]
 800160a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
 8001610:	4b72      	ldr	r3, [pc, #456]	; (80017dc <HAL_LTDC_MspInit+0x210>)
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001614:	4a71      	ldr	r2, [pc, #452]	; (80017dc <HAL_LTDC_MspInit+0x210>)
 8001616:	f043 0320 	orr.w	r3, r3, #32
 800161a:	6313      	str	r3, [r2, #48]	; 0x30
 800161c:	4b6f      	ldr	r3, [pc, #444]	; (80017dc <HAL_LTDC_MspInit+0x210>)
 800161e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001620:	f003 0320 	and.w	r3, r3, #32
 8001624:	61fb      	str	r3, [r7, #28]
 8001626:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001628:	2300      	movs	r3, #0
 800162a:	61bb      	str	r3, [r7, #24]
 800162c:	4b6b      	ldr	r3, [pc, #428]	; (80017dc <HAL_LTDC_MspInit+0x210>)
 800162e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001630:	4a6a      	ldr	r2, [pc, #424]	; (80017dc <HAL_LTDC_MspInit+0x210>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	6313      	str	r3, [r2, #48]	; 0x30
 8001638:	4b68      	ldr	r3, [pc, #416]	; (80017dc <HAL_LTDC_MspInit+0x210>)
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	61bb      	str	r3, [r7, #24]
 8001642:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	4b64      	ldr	r3, [pc, #400]	; (80017dc <HAL_LTDC_MspInit+0x210>)
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	4a63      	ldr	r2, [pc, #396]	; (80017dc <HAL_LTDC_MspInit+0x210>)
 800164e:	f043 0302 	orr.w	r3, r3, #2
 8001652:	6313      	str	r3, [r2, #48]	; 0x30
 8001654:	4b61      	ldr	r3, [pc, #388]	; (80017dc <HAL_LTDC_MspInit+0x210>)
 8001656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001660:	2300      	movs	r3, #0
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	4b5d      	ldr	r3, [pc, #372]	; (80017dc <HAL_LTDC_MspInit+0x210>)
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	4a5c      	ldr	r2, [pc, #368]	; (80017dc <HAL_LTDC_MspInit+0x210>)
 800166a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800166e:	6313      	str	r3, [r2, #48]	; 0x30
 8001670:	4b5a      	ldr	r3, [pc, #360]	; (80017dc <HAL_LTDC_MspInit+0x210>)
 8001672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	4b56      	ldr	r3, [pc, #344]	; (80017dc <HAL_LTDC_MspInit+0x210>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	4a55      	ldr	r2, [pc, #340]	; (80017dc <HAL_LTDC_MspInit+0x210>)
 8001686:	f043 0304 	orr.w	r3, r3, #4
 800168a:	6313      	str	r3, [r2, #48]	; 0x30
 800168c:	4b53      	ldr	r3, [pc, #332]	; (80017dc <HAL_LTDC_MspInit+0x210>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001698:	2300      	movs	r3, #0
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	4b4f      	ldr	r3, [pc, #316]	; (80017dc <HAL_LTDC_MspInit+0x210>)
 800169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a0:	4a4e      	ldr	r2, [pc, #312]	; (80017dc <HAL_LTDC_MspInit+0x210>)
 80016a2:	f043 0308 	orr.w	r3, r3, #8
 80016a6:	6313      	str	r3, [r2, #48]	; 0x30
 80016a8:	4b4c      	ldr	r3, [pc, #304]	; (80017dc <HAL_LTDC_MspInit+0x210>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80016b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016c6:	230e      	movs	r3, #14
 80016c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80016ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ce:	4619      	mov	r1, r3
 80016d0:	4843      	ldr	r0, [pc, #268]	; (80017e0 <HAL_LTDC_MspInit+0x214>)
 80016d2:	f002 fbfd 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80016d6:	f641 0358 	movw	r3, #6232	; 0x1858
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016dc:	2302      	movs	r3, #2
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016e8:	230e      	movs	r3, #14
 80016ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f0:	4619      	mov	r1, r3
 80016f2:	483c      	ldr	r0, [pc, #240]	; (80017e4 <HAL_LTDC_MspInit+0x218>)
 80016f4:	f002 fbec 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80016f8:	2303      	movs	r3, #3
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001708:	2309      	movs	r3, #9
 800170a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001710:	4619      	mov	r1, r3
 8001712:	4835      	ldr	r0, [pc, #212]	; (80017e8 <HAL_LTDC_MspInit+0x21c>)
 8001714:	f002 fbdc 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001718:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800172a:	230e      	movs	r3, #14
 800172c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001732:	4619      	mov	r1, r3
 8001734:	482c      	ldr	r0, [pc, #176]	; (80017e8 <HAL_LTDC_MspInit+0x21c>)
 8001736:	f002 fbcb 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800173a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800174c:	230e      	movs	r3, #14
 800174e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001754:	4619      	mov	r1, r3
 8001756:	4825      	ldr	r0, [pc, #148]	; (80017ec <HAL_LTDC_MspInit+0x220>)
 8001758:	f002 fbba 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800175c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800176e:	230e      	movs	r3, #14
 8001770:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001776:	4619      	mov	r1, r3
 8001778:	481d      	ldr	r0, [pc, #116]	; (80017f0 <HAL_LTDC_MspInit+0x224>)
 800177a:	f002 fba9 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800177e:	2348      	movs	r3, #72	; 0x48
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800178e:	230e      	movs	r3, #14
 8001790:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001796:	4619      	mov	r1, r3
 8001798:	4816      	ldr	r0, [pc, #88]	; (80017f4 <HAL_LTDC_MspInit+0x228>)
 800179a:	f002 fb99 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800179e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80017b0:	2309      	movs	r3, #9
 80017b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b8:	4619      	mov	r1, r3
 80017ba:	480c      	ldr	r0, [pc, #48]	; (80017ec <HAL_LTDC_MspInit+0x220>)
 80017bc:	f002 fb88 	bl	8003ed0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2105      	movs	r1, #5
 80017c4:	2058      	movs	r0, #88	; 0x58
 80017c6:	f002 f8bf 	bl	8003948 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80017ca:	2058      	movs	r0, #88	; 0x58
 80017cc:	f002 f8d8 	bl	8003980 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80017d0:	bf00      	nop
 80017d2:	3738      	adds	r7, #56	; 0x38
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40016800 	.word	0x40016800
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40021400 	.word	0x40021400
 80017e4:	40020000 	.word	0x40020000
 80017e8:	40020400 	.word	0x40020400
 80017ec:	40021800 	.word	0x40021800
 80017f0:	40020800 	.word	0x40020800
 80017f4:	40020c00 	.word	0x40020c00

080017f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017fc:	f001 ff86 	bl	800370c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001800:	f000 f828 	bl	8001854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001804:	f7ff fc3a 	bl	800107c <MX_GPIO_Init>
  MX_CRC_Init();
 8001808:	f7ff f81a 	bl	8000840 <MX_CRC_Init>
  MX_DMA2D_Init();
 800180c:	f7ff f980 	bl	8000b10 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001810:	f7ff fa54 	bl	8000cbc <MX_FMC_Init>
  MX_I2C3_Init();
 8001814:	f7ff fd8a 	bl	800132c <MX_I2C3_Init>
  MX_LTDC_Init();
 8001818:	f7ff fe58 	bl	80014cc <MX_LTDC_Init>
  MX_SPI5_Init();
 800181c:	f000 f9fe 	bl	8001c1c <MX_SPI5_Init>
  MX_TIM1_Init();
 8001820:	f000 fc7a 	bl	8002118 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001824:	f000 fd14 	bl	8002250 <MX_USART1_UART_Init>
  MX_UART5_Init();
 8001828:	f000 fce8 	bl	80021fc <MX_UART5_Init>
  MX_TouchGFX_Init();
 800182c:	f00a fdba 	bl	800c3a4 <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */
  //WifiInit(osPriorityLow);
  workTaskInit(osPriorityAboveNormal);
 8001830:	2001      	movs	r0, #1
 8001832:	f000 fe85 	bl	8002540 <workTaskInit>
  eventLoopInit(osPriorityNormal);
 8001836:	2000      	movs	r0, #0
 8001838:	f7ff fa0a 	bl	8000c50 <eventLoopInit>
  sensorInit(osPriorityRealtime);
 800183c:	2003      	movs	r0, #3
 800183e:	f000 f9b7 	bl	8001bb0 <sensorInit>
  tftLcdInit(osPriorityHigh);
 8001842:	2002      	movs	r0, #2
 8001844:	f000 fc22 	bl	800208c <tftLcdInit>
  //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001848:	f7ff fba4 	bl	8000f94 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800184c:	f007 fcc9 	bl	80091e2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001850:	e7fe      	b.n	8001850 <main+0x58>
	...

08001854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b0a0      	sub	sp, #128	; 0x80
 8001858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800185a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800185e:	2230      	movs	r2, #48	; 0x30
 8001860:	2100      	movs	r1, #0
 8001862:	4618      	mov	r0, r3
 8001864:	f022 f818 	bl	8023898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001868:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	2230      	movs	r2, #48	; 0x30
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f022 f809 	bl	8023898 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	4b32      	ldr	r3, [pc, #200]	; (8001954 <SystemClock_Config+0x100>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	4a31      	ldr	r2, [pc, #196]	; (8001954 <SystemClock_Config+0x100>)
 8001890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001894:	6413      	str	r3, [r2, #64]	; 0x40
 8001896:	4b2f      	ldr	r3, [pc, #188]	; (8001954 <SystemClock_Config+0x100>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018a2:	2300      	movs	r3, #0
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	4b2c      	ldr	r3, [pc, #176]	; (8001958 <SystemClock_Config+0x104>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018ae:	4a2a      	ldr	r2, [pc, #168]	; (8001958 <SystemClock_Config+0x104>)
 80018b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	4b28      	ldr	r3, [pc, #160]	; (8001958 <SystemClock_Config+0x104>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018c2:	2301      	movs	r3, #1
 80018c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ca:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018cc:	2302      	movs	r3, #2
 80018ce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018d6:	2304      	movs	r3, #4
 80018d8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 80018da:	2348      	movs	r3, #72	; 0x48
 80018dc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018de:	2302      	movs	r3, #2
 80018e0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80018e2:	2303      	movs	r3, #3
 80018e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018ea:	4618      	mov	r0, r3
 80018ec:	f004 fa02 	bl	8005cf4 <HAL_RCC_OscConfig>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80018f6:	f000 f843 	bl	8001980 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018fa:	230f      	movs	r3, #15
 80018fc:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018fe:	2302      	movs	r3, #2
 8001900:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001902:	2300      	movs	r3, #0
 8001904:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800190c:	2300      	movs	r3, #0
 800190e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001910:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001914:	2102      	movs	r1, #2
 8001916:	4618      	mov	r0, r3
 8001918:	f004 fc64 	bl	80061e4 <HAL_RCC_ClockConfig>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001922:	f000 f82d 	bl	8001980 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001926:	2308      	movs	r3, #8
 8001928:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 800192a:	233c      	movs	r3, #60	; 0x3c
 800192c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800192e:	2305      	movs	r3, #5
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001932:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001938:	f107 030c 	add.w	r3, r7, #12
 800193c:	4618      	mov	r0, r3
 800193e:	f004 fe7f 	bl	8006640 <HAL_RCCEx_PeriphCLKConfig>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001948:	f000 f81a 	bl	8001980 <Error_Handler>
  }
}
 800194c:	bf00      	nop
 800194e:	3780      	adds	r7, #128	; 0x80
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40023800 	.word	0x40023800
 8001958:	40007000 	.word	0x40007000

0800195c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a04      	ldr	r2, [pc, #16]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d101      	bne.n	8001972 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800196e:	f001 feef 	bl	8003750 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40001000 	.word	0x40001000

08001980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001984:	b672      	cpsid	i
}
 8001986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001988:	e7fe      	b.n	8001988 <Error_Handler+0x8>

0800198a <ring_buffer_is_empty>:
/**
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  return (buffer->head_index == buffer->tail_index);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800199e:	429a      	cmp	r2, r3
 80019a0:	bf0c      	ite	eq
 80019a2:	2301      	moveq	r3, #1
 80019a4:	2300      	movne	r3, #0
 80019a6:	b2db      	uxtb	r3, r3
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <ring_buffer_is_full>:
/**
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019d0:	2b7f      	cmp	r3, #127	; 0x7f
 80019d2:	bf0c      	ite	eq
 80019d4:	2301      	moveq	r3, #1
 80019d6:	2300      	movne	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
}
 80019da:	4618      	mov	r0, r3
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <ring_buffer_init>:
/**
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer) {
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  buffer->tail_index = 0;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  buffer->head_index = 0;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <ring_buffer_queue>:

void ring_buffer_queue(ring_buffer_t *buffer, char data) {
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	460b      	mov	r3, r1
 8001a14:	70fb      	strb	r3, [r7, #3]
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ffcc 	bl	80019b4 <ring_buffer_is_full>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00a      	beq.n	8001a38 <ring_buffer_queue+0x2e>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001a28:	3301      	adds	r3, #1
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001a3e:	4619      	mov	r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	78fa      	ldrb	r2, [r7, #3]
 8001a44:	545a      	strb	r2, [r3, r1]
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <ring_buffer_dequeue>:
  for(i = 0; i < size; i++) {
    ring_buffer_queue(buffer, data[i]);
  }
}

uint8_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  if(ring_buffer_is_empty(buffer)) {
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ff8b 	bl	800198a <ring_buffer_is_empty>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <ring_buffer_dequeue+0x1a>
    /* No items */
    return 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e013      	b.n	8001aa6 <ring_buffer_dequeue+0x42>
  }
  
  *data = buffer->buffer[buffer->tail_index];
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001a84:	461a      	mov	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	5c9a      	ldrb	r2, [r3, r2]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	701a      	strb	r2, [r3, #0]
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001a94:	3301      	adds	r3, #1
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return 1;
 8001aa4:	2301      	movs	r3, #1
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <sensorTask>:
 *      Author: bsoh
 */
#include "sensor.h"

void sensorTask(void const * argument)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b0a6      	sub	sp, #152	; 0x98
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	  //ENV_MSG envData;
	ENV_MSG envData;
	  uint8_t status = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	  char buf[128] = {0,};
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	f107 0310 	add.w	r3, r7, #16
 8001ac6:	227c      	movs	r2, #124	; 0x7c
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f021 fee4 	bl	8023898 <memset>

	  dht11Init(&dht11Dev);
 8001ad0:	482d      	ldr	r0, [pc, #180]	; (8001b88 <sensorTask+0xd8>)
 8001ad2:	f7fe ff47 	bl	8000964 <dht11Init>
	  DEBUG_PRINT("init....");
 8001ad6:	2311      	movs	r3, #17
 8001ad8:	4a2c      	ldr	r2, [pc, #176]	; (8001b8c <sensorTask+0xdc>)
 8001ada:	492d      	ldr	r1, [pc, #180]	; (8001b90 <sensorTask+0xe0>)
 8001adc:	482d      	ldr	r0, [pc, #180]	; (8001b94 <sensorTask+0xe4>)
 8001ade:	f000 fc89 	bl	80023f4 <_debugPrint>

	  while (1)
	  {
		  dht11Start(&dht11Dev);
 8001ae2:	4829      	ldr	r0, [pc, #164]	; (8001b88 <sensorTask+0xd8>)
 8001ae4:	f7fe ff50 	bl	8000988 <dht11Start>
		  status = dht11CheckResponse(&dht11Dev);
 8001ae8:	4827      	ldr	r0, [pc, #156]	; (8001b88 <sensorTask+0xd8>)
 8001aea:	f7fe ff7f 	bl	80009ec <dht11CheckResponse>
 8001aee:	4603      	mov	r3, r0
 8001af0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

		  if (status == DHT11_SUCCESS)
 8001af4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d140      	bne.n	8001b7e <sensorTask+0xce>
		  {
			  //envData = (ENV_MSG *)osPoolAlloc(Pool_ID);
			  //pMsgQ = (MessageQ *)osPoolAlloc (Pool_ID);

			  Rh_byte1 = dht11Read(&dht11Dev);
 8001afc:	4822      	ldr	r0, [pc, #136]	; (8001b88 <sensorTask+0xd8>)
 8001afe:	f7fe ffb0 	bl	8000a62 <dht11Read>
 8001b02:	4603      	mov	r3, r0
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <sensorTask+0xe8>)
 8001b08:	701a      	strb	r2, [r3, #0]
			  Rh_byte2 = dht11Read(&dht11Dev);
 8001b0a:	481f      	ldr	r0, [pc, #124]	; (8001b88 <sensorTask+0xd8>)
 8001b0c:	f7fe ffa9 	bl	8000a62 <dht11Read>
 8001b10:	4603      	mov	r3, r0
 8001b12:	461a      	mov	r2, r3
 8001b14:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <sensorTask+0xec>)
 8001b16:	701a      	strb	r2, [r3, #0]
			  Temp_byte1 = dht11Read(&dht11Dev);
 8001b18:	481b      	ldr	r0, [pc, #108]	; (8001b88 <sensorTask+0xd8>)
 8001b1a:	f7fe ffa2 	bl	8000a62 <dht11Read>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <sensorTask+0xf0>)
 8001b24:	701a      	strb	r2, [r3, #0]
			  Temp_byte2 = dht11Read(&dht11Dev);
 8001b26:	4818      	ldr	r0, [pc, #96]	; (8001b88 <sensorTask+0xd8>)
 8001b28:	f7fe ff9b 	bl	8000a62 <dht11Read>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <sensorTask+0xf4>)
 8001b32:	701a      	strb	r2, [r3, #0]
			  SUM = dht11Read(&dht11Dev);
 8001b34:	4814      	ldr	r0, [pc, #80]	; (8001b88 <sensorTask+0xd8>)
 8001b36:	f7fe ff94 	bl	8000a62 <dht11Read>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <sensorTask+0xf8>)
 8001b40:	801a      	strh	r2, [r3, #0]

			  dht11Dev.temparature = Temp_byte1;
 8001b42:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <sensorTask+0xf0>)
 8001b44:	781a      	ldrb	r2, [r3, #0]
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <sensorTask+0xd8>)
 8001b48:	701a      	strb	r2, [r3, #0]
			  dht11Dev.humidity    = Rh_byte1;
 8001b4a:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <sensorTask+0xe8>)
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <sensorTask+0xd8>)
 8001b50:	705a      	strb	r2, [r3, #1]

			  envData.temp  = (int)dht11Dev.temparature;
 8001b52:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <sensorTask+0xd8>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			  envData.humid = (int)dht11Dev.humidity;
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <sensorTask+0xd8>)
 8001b5c:	785b      	ldrb	r3, [r3, #1]
 8001b5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			 // DEBUG_PRINT(buf);
			  //memset(buf, 0x0, sizeof(buf));



			 if (osMessagePut(envQueueHandle, (uint32_t)(&envData), osWaitForever) == osOK)
 8001b62:	4b12      	ldr	r3, [pc, #72]	; (8001bac <sensorTask+0xfc>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8001b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f007 fd16 	bl	80095a0 <osMessagePut>
#endif
				//goto OK;
				// osSemaphoreRelease(envSemHandle);
			 }

			  osDelay(1000);
 8001b74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b78:	f007 fb86 	bl	8009288 <osDelay>
 8001b7c:	e7b1      	b.n	8001ae2 <sensorTask+0x32>
		  }
		  else
		  {
			  osDelay(100);
 8001b7e:	2064      	movs	r0, #100	; 0x64
 8001b80:	f007 fb82 	bl	8009288 <osDelay>
		  dht11Start(&dht11Dev);
 8001b84:	e7ad      	b.n	8001ae2 <sensorTask+0x32>
 8001b86:	bf00      	nop
 8001b88:	2000add4 	.word	0x2000add4
 8001b8c:	080259a4 	.word	0x080259a4
 8001b90:	08024de4 	.word	0x08024de4
 8001b94:	08024dfc 	.word	0x08024dfc
 8001b98:	2000aba8 	.word	0x2000aba8
 8001b9c:	2000aba9 	.word	0x2000aba9
 8001ba0:	2000aba1 	.word	0x2000aba1
 8001ba4:	2000aba0 	.word	0x2000aba0
 8001ba8:	2000aba4 	.word	0x2000aba4
 8001bac:	2000acbc 	.word	0x2000acbc

08001bb0 <sensorInit>:
		  osDelay(1);
	  }
}

void sensorInit(osPriority Priority)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	; 0x30
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	80fb      	strh	r3, [r7, #6]
	osSemaphoreDef(sensorHandle);
 8001bba:	2300      	movs	r3, #0
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sensorHandle = osSemaphoreCreate(osSemaphore(sensorHandle), 1);
 8001bc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f007 fbfd 	bl	80093c8 <osSemaphoreCreate>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <sensorInit+0x5c>)
 8001bd2:	6013      	str	r3, [r2, #0]
	osThreadDef(sensorTaskName, sensorTask, Priority, 0, _SENSOR_TASK_SIZE);
 8001bd4:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <sensorInit+0x60>)
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <sensorInit+0x64>)
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	82bb      	strh	r3, [r7, #20]
 8001be0:	2300      	movs	r3, #0
 8001be2:	61bb      	str	r3, [r7, #24]
 8001be4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001be8:	61fb      	str	r3, [r7, #28]
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
 8001bee:	2300      	movs	r3, #0
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
	sensorTaskHandle = osThreadCreate(osThread(sensorTaskName), NULL);
 8001bf2:	f107 030c 	add.w	r3, r7, #12
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f007 faf9 	bl	80091f0 <osThreadCreate>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4a05      	ldr	r2, [pc, #20]	; (8001c18 <sensorInit+0x68>)
 8001c02:	6013      	str	r3, [r2, #0]
}
 8001c04:	bf00      	nop
 8001c06:	3730      	adds	r7, #48	; 0x30
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	2000adc8 	.word	0x2000adc8
 8001c10:	08024e08 	.word	0x08024e08
 8001c14:	08001ab1 	.word	0x08001ab1
 8001c18:	2000add0 	.word	0x2000add0

08001c1c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001c20:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <MX_SPI5_Init+0x64>)
 8001c22:	4a18      	ldr	r2, [pc, #96]	; (8001c84 <MX_SPI5_Init+0x68>)
 8001c24:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001c26:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <MX_SPI5_Init+0x64>)
 8001c28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c2c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001c2e:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <MX_SPI5_Init+0x64>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <MX_SPI5_Init+0x64>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <MX_SPI5_Init+0x64>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <MX_SPI5_Init+0x64>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <MX_SPI5_Init+0x64>)
 8001c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c4c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <MX_SPI5_Init+0x64>)
 8001c50:	2218      	movs	r2, #24
 8001c52:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c54:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <MX_SPI5_Init+0x64>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <MX_SPI5_Init+0x64>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c60:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <MX_SPI5_Init+0x64>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <MX_SPI5_Init+0x64>)
 8001c68:	220a      	movs	r2, #10
 8001c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001c6c:	4804      	ldr	r0, [pc, #16]	; (8001c80 <MX_SPI5_Init+0x64>)
 8001c6e:	f004 ff24 	bl	8006aba <HAL_SPI_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001c78:	f7ff fe82 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	2000ade4 	.word	0x2000ade4
 8001c84:	40015000 	.word	0x40015000

08001c88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	; 0x28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a19      	ldr	r2, [pc, #100]	; (8001d0c <HAL_SPI_MspInit+0x84>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d12c      	bne.n	8001d04 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <HAL_SPI_MspInit+0x88>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	4a17      	ldr	r2, [pc, #92]	; (8001d10 <HAL_SPI_MspInit+0x88>)
 8001cb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <HAL_SPI_MspInit+0x88>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <HAL_SPI_MspInit+0x88>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a10      	ldr	r2, [pc, #64]	; (8001d10 <HAL_SPI_MspInit+0x88>)
 8001cd0:	f043 0320 	orr.w	r3, r3, #32
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <HAL_SPI_MspInit+0x88>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0320 	and.w	r3, r3, #32
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001ce2:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001cf4:	2305      	movs	r3, #5
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4805      	ldr	r0, [pc, #20]	; (8001d14 <HAL_SPI_MspInit+0x8c>)
 8001d00:	f002 f8e6 	bl	8003ed0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001d04:	bf00      	nop
 8001d06:	3728      	adds	r7, #40	; 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40015000 	.word	0x40015000
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40021400 	.word	0x40021400

08001d18 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a08      	ldr	r2, [pc, #32]	; (8001d48 <HAL_SPI_MspDeInit+0x30>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d10a      	bne.n	8001d40 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001d2a:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <HAL_SPI_MspDeInit+0x34>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	4a07      	ldr	r2, [pc, #28]	; (8001d4c <HAL_SPI_MspDeInit+0x34>)
 8001d30:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001d34:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001d36:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001d3a:	4805      	ldr	r0, [pc, #20]	; (8001d50 <HAL_SPI_MspDeInit+0x38>)
 8001d3c:	f002 fa74 	bl	8004228 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40015000 	.word	0x40015000
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40021400 	.word	0x40021400

08001d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_MspInit+0x54>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	4a11      	ldr	r2, [pc, #68]	; (8001da8 <HAL_MspInit+0x54>)
 8001d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d68:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6a:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <HAL_MspInit+0x54>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d72:	607b      	str	r3, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	603b      	str	r3, [r7, #0]
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_MspInit+0x54>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <HAL_MspInit+0x54>)
 8001d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d84:	6413      	str	r3, [r2, #64]	; 0x40
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <HAL_MspInit+0x54>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d92:	2200      	movs	r2, #0
 8001d94:	210f      	movs	r1, #15
 8001d96:	f06f 0001 	mvn.w	r0, #1
 8001d9a:	f001 fdd5 	bl	8003948 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40023800 	.word	0x40023800

08001dac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08c      	sub	sp, #48	; 0x30
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	2036      	movs	r0, #54	; 0x36
 8001dc2:	f001 fdc1 	bl	8003948 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001dc6:	2036      	movs	r0, #54	; 0x36
 8001dc8:	f001 fdda 	bl	8003980 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	4b1f      	ldr	r3, [pc, #124]	; (8001e50 <HAL_InitTick+0xa4>)
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	4a1e      	ldr	r2, [pc, #120]	; (8001e50 <HAL_InitTick+0xa4>)
 8001dd6:	f043 0310 	orr.w	r3, r3, #16
 8001dda:	6413      	str	r3, [r2, #64]	; 0x40
 8001ddc:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <HAL_InitTick+0xa4>)
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	f003 0310 	and.w	r3, r3, #16
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001de8:	f107 0210 	add.w	r2, r7, #16
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	4611      	mov	r1, r2
 8001df2:	4618      	mov	r0, r3
 8001df4:	f004 fbf2 	bl	80065dc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001df8:	f004 fbc8 	bl	800658c <HAL_RCC_GetPCLK1Freq>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e04:	4a13      	ldr	r2, [pc, #76]	; (8001e54 <HAL_InitTick+0xa8>)
 8001e06:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0a:	0c9b      	lsrs	r3, r3, #18
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <HAL_InitTick+0xac>)
 8001e12:	4a12      	ldr	r2, [pc, #72]	; (8001e5c <HAL_InitTick+0xb0>)
 8001e14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <HAL_InitTick+0xac>)
 8001e18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e1c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001e1e:	4a0e      	ldr	r2, [pc, #56]	; (8001e58 <HAL_InitTick+0xac>)
 8001e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e22:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <HAL_InitTick+0xac>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_InitTick+0xac>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001e30:	4809      	ldr	r0, [pc, #36]	; (8001e58 <HAL_InitTick+0xac>)
 8001e32:	f005 fc21 	bl	8007678 <HAL_TIM_Base_Init>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d104      	bne.n	8001e46 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001e3c:	4806      	ldr	r0, [pc, #24]	; (8001e58 <HAL_InitTick+0xac>)
 8001e3e:	f005 fc6b 	bl	8007718 <HAL_TIM_Base_Start_IT>
 8001e42:	4603      	mov	r3, r0
 8001e44:	e000      	b.n	8001e48 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3730      	adds	r7, #48	; 0x30
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40023800 	.word	0x40023800
 8001e54:	431bde83 	.word	0x431bde83
 8001e58:	2000ae3c 	.word	0x2000ae3c
 8001e5c:	40001000 	.word	0x40001000

08001e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <NMI_Handler+0x4>

08001e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6a:	e7fe      	b.n	8001e6a <HardFault_Handler+0x4>

08001e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <MemManage_Handler+0x4>

08001e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e76:	e7fe      	b.n	8001e76 <BusFault_Handler+0x4>

08001e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <UsageFault_Handler+0x4>

08001e7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001e90:	4802      	ldr	r0, [pc, #8]	; (8001e9c <UART5_IRQHandler+0x10>)
 8001e92:	f006 f983 	bl	800819c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	2000af10 	.word	0x2000af10

08001ea0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ea4:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <TIM6_DAC_IRQHandler+0x10>)
 8001ea6:	f005 fca7 	bl	80077f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	2000ae3c 	.word	0x2000ae3c

08001eb4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001eb8:	4802      	ldr	r0, [pc, #8]	; (8001ec4 <LTDC_IRQHandler+0x10>)
 8001eba:	f003 fc55 	bl	8005768 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	2000ad20 	.word	0x2000ad20

08001ec8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001ecc:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <DMA2D_IRQHandler+0x10>)
 8001ece:	f001 fe5c 	bl	8003b8a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	2000abac 	.word	0x2000abac

08001edc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
	return 1;
 8001ee0:	2301      	movs	r3, #1
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <_kill>:

int _kill(int pid, int sig)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ef6:	f021 fc5b 	bl	80237b0 <__errno>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2216      	movs	r2, #22
 8001efe:	601a      	str	r2, [r3, #0]
	return -1;
 8001f00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <_exit>:

void _exit (int status)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f14:	f04f 31ff 	mov.w	r1, #4294967295
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff ffe7 	bl	8001eec <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f1e:	e7fe      	b.n	8001f1e <_exit+0x12>

08001f20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	e00a      	b.n	8001f48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f32:	f3af 8000 	nop.w
 8001f36:	4601      	mov	r1, r0
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	60ba      	str	r2, [r7, #8]
 8001f3e:	b2ca      	uxtb	r2, r1
 8001f40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	3301      	adds	r3, #1
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	dbf0      	blt.n	8001f32 <_read+0x12>
	}

return len;
 8001f50:	687b      	ldr	r3, [r7, #4]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b086      	sub	sp, #24
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	60f8      	str	r0, [r7, #12]
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	e009      	b.n	8001f80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	60ba      	str	r2, [r7, #8]
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	dbf1      	blt.n	8001f6c <_write+0x12>
	}
	return len;
 8001f88:	687b      	ldr	r3, [r7, #4]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <_close>:

int _close(int file)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
	return -1;
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fba:	605a      	str	r2, [r3, #4]
	return 0;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <_isatty>:

int _isatty(int file)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
	return 1;
 8001fd2:	2301      	movs	r3, #1
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
	return 0;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002004:	4a14      	ldr	r2, [pc, #80]	; (8002058 <_sbrk+0x5c>)
 8002006:	4b15      	ldr	r3, [pc, #84]	; (800205c <_sbrk+0x60>)
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002010:	4b13      	ldr	r3, [pc, #76]	; (8002060 <_sbrk+0x64>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d102      	bne.n	800201e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <_sbrk+0x64>)
 800201a:	4a12      	ldr	r2, [pc, #72]	; (8002064 <_sbrk+0x68>)
 800201c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <_sbrk+0x64>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	429a      	cmp	r2, r3
 800202a:	d207      	bcs.n	800203c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800202c:	f021 fbc0 	bl	80237b0 <__errno>
 8002030:	4603      	mov	r3, r0
 8002032:	220c      	movs	r2, #12
 8002034:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
 800203a:	e009      	b.n	8002050 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <_sbrk+0x64>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002042:	4b07      	ldr	r3, [pc, #28]	; (8002060 <_sbrk+0x64>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	4a05      	ldr	r2, [pc, #20]	; (8002060 <_sbrk+0x64>)
 800204c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800204e:	68fb      	ldr	r3, [r7, #12]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20030000 	.word	0x20030000
 800205c:	00000400 	.word	0x00000400
 8002060:	200003d8 	.word	0x200003d8
 8002064:	2000afc0 	.word	0x2000afc0

08002068 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <SystemInit+0x20>)
 800206e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002072:	4a05      	ldr	r2, [pc, #20]	; (8002088 <SystemInit+0x20>)
 8002074:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002078:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <tftLcdInit>:
extern void TouchGFX_Task(void const * argument);

static LCD_DrvTypeDef* LcdDrv;

void tftLcdInit(osPriority	Priority)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08c      	sub	sp, #48	; 0x30
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	80fb      	strh	r3, [r7, #6]
	LcdDrv = &ili9341_drv;
 8002096:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <tftLcdInit+0x74>)
 8002098:	4a1a      	ldr	r2, [pc, #104]	; (8002104 <tftLcdInit+0x78>)
 800209a:	601a      	str	r2, [r3, #0]
	LcdDrv->Init();
 800209c:	4b18      	ldr	r3, [pc, #96]	; (8002100 <tftLcdInit+0x74>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4798      	blx	r3
	LcdDrv->DisplayOff();
 80020a4:	4b16      	ldr	r3, [pc, #88]	; (8002100 <tftLcdInit+0x74>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	4798      	blx	r3

	osSemaphoreDef(lcdHandle);
 80020ac:	2300      	movs	r3, #0
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80020b0:	2300      	movs	r3, #0
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	lcdHandle = osSemaphoreCreate(osSemaphore(lcdHandle), 1);
 80020b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020b8:	2101      	movs	r1, #1
 80020ba:	4618      	mov	r0, r3
 80020bc:	f007 f984 	bl	80093c8 <osSemaphoreCreate>
 80020c0:	4603      	mov	r3, r0
 80020c2:	4a11      	ldr	r2, [pc, #68]	; (8002108 <tftLcdInit+0x7c>)
 80020c4:	6013      	str	r3, [r2, #0]
	osThreadDef(lcdTaskName, TouchGFX_Task, Priority, 0, _LCD_TASK_SIZE);
 80020c6:	4b11      	ldr	r3, [pc, #68]	; (800210c <tftLcdInit+0x80>)
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	4b11      	ldr	r3, [pc, #68]	; (8002110 <tftLcdInit+0x84>)
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	88fb      	ldrh	r3, [r7, #6]
 80020d0:	82bb      	strh	r3, [r7, #20]
 80020d2:	2300      	movs	r3, #0
 80020d4:	61bb      	str	r3, [r7, #24]
 80020d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020da:	61fb      	str	r3, [r7, #28]
 80020dc:	2300      	movs	r3, #0
 80020de:	623b      	str	r3, [r7, #32]
 80020e0:	2300      	movs	r3, #0
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
	lcdTaskHandle = osThreadCreate(osThread(lcdTaskName), NULL);
 80020e4:	f107 030c 	add.w	r3, r7, #12
 80020e8:	2100      	movs	r1, #0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f007 f880 	bl	80091f0 <osThreadCreate>
 80020f0:	4603      	mov	r3, r0
 80020f2:	4a08      	ldr	r2, [pc, #32]	; (8002114 <tftLcdInit+0x88>)
 80020f4:	6013      	str	r3, [r2, #0]
}
 80020f6:	bf00      	nop
 80020f8:	3730      	adds	r7, #48	; 0x30
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	200003dc 	.word	0x200003dc
 8002104:	20000008 	.word	0x20000008
 8002108:	2000ade0 	.word	0x2000ade0
 800210c:	08024e18 	.word	0x08024e18
 8002110:	0800c3b1 	.word	0x0800c3b1
 8002114:	2000adcc 	.word	0x2000adcc

08002118 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800211e:	f107 0308 	add.w	r3, r7, #8
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	609a      	str	r2, [r3, #8]
 800212a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800212c:	463b      	mov	r3, r7
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002134:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <MX_TIM1_Init+0x98>)
 8002136:	4a1f      	ldr	r2, [pc, #124]	; (80021b4 <MX_TIM1_Init+0x9c>)
 8002138:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800213a:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <MX_TIM1_Init+0x98>)
 800213c:	2200      	movs	r2, #0
 800213e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002140:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <MX_TIM1_Init+0x98>)
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002146:	4b1a      	ldr	r3, [pc, #104]	; (80021b0 <MX_TIM1_Init+0x98>)
 8002148:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800214c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800214e:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <MX_TIM1_Init+0x98>)
 8002150:	2200      	movs	r2, #0
 8002152:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002154:	4b16      	ldr	r3, [pc, #88]	; (80021b0 <MX_TIM1_Init+0x98>)
 8002156:	2200      	movs	r2, #0
 8002158:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <MX_TIM1_Init+0x98>)
 800215c:	2200      	movs	r2, #0
 800215e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002160:	4813      	ldr	r0, [pc, #76]	; (80021b0 <MX_TIM1_Init+0x98>)
 8002162:	f005 fa89 	bl	8007678 <HAL_TIM_Base_Init>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800216c:	f7ff fc08 	bl	8001980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002174:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002176:	f107 0308 	add.w	r3, r7, #8
 800217a:	4619      	mov	r1, r3
 800217c:	480c      	ldr	r0, [pc, #48]	; (80021b0 <MX_TIM1_Init+0x98>)
 800217e:	f005 fc43 	bl	8007a08 <HAL_TIM_ConfigClockSource>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002188:	f7ff fbfa 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800218c:	2300      	movs	r3, #0
 800218e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002190:	2300      	movs	r3, #0
 8002192:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002194:	463b      	mov	r3, r7
 8002196:	4619      	mov	r1, r3
 8002198:	4805      	ldr	r0, [pc, #20]	; (80021b0 <MX_TIM1_Init+0x98>)
 800219a:	f005 fe5f 	bl	8007e5c <HAL_TIMEx_MasterConfigSynchronization>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80021a4:	f7ff fbec 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80021a8:	bf00      	nop
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	2000ae84 	.word	0x2000ae84
 80021b4:	40010000 	.word	0x40010000

080021b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a0b      	ldr	r2, [pc, #44]	; (80021f4 <HAL_TIM_Base_MspInit+0x3c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d10d      	bne.n	80021e6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <HAL_TIM_Base_MspInit+0x40>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	4a09      	ldr	r2, [pc, #36]	; (80021f8 <HAL_TIM_Base_MspInit+0x40>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6453      	str	r3, [r2, #68]	; 0x44
 80021da:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <HAL_TIM_Base_MspInit+0x40>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80021e6:	bf00      	nop
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40010000 	.word	0x40010000
 80021f8:	40023800 	.word	0x40023800

080021fc <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <MX_UART5_Init+0x4c>)
 8002202:	4a12      	ldr	r2, [pc, #72]	; (800224c <MX_UART5_Init+0x50>)
 8002204:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <MX_UART5_Init+0x4c>)
 8002208:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800220c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <MX_UART5_Init+0x4c>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <MX_UART5_Init+0x4c>)
 8002216:	2200      	movs	r2, #0
 8002218:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800221a:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <MX_UART5_Init+0x4c>)
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002220:	4b09      	ldr	r3, [pc, #36]	; (8002248 <MX_UART5_Init+0x4c>)
 8002222:	220c      	movs	r2, #12
 8002224:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002226:	4b08      	ldr	r3, [pc, #32]	; (8002248 <MX_UART5_Init+0x4c>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800222c:	4b06      	ldr	r3, [pc, #24]	; (8002248 <MX_UART5_Init+0x4c>)
 800222e:	2200      	movs	r2, #0
 8002230:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002232:	4805      	ldr	r0, [pc, #20]	; (8002248 <MX_UART5_Init+0x4c>)
 8002234:	f005 fea2 	bl	8007f7c <HAL_UART_Init>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800223e:	f7ff fb9f 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	2000af10 	.word	0x2000af10
 800224c:	40005000 	.word	0x40005000

08002250 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002254:	4b11      	ldr	r3, [pc, #68]	; (800229c <MX_USART1_UART_Init+0x4c>)
 8002256:	4a12      	ldr	r2, [pc, #72]	; (80022a0 <MX_USART1_UART_Init+0x50>)
 8002258:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800225a:	4b10      	ldr	r3, [pc, #64]	; (800229c <MX_USART1_UART_Init+0x4c>)
 800225c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002260:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <MX_USART1_UART_Init+0x4c>)
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <MX_USART1_UART_Init+0x4c>)
 800226a:	2200      	movs	r2, #0
 800226c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800226e:	4b0b      	ldr	r3, [pc, #44]	; (800229c <MX_USART1_UART_Init+0x4c>)
 8002270:	2200      	movs	r2, #0
 8002272:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002274:	4b09      	ldr	r3, [pc, #36]	; (800229c <MX_USART1_UART_Init+0x4c>)
 8002276:	220c      	movs	r2, #12
 8002278:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800227a:	4b08      	ldr	r3, [pc, #32]	; (800229c <MX_USART1_UART_Init+0x4c>)
 800227c:	2200      	movs	r2, #0
 800227e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <MX_USART1_UART_Init+0x4c>)
 8002282:	2200      	movs	r2, #0
 8002284:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002286:	4805      	ldr	r0, [pc, #20]	; (800229c <MX_USART1_UART_Init+0x4c>)
 8002288:	f005 fe78 	bl	8007f7c <HAL_UART_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002292:	f7ff fb75 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	2000aecc 	.word	0x2000aecc
 80022a0:	40011000 	.word	0x40011000

080022a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08c      	sub	sp, #48	; 0x30
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 031c 	add.w	r3, r7, #28
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a46      	ldr	r2, [pc, #280]	; (80023dc <HAL_UART_MspInit+0x138>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d153      	bne.n	800236e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	61bb      	str	r3, [r7, #24]
 80022ca:	4b45      	ldr	r3, [pc, #276]	; (80023e0 <HAL_UART_MspInit+0x13c>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	4a44      	ldr	r2, [pc, #272]	; (80023e0 <HAL_UART_MspInit+0x13c>)
 80022d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022d4:	6413      	str	r3, [r2, #64]	; 0x40
 80022d6:	4b42      	ldr	r3, [pc, #264]	; (80023e0 <HAL_UART_MspInit+0x13c>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022de:	61bb      	str	r3, [r7, #24]
 80022e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	4b3e      	ldr	r3, [pc, #248]	; (80023e0 <HAL_UART_MspInit+0x13c>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a3d      	ldr	r2, [pc, #244]	; (80023e0 <HAL_UART_MspInit+0x13c>)
 80022ec:	f043 0304 	orr.w	r3, r3, #4
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b3b      	ldr	r3, [pc, #236]	; (80023e0 <HAL_UART_MspInit+0x13c>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	4b37      	ldr	r3, [pc, #220]	; (80023e0 <HAL_UART_MspInit+0x13c>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a36      	ldr	r2, [pc, #216]	; (80023e0 <HAL_UART_MspInit+0x13c>)
 8002308:	f043 0308 	orr.w	r3, r3, #8
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b34      	ldr	r3, [pc, #208]	; (80023e0 <HAL_UART_MspInit+0x13c>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800231a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800231e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002320:	2302      	movs	r3, #2
 8002322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002324:	2301      	movs	r3, #1
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002328:	2303      	movs	r3, #3
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800232c:	2308      	movs	r3, #8
 800232e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002330:	f107 031c 	add.w	r3, r7, #28
 8002334:	4619      	mov	r1, r3
 8002336:	482b      	ldr	r0, [pc, #172]	; (80023e4 <HAL_UART_MspInit+0x140>)
 8002338:	f001 fdca 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800233c:	2304      	movs	r3, #4
 800233e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002340:	2302      	movs	r3, #2
 8002342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002344:	2301      	movs	r3, #1
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002348:	2303      	movs	r3, #3
 800234a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800234c:	2308      	movs	r3, #8
 800234e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002350:	f107 031c 	add.w	r3, r7, #28
 8002354:	4619      	mov	r1, r3
 8002356:	4824      	ldr	r0, [pc, #144]	; (80023e8 <HAL_UART_MspInit+0x144>)
 8002358:	f001 fdba 	bl	8003ed0 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800235c:	2200      	movs	r2, #0
 800235e:	2105      	movs	r1, #5
 8002360:	2035      	movs	r0, #53	; 0x35
 8002362:	f001 faf1 	bl	8003948 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002366:	2035      	movs	r0, #53	; 0x35
 8002368:	f001 fb0a 	bl	8003980 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800236c:	e031      	b.n	80023d2 <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a1e      	ldr	r2, [pc, #120]	; (80023ec <HAL_UART_MspInit+0x148>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d12c      	bne.n	80023d2 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002378:	2300      	movs	r3, #0
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <HAL_UART_MspInit+0x13c>)
 800237e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002380:	4a17      	ldr	r2, [pc, #92]	; (80023e0 <HAL_UART_MspInit+0x13c>)
 8002382:	f043 0310 	orr.w	r3, r3, #16
 8002386:	6453      	str	r3, [r2, #68]	; 0x44
 8002388:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <HAL_UART_MspInit+0x13c>)
 800238a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238c:	f003 0310 	and.w	r3, r3, #16
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002394:	2300      	movs	r3, #0
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <HAL_UART_MspInit+0x13c>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	4a10      	ldr	r2, [pc, #64]	; (80023e0 <HAL_UART_MspInit+0x13c>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	6313      	str	r3, [r2, #48]	; 0x30
 80023a4:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <HAL_UART_MspInit+0x13c>)
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80023b0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b6:	2302      	movs	r3, #2
 80023b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023be:	2303      	movs	r3, #3
 80023c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023c2:	2307      	movs	r3, #7
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c6:	f107 031c 	add.w	r3, r7, #28
 80023ca:	4619      	mov	r1, r3
 80023cc:	4808      	ldr	r0, [pc, #32]	; (80023f0 <HAL_UART_MspInit+0x14c>)
 80023ce:	f001 fd7f 	bl	8003ed0 <HAL_GPIO_Init>
}
 80023d2:	bf00      	nop
 80023d4:	3730      	adds	r7, #48	; 0x30
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40005000 	.word	0x40005000
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40020800 	.word	0x40020800
 80023e8:	40020c00 	.word	0x40020c00
 80023ec:	40011000 	.word	0x40011000
 80023f0:	40020000 	.word	0x40020000

080023f4 <_debugPrint>:
#include "util.h"

char debugBuff[MAX_DEBUG_BUFF] = {0,};

void _debugPrint(char *debugMsg, char *file, const char *func, int line)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08a      	sub	sp, #40	; 0x28
 80023f8:	af04      	add	r7, sp, #16
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
 8002400:	603b      	str	r3, [r7, #0]
	int n;

	n = snprintf(debugBuff, MAX_DEBUG_BUFF,
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	9302      	str	r3, [sp, #8]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	9301      	str	r3, [sp, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	4a12      	ldr	r2, [pc, #72]	; (800245c <_debugPrint+0x68>)
 8002412:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002416:	4812      	ldr	r0, [pc, #72]	; (8002460 <_debugPrint+0x6c>)
 8002418:	f021 fe32 	bl	8024080 <sniprintf>
 800241c:	6178      	str	r0, [r7, #20]
				"File : %s \r\nFunction : %s \r\nLine : %d \r\nDebug : %s\r\n\r\n", file, func, line, debugMsg);
	if ( n < 0 || n >= MAX_DEBUG_BUFF )
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2b00      	cmp	r3, #0
 8002422:	db03      	blt.n	800242c <_debugPrint+0x38>
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800242a:	db06      	blt.n	800243a <_debugPrint+0x46>

	{
		HAL_UART_Transmit(&DEBUG_UART, (uint8_t *)"debugPrint Error!!!\r\n", strlen("debugPrint Error!!!r\n"), 100);
 800242c:	2364      	movs	r3, #100	; 0x64
 800242e:	2215      	movs	r2, #21
 8002430:	490c      	ldr	r1, [pc, #48]	; (8002464 <_debugPrint+0x70>)
 8002432:	480d      	ldr	r0, [pc, #52]	; (8002468 <_debugPrint+0x74>)
 8002434:	f005 fdef 	bl	8008016 <HAL_UART_Transmit>
 8002438:	e006      	b.n	8002448 <_debugPrint+0x54>
	}
	else
	{
		HAL_UART_Transmit(&DEBUG_UART, (uint8_t *)debugBuff, n, 100);
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	b29a      	uxth	r2, r3
 800243e:	2364      	movs	r3, #100	; 0x64
 8002440:	4907      	ldr	r1, [pc, #28]	; (8002460 <_debugPrint+0x6c>)
 8002442:	4809      	ldr	r0, [pc, #36]	; (8002468 <_debugPrint+0x74>)
 8002444:	f005 fde7 	bl	8008016 <HAL_UART_Transmit>
	}
	memset(debugBuff, 0x0, MAX_DEBUG_BUFF);
 8002448:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800244c:	2100      	movs	r1, #0
 800244e:	4804      	ldr	r0, [pc, #16]	; (8002460 <_debugPrint+0x6c>)
 8002450:	f021 fa22 	bl	8023898 <memset>
}
 8002454:	bf00      	nop
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	08024e24 	.word	0x08024e24
 8002460:	200003e0 	.word	0x200003e0
 8002464:	08024e5c 	.word	0x08024e5c
 8002468:	2000aecc 	.word	0x2000aecc

0800246c <_workTask>:
//lwrb_t ringBuff;
extern int e_flag;


void _workTask(void const * argument)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08e      	sub	sp, #56	; 0x38
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	char buf;
	int cnt;
	char debug[32] = {0,};
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	f107 0310 	add.w	r3, r7, #16
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
 8002488:	615a      	str	r2, [r3, #20]
 800248a:	619a      	str	r2, [r3, #24]

	ring_buffer_init(&ring_buffer);
 800248c:	4826      	ldr	r0, [pc, #152]	; (8002528 <_workTask+0xbc>)
 800248e:	f7ff faaa 	bl	80019e6 <ring_buffer_init>

	DEBUG_PRINT("_workTask... init !!!!");
 8002492:	2319      	movs	r3, #25
 8002494:	4a25      	ldr	r2, [pc, #148]	; (800252c <_workTask+0xc0>)
 8002496:	4926      	ldr	r1, [pc, #152]	; (8002530 <_workTask+0xc4>)
 8002498:	4826      	ldr	r0, [pc, #152]	; (8002534 <_workTask+0xc8>)
 800249a:	f7ff ffab 	bl	80023f4 <_debugPrint>
	osDelay(10);
 800249e:	200a      	movs	r0, #10
 80024a0:	f006 fef2 	bl	8009288 <osDelay>

	for (;;)
	{
		for(cnt = 0; ring_buffer_dequeue(&ring_buffer, &buf) > 0; cnt++)
 80024a4:	2300      	movs	r3, #0
 80024a6:	637b      	str	r3, [r7, #52]	; 0x34
 80024a8:	e030      	b.n	800250c <_workTask+0xa0>
		{
			/* Do something with buf... */
			int32_t evn=0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	633b      	str	r3, [r7, #48]	; 0x30

			evn = (int32_t)buf;
 80024ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024b2:	633b      	str	r3, [r7, #48]	; 0x30
			snprintf(debug, sizeof(debug), "dev:[%lu]\r\n", evn);
 80024b4:	f107 000c 	add.w	r0, r7, #12
 80024b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ba:	4a1f      	ldr	r2, [pc, #124]	; (8002538 <_workTask+0xcc>)
 80024bc:	2120      	movs	r1, #32
 80024be:	f021 fddf 	bl	8024080 <sniprintf>
 80024c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	bf8c      	ite	hi
 80024c8:	2201      	movhi	r2, #1
 80024ca:	2200      	movls	r2, #0
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	2a00      	cmp	r2, #0
 80024d0:	d118      	bne.n	8002504 <_workTask+0x98>
 80024d2:	2201      	movs	r2, #1
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	f403 738b 	and.w	r3, r3, #278	; 0x116
 80024dc:	2b00      	cmp	r3, #0
 80024de:	bf14      	ite	ne
 80024e0:	2301      	movne	r3, #1
 80024e2:	2300      	moveq	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00c      	beq.n	8002504 <_workTask+0x98>
			{
				case BUZZER_ON:
				case BUZZER_OFF:
				case HUM_ON:
				case HUM_OFF:
					HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 80024ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024ee:	4813      	ldr	r0, [pc, #76]	; (800253c <_workTask+0xd0>)
 80024f0:	f001 ffd7 	bl	80044a2 <HAL_GPIO_TogglePin>
					DEBUG_PRINT(debug);
 80024f4:	f107 000c 	add.w	r0, r7, #12
 80024f8:	232d      	movs	r3, #45	; 0x2d
 80024fa:	4a0c      	ldr	r2, [pc, #48]	; (800252c <_workTask+0xc0>)
 80024fc:	490c      	ldr	r1, [pc, #48]	; (8002530 <_workTask+0xc4>)
 80024fe:	f7ff ff79 	bl	80023f4 <_debugPrint>
					break;
 8002502:	e000      	b.n	8002506 <_workTask+0x9a>

				default:
					break;
 8002504:	bf00      	nop
		for(cnt = 0; ring_buffer_dequeue(&ring_buffer, &buf) > 0; cnt++)
 8002506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002508:	3301      	adds	r3, #1
 800250a:	637b      	str	r3, [r7, #52]	; 0x34
 800250c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8002510:	4619      	mov	r1, r3
 8002512:	4805      	ldr	r0, [pc, #20]	; (8002528 <_workTask+0xbc>)
 8002514:	f7ff faa6 	bl	8001a64 <ring_buffer_dequeue>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1c5      	bne.n	80024aa <_workTask+0x3e>
			}
		}
	    osDelay(1);
 800251e:	2001      	movs	r0, #1
 8002520:	f006 feb2 	bl	8009288 <osDelay>
		for(cnt = 0; ring_buffer_dequeue(&ring_buffer, &buf) > 0; cnt++)
 8002524:	e7be      	b.n	80024a4 <_workTask+0x38>
 8002526:	bf00      	nop
 8002528:	2000ac30 	.word	0x2000ac30
 800252c:	080259c8 	.word	0x080259c8
 8002530:	08024e74 	.word	0x08024e74
 8002534:	08024e8c 	.word	0x08024e8c
 8002538:	08024ea4 	.word	0x08024ea4
 800253c:	40021800 	.word	0x40021800

08002540 <workTaskInit>:
	}
}

void workTaskInit(osPriority Priority)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08c      	sub	sp, #48	; 0x30
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	80fb      	strh	r3, [r7, #6]
	osSemaphoreDef(workHandle);
 800254a:	2300      	movs	r3, #0
 800254c:	62bb      	str	r3, [r7, #40]	; 0x28
 800254e:	2300      	movs	r3, #0
 8002550:	62fb      	str	r3, [r7, #44]	; 0x2c
	workHandle = osSemaphoreCreate(osSemaphore(workHandle), 1);
 8002552:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002556:	2101      	movs	r1, #1
 8002558:	4618      	mov	r0, r3
 800255a:	f006 ff35 	bl	80093c8 <osSemaphoreCreate>
 800255e:	4603      	mov	r3, r0
 8002560:	4a0e      	ldr	r2, [pc, #56]	; (800259c <workTaskInit+0x5c>)
 8002562:	6013      	str	r3, [r2, #0]
	osThreadDef(workTaskName, _workTask, Priority, 0, _WORK_TASK_SIZE);
 8002564:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <workTaskInit+0x60>)
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <workTaskInit+0x64>)
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	88fb      	ldrh	r3, [r7, #6]
 800256e:	82bb      	strh	r3, [r7, #20]
 8002570:	2300      	movs	r3, #0
 8002572:	61bb      	str	r3, [r7, #24]
 8002574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002578:	61fb      	str	r3, [r7, #28]
 800257a:	2300      	movs	r3, #0
 800257c:	623b      	str	r3, [r7, #32]
 800257e:	2300      	movs	r3, #0
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
	workTaskHandle = osThreadCreate(osThread(workTaskName), NULL);
 8002582:	f107 030c 	add.w	r3, r7, #12
 8002586:	2100      	movs	r1, #0
 8002588:	4618      	mov	r0, r3
 800258a:	f006 fe31 	bl	80091f0 <osThreadCreate>
 800258e:	4603      	mov	r3, r0
 8002590:	4a05      	ldr	r2, [pc, #20]	; (80025a8 <workTaskInit+0x68>)
 8002592:	6013      	str	r3, [r2, #0]
}
 8002594:	bf00      	nop
 8002596:	3730      	adds	r7, #48	; 0x30
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	2000ac28 	.word	0x2000ac28
 80025a0:	08024eb0 	.word	0x08024eb0
 80025a4:	0800246d 	.word	0x0800246d
 80025a8:	2000acc4 	.word	0x2000acc4

080025ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80025ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025e4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025b0:	480d      	ldr	r0, [pc, #52]	; (80025e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025b2:	490e      	ldr	r1, [pc, #56]	; (80025ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025b4:	4a0e      	ldr	r2, [pc, #56]	; (80025f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b8:	e002      	b.n	80025c0 <LoopCopyDataInit>

080025ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025be:	3304      	adds	r3, #4

080025c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c4:	d3f9      	bcc.n	80025ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025c6:	4a0b      	ldr	r2, [pc, #44]	; (80025f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025c8:	4c0b      	ldr	r4, [pc, #44]	; (80025f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025cc:	e001      	b.n	80025d2 <LoopFillZerobss>

080025ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025d0:	3204      	adds	r2, #4

080025d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d4:	d3fb      	bcc.n	80025ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025d6:	f7ff fd47 	bl	8002068 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025da:	f021 f901 	bl	80237e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025de:	f7ff f90b 	bl	80017f8 <main>
  bx  lr    
 80025e2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80025e4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80025e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025ec:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 80025f0:	08061ad8 	.word	0x08061ad8
  ldr r2, =_sbss
 80025f4:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 80025f8:	2000afbc 	.word	0x2000afbc

080025fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025fc:	e7fe      	b.n	80025fc <ADC_IRQHandler>

080025fe <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002602:	f000 fe49 	bl	8003298 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8002606:	20ca      	movs	r0, #202	; 0xca
 8002608:	f000 f95d 	bl	80028c6 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 800260c:	20c3      	movs	r0, #195	; 0xc3
 800260e:	f000 f967 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8002612:	2008      	movs	r0, #8
 8002614:	f000 f964 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002618:	2050      	movs	r0, #80	; 0x50
 800261a:	f000 f961 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800261e:	20cf      	movs	r0, #207	; 0xcf
 8002620:	f000 f951 	bl	80028c6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002624:	2000      	movs	r0, #0
 8002626:	f000 f95b 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800262a:	20c1      	movs	r0, #193	; 0xc1
 800262c:	f000 f958 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002630:	2030      	movs	r0, #48	; 0x30
 8002632:	f000 f955 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8002636:	20ed      	movs	r0, #237	; 0xed
 8002638:	f000 f945 	bl	80028c6 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 800263c:	2064      	movs	r0, #100	; 0x64
 800263e:	f000 f94f 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8002642:	2003      	movs	r0, #3
 8002644:	f000 f94c 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002648:	2012      	movs	r0, #18
 800264a:	f000 f949 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800264e:	2081      	movs	r0, #129	; 0x81
 8002650:	f000 f946 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8002654:	20e8      	movs	r0, #232	; 0xe8
 8002656:	f000 f936 	bl	80028c6 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800265a:	2085      	movs	r0, #133	; 0x85
 800265c:	f000 f940 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002660:	2000      	movs	r0, #0
 8002662:	f000 f93d 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002666:	2078      	movs	r0, #120	; 0x78
 8002668:	f000 f93a 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 800266c:	20cb      	movs	r0, #203	; 0xcb
 800266e:	f000 f92a 	bl	80028c6 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002672:	2039      	movs	r0, #57	; 0x39
 8002674:	f000 f934 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002678:	202c      	movs	r0, #44	; 0x2c
 800267a:	f000 f931 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800267e:	2000      	movs	r0, #0
 8002680:	f000 f92e 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002684:	2034      	movs	r0, #52	; 0x34
 8002686:	f000 f92b 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800268a:	2002      	movs	r0, #2
 800268c:	f000 f928 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002690:	20f7      	movs	r0, #247	; 0xf7
 8002692:	f000 f918 	bl	80028c6 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8002696:	2020      	movs	r0, #32
 8002698:	f000 f922 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 800269c:	20ea      	movs	r0, #234	; 0xea
 800269e:	f000 f912 	bl	80028c6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80026a2:	2000      	movs	r0, #0
 80026a4:	f000 f91c 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80026a8:	2000      	movs	r0, #0
 80026aa:	f000 f919 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80026ae:	20b1      	movs	r0, #177	; 0xb1
 80026b0:	f000 f909 	bl	80028c6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80026b4:	2000      	movs	r0, #0
 80026b6:	f000 f913 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80026ba:	201b      	movs	r0, #27
 80026bc:	f000 f910 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80026c0:	20b6      	movs	r0, #182	; 0xb6
 80026c2:	f000 f900 	bl	80028c6 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80026c6:	200a      	movs	r0, #10
 80026c8:	f000 f90a 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80026cc:	20a2      	movs	r0, #162	; 0xa2
 80026ce:	f000 f907 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80026d2:	20c0      	movs	r0, #192	; 0xc0
 80026d4:	f000 f8f7 	bl	80028c6 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80026d8:	2010      	movs	r0, #16
 80026da:	f000 f901 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80026de:	20c1      	movs	r0, #193	; 0xc1
 80026e0:	f000 f8f1 	bl	80028c6 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80026e4:	2010      	movs	r0, #16
 80026e6:	f000 f8fb 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80026ea:	20c5      	movs	r0, #197	; 0xc5
 80026ec:	f000 f8eb 	bl	80028c6 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80026f0:	2045      	movs	r0, #69	; 0x45
 80026f2:	f000 f8f5 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80026f6:	2015      	movs	r0, #21
 80026f8:	f000 f8f2 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80026fc:	20c7      	movs	r0, #199	; 0xc7
 80026fe:	f000 f8e2 	bl	80028c6 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002702:	2090      	movs	r0, #144	; 0x90
 8002704:	f000 f8ec 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002708:	2036      	movs	r0, #54	; 0x36
 800270a:	f000 f8dc 	bl	80028c6 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800270e:	20c8      	movs	r0, #200	; 0xc8
 8002710:	f000 f8e6 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002714:	20f2      	movs	r0, #242	; 0xf2
 8002716:	f000 f8d6 	bl	80028c6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800271a:	2000      	movs	r0, #0
 800271c:	f000 f8e0 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002720:	20b0      	movs	r0, #176	; 0xb0
 8002722:	f000 f8d0 	bl	80028c6 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8002726:	20c2      	movs	r0, #194	; 0xc2
 8002728:	f000 f8da 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800272c:	20b6      	movs	r0, #182	; 0xb6
 800272e:	f000 f8ca 	bl	80028c6 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002732:	200a      	movs	r0, #10
 8002734:	f000 f8d4 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002738:	20a7      	movs	r0, #167	; 0xa7
 800273a:	f000 f8d1 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800273e:	2027      	movs	r0, #39	; 0x27
 8002740:	f000 f8ce 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002744:	2004      	movs	r0, #4
 8002746:	f000 f8cb 	bl	80028e0 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800274a:	202a      	movs	r0, #42	; 0x2a
 800274c:	f000 f8bb 	bl	80028c6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002750:	2000      	movs	r0, #0
 8002752:	f000 f8c5 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002756:	2000      	movs	r0, #0
 8002758:	f000 f8c2 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800275c:	2000      	movs	r0, #0
 800275e:	f000 f8bf 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002762:	20ef      	movs	r0, #239	; 0xef
 8002764:	f000 f8bc 	bl	80028e0 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002768:	202b      	movs	r0, #43	; 0x2b
 800276a:	f000 f8ac 	bl	80028c6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800276e:	2000      	movs	r0, #0
 8002770:	f000 f8b6 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002774:	2000      	movs	r0, #0
 8002776:	f000 f8b3 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800277a:	2001      	movs	r0, #1
 800277c:	f000 f8b0 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002780:	203f      	movs	r0, #63	; 0x3f
 8002782:	f000 f8ad 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8002786:	20f6      	movs	r0, #246	; 0xf6
 8002788:	f000 f89d 	bl	80028c6 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800278c:	2001      	movs	r0, #1
 800278e:	f000 f8a7 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002792:	2000      	movs	r0, #0
 8002794:	f000 f8a4 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002798:	2006      	movs	r0, #6
 800279a:	f000 f8a1 	bl	80028e0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800279e:	202c      	movs	r0, #44	; 0x2c
 80027a0:	f000 f891 	bl	80028c6 <ili9341_WriteReg>
  LCD_Delay(200);
 80027a4:	20c8      	movs	r0, #200	; 0xc8
 80027a6:	f000 fe65 	bl	8003474 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80027aa:	2026      	movs	r0, #38	; 0x26
 80027ac:	f000 f88b 	bl	80028c6 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80027b0:	2001      	movs	r0, #1
 80027b2:	f000 f895 	bl	80028e0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80027b6:	20e0      	movs	r0, #224	; 0xe0
 80027b8:	f000 f885 	bl	80028c6 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80027bc:	200f      	movs	r0, #15
 80027be:	f000 f88f 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80027c2:	2029      	movs	r0, #41	; 0x29
 80027c4:	f000 f88c 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80027c8:	2024      	movs	r0, #36	; 0x24
 80027ca:	f000 f889 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80027ce:	200c      	movs	r0, #12
 80027d0:	f000 f886 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80027d4:	200e      	movs	r0, #14
 80027d6:	f000 f883 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80027da:	2009      	movs	r0, #9
 80027dc:	f000 f880 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80027e0:	204e      	movs	r0, #78	; 0x4e
 80027e2:	f000 f87d 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80027e6:	2078      	movs	r0, #120	; 0x78
 80027e8:	f000 f87a 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80027ec:	203c      	movs	r0, #60	; 0x3c
 80027ee:	f000 f877 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80027f2:	2009      	movs	r0, #9
 80027f4:	f000 f874 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80027f8:	2013      	movs	r0, #19
 80027fa:	f000 f871 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80027fe:	2005      	movs	r0, #5
 8002800:	f000 f86e 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002804:	2017      	movs	r0, #23
 8002806:	f000 f86b 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800280a:	2011      	movs	r0, #17
 800280c:	f000 f868 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002810:	2000      	movs	r0, #0
 8002812:	f000 f865 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8002816:	20e1      	movs	r0, #225	; 0xe1
 8002818:	f000 f855 	bl	80028c6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800281c:	2000      	movs	r0, #0
 800281e:	f000 f85f 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8002822:	2016      	movs	r0, #22
 8002824:	f000 f85c 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002828:	201b      	movs	r0, #27
 800282a:	f000 f859 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800282e:	2004      	movs	r0, #4
 8002830:	f000 f856 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002834:	2011      	movs	r0, #17
 8002836:	f000 f853 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 800283a:	2007      	movs	r0, #7
 800283c:	f000 f850 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002840:	2031      	movs	r0, #49	; 0x31
 8002842:	f000 f84d 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8002846:	2033      	movs	r0, #51	; 0x33
 8002848:	f000 f84a 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 800284c:	2042      	movs	r0, #66	; 0x42
 800284e:	f000 f847 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002852:	2005      	movs	r0, #5
 8002854:	f000 f844 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002858:	200c      	movs	r0, #12
 800285a:	f000 f841 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800285e:	200a      	movs	r0, #10
 8002860:	f000 f83e 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8002864:	2028      	movs	r0, #40	; 0x28
 8002866:	f000 f83b 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800286a:	202f      	movs	r0, #47	; 0x2f
 800286c:	f000 f838 	bl	80028e0 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002870:	200f      	movs	r0, #15
 8002872:	f000 f835 	bl	80028e0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8002876:	2011      	movs	r0, #17
 8002878:	f000 f825 	bl	80028c6 <ili9341_WriteReg>
  LCD_Delay(200);
 800287c:	20c8      	movs	r0, #200	; 0xc8
 800287e:	f000 fdf9 	bl	8003474 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002882:	2029      	movs	r0, #41	; 0x29
 8002884:	f000 f81f 	bl	80028c6 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002888:	202c      	movs	r0, #44	; 0x2c
 800288a:	f000 f81c 	bl	80028c6 <ili9341_WriteReg>
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}

08002892 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002896:	f000 fcff 	bl	8003298 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800289a:	2103      	movs	r1, #3
 800289c:	20d3      	movs	r0, #211	; 0xd3
 800289e:	f000 f82c 	bl	80028fa <ili9341_ReadData>
 80028a2:	4603      	mov	r3, r0
 80028a4:	b29b      	uxth	r3, r3
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	bd80      	pop	{r7, pc}

080028aa <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80028ae:	2029      	movs	r0, #41	; 0x29
 80028b0:	f000 f809 	bl	80028c6 <ili9341_WriteReg>
}
 80028b4:	bf00      	nop
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80028bc:	2028      	movs	r0, #40	; 0x28
 80028be:	f000 f802 	bl	80028c6 <ili9341_WriteReg>
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	4603      	mov	r3, r0
 80028ce:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 fd7a 	bl	80033cc <LCD_IO_WriteReg>
}
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80028ea:	88fb      	ldrh	r3, [r7, #6]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 fd4b 	bl	8003388 <LCD_IO_WriteData>
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	4603      	mov	r3, r0
 8002902:	460a      	mov	r2, r1
 8002904:	80fb      	strh	r3, [r7, #6]
 8002906:	4613      	mov	r3, r2
 8002908:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800290a:	797a      	ldrb	r2, [r7, #5]
 800290c:	88fb      	ldrh	r3, [r7, #6]
 800290e:	4611      	mov	r1, r2
 8002910:	4618      	mov	r0, r3
 8002912:	f000 fd7d 	bl	8003410 <LCD_IO_ReadData>
 8002916:	4603      	mov	r3, r0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002924:	23f0      	movs	r3, #240	; 0xf0
}
 8002926:	4618      	mov	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002934:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002938:	4618      	mov	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 800294e:	88fb      	ldrh	r3, [r7, #6]
 8002950:	4618      	mov	r0, r3
 8002952:	f000 fa59 	bl	8002e08 <stmpe811_GetInstance>
 8002956:	4603      	mov	r3, r0
 8002958:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	2bff      	cmp	r3, #255	; 0xff
 800295e:	d112      	bne.n	8002986 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8002960:	2000      	movs	r0, #0
 8002962:	f000 fa51 	bl	8002e08 <stmpe811_GetInstance>
 8002966:	4603      	mov	r3, r0
 8002968:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 800296a:	7bbb      	ldrb	r3, [r7, #14]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d80a      	bhi.n	8002986 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8002970:	7bbb      	ldrb	r3, [r7, #14]
 8002972:	88fa      	ldrh	r2, [r7, #6]
 8002974:	b2d1      	uxtb	r1, r2
 8002976:	4a06      	ldr	r2, [pc, #24]	; (8002990 <stmpe811_Init+0x4c>)
 8002978:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 800297a:	f000 fd86 	bl	800348a <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	4618      	mov	r0, r3
 8002982:	f000 f807 	bl	8002994 <stmpe811_Reset>
    }
  }
}
 8002986:	bf00      	nop
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000be0 	.word	0x20000be0

08002994 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 800299e:	88fb      	ldrh	r3, [r7, #6]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2202      	movs	r2, #2
 80029a4:	2103      	movs	r1, #3
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 fd7b 	bl	80034a2 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 80029ac:	200a      	movs	r0, #10
 80029ae:	f000 fdb5 	bl	800351c <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 80029b2:	88fb      	ldrh	r3, [r7, #6]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2200      	movs	r2, #0
 80029b8:	2103      	movs	r1, #3
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 fd71 	bl	80034a2 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 80029c0:	2002      	movs	r0, #2
 80029c2:	f000 fdab 	bl	800351c <IOE_Delay>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 80029ce:	b590      	push	{r4, r7, lr}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	4603      	mov	r3, r0
 80029d6:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 80029d8:	f000 fd57 	bl	800348a <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80029dc:	88fb      	ldrh	r3, [r7, #6]
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2100      	movs	r1, #0
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 fd70 	bl	80034c8 <IOE_Read>
 80029e8:	4603      	mov	r3, r0
 80029ea:	021b      	lsls	r3, r3, #8
 80029ec:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80029ee:	88fb      	ldrh	r3, [r7, #6]
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2101      	movs	r1, #1
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 fd67 	bl	80034c8 <IOE_Read>
 80029fa:	4603      	mov	r3, r0
 80029fc:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80029fe:	4323      	orrs	r3, r4
 8002a00:	b21b      	sxth	r3, r3
 8002a02:	b29b      	uxth	r3, r3
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd90      	pop	{r4, r7, pc}

08002a0c <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002a1a:	88fb      	ldrh	r3, [r7, #6]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2109      	movs	r1, #9
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fd51 	bl	80034c8 <IOE_Read>
 8002a26:	4603      	mov	r3, r0
 8002a28:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	7bfa      	ldrb	r2, [r7, #15]
 8002a38:	2109      	movs	r1, #9
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 fd31 	bl	80034a2 <IOE_Write>
}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002a52:	2300      	movs	r3, #0
 8002a54:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2109      	movs	r1, #9
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 fd33 	bl	80034c8 <IOE_Read>
 8002a62:	4603      	mov	r3, r0
 8002a64:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	f023 0301 	bic.w	r3, r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8002a6e:	88fb      	ldrh	r3, [r7, #6]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	7bfa      	ldrb	r2, [r7, #15]
 8002a74:	2109      	movs	r1, #9
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 fd13 	bl	80034a2 <IOE_Write>
    
}
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	460a      	mov	r2, r1
 8002a8e:	80fb      	strh	r3, [r7, #6]
 8002a90:	4613      	mov	r3, r2
 8002a92:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	210a      	movs	r1, #10
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fd12 	bl	80034c8 <IOE_Read>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8002aa8:	7bfa      	ldrb	r2, [r7, #15]
 8002aaa:	797b      	ldrb	r3, [r7, #5]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	7bfa      	ldrb	r2, [r7, #15]
 8002ab6:	210a      	movs	r1, #10
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 fcf2 	bl	80034a2 <IOE_Write>
}
 8002abe:	bf00      	nop
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b084      	sub	sp, #16
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	4603      	mov	r3, r0
 8002ace:	460a      	mov	r2, r1
 8002ad0:	80fb      	strh	r3, [r7, #6]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	210a      	movs	r1, #10
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fcf1 	bl	80034c8 <IOE_Read>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8002aea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	b25a      	sxtb	r2, r3
 8002af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af6:	4013      	ands	r3, r2
 8002af8:	b25b      	sxtb	r3, r3
 8002afa:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002afc:	88fb      	ldrh	r3, [r7, #6]
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	7bfa      	ldrb	r2, [r7, #15]
 8002b02:	210a      	movs	r1, #10
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 fccc 	bl	80034a2 <IOE_Write>
}
 8002b0a:	bf00      	nop
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b082      	sub	sp, #8
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	4603      	mov	r3, r0
 8002b1a:	460a      	mov	r2, r1
 8002b1c:	80fb      	strh	r3, [r7, #6]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	210b      	movs	r1, #11
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fccd 	bl	80034c8 <IOE_Read>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	461a      	mov	r2, r3
 8002b32:	797b      	ldrb	r3, [r7, #5]
 8002b34:	4013      	ands	r3, r2
 8002b36:	b2db      	uxtb	r3, r3
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	460a      	mov	r2, r1
 8002b4a:	80fb      	strh	r3, [r7, #6]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8002b50:	88fb      	ldrh	r3, [r7, #6]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	797a      	ldrb	r2, [r7, #5]
 8002b56:	210b      	movs	r1, #11
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 fca2 	bl	80034a2 <IOE_Write>
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b084      	sub	sp, #16
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	6039      	str	r1, [r7, #0]
 8002b70:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2117      	movs	r1, #23
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 fca3 	bl	80034c8 <IOE_Read>
 8002b82:	4603      	mov	r3, r0
 8002b84:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	b25b      	sxtb	r3, r3
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	b25a      	sxtb	r2, r3
 8002b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b92:	4013      	ands	r3, r2
 8002b94:	b25b      	sxtb	r3, r3
 8002b96:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	7bfa      	ldrb	r2, [r7, #15]
 8002b9e:	2117      	movs	r1, #23
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 fc7e 	bl	80034a2 <IOE_Write>
}
 8002ba6:	bf00      	nop
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2104      	movs	r1, #4
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 fc82 	bl	80034c8 <IOE_Read>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	f023 0304 	bic.w	r3, r3, #4
 8002bce:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	7bfa      	ldrb	r2, [r7, #15]
 8002bd6:	2104      	movs	r1, #4
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 fc62 	bl	80034a2 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8002bde:	88fb      	ldrh	r3, [r7, #6]
 8002be0:	21f0      	movs	r1, #240	; 0xf0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff ffbf 	bl	8002b66 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	f023 0303 	bic.w	r3, r3, #3
 8002bee:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	2104      	movs	r1, #4
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 fc52 	bl	80034a2 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8002bfe:	88fb      	ldrh	r3, [r7, #6]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2249      	movs	r2, #73	; 0x49
 8002c04:	2120      	movs	r1, #32
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 fc4b 	bl	80034a2 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8002c0c:	2002      	movs	r0, #2
 8002c0e:	f000 fc85 	bl	800351c <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8002c12:	88fb      	ldrh	r3, [r7, #6]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2201      	movs	r2, #1
 8002c18:	2121      	movs	r1, #33	; 0x21
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 fc41 	bl	80034a2 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8002c20:	88fb      	ldrh	r3, [r7, #6]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	229a      	movs	r2, #154	; 0x9a
 8002c26:	2141      	movs	r1, #65	; 0x41
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 fc3a 	bl	80034a2 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8002c2e:	88fb      	ldrh	r3, [r7, #6]
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2201      	movs	r2, #1
 8002c34:	214a      	movs	r1, #74	; 0x4a
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 fc33 	bl	80034a2 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002c3c:	88fb      	ldrh	r3, [r7, #6]
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2201      	movs	r2, #1
 8002c42:	214b      	movs	r1, #75	; 0x4b
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 fc2c 	bl	80034a2 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2200      	movs	r2, #0
 8002c50:	214b      	movs	r1, #75	; 0x4b
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fc25 	bl	80034a2 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8002c58:	88fb      	ldrh	r3, [r7, #6]
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	2156      	movs	r1, #86	; 0x56
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 fc1e 	bl	80034a2 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8002c66:	88fb      	ldrh	r3, [r7, #6]
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	2158      	movs	r1, #88	; 0x58
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 fc17 	bl	80034a2 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8002c74:	88fb      	ldrh	r3, [r7, #6]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2201      	movs	r2, #1
 8002c7a:	2140      	movs	r1, #64	; 0x40
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 fc10 	bl	80034a2 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	22ff      	movs	r2, #255	; 0xff
 8002c88:	210b      	movs	r1, #11
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fc09 	bl	80034a2 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002c90:	2002      	movs	r0, #2
 8002c92:	f000 fc43 	bl	800351c <IOE_Delay>
}
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8002cac:	88fb      	ldrh	r3, [r7, #6]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2140      	movs	r1, #64	; 0x40
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 fc08 	bl	80034c8 <IOE_Read>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cbe:	2b80      	cmp	r3, #128	; 0x80
 8002cc0:	bf0c      	ite	eq
 8002cc2:	2301      	moveq	r3, #1
 8002cc4:	2300      	movne	r3, #0
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8002cca:	7bbb      	ldrb	r3, [r7, #14]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00b      	beq.n	8002ce8 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8002cd0:	88fb      	ldrh	r3, [r7, #6]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	214c      	movs	r1, #76	; 0x4c
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 fbf6 	bl	80034c8 <IOE_Read>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d010      	beq.n	8002d04 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	73fb      	strb	r3, [r7, #15]
 8002ce6:	e00d      	b.n	8002d04 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002ce8:	88fb      	ldrh	r3, [r7, #6]
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2201      	movs	r2, #1
 8002cee:	214b      	movs	r1, #75	; 0x4b
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f000 fbd6 	bl	80034a2 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002cf6:	88fb      	ldrh	r3, [r7, #6]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	214b      	movs	r1, #75	; 0x4b
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 fbcf 	bl	80034a2 <IOE_Write>
  }
  
  return ret;
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b086      	sub	sp, #24
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	4603      	mov	r3, r0
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
 8002d1a:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8002d1c:	89fb      	ldrh	r3, [r7, #14]
 8002d1e:	b2d8      	uxtb	r0, r3
 8002d20:	f107 0210 	add.w	r2, r7, #16
 8002d24:	2304      	movs	r3, #4
 8002d26:	21d7      	movs	r1, #215	; 0xd7
 8002d28:	f000 fbe1 	bl	80034ee <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8002d2c:	7c3b      	ldrb	r3, [r7, #16]
 8002d2e:	061a      	lsls	r2, r3, #24
 8002d30:	7c7b      	ldrb	r3, [r7, #17]
 8002d32:	041b      	lsls	r3, r3, #16
 8002d34:	431a      	orrs	r2, r3
 8002d36:	7cbb      	ldrb	r3, [r7, #18]
 8002d38:	021b      	lsls	r3, r3, #8
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	7cfa      	ldrb	r2, [r7, #19]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	0d1b      	lsrs	r3, r3, #20
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	0a1b      	lsrs	r3, r3, #8
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002d5c:	89fb      	ldrh	r3, [r7, #14]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2201      	movs	r2, #1
 8002d62:	214b      	movs	r1, #75	; 0x4b
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 fb9c 	bl	80034a2 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002d6a:	89fb      	ldrh	r3, [r7, #14]
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2200      	movs	r2, #0
 8002d70:	214b      	movs	r1, #75	; 0x4b
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fb95 	bl	80034a2 <IOE_Write>
}
 8002d78:	bf00      	nop
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8002d8a:	f000 fb84 	bl	8003496 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	211f      	movs	r1, #31
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff fe76 	bl	8002a84 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8002d98:	88fb      	ldrh	r3, [r7, #6]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fe36 	bl	8002a0c <stmpe811_EnableGlobalIT>
}
 8002da0:	bf00      	nop
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8002db2:	88fb      	ldrh	r3, [r7, #6]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff fe47 	bl	8002a48 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	211f      	movs	r1, #31
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fe81 	bl	8002ac6 <stmpe811_DisableITSource>
}
 8002dc4:	bf00      	nop
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8002dd6:	88fb      	ldrh	r3, [r7, #6]
 8002dd8:	211f      	movs	r1, #31
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff fe99 	bl	8002b12 <stmpe811_ReadGITStatus>
 8002de0:	4603      	mov	r3, r0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	4603      	mov	r3, r0
 8002df2:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8002df4:	88fb      	ldrh	r3, [r7, #6]
 8002df6:	211f      	movs	r1, #31
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff fea1 	bl	8002b40 <stmpe811_ClearGlobalIT>
}
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8002e12:	2300      	movs	r3, #0
 8002e14:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002e16:	2300      	movs	r3, #0
 8002e18:	73fb      	strb	r3, [r7, #15]
 8002e1a:	e00b      	b.n	8002e34 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
 8002e1e:	4a0a      	ldr	r2, [pc, #40]	; (8002e48 <stmpe811_GetInstance+0x40>)
 8002e20:	5cd3      	ldrb	r3, [r2, r3]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	88fa      	ldrh	r2, [r7, #6]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d101      	bne.n	8002e2e <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	e006      	b.n	8002e3c <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	3301      	adds	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d9f0      	bls.n	8002e1c <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002e3a:	23ff      	movs	r3, #255	; 0xff
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	20000be0 	.word	0x20000be0

08002e4c <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08a      	sub	sp, #40	; 0x28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a33      	ldr	r2, [pc, #204]	; (8002f28 <I2Cx_MspInit+0xdc>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d15f      	bne.n	8002f1e <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	4b32      	ldr	r3, [pc, #200]	; (8002f2c <I2Cx_MspInit+0xe0>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	4a31      	ldr	r2, [pc, #196]	; (8002f2c <I2Cx_MspInit+0xe0>)
 8002e68:	f043 0304 	orr.w	r3, r3, #4
 8002e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6e:	4b2f      	ldr	r3, [pc, #188]	; (8002f2c <I2Cx_MspInit+0xe0>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	613b      	str	r3, [r7, #16]
 8002e78:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	4b2b      	ldr	r3, [pc, #172]	; (8002f2c <I2Cx_MspInit+0xe0>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	4a2a      	ldr	r2, [pc, #168]	; (8002f2c <I2Cx_MspInit+0xe0>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8a:	4b28      	ldr	r3, [pc, #160]	; (8002f2c <I2Cx_MspInit+0xe0>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8002e96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002e9c:	2312      	movs	r3, #18
 8002e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002eac:	f107 0314 	add.w	r3, r7, #20
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	481f      	ldr	r0, [pc, #124]	; (8002f30 <I2Cx_MspInit+0xe4>)
 8002eb4:	f001 f80c 	bl	8003ed0 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8002eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ebc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002ebe:	f107 0314 	add.w	r3, r7, #20
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	481b      	ldr	r0, [pc, #108]	; (8002f34 <I2Cx_MspInit+0xe8>)
 8002ec6:	f001 f803 	bl	8003ed0 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	4b17      	ldr	r3, [pc, #92]	; (8002f2c <I2Cx_MspInit+0xe0>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	4a16      	ldr	r2, [pc, #88]	; (8002f2c <I2Cx_MspInit+0xe0>)
 8002ed4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eda:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <I2Cx_MspInit+0xe0>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ee2:	60bb      	str	r3, [r7, #8]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8002ee6:	4b11      	ldr	r3, [pc, #68]	; (8002f2c <I2Cx_MspInit+0xe0>)
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	4a10      	ldr	r2, [pc, #64]	; (8002f2c <I2Cx_MspInit+0xe0>)
 8002eec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ef0:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8002ef2:	4b0e      	ldr	r3, [pc, #56]	; (8002f2c <I2Cx_MspInit+0xe0>)
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	4a0d      	ldr	r2, [pc, #52]	; (8002f2c <I2Cx_MspInit+0xe0>)
 8002ef8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002efc:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002efe:	2200      	movs	r2, #0
 8002f00:	210f      	movs	r1, #15
 8002f02:	2048      	movs	r0, #72	; 0x48
 8002f04:	f000 fd20 	bl	8003948 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002f08:	2048      	movs	r0, #72	; 0x48
 8002f0a:	f000 fd39 	bl	8003980 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002f0e:	2200      	movs	r2, #0
 8002f10:	210f      	movs	r1, #15
 8002f12:	2049      	movs	r0, #73	; 0x49
 8002f14:	f000 fd18 	bl	8003948 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8002f18:	2049      	movs	r0, #73	; 0x49
 8002f1a:	f000 fd31 	bl	8003980 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8002f1e:	bf00      	nop
 8002f20:	3728      	adds	r7, #40	; 0x28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40005c00 	.word	0x40005c00
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	40020000 	.word	0x40020000
 8002f34:	40020800 	.word	0x40020800

08002f38 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002f3c:	4814      	ldr	r0, [pc, #80]	; (8002f90 <I2Cx_Init+0x58>)
 8002f3e:	f001 ff5f 	bl	8004e00 <HAL_I2C_GetState>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d121      	bne.n	8002f8c <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8002f48:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <I2Cx_Init+0x58>)
 8002f4a:	4a12      	ldr	r2, [pc, #72]	; (8002f94 <I2Cx_Init+0x5c>)
 8002f4c:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8002f4e:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <I2Cx_Init+0x58>)
 8002f50:	4a11      	ldr	r2, [pc, #68]	; (8002f98 <I2Cx_Init+0x60>)
 8002f52:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8002f54:	4b0e      	ldr	r3, [pc, #56]	; (8002f90 <I2Cx_Init+0x58>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8002f5a:	4b0d      	ldr	r3, [pc, #52]	; (8002f90 <I2Cx_Init+0x58>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002f60:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <I2Cx_Init+0x58>)
 8002f62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f66:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8002f68:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <I2Cx_Init+0x58>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8002f6e:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <I2Cx_Init+0x58>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <I2Cx_Init+0x58>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8002f7a:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <I2Cx_Init+0x58>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8002f80:	4803      	ldr	r0, [pc, #12]	; (8002f90 <I2Cx_Init+0x58>)
 8002f82:	f7ff ff63 	bl	8002e4c <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8002f86:	4802      	ldr	r0, [pc, #8]	; (8002f90 <I2Cx_Init+0x58>)
 8002f88:	f001 faa6 	bl	80044d8 <HAL_I2C_Init>
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	2000af54 	.word	0x2000af54
 8002f94:	40005c00 	.word	0x40005c00
 8002f98:	000186a0 	.word	0x000186a0

08002f9c <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	603b      	str	r3, [r7, #0]
 8002fa6:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <I2Cx_ITConfig+0x58>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	4a12      	ldr	r2, [pc, #72]	; (8002ff4 <I2Cx_ITConfig+0x58>)
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb2:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <I2Cx_ITConfig+0x58>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	603b      	str	r3, [r7, #0]
 8002fbc:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8002fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fc2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8002fcc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002fd0:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8002fd2:	1d3b      	adds	r3, r7, #4
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4808      	ldr	r0, [pc, #32]	; (8002ff8 <I2Cx_ITConfig+0x5c>)
 8002fd8:	f000 ff7a 	bl	8003ed0 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8002fdc:	2200      	movs	r2, #0
 8002fde:	210f      	movs	r1, #15
 8002fe0:	2028      	movs	r0, #40	; 0x28
 8002fe2:	f000 fcb1 	bl	8003948 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8002fe6:	2028      	movs	r0, #40	; 0x28
 8002fe8:	f000 fcca 	bl	8003980 <HAL_NVIC_EnableIRQ>
}
 8002fec:	bf00      	nop
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	40020000 	.word	0x40020000

08002ffc <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af04      	add	r7, sp, #16
 8003002:	4603      	mov	r3, r0
 8003004:	71fb      	strb	r3, [r7, #7]
 8003006:	460b      	mov	r3, r1
 8003008:	71bb      	strb	r3, [r7, #6]
 800300a:	4613      	mov	r3, r2
 800300c:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	b299      	uxth	r1, r3
 8003016:	79bb      	ldrb	r3, [r7, #6]
 8003018:	b29a      	uxth	r2, r3
 800301a:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <I2Cx_WriteData+0x4c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	9302      	str	r3, [sp, #8]
 8003020:	2301      	movs	r3, #1
 8003022:	9301      	str	r3, [sp, #4]
 8003024:	1d7b      	adds	r3, r7, #5
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	2301      	movs	r3, #1
 800302a:	4808      	ldr	r0, [pc, #32]	; (800304c <I2Cx_WriteData+0x50>)
 800302c:	f001 fbc8 	bl	80047c0 <HAL_I2C_Mem_Write>
 8003030:	4603      	mov	r3, r0
 8003032:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800303a:	f000 f863 	bl	8003104 <I2Cx_Error>
  }        
}
 800303e:	bf00      	nop
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	20000068 	.word	0x20000068
 800304c:	2000af54 	.word	0x2000af54

08003050 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af04      	add	r7, sp, #16
 8003056:	4603      	mov	r3, r0
 8003058:	460a      	mov	r2, r1
 800305a:	71fb      	strb	r3, [r7, #7]
 800305c:	4613      	mov	r3, r2
 800305e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8003064:	2300      	movs	r3, #0
 8003066:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	b299      	uxth	r1, r3
 800306c:	79bb      	ldrb	r3, [r7, #6]
 800306e:	b29a      	uxth	r2, r3
 8003070:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <I2Cx_ReadData+0x50>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	9302      	str	r3, [sp, #8]
 8003076:	2301      	movs	r3, #1
 8003078:	9301      	str	r3, [sp, #4]
 800307a:	f107 030e 	add.w	r3, r7, #14
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	2301      	movs	r3, #1
 8003082:	4808      	ldr	r0, [pc, #32]	; (80030a4 <I2Cx_ReadData+0x54>)
 8003084:	f001 fc96 	bl	80049b4 <HAL_I2C_Mem_Read>
 8003088:	4603      	mov	r3, r0
 800308a:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003092:	f000 f837 	bl	8003104 <I2Cx_Error>
  
  }
  return value;
 8003096:	7bbb      	ldrb	r3, [r7, #14]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	20000068 	.word	0x20000068
 80030a4:	2000af54 	.word	0x2000af54

080030a8 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b088      	sub	sp, #32
 80030ac:	af04      	add	r7, sp, #16
 80030ae:	603a      	str	r2, [r7, #0]
 80030b0:	461a      	mov	r2, r3
 80030b2:	4603      	mov	r3, r0
 80030b4:	71fb      	strb	r3, [r7, #7]
 80030b6:	460b      	mov	r3, r1
 80030b8:	71bb      	strb	r3, [r7, #6]
 80030ba:	4613      	mov	r3, r2
 80030bc:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	b299      	uxth	r1, r3
 80030c6:	79bb      	ldrb	r3, [r7, #6]
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <I2Cx_ReadBuffer+0x54>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	9302      	str	r3, [sp, #8]
 80030d0:	88bb      	ldrh	r3, [r7, #4]
 80030d2:	9301      	str	r3, [sp, #4]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	2301      	movs	r3, #1
 80030da:	4809      	ldr	r0, [pc, #36]	; (8003100 <I2Cx_ReadBuffer+0x58>)
 80030dc:	f001 fc6a 	bl	80049b4 <HAL_I2C_Mem_Read>
 80030e0:	4603      	mov	r3, r0
 80030e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	e002      	b.n	80030f4 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80030ee:	f000 f809 	bl	8003104 <I2Cx_Error>

    return 1;
 80030f2:	2301      	movs	r3, #1
  }
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20000068 	.word	0x20000068
 8003100:	2000af54 	.word	0x2000af54

08003104 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8003108:	4803      	ldr	r0, [pc, #12]	; (8003118 <I2Cx_Error+0x14>)
 800310a:	f001 fb29 	bl	8004760 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 800310e:	f7ff ff13 	bl	8002f38 <I2Cx_Init>
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	2000af54 	.word	0x2000af54

0800311c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003120:	4819      	ldr	r0, [pc, #100]	; (8003188 <SPIx_Init+0x6c>)
 8003122:	f004 f96a 	bl	80073fa <HAL_SPI_GetState>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d12b      	bne.n	8003184 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 800312c:	4b16      	ldr	r3, [pc, #88]	; (8003188 <SPIx_Init+0x6c>)
 800312e:	4a17      	ldr	r2, [pc, #92]	; (800318c <SPIx_Init+0x70>)
 8003130:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003132:	4b15      	ldr	r3, [pc, #84]	; (8003188 <SPIx_Init+0x6c>)
 8003134:	2218      	movs	r2, #24
 8003136:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003138:	4b13      	ldr	r3, [pc, #76]	; (8003188 <SPIx_Init+0x6c>)
 800313a:	2200      	movs	r2, #0
 800313c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800313e:	4b12      	ldr	r3, [pc, #72]	; (8003188 <SPIx_Init+0x6c>)
 8003140:	2200      	movs	r2, #0
 8003142:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003144:	4b10      	ldr	r3, [pc, #64]	; (8003188 <SPIx_Init+0x6c>)
 8003146:	2200      	movs	r2, #0
 8003148:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800314a:	4b0f      	ldr	r3, [pc, #60]	; (8003188 <SPIx_Init+0x6c>)
 800314c:	2200      	movs	r2, #0
 800314e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003150:	4b0d      	ldr	r3, [pc, #52]	; (8003188 <SPIx_Init+0x6c>)
 8003152:	2207      	movs	r2, #7
 8003154:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003156:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <SPIx_Init+0x6c>)
 8003158:	2200      	movs	r2, #0
 800315a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800315c:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <SPIx_Init+0x6c>)
 800315e:	2200      	movs	r2, #0
 8003160:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8003162:	4b09      	ldr	r3, [pc, #36]	; (8003188 <SPIx_Init+0x6c>)
 8003164:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003168:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800316a:	4b07      	ldr	r3, [pc, #28]	; (8003188 <SPIx_Init+0x6c>)
 800316c:	2200      	movs	r2, #0
 800316e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003170:	4b05      	ldr	r3, [pc, #20]	; (8003188 <SPIx_Init+0x6c>)
 8003172:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003176:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8003178:	4803      	ldr	r0, [pc, #12]	; (8003188 <SPIx_Init+0x6c>)
 800317a:	f000 f853 	bl	8003224 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800317e:	4802      	ldr	r0, [pc, #8]	; (8003188 <SPIx_Init+0x6c>)
 8003180:	f003 fc9b 	bl	8006aba <HAL_SPI_Init>
  } 
}
 8003184:	bf00      	nop
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20000be4 	.word	0x20000be4
 800318c:	40015000 	.word	0x40015000

08003190 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <SPIx_Read+0x38>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f107 0108 	add.w	r1, r7, #8
 80031aa:	4808      	ldr	r0, [pc, #32]	; (80031cc <SPIx_Read+0x3c>)
 80031ac:	f003 fe72 	bl	8006e94 <HAL_SPI_Receive>
 80031b0:	4603      	mov	r3, r0
 80031b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80031ba:	f000 f827 	bl	800320c <SPIx_Error>
  }
  
  return readvalue;
 80031be:	68bb      	ldr	r3, [r7, #8]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	2000006c 	.word	0x2000006c
 80031cc:	20000be4 	.word	0x20000be4

080031d0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80031de:	4b09      	ldr	r3, [pc, #36]	; (8003204 <SPIx_Write+0x34>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	1db9      	adds	r1, r7, #6
 80031e4:	2201      	movs	r2, #1
 80031e6:	4808      	ldr	r0, [pc, #32]	; (8003208 <SPIx_Write+0x38>)
 80031e8:	f003 fd18 	bl	8006c1c <HAL_SPI_Transmit>
 80031ec:	4603      	mov	r3, r0
 80031ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80031f6:	f000 f809 	bl	800320c <SPIx_Error>
  }
}
 80031fa:	bf00      	nop
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	2000006c 	.word	0x2000006c
 8003208:	20000be4 	.word	0x20000be4

0800320c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003210:	4803      	ldr	r0, [pc, #12]	; (8003220 <SPIx_Error+0x14>)
 8003212:	f003 fcdb 	bl	8006bcc <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8003216:	f7ff ff81 	bl	800311c <SPIx_Init>
}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20000be4 	.word	0x20000be4

08003224 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08a      	sub	sp, #40	; 0x28
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800322c:	2300      	movs	r3, #0
 800322e:	613b      	str	r3, [r7, #16]
 8003230:	4b17      	ldr	r3, [pc, #92]	; (8003290 <SPIx_MspInit+0x6c>)
 8003232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003234:	4a16      	ldr	r2, [pc, #88]	; (8003290 <SPIx_MspInit+0x6c>)
 8003236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800323a:	6453      	str	r3, [r2, #68]	; 0x44
 800323c:	4b14      	ldr	r3, [pc, #80]	; (8003290 <SPIx_MspInit+0x6c>)
 800323e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8003248:	2300      	movs	r3, #0
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	4b10      	ldr	r3, [pc, #64]	; (8003290 <SPIx_MspInit+0x6c>)
 800324e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003250:	4a0f      	ldr	r2, [pc, #60]	; (8003290 <SPIx_MspInit+0x6c>)
 8003252:	f043 0320 	orr.w	r3, r3, #32
 8003256:	6313      	str	r3, [r2, #48]	; 0x30
 8003258:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <SPIx_MspInit+0x6c>)
 800325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325c:	f003 0320 	and.w	r3, r3, #32
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8003264:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003268:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800326a:	2302      	movs	r3, #2
 800326c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800326e:	2302      	movs	r3, #2
 8003270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003272:	2301      	movs	r3, #1
 8003274:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8003276:	2305      	movs	r3, #5
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800327a:	f107 0314 	add.w	r3, r7, #20
 800327e:	4619      	mov	r1, r3
 8003280:	4804      	ldr	r0, [pc, #16]	; (8003294 <SPIx_MspInit+0x70>)
 8003282:	f000 fe25 	bl	8003ed0 <HAL_GPIO_Init>
}
 8003286:	bf00      	nop
 8003288:	3728      	adds	r7, #40	; 0x28
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800
 8003294:	40021400 	.word	0x40021400

08003298 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800329e:	4b36      	ldr	r3, [pc, #216]	; (8003378 <LCD_IO_Init+0xe0>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d164      	bne.n	8003370 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80032a6:	4b34      	ldr	r3, [pc, #208]	; (8003378 <LCD_IO_Init+0xe0>)
 80032a8:	2201      	movs	r2, #1
 80032aa:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80032ac:	2300      	movs	r3, #0
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	4b32      	ldr	r3, [pc, #200]	; (800337c <LCD_IO_Init+0xe4>)
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	4a31      	ldr	r2, [pc, #196]	; (800337c <LCD_IO_Init+0xe4>)
 80032b6:	f043 0308 	orr.w	r3, r3, #8
 80032ba:	6313      	str	r3, [r2, #48]	; 0x30
 80032bc:	4b2f      	ldr	r3, [pc, #188]	; (800337c <LCD_IO_Init+0xe4>)
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80032c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80032ce:	2301      	movs	r3, #1
 80032d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80032d6:	2302      	movs	r3, #2
 80032d8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80032da:	f107 030c 	add.w	r3, r7, #12
 80032de:	4619      	mov	r1, r3
 80032e0:	4827      	ldr	r0, [pc, #156]	; (8003380 <LCD_IO_Init+0xe8>)
 80032e2:	f000 fdf5 	bl	8003ed0 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	607b      	str	r3, [r7, #4]
 80032ea:	4b24      	ldr	r3, [pc, #144]	; (800337c <LCD_IO_Init+0xe4>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	4a23      	ldr	r2, [pc, #140]	; (800337c <LCD_IO_Init+0xe4>)
 80032f0:	f043 0308 	orr.w	r3, r3, #8
 80032f4:	6313      	str	r3, [r2, #48]	; 0x30
 80032f6:	4b21      	ldr	r3, [pc, #132]	; (800337c <LCD_IO_Init+0xe4>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	607b      	str	r3, [r7, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003306:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003308:	2301      	movs	r3, #1
 800330a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003310:	2302      	movs	r3, #2
 8003312:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003314:	f107 030c 	add.w	r3, r7, #12
 8003318:	4619      	mov	r1, r3
 800331a:	4819      	ldr	r0, [pc, #100]	; (8003380 <LCD_IO_Init+0xe8>)
 800331c:	f000 fdd8 	bl	8003ed0 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003320:	2300      	movs	r3, #0
 8003322:	603b      	str	r3, [r7, #0]
 8003324:	4b15      	ldr	r3, [pc, #84]	; (800337c <LCD_IO_Init+0xe4>)
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	4a14      	ldr	r2, [pc, #80]	; (800337c <LCD_IO_Init+0xe4>)
 800332a:	f043 0304 	orr.w	r3, r3, #4
 800332e:	6313      	str	r3, [r2, #48]	; 0x30
 8003330:	4b12      	ldr	r3, [pc, #72]	; (800337c <LCD_IO_Init+0xe4>)
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	603b      	str	r3, [r7, #0]
 800333a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800333c:	2304      	movs	r3, #4
 800333e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003340:	2301      	movs	r3, #1
 8003342:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003348:	2302      	movs	r3, #2
 800334a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800334c:	f107 030c 	add.w	r3, r7, #12
 8003350:	4619      	mov	r1, r3
 8003352:	480c      	ldr	r0, [pc, #48]	; (8003384 <LCD_IO_Init+0xec>)
 8003354:	f000 fdbc 	bl	8003ed0 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003358:	2200      	movs	r2, #0
 800335a:	2104      	movs	r1, #4
 800335c:	4809      	ldr	r0, [pc, #36]	; (8003384 <LCD_IO_Init+0xec>)
 800335e:	f001 f887 	bl	8004470 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003362:	2201      	movs	r2, #1
 8003364:	2104      	movs	r1, #4
 8003366:	4807      	ldr	r0, [pc, #28]	; (8003384 <LCD_IO_Init+0xec>)
 8003368:	f001 f882 	bl	8004470 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 800336c:	f7ff fed6 	bl	800311c <SPIx_Init>
  }
}
 8003370:	bf00      	nop
 8003372:	3720      	adds	r7, #32
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	20000c3c 	.word	0x20000c3c
 800337c:	40023800 	.word	0x40023800
 8003380:	40020c00 	.word	0x40020c00
 8003384:	40020800 	.word	0x40020800

08003388 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003392:	2201      	movs	r2, #1
 8003394:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003398:	480a      	ldr	r0, [pc, #40]	; (80033c4 <LCD_IO_WriteData+0x3c>)
 800339a:	f001 f869 	bl	8004470 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800339e:	2200      	movs	r2, #0
 80033a0:	2104      	movs	r1, #4
 80033a2:	4809      	ldr	r0, [pc, #36]	; (80033c8 <LCD_IO_WriteData+0x40>)
 80033a4:	f001 f864 	bl	8004470 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80033a8:	88fb      	ldrh	r3, [r7, #6]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff ff10 	bl	80031d0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80033b0:	2201      	movs	r2, #1
 80033b2:	2104      	movs	r1, #4
 80033b4:	4804      	ldr	r0, [pc, #16]	; (80033c8 <LCD_IO_WriteData+0x40>)
 80033b6:	f001 f85b 	bl	8004470 <HAL_GPIO_WritePin>
}
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40020c00 	.word	0x40020c00
 80033c8:	40020800 	.word	0x40020800

080033cc <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80033d6:	2200      	movs	r2, #0
 80033d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033dc:	480a      	ldr	r0, [pc, #40]	; (8003408 <LCD_IO_WriteReg+0x3c>)
 80033de:	f001 f847 	bl	8004470 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80033e2:	2200      	movs	r2, #0
 80033e4:	2104      	movs	r1, #4
 80033e6:	4809      	ldr	r0, [pc, #36]	; (800340c <LCD_IO_WriteReg+0x40>)
 80033e8:	f001 f842 	bl	8004470 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80033ec:	79fb      	ldrb	r3, [r7, #7]
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff feed 	bl	80031d0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80033f6:	2201      	movs	r2, #1
 80033f8:	2104      	movs	r1, #4
 80033fa:	4804      	ldr	r0, [pc, #16]	; (800340c <LCD_IO_WriteReg+0x40>)
 80033fc:	f001 f838 	bl	8004470 <HAL_GPIO_WritePin>
}
 8003400:	bf00      	nop
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40020c00 	.word	0x40020c00
 800340c:	40020800 	.word	0x40020800

08003410 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	460a      	mov	r2, r1
 800341a:	80fb      	strh	r3, [r7, #6]
 800341c:	4613      	mov	r3, r2
 800341e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8003424:	2200      	movs	r2, #0
 8003426:	2104      	movs	r1, #4
 8003428:	4810      	ldr	r0, [pc, #64]	; (800346c <LCD_IO_ReadData+0x5c>)
 800342a:	f001 f821 	bl	8004470 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800342e:	2200      	movs	r2, #0
 8003430:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003434:	480e      	ldr	r0, [pc, #56]	; (8003470 <LCD_IO_ReadData+0x60>)
 8003436:	f001 f81b 	bl	8004470 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fec7 	bl	80031d0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8003442:	797b      	ldrb	r3, [r7, #5]
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff fea3 	bl	8003190 <SPIx_Read>
 800344a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800344c:	2201      	movs	r2, #1
 800344e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003452:	4807      	ldr	r0, [pc, #28]	; (8003470 <LCD_IO_ReadData+0x60>)
 8003454:	f001 f80c 	bl	8004470 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003458:	2201      	movs	r2, #1
 800345a:	2104      	movs	r1, #4
 800345c:	4803      	ldr	r0, [pc, #12]	; (800346c <LCD_IO_ReadData+0x5c>)
 800345e:	f001 f807 	bl	8004470 <HAL_GPIO_WritePin>
  
  return readvalue;
 8003462:	68fb      	ldr	r3, [r7, #12]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40020800 	.word	0x40020800
 8003470:	40020c00 	.word	0x40020c00

08003474 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f987 	bl	8003790 <HAL_Delay>
}
 8003482:	bf00      	nop
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 800348a:	b580      	push	{r7, lr}
 800348c:	af00      	add	r7, sp, #0
  I2Cx_Init();
 800348e:	f7ff fd53 	bl	8002f38 <I2Cx_Init>
}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}

08003496 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 800349a:	f7ff fd7f 	bl	8002f9c <I2Cx_ITConfig>
}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b082      	sub	sp, #8
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	4603      	mov	r3, r0
 80034aa:	71fb      	strb	r3, [r7, #7]
 80034ac:	460b      	mov	r3, r1
 80034ae:	71bb      	strb	r3, [r7, #6]
 80034b0:	4613      	mov	r3, r2
 80034b2:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 80034b4:	797a      	ldrb	r2, [r7, #5]
 80034b6:	79b9      	ldrb	r1, [r7, #6]
 80034b8:	79fb      	ldrb	r3, [r7, #7]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff fd9e 	bl	8002ffc <I2Cx_WriteData>
}
 80034c0:	bf00      	nop
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	460a      	mov	r2, r1
 80034d2:	71fb      	strb	r3, [r7, #7]
 80034d4:	4613      	mov	r3, r2
 80034d6:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 80034d8:	79ba      	ldrb	r2, [r7, #6]
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	4611      	mov	r1, r2
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff fdb6 	bl	8003050 <I2Cx_ReadData>
 80034e4:	4603      	mov	r3, r0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	603a      	str	r2, [r7, #0]
 80034f6:	461a      	mov	r2, r3
 80034f8:	4603      	mov	r3, r0
 80034fa:	71fb      	strb	r3, [r7, #7]
 80034fc:	460b      	mov	r3, r1
 80034fe:	71bb      	strb	r3, [r7, #6]
 8003500:	4613      	mov	r3, r2
 8003502:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8003504:	88bb      	ldrh	r3, [r7, #4]
 8003506:	79b9      	ldrb	r1, [r7, #6]
 8003508:	79f8      	ldrb	r0, [r7, #7]
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	f7ff fdcc 	bl	80030a8 <I2Cx_ReadBuffer>
 8003510:	4603      	mov	r3, r0
 8003512:	b29b      	uxth	r3, r3
}
 8003514:	4618      	mov	r0, r3
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 f933 	bl	8003790 <HAL_Delay>
}
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	460a      	mov	r2, r1
 800353e:	80fb      	strh	r3, [r7, #6]
 8003540:	4613      	mov	r3, r2
 8003542:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8003548:	4a13      	ldr	r2, [pc, #76]	; (8003598 <BSP_TS_Init+0x64>)
 800354a:	88fb      	ldrh	r3, [r7, #6]
 800354c:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 800354e:	4a13      	ldr	r2, [pc, #76]	; (800359c <BSP_TS_Init+0x68>)
 8003550:	88bb      	ldrh	r3, [r7, #4]
 8003552:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8003554:	4b12      	ldr	r3, [pc, #72]	; (80035a0 <BSP_TS_Init+0x6c>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2082      	movs	r0, #130	; 0x82
 800355a:	4798      	blx	r3
 800355c:	4603      	mov	r3, r0
 800355e:	461a      	mov	r2, r3
 8003560:	f640 0311 	movw	r3, #2065	; 0x811
 8003564:	429a      	cmp	r2, r3
 8003566:	d104      	bne.n	8003572 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8003568:	4b0e      	ldr	r3, [pc, #56]	; (80035a4 <BSP_TS_Init+0x70>)
 800356a:	4a0d      	ldr	r2, [pc, #52]	; (80035a0 <BSP_TS_Init+0x6c>)
 800356c:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d109      	bne.n	800358c <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8003578:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <BSP_TS_Init+0x70>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2082      	movs	r0, #130	; 0x82
 8003580:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8003582:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <BSP_TS_Init+0x70>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	2082      	movs	r0, #130	; 0x82
 800358a:	4798      	blx	r3
  }

  return ret;
 800358c:	7bfb      	ldrb	r3, [r7, #15]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000c44 	.word	0x20000c44
 800359c:	20000c46 	.word	0x20000c46
 80035a0:	20000040 	.word	0x20000040
 80035a4:	20000c40 	.word	0x20000c40

080035a8 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 80035b0:	4b4f      	ldr	r3, [pc, #316]	; (80036f0 <BSP_TS_GetState+0x148>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	2082      	movs	r0, #130	; 0x82
 80035b8:	4798      	blx	r3
 80035ba:	4603      	mov	r3, r0
 80035bc:	b29a      	uxth	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 808d 	beq.w	80036e6 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 80035cc:	4b48      	ldr	r3, [pc, #288]	; (80036f0 <BSP_TS_GetState+0x148>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	f107 020c 	add.w	r2, r7, #12
 80035d6:	f107 010e 	add.w	r1, r7, #14
 80035da:	2082      	movs	r0, #130	; 0x82
 80035dc:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;
 80035de:	89bb      	ldrh	r3, [r7, #12]
 80035e0:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 80035e8:	89bb      	ldrh	r3, [r7, #12]
 80035ea:	4a42      	ldr	r2, [pc, #264]	; (80036f4 <BSP_TS_GetState+0x14c>)
 80035ec:	fba2 2303 	umull	r2, r3, r2, r3
 80035f0:	08db      	lsrs	r3, r3, #3
 80035f2:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 80035f4:	8abb      	ldrh	r3, [r7, #20]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d102      	bne.n	8003600 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 80035fa:	2300      	movs	r3, #0
 80035fc:	82bb      	strh	r3, [r7, #20]
 80035fe:	e008      	b.n	8003612 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8003600:	4b3d      	ldr	r3, [pc, #244]	; (80036f8 <BSP_TS_GetState+0x150>)
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	8aba      	ldrh	r2, [r7, #20]
 8003606:	429a      	cmp	r2, r3
 8003608:	d903      	bls.n	8003612 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 800360a:	4b3b      	ldr	r3, [pc, #236]	; (80036f8 <BSP_TS_GetState+0x150>)
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	3b01      	subs	r3, #1
 8003610:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8003612:	8abb      	ldrh	r3, [r7, #20]
 8003614:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8003616:	89fb      	ldrh	r3, [r7, #14]
 8003618:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800361c:	4293      	cmp	r3, r2
 800361e:	d806      	bhi.n	800362e <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8003620:	89fb      	ldrh	r3, [r7, #14]
 8003622:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8003626:	330e      	adds	r3, #14
 8003628:	b29b      	uxth	r3, r3
 800362a:	81fb      	strh	r3, [r7, #14]
 800362c:	e005      	b.n	800363a <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 800362e:	89fb      	ldrh	r3, [r7, #14]
 8003630:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8003634:	3308      	adds	r3, #8
 8003636:	b29b      	uxth	r3, r3
 8003638:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 800363a:	89fb      	ldrh	r3, [r7, #14]
 800363c:	4a2f      	ldr	r2, [pc, #188]	; (80036fc <BSP_TS_GetState+0x154>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	08db      	lsrs	r3, r3, #3
 8003644:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8003646:	8afb      	ldrh	r3, [r7, #22]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d102      	bne.n	8003652 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	82fb      	strh	r3, [r7, #22]
 8003650:	e008      	b.n	8003664 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8003652:	4b2b      	ldr	r3, [pc, #172]	; (8003700 <BSP_TS_GetState+0x158>)
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	8afa      	ldrh	r2, [r7, #22]
 8003658:	429a      	cmp	r2, r3
 800365a:	d903      	bls.n	8003664 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 800365c:	4b28      	ldr	r3, [pc, #160]	; (8003700 <BSP_TS_GetState+0x158>)
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	3b01      	subs	r3, #1
 8003662:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8003664:	8afb      	ldrh	r3, [r7, #22]
 8003666:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8003668:	89fb      	ldrh	r3, [r7, #14]
 800366a:	461a      	mov	r2, r3
 800366c:	4b25      	ldr	r3, [pc, #148]	; (8003704 <BSP_TS_GetState+0x15c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d906      	bls.n	8003682 <BSP_TS_GetState+0xda>
 8003674:	89fa      	ldrh	r2, [r7, #14]
 8003676:	4b23      	ldr	r3, [pc, #140]	; (8003704 <BSP_TS_GetState+0x15c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	b29b      	uxth	r3, r3
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	b29b      	uxth	r3, r3
 8003680:	e005      	b.n	800368e <BSP_TS_GetState+0xe6>
 8003682:	4b20      	ldr	r3, [pc, #128]	; (8003704 <BSP_TS_GetState+0x15c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	b29a      	uxth	r2, r3
 8003688:	89fb      	ldrh	r3, [r7, #14]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	b29b      	uxth	r3, r3
 800368e:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8003690:	89bb      	ldrh	r3, [r7, #12]
 8003692:	461a      	mov	r2, r3
 8003694:	4b1c      	ldr	r3, [pc, #112]	; (8003708 <BSP_TS_GetState+0x160>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d906      	bls.n	80036aa <BSP_TS_GetState+0x102>
 800369c:	89ba      	ldrh	r2, [r7, #12]
 800369e:	4b1a      	ldr	r3, [pc, #104]	; (8003708 <BSP_TS_GetState+0x160>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	e005      	b.n	80036b6 <BSP_TS_GetState+0x10e>
 80036aa:	4b17      	ldr	r3, [pc, #92]	; (8003708 <BSP_TS_GetState+0x160>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	89bb      	ldrh	r3, [r7, #12]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 80036b8:	8a7a      	ldrh	r2, [r7, #18]
 80036ba:	8a3b      	ldrh	r3, [r7, #16]
 80036bc:	4413      	add	r3, r2
 80036be:	2b05      	cmp	r3, #5
 80036c0:	dd07      	ble.n	80036d2 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 80036c2:	89fb      	ldrh	r3, [r7, #14]
 80036c4:	461a      	mov	r2, r3
 80036c6:	4b0f      	ldr	r3, [pc, #60]	; (8003704 <BSP_TS_GetState+0x15c>)
 80036c8:	601a      	str	r2, [r3, #0]
      _y = y; 
 80036ca:	89bb      	ldrh	r3, [r7, #12]
 80036cc:	461a      	mov	r2, r3
 80036ce:	4b0e      	ldr	r3, [pc, #56]	; (8003708 <BSP_TS_GetState+0x160>)
 80036d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 80036d2:	4b0c      	ldr	r3, [pc, #48]	; (8003704 <BSP_TS_GetState+0x15c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 80036dc:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <BSP_TS_GetState+0x160>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	809a      	strh	r2, [r3, #4]
  }
}
 80036e6:	bf00      	nop
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20000c40 	.word	0x20000c40
 80036f4:	ba2e8ba3 	.word	0xba2e8ba3
 80036f8:	20000c46 	.word	0x20000c46
 80036fc:	88888889 	.word	0x88888889
 8003700:	20000c44 	.word	0x20000c44
 8003704:	20000c48 	.word	0x20000c48
 8003708:	20000c4c 	.word	0x20000c4c

0800370c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003710:	4b0e      	ldr	r3, [pc, #56]	; (800374c <HAL_Init+0x40>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a0d      	ldr	r2, [pc, #52]	; (800374c <HAL_Init+0x40>)
 8003716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800371a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <HAL_Init+0x40>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a0a      	ldr	r2, [pc, #40]	; (800374c <HAL_Init+0x40>)
 8003722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003726:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003728:	4b08      	ldr	r3, [pc, #32]	; (800374c <HAL_Init+0x40>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a07      	ldr	r2, [pc, #28]	; (800374c <HAL_Init+0x40>)
 800372e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003732:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003734:	2003      	movs	r0, #3
 8003736:	f000 f8fc 	bl	8003932 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800373a:	2000      	movs	r0, #0
 800373c:	f7fe fb36 	bl	8001dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003740:	f7fe fb08 	bl	8001d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40023c00 	.word	0x40023c00

08003750 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <HAL_IncTick+0x20>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	461a      	mov	r2, r3
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <HAL_IncTick+0x24>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4413      	add	r3, r2
 8003760:	4a04      	ldr	r2, [pc, #16]	; (8003774 <HAL_IncTick+0x24>)
 8003762:	6013      	str	r3, [r2, #0]
}
 8003764:	bf00      	nop
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	20000074 	.word	0x20000074
 8003774:	2000afa8 	.word	0x2000afa8

08003778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  return uwTick;
 800377c:	4b03      	ldr	r3, [pc, #12]	; (800378c <HAL_GetTick+0x14>)
 800377e:	681b      	ldr	r3, [r3, #0]
}
 8003780:	4618      	mov	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	2000afa8 	.word	0x2000afa8

08003790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003798:	f7ff ffee 	bl	8003778 <HAL_GetTick>
 800379c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a8:	d005      	beq.n	80037b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037aa:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <HAL_Delay+0x44>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4413      	add	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037b6:	bf00      	nop
 80037b8:	f7ff ffde 	bl	8003778 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d8f7      	bhi.n	80037b8 <HAL_Delay+0x28>
  {
  }
}
 80037c8:	bf00      	nop
 80037ca:	bf00      	nop
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000074 	.word	0x20000074

080037d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037e8:	4b0c      	ldr	r3, [pc, #48]	; (800381c <__NVIC_SetPriorityGrouping+0x44>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037f4:	4013      	ands	r3, r2
 80037f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800380a:	4a04      	ldr	r2, [pc, #16]	; (800381c <__NVIC_SetPriorityGrouping+0x44>)
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	60d3      	str	r3, [r2, #12]
}
 8003810:	bf00      	nop
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	e000ed00 	.word	0xe000ed00

08003820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003824:	4b04      	ldr	r3, [pc, #16]	; (8003838 <__NVIC_GetPriorityGrouping+0x18>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	0a1b      	lsrs	r3, r3, #8
 800382a:	f003 0307 	and.w	r3, r3, #7
}
 800382e:	4618      	mov	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384a:	2b00      	cmp	r3, #0
 800384c:	db0b      	blt.n	8003866 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	f003 021f 	and.w	r2, r3, #31
 8003854:	4907      	ldr	r1, [pc, #28]	; (8003874 <__NVIC_EnableIRQ+0x38>)
 8003856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	2001      	movs	r0, #1
 800385e:	fa00 f202 	lsl.w	r2, r0, r2
 8003862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	e000e100 	.word	0xe000e100

08003878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	6039      	str	r1, [r7, #0]
 8003882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003888:	2b00      	cmp	r3, #0
 800388a:	db0a      	blt.n	80038a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	b2da      	uxtb	r2, r3
 8003890:	490c      	ldr	r1, [pc, #48]	; (80038c4 <__NVIC_SetPriority+0x4c>)
 8003892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003896:	0112      	lsls	r2, r2, #4
 8003898:	b2d2      	uxtb	r2, r2
 800389a:	440b      	add	r3, r1
 800389c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038a0:	e00a      	b.n	80038b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	4908      	ldr	r1, [pc, #32]	; (80038c8 <__NVIC_SetPriority+0x50>)
 80038a8:	79fb      	ldrb	r3, [r7, #7]
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	3b04      	subs	r3, #4
 80038b0:	0112      	lsls	r2, r2, #4
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	440b      	add	r3, r1
 80038b6:	761a      	strb	r2, [r3, #24]
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	e000e100 	.word	0xe000e100
 80038c8:	e000ed00 	.word	0xe000ed00

080038cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b089      	sub	sp, #36	; 0x24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f1c3 0307 	rsb	r3, r3, #7
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	bf28      	it	cs
 80038ea:	2304      	movcs	r3, #4
 80038ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	3304      	adds	r3, #4
 80038f2:	2b06      	cmp	r3, #6
 80038f4:	d902      	bls.n	80038fc <NVIC_EncodePriority+0x30>
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	3b03      	subs	r3, #3
 80038fa:	e000      	b.n	80038fe <NVIC_EncodePriority+0x32>
 80038fc:	2300      	movs	r3, #0
 80038fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003900:	f04f 32ff 	mov.w	r2, #4294967295
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	43da      	mvns	r2, r3
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	401a      	ands	r2, r3
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003914:	f04f 31ff 	mov.w	r1, #4294967295
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	fa01 f303 	lsl.w	r3, r1, r3
 800391e:	43d9      	mvns	r1, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003924:	4313      	orrs	r3, r2
         );
}
 8003926:	4618      	mov	r0, r3
 8003928:	3724      	adds	r7, #36	; 0x24
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7ff ff4c 	bl	80037d8 <__NVIC_SetPriorityGrouping>
}
 8003940:	bf00      	nop
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800395a:	f7ff ff61 	bl	8003820 <__NVIC_GetPriorityGrouping>
 800395e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	68b9      	ldr	r1, [r7, #8]
 8003964:	6978      	ldr	r0, [r7, #20]
 8003966:	f7ff ffb1 	bl	80038cc <NVIC_EncodePriority>
 800396a:	4602      	mov	r2, r0
 800396c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003970:	4611      	mov	r1, r2
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff ff80 	bl	8003878 <__NVIC_SetPriority>
}
 8003978:	bf00      	nop
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800398a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff ff54 	bl	800383c <__NVIC_EnableIRQ>
}
 8003994:	bf00      	nop
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e00e      	b.n	80039cc <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	795b      	ldrb	r3, [r3, #5]
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d105      	bne.n	80039c4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fc ff52 	bl	8000868 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039e2:	f7ff fec9 	bl	8003778 <HAL_GetTick>
 80039e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d008      	beq.n	8003a06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2280      	movs	r2, #128	; 0x80
 80039f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e052      	b.n	8003aac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0216 	bic.w	r2, r2, #22
 8003a14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695a      	ldr	r2, [r3, #20]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d103      	bne.n	8003a36 <HAL_DMA_Abort+0x62>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d007      	beq.n	8003a46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0208 	bic.w	r2, r2, #8
 8003a44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0201 	bic.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a56:	e013      	b.n	8003a80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a58:	f7ff fe8e 	bl	8003778 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b05      	cmp	r3, #5
 8003a64:	d90c      	bls.n	8003a80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2203      	movs	r2, #3
 8003a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e015      	b.n	8003aac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1e4      	bne.n	8003a58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a92:	223f      	movs	r2, #63	; 0x3f
 8003a94:	409a      	lsls	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d004      	beq.n	8003ad2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2280      	movs	r2, #128	; 0x80
 8003acc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e00c      	b.n	8003aec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2205      	movs	r2, #5
 8003ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0201 	bic.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e03b      	b.n	8003b82 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7fd f828 	bl	8000b74 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b48:	f023 0107 	bic.w	r1, r3, #7
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b62:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	68d1      	ldr	r1, [r2, #12]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6812      	ldr	r2, [r2, #0]
 8003b6e:	430b      	orrs	r3, r1
 8003b70:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b084      	sub	sp, #16
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d026      	beq.n	8003bfa <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d021      	beq.n	8003bfa <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bc4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bca:	f043 0201 	orr.w	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2204      	movs	r2, #4
 8003bde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f003 0320 	and.w	r3, r3, #32
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d026      	beq.n	8003c52 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d021      	beq.n	8003c52 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c1c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2220      	movs	r2, #32
 8003c24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2a:	f043 0202 	orr.w	r2, r3, #2
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2204      	movs	r2, #4
 8003c36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d026      	beq.n	8003caa <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d021      	beq.n	8003caa <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c74:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2208      	movs	r2, #8
 8003c7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c82:	f043 0204 	orr.w	r2, r3, #4
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2204      	movs	r2, #4
 8003c8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d013      	beq.n	8003cdc <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00e      	beq.n	8003cdc <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ccc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2204      	movs	r2, #4
 8003cd4:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f853 	bl	8003d82 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d024      	beq.n	8003d30 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d01f      	beq.n	8003d30 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003cfe:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2202      	movs	r2, #2
 8003d06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f003 0310 	and.w	r3, r3, #16
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d01f      	beq.n	8003d7a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d01a      	beq.n	8003d7a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d52:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2210      	movs	r2, #16
 8003d5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f80e 	bl	8003d96 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003d7a:	bf00      	nop
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
	...

08003dac <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d101      	bne.n	8003dcc <HAL_DMA2D_ConfigLayer+0x20>
 8003dc8:	2302      	movs	r3, #2
 8003dca:	e079      	b.n	8003ec0 <HAL_DMA2D_ConfigLayer+0x114>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	3318      	adds	r3, #24
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	4413      	add	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	041b      	lsls	r3, r3, #16
 8003df2:	4313      	orrs	r3, r2
 8003df4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003df6:	4b35      	ldr	r3, [pc, #212]	; (8003ecc <HAL_DMA2D_ConfigLayer+0x120>)
 8003df8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b0a      	cmp	r3, #10
 8003e00:	d003      	beq.n	8003e0a <HAL_DMA2D_ConfigLayer+0x5e>
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b09      	cmp	r3, #9
 8003e08:	d107      	bne.n	8003e1a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	e005      	b.n	8003e26 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	061b      	lsls	r3, r3, #24
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d120      	bne.n	8003e6e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	43db      	mvns	r3, r3
 8003e36:	ea02 0103 	and.w	r1, r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	6812      	ldr	r2, [r2, #0]
 8003e4c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b0a      	cmp	r3, #10
 8003e54:	d003      	beq.n	8003e5e <HAL_DMA2D_ConfigLayer+0xb2>
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b09      	cmp	r3, #9
 8003e5c:	d127      	bne.n	8003eae <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003e6a:	629a      	str	r2, [r3, #40]	; 0x28
 8003e6c:	e01f      	b.n	8003eae <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	69da      	ldr	r2, [r3, #28]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	43db      	mvns	r3, r3
 8003e78:	ea02 0103 	and.w	r1, r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	6812      	ldr	r2, [r2, #0]
 8003e8e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2b0a      	cmp	r3, #10
 8003e96:	d003      	beq.n	8003ea0 <HAL_DMA2D_ConfigLayer+0xf4>
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b09      	cmp	r3, #9
 8003e9e:	d106      	bne.n	8003eae <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003eac:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	371c      	adds	r7, #28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	ff03000f 	.word	0xff03000f

08003ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b089      	sub	sp, #36	; 0x24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61fb      	str	r3, [r7, #28]
 8003eea:	e177      	b.n	80041dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003eec:	2201      	movs	r2, #1
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	4013      	ands	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	f040 8166 	bne.w	80041d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d005      	beq.n	8003f22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d130      	bne.n	8003f84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	2203      	movs	r2, #3
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	43db      	mvns	r3, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	4013      	ands	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	fa02 f303 	lsl.w	r3, r2, r3
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f58:	2201      	movs	r2, #1
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	43db      	mvns	r3, r3
 8003f62:	69ba      	ldr	r2, [r7, #24]
 8003f64:	4013      	ands	r3, r2
 8003f66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	091b      	lsrs	r3, r3, #4
 8003f6e:	f003 0201 	and.w	r2, r3, #1
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 0303 	and.w	r3, r3, #3
 8003f8c:	2b03      	cmp	r3, #3
 8003f8e:	d017      	beq.n	8003fc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	2203      	movs	r2, #3
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f003 0303 	and.w	r3, r3, #3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d123      	bne.n	8004014 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	08da      	lsrs	r2, r3, #3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3208      	adds	r2, #8
 8003fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	220f      	movs	r2, #15
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4013      	ands	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	691a      	ldr	r2, [r3, #16]
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4313      	orrs	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	08da      	lsrs	r2, r3, #3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3208      	adds	r2, #8
 800400e:	69b9      	ldr	r1, [r7, #24]
 8004010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	2203      	movs	r2, #3
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	43db      	mvns	r3, r3
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4013      	ands	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f003 0203 	and.w	r2, r3, #3
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	4313      	orrs	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 80c0 	beq.w	80041d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	4b66      	ldr	r3, [pc, #408]	; (80041f4 <HAL_GPIO_Init+0x324>)
 800405c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405e:	4a65      	ldr	r2, [pc, #404]	; (80041f4 <HAL_GPIO_Init+0x324>)
 8004060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004064:	6453      	str	r3, [r2, #68]	; 0x44
 8004066:	4b63      	ldr	r3, [pc, #396]	; (80041f4 <HAL_GPIO_Init+0x324>)
 8004068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004072:	4a61      	ldr	r2, [pc, #388]	; (80041f8 <HAL_GPIO_Init+0x328>)
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	089b      	lsrs	r3, r3, #2
 8004078:	3302      	adds	r3, #2
 800407a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800407e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	220f      	movs	r2, #15
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	43db      	mvns	r3, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4013      	ands	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a58      	ldr	r2, [pc, #352]	; (80041fc <HAL_GPIO_Init+0x32c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d037      	beq.n	800410e <HAL_GPIO_Init+0x23e>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a57      	ldr	r2, [pc, #348]	; (8004200 <HAL_GPIO_Init+0x330>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d031      	beq.n	800410a <HAL_GPIO_Init+0x23a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a56      	ldr	r2, [pc, #344]	; (8004204 <HAL_GPIO_Init+0x334>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d02b      	beq.n	8004106 <HAL_GPIO_Init+0x236>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a55      	ldr	r2, [pc, #340]	; (8004208 <HAL_GPIO_Init+0x338>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d025      	beq.n	8004102 <HAL_GPIO_Init+0x232>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a54      	ldr	r2, [pc, #336]	; (800420c <HAL_GPIO_Init+0x33c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d01f      	beq.n	80040fe <HAL_GPIO_Init+0x22e>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a53      	ldr	r2, [pc, #332]	; (8004210 <HAL_GPIO_Init+0x340>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d019      	beq.n	80040fa <HAL_GPIO_Init+0x22a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a52      	ldr	r2, [pc, #328]	; (8004214 <HAL_GPIO_Init+0x344>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d013      	beq.n	80040f6 <HAL_GPIO_Init+0x226>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a51      	ldr	r2, [pc, #324]	; (8004218 <HAL_GPIO_Init+0x348>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00d      	beq.n	80040f2 <HAL_GPIO_Init+0x222>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a50      	ldr	r2, [pc, #320]	; (800421c <HAL_GPIO_Init+0x34c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d007      	beq.n	80040ee <HAL_GPIO_Init+0x21e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a4f      	ldr	r2, [pc, #316]	; (8004220 <HAL_GPIO_Init+0x350>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d101      	bne.n	80040ea <HAL_GPIO_Init+0x21a>
 80040e6:	2309      	movs	r3, #9
 80040e8:	e012      	b.n	8004110 <HAL_GPIO_Init+0x240>
 80040ea:	230a      	movs	r3, #10
 80040ec:	e010      	b.n	8004110 <HAL_GPIO_Init+0x240>
 80040ee:	2308      	movs	r3, #8
 80040f0:	e00e      	b.n	8004110 <HAL_GPIO_Init+0x240>
 80040f2:	2307      	movs	r3, #7
 80040f4:	e00c      	b.n	8004110 <HAL_GPIO_Init+0x240>
 80040f6:	2306      	movs	r3, #6
 80040f8:	e00a      	b.n	8004110 <HAL_GPIO_Init+0x240>
 80040fa:	2305      	movs	r3, #5
 80040fc:	e008      	b.n	8004110 <HAL_GPIO_Init+0x240>
 80040fe:	2304      	movs	r3, #4
 8004100:	e006      	b.n	8004110 <HAL_GPIO_Init+0x240>
 8004102:	2303      	movs	r3, #3
 8004104:	e004      	b.n	8004110 <HAL_GPIO_Init+0x240>
 8004106:	2302      	movs	r3, #2
 8004108:	e002      	b.n	8004110 <HAL_GPIO_Init+0x240>
 800410a:	2301      	movs	r3, #1
 800410c:	e000      	b.n	8004110 <HAL_GPIO_Init+0x240>
 800410e:	2300      	movs	r3, #0
 8004110:	69fa      	ldr	r2, [r7, #28]
 8004112:	f002 0203 	and.w	r2, r2, #3
 8004116:	0092      	lsls	r2, r2, #2
 8004118:	4093      	lsls	r3, r2
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	4313      	orrs	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004120:	4935      	ldr	r1, [pc, #212]	; (80041f8 <HAL_GPIO_Init+0x328>)
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	089b      	lsrs	r3, r3, #2
 8004126:	3302      	adds	r3, #2
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800412e:	4b3d      	ldr	r3, [pc, #244]	; (8004224 <HAL_GPIO_Init+0x354>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	43db      	mvns	r3, r3
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	4013      	ands	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	4313      	orrs	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004152:	4a34      	ldr	r2, [pc, #208]	; (8004224 <HAL_GPIO_Init+0x354>)
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004158:	4b32      	ldr	r3, [pc, #200]	; (8004224 <HAL_GPIO_Init+0x354>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	43db      	mvns	r3, r3
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	4013      	ands	r3, r2
 8004166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800417c:	4a29      	ldr	r2, [pc, #164]	; (8004224 <HAL_GPIO_Init+0x354>)
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004182:	4b28      	ldr	r3, [pc, #160]	; (8004224 <HAL_GPIO_Init+0x354>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	43db      	mvns	r3, r3
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	4013      	ands	r3, r2
 8004190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041a6:	4a1f      	ldr	r2, [pc, #124]	; (8004224 <HAL_GPIO_Init+0x354>)
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041ac:	4b1d      	ldr	r3, [pc, #116]	; (8004224 <HAL_GPIO_Init+0x354>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	43db      	mvns	r3, r3
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	4013      	ands	r3, r2
 80041ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041d0:	4a14      	ldr	r2, [pc, #80]	; (8004224 <HAL_GPIO_Init+0x354>)
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	3301      	adds	r3, #1
 80041da:	61fb      	str	r3, [r7, #28]
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	2b0f      	cmp	r3, #15
 80041e0:	f67f ae84 	bls.w	8003eec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041e4:	bf00      	nop
 80041e6:	bf00      	nop
 80041e8:	3724      	adds	r7, #36	; 0x24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40023800 	.word	0x40023800
 80041f8:	40013800 	.word	0x40013800
 80041fc:	40020000 	.word	0x40020000
 8004200:	40020400 	.word	0x40020400
 8004204:	40020800 	.word	0x40020800
 8004208:	40020c00 	.word	0x40020c00
 800420c:	40021000 	.word	0x40021000
 8004210:	40021400 	.word	0x40021400
 8004214:	40021800 	.word	0x40021800
 8004218:	40021c00 	.word	0x40021c00
 800421c:	40022000 	.word	0x40022000
 8004220:	40022400 	.word	0x40022400
 8004224:	40013c00 	.word	0x40013c00

08004228 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004232:	2300      	movs	r3, #0
 8004234:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004236:	2300      	movs	r3, #0
 8004238:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800423a:	2300      	movs	r3, #0
 800423c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800423e:	2300      	movs	r3, #0
 8004240:	617b      	str	r3, [r7, #20]
 8004242:	e0d9      	b.n	80043f8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004244:	2201      	movs	r2, #1
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	fa02 f303 	lsl.w	r3, r2, r3
 800424c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	4013      	ands	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	429a      	cmp	r2, r3
 800425c:	f040 80c9 	bne.w	80043f2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004260:	4a6b      	ldr	r2, [pc, #428]	; (8004410 <HAL_GPIO_DeInit+0x1e8>)
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	089b      	lsrs	r3, r3, #2
 8004266:	3302      	adds	r3, #2
 8004268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800426c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f003 0303 	and.w	r3, r3, #3
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	220f      	movs	r2, #15
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	4013      	ands	r3, r2
 8004280:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a63      	ldr	r2, [pc, #396]	; (8004414 <HAL_GPIO_DeInit+0x1ec>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d037      	beq.n	80042fa <HAL_GPIO_DeInit+0xd2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a62      	ldr	r2, [pc, #392]	; (8004418 <HAL_GPIO_DeInit+0x1f0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d031      	beq.n	80042f6 <HAL_GPIO_DeInit+0xce>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a61      	ldr	r2, [pc, #388]	; (800441c <HAL_GPIO_DeInit+0x1f4>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d02b      	beq.n	80042f2 <HAL_GPIO_DeInit+0xca>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a60      	ldr	r2, [pc, #384]	; (8004420 <HAL_GPIO_DeInit+0x1f8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d025      	beq.n	80042ee <HAL_GPIO_DeInit+0xc6>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a5f      	ldr	r2, [pc, #380]	; (8004424 <HAL_GPIO_DeInit+0x1fc>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d01f      	beq.n	80042ea <HAL_GPIO_DeInit+0xc2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a5e      	ldr	r2, [pc, #376]	; (8004428 <HAL_GPIO_DeInit+0x200>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d019      	beq.n	80042e6 <HAL_GPIO_DeInit+0xbe>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a5d      	ldr	r2, [pc, #372]	; (800442c <HAL_GPIO_DeInit+0x204>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d013      	beq.n	80042e2 <HAL_GPIO_DeInit+0xba>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a5c      	ldr	r2, [pc, #368]	; (8004430 <HAL_GPIO_DeInit+0x208>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00d      	beq.n	80042de <HAL_GPIO_DeInit+0xb6>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a5b      	ldr	r2, [pc, #364]	; (8004434 <HAL_GPIO_DeInit+0x20c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d007      	beq.n	80042da <HAL_GPIO_DeInit+0xb2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a5a      	ldr	r2, [pc, #360]	; (8004438 <HAL_GPIO_DeInit+0x210>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d101      	bne.n	80042d6 <HAL_GPIO_DeInit+0xae>
 80042d2:	2309      	movs	r3, #9
 80042d4:	e012      	b.n	80042fc <HAL_GPIO_DeInit+0xd4>
 80042d6:	230a      	movs	r3, #10
 80042d8:	e010      	b.n	80042fc <HAL_GPIO_DeInit+0xd4>
 80042da:	2308      	movs	r3, #8
 80042dc:	e00e      	b.n	80042fc <HAL_GPIO_DeInit+0xd4>
 80042de:	2307      	movs	r3, #7
 80042e0:	e00c      	b.n	80042fc <HAL_GPIO_DeInit+0xd4>
 80042e2:	2306      	movs	r3, #6
 80042e4:	e00a      	b.n	80042fc <HAL_GPIO_DeInit+0xd4>
 80042e6:	2305      	movs	r3, #5
 80042e8:	e008      	b.n	80042fc <HAL_GPIO_DeInit+0xd4>
 80042ea:	2304      	movs	r3, #4
 80042ec:	e006      	b.n	80042fc <HAL_GPIO_DeInit+0xd4>
 80042ee:	2303      	movs	r3, #3
 80042f0:	e004      	b.n	80042fc <HAL_GPIO_DeInit+0xd4>
 80042f2:	2302      	movs	r3, #2
 80042f4:	e002      	b.n	80042fc <HAL_GPIO_DeInit+0xd4>
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <HAL_GPIO_DeInit+0xd4>
 80042fa:	2300      	movs	r3, #0
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	f002 0203 	and.w	r2, r2, #3
 8004302:	0092      	lsls	r2, r2, #2
 8004304:	4093      	lsls	r3, r2
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	429a      	cmp	r2, r3
 800430a:	d132      	bne.n	8004372 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800430c:	4b4b      	ldr	r3, [pc, #300]	; (800443c <HAL_GPIO_DeInit+0x214>)
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	43db      	mvns	r3, r3
 8004314:	4949      	ldr	r1, [pc, #292]	; (800443c <HAL_GPIO_DeInit+0x214>)
 8004316:	4013      	ands	r3, r2
 8004318:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800431a:	4b48      	ldr	r3, [pc, #288]	; (800443c <HAL_GPIO_DeInit+0x214>)
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	43db      	mvns	r3, r3
 8004322:	4946      	ldr	r1, [pc, #280]	; (800443c <HAL_GPIO_DeInit+0x214>)
 8004324:	4013      	ands	r3, r2
 8004326:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004328:	4b44      	ldr	r3, [pc, #272]	; (800443c <HAL_GPIO_DeInit+0x214>)
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	43db      	mvns	r3, r3
 8004330:	4942      	ldr	r1, [pc, #264]	; (800443c <HAL_GPIO_DeInit+0x214>)
 8004332:	4013      	ands	r3, r2
 8004334:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004336:	4b41      	ldr	r3, [pc, #260]	; (800443c <HAL_GPIO_DeInit+0x214>)
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	43db      	mvns	r3, r3
 800433e:	493f      	ldr	r1, [pc, #252]	; (800443c <HAL_GPIO_DeInit+0x214>)
 8004340:	4013      	ands	r3, r2
 8004342:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	220f      	movs	r2, #15
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004354:	4a2e      	ldr	r2, [pc, #184]	; (8004410 <HAL_GPIO_DeInit+0x1e8>)
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	089b      	lsrs	r3, r3, #2
 800435a:	3302      	adds	r3, #2
 800435c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	43da      	mvns	r2, r3
 8004364:	482a      	ldr	r0, [pc, #168]	; (8004410 <HAL_GPIO_DeInit+0x1e8>)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	089b      	lsrs	r3, r3, #2
 800436a:	400a      	ands	r2, r1
 800436c:	3302      	adds	r3, #2
 800436e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	2103      	movs	r1, #3
 800437c:	fa01 f303 	lsl.w	r3, r1, r3
 8004380:	43db      	mvns	r3, r3
 8004382:	401a      	ands	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	08da      	lsrs	r2, r3, #3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3208      	adds	r2, #8
 8004390:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	220f      	movs	r2, #15
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	43db      	mvns	r3, r3
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	08d2      	lsrs	r2, r2, #3
 80043a8:	4019      	ands	r1, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3208      	adds	r2, #8
 80043ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	2103      	movs	r1, #3
 80043bc:	fa01 f303 	lsl.w	r3, r1, r3
 80043c0:	43db      	mvns	r3, r3
 80043c2:	401a      	ands	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	2101      	movs	r1, #1
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	fa01 f303 	lsl.w	r3, r1, r3
 80043d4:	43db      	mvns	r3, r3
 80043d6:	401a      	ands	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	2103      	movs	r1, #3
 80043e6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ea:	43db      	mvns	r3, r3
 80043ec:	401a      	ands	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	3301      	adds	r3, #1
 80043f6:	617b      	str	r3, [r7, #20]
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	2b0f      	cmp	r3, #15
 80043fc:	f67f af22 	bls.w	8004244 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004400:	bf00      	nop
 8004402:	bf00      	nop
 8004404:	371c      	adds	r7, #28
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	40013800 	.word	0x40013800
 8004414:	40020000 	.word	0x40020000
 8004418:	40020400 	.word	0x40020400
 800441c:	40020800 	.word	0x40020800
 8004420:	40020c00 	.word	0x40020c00
 8004424:	40021000 	.word	0x40021000
 8004428:	40021400 	.word	0x40021400
 800442c:	40021800 	.word	0x40021800
 8004430:	40021c00 	.word	0x40021c00
 8004434:	40022000 	.word	0x40022000
 8004438:	40022400 	.word	0x40022400
 800443c:	40013c00 	.word	0x40013c00

08004440 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	460b      	mov	r3, r1
 800444a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691a      	ldr	r2, [r3, #16]
 8004450:	887b      	ldrh	r3, [r7, #2]
 8004452:	4013      	ands	r3, r2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004458:	2301      	movs	r3, #1
 800445a:	73fb      	strb	r3, [r7, #15]
 800445c:	e001      	b.n	8004462 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800445e:	2300      	movs	r3, #0
 8004460:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004462:	7bfb      	ldrb	r3, [r7, #15]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	807b      	strh	r3, [r7, #2]
 800447c:	4613      	mov	r3, r2
 800447e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004480:	787b      	ldrb	r3, [r7, #1]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004486:	887a      	ldrh	r2, [r7, #2]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800448c:	e003      	b.n	8004496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800448e:	887b      	ldrh	r3, [r7, #2]
 8004490:	041a      	lsls	r2, r3, #16
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	619a      	str	r2, [r3, #24]
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b085      	sub	sp, #20
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	460b      	mov	r3, r1
 80044ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044b4:	887a      	ldrh	r2, [r7, #2]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	4013      	ands	r3, r2
 80044ba:	041a      	lsls	r2, r3, #16
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	43d9      	mvns	r1, r3
 80044c0:	887b      	ldrh	r3, [r7, #2]
 80044c2:	400b      	ands	r3, r1
 80044c4:	431a      	orrs	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	619a      	str	r2, [r3, #24]
}
 80044ca:	bf00      	nop
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
	...

080044d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e12b      	b.n	8004742 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d106      	bne.n	8004504 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7fc ff54 	bl	80013ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2224      	movs	r2, #36	; 0x24
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0201 	bic.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800452a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800453a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800453c:	f002 f826 	bl	800658c <HAL_RCC_GetPCLK1Freq>
 8004540:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	4a81      	ldr	r2, [pc, #516]	; (800474c <HAL_I2C_Init+0x274>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d807      	bhi.n	800455c <HAL_I2C_Init+0x84>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4a80      	ldr	r2, [pc, #512]	; (8004750 <HAL_I2C_Init+0x278>)
 8004550:	4293      	cmp	r3, r2
 8004552:	bf94      	ite	ls
 8004554:	2301      	movls	r3, #1
 8004556:	2300      	movhi	r3, #0
 8004558:	b2db      	uxtb	r3, r3
 800455a:	e006      	b.n	800456a <HAL_I2C_Init+0x92>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4a7d      	ldr	r2, [pc, #500]	; (8004754 <HAL_I2C_Init+0x27c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	bf94      	ite	ls
 8004564:	2301      	movls	r3, #1
 8004566:	2300      	movhi	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e0e7      	b.n	8004742 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4a78      	ldr	r2, [pc, #480]	; (8004758 <HAL_I2C_Init+0x280>)
 8004576:	fba2 2303 	umull	r2, r3, r2, r3
 800457a:	0c9b      	lsrs	r3, r3, #18
 800457c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	4a6a      	ldr	r2, [pc, #424]	; (800474c <HAL_I2C_Init+0x274>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d802      	bhi.n	80045ac <HAL_I2C_Init+0xd4>
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	3301      	adds	r3, #1
 80045aa:	e009      	b.n	80045c0 <HAL_I2C_Init+0xe8>
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045b2:	fb02 f303 	mul.w	r3, r2, r3
 80045b6:	4a69      	ldr	r2, [pc, #420]	; (800475c <HAL_I2C_Init+0x284>)
 80045b8:	fba2 2303 	umull	r2, r3, r2, r3
 80045bc:	099b      	lsrs	r3, r3, #6
 80045be:	3301      	adds	r3, #1
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6812      	ldr	r2, [r2, #0]
 80045c4:	430b      	orrs	r3, r1
 80045c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	495c      	ldr	r1, [pc, #368]	; (800474c <HAL_I2C_Init+0x274>)
 80045dc:	428b      	cmp	r3, r1
 80045de:	d819      	bhi.n	8004614 <HAL_I2C_Init+0x13c>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	1e59      	subs	r1, r3, #1
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80045ee:	1c59      	adds	r1, r3, #1
 80045f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045f4:	400b      	ands	r3, r1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <HAL_I2C_Init+0x138>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	1e59      	subs	r1, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	fbb1 f3f3 	udiv	r3, r1, r3
 8004608:	3301      	adds	r3, #1
 800460a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800460e:	e051      	b.n	80046b4 <HAL_I2C_Init+0x1dc>
 8004610:	2304      	movs	r3, #4
 8004612:	e04f      	b.n	80046b4 <HAL_I2C_Init+0x1dc>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d111      	bne.n	8004640 <HAL_I2C_Init+0x168>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	1e58      	subs	r0, r3, #1
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6859      	ldr	r1, [r3, #4]
 8004624:	460b      	mov	r3, r1
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	440b      	add	r3, r1
 800462a:	fbb0 f3f3 	udiv	r3, r0, r3
 800462e:	3301      	adds	r3, #1
 8004630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004634:	2b00      	cmp	r3, #0
 8004636:	bf0c      	ite	eq
 8004638:	2301      	moveq	r3, #1
 800463a:	2300      	movne	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	e012      	b.n	8004666 <HAL_I2C_Init+0x18e>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	1e58      	subs	r0, r3, #1
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6859      	ldr	r1, [r3, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	0099      	lsls	r1, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	fbb0 f3f3 	udiv	r3, r0, r3
 8004656:	3301      	adds	r3, #1
 8004658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800465c:	2b00      	cmp	r3, #0
 800465e:	bf0c      	ite	eq
 8004660:	2301      	moveq	r3, #1
 8004662:	2300      	movne	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <HAL_I2C_Init+0x196>
 800466a:	2301      	movs	r3, #1
 800466c:	e022      	b.n	80046b4 <HAL_I2C_Init+0x1dc>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10e      	bne.n	8004694 <HAL_I2C_Init+0x1bc>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	1e58      	subs	r0, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6859      	ldr	r1, [r3, #4]
 800467e:	460b      	mov	r3, r1
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	440b      	add	r3, r1
 8004684:	fbb0 f3f3 	udiv	r3, r0, r3
 8004688:	3301      	adds	r3, #1
 800468a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800468e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004692:	e00f      	b.n	80046b4 <HAL_I2C_Init+0x1dc>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	1e58      	subs	r0, r3, #1
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6859      	ldr	r1, [r3, #4]
 800469c:	460b      	mov	r3, r1
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	0099      	lsls	r1, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046aa:	3301      	adds	r3, #1
 80046ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	6809      	ldr	r1, [r1, #0]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69da      	ldr	r2, [r3, #28]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80046e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6911      	ldr	r1, [r2, #16]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	68d2      	ldr	r2, [r2, #12]
 80046ee:	4311      	orrs	r1, r2
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6812      	ldr	r2, [r2, #0]
 80046f4:	430b      	orrs	r3, r1
 80046f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695a      	ldr	r2, [r3, #20]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0201 	orr.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	000186a0 	.word	0x000186a0
 8004750:	001e847f 	.word	0x001e847f
 8004754:	003d08ff 	.word	0x003d08ff
 8004758:	431bde83 	.word	0x431bde83
 800475c:	10624dd3 	.word	0x10624dd3

08004760 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e021      	b.n	80047b6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2224      	movs	r2, #36	; 0x24
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0201 	bic.w	r2, r2, #1
 8004788:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fc fe78 	bl	8001480 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b088      	sub	sp, #32
 80047c4:	af02      	add	r7, sp, #8
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	4608      	mov	r0, r1
 80047ca:	4611      	mov	r1, r2
 80047cc:	461a      	mov	r2, r3
 80047ce:	4603      	mov	r3, r0
 80047d0:	817b      	strh	r3, [r7, #10]
 80047d2:	460b      	mov	r3, r1
 80047d4:	813b      	strh	r3, [r7, #8]
 80047d6:	4613      	mov	r3, r2
 80047d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047da:	f7fe ffcd 	bl	8003778 <HAL_GetTick>
 80047de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b20      	cmp	r3, #32
 80047ea:	f040 80d9 	bne.w	80049a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	2319      	movs	r3, #25
 80047f4:	2201      	movs	r2, #1
 80047f6:	496d      	ldr	r1, [pc, #436]	; (80049ac <HAL_I2C_Mem_Write+0x1ec>)
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 fc8d 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004804:	2302      	movs	r3, #2
 8004806:	e0cc      	b.n	80049a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800480e:	2b01      	cmp	r3, #1
 8004810:	d101      	bne.n	8004816 <HAL_I2C_Mem_Write+0x56>
 8004812:	2302      	movs	r3, #2
 8004814:	e0c5      	b.n	80049a2 <HAL_I2C_Mem_Write+0x1e2>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b01      	cmp	r3, #1
 800482a:	d007      	beq.n	800483c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800484a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2221      	movs	r2, #33	; 0x21
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2240      	movs	r2, #64	; 0x40
 8004858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6a3a      	ldr	r2, [r7, #32]
 8004866:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800486c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004872:	b29a      	uxth	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4a4d      	ldr	r2, [pc, #308]	; (80049b0 <HAL_I2C_Mem_Write+0x1f0>)
 800487c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800487e:	88f8      	ldrh	r0, [r7, #6]
 8004880:	893a      	ldrh	r2, [r7, #8]
 8004882:	8979      	ldrh	r1, [r7, #10]
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	4603      	mov	r3, r0
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 fac4 	bl	8004e1c <I2C_RequestMemoryWrite>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d052      	beq.n	8004940 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e081      	b.n	80049a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 fd0e 	bl	80052c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00d      	beq.n	80048ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d107      	bne.n	80048c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e06b      	b.n	80049a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	781a      	ldrb	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b04      	cmp	r3, #4
 8004906:	d11b      	bne.n	8004940 <HAL_I2C_Mem_Write+0x180>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800490c:	2b00      	cmp	r3, #0
 800490e:	d017      	beq.n	8004940 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	781a      	ldrb	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	1c5a      	adds	r2, r3, #1
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800492a:	3b01      	subs	r3, #1
 800492c:	b29a      	uxth	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004936:	b29b      	uxth	r3, r3
 8004938:	3b01      	subs	r3, #1
 800493a:	b29a      	uxth	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1aa      	bne.n	800489e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 fcfa 	bl	8005346 <I2C_WaitOnBTFFlagUntilTimeout>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00d      	beq.n	8004974 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495c:	2b04      	cmp	r3, #4
 800495e:	d107      	bne.n	8004970 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800496e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e016      	b.n	80049a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004982:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	e000      	b.n	80049a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80049a0:	2302      	movs	r3, #2
  }
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	00100002 	.word	0x00100002
 80049b0:	ffff0000 	.word	0xffff0000

080049b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08c      	sub	sp, #48	; 0x30
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	4608      	mov	r0, r1
 80049be:	4611      	mov	r1, r2
 80049c0:	461a      	mov	r2, r3
 80049c2:	4603      	mov	r3, r0
 80049c4:	817b      	strh	r3, [r7, #10]
 80049c6:	460b      	mov	r3, r1
 80049c8:	813b      	strh	r3, [r7, #8]
 80049ca:	4613      	mov	r3, r2
 80049cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049ce:	f7fe fed3 	bl	8003778 <HAL_GetTick>
 80049d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b20      	cmp	r3, #32
 80049de:	f040 8208 	bne.w	8004df2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	2319      	movs	r3, #25
 80049e8:	2201      	movs	r2, #1
 80049ea:	497b      	ldr	r1, [pc, #492]	; (8004bd8 <HAL_I2C_Mem_Read+0x224>)
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 fb93 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80049f8:	2302      	movs	r3, #2
 80049fa:	e1fb      	b.n	8004df4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d101      	bne.n	8004a0a <HAL_I2C_Mem_Read+0x56>
 8004a06:	2302      	movs	r3, #2
 8004a08:	e1f4      	b.n	8004df4 <HAL_I2C_Mem_Read+0x440>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d007      	beq.n	8004a30 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0201 	orr.w	r2, r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2222      	movs	r2, #34	; 0x22
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2240      	movs	r2, #64	; 0x40
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004a60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4a5b      	ldr	r2, [pc, #364]	; (8004bdc <HAL_I2C_Mem_Read+0x228>)
 8004a70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a72:	88f8      	ldrh	r0, [r7, #6]
 8004a74:	893a      	ldrh	r2, [r7, #8]
 8004a76:	8979      	ldrh	r1, [r7, #10]
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	9301      	str	r3, [sp, #4]
 8004a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	4603      	mov	r3, r0
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 fa60 	bl	8004f48 <I2C_RequestMemoryRead>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e1b0      	b.n	8004df4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d113      	bne.n	8004ac2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	623b      	str	r3, [r7, #32]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	623b      	str	r3, [r7, #32]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	623b      	str	r3, [r7, #32]
 8004aae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	e184      	b.n	8004dcc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d11b      	bne.n	8004b02 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ada:	2300      	movs	r3, #0
 8004adc:	61fb      	str	r3, [r7, #28]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	61fb      	str	r3, [r7, #28]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	61fb      	str	r3, [r7, #28]
 8004aee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	e164      	b.n	8004dcc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d11b      	bne.n	8004b42 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61bb      	str	r3, [r7, #24]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	61bb      	str	r3, [r7, #24]
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	e144      	b.n	8004dcc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b42:	2300      	movs	r3, #0
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004b58:	e138      	b.n	8004dcc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5e:	2b03      	cmp	r3, #3
 8004b60:	f200 80f1 	bhi.w	8004d46 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d123      	bne.n	8004bb4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 fc29 	bl	80053c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e139      	b.n	8004df4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691a      	ldr	r2, [r3, #16]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	b2d2      	uxtb	r2, r2
 8004b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bb2:	e10b      	b.n	8004dcc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d14e      	bne.n	8004c5a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	4906      	ldr	r1, [pc, #24]	; (8004be0 <HAL_I2C_Mem_Read+0x22c>)
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 faa6 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d008      	beq.n	8004be4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e10e      	b.n	8004df4 <HAL_I2C_Mem_Read+0x440>
 8004bd6:	bf00      	nop
 8004bd8:	00100002 	.word	0x00100002
 8004bdc:	ffff0000 	.word	0xffff0000
 8004be0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691a      	ldr	r2, [r3, #16]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	1c5a      	adds	r2, r3, #1
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c42:	3b01      	subs	r3, #1
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c58:	e0b8      	b.n	8004dcc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c60:	2200      	movs	r2, #0
 8004c62:	4966      	ldr	r1, [pc, #408]	; (8004dfc <HAL_I2C_Mem_Read+0x448>)
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 fa57 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0bf      	b.n	8004df4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	494f      	ldr	r1, [pc, #316]	; (8004dfc <HAL_I2C_Mem_Read+0x448>)
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 fa29 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e091      	b.n	8004df4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691a      	ldr	r2, [r3, #16]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	691a      	ldr	r2, [r3, #16]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d44:	e042      	b.n	8004dcc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f000 fb3c 	bl	80053c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e04c      	b.n	8004df4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	691a      	ldr	r2, [r3, #16]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d76:	3b01      	subs	r3, #1
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	f003 0304 	and.w	r3, r3, #4
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d118      	bne.n	8004dcc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	691a      	ldr	r2, [r3, #16]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	b2d2      	uxtb	r2, r2
 8004da6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f47f aec2 	bne.w	8004b5a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	e000      	b.n	8004df4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004df2:	2302      	movs	r3, #2
  }
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3728      	adds	r7, #40	; 0x28
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	00010004 	.word	0x00010004

08004e00 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e0e:	b2db      	uxtb	r3, r3
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af02      	add	r7, sp, #8
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	4608      	mov	r0, r1
 8004e26:	4611      	mov	r1, r2
 8004e28:	461a      	mov	r2, r3
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	817b      	strh	r3, [r7, #10]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	813b      	strh	r3, [r7, #8]
 8004e32:	4613      	mov	r3, r2
 8004e34:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 f960 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00d      	beq.n	8004e7a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e6c:	d103      	bne.n	8004e76 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e05f      	b.n	8004f3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e7a:	897b      	ldrh	r3, [r7, #10]
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	461a      	mov	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	6a3a      	ldr	r2, [r7, #32]
 8004e8e:	492d      	ldr	r1, [pc, #180]	; (8004f44 <I2C_RequestMemoryWrite+0x128>)
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 f998 	bl	80051c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d001      	beq.n	8004ea0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e04c      	b.n	8004f3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	617b      	str	r3, [r7, #20]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb8:	6a39      	ldr	r1, [r7, #32]
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 fa02 	bl	80052c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00d      	beq.n	8004ee2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d107      	bne.n	8004ede <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004edc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e02b      	b.n	8004f3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ee2:	88fb      	ldrh	r3, [r7, #6]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d105      	bne.n	8004ef4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ee8:	893b      	ldrh	r3, [r7, #8]
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	611a      	str	r2, [r3, #16]
 8004ef2:	e021      	b.n	8004f38 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ef4:	893b      	ldrh	r3, [r7, #8]
 8004ef6:	0a1b      	lsrs	r3, r3, #8
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f04:	6a39      	ldr	r1, [r7, #32]
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 f9dc 	bl	80052c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00d      	beq.n	8004f2e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d107      	bne.n	8004f2a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e005      	b.n	8004f3a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f2e:	893b      	ldrh	r3, [r7, #8]
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	00010002 	.word	0x00010002

08004f48 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b088      	sub	sp, #32
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	4608      	mov	r0, r1
 8004f52:	4611      	mov	r1, r2
 8004f54:	461a      	mov	r2, r3
 8004f56:	4603      	mov	r3, r0
 8004f58:	817b      	strh	r3, [r7, #10]
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	813b      	strh	r3, [r7, #8]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f70:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 f8c2 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00d      	beq.n	8004fb6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fa8:	d103      	bne.n	8004fb2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fb0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e0aa      	b.n	800510c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fb6:	897b      	ldrh	r3, [r7, #10]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	461a      	mov	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fc4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	6a3a      	ldr	r2, [r7, #32]
 8004fca:	4952      	ldr	r1, [pc, #328]	; (8005114 <I2C_RequestMemoryRead+0x1cc>)
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 f8fa 	bl	80051c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e097      	b.n	800510c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fdc:	2300      	movs	r3, #0
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff4:	6a39      	ldr	r1, [r7, #32]
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 f964 	bl	80052c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00d      	beq.n	800501e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	2b04      	cmp	r3, #4
 8005008:	d107      	bne.n	800501a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005018:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e076      	b.n	800510c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800501e:	88fb      	ldrh	r3, [r7, #6]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d105      	bne.n	8005030 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005024:	893b      	ldrh	r3, [r7, #8]
 8005026:	b2da      	uxtb	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	611a      	str	r2, [r3, #16]
 800502e:	e021      	b.n	8005074 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005030:	893b      	ldrh	r3, [r7, #8]
 8005032:	0a1b      	lsrs	r3, r3, #8
 8005034:	b29b      	uxth	r3, r3
 8005036:	b2da      	uxtb	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800503e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005040:	6a39      	ldr	r1, [r7, #32]
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 f93e 	bl	80052c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00d      	beq.n	800506a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	2b04      	cmp	r3, #4
 8005054:	d107      	bne.n	8005066 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005064:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e050      	b.n	800510c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800506a:	893b      	ldrh	r3, [r7, #8]
 800506c:	b2da      	uxtb	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005076:	6a39      	ldr	r1, [r7, #32]
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 f923 	bl	80052c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00d      	beq.n	80050a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005088:	2b04      	cmp	r3, #4
 800508a:	d107      	bne.n	800509c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800509a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e035      	b.n	800510c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 f82b 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00d      	beq.n	80050e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d6:	d103      	bne.n	80050e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e013      	b.n	800510c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80050e4:	897b      	ldrh	r3, [r7, #10]
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	f043 0301 	orr.w	r3, r3, #1
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	6a3a      	ldr	r2, [r7, #32]
 80050f8:	4906      	ldr	r1, [pc, #24]	; (8005114 <I2C_RequestMemoryRead+0x1cc>)
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f000 f863 	bl	80051c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e000      	b.n	800510c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3718      	adds	r7, #24
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	00010002 	.word	0x00010002

08005118 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	603b      	str	r3, [r7, #0]
 8005124:	4613      	mov	r3, r2
 8005126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005128:	e025      	b.n	8005176 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005130:	d021      	beq.n	8005176 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005132:	f7fe fb21 	bl	8003778 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	429a      	cmp	r2, r3
 8005140:	d302      	bcc.n	8005148 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d116      	bne.n	8005176 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2220      	movs	r2, #32
 8005152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	f043 0220 	orr.w	r2, r3, #32
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e023      	b.n	80051be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	0c1b      	lsrs	r3, r3, #16
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b01      	cmp	r3, #1
 800517e:	d10d      	bne.n	800519c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	43da      	mvns	r2, r3
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	4013      	ands	r3, r2
 800518c:	b29b      	uxth	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	bf0c      	ite	eq
 8005192:	2301      	moveq	r3, #1
 8005194:	2300      	movne	r3, #0
 8005196:	b2db      	uxtb	r3, r3
 8005198:	461a      	mov	r2, r3
 800519a:	e00c      	b.n	80051b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	43da      	mvns	r2, r3
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	4013      	ands	r3, r2
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	bf0c      	ite	eq
 80051ae:	2301      	moveq	r3, #1
 80051b0:	2300      	movne	r3, #0
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	461a      	mov	r2, r3
 80051b6:	79fb      	ldrb	r3, [r7, #7]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d0b6      	beq.n	800512a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b084      	sub	sp, #16
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	60f8      	str	r0, [r7, #12]
 80051ce:	60b9      	str	r1, [r7, #8]
 80051d0:	607a      	str	r2, [r7, #4]
 80051d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051d4:	e051      	b.n	800527a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051e4:	d123      	bne.n	800522e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	f043 0204 	orr.w	r2, r3, #4
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e046      	b.n	80052bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005234:	d021      	beq.n	800527a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005236:	f7fe fa9f 	bl	8003778 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	429a      	cmp	r2, r3
 8005244:	d302      	bcc.n	800524c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d116      	bne.n	800527a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2220      	movs	r2, #32
 8005256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	f043 0220 	orr.w	r2, r3, #32
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e020      	b.n	80052bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	0c1b      	lsrs	r3, r3, #16
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b01      	cmp	r3, #1
 8005282:	d10c      	bne.n	800529e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	43da      	mvns	r2, r3
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	4013      	ands	r3, r2
 8005290:	b29b      	uxth	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	bf14      	ite	ne
 8005296:	2301      	movne	r3, #1
 8005298:	2300      	moveq	r3, #0
 800529a:	b2db      	uxtb	r3, r3
 800529c:	e00b      	b.n	80052b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	43da      	mvns	r2, r3
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	4013      	ands	r3, r2
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	bf14      	ite	ne
 80052b0:	2301      	movne	r3, #1
 80052b2:	2300      	moveq	r3, #0
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d18d      	bne.n	80051d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052d0:	e02d      	b.n	800532e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 f8ce 	bl	8005474 <I2C_IsAcknowledgeFailed>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e02d      	b.n	800533e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e8:	d021      	beq.n	800532e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ea:	f7fe fa45 	bl	8003778 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d302      	bcc.n	8005300 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d116      	bne.n	800532e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2220      	movs	r2, #32
 800530a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	f043 0220 	orr.w	r2, r3, #32
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e007      	b.n	800533e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005338:	2b80      	cmp	r3, #128	; 0x80
 800533a:	d1ca      	bne.n	80052d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b084      	sub	sp, #16
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005352:	e02d      	b.n	80053b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 f88d 	bl	8005474 <I2C_IsAcknowledgeFailed>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e02d      	b.n	80053c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536a:	d021      	beq.n	80053b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800536c:	f7fe fa04 	bl	8003778 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	429a      	cmp	r2, r3
 800537a:	d302      	bcc.n	8005382 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d116      	bne.n	80053b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2220      	movs	r2, #32
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539c:	f043 0220 	orr.w	r2, r3, #32
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e007      	b.n	80053c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	f003 0304 	and.w	r3, r3, #4
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d1ca      	bne.n	8005354 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053d4:	e042      	b.n	800545c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	f003 0310 	and.w	r3, r3, #16
 80053e0:	2b10      	cmp	r3, #16
 80053e2:	d119      	bne.n	8005418 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f06f 0210 	mvn.w	r2, #16
 80053ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e029      	b.n	800546c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005418:	f7fe f9ae 	bl	8003778 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	429a      	cmp	r2, r3
 8005426:	d302      	bcc.n	800542e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d116      	bne.n	800545c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2220      	movs	r2, #32
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005448:	f043 0220 	orr.w	r2, r3, #32
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e007      	b.n	800546c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005466:	2b40      	cmp	r3, #64	; 0x40
 8005468:	d1b5      	bne.n	80053d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548a:	d11b      	bne.n	80054c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005494:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b0:	f043 0204 	orr.w	r2, r3, #4
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e000      	b.n	80054c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b20      	cmp	r3, #32
 80054e6:	d129      	bne.n	800553c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2224      	movs	r2, #36	; 0x24
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 0201 	bic.w	r2, r2, #1
 80054fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 0210 	bic.w	r2, r2, #16
 800550e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0201 	orr.w	r2, r2, #1
 800552e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2220      	movs	r2, #32
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005538:	2300      	movs	r3, #0
 800553a:	e000      	b.n	800553e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800553c:	2302      	movs	r3, #2
  }
}
 800553e:	4618      	mov	r0, r3
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800554a:	b480      	push	{r7}
 800554c:	b085      	sub	sp, #20
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005554:	2300      	movs	r3, #0
 8005556:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b20      	cmp	r3, #32
 8005562:	d12a      	bne.n	80055ba <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2224      	movs	r2, #36	; 0x24
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 0201 	bic.w	r2, r2, #1
 800557a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005582:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005584:	89fb      	ldrh	r3, [r7, #14]
 8005586:	f023 030f 	bic.w	r3, r3, #15
 800558a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	b29a      	uxth	r2, r3
 8005590:	89fb      	ldrh	r3, [r7, #14]
 8005592:	4313      	orrs	r3, r2
 8005594:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	89fa      	ldrh	r2, [r7, #14]
 800559c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f042 0201 	orr.w	r2, r2, #1
 80055ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80055b6:	2300      	movs	r3, #0
 80055b8:	e000      	b.n	80055bc <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80055ba:	2302      	movs	r3, #2
  }
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e0bf      	b.n	800575a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7fb ffec 	bl	80015cc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699a      	ldr	r2, [r3, #24]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800560a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6999      	ldr	r1, [r3, #24]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005620:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6899      	ldr	r1, [r3, #8]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	4b4a      	ldr	r3, [pc, #296]	; (8005764 <HAL_LTDC_Init+0x19c>)
 800563c:	400b      	ands	r3, r1
 800563e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	041b      	lsls	r3, r3, #16
 8005646:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6899      	ldr	r1, [r3, #8]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	699a      	ldr	r2, [r3, #24]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	431a      	orrs	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68d9      	ldr	r1, [r3, #12]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	4b3e      	ldr	r3, [pc, #248]	; (8005764 <HAL_LTDC_Init+0x19c>)
 800566a:	400b      	ands	r3, r1
 800566c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	041b      	lsls	r3, r3, #16
 8005674:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68d9      	ldr	r1, [r3, #12]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a1a      	ldr	r2, [r3, #32]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	431a      	orrs	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6919      	ldr	r1, [r3, #16]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	4b33      	ldr	r3, [pc, #204]	; (8005764 <HAL_LTDC_Init+0x19c>)
 8005698:	400b      	ands	r3, r1
 800569a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	041b      	lsls	r3, r3, #16
 80056a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6919      	ldr	r1, [r3, #16]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	431a      	orrs	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6959      	ldr	r1, [r3, #20]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	4b27      	ldr	r3, [pc, #156]	; (8005764 <HAL_LTDC_Init+0x19c>)
 80056c6:	400b      	ands	r3, r1
 80056c8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ce:	041b      	lsls	r3, r3, #16
 80056d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6959      	ldr	r1, [r3, #20]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056ee:	021b      	lsls	r3, r3, #8
 80056f0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80056f8:	041b      	lsls	r3, r3, #16
 80056fa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800570a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4313      	orrs	r3, r2
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800571e:	431a      	orrs	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	430a      	orrs	r2, r1
 8005726:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f042 0206 	orr.w	r2, r2, #6
 8005736:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699a      	ldr	r2, [r3, #24]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 0201 	orr.w	r2, r2, #1
 8005746:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	f000f800 	.word	0xf000f800

08005768 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005776:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f003 0304 	and.w	r3, r3, #4
 8005786:	2b00      	cmp	r3, #0
 8005788:	d023      	beq.n	80057d2 <HAL_LTDC_IRQHandler+0x6a>
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b00      	cmp	r3, #0
 8005792:	d01e      	beq.n	80057d2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0204 	bic.w	r2, r2, #4
 80057a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2204      	movs	r2, #4
 80057aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80057b2:	f043 0201 	orr.w	r2, r3, #1
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2204      	movs	r2, #4
 80057c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f86f 	bl	80058b0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d023      	beq.n	8005824 <HAL_LTDC_IRQHandler+0xbc>
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d01e      	beq.n	8005824 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0202 	bic.w	r2, r2, #2
 80057f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2202      	movs	r2, #2
 80057fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005804:	f043 0202 	orr.w	r2, r3, #2
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2204      	movs	r2, #4
 8005812:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f846 	bl	80058b0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d01b      	beq.n	8005866 <HAL_LTDC_IRQHandler+0xfe>
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	d016      	beq.n	8005866 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0201 	bic.w	r2, r2, #1
 8005846:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2201      	movs	r2, #1
 800584e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f00b fc3b 	bl	80110dc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f003 0308 	and.w	r3, r3, #8
 800586c:	2b00      	cmp	r3, #0
 800586e:	d01b      	beq.n	80058a8 <HAL_LTDC_IRQHandler+0x140>
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f003 0308 	and.w	r3, r3, #8
 8005876:	2b00      	cmp	r3, #0
 8005878:	d016      	beq.n	80058a8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0208 	bic.w	r2, r2, #8
 8005888:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2208      	movs	r2, #8
 8005890:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f80e 	bl	80058c4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80058a8:	bf00      	nop
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80058d8:	b5b0      	push	{r4, r5, r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d101      	bne.n	80058f2 <HAL_LTDC_ConfigLayer+0x1a>
 80058ee:	2302      	movs	r3, #2
 80058f0:	e02c      	b.n	800594c <HAL_LTDC_ConfigLayer+0x74>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2202      	movs	r2, #2
 80058fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2134      	movs	r1, #52	; 0x34
 8005908:	fb01 f303 	mul.w	r3, r1, r3
 800590c:	4413      	add	r3, r2
 800590e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	4614      	mov	r4, r2
 8005916:	461d      	mov	r5, r3
 8005918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800591a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800591c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800591e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005924:	682b      	ldr	r3, [r5, #0]
 8005926:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	68b9      	ldr	r1, [r7, #8]
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 f849 	bl	80059c4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2201      	movs	r2, #1
 8005938:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bdb0      	pop	{r4, r5, r7, pc}

08005954 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_LTDC_ProgramLineEvent+0x18>
 8005968:	2302      	movs	r3, #2
 800596a:	e023      	b.n	80059b4 <HAL_LTDC_ProgramLineEvent+0x60>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0201 	bic.w	r2, r2, #1
 800598a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800598c:	4a0c      	ldr	r2, [pc, #48]	; (80059c0 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f042 0201 	orr.w	r2, r2, #1
 80059a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	40016800 	.word	0x40016800

080059c4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b089      	sub	sp, #36	; 0x24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	0c1b      	lsrs	r3, r3, #16
 80059dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059e0:	4413      	add	r3, r2
 80059e2:	041b      	lsls	r3, r3, #16
 80059e4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	461a      	mov	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	01db      	lsls	r3, r3, #7
 80059f0:	4413      	add	r3, r2
 80059f2:	3384      	adds	r3, #132	; 0x84
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	6812      	ldr	r2, [r2, #0]
 80059fa:	4611      	mov	r1, r2
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	01d2      	lsls	r2, r2, #7
 8005a00:	440a      	add	r2, r1
 8005a02:	3284      	adds	r2, #132	; 0x84
 8005a04:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005a08:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	0c1b      	lsrs	r3, r3, #16
 8005a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a1a:	4413      	add	r3, r2
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4619      	mov	r1, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	01db      	lsls	r3, r3, #7
 8005a28:	440b      	add	r3, r1
 8005a2a:	3384      	adds	r3, #132	; 0x84
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	68da      	ldr	r2, [r3, #12]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a42:	4413      	add	r3, r2
 8005a44:	041b      	lsls	r3, r3, #16
 8005a46:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	01db      	lsls	r3, r3, #7
 8005a52:	4413      	add	r3, r2
 8005a54:	3384      	adds	r3, #132	; 0x84
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	6812      	ldr	r2, [r2, #0]
 8005a5c:	4611      	mov	r1, r2
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	01d2      	lsls	r2, r2, #7
 8005a62:	440a      	add	r2, r1
 8005a64:	3284      	adds	r2, #132	; 0x84
 8005a66:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005a6a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a7a:	4413      	add	r3, r2
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4619      	mov	r1, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	01db      	lsls	r3, r3, #7
 8005a88:	440b      	add	r3, r1
 8005a8a:	3384      	adds	r3, #132	; 0x84
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	461a      	mov	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	01db      	lsls	r3, r3, #7
 8005a9e:	4413      	add	r3, r2
 8005aa0:	3384      	adds	r3, #132	; 0x84
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	6812      	ldr	r2, [r2, #0]
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	01d2      	lsls	r2, r2, #7
 8005aae:	440a      	add	r2, r1
 8005ab0:	3284      	adds	r2, #132	; 0x84
 8005ab2:	f023 0307 	bic.w	r3, r3, #7
 8005ab6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	461a      	mov	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	01db      	lsls	r3, r3, #7
 8005ac2:	4413      	add	r3, r2
 8005ac4:	3384      	adds	r3, #132	; 0x84
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005ad4:	021b      	lsls	r3, r3, #8
 8005ad6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005ade:	041b      	lsls	r3, r3, #16
 8005ae0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	061b      	lsls	r3, r3, #24
 8005ae8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	461a      	mov	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	01db      	lsls	r3, r3, #7
 8005af4:	4413      	add	r3, r2
 8005af6:	3384      	adds	r3, #132	; 0x84
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	461a      	mov	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	01db      	lsls	r3, r3, #7
 8005b04:	4413      	add	r3, r2
 8005b06:	3384      	adds	r3, #132	; 0x84
 8005b08:	461a      	mov	r2, r3
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b14:	461a      	mov	r2, r3
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4619      	mov	r1, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	01db      	lsls	r3, r3, #7
 8005b28:	440b      	add	r3, r1
 8005b2a:	3384      	adds	r3, #132	; 0x84
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	461a      	mov	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	01db      	lsls	r3, r3, #7
 8005b3e:	4413      	add	r3, r2
 8005b40:	3384      	adds	r3, #132	; 0x84
 8005b42:	695b      	ldr	r3, [r3, #20]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	6812      	ldr	r2, [r2, #0]
 8005b48:	4611      	mov	r1, r2
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	01d2      	lsls	r2, r2, #7
 8005b4e:	440a      	add	r2, r1
 8005b50:	3284      	adds	r2, #132	; 0x84
 8005b52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b56:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	01db      	lsls	r3, r3, #7
 8005b62:	4413      	add	r3, r2
 8005b64:	3384      	adds	r3, #132	; 0x84
 8005b66:	461a      	mov	r2, r3
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	461a      	mov	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	01db      	lsls	r3, r3, #7
 8005b78:	4413      	add	r3, r2
 8005b7a:	3384      	adds	r3, #132	; 0x84
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	6812      	ldr	r2, [r2, #0]
 8005b82:	4611      	mov	r1, r2
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	01d2      	lsls	r2, r2, #7
 8005b88:	440a      	add	r2, r1
 8005b8a:	3284      	adds	r2, #132	; 0x84
 8005b8c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005b90:	f023 0307 	bic.w	r3, r3, #7
 8005b94:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	69da      	ldr	r2, [r3, #28]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	68f9      	ldr	r1, [r7, #12]
 8005ba0:	6809      	ldr	r1, [r1, #0]
 8005ba2:	4608      	mov	r0, r1
 8005ba4:	6879      	ldr	r1, [r7, #4]
 8005ba6:	01c9      	lsls	r1, r1, #7
 8005ba8:	4401      	add	r1, r0
 8005baa:	3184      	adds	r1, #132	; 0x84
 8005bac:	4313      	orrs	r3, r2
 8005bae:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	01db      	lsls	r3, r3, #7
 8005bba:	4413      	add	r3, r2
 8005bbc:	3384      	adds	r3, #132	; 0x84
 8005bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	01db      	lsls	r3, r3, #7
 8005bca:	4413      	add	r3, r2
 8005bcc:	3384      	adds	r3, #132	; 0x84
 8005bce:	461a      	mov	r2, r3
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	461a      	mov	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	01db      	lsls	r3, r3, #7
 8005bde:	4413      	add	r3, r2
 8005be0:	3384      	adds	r3, #132	; 0x84
 8005be2:	461a      	mov	r2, r3
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d102      	bne.n	8005bf8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005bf2:	2304      	movs	r3, #4
 8005bf4:	61fb      	str	r3, [r7, #28]
 8005bf6:	e01b      	b.n	8005c30 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d102      	bne.n	8005c06 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005c00:	2303      	movs	r3, #3
 8005c02:	61fb      	str	r3, [r7, #28]
 8005c04:	e014      	b.n	8005c30 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	2b04      	cmp	r3, #4
 8005c0c:	d00b      	beq.n	8005c26 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d007      	beq.n	8005c26 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d003      	beq.n	8005c26 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005c22:	2b07      	cmp	r3, #7
 8005c24:	d102      	bne.n	8005c2c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005c26:	2302      	movs	r3, #2
 8005c28:	61fb      	str	r3, [r7, #28]
 8005c2a:	e001      	b.n	8005c30 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	461a      	mov	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	01db      	lsls	r3, r3, #7
 8005c3a:	4413      	add	r3, r2
 8005c3c:	3384      	adds	r3, #132	; 0x84
 8005c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	6812      	ldr	r2, [r2, #0]
 8005c44:	4611      	mov	r1, r2
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	01d2      	lsls	r2, r2, #7
 8005c4a:	440a      	add	r2, r1
 8005c4c:	3284      	adds	r2, #132	; 0x84
 8005c4e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005c52:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c58:	69fa      	ldr	r2, [r7, #28]
 8005c5a:	fb02 f303 	mul.w	r3, r2, r3
 8005c5e:	041a      	lsls	r2, r3, #16
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	6859      	ldr	r1, [r3, #4]
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	1acb      	subs	r3, r1, r3
 8005c6a:	69f9      	ldr	r1, [r7, #28]
 8005c6c:	fb01 f303 	mul.w	r3, r1, r3
 8005c70:	3303      	adds	r3, #3
 8005c72:	68f9      	ldr	r1, [r7, #12]
 8005c74:	6809      	ldr	r1, [r1, #0]
 8005c76:	4608      	mov	r0, r1
 8005c78:	6879      	ldr	r1, [r7, #4]
 8005c7a:	01c9      	lsls	r1, r1, #7
 8005c7c:	4401      	add	r1, r0
 8005c7e:	3184      	adds	r1, #132	; 0x84
 8005c80:	4313      	orrs	r3, r2
 8005c82:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	461a      	mov	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	01db      	lsls	r3, r3, #7
 8005c8e:	4413      	add	r3, r2
 8005c90:	3384      	adds	r3, #132	; 0x84
 8005c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	6812      	ldr	r2, [r2, #0]
 8005c98:	4611      	mov	r1, r2
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	01d2      	lsls	r2, r2, #7
 8005c9e:	440a      	add	r2, r1
 8005ca0:	3284      	adds	r2, #132	; 0x84
 8005ca2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005ca6:	f023 0307 	bic.w	r3, r3, #7
 8005caa:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	01db      	lsls	r3, r3, #7
 8005cb6:	4413      	add	r3, r2
 8005cb8:	3384      	adds	r3, #132	; 0x84
 8005cba:	461a      	mov	r2, r3
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	01db      	lsls	r3, r3, #7
 8005ccc:	4413      	add	r3, r2
 8005cce:	3384      	adds	r3, #132	; 0x84
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	6812      	ldr	r2, [r2, #0]
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	01d2      	lsls	r2, r2, #7
 8005cdc:	440a      	add	r2, r1
 8005cde:	3284      	adds	r2, #132	; 0x84
 8005ce0:	f043 0301 	orr.w	r3, r3, #1
 8005ce4:	6013      	str	r3, [r2, #0]
}
 8005ce6:	bf00      	nop
 8005ce8:	3724      	adds	r7, #36	; 0x24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
	...

08005cf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e264      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d075      	beq.n	8005dfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d12:	4ba3      	ldr	r3, [pc, #652]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f003 030c 	and.w	r3, r3, #12
 8005d1a:	2b04      	cmp	r3, #4
 8005d1c:	d00c      	beq.n	8005d38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d1e:	4ba0      	ldr	r3, [pc, #640]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d26:	2b08      	cmp	r3, #8
 8005d28:	d112      	bne.n	8005d50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d2a:	4b9d      	ldr	r3, [pc, #628]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d36:	d10b      	bne.n	8005d50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d38:	4b99      	ldr	r3, [pc, #612]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d05b      	beq.n	8005dfc <HAL_RCC_OscConfig+0x108>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d157      	bne.n	8005dfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e23f      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d58:	d106      	bne.n	8005d68 <HAL_RCC_OscConfig+0x74>
 8005d5a:	4b91      	ldr	r3, [pc, #580]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a90      	ldr	r2, [pc, #576]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d64:	6013      	str	r3, [r2, #0]
 8005d66:	e01d      	b.n	8005da4 <HAL_RCC_OscConfig+0xb0>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d70:	d10c      	bne.n	8005d8c <HAL_RCC_OscConfig+0x98>
 8005d72:	4b8b      	ldr	r3, [pc, #556]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a8a      	ldr	r2, [pc, #552]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	4b88      	ldr	r3, [pc, #544]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a87      	ldr	r2, [pc, #540]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d88:	6013      	str	r3, [r2, #0]
 8005d8a:	e00b      	b.n	8005da4 <HAL_RCC_OscConfig+0xb0>
 8005d8c:	4b84      	ldr	r3, [pc, #528]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a83      	ldr	r2, [pc, #524]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	4b81      	ldr	r3, [pc, #516]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a80      	ldr	r2, [pc, #512]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d013      	beq.n	8005dd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dac:	f7fd fce4 	bl	8003778 <HAL_GetTick>
 8005db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005db2:	e008      	b.n	8005dc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005db4:	f7fd fce0 	bl	8003778 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	2b64      	cmp	r3, #100	; 0x64
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e204      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dc6:	4b76      	ldr	r3, [pc, #472]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d0f0      	beq.n	8005db4 <HAL_RCC_OscConfig+0xc0>
 8005dd2:	e014      	b.n	8005dfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd4:	f7fd fcd0 	bl	8003778 <HAL_GetTick>
 8005dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dda:	e008      	b.n	8005dee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ddc:	f7fd fccc 	bl	8003778 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b64      	cmp	r3, #100	; 0x64
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e1f0      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dee:	4b6c      	ldr	r3, [pc, #432]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1f0      	bne.n	8005ddc <HAL_RCC_OscConfig+0xe8>
 8005dfa:	e000      	b.n	8005dfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0302 	and.w	r3, r3, #2
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d063      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e0a:	4b65      	ldr	r3, [pc, #404]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f003 030c 	and.w	r3, r3, #12
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00b      	beq.n	8005e2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e16:	4b62      	ldr	r3, [pc, #392]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e1e:	2b08      	cmp	r3, #8
 8005e20:	d11c      	bne.n	8005e5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e22:	4b5f      	ldr	r3, [pc, #380]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d116      	bne.n	8005e5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e2e:	4b5c      	ldr	r3, [pc, #368]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d005      	beq.n	8005e46 <HAL_RCC_OscConfig+0x152>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d001      	beq.n	8005e46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e1c4      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e46:	4b56      	ldr	r3, [pc, #344]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	00db      	lsls	r3, r3, #3
 8005e54:	4952      	ldr	r1, [pc, #328]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e5a:	e03a      	b.n	8005ed2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d020      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e64:	4b4f      	ldr	r3, [pc, #316]	; (8005fa4 <HAL_RCC_OscConfig+0x2b0>)
 8005e66:	2201      	movs	r2, #1
 8005e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e6a:	f7fd fc85 	bl	8003778 <HAL_GetTick>
 8005e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e70:	e008      	b.n	8005e84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e72:	f7fd fc81 	bl	8003778 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d901      	bls.n	8005e84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e1a5      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e84:	4b46      	ldr	r3, [pc, #280]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d0f0      	beq.n	8005e72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e90:	4b43      	ldr	r3, [pc, #268]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	00db      	lsls	r3, r3, #3
 8005e9e:	4940      	ldr	r1, [pc, #256]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	600b      	str	r3, [r1, #0]
 8005ea4:	e015      	b.n	8005ed2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ea6:	4b3f      	ldr	r3, [pc, #252]	; (8005fa4 <HAL_RCC_OscConfig+0x2b0>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eac:	f7fd fc64 	bl	8003778 <HAL_GetTick>
 8005eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eb2:	e008      	b.n	8005ec6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005eb4:	f7fd fc60 	bl	8003778 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e184      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ec6:	4b36      	ldr	r3, [pc, #216]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1f0      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0308 	and.w	r3, r3, #8
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d030      	beq.n	8005f40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d016      	beq.n	8005f14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ee6:	4b30      	ldr	r3, [pc, #192]	; (8005fa8 <HAL_RCC_OscConfig+0x2b4>)
 8005ee8:	2201      	movs	r2, #1
 8005eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eec:	f7fd fc44 	bl	8003778 <HAL_GetTick>
 8005ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ef2:	e008      	b.n	8005f06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ef4:	f7fd fc40 	bl	8003778 <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d901      	bls.n	8005f06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e164      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f06:	4b26      	ldr	r3, [pc, #152]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d0f0      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x200>
 8005f12:	e015      	b.n	8005f40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f14:	4b24      	ldr	r3, [pc, #144]	; (8005fa8 <HAL_RCC_OscConfig+0x2b4>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f1a:	f7fd fc2d 	bl	8003778 <HAL_GetTick>
 8005f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f20:	e008      	b.n	8005f34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f22:	f7fd fc29 	bl	8003778 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d901      	bls.n	8005f34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e14d      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f34:	4b1a      	ldr	r3, [pc, #104]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1f0      	bne.n	8005f22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0304 	and.w	r3, r3, #4
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 80a0 	beq.w	800608e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f52:	4b13      	ldr	r3, [pc, #76]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10f      	bne.n	8005f7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60bb      	str	r3, [r7, #8]
 8005f62:	4b0f      	ldr	r3, [pc, #60]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f66:	4a0e      	ldr	r2, [pc, #56]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8005f6e:	4b0c      	ldr	r3, [pc, #48]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f76:	60bb      	str	r3, [r7, #8]
 8005f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f7e:	4b0b      	ldr	r3, [pc, #44]	; (8005fac <HAL_RCC_OscConfig+0x2b8>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d121      	bne.n	8005fce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f8a:	4b08      	ldr	r3, [pc, #32]	; (8005fac <HAL_RCC_OscConfig+0x2b8>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a07      	ldr	r2, [pc, #28]	; (8005fac <HAL_RCC_OscConfig+0x2b8>)
 8005f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f96:	f7fd fbef 	bl	8003778 <HAL_GetTick>
 8005f9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f9c:	e011      	b.n	8005fc2 <HAL_RCC_OscConfig+0x2ce>
 8005f9e:	bf00      	nop
 8005fa0:	40023800 	.word	0x40023800
 8005fa4:	42470000 	.word	0x42470000
 8005fa8:	42470e80 	.word	0x42470e80
 8005fac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fb0:	f7fd fbe2 	bl	8003778 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e106      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fc2:	4b85      	ldr	r3, [pc, #532]	; (80061d8 <HAL_RCC_OscConfig+0x4e4>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0f0      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d106      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x2f0>
 8005fd6:	4b81      	ldr	r3, [pc, #516]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8005fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fda:	4a80      	ldr	r2, [pc, #512]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8005fdc:	f043 0301 	orr.w	r3, r3, #1
 8005fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8005fe2:	e01c      	b.n	800601e <HAL_RCC_OscConfig+0x32a>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	2b05      	cmp	r3, #5
 8005fea:	d10c      	bne.n	8006006 <HAL_RCC_OscConfig+0x312>
 8005fec:	4b7b      	ldr	r3, [pc, #492]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8005fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff0:	4a7a      	ldr	r2, [pc, #488]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8005ff2:	f043 0304 	orr.w	r3, r3, #4
 8005ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ff8:	4b78      	ldr	r3, [pc, #480]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8005ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffc:	4a77      	ldr	r2, [pc, #476]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8005ffe:	f043 0301 	orr.w	r3, r3, #1
 8006002:	6713      	str	r3, [r2, #112]	; 0x70
 8006004:	e00b      	b.n	800601e <HAL_RCC_OscConfig+0x32a>
 8006006:	4b75      	ldr	r3, [pc, #468]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8006008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600a:	4a74      	ldr	r2, [pc, #464]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 800600c:	f023 0301 	bic.w	r3, r3, #1
 8006010:	6713      	str	r3, [r2, #112]	; 0x70
 8006012:	4b72      	ldr	r3, [pc, #456]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8006014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006016:	4a71      	ldr	r2, [pc, #452]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8006018:	f023 0304 	bic.w	r3, r3, #4
 800601c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d015      	beq.n	8006052 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006026:	f7fd fba7 	bl	8003778 <HAL_GetTick>
 800602a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800602c:	e00a      	b.n	8006044 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800602e:	f7fd fba3 	bl	8003778 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	f241 3288 	movw	r2, #5000	; 0x1388
 800603c:	4293      	cmp	r3, r2
 800603e:	d901      	bls.n	8006044 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e0c5      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006044:	4b65      	ldr	r3, [pc, #404]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8006046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0ee      	beq.n	800602e <HAL_RCC_OscConfig+0x33a>
 8006050:	e014      	b.n	800607c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006052:	f7fd fb91 	bl	8003778 <HAL_GetTick>
 8006056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006058:	e00a      	b.n	8006070 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800605a:	f7fd fb8d 	bl	8003778 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	f241 3288 	movw	r2, #5000	; 0x1388
 8006068:	4293      	cmp	r3, r2
 800606a:	d901      	bls.n	8006070 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e0af      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006070:	4b5a      	ldr	r3, [pc, #360]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8006072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1ee      	bne.n	800605a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800607c:	7dfb      	ldrb	r3, [r7, #23]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d105      	bne.n	800608e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006082:	4b56      	ldr	r3, [pc, #344]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	4a55      	ldr	r2, [pc, #340]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8006088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800608c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 809b 	beq.w	80061ce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006098:	4b50      	ldr	r3, [pc, #320]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f003 030c 	and.w	r3, r3, #12
 80060a0:	2b08      	cmp	r3, #8
 80060a2:	d05c      	beq.n	800615e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d141      	bne.n	8006130 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ac:	4b4c      	ldr	r3, [pc, #304]	; (80061e0 <HAL_RCC_OscConfig+0x4ec>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b2:	f7fd fb61 	bl	8003778 <HAL_GetTick>
 80060b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060b8:	e008      	b.n	80060cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060ba:	f7fd fb5d 	bl	8003778 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d901      	bls.n	80060cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e081      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060cc:	4b43      	ldr	r3, [pc, #268]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1f0      	bne.n	80060ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	69da      	ldr	r2, [r3, #28]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	431a      	orrs	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e6:	019b      	lsls	r3, r3, #6
 80060e8:	431a      	orrs	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ee:	085b      	lsrs	r3, r3, #1
 80060f0:	3b01      	subs	r3, #1
 80060f2:	041b      	lsls	r3, r3, #16
 80060f4:	431a      	orrs	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fa:	061b      	lsls	r3, r3, #24
 80060fc:	4937      	ldr	r1, [pc, #220]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006102:	4b37      	ldr	r3, [pc, #220]	; (80061e0 <HAL_RCC_OscConfig+0x4ec>)
 8006104:	2201      	movs	r2, #1
 8006106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006108:	f7fd fb36 	bl	8003778 <HAL_GetTick>
 800610c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800610e:	e008      	b.n	8006122 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006110:	f7fd fb32 	bl	8003778 <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b02      	cmp	r3, #2
 800611c:	d901      	bls.n	8006122 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e056      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006122:	4b2e      	ldr	r3, [pc, #184]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d0f0      	beq.n	8006110 <HAL_RCC_OscConfig+0x41c>
 800612e:	e04e      	b.n	80061ce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006130:	4b2b      	ldr	r3, [pc, #172]	; (80061e0 <HAL_RCC_OscConfig+0x4ec>)
 8006132:	2200      	movs	r2, #0
 8006134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006136:	f7fd fb1f 	bl	8003778 <HAL_GetTick>
 800613a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800613c:	e008      	b.n	8006150 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800613e:	f7fd fb1b 	bl	8003778 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	2b02      	cmp	r3, #2
 800614a:	d901      	bls.n	8006150 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e03f      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006150:	4b22      	ldr	r3, [pc, #136]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1f0      	bne.n	800613e <HAL_RCC_OscConfig+0x44a>
 800615c:	e037      	b.n	80061ce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d101      	bne.n	800616a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e032      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800616a:	4b1c      	ldr	r3, [pc, #112]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d028      	beq.n	80061ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006182:	429a      	cmp	r2, r3
 8006184:	d121      	bne.n	80061ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006190:	429a      	cmp	r2, r3
 8006192:	d11a      	bne.n	80061ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800619a:	4013      	ands	r3, r2
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d111      	bne.n	80061ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b0:	085b      	lsrs	r3, r3, #1
 80061b2:	3b01      	subs	r3, #1
 80061b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d107      	bne.n	80061ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d001      	beq.n	80061ce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e000      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	40007000 	.word	0x40007000
 80061dc:	40023800 	.word	0x40023800
 80061e0:	42470060 	.word	0x42470060

080061e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d101      	bne.n	80061f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e0cc      	b.n	8006392 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061f8:	4b68      	ldr	r3, [pc, #416]	; (800639c <HAL_RCC_ClockConfig+0x1b8>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 030f 	and.w	r3, r3, #15
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	429a      	cmp	r2, r3
 8006204:	d90c      	bls.n	8006220 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006206:	4b65      	ldr	r3, [pc, #404]	; (800639c <HAL_RCC_ClockConfig+0x1b8>)
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	b2d2      	uxtb	r2, r2
 800620c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800620e:	4b63      	ldr	r3, [pc, #396]	; (800639c <HAL_RCC_ClockConfig+0x1b8>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 030f 	and.w	r3, r3, #15
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	429a      	cmp	r2, r3
 800621a:	d001      	beq.n	8006220 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e0b8      	b.n	8006392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	2b00      	cmp	r3, #0
 800622a:	d020      	beq.n	800626e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	2b00      	cmp	r3, #0
 8006236:	d005      	beq.n	8006244 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006238:	4b59      	ldr	r3, [pc, #356]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	4a58      	ldr	r2, [pc, #352]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 800623e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006242:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0308 	and.w	r3, r3, #8
 800624c:	2b00      	cmp	r3, #0
 800624e:	d005      	beq.n	800625c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006250:	4b53      	ldr	r3, [pc, #332]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	4a52      	ldr	r2, [pc, #328]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006256:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800625a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800625c:	4b50      	ldr	r3, [pc, #320]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	494d      	ldr	r1, [pc, #308]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 800626a:	4313      	orrs	r3, r2
 800626c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b00      	cmp	r3, #0
 8006278:	d044      	beq.n	8006304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d107      	bne.n	8006292 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006282:	4b47      	ldr	r3, [pc, #284]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d119      	bne.n	80062c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e07f      	b.n	8006392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	2b02      	cmp	r3, #2
 8006298:	d003      	beq.n	80062a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d107      	bne.n	80062b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062a2:	4b3f      	ldr	r3, [pc, #252]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d109      	bne.n	80062c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e06f      	b.n	8006392 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062b2:	4b3b      	ldr	r3, [pc, #236]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e067      	b.n	8006392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062c2:	4b37      	ldr	r3, [pc, #220]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f023 0203 	bic.w	r2, r3, #3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	4934      	ldr	r1, [pc, #208]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062d4:	f7fd fa50 	bl	8003778 <HAL_GetTick>
 80062d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062da:	e00a      	b.n	80062f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062dc:	f7fd fa4c 	bl	8003778 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d901      	bls.n	80062f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e04f      	b.n	8006392 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062f2:	4b2b      	ldr	r3, [pc, #172]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f003 020c 	and.w	r2, r3, #12
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	429a      	cmp	r2, r3
 8006302:	d1eb      	bne.n	80062dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006304:	4b25      	ldr	r3, [pc, #148]	; (800639c <HAL_RCC_ClockConfig+0x1b8>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 030f 	and.w	r3, r3, #15
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	429a      	cmp	r2, r3
 8006310:	d20c      	bcs.n	800632c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006312:	4b22      	ldr	r3, [pc, #136]	; (800639c <HAL_RCC_ClockConfig+0x1b8>)
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	b2d2      	uxtb	r2, r2
 8006318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800631a:	4b20      	ldr	r3, [pc, #128]	; (800639c <HAL_RCC_ClockConfig+0x1b8>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 030f 	and.w	r3, r3, #15
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	429a      	cmp	r2, r3
 8006326:	d001      	beq.n	800632c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e032      	b.n	8006392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0304 	and.w	r3, r3, #4
 8006334:	2b00      	cmp	r3, #0
 8006336:	d008      	beq.n	800634a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006338:	4b19      	ldr	r3, [pc, #100]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	4916      	ldr	r1, [pc, #88]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006346:	4313      	orrs	r3, r2
 8006348:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0308 	and.w	r3, r3, #8
 8006352:	2b00      	cmp	r3, #0
 8006354:	d009      	beq.n	800636a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006356:	4b12      	ldr	r3, [pc, #72]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	00db      	lsls	r3, r3, #3
 8006364:	490e      	ldr	r1, [pc, #56]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006366:	4313      	orrs	r3, r2
 8006368:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800636a:	f000 f821 	bl	80063b0 <HAL_RCC_GetSysClockFreq>
 800636e:	4602      	mov	r2, r0
 8006370:	4b0b      	ldr	r3, [pc, #44]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	091b      	lsrs	r3, r3, #4
 8006376:	f003 030f 	and.w	r3, r3, #15
 800637a:	490a      	ldr	r1, [pc, #40]	; (80063a4 <HAL_RCC_ClockConfig+0x1c0>)
 800637c:	5ccb      	ldrb	r3, [r1, r3]
 800637e:	fa22 f303 	lsr.w	r3, r2, r3
 8006382:	4a09      	ldr	r2, [pc, #36]	; (80063a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006386:	4b09      	ldr	r3, [pc, #36]	; (80063ac <HAL_RCC_ClockConfig+0x1c8>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4618      	mov	r0, r3
 800638c:	f7fb fd0e 	bl	8001dac <HAL_InitTick>

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	40023c00 	.word	0x40023c00
 80063a0:	40023800 	.word	0x40023800
 80063a4:	080259b0 	.word	0x080259b0
 80063a8:	20000004 	.word	0x20000004
 80063ac:	20000070 	.word	0x20000070

080063b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80063b4:	b084      	sub	sp, #16
 80063b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80063b8:	2300      	movs	r3, #0
 80063ba:	607b      	str	r3, [r7, #4]
 80063bc:	2300      	movs	r3, #0
 80063be:	60fb      	str	r3, [r7, #12]
 80063c0:	2300      	movs	r3, #0
 80063c2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063c8:	4b67      	ldr	r3, [pc, #412]	; (8006568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f003 030c 	and.w	r3, r3, #12
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	d00d      	beq.n	80063f0 <HAL_RCC_GetSysClockFreq+0x40>
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	f200 80bd 	bhi.w	8006554 <HAL_RCC_GetSysClockFreq+0x1a4>
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d002      	beq.n	80063e4 <HAL_RCC_GetSysClockFreq+0x34>
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d003      	beq.n	80063ea <HAL_RCC_GetSysClockFreq+0x3a>
 80063e2:	e0b7      	b.n	8006554 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063e4:	4b61      	ldr	r3, [pc, #388]	; (800656c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80063e6:	60bb      	str	r3, [r7, #8]
       break;
 80063e8:	e0b7      	b.n	800655a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063ea:	4b61      	ldr	r3, [pc, #388]	; (8006570 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80063ec:	60bb      	str	r3, [r7, #8]
      break;
 80063ee:	e0b4      	b.n	800655a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063f0:	4b5d      	ldr	r3, [pc, #372]	; (8006568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063fa:	4b5b      	ldr	r3, [pc, #364]	; (8006568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d04d      	beq.n	80064a2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006406:	4b58      	ldr	r3, [pc, #352]	; (8006568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	099b      	lsrs	r3, r3, #6
 800640c:	461a      	mov	r2, r3
 800640e:	f04f 0300 	mov.w	r3, #0
 8006412:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006416:	f04f 0100 	mov.w	r1, #0
 800641a:	ea02 0800 	and.w	r8, r2, r0
 800641e:	ea03 0901 	and.w	r9, r3, r1
 8006422:	4640      	mov	r0, r8
 8006424:	4649      	mov	r1, r9
 8006426:	f04f 0200 	mov.w	r2, #0
 800642a:	f04f 0300 	mov.w	r3, #0
 800642e:	014b      	lsls	r3, r1, #5
 8006430:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006434:	0142      	lsls	r2, r0, #5
 8006436:	4610      	mov	r0, r2
 8006438:	4619      	mov	r1, r3
 800643a:	ebb0 0008 	subs.w	r0, r0, r8
 800643e:	eb61 0109 	sbc.w	r1, r1, r9
 8006442:	f04f 0200 	mov.w	r2, #0
 8006446:	f04f 0300 	mov.w	r3, #0
 800644a:	018b      	lsls	r3, r1, #6
 800644c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006450:	0182      	lsls	r2, r0, #6
 8006452:	1a12      	subs	r2, r2, r0
 8006454:	eb63 0301 	sbc.w	r3, r3, r1
 8006458:	f04f 0000 	mov.w	r0, #0
 800645c:	f04f 0100 	mov.w	r1, #0
 8006460:	00d9      	lsls	r1, r3, #3
 8006462:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006466:	00d0      	lsls	r0, r2, #3
 8006468:	4602      	mov	r2, r0
 800646a:	460b      	mov	r3, r1
 800646c:	eb12 0208 	adds.w	r2, r2, r8
 8006470:	eb43 0309 	adc.w	r3, r3, r9
 8006474:	f04f 0000 	mov.w	r0, #0
 8006478:	f04f 0100 	mov.w	r1, #0
 800647c:	0259      	lsls	r1, r3, #9
 800647e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006482:	0250      	lsls	r0, r2, #9
 8006484:	4602      	mov	r2, r0
 8006486:	460b      	mov	r3, r1
 8006488:	4610      	mov	r0, r2
 800648a:	4619      	mov	r1, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	461a      	mov	r2, r3
 8006490:	f04f 0300 	mov.w	r3, #0
 8006494:	f7f9 ff04 	bl	80002a0 <__aeabi_uldivmod>
 8006498:	4602      	mov	r2, r0
 800649a:	460b      	mov	r3, r1
 800649c:	4613      	mov	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]
 80064a0:	e04a      	b.n	8006538 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064a2:	4b31      	ldr	r3, [pc, #196]	; (8006568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	099b      	lsrs	r3, r3, #6
 80064a8:	461a      	mov	r2, r3
 80064aa:	f04f 0300 	mov.w	r3, #0
 80064ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80064b2:	f04f 0100 	mov.w	r1, #0
 80064b6:	ea02 0400 	and.w	r4, r2, r0
 80064ba:	ea03 0501 	and.w	r5, r3, r1
 80064be:	4620      	mov	r0, r4
 80064c0:	4629      	mov	r1, r5
 80064c2:	f04f 0200 	mov.w	r2, #0
 80064c6:	f04f 0300 	mov.w	r3, #0
 80064ca:	014b      	lsls	r3, r1, #5
 80064cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80064d0:	0142      	lsls	r2, r0, #5
 80064d2:	4610      	mov	r0, r2
 80064d4:	4619      	mov	r1, r3
 80064d6:	1b00      	subs	r0, r0, r4
 80064d8:	eb61 0105 	sbc.w	r1, r1, r5
 80064dc:	f04f 0200 	mov.w	r2, #0
 80064e0:	f04f 0300 	mov.w	r3, #0
 80064e4:	018b      	lsls	r3, r1, #6
 80064e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80064ea:	0182      	lsls	r2, r0, #6
 80064ec:	1a12      	subs	r2, r2, r0
 80064ee:	eb63 0301 	sbc.w	r3, r3, r1
 80064f2:	f04f 0000 	mov.w	r0, #0
 80064f6:	f04f 0100 	mov.w	r1, #0
 80064fa:	00d9      	lsls	r1, r3, #3
 80064fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006500:	00d0      	lsls	r0, r2, #3
 8006502:	4602      	mov	r2, r0
 8006504:	460b      	mov	r3, r1
 8006506:	1912      	adds	r2, r2, r4
 8006508:	eb45 0303 	adc.w	r3, r5, r3
 800650c:	f04f 0000 	mov.w	r0, #0
 8006510:	f04f 0100 	mov.w	r1, #0
 8006514:	0299      	lsls	r1, r3, #10
 8006516:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800651a:	0290      	lsls	r0, r2, #10
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4610      	mov	r0, r2
 8006522:	4619      	mov	r1, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	461a      	mov	r2, r3
 8006528:	f04f 0300 	mov.w	r3, #0
 800652c:	f7f9 feb8 	bl	80002a0 <__aeabi_uldivmod>
 8006530:	4602      	mov	r2, r0
 8006532:	460b      	mov	r3, r1
 8006534:	4613      	mov	r3, r2
 8006536:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006538:	4b0b      	ldr	r3, [pc, #44]	; (8006568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	0c1b      	lsrs	r3, r3, #16
 800653e:	f003 0303 	and.w	r3, r3, #3
 8006542:	3301      	adds	r3, #1
 8006544:	005b      	lsls	r3, r3, #1
 8006546:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006550:	60bb      	str	r3, [r7, #8]
      break;
 8006552:	e002      	b.n	800655a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006554:	4b05      	ldr	r3, [pc, #20]	; (800656c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006556:	60bb      	str	r3, [r7, #8]
      break;
 8006558:	bf00      	nop
    }
  }
  return sysclockfreq;
 800655a:	68bb      	ldr	r3, [r7, #8]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006566:	bf00      	nop
 8006568:	40023800 	.word	0x40023800
 800656c:	00f42400 	.word	0x00f42400
 8006570:	007a1200 	.word	0x007a1200

08006574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006574:	b480      	push	{r7}
 8006576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006578:	4b03      	ldr	r3, [pc, #12]	; (8006588 <HAL_RCC_GetHCLKFreq+0x14>)
 800657a:	681b      	ldr	r3, [r3, #0]
}
 800657c:	4618      	mov	r0, r3
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	20000004 	.word	0x20000004

0800658c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006590:	f7ff fff0 	bl	8006574 <HAL_RCC_GetHCLKFreq>
 8006594:	4602      	mov	r2, r0
 8006596:	4b05      	ldr	r3, [pc, #20]	; (80065ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	0a9b      	lsrs	r3, r3, #10
 800659c:	f003 0307 	and.w	r3, r3, #7
 80065a0:	4903      	ldr	r1, [pc, #12]	; (80065b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065a2:	5ccb      	ldrb	r3, [r1, r3]
 80065a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	40023800 	.word	0x40023800
 80065b0:	080259c0 	.word	0x080259c0

080065b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80065b8:	f7ff ffdc 	bl	8006574 <HAL_RCC_GetHCLKFreq>
 80065bc:	4602      	mov	r2, r0
 80065be:	4b05      	ldr	r3, [pc, #20]	; (80065d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	0b5b      	lsrs	r3, r3, #13
 80065c4:	f003 0307 	and.w	r3, r3, #7
 80065c8:	4903      	ldr	r1, [pc, #12]	; (80065d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065ca:	5ccb      	ldrb	r3, [r1, r3]
 80065cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	40023800 	.word	0x40023800
 80065d8:	080259c0 	.word	0x080259c0

080065dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	220f      	movs	r2, #15
 80065ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80065ec:	4b12      	ldr	r3, [pc, #72]	; (8006638 <HAL_RCC_GetClockConfig+0x5c>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f003 0203 	and.w	r2, r3, #3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80065f8:	4b0f      	ldr	r3, [pc, #60]	; (8006638 <HAL_RCC_GetClockConfig+0x5c>)
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006604:	4b0c      	ldr	r3, [pc, #48]	; (8006638 <HAL_RCC_GetClockConfig+0x5c>)
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006610:	4b09      	ldr	r3, [pc, #36]	; (8006638 <HAL_RCC_GetClockConfig+0x5c>)
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	08db      	lsrs	r3, r3, #3
 8006616:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800661e:	4b07      	ldr	r3, [pc, #28]	; (800663c <HAL_RCC_GetClockConfig+0x60>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 020f 	and.w	r2, r3, #15
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	601a      	str	r2, [r3, #0]
}
 800662a:	bf00      	nop
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	40023800 	.word	0x40023800
 800663c:	40023c00 	.word	0x40023c00

08006640 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006648:	2300      	movs	r3, #0
 800664a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10b      	bne.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006664:	2b00      	cmp	r3, #0
 8006666:	d105      	bne.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006670:	2b00      	cmp	r3, #0
 8006672:	d075      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006674:	4bad      	ldr	r3, [pc, #692]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006676:	2200      	movs	r2, #0
 8006678:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800667a:	f7fd f87d 	bl	8003778 <HAL_GetTick>
 800667e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006680:	e008      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006682:	f7fd f879 	bl	8003778 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	2b02      	cmp	r3, #2
 800668e:	d901      	bls.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e18b      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006694:	4ba6      	ldr	r3, [pc, #664]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1f0      	bne.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d009      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	019a      	lsls	r2, r3, #6
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	071b      	lsls	r3, r3, #28
 80066b8:	499d      	ldr	r1, [pc, #628]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066ba:	4313      	orrs	r3, r2
 80066bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0302 	and.w	r3, r3, #2
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d01f      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80066cc:	4b98      	ldr	r3, [pc, #608]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066d2:	0f1b      	lsrs	r3, r3, #28
 80066d4:	f003 0307 	and.w	r3, r3, #7
 80066d8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	019a      	lsls	r2, r3, #6
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	061b      	lsls	r3, r3, #24
 80066e6:	431a      	orrs	r2, r3
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	071b      	lsls	r3, r3, #28
 80066ec:	4990      	ldr	r1, [pc, #576]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80066f4:	4b8e      	ldr	r3, [pc, #568]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066fa:	f023 021f 	bic.w	r2, r3, #31
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	3b01      	subs	r3, #1
 8006704:	498a      	ldr	r1, [pc, #552]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006706:	4313      	orrs	r3, r2
 8006708:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00d      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	019a      	lsls	r2, r3, #6
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	061b      	lsls	r3, r3, #24
 8006724:	431a      	orrs	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	071b      	lsls	r3, r3, #28
 800672c:	4980      	ldr	r1, [pc, #512]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800672e:	4313      	orrs	r3, r2
 8006730:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006734:	4b7d      	ldr	r3, [pc, #500]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006736:	2201      	movs	r2, #1
 8006738:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800673a:	f7fd f81d 	bl	8003778 <HAL_GetTick>
 800673e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006740:	e008      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006742:	f7fd f819 	bl	8003778 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	2b02      	cmp	r3, #2
 800674e:	d901      	bls.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e12b      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006754:	4b76      	ldr	r3, [pc, #472]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d0f0      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0304 	and.w	r3, r3, #4
 8006768:	2b00      	cmp	r3, #0
 800676a:	d105      	bne.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006774:	2b00      	cmp	r3, #0
 8006776:	d079      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006778:	4b6e      	ldr	r3, [pc, #440]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800677a:	2200      	movs	r2, #0
 800677c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800677e:	f7fc fffb 	bl	8003778 <HAL_GetTick>
 8006782:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006784:	e008      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006786:	f7fc fff7 	bl	8003778 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2b02      	cmp	r3, #2
 8006792:	d901      	bls.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e109      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006798:	4b65      	ldr	r3, [pc, #404]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067a4:	d0ef      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0304 	and.w	r3, r3, #4
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d020      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067b2:	4b5f      	ldr	r3, [pc, #380]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b8:	0f1b      	lsrs	r3, r3, #28
 80067ba:	f003 0307 	and.w	r3, r3, #7
 80067be:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	019a      	lsls	r2, r3, #6
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	061b      	lsls	r3, r3, #24
 80067cc:	431a      	orrs	r2, r3
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	071b      	lsls	r3, r3, #28
 80067d2:	4957      	ldr	r1, [pc, #348]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80067da:	4b55      	ldr	r3, [pc, #340]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	3b01      	subs	r3, #1
 80067ea:	021b      	lsls	r3, r3, #8
 80067ec:	4950      	ldr	r1, [pc, #320]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0308 	and.w	r3, r3, #8
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d01e      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006800:	4b4b      	ldr	r3, [pc, #300]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006806:	0e1b      	lsrs	r3, r3, #24
 8006808:	f003 030f 	and.w	r3, r3, #15
 800680c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	019a      	lsls	r2, r3, #6
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	061b      	lsls	r3, r3, #24
 8006818:	431a      	orrs	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	071b      	lsls	r3, r3, #28
 8006820:	4943      	ldr	r1, [pc, #268]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006822:	4313      	orrs	r3, r2
 8006824:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006828:	4b41      	ldr	r3, [pc, #260]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800682a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800682e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006836:	493e      	ldr	r1, [pc, #248]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006838:	4313      	orrs	r3, r2
 800683a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800683e:	4b3d      	ldr	r3, [pc, #244]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006840:	2201      	movs	r2, #1
 8006842:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006844:	f7fc ff98 	bl	8003778 <HAL_GetTick>
 8006848:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800684a:	e008      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800684c:	f7fc ff94 	bl	8003778 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b02      	cmp	r3, #2
 8006858:	d901      	bls.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e0a6      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800685e:	4b34      	ldr	r3, [pc, #208]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006866:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800686a:	d1ef      	bne.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0320 	and.w	r3, r3, #32
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 808d 	beq.w	8006994 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800687a:	2300      	movs	r3, #0
 800687c:	60fb      	str	r3, [r7, #12]
 800687e:	4b2c      	ldr	r3, [pc, #176]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006882:	4a2b      	ldr	r2, [pc, #172]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006888:	6413      	str	r3, [r2, #64]	; 0x40
 800688a:	4b29      	ldr	r3, [pc, #164]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800688c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006896:	4b28      	ldr	r3, [pc, #160]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a27      	ldr	r2, [pc, #156]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800689c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068a2:	f7fc ff69 	bl	8003778 <HAL_GetTick>
 80068a6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068a8:	e008      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80068aa:	f7fc ff65 	bl	8003778 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d901      	bls.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e077      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068bc:	4b1e      	ldr	r3, [pc, #120]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d0f0      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068c8:	4b19      	ldr	r3, [pc, #100]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068d0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d039      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d032      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068e6:	4b12      	ldr	r3, [pc, #72]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068f0:	4b12      	ldr	r3, [pc, #72]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80068f2:	2201      	movs	r2, #1
 80068f4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80068f6:	4b11      	ldr	r3, [pc, #68]	; (800693c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80068fc:	4a0c      	ldr	r2, [pc, #48]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006902:	4b0b      	ldr	r3, [pc, #44]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b01      	cmp	r3, #1
 800690c:	d11e      	bne.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800690e:	f7fc ff33 	bl	8003778 <HAL_GetTick>
 8006912:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006914:	e014      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006916:	f7fc ff2f 	bl	8003778 <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	f241 3288 	movw	r2, #5000	; 0x1388
 8006924:	4293      	cmp	r3, r2
 8006926:	d90b      	bls.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e03f      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800692c:	42470068 	.word	0x42470068
 8006930:	40023800 	.word	0x40023800
 8006934:	42470070 	.word	0x42470070
 8006938:	40007000 	.word	0x40007000
 800693c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006940:	4b1c      	ldr	r3, [pc, #112]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006944:	f003 0302 	and.w	r3, r3, #2
 8006948:	2b00      	cmp	r3, #0
 800694a:	d0e4      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006954:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006958:	d10d      	bne.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800695a:	4b16      	ldr	r3, [pc, #88]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006966:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800696a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800696e:	4911      	ldr	r1, [pc, #68]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006970:	4313      	orrs	r3, r2
 8006972:	608b      	str	r3, [r1, #8]
 8006974:	e005      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006976:	4b0f      	ldr	r3, [pc, #60]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	4a0e      	ldr	r2, [pc, #56]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800697c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006980:	6093      	str	r3, [r2, #8]
 8006982:	4b0c      	ldr	r3, [pc, #48]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006984:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800698e:	4909      	ldr	r1, [pc, #36]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006990:	4313      	orrs	r3, r2
 8006992:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0310 	and.w	r3, r3, #16
 800699c:	2b00      	cmp	r3, #0
 800699e:	d004      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80069a6:	4b04      	ldr	r3, [pc, #16]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80069a8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3718      	adds	r7, #24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	40023800 	.word	0x40023800
 80069b8:	424711e0 	.word	0x424711e0

080069bc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d101      	bne.n	80069d0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e025      	b.n	8006a1c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d106      	bne.n	80069ea <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7fa fa97 	bl	8000f18 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2202      	movs	r2, #2
 80069ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	3304      	adds	r3, #4
 80069fa:	4619      	mov	r1, r3
 80069fc:	4610      	mov	r0, r2
 80069fe:	f002 fa85 	bl	8008f0c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6818      	ldr	r0, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	6839      	ldr	r1, [r7, #0]
 8006a0e:	f002 faf0 	bl	8008ff2 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d101      	bne.n	8006a40 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e018      	b.n	8006a72 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2202      	movs	r2, #2
 8006a44:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	68b9      	ldr	r1, [r7, #8]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f002 fb4d 	bl	80090f0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d104      	bne.n	8006a68 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2205      	movs	r2, #5
 8006a62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006a66:	e003      	b.n	8006a70 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b082      	sub	sp, #8
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d101      	bne.n	8006a94 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006a90:	2302      	movs	r3, #2
 8006a92:	e00e      	b.n	8006ab2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2202      	movs	r2, #2
 8006a98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f002 fb60 	bl	8009168 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b082      	sub	sp, #8
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e07b      	b.n	8006bc4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d108      	bne.n	8006ae6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006adc:	d009      	beq.n	8006af2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	61da      	str	r2, [r3, #28]
 8006ae4:	e005      	b.n	8006af2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d106      	bne.n	8006b12 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7fb f8bb 	bl	8001c88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2202      	movs	r2, #2
 8006b16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b28:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b44:	431a      	orrs	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	f003 0302 	and.w	r3, r3, #2
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	695b      	ldr	r3, [r3, #20]
 8006b54:	f003 0301 	and.w	r3, r3, #1
 8006b58:	431a      	orrs	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b62:	431a      	orrs	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	69db      	ldr	r3, [r3, #28]
 8006b68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b76:	ea42 0103 	orr.w	r1, r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	430a      	orrs	r2, r1
 8006b88:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	0c1b      	lsrs	r3, r3, #16
 8006b90:	f003 0104 	and.w	r1, r3, #4
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b98:	f003 0210 	and.w	r2, r3, #16
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	69da      	ldr	r2, [r3, #28]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bb2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e01a      	b.n	8006c14 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2202      	movs	r2, #2
 8006be2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bf4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7fb f88e 	bl	8001d18 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3708      	adds	r7, #8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b088      	sub	sp, #32
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	603b      	str	r3, [r7, #0]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d101      	bne.n	8006c3e <HAL_SPI_Transmit+0x22>
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	e126      	b.n	8006e8c <HAL_SPI_Transmit+0x270>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c46:	f7fc fd97 	bl	8003778 <HAL_GetTick>
 8006c4a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006c4c:	88fb      	ldrh	r3, [r7, #6]
 8006c4e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d002      	beq.n	8006c62 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c60:	e10b      	b.n	8006e7a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d002      	beq.n	8006c6e <HAL_SPI_Transmit+0x52>
 8006c68:	88fb      	ldrh	r3, [r7, #6]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d102      	bne.n	8006c74 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c72:	e102      	b.n	8006e7a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2203      	movs	r2, #3
 8006c78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	68ba      	ldr	r2, [r7, #8]
 8006c86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	88fa      	ldrh	r2, [r7, #6]
 8006c8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	88fa      	ldrh	r2, [r7, #6]
 8006c92:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cba:	d10f      	bne.n	8006cdc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cda:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce6:	2b40      	cmp	r3, #64	; 0x40
 8006ce8:	d007      	beq.n	8006cfa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cf8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d02:	d14b      	bne.n	8006d9c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d002      	beq.n	8006d12 <HAL_SPI_Transmit+0xf6>
 8006d0c:	8afb      	ldrh	r3, [r7, #22]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d13e      	bne.n	8006d90 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d16:	881a      	ldrh	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d22:	1c9a      	adds	r2, r3, #2
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d36:	e02b      	b.n	8006d90 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f003 0302 	and.w	r3, r3, #2
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d112      	bne.n	8006d6c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4a:	881a      	ldrh	r2, [r3, #0]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d56:	1c9a      	adds	r2, r3, #2
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	3b01      	subs	r3, #1
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d6a:	e011      	b.n	8006d90 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d6c:	f7fc fd04 	bl	8003778 <HAL_GetTick>
 8006d70:	4602      	mov	r2, r0
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d803      	bhi.n	8006d84 <HAL_SPI_Transmit+0x168>
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d82:	d102      	bne.n	8006d8a <HAL_SPI_Transmit+0x16e>
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d102      	bne.n	8006d90 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d8e:	e074      	b.n	8006e7a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1ce      	bne.n	8006d38 <HAL_SPI_Transmit+0x11c>
 8006d9a:	e04c      	b.n	8006e36 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <HAL_SPI_Transmit+0x18e>
 8006da4:	8afb      	ldrh	r3, [r7, #22]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d140      	bne.n	8006e2c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	330c      	adds	r3, #12
 8006db4:	7812      	ldrb	r2, [r2, #0]
 8006db6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dbc:	1c5a      	adds	r2, r3, #1
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006dd0:	e02c      	b.n	8006e2c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d113      	bne.n	8006e08 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	330c      	adds	r3, #12
 8006dea:	7812      	ldrb	r2, [r2, #0]
 8006dec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df2:	1c5a      	adds	r2, r3, #1
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e06:	e011      	b.n	8006e2c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e08:	f7fc fcb6 	bl	8003778 <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d803      	bhi.n	8006e20 <HAL_SPI_Transmit+0x204>
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1e:	d102      	bne.n	8006e26 <HAL_SPI_Transmit+0x20a>
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d102      	bne.n	8006e2c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e2a:	e026      	b.n	8006e7a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1cd      	bne.n	8006dd2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e36:	69ba      	ldr	r2, [r7, #24]
 8006e38:	6839      	ldr	r1, [r7, #0]
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 fbda 	bl	80075f4 <SPI_EndRxTxTransaction>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d002      	beq.n	8006e4c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10a      	bne.n	8006e6a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e54:	2300      	movs	r3, #0
 8006e56:	613b      	str	r3, [r7, #16]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	613b      	str	r3, [r7, #16]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	613b      	str	r3, [r7, #16]
 8006e68:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d002      	beq.n	8006e78 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	77fb      	strb	r3, [r7, #31]
 8006e76:	e000      	b.n	8006e7a <HAL_SPI_Transmit+0x25e>
  }

error:
 8006e78:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3720      	adds	r7, #32
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b088      	sub	sp, #32
 8006e98:	af02      	add	r7, sp, #8
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	603b      	str	r3, [r7, #0]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006eb0:	d112      	bne.n	8006ed8 <HAL_SPI_Receive+0x44>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10e      	bne.n	8006ed8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2204      	movs	r2, #4
 8006ebe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006ec2:	88fa      	ldrh	r2, [r7, #6]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	68b9      	ldr	r1, [r7, #8]
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f000 f8f1 	bl	80070b6 <HAL_SPI_TransmitReceive>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	e0ea      	b.n	80070ae <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d101      	bne.n	8006ee6 <HAL_SPI_Receive+0x52>
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	e0e3      	b.n	80070ae <HAL_SPI_Receive+0x21a>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006eee:	f7fc fc43 	bl	8003778 <HAL_GetTick>
 8006ef2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d002      	beq.n	8006f06 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006f00:	2302      	movs	r3, #2
 8006f02:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f04:	e0ca      	b.n	800709c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d002      	beq.n	8006f12 <HAL_SPI_Receive+0x7e>
 8006f0c:	88fb      	ldrh	r3, [r7, #6]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d102      	bne.n	8006f18 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f16:	e0c1      	b.n	800709c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2204      	movs	r2, #4
 8006f1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	88fa      	ldrh	r2, [r7, #6]
 8006f30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	88fa      	ldrh	r2, [r7, #6]
 8006f36:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f5e:	d10f      	bne.n	8006f80 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f6e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f7e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f8a:	2b40      	cmp	r3, #64	; 0x40
 8006f8c:	d007      	beq.n	8006f9e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f9c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d162      	bne.n	800706c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006fa6:	e02e      	b.n	8007006 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d115      	bne.n	8006fe2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f103 020c 	add.w	r2, r3, #12
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc2:	7812      	ldrb	r2, [r2, #0]
 8006fc4:	b2d2      	uxtb	r2, r2
 8006fc6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fcc:	1c5a      	adds	r2, r3, #1
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006fe0:	e011      	b.n	8007006 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fe2:	f7fc fbc9 	bl	8003778 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d803      	bhi.n	8006ffa <HAL_SPI_Receive+0x166>
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff8:	d102      	bne.n	8007000 <HAL_SPI_Receive+0x16c>
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d102      	bne.n	8007006 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007004:	e04a      	b.n	800709c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800700a:	b29b      	uxth	r3, r3
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1cb      	bne.n	8006fa8 <HAL_SPI_Receive+0x114>
 8007010:	e031      	b.n	8007076 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	2b01      	cmp	r3, #1
 800701e:	d113      	bne.n	8007048 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68da      	ldr	r2, [r3, #12]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702a:	b292      	uxth	r2, r2
 800702c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007032:	1c9a      	adds	r2, r3, #2
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800703c:	b29b      	uxth	r3, r3
 800703e:	3b01      	subs	r3, #1
 8007040:	b29a      	uxth	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007046:	e011      	b.n	800706c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007048:	f7fc fb96 	bl	8003778 <HAL_GetTick>
 800704c:	4602      	mov	r2, r0
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	429a      	cmp	r2, r3
 8007056:	d803      	bhi.n	8007060 <HAL_SPI_Receive+0x1cc>
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800705e:	d102      	bne.n	8007066 <HAL_SPI_Receive+0x1d2>
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d102      	bne.n	800706c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	75fb      	strb	r3, [r7, #23]
          goto error;
 800706a:	e017      	b.n	800709c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007070:	b29b      	uxth	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1cd      	bne.n	8007012 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007076:	693a      	ldr	r2, [r7, #16]
 8007078:	6839      	ldr	r1, [r7, #0]
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f000 fa54 	bl	8007528 <SPI_EndRxTransaction>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d002      	beq.n	800708c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2220      	movs	r2, #32
 800708a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007090:	2b00      	cmp	r3, #0
 8007092:	d002      	beq.n	800709a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	75fb      	strb	r3, [r7, #23]
 8007098:	e000      	b.n	800709c <HAL_SPI_Receive+0x208>
  }

error :
 800709a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80070ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3718      	adds	r7, #24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b08c      	sub	sp, #48	; 0x30
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	60f8      	str	r0, [r7, #12]
 80070be:	60b9      	str	r1, [r7, #8]
 80070c0:	607a      	str	r2, [r7, #4]
 80070c2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80070c4:	2301      	movs	r3, #1
 80070c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80070c8:	2300      	movs	r3, #0
 80070ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d101      	bne.n	80070dc <HAL_SPI_TransmitReceive+0x26>
 80070d8:	2302      	movs	r3, #2
 80070da:	e18a      	b.n	80073f2 <HAL_SPI_TransmitReceive+0x33c>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070e4:	f7fc fb48 	bl	8003778 <HAL_GetTick>
 80070e8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80070fa:	887b      	ldrh	r3, [r7, #2]
 80070fc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80070fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007102:	2b01      	cmp	r3, #1
 8007104:	d00f      	beq.n	8007126 <HAL_SPI_TransmitReceive+0x70>
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800710c:	d107      	bne.n	800711e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d103      	bne.n	800711e <HAL_SPI_TransmitReceive+0x68>
 8007116:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800711a:	2b04      	cmp	r3, #4
 800711c:	d003      	beq.n	8007126 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800711e:	2302      	movs	r3, #2
 8007120:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007124:	e15b      	b.n	80073de <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d005      	beq.n	8007138 <HAL_SPI_TransmitReceive+0x82>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d002      	beq.n	8007138 <HAL_SPI_TransmitReceive+0x82>
 8007132:	887b      	ldrh	r3, [r7, #2]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d103      	bne.n	8007140 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800713e:	e14e      	b.n	80073de <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b04      	cmp	r3, #4
 800714a:	d003      	beq.n	8007154 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2205      	movs	r2, #5
 8007150:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	887a      	ldrh	r2, [r7, #2]
 8007164:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	887a      	ldrh	r2, [r7, #2]
 800716a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	887a      	ldrh	r2, [r7, #2]
 8007176:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	887a      	ldrh	r2, [r7, #2]
 800717c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007194:	2b40      	cmp	r3, #64	; 0x40
 8007196:	d007      	beq.n	80071a8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071b0:	d178      	bne.n	80072a4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d002      	beq.n	80071c0 <HAL_SPI_TransmitReceive+0x10a>
 80071ba:	8b7b      	ldrh	r3, [r7, #26]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d166      	bne.n	800728e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c4:	881a      	ldrh	r2, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d0:	1c9a      	adds	r2, r3, #2
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071da:	b29b      	uxth	r3, r3
 80071dc:	3b01      	subs	r3, #1
 80071de:	b29a      	uxth	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071e4:	e053      	b.n	800728e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	f003 0302 	and.w	r3, r3, #2
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d11b      	bne.n	800722c <HAL_SPI_TransmitReceive+0x176>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d016      	beq.n	800722c <HAL_SPI_TransmitReceive+0x176>
 80071fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007200:	2b01      	cmp	r3, #1
 8007202:	d113      	bne.n	800722c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007208:	881a      	ldrh	r2, [r3, #0]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007214:	1c9a      	adds	r2, r3, #2
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800721e:	b29b      	uxth	r3, r3
 8007220:	3b01      	subs	r3, #1
 8007222:	b29a      	uxth	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007228:	2300      	movs	r3, #0
 800722a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	2b01      	cmp	r3, #1
 8007238:	d119      	bne.n	800726e <HAL_SPI_TransmitReceive+0x1b8>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800723e:	b29b      	uxth	r3, r3
 8007240:	2b00      	cmp	r3, #0
 8007242:	d014      	beq.n	800726e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68da      	ldr	r2, [r3, #12]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724e:	b292      	uxth	r2, r2
 8007250:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007256:	1c9a      	adds	r2, r3, #2
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007260:	b29b      	uxth	r3, r3
 8007262:	3b01      	subs	r3, #1
 8007264:	b29a      	uxth	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800726a:	2301      	movs	r3, #1
 800726c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800726e:	f7fc fa83 	bl	8003778 <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800727a:	429a      	cmp	r2, r3
 800727c:	d807      	bhi.n	800728e <HAL_SPI_TransmitReceive+0x1d8>
 800727e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007284:	d003      	beq.n	800728e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800728c:	e0a7      	b.n	80073de <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007292:	b29b      	uxth	r3, r3
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1a6      	bne.n	80071e6 <HAL_SPI_TransmitReceive+0x130>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800729c:	b29b      	uxth	r3, r3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1a1      	bne.n	80071e6 <HAL_SPI_TransmitReceive+0x130>
 80072a2:	e07c      	b.n	800739e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d002      	beq.n	80072b2 <HAL_SPI_TransmitReceive+0x1fc>
 80072ac:	8b7b      	ldrh	r3, [r7, #26]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d16b      	bne.n	800738a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	330c      	adds	r3, #12
 80072bc:	7812      	ldrb	r2, [r2, #0]
 80072be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c4:	1c5a      	adds	r2, r3, #1
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	3b01      	subs	r3, #1
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072d8:	e057      	b.n	800738a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f003 0302 	and.w	r3, r3, #2
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d11c      	bne.n	8007322 <HAL_SPI_TransmitReceive+0x26c>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d017      	beq.n	8007322 <HAL_SPI_TransmitReceive+0x26c>
 80072f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d114      	bne.n	8007322 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	330c      	adds	r3, #12
 8007302:	7812      	ldrb	r2, [r2, #0]
 8007304:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730a:	1c5a      	adds	r2, r3, #1
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007314:	b29b      	uxth	r3, r3
 8007316:	3b01      	subs	r3, #1
 8007318:	b29a      	uxth	r2, r3
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800731e:	2300      	movs	r3, #0
 8007320:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f003 0301 	and.w	r3, r3, #1
 800732c:	2b01      	cmp	r3, #1
 800732e:	d119      	bne.n	8007364 <HAL_SPI_TransmitReceive+0x2ae>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007334:	b29b      	uxth	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	d014      	beq.n	8007364 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68da      	ldr	r2, [r3, #12]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007344:	b2d2      	uxtb	r2, r2
 8007346:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007356:	b29b      	uxth	r3, r3
 8007358:	3b01      	subs	r3, #1
 800735a:	b29a      	uxth	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007360:	2301      	movs	r3, #1
 8007362:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007364:	f7fc fa08 	bl	8003778 <HAL_GetTick>
 8007368:	4602      	mov	r2, r0
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007370:	429a      	cmp	r2, r3
 8007372:	d803      	bhi.n	800737c <HAL_SPI_TransmitReceive+0x2c6>
 8007374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737a:	d102      	bne.n	8007382 <HAL_SPI_TransmitReceive+0x2cc>
 800737c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737e:	2b00      	cmp	r3, #0
 8007380:	d103      	bne.n	800738a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007388:	e029      	b.n	80073de <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800738e:	b29b      	uxth	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1a2      	bne.n	80072da <HAL_SPI_TransmitReceive+0x224>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007398:	b29b      	uxth	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d19d      	bne.n	80072da <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800739e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f000 f926 	bl	80075f4 <SPI_EndRxTxTransaction>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d006      	beq.n	80073bc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2220      	movs	r2, #32
 80073b8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80073ba:	e010      	b.n	80073de <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10b      	bne.n	80073dc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073c4:	2300      	movs	r3, #0
 80073c6:	617b      	str	r3, [r7, #20]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	617b      	str	r3, [r7, #20]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	617b      	str	r3, [r7, #20]
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	e000      	b.n	80073de <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80073dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80073ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3730      	adds	r7, #48	; 0x30
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b083      	sub	sp, #12
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007408:	b2db      	uxtb	r3, r3
}
 800740a:	4618      	mov	r0, r3
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
	...

08007418 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b088      	sub	sp, #32
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	603b      	str	r3, [r7, #0]
 8007424:	4613      	mov	r3, r2
 8007426:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007428:	f7fc f9a6 	bl	8003778 <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007430:	1a9b      	subs	r3, r3, r2
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	4413      	add	r3, r2
 8007436:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007438:	f7fc f99e 	bl	8003778 <HAL_GetTick>
 800743c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800743e:	4b39      	ldr	r3, [pc, #228]	; (8007524 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	015b      	lsls	r3, r3, #5
 8007444:	0d1b      	lsrs	r3, r3, #20
 8007446:	69fa      	ldr	r2, [r7, #28]
 8007448:	fb02 f303 	mul.w	r3, r2, r3
 800744c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800744e:	e054      	b.n	80074fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007456:	d050      	beq.n	80074fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007458:	f7fc f98e 	bl	8003778 <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	69fa      	ldr	r2, [r7, #28]
 8007464:	429a      	cmp	r2, r3
 8007466:	d902      	bls.n	800746e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d13d      	bne.n	80074ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	685a      	ldr	r2, [r3, #4]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800747c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007486:	d111      	bne.n	80074ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007490:	d004      	beq.n	800749c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800749a:	d107      	bne.n	80074ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074b4:	d10f      	bne.n	80074d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074c4:	601a      	str	r2, [r3, #0]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e017      	b.n	800751a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074f0:	2300      	movs	r3, #0
 80074f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	3b01      	subs	r3, #1
 80074f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	689a      	ldr	r2, [r3, #8]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	4013      	ands	r3, r2
 8007504:	68ba      	ldr	r2, [r7, #8]
 8007506:	429a      	cmp	r2, r3
 8007508:	bf0c      	ite	eq
 800750a:	2301      	moveq	r3, #1
 800750c:	2300      	movne	r3, #0
 800750e:	b2db      	uxtb	r3, r3
 8007510:	461a      	mov	r2, r3
 8007512:	79fb      	ldrb	r3, [r7, #7]
 8007514:	429a      	cmp	r2, r3
 8007516:	d19b      	bne.n	8007450 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3720      	adds	r7, #32
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	20000004 	.word	0x20000004

08007528 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af02      	add	r7, sp, #8
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800753c:	d111      	bne.n	8007562 <SPI_EndRxTransaction+0x3a>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007546:	d004      	beq.n	8007552 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007550:	d107      	bne.n	8007562 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007560:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800756a:	d12a      	bne.n	80075c2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007574:	d012      	beq.n	800759c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	2200      	movs	r2, #0
 800757e:	2180      	movs	r1, #128	; 0x80
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f7ff ff49 	bl	8007418 <SPI_WaitFlagStateUntilTimeout>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d02d      	beq.n	80075e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007590:	f043 0220 	orr.w	r2, r3, #32
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e026      	b.n	80075ea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2200      	movs	r2, #0
 80075a4:	2101      	movs	r1, #1
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f7ff ff36 	bl	8007418 <SPI_WaitFlagStateUntilTimeout>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d01a      	beq.n	80075e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b6:	f043 0220 	orr.w	r2, r3, #32
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e013      	b.n	80075ea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	2200      	movs	r2, #0
 80075ca:	2101      	movs	r1, #1
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f7ff ff23 	bl	8007418 <SPI_WaitFlagStateUntilTimeout>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d007      	beq.n	80075e8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075dc:	f043 0220 	orr.w	r2, r3, #32
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e000      	b.n	80075ea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
	...

080075f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b088      	sub	sp, #32
 80075f8:	af02      	add	r7, sp, #8
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007600:	4b1b      	ldr	r3, [pc, #108]	; (8007670 <SPI_EndRxTxTransaction+0x7c>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a1b      	ldr	r2, [pc, #108]	; (8007674 <SPI_EndRxTxTransaction+0x80>)
 8007606:	fba2 2303 	umull	r2, r3, r2, r3
 800760a:	0d5b      	lsrs	r3, r3, #21
 800760c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007610:	fb02 f303 	mul.w	r3, r2, r3
 8007614:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800761e:	d112      	bne.n	8007646 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2200      	movs	r2, #0
 8007628:	2180      	movs	r1, #128	; 0x80
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f7ff fef4 	bl	8007418 <SPI_WaitFlagStateUntilTimeout>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d016      	beq.n	8007664 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800763a:	f043 0220 	orr.w	r2, r3, #32
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e00f      	b.n	8007666 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00a      	beq.n	8007662 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	3b01      	subs	r3, #1
 8007650:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800765c:	2b80      	cmp	r3, #128	; 0x80
 800765e:	d0f2      	beq.n	8007646 <SPI_EndRxTxTransaction+0x52>
 8007660:	e000      	b.n	8007664 <SPI_EndRxTxTransaction+0x70>
        break;
 8007662:	bf00      	nop
  }

  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3718      	adds	r7, #24
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	20000004 	.word	0x20000004
 8007674:	165e9f81 	.word	0x165e9f81

08007678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d101      	bne.n	800768a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e041      	b.n	800770e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007690:	b2db      	uxtb	r3, r3
 8007692:	2b00      	cmp	r3, #0
 8007694:	d106      	bne.n	80076a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7fa fd8a 	bl	80021b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2202      	movs	r2, #2
 80076a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	3304      	adds	r3, #4
 80076b4:	4619      	mov	r1, r3
 80076b6:	4610      	mov	r0, r2
 80076b8:	f000 fa96 	bl	8007be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
	...

08007718 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007726:	b2db      	uxtb	r3, r3
 8007728:	2b01      	cmp	r3, #1
 800772a:	d001      	beq.n	8007730 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e04e      	b.n	80077ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2202      	movs	r2, #2
 8007734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68da      	ldr	r2, [r3, #12]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f042 0201 	orr.w	r2, r2, #1
 8007746:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a23      	ldr	r2, [pc, #140]	; (80077dc <HAL_TIM_Base_Start_IT+0xc4>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d022      	beq.n	8007798 <HAL_TIM_Base_Start_IT+0x80>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800775a:	d01d      	beq.n	8007798 <HAL_TIM_Base_Start_IT+0x80>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a1f      	ldr	r2, [pc, #124]	; (80077e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d018      	beq.n	8007798 <HAL_TIM_Base_Start_IT+0x80>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a1e      	ldr	r2, [pc, #120]	; (80077e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d013      	beq.n	8007798 <HAL_TIM_Base_Start_IT+0x80>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a1c      	ldr	r2, [pc, #112]	; (80077e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d00e      	beq.n	8007798 <HAL_TIM_Base_Start_IT+0x80>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a1b      	ldr	r2, [pc, #108]	; (80077ec <HAL_TIM_Base_Start_IT+0xd4>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d009      	beq.n	8007798 <HAL_TIM_Base_Start_IT+0x80>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a19      	ldr	r2, [pc, #100]	; (80077f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d004      	beq.n	8007798 <HAL_TIM_Base_Start_IT+0x80>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a18      	ldr	r2, [pc, #96]	; (80077f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d111      	bne.n	80077bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f003 0307 	and.w	r3, r3, #7
 80077a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2b06      	cmp	r3, #6
 80077a8:	d010      	beq.n	80077cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f042 0201 	orr.w	r2, r2, #1
 80077b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ba:	e007      	b.n	80077cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f042 0201 	orr.w	r2, r2, #1
 80077ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	40010000 	.word	0x40010000
 80077e0:	40000400 	.word	0x40000400
 80077e4:	40000800 	.word	0x40000800
 80077e8:	40000c00 	.word	0x40000c00
 80077ec:	40010400 	.word	0x40010400
 80077f0:	40014000 	.word	0x40014000
 80077f4:	40001800 	.word	0x40001800

080077f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	f003 0302 	and.w	r3, r3, #2
 800780a:	2b02      	cmp	r3, #2
 800780c:	d122      	bne.n	8007854 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	f003 0302 	and.w	r3, r3, #2
 8007818:	2b02      	cmp	r3, #2
 800781a:	d11b      	bne.n	8007854 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f06f 0202 	mvn.w	r2, #2
 8007824:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	f003 0303 	and.w	r3, r3, #3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d003      	beq.n	8007842 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f9b5 	bl	8007baa <HAL_TIM_IC_CaptureCallback>
 8007840:	e005      	b.n	800784e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f9a7 	bl	8007b96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f9b8 	bl	8007bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	f003 0304 	and.w	r3, r3, #4
 800785e:	2b04      	cmp	r3, #4
 8007860:	d122      	bne.n	80078a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	f003 0304 	and.w	r3, r3, #4
 800786c:	2b04      	cmp	r3, #4
 800786e:	d11b      	bne.n	80078a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f06f 0204 	mvn.w	r2, #4
 8007878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2202      	movs	r2, #2
 800787e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800788a:	2b00      	cmp	r3, #0
 800788c:	d003      	beq.n	8007896 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f98b 	bl	8007baa <HAL_TIM_IC_CaptureCallback>
 8007894:	e005      	b.n	80078a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f97d 	bl	8007b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 f98e 	bl	8007bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	f003 0308 	and.w	r3, r3, #8
 80078b2:	2b08      	cmp	r3, #8
 80078b4:	d122      	bne.n	80078fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	f003 0308 	and.w	r3, r3, #8
 80078c0:	2b08      	cmp	r3, #8
 80078c2:	d11b      	bne.n	80078fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f06f 0208 	mvn.w	r2, #8
 80078cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2204      	movs	r2, #4
 80078d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	f003 0303 	and.w	r3, r3, #3
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d003      	beq.n	80078ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f961 	bl	8007baa <HAL_TIM_IC_CaptureCallback>
 80078e8:	e005      	b.n	80078f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f953 	bl	8007b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f964 	bl	8007bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	f003 0310 	and.w	r3, r3, #16
 8007906:	2b10      	cmp	r3, #16
 8007908:	d122      	bne.n	8007950 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	f003 0310 	and.w	r3, r3, #16
 8007914:	2b10      	cmp	r3, #16
 8007916:	d11b      	bne.n	8007950 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f06f 0210 	mvn.w	r2, #16
 8007920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2208      	movs	r2, #8
 8007926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	69db      	ldr	r3, [r3, #28]
 800792e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007932:	2b00      	cmp	r3, #0
 8007934:	d003      	beq.n	800793e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f937 	bl	8007baa <HAL_TIM_IC_CaptureCallback>
 800793c:	e005      	b.n	800794a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f929 	bl	8007b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f93a 	bl	8007bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	f003 0301 	and.w	r3, r3, #1
 800795a:	2b01      	cmp	r3, #1
 800795c:	d10e      	bne.n	800797c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	2b01      	cmp	r3, #1
 800796a:	d107      	bne.n	800797c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f06f 0201 	mvn.w	r2, #1
 8007974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7f9 fff0 	bl	800195c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007986:	2b80      	cmp	r3, #128	; 0x80
 8007988:	d10e      	bne.n	80079a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007994:	2b80      	cmp	r3, #128	; 0x80
 8007996:	d107      	bne.n	80079a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fae0 	bl	8007f68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b2:	2b40      	cmp	r3, #64	; 0x40
 80079b4:	d10e      	bne.n	80079d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c0:	2b40      	cmp	r3, #64	; 0x40
 80079c2:	d107      	bne.n	80079d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f8ff 	bl	8007bd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	f003 0320 	and.w	r3, r3, #32
 80079de:	2b20      	cmp	r3, #32
 80079e0:	d10e      	bne.n	8007a00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	f003 0320 	and.w	r3, r3, #32
 80079ec:	2b20      	cmp	r3, #32
 80079ee:	d107      	bne.n	8007a00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f06f 0220 	mvn.w	r2, #32
 80079f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 faaa 	bl	8007f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a00:	bf00      	nop
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d101      	bne.n	8007a24 <HAL_TIM_ConfigClockSource+0x1c>
 8007a20:	2302      	movs	r3, #2
 8007a22:	e0b4      	b.n	8007b8e <HAL_TIM_ConfigClockSource+0x186>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2202      	movs	r2, #2
 8007a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	68ba      	ldr	r2, [r7, #8]
 8007a52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a5c:	d03e      	beq.n	8007adc <HAL_TIM_ConfigClockSource+0xd4>
 8007a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a62:	f200 8087 	bhi.w	8007b74 <HAL_TIM_ConfigClockSource+0x16c>
 8007a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a6a:	f000 8086 	beq.w	8007b7a <HAL_TIM_ConfigClockSource+0x172>
 8007a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a72:	d87f      	bhi.n	8007b74 <HAL_TIM_ConfigClockSource+0x16c>
 8007a74:	2b70      	cmp	r3, #112	; 0x70
 8007a76:	d01a      	beq.n	8007aae <HAL_TIM_ConfigClockSource+0xa6>
 8007a78:	2b70      	cmp	r3, #112	; 0x70
 8007a7a:	d87b      	bhi.n	8007b74 <HAL_TIM_ConfigClockSource+0x16c>
 8007a7c:	2b60      	cmp	r3, #96	; 0x60
 8007a7e:	d050      	beq.n	8007b22 <HAL_TIM_ConfigClockSource+0x11a>
 8007a80:	2b60      	cmp	r3, #96	; 0x60
 8007a82:	d877      	bhi.n	8007b74 <HAL_TIM_ConfigClockSource+0x16c>
 8007a84:	2b50      	cmp	r3, #80	; 0x50
 8007a86:	d03c      	beq.n	8007b02 <HAL_TIM_ConfigClockSource+0xfa>
 8007a88:	2b50      	cmp	r3, #80	; 0x50
 8007a8a:	d873      	bhi.n	8007b74 <HAL_TIM_ConfigClockSource+0x16c>
 8007a8c:	2b40      	cmp	r3, #64	; 0x40
 8007a8e:	d058      	beq.n	8007b42 <HAL_TIM_ConfigClockSource+0x13a>
 8007a90:	2b40      	cmp	r3, #64	; 0x40
 8007a92:	d86f      	bhi.n	8007b74 <HAL_TIM_ConfigClockSource+0x16c>
 8007a94:	2b30      	cmp	r3, #48	; 0x30
 8007a96:	d064      	beq.n	8007b62 <HAL_TIM_ConfigClockSource+0x15a>
 8007a98:	2b30      	cmp	r3, #48	; 0x30
 8007a9a:	d86b      	bhi.n	8007b74 <HAL_TIM_ConfigClockSource+0x16c>
 8007a9c:	2b20      	cmp	r3, #32
 8007a9e:	d060      	beq.n	8007b62 <HAL_TIM_ConfigClockSource+0x15a>
 8007aa0:	2b20      	cmp	r3, #32
 8007aa2:	d867      	bhi.n	8007b74 <HAL_TIM_ConfigClockSource+0x16c>
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d05c      	beq.n	8007b62 <HAL_TIM_ConfigClockSource+0x15a>
 8007aa8:	2b10      	cmp	r3, #16
 8007aaa:	d05a      	beq.n	8007b62 <HAL_TIM_ConfigClockSource+0x15a>
 8007aac:	e062      	b.n	8007b74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6818      	ldr	r0, [r3, #0]
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	6899      	ldr	r1, [r3, #8]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	685a      	ldr	r2, [r3, #4]
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	f000 f9ad 	bl	8007e1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ad0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	609a      	str	r2, [r3, #8]
      break;
 8007ada:	e04f      	b.n	8007b7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6818      	ldr	r0, [r3, #0]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	6899      	ldr	r1, [r3, #8]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	685a      	ldr	r2, [r3, #4]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	f000 f996 	bl	8007e1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	689a      	ldr	r2, [r3, #8]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007afe:	609a      	str	r2, [r3, #8]
      break;
 8007b00:	e03c      	b.n	8007b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6818      	ldr	r0, [r3, #0]
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	6859      	ldr	r1, [r3, #4]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	f000 f90a 	bl	8007d28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2150      	movs	r1, #80	; 0x50
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 f963 	bl	8007de6 <TIM_ITRx_SetConfig>
      break;
 8007b20:	e02c      	b.n	8007b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6818      	ldr	r0, [r3, #0]
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	6859      	ldr	r1, [r3, #4]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	f000 f929 	bl	8007d86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2160      	movs	r1, #96	; 0x60
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f000 f953 	bl	8007de6 <TIM_ITRx_SetConfig>
      break;
 8007b40:	e01c      	b.n	8007b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6818      	ldr	r0, [r3, #0]
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	6859      	ldr	r1, [r3, #4]
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	f000 f8ea 	bl	8007d28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2140      	movs	r1, #64	; 0x40
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f000 f943 	bl	8007de6 <TIM_ITRx_SetConfig>
      break;
 8007b60:	e00c      	b.n	8007b7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	f000 f93a 	bl	8007de6 <TIM_ITRx_SetConfig>
      break;
 8007b72:	e003      	b.n	8007b7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	73fb      	strb	r3, [r7, #15]
      break;
 8007b78:	e000      	b.n	8007b7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007b7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b96:	b480      	push	{r7}
 8007b98:	b083      	sub	sp, #12
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b9e:	bf00      	nop
 8007ba0:	370c      	adds	r7, #12
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b083      	sub	sp, #12
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007bb2:	bf00      	nop
 8007bb4:	370c      	adds	r7, #12
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr

08007bbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	b083      	sub	sp, #12
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007bc6:	bf00      	nop
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b083      	sub	sp, #12
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007bda:	bf00      	nop
 8007bdc:	370c      	adds	r7, #12
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
	...

08007be8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a40      	ldr	r2, [pc, #256]	; (8007cfc <TIM_Base_SetConfig+0x114>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d013      	beq.n	8007c28 <TIM_Base_SetConfig+0x40>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c06:	d00f      	beq.n	8007c28 <TIM_Base_SetConfig+0x40>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a3d      	ldr	r2, [pc, #244]	; (8007d00 <TIM_Base_SetConfig+0x118>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d00b      	beq.n	8007c28 <TIM_Base_SetConfig+0x40>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a3c      	ldr	r2, [pc, #240]	; (8007d04 <TIM_Base_SetConfig+0x11c>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d007      	beq.n	8007c28 <TIM_Base_SetConfig+0x40>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a3b      	ldr	r2, [pc, #236]	; (8007d08 <TIM_Base_SetConfig+0x120>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d003      	beq.n	8007c28 <TIM_Base_SetConfig+0x40>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4a3a      	ldr	r2, [pc, #232]	; (8007d0c <TIM_Base_SetConfig+0x124>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d108      	bne.n	8007c3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a2f      	ldr	r2, [pc, #188]	; (8007cfc <TIM_Base_SetConfig+0x114>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d02b      	beq.n	8007c9a <TIM_Base_SetConfig+0xb2>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c48:	d027      	beq.n	8007c9a <TIM_Base_SetConfig+0xb2>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a2c      	ldr	r2, [pc, #176]	; (8007d00 <TIM_Base_SetConfig+0x118>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d023      	beq.n	8007c9a <TIM_Base_SetConfig+0xb2>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a2b      	ldr	r2, [pc, #172]	; (8007d04 <TIM_Base_SetConfig+0x11c>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d01f      	beq.n	8007c9a <TIM_Base_SetConfig+0xb2>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a2a      	ldr	r2, [pc, #168]	; (8007d08 <TIM_Base_SetConfig+0x120>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d01b      	beq.n	8007c9a <TIM_Base_SetConfig+0xb2>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a29      	ldr	r2, [pc, #164]	; (8007d0c <TIM_Base_SetConfig+0x124>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d017      	beq.n	8007c9a <TIM_Base_SetConfig+0xb2>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a28      	ldr	r2, [pc, #160]	; (8007d10 <TIM_Base_SetConfig+0x128>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d013      	beq.n	8007c9a <TIM_Base_SetConfig+0xb2>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a27      	ldr	r2, [pc, #156]	; (8007d14 <TIM_Base_SetConfig+0x12c>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d00f      	beq.n	8007c9a <TIM_Base_SetConfig+0xb2>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a26      	ldr	r2, [pc, #152]	; (8007d18 <TIM_Base_SetConfig+0x130>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d00b      	beq.n	8007c9a <TIM_Base_SetConfig+0xb2>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a25      	ldr	r2, [pc, #148]	; (8007d1c <TIM_Base_SetConfig+0x134>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d007      	beq.n	8007c9a <TIM_Base_SetConfig+0xb2>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a24      	ldr	r2, [pc, #144]	; (8007d20 <TIM_Base_SetConfig+0x138>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d003      	beq.n	8007c9a <TIM_Base_SetConfig+0xb2>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a23      	ldr	r2, [pc, #140]	; (8007d24 <TIM_Base_SetConfig+0x13c>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d108      	bne.n	8007cac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	695b      	ldr	r3, [r3, #20]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	689a      	ldr	r2, [r3, #8]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a0a      	ldr	r2, [pc, #40]	; (8007cfc <TIM_Base_SetConfig+0x114>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d003      	beq.n	8007ce0 <TIM_Base_SetConfig+0xf8>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a0c      	ldr	r2, [pc, #48]	; (8007d0c <TIM_Base_SetConfig+0x124>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d103      	bne.n	8007ce8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	691a      	ldr	r2, [r3, #16]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	615a      	str	r2, [r3, #20]
}
 8007cee:	bf00      	nop
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	40010000 	.word	0x40010000
 8007d00:	40000400 	.word	0x40000400
 8007d04:	40000800 	.word	0x40000800
 8007d08:	40000c00 	.word	0x40000c00
 8007d0c:	40010400 	.word	0x40010400
 8007d10:	40014000 	.word	0x40014000
 8007d14:	40014400 	.word	0x40014400
 8007d18:	40014800 	.word	0x40014800
 8007d1c:	40001800 	.word	0x40001800
 8007d20:	40001c00 	.word	0x40001c00
 8007d24:	40002000 	.word	0x40002000

08007d28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b087      	sub	sp, #28
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6a1b      	ldr	r3, [r3, #32]
 8007d38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6a1b      	ldr	r3, [r3, #32]
 8007d3e:	f023 0201 	bic.w	r2, r3, #1
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	699b      	ldr	r3, [r3, #24]
 8007d4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	011b      	lsls	r3, r3, #4
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	f023 030a 	bic.w	r3, r3, #10
 8007d64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	693a      	ldr	r2, [r7, #16]
 8007d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	621a      	str	r2, [r3, #32]
}
 8007d7a:	bf00      	nop
 8007d7c:	371c      	adds	r7, #28
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr

08007d86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d86:	b480      	push	{r7}
 8007d88:	b087      	sub	sp, #28
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	60f8      	str	r0, [r7, #12]
 8007d8e:	60b9      	str	r1, [r7, #8]
 8007d90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	f023 0210 	bic.w	r2, r3, #16
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6a1b      	ldr	r3, [r3, #32]
 8007da8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007db0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	031b      	lsls	r3, r3, #12
 8007db6:	697a      	ldr	r2, [r7, #20]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007dc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	011b      	lsls	r3, r3, #4
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	697a      	ldr	r2, [r7, #20]
 8007dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	693a      	ldr	r2, [r7, #16]
 8007dd8:	621a      	str	r2, [r3, #32]
}
 8007dda:	bf00      	nop
 8007ddc:	371c      	adds	r7, #28
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b085      	sub	sp, #20
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
 8007dee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007dfe:	683a      	ldr	r2, [r7, #0]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	f043 0307 	orr.w	r3, r3, #7
 8007e08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	609a      	str	r2, [r3, #8]
}
 8007e10:	bf00      	nop
 8007e12:	3714      	adds	r7, #20
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b087      	sub	sp, #28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
 8007e28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	021a      	lsls	r2, r3, #8
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	431a      	orrs	r2, r3
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	697a      	ldr	r2, [r7, #20]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	609a      	str	r2, [r3, #8]
}
 8007e50:	bf00      	nop
 8007e52:	371c      	adds	r7, #28
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d101      	bne.n	8007e74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e70:	2302      	movs	r3, #2
 8007e72:	e05a      	b.n	8007f2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2202      	movs	r2, #2
 8007e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a21      	ldr	r2, [pc, #132]	; (8007f38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d022      	beq.n	8007efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ec0:	d01d      	beq.n	8007efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a1d      	ldr	r2, [pc, #116]	; (8007f3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d018      	beq.n	8007efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a1b      	ldr	r2, [pc, #108]	; (8007f40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d013      	beq.n	8007efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a1a      	ldr	r2, [pc, #104]	; (8007f44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d00e      	beq.n	8007efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a18      	ldr	r2, [pc, #96]	; (8007f48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d009      	beq.n	8007efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a17      	ldr	r2, [pc, #92]	; (8007f4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d004      	beq.n	8007efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a15      	ldr	r2, [pc, #84]	; (8007f50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d10c      	bne.n	8007f18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	68ba      	ldr	r2, [r7, #8]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68ba      	ldr	r2, [r7, #8]
 8007f16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	40010000 	.word	0x40010000
 8007f3c:	40000400 	.word	0x40000400
 8007f40:	40000800 	.word	0x40000800
 8007f44:	40000c00 	.word	0x40000c00
 8007f48:	40010400 	.word	0x40010400
 8007f4c:	40014000 	.word	0x40014000
 8007f50:	40001800 	.word	0x40001800

08007f54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e03f      	b.n	800800e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d106      	bne.n	8007fa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7fa f97e 	bl	80022a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2224      	movs	r2, #36	; 0x24
 8007fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68da      	ldr	r2, [r3, #12]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fddb 	bl	8008b7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	691a      	ldr	r2, [r3, #16]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	695a      	ldr	r2, [r3, #20]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fe4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68da      	ldr	r2, [r3, #12]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ff4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2220      	movs	r2, #32
 8008000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2220      	movs	r2, #32
 8008008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b08a      	sub	sp, #40	; 0x28
 800801a:	af02      	add	r7, sp, #8
 800801c:	60f8      	str	r0, [r7, #12]
 800801e:	60b9      	str	r1, [r7, #8]
 8008020:	603b      	str	r3, [r7, #0]
 8008022:	4613      	mov	r3, r2
 8008024:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008026:	2300      	movs	r3, #0
 8008028:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008030:	b2db      	uxtb	r3, r3
 8008032:	2b20      	cmp	r3, #32
 8008034:	d17c      	bne.n	8008130 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d002      	beq.n	8008042 <HAL_UART_Transmit+0x2c>
 800803c:	88fb      	ldrh	r3, [r7, #6]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	e075      	b.n	8008132 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800804c:	2b01      	cmp	r3, #1
 800804e:	d101      	bne.n	8008054 <HAL_UART_Transmit+0x3e>
 8008050:	2302      	movs	r3, #2
 8008052:	e06e      	b.n	8008132 <HAL_UART_Transmit+0x11c>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2200      	movs	r2, #0
 8008060:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2221      	movs	r2, #33	; 0x21
 8008066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800806a:	f7fb fb85 	bl	8003778 <HAL_GetTick>
 800806e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	88fa      	ldrh	r2, [r7, #6]
 8008074:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	88fa      	ldrh	r2, [r7, #6]
 800807a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008084:	d108      	bne.n	8008098 <HAL_UART_Transmit+0x82>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d104      	bne.n	8008098 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800808e:	2300      	movs	r3, #0
 8008090:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	61bb      	str	r3, [r7, #24]
 8008096:	e003      	b.n	80080a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800809c:	2300      	movs	r3, #0
 800809e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80080a8:	e02a      	b.n	8008100 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	2200      	movs	r2, #0
 80080b2:	2180      	movs	r1, #128	; 0x80
 80080b4:	68f8      	ldr	r0, [r7, #12]
 80080b6:	f000 fb1f 	bl	80086f8 <UART_WaitOnFlagUntilTimeout>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e036      	b.n	8008132 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10b      	bne.n	80080e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	881b      	ldrh	r3, [r3, #0]
 80080ce:	461a      	mov	r2, r3
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	3302      	adds	r3, #2
 80080de:	61bb      	str	r3, [r7, #24]
 80080e0:	e007      	b.n	80080f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	781a      	ldrb	r2, [r3, #0]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	3301      	adds	r3, #1
 80080f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	3b01      	subs	r3, #1
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008104:	b29b      	uxth	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1cf      	bne.n	80080aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	9300      	str	r3, [sp, #0]
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2200      	movs	r2, #0
 8008112:	2140      	movs	r1, #64	; 0x40
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f000 faef 	bl	80086f8 <UART_WaitOnFlagUntilTimeout>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d001      	beq.n	8008124 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e006      	b.n	8008132 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2220      	movs	r2, #32
 8008128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800812c:	2300      	movs	r3, #0
 800812e:	e000      	b.n	8008132 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008130:	2302      	movs	r3, #2
  }
}
 8008132:	4618      	mov	r0, r3
 8008134:	3720      	adds	r7, #32
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b084      	sub	sp, #16
 800813e:	af00      	add	r7, sp, #0
 8008140:	60f8      	str	r0, [r7, #12]
 8008142:	60b9      	str	r1, [r7, #8]
 8008144:	4613      	mov	r3, r2
 8008146:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800814e:	b2db      	uxtb	r3, r3
 8008150:	2b20      	cmp	r3, #32
 8008152:	d11d      	bne.n	8008190 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d002      	beq.n	8008160 <HAL_UART_Receive_IT+0x26>
 800815a:	88fb      	ldrh	r3, [r7, #6]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d101      	bne.n	8008164 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	e016      	b.n	8008192 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800816a:	2b01      	cmp	r3, #1
 800816c:	d101      	bne.n	8008172 <HAL_UART_Receive_IT+0x38>
 800816e:	2302      	movs	r3, #2
 8008170:	e00f      	b.n	8008192 <HAL_UART_Receive_IT+0x58>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008180:	88fb      	ldrh	r3, [r7, #6]
 8008182:	461a      	mov	r2, r3
 8008184:	68b9      	ldr	r1, [r7, #8]
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f000 fb24 	bl	80087d4 <UART_Start_Receive_IT>
 800818c:	4603      	mov	r3, r0
 800818e:	e000      	b.n	8008192 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008190:	2302      	movs	r3, #2
  }
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
	...

0800819c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b0ba      	sub	sp, #232	; 0xe8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80081c2:	2300      	movs	r3, #0
 80081c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80081c8:	2300      	movs	r3, #0
 80081ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80081ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081d2:	f003 030f 	and.w	r3, r3, #15
 80081d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80081da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10f      	bne.n	8008202 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081e6:	f003 0320 	and.w	r3, r3, #32
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d009      	beq.n	8008202 <HAL_UART_IRQHandler+0x66>
 80081ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081f2:	f003 0320 	and.w	r3, r3, #32
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d003      	beq.n	8008202 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 fc03 	bl	8008a06 <UART_Receive_IT>
      return;
 8008200:	e256      	b.n	80086b0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008206:	2b00      	cmp	r3, #0
 8008208:	f000 80de 	beq.w	80083c8 <HAL_UART_IRQHandler+0x22c>
 800820c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008210:	f003 0301 	and.w	r3, r3, #1
 8008214:	2b00      	cmp	r3, #0
 8008216:	d106      	bne.n	8008226 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800821c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 80d1 	beq.w	80083c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00b      	beq.n	800824a <HAL_UART_IRQHandler+0xae>
 8008232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800823a:	2b00      	cmp	r3, #0
 800823c:	d005      	beq.n	800824a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008242:	f043 0201 	orr.w	r2, r3, #1
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800824a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800824e:	f003 0304 	and.w	r3, r3, #4
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00b      	beq.n	800826e <HAL_UART_IRQHandler+0xd2>
 8008256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	2b00      	cmp	r3, #0
 8008260:	d005      	beq.n	800826e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008266:	f043 0202 	orr.w	r2, r3, #2
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800826e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008272:	f003 0302 	and.w	r3, r3, #2
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00b      	beq.n	8008292 <HAL_UART_IRQHandler+0xf6>
 800827a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800827e:	f003 0301 	and.w	r3, r3, #1
 8008282:	2b00      	cmp	r3, #0
 8008284:	d005      	beq.n	8008292 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828a:	f043 0204 	orr.w	r2, r3, #4
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008296:	f003 0308 	and.w	r3, r3, #8
 800829a:	2b00      	cmp	r3, #0
 800829c:	d011      	beq.n	80082c2 <HAL_UART_IRQHandler+0x126>
 800829e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082a2:	f003 0320 	and.w	r3, r3, #32
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d105      	bne.n	80082b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80082aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d005      	beq.n	80082c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ba:	f043 0208 	orr.w	r2, r3, #8
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f000 81ed 	beq.w	80086a6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082d0:	f003 0320 	and.w	r3, r3, #32
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d008      	beq.n	80082ea <HAL_UART_IRQHandler+0x14e>
 80082d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082dc:	f003 0320 	and.w	r3, r3, #32
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d002      	beq.n	80082ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fb8e 	bl	8008a06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	695b      	ldr	r3, [r3, #20]
 80082f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f4:	2b40      	cmp	r3, #64	; 0x40
 80082f6:	bf0c      	ite	eq
 80082f8:	2301      	moveq	r3, #1
 80082fa:	2300      	movne	r3, #0
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008306:	f003 0308 	and.w	r3, r3, #8
 800830a:	2b00      	cmp	r3, #0
 800830c:	d103      	bne.n	8008316 <HAL_UART_IRQHandler+0x17a>
 800830e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008312:	2b00      	cmp	r3, #0
 8008314:	d04f      	beq.n	80083b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fa96 	bl	8008848 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008326:	2b40      	cmp	r3, #64	; 0x40
 8008328:	d141      	bne.n	80083ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	3314      	adds	r3, #20
 8008330:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008334:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008338:	e853 3f00 	ldrex	r3, [r3]
 800833c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008340:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008348:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	3314      	adds	r3, #20
 8008352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008356:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800835a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008366:	e841 2300 	strex	r3, r2, [r1]
 800836a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800836e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1d9      	bne.n	800832a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837a:	2b00      	cmp	r3, #0
 800837c:	d013      	beq.n	80083a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008382:	4a7d      	ldr	r2, [pc, #500]	; (8008578 <HAL_UART_IRQHandler+0x3dc>)
 8008384:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838a:	4618      	mov	r0, r3
 800838c:	f7fb fb92 	bl	8003ab4 <HAL_DMA_Abort_IT>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d016      	beq.n	80083c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80083a0:	4610      	mov	r0, r2
 80083a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083a4:	e00e      	b.n	80083c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f990 	bl	80086cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083ac:	e00a      	b.n	80083c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f98c 	bl	80086cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083b4:	e006      	b.n	80083c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f988 	bl	80086cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80083c2:	e170      	b.n	80086a6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083c4:	bf00      	nop
    return;
 80083c6:	e16e      	b.n	80086a6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	f040 814a 	bne.w	8008666 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80083d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083d6:	f003 0310 	and.w	r3, r3, #16
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f000 8143 	beq.w	8008666 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80083e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083e4:	f003 0310 	and.w	r3, r3, #16
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 813c 	beq.w	8008666 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083ee:	2300      	movs	r3, #0
 80083f0:	60bb      	str	r3, [r7, #8]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	60bb      	str	r3, [r7, #8]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	60bb      	str	r3, [r7, #8]
 8008402:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800840e:	2b40      	cmp	r3, #64	; 0x40
 8008410:	f040 80b4 	bne.w	800857c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008420:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008424:	2b00      	cmp	r3, #0
 8008426:	f000 8140 	beq.w	80086aa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800842e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008432:	429a      	cmp	r2, r3
 8008434:	f080 8139 	bcs.w	80086aa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800843e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008444:	69db      	ldr	r3, [r3, #28]
 8008446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800844a:	f000 8088 	beq.w	800855e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	330c      	adds	r3, #12
 8008454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008458:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800845c:	e853 3f00 	ldrex	r3, [r3]
 8008460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008464:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800846c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	330c      	adds	r3, #12
 8008476:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800847a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800847e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008482:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008486:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1d9      	bne.n	800844e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	3314      	adds	r3, #20
 80084a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084a4:	e853 3f00 	ldrex	r3, [r3]
 80084a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80084aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084ac:	f023 0301 	bic.w	r3, r3, #1
 80084b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	3314      	adds	r3, #20
 80084ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80084c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80084c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80084ca:	e841 2300 	strex	r3, r2, [r1]
 80084ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80084d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d1e1      	bne.n	800849a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	3314      	adds	r3, #20
 80084dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084e0:	e853 3f00 	ldrex	r3, [r3]
 80084e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80084e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3314      	adds	r3, #20
 80084f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80084fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80084fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008500:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008502:	e841 2300 	strex	r3, r2, [r1]
 8008506:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1e3      	bne.n	80084d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2220      	movs	r2, #32
 8008512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	330c      	adds	r3, #12
 8008522:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008526:	e853 3f00 	ldrex	r3, [r3]
 800852a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800852c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800852e:	f023 0310 	bic.w	r3, r3, #16
 8008532:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	330c      	adds	r3, #12
 800853c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008540:	65ba      	str	r2, [r7, #88]	; 0x58
 8008542:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008544:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008546:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008548:	e841 2300 	strex	r3, r2, [r1]
 800854c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800854e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1e3      	bne.n	800851c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008558:	4618      	mov	r0, r3
 800855a:	f7fb fa3b 	bl	80039d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008566:	b29b      	uxth	r3, r3
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	b29b      	uxth	r3, r3
 800856c:	4619      	mov	r1, r3
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f8b6 	bl	80086e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008574:	e099      	b.n	80086aa <HAL_UART_IRQHandler+0x50e>
 8008576:	bf00      	nop
 8008578:	0800890f 	.word	0x0800890f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008584:	b29b      	uxth	r3, r3
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008590:	b29b      	uxth	r3, r3
 8008592:	2b00      	cmp	r3, #0
 8008594:	f000 808b 	beq.w	80086ae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008598:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800859c:	2b00      	cmp	r3, #0
 800859e:	f000 8086 	beq.w	80086ae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	330c      	adds	r3, #12
 80085a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ac:	e853 3f00 	ldrex	r3, [r3]
 80085b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	330c      	adds	r3, #12
 80085c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80085c6:	647a      	str	r2, [r7, #68]	; 0x44
 80085c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085ce:	e841 2300 	strex	r3, r2, [r1]
 80085d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1e3      	bne.n	80085a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	3314      	adds	r3, #20
 80085e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e4:	e853 3f00 	ldrex	r3, [r3]
 80085e8:	623b      	str	r3, [r7, #32]
   return(result);
 80085ea:	6a3b      	ldr	r3, [r7, #32]
 80085ec:	f023 0301 	bic.w	r3, r3, #1
 80085f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3314      	adds	r3, #20
 80085fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80085fe:	633a      	str	r2, [r7, #48]	; 0x30
 8008600:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008606:	e841 2300 	strex	r3, r2, [r1]
 800860a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800860c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1e3      	bne.n	80085da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2220      	movs	r2, #32
 8008616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	330c      	adds	r3, #12
 8008626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	e853 3f00 	ldrex	r3, [r3]
 800862e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f023 0310 	bic.w	r3, r3, #16
 8008636:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	330c      	adds	r3, #12
 8008640:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008644:	61fa      	str	r2, [r7, #28]
 8008646:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008648:	69b9      	ldr	r1, [r7, #24]
 800864a:	69fa      	ldr	r2, [r7, #28]
 800864c:	e841 2300 	strex	r3, r2, [r1]
 8008650:	617b      	str	r3, [r7, #20]
   return(result);
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d1e3      	bne.n	8008620 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008658:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800865c:	4619      	mov	r1, r3
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f83e 	bl	80086e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008664:	e023      	b.n	80086ae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800866a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800866e:	2b00      	cmp	r3, #0
 8008670:	d009      	beq.n	8008686 <HAL_UART_IRQHandler+0x4ea>
 8008672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800867a:	2b00      	cmp	r3, #0
 800867c:	d003      	beq.n	8008686 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f959 	bl	8008936 <UART_Transmit_IT>
    return;
 8008684:	e014      	b.n	80086b0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800868a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00e      	beq.n	80086b0 <HAL_UART_IRQHandler+0x514>
 8008692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800869a:	2b00      	cmp	r3, #0
 800869c:	d008      	beq.n	80086b0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f999 	bl	80089d6 <UART_EndTransmit_IT>
    return;
 80086a4:	e004      	b.n	80086b0 <HAL_UART_IRQHandler+0x514>
    return;
 80086a6:	bf00      	nop
 80086a8:	e002      	b.n	80086b0 <HAL_UART_IRQHandler+0x514>
      return;
 80086aa:	bf00      	nop
 80086ac:	e000      	b.n	80086b0 <HAL_UART_IRQHandler+0x514>
      return;
 80086ae:	bf00      	nop
  }
}
 80086b0:	37e8      	adds	r7, #232	; 0xe8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop

080086b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80086d4:	bf00      	nop
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b090      	sub	sp, #64	; 0x40
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	603b      	str	r3, [r7, #0]
 8008704:	4613      	mov	r3, r2
 8008706:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008708:	e050      	b.n	80087ac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800870a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800870c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008710:	d04c      	beq.n	80087ac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008714:	2b00      	cmp	r3, #0
 8008716:	d007      	beq.n	8008728 <UART_WaitOnFlagUntilTimeout+0x30>
 8008718:	f7fb f82e 	bl	8003778 <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008724:	429a      	cmp	r2, r3
 8008726:	d241      	bcs.n	80087ac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	330c      	adds	r3, #12
 800872e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008732:	e853 3f00 	ldrex	r3, [r3]
 8008736:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800873e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	330c      	adds	r3, #12
 8008746:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008748:	637a      	str	r2, [r7, #52]	; 0x34
 800874a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800874e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008750:	e841 2300 	strex	r3, r2, [r1]
 8008754:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1e5      	bne.n	8008728 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	3314      	adds	r3, #20
 8008762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	e853 3f00 	ldrex	r3, [r3]
 800876a:	613b      	str	r3, [r7, #16]
   return(result);
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	f023 0301 	bic.w	r3, r3, #1
 8008772:	63bb      	str	r3, [r7, #56]	; 0x38
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	3314      	adds	r3, #20
 800877a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800877c:	623a      	str	r2, [r7, #32]
 800877e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008780:	69f9      	ldr	r1, [r7, #28]
 8008782:	6a3a      	ldr	r2, [r7, #32]
 8008784:	e841 2300 	strex	r3, r2, [r1]
 8008788:	61bb      	str	r3, [r7, #24]
   return(result);
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1e5      	bne.n	800875c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2220      	movs	r2, #32
 8008794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2220      	movs	r2, #32
 800879c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80087a8:	2303      	movs	r3, #3
 80087aa:	e00f      	b.n	80087cc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	4013      	ands	r3, r2
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	bf0c      	ite	eq
 80087bc:	2301      	moveq	r3, #1
 80087be:	2300      	movne	r3, #0
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	461a      	mov	r2, r3
 80087c4:	79fb      	ldrb	r3, [r7, #7]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d09f      	beq.n	800870a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3740      	adds	r7, #64	; 0x40
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	4613      	mov	r3, r2
 80087e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	68ba      	ldr	r2, [r7, #8]
 80087e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	88fa      	ldrh	r2, [r7, #6]
 80087ec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	88fa      	ldrh	r2, [r7, #6]
 80087f2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2200      	movs	r2, #0
 80087f8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2222      	movs	r2, #34	; 0x22
 80087fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68da      	ldr	r2, [r3, #12]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008818:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	695a      	ldr	r2, [r3, #20]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f042 0201 	orr.w	r2, r2, #1
 8008828:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	68da      	ldr	r2, [r3, #12]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f042 0220 	orr.w	r2, r2, #32
 8008838:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3714      	adds	r7, #20
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008848:	b480      	push	{r7}
 800884a:	b095      	sub	sp, #84	; 0x54
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	330c      	adds	r3, #12
 8008856:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800885a:	e853 3f00 	ldrex	r3, [r3]
 800885e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008862:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	330c      	adds	r3, #12
 800886e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008870:	643a      	str	r2, [r7, #64]	; 0x40
 8008872:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008874:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008876:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008878:	e841 2300 	strex	r3, r2, [r1]
 800887c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800887e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008880:	2b00      	cmp	r3, #0
 8008882:	d1e5      	bne.n	8008850 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	3314      	adds	r3, #20
 800888a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888c:	6a3b      	ldr	r3, [r7, #32]
 800888e:	e853 3f00 	ldrex	r3, [r3]
 8008892:	61fb      	str	r3, [r7, #28]
   return(result);
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	f023 0301 	bic.w	r3, r3, #1
 800889a:	64bb      	str	r3, [r7, #72]	; 0x48
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	3314      	adds	r3, #20
 80088a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088ac:	e841 2300 	strex	r3, r2, [r1]
 80088b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d1e5      	bne.n	8008884 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d119      	bne.n	80088f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	330c      	adds	r3, #12
 80088c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	e853 3f00 	ldrex	r3, [r3]
 80088ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	f023 0310 	bic.w	r3, r3, #16
 80088d6:	647b      	str	r3, [r7, #68]	; 0x44
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	330c      	adds	r3, #12
 80088de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088e0:	61ba      	str	r2, [r7, #24]
 80088e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e4:	6979      	ldr	r1, [r7, #20]
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	e841 2300 	strex	r3, r2, [r1]
 80088ec:	613b      	str	r3, [r7, #16]
   return(result);
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1e5      	bne.n	80088c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2220      	movs	r2, #32
 80088f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008902:	bf00      	nop
 8008904:	3754      	adds	r7, #84	; 0x54
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr

0800890e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b084      	sub	sp, #16
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800891a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f7ff fecf 	bl	80086cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800892e:	bf00      	nop
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008936:	b480      	push	{r7}
 8008938:	b085      	sub	sp, #20
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b21      	cmp	r3, #33	; 0x21
 8008948:	d13e      	bne.n	80089c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008952:	d114      	bne.n	800897e <UART_Transmit_IT+0x48>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d110      	bne.n	800897e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6a1b      	ldr	r3, [r3, #32]
 8008960:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	881b      	ldrh	r3, [r3, #0]
 8008966:	461a      	mov	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008970:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a1b      	ldr	r3, [r3, #32]
 8008976:	1c9a      	adds	r2, r3, #2
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	621a      	str	r2, [r3, #32]
 800897c:	e008      	b.n	8008990 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a1b      	ldr	r3, [r3, #32]
 8008982:	1c59      	adds	r1, r3, #1
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	6211      	str	r1, [r2, #32]
 8008988:	781a      	ldrb	r2, [r3, #0]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008994:	b29b      	uxth	r3, r3
 8008996:	3b01      	subs	r3, #1
 8008998:	b29b      	uxth	r3, r3
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	4619      	mov	r1, r3
 800899e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d10f      	bne.n	80089c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68da      	ldr	r2, [r3, #12]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68da      	ldr	r2, [r3, #12]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80089c4:	2300      	movs	r3, #0
 80089c6:	e000      	b.n	80089ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80089c8:	2302      	movs	r3, #2
  }
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3714      	adds	r7, #20
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr

080089d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b082      	sub	sp, #8
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68da      	ldr	r2, [r3, #12]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2220      	movs	r2, #32
 80089f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f7ff fe5e 	bl	80086b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b08c      	sub	sp, #48	; 0x30
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	2b22      	cmp	r3, #34	; 0x22
 8008a18:	f040 80ab 	bne.w	8008b72 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a24:	d117      	bne.n	8008a56 <UART_Receive_IT+0x50>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d113      	bne.n	8008a56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a36:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a4e:	1c9a      	adds	r2, r3, #2
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	629a      	str	r2, [r3, #40]	; 0x28
 8008a54:	e026      	b.n	8008aa4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a68:	d007      	beq.n	8008a7a <UART_Receive_IT+0x74>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10a      	bne.n	8008a88 <UART_Receive_IT+0x82>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d106      	bne.n	8008a88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	b2da      	uxtb	r2, r3
 8008a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a84:	701a      	strb	r2, [r3, #0]
 8008a86:	e008      	b.n	8008a9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a94:	b2da      	uxtb	r2, r3
 8008a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a9e:	1c5a      	adds	r2, r3, #1
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d15a      	bne.n	8008b6e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	68da      	ldr	r2, [r3, #12]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f022 0220 	bic.w	r2, r2, #32
 8008ac6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68da      	ldr	r2, [r3, #12]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ad6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	695a      	ldr	r2, [r3, #20]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f022 0201 	bic.w	r2, r2, #1
 8008ae6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2220      	movs	r2, #32
 8008aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d135      	bne.n	8008b64 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	330c      	adds	r3, #12
 8008b04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	e853 3f00 	ldrex	r3, [r3]
 8008b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	f023 0310 	bic.w	r3, r3, #16
 8008b14:	627b      	str	r3, [r7, #36]	; 0x24
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	330c      	adds	r3, #12
 8008b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b1e:	623a      	str	r2, [r7, #32]
 8008b20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b22:	69f9      	ldr	r1, [r7, #28]
 8008b24:	6a3a      	ldr	r2, [r7, #32]
 8008b26:	e841 2300 	strex	r3, r2, [r1]
 8008b2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d1e5      	bne.n	8008afe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f003 0310 	and.w	r3, r3, #16
 8008b3c:	2b10      	cmp	r3, #16
 8008b3e:	d10a      	bne.n	8008b56 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b40:	2300      	movs	r3, #0
 8008b42:	60fb      	str	r3, [r7, #12]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	60fb      	str	r3, [r7, #12]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	60fb      	str	r3, [r7, #12]
 8008b54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f7ff fdbf 	bl	80086e0 <HAL_UARTEx_RxEventCallback>
 8008b62:	e002      	b.n	8008b6a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f7f7 fe59 	bl	800081c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	e002      	b.n	8008b74 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	e000      	b.n	8008b74 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008b72:	2302      	movs	r3, #2
  }
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3730      	adds	r7, #48	; 0x30
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b80:	b09f      	sub	sp, #124	; 0x7c
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b92:	68d9      	ldr	r1, [r3, #12]
 8008b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	ea40 0301 	orr.w	r3, r0, r1
 8008b9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ba0:	689a      	ldr	r2, [r3, #8]
 8008ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	431a      	orrs	r2, r3
 8008ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	431a      	orrs	r2, r3
 8008bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bb0:	69db      	ldr	r3, [r3, #28]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008bc0:	f021 010c 	bic.w	r1, r1, #12
 8008bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bca:	430b      	orrs	r3, r1
 8008bcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	695b      	ldr	r3, [r3, #20]
 8008bd4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bda:	6999      	ldr	r1, [r3, #24]
 8008bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	ea40 0301 	orr.w	r3, r0, r1
 8008be4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	4bc5      	ldr	r3, [pc, #788]	; (8008f00 <UART_SetConfig+0x384>)
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d004      	beq.n	8008bfa <UART_SetConfig+0x7e>
 8008bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	4bc3      	ldr	r3, [pc, #780]	; (8008f04 <UART_SetConfig+0x388>)
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d103      	bne.n	8008c02 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008bfa:	f7fd fcdb 	bl	80065b4 <HAL_RCC_GetPCLK2Freq>
 8008bfe:	6778      	str	r0, [r7, #116]	; 0x74
 8008c00:	e002      	b.n	8008c08 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c02:	f7fd fcc3 	bl	800658c <HAL_RCC_GetPCLK1Freq>
 8008c06:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c0a:	69db      	ldr	r3, [r3, #28]
 8008c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c10:	f040 80b6 	bne.w	8008d80 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c16:	461c      	mov	r4, r3
 8008c18:	f04f 0500 	mov.w	r5, #0
 8008c1c:	4622      	mov	r2, r4
 8008c1e:	462b      	mov	r3, r5
 8008c20:	1891      	adds	r1, r2, r2
 8008c22:	6439      	str	r1, [r7, #64]	; 0x40
 8008c24:	415b      	adcs	r3, r3
 8008c26:	647b      	str	r3, [r7, #68]	; 0x44
 8008c28:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008c2c:	1912      	adds	r2, r2, r4
 8008c2e:	eb45 0303 	adc.w	r3, r5, r3
 8008c32:	f04f 0000 	mov.w	r0, #0
 8008c36:	f04f 0100 	mov.w	r1, #0
 8008c3a:	00d9      	lsls	r1, r3, #3
 8008c3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c40:	00d0      	lsls	r0, r2, #3
 8008c42:	4602      	mov	r2, r0
 8008c44:	460b      	mov	r3, r1
 8008c46:	1911      	adds	r1, r2, r4
 8008c48:	6639      	str	r1, [r7, #96]	; 0x60
 8008c4a:	416b      	adcs	r3, r5
 8008c4c:	667b      	str	r3, [r7, #100]	; 0x64
 8008c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	461a      	mov	r2, r3
 8008c54:	f04f 0300 	mov.w	r3, #0
 8008c58:	1891      	adds	r1, r2, r2
 8008c5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008c5c:	415b      	adcs	r3, r3
 8008c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008c64:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008c68:	f7f7 fb1a 	bl	80002a0 <__aeabi_uldivmod>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	460b      	mov	r3, r1
 8008c70:	4ba5      	ldr	r3, [pc, #660]	; (8008f08 <UART_SetConfig+0x38c>)
 8008c72:	fba3 2302 	umull	r2, r3, r3, r2
 8008c76:	095b      	lsrs	r3, r3, #5
 8008c78:	011e      	lsls	r6, r3, #4
 8008c7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c7c:	461c      	mov	r4, r3
 8008c7e:	f04f 0500 	mov.w	r5, #0
 8008c82:	4622      	mov	r2, r4
 8008c84:	462b      	mov	r3, r5
 8008c86:	1891      	adds	r1, r2, r2
 8008c88:	6339      	str	r1, [r7, #48]	; 0x30
 8008c8a:	415b      	adcs	r3, r3
 8008c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8008c8e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008c92:	1912      	adds	r2, r2, r4
 8008c94:	eb45 0303 	adc.w	r3, r5, r3
 8008c98:	f04f 0000 	mov.w	r0, #0
 8008c9c:	f04f 0100 	mov.w	r1, #0
 8008ca0:	00d9      	lsls	r1, r3, #3
 8008ca2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008ca6:	00d0      	lsls	r0, r2, #3
 8008ca8:	4602      	mov	r2, r0
 8008caa:	460b      	mov	r3, r1
 8008cac:	1911      	adds	r1, r2, r4
 8008cae:	65b9      	str	r1, [r7, #88]	; 0x58
 8008cb0:	416b      	adcs	r3, r5
 8008cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	461a      	mov	r2, r3
 8008cba:	f04f 0300 	mov.w	r3, #0
 8008cbe:	1891      	adds	r1, r2, r2
 8008cc0:	62b9      	str	r1, [r7, #40]	; 0x28
 8008cc2:	415b      	adcs	r3, r3
 8008cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008cca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008cce:	f7f7 fae7 	bl	80002a0 <__aeabi_uldivmod>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	4b8c      	ldr	r3, [pc, #560]	; (8008f08 <UART_SetConfig+0x38c>)
 8008cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8008cdc:	095b      	lsrs	r3, r3, #5
 8008cde:	2164      	movs	r1, #100	; 0x64
 8008ce0:	fb01 f303 	mul.w	r3, r1, r3
 8008ce4:	1ad3      	subs	r3, r2, r3
 8008ce6:	00db      	lsls	r3, r3, #3
 8008ce8:	3332      	adds	r3, #50	; 0x32
 8008cea:	4a87      	ldr	r2, [pc, #540]	; (8008f08 <UART_SetConfig+0x38c>)
 8008cec:	fba2 2303 	umull	r2, r3, r2, r3
 8008cf0:	095b      	lsrs	r3, r3, #5
 8008cf2:	005b      	lsls	r3, r3, #1
 8008cf4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008cf8:	441e      	add	r6, r3
 8008cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f04f 0100 	mov.w	r1, #0
 8008d02:	4602      	mov	r2, r0
 8008d04:	460b      	mov	r3, r1
 8008d06:	1894      	adds	r4, r2, r2
 8008d08:	623c      	str	r4, [r7, #32]
 8008d0a:	415b      	adcs	r3, r3
 8008d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d12:	1812      	adds	r2, r2, r0
 8008d14:	eb41 0303 	adc.w	r3, r1, r3
 8008d18:	f04f 0400 	mov.w	r4, #0
 8008d1c:	f04f 0500 	mov.w	r5, #0
 8008d20:	00dd      	lsls	r5, r3, #3
 8008d22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008d26:	00d4      	lsls	r4, r2, #3
 8008d28:	4622      	mov	r2, r4
 8008d2a:	462b      	mov	r3, r5
 8008d2c:	1814      	adds	r4, r2, r0
 8008d2e:	653c      	str	r4, [r7, #80]	; 0x50
 8008d30:	414b      	adcs	r3, r1
 8008d32:	657b      	str	r3, [r7, #84]	; 0x54
 8008d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	461a      	mov	r2, r3
 8008d3a:	f04f 0300 	mov.w	r3, #0
 8008d3e:	1891      	adds	r1, r2, r2
 8008d40:	61b9      	str	r1, [r7, #24]
 8008d42:	415b      	adcs	r3, r3
 8008d44:	61fb      	str	r3, [r7, #28]
 8008d46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d4a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008d4e:	f7f7 faa7 	bl	80002a0 <__aeabi_uldivmod>
 8008d52:	4602      	mov	r2, r0
 8008d54:	460b      	mov	r3, r1
 8008d56:	4b6c      	ldr	r3, [pc, #432]	; (8008f08 <UART_SetConfig+0x38c>)
 8008d58:	fba3 1302 	umull	r1, r3, r3, r2
 8008d5c:	095b      	lsrs	r3, r3, #5
 8008d5e:	2164      	movs	r1, #100	; 0x64
 8008d60:	fb01 f303 	mul.w	r3, r1, r3
 8008d64:	1ad3      	subs	r3, r2, r3
 8008d66:	00db      	lsls	r3, r3, #3
 8008d68:	3332      	adds	r3, #50	; 0x32
 8008d6a:	4a67      	ldr	r2, [pc, #412]	; (8008f08 <UART_SetConfig+0x38c>)
 8008d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d70:	095b      	lsrs	r3, r3, #5
 8008d72:	f003 0207 	and.w	r2, r3, #7
 8008d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4432      	add	r2, r6
 8008d7c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d7e:	e0b9      	b.n	8008ef4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d82:	461c      	mov	r4, r3
 8008d84:	f04f 0500 	mov.w	r5, #0
 8008d88:	4622      	mov	r2, r4
 8008d8a:	462b      	mov	r3, r5
 8008d8c:	1891      	adds	r1, r2, r2
 8008d8e:	6139      	str	r1, [r7, #16]
 8008d90:	415b      	adcs	r3, r3
 8008d92:	617b      	str	r3, [r7, #20]
 8008d94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008d98:	1912      	adds	r2, r2, r4
 8008d9a:	eb45 0303 	adc.w	r3, r5, r3
 8008d9e:	f04f 0000 	mov.w	r0, #0
 8008da2:	f04f 0100 	mov.w	r1, #0
 8008da6:	00d9      	lsls	r1, r3, #3
 8008da8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008dac:	00d0      	lsls	r0, r2, #3
 8008dae:	4602      	mov	r2, r0
 8008db0:	460b      	mov	r3, r1
 8008db2:	eb12 0804 	adds.w	r8, r2, r4
 8008db6:	eb43 0905 	adc.w	r9, r3, r5
 8008dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f04f 0100 	mov.w	r1, #0
 8008dc4:	f04f 0200 	mov.w	r2, #0
 8008dc8:	f04f 0300 	mov.w	r3, #0
 8008dcc:	008b      	lsls	r3, r1, #2
 8008dce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008dd2:	0082      	lsls	r2, r0, #2
 8008dd4:	4640      	mov	r0, r8
 8008dd6:	4649      	mov	r1, r9
 8008dd8:	f7f7 fa62 	bl	80002a0 <__aeabi_uldivmod>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	460b      	mov	r3, r1
 8008de0:	4b49      	ldr	r3, [pc, #292]	; (8008f08 <UART_SetConfig+0x38c>)
 8008de2:	fba3 2302 	umull	r2, r3, r3, r2
 8008de6:	095b      	lsrs	r3, r3, #5
 8008de8:	011e      	lsls	r6, r3, #4
 8008dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dec:	4618      	mov	r0, r3
 8008dee:	f04f 0100 	mov.w	r1, #0
 8008df2:	4602      	mov	r2, r0
 8008df4:	460b      	mov	r3, r1
 8008df6:	1894      	adds	r4, r2, r2
 8008df8:	60bc      	str	r4, [r7, #8]
 8008dfa:	415b      	adcs	r3, r3
 8008dfc:	60fb      	str	r3, [r7, #12]
 8008dfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e02:	1812      	adds	r2, r2, r0
 8008e04:	eb41 0303 	adc.w	r3, r1, r3
 8008e08:	f04f 0400 	mov.w	r4, #0
 8008e0c:	f04f 0500 	mov.w	r5, #0
 8008e10:	00dd      	lsls	r5, r3, #3
 8008e12:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008e16:	00d4      	lsls	r4, r2, #3
 8008e18:	4622      	mov	r2, r4
 8008e1a:	462b      	mov	r3, r5
 8008e1c:	1814      	adds	r4, r2, r0
 8008e1e:	64bc      	str	r4, [r7, #72]	; 0x48
 8008e20:	414b      	adcs	r3, r1
 8008e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f04f 0100 	mov.w	r1, #0
 8008e2e:	f04f 0200 	mov.w	r2, #0
 8008e32:	f04f 0300 	mov.w	r3, #0
 8008e36:	008b      	lsls	r3, r1, #2
 8008e38:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008e3c:	0082      	lsls	r2, r0, #2
 8008e3e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008e42:	f7f7 fa2d 	bl	80002a0 <__aeabi_uldivmod>
 8008e46:	4602      	mov	r2, r0
 8008e48:	460b      	mov	r3, r1
 8008e4a:	4b2f      	ldr	r3, [pc, #188]	; (8008f08 <UART_SetConfig+0x38c>)
 8008e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8008e50:	095b      	lsrs	r3, r3, #5
 8008e52:	2164      	movs	r1, #100	; 0x64
 8008e54:	fb01 f303 	mul.w	r3, r1, r3
 8008e58:	1ad3      	subs	r3, r2, r3
 8008e5a:	011b      	lsls	r3, r3, #4
 8008e5c:	3332      	adds	r3, #50	; 0x32
 8008e5e:	4a2a      	ldr	r2, [pc, #168]	; (8008f08 <UART_SetConfig+0x38c>)
 8008e60:	fba2 2303 	umull	r2, r3, r2, r3
 8008e64:	095b      	lsrs	r3, r3, #5
 8008e66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e6a:	441e      	add	r6, r3
 8008e6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f04f 0100 	mov.w	r1, #0
 8008e74:	4602      	mov	r2, r0
 8008e76:	460b      	mov	r3, r1
 8008e78:	1894      	adds	r4, r2, r2
 8008e7a:	603c      	str	r4, [r7, #0]
 8008e7c:	415b      	adcs	r3, r3
 8008e7e:	607b      	str	r3, [r7, #4]
 8008e80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e84:	1812      	adds	r2, r2, r0
 8008e86:	eb41 0303 	adc.w	r3, r1, r3
 8008e8a:	f04f 0400 	mov.w	r4, #0
 8008e8e:	f04f 0500 	mov.w	r5, #0
 8008e92:	00dd      	lsls	r5, r3, #3
 8008e94:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008e98:	00d4      	lsls	r4, r2, #3
 8008e9a:	4622      	mov	r2, r4
 8008e9c:	462b      	mov	r3, r5
 8008e9e:	eb12 0a00 	adds.w	sl, r2, r0
 8008ea2:	eb43 0b01 	adc.w	fp, r3, r1
 8008ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f04f 0100 	mov.w	r1, #0
 8008eb0:	f04f 0200 	mov.w	r2, #0
 8008eb4:	f04f 0300 	mov.w	r3, #0
 8008eb8:	008b      	lsls	r3, r1, #2
 8008eba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008ebe:	0082      	lsls	r2, r0, #2
 8008ec0:	4650      	mov	r0, sl
 8008ec2:	4659      	mov	r1, fp
 8008ec4:	f7f7 f9ec 	bl	80002a0 <__aeabi_uldivmod>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	460b      	mov	r3, r1
 8008ecc:	4b0e      	ldr	r3, [pc, #56]	; (8008f08 <UART_SetConfig+0x38c>)
 8008ece:	fba3 1302 	umull	r1, r3, r3, r2
 8008ed2:	095b      	lsrs	r3, r3, #5
 8008ed4:	2164      	movs	r1, #100	; 0x64
 8008ed6:	fb01 f303 	mul.w	r3, r1, r3
 8008eda:	1ad3      	subs	r3, r2, r3
 8008edc:	011b      	lsls	r3, r3, #4
 8008ede:	3332      	adds	r3, #50	; 0x32
 8008ee0:	4a09      	ldr	r2, [pc, #36]	; (8008f08 <UART_SetConfig+0x38c>)
 8008ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee6:	095b      	lsrs	r3, r3, #5
 8008ee8:	f003 020f 	and.w	r2, r3, #15
 8008eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4432      	add	r2, r6
 8008ef2:	609a      	str	r2, [r3, #8]
}
 8008ef4:	bf00      	nop
 8008ef6:	377c      	adds	r7, #124	; 0x7c
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efe:	bf00      	nop
 8008f00:	40011000 	.word	0x40011000
 8008f04:	40011400 	.word	0x40011400
 8008f08:	51eb851f 	.word	0x51eb851f

08008f0c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8008f16:	2300      	movs	r3, #0
 8008f18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d029      	beq.n	8008f7a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008f32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008f36:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008f40:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8008f46:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8008f4c:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8008f52:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8008f58:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8008f5e:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8008f64:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8008f6a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	601a      	str	r2, [r3, #0]
 8008f78:	e034      	b.n	8008fe4 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f86:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008f90:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008f96:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008faa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008fae:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008fb8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8008fbe:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8008fc4:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8008fca:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8008fd0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008fd2:	68ba      	ldr	r2, [r7, #8]
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68ba      	ldr	r2, [r7, #8]
 8008fe2:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr

08008ff2 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008ff2:	b480      	push	{r7}
 8008ff4:	b087      	sub	sp, #28
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	60f8      	str	r0, [r7, #12]
 8008ffa:	60b9      	str	r1, [r7, #8]
 8008ffc:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8008ffe:	2300      	movs	r3, #0
 8009000:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8009002:	2300      	movs	r3, #0
 8009004:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2b01      	cmp	r3, #1
 800900a:	d02e      	beq.n	800906a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009018:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	3b01      	subs	r3, #1
 8009026:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009028:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	3b01      	subs	r3, #1
 8009030:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8009032:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	3b01      	subs	r3, #1
 800903a:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800903c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	3b01      	subs	r3, #1
 8009044:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009046:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	695b      	ldr	r3, [r3, #20]
 800904c:	3b01      	subs	r3, #1
 800904e:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8009050:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	699b      	ldr	r3, [r3, #24]
 8009056:	3b01      	subs	r3, #1
 8009058:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800905a:	4313      	orrs	r3, r2
 800905c:	697a      	ldr	r2, [r7, #20]
 800905e:	4313      	orrs	r3, r2
 8009060:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	609a      	str	r2, [r3, #8]
 8009068:	e03b      	b.n	80090e2 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009076:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800907a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	3b01      	subs	r3, #1
 8009082:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	695b      	ldr	r3, [r3, #20]
 8009088:	3b01      	subs	r3, #1
 800908a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800908c:	4313      	orrs	r3, r2
 800908e:	697a      	ldr	r2, [r7, #20]
 8009090:	4313      	orrs	r3, r2
 8009092:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80090a0:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	3b01      	subs	r3, #1
 80090ae:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80090b0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	3b01      	subs	r3, #1
 80090b8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80090ba:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	3b01      	subs	r3, #1
 80090c2:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80090c4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	699b      	ldr	r3, [r3, #24]
 80090ca:	3b01      	subs	r3, #1
 80090cc:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80090ce:	4313      	orrs	r3, r2
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	697a      	ldr	r2, [r7, #20]
 80090da:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	693a      	ldr	r2, [r7, #16]
 80090e0:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	371c      	adds	r7, #28
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b086      	sub	sp, #24
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80090fc:	2300      	movs	r3, #0
 80090fe:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8009100:	2300      	movs	r3, #0
 8009102:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800910c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	3b01      	subs	r3, #1
 8009114:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8009116:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800911e:	4313      	orrs	r3, r2
 8009120:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8009122:	693a      	ldr	r2, [r7, #16]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8009128:	f7fa fb26 	bl	8003778 <HAL_GetTick>
 800912c:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800912e:	e010      	b.n	8009152 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009136:	d00c      	beq.n	8009152 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d007      	beq.n	800914e <FMC_SDRAM_SendCommand+0x5e>
 800913e:	f7fa fb1b 	bl	8003778 <HAL_GetTick>
 8009142:	4602      	mov	r2, r0
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	1ad3      	subs	r3, r2, r3
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	429a      	cmp	r2, r3
 800914c:	d201      	bcs.n	8009152 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800914e:	2303      	movs	r3, #3
 8009150:	e006      	b.n	8009160 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	699b      	ldr	r3, [r3, #24]
 8009156:	f003 0320 	and.w	r3, r3, #32
 800915a:	2b20      	cmp	r3, #32
 800915c:	d0e8      	beq.n	8009130 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3718      	adds	r7, #24
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	695a      	ldr	r2, [r3, #20]
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	005b      	lsls	r3, r3, #1
 800917a:	431a      	orrs	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	370c      	adds	r7, #12
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr

0800918e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800918e:	b480      	push	{r7}
 8009190:	b085      	sub	sp, #20
 8009192:	af00      	add	r7, sp, #0
 8009194:	4603      	mov	r3, r0
 8009196:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009198:	2300      	movs	r3, #0
 800919a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800919c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80091a0:	2b84      	cmp	r3, #132	; 0x84
 80091a2:	d005      	beq.n	80091b0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80091a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	4413      	add	r3, r2
 80091ac:	3303      	adds	r3, #3
 80091ae:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80091b0:	68fb      	ldr	r3, [r7, #12]
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3714      	adds	r7, #20
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr

080091be <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80091be:	b480      	push	{r7}
 80091c0:	b083      	sub	sp, #12
 80091c2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091c4:	f3ef 8305 	mrs	r3, IPSR
 80091c8:	607b      	str	r3, [r7, #4]
  return(result);
 80091ca:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	bf14      	ite	ne
 80091d0:	2301      	movne	r3, #1
 80091d2:	2300      	moveq	r3, #0
 80091d4:	b2db      	uxtb	r3, r3
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	370c      	adds	r7, #12
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr

080091e2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80091e6:	f001 fc73 	bl	800aad0 <vTaskStartScheduler>
  
  return osOK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80091f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091f2:	b089      	sub	sp, #36	; 0x24
 80091f4:	af04      	add	r7, sp, #16
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d020      	beq.n	8009244 <osThreadCreate+0x54>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	699b      	ldr	r3, [r3, #24]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d01c      	beq.n	8009244 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	685c      	ldr	r4, [r3, #4]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681d      	ldr	r5, [r3, #0]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	691e      	ldr	r6, [r3, #16]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800921c:	4618      	mov	r0, r3
 800921e:	f7ff ffb6 	bl	800918e <makeFreeRtosPriority>
 8009222:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	695b      	ldr	r3, [r3, #20]
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800922c:	9202      	str	r2, [sp, #8]
 800922e:	9301      	str	r3, [sp, #4]
 8009230:	9100      	str	r1, [sp, #0]
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	4632      	mov	r2, r6
 8009236:	4629      	mov	r1, r5
 8009238:	4620      	mov	r0, r4
 800923a:	f001 fa77 	bl	800a72c <xTaskCreateStatic>
 800923e:	4603      	mov	r3, r0
 8009240:	60fb      	str	r3, [r7, #12]
 8009242:	e01c      	b.n	800927e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	685c      	ldr	r4, [r3, #4]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009250:	b29e      	uxth	r6, r3
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009258:	4618      	mov	r0, r3
 800925a:	f7ff ff98 	bl	800918e <makeFreeRtosPriority>
 800925e:	4602      	mov	r2, r0
 8009260:	f107 030c 	add.w	r3, r7, #12
 8009264:	9301      	str	r3, [sp, #4]
 8009266:	9200      	str	r2, [sp, #0]
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	4632      	mov	r2, r6
 800926c:	4629      	mov	r1, r5
 800926e:	4620      	mov	r0, r4
 8009270:	f001 fab9 	bl	800a7e6 <xTaskCreate>
 8009274:	4603      	mov	r3, r0
 8009276:	2b01      	cmp	r3, #1
 8009278:	d001      	beq.n	800927e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800927a:	2300      	movs	r3, #0
 800927c:	e000      	b.n	8009280 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800927e:	68fb      	ldr	r3, [r7, #12]
}
 8009280:	4618      	mov	r0, r3
 8009282:	3714      	adds	r7, #20
 8009284:	46bd      	mov	sp, r7
 8009286:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009288 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d001      	beq.n	800929e <osDelay+0x16>
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	e000      	b.n	80092a0 <osDelay+0x18>
 800929e:	2301      	movs	r3, #1
 80092a0:	4618      	mov	r0, r3
 80092a2:	f001 fbe1 	bl	800aa68 <vTaskDelay>
  
  return osOK;
 80092a6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b086      	sub	sp, #24
 80092b4:	af02      	add	r7, sp, #8
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80092ba:	2300      	movs	r3, #0
 80092bc:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80092be:	2300      	movs	r3, #0
 80092c0:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80092c2:	f7ff ff7c 	bl	80091be <inHandlerMode>
 80092c6:	4603      	mov	r3, r0
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d01c      	beq.n	8009306 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	f107 0208 	add.w	r2, r7, #8
 80092d2:	f107 030c 	add.w	r3, r7, #12
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	4613      	mov	r3, r2
 80092da:	2201      	movs	r2, #1
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f002 fae7 	bl	800b8b0 <xTaskGenericNotifyFromISR>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d002      	beq.n	80092ee <osSignalSet+0x3e>
      return 0x80000000;
 80092e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092ec:	e019      	b.n	8009322 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d015      	beq.n	8009320 <osSignalSet+0x70>
 80092f4:	4b0d      	ldr	r3, [pc, #52]	; (800932c <osSignalSet+0x7c>)
 80092f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092fa:	601a      	str	r2, [r3, #0]
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	f3bf 8f6f 	isb	sy
 8009304:	e00c      	b.n	8009320 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8009306:	6839      	ldr	r1, [r7, #0]
 8009308:	f107 0308 	add.w	r3, r7, #8
 800930c:	2201      	movs	r2, #1
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f002 fa18 	bl	800b744 <xTaskGenericNotify>
 8009314:	4603      	mov	r3, r0
 8009316:	2b01      	cmp	r3, #1
 8009318:	d002      	beq.n	8009320 <osSignalSet+0x70>
    return 0x80000000;
 800931a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800931e:	e000      	b.n	8009322 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8009320:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8009322:	4618      	mov	r0, r3
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	e000ed04 	.word	0xe000ed04

08009330 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8009330:	b590      	push	{r4, r7, lr}
 8009332:	b089      	sub	sp, #36	; 0x24
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800933c:	2300      	movs	r3, #0
 800933e:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8009340:	2300      	movs	r3, #0
 8009342:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800934a:	d103      	bne.n	8009354 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800934c:	f04f 33ff 	mov.w	r3, #4294967295
 8009350:	61fb      	str	r3, [r7, #28]
 8009352:	e009      	b.n	8009368 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d006      	beq.n	8009368 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d101      	bne.n	8009368 <osSignalWait+0x38>
      ticks = 1;
 8009364:	2301      	movs	r3, #1
 8009366:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8009368:	f7ff ff29 	bl	80091be <inHandlerMode>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d002      	beq.n	8009378 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8009372:	2382      	movs	r3, #130	; 0x82
 8009374:	613b      	str	r3, [r7, #16]
 8009376:	e01b      	b.n	80093b0 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8009378:	68b9      	ldr	r1, [r7, #8]
 800937a:	f107 0310 	add.w	r3, r7, #16
 800937e:	1d1a      	adds	r2, r3, #4
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	2000      	movs	r0, #0
 8009384:	f002 f984 	bl	800b690 <xTaskNotifyWait>
 8009388:	4603      	mov	r3, r0
 800938a:	2b01      	cmp	r3, #1
 800938c:	d008      	beq.n	80093a0 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d102      	bne.n	800939a <osSignalWait+0x6a>
 8009394:	2300      	movs	r3, #0
 8009396:	613b      	str	r3, [r7, #16]
 8009398:	e00a      	b.n	80093b0 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800939a:	2340      	movs	r3, #64	; 0x40
 800939c:	613b      	str	r3, [r7, #16]
 800939e:	e007      	b.n	80093b0 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	da02      	bge.n	80093ac <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80093a6:	2386      	movs	r3, #134	; 0x86
 80093a8:	613b      	str	r3, [r7, #16]
 80093aa:	e001      	b.n	80093b0 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80093ac:	2308      	movs	r3, #8
 80093ae:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	461c      	mov	r4, r3
 80093b4:	f107 0310 	add.w	r3, r7, #16
 80093b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80093bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	3724      	adds	r7, #36	; 0x24
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd90      	pop	{r4, r7, pc}

080093c8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b086      	sub	sp, #24
 80093cc:	af02      	add	r7, sp, #8
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d016      	beq.n	8009408 <osSemaphoreCreate+0x40>
    if (count == 1) {
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d10a      	bne.n	80093f6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	2203      	movs	r2, #3
 80093e6:	9200      	str	r2, [sp, #0]
 80093e8:	2200      	movs	r2, #0
 80093ea:	2100      	movs	r1, #0
 80093ec:	2001      	movs	r0, #1
 80093ee:	f000 faa7 	bl	8009940 <xQueueGenericCreateStatic>
 80093f2:	4603      	mov	r3, r0
 80093f4:	e023      	b.n	800943e <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 80093f6:	6838      	ldr	r0, [r7, #0]
 80093f8:	6839      	ldr	r1, [r7, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	461a      	mov	r2, r3
 8009400:	f000 fb6f 	bl	8009ae2 <xQueueCreateCountingSemaphoreStatic>
 8009404:	4603      	mov	r3, r0
 8009406:	e01a      	b.n	800943e <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	2b01      	cmp	r3, #1
 800940c:	d110      	bne.n	8009430 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 800940e:	2203      	movs	r2, #3
 8009410:	2100      	movs	r1, #0
 8009412:	2001      	movs	r0, #1
 8009414:	f000 fb0c 	bl	8009a30 <xQueueGenericCreate>
 8009418:	60f8      	str	r0, [r7, #12]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d005      	beq.n	800942c <osSemaphoreCreate+0x64>
 8009420:	2300      	movs	r3, #0
 8009422:	2200      	movs	r2, #0
 8009424:	2100      	movs	r1, #0
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f000 fbc6 	bl	8009bb8 <xQueueGenericSend>
      return sema;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	e006      	b.n	800943e <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	683a      	ldr	r2, [r7, #0]
 8009434:	4611      	mov	r1, r2
 8009436:	4618      	mov	r0, r3
 8009438:	f000 fb8a 	bl	8009b50 <xQueueCreateCountingSemaphore>
 800943c:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800943e:	4618      	mov	r0, r3
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
	...

08009448 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009452:	2300      	movs	r3, #0
 8009454:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d101      	bne.n	8009460 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800945c:	2380      	movs	r3, #128	; 0x80
 800945e:	e03a      	b.n	80094d6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009460:	2300      	movs	r3, #0
 8009462:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800946a:	d103      	bne.n	8009474 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800946c:	f04f 33ff 	mov.w	r3, #4294967295
 8009470:	60fb      	str	r3, [r7, #12]
 8009472:	e009      	b.n	8009488 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d006      	beq.n	8009488 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d101      	bne.n	8009488 <osSemaphoreWait+0x40>
      ticks = 1;
 8009484:	2301      	movs	r3, #1
 8009486:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009488:	f7ff fe99 	bl	80091be <inHandlerMode>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d017      	beq.n	80094c2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009492:	f107 0308 	add.w	r3, r7, #8
 8009496:	461a      	mov	r2, r3
 8009498:	2100      	movs	r1, #0
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 ff9e 	bl	800a3dc <xQueueReceiveFromISR>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d001      	beq.n	80094aa <osSemaphoreWait+0x62>
      return osErrorOS;
 80094a6:	23ff      	movs	r3, #255	; 0xff
 80094a8:	e015      	b.n	80094d6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d011      	beq.n	80094d4 <osSemaphoreWait+0x8c>
 80094b0:	4b0b      	ldr	r3, [pc, #44]	; (80094e0 <osSemaphoreWait+0x98>)
 80094b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094b6:	601a      	str	r2, [r3, #0]
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	f3bf 8f6f 	isb	sy
 80094c0:	e008      	b.n	80094d4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80094c2:	68f9      	ldr	r1, [r7, #12]
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fe7d 	bl	800a1c4 <xQueueSemaphoreTake>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d001      	beq.n	80094d4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80094d0:	23ff      	movs	r3, #255	; 0xff
 80094d2:	e000      	b.n	80094d6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	e000ed04 	.word	0xe000ed04

080094e4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80094f0:	2300      	movs	r3, #0
 80094f2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80094f4:	f7ff fe63 	bl	80091be <inHandlerMode>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d016      	beq.n	800952c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80094fe:	f107 0308 	add.w	r3, r7, #8
 8009502:	4619      	mov	r1, r3
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fcf0 	bl	8009eea <xQueueGiveFromISR>
 800950a:	4603      	mov	r3, r0
 800950c:	2b01      	cmp	r3, #1
 800950e:	d001      	beq.n	8009514 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009510:	23ff      	movs	r3, #255	; 0xff
 8009512:	e017      	b.n	8009544 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d013      	beq.n	8009542 <osSemaphoreRelease+0x5e>
 800951a:	4b0c      	ldr	r3, [pc, #48]	; (800954c <osSemaphoreRelease+0x68>)
 800951c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009520:	601a      	str	r2, [r3, #0]
 8009522:	f3bf 8f4f 	dsb	sy
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	e00a      	b.n	8009542 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800952c:	2300      	movs	r3, #0
 800952e:	2200      	movs	r2, #0
 8009530:	2100      	movs	r1, #0
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 fb40 	bl	8009bb8 <xQueueGenericSend>
 8009538:	4603      	mov	r3, r0
 800953a:	2b01      	cmp	r3, #1
 800953c:	d001      	beq.n	8009542 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800953e:	23ff      	movs	r3, #255	; 0xff
 8009540:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009542:	68fb      	ldr	r3, [r7, #12]
}
 8009544:	4618      	mov	r0, r3
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	e000ed04 	.word	0xe000ed04

08009550 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009550:	b590      	push	{r4, r7, lr}
 8009552:	b085      	sub	sp, #20
 8009554:	af02      	add	r7, sp, #8
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d011      	beq.n	8009586 <osMessageCreate+0x36>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00d      	beq.n	8009586 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6818      	ldr	r0, [r3, #0]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6859      	ldr	r1, [r3, #4]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	689a      	ldr	r2, [r3, #8]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	2400      	movs	r4, #0
 800957c:	9400      	str	r4, [sp, #0]
 800957e:	f000 f9df 	bl	8009940 <xQueueGenericCreateStatic>
 8009582:	4603      	mov	r3, r0
 8009584:	e008      	b.n	8009598 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6818      	ldr	r0, [r3, #0]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	4619      	mov	r1, r3
 8009592:	f000 fa4d 	bl	8009a30 <xQueueGenericCreate>
 8009596:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009598:	4618      	mov	r0, r3
 800959a:	370c      	adds	r7, #12
 800959c:	46bd      	mov	sp, r7
 800959e:	bd90      	pop	{r4, r7, pc}

080095a0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b086      	sub	sp, #24
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80095ac:	2300      	movs	r3, #0
 80095ae:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d101      	bne.n	80095be <osMessagePut+0x1e>
    ticks = 1;
 80095ba:	2301      	movs	r3, #1
 80095bc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80095be:	f7ff fdfe 	bl	80091be <inHandlerMode>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d018      	beq.n	80095fa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80095c8:	f107 0210 	add.w	r2, r7, #16
 80095cc:	f107 0108 	add.w	r1, r7, #8
 80095d0:	2300      	movs	r3, #0
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f000 fbee 	bl	8009db4 <xQueueGenericSendFromISR>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d001      	beq.n	80095e2 <osMessagePut+0x42>
      return osErrorOS;
 80095de:	23ff      	movs	r3, #255	; 0xff
 80095e0:	e018      	b.n	8009614 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d014      	beq.n	8009612 <osMessagePut+0x72>
 80095e8:	4b0c      	ldr	r3, [pc, #48]	; (800961c <osMessagePut+0x7c>)
 80095ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ee:	601a      	str	r2, [r3, #0]
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	e00b      	b.n	8009612 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80095fa:	f107 0108 	add.w	r1, r7, #8
 80095fe:	2300      	movs	r3, #0
 8009600:	697a      	ldr	r2, [r7, #20]
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	f000 fad8 	bl	8009bb8 <xQueueGenericSend>
 8009608:	4603      	mov	r3, r0
 800960a:	2b01      	cmp	r3, #1
 800960c:	d001      	beq.n	8009612 <osMessagePut+0x72>
      return osErrorOS;
 800960e:	23ff      	movs	r3, #255	; 0xff
 8009610:	e000      	b.n	8009614 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3718      	adds	r7, #24
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}
 800961c:	e000ed04 	.word	0xe000ed04

08009620 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009620:	b590      	push	{r4, r7, lr}
 8009622:	b08b      	sub	sp, #44	; 0x2c
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009630:	2300      	movs	r3, #0
 8009632:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d10a      	bne.n	8009650 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800963a:	2380      	movs	r3, #128	; 0x80
 800963c:	617b      	str	r3, [r7, #20]
    return event;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	461c      	mov	r4, r3
 8009642:	f107 0314 	add.w	r3, r7, #20
 8009646:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800964a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800964e:	e054      	b.n	80096fa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009650:	2300      	movs	r3, #0
 8009652:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009654:	2300      	movs	r3, #0
 8009656:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800965e:	d103      	bne.n	8009668 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009660:	f04f 33ff 	mov.w	r3, #4294967295
 8009664:	627b      	str	r3, [r7, #36]	; 0x24
 8009666:	e009      	b.n	800967c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d006      	beq.n	800967c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8009672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009674:	2b00      	cmp	r3, #0
 8009676:	d101      	bne.n	800967c <osMessageGet+0x5c>
      ticks = 1;
 8009678:	2301      	movs	r3, #1
 800967a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800967c:	f7ff fd9f 	bl	80091be <inHandlerMode>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d01c      	beq.n	80096c0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009686:	f107 0220 	add.w	r2, r7, #32
 800968a:	f107 0314 	add.w	r3, r7, #20
 800968e:	3304      	adds	r3, #4
 8009690:	4619      	mov	r1, r3
 8009692:	68b8      	ldr	r0, [r7, #8]
 8009694:	f000 fea2 	bl	800a3dc <xQueueReceiveFromISR>
 8009698:	4603      	mov	r3, r0
 800969a:	2b01      	cmp	r3, #1
 800969c:	d102      	bne.n	80096a4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800969e:	2310      	movs	r3, #16
 80096a0:	617b      	str	r3, [r7, #20]
 80096a2:	e001      	b.n	80096a8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80096a4:	2300      	movs	r3, #0
 80096a6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80096a8:	6a3b      	ldr	r3, [r7, #32]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d01d      	beq.n	80096ea <osMessageGet+0xca>
 80096ae:	4b15      	ldr	r3, [pc, #84]	; (8009704 <osMessageGet+0xe4>)
 80096b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096b4:	601a      	str	r2, [r3, #0]
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	f3bf 8f6f 	isb	sy
 80096be:	e014      	b.n	80096ea <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80096c0:	f107 0314 	add.w	r3, r7, #20
 80096c4:	3304      	adds	r3, #4
 80096c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096c8:	4619      	mov	r1, r3
 80096ca:	68b8      	ldr	r0, [r7, #8]
 80096cc:	f000 fc9a 	bl	800a004 <xQueueReceive>
 80096d0:	4603      	mov	r3, r0
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d102      	bne.n	80096dc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80096d6:	2310      	movs	r3, #16
 80096d8:	617b      	str	r3, [r7, #20]
 80096da:	e006      	b.n	80096ea <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80096dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d101      	bne.n	80096e6 <osMessageGet+0xc6>
 80096e2:	2300      	movs	r3, #0
 80096e4:	e000      	b.n	80096e8 <osMessageGet+0xc8>
 80096e6:	2340      	movs	r3, #64	; 0x40
 80096e8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	461c      	mov	r4, r3
 80096ee:	f107 0314 	add.w	r3, r7, #20
 80096f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80096f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	372c      	adds	r7, #44	; 0x2c
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd90      	pop	{r4, r7, pc}
 8009702:	bf00      	nop
 8009704:	e000ed04 	.word	0xe000ed04

08009708 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f103 0208 	add.w	r2, r3, #8
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f04f 32ff 	mov.w	r2, #4294967295
 8009720:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f103 0208 	add.w	r2, r3, #8
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f103 0208 	add.w	r2, r3, #8
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800973c:	bf00      	nop
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009756:	bf00      	nop
 8009758:	370c      	adds	r7, #12
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009762:	b480      	push	{r7}
 8009764:	b085      	sub	sp, #20
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	689a      	ldr	r2, [r3, #8]
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	683a      	ldr	r2, [r7, #0]
 8009786:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	1c5a      	adds	r2, r3, #1
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	601a      	str	r2, [r3, #0]
}
 800979e:	bf00      	nop
 80097a0:	3714      	adds	r7, #20
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr

080097aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80097aa:	b480      	push	{r7}
 80097ac:	b085      	sub	sp, #20
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
 80097b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c0:	d103      	bne.n	80097ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	60fb      	str	r3, [r7, #12]
 80097c8:	e00c      	b.n	80097e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	3308      	adds	r3, #8
 80097ce:	60fb      	str	r3, [r7, #12]
 80097d0:	e002      	b.n	80097d8 <vListInsert+0x2e>
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	60fb      	str	r3, [r7, #12]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d2f6      	bcs.n	80097d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	685a      	ldr	r2, [r3, #4]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	683a      	ldr	r2, [r7, #0]
 80097f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	683a      	ldr	r2, [r7, #0]
 80097fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	1c5a      	adds	r2, r3, #1
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	601a      	str	r2, [r3, #0]
}
 8009810:	bf00      	nop
 8009812:	3714      	adds	r7, #20
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800981c:	b480      	push	{r7}
 800981e:	b085      	sub	sp, #20
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	6892      	ldr	r2, [r2, #8]
 8009832:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	6852      	ldr	r2, [r2, #4]
 800983c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	429a      	cmp	r2, r3
 8009846:	d103      	bne.n	8009850 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	689a      	ldr	r2, [r3, #8]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	1e5a      	subs	r2, r3, #1
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3714      	adds	r7, #20
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d10a      	bne.n	800989a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009888:	f383 8811 	msr	BASEPRI, r3
 800988c:	f3bf 8f6f 	isb	sy
 8009890:	f3bf 8f4f 	dsb	sy
 8009894:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009896:	bf00      	nop
 8009898:	e7fe      	b.n	8009898 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800989a:	f002 fa73 	bl	800bd84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098a6:	68f9      	ldr	r1, [r7, #12]
 80098a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80098aa:	fb01 f303 	mul.w	r3, r1, r3
 80098ae:	441a      	add	r2, r3
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2200      	movs	r2, #0
 80098b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ca:	3b01      	subs	r3, #1
 80098cc:	68f9      	ldr	r1, [r7, #12]
 80098ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80098d0:	fb01 f303 	mul.w	r3, r1, r3
 80098d4:	441a      	add	r2, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	22ff      	movs	r2, #255	; 0xff
 80098de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	22ff      	movs	r2, #255	; 0xff
 80098e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d114      	bne.n	800991a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	691b      	ldr	r3, [r3, #16]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d01a      	beq.n	800992e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	3310      	adds	r3, #16
 80098fc:	4618      	mov	r0, r3
 80098fe:	f001 fb4d 	bl	800af9c <xTaskRemoveFromEventList>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d012      	beq.n	800992e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009908:	4b0c      	ldr	r3, [pc, #48]	; (800993c <xQueueGenericReset+0xcc>)
 800990a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800990e:	601a      	str	r2, [r3, #0]
 8009910:	f3bf 8f4f 	dsb	sy
 8009914:	f3bf 8f6f 	isb	sy
 8009918:	e009      	b.n	800992e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	3310      	adds	r3, #16
 800991e:	4618      	mov	r0, r3
 8009920:	f7ff fef2 	bl	8009708 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	3324      	adds	r3, #36	; 0x24
 8009928:	4618      	mov	r0, r3
 800992a:	f7ff feed 	bl	8009708 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800992e:	f002 fa59 	bl	800bde4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009932:	2301      	movs	r3, #1
}
 8009934:	4618      	mov	r0, r3
 8009936:	3710      	adds	r7, #16
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	e000ed04 	.word	0xe000ed04

08009940 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009940:	b580      	push	{r7, lr}
 8009942:	b08e      	sub	sp, #56	; 0x38
 8009944:	af02      	add	r7, sp, #8
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	607a      	str	r2, [r7, #4]
 800994c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d10a      	bne.n	800996a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009958:	f383 8811 	msr	BASEPRI, r3
 800995c:	f3bf 8f6f 	isb	sy
 8009960:	f3bf 8f4f 	dsb	sy
 8009964:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009966:	bf00      	nop
 8009968:	e7fe      	b.n	8009968 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10a      	bne.n	8009986 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009974:	f383 8811 	msr	BASEPRI, r3
 8009978:	f3bf 8f6f 	isb	sy
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009982:	bf00      	nop
 8009984:	e7fe      	b.n	8009984 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d002      	beq.n	8009992 <xQueueGenericCreateStatic+0x52>
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d001      	beq.n	8009996 <xQueueGenericCreateStatic+0x56>
 8009992:	2301      	movs	r3, #1
 8009994:	e000      	b.n	8009998 <xQueueGenericCreateStatic+0x58>
 8009996:	2300      	movs	r3, #0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10a      	bne.n	80099b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800999c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a0:	f383 8811 	msr	BASEPRI, r3
 80099a4:	f3bf 8f6f 	isb	sy
 80099a8:	f3bf 8f4f 	dsb	sy
 80099ac:	623b      	str	r3, [r7, #32]
}
 80099ae:	bf00      	nop
 80099b0:	e7fe      	b.n	80099b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d102      	bne.n	80099be <xQueueGenericCreateStatic+0x7e>
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d101      	bne.n	80099c2 <xQueueGenericCreateStatic+0x82>
 80099be:	2301      	movs	r3, #1
 80099c0:	e000      	b.n	80099c4 <xQueueGenericCreateStatic+0x84>
 80099c2:	2300      	movs	r3, #0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10a      	bne.n	80099de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80099c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099cc:	f383 8811 	msr	BASEPRI, r3
 80099d0:	f3bf 8f6f 	isb	sy
 80099d4:	f3bf 8f4f 	dsb	sy
 80099d8:	61fb      	str	r3, [r7, #28]
}
 80099da:	bf00      	nop
 80099dc:	e7fe      	b.n	80099dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80099de:	2348      	movs	r3, #72	; 0x48
 80099e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	2b48      	cmp	r3, #72	; 0x48
 80099e6:	d00a      	beq.n	80099fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80099e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ec:	f383 8811 	msr	BASEPRI, r3
 80099f0:	f3bf 8f6f 	isb	sy
 80099f4:	f3bf 8f4f 	dsb	sy
 80099f8:	61bb      	str	r3, [r7, #24]
}
 80099fa:	bf00      	nop
 80099fc:	e7fe      	b.n	80099fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80099fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00d      	beq.n	8009a26 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a18:	9300      	str	r3, [sp, #0]
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	68b9      	ldr	r1, [r7, #8]
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f000 f83f 	bl	8009aa4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3730      	adds	r7, #48	; 0x30
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b08a      	sub	sp, #40	; 0x28
 8009a34:	af02      	add	r7, sp, #8
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d10a      	bne.n	8009a5a <xQueueGenericCreate+0x2a>
	__asm volatile
 8009a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a48:	f383 8811 	msr	BASEPRI, r3
 8009a4c:	f3bf 8f6f 	isb	sy
 8009a50:	f3bf 8f4f 	dsb	sy
 8009a54:	613b      	str	r3, [r7, #16]
}
 8009a56:	bf00      	nop
 8009a58:	e7fe      	b.n	8009a58 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	fb02 f303 	mul.w	r3, r2, r3
 8009a62:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	3348      	adds	r3, #72	; 0x48
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f002 faad 	bl	800bfc8 <pvPortMalloc>
 8009a6e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d011      	beq.n	8009a9a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	3348      	adds	r3, #72	; 0x48
 8009a7e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a88:	79fa      	ldrb	r2, [r7, #7]
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	9300      	str	r3, [sp, #0]
 8009a8e:	4613      	mov	r3, r2
 8009a90:	697a      	ldr	r2, [r7, #20]
 8009a92:	68b9      	ldr	r1, [r7, #8]
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	f000 f805 	bl	8009aa4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009a9a:	69bb      	ldr	r3, [r7, #24]
	}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3720      	adds	r7, #32
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	607a      	str	r2, [r7, #4]
 8009ab0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d103      	bne.n	8009ac0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	69ba      	ldr	r2, [r7, #24]
 8009abc:	601a      	str	r2, [r3, #0]
 8009abe:	e002      	b.n	8009ac6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	68ba      	ldr	r2, [r7, #8]
 8009ad0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009ad2:	2101      	movs	r1, #1
 8009ad4:	69b8      	ldr	r0, [r7, #24]
 8009ad6:	f7ff fecb 	bl	8009870 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009ada:	bf00      	nop
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b08a      	sub	sp, #40	; 0x28
 8009ae6:	af02      	add	r7, sp, #8
 8009ae8:	60f8      	str	r0, [r7, #12]
 8009aea:	60b9      	str	r1, [r7, #8]
 8009aec:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d10a      	bne.n	8009b0a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af8:	f383 8811 	msr	BASEPRI, r3
 8009afc:	f3bf 8f6f 	isb	sy
 8009b00:	f3bf 8f4f 	dsb	sy
 8009b04:	61bb      	str	r3, [r7, #24]
}
 8009b06:	bf00      	nop
 8009b08:	e7fe      	b.n	8009b08 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009b0a:	68ba      	ldr	r2, [r7, #8]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d90a      	bls.n	8009b28 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b16:	f383 8811 	msr	BASEPRI, r3
 8009b1a:	f3bf 8f6f 	isb	sy
 8009b1e:	f3bf 8f4f 	dsb	sy
 8009b22:	617b      	str	r3, [r7, #20]
}
 8009b24:	bf00      	nop
 8009b26:	e7fe      	b.n	8009b26 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009b28:	2302      	movs	r3, #2
 8009b2a:	9300      	str	r3, [sp, #0]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	2100      	movs	r1, #0
 8009b32:	68f8      	ldr	r0, [r7, #12]
 8009b34:	f7ff ff04 	bl	8009940 <xQueueGenericCreateStatic>
 8009b38:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d002      	beq.n	8009b46 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	68ba      	ldr	r2, [r7, #8]
 8009b44:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009b46:	69fb      	ldr	r3, [r7, #28]
	}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3720      	adds	r7, #32
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b086      	sub	sp, #24
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d10a      	bne.n	8009b76 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b64:	f383 8811 	msr	BASEPRI, r3
 8009b68:	f3bf 8f6f 	isb	sy
 8009b6c:	f3bf 8f4f 	dsb	sy
 8009b70:	613b      	str	r3, [r7, #16]
}
 8009b72:	bf00      	nop
 8009b74:	e7fe      	b.n	8009b74 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009b76:	683a      	ldr	r2, [r7, #0]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d90a      	bls.n	8009b94 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b82:	f383 8811 	msr	BASEPRI, r3
 8009b86:	f3bf 8f6f 	isb	sy
 8009b8a:	f3bf 8f4f 	dsb	sy
 8009b8e:	60fb      	str	r3, [r7, #12]
}
 8009b90:	bf00      	nop
 8009b92:	e7fe      	b.n	8009b92 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009b94:	2202      	movs	r2, #2
 8009b96:	2100      	movs	r1, #0
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f7ff ff49 	bl	8009a30 <xQueueGenericCreate>
 8009b9e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d002      	beq.n	8009bac <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	683a      	ldr	r2, [r7, #0]
 8009baa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009bac:	697b      	ldr	r3, [r7, #20]
	}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3718      	adds	r7, #24
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
	...

08009bb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b08e      	sub	sp, #56	; 0x38
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	607a      	str	r2, [r7, #4]
 8009bc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d10a      	bne.n	8009bea <xQueueGenericSend+0x32>
	__asm volatile
 8009bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd8:	f383 8811 	msr	BASEPRI, r3
 8009bdc:	f3bf 8f6f 	isb	sy
 8009be0:	f3bf 8f4f 	dsb	sy
 8009be4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009be6:	bf00      	nop
 8009be8:	e7fe      	b.n	8009be8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d103      	bne.n	8009bf8 <xQueueGenericSend+0x40>
 8009bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d101      	bne.n	8009bfc <xQueueGenericSend+0x44>
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	e000      	b.n	8009bfe <xQueueGenericSend+0x46>
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d10a      	bne.n	8009c18 <xQueueGenericSend+0x60>
	__asm volatile
 8009c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c06:	f383 8811 	msr	BASEPRI, r3
 8009c0a:	f3bf 8f6f 	isb	sy
 8009c0e:	f3bf 8f4f 	dsb	sy
 8009c12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c14:	bf00      	nop
 8009c16:	e7fe      	b.n	8009c16 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	d103      	bne.n	8009c26 <xQueueGenericSend+0x6e>
 8009c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d101      	bne.n	8009c2a <xQueueGenericSend+0x72>
 8009c26:	2301      	movs	r3, #1
 8009c28:	e000      	b.n	8009c2c <xQueueGenericSend+0x74>
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d10a      	bne.n	8009c46 <xQueueGenericSend+0x8e>
	__asm volatile
 8009c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c34:	f383 8811 	msr	BASEPRI, r3
 8009c38:	f3bf 8f6f 	isb	sy
 8009c3c:	f3bf 8f4f 	dsb	sy
 8009c40:	623b      	str	r3, [r7, #32]
}
 8009c42:	bf00      	nop
 8009c44:	e7fe      	b.n	8009c44 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c46:	f001 fb67 	bl	800b318 <xTaskGetSchedulerState>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d102      	bne.n	8009c56 <xQueueGenericSend+0x9e>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d101      	bne.n	8009c5a <xQueueGenericSend+0xa2>
 8009c56:	2301      	movs	r3, #1
 8009c58:	e000      	b.n	8009c5c <xQueueGenericSend+0xa4>
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d10a      	bne.n	8009c76 <xQueueGenericSend+0xbe>
	__asm volatile
 8009c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c64:	f383 8811 	msr	BASEPRI, r3
 8009c68:	f3bf 8f6f 	isb	sy
 8009c6c:	f3bf 8f4f 	dsb	sy
 8009c70:	61fb      	str	r3, [r7, #28]
}
 8009c72:	bf00      	nop
 8009c74:	e7fe      	b.n	8009c74 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c76:	f002 f885 	bl	800bd84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d302      	bcc.n	8009c8c <xQueueGenericSend+0xd4>
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	2b02      	cmp	r3, #2
 8009c8a:	d129      	bne.n	8009ce0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c8c:	683a      	ldr	r2, [r7, #0]
 8009c8e:	68b9      	ldr	r1, [r7, #8]
 8009c90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c92:	f000 fc3b 	bl	800a50c <prvCopyDataToQueue>
 8009c96:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d010      	beq.n	8009cc2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca2:	3324      	adds	r3, #36	; 0x24
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f001 f979 	bl	800af9c <xTaskRemoveFromEventList>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d013      	beq.n	8009cd8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009cb0:	4b3f      	ldr	r3, [pc, #252]	; (8009db0 <xQueueGenericSend+0x1f8>)
 8009cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cb6:	601a      	str	r2, [r3, #0]
 8009cb8:	f3bf 8f4f 	dsb	sy
 8009cbc:	f3bf 8f6f 	isb	sy
 8009cc0:	e00a      	b.n	8009cd8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d007      	beq.n	8009cd8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009cc8:	4b39      	ldr	r3, [pc, #228]	; (8009db0 <xQueueGenericSend+0x1f8>)
 8009cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cce:	601a      	str	r2, [r3, #0]
 8009cd0:	f3bf 8f4f 	dsb	sy
 8009cd4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009cd8:	f002 f884 	bl	800bde4 <vPortExitCritical>
				return pdPASS;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	e063      	b.n	8009da8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d103      	bne.n	8009cee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ce6:	f002 f87d 	bl	800bde4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009cea:	2300      	movs	r3, #0
 8009cec:	e05c      	b.n	8009da8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d106      	bne.n	8009d02 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009cf4:	f107 0314 	add.w	r3, r7, #20
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f001 f9b1 	bl	800b060 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d02:	f002 f86f 	bl	800bde4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d06:	f000 ff43 	bl	800ab90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d0a:	f002 f83b 	bl	800bd84 <vPortEnterCritical>
 8009d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d14:	b25b      	sxtb	r3, r3
 8009d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d1a:	d103      	bne.n	8009d24 <xQueueGenericSend+0x16c>
 8009d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d2a:	b25b      	sxtb	r3, r3
 8009d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d30:	d103      	bne.n	8009d3a <xQueueGenericSend+0x182>
 8009d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d34:	2200      	movs	r2, #0
 8009d36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d3a:	f002 f853 	bl	800bde4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d3e:	1d3a      	adds	r2, r7, #4
 8009d40:	f107 0314 	add.w	r3, r7, #20
 8009d44:	4611      	mov	r1, r2
 8009d46:	4618      	mov	r0, r3
 8009d48:	f001 f9a0 	bl	800b08c <xTaskCheckForTimeOut>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d124      	bne.n	8009d9c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009d52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d54:	f000 fcd2 	bl	800a6fc <prvIsQueueFull>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d018      	beq.n	8009d90 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d60:	3310      	adds	r3, #16
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	4611      	mov	r1, r2
 8009d66:	4618      	mov	r0, r3
 8009d68:	f001 f8f4 	bl	800af54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009d6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d6e:	f000 fc5d 	bl	800a62c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009d72:	f000 ff1b 	bl	800abac <xTaskResumeAll>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	f47f af7c 	bne.w	8009c76 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009d7e:	4b0c      	ldr	r3, [pc, #48]	; (8009db0 <xQueueGenericSend+0x1f8>)
 8009d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d84:	601a      	str	r2, [r3, #0]
 8009d86:	f3bf 8f4f 	dsb	sy
 8009d8a:	f3bf 8f6f 	isb	sy
 8009d8e:	e772      	b.n	8009c76 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009d90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d92:	f000 fc4b 	bl	800a62c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d96:	f000 ff09 	bl	800abac <xTaskResumeAll>
 8009d9a:	e76c      	b.n	8009c76 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009d9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d9e:	f000 fc45 	bl	800a62c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009da2:	f000 ff03 	bl	800abac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009da6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3738      	adds	r7, #56	; 0x38
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	e000ed04 	.word	0xe000ed04

08009db4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b090      	sub	sp, #64	; 0x40
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	607a      	str	r2, [r7, #4]
 8009dc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d10a      	bne.n	8009de2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd0:	f383 8811 	msr	BASEPRI, r3
 8009dd4:	f3bf 8f6f 	isb	sy
 8009dd8:	f3bf 8f4f 	dsb	sy
 8009ddc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009dde:	bf00      	nop
 8009de0:	e7fe      	b.n	8009de0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d103      	bne.n	8009df0 <xQueueGenericSendFromISR+0x3c>
 8009de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d101      	bne.n	8009df4 <xQueueGenericSendFromISR+0x40>
 8009df0:	2301      	movs	r3, #1
 8009df2:	e000      	b.n	8009df6 <xQueueGenericSendFromISR+0x42>
 8009df4:	2300      	movs	r3, #0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d10a      	bne.n	8009e10 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfe:	f383 8811 	msr	BASEPRI, r3
 8009e02:	f3bf 8f6f 	isb	sy
 8009e06:	f3bf 8f4f 	dsb	sy
 8009e0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e0c:	bf00      	nop
 8009e0e:	e7fe      	b.n	8009e0e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	d103      	bne.n	8009e1e <xQueueGenericSendFromISR+0x6a>
 8009e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d101      	bne.n	8009e22 <xQueueGenericSendFromISR+0x6e>
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e000      	b.n	8009e24 <xQueueGenericSendFromISR+0x70>
 8009e22:	2300      	movs	r3, #0
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d10a      	bne.n	8009e3e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2c:	f383 8811 	msr	BASEPRI, r3
 8009e30:	f3bf 8f6f 	isb	sy
 8009e34:	f3bf 8f4f 	dsb	sy
 8009e38:	623b      	str	r3, [r7, #32]
}
 8009e3a:	bf00      	nop
 8009e3c:	e7fe      	b.n	8009e3c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e3e:	f002 f883 	bl	800bf48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009e42:	f3ef 8211 	mrs	r2, BASEPRI
 8009e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4a:	f383 8811 	msr	BASEPRI, r3
 8009e4e:	f3bf 8f6f 	isb	sy
 8009e52:	f3bf 8f4f 	dsb	sy
 8009e56:	61fa      	str	r2, [r7, #28]
 8009e58:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009e5a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e5c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d302      	bcc.n	8009e70 <xQueueGenericSendFromISR+0xbc>
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	2b02      	cmp	r3, #2
 8009e6e:	d12f      	bne.n	8009ed0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e80:	683a      	ldr	r2, [r7, #0]
 8009e82:	68b9      	ldr	r1, [r7, #8]
 8009e84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e86:	f000 fb41 	bl	800a50c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009e8a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e92:	d112      	bne.n	8009eba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d016      	beq.n	8009eca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e9e:	3324      	adds	r3, #36	; 0x24
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f001 f87b 	bl	800af9c <xTaskRemoveFromEventList>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00e      	beq.n	8009eca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d00b      	beq.n	8009eca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	601a      	str	r2, [r3, #0]
 8009eb8:	e007      	b.n	8009eca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009eba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	b25a      	sxtb	r2, r3
 8009ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009ece:	e001      	b.n	8009ed4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ed6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009ede:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3740      	adds	r7, #64	; 0x40
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b08e      	sub	sp, #56	; 0x38
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
 8009ef2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d10a      	bne.n	8009f14 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f02:	f383 8811 	msr	BASEPRI, r3
 8009f06:	f3bf 8f6f 	isb	sy
 8009f0a:	f3bf 8f4f 	dsb	sy
 8009f0e:	623b      	str	r3, [r7, #32]
}
 8009f10:	bf00      	nop
 8009f12:	e7fe      	b.n	8009f12 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d00a      	beq.n	8009f32 <xQueueGiveFromISR+0x48>
	__asm volatile
 8009f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f20:	f383 8811 	msr	BASEPRI, r3
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	61fb      	str	r3, [r7, #28]
}
 8009f2e:	bf00      	nop
 8009f30:	e7fe      	b.n	8009f30 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d103      	bne.n	8009f42 <xQueueGiveFromISR+0x58>
 8009f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d101      	bne.n	8009f46 <xQueueGiveFromISR+0x5c>
 8009f42:	2301      	movs	r3, #1
 8009f44:	e000      	b.n	8009f48 <xQueueGiveFromISR+0x5e>
 8009f46:	2300      	movs	r3, #0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d10a      	bne.n	8009f62 <xQueueGiveFromISR+0x78>
	__asm volatile
 8009f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f50:	f383 8811 	msr	BASEPRI, r3
 8009f54:	f3bf 8f6f 	isb	sy
 8009f58:	f3bf 8f4f 	dsb	sy
 8009f5c:	61bb      	str	r3, [r7, #24]
}
 8009f5e:	bf00      	nop
 8009f60:	e7fe      	b.n	8009f60 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f62:	f001 fff1 	bl	800bf48 <vPortValidateInterruptPriority>
	__asm volatile
 8009f66:	f3ef 8211 	mrs	r2, BASEPRI
 8009f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6e:	f383 8811 	msr	BASEPRI, r3
 8009f72:	f3bf 8f6f 	isb	sy
 8009f76:	f3bf 8f4f 	dsb	sy
 8009f7a:	617a      	str	r2, [r7, #20]
 8009f7c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009f7e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f86:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d22b      	bcs.n	8009fea <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9e:	1c5a      	adds	r2, r3, #1
 8009fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009fa4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fac:	d112      	bne.n	8009fd4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d016      	beq.n	8009fe4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb8:	3324      	adds	r3, #36	; 0x24
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f000 ffee 	bl	800af9c <xTaskRemoveFromEventList>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d00e      	beq.n	8009fe4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d00b      	beq.n	8009fe4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	601a      	str	r2, [r3, #0]
 8009fd2:	e007      	b.n	8009fe4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fd8:	3301      	adds	r3, #1
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	b25a      	sxtb	r2, r3
 8009fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	637b      	str	r3, [r7, #52]	; 0x34
 8009fe8:	e001      	b.n	8009fee <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009fea:	2300      	movs	r3, #0
 8009fec:	637b      	str	r3, [r7, #52]	; 0x34
 8009fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f383 8811 	msr	BASEPRI, r3
}
 8009ff8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3738      	adds	r7, #56	; 0x38
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b08c      	sub	sp, #48	; 0x30
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a010:	2300      	movs	r3, #0
 800a012:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d10a      	bne.n	800a034 <xQueueReceive+0x30>
	__asm volatile
 800a01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	623b      	str	r3, [r7, #32]
}
 800a030:	bf00      	nop
 800a032:	e7fe      	b.n	800a032 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d103      	bne.n	800a042 <xQueueReceive+0x3e>
 800a03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d101      	bne.n	800a046 <xQueueReceive+0x42>
 800a042:	2301      	movs	r3, #1
 800a044:	e000      	b.n	800a048 <xQueueReceive+0x44>
 800a046:	2300      	movs	r3, #0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d10a      	bne.n	800a062 <xQueueReceive+0x5e>
	__asm volatile
 800a04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a050:	f383 8811 	msr	BASEPRI, r3
 800a054:	f3bf 8f6f 	isb	sy
 800a058:	f3bf 8f4f 	dsb	sy
 800a05c:	61fb      	str	r3, [r7, #28]
}
 800a05e:	bf00      	nop
 800a060:	e7fe      	b.n	800a060 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a062:	f001 f959 	bl	800b318 <xTaskGetSchedulerState>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d102      	bne.n	800a072 <xQueueReceive+0x6e>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d101      	bne.n	800a076 <xQueueReceive+0x72>
 800a072:	2301      	movs	r3, #1
 800a074:	e000      	b.n	800a078 <xQueueReceive+0x74>
 800a076:	2300      	movs	r3, #0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d10a      	bne.n	800a092 <xQueueReceive+0x8e>
	__asm volatile
 800a07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a080:	f383 8811 	msr	BASEPRI, r3
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	61bb      	str	r3, [r7, #24]
}
 800a08e:	bf00      	nop
 800a090:	e7fe      	b.n	800a090 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a092:	f001 fe77 	bl	800bd84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a09a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d01f      	beq.n	800a0e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a0a2:	68b9      	ldr	r1, [r7, #8]
 800a0a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0a6:	f000 fa9b 	bl	800a5e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ac:	1e5a      	subs	r2, r3, #1
 800a0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b4:	691b      	ldr	r3, [r3, #16]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d00f      	beq.n	800a0da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0bc:	3310      	adds	r3, #16
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f000 ff6c 	bl	800af9c <xTaskRemoveFromEventList>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d007      	beq.n	800a0da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a0ca:	4b3d      	ldr	r3, [pc, #244]	; (800a1c0 <xQueueReceive+0x1bc>)
 800a0cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0d0:	601a      	str	r2, [r3, #0]
 800a0d2:	f3bf 8f4f 	dsb	sy
 800a0d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a0da:	f001 fe83 	bl	800bde4 <vPortExitCritical>
				return pdPASS;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e069      	b.n	800a1b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d103      	bne.n	800a0f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0e8:	f001 fe7c 	bl	800bde4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	e062      	b.n	800a1b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d106      	bne.n	800a104 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0f6:	f107 0310 	add.w	r3, r7, #16
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f000 ffb0 	bl	800b060 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a100:	2301      	movs	r3, #1
 800a102:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a104:	f001 fe6e 	bl	800bde4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a108:	f000 fd42 	bl	800ab90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a10c:	f001 fe3a 	bl	800bd84 <vPortEnterCritical>
 800a110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a112:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a116:	b25b      	sxtb	r3, r3
 800a118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a11c:	d103      	bne.n	800a126 <xQueueReceive+0x122>
 800a11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a120:	2200      	movs	r2, #0
 800a122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a128:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a12c:	b25b      	sxtb	r3, r3
 800a12e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a132:	d103      	bne.n	800a13c <xQueueReceive+0x138>
 800a134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a136:	2200      	movs	r2, #0
 800a138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a13c:	f001 fe52 	bl	800bde4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a140:	1d3a      	adds	r2, r7, #4
 800a142:	f107 0310 	add.w	r3, r7, #16
 800a146:	4611      	mov	r1, r2
 800a148:	4618      	mov	r0, r3
 800a14a:	f000 ff9f 	bl	800b08c <xTaskCheckForTimeOut>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d123      	bne.n	800a19c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a156:	f000 fabb 	bl	800a6d0 <prvIsQueueEmpty>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d017      	beq.n	800a190 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a162:	3324      	adds	r3, #36	; 0x24
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	4611      	mov	r1, r2
 800a168:	4618      	mov	r0, r3
 800a16a:	f000 fef3 	bl	800af54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a16e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a170:	f000 fa5c 	bl	800a62c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a174:	f000 fd1a 	bl	800abac <xTaskResumeAll>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d189      	bne.n	800a092 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a17e:	4b10      	ldr	r3, [pc, #64]	; (800a1c0 <xQueueReceive+0x1bc>)
 800a180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a184:	601a      	str	r2, [r3, #0]
 800a186:	f3bf 8f4f 	dsb	sy
 800a18a:	f3bf 8f6f 	isb	sy
 800a18e:	e780      	b.n	800a092 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a192:	f000 fa4b 	bl	800a62c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a196:	f000 fd09 	bl	800abac <xTaskResumeAll>
 800a19a:	e77a      	b.n	800a092 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a19c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a19e:	f000 fa45 	bl	800a62c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1a2:	f000 fd03 	bl	800abac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1a8:	f000 fa92 	bl	800a6d0 <prvIsQueueEmpty>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f43f af6f 	beq.w	800a092 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a1b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3730      	adds	r7, #48	; 0x30
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	e000ed04 	.word	0xe000ed04

0800a1c4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b08e      	sub	sp, #56	; 0x38
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d10a      	bne.n	800a1f6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e4:	f383 8811 	msr	BASEPRI, r3
 800a1e8:	f3bf 8f6f 	isb	sy
 800a1ec:	f3bf 8f4f 	dsb	sy
 800a1f0:	623b      	str	r3, [r7, #32]
}
 800a1f2:	bf00      	nop
 800a1f4:	e7fe      	b.n	800a1f4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d00a      	beq.n	800a214 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a202:	f383 8811 	msr	BASEPRI, r3
 800a206:	f3bf 8f6f 	isb	sy
 800a20a:	f3bf 8f4f 	dsb	sy
 800a20e:	61fb      	str	r3, [r7, #28]
}
 800a210:	bf00      	nop
 800a212:	e7fe      	b.n	800a212 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a214:	f001 f880 	bl	800b318 <xTaskGetSchedulerState>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d102      	bne.n	800a224 <xQueueSemaphoreTake+0x60>
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d101      	bne.n	800a228 <xQueueSemaphoreTake+0x64>
 800a224:	2301      	movs	r3, #1
 800a226:	e000      	b.n	800a22a <xQueueSemaphoreTake+0x66>
 800a228:	2300      	movs	r3, #0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d10a      	bne.n	800a244 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a232:	f383 8811 	msr	BASEPRI, r3
 800a236:	f3bf 8f6f 	isb	sy
 800a23a:	f3bf 8f4f 	dsb	sy
 800a23e:	61bb      	str	r3, [r7, #24]
}
 800a240:	bf00      	nop
 800a242:	e7fe      	b.n	800a242 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a244:	f001 fd9e 	bl	800bd84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a24c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a250:	2b00      	cmp	r3, #0
 800a252:	d024      	beq.n	800a29e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a256:	1e5a      	subs	r2, r3, #1
 800a258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a25a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d104      	bne.n	800a26e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a264:	f001 fa00 	bl	800b668 <pvTaskIncrementMutexHeldCount>
 800a268:	4602      	mov	r2, r0
 800a26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a270:	691b      	ldr	r3, [r3, #16]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00f      	beq.n	800a296 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a278:	3310      	adds	r3, #16
 800a27a:	4618      	mov	r0, r3
 800a27c:	f000 fe8e 	bl	800af9c <xTaskRemoveFromEventList>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d007      	beq.n	800a296 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a286:	4b54      	ldr	r3, [pc, #336]	; (800a3d8 <xQueueSemaphoreTake+0x214>)
 800a288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a28c:	601a      	str	r2, [r3, #0]
 800a28e:	f3bf 8f4f 	dsb	sy
 800a292:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a296:	f001 fda5 	bl	800bde4 <vPortExitCritical>
				return pdPASS;
 800a29a:	2301      	movs	r3, #1
 800a29c:	e097      	b.n	800a3ce <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d111      	bne.n	800a2c8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d00a      	beq.n	800a2c0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ae:	f383 8811 	msr	BASEPRI, r3
 800a2b2:	f3bf 8f6f 	isb	sy
 800a2b6:	f3bf 8f4f 	dsb	sy
 800a2ba:	617b      	str	r3, [r7, #20]
}
 800a2bc:	bf00      	nop
 800a2be:	e7fe      	b.n	800a2be <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a2c0:	f001 fd90 	bl	800bde4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	e082      	b.n	800a3ce <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a2c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d106      	bne.n	800a2dc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2ce:	f107 030c 	add.w	r3, r7, #12
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f000 fec4 	bl	800b060 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a2dc:	f001 fd82 	bl	800bde4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a2e0:	f000 fc56 	bl	800ab90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2e4:	f001 fd4e 	bl	800bd84 <vPortEnterCritical>
 800a2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2ee:	b25b      	sxtb	r3, r3
 800a2f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2f4:	d103      	bne.n	800a2fe <xQueueSemaphoreTake+0x13a>
 800a2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a300:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a304:	b25b      	sxtb	r3, r3
 800a306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a30a:	d103      	bne.n	800a314 <xQueueSemaphoreTake+0x150>
 800a30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a314:	f001 fd66 	bl	800bde4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a318:	463a      	mov	r2, r7
 800a31a:	f107 030c 	add.w	r3, r7, #12
 800a31e:	4611      	mov	r1, r2
 800a320:	4618      	mov	r0, r3
 800a322:	f000 feb3 	bl	800b08c <xTaskCheckForTimeOut>
 800a326:	4603      	mov	r3, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d132      	bne.n	800a392 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a32c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a32e:	f000 f9cf 	bl	800a6d0 <prvIsQueueEmpty>
 800a332:	4603      	mov	r3, r0
 800a334:	2b00      	cmp	r3, #0
 800a336:	d026      	beq.n	800a386 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d109      	bne.n	800a354 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a340:	f001 fd20 	bl	800bd84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	4618      	mov	r0, r3
 800a34a:	f001 f803 	bl	800b354 <xTaskPriorityInherit>
 800a34e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a350:	f001 fd48 	bl	800bde4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a356:	3324      	adds	r3, #36	; 0x24
 800a358:	683a      	ldr	r2, [r7, #0]
 800a35a:	4611      	mov	r1, r2
 800a35c:	4618      	mov	r0, r3
 800a35e:	f000 fdf9 	bl	800af54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a362:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a364:	f000 f962 	bl	800a62c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a368:	f000 fc20 	bl	800abac <xTaskResumeAll>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	f47f af68 	bne.w	800a244 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a374:	4b18      	ldr	r3, [pc, #96]	; (800a3d8 <xQueueSemaphoreTake+0x214>)
 800a376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a37a:	601a      	str	r2, [r3, #0]
 800a37c:	f3bf 8f4f 	dsb	sy
 800a380:	f3bf 8f6f 	isb	sy
 800a384:	e75e      	b.n	800a244 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a386:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a388:	f000 f950 	bl	800a62c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a38c:	f000 fc0e 	bl	800abac <xTaskResumeAll>
 800a390:	e758      	b.n	800a244 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a392:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a394:	f000 f94a 	bl	800a62c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a398:	f000 fc08 	bl	800abac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a39c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a39e:	f000 f997 	bl	800a6d0 <prvIsQueueEmpty>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f43f af4d 	beq.w	800a244 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d00d      	beq.n	800a3cc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a3b0:	f001 fce8 	bl	800bd84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a3b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3b6:	f000 f891 	bl	800a4dc <prvGetDisinheritPriorityAfterTimeout>
 800a3ba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f001 f8c2 	bl	800b54c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a3c8:	f001 fd0c 	bl	800bde4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a3cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3738      	adds	r7, #56	; 0x38
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	e000ed04 	.word	0xe000ed04

0800a3dc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b08e      	sub	sp, #56	; 0x38
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d10a      	bne.n	800a408 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f6:	f383 8811 	msr	BASEPRI, r3
 800a3fa:	f3bf 8f6f 	isb	sy
 800a3fe:	f3bf 8f4f 	dsb	sy
 800a402:	623b      	str	r3, [r7, #32]
}
 800a404:	bf00      	nop
 800a406:	e7fe      	b.n	800a406 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d103      	bne.n	800a416 <xQueueReceiveFromISR+0x3a>
 800a40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a412:	2b00      	cmp	r3, #0
 800a414:	d101      	bne.n	800a41a <xQueueReceiveFromISR+0x3e>
 800a416:	2301      	movs	r3, #1
 800a418:	e000      	b.n	800a41c <xQueueReceiveFromISR+0x40>
 800a41a:	2300      	movs	r3, #0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d10a      	bne.n	800a436 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a424:	f383 8811 	msr	BASEPRI, r3
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	f3bf 8f4f 	dsb	sy
 800a430:	61fb      	str	r3, [r7, #28]
}
 800a432:	bf00      	nop
 800a434:	e7fe      	b.n	800a434 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a436:	f001 fd87 	bl	800bf48 <vPortValidateInterruptPriority>
	__asm volatile
 800a43a:	f3ef 8211 	mrs	r2, BASEPRI
 800a43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a442:	f383 8811 	msr	BASEPRI, r3
 800a446:	f3bf 8f6f 	isb	sy
 800a44a:	f3bf 8f4f 	dsb	sy
 800a44e:	61ba      	str	r2, [r7, #24]
 800a450:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a452:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a454:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a45a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d02f      	beq.n	800a4c2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a464:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a46c:	68b9      	ldr	r1, [r7, #8]
 800a46e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a470:	f000 f8b6 	bl	800a5e0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a476:	1e5a      	subs	r2, r3, #1
 800a478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a47c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a480:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a484:	d112      	bne.n	800a4ac <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d016      	beq.n	800a4bc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a490:	3310      	adds	r3, #16
 800a492:	4618      	mov	r0, r3
 800a494:	f000 fd82 	bl	800af9c <xTaskRemoveFromEventList>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00e      	beq.n	800a4bc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d00b      	beq.n	800a4bc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	601a      	str	r2, [r3, #0]
 800a4aa:	e007      	b.n	800a4bc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a4ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	b25a      	sxtb	r2, r3
 800a4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	637b      	str	r3, [r7, #52]	; 0x34
 800a4c0:	e001      	b.n	800a4c6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	637b      	str	r3, [r7, #52]	; 0x34
 800a4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	f383 8811 	msr	BASEPRI, r3
}
 800a4d0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a4d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3738      	adds	r7, #56	; 0x38
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a4dc:	b480      	push	{r7}
 800a4de:	b085      	sub	sp, #20
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d006      	beq.n	800a4fa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f1c3 0307 	rsb	r3, r3, #7
 800a4f6:	60fb      	str	r3, [r7, #12]
 800a4f8:	e001      	b.n	800a4fe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
	}
 800a500:	4618      	mov	r0, r3
 800a502:	3714      	adds	r7, #20
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b086      	sub	sp, #24
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a518:	2300      	movs	r3, #0
 800a51a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a520:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a526:	2b00      	cmp	r3, #0
 800a528:	d10d      	bne.n	800a546 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d14d      	bne.n	800a5ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	4618      	mov	r0, r3
 800a538:	f000 ff82 	bl	800b440 <xTaskPriorityDisinherit>
 800a53c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2200      	movs	r2, #0
 800a542:	609a      	str	r2, [r3, #8]
 800a544:	e043      	b.n	800a5ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d119      	bne.n	800a580 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6858      	ldr	r0, [r3, #4]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a554:	461a      	mov	r2, r3
 800a556:	68b9      	ldr	r1, [r7, #8]
 800a558:	f019 f976 	bl	8023848 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	685a      	ldr	r2, [r3, #4]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a564:	441a      	add	r2, r3
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	685a      	ldr	r2, [r3, #4]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	429a      	cmp	r2, r3
 800a574:	d32b      	bcc.n	800a5ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	605a      	str	r2, [r3, #4]
 800a57e:	e026      	b.n	800a5ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	68d8      	ldr	r0, [r3, #12]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a588:	461a      	mov	r2, r3
 800a58a:	68b9      	ldr	r1, [r7, #8]
 800a58c:	f019 f95c 	bl	8023848 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	68da      	ldr	r2, [r3, #12]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a598:	425b      	negs	r3, r3
 800a59a:	441a      	add	r2, r3
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	68da      	ldr	r2, [r3, #12]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d207      	bcs.n	800a5bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	689a      	ldr	r2, [r3, #8]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b4:	425b      	negs	r3, r3
 800a5b6:	441a      	add	r2, r3
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2b02      	cmp	r3, #2
 800a5c0:	d105      	bne.n	800a5ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d002      	beq.n	800a5ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	3b01      	subs	r3, #1
 800a5cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	1c5a      	adds	r2, r3, #1
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a5d6:	697b      	ldr	r3, [r7, #20]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3718      	adds	r7, #24
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d018      	beq.n	800a624 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	68da      	ldr	r2, [r3, #12]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5fa:	441a      	add	r2, r3
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	68da      	ldr	r2, [r3, #12]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d303      	bcc.n	800a614 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	68d9      	ldr	r1, [r3, #12]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a61c:	461a      	mov	r2, r3
 800a61e:	6838      	ldr	r0, [r7, #0]
 800a620:	f019 f912 	bl	8023848 <memcpy>
	}
}
 800a624:	bf00      	nop
 800a626:	3708      	adds	r7, #8
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a634:	f001 fba6 	bl	800bd84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a63e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a640:	e011      	b.n	800a666 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a646:	2b00      	cmp	r3, #0
 800a648:	d012      	beq.n	800a670 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	3324      	adds	r3, #36	; 0x24
 800a64e:	4618      	mov	r0, r3
 800a650:	f000 fca4 	bl	800af9c <xTaskRemoveFromEventList>
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d001      	beq.n	800a65e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a65a:	f000 fd79 	bl	800b150 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a65e:	7bfb      	ldrb	r3, [r7, #15]
 800a660:	3b01      	subs	r3, #1
 800a662:	b2db      	uxtb	r3, r3
 800a664:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	dce9      	bgt.n	800a642 <prvUnlockQueue+0x16>
 800a66e:	e000      	b.n	800a672 <prvUnlockQueue+0x46>
					break;
 800a670:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	22ff      	movs	r2, #255	; 0xff
 800a676:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a67a:	f001 fbb3 	bl	800bde4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a67e:	f001 fb81 	bl	800bd84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a688:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a68a:	e011      	b.n	800a6b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	691b      	ldr	r3, [r3, #16]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d012      	beq.n	800a6ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	3310      	adds	r3, #16
 800a698:	4618      	mov	r0, r3
 800a69a:	f000 fc7f 	bl	800af9c <xTaskRemoveFromEventList>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d001      	beq.n	800a6a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a6a4:	f000 fd54 	bl	800b150 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a6a8:	7bbb      	ldrb	r3, [r7, #14]
 800a6aa:	3b01      	subs	r3, #1
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	dce9      	bgt.n	800a68c <prvUnlockQueue+0x60>
 800a6b8:	e000      	b.n	800a6bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a6ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	22ff      	movs	r2, #255	; 0xff
 800a6c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a6c4:	f001 fb8e 	bl	800bde4 <vPortExitCritical>
}
 800a6c8:	bf00      	nop
 800a6ca:	3710      	adds	r7, #16
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a6d8:	f001 fb54 	bl	800bd84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d102      	bne.n	800a6ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	60fb      	str	r3, [r7, #12]
 800a6e8:	e001      	b.n	800a6ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a6ee:	f001 fb79 	bl	800bde4 <vPortExitCritical>

	return xReturn;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3710      	adds	r7, #16
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a704:	f001 fb3e 	bl	800bd84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a710:	429a      	cmp	r2, r3
 800a712:	d102      	bne.n	800a71a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a714:	2301      	movs	r3, #1
 800a716:	60fb      	str	r3, [r7, #12]
 800a718:	e001      	b.n	800a71e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a71a:	2300      	movs	r3, #0
 800a71c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a71e:	f001 fb61 	bl	800bde4 <vPortExitCritical>

	return xReturn;
 800a722:	68fb      	ldr	r3, [r7, #12]
}
 800a724:	4618      	mov	r0, r3
 800a726:	3710      	adds	r7, #16
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b08e      	sub	sp, #56	; 0x38
 800a730:	af04      	add	r7, sp, #16
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	607a      	str	r2, [r7, #4]
 800a738:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d10a      	bne.n	800a756 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a744:	f383 8811 	msr	BASEPRI, r3
 800a748:	f3bf 8f6f 	isb	sy
 800a74c:	f3bf 8f4f 	dsb	sy
 800a750:	623b      	str	r3, [r7, #32]
}
 800a752:	bf00      	nop
 800a754:	e7fe      	b.n	800a754 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d10a      	bne.n	800a772 <xTaskCreateStatic+0x46>
	__asm volatile
 800a75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a760:	f383 8811 	msr	BASEPRI, r3
 800a764:	f3bf 8f6f 	isb	sy
 800a768:	f3bf 8f4f 	dsb	sy
 800a76c:	61fb      	str	r3, [r7, #28]
}
 800a76e:	bf00      	nop
 800a770:	e7fe      	b.n	800a770 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a772:	2358      	movs	r3, #88	; 0x58
 800a774:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	2b58      	cmp	r3, #88	; 0x58
 800a77a:	d00a      	beq.n	800a792 <xTaskCreateStatic+0x66>
	__asm volatile
 800a77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a780:	f383 8811 	msr	BASEPRI, r3
 800a784:	f3bf 8f6f 	isb	sy
 800a788:	f3bf 8f4f 	dsb	sy
 800a78c:	61bb      	str	r3, [r7, #24]
}
 800a78e:	bf00      	nop
 800a790:	e7fe      	b.n	800a790 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a792:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a796:	2b00      	cmp	r3, #0
 800a798:	d01e      	beq.n	800a7d8 <xTaskCreateStatic+0xac>
 800a79a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d01b      	beq.n	800a7d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ac:	2202      	movs	r2, #2
 800a7ae:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	9303      	str	r3, [sp, #12]
 800a7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b8:	9302      	str	r3, [sp, #8]
 800a7ba:	f107 0314 	add.w	r3, r7, #20
 800a7be:	9301      	str	r3, [sp, #4]
 800a7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c2:	9300      	str	r3, [sp, #0]
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	68b9      	ldr	r1, [r7, #8]
 800a7ca:	68f8      	ldr	r0, [r7, #12]
 800a7cc:	f000 f850 	bl	800a870 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a7d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a7d2:	f000 f8df 	bl	800a994 <prvAddNewTaskToReadyList>
 800a7d6:	e001      	b.n	800a7dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a7dc:	697b      	ldr	r3, [r7, #20]
	}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3728      	adds	r7, #40	; 0x28
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}

0800a7e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a7e6:	b580      	push	{r7, lr}
 800a7e8:	b08c      	sub	sp, #48	; 0x30
 800a7ea:	af04      	add	r7, sp, #16
 800a7ec:	60f8      	str	r0, [r7, #12]
 800a7ee:	60b9      	str	r1, [r7, #8]
 800a7f0:	603b      	str	r3, [r7, #0]
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a7f6:	88fb      	ldrh	r3, [r7, #6]
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f001 fbe4 	bl	800bfc8 <pvPortMalloc>
 800a800:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d00e      	beq.n	800a826 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a808:	2058      	movs	r0, #88	; 0x58
 800a80a:	f001 fbdd 	bl	800bfc8 <pvPortMalloc>
 800a80e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d003      	beq.n	800a81e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	697a      	ldr	r2, [r7, #20]
 800a81a:	631a      	str	r2, [r3, #48]	; 0x30
 800a81c:	e005      	b.n	800a82a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a81e:	6978      	ldr	r0, [r7, #20]
 800a820:	f001 fca2 	bl	800c168 <vPortFree>
 800a824:	e001      	b.n	800a82a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a826:	2300      	movs	r3, #0
 800a828:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a82a:	69fb      	ldr	r3, [r7, #28]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d017      	beq.n	800a860 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	2200      	movs	r2, #0
 800a834:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a838:	88fa      	ldrh	r2, [r7, #6]
 800a83a:	2300      	movs	r3, #0
 800a83c:	9303      	str	r3, [sp, #12]
 800a83e:	69fb      	ldr	r3, [r7, #28]
 800a840:	9302      	str	r3, [sp, #8]
 800a842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a844:	9301      	str	r3, [sp, #4]
 800a846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a848:	9300      	str	r3, [sp, #0]
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	68b9      	ldr	r1, [r7, #8]
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f000 f80e 	bl	800a870 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a854:	69f8      	ldr	r0, [r7, #28]
 800a856:	f000 f89d 	bl	800a994 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a85a:	2301      	movs	r3, #1
 800a85c:	61bb      	str	r3, [r7, #24]
 800a85e:	e002      	b.n	800a866 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a860:	f04f 33ff 	mov.w	r3, #4294967295
 800a864:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a866:	69bb      	ldr	r3, [r7, #24]
	}
 800a868:	4618      	mov	r0, r3
 800a86a:	3720      	adds	r7, #32
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b088      	sub	sp, #32
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	607a      	str	r2, [r7, #4]
 800a87c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a880:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	461a      	mov	r2, r3
 800a888:	21a5      	movs	r1, #165	; 0xa5
 800a88a:	f019 f805 	bl	8023898 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a898:	3b01      	subs	r3, #1
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	4413      	add	r3, r2
 800a89e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	f023 0307 	bic.w	r3, r3, #7
 800a8a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a8a8:	69bb      	ldr	r3, [r7, #24]
 800a8aa:	f003 0307 	and.w	r3, r3, #7
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00a      	beq.n	800a8c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b6:	f383 8811 	msr	BASEPRI, r3
 800a8ba:	f3bf 8f6f 	isb	sy
 800a8be:	f3bf 8f4f 	dsb	sy
 800a8c2:	617b      	str	r3, [r7, #20]
}
 800a8c4:	bf00      	nop
 800a8c6:	e7fe      	b.n	800a8c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d01f      	beq.n	800a90e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	61fb      	str	r3, [r7, #28]
 800a8d2:	e012      	b.n	800a8fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a8d4:	68ba      	ldr	r2, [r7, #8]
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	4413      	add	r3, r2
 800a8da:	7819      	ldrb	r1, [r3, #0]
 800a8dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	3334      	adds	r3, #52	; 0x34
 800a8e4:	460a      	mov	r2, r1
 800a8e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a8e8:	68ba      	ldr	r2, [r7, #8]
 800a8ea:	69fb      	ldr	r3, [r7, #28]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d006      	beq.n	800a902 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8f4:	69fb      	ldr	r3, [r7, #28]
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	61fb      	str	r3, [r7, #28]
 800a8fa:	69fb      	ldr	r3, [r7, #28]
 800a8fc:	2b0f      	cmp	r3, #15
 800a8fe:	d9e9      	bls.n	800a8d4 <prvInitialiseNewTask+0x64>
 800a900:	e000      	b.n	800a904 <prvInitialiseNewTask+0x94>
			{
				break;
 800a902:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a906:	2200      	movs	r2, #0
 800a908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a90c:	e003      	b.n	800a916 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a910:	2200      	movs	r2, #0
 800a912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a918:	2b06      	cmp	r3, #6
 800a91a:	d901      	bls.n	800a920 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a91c:	2306      	movs	r3, #6
 800a91e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a922:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a924:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a928:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a92a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92e:	2200      	movs	r2, #0
 800a930:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a934:	3304      	adds	r3, #4
 800a936:	4618      	mov	r0, r3
 800a938:	f7fe ff06 	bl	8009748 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93e:	3318      	adds	r3, #24
 800a940:	4618      	mov	r0, r3
 800a942:	f7fe ff01 	bl	8009748 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a94a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94e:	f1c3 0207 	rsb	r2, r3, #7
 800a952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a954:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a95a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800a95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95e:	2200      	movs	r2, #0
 800a960:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a964:	2200      	movs	r2, #0
 800a966:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96a:	2200      	movs	r2, #0
 800a96c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a970:	683a      	ldr	r2, [r7, #0]
 800a972:	68f9      	ldr	r1, [r7, #12]
 800a974:	69b8      	ldr	r0, [r7, #24]
 800a976:	f001 f8db 	bl	800bb30 <pxPortInitialiseStack>
 800a97a:	4602      	mov	r2, r0
 800a97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a982:	2b00      	cmp	r3, #0
 800a984:	d002      	beq.n	800a98c <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a98a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a98c:	bf00      	nop
 800a98e:	3720      	adds	r7, #32
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a99c:	f001 f9f2 	bl	800bd84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a9a0:	4b2a      	ldr	r3, [pc, #168]	; (800aa4c <prvAddNewTaskToReadyList+0xb8>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	4a29      	ldr	r2, [pc, #164]	; (800aa4c <prvAddNewTaskToReadyList+0xb8>)
 800a9a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a9aa:	4b29      	ldr	r3, [pc, #164]	; (800aa50 <prvAddNewTaskToReadyList+0xbc>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d109      	bne.n	800a9c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a9b2:	4a27      	ldr	r2, [pc, #156]	; (800aa50 <prvAddNewTaskToReadyList+0xbc>)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a9b8:	4b24      	ldr	r3, [pc, #144]	; (800aa4c <prvAddNewTaskToReadyList+0xb8>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d110      	bne.n	800a9e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a9c0:	f000 fbec 	bl	800b19c <prvInitialiseTaskLists>
 800a9c4:	e00d      	b.n	800a9e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a9c6:	4b23      	ldr	r3, [pc, #140]	; (800aa54 <prvAddNewTaskToReadyList+0xc0>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d109      	bne.n	800a9e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a9ce:	4b20      	ldr	r3, [pc, #128]	; (800aa50 <prvAddNewTaskToReadyList+0xbc>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d802      	bhi.n	800a9e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a9dc:	4a1c      	ldr	r2, [pc, #112]	; (800aa50 <prvAddNewTaskToReadyList+0xbc>)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a9e2:	4b1d      	ldr	r3, [pc, #116]	; (800aa58 <prvAddNewTaskToReadyList+0xc4>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	4a1b      	ldr	r2, [pc, #108]	; (800aa58 <prvAddNewTaskToReadyList+0xc4>)
 800a9ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	409a      	lsls	r2, r3
 800a9f4:	4b19      	ldr	r3, [pc, #100]	; (800aa5c <prvAddNewTaskToReadyList+0xc8>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	4a18      	ldr	r2, [pc, #96]	; (800aa5c <prvAddNewTaskToReadyList+0xc8>)
 800a9fc:	6013      	str	r3, [r2, #0]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa02:	4613      	mov	r3, r2
 800aa04:	009b      	lsls	r3, r3, #2
 800aa06:	4413      	add	r3, r2
 800aa08:	009b      	lsls	r3, r3, #2
 800aa0a:	4a15      	ldr	r2, [pc, #84]	; (800aa60 <prvAddNewTaskToReadyList+0xcc>)
 800aa0c:	441a      	add	r2, r3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	3304      	adds	r3, #4
 800aa12:	4619      	mov	r1, r3
 800aa14:	4610      	mov	r0, r2
 800aa16:	f7fe fea4 	bl	8009762 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aa1a:	f001 f9e3 	bl	800bde4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aa1e:	4b0d      	ldr	r3, [pc, #52]	; (800aa54 <prvAddNewTaskToReadyList+0xc0>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00e      	beq.n	800aa44 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aa26:	4b0a      	ldr	r3, [pc, #40]	; (800aa50 <prvAddNewTaskToReadyList+0xbc>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d207      	bcs.n	800aa44 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aa34:	4b0b      	ldr	r3, [pc, #44]	; (800aa64 <prvAddNewTaskToReadyList+0xd0>)
 800aa36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa3a:	601a      	str	r2, [r3, #0]
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa44:	bf00      	nop
 800aa46:	3708      	adds	r7, #8
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	20000d50 	.word	0x20000d50
 800aa50:	20000c50 	.word	0x20000c50
 800aa54:	20000d5c 	.word	0x20000d5c
 800aa58:	20000d6c 	.word	0x20000d6c
 800aa5c:	20000d58 	.word	0x20000d58
 800aa60:	20000c54 	.word	0x20000c54
 800aa64:	e000ed04 	.word	0xe000ed04

0800aa68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aa70:	2300      	movs	r3, #0
 800aa72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d017      	beq.n	800aaaa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aa7a:	4b13      	ldr	r3, [pc, #76]	; (800aac8 <vTaskDelay+0x60>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d00a      	beq.n	800aa98 <vTaskDelay+0x30>
	__asm volatile
 800aa82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa86:	f383 8811 	msr	BASEPRI, r3
 800aa8a:	f3bf 8f6f 	isb	sy
 800aa8e:	f3bf 8f4f 	dsb	sy
 800aa92:	60bb      	str	r3, [r7, #8]
}
 800aa94:	bf00      	nop
 800aa96:	e7fe      	b.n	800aa96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aa98:	f000 f87a 	bl	800ab90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aa9c:	2100      	movs	r1, #0
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 ffe0 	bl	800ba64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aaa4:	f000 f882 	bl	800abac <xTaskResumeAll>
 800aaa8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d107      	bne.n	800aac0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800aab0:	4b06      	ldr	r3, [pc, #24]	; (800aacc <vTaskDelay+0x64>)
 800aab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aab6:	601a      	str	r2, [r3, #0]
 800aab8:	f3bf 8f4f 	dsb	sy
 800aabc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aac0:	bf00      	nop
 800aac2:	3710      	adds	r7, #16
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	20000d78 	.word	0x20000d78
 800aacc:	e000ed04 	.word	0xe000ed04

0800aad0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b08a      	sub	sp, #40	; 0x28
 800aad4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aad6:	2300      	movs	r3, #0
 800aad8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aada:	2300      	movs	r3, #0
 800aadc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aade:	463a      	mov	r2, r7
 800aae0:	1d39      	adds	r1, r7, #4
 800aae2:	f107 0308 	add.w	r3, r7, #8
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7f6 fa3a 	bl	8000f60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aaec:	6839      	ldr	r1, [r7, #0]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	68ba      	ldr	r2, [r7, #8]
 800aaf2:	9202      	str	r2, [sp, #8]
 800aaf4:	9301      	str	r3, [sp, #4]
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	2300      	movs	r3, #0
 800aafc:	460a      	mov	r2, r1
 800aafe:	491e      	ldr	r1, [pc, #120]	; (800ab78 <vTaskStartScheduler+0xa8>)
 800ab00:	481e      	ldr	r0, [pc, #120]	; (800ab7c <vTaskStartScheduler+0xac>)
 800ab02:	f7ff fe13 	bl	800a72c <xTaskCreateStatic>
 800ab06:	4603      	mov	r3, r0
 800ab08:	4a1d      	ldr	r2, [pc, #116]	; (800ab80 <vTaskStartScheduler+0xb0>)
 800ab0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ab0c:	4b1c      	ldr	r3, [pc, #112]	; (800ab80 <vTaskStartScheduler+0xb0>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d002      	beq.n	800ab1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ab14:	2301      	movs	r3, #1
 800ab16:	617b      	str	r3, [r7, #20]
 800ab18:	e001      	b.n	800ab1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d116      	bne.n	800ab52 <vTaskStartScheduler+0x82>
	__asm volatile
 800ab24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab28:	f383 8811 	msr	BASEPRI, r3
 800ab2c:	f3bf 8f6f 	isb	sy
 800ab30:	f3bf 8f4f 	dsb	sy
 800ab34:	613b      	str	r3, [r7, #16]
}
 800ab36:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ab38:	4b12      	ldr	r3, [pc, #72]	; (800ab84 <vTaskStartScheduler+0xb4>)
 800ab3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab3e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ab40:	4b11      	ldr	r3, [pc, #68]	; (800ab88 <vTaskStartScheduler+0xb8>)
 800ab42:	2201      	movs	r2, #1
 800ab44:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ab46:	4b11      	ldr	r3, [pc, #68]	; (800ab8c <vTaskStartScheduler+0xbc>)
 800ab48:	2200      	movs	r2, #0
 800ab4a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ab4c:	f001 f878 	bl	800bc40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ab50:	e00e      	b.n	800ab70 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab58:	d10a      	bne.n	800ab70 <vTaskStartScheduler+0xa0>
	__asm volatile
 800ab5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5e:	f383 8811 	msr	BASEPRI, r3
 800ab62:	f3bf 8f6f 	isb	sy
 800ab66:	f3bf 8f4f 	dsb	sy
 800ab6a:	60fb      	str	r3, [r7, #12]
}
 800ab6c:	bf00      	nop
 800ab6e:	e7fe      	b.n	800ab6e <vTaskStartScheduler+0x9e>
}
 800ab70:	bf00      	nop
 800ab72:	3718      	adds	r7, #24
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}
 800ab78:	08024ec0 	.word	0x08024ec0
 800ab7c:	0800b169 	.word	0x0800b169
 800ab80:	20000d74 	.word	0x20000d74
 800ab84:	20000d70 	.word	0x20000d70
 800ab88:	20000d5c 	.word	0x20000d5c
 800ab8c:	20000d54 	.word	0x20000d54

0800ab90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ab90:	b480      	push	{r7}
 800ab92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ab94:	4b04      	ldr	r3, [pc, #16]	; (800aba8 <vTaskSuspendAll+0x18>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	4a03      	ldr	r2, [pc, #12]	; (800aba8 <vTaskSuspendAll+0x18>)
 800ab9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ab9e:	bf00      	nop
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr
 800aba8:	20000d78 	.word	0x20000d78

0800abac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800abb2:	2300      	movs	r3, #0
 800abb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800abb6:	2300      	movs	r3, #0
 800abb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800abba:	4b41      	ldr	r3, [pc, #260]	; (800acc0 <xTaskResumeAll+0x114>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d10a      	bne.n	800abd8 <xTaskResumeAll+0x2c>
	__asm volatile
 800abc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc6:	f383 8811 	msr	BASEPRI, r3
 800abca:	f3bf 8f6f 	isb	sy
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	603b      	str	r3, [r7, #0]
}
 800abd4:	bf00      	nop
 800abd6:	e7fe      	b.n	800abd6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800abd8:	f001 f8d4 	bl	800bd84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800abdc:	4b38      	ldr	r3, [pc, #224]	; (800acc0 <xTaskResumeAll+0x114>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	3b01      	subs	r3, #1
 800abe2:	4a37      	ldr	r2, [pc, #220]	; (800acc0 <xTaskResumeAll+0x114>)
 800abe4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abe6:	4b36      	ldr	r3, [pc, #216]	; (800acc0 <xTaskResumeAll+0x114>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d161      	bne.n	800acb2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800abee:	4b35      	ldr	r3, [pc, #212]	; (800acc4 <xTaskResumeAll+0x118>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d05d      	beq.n	800acb2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800abf6:	e02e      	b.n	800ac56 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abf8:	4b33      	ldr	r3, [pc, #204]	; (800acc8 <xTaskResumeAll+0x11c>)
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	3318      	adds	r3, #24
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7fe fe09 	bl	800981c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	3304      	adds	r3, #4
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7fe fe04 	bl	800981c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac18:	2201      	movs	r2, #1
 800ac1a:	409a      	lsls	r2, r3
 800ac1c:	4b2b      	ldr	r3, [pc, #172]	; (800accc <xTaskResumeAll+0x120>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4313      	orrs	r3, r2
 800ac22:	4a2a      	ldr	r2, [pc, #168]	; (800accc <xTaskResumeAll+0x120>)
 800ac24:	6013      	str	r3, [r2, #0]
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac2a:	4613      	mov	r3, r2
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	4413      	add	r3, r2
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	4a27      	ldr	r2, [pc, #156]	; (800acd0 <xTaskResumeAll+0x124>)
 800ac34:	441a      	add	r2, r3
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	3304      	adds	r3, #4
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	4610      	mov	r0, r2
 800ac3e:	f7fe fd90 	bl	8009762 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac46:	4b23      	ldr	r3, [pc, #140]	; (800acd4 <xTaskResumeAll+0x128>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d302      	bcc.n	800ac56 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ac50:	4b21      	ldr	r3, [pc, #132]	; (800acd8 <xTaskResumeAll+0x12c>)
 800ac52:	2201      	movs	r2, #1
 800ac54:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac56:	4b1c      	ldr	r3, [pc, #112]	; (800acc8 <xTaskResumeAll+0x11c>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d1cc      	bne.n	800abf8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d001      	beq.n	800ac68 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ac64:	f000 fb38 	bl	800b2d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ac68:	4b1c      	ldr	r3, [pc, #112]	; (800acdc <xTaskResumeAll+0x130>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d010      	beq.n	800ac96 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ac74:	f000 f836 	bl	800ace4 <xTaskIncrementTick>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d002      	beq.n	800ac84 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ac7e:	4b16      	ldr	r3, [pc, #88]	; (800acd8 <xTaskResumeAll+0x12c>)
 800ac80:	2201      	movs	r2, #1
 800ac82:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	3b01      	subs	r3, #1
 800ac88:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d1f1      	bne.n	800ac74 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800ac90:	4b12      	ldr	r3, [pc, #72]	; (800acdc <xTaskResumeAll+0x130>)
 800ac92:	2200      	movs	r2, #0
 800ac94:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ac96:	4b10      	ldr	r3, [pc, #64]	; (800acd8 <xTaskResumeAll+0x12c>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d009      	beq.n	800acb2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aca2:	4b0f      	ldr	r3, [pc, #60]	; (800ace0 <xTaskResumeAll+0x134>)
 800aca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aca8:	601a      	str	r2, [r3, #0]
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800acb2:	f001 f897 	bl	800bde4 <vPortExitCritical>

	return xAlreadyYielded;
 800acb6:	68bb      	ldr	r3, [r7, #8]
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3710      	adds	r7, #16
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}
 800acc0:	20000d78 	.word	0x20000d78
 800acc4:	20000d50 	.word	0x20000d50
 800acc8:	20000d10 	.word	0x20000d10
 800accc:	20000d58 	.word	0x20000d58
 800acd0:	20000c54 	.word	0x20000c54
 800acd4:	20000c50 	.word	0x20000c50
 800acd8:	20000d64 	.word	0x20000d64
 800acdc:	20000d60 	.word	0x20000d60
 800ace0:	e000ed04 	.word	0xe000ed04

0800ace4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b086      	sub	sp, #24
 800ace8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800acea:	2300      	movs	r3, #0
 800acec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800acee:	4b4e      	ldr	r3, [pc, #312]	; (800ae28 <xTaskIncrementTick+0x144>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	f040 808e 	bne.w	800ae14 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800acf8:	4b4c      	ldr	r3, [pc, #304]	; (800ae2c <xTaskIncrementTick+0x148>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	3301      	adds	r3, #1
 800acfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ad00:	4a4a      	ldr	r2, [pc, #296]	; (800ae2c <xTaskIncrementTick+0x148>)
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d120      	bne.n	800ad4e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ad0c:	4b48      	ldr	r3, [pc, #288]	; (800ae30 <xTaskIncrementTick+0x14c>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00a      	beq.n	800ad2c <xTaskIncrementTick+0x48>
	__asm volatile
 800ad16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1a:	f383 8811 	msr	BASEPRI, r3
 800ad1e:	f3bf 8f6f 	isb	sy
 800ad22:	f3bf 8f4f 	dsb	sy
 800ad26:	603b      	str	r3, [r7, #0]
}
 800ad28:	bf00      	nop
 800ad2a:	e7fe      	b.n	800ad2a <xTaskIncrementTick+0x46>
 800ad2c:	4b40      	ldr	r3, [pc, #256]	; (800ae30 <xTaskIncrementTick+0x14c>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	60fb      	str	r3, [r7, #12]
 800ad32:	4b40      	ldr	r3, [pc, #256]	; (800ae34 <xTaskIncrementTick+0x150>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4a3e      	ldr	r2, [pc, #248]	; (800ae30 <xTaskIncrementTick+0x14c>)
 800ad38:	6013      	str	r3, [r2, #0]
 800ad3a:	4a3e      	ldr	r2, [pc, #248]	; (800ae34 <xTaskIncrementTick+0x150>)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6013      	str	r3, [r2, #0]
 800ad40:	4b3d      	ldr	r3, [pc, #244]	; (800ae38 <xTaskIncrementTick+0x154>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	3301      	adds	r3, #1
 800ad46:	4a3c      	ldr	r2, [pc, #240]	; (800ae38 <xTaskIncrementTick+0x154>)
 800ad48:	6013      	str	r3, [r2, #0]
 800ad4a:	f000 fac5 	bl	800b2d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ad4e:	4b3b      	ldr	r3, [pc, #236]	; (800ae3c <xTaskIncrementTick+0x158>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	693a      	ldr	r2, [r7, #16]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d348      	bcc.n	800adea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad58:	4b35      	ldr	r3, [pc, #212]	; (800ae30 <xTaskIncrementTick+0x14c>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d104      	bne.n	800ad6c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad62:	4b36      	ldr	r3, [pc, #216]	; (800ae3c <xTaskIncrementTick+0x158>)
 800ad64:	f04f 32ff 	mov.w	r2, #4294967295
 800ad68:	601a      	str	r2, [r3, #0]
					break;
 800ad6a:	e03e      	b.n	800adea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad6c:	4b30      	ldr	r3, [pc, #192]	; (800ae30 <xTaskIncrementTick+0x14c>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	68db      	ldr	r3, [r3, #12]
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ad7c:	693a      	ldr	r2, [r7, #16]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d203      	bcs.n	800ad8c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ad84:	4a2d      	ldr	r2, [pc, #180]	; (800ae3c <xTaskIncrementTick+0x158>)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ad8a:	e02e      	b.n	800adea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	3304      	adds	r3, #4
 800ad90:	4618      	mov	r0, r3
 800ad92:	f7fe fd43 	bl	800981c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d004      	beq.n	800ada8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	3318      	adds	r3, #24
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7fe fd3a 	bl	800981c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adac:	2201      	movs	r2, #1
 800adae:	409a      	lsls	r2, r3
 800adb0:	4b23      	ldr	r3, [pc, #140]	; (800ae40 <xTaskIncrementTick+0x15c>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4313      	orrs	r3, r2
 800adb6:	4a22      	ldr	r2, [pc, #136]	; (800ae40 <xTaskIncrementTick+0x15c>)
 800adb8:	6013      	str	r3, [r2, #0]
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adbe:	4613      	mov	r3, r2
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	4413      	add	r3, r2
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	4a1f      	ldr	r2, [pc, #124]	; (800ae44 <xTaskIncrementTick+0x160>)
 800adc8:	441a      	add	r2, r3
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	3304      	adds	r3, #4
 800adce:	4619      	mov	r1, r3
 800add0:	4610      	mov	r0, r2
 800add2:	f7fe fcc6 	bl	8009762 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adda:	4b1b      	ldr	r3, [pc, #108]	; (800ae48 <xTaskIncrementTick+0x164>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d3b9      	bcc.n	800ad58 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ade4:	2301      	movs	r3, #1
 800ade6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ade8:	e7b6      	b.n	800ad58 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800adea:	4b17      	ldr	r3, [pc, #92]	; (800ae48 <xTaskIncrementTick+0x164>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adf0:	4914      	ldr	r1, [pc, #80]	; (800ae44 <xTaskIncrementTick+0x160>)
 800adf2:	4613      	mov	r3, r2
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	4413      	add	r3, r2
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	440b      	add	r3, r1
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d901      	bls.n	800ae06 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ae02:	2301      	movs	r3, #1
 800ae04:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ae06:	4b11      	ldr	r3, [pc, #68]	; (800ae4c <xTaskIncrementTick+0x168>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d007      	beq.n	800ae1e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	617b      	str	r3, [r7, #20]
 800ae12:	e004      	b.n	800ae1e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ae14:	4b0e      	ldr	r3, [pc, #56]	; (800ae50 <xTaskIncrementTick+0x16c>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	3301      	adds	r3, #1
 800ae1a:	4a0d      	ldr	r2, [pc, #52]	; (800ae50 <xTaskIncrementTick+0x16c>)
 800ae1c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ae1e:	697b      	ldr	r3, [r7, #20]
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3718      	adds	r7, #24
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	20000d78 	.word	0x20000d78
 800ae2c:	20000d54 	.word	0x20000d54
 800ae30:	20000d08 	.word	0x20000d08
 800ae34:	20000d0c 	.word	0x20000d0c
 800ae38:	20000d68 	.word	0x20000d68
 800ae3c:	20000d70 	.word	0x20000d70
 800ae40:	20000d58 	.word	0x20000d58
 800ae44:	20000c54 	.word	0x20000c54
 800ae48:	20000c50 	.word	0x20000c50
 800ae4c:	20000d64 	.word	0x20000d64
 800ae50:	20000d60 	.word	0x20000d60

0800ae54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b088      	sub	sp, #32
 800ae58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ae5a:	4b39      	ldr	r3, [pc, #228]	; (800af40 <vTaskSwitchContext+0xec>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d003      	beq.n	800ae6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ae62:	4b38      	ldr	r3, [pc, #224]	; (800af44 <vTaskSwitchContext+0xf0>)
 800ae64:	2201      	movs	r2, #1
 800ae66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ae68:	e066      	b.n	800af38 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800ae6a:	4b36      	ldr	r3, [pc, #216]	; (800af44 <vTaskSwitchContext+0xf0>)
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800ae70:	4b35      	ldr	r3, [pc, #212]	; (800af48 <vTaskSwitchContext+0xf4>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae76:	61fb      	str	r3, [r7, #28]
 800ae78:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800ae7c:	61bb      	str	r3, [r7, #24]
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	69ba      	ldr	r2, [r7, #24]
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d111      	bne.n	800aeac <vTaskSwitchContext+0x58>
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	3304      	adds	r3, #4
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	69ba      	ldr	r2, [r7, #24]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d10b      	bne.n	800aeac <vTaskSwitchContext+0x58>
 800ae94:	69fb      	ldr	r3, [r7, #28]
 800ae96:	3308      	adds	r3, #8
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	69ba      	ldr	r2, [r7, #24]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d105      	bne.n	800aeac <vTaskSwitchContext+0x58>
 800aea0:	69fb      	ldr	r3, [r7, #28]
 800aea2:	330c      	adds	r3, #12
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	69ba      	ldr	r2, [r7, #24]
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d008      	beq.n	800aebe <vTaskSwitchContext+0x6a>
 800aeac:	4b26      	ldr	r3, [pc, #152]	; (800af48 <vTaskSwitchContext+0xf4>)
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	4b25      	ldr	r3, [pc, #148]	; (800af48 <vTaskSwitchContext+0xf4>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	3334      	adds	r3, #52	; 0x34
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	4610      	mov	r0, r2
 800aeba:	f7f6 f83e 	bl	8000f3a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aebe:	4b23      	ldr	r3, [pc, #140]	; (800af4c <vTaskSwitchContext+0xf8>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	fab3 f383 	clz	r3, r3
 800aeca:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800aecc:	7afb      	ldrb	r3, [r7, #11]
 800aece:	f1c3 031f 	rsb	r3, r3, #31
 800aed2:	617b      	str	r3, [r7, #20]
 800aed4:	491e      	ldr	r1, [pc, #120]	; (800af50 <vTaskSwitchContext+0xfc>)
 800aed6:	697a      	ldr	r2, [r7, #20]
 800aed8:	4613      	mov	r3, r2
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	4413      	add	r3, r2
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	440b      	add	r3, r1
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d10a      	bne.n	800aefe <vTaskSwitchContext+0xaa>
	__asm volatile
 800aee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeec:	f383 8811 	msr	BASEPRI, r3
 800aef0:	f3bf 8f6f 	isb	sy
 800aef4:	f3bf 8f4f 	dsb	sy
 800aef8:	607b      	str	r3, [r7, #4]
}
 800aefa:	bf00      	nop
 800aefc:	e7fe      	b.n	800aefc <vTaskSwitchContext+0xa8>
 800aefe:	697a      	ldr	r2, [r7, #20]
 800af00:	4613      	mov	r3, r2
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	4413      	add	r3, r2
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	4a11      	ldr	r2, [pc, #68]	; (800af50 <vTaskSwitchContext+0xfc>)
 800af0a:	4413      	add	r3, r2
 800af0c:	613b      	str	r3, [r7, #16]
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	685a      	ldr	r2, [r3, #4]
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	605a      	str	r2, [r3, #4]
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	685a      	ldr	r2, [r3, #4]
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	3308      	adds	r3, #8
 800af20:	429a      	cmp	r2, r3
 800af22:	d104      	bne.n	800af2e <vTaskSwitchContext+0xda>
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	685a      	ldr	r2, [r3, #4]
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	605a      	str	r2, [r3, #4]
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	68db      	ldr	r3, [r3, #12]
 800af34:	4a04      	ldr	r2, [pc, #16]	; (800af48 <vTaskSwitchContext+0xf4>)
 800af36:	6013      	str	r3, [r2, #0]
}
 800af38:	bf00      	nop
 800af3a:	3720      	adds	r7, #32
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	20000d78 	.word	0x20000d78
 800af44:	20000d64 	.word	0x20000d64
 800af48:	20000c50 	.word	0x20000c50
 800af4c:	20000d58 	.word	0x20000d58
 800af50:	20000c54 	.word	0x20000c54

0800af54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d10a      	bne.n	800af7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800af64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af68:	f383 8811 	msr	BASEPRI, r3
 800af6c:	f3bf 8f6f 	isb	sy
 800af70:	f3bf 8f4f 	dsb	sy
 800af74:	60fb      	str	r3, [r7, #12]
}
 800af76:	bf00      	nop
 800af78:	e7fe      	b.n	800af78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800af7a:	4b07      	ldr	r3, [pc, #28]	; (800af98 <vTaskPlaceOnEventList+0x44>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	3318      	adds	r3, #24
 800af80:	4619      	mov	r1, r3
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f7fe fc11 	bl	80097aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800af88:	2101      	movs	r1, #1
 800af8a:	6838      	ldr	r0, [r7, #0]
 800af8c:	f000 fd6a 	bl	800ba64 <prvAddCurrentTaskToDelayedList>
}
 800af90:	bf00      	nop
 800af92:	3710      	adds	r7, #16
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}
 800af98:	20000c50 	.word	0x20000c50

0800af9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b086      	sub	sp, #24
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	68db      	ldr	r3, [r3, #12]
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d10a      	bne.n	800afc8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800afb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb6:	f383 8811 	msr	BASEPRI, r3
 800afba:	f3bf 8f6f 	isb	sy
 800afbe:	f3bf 8f4f 	dsb	sy
 800afc2:	60fb      	str	r3, [r7, #12]
}
 800afc4:	bf00      	nop
 800afc6:	e7fe      	b.n	800afc6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	3318      	adds	r3, #24
 800afcc:	4618      	mov	r0, r3
 800afce:	f7fe fc25 	bl	800981c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afd2:	4b1d      	ldr	r3, [pc, #116]	; (800b048 <xTaskRemoveFromEventList+0xac>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d11c      	bne.n	800b014 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	3304      	adds	r3, #4
 800afde:	4618      	mov	r0, r3
 800afe0:	f7fe fc1c 	bl	800981c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe8:	2201      	movs	r2, #1
 800afea:	409a      	lsls	r2, r3
 800afec:	4b17      	ldr	r3, [pc, #92]	; (800b04c <xTaskRemoveFromEventList+0xb0>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4313      	orrs	r3, r2
 800aff2:	4a16      	ldr	r2, [pc, #88]	; (800b04c <xTaskRemoveFromEventList+0xb0>)
 800aff4:	6013      	str	r3, [r2, #0]
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800affa:	4613      	mov	r3, r2
 800affc:	009b      	lsls	r3, r3, #2
 800affe:	4413      	add	r3, r2
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	4a13      	ldr	r2, [pc, #76]	; (800b050 <xTaskRemoveFromEventList+0xb4>)
 800b004:	441a      	add	r2, r3
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	3304      	adds	r3, #4
 800b00a:	4619      	mov	r1, r3
 800b00c:	4610      	mov	r0, r2
 800b00e:	f7fe fba8 	bl	8009762 <vListInsertEnd>
 800b012:	e005      	b.n	800b020 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	3318      	adds	r3, #24
 800b018:	4619      	mov	r1, r3
 800b01a:	480e      	ldr	r0, [pc, #56]	; (800b054 <xTaskRemoveFromEventList+0xb8>)
 800b01c:	f7fe fba1 	bl	8009762 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b024:	4b0c      	ldr	r3, [pc, #48]	; (800b058 <xTaskRemoveFromEventList+0xbc>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d905      	bls.n	800b03a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b02e:	2301      	movs	r3, #1
 800b030:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b032:	4b0a      	ldr	r3, [pc, #40]	; (800b05c <xTaskRemoveFromEventList+0xc0>)
 800b034:	2201      	movs	r2, #1
 800b036:	601a      	str	r2, [r3, #0]
 800b038:	e001      	b.n	800b03e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b03a:	2300      	movs	r3, #0
 800b03c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b03e:	697b      	ldr	r3, [r7, #20]
}
 800b040:	4618      	mov	r0, r3
 800b042:	3718      	adds	r7, #24
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	20000d78 	.word	0x20000d78
 800b04c:	20000d58 	.word	0x20000d58
 800b050:	20000c54 	.word	0x20000c54
 800b054:	20000d10 	.word	0x20000d10
 800b058:	20000c50 	.word	0x20000c50
 800b05c:	20000d64 	.word	0x20000d64

0800b060 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b060:	b480      	push	{r7}
 800b062:	b083      	sub	sp, #12
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b068:	4b06      	ldr	r3, [pc, #24]	; (800b084 <vTaskInternalSetTimeOutState+0x24>)
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b070:	4b05      	ldr	r3, [pc, #20]	; (800b088 <vTaskInternalSetTimeOutState+0x28>)
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	605a      	str	r2, [r3, #4]
}
 800b078:	bf00      	nop
 800b07a:	370c      	adds	r7, #12
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr
 800b084:	20000d68 	.word	0x20000d68
 800b088:	20000d54 	.word	0x20000d54

0800b08c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b088      	sub	sp, #32
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d10a      	bne.n	800b0b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a0:	f383 8811 	msr	BASEPRI, r3
 800b0a4:	f3bf 8f6f 	isb	sy
 800b0a8:	f3bf 8f4f 	dsb	sy
 800b0ac:	613b      	str	r3, [r7, #16]
}
 800b0ae:	bf00      	nop
 800b0b0:	e7fe      	b.n	800b0b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d10a      	bne.n	800b0ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0bc:	f383 8811 	msr	BASEPRI, r3
 800b0c0:	f3bf 8f6f 	isb	sy
 800b0c4:	f3bf 8f4f 	dsb	sy
 800b0c8:	60fb      	str	r3, [r7, #12]
}
 800b0ca:	bf00      	nop
 800b0cc:	e7fe      	b.n	800b0cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b0ce:	f000 fe59 	bl	800bd84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b0d2:	4b1d      	ldr	r3, [pc, #116]	; (800b148 <xTaskCheckForTimeOut+0xbc>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	69ba      	ldr	r2, [r7, #24]
 800b0de:	1ad3      	subs	r3, r2, r3
 800b0e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ea:	d102      	bne.n	800b0f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	61fb      	str	r3, [r7, #28]
 800b0f0:	e023      	b.n	800b13a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	4b15      	ldr	r3, [pc, #84]	; (800b14c <xTaskCheckForTimeOut+0xc0>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d007      	beq.n	800b10e <xTaskCheckForTimeOut+0x82>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	69ba      	ldr	r2, [r7, #24]
 800b104:	429a      	cmp	r2, r3
 800b106:	d302      	bcc.n	800b10e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b108:	2301      	movs	r3, #1
 800b10a:	61fb      	str	r3, [r7, #28]
 800b10c:	e015      	b.n	800b13a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	697a      	ldr	r2, [r7, #20]
 800b114:	429a      	cmp	r2, r3
 800b116:	d20b      	bcs.n	800b130 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	681a      	ldr	r2, [r3, #0]
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	1ad2      	subs	r2, r2, r3
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f7ff ff9b 	bl	800b060 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b12a:	2300      	movs	r3, #0
 800b12c:	61fb      	str	r3, [r7, #28]
 800b12e:	e004      	b.n	800b13a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	2200      	movs	r2, #0
 800b134:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b136:	2301      	movs	r3, #1
 800b138:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b13a:	f000 fe53 	bl	800bde4 <vPortExitCritical>

	return xReturn;
 800b13e:	69fb      	ldr	r3, [r7, #28]
}
 800b140:	4618      	mov	r0, r3
 800b142:	3720      	adds	r7, #32
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}
 800b148:	20000d54 	.word	0x20000d54
 800b14c:	20000d68 	.word	0x20000d68

0800b150 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b150:	b480      	push	{r7}
 800b152:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b154:	4b03      	ldr	r3, [pc, #12]	; (800b164 <vTaskMissedYield+0x14>)
 800b156:	2201      	movs	r2, #1
 800b158:	601a      	str	r2, [r3, #0]
}
 800b15a:	bf00      	nop
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr
 800b164:	20000d64 	.word	0x20000d64

0800b168 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b170:	f000 f854 	bl	800b21c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b174:	4b07      	ldr	r3, [pc, #28]	; (800b194 <prvIdleTask+0x2c>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d907      	bls.n	800b18c <prvIdleTask+0x24>
			{
				taskYIELD();
 800b17c:	4b06      	ldr	r3, [pc, #24]	; (800b198 <prvIdleTask+0x30>)
 800b17e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b182:	601a      	str	r2, [r3, #0]
 800b184:	f3bf 8f4f 	dsb	sy
 800b188:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800b18c:	f7f5 fece 	bl	8000f2c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800b190:	e7ee      	b.n	800b170 <prvIdleTask+0x8>
 800b192:	bf00      	nop
 800b194:	20000c54 	.word	0x20000c54
 800b198:	e000ed04 	.word	0xe000ed04

0800b19c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b082      	sub	sp, #8
 800b1a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	607b      	str	r3, [r7, #4]
 800b1a6:	e00c      	b.n	800b1c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b1a8:	687a      	ldr	r2, [r7, #4]
 800b1aa:	4613      	mov	r3, r2
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	4413      	add	r3, r2
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	4a12      	ldr	r2, [pc, #72]	; (800b1fc <prvInitialiseTaskLists+0x60>)
 800b1b4:	4413      	add	r3, r2
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7fe faa6 	bl	8009708 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	607b      	str	r3, [r7, #4]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2b06      	cmp	r3, #6
 800b1c6:	d9ef      	bls.n	800b1a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b1c8:	480d      	ldr	r0, [pc, #52]	; (800b200 <prvInitialiseTaskLists+0x64>)
 800b1ca:	f7fe fa9d 	bl	8009708 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b1ce:	480d      	ldr	r0, [pc, #52]	; (800b204 <prvInitialiseTaskLists+0x68>)
 800b1d0:	f7fe fa9a 	bl	8009708 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b1d4:	480c      	ldr	r0, [pc, #48]	; (800b208 <prvInitialiseTaskLists+0x6c>)
 800b1d6:	f7fe fa97 	bl	8009708 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b1da:	480c      	ldr	r0, [pc, #48]	; (800b20c <prvInitialiseTaskLists+0x70>)
 800b1dc:	f7fe fa94 	bl	8009708 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b1e0:	480b      	ldr	r0, [pc, #44]	; (800b210 <prvInitialiseTaskLists+0x74>)
 800b1e2:	f7fe fa91 	bl	8009708 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b1e6:	4b0b      	ldr	r3, [pc, #44]	; (800b214 <prvInitialiseTaskLists+0x78>)
 800b1e8:	4a05      	ldr	r2, [pc, #20]	; (800b200 <prvInitialiseTaskLists+0x64>)
 800b1ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b1ec:	4b0a      	ldr	r3, [pc, #40]	; (800b218 <prvInitialiseTaskLists+0x7c>)
 800b1ee:	4a05      	ldr	r2, [pc, #20]	; (800b204 <prvInitialiseTaskLists+0x68>)
 800b1f0:	601a      	str	r2, [r3, #0]
}
 800b1f2:	bf00      	nop
 800b1f4:	3708      	adds	r7, #8
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	20000c54 	.word	0x20000c54
 800b200:	20000ce0 	.word	0x20000ce0
 800b204:	20000cf4 	.word	0x20000cf4
 800b208:	20000d10 	.word	0x20000d10
 800b20c:	20000d24 	.word	0x20000d24
 800b210:	20000d3c 	.word	0x20000d3c
 800b214:	20000d08 	.word	0x20000d08
 800b218:	20000d0c 	.word	0x20000d0c

0800b21c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b222:	e019      	b.n	800b258 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b224:	f000 fdae 	bl	800bd84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b228:	4b10      	ldr	r3, [pc, #64]	; (800b26c <prvCheckTasksWaitingTermination+0x50>)
 800b22a:	68db      	ldr	r3, [r3, #12]
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	3304      	adds	r3, #4
 800b234:	4618      	mov	r0, r3
 800b236:	f7fe faf1 	bl	800981c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b23a:	4b0d      	ldr	r3, [pc, #52]	; (800b270 <prvCheckTasksWaitingTermination+0x54>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	3b01      	subs	r3, #1
 800b240:	4a0b      	ldr	r2, [pc, #44]	; (800b270 <prvCheckTasksWaitingTermination+0x54>)
 800b242:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b244:	4b0b      	ldr	r3, [pc, #44]	; (800b274 <prvCheckTasksWaitingTermination+0x58>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	3b01      	subs	r3, #1
 800b24a:	4a0a      	ldr	r2, [pc, #40]	; (800b274 <prvCheckTasksWaitingTermination+0x58>)
 800b24c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b24e:	f000 fdc9 	bl	800bde4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 f810 	bl	800b278 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b258:	4b06      	ldr	r3, [pc, #24]	; (800b274 <prvCheckTasksWaitingTermination+0x58>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d1e1      	bne.n	800b224 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b260:	bf00      	nop
 800b262:	bf00      	nop
 800b264:	3708      	adds	r7, #8
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	20000d24 	.word	0x20000d24
 800b270:	20000d50 	.word	0x20000d50
 800b274:	20000d38 	.word	0x20000d38

0800b278 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800b286:	2b00      	cmp	r3, #0
 800b288:	d108      	bne.n	800b29c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b28e:	4618      	mov	r0, r3
 800b290:	f000 ff6a 	bl	800c168 <vPortFree>
				vPortFree( pxTCB );
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 ff67 	bl	800c168 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b29a:	e018      	b.n	800b2ce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d103      	bne.n	800b2ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 ff5e 	bl	800c168 <vPortFree>
	}
 800b2ac:	e00f      	b.n	800b2ce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800b2b4:	2b02      	cmp	r3, #2
 800b2b6:	d00a      	beq.n	800b2ce <prvDeleteTCB+0x56>
	__asm volatile
 800b2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2bc:	f383 8811 	msr	BASEPRI, r3
 800b2c0:	f3bf 8f6f 	isb	sy
 800b2c4:	f3bf 8f4f 	dsb	sy
 800b2c8:	60fb      	str	r3, [r7, #12]
}
 800b2ca:	bf00      	nop
 800b2cc:	e7fe      	b.n	800b2cc <prvDeleteTCB+0x54>
	}
 800b2ce:	bf00      	nop
 800b2d0:	3710      	adds	r7, #16
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
	...

0800b2d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2de:	4b0c      	ldr	r3, [pc, #48]	; (800b310 <prvResetNextTaskUnblockTime+0x38>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d104      	bne.n	800b2f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b2e8:	4b0a      	ldr	r3, [pc, #40]	; (800b314 <prvResetNextTaskUnblockTime+0x3c>)
 800b2ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b2f0:	e008      	b.n	800b304 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2f2:	4b07      	ldr	r3, [pc, #28]	; (800b310 <prvResetNextTaskUnblockTime+0x38>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	68db      	ldr	r3, [r3, #12]
 800b2f8:	68db      	ldr	r3, [r3, #12]
 800b2fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	4a04      	ldr	r2, [pc, #16]	; (800b314 <prvResetNextTaskUnblockTime+0x3c>)
 800b302:	6013      	str	r3, [r2, #0]
}
 800b304:	bf00      	nop
 800b306:	370c      	adds	r7, #12
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr
 800b310:	20000d08 	.word	0x20000d08
 800b314:	20000d70 	.word	0x20000d70

0800b318 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b31e:	4b0b      	ldr	r3, [pc, #44]	; (800b34c <xTaskGetSchedulerState+0x34>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d102      	bne.n	800b32c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b326:	2301      	movs	r3, #1
 800b328:	607b      	str	r3, [r7, #4]
 800b32a:	e008      	b.n	800b33e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b32c:	4b08      	ldr	r3, [pc, #32]	; (800b350 <xTaskGetSchedulerState+0x38>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d102      	bne.n	800b33a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b334:	2302      	movs	r3, #2
 800b336:	607b      	str	r3, [r7, #4]
 800b338:	e001      	b.n	800b33e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b33a:	2300      	movs	r3, #0
 800b33c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b33e:	687b      	ldr	r3, [r7, #4]
	}
 800b340:	4618      	mov	r0, r3
 800b342:	370c      	adds	r7, #12
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr
 800b34c:	20000d5c 	.word	0x20000d5c
 800b350:	20000d78 	.word	0x20000d78

0800b354 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b360:	2300      	movs	r3, #0
 800b362:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d05e      	beq.n	800b428 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b36e:	4b31      	ldr	r3, [pc, #196]	; (800b434 <xTaskPriorityInherit+0xe0>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b374:	429a      	cmp	r2, r3
 800b376:	d24e      	bcs.n	800b416 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	699b      	ldr	r3, [r3, #24]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	db06      	blt.n	800b38e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b380:	4b2c      	ldr	r3, [pc, #176]	; (800b434 <xTaskPriorityInherit+0xe0>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b386:	f1c3 0207 	rsb	r2, r3, #7
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	6959      	ldr	r1, [r3, #20]
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b396:	4613      	mov	r3, r2
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	4413      	add	r3, r2
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	4a26      	ldr	r2, [pc, #152]	; (800b438 <xTaskPriorityInherit+0xe4>)
 800b3a0:	4413      	add	r3, r2
 800b3a2:	4299      	cmp	r1, r3
 800b3a4:	d12f      	bne.n	800b406 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	3304      	adds	r3, #4
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7fe fa36 	bl	800981c <uxListRemove>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d10a      	bne.n	800b3cc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b3c0:	43da      	mvns	r2, r3
 800b3c2:	4b1e      	ldr	r3, [pc, #120]	; (800b43c <xTaskPriorityInherit+0xe8>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4013      	ands	r3, r2
 800b3c8:	4a1c      	ldr	r2, [pc, #112]	; (800b43c <xTaskPriorityInherit+0xe8>)
 800b3ca:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b3cc:	4b19      	ldr	r3, [pc, #100]	; (800b434 <xTaskPriorityInherit+0xe0>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3da:	2201      	movs	r2, #1
 800b3dc:	409a      	lsls	r2, r3
 800b3de:	4b17      	ldr	r3, [pc, #92]	; (800b43c <xTaskPriorityInherit+0xe8>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	4a15      	ldr	r2, [pc, #84]	; (800b43c <xTaskPriorityInherit+0xe8>)
 800b3e6:	6013      	str	r3, [r2, #0]
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ec:	4613      	mov	r3, r2
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	4413      	add	r3, r2
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	4a10      	ldr	r2, [pc, #64]	; (800b438 <xTaskPriorityInherit+0xe4>)
 800b3f6:	441a      	add	r2, r3
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	3304      	adds	r3, #4
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	4610      	mov	r0, r2
 800b400:	f7fe f9af 	bl	8009762 <vListInsertEnd>
 800b404:	e004      	b.n	800b410 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b406:	4b0b      	ldr	r3, [pc, #44]	; (800b434 <xTaskPriorityInherit+0xe0>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b410:	2301      	movs	r3, #1
 800b412:	60fb      	str	r3, [r7, #12]
 800b414:	e008      	b.n	800b428 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b41a:	4b06      	ldr	r3, [pc, #24]	; (800b434 <xTaskPriorityInherit+0xe0>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b420:	429a      	cmp	r2, r3
 800b422:	d201      	bcs.n	800b428 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b424:	2301      	movs	r3, #1
 800b426:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b428:	68fb      	ldr	r3, [r7, #12]
	}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3710      	adds	r7, #16
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	20000c50 	.word	0x20000c50
 800b438:	20000c54 	.word	0x20000c54
 800b43c:	20000d58 	.word	0x20000d58

0800b440 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b440:	b580      	push	{r7, lr}
 800b442:	b086      	sub	sp, #24
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b44c:	2300      	movs	r3, #0
 800b44e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d06e      	beq.n	800b534 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b456:	4b3a      	ldr	r3, [pc, #232]	; (800b540 <xTaskPriorityDisinherit+0x100>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	693a      	ldr	r2, [r7, #16]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d00a      	beq.n	800b476 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b464:	f383 8811 	msr	BASEPRI, r3
 800b468:	f3bf 8f6f 	isb	sy
 800b46c:	f3bf 8f4f 	dsb	sy
 800b470:	60fb      	str	r3, [r7, #12]
}
 800b472:	bf00      	nop
 800b474:	e7fe      	b.n	800b474 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d10a      	bne.n	800b494 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b482:	f383 8811 	msr	BASEPRI, r3
 800b486:	f3bf 8f6f 	isb	sy
 800b48a:	f3bf 8f4f 	dsb	sy
 800b48e:	60bb      	str	r3, [r7, #8]
}
 800b490:	bf00      	nop
 800b492:	e7fe      	b.n	800b492 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b498:	1e5a      	subs	r2, r3, #1
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d044      	beq.n	800b534 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d140      	bne.n	800b534 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	3304      	adds	r3, #4
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7fe f9b0 	bl	800981c <uxListRemove>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d115      	bne.n	800b4ee <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4c6:	491f      	ldr	r1, [pc, #124]	; (800b544 <xTaskPriorityDisinherit+0x104>)
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	4413      	add	r3, r2
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	440b      	add	r3, r1
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10a      	bne.n	800b4ee <xTaskPriorityDisinherit+0xae>
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4dc:	2201      	movs	r2, #1
 800b4de:	fa02 f303 	lsl.w	r3, r2, r3
 800b4e2:	43da      	mvns	r2, r3
 800b4e4:	4b18      	ldr	r3, [pc, #96]	; (800b548 <xTaskPriorityDisinherit+0x108>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4013      	ands	r3, r2
 800b4ea:	4a17      	ldr	r2, [pc, #92]	; (800b548 <xTaskPriorityDisinherit+0x108>)
 800b4ec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4fa:	f1c3 0207 	rsb	r2, r3, #7
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b506:	2201      	movs	r2, #1
 800b508:	409a      	lsls	r2, r3
 800b50a:	4b0f      	ldr	r3, [pc, #60]	; (800b548 <xTaskPriorityDisinherit+0x108>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	4313      	orrs	r3, r2
 800b510:	4a0d      	ldr	r2, [pc, #52]	; (800b548 <xTaskPriorityDisinherit+0x108>)
 800b512:	6013      	str	r3, [r2, #0]
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b518:	4613      	mov	r3, r2
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	4413      	add	r3, r2
 800b51e:	009b      	lsls	r3, r3, #2
 800b520:	4a08      	ldr	r2, [pc, #32]	; (800b544 <xTaskPriorityDisinherit+0x104>)
 800b522:	441a      	add	r2, r3
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	3304      	adds	r3, #4
 800b528:	4619      	mov	r1, r3
 800b52a:	4610      	mov	r0, r2
 800b52c:	f7fe f919 	bl	8009762 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b530:	2301      	movs	r3, #1
 800b532:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b534:	697b      	ldr	r3, [r7, #20]
	}
 800b536:	4618      	mov	r0, r3
 800b538:	3718      	adds	r7, #24
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	20000c50 	.word	0x20000c50
 800b544:	20000c54 	.word	0x20000c54
 800b548:	20000d58 	.word	0x20000d58

0800b54c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b088      	sub	sp, #32
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b55a:	2301      	movs	r3, #1
 800b55c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d077      	beq.n	800b654 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b564:	69bb      	ldr	r3, [r7, #24]
 800b566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d10a      	bne.n	800b582 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b570:	f383 8811 	msr	BASEPRI, r3
 800b574:	f3bf 8f6f 	isb	sy
 800b578:	f3bf 8f4f 	dsb	sy
 800b57c:	60fb      	str	r3, [r7, #12]
}
 800b57e:	bf00      	nop
 800b580:	e7fe      	b.n	800b580 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b582:	69bb      	ldr	r3, [r7, #24]
 800b584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b586:	683a      	ldr	r2, [r7, #0]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d902      	bls.n	800b592 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	61fb      	str	r3, [r7, #28]
 800b590:	e002      	b.n	800b598 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b592:	69bb      	ldr	r3, [r7, #24]
 800b594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b596:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b598:	69bb      	ldr	r3, [r7, #24]
 800b59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b59c:	69fa      	ldr	r2, [r7, #28]
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d058      	beq.n	800b654 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b5a2:	69bb      	ldr	r3, [r7, #24]
 800b5a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5a6:	697a      	ldr	r2, [r7, #20]
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d153      	bne.n	800b654 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b5ac:	4b2b      	ldr	r3, [pc, #172]	; (800b65c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	69ba      	ldr	r2, [r7, #24]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d10a      	bne.n	800b5cc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ba:	f383 8811 	msr	BASEPRI, r3
 800b5be:	f3bf 8f6f 	isb	sy
 800b5c2:	f3bf 8f4f 	dsb	sy
 800b5c6:	60bb      	str	r3, [r7, #8]
}
 800b5c8:	bf00      	nop
 800b5ca:	e7fe      	b.n	800b5ca <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b5cc:	69bb      	ldr	r3, [r7, #24]
 800b5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b5d2:	69bb      	ldr	r3, [r7, #24]
 800b5d4:	69fa      	ldr	r2, [r7, #28]
 800b5d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b5d8:	69bb      	ldr	r3, [r7, #24]
 800b5da:	699b      	ldr	r3, [r3, #24]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	db04      	blt.n	800b5ea <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5e0:	69fb      	ldr	r3, [r7, #28]
 800b5e2:	f1c3 0207 	rsb	r2, r3, #7
 800b5e6:	69bb      	ldr	r3, [r7, #24]
 800b5e8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b5ea:	69bb      	ldr	r3, [r7, #24]
 800b5ec:	6959      	ldr	r1, [r3, #20]
 800b5ee:	693a      	ldr	r2, [r7, #16]
 800b5f0:	4613      	mov	r3, r2
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	4413      	add	r3, r2
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	4a19      	ldr	r2, [pc, #100]	; (800b660 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b5fa:	4413      	add	r3, r2
 800b5fc:	4299      	cmp	r1, r3
 800b5fe:	d129      	bne.n	800b654 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b600:	69bb      	ldr	r3, [r7, #24]
 800b602:	3304      	adds	r3, #4
 800b604:	4618      	mov	r0, r3
 800b606:	f7fe f909 	bl	800981c <uxListRemove>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d10a      	bne.n	800b626 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b610:	69bb      	ldr	r3, [r7, #24]
 800b612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b614:	2201      	movs	r2, #1
 800b616:	fa02 f303 	lsl.w	r3, r2, r3
 800b61a:	43da      	mvns	r2, r3
 800b61c:	4b11      	ldr	r3, [pc, #68]	; (800b664 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4013      	ands	r3, r2
 800b622:	4a10      	ldr	r2, [pc, #64]	; (800b664 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b624:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b626:	69bb      	ldr	r3, [r7, #24]
 800b628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b62a:	2201      	movs	r2, #1
 800b62c:	409a      	lsls	r2, r3
 800b62e:	4b0d      	ldr	r3, [pc, #52]	; (800b664 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4313      	orrs	r3, r2
 800b634:	4a0b      	ldr	r2, [pc, #44]	; (800b664 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b636:	6013      	str	r3, [r2, #0]
 800b638:	69bb      	ldr	r3, [r7, #24]
 800b63a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b63c:	4613      	mov	r3, r2
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	4413      	add	r3, r2
 800b642:	009b      	lsls	r3, r3, #2
 800b644:	4a06      	ldr	r2, [pc, #24]	; (800b660 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b646:	441a      	add	r2, r3
 800b648:	69bb      	ldr	r3, [r7, #24]
 800b64a:	3304      	adds	r3, #4
 800b64c:	4619      	mov	r1, r3
 800b64e:	4610      	mov	r0, r2
 800b650:	f7fe f887 	bl	8009762 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b654:	bf00      	nop
 800b656:	3720      	adds	r7, #32
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	20000c50 	.word	0x20000c50
 800b660:	20000c54 	.word	0x20000c54
 800b664:	20000d58 	.word	0x20000d58

0800b668 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b668:	b480      	push	{r7}
 800b66a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b66c:	4b07      	ldr	r3, [pc, #28]	; (800b68c <pvTaskIncrementMutexHeldCount+0x24>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d004      	beq.n	800b67e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b674:	4b05      	ldr	r3, [pc, #20]	; (800b68c <pvTaskIncrementMutexHeldCount+0x24>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b67a:	3201      	adds	r2, #1
 800b67c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800b67e:	4b03      	ldr	r3, [pc, #12]	; (800b68c <pvTaskIncrementMutexHeldCount+0x24>)
 800b680:	681b      	ldr	r3, [r3, #0]
	}
 800b682:	4618      	mov	r0, r3
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr
 800b68c:	20000c50 	.word	0x20000c50

0800b690 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b690:	b580      	push	{r7, lr}
 800b692:	b086      	sub	sp, #24
 800b694:	af00      	add	r7, sp, #0
 800b696:	60f8      	str	r0, [r7, #12]
 800b698:	60b9      	str	r1, [r7, #8]
 800b69a:	607a      	str	r2, [r7, #4]
 800b69c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b69e:	f000 fb71 	bl	800bd84 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b6a2:	4b26      	ldr	r3, [pc, #152]	; (800b73c <xTaskNotifyWait+0xac>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800b6aa:	b2db      	uxtb	r3, r3
 800b6ac:	2b02      	cmp	r3, #2
 800b6ae:	d01a      	beq.n	800b6e6 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b6b0:	4b22      	ldr	r3, [pc, #136]	; (800b73c <xTaskNotifyWait+0xac>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b6b6:	68fa      	ldr	r2, [r7, #12]
 800b6b8:	43d2      	mvns	r2, r2
 800b6ba:	400a      	ands	r2, r1
 800b6bc:	651a      	str	r2, [r3, #80]	; 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b6be:	4b1f      	ldr	r3, [pc, #124]	; (800b73c <xTaskNotifyWait+0xac>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d00b      	beq.n	800b6e6 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b6ce:	2101      	movs	r1, #1
 800b6d0:	6838      	ldr	r0, [r7, #0]
 800b6d2:	f000 f9c7 	bl	800ba64 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b6d6:	4b1a      	ldr	r3, [pc, #104]	; (800b740 <xTaskNotifyWait+0xb0>)
 800b6d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6dc:	601a      	str	r2, [r3, #0]
 800b6de:	f3bf 8f4f 	dsb	sy
 800b6e2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b6e6:	f000 fb7d 	bl	800bde4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800b6ea:	f000 fb4b 	bl	800bd84 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d004      	beq.n	800b6fe <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b6f4:	4b11      	ldr	r3, [pc, #68]	; (800b73c <xTaskNotifyWait+0xac>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b6fe:	4b0f      	ldr	r3, [pc, #60]	; (800b73c <xTaskNotifyWait+0xac>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800b706:	b2db      	uxtb	r3, r3
 800b708:	2b02      	cmp	r3, #2
 800b70a:	d002      	beq.n	800b712 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b70c:	2300      	movs	r3, #0
 800b70e:	617b      	str	r3, [r7, #20]
 800b710:	e008      	b.n	800b724 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b712:	4b0a      	ldr	r3, [pc, #40]	; (800b73c <xTaskNotifyWait+0xac>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b718:	68ba      	ldr	r2, [r7, #8]
 800b71a:	43d2      	mvns	r2, r2
 800b71c:	400a      	ands	r2, r1
 800b71e:	651a      	str	r2, [r3, #80]	; 0x50
				xReturn = pdTRUE;
 800b720:	2301      	movs	r3, #1
 800b722:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b724:	4b05      	ldr	r3, [pc, #20]	; (800b73c <xTaskNotifyWait+0xac>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2200      	movs	r2, #0
 800b72a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 800b72e:	f000 fb59 	bl	800bde4 <vPortExitCritical>

		return xReturn;
 800b732:	697b      	ldr	r3, [r7, #20]
	}
 800b734:	4618      	mov	r0, r3
 800b736:	3718      	adds	r7, #24
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}
 800b73c:	20000c50 	.word	0x20000c50
 800b740:	e000ed04 	.word	0xe000ed04

0800b744 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b744:	b580      	push	{r7, lr}
 800b746:	b08a      	sub	sp, #40	; 0x28
 800b748:	af00      	add	r7, sp, #0
 800b74a:	60f8      	str	r0, [r7, #12]
 800b74c:	60b9      	str	r1, [r7, #8]
 800b74e:	603b      	str	r3, [r7, #0]
 800b750:	4613      	mov	r3, r2
 800b752:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b754:	2301      	movs	r3, #1
 800b756:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d10a      	bne.n	800b774 <xTaskGenericNotify+0x30>
	__asm volatile
 800b75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b762:	f383 8811 	msr	BASEPRI, r3
 800b766:	f3bf 8f6f 	isb	sy
 800b76a:	f3bf 8f4f 	dsb	sy
 800b76e:	61bb      	str	r3, [r7, #24]
}
 800b770:	bf00      	nop
 800b772:	e7fe      	b.n	800b772 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b778:	f000 fb04 	bl	800bd84 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d003      	beq.n	800b78a <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b782:	6a3b      	ldr	r3, [r7, #32]
 800b784:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b78a:	6a3b      	ldr	r3, [r7, #32]
 800b78c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800b790:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b792:	6a3b      	ldr	r3, [r7, #32]
 800b794:	2202      	movs	r2, #2
 800b796:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 800b79a:	79fb      	ldrb	r3, [r7, #7]
 800b79c:	2b04      	cmp	r3, #4
 800b79e:	d828      	bhi.n	800b7f2 <xTaskGenericNotify+0xae>
 800b7a0:	a201      	add	r2, pc, #4	; (adr r2, 800b7a8 <xTaskGenericNotify+0x64>)
 800b7a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7a6:	bf00      	nop
 800b7a8:	0800b813 	.word	0x0800b813
 800b7ac:	0800b7bd 	.word	0x0800b7bd
 800b7b0:	0800b7cb 	.word	0x0800b7cb
 800b7b4:	0800b7d7 	.word	0x0800b7d7
 800b7b8:	0800b7df 	.word	0x0800b7df
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b7bc:	6a3b      	ldr	r3, [r7, #32]
 800b7be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	431a      	orrs	r2, r3
 800b7c4:	6a3b      	ldr	r3, [r7, #32]
 800b7c6:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800b7c8:	e026      	b.n	800b818 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b7ca:	6a3b      	ldr	r3, [r7, #32]
 800b7cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7ce:	1c5a      	adds	r2, r3, #1
 800b7d0:	6a3b      	ldr	r3, [r7, #32]
 800b7d2:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800b7d4:	e020      	b.n	800b818 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b7d6:	6a3b      	ldr	r3, [r7, #32]
 800b7d8:	68ba      	ldr	r2, [r7, #8]
 800b7da:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800b7dc:	e01c      	b.n	800b818 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b7de:	7ffb      	ldrb	r3, [r7, #31]
 800b7e0:	2b02      	cmp	r3, #2
 800b7e2:	d003      	beq.n	800b7ec <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b7e4:	6a3b      	ldr	r3, [r7, #32]
 800b7e6:	68ba      	ldr	r2, [r7, #8]
 800b7e8:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b7ea:	e015      	b.n	800b818 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800b7f0:	e012      	b.n	800b818 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b7f2:	6a3b      	ldr	r3, [r7, #32]
 800b7f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7fa:	d00c      	beq.n	800b816 <xTaskGenericNotify+0xd2>
	__asm volatile
 800b7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b800:	f383 8811 	msr	BASEPRI, r3
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	f3bf 8f4f 	dsb	sy
 800b80c:	617b      	str	r3, [r7, #20]
}
 800b80e:	bf00      	nop
 800b810:	e7fe      	b.n	800b810 <xTaskGenericNotify+0xcc>
					break;
 800b812:	bf00      	nop
 800b814:	e000      	b.n	800b818 <xTaskGenericNotify+0xd4>

					break;
 800b816:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b818:	7ffb      	ldrb	r3, [r7, #31]
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d139      	bne.n	800b892 <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b81e:	6a3b      	ldr	r3, [r7, #32]
 800b820:	3304      	adds	r3, #4
 800b822:	4618      	mov	r0, r3
 800b824:	f7fd fffa 	bl	800981c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b828:	6a3b      	ldr	r3, [r7, #32]
 800b82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b82c:	2201      	movs	r2, #1
 800b82e:	409a      	lsls	r2, r3
 800b830:	4b1b      	ldr	r3, [pc, #108]	; (800b8a0 <xTaskGenericNotify+0x15c>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4313      	orrs	r3, r2
 800b836:	4a1a      	ldr	r2, [pc, #104]	; (800b8a0 <xTaskGenericNotify+0x15c>)
 800b838:	6013      	str	r3, [r2, #0]
 800b83a:	6a3b      	ldr	r3, [r7, #32]
 800b83c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b83e:	4613      	mov	r3, r2
 800b840:	009b      	lsls	r3, r3, #2
 800b842:	4413      	add	r3, r2
 800b844:	009b      	lsls	r3, r3, #2
 800b846:	4a17      	ldr	r2, [pc, #92]	; (800b8a4 <xTaskGenericNotify+0x160>)
 800b848:	441a      	add	r2, r3
 800b84a:	6a3b      	ldr	r3, [r7, #32]
 800b84c:	3304      	adds	r3, #4
 800b84e:	4619      	mov	r1, r3
 800b850:	4610      	mov	r0, r2
 800b852:	f7fd ff86 	bl	8009762 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b856:	6a3b      	ldr	r3, [r7, #32]
 800b858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d00a      	beq.n	800b874 <xTaskGenericNotify+0x130>
	__asm volatile
 800b85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b862:	f383 8811 	msr	BASEPRI, r3
 800b866:	f3bf 8f6f 	isb	sy
 800b86a:	f3bf 8f4f 	dsb	sy
 800b86e:	613b      	str	r3, [r7, #16]
}
 800b870:	bf00      	nop
 800b872:	e7fe      	b.n	800b872 <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b874:	6a3b      	ldr	r3, [r7, #32]
 800b876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b878:	4b0b      	ldr	r3, [pc, #44]	; (800b8a8 <xTaskGenericNotify+0x164>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b87e:	429a      	cmp	r2, r3
 800b880:	d907      	bls.n	800b892 <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b882:	4b0a      	ldr	r3, [pc, #40]	; (800b8ac <xTaskGenericNotify+0x168>)
 800b884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b888:	601a      	str	r2, [r3, #0]
 800b88a:	f3bf 8f4f 	dsb	sy
 800b88e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b892:	f000 faa7 	bl	800bde4 <vPortExitCritical>

		return xReturn;
 800b896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b898:	4618      	mov	r0, r3
 800b89a:	3728      	adds	r7, #40	; 0x28
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	20000d58 	.word	0x20000d58
 800b8a4:	20000c54 	.word	0x20000c54
 800b8a8:	20000c50 	.word	0x20000c50
 800b8ac:	e000ed04 	.word	0xe000ed04

0800b8b0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b08e      	sub	sp, #56	; 0x38
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	60b9      	str	r1, [r7, #8]
 800b8ba:	603b      	str	r3, [r7, #0]
 800b8bc:	4613      	mov	r3, r2
 800b8be:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d10a      	bne.n	800b8e0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800b8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ce:	f383 8811 	msr	BASEPRI, r3
 800b8d2:	f3bf 8f6f 	isb	sy
 800b8d6:	f3bf 8f4f 	dsb	sy
 800b8da:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b8dc:	bf00      	nop
 800b8de:	e7fe      	b.n	800b8de <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b8e0:	f000 fb32 	bl	800bf48 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800b8e8:	f3ef 8211 	mrs	r2, BASEPRI
 800b8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f0:	f383 8811 	msr	BASEPRI, r3
 800b8f4:	f3bf 8f6f 	isb	sy
 800b8f8:	f3bf 8f4f 	dsb	sy
 800b8fc:	623a      	str	r2, [r7, #32]
 800b8fe:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800b900:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b902:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d003      	beq.n	800b912 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b90c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b914:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800b918:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91e:	2202      	movs	r2, #2
 800b920:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 800b924:	79fb      	ldrb	r3, [r7, #7]
 800b926:	2b04      	cmp	r3, #4
 800b928:	d828      	bhi.n	800b97c <xTaskGenericNotifyFromISR+0xcc>
 800b92a:	a201      	add	r2, pc, #4	; (adr r2, 800b930 <xTaskGenericNotifyFromISR+0x80>)
 800b92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b930:	0800b99d 	.word	0x0800b99d
 800b934:	0800b945 	.word	0x0800b945
 800b938:	0800b953 	.word	0x0800b953
 800b93c:	0800b95f 	.word	0x0800b95f
 800b940:	0800b967 	.word	0x0800b967
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b946:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	431a      	orrs	r2, r3
 800b94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94e:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800b950:	e027      	b.n	800b9a2 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b956:	1c5a      	adds	r2, r3, #1
 800b958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95a:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800b95c:	e021      	b.n	800b9a2 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b960:	68ba      	ldr	r2, [r7, #8]
 800b962:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800b964:	e01d      	b.n	800b9a2 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b966:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b96a:	2b02      	cmp	r3, #2
 800b96c:	d003      	beq.n	800b976 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b970:	68ba      	ldr	r2, [r7, #8]
 800b972:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b974:	e015      	b.n	800b9a2 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800b976:	2300      	movs	r3, #0
 800b978:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800b97a:	e012      	b.n	800b9a2 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b980:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b984:	d00c      	beq.n	800b9a0 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800b986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98a:	f383 8811 	msr	BASEPRI, r3
 800b98e:	f3bf 8f6f 	isb	sy
 800b992:	f3bf 8f4f 	dsb	sy
 800b996:	61bb      	str	r3, [r7, #24]
}
 800b998:	bf00      	nop
 800b99a:	e7fe      	b.n	800b99a <xTaskGenericNotifyFromISR+0xea>
					break;
 800b99c:	bf00      	nop
 800b99e:	e000      	b.n	800b9a2 <xTaskGenericNotifyFromISR+0xf2>
					break;
 800b9a0:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b9a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b9a6:	2b01      	cmp	r3, #1
 800b9a8:	d145      	bne.n	800ba36 <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d00a      	beq.n	800b9c8 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800b9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b6:	f383 8811 	msr	BASEPRI, r3
 800b9ba:	f3bf 8f6f 	isb	sy
 800b9be:	f3bf 8f4f 	dsb	sy
 800b9c2:	617b      	str	r3, [r7, #20]
}
 800b9c4:	bf00      	nop
 800b9c6:	e7fe      	b.n	800b9c6 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9c8:	4b20      	ldr	r3, [pc, #128]	; (800ba4c <xTaskGenericNotifyFromISR+0x19c>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d11c      	bne.n	800ba0a <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d2:	3304      	adds	r3, #4
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7fd ff21 	bl	800981c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9de:	2201      	movs	r2, #1
 800b9e0:	409a      	lsls	r2, r3
 800b9e2:	4b1b      	ldr	r3, [pc, #108]	; (800ba50 <xTaskGenericNotifyFromISR+0x1a0>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	4a19      	ldr	r2, [pc, #100]	; (800ba50 <xTaskGenericNotifyFromISR+0x1a0>)
 800b9ea:	6013      	str	r3, [r2, #0]
 800b9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9f0:	4613      	mov	r3, r2
 800b9f2:	009b      	lsls	r3, r3, #2
 800b9f4:	4413      	add	r3, r2
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	4a16      	ldr	r2, [pc, #88]	; (800ba54 <xTaskGenericNotifyFromISR+0x1a4>)
 800b9fa:	441a      	add	r2, r3
 800b9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fe:	3304      	adds	r3, #4
 800ba00:	4619      	mov	r1, r3
 800ba02:	4610      	mov	r0, r2
 800ba04:	f7fd fead 	bl	8009762 <vListInsertEnd>
 800ba08:	e005      	b.n	800ba16 <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800ba0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0c:	3318      	adds	r3, #24
 800ba0e:	4619      	mov	r1, r3
 800ba10:	4811      	ldr	r0, [pc, #68]	; (800ba58 <xTaskGenericNotifyFromISR+0x1a8>)
 800ba12:	f7fd fea6 	bl	8009762 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba1a:	4b10      	ldr	r3, [pc, #64]	; (800ba5c <xTaskGenericNotifyFromISR+0x1ac>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d908      	bls.n	800ba36 <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800ba24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d002      	beq.n	800ba30 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800ba2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800ba30:	4b0b      	ldr	r3, [pc, #44]	; (800ba60 <xTaskGenericNotifyFromISR+0x1b0>)
 800ba32:	2201      	movs	r2, #1
 800ba34:	601a      	str	r2, [r3, #0]
 800ba36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba38:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	f383 8811 	msr	BASEPRI, r3
}
 800ba40:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800ba42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3738      	adds	r7, #56	; 0x38
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}
 800ba4c:	20000d78 	.word	0x20000d78
 800ba50:	20000d58 	.word	0x20000d58
 800ba54:	20000c54 	.word	0x20000c54
 800ba58:	20000d10 	.word	0x20000d10
 800ba5c:	20000c50 	.word	0x20000c50
 800ba60:	20000d64 	.word	0x20000d64

0800ba64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ba6e:	4b29      	ldr	r3, [pc, #164]	; (800bb14 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba74:	4b28      	ldr	r3, [pc, #160]	; (800bb18 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	3304      	adds	r3, #4
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7fd fece 	bl	800981c <uxListRemove>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d10b      	bne.n	800ba9e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ba86:	4b24      	ldr	r3, [pc, #144]	; (800bb18 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	fa02 f303 	lsl.w	r3, r2, r3
 800ba92:	43da      	mvns	r2, r3
 800ba94:	4b21      	ldr	r3, [pc, #132]	; (800bb1c <prvAddCurrentTaskToDelayedList+0xb8>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4013      	ands	r3, r2
 800ba9a:	4a20      	ldr	r2, [pc, #128]	; (800bb1c <prvAddCurrentTaskToDelayedList+0xb8>)
 800ba9c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baa4:	d10a      	bne.n	800babc <prvAddCurrentTaskToDelayedList+0x58>
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d007      	beq.n	800babc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800baac:	4b1a      	ldr	r3, [pc, #104]	; (800bb18 <prvAddCurrentTaskToDelayedList+0xb4>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	3304      	adds	r3, #4
 800bab2:	4619      	mov	r1, r3
 800bab4:	481a      	ldr	r0, [pc, #104]	; (800bb20 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bab6:	f7fd fe54 	bl	8009762 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800baba:	e026      	b.n	800bb0a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800babc:	68fa      	ldr	r2, [r7, #12]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	4413      	add	r3, r2
 800bac2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bac4:	4b14      	ldr	r3, [pc, #80]	; (800bb18 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	68ba      	ldr	r2, [r7, #8]
 800baca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bacc:	68ba      	ldr	r2, [r7, #8]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d209      	bcs.n	800bae8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bad4:	4b13      	ldr	r3, [pc, #76]	; (800bb24 <prvAddCurrentTaskToDelayedList+0xc0>)
 800bad6:	681a      	ldr	r2, [r3, #0]
 800bad8:	4b0f      	ldr	r3, [pc, #60]	; (800bb18 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	3304      	adds	r3, #4
 800bade:	4619      	mov	r1, r3
 800bae0:	4610      	mov	r0, r2
 800bae2:	f7fd fe62 	bl	80097aa <vListInsert>
}
 800bae6:	e010      	b.n	800bb0a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bae8:	4b0f      	ldr	r3, [pc, #60]	; (800bb28 <prvAddCurrentTaskToDelayedList+0xc4>)
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	4b0a      	ldr	r3, [pc, #40]	; (800bb18 <prvAddCurrentTaskToDelayedList+0xb4>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	3304      	adds	r3, #4
 800baf2:	4619      	mov	r1, r3
 800baf4:	4610      	mov	r0, r2
 800baf6:	f7fd fe58 	bl	80097aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bafa:	4b0c      	ldr	r3, [pc, #48]	; (800bb2c <prvAddCurrentTaskToDelayedList+0xc8>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	68ba      	ldr	r2, [r7, #8]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d202      	bcs.n	800bb0a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bb04:	4a09      	ldr	r2, [pc, #36]	; (800bb2c <prvAddCurrentTaskToDelayedList+0xc8>)
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	6013      	str	r3, [r2, #0]
}
 800bb0a:	bf00      	nop
 800bb0c:	3710      	adds	r7, #16
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	bf00      	nop
 800bb14:	20000d54 	.word	0x20000d54
 800bb18:	20000c50 	.word	0x20000c50
 800bb1c:	20000d58 	.word	0x20000d58
 800bb20:	20000d3c 	.word	0x20000d3c
 800bb24:	20000d0c 	.word	0x20000d0c
 800bb28:	20000d08 	.word	0x20000d08
 800bb2c:	20000d70 	.word	0x20000d70

0800bb30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bb30:	b480      	push	{r7}
 800bb32:	b085      	sub	sp, #20
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	60b9      	str	r1, [r7, #8]
 800bb3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	3b04      	subs	r3, #4
 800bb40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bb48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	3b04      	subs	r3, #4
 800bb4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	f023 0201 	bic.w	r2, r3, #1
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	3b04      	subs	r3, #4
 800bb5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bb60:	4a0c      	ldr	r2, [pc, #48]	; (800bb94 <pxPortInitialiseStack+0x64>)
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	3b14      	subs	r3, #20
 800bb6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	3b04      	subs	r3, #4
 800bb76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f06f 0202 	mvn.w	r2, #2
 800bb7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	3b20      	subs	r3, #32
 800bb84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bb86:	68fb      	ldr	r3, [r7, #12]
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3714      	adds	r7, #20
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr
 800bb94:	0800bb99 	.word	0x0800bb99

0800bb98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b085      	sub	sp, #20
 800bb9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bba2:	4b12      	ldr	r3, [pc, #72]	; (800bbec <prvTaskExitError+0x54>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbaa:	d00a      	beq.n	800bbc2 <prvTaskExitError+0x2a>
	__asm volatile
 800bbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb0:	f383 8811 	msr	BASEPRI, r3
 800bbb4:	f3bf 8f6f 	isb	sy
 800bbb8:	f3bf 8f4f 	dsb	sy
 800bbbc:	60fb      	str	r3, [r7, #12]
}
 800bbbe:	bf00      	nop
 800bbc0:	e7fe      	b.n	800bbc0 <prvTaskExitError+0x28>
	__asm volatile
 800bbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc6:	f383 8811 	msr	BASEPRI, r3
 800bbca:	f3bf 8f6f 	isb	sy
 800bbce:	f3bf 8f4f 	dsb	sy
 800bbd2:	60bb      	str	r3, [r7, #8]
}
 800bbd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bbd6:	bf00      	nop
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d0fc      	beq.n	800bbd8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bbde:	bf00      	nop
 800bbe0:	bf00      	nop
 800bbe2:	3714      	adds	r7, #20
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr
 800bbec:	20000078 	.word	0x20000078

0800bbf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bbf0:	4b07      	ldr	r3, [pc, #28]	; (800bc10 <pxCurrentTCBConst2>)
 800bbf2:	6819      	ldr	r1, [r3, #0]
 800bbf4:	6808      	ldr	r0, [r1, #0]
 800bbf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbfa:	f380 8809 	msr	PSP, r0
 800bbfe:	f3bf 8f6f 	isb	sy
 800bc02:	f04f 0000 	mov.w	r0, #0
 800bc06:	f380 8811 	msr	BASEPRI, r0
 800bc0a:	4770      	bx	lr
 800bc0c:	f3af 8000 	nop.w

0800bc10 <pxCurrentTCBConst2>:
 800bc10:	20000c50 	.word	0x20000c50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bc14:	bf00      	nop
 800bc16:	bf00      	nop

0800bc18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bc18:	4808      	ldr	r0, [pc, #32]	; (800bc3c <prvPortStartFirstTask+0x24>)
 800bc1a:	6800      	ldr	r0, [r0, #0]
 800bc1c:	6800      	ldr	r0, [r0, #0]
 800bc1e:	f380 8808 	msr	MSP, r0
 800bc22:	f04f 0000 	mov.w	r0, #0
 800bc26:	f380 8814 	msr	CONTROL, r0
 800bc2a:	b662      	cpsie	i
 800bc2c:	b661      	cpsie	f
 800bc2e:	f3bf 8f4f 	dsb	sy
 800bc32:	f3bf 8f6f 	isb	sy
 800bc36:	df00      	svc	0
 800bc38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bc3a:	bf00      	nop
 800bc3c:	e000ed08 	.word	0xe000ed08

0800bc40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b086      	sub	sp, #24
 800bc44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bc46:	4b46      	ldr	r3, [pc, #280]	; (800bd60 <xPortStartScheduler+0x120>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	4a46      	ldr	r2, [pc, #280]	; (800bd64 <xPortStartScheduler+0x124>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d10a      	bne.n	800bc66 <xPortStartScheduler+0x26>
	__asm volatile
 800bc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc54:	f383 8811 	msr	BASEPRI, r3
 800bc58:	f3bf 8f6f 	isb	sy
 800bc5c:	f3bf 8f4f 	dsb	sy
 800bc60:	613b      	str	r3, [r7, #16]
}
 800bc62:	bf00      	nop
 800bc64:	e7fe      	b.n	800bc64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bc66:	4b3e      	ldr	r3, [pc, #248]	; (800bd60 <xPortStartScheduler+0x120>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4a3f      	ldr	r2, [pc, #252]	; (800bd68 <xPortStartScheduler+0x128>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d10a      	bne.n	800bc86 <xPortStartScheduler+0x46>
	__asm volatile
 800bc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc74:	f383 8811 	msr	BASEPRI, r3
 800bc78:	f3bf 8f6f 	isb	sy
 800bc7c:	f3bf 8f4f 	dsb	sy
 800bc80:	60fb      	str	r3, [r7, #12]
}
 800bc82:	bf00      	nop
 800bc84:	e7fe      	b.n	800bc84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bc86:	4b39      	ldr	r3, [pc, #228]	; (800bd6c <xPortStartScheduler+0x12c>)
 800bc88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	b2db      	uxtb	r3, r3
 800bc90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	22ff      	movs	r2, #255	; 0xff
 800bc96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	b2db      	uxtb	r3, r3
 800bc9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bca0:	78fb      	ldrb	r3, [r7, #3]
 800bca2:	b2db      	uxtb	r3, r3
 800bca4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bca8:	b2da      	uxtb	r2, r3
 800bcaa:	4b31      	ldr	r3, [pc, #196]	; (800bd70 <xPortStartScheduler+0x130>)
 800bcac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bcae:	4b31      	ldr	r3, [pc, #196]	; (800bd74 <xPortStartScheduler+0x134>)
 800bcb0:	2207      	movs	r2, #7
 800bcb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bcb4:	e009      	b.n	800bcca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bcb6:	4b2f      	ldr	r3, [pc, #188]	; (800bd74 <xPortStartScheduler+0x134>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	3b01      	subs	r3, #1
 800bcbc:	4a2d      	ldr	r2, [pc, #180]	; (800bd74 <xPortStartScheduler+0x134>)
 800bcbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bcc0:	78fb      	ldrb	r3, [r7, #3]
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	005b      	lsls	r3, r3, #1
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bcca:	78fb      	ldrb	r3, [r7, #3]
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcd2:	2b80      	cmp	r3, #128	; 0x80
 800bcd4:	d0ef      	beq.n	800bcb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bcd6:	4b27      	ldr	r3, [pc, #156]	; (800bd74 <xPortStartScheduler+0x134>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f1c3 0307 	rsb	r3, r3, #7
 800bcde:	2b04      	cmp	r3, #4
 800bce0:	d00a      	beq.n	800bcf8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce6:	f383 8811 	msr	BASEPRI, r3
 800bcea:	f3bf 8f6f 	isb	sy
 800bcee:	f3bf 8f4f 	dsb	sy
 800bcf2:	60bb      	str	r3, [r7, #8]
}
 800bcf4:	bf00      	nop
 800bcf6:	e7fe      	b.n	800bcf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bcf8:	4b1e      	ldr	r3, [pc, #120]	; (800bd74 <xPortStartScheduler+0x134>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	021b      	lsls	r3, r3, #8
 800bcfe:	4a1d      	ldr	r2, [pc, #116]	; (800bd74 <xPortStartScheduler+0x134>)
 800bd00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bd02:	4b1c      	ldr	r3, [pc, #112]	; (800bd74 <xPortStartScheduler+0x134>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bd0a:	4a1a      	ldr	r2, [pc, #104]	; (800bd74 <xPortStartScheduler+0x134>)
 800bd0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	b2da      	uxtb	r2, r3
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bd16:	4b18      	ldr	r3, [pc, #96]	; (800bd78 <xPortStartScheduler+0x138>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4a17      	ldr	r2, [pc, #92]	; (800bd78 <xPortStartScheduler+0x138>)
 800bd1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bd20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bd22:	4b15      	ldr	r3, [pc, #84]	; (800bd78 <xPortStartScheduler+0x138>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	4a14      	ldr	r2, [pc, #80]	; (800bd78 <xPortStartScheduler+0x138>)
 800bd28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bd2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bd2e:	f000 f8dd 	bl	800beec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bd32:	4b12      	ldr	r3, [pc, #72]	; (800bd7c <xPortStartScheduler+0x13c>)
 800bd34:	2200      	movs	r2, #0
 800bd36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bd38:	f000 f8fc 	bl	800bf34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bd3c:	4b10      	ldr	r3, [pc, #64]	; (800bd80 <xPortStartScheduler+0x140>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4a0f      	ldr	r2, [pc, #60]	; (800bd80 <xPortStartScheduler+0x140>)
 800bd42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bd46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bd48:	f7ff ff66 	bl	800bc18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bd4c:	f7ff f882 	bl	800ae54 <vTaskSwitchContext>
	prvTaskExitError();
 800bd50:	f7ff ff22 	bl	800bb98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bd54:	2300      	movs	r3, #0
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3718      	adds	r7, #24
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	e000ed00 	.word	0xe000ed00
 800bd64:	410fc271 	.word	0x410fc271
 800bd68:	410fc270 	.word	0x410fc270
 800bd6c:	e000e400 	.word	0xe000e400
 800bd70:	20000d7c 	.word	0x20000d7c
 800bd74:	20000d80 	.word	0x20000d80
 800bd78:	e000ed20 	.word	0xe000ed20
 800bd7c:	20000078 	.word	0x20000078
 800bd80:	e000ef34 	.word	0xe000ef34

0800bd84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
	__asm volatile
 800bd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd8e:	f383 8811 	msr	BASEPRI, r3
 800bd92:	f3bf 8f6f 	isb	sy
 800bd96:	f3bf 8f4f 	dsb	sy
 800bd9a:	607b      	str	r3, [r7, #4]
}
 800bd9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bd9e:	4b0f      	ldr	r3, [pc, #60]	; (800bddc <vPortEnterCritical+0x58>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	3301      	adds	r3, #1
 800bda4:	4a0d      	ldr	r2, [pc, #52]	; (800bddc <vPortEnterCritical+0x58>)
 800bda6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bda8:	4b0c      	ldr	r3, [pc, #48]	; (800bddc <vPortEnterCritical+0x58>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d10f      	bne.n	800bdd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bdb0:	4b0b      	ldr	r3, [pc, #44]	; (800bde0 <vPortEnterCritical+0x5c>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d00a      	beq.n	800bdd0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bdba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdbe:	f383 8811 	msr	BASEPRI, r3
 800bdc2:	f3bf 8f6f 	isb	sy
 800bdc6:	f3bf 8f4f 	dsb	sy
 800bdca:	603b      	str	r3, [r7, #0]
}
 800bdcc:	bf00      	nop
 800bdce:	e7fe      	b.n	800bdce <vPortEnterCritical+0x4a>
	}
}
 800bdd0:	bf00      	nop
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr
 800bddc:	20000078 	.word	0x20000078
 800bde0:	e000ed04 	.word	0xe000ed04

0800bde4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bde4:	b480      	push	{r7}
 800bde6:	b083      	sub	sp, #12
 800bde8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bdea:	4b12      	ldr	r3, [pc, #72]	; (800be34 <vPortExitCritical+0x50>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d10a      	bne.n	800be08 <vPortExitCritical+0x24>
	__asm volatile
 800bdf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf6:	f383 8811 	msr	BASEPRI, r3
 800bdfa:	f3bf 8f6f 	isb	sy
 800bdfe:	f3bf 8f4f 	dsb	sy
 800be02:	607b      	str	r3, [r7, #4]
}
 800be04:	bf00      	nop
 800be06:	e7fe      	b.n	800be06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800be08:	4b0a      	ldr	r3, [pc, #40]	; (800be34 <vPortExitCritical+0x50>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	3b01      	subs	r3, #1
 800be0e:	4a09      	ldr	r2, [pc, #36]	; (800be34 <vPortExitCritical+0x50>)
 800be10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800be12:	4b08      	ldr	r3, [pc, #32]	; (800be34 <vPortExitCritical+0x50>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d105      	bne.n	800be26 <vPortExitCritical+0x42>
 800be1a:	2300      	movs	r3, #0
 800be1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	f383 8811 	msr	BASEPRI, r3
}
 800be24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800be26:	bf00      	nop
 800be28:	370c      	adds	r7, #12
 800be2a:	46bd      	mov	sp, r7
 800be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be30:	4770      	bx	lr
 800be32:	bf00      	nop
 800be34:	20000078 	.word	0x20000078
	...

0800be40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800be40:	f3ef 8009 	mrs	r0, PSP
 800be44:	f3bf 8f6f 	isb	sy
 800be48:	4b15      	ldr	r3, [pc, #84]	; (800bea0 <pxCurrentTCBConst>)
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	f01e 0f10 	tst.w	lr, #16
 800be50:	bf08      	it	eq
 800be52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800be56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be5a:	6010      	str	r0, [r2, #0]
 800be5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800be60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800be64:	f380 8811 	msr	BASEPRI, r0
 800be68:	f3bf 8f4f 	dsb	sy
 800be6c:	f3bf 8f6f 	isb	sy
 800be70:	f7fe fff0 	bl	800ae54 <vTaskSwitchContext>
 800be74:	f04f 0000 	mov.w	r0, #0
 800be78:	f380 8811 	msr	BASEPRI, r0
 800be7c:	bc09      	pop	{r0, r3}
 800be7e:	6819      	ldr	r1, [r3, #0]
 800be80:	6808      	ldr	r0, [r1, #0]
 800be82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be86:	f01e 0f10 	tst.w	lr, #16
 800be8a:	bf08      	it	eq
 800be8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800be90:	f380 8809 	msr	PSP, r0
 800be94:	f3bf 8f6f 	isb	sy
 800be98:	4770      	bx	lr
 800be9a:	bf00      	nop
 800be9c:	f3af 8000 	nop.w

0800bea0 <pxCurrentTCBConst>:
 800bea0:	20000c50 	.word	0x20000c50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bea4:	bf00      	nop
 800bea6:	bf00      	nop

0800bea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
	__asm volatile
 800beae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb2:	f383 8811 	msr	BASEPRI, r3
 800beb6:	f3bf 8f6f 	isb	sy
 800beba:	f3bf 8f4f 	dsb	sy
 800bebe:	607b      	str	r3, [r7, #4]
}
 800bec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bec2:	f7fe ff0f 	bl	800ace4 <xTaskIncrementTick>
 800bec6:	4603      	mov	r3, r0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d003      	beq.n	800bed4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800becc:	4b06      	ldr	r3, [pc, #24]	; (800bee8 <SysTick_Handler+0x40>)
 800bece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bed2:	601a      	str	r2, [r3, #0]
 800bed4:	2300      	movs	r3, #0
 800bed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	f383 8811 	msr	BASEPRI, r3
}
 800bede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bee0:	bf00      	nop
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	e000ed04 	.word	0xe000ed04

0800beec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800beec:	b480      	push	{r7}
 800beee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bef0:	4b0b      	ldr	r3, [pc, #44]	; (800bf20 <vPortSetupTimerInterrupt+0x34>)
 800bef2:	2200      	movs	r2, #0
 800bef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bef6:	4b0b      	ldr	r3, [pc, #44]	; (800bf24 <vPortSetupTimerInterrupt+0x38>)
 800bef8:	2200      	movs	r2, #0
 800befa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800befc:	4b0a      	ldr	r3, [pc, #40]	; (800bf28 <vPortSetupTimerInterrupt+0x3c>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	4a0a      	ldr	r2, [pc, #40]	; (800bf2c <vPortSetupTimerInterrupt+0x40>)
 800bf02:	fba2 2303 	umull	r2, r3, r2, r3
 800bf06:	099b      	lsrs	r3, r3, #6
 800bf08:	4a09      	ldr	r2, [pc, #36]	; (800bf30 <vPortSetupTimerInterrupt+0x44>)
 800bf0a:	3b01      	subs	r3, #1
 800bf0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bf0e:	4b04      	ldr	r3, [pc, #16]	; (800bf20 <vPortSetupTimerInterrupt+0x34>)
 800bf10:	2207      	movs	r2, #7
 800bf12:	601a      	str	r2, [r3, #0]
}
 800bf14:	bf00      	nop
 800bf16:	46bd      	mov	sp, r7
 800bf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1c:	4770      	bx	lr
 800bf1e:	bf00      	nop
 800bf20:	e000e010 	.word	0xe000e010
 800bf24:	e000e018 	.word	0xe000e018
 800bf28:	20000004 	.word	0x20000004
 800bf2c:	10624dd3 	.word	0x10624dd3
 800bf30:	e000e014 	.word	0xe000e014

0800bf34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bf34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bf44 <vPortEnableVFP+0x10>
 800bf38:	6801      	ldr	r1, [r0, #0]
 800bf3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bf3e:	6001      	str	r1, [r0, #0]
 800bf40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bf42:	bf00      	nop
 800bf44:	e000ed88 	.word	0xe000ed88

0800bf48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bf48:	b480      	push	{r7}
 800bf4a:	b085      	sub	sp, #20
 800bf4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bf4e:	f3ef 8305 	mrs	r3, IPSR
 800bf52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2b0f      	cmp	r3, #15
 800bf58:	d914      	bls.n	800bf84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bf5a:	4a17      	ldr	r2, [pc, #92]	; (800bfb8 <vPortValidateInterruptPriority+0x70>)
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	4413      	add	r3, r2
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bf64:	4b15      	ldr	r3, [pc, #84]	; (800bfbc <vPortValidateInterruptPriority+0x74>)
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	7afa      	ldrb	r2, [r7, #11]
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d20a      	bcs.n	800bf84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bf6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf72:	f383 8811 	msr	BASEPRI, r3
 800bf76:	f3bf 8f6f 	isb	sy
 800bf7a:	f3bf 8f4f 	dsb	sy
 800bf7e:	607b      	str	r3, [r7, #4]
}
 800bf80:	bf00      	nop
 800bf82:	e7fe      	b.n	800bf82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bf84:	4b0e      	ldr	r3, [pc, #56]	; (800bfc0 <vPortValidateInterruptPriority+0x78>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bf8c:	4b0d      	ldr	r3, [pc, #52]	; (800bfc4 <vPortValidateInterruptPriority+0x7c>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d90a      	bls.n	800bfaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bf94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf98:	f383 8811 	msr	BASEPRI, r3
 800bf9c:	f3bf 8f6f 	isb	sy
 800bfa0:	f3bf 8f4f 	dsb	sy
 800bfa4:	603b      	str	r3, [r7, #0]
}
 800bfa6:	bf00      	nop
 800bfa8:	e7fe      	b.n	800bfa8 <vPortValidateInterruptPriority+0x60>
	}
 800bfaa:	bf00      	nop
 800bfac:	3714      	adds	r7, #20
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb4:	4770      	bx	lr
 800bfb6:	bf00      	nop
 800bfb8:	e000e3f0 	.word	0xe000e3f0
 800bfbc:	20000d7c 	.word	0x20000d7c
 800bfc0:	e000ed0c 	.word	0xe000ed0c
 800bfc4:	20000d80 	.word	0x20000d80

0800bfc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b08a      	sub	sp, #40	; 0x28
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bfd4:	f7fe fddc 	bl	800ab90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bfd8:	4b5d      	ldr	r3, [pc, #372]	; (800c150 <pvPortMalloc+0x188>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d101      	bne.n	800bfe4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bfe0:	f000 f924 	bl	800c22c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bfe4:	4b5b      	ldr	r3, [pc, #364]	; (800c154 <pvPortMalloc+0x18c>)
 800bfe6:	681a      	ldr	r2, [r3, #0]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	4013      	ands	r3, r2
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	f040 8093 	bne.w	800c118 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d01d      	beq.n	800c034 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bff8:	2208      	movs	r2, #8
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	4413      	add	r3, r2
 800bffe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f003 0307 	and.w	r3, r3, #7
 800c006:	2b00      	cmp	r3, #0
 800c008:	d014      	beq.n	800c034 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f023 0307 	bic.w	r3, r3, #7
 800c010:	3308      	adds	r3, #8
 800c012:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f003 0307 	and.w	r3, r3, #7
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00a      	beq.n	800c034 <pvPortMalloc+0x6c>
	__asm volatile
 800c01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c022:	f383 8811 	msr	BASEPRI, r3
 800c026:	f3bf 8f6f 	isb	sy
 800c02a:	f3bf 8f4f 	dsb	sy
 800c02e:	617b      	str	r3, [r7, #20]
}
 800c030:	bf00      	nop
 800c032:	e7fe      	b.n	800c032 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d06e      	beq.n	800c118 <pvPortMalloc+0x150>
 800c03a:	4b47      	ldr	r3, [pc, #284]	; (800c158 <pvPortMalloc+0x190>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	429a      	cmp	r2, r3
 800c042:	d869      	bhi.n	800c118 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c044:	4b45      	ldr	r3, [pc, #276]	; (800c15c <pvPortMalloc+0x194>)
 800c046:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c048:	4b44      	ldr	r3, [pc, #272]	; (800c15c <pvPortMalloc+0x194>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c04e:	e004      	b.n	800c05a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c052:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	687a      	ldr	r2, [r7, #4]
 800c060:	429a      	cmp	r2, r3
 800c062:	d903      	bls.n	800c06c <pvPortMalloc+0xa4>
 800c064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d1f1      	bne.n	800c050 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c06c:	4b38      	ldr	r3, [pc, #224]	; (800c150 <pvPortMalloc+0x188>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c072:	429a      	cmp	r2, r3
 800c074:	d050      	beq.n	800c118 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c076:	6a3b      	ldr	r3, [r7, #32]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	2208      	movs	r2, #8
 800c07c:	4413      	add	r3, r2
 800c07e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c082:	681a      	ldr	r2, [r3, #0]
 800c084:	6a3b      	ldr	r3, [r7, #32]
 800c086:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08a:	685a      	ldr	r2, [r3, #4]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	1ad2      	subs	r2, r2, r3
 800c090:	2308      	movs	r3, #8
 800c092:	005b      	lsls	r3, r3, #1
 800c094:	429a      	cmp	r2, r3
 800c096:	d91f      	bls.n	800c0d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	4413      	add	r3, r2
 800c09e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	f003 0307 	and.w	r3, r3, #7
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d00a      	beq.n	800c0c0 <pvPortMalloc+0xf8>
	__asm volatile
 800c0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ae:	f383 8811 	msr	BASEPRI, r3
 800c0b2:	f3bf 8f6f 	isb	sy
 800c0b6:	f3bf 8f4f 	dsb	sy
 800c0ba:	613b      	str	r3, [r7, #16]
}
 800c0bc:	bf00      	nop
 800c0be:	e7fe      	b.n	800c0be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c2:	685a      	ldr	r2, [r3, #4]
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	1ad2      	subs	r2, r2, r3
 800c0c8:	69bb      	ldr	r3, [r7, #24]
 800c0ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c0d2:	69b8      	ldr	r0, [r7, #24]
 800c0d4:	f000 f90c 	bl	800c2f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c0d8:	4b1f      	ldr	r3, [pc, #124]	; (800c158 <pvPortMalloc+0x190>)
 800c0da:	681a      	ldr	r2, [r3, #0]
 800c0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	1ad3      	subs	r3, r2, r3
 800c0e2:	4a1d      	ldr	r2, [pc, #116]	; (800c158 <pvPortMalloc+0x190>)
 800c0e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c0e6:	4b1c      	ldr	r3, [pc, #112]	; (800c158 <pvPortMalloc+0x190>)
 800c0e8:	681a      	ldr	r2, [r3, #0]
 800c0ea:	4b1d      	ldr	r3, [pc, #116]	; (800c160 <pvPortMalloc+0x198>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d203      	bcs.n	800c0fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c0f2:	4b19      	ldr	r3, [pc, #100]	; (800c158 <pvPortMalloc+0x190>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	4a1a      	ldr	r2, [pc, #104]	; (800c160 <pvPortMalloc+0x198>)
 800c0f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fc:	685a      	ldr	r2, [r3, #4]
 800c0fe:	4b15      	ldr	r3, [pc, #84]	; (800c154 <pvPortMalloc+0x18c>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	431a      	orrs	r2, r3
 800c104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c106:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10a:	2200      	movs	r2, #0
 800c10c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c10e:	4b15      	ldr	r3, [pc, #84]	; (800c164 <pvPortMalloc+0x19c>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	3301      	adds	r3, #1
 800c114:	4a13      	ldr	r2, [pc, #76]	; (800c164 <pvPortMalloc+0x19c>)
 800c116:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c118:	f7fe fd48 	bl	800abac <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d101      	bne.n	800c126 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800c122:	f7f4 ff15 	bl	8000f50 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c126:	69fb      	ldr	r3, [r7, #28]
 800c128:	f003 0307 	and.w	r3, r3, #7
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d00a      	beq.n	800c146 <pvPortMalloc+0x17e>
	__asm volatile
 800c130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c134:	f383 8811 	msr	BASEPRI, r3
 800c138:	f3bf 8f6f 	isb	sy
 800c13c:	f3bf 8f4f 	dsb	sy
 800c140:	60fb      	str	r3, [r7, #12]
}
 800c142:	bf00      	nop
 800c144:	e7fe      	b.n	800c144 <pvPortMalloc+0x17c>
	return pvReturn;
 800c146:	69fb      	ldr	r3, [r7, #28]
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3728      	adds	r7, #40	; 0x28
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	20008d8c 	.word	0x20008d8c
 800c154:	20008da0 	.word	0x20008da0
 800c158:	20008d90 	.word	0x20008d90
 800c15c:	20008d84 	.word	0x20008d84
 800c160:	20008d94 	.word	0x20008d94
 800c164:	20008d98 	.word	0x20008d98

0800c168 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b086      	sub	sp, #24
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d04d      	beq.n	800c216 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c17a:	2308      	movs	r3, #8
 800c17c:	425b      	negs	r3, r3
 800c17e:	697a      	ldr	r2, [r7, #20]
 800c180:	4413      	add	r3, r2
 800c182:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	685a      	ldr	r2, [r3, #4]
 800c18c:	4b24      	ldr	r3, [pc, #144]	; (800c220 <vPortFree+0xb8>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4013      	ands	r3, r2
 800c192:	2b00      	cmp	r3, #0
 800c194:	d10a      	bne.n	800c1ac <vPortFree+0x44>
	__asm volatile
 800c196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19a:	f383 8811 	msr	BASEPRI, r3
 800c19e:	f3bf 8f6f 	isb	sy
 800c1a2:	f3bf 8f4f 	dsb	sy
 800c1a6:	60fb      	str	r3, [r7, #12]
}
 800c1a8:	bf00      	nop
 800c1aa:	e7fe      	b.n	800c1aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d00a      	beq.n	800c1ca <vPortFree+0x62>
	__asm volatile
 800c1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b8:	f383 8811 	msr	BASEPRI, r3
 800c1bc:	f3bf 8f6f 	isb	sy
 800c1c0:	f3bf 8f4f 	dsb	sy
 800c1c4:	60bb      	str	r3, [r7, #8]
}
 800c1c6:	bf00      	nop
 800c1c8:	e7fe      	b.n	800c1c8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	685a      	ldr	r2, [r3, #4]
 800c1ce:	4b14      	ldr	r3, [pc, #80]	; (800c220 <vPortFree+0xb8>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4013      	ands	r3, r2
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d01e      	beq.n	800c216 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d11a      	bne.n	800c216 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	685a      	ldr	r2, [r3, #4]
 800c1e4:	4b0e      	ldr	r3, [pc, #56]	; (800c220 <vPortFree+0xb8>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	43db      	mvns	r3, r3
 800c1ea:	401a      	ands	r2, r3
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c1f0:	f7fe fcce 	bl	800ab90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	685a      	ldr	r2, [r3, #4]
 800c1f8:	4b0a      	ldr	r3, [pc, #40]	; (800c224 <vPortFree+0xbc>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	4a09      	ldr	r2, [pc, #36]	; (800c224 <vPortFree+0xbc>)
 800c200:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c202:	6938      	ldr	r0, [r7, #16]
 800c204:	f000 f874 	bl	800c2f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c208:	4b07      	ldr	r3, [pc, #28]	; (800c228 <vPortFree+0xc0>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	3301      	adds	r3, #1
 800c20e:	4a06      	ldr	r2, [pc, #24]	; (800c228 <vPortFree+0xc0>)
 800c210:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c212:	f7fe fccb 	bl	800abac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c216:	bf00      	nop
 800c218:	3718      	adds	r7, #24
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}
 800c21e:	bf00      	nop
 800c220:	20008da0 	.word	0x20008da0
 800c224:	20008d90 	.word	0x20008d90
 800c228:	20008d9c 	.word	0x20008d9c

0800c22c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c22c:	b480      	push	{r7}
 800c22e:	b085      	sub	sp, #20
 800c230:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c236:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c238:	4b27      	ldr	r3, [pc, #156]	; (800c2d8 <prvHeapInit+0xac>)
 800c23a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f003 0307 	and.w	r3, r3, #7
 800c242:	2b00      	cmp	r3, #0
 800c244:	d00c      	beq.n	800c260 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	3307      	adds	r3, #7
 800c24a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f023 0307 	bic.w	r3, r3, #7
 800c252:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c254:	68ba      	ldr	r2, [r7, #8]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	1ad3      	subs	r3, r2, r3
 800c25a:	4a1f      	ldr	r2, [pc, #124]	; (800c2d8 <prvHeapInit+0xac>)
 800c25c:	4413      	add	r3, r2
 800c25e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c264:	4a1d      	ldr	r2, [pc, #116]	; (800c2dc <prvHeapInit+0xb0>)
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c26a:	4b1c      	ldr	r3, [pc, #112]	; (800c2dc <prvHeapInit+0xb0>)
 800c26c:	2200      	movs	r2, #0
 800c26e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	68ba      	ldr	r2, [r7, #8]
 800c274:	4413      	add	r3, r2
 800c276:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c278:	2208      	movs	r2, #8
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	1a9b      	subs	r3, r3, r2
 800c27e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f023 0307 	bic.w	r3, r3, #7
 800c286:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	4a15      	ldr	r2, [pc, #84]	; (800c2e0 <prvHeapInit+0xb4>)
 800c28c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c28e:	4b14      	ldr	r3, [pc, #80]	; (800c2e0 <prvHeapInit+0xb4>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	2200      	movs	r2, #0
 800c294:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c296:	4b12      	ldr	r3, [pc, #72]	; (800c2e0 <prvHeapInit+0xb4>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	2200      	movs	r2, #0
 800c29c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	68fa      	ldr	r2, [r7, #12]
 800c2a6:	1ad2      	subs	r2, r2, r3
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c2ac:	4b0c      	ldr	r3, [pc, #48]	; (800c2e0 <prvHeapInit+0xb4>)
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	4a0a      	ldr	r2, [pc, #40]	; (800c2e4 <prvHeapInit+0xb8>)
 800c2ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	4a09      	ldr	r2, [pc, #36]	; (800c2e8 <prvHeapInit+0xbc>)
 800c2c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c2c4:	4b09      	ldr	r3, [pc, #36]	; (800c2ec <prvHeapInit+0xc0>)
 800c2c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c2ca:	601a      	str	r2, [r3, #0]
}
 800c2cc:	bf00      	nop
 800c2ce:	3714      	adds	r7, #20
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d6:	4770      	bx	lr
 800c2d8:	20000d84 	.word	0x20000d84
 800c2dc:	20008d84 	.word	0x20008d84
 800c2e0:	20008d8c 	.word	0x20008d8c
 800c2e4:	20008d94 	.word	0x20008d94
 800c2e8:	20008d90 	.word	0x20008d90
 800c2ec:	20008da0 	.word	0x20008da0

0800c2f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b085      	sub	sp, #20
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c2f8:	4b28      	ldr	r3, [pc, #160]	; (800c39c <prvInsertBlockIntoFreeList+0xac>)
 800c2fa:	60fb      	str	r3, [r7, #12]
 800c2fc:	e002      	b.n	800c304 <prvInsertBlockIntoFreeList+0x14>
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	60fb      	str	r3, [r7, #12]
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d8f7      	bhi.n	800c2fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	68ba      	ldr	r2, [r7, #8]
 800c318:	4413      	add	r3, r2
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d108      	bne.n	800c332 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	685a      	ldr	r2, [r3, #4]
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	441a      	add	r2, r3
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	68ba      	ldr	r2, [r7, #8]
 800c33c:	441a      	add	r2, r3
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	429a      	cmp	r2, r3
 800c344:	d118      	bne.n	800c378 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	4b15      	ldr	r3, [pc, #84]	; (800c3a0 <prvInsertBlockIntoFreeList+0xb0>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	429a      	cmp	r2, r3
 800c350:	d00d      	beq.n	800c36e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	685a      	ldr	r2, [r3, #4]
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	441a      	add	r2, r3
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	681a      	ldr	r2, [r3, #0]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	601a      	str	r2, [r3, #0]
 800c36c:	e008      	b.n	800c380 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c36e:	4b0c      	ldr	r3, [pc, #48]	; (800c3a0 <prvInsertBlockIntoFreeList+0xb0>)
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	601a      	str	r2, [r3, #0]
 800c376:	e003      	b.n	800c380 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c380:	68fa      	ldr	r2, [r7, #12]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	429a      	cmp	r2, r3
 800c386:	d002      	beq.n	800c38e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	687a      	ldr	r2, [r7, #4]
 800c38c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c38e:	bf00      	nop
 800c390:	3714      	adds	r7, #20
 800c392:	46bd      	mov	sp, r7
 800c394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c398:	4770      	bx	lr
 800c39a:	bf00      	nop
 800c39c:	20008d84 	.word	0x20008d84
 800c3a0:	20008d8c 	.word	0x20008d8c

0800c3a4 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800c3a8:	f004 fab8 	bl	801091c <touchgfx_init>
}
 800c3ac:	bf00      	nop
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800c3b8:	f004 fada 	bl	8010970 <touchgfx_taskEntry>
}
 800c3bc:	bf00      	nop
 800c3be:	3708      	adds	r7, #8
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800c3c4:	b480      	push	{r7}
 800c3c6:	b083      	sub	sp, #12
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
    {
 800c3cc:	4a04      	ldr	r2, [pc, #16]	; (800c3e0 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	601a      	str	r2, [r3, #0]
    }
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	370c      	adds	r7, #12
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr
 800c3e0:	080259f0 	.word	0x080259f0

0800c3e4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
    }
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f7ff ffe9 	bl	800c3c4 <_ZN8touchgfx12FontProviderD1Ev>
 800c3f2:	2104      	movs	r1, #4
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f017 f87a 	bl	80234ee <_ZdlPvj>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3708      	adds	r7, #8
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	460b      	mov	r3, r1
 800c40e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800c410:	887b      	ldrh	r3, [r7, #2]
 800c412:	2b02      	cmp	r3, #2
 800c414:	d010      	beq.n	800c438 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800c416:	2b02      	cmp	r3, #2
 800c418:	dc13      	bgt.n	800c442 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d002      	beq.n	800c424 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800c41e:	2b01      	cmp	r3, #1
 800c420:	d005      	beq.n	800c42e <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800c422:	e00e      	b.n	800c442 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800c424:	f002 fb1a 	bl	800ea5c <_ZN17TypedTextDatabase8getFontsEv>
 800c428:	4603      	mov	r3, r0
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	e00a      	b.n	800c444 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800c42e:	f002 fb15 	bl	800ea5c <_ZN17TypedTextDatabase8getFontsEv>
 800c432:	4603      	mov	r3, r0
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	e005      	b.n	800c444 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800c438:	f002 fb10 	bl	800ea5c <_ZN17TypedTextDatabase8getFontsEv>
 800c43c:	4603      	mov	r3, r0
 800c43e:	689b      	ldr	r3, [r3, #8]
 800c440:	e000      	b.n	800c444 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800c442:	2300      	movs	r3, #0
    }
}
 800c444:	4618      	mov	r0, r3
 800c446:	3708      	adds	r7, #8
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b082      	sub	sp, #8
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	4a05      	ldr	r2, [pc, #20]	; (800c46c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	601a      	str	r2, [r3, #0]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7ff ffb1 	bl	800c3c4 <_ZN8touchgfx12FontProviderD1Ev>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	4618      	mov	r0, r3
 800c466:	3708      	adds	r7, #8
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	080259dc 	.word	0x080259dc

0800c470 <_ZN23ApplicationFontProviderD0Ev>:
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f7ff ffe7 	bl	800c44c <_ZN23ApplicationFontProviderD1Ev>
 800c47e:	2104      	movs	r1, #4
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f017 f834 	bl	80234ee <_ZdlPvj>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	4618      	mov	r0, r3
 800c48a:	3708      	adds	r7, #8
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800c490:	b480      	push	{r7}
 800c492:	b083      	sub	sp, #12
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
    {
 800c498:	4a04      	ldr	r2, [pc, #16]	; (800c4ac <_ZN8touchgfx4FontD1Ev+0x1c>)
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	601a      	str	r2, [r3, #0]
    }
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	370c      	adds	r7, #12
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr
 800c4ac:	08025d90 	.word	0x08025d90

0800c4b0 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
    }
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f7ff ffe9 	bl	800c490 <_ZN8touchgfx4FontD1Ev>
 800c4be:	2110      	movs	r1, #16
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f017 f814 	bl	80234ee <_ZdlPvj>
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3708      	adds	r7, #8
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800c4d0:	b590      	push	{r4, r7, lr}
 800c4d2:	b087      	sub	sp, #28
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	460b      	mov	r3, r1
 800c4da:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800c4dc:	887b      	ldrh	r3, [r7, #2]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d101      	bne.n	800c4e6 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	e010      	b.n	800c508 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	3308      	adds	r3, #8
 800c4f4:	681c      	ldr	r4, [r3, #0]
 800c4f6:	f107 030f 	add.w	r3, r7, #15
 800c4fa:	f107 0210 	add.w	r2, r7, #16
 800c4fe:	8879      	ldrh	r1, [r7, #2]
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	47a0      	blx	r4
 800c504:	6178      	str	r0, [r7, #20]
        return glyph;
 800c506:	697b      	ldr	r3, [r7, #20]
    }
 800c508:	4618      	mov	r0, r3
 800c50a:	371c      	adds	r7, #28
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd90      	pop	{r4, r7, pc}

0800c510 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800c510:	b480      	push	{r7}
 800c512:	b083      	sub	sp, #12
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	895b      	ldrh	r3, [r3, #10]
    }
 800c51c:	4618      	mov	r0, r3
 800c51e:	370c      	adds	r7, #12
 800c520:	46bd      	mov	sp, r7
 800c522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c526:	4770      	bx	lr

0800c528 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800c528:	b480      	push	{r7}
 800c52a:	b083      	sub	sp, #12
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	899b      	ldrh	r3, [r3, #12]
    }
 800c534:	4618      	mov	r0, r3
 800c536:	370c      	adds	r7, #12
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr

0800c540 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800c540:	b480      	push	{r7}
 800c542:	b083      	sub	sp, #12
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	889b      	ldrh	r3, [r3, #4]
    }
 800c54c:	4618      	mov	r0, r3
 800c54e:	370c      	adds	r7, #12
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800c558:	b480      	push	{r7}
 800c55a:	b083      	sub	sp, #12
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	889a      	ldrh	r2, [r3, #4]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	799b      	ldrb	r3, [r3, #6]
 800c568:	b29b      	uxth	r3, r3
 800c56a:	4413      	add	r3, r2
 800c56c:	b29b      	uxth	r3, r3
    }
 800c56e:	4618      	mov	r0, r3
 800c570:	370c      	adds	r7, #12
 800c572:	46bd      	mov	sp, r7
 800c574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c578:	4770      	bx	lr

0800c57a <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800c57a:	b480      	push	{r7}
 800c57c:	b083      	sub	sp, #12
 800c57e:	af00      	add	r7, sp, #0
 800c580:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	79db      	ldrb	r3, [r3, #7]
 800c586:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800c58a:	b2db      	uxtb	r3, r3
    }
 800c58c:	4618      	mov	r0, r3
 800c58e:	370c      	adds	r7, #12
 800c590:	46bd      	mov	sp, r7
 800c592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c596:	4770      	bx	lr

0800c598 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800c598:	b480      	push	{r7}
 800c59a:	b083      	sub	sp, #12
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	79db      	ldrb	r3, [r3, #7]
 800c5a4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c5a8:	b2db      	uxtb	r3, r3
    }
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	370c      	adds	r7, #12
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b4:	4770      	bx	lr
	...

0800c5b8 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
 800c5c0:	4a05      	ldr	r2, [pc, #20]	; (800c5d8 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	601a      	str	r2, [r3, #0]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7ff ff61 	bl	800c490 <_ZN8touchgfx4FontD1Ev>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}
 800c5d8:	08027564 	.word	0x08027564

0800c5dc <_ZN8touchgfx9ConstFontD0Ev>:
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f7ff ffe7 	bl	800c5b8 <_ZN8touchgfx9ConstFontD1Ev>
 800c5ea:	2118      	movs	r1, #24
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f016 ff7e 	bl	80234ee <_ZdlPvj>
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3708      	adds	r7, #8
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}

0800c5fc <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	4a05      	ldr	r2, [pc, #20]	; (800c61c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	601a      	str	r2, [r3, #0]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7ff ffd3 	bl	800c5b8 <_ZN8touchgfx9ConstFontD1Ev>
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	4618      	mov	r0, r3
 800c616:	3708      	adds	r7, #8
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}
 800c61c:	08025a14 	.word	0x08025a14

0800c620 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800c620:	b580      	push	{r7, lr}
 800c622:	b082      	sub	sp, #8
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f7ff ffe7 	bl	800c5fc <_ZN8touchgfx13GeneratedFontD1Ev>
 800c62e:	2124      	movs	r1, #36	; 0x24
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f016 ff5c 	bl	80234ee <_ZdlPvj>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	4618      	mov	r0, r3
 800c63a:	3708      	adds	r7, #8
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800c640:	b480      	push	{r7}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
    {
 800c648:	4a04      	ldr	r2, [pc, #16]	; (800c65c <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	601a      	str	r2, [r3, #0]
    }
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	4618      	mov	r0, r3
 800c652:	370c      	adds	r7, #12
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr
 800c65c:	08025a04 	.word	0x08025a04

0800c660 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
    }
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f7ff ffe9 	bl	800c640 <_ZN8touchgfx9TypedTextD1Ev>
 800c66e:	2108      	movs	r1, #8
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f016 ff3c 	bl	80234ee <_ZdlPvj>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	4618      	mov	r0, r3
 800c67a:	3708      	adds	r7, #8
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800c680:	b480      	push	{r7}
 800c682:	b083      	sub	sp, #12
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6a1b      	ldr	r3, [r3, #32]
    }
 800c68c:	4618      	mov	r0, r3
 800c68e:	370c      	adds	r7, #12
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800c698:	b580      	push	{r7, lr}
 800c69a:	b08c      	sub	sp, #48	; 0x30
 800c69c:	af08      	add	r7, sp, #32
 800c69e:	60f8      	str	r0, [r7, #12]
 800c6a0:	60b9      	str	r1, [r7, #8]
 800c6a2:	4611      	mov	r1, r2
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	460b      	mov	r3, r1
 800c6a8:	80fb      	strh	r3, [r7, #6]
 800c6aa:	4613      	mov	r3, r2
 800c6ac:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800c6ae:	68f8      	ldr	r0, [r7, #12]
 800c6b0:	88b9      	ldrh	r1, [r7, #4]
 800c6b2:	88fa      	ldrh	r2, [r7, #6]
 800c6b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c6b6:	9306      	str	r3, [sp, #24]
 800c6b8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c6ba:	9305      	str	r3, [sp, #20]
 800c6bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c6c0:	9304      	str	r3, [sp, #16]
 800c6c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c6c6:	9303      	str	r3, [sp, #12]
 800c6c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c6cc:	9302      	str	r3, [sp, #8]
 800c6ce:	7f3b      	ldrb	r3, [r7, #28]
 800c6d0:	9301      	str	r3, [sp, #4]
 800c6d2:	7e3b      	ldrb	r3, [r7, #24]
 800c6d4:	9300      	str	r3, [sp, #0]
 800c6d6:	460b      	mov	r3, r1
 800c6d8:	68b9      	ldr	r1, [r7, #8]
 800c6da:	f009 f933 	bl	8015944 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800c6de:	4a08      	ldr	r2, [pc, #32]	; (800c700 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	601a      	str	r2, [r3, #0]
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6e8:	619a      	str	r2, [r3, #24]
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6ee:	61da      	str	r2, [r3, #28]
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c6f4:	621a      	str	r2, [r3, #32]
{
}
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3710      	adds	r7, #16
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}
 800c700:	08025a14 	.word	0x08025a14

0800c704 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800c704:	b480      	push	{r7}
 800c706:	b085      	sub	sp, #20
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	699b      	ldr	r3, [r3, #24]
 800c712:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	889b      	ldrh	r3, [r3, #4]
 800c718:	0adb      	lsrs	r3, r3, #11
 800c71a:	b29b      	uxth	r3, r3
 800c71c:	009b      	lsls	r3, r3, #2
 800c71e:	68fa      	ldr	r2, [r7, #12]
 800c720:	4413      	add	r3, r2
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4413      	add	r3, r2
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3714      	adds	r7, #20
 800c72e:	46bd      	mov	sp, r7
 800c730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c734:	4770      	bx	lr

0800c736 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800c736:	b480      	push	{r7}
 800c738:	b089      	sub	sp, #36	; 0x24
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	60f8      	str	r0, [r7, #12]
 800c73e:	460b      	mov	r3, r1
 800c740:	607a      	str	r2, [r7, #4]
 800c742:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d003      	beq.n	800c752 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	7b1b      	ldrb	r3, [r3, #12]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d101      	bne.n	800c756 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800c752:	2300      	movs	r3, #0
 800c754:	e030      	b.n	800c7b8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	69da      	ldr	r2, [r3, #28]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	7b5b      	ldrb	r3, [r3, #13]
 800c762:	021b      	lsls	r3, r3, #8
 800c764:	b21b      	sxth	r3, r3
 800c766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c76a:	b219      	sxth	r1, r3
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	7adb      	ldrb	r3, [r3, #11]
 800c770:	b21b      	sxth	r3, r3
 800c772:	430b      	orrs	r3, r1
 800c774:	b21b      	sxth	r3, r3
 800c776:	b29b      	uxth	r3, r3
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	4413      	add	r3, r2
 800c77c:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	7b1b      	ldrb	r3, [r3, #12]
 800c782:	837b      	strh	r3, [r7, #26]
 800c784:	8b7b      	ldrh	r3, [r7, #26]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d015      	beq.n	800c7b6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800c78a:	69fb      	ldr	r3, [r7, #28]
 800c78c:	881b      	ldrh	r3, [r3, #0]
 800c78e:	897a      	ldrh	r2, [r7, #10]
 800c790:	429a      	cmp	r2, r3
 800c792:	d103      	bne.n	800c79c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800c794:	69fb      	ldr	r3, [r7, #28]
 800c796:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800c79a:	e00d      	b.n	800c7b8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	881b      	ldrh	r3, [r3, #0]
 800c7a0:	897a      	ldrh	r2, [r7, #10]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d306      	bcc.n	800c7b4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800c7a6:	8b7b      	ldrh	r3, [r7, #26]
 800c7a8:	3b01      	subs	r3, #1
 800c7aa:	837b      	strh	r3, [r7, #26]
 800c7ac:	69fb      	ldr	r3, [r7, #28]
 800c7ae:	3304      	adds	r3, #4
 800c7b0:	61fb      	str	r3, [r7, #28]
 800c7b2:	e7e7      	b.n	800c784 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800c7b4:	bf00      	nop
        }
    }
    return 0;
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3724      	adds	r7, #36	; 0x24
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 13, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	4801      	ldr	r0, [pc, #4]	; (800c7d0 <__tcf_0+0xc>)
 800c7ca:	f7ff ff17 	bl	800c5fc <_ZN8touchgfx13GeneratedFontD1Ev>
 800c7ce:	bd80      	pop	{r7, pc}
 800c7d0:	20008da4 	.word	0x20008da4

0800c7d4 <_Z23getFont_verdana_10_4bppv>:
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b08a      	sub	sp, #40	; 0x28
 800c7d8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 13, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800c7da:	4b1e      	ldr	r3, [pc, #120]	; (800c854 <_Z23getFont_verdana_10_4bppv+0x80>)
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	f3bf 8f5b 	dmb	ish
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	f003 0301 	and.w	r3, r3, #1
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	bf0c      	ite	eq
 800c7ec:	2301      	moveq	r3, #1
 800c7ee:	2300      	movne	r3, #0
 800c7f0:	b2db      	uxtb	r3, r3
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d02a      	beq.n	800c84c <_Z23getFont_verdana_10_4bppv+0x78>
 800c7f6:	4817      	ldr	r0, [pc, #92]	; (800c854 <_Z23getFont_verdana_10_4bppv+0x80>)
 800c7f8:	f016 fe7b 	bl	80234f2 <__cxa_guard_acquire>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	bf14      	ite	ne
 800c802:	2301      	movne	r3, #1
 800c804:	2300      	moveq	r3, #0
 800c806:	b2db      	uxtb	r3, r3
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d01f      	beq.n	800c84c <_Z23getFont_verdana_10_4bppv+0x78>
 800c80c:	2300      	movs	r3, #0
 800c80e:	9309      	str	r3, [sp, #36]	; 0x24
 800c810:	2300      	movs	r3, #0
 800c812:	9308      	str	r3, [sp, #32]
 800c814:	233f      	movs	r3, #63	; 0x3f
 800c816:	9307      	str	r3, [sp, #28]
 800c818:	4b0f      	ldr	r3, [pc, #60]	; (800c858 <_Z23getFont_verdana_10_4bppv+0x84>)
 800c81a:	9306      	str	r3, [sp, #24]
 800c81c:	4b0f      	ldr	r3, [pc, #60]	; (800c85c <_Z23getFont_verdana_10_4bppv+0x88>)
 800c81e:	9305      	str	r3, [sp, #20]
 800c820:	2300      	movs	r3, #0
 800c822:	9304      	str	r3, [sp, #16]
 800c824:	2300      	movs	r3, #0
 800c826:	9303      	str	r3, [sp, #12]
 800c828:	2301      	movs	r3, #1
 800c82a:	9302      	str	r3, [sp, #8]
 800c82c:	2304      	movs	r3, #4
 800c82e:	9301      	str	r3, [sp, #4]
 800c830:	2300      	movs	r3, #0
 800c832:	9300      	str	r3, [sp, #0]
 800c834:	230a      	movs	r3, #10
 800c836:	220d      	movs	r2, #13
 800c838:	4909      	ldr	r1, [pc, #36]	; (800c860 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800c83a:	480a      	ldr	r0, [pc, #40]	; (800c864 <_Z23getFont_verdana_10_4bppv+0x90>)
 800c83c:	f7ff ff2c 	bl	800c698 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c840:	4804      	ldr	r0, [pc, #16]	; (800c854 <_Z23getFont_verdana_10_4bppv+0x80>)
 800c842:	f016 fe62 	bl	802350a <__cxa_guard_release>
 800c846:	4808      	ldr	r0, [pc, #32]	; (800c868 <_Z23getFont_verdana_10_4bppv+0x94>)
 800c848:	f016 ff9a 	bl	8023780 <atexit>
    return verdana_10_4bpp;
 800c84c:	4b05      	ldr	r3, [pc, #20]	; (800c864 <_Z23getFont_verdana_10_4bppv+0x90>)
}
 800c84e:	4618      	mov	r0, r3
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}
 800c854:	20008dc8 	.word	0x20008dc8
 800c858:	0802a50c 	.word	0x0802a50c
 800c85c:	08025a60 	.word	0x08025a60
 800c860:	0802a2a0 	.word	0x0802a2a0
 800c864:	20008da4 	.word	0x20008da4
 800c868:	0800c7c5 	.word	0x0800c7c5

0800c86c <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 18, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800c86c:	b580      	push	{r7, lr}
 800c86e:	af00      	add	r7, sp, #0
 800c870:	4801      	ldr	r0, [pc, #4]	; (800c878 <__tcf_0+0xc>)
 800c872:	f7ff fec3 	bl	800c5fc <_ZN8touchgfx13GeneratedFontD1Ev>
 800c876:	bd80      	pop	{r7, pc}
 800c878:	20008dcc 	.word	0x20008dcc

0800c87c <_Z23getFont_verdana_20_4bppv>:
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b08a      	sub	sp, #40	; 0x28
 800c880:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 18, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800c882:	4b1e      	ldr	r3, [pc, #120]	; (800c8fc <_Z23getFont_verdana_20_4bppv+0x80>)
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	f3bf 8f5b 	dmb	ish
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	f003 0301 	and.w	r3, r3, #1
 800c890:	2b00      	cmp	r3, #0
 800c892:	bf0c      	ite	eq
 800c894:	2301      	moveq	r3, #1
 800c896:	2300      	movne	r3, #0
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d02a      	beq.n	800c8f4 <_Z23getFont_verdana_20_4bppv+0x78>
 800c89e:	4817      	ldr	r0, [pc, #92]	; (800c8fc <_Z23getFont_verdana_20_4bppv+0x80>)
 800c8a0:	f016 fe27 	bl	80234f2 <__cxa_guard_acquire>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	bf14      	ite	ne
 800c8aa:	2301      	movne	r3, #1
 800c8ac:	2300      	moveq	r3, #0
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d01f      	beq.n	800c8f4 <_Z23getFont_verdana_20_4bppv+0x78>
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	9309      	str	r3, [sp, #36]	; 0x24
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	9308      	str	r3, [sp, #32]
 800c8bc:	233f      	movs	r3, #63	; 0x3f
 800c8be:	9307      	str	r3, [sp, #28]
 800c8c0:	4b0f      	ldr	r3, [pc, #60]	; (800c900 <_Z23getFont_verdana_20_4bppv+0x84>)
 800c8c2:	9306      	str	r3, [sp, #24]
 800c8c4:	4b0f      	ldr	r3, [pc, #60]	; (800c904 <_Z23getFont_verdana_20_4bppv+0x88>)
 800c8c6:	9305      	str	r3, [sp, #20]
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	9304      	str	r3, [sp, #16]
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	9303      	str	r3, [sp, #12]
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	9302      	str	r3, [sp, #8]
 800c8d4:	2304      	movs	r3, #4
 800c8d6:	9301      	str	r3, [sp, #4]
 800c8d8:	2300      	movs	r3, #0
 800c8da:	9300      	str	r3, [sp, #0]
 800c8dc:	2314      	movs	r3, #20
 800c8de:	2212      	movs	r2, #18
 800c8e0:	4909      	ldr	r1, [pc, #36]	; (800c908 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800c8e2:	480a      	ldr	r0, [pc, #40]	; (800c90c <_Z23getFont_verdana_20_4bppv+0x90>)
 800c8e4:	f7ff fed8 	bl	800c698 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c8e8:	4804      	ldr	r0, [pc, #16]	; (800c8fc <_Z23getFont_verdana_20_4bppv+0x80>)
 800c8ea:	f016 fe0e 	bl	802350a <__cxa_guard_release>
 800c8ee:	4808      	ldr	r0, [pc, #32]	; (800c910 <_Z23getFont_verdana_20_4bppv+0x94>)
 800c8f0:	f016 ff46 	bl	8023780 <atexit>
    return verdana_20_4bpp;
 800c8f4:	4b05      	ldr	r3, [pc, #20]	; (800c90c <_Z23getFont_verdana_20_4bppv+0x90>)
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}
 800c8fc:	20008df0 	.word	0x20008df0
 800c900:	0802a510 	.word	0x0802a510
 800c904:	08025a64 	.word	0x08025a64
 800c908:	0802a358 	.word	0x0802a358
 800c90c:	20008dcc 	.word	0x20008dcc
 800c910:	0800c86d 	.word	0x0800c86d

0800c914 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 13, 40, 1, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800c914:	b580      	push	{r7, lr}
 800c916:	af00      	add	r7, sp, #0
 800c918:	4801      	ldr	r0, [pc, #4]	; (800c920 <__tcf_0+0xc>)
 800c91a:	f7ff fe6f 	bl	800c5fc <_ZN8touchgfx13GeneratedFontD1Ev>
 800c91e:	bd80      	pop	{r7, pc}
 800c920:	20008df4 	.word	0x20008df4

0800c924 <_Z23getFont_verdana_40_4bppv>:
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b08a      	sub	sp, #40	; 0x28
 800c928:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 13, 40, 1, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800c92a:	4b1e      	ldr	r3, [pc, #120]	; (800c9a4 <_Z23getFont_verdana_40_4bppv+0x80>)
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	f3bf 8f5b 	dmb	ish
 800c932:	b2db      	uxtb	r3, r3
 800c934:	f003 0301 	and.w	r3, r3, #1
 800c938:	2b00      	cmp	r3, #0
 800c93a:	bf0c      	ite	eq
 800c93c:	2301      	moveq	r3, #1
 800c93e:	2300      	movne	r3, #0
 800c940:	b2db      	uxtb	r3, r3
 800c942:	2b00      	cmp	r3, #0
 800c944:	d02a      	beq.n	800c99c <_Z23getFont_verdana_40_4bppv+0x78>
 800c946:	4817      	ldr	r0, [pc, #92]	; (800c9a4 <_Z23getFont_verdana_40_4bppv+0x80>)
 800c948:	f016 fdd3 	bl	80234f2 <__cxa_guard_acquire>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	bf14      	ite	ne
 800c952:	2301      	movne	r3, #1
 800c954:	2300      	moveq	r3, #0
 800c956:	b2db      	uxtb	r3, r3
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d01f      	beq.n	800c99c <_Z23getFont_verdana_40_4bppv+0x78>
 800c95c:	2300      	movs	r3, #0
 800c95e:	9309      	str	r3, [sp, #36]	; 0x24
 800c960:	2300      	movs	r3, #0
 800c962:	9308      	str	r3, [sp, #32]
 800c964:	233f      	movs	r3, #63	; 0x3f
 800c966:	9307      	str	r3, [sp, #28]
 800c968:	4b0f      	ldr	r3, [pc, #60]	; (800c9a8 <_Z23getFont_verdana_40_4bppv+0x84>)
 800c96a:	9306      	str	r3, [sp, #24]
 800c96c:	4b0f      	ldr	r3, [pc, #60]	; (800c9ac <_Z23getFont_verdana_40_4bppv+0x88>)
 800c96e:	9305      	str	r3, [sp, #20]
 800c970:	2300      	movs	r3, #0
 800c972:	9304      	str	r3, [sp, #16]
 800c974:	2300      	movs	r3, #0
 800c976:	9303      	str	r3, [sp, #12]
 800c978:	2301      	movs	r3, #1
 800c97a:	9302      	str	r3, [sp, #8]
 800c97c:	2304      	movs	r3, #4
 800c97e:	9301      	str	r3, [sp, #4]
 800c980:	2301      	movs	r3, #1
 800c982:	9300      	str	r3, [sp, #0]
 800c984:	2328      	movs	r3, #40	; 0x28
 800c986:	220d      	movs	r2, #13
 800c988:	4909      	ldr	r1, [pc, #36]	; (800c9b0 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800c98a:	480a      	ldr	r0, [pc, #40]	; (800c9b4 <_Z23getFont_verdana_40_4bppv+0x90>)
 800c98c:	f7ff fe84 	bl	800c698 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c990:	4804      	ldr	r0, [pc, #16]	; (800c9a4 <_Z23getFont_verdana_40_4bppv+0x80>)
 800c992:	f016 fdba 	bl	802350a <__cxa_guard_release>
 800c996:	4808      	ldr	r0, [pc, #32]	; (800c9b8 <_Z23getFont_verdana_40_4bppv+0x94>)
 800c998:	f016 fef2 	bl	8023780 <atexit>
    return verdana_40_4bpp;
 800c99c:	4b05      	ldr	r3, [pc, #20]	; (800c9b4 <_Z23getFont_verdana_40_4bppv+0x90>)
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}
 800c9a4:	20008e18 	.word	0x20008e18
 800c9a8:	0802a514 	.word	0x0802a514
 800c9ac:	08025a68 	.word	0x08025a68
 800c9b0:	0802a454 	.word	0x0802a454
 800c9b4:	20008df4 	.word	0x20008df4
 800c9b8:	0800c915 	.word	0x0800c915

0800c9bc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800c9bc:	b480      	push	{r7}
 800c9be:	b083      	sub	sp, #12
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	6039      	str	r1, [r7, #0]
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	370c      	adds	r7, #12
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d2:	4770      	bx	lr

0800c9d4 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800c9d4:	b480      	push	{r7}
 800c9d6:	b083      	sub	sp, #12
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	6039      	str	r1, [r7, #0]
    {
    }
 800c9de:	bf00      	nop
 800c9e0:	370c      	adds	r7, #12
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e8:	4770      	bx	lr

0800c9ea <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800c9ea:	b480      	push	{r7}
 800c9ec:	b083      	sub	sp, #12
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	6078      	str	r0, [r7, #4]
 800c9f2:	6039      	str	r1, [r7, #0]
    {
    }
 800c9f4:	bf00      	nop
 800c9f6:	370c      	adds	r7, #12
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr

0800ca00 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800ca00:	b480      	push	{r7}
 800ca02:	b083      	sub	sp, #12
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
    {
    }
 800ca0a:	bf00      	nop
 800ca0c:	370c      	adds	r7, #12
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr

0800ca16 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800ca16:	b480      	push	{r7}
 800ca18:	b083      	sub	sp, #12
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
 800ca1e:	460b      	mov	r3, r1
 800ca20:	70fb      	strb	r3, [r7, #3]
    {
    }
 800ca22:	bf00      	nop
 800ca24:	370c      	adds	r7, #12
 800ca26:	46bd      	mov	sp, r7
 800ca28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2c:	4770      	bx	lr

0800ca2e <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800ca2e:	b480      	push	{r7}
 800ca30:	b083      	sub	sp, #12
 800ca32:	af00      	add	r7, sp, #0
 800ca34:	6078      	str	r0, [r7, #4]
    {
    }
 800ca36:	bf00      	nop
 800ca38:	370c      	adds	r7, #12
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr

0800ca42 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800ca42:	b480      	push	{r7}
 800ca44:	b083      	sub	sp, #12
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	6078      	str	r0, [r7, #4]
    {
    }
 800ca4a:	bf00      	nop
 800ca4c:	370c      	adds	r7, #12
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr
	...

0800ca58 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800ca58:	b480      	push	{r7}
 800ca5a:	b083      	sub	sp, #12
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
    {
 800ca60:	4a04      	ldr	r2, [pc, #16]	; (800ca74 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	601a      	str	r2, [r3, #0]
    }
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	4618      	mov	r0, r3
 800ca6a:	370c      	adds	r7, #12
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr
 800ca74:	08025b74 	.word	0x08025b74

0800ca78 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
    }
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f7ff ffe9 	bl	800ca58 <_ZN8touchgfx15UIEventListenerD1Ev>
 800ca86:	2104      	movs	r1, #4
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f016 fd30 	bl	80234ee <_ZdlPvj>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	4618      	mov	r0, r3
 800ca92:	3708      	adds	r7, #8
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}

0800ca98 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800ca98:	b480      	push	{r7}
 800ca9a:	b083      	sub	sp, #12
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	460b      	mov	r3, r1
 800caa2:	70fb      	strb	r3, [r7, #3]
    {
    }
 800caa4:	bf00      	nop
 800caa6:	370c      	adds	r7, #12
 800caa8:	46bd      	mov	sp, r7
 800caaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caae:	4770      	bx	lr

0800cab0 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800cab0:	b480      	push	{r7}
 800cab2:	b083      	sub	sp, #12
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	683a      	ldr	r2, [r7, #0]
 800cabe:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800cac2:	6810      	ldr	r0, [r2, #0]
 800cac4:	6851      	ldr	r1, [r2, #4]
 800cac6:	c303      	stmia	r3!, {r0, r1}
    };
 800cac8:	bf00      	nop
 800caca:	370c      	adds	r7, #12
 800cacc:	46bd      	mov	sp, r7
 800cace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad2:	4770      	bx	lr

0800cad4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800cad4:	b480      	push	{r7}
 800cad6:	b083      	sub	sp, #12
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
    {
 800cadc:	4a04      	ldr	r2, [pc, #16]	; (800caf0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	601a      	str	r2, [r3, #0]
    }
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	4618      	mov	r0, r3
 800cae6:	370c      	adds	r7, #12
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr
 800caf0:	08025b5c 	.word	0x08025b5c

0800caf4 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
    }
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f7ff ffe9 	bl	800cad4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800cb02:	2104      	movs	r1, #4
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f016 fcf2 	bl	80234ee <_ZdlPvj>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3708      	adds	r7, #8
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800cb14:	b480      	push	{r7}
 800cb16:	af00      	add	r7, sp, #0
    {
        return instance;
 800cb18:	4b03      	ldr	r3, [pc, #12]	; (800cb28 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
    }
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb24:	4770      	bx	lr
 800cb26:	bf00      	nop
 800cb28:	2000a03c 	.word	0x2000a03c

0800cb2c <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800cb2c:	b480      	push	{r7}
 800cb2e:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800cb30:	4b0b      	ldr	r3, [pc, #44]	; (800cb60 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d008      	beq.n	800cb4e <_ZN8touchgfx3HAL3lcdEv+0x22>
 800cb3c:	4b08      	ldr	r3, [pc, #32]	; (800cb60 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d003      	beq.n	800cb4e <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800cb46:	4b06      	ldr	r3, [pc, #24]	; (800cb60 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb4c:	e002      	b.n	800cb54 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800cb4e:	4b04      	ldr	r3, [pc, #16]	; (800cb60 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	689b      	ldr	r3, [r3, #8]
        }
    }
 800cb54:	4618      	mov	r0, r3
 800cb56:	46bd      	mov	sp, r7
 800cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5c:	4770      	bx	lr
 800cb5e:	bf00      	nop
 800cb60:	2000a03c 	.word	0x2000a03c

0800cb64 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800cb64:	b480      	push	{r7}
 800cb66:	b083      	sub	sp, #12
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800cb6c:	4a07      	ldr	r2, [pc, #28]	; (800cb8c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	601a      	str	r2, [r3, #0]
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2200      	movs	r2, #0
 800cb76:	605a      	str	r2, [r3, #4]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	721a      	strb	r2, [r3, #8]
    {
    }
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	4618      	mov	r0, r3
 800cb82:	370c      	adds	r7, #12
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr
 800cb8c:	08025b38 	.word	0x08025b38

0800cb90 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800cb90:	b480      	push	{r7}
 800cb92:	b083      	sub	sp, #12
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
    {
 800cb98:	4a04      	ldr	r2, [pc, #16]	; (800cbac <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	601a      	str	r2, [r3, #0]
    }
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	4618      	mov	r0, r3
 800cba2:	370c      	adds	r7, #12
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr
 800cbac:	08025b38 	.word	0x08025b38

0800cbb0 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
    }
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f7ff ffe9 	bl	800cb90 <_ZN8touchgfx10TransitionD1Ev>
 800cbbe:	210c      	movs	r1, #12
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f016 fc94 	bl	80234ee <_ZdlPvj>
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3708      	adds	r7, #8
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}

0800cbd0 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800cbd0:	b480      	push	{r7}
 800cbd2:	b083      	sub	sp, #12
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
    {
    }
 800cbd8:	bf00      	nop
 800cbda:	370c      	adds	r7, #12
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe2:	4770      	bx	lr

0800cbe4 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800cbe4:	b480      	push	{r7}
 800cbe6:	b083      	sub	sp, #12
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
    {
    }
 800cbec:	bf00      	nop
 800cbee:	370c      	adds	r7, #12
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf6:	4770      	bx	lr

0800cbf8 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800cbf8:	b480      	push	{r7}
 800cbfa:	b083      	sub	sp, #12
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
    {
    }
 800cc00:	bf00      	nop
 800cc02:	370c      	adds	r7, #12
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr

0800cc0c <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 800cc14:	f007 fe7a 	bl	801490c <_ZN8touchgfx11Application11getInstanceEv>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	681a      	ldr	r2, [r3, #0]
 800cc1c:	3230      	adds	r2, #48	; 0x30
 800cc1e:	6812      	ldr	r2, [r2, #0]
 800cc20:	4618      	mov	r0, r3
 800cc22:	4790      	blx	r2
    }
 800cc24:	bf00      	nop
 800cc26:	3708      	adds	r7, #8
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}

0800cc2c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800cc2c:	b480      	push	{r7}
 800cc2e:	b083      	sub	sp, #12
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	683a      	ldr	r2, [r7, #0]
 800cc3a:	605a      	str	r2, [r3, #4]
    }
 800cc3c:	bf00      	nop
 800cc3e:	370c      	adds	r7, #12
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr

0800cc48 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	4a05      	ldr	r2, [pc, #20]	; (800cc68 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	601a      	str	r2, [r3, #0]
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f7ff fefd 	bl	800ca58 <_ZN8touchgfx15UIEventListenerD1Ev>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	4618      	mov	r0, r3
 800cc62:	3708      	adds	r7, #8
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}
 800cc68:	08027410 	.word	0x08027410

0800cc6c <_ZN8touchgfx11ApplicationD0Ev>:
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f7ff ffe7 	bl	800cc48 <_ZN8touchgfx11ApplicationD1Ev>
 800cc7a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f016 fc35 	bl	80234ee <_ZdlPvj>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	4618      	mov	r0, r3
 800cc88:	3708      	adds	r7, #8
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
	...

0800cc90 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b082      	sub	sp, #8
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f007 fe56 	bl	801494c <_ZN8touchgfx11ApplicationC1Ev>
 800cca0:	4a09      	ldr	r2, [pc, #36]	; (800ccc8 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	601a      	str	r2, [r3, #0]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	4a04      	ldr	r2, [pc, #16]	; (800cccc <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800ccba:	6013      	str	r3, [r2, #0]
    }
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3708      	adds	r7, #8
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	08025af4 	.word	0x08025af4
 800cccc:	2000a088 	.word	0x2000a088

0800ccd0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b082      	sub	sp, #8
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f000 f804 	bl	800cce6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800ccde:	bf00      	nop
 800cce0:	3708      	adds	r7, #8
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}

0800cce6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800cce6:	b580      	push	{r7, lr}
 800cce8:	b082      	sub	sp, #8
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d00f      	beq.n	800cd18 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	330c      	adds	r3, #12
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4610      	mov	r0, r2
 800cd0c:	4798      	blx	r3
 800cd0e:	4603      	mov	r3, r0
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d001      	beq.n	800cd18 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800cd14:	2301      	movs	r3, #1
 800cd16:	e000      	b.n	800cd1a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800cd18:	2300      	movs	r3, #0
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d00e      	beq.n	800cd3c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	3308      	adds	r3, #8
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4610      	mov	r0, r2
 800cd32:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2200      	movs	r2, #0
 800cd38:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800cd3c:	bf00      	nop
 800cd3e:	3708      	adds	r7, #8
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800cd44:	b480      	push	{r7}
 800cd46:	b083      	sub	sp, #12
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	683a      	ldr	r2, [r7, #0]
 800cd52:	601a      	str	r2, [r3, #0]
    }
 800cd54:	bf00      	nop
 800cd56:	370c      	adds	r7, #12
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr

0800cd60 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b082      	sub	sp, #8
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	4a05      	ldr	r2, [pc, #20]	; (800cd80 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	601a      	str	r2, [r3, #0]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7ff ff69 	bl	800cc48 <_ZN8touchgfx11ApplicationD1Ev>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3708      	adds	r7, #8
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}
 800cd80:	08025af4 	.word	0x08025af4

0800cd84 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b082      	sub	sp, #8
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f7ff ffe7 	bl	800cd60 <_ZN8touchgfx14MVPApplicationD1Ev>
 800cd92:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f016 fba9 	bl	80234ee <_ZdlPvj>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3708      	adds	r7, #8
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}
	...

0800cda8 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	4a08      	ldr	r2, [pc, #32]	; (800cdd4 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	601a      	str	r2, [r3, #0]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f000 fabd 	bl	800d33c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f7ff ffcb 	bl	800cd60 <_ZN8touchgfx14MVPApplicationD1Ev>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3708      	adds	r7, #8
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}
 800cdd4:	08025a98 	.word	0x08025a98

0800cdd8 <_ZN23FrontendApplicationBaseD0Ev>:
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f7ff ffe1 	bl	800cda8 <_ZN23FrontendApplicationBaseD1Ev>
 800cde6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f016 fb7f 	bl	80234ee <_ZdlPvj>
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3708      	adds	r7, #8
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}

0800cdfa <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800cdfa:	b480      	push	{r7}
 800cdfc:	b083      	sub	sp, #12
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2201      	movs	r2, #1
 800ce06:	721a      	strb	r2, [r3, #8]
    }
 800ce08:	bf00      	nop
 800ce0a:	370c      	adds	r7, #12
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr

0800ce14 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800ce14:	b480      	push	{r7}
 800ce16:	b083      	sub	sp, #12
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	683a      	ldr	r2, [r7, #0]
 800ce22:	605a      	str	r2, [r3, #4]
    }
 800ce24:	bf00      	nop
 800ce26:	370c      	adds	r7, #12
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr

0800ce30 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b084      	sub	sp, #16
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	60f8      	str	r0, [r7, #12]
 800ce38:	60b9      	str	r1, [r7, #8]
 800ce3a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f7ff ff26 	bl	800cc90 <_ZN8touchgfx14MVPApplicationC1Ev>
 800ce44:	4a13      	ldr	r2, [pc, #76]	; (800ce94 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	601a      	str	r2, [r3, #0]
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ce50:	4618      	mov	r0, r3
 800ce52:	f000 f89f 	bl	800cf94 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	687a      	ldr	r2, [r7, #4]
 800ce5a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	68ba      	ldr	r2, [r7, #8]
 800ce62:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 800ce66:	f7ff fe55 	bl	800cb14 <_ZN8touchgfx3HAL11getInstanceEv>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	681a      	ldr	r2, [r3, #0]
 800ce6e:	3208      	adds	r2, #8
 800ce70:	6812      	ldr	r2, [r2, #0]
 800ce72:	2101      	movs	r1, #1
 800ce74:	4618      	mov	r0, r3
 800ce76:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800ce78:	2000      	movs	r0, #0
 800ce7a:	f001 fd77 	bl	800e96c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800ce7e:	f7ff fe55 	bl	800cb2c <_ZN8touchgfx3HAL3lcdEv>
 800ce82:	4603      	mov	r3, r0
 800ce84:	4618      	mov	r0, r3
 800ce86:	f00f fa1a 	bl	801c2be <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3710      	adds	r7, #16
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}
 800ce94:	08025a98 	.word	0x08025a98

0800ce98 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	4618      	mov	r0, r3
 800cea6:	370c      	adds	r7, #12
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr

0800ceb0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b082      	sub	sp, #8
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	6039      	str	r1, [r7, #0]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	683a      	ldr	r2, [r7, #0]
 800cebe:	4611      	mov	r1, r2
 800cec0:	4618      	mov	r0, r3
 800cec2:	f7ff ffe9 	bl	800ce98 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	685a      	ldr	r2, [r3, #4]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	605a      	str	r2, [r3, #4]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	683a      	ldr	r2, [r7, #0]
 800ced2:	3308      	adds	r3, #8
 800ced4:	3208      	adds	r2, #8
 800ced6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ceda:	e883 0003 	stmia.w	r3, {r0, r1}
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	4618      	mov	r0, r3
 800cee2:	3708      	adds	r7, #8
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 800cee8:	b590      	push	{r4, r7, lr}
 800ceea:	b089      	sub	sp, #36	; 0x24
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenNoTransitionImpl);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800cef6:	4b10      	ldr	r3, [pc, #64]	; (800cf38 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 800cef8:	61bb      	str	r3, [r7, #24]
 800cefa:	2300      	movs	r3, #0
 800cefc:	61fb      	str	r3, [r7, #28]
 800cefe:	f107 0008 	add.w	r0, r7, #8
 800cf02:	f107 0318 	add.w	r3, r7, #24
 800cf06:	cb0c      	ldmia	r3, {r2, r3}
 800cf08:	6879      	ldr	r1, [r7, #4]
 800cf0a:	f000 f85f 	bl	800cfcc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cf0e:	f107 0308 	add.w	r3, r7, #8
 800cf12:	4619      	mov	r1, r3
 800cf14:	4620      	mov	r0, r4
 800cf16:	f7ff ffcb 	bl	800ceb0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cf1a:	f107 0308 	add.w	r3, r7, #8
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f000 fa0c 	bl	800d33c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cf30:	bf00      	nop
 800cf32:	3724      	adds	r7, #36	; 0x24
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd90      	pop	{r4, r7, pc}
 800cf38:	0800cf3d 	.word	0x0800cf3d

0800cf3c <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b084      	sub	sp, #16
 800cf40:	af02      	add	r7, sp, #8
 800cf42:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cf50:	461a      	mov	r2, r3
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800cf58:	9300      	str	r3, [sp, #0]
 800cf5a:	4b04      	ldr	r3, [pc, #16]	; (800cf6c <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 800cf5c:	4804      	ldr	r0, [pc, #16]	; (800cf70 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 800cf5e:	f000 f867 	bl	800d030 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cf62:	bf00      	nop
 800cf64:	3708      	adds	r7, #8
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}
 800cf6a:	bf00      	nop
 800cf6c:	2000a07c 	.word	0x2000a07c
 800cf70:	2000a078 	.word	0x2000a078

0800cf74 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
 800cf7c:	4a04      	ldr	r2, [pc, #16]	; (800cf90 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	601a      	str	r2, [r3, #0]
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	4618      	mov	r0, r3
 800cf86:	370c      	adds	r7, #12
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr
 800cf90:	08025b5c 	.word	0x08025b5c

0800cf94 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b082      	sub	sp, #8
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f7ff ffe8 	bl	800cf74 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800cfa4:	4a08      	ldr	r2, [pc, #32]	; (800cfc8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	601a      	str	r2, [r3, #0]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2200      	movs	r2, #0
 800cfae:	605a      	str	r2, [r3, #4]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	609a      	str	r2, [r3, #8]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	60da      	str	r2, [r3, #12]
    {
    }
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3708      	adds	r7, #8
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	08025adc 	.word	0x08025adc

0800cfcc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b084      	sub	sp, #16
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	4639      	mov	r1, r7
 800cfd8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f7ff ffc8 	bl	800cf74 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800cfe4:	4a08      	ldr	r2, [pc, #32]	; (800d008 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	68ba      	ldr	r2, [r7, #8]
 800cfee:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	3308      	adds	r3, #8
 800cff4:	463a      	mov	r2, r7
 800cff6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cffa:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	4618      	mov	r0, r3
 800d002:	3710      	adds	r7, #16
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}
 800d008:	08025adc 	.word	0x08025adc

0800d00c <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	4618      	mov	r0, r3
 800d018:	f7ff fda4 	bl	800cb64 <_ZN8touchgfx10TransitionC1Ev>
 800d01c:	4a03      	ldr	r2, [pc, #12]	; (800d02c <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	601a      	str	r2, [r3, #0]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	4618      	mov	r0, r3
 800d026:	3708      	adds	r7, #8
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}
 800d02c:	08025a74 	.word	0x08025a74

0800d030 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800d030:	b590      	push	{r4, r7, lr}
 800d032:	b08f      	sub	sp, #60	; 0x3c
 800d034:	af00      	add	r7, sp, #0
 800d036:	60f8      	str	r0, [r7, #12]
 800d038:	60b9      	str	r1, [r7, #8]
 800d03a:	607a      	str	r2, [r7, #4]
 800d03c:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	689a      	ldr	r2, [r3, #8]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	689b      	ldr	r3, [r3, #8]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	3320      	adds	r3, #32
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	4610      	mov	r0, r2
 800d04e:	4798      	blx	r3
 800d050:	4603      	mov	r3, r0
 800d052:	f5b3 7f49 	cmp.w	r3, #804	; 0x324
 800d056:	d205      	bcs.n	800d064 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800d058:	4b7e      	ldr	r3, [pc, #504]	; (800d254 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800d05a:	4a7f      	ldr	r2, [pc, #508]	; (800d258 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800d05c:	21a7      	movs	r1, #167	; 0xa7
 800d05e:	487f      	ldr	r0, [pc, #508]	; (800d25c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800d060:	f016 fb70 	bl	8023744 <__assert_func>
 800d064:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	685a      	ldr	r2, [r3, #4]
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	685b      	ldr	r3, [r3, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	3320      	adds	r3, #32
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4610      	mov	r0, r2
 800d076:	4798      	blx	r3
 800d078:	4603      	mov	r3, r0
 800d07a:	2b0f      	cmp	r3, #15
 800d07c:	d805      	bhi.n	800d08a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800d07e:	4b78      	ldr	r3, [pc, #480]	; (800d260 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800d080:	4a75      	ldr	r2, [pc, #468]	; (800d258 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800d082:	21a8      	movs	r1, #168	; 0xa8
 800d084:	4875      	ldr	r0, [pc, #468]	; (800d25c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800d086:	f016 fb5d 	bl	8023744 <__assert_func>
 800d08a:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	68da      	ldr	r2, [r3, #12]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	68db      	ldr	r3, [r3, #12]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	3320      	adds	r3, #32
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	4610      	mov	r0, r2
 800d09c:	4798      	blx	r3
 800d09e:	4603      	mov	r3, r0
 800d0a0:	2b0b      	cmp	r3, #11
 800d0a2:	d805      	bhi.n	800d0b0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800d0a4:	4b6f      	ldr	r3, [pc, #444]	; (800d264 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800d0a6:	4a6c      	ldr	r2, [pc, #432]	; (800d258 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800d0a8:	21a9      	movs	r1, #169	; 0xa9
 800d0aa:	486c      	ldr	r0, [pc, #432]	; (800d25c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800d0ac:	f016 fb4a 	bl	8023744 <__assert_func>
 800d0b0:	bf00      	nop
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	627b      	str	r3, [r7, #36]	; 0x24
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d0be:	f007 fc25 	bl	801490c <_ZN8touchgfx11Application11getInstanceEv>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f007 fc27 	bl	8014918 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d0ca:	6a3b      	ldr	r3, [r7, #32]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d008      	beq.n	800d0e4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 800d0d2:	6a3b      	ldr	r3, [r7, #32]
 800d0d4:	681a      	ldr	r2, [r3, #0]
 800d0d6:	6a3b      	ldr	r3, [r7, #32]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	330c      	adds	r3, #12
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4610      	mov	r0, r2
 800d0e2:	4798      	blx	r3
    if (*currentTrans)
 800d0e4:	6a3b      	ldr	r3, [r7, #32]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d007      	beq.n	800d0fc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 800d0ec:	6a3b      	ldr	r3, [r7, #32]
 800d0ee:	681a      	ldr	r2, [r3, #0]
 800d0f0:	6a3b      	ldr	r3, [r7, #32]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4610      	mov	r0, r2
 800d0fa:	4798      	blx	r3
    if (*currentScreen)
 800d0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d008      	beq.n	800d116 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 800d104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	3314      	adds	r3, #20
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	4610      	mov	r0, r2
 800d114:	4798      	blx	r3
    if (*currentPresenter)
 800d116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d008      	beq.n	800d130 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 800d11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d120:	681a      	ldr	r2, [r3, #0]
 800d122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	3304      	adds	r3, #4
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	4610      	mov	r0, r2
 800d12e:	4798      	blx	r3
    if (*currentScreen)
 800d130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d007      	beq.n	800d148 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 800d138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d13a:	681a      	ldr	r2, [r3, #0]
 800d13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4610      	mov	r0, r2
 800d146:	4798      	blx	r3
    if (*currentPresenter)
 800d148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d008      	beq.n	800d162 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800d150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d152:	681a      	ldr	r2, [r3, #0]
 800d154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	3308      	adds	r3, #8
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	4610      	mov	r0, r2
 800d160:	4798      	blx	r3
}
 800d162:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	68db      	ldr	r3, [r3, #12]
 800d168:	2100      	movs	r1, #0
 800d16a:	4618      	mov	r0, r3
 800d16c:	f000 f87c 	bl	800d268 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800d170:	4603      	mov	r3, r0
 800d172:	4619      	mov	r1, r3
 800d174:	200c      	movs	r0, #12
 800d176:	f7ff fc21 	bl	800c9bc <_ZnwjPv>
 800d17a:	4604      	mov	r4, r0
 800d17c:	4620      	mov	r0, r4
 800d17e:	f7ff ff45 	bl	800d00c <_ZN8touchgfx12NoTransitionC1Ev>
 800d182:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	689b      	ldr	r3, [r3, #8]
 800d188:	2100      	movs	r1, #0
 800d18a:	4618      	mov	r0, r3
 800d18c:	f000 f87f 	bl	800d28e <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 800d190:	4603      	mov	r3, r0
 800d192:	4619      	mov	r1, r3
 800d194:	f44f 7049 	mov.w	r0, #804	; 0x324
 800d198:	f7ff fc10 	bl	800c9bc <_ZnwjPv>
 800d19c:	4604      	mov	r4, r0
 800d19e:	4620      	mov	r0, r4
 800d1a0:	f001 ff40 	bl	800f024 <_ZN10screenViewC1Ev>
 800d1a4:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	685b      	ldr	r3, [r3, #4]
 800d1aa:	2100      	movs	r1, #0
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f000 f881 	bl	800d2b4 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	2010      	movs	r0, #16
 800d1b8:	f7ff fc00 	bl	800c9bc <_ZnwjPv>
 800d1bc:	4604      	mov	r4, r0
 800d1be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d1c0:	4620      	mov	r0, r4
 800d1c2:	f001 fe3d 	bl	800ee40 <_ZN15screenPresenterC1ER10screenView>
 800d1c6:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1cc:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1d2:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1d8:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d002      	beq.n	800d1e6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 800d1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1e2:	3304      	adds	r3, #4
 800d1e4:	e000      	b.n	800d1e8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d1ec:	f7ff fdaa 	bl	800cd44 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f2:	3304      	adds	r3, #4
 800d1f4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7ff fe0c 	bl	800ce14 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d200:	4618      	mov	r0, r3
 800d202:	f000 f86a 	bl	800d2da <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 800d206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d208:	61fb      	str	r3, [r7, #28]
 800d20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d20c:	61bb      	str	r3, [r7, #24]
 800d20e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d210:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d212:	69fb      	ldr	r3, [r7, #28]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	330c      	adds	r3, #12
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	69f8      	ldr	r0, [r7, #28]
 800d21c:	4798      	blx	r3
    newPresenter->activate();
 800d21e:	69bb      	ldr	r3, [r7, #24]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	69b8      	ldr	r0, [r7, #24]
 800d226:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d228:	6979      	ldr	r1, [r7, #20]
 800d22a:	69f8      	ldr	r0, [r7, #28]
 800d22c:	f008 ff85 	bl	801613a <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	3310      	adds	r3, #16
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	6978      	ldr	r0, [r7, #20]
 800d23a:	4798      	blx	r3
    newTransition->invalidate();
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	3314      	adds	r3, #20
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	6978      	ldr	r0, [r7, #20]
 800d246:	4798      	blx	r3
}
 800d248:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800d24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	373c      	adds	r7, #60	; 0x3c
 800d250:	46bd      	mov	sp, r7
 800d252:	bd90      	pop	{r4, r7, pc}
 800d254:	08024ec8 	.word	0x08024ec8
 800d258:	08024f58 	.word	0x08024f58
 800d25c:	0802505c 	.word	0x0802505c
 800d260:	080250a0 	.word	0x080250a0
 800d264:	08025144 	.word	0x08025144

0800d268 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800d268:	b580      	push	{r7, lr}
 800d26a:	b082      	sub	sp, #8
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	460b      	mov	r3, r1
 800d272:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	3324      	adds	r3, #36	; 0x24
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	887a      	ldrh	r2, [r7, #2]
 800d27e:	4611      	mov	r1, r2
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	4798      	blx	r3
 800d284:	4603      	mov	r3, r0
    }
 800d286:	4618      	mov	r0, r3
 800d288:	3708      	adds	r7, #8
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}

0800d28e <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 800d28e:	b580      	push	{r7, lr}
 800d290:	b082      	sub	sp, #8
 800d292:	af00      	add	r7, sp, #0
 800d294:	6078      	str	r0, [r7, #4]
 800d296:	460b      	mov	r3, r1
 800d298:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	3324      	adds	r3, #36	; 0x24
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	887a      	ldrh	r2, [r7, #2]
 800d2a4:	4611      	mov	r1, r2
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	4798      	blx	r3
 800d2aa:	4603      	mov	r3, r0
    }
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3708      	adds	r7, #8
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}

0800d2b4 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b082      	sub	sp, #8
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	460b      	mov	r3, r1
 800d2be:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	3324      	adds	r3, #36	; 0x24
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	887a      	ldrh	r2, [r7, #2]
 800d2ca:	4611      	mov	r1, r2
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	4798      	blx	r3
 800d2d0:	4603      	mov	r3, r0
    }
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3708      	adds	r7, #8
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}

0800d2da <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800d2da:	b480      	push	{r7}
 800d2dc:	b083      	sub	sp, #12
 800d2de:	af00      	add	r7, sp, #0
 800d2e0:	6078      	str	r0, [r7, #4]
 800d2e2:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	683a      	ldr	r2, [r7, #0]
 800d2e8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800d2ea:	bf00      	nop
 800d2ec:	370c      	adds	r7, #12
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f4:	4770      	bx	lr
	...

0800d2f8 <_ZN8touchgfx12NoTransitionD1Ev>:
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	4a05      	ldr	r2, [pc, #20]	; (800d318 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	601a      	str	r2, [r3, #0]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	4618      	mov	r0, r3
 800d30a:	f7ff fc41 	bl	800cb90 <_ZN8touchgfx10TransitionD1Ev>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	4618      	mov	r0, r3
 800d312:	3708      	adds	r7, #8
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	08025a74 	.word	0x08025a74

0800d31c <_ZN8touchgfx12NoTransitionD0Ev>:
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b082      	sub	sp, #8
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f7ff ffe7 	bl	800d2f8 <_ZN8touchgfx12NoTransitionD1Ev>
 800d32a:	210c      	movs	r1, #12
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f016 f8de 	bl	80234ee <_ZdlPvj>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	4618      	mov	r0, r3
 800d336:	3708      	adds	r7, #8
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	4a05      	ldr	r2, [pc, #20]	; (800d35c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	601a      	str	r2, [r3, #0]
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	4618      	mov	r0, r3
 800d34e:	f7ff fbc1 	bl	800cad4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	4618      	mov	r0, r3
 800d356:	3708      	adds	r7, #8
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	08025adc 	.word	0x08025adc

0800d360 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f7ff ffe7 	bl	800d33c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800d36e:	2110      	movs	r1, #16
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f016 f8bc 	bl	80234ee <_ZdlPvj>
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	4618      	mov	r0, r3
 800d37a:	3708      	adds	r7, #8
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800d380:	b580      	push	{r7, lr}
 800d382:	b082      	sub	sp, #8
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	685b      	ldr	r3, [r3, #4]
 800d38c:	687a      	ldr	r2, [r7, #4]
 800d38e:	68d2      	ldr	r2, [r2, #12]
 800d390:	1052      	asrs	r2, r2, #1
 800d392:	1899      	adds	r1, r3, r2
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	68db      	ldr	r3, [r3, #12]
 800d398:	f003 0301 	and.w	r3, r3, #1
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d102      	bne.n	800d3a6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	689b      	ldr	r3, [r3, #8]
 800d3a4:	e00a      	b.n	800d3bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	685b      	ldr	r3, [r3, #4]
 800d3aa:	687a      	ldr	r2, [r7, #4]
 800d3ac:	68d2      	ldr	r2, [r2, #12]
 800d3ae:	1052      	asrs	r2, r2, #1
 800d3b0:	4413      	add	r3, r2
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	687a      	ldr	r2, [r7, #4]
 800d3b6:	6892      	ldr	r2, [r2, #8]
 800d3b8:	4413      	add	r3, r2
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	4608      	mov	r0, r1
 800d3be:	4798      	blx	r3
    }
 800d3c0:	bf00      	nop
 800d3c2:	3708      	adds	r7, #8
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}

0800d3c8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800d3c8:	b480      	push	{r7}
 800d3ca:	b083      	sub	sp, #12
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d010      	beq.n	800d3fa <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	689b      	ldr	r3, [r3, #8]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d107      	bne.n	800d3f0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	68db      	ldr	r3, [r3, #12]
 800d3e4:	f003 0301 	and.w	r3, r3, #1
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d101      	bne.n	800d3f0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	e000      	b.n	800d3f2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	2b01      	cmp	r3, #1
 800d3f4:	d001      	beq.n	800d3fa <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	e000      	b.n	800d3fc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800d3fa:	2300      	movs	r3, #0
    }
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	370c      	adds	r7, #12
 800d400:	46bd      	mov	sp, r7
 800d402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d406:	4770      	bx	lr

0800d408 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFrom24BitRGB
     */
    colortype(uint32_t col)
 800d408:	b480      	push	{r7}
 800d40a:	b083      	sub	sp, #12
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	6039      	str	r1, [r7, #0]
    {
        color = col;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	683a      	ldr	r2, [r7, #0]
 800d416:	601a      	str	r2, [r3, #0]
    }
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	4618      	mov	r0, r3
 800d41c:	370c      	adds	r7, #12
 800d41e:	46bd      	mov	sp, r7
 800d420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d424:	4770      	bx	lr

0800d426 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800d426:	b480      	push	{r7}
 800d428:	b083      	sub	sp, #12
 800d42a:	af00      	add	r7, sp, #0
 800d42c:	6078      	str	r0, [r7, #4]
    {
        x = 0;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2200      	movs	r2, #0
 800d432:	801a      	strh	r2, [r3, #0]
        y = 0;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2200      	movs	r2, #0
 800d438:	805a      	strh	r2, [r3, #2]
        width = 0;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2200      	movs	r2, #0
 800d43e:	809a      	strh	r2, [r3, #4]
        height = 0;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2200      	movs	r2, #0
 800d444:	80da      	strh	r2, [r3, #6]
    }
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	4618      	mov	r0, r3
 800d44a:	370c      	adds	r7, #12
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr

0800d454 <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800d454:	b480      	push	{r7}
 800d456:	b085      	sub	sp, #20
 800d458:	af00      	add	r7, sp, #0
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	4608      	mov	r0, r1
 800d45e:	4611      	mov	r1, r2
 800d460:	461a      	mov	r2, r3
 800d462:	4603      	mov	r3, r0
 800d464:	817b      	strh	r3, [r7, #10]
 800d466:	460b      	mov	r3, r1
 800d468:	813b      	strh	r3, [r7, #8]
 800d46a:	4613      	mov	r3, r2
 800d46c:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	897a      	ldrh	r2, [r7, #10]
 800d472:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	893a      	ldrh	r2, [r7, #8]
 800d478:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	88fa      	ldrh	r2, [r7, #6]
 800d47e:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	8b3a      	ldrh	r2, [r7, #24]
 800d484:	80da      	strh	r2, [r3, #6]
    }
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	4618      	mov	r0, r3
 800d48a:	3714      	adds	r7, #20
 800d48c:	46bd      	mov	sp, r7
 800d48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d492:	4770      	bx	lr

0800d494 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800d494:	b480      	push	{r7}
 800d496:	b083      	sub	sp, #12
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	460b      	mov	r3, r1
 800d49e:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	887a      	ldrh	r2, [r7, #2]
 800d4a4:	801a      	strh	r2, [r3, #0]
    {
    }
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	370c      	adds	r7, #12
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr

0800d4b4 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b084      	sub	sp, #16
 800d4b8:	af02      	add	r7, sp, #8
 800d4ba:	6078      	str	r0, [r7, #4]
        : rect(0, 0, 0, 0),
          parent(0),
          nextSibling(0),
          nextDrawChainElement(0),
          touchable(false),
          visible(true)
 800d4bc:	4a13      	ldr	r2, [pc, #76]	; (800d50c <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	601a      	str	r2, [r3, #0]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	1d18      	adds	r0, r3, #4
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	9300      	str	r3, [sp, #0]
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	2100      	movs	r1, #0
 800d4d0:	f7ff ffc0 	bl	800d454 <_ZN8touchgfx4RectC1Essss>
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	330c      	adds	r3, #12
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f7ff ffa4 	bl	800d426 <_ZN8touchgfx4RectC1Ev>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	615a      	str	r2, [r3, #20]
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	619a      	str	r2, [r3, #24]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	61da      	str	r2, [r3, #28]
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	4618      	mov	r0, r3
 800d504:	3708      	adds	r7, #8
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
 800d50a:	bf00      	nop
 800d50c:	08027500 	.word	0x08027500

0800d510 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800d510:	b480      	push	{r7}
 800d512:	b083      	sub	sp, #12
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
    {
 800d518:	4a04      	ldr	r2, [pc, #16]	; (800d52c <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	601a      	str	r2, [r3, #0]
    }
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	4618      	mov	r0, r3
 800d522:	370c      	adds	r7, #12
 800d524:	46bd      	mov	sp, r7
 800d526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52a:	4770      	bx	lr
 800d52c:	08027500 	.word	0x08027500

0800d530 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800d530:	b580      	push	{r7, lr}
 800d532:	b082      	sub	sp, #8
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
    }
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f7ff ffe9 	bl	800d510 <_ZN8touchgfx8DrawableD1Ev>
 800d53e:	2128      	movs	r1, #40	; 0x28
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f015 ffd4 	bl	80234ee <_ZdlPvj>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	4618      	mov	r0, r3
 800d54a:	3708      	adds	r7, #8
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800d550:	b480      	push	{r7}
 800d552:	b083      	sub	sp, #12
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800d558:	2300      	movs	r3, #0
    }
 800d55a:	4618      	mov	r0, r3
 800d55c:	370c      	adds	r7, #12
 800d55e:	46bd      	mov	sp, r7
 800d560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d564:	4770      	bx	lr

0800d566 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800d566:	b580      	push	{r7, lr}
 800d568:	b084      	sub	sp, #16
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	60f8      	str	r0, [r7, #12]
 800d56e:	4608      	mov	r0, r1
 800d570:	4611      	mov	r1, r2
 800d572:	461a      	mov	r2, r3
 800d574:	4603      	mov	r3, r0
 800d576:	817b      	strh	r3, [r7, #10]
 800d578:	460b      	mov	r3, r1
 800d57a:	813b      	strh	r3, [r7, #8]
 800d57c:	4613      	mov	r3, r2
 800d57e:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800d580:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800d584:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d588:	4619      	mov	r1, r3
 800d58a:	68f8      	ldr	r0, [r7, #12]
 800d58c:	f000 f82a 	bl	800d5e4 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800d590:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800d594:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d598:	4619      	mov	r1, r3
 800d59a:	68f8      	ldr	r0, [r7, #12]
 800d59c:	f000 f87e 	bl	800d69c <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800d5a0:	bf00      	nop
 800d5a2:	3710      	adds	r7, #16
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800d5a8:	b480      	push	{r7}
 800d5aa:	b083      	sub	sp, #12
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	460b      	mov	r3, r1
 800d5b2:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	887a      	ldrh	r2, [r7, #2]
 800d5b8:	809a      	strh	r2, [r3, #4]
    }
 800d5ba:	bf00      	nop
 800d5bc:	370c      	adds	r7, #12
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c4:	4770      	bx	lr

0800d5c6 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800d5c6:	b480      	push	{r7}
 800d5c8:	b083      	sub	sp, #12
 800d5ca:	af00      	add	r7, sp, #0
 800d5cc:	6078      	str	r0, [r7, #4]
 800d5ce:	460b      	mov	r3, r1
 800d5d0:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	887a      	ldrh	r2, [r7, #2]
 800d5d6:	80da      	strh	r2, [r3, #6]
    }
 800d5d8:	bf00      	nop
 800d5da:	370c      	adds	r7, #12
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e2:	4770      	bx	lr

0800d5e4 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b082      	sub	sp, #8
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	807b      	strh	r3, [r7, #2]
 800d5f0:	4613      	mov	r3, r2
 800d5f2:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	332c      	adds	r3, #44	; 0x2c
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d600:	4611      	mov	r1, r2
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	4798      	blx	r3
        setY(y);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	3330      	adds	r3, #48	; 0x30
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f9b7 2000 	ldrsh.w	r2, [r7]
 800d612:	4611      	mov	r1, r2
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	4798      	blx	r3
    }
 800d618:	bf00      	nop
 800d61a:	3708      	adds	r7, #8
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800d620:	b480      	push	{r7}
 800d622:	b083      	sub	sp, #12
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	460b      	mov	r3, r1
 800d62a:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	887a      	ldrh	r2, [r7, #2]
 800d630:	811a      	strh	r2, [r3, #8]
    }
 800d632:	bf00      	nop
 800d634:	370c      	adds	r7, #12
 800d636:	46bd      	mov	sp, r7
 800d638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63c:	4770      	bx	lr

0800d63e <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800d63e:	b480      	push	{r7}
 800d640:	b083      	sub	sp, #12
 800d642:	af00      	add	r7, sp, #0
 800d644:	6078      	str	r0, [r7, #4]
 800d646:	460b      	mov	r3, r1
 800d648:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	887a      	ldrh	r2, [r7, #2]
 800d64e:	815a      	strh	r2, [r3, #10]
    }
 800d650:	bf00      	nop
 800d652:	370c      	adds	r7, #12
 800d654:	46bd      	mov	sp, r7
 800d656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65a:	4770      	bx	lr

0800d65c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800d65c:	b480      	push	{r7}
 800d65e:	b083      	sub	sp, #12
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
    {
    }
 800d664:	bf00      	nop
 800d666:	370c      	adds	r7, #12
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	4770      	bx	lr

0800d670 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
 800d670:	b480      	push	{r7}
 800d672:	b083      	sub	sp, #12
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	6039      	str	r1, [r7, #0]
    {
    }
 800d67a:	bf00      	nop
 800d67c:	370c      	adds	r7, #12
 800d67e:	46bd      	mov	sp, r7
 800d680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d684:	4770      	bx	lr

0800d686 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
 800d686:	b480      	push	{r7}
 800d688:	b083      	sub	sp, #12
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	6078      	str	r0, [r7, #4]
 800d68e:	6039      	str	r1, [r7, #0]
    {
    }
 800d690:	bf00      	nop
 800d692:	370c      	adds	r7, #12
 800d694:	46bd      	mov	sp, r7
 800d696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69a:	4770      	bx	lr

0800d69c <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b082      	sub	sp, #8
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	807b      	strh	r3, [r7, #2]
 800d6a8:	4613      	mov	r3, r2
 800d6aa:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	3334      	adds	r3, #52	; 0x34
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d6b8:	4611      	mov	r1, r2
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	4798      	blx	r3
        setHeight(height);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	3338      	adds	r3, #56	; 0x38
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f9b7 2000 	ldrsh.w	r2, [r7]
 800d6ca:	4611      	mov	r1, r2
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	4798      	blx	r3
    }
 800d6d0:	bf00      	nop
 800d6d2:	3708      	adds	r7, #8
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}

0800d6d8 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 800d6d8:	b480      	push	{r7}
 800d6da:	b083      	sub	sp, #12
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
 800d6e0:	6039      	str	r1, [r7, #0]
    {
    }
 800d6e2:	bf00      	nop
 800d6e4:	370c      	adds	r7, #12
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ec:	4770      	bx	lr

0800d6ee <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800d6ee:	b480      	push	{r7}
 800d6f0:	b083      	sub	sp, #12
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	6078      	str	r0, [r7, #4]
    {
    }
 800d6f6:	bf00      	nop
 800d6f8:	370c      	adds	r7, #12
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d700:	4770      	bx	lr

0800d702 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 800d702:	b480      	push	{r7}
 800d704:	b083      	sub	sp, #12
 800d706:	af00      	add	r7, sp, #0
 800d708:	6078      	str	r0, [r7, #4]
 800d70a:	460b      	mov	r3, r1
 800d70c:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	78fa      	ldrb	r2, [r7, #3]
 800d712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800d716:	bf00      	nop
 800d718:	370c      	adds	r7, #12
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr

0800d722 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800d722:	b480      	push	{r7}
 800d724:	b083      	sub	sp, #12
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800d730:	4618      	mov	r0, r3
 800d732:	370c      	adds	r7, #12
 800d734:	46bd      	mov	sp, r7
 800d736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73a:	4770      	bx	lr

0800d73c <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800d73c:	b480      	push	{r7}
 800d73e:	b083      	sub	sp, #12
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800d74a:	4618      	mov	r0, r3
 800d74c:	370c      	adds	r7, #12
 800d74e:	46bd      	mov	sp, r7
 800d750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d754:	4770      	bx	lr

0800d756 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800d756:	b580      	push	{r7, lr}
 800d758:	b082      	sub	sp, #8
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	6078      	str	r0, [r7, #4]
 800d75e:	460b      	mov	r3, r1
 800d760:	807b      	strh	r3, [r7, #2]
 800d762:	4613      	mov	r3, r2
 800d764:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	3350      	adds	r3, #80	; 0x50
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	8879      	ldrh	r1, [r7, #2]
 800d770:	687a      	ldr	r2, [r7, #4]
 800d772:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800d776:	b292      	uxth	r2, r2
 800d778:	1a8a      	subs	r2, r1, r2
 800d77a:	b292      	uxth	r2, r2
 800d77c:	b210      	sxth	r0, r2
 800d77e:	8839      	ldrh	r1, [r7, #0]
 800d780:	687a      	ldr	r2, [r7, #4]
 800d782:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800d786:	b292      	uxth	r2, r2
 800d788:	1a8a      	subs	r2, r1, r2
 800d78a:	b292      	uxth	r2, r2
 800d78c:	b212      	sxth	r2, r2
 800d78e:	4601      	mov	r1, r0
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	4798      	blx	r3
    }
 800d794:	bf00      	nop
 800d796:	3708      	adds	r7, #8
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800d79c:	b480      	push	{r7}
 800d79e:	b083      	sub	sp, #12
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d7aa:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d7b2:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d7ba:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800d7bc:	bf00      	nop
 800d7be:	370c      	adds	r7, #12
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr

0800d7c8 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b084      	sub	sp, #16
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	60f8      	str	r0, [r7, #12]
 800d7d0:	60b9      	str	r1, [r7, #8]
 800d7d2:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800d7d4:	68f8      	ldr	r0, [r7, #12]
 800d7d6:	f7ff ffe1 	bl	800d79c <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681a      	ldr	r2, [r3, #0]
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	68fa      	ldr	r2, [r7, #12]
 800d7e6:	601a      	str	r2, [r3, #0]
    }
 800d7e8:	bf00      	nop
 800d7ea:	3710      	adds	r7, #16
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}

0800d7f0 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b082      	sub	sp, #8
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
    {
 800d7f8:	4a06      	ldr	r2, [pc, #24]	; (800d814 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	601a      	str	r2, [r3, #0]
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	3304      	adds	r3, #4
 800d802:	4618      	mov	r0, r3
 800d804:	f000 fe34 	bl	800e470 <_ZN8touchgfx9ContainerD1Ev>
    }
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	4618      	mov	r0, r3
 800d80c:	3708      	adds	r7, #8
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
 800d812:	bf00      	nop
 800d814:	080275f4 	.word	0x080275f4

0800d818 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800d818:	b580      	push	{r7, lr}
 800d81a:	b082      	sub	sp, #8
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
    }
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f7ff ffe5 	bl	800d7f0 <_ZN8touchgfx6ScreenD1Ev>
 800d826:	213c      	movs	r1, #60	; 0x3c
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f015 fe60 	bl	80234ee <_ZdlPvj>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	4618      	mov	r0, r3
 800d832:	3708      	adds	r7, #8
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800d838:	b480      	push	{r7}
 800d83a:	b083      	sub	sp, #12
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
    {
    }
 800d840:	bf00      	nop
 800d842:	370c      	adds	r7, #12
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr

0800d84c <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800d84c:	b480      	push	{r7}
 800d84e:	b083      	sub	sp, #12
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
    {
    }
 800d854:	bf00      	nop
 800d856:	370c      	adds	r7, #12
 800d858:	46bd      	mov	sp, r7
 800d85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85e:	4770      	bx	lr

0800d860 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800d860:	b480      	push	{r7}
 800d862:	b083      	sub	sp, #12
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
    {
    }
 800d868:	bf00      	nop
 800d86a:	370c      	adds	r7, #12
 800d86c:	46bd      	mov	sp, r7
 800d86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d872:	4770      	bx	lr

0800d874 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800d874:	b480      	push	{r7}
 800d876:	b083      	sub	sp, #12
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
    {
    }
 800d87c:	bf00      	nop
 800d87e:	370c      	adds	r7, #12
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr

0800d888 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800d888:	b480      	push	{r7}
 800d88a:	b083      	sub	sp, #12
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	460b      	mov	r3, r1
 800d892:	70fb      	strb	r3, [r7, #3]
    {
    }
 800d894:	bf00      	nop
 800d896:	370c      	adds	r7, #12
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr

0800d8a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	3304      	adds	r3, #4
 800d8ae:	6839      	ldr	r1, [r7, #0]
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f003 ff71 	bl	8011798 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800d8b6:	bf00      	nop
 800d8b8:	3708      	adds	r7, #8
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}

0800d8be <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800d8be:	b580      	push	{r7, lr}
 800d8c0:	b084      	sub	sp, #16
 800d8c2:	af00      	add	r7, sp, #0
 800d8c4:	60f8      	str	r0, [r7, #12]
 800d8c6:	607b      	str	r3, [r7, #4]
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	817b      	strh	r3, [r7, #10]
 800d8cc:	4613      	mov	r3, r2
 800d8ce:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f7ff ff25 	bl	800d722 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d008      	beq.n	800d8f0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f7ff ff2b 	bl	800d73c <_ZNK8touchgfx8Drawable11isTouchableEv>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d001      	beq.n	800d8f0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	e000      	b.n	800d8f2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d002      	beq.n	800d8fc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800d8f6:	68fa      	ldr	r2, [r7, #12]
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	601a      	str	r2, [r3, #0]
        }
    }
 800d8fc:	bf00      	nop
 800d8fe:	3710      	adds	r7, #16
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}

0800d904 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800d904:	b580      	push	{r7, lr}
 800d906:	b082      	sub	sp, #8
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	4618      	mov	r0, r3
 800d910:	f7ff fdd0 	bl	800d4b4 <_ZN8touchgfx8DrawableC1Ev>
 800d914:	4a03      	ldr	r2, [pc, #12]	; (800d924 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	601a      	str	r2, [r3, #0]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	4618      	mov	r0, r3
 800d91e:	3708      	adds	r7, #8
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}
 800d924:	08025c3c 	.word	0x08025c3c

0800d928 <_ZN8touchgfx6WidgetD1Ev>:
 800d928:	b580      	push	{r7, lr}
 800d92a:	b082      	sub	sp, #8
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	4a05      	ldr	r2, [pc, #20]	; (800d948 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	601a      	str	r2, [r3, #0]
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	4618      	mov	r0, r3
 800d93a:	f7ff fde9 	bl	800d510 <_ZN8touchgfx8DrawableD1Ev>
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	4618      	mov	r0, r3
 800d942:	3708      	adds	r7, #8
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	08025c3c 	.word	0x08025c3c

0800d94c <_ZN8touchgfx6WidgetD0Ev>:
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b082      	sub	sp, #8
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f7ff ffe7 	bl	800d928 <_ZN8touchgfx6WidgetD1Ev>
 800d95a:	2128      	movs	r1, #40	; 0x28
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f015 fdc6 	bl	80234ee <_ZdlPvj>
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	4618      	mov	r0, r3
 800d966:	3708      	adds	r7, #8
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b082      	sub	sp, #8
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	4618      	mov	r0, r3
 800d978:	2326      	movs	r3, #38	; 0x26
 800d97a:	461a      	mov	r2, r3
 800d97c:	2100      	movs	r1, #0
 800d97e:	f015 ff8b 	bl	8023898 <memset>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	4618      	mov	r0, r3
 800d986:	f7ff ffbd 	bl	800d904 <_ZN8touchgfx6WidgetC1Ev>
 800d98a:	4a0a      	ldr	r2, [pc, #40]	; (800d9b4 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	601a      	str	r2, [r3, #0]
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2200      	movs	r2, #0
 800d994:	629a      	str	r2, [r3, #40]	; 0x28
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2200      	movs	r2, #0
 800d99a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2101      	movs	r1, #1
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7ff fead 	bl	800d702 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3708      	adds	r7, #8
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	08026f30 	.word	0x08026f30

0800d9b8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 800d9b8:	b480      	push	{r7}
 800d9ba:	b083      	sub	sp, #12
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	683a      	ldr	r2, [r7, #0]
 800d9c6:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800d9c8:	bf00      	nop
 800d9ca:	370c      	adds	r7, #12
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d2:	4770      	bx	lr

0800d9d4 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b082      	sub	sp, #8
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	4a05      	ldr	r2, [pc, #20]	; (800d9f4 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	601a      	str	r2, [r3, #0]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f7ff ff9f 	bl	800d928 <_ZN8touchgfx6WidgetD1Ev>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3708      	adds	r7, #8
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}
 800d9f4:	08026f30 	.word	0x08026f30

0800d9f8 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b082      	sub	sp, #8
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f7ff ffe7 	bl	800d9d4 <_ZN8touchgfx14AbstractButtonD1Ev>
 800da06:	2130      	movs	r1, #48	; 0x30
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f015 fd70 	bl	80234ee <_ZdlPvj>
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	4618      	mov	r0, r3
 800da12:	3708      	adds	r7, #8
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}

0800da18 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 800da18:	b580      	push	{r7, lr}
 800da1a:	b082      	sub	sp, #8
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	4618      	mov	r0, r3
 800da24:	f7ff ffa2 	bl	800d96c <_ZN8touchgfx14AbstractButtonC1Ev>
 800da28:	4a0c      	ldr	r2, [pc, #48]	; (800da5c <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	601a      	str	r2, [r3, #0]
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	332e      	adds	r3, #46	; 0x2e
 800da32:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800da36:	4618      	mov	r0, r3
 800da38:	f7ff fd2c 	bl	800d494 <_ZN8touchgfx6BitmapC1Et>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	3330      	adds	r3, #48	; 0x30
 800da40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800da44:	4618      	mov	r0, r3
 800da46:	f7ff fd25 	bl	800d494 <_ZN8touchgfx6BitmapC1Et>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	22ff      	movs	r2, #255	; 0xff
 800da4e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	4618      	mov	r0, r3
 800da56:	3708      	adds	r7, #8
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}
 800da5c:	0802717c 	.word	0x0802717c

0800da60 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800da60:	b580      	push	{r7, lr}
 800da62:	b082      	sub	sp, #8
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	4618      	mov	r0, r3
 800da6c:	2326      	movs	r3, #38	; 0x26
 800da6e:	461a      	mov	r2, r3
 800da70:	2100      	movs	r1, #0
 800da72:	f015 ff11 	bl	8023898 <memset>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	4618      	mov	r0, r3
 800da7a:	f7ff ff43 	bl	800d904 <_ZN8touchgfx6WidgetC1Ev>
 800da7e:	4a09      	ldr	r2, [pc, #36]	; (800daa4 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	601a      	str	r2, [r3, #0]
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	22ff      	movs	r2, #255	; 0xff
 800da88:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	3328      	adds	r3, #40	; 0x28
 800da90:	2100      	movs	r1, #0
 800da92:	4618      	mov	r0, r3
 800da94:	f7ff fcb8 	bl	800d408 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	4618      	mov	r0, r3
 800da9c:	3708      	adds	r7, #8
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}
 800daa2:	bf00      	nop
 800daa4:	080270b4 	.word	0x080270b4

0800daa8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 800daa8:	b480      	push	{r7}
 800daaa:	b083      	sub	sp, #12
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	683a      	ldr	r2, [r7, #0]
 800dab6:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800dab8:	bf00      	nop
 800daba:	370c      	adds	r7, #12
 800dabc:	46bd      	mov	sp, r7
 800dabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac2:	4770      	bx	lr

0800dac4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     *
     * @note This function is not available to call before the LCD has been setup, because the
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 800dac4:	b590      	push	{r4, r7, lr}
 800dac6:	b083      	sub	sp, #12
 800dac8:	af00      	add	r7, sp, #0
 800daca:	4603      	mov	r3, r0
 800dacc:	71fb      	strb	r3, [r7, #7]
 800dace:	460b      	mov	r3, r1
 800dad0:	71bb      	strb	r3, [r7, #6]
 800dad2:	4613      	mov	r3, r2
 800dad4:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 800dad6:	f7ff f81d 	bl	800cb14 <_ZN8touchgfx3HAL11getInstanceEv>
 800dada:	4603      	mov	r3, r0
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d105      	bne.n	800daec <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 800dae0:	4b0a      	ldr	r3, [pc, #40]	; (800db0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 800dae2:	4a0b      	ldr	r2, [pc, #44]	; (800db10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 800dae4:	2135      	movs	r1, #53	; 0x35
 800dae6:	480b      	ldr	r0, [pc, #44]	; (800db14 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 800dae8:	f015 fe2c 	bl	8023744 <__assert_func>
 800daec:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 800daee:	f7ff f81d 	bl	800cb2c <_ZN8touchgfx3HAL3lcdEv>
 800daf2:	6803      	ldr	r3, [r0, #0]
 800daf4:	3328      	adds	r3, #40	; 0x28
 800daf6:	681c      	ldr	r4, [r3, #0]
 800daf8:	797b      	ldrb	r3, [r7, #5]
 800dafa:	79ba      	ldrb	r2, [r7, #6]
 800dafc:	79f9      	ldrb	r1, [r7, #7]
 800dafe:	47a0      	blx	r4
 800db00:	4603      	mov	r3, r0
    }
 800db02:	4618      	mov	r0, r3
 800db04:	370c      	adds	r7, #12
 800db06:	46bd      	mov	sp, r7
 800db08:	bd90      	pop	{r4, r7, pc}
 800db0a:	bf00      	nop
 800db0c:	080251e8 	.word	0x080251e8
 800db10:	0802522c 	.word	0x0802522c
 800db14:	08025288 	.word	0x08025288

0800db18 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bitmap (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bitmap = Bitmap())
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	6039      	str	r1, [r7, #0]
        : Widget(), alpha(255)
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	4618      	mov	r0, r3
 800db26:	2326      	movs	r3, #38	; 0x26
 800db28:	461a      	mov	r2, r3
 800db2a:	2100      	movs	r1, #0
 800db2c:	f015 feb4 	bl	8023898 <memset>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	4618      	mov	r0, r3
 800db34:	f7ff fee6 	bl	800d904 <_ZN8touchgfx6WidgetC1Ev>
 800db38:	4a0b      	ldr	r2, [pc, #44]	; (800db68 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x50>)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	601a      	str	r2, [r3, #0]
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	3326      	adds	r3, #38	; 0x26
 800db42:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800db46:	4618      	mov	r0, r3
 800db48:	f7ff fca4 	bl	800d494 <_ZN8touchgfx6BitmapC1Et>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	22ff      	movs	r2, #255	; 0xff
 800db50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bitmap);
 800db54:	6839      	ldr	r1, [r7, #0]
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f005 f9f2 	bl	8012f40 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	4618      	mov	r0, r3
 800db60:	3708      	adds	r7, #8
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}
 800db66:	bf00      	nop
 800db68:	080272c8 	.word	0x080272c8

0800db6c <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800db6c:	b480      	push	{r7}
 800db6e:	b083      	sub	sp, #12
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
 800db74:	460b      	mov	r3, r1
 800db76:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800db78:	4a06      	ldr	r2, [pc, #24]	; (800db94 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	601a      	str	r2, [r3, #0]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	887a      	ldrh	r2, [r7, #2]
 800db82:	809a      	strh	r2, [r3, #4]
    }
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	4618      	mov	r0, r3
 800db88:	370c      	adds	r7, #12
 800db8a:	46bd      	mov	sp, r7
 800db8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db90:	4770      	bx	lr
 800db92:	bf00      	nop
 800db94:	08025a04 	.word	0x08025a04

0800db98 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800db98:	b580      	push	{r7, lr}
 800db9a:	b082      	sub	sp, #8
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	4618      	mov	r0, r3
 800dba4:	2326      	movs	r3, #38	; 0x26
 800dba6:	461a      	mov	r2, r3
 800dba8:	2100      	movs	r1, #0
 800dbaa:	f015 fe75 	bl	8023898 <memset>
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f7ff fea7 	bl	800d904 <_ZN8touchgfx6WidgetC1Ev>
 800dbb6:	4a14      	ldr	r2, [pc, #80]	; (800dc08 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	601a      	str	r2, [r3, #0]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	3328      	adds	r3, #40	; 0x28
 800dbc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7ff ffd1 	bl	800db6c <_ZN8touchgfx9TypedTextC1Et>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	3330      	adds	r3, #48	; 0x30
 800dbce:	2100      	movs	r1, #0
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f7ff fc19 	bl	800d408 <_ZN8touchgfx9colortypeC1Em>
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2200      	movs	r2, #0
 800dbda:	869a      	strh	r2, [r3, #52]	; 0x34
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	22ff      	movs	r2, #255	; 0xff
 800dbe0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3708      	adds	r7, #8
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	0802700c 	.word	0x0802700c

0800dc0c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b082      	sub	sp, #8
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	4a08      	ldr	r2, [pc, #32]	; (800dc38 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	601a      	str	r2, [r3, #0]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	3328      	adds	r3, #40	; 0x28
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f7fe fd0e 	bl	800c640 <_ZN8touchgfx9TypedTextD1Ev>
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	4618      	mov	r0, r3
 800dc28:	f7ff fe7e 	bl	800d928 <_ZN8touchgfx6WidgetD1Ev>
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	4618      	mov	r0, r3
 800dc30:	3708      	adds	r7, #8
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}
 800dc36:	bf00      	nop
 800dc38:	0802700c 	.word	0x0802700c

0800dc3c <_ZN8touchgfx8TextAreaD0Ev>:
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f7ff ffe1 	bl	800dc0c <_ZN8touchgfx8TextAreaD1Ev>
 800dc4a:	213c      	movs	r1, #60	; 0x3c
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f015 fc4e 	bl	80234ee <_ZdlPvj>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	4618      	mov	r0, r3
 800dc56:	3708      	adds	r7, #8
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}

0800dc5c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b082      	sub	sp, #8
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	4618      	mov	r0, r3
 800dc68:	f7ff ff96 	bl	800db98 <_ZN8touchgfx8TextAreaC1Ev>
 800dc6c:	4a05      	ldr	r2, [pc, #20]	; (800dc84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	601a      	str	r2, [r3, #0]
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2200      	movs	r2, #0
 800dc76:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3708      	adds	r7, #8
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
 800dc82:	bf00      	nop
 800dc84:	08027220 	.word	0x08027220

0800dc88 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>:
     *
     * @param  dm The new display mode.
     *
     * @see DisplayMode, getDisplayMode
     */
    virtual void setDisplayMode(DisplayMode dm)
 800dc88:	b480      	push	{r7}
 800dc8a:	b083      	sub	sp, #12
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	460b      	mov	r3, r1
 800dc92:	70fb      	strb	r3, [r7, #3]
    {
        displayMode = dm;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	78fa      	ldrb	r2, [r7, #3]
 800dc98:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    }
 800dc9c:	bf00      	nop
 800dc9e:	370c      	adds	r7, #12
 800dca0:	46bd      	mov	sp, r7
 800dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca6:	4770      	bx	lr

0800dca8 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b084      	sub	sp, #16
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	60f8      	str	r0, [r7, #12]
 800dcb0:	60b9      	str	r1, [r7, #8]
 800dcb2:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bitmapPressed;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	687a      	ldr	r2, [r7, #4]
 800dcb8:	8812      	ldrh	r2, [r2, #0]
 800dcba:	869a      	strh	r2, [r3, #52]	; 0x34
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	687a      	ldr	r2, [r7, #4]
 800dcc0:	68b9      	ldr	r1, [r7, #8]
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f004 ffca 	bl	8012c5c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 800dcc8:	bf00      	nop
 800dcca:	3710      	adds	r7, #16
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}

0800dcd0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b082      	sub	sp, #8
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	4a05      	ldr	r2, [pc, #20]	; (800dcf0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	601a      	str	r2, [r3, #0]
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7ff fd85 	bl	800d7f0 <_ZN8touchgfx6ScreenD1Ev>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	4618      	mov	r0, r3
 800dcea:	3708      	adds	r7, #8
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}
 800dcf0:	08025bf0 	.word	0x08025bf0

0800dcf4 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b082      	sub	sp, #8
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f7ff ffe7 	bl	800dcd0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 800dd02:	2140      	movs	r1, #64	; 0x40
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f015 fbf2 	bl	80234ee <_ZdlPvj>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	3708      	adds	r7, #8
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}

0800dd14 <_ZN14screenViewBaseD1Ev>:

class screenViewBase : public touchgfx::View<screenPresenter>
{
public:
    screenViewBase();
    virtual ~screenViewBase() {}
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b082      	sub	sp, #8
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	4a25      	ldr	r2, [pc, #148]	; (800ddb4 <_ZN14screenViewBaseD1Ev+0xa0>)
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	601a      	str	r2, [r3, #0]
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f000 fb7f 	bl	800e42c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800dd34:	4618      	mov	r0, r3
 800dd36:	f000 fc6d 	bl	800e614 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800dd40:	4618      	mov	r0, r3
 800dd42:	f000 fc67 	bl	800e614 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f000 f859 	bl	800de04 <_ZN8touchgfx6ButtonD1Ev>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f000 fc39 	bl	800e5d0 <_ZN8touchgfx12ToggleButtonD1Ev>
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800dd64:	4618      	mov	r0, r3
 800dd66:	f000 fc11 	bl	800e58c <_ZN8touchgfx5ImageD1Ev>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dd70:	4618      	mov	r0, r3
 800dd72:	f000 fc0b 	bl	800e58c <_ZN8touchgfx5ImageD1Ev>
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f000 fc05 	bl	800e58c <_ZN8touchgfx5ImageD1Ev>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	33f8      	adds	r3, #248	; 0xf8
 800dd86:	4618      	mov	r0, r3
 800dd88:	f000 fc00 	bl	800e58c <_ZN8touchgfx5ImageD1Ev>
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	336c      	adds	r3, #108	; 0x6c
 800dd90:	4618      	mov	r0, r3
 800dd92:	f000 fbd3 	bl	800e53c <_ZN8touchgfx12DigitalClockD1Ev>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	3340      	adds	r3, #64	; 0x40
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f000 fb8a 	bl	800e4b4 <_ZN8touchgfx3BoxD1Ev>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	4618      	mov	r0, r3
 800dda4:	f7ff ff94 	bl	800dcd0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3708      	adds	r7, #8
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}
 800ddb2:	bf00      	nop
 800ddb4:	08025b9c 	.word	0x08025b9c

0800ddb8 <_ZN14screenViewBaseD0Ev>:
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b082      	sub	sp, #8
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f7ff ffa7 	bl	800dd14 <_ZN14screenViewBaseD1Ev>
 800ddc6:	f44f 7129 	mov.w	r1, #676	; 0x2a4
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f015 fb8f 	bl	80234ee <_ZdlPvj>
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3708      	adds	r7, #8
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}

0800ddda <_ZN14screenViewBase22updateOnOffButtonStateEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void updateOnOffButtonState()
 800ddda:	b480      	push	{r7}
 800dddc:	b083      	sub	sp, #12
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in screen
    }
 800dde2:	bf00      	nop
 800dde4:	370c      	adds	r7, #12
 800dde6:	46bd      	mov	sp, r7
 800dde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddec:	4770      	bx	lr

0800ddee <_ZN14screenViewBase22updateSetUpButtonStateEv>:

    virtual void updateSetUpButtonState()
 800ddee:	b480      	push	{r7}
 800ddf0:	b083      	sub	sp, #12
 800ddf2:	af00      	add	r7, sp, #0
 800ddf4:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in screen
    }
 800ddf6:	bf00      	nop
 800ddf8:	370c      	adds	r7, #12
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de00:	4770      	bx	lr
	...

0800de04 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 800de04:	b580      	push	{r7, lr}
 800de06:	b082      	sub	sp, #8
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	4a05      	ldr	r2, [pc, #20]	; (800de24 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	601a      	str	r2, [r3, #0]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	4618      	mov	r0, r3
 800de16:	f7ff fddd 	bl	800d9d4 <_ZN8touchgfx14AbstractButtonD1Ev>
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	4618      	mov	r0, r3
 800de1e:	3708      	adds	r7, #8
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}
 800de24:	0802717c 	.word	0x0802717c

0800de28 <_ZN8touchgfx6ButtonD0Ev>:
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	f7ff ffe7 	bl	800de04 <_ZN8touchgfx6ButtonD1Ev>
 800de36:	2134      	movs	r1, #52	; 0x34
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f015 fb58 	bl	80234ee <_ZdlPvj>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	4618      	mov	r0, r3
 800de42:	3708      	adds	r7, #8
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}

0800de48 <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 800de48:	b580      	push	{r7, lr}
 800de4a:	b082      	sub	sp, #8
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	4618      	mov	r0, r3
 800de54:	f7ff fde0 	bl	800da18 <_ZN8touchgfx6ButtonC1Ev>
 800de58:	4a07      	ldr	r2, [pc, #28]	; (800de78 <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	601a      	str	r2, [r3, #0]
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	3334      	adds	r3, #52	; 0x34
 800de62:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800de66:	4618      	mov	r0, r3
 800de68:	f7ff fb14 	bl	800d494 <_ZN8touchgfx6BitmapC1Et>
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	4618      	mov	r0, r3
 800de70:	3708      	adds	r7, #8
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}
 800de76:	bf00      	nop
 800de78:	08026f9c 	.word	0x08026f9c

0800de7c <_ZN14screenViewBaseC1Ev>:
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

screenViewBase::screenViewBase() :
 800de7c:	b590      	push	{r4, r7, lr}
 800de7e:	b0a1      	sub	sp, #132	; 0x84
 800de80:	af02      	add	r7, sp, #8
 800de82:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &screenViewBase::buttonCallbackHandler)
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	4618      	mov	r0, r3
 800de88:	f000 fa6a 	bl	800e360 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 800de8c:	4ae0      	ldr	r2, [pc, #896]	; (800e210 <_ZN14screenViewBaseC1Ev+0x394>)
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	601a      	str	r2, [r3, #0]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	3340      	adds	r3, #64	; 0x40
 800de96:	4618      	mov	r0, r3
 800de98:	f7ff fde2 	bl	800da60 <_ZN8touchgfx3BoxC1Ev>
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	336c      	adds	r3, #108	; 0x6c
 800dea0:	4618      	mov	r0, r3
 800dea2:	f003 fb37 	bl	8011514 <_ZN8touchgfx12DigitalClockC1Ev>
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f103 04f8 	add.w	r4, r3, #248	; 0xf8
 800deac:	f107 0310 	add.w	r3, r7, #16
 800deb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800deb4:	4618      	mov	r0, r3
 800deb6:	f7ff faed 	bl	800d494 <_ZN8touchgfx6BitmapC1Et>
 800deba:	f107 0310 	add.w	r3, r7, #16
 800debe:	4619      	mov	r1, r3
 800dec0:	4620      	mov	r0, r4
 800dec2:	f7ff fe29 	bl	800db18 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f503 7492 	add.w	r4, r3, #292	; 0x124
 800decc:	f107 0314 	add.w	r3, r7, #20
 800ded0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ded4:	4618      	mov	r0, r3
 800ded6:	f7ff fadd 	bl	800d494 <_ZN8touchgfx6BitmapC1Et>
 800deda:	f107 0314 	add.w	r3, r7, #20
 800dede:	4619      	mov	r1, r3
 800dee0:	4620      	mov	r0, r4
 800dee2:	f7ff fe19 	bl	800db18 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 800deec:	f107 0318 	add.w	r3, r7, #24
 800def0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800def4:	4618      	mov	r0, r3
 800def6:	f7ff facd 	bl	800d494 <_ZN8touchgfx6BitmapC1Et>
 800defa:	f107 0318 	add.w	r3, r7, #24
 800defe:	4619      	mov	r1, r3
 800df00:	4620      	mov	r0, r4
 800df02:	f7ff fe09 	bl	800db18 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f503 74be 	add.w	r4, r3, #380	; 0x17c
 800df0c:	f107 031c 	add.w	r3, r7, #28
 800df10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800df14:	4618      	mov	r0, r3
 800df16:	f7ff fabd 	bl	800d494 <_ZN8touchgfx6BitmapC1Et>
 800df1a:	f107 031c 	add.w	r3, r7, #28
 800df1e:	4619      	mov	r1, r3
 800df20:	4620      	mov	r0, r4
 800df22:	f7ff fdf9 	bl	800db18 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800df2c:	4618      	mov	r0, r3
 800df2e:	f7ff ff8b 	bl	800de48 <_ZN8touchgfx12ToggleButtonC1Ev>
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800df38:	4618      	mov	r0, r3
 800df3a:	f7ff fd6d 	bl	800da18 <_ZN8touchgfx6ButtonC1Ev>
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800df44:	4618      	mov	r0, r3
 800df46:	f7ff fe89 	bl	800dc5c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800df50:	4618      	mov	r0, r3
 800df52:	f7ff fe83 	bl	800dc5c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f503 7025 	add.w	r0, r3, #660	; 0x294
 800df5c:	4bad      	ldr	r3, [pc, #692]	; (800e214 <_ZN14screenViewBaseC1Ev+0x398>)
 800df5e:	623b      	str	r3, [r7, #32]
 800df60:	2300      	movs	r3, #0
 800df62:	627b      	str	r3, [r7, #36]	; 0x24
 800df64:	f107 0320 	add.w	r3, r7, #32
 800df68:	cb0c      	ldmia	r3, {r2, r3}
 800df6a:	6879      	ldr	r1, [r7, #4]
 800df6c:	f000 fa1e 	bl	800e3ac <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 240, 320);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800df76:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800df7a:	9300      	str	r3, [sp, #0]
 800df7c:	23f0      	movs	r3, #240	; 0xf0
 800df7e:	2200      	movs	r2, #0
 800df80:	2100      	movs	r1, #0
 800df82:	f7ff faf0 	bl	800d566 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800df8c:	2200      	movs	r2, #0
 800df8e:	2100      	movs	r1, #0
 800df90:	2000      	movs	r0, #0
 800df92:	f7ff fd97 	bl	800dac4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800df96:	4603      	mov	r3, r0
 800df98:	4619      	mov	r1, r3
 800df9a:	4620      	mov	r0, r4
 800df9c:	f7ff fd84 	bl	800daa8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    digitalClock1.setPosition(7, 16, 66, 31);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800dfa6:	231f      	movs	r3, #31
 800dfa8:	9300      	str	r3, [sp, #0]
 800dfaa:	2342      	movs	r3, #66	; 0x42
 800dfac:	2210      	movs	r2, #16
 800dfae:	2107      	movs	r1, #7
 800dfb0:	f7ff fad9 	bl	800d566 <_ZN8touchgfx8Drawable11setPositionEssss>
    digitalClock1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800dfba:	2200      	movs	r2, #0
 800dfbc:	2100      	movs	r1, #0
 800dfbe:	2000      	movs	r0, #0
 800dfc0:	f7ff fd80 	bl	800dac4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	4619      	mov	r1, r3
 800dfc8:	4620      	mov	r0, r4
 800dfca:	f003 f968 	bl	801129e <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>
    digitalClock1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800dfd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dfd8:	2100      	movs	r1, #0
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f7ff fdc6 	bl	800db6c <_ZN8touchgfx9TypedTextC1Et>
 800dfe0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dfe4:	4619      	mov	r1, r3
 800dfe6:	4620      	mov	r0, r4
 800dfe8:	f003 f99e 	bl	8011328 <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>
 800dfec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dff0:	4618      	mov	r0, r3
 800dff2:	f7fe fb25 	bl	800c640 <_ZN8touchgfx9TypedTextD1Ev>
    digitalClock1.displayLeadingZeroForHourIndicator(true);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	336c      	adds	r3, #108	; 0x6c
 800dffa:	2101      	movs	r1, #1
 800dffc:	4618      	mov	r0, r3
 800dffe:	f003 facb 	bl	8011598 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>
    digitalClock1.setDisplayMode(touchgfx::DigitalClock::DISPLAY_24_HOUR_NO_SECONDS);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	336c      	adds	r3, #108	; 0x6c
 800e006:	2101      	movs	r1, #1
 800e008:	4618      	mov	r0, r3
 800e00a:	f7ff fe3d 	bl	800dc88 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>
    digitalClock1.setTime24Hour(9, 10, 0);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800e014:	2300      	movs	r3, #0
 800e016:	220a      	movs	r2, #10
 800e018:	2109      	movs	r1, #9
 800e01a:	f003 fac0 	bl	801159e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>

    humImage.setXY(9, 160);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	33f8      	adds	r3, #248	; 0xf8
 800e022:	22a0      	movs	r2, #160	; 0xa0
 800e024:	2109      	movs	r1, #9
 800e026:	4618      	mov	r0, r3
 800e028:	f7ff fadc 	bl	800d5e4 <_ZN8touchgfx8Drawable5setXYEss>
    humImage.setBitmap(touchgfx::Bitmap(BITMAP_ICONS8_HUMIDITY_64_ID));
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f103 04f8 	add.w	r4, r3, #248	; 0xf8
 800e032:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e036:	2103      	movs	r1, #3
 800e038:	4618      	mov	r0, r3
 800e03a:	f7ff fa2b 	bl	800d494 <_ZN8touchgfx6BitmapC1Et>
 800e03e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e042:	4619      	mov	r1, r3
 800e044:	4620      	mov	r0, r4
 800e046:	f004 ff7b 	bl	8012f40 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    tempImage.setXY(-7, 47);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800e050:	222f      	movs	r2, #47	; 0x2f
 800e052:	f06f 0106 	mvn.w	r1, #6
 800e056:	4618      	mov	r0, r3
 800e058:	f7ff fac4 	bl	800d5e4 <_ZN8touchgfx8Drawable5setXYEss>
    tempImage.setBitmap(touchgfx::Bitmap(BITMAP_ICONS8_TEMPERATURE_96_ID));
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f503 7492 	add.w	r4, r3, #292	; 0x124
 800e062:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e066:	2106      	movs	r1, #6
 800e068:	4618      	mov	r0, r3
 800e06a:	f7ff fa13 	bl	800d494 <_ZN8touchgfx6BitmapC1Et>
 800e06e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e072:	4619      	mov	r1, r3
 800e074:	4620      	mov	r0, r4
 800e076:	f004 ff63 	bl	8012f40 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    wifiImage.setXY(185, 7);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e080:	2207      	movs	r2, #7
 800e082:	21b9      	movs	r1, #185	; 0xb9
 800e084:	4618      	mov	r0, r3
 800e086:	f7ff faad 	bl	800d5e4 <_ZN8touchgfx8Drawable5setXYEss>
    wifiImage.setBitmap(touchgfx::Bitmap(BITMAP_ICONS8_WI_FI_48_ID));
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 800e090:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e094:	2107      	movs	r1, #7
 800e096:	4618      	mov	r0, r3
 800e098:	f7ff f9fc 	bl	800d494 <_ZN8touchgfx6BitmapC1Et>
 800e09c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e0a0:	4619      	mov	r1, r3
 800e0a2:	4620      	mov	r0, r4
 800e0a4:	f004 ff4c 	bl	8012f40 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    celsiusImage.setXY(177, 79);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800e0ae:	224f      	movs	r2, #79	; 0x4f
 800e0b0:	21b1      	movs	r1, #177	; 0xb1
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f7ff fa96 	bl	800d5e4 <_ZN8touchgfx8Drawable5setXYEss>
    celsiusImage.setBitmap(touchgfx::Bitmap(BITMAP_ICONS8_CELSIUS_32_ID));
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f503 74be 	add.w	r4, r3, #380	; 0x17c
 800e0be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e0c2:	2102      	movs	r1, #2
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7ff f9e5 	bl	800d494 <_ZN8touchgfx6BitmapC1Et>
 800e0ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e0ce:	4619      	mov	r1, r3
 800e0d0:	4620      	mov	r0, r4
 800e0d2:	f004 ff35 	bl	8012f40 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    humOnOffButton.setXY(92, 251);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e0dc:	22fb      	movs	r2, #251	; 0xfb
 800e0de:	215c      	movs	r1, #92	; 0x5c
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7ff fa7f 	bl	800d5e4 <_ZN8touchgfx8Drawable5setXYEss>
    humOnOffButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_ON_ID));
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 800e0ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e0f0:	2100      	movs	r1, #0
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7ff f9ce 	bl	800d494 <_ZN8touchgfx6BitmapC1Et>
 800e0f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e0fc:	2101      	movs	r1, #1
 800e0fe:	4618      	mov	r0, r3
 800e100:	f7ff f9c8 	bl	800d494 <_ZN8touchgfx6BitmapC1Et>
 800e104:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800e108:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e10c:	4619      	mov	r1, r3
 800e10e:	4620      	mov	r0, r4
 800e110:	f7ff fdca 	bl	800dca8 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    humOnOffButton.setAction(buttonCallback);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800e120:	4619      	mov	r1, r3
 800e122:	4610      	mov	r0, r2
 800e124:	f7ff fc48 	bl	800d9b8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    setUpButton.setXY(17, 246);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800e12e:	22f6      	movs	r2, #246	; 0xf6
 800e130:	2111      	movs	r1, #17
 800e132:	4618      	mov	r0, r3
 800e134:	f7ff fa56 	bl	800d5e4 <_ZN8touchgfx8Drawable5setXYEss>
    setUpButton.setBitmaps(touchgfx::Bitmap(BITMAP_ICONS8_SETTINGS_48_ID), touchgfx::Bitmap(BITMAP_ICONS8_SETTINGS_48_ID));
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f503 74f0 	add.w	r4, r3, #480	; 0x1e0
 800e13e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e142:	2104      	movs	r1, #4
 800e144:	4618      	mov	r0, r3
 800e146:	f7ff f9a5 	bl	800d494 <_ZN8touchgfx6BitmapC1Et>
 800e14a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e14e:	2104      	movs	r1, #4
 800e150:	4618      	mov	r0, r3
 800e152:	f7ff f99f 	bl	800d494 <_ZN8touchgfx6BitmapC1Et>
 800e156:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800e15a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e15e:	4619      	mov	r1, r3
 800e160:	4620      	mov	r0, r4
 800e162:	f004 fd7b 	bl	8012c5c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    setUpButton.setAction(buttonCallback);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f503 72f0 	add.w	r2, r3, #480	; 0x1e0
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800e172:	4619      	mov	r1, r3
 800e174:	4610      	mov	r0, r2
 800e176:	f7ff fc1f 	bl	800d9b8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    humText.setXY(164, 180);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800e180:	22b4      	movs	r2, #180	; 0xb4
 800e182:	21a4      	movs	r1, #164	; 0xa4
 800e184:	4618      	mov	r0, r3
 800e186:	f7ff fa2d 	bl	800d5e4 <_ZN8touchgfx8Drawable5setXYEss>
    humText.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f503 7405 	add.w	r4, r3, #532	; 0x214
 800e190:	22ff      	movs	r2, #255	; 0xff
 800e192:	21ff      	movs	r1, #255	; 0xff
 800e194:	20ff      	movs	r0, #255	; 0xff
 800e196:	f7ff fc95 	bl	800dac4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800e19a:	4603      	mov	r3, r0
 800e19c:	663c      	str	r4, [r7, #96]	; 0x60
 800e19e:	60fb      	str	r3, [r7, #12]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 800e1a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e1a2:	68fa      	ldr	r2, [r7, #12]
 800e1a4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800e1a6:	bf00      	nop
    humText.setLinespacing(0);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800e1ae:	66bb      	str	r3, [r7, #104]	; 0x68
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 800e1b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e1b8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800e1bc:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800e1be:	bf00      	nop
    humText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f503 7405 	add.w	r4, r3, #532	; 0x214
 800e1c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e1ca:	2101      	movs	r1, #1
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f7ff fccd 	bl	800db6c <_ZN8touchgfx9TypedTextC1Et>
 800e1d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e1d6:	4619      	mov	r1, r3
 800e1d8:	4620      	mov	r0, r4
 800e1da:	f004 fd08 	bl	8012bee <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 800e1de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7fe fa2c 	bl	800c640 <_ZN8touchgfx9TypedTextD1Ev>

    tempText.setXY(156, 71);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800e1ee:	2247      	movs	r2, #71	; 0x47
 800e1f0:	219c      	movs	r1, #156	; 0x9c
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f7ff f9f6 	bl	800d5e4 <_ZN8touchgfx8Drawable5setXYEss>
    tempText.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f503 7415 	add.w	r4, r3, #596	; 0x254
 800e1fe:	22ff      	movs	r2, #255	; 0xff
 800e200:	21ff      	movs	r1, #255	; 0xff
 800e202:	20ff      	movs	r0, #255	; 0xff
 800e204:	f7ff fc5e 	bl	800dac4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800e208:	4603      	mov	r3, r0
 800e20a:	66fc      	str	r4, [r7, #108]	; 0x6c
 800e20c:	e004      	b.n	800e218 <_ZN14screenViewBaseC1Ev+0x39c>
 800e20e:	bf00      	nop
 800e210:	08025b9c 	.word	0x08025b9c
 800e214:	0800e31d 	.word	0x0800e31d
 800e218:	60bb      	str	r3, [r7, #8]
        this->color = color;
 800e21a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e21c:	68ba      	ldr	r2, [r7, #8]
 800e21e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800e220:	bf00      	nop
    tempText.setLinespacing(0);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800e228:	677b      	str	r3, [r7, #116]	; 0x74
 800e22a:	2300      	movs	r3, #0
 800e22c:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
        linespace = space;
 800e230:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e232:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 800e236:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800e238:	bf00      	nop
    tempText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID8));
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f503 7415 	add.w	r4, r3, #596	; 0x254
 800e240:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e244:	2102      	movs	r1, #2
 800e246:	4618      	mov	r0, r3
 800e248:	f7ff fc90 	bl	800db6c <_ZN8touchgfx9TypedTextC1Et>
 800e24c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e250:	4619      	mov	r1, r3
 800e252:	4620      	mov	r0, r4
 800e254:	f004 fccb 	bl	8012bee <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 800e258:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e25c:	4618      	mov	r0, r3
 800e25e:	f7fe f9ef 	bl	800c640 <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 800e262:	687a      	ldr	r2, [r7, #4]
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	3340      	adds	r3, #64	; 0x40
 800e268:	4619      	mov	r1, r3
 800e26a:	4610      	mov	r0, r2
 800e26c:	f7ff fb18 	bl	800d8a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(digitalClock1);
 800e270:	687a      	ldr	r2, [r7, #4]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	336c      	adds	r3, #108	; 0x6c
 800e276:	4619      	mov	r1, r3
 800e278:	4610      	mov	r0, r2
 800e27a:	f7ff fb11 	bl	800d8a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(humImage);
 800e27e:	687a      	ldr	r2, [r7, #4]
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	33f8      	adds	r3, #248	; 0xf8
 800e284:	4619      	mov	r1, r3
 800e286:	4610      	mov	r0, r2
 800e288:	f7ff fb0a 	bl	800d8a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempImage);
 800e28c:	687a      	ldr	r2, [r7, #4]
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800e294:	4619      	mov	r1, r3
 800e296:	4610      	mov	r0, r2
 800e298:	f7ff fb02 	bl	800d8a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(wifiImage);
 800e29c:	687a      	ldr	r2, [r7, #4]
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e2a4:	4619      	mov	r1, r3
 800e2a6:	4610      	mov	r0, r2
 800e2a8:	f7ff fafa 	bl	800d8a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(celsiusImage);
 800e2ac:	687a      	ldr	r2, [r7, #4]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	4610      	mov	r0, r2
 800e2b8:	f7ff faf2 	bl	800d8a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(humOnOffButton);
 800e2bc:	687a      	ldr	r2, [r7, #4]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e2c4:	4619      	mov	r1, r3
 800e2c6:	4610      	mov	r0, r2
 800e2c8:	f7ff faea 	bl	800d8a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(setUpButton);
 800e2cc:	687a      	ldr	r2, [r7, #4]
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	4610      	mov	r0, r2
 800e2d8:	f7ff fae2 	bl	800d8a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(humText);
 800e2dc:	687a      	ldr	r2, [r7, #4]
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800e2e4:	4619      	mov	r1, r3
 800e2e6:	4610      	mov	r0, r2
 800e2e8:	f7ff fada 	bl	800d8a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempText);
 800e2ec:	687a      	ldr	r2, [r7, #4]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	4610      	mov	r0, r2
 800e2f8:	f7ff fad2 	bl	800d8a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	4618      	mov	r0, r3
 800e300:	377c      	adds	r7, #124	; 0x7c
 800e302:	46bd      	mov	sp, r7
 800e304:	bd90      	pop	{r4, r7, pc}
 800e306:	bf00      	nop

0800e308 <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 800e308:	b480      	push	{r7}
 800e30a:	b083      	sub	sp, #12
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]

}
 800e310:	bf00      	nop
 800e312:	370c      	adds	r7, #12
 800e314:	46bd      	mov	sp, r7
 800e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31a:	4770      	bx	lr

0800e31c <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void screenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b082      	sub	sp, #8
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	6039      	str	r1, [r7, #0]
    if (&src == &humOnOffButton)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e32c:	683a      	ldr	r2, [r7, #0]
 800e32e:	429a      	cmp	r2, r3
 800e330:	d106      	bne.n	800e340 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Interaction1
        //When humOnOffButton clicked call virtual function
        //Call updateOnOffButtonState
        updateOnOffButtonState();
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	332c      	adds	r3, #44	; 0x2c
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	4798      	blx	r3
        //Interaction2
        //When setUpButton clicked call virtual function
        //Call updateSetUpButtonState
        updateSetUpButtonState();
    }
}
 800e33e:	e00b      	b.n	800e358 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
    else if (&src == &setUpButton)
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800e346:	683a      	ldr	r2, [r7, #0]
 800e348:	429a      	cmp	r2, r3
 800e34a:	d105      	bne.n	800e358 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
        updateSetUpButtonState();
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	3330      	adds	r3, #48	; 0x30
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	4798      	blx	r3
}
 800e358:	bf00      	nop
 800e35a:	3708      	adds	r7, #8
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}

0800e360 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 800e360:	b580      	push	{r7, lr}
 800e362:	b082      	sub	sp, #8
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	4618      	mov	r0, r3
 800e36c:	f007 fd6a 	bl	8015e44 <_ZN8touchgfx6ScreenC1Ev>
 800e370:	4a05      	ldr	r2, [pc, #20]	; (800e388 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	601a      	str	r2, [r3, #0]
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2200      	movs	r2, #0
 800e37a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	4618      	mov	r0, r3
 800e380:	3708      	adds	r7, #8
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}
 800e386:	bf00      	nop
 800e388:	08025bf0 	.word	0x08025bf0

0800e38c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800e38c:	b480      	push	{r7}
 800e38e:	b083      	sub	sp, #12
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	4a04      	ldr	r2, [pc, #16]	; (800e3a8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	601a      	str	r2, [r3, #0]
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	4618      	mov	r0, r3
 800e39e:	370c      	adds	r7, #12
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a6:	4770      	bx	lr
 800e3a8:	08025c24 	.word	0x08025c24

0800e3ac <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b084      	sub	sp, #16
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	60f8      	str	r0, [r7, #12]
 800e3b4:	60b9      	str	r1, [r7, #8]
 800e3b6:	4639      	mov	r1, r7
 800e3b8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f7ff ffe4 	bl	800e38c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800e3c4:	4a08      	ldr	r2, [pc, #32]	; (800e3e8 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	68ba      	ldr	r2, [r7, #8]
 800e3ce:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	3308      	adds	r3, #8
 800e3d4:	463a      	mov	r2, r7
 800e3d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e3da:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3710      	adds	r7, #16
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}
 800e3e8:	08025bd8 	.word	0x08025bd8

0800e3ec <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800e3ec:	b480      	push	{r7}
 800e3ee:	b083      	sub	sp, #12
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
    }
 800e3f4:	4a04      	ldr	r2, [pc, #16]	; (800e408 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	601a      	str	r2, [r3, #0]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	370c      	adds	r7, #12
 800e400:	46bd      	mov	sp, r7
 800e402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e406:	4770      	bx	lr
 800e408:	08025c24 	.word	0x08025c24

0800e40c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b082      	sub	sp, #8
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
    }
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f7ff ffe9 	bl	800e3ec <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800e41a:	2104      	movs	r1, #4
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f015 f866 	bl	80234ee <_ZdlPvj>
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	4618      	mov	r0, r3
 800e426:	3708      	adds	r7, #8
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}

0800e42c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b082      	sub	sp, #8
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
 800e434:	4a05      	ldr	r2, [pc, #20]	; (800e44c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	601a      	str	r2, [r3, #0]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	4618      	mov	r0, r3
 800e43e:	f7ff ffd5 	bl	800e3ec <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	4618      	mov	r0, r3
 800e446:	3708      	adds	r7, #8
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}
 800e44c:	08025bd8 	.word	0x08025bd8

0800e450 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800e450:	b580      	push	{r7, lr}
 800e452:	b082      	sub	sp, #8
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f7ff ffe7 	bl	800e42c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800e45e:	2110      	movs	r1, #16
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f015 f844 	bl	80234ee <_ZdlPvj>
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	4618      	mov	r0, r3
 800e46a:	3708      	adds	r7, #8
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}

0800e470 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800e470:	b580      	push	{r7, lr}
 800e472:	b082      	sub	sp, #8
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
 800e478:	4a05      	ldr	r2, [pc, #20]	; (800e490 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	601a      	str	r2, [r3, #0]
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	4618      	mov	r0, r3
 800e482:	f7ff f845 	bl	800d510 <_ZN8touchgfx8DrawableD1Ev>
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	4618      	mov	r0, r3
 800e48a:	3708      	adds	r7, #8
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}
 800e490:	0802671c 	.word	0x0802671c

0800e494 <_ZN8touchgfx9ContainerD0Ev>:
 800e494:	b580      	push	{r7, lr}
 800e496:	b082      	sub	sp, #8
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
 800e49c:	6878      	ldr	r0, [r7, #4]
 800e49e:	f7ff ffe7 	bl	800e470 <_ZN8touchgfx9ContainerD1Ev>
 800e4a2:	212c      	movs	r1, #44	; 0x2c
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f015 f822 	bl	80234ee <_ZdlPvj>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	3708      	adds	r7, #8
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	bd80      	pop	{r7, pc}

0800e4b4 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b082      	sub	sp, #8
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
 800e4bc:	4a05      	ldr	r2, [pc, #20]	; (800e4d4 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	601a      	str	r2, [r3, #0]
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f7ff fa2f 	bl	800d928 <_ZN8touchgfx6WidgetD1Ev>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3708      	adds	r7, #8
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}
 800e4d4:	080270b4 	.word	0x080270b4

0800e4d8 <_ZN8touchgfx3BoxD0Ev>:
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b082      	sub	sp, #8
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f7ff ffe7 	bl	800e4b4 <_ZN8touchgfx3BoxD1Ev>
 800e4e6:	212c      	movs	r1, #44	; 0x2c
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f015 f800 	bl	80234ee <_ZdlPvj>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	3708      	adds	r7, #8
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}

0800e4f8 <_ZN8touchgfx13AbstractClockD1Ev>:
 * Superclass of clock widgets. Allows the hour, minute and second of the clock to be set and
 * read.
 *
 * @see AnalogClock, DigitalClock
 */
class AbstractClock : public Container
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b082      	sub	sp, #8
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
 800e500:	4a05      	ldr	r2, [pc, #20]	; (800e518 <_ZN8touchgfx13AbstractClockD1Ev+0x20>)
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	601a      	str	r2, [r3, #0]
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	4618      	mov	r0, r3
 800e50a:	f7ff ffb1 	bl	800e470 <_ZN8touchgfx9ContainerD1Ev>
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	4618      	mov	r0, r3
 800e512:	3708      	adds	r7, #8
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}
 800e518:	080265c0 	.word	0x080265c0

0800e51c <_ZN8touchgfx13AbstractClockD0Ev>:
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b082      	sub	sp, #8
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f7ff ffe7 	bl	800e4f8 <_ZN8touchgfx13AbstractClockD1Ev>
 800e52a:	2130      	movs	r1, #48	; 0x30
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	f014 ffde 	bl	80234ee <_ZdlPvj>
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	4618      	mov	r0, r3
 800e536:	3708      	adds	r7, #8
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}

0800e53c <_ZN8touchgfx12DigitalClockD1Ev>:
class DigitalClock : public AbstractClock
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b082      	sub	sp, #8
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
 800e544:	4a08      	ldr	r2, [pc, #32]	; (800e568 <_ZN8touchgfx12DigitalClockD1Ev+0x2c>)
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	601a      	str	r2, [r3, #0]
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	3334      	adds	r3, #52	; 0x34
 800e54e:	4618      	mov	r0, r3
 800e550:	f000 f860 	bl	800e614 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	4618      	mov	r0, r3
 800e558:	f7ff ffce 	bl	800e4f8 <_ZN8touchgfx13AbstractClockD1Ev>
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	4618      	mov	r0, r3
 800e560:	3708      	adds	r7, #8
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
 800e566:	bf00      	nop
 800e568:	080264d8 	.word	0x080264d8

0800e56c <_ZN8touchgfx12DigitalClockD0Ev>:
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b082      	sub	sp, #8
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f7ff ffe1 	bl	800e53c <_ZN8touchgfx12DigitalClockD1Ev>
 800e57a:	218c      	movs	r1, #140	; 0x8c
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f014 ffb6 	bl	80234ee <_ZdlPvj>
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	4618      	mov	r0, r3
 800e586:	3708      	adds	r7, #8
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}

0800e58c <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b082      	sub	sp, #8
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	4a05      	ldr	r2, [pc, #20]	; (800e5ac <_ZN8touchgfx5ImageD1Ev+0x20>)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	601a      	str	r2, [r3, #0]
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	4618      	mov	r0, r3
 800e59e:	f7ff f9c3 	bl	800d928 <_ZN8touchgfx6WidgetD1Ev>
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3708      	adds	r7, #8
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}
 800e5ac:	080272c8 	.word	0x080272c8

0800e5b0 <_ZN8touchgfx5ImageD0Ev>:
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b082      	sub	sp, #8
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f7ff ffe7 	bl	800e58c <_ZN8touchgfx5ImageD1Ev>
 800e5be:	212c      	movs	r1, #44	; 0x2c
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f014 ff94 	bl	80234ee <_ZdlPvj>
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	3708      	adds	r7, #8
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	bd80      	pop	{r7, pc}

0800e5d0 <_ZN8touchgfx12ToggleButtonD1Ev>:
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b082      	sub	sp, #8
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
 800e5d8:	4a05      	ldr	r2, [pc, #20]	; (800e5f0 <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	601a      	str	r2, [r3, #0]
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f7ff fc0f 	bl	800de04 <_ZN8touchgfx6ButtonD1Ev>
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	3708      	adds	r7, #8
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}
 800e5f0:	08026f9c 	.word	0x08026f9c

0800e5f4 <_ZN8touchgfx12ToggleButtonD0Ev>:
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b082      	sub	sp, #8
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f7ff ffe7 	bl	800e5d0 <_ZN8touchgfx12ToggleButtonD1Ev>
 800e602:	2138      	movs	r1, #56	; 0x38
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f014 ff72 	bl	80234ee <_ZdlPvj>
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	4618      	mov	r0, r3
 800e60e:	3708      	adds	r7, #8
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}

0800e614 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 800e614:	b580      	push	{r7, lr}
 800e616:	b082      	sub	sp, #8
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	4a05      	ldr	r2, [pc, #20]	; (800e634 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	601a      	str	r2, [r3, #0]
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	4618      	mov	r0, r3
 800e626:	f7ff faf1 	bl	800dc0c <_ZN8touchgfx8TextAreaD1Ev>
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	4618      	mov	r0, r3
 800e62e:	3708      	adds	r7, #8
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}
 800e634:	08027220 	.word	0x08027220

0800e638 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800e638:	b580      	push	{r7, lr}
 800e63a:	b082      	sub	sp, #8
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f7ff ffe7 	bl	800e614 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800e646:	2140      	movs	r1, #64	; 0x40
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f014 ff50 	bl	80234ee <_ZdlPvj>
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	4618      	mov	r0, r3
 800e652:	3708      	adds	r7, #8
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}

0800e658 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800e658:	b580      	push	{r7, lr}
 800e65a:	b082      	sub	sp, #8
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
 800e660:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	685b      	ldr	r3, [r3, #4]
 800e666:	687a      	ldr	r2, [r7, #4]
 800e668:	68d2      	ldr	r2, [r2, #12]
 800e66a:	1052      	asrs	r2, r2, #1
 800e66c:	1898      	adds	r0, r3, r2
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	68db      	ldr	r3, [r3, #12]
 800e672:	f003 0301 	and.w	r3, r3, #1
 800e676:	2b00      	cmp	r3, #0
 800e678:	d102      	bne.n	800e680 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	689b      	ldr	r3, [r3, #8]
 800e67e:	e00a      	b.n	800e696 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	685b      	ldr	r3, [r3, #4]
 800e684:	687a      	ldr	r2, [r7, #4]
 800e686:	68d2      	ldr	r2, [r2, #12]
 800e688:	1052      	asrs	r2, r2, #1
 800e68a:	4413      	add	r3, r2
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	687a      	ldr	r2, [r7, #4]
 800e690:	6892      	ldr	r2, [r2, #8]
 800e692:	4413      	add	r3, r2
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	6839      	ldr	r1, [r7, #0]
 800e698:	4798      	blx	r3
    }
 800e69a:	bf00      	nop
 800e69c:	3708      	adds	r7, #8
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}

0800e6a2 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800e6a2:	b480      	push	{r7}
 800e6a4:	b083      	sub	sp, #12
 800e6a6:	af00      	add	r7, sp, #0
 800e6a8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	685b      	ldr	r3, [r3, #4]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d010      	beq.n	800e6d4 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	689b      	ldr	r3, [r3, #8]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d107      	bne.n	800e6ca <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	68db      	ldr	r3, [r3, #12]
 800e6be:	f003 0301 	and.w	r3, r3, #1
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d101      	bne.n	800e6ca <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	e000      	b.n	800e6cc <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	2b01      	cmp	r3, #1
 800e6ce:	d001      	beq.n	800e6d4 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	e000      	b.n	800e6d6 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800e6d4:	2300      	movs	r3, #0
    }
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	370c      	adds	r7, #12
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e0:	4770      	bx	lr
	...

0800e6e4 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	af00      	add	r7, sp, #0
    return bitmap_database;
 800e6e8:	4b02      	ldr	r3, [pc, #8]	; (800e6f4 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f2:	4770      	bx	lr
 800e6f4:	08025c98 	.word	0x08025c98

0800e6f8 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800e6f8:	b480      	push	{r7}
 800e6fa:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800e6fc:	230c      	movs	r3, #12
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	46bd      	mov	sp, r7
 800e702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e706:	4770      	bx	lr

0800e708 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800e708:	b480      	push	{r7}
 800e70a:	b085      	sub	sp, #20
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	60f8      	str	r0, [r7, #12]
 800e710:	460b      	mov	r3, r1
 800e712:	607a      	str	r2, [r7, #4]
 800e714:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 800e716:	2300      	movs	r3, #0
    }
 800e718:	4618      	mov	r0, r3
 800e71a:	3714      	adds	r7, #20
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr

0800e724 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800e72c:	2300      	movs	r3, #0
    }
 800e72e:	4618      	mov	r0, r3
 800e730:	370c      	adds	r7, #12
 800e732:	46bd      	mov	sp, r7
 800e734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e738:	4770      	bx	lr
	...

0800e73c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800e73c:	b480      	push	{r7}
 800e73e:	b085      	sub	sp, #20
 800e740:	af00      	add	r7, sp, #0
 800e742:	60f8      	str	r0, [r7, #12]
 800e744:	60b9      	str	r1, [r7, #8]
 800e746:	4613      	mov	r3, r2
 800e748:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 800e74a:	4a07      	ldr	r2, [pc, #28]	; (800e768 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	6013      	str	r3, [r2, #0]
        fonts = f;
 800e750:	4a06      	ldr	r2, [pc, #24]	; (800e76c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800e752:	68bb      	ldr	r3, [r7, #8]
 800e754:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800e756:	4a06      	ldr	r2, [pc, #24]	; (800e770 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800e758:	88fb      	ldrh	r3, [r7, #6]
 800e75a:	8013      	strh	r3, [r2, #0]
    }
 800e75c:	bf00      	nop
 800e75e:	3714      	adds	r7, #20
 800e760:	46bd      	mov	sp, r7
 800e762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e766:	4770      	bx	lr
 800e768:	2000a08c 	.word	0x2000a08c
 800e76c:	2000a094 	.word	0x2000a094
 800e770:	2000a090 	.word	0x2000a090

0800e774 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800e774:	b40e      	push	{r1, r2, r3}
 800e776:	b580      	push	{r7, lr}
 800e778:	b085      	sub	sp, #20
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800e77e:	f107 0320 	add.w	r3, r7, #32
 800e782:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	69fa      	ldr	r2, [r7, #28]
 800e788:	2100      	movs	r1, #0
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f006 ff10 	bl	80155b0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800e790:	4603      	mov	r3, r0
 800e792:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800e794:	89fb      	ldrh	r3, [r7, #14]
}
 800e796:	4618      	mov	r0, r3
 800e798:	3714      	adds	r7, #20
 800e79a:	46bd      	mov	sp, r7
 800e79c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e7a0:	b003      	add	sp, #12
 800e7a2:	4770      	bx	lr

0800e7a4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800e7a4:	b40c      	push	{r2, r3}
 800e7a6:	b580      	push	{r7, lr}
 800e7a8:	b084      	sub	sp, #16
 800e7aa:	af00      	add	r7, sp, #0
 800e7ac:	6078      	str	r0, [r7, #4]
 800e7ae:	460b      	mov	r3, r1
 800e7b0:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800e7b2:	f107 031c 	add.w	r3, r7, #28
 800e7b6:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800e7b8:	78f9      	ldrb	r1, [r7, #3]
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	69ba      	ldr	r2, [r7, #24]
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f006 fef6 	bl	80155b0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800e7c8:	89fb      	ldrh	r3, [r7, #14]
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3710      	adds	r7, #16
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e7d4:	b002      	add	sp, #8
 800e7d6:	4770      	bx	lr

0800e7d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b08a      	sub	sp, #40	; 0x28
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	460b      	mov	r3, r1
 800e7e2:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d016      	beq.n	800e81a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	331a      	adds	r3, #26
 800e7f0:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800e7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f4:	8adb      	ldrh	r3, [r3, #22]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d105      	bne.n	800e806 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800e7fa:	4b43      	ldr	r3, [pc, #268]	; (800e908 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800e7fc:	4a43      	ldr	r2, [pc, #268]	; (800e90c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800e7fe:	21c0      	movs	r1, #192	; 0xc0
 800e800:	4843      	ldr	r0, [pc, #268]	; (800e910 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e802:	f014 ff9f 	bl	8023744 <__assert_func>
            return buffer[pos];
 800e806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e808:	8a9b      	ldrh	r3, [r3, #20]
 800e80a:	461a      	mov	r2, r3
 800e80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e80e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d001      	beq.n	800e81a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800e816:	2301      	movs	r3, #1
 800e818:	e000      	b.n	800e81c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800e81a:	2300      	movs	r3, #0
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d06a      	beq.n	800e8f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f008 f9e3 	bl	8016bec <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	331a      	adds	r3, #26
 800e82a:	623b      	str	r3, [r7, #32]
 800e82c:	2301      	movs	r3, #1
 800e82e:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800e830:	6a3b      	ldr	r3, [r7, #32]
 800e832:	8adb      	ldrh	r3, [r3, #22]
 800e834:	8bfa      	ldrh	r2, [r7, #30]
 800e836:	429a      	cmp	r2, r3
 800e838:	d305      	bcc.n	800e846 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800e83a:	4b36      	ldr	r3, [pc, #216]	; (800e914 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800e83c:	4a36      	ldr	r2, [pc, #216]	; (800e918 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800e83e:	21c5      	movs	r1, #197	; 0xc5
 800e840:	4833      	ldr	r0, [pc, #204]	; (800e910 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e842:	f014 ff7f 	bl	8023744 <__assert_func>
            const uint16_t index = pos + offset;
 800e846:	6a3b      	ldr	r3, [r7, #32]
 800e848:	8a9a      	ldrh	r2, [r3, #20]
 800e84a:	8bfb      	ldrh	r3, [r7, #30]
 800e84c:	4413      	add	r3, r2
 800e84e:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800e850:	8bbb      	ldrh	r3, [r7, #28]
 800e852:	2b09      	cmp	r3, #9
 800e854:	d801      	bhi.n	800e85a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800e856:	8bbb      	ldrh	r3, [r7, #28]
 800e858:	e001      	b.n	800e85e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800e85a:	8bbb      	ldrh	r3, [r7, #28]
 800e85c:	3b0a      	subs	r3, #10
 800e85e:	6a3a      	ldr	r2, [r7, #32]
 800e860:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e864:	f640 123f 	movw	r2, #2367	; 0x93f
 800e868:	4293      	cmp	r3, r2
 800e86a:	bf0c      	ite	eq
 800e86c:	2301      	moveq	r3, #1
 800e86e:	2300      	movne	r3, #0
 800e870:	b2db      	uxtb	r3, r3
 800e872:	2b00      	cmp	r3, #0
 800e874:	d03f      	beq.n	800e8f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	331a      	adds	r3, #26
 800e87a:	687a      	ldr	r2, [r7, #4]
 800e87c:	321a      	adds	r2, #26
 800e87e:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800e880:	68ba      	ldr	r2, [r7, #8]
 800e882:	8ad2      	ldrh	r2, [r2, #22]
 800e884:	2a00      	cmp	r2, #0
 800e886:	d105      	bne.n	800e894 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800e888:	4b1f      	ldr	r3, [pc, #124]	; (800e908 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800e88a:	4a20      	ldr	r2, [pc, #128]	; (800e90c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800e88c:	21c0      	movs	r1, #192	; 0xc0
 800e88e:	4820      	ldr	r0, [pc, #128]	; (800e910 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e890:	f014 ff58 	bl	8023744 <__assert_func>
            return buffer[pos];
 800e894:	68ba      	ldr	r2, [r7, #8]
 800e896:	8a92      	ldrh	r2, [r2, #20]
 800e898:	4611      	mov	r1, r2
 800e89a:	68ba      	ldr	r2, [r7, #8]
 800e89c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800e8a0:	613b      	str	r3, [r7, #16]
 800e8a2:	4613      	mov	r3, r2
 800e8a4:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800e8a6:	693b      	ldr	r3, [r7, #16]
 800e8a8:	8adb      	ldrh	r3, [r3, #22]
 800e8aa:	2b01      	cmp	r3, #1
 800e8ac:	d806      	bhi.n	800e8bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800e8ae:	4b1b      	ldr	r3, [pc, #108]	; (800e91c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800e8b0:	4a1b      	ldr	r2, [pc, #108]	; (800e920 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800e8b2:	f240 110d 	movw	r1, #269	; 0x10d
 800e8b6:	4816      	ldr	r0, [pc, #88]	; (800e910 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e8b8:	f014 ff44 	bl	8023744 <__assert_func>
            const uint16_t index = pos + 1;
 800e8bc:	693b      	ldr	r3, [r7, #16]
 800e8be:	8a9b      	ldrh	r3, [r3, #20]
 800e8c0:	3301      	adds	r3, #1
 800e8c2:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800e8c4:	89bb      	ldrh	r3, [r7, #12]
 800e8c6:	2b09      	cmp	r3, #9
 800e8c8:	d801      	bhi.n	800e8ce <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800e8ca:	89bb      	ldrh	r3, [r7, #12]
 800e8cc:	e000      	b.n	800e8d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	693a      	ldr	r2, [r7, #16]
 800e8d2:	89f9      	ldrh	r1, [r7, #14]
 800e8d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800e8d8:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	331a      	adds	r3, #26
 800e8de:	61bb      	str	r3, [r7, #24]
 800e8e0:	f640 133f 	movw	r3, #2367	; 0x93f
 800e8e4:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800e8e6:	69bb      	ldr	r3, [r7, #24]
 800e8e8:	8a9b      	ldrh	r3, [r3, #20]
 800e8ea:	4619      	mov	r1, r3
 800e8ec:	69bb      	ldr	r3, [r7, #24]
 800e8ee:	8afa      	ldrh	r2, [r7, #22]
 800e8f0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800e8f4:	bf00      	nop
        }
    }
    return getNextChar();
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f008 f85c 	bl	80169b4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e8fc:	4603      	mov	r3, r0
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3728      	adds	r7, #40	; 0x28
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}
 800e906:	bf00      	nop
 800e908:	080252c8 	.word	0x080252c8
 800e90c:	080252d4 	.word	0x080252d4
 800e910:	08025380 	.word	0x08025380
 800e914:	080253c8 	.word	0x080253c8
 800e918:	080253d8 	.word	0x080253d8
 800e91c:	080254ac 	.word	0x080254ac
 800e920:	080254b8 	.word	0x080254b8

0800e924 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b082      	sub	sp, #8
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800e92c:	6878      	ldr	r0, [r7, #4]
 800e92e:	f007 fffb 	bl	8016928 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800e932:	bf00      	nop
 800e934:	3708      	adds	r7, #8
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}

0800e93a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800e93a:	b580      	push	{r7, lr}
 800e93c:	b088      	sub	sp, #32
 800e93e:	af02      	add	r7, sp, #8
 800e940:	60f8      	str	r0, [r7, #12]
 800e942:	1d38      	adds	r0, r7, #4
 800e944:	e880 0006 	stmia.w	r0, {r1, r2}
 800e948:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800e94a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e94e:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800e950:	1d39      	adds	r1, r7, #4
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	9301      	str	r3, [sp, #4]
 800e956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e958:	9300      	str	r3, [sp, #0]
 800e95a:	6a3b      	ldr	r3, [r7, #32]
 800e95c:	683a      	ldr	r2, [r7, #0]
 800e95e:	68f8      	ldr	r0, [r7, #12]
 800e960:	f005 fb6d 	bl	801403e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800e964:	bf00      	nop
 800e966:	3718      	adds	r7, #24
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}

0800e96c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800e96c:	b590      	push	{r4, r7, lr}
 800e96e:	b085      	sub	sp, #20
 800e970:	af00      	add	r7, sp, #0
 800e972:	4603      	mov	r3, r0
 800e974:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800e976:	2300      	movs	r3, #0
 800e978:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800e97a:	88fb      	ldrh	r3, [r7, #6]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d127      	bne.n	800e9d0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800e980:	88fb      	ldrh	r3, [r7, #6]
 800e982:	4a1e      	ldr	r2, [pc, #120]	; (800e9fc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800e984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d016      	beq.n	800e9ba <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800e98c:	88fb      	ldrh	r3, [r7, #6]
 800e98e:	4a1b      	ldr	r2, [pc, #108]	; (800e9fc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800e990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e994:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	68ba      	ldr	r2, [r7, #8]
 800e99c:	4413      	add	r3, r2
 800e99e:	4a18      	ldr	r2, [pc, #96]	; (800ea00 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800e9a0:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	685b      	ldr	r3, [r3, #4]
 800e9a6:	68ba      	ldr	r2, [r7, #8]
 800e9a8:	4413      	add	r3, r2
 800e9aa:	4a16      	ldr	r2, [pc, #88]	; (800ea04 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800e9ac:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	689b      	ldr	r3, [r3, #8]
 800e9b2:	68ba      	ldr	r2, [r7, #8]
 800e9b4:	4413      	add	r3, r2
 800e9b6:	60fb      	str	r3, [r7, #12]
 800e9b8:	e00a      	b.n	800e9d0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800e9ba:	4b11      	ldr	r3, [pc, #68]	; (800ea00 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800e9bc:	4a12      	ldr	r2, [pc, #72]	; (800ea08 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800e9be:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800e9c0:	4a12      	ldr	r2, [pc, #72]	; (800ea0c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800e9c2:	4b10      	ldr	r3, [pc, #64]	; (800ea04 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800e9c4:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800e9c6:	88fb      	ldrh	r3, [r7, #6]
 800e9c8:	4a11      	ldr	r2, [pc, #68]	; (800ea10 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800e9ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9ce:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d00d      	beq.n	800e9f2 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800e9d6:	4a0f      	ldr	r2, [pc, #60]	; (800ea14 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800e9d8:	88fb      	ldrh	r3, [r7, #6]
 800e9da:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800e9dc:	f000 f83e 	bl	800ea5c <_ZN17TypedTextDatabase8getFontsEv>
 800e9e0:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800e9e2:	f000 f833 	bl	800ea4c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	461a      	mov	r2, r3
 800e9ea:	4621      	mov	r1, r4
 800e9ec:	68f8      	ldr	r0, [r7, #12]
 800e9ee:	f7ff fea5 	bl	800e73c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800e9f2:	bf00      	nop
 800e9f4:	3714      	adds	r7, #20
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd90      	pop	{r4, r7, pc}
 800e9fa:	bf00      	nop
 800e9fc:	20008e1c 	.word	0x20008e1c
 800ea00:	20008e24 	.word	0x20008e24
 800ea04:	20008e28 	.word	0x20008e28
 800ea08:	08061aa4 	.word	0x08061aa4
 800ea0c:	08061a98 	.word	0x08061a98
 800ea10:	08061ab0 	.word	0x08061ab0
 800ea14:	20008e20 	.word	0x20008e20

0800ea18 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800ea18:	b480      	push	{r7}
 800ea1a:	b083      	sub	sp, #12
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
 800ea20:	460b      	mov	r3, r1
 800ea22:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800ea24:	4b07      	ldr	r3, [pc, #28]	; (800ea44 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800ea26:	681a      	ldr	r2, [r3, #0]
 800ea28:	4b07      	ldr	r3, [pc, #28]	; (800ea48 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800ea2a:	6819      	ldr	r1, [r3, #0]
 800ea2c:	887b      	ldrh	r3, [r7, #2]
 800ea2e:	009b      	lsls	r3, r3, #2
 800ea30:	440b      	add	r3, r1
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	005b      	lsls	r3, r3, #1
 800ea36:	4413      	add	r3, r2
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	370c      	adds	r7, #12
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea42:	4770      	bx	lr
 800ea44:	20008e24 	.word	0x20008e24
 800ea48:	20008e28 	.word	0x20008e28

0800ea4c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800ea4c:	b480      	push	{r7}
 800ea4e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800ea50:	2303      	movs	r3, #3
}
 800ea52:	4618      	mov	r0, r3
 800ea54:	46bd      	mov	sp, r7
 800ea56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5a:	4770      	bx	lr

0800ea5c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800ea60:	4b02      	ldr	r3, [pc, #8]	; (800ea6c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr
 800ea6c:	20008e2c 	.word	0x20008e2c

0800ea70 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b082      	sub	sp, #8
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	6039      	str	r1, [r7, #0]
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2b01      	cmp	r3, #1
 800ea7e:	d113      	bne.n	800eaa8 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea86:	4293      	cmp	r3, r2
 800ea88:	d10e      	bne.n	800eaa8 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800ea8a:	f7fd fef7 	bl	800c87c <_Z23getFont_verdana_20_4bppv>
 800ea8e:	4603      	mov	r3, r0
};
 800ea90:	4a07      	ldr	r2, [pc, #28]	; (800eab0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800ea92:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800ea94:	f7fd ff46 	bl	800c924 <_Z23getFont_verdana_40_4bppv>
 800ea98:	4603      	mov	r3, r0
};
 800ea9a:	4a05      	ldr	r2, [pc, #20]	; (800eab0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800ea9c:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 800ea9e:	f7fd fe99 	bl	800c7d4 <_Z23getFont_verdana_10_4bppv>
 800eaa2:	4603      	mov	r3, r0
};
 800eaa4:	4a02      	ldr	r2, [pc, #8]	; (800eab0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800eaa6:	6093      	str	r3, [r2, #8]
}  // namespace TypedTextDatabase
 800eaa8:	bf00      	nop
 800eaaa:	3708      	adds	r7, #8
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}
 800eab0:	20008e2c 	.word	0x20008e2c

0800eab4 <_GLOBAL__sub_I_touchgfx_fonts>:
 800eab4:	b580      	push	{r7, lr}
 800eab6:	af00      	add	r7, sp, #0
 800eab8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800eabc:	2001      	movs	r0, #1
 800eabe:	f7ff ffd7 	bl	800ea70 <_Z41__static_initialization_and_destruction_0ii>
 800eac2:	bd80      	pop	{r7, pc}

0800eac4 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b082      	sub	sp, #8
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
 800eacc:	4a05      	ldr	r2, [pc, #20]	; (800eae4 <_ZN19FrontendApplicationD1Ev+0x20>)
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	601a      	str	r2, [r3, #0]
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	4618      	mov	r0, r3
 800ead6:	f7fe f967 	bl	800cda8 <_ZN23FrontendApplicationBaseD1Ev>
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	4618      	mov	r0, r3
 800eade:	3708      	adds	r7, #8
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}
 800eae4:	08025de0 	.word	0x08025de0

0800eae8 <_ZN19FrontendApplicationD0Ev>:
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b082      	sub	sp, #8
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f7ff ffe7 	bl	800eac4 <_ZN19FrontendApplicationD1Ev>
 800eaf6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f014 fcf7 	bl	80234ee <_ZdlPvj>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	4618      	mov	r0, r3
 800eb04:	3708      	adds	r7, #8
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}

0800eb0a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800eb0a:	b580      	push	{r7, lr}
 800eb0c:	b082      	sub	sp, #8
 800eb0e:	af00      	add	r7, sp, #0
 800eb10:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f000 f82d 	bl	800eb78 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	4618      	mov	r0, r3
 800eb22:	f005 fdd5 	bl	80146d0 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800eb26:	bf00      	nop
 800eb28:	3708      	adds	r7, #8
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}
	...

0800eb30 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b084      	sub	sp, #16
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	60f8      	str	r0, [r7, #12]
 800eb38:	60b9      	str	r1, [r7, #8]
 800eb3a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	687a      	ldr	r2, [r7, #4]
 800eb40:	68b9      	ldr	r1, [r7, #8]
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7fe f974 	bl	800ce30 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800eb48:	4a03      	ldr	r2, [pc, #12]	; (800eb58 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	601a      	str	r2, [r3, #0]
{

}
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	4618      	mov	r0, r3
 800eb52:	3710      	adds	r7, #16
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}
 800eb58:	08025de0 	.word	0x08025de0

0800eb5c <_ZN5ModelC1Ev>:
extern osThreadId    defaultTaskHandle;
extern osMessageQId  envQueueHandle;
extern osSemaphoreId envSemHandle;
extern osPoolId      Pool_ID;

Model::Model() : modelListener(0)
 800eb5c:	b480      	push	{r7}
 800eb5e:	b083      	sub	sp, #12
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2200      	movs	r2, #0
 800eb68:	601a      	str	r2, [r3, #0]
{

}
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	370c      	adds	r7, #12
 800eb70:	46bd      	mov	sp, r7
 800eb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb76:	4770      	bx	lr

0800eb78 <_ZN5Model4tickEv>:

void Model::tick()
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b0aa      	sub	sp, #168	; 0xa8
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6178      	str	r0, [r7, #20]
#if (1)
	if (sensorUpdatePeriod >= 100)
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	685b      	ldr	r3, [r3, #4]
 800eb84:	2b63      	cmp	r3, #99	; 0x63
 800eb86:	dd6c      	ble.n	800ec62 <_ZN5Model4tickEv+0xea>
	{
		ENV_MSG *envData;
		osEvent event;
		char buf[128] = {0,};
 800eb88:	2300      	movs	r3, #0
 800eb8a:	61bb      	str	r3, [r7, #24]
 800eb8c:	f107 031c 	add.w	r3, r7, #28
 800eb90:	227c      	movs	r2, #124	; 0x7c
 800eb92:	2100      	movs	r1, #0
 800eb94:	4618      	mov	r0, r3
 800eb96:	f014 fe7f 	bl	8023898 <memset>

		event = osMessageGet(envQueueHandle, osWaitForever);
 800eb9a:	4b36      	ldr	r3, [pc, #216]	; (800ec74 <_ZN5Model4tickEv+0xfc>)
 800eb9c:	6819      	ldr	r1, [r3, #0]
 800eb9e:	463b      	mov	r3, r7
 800eba0:	f04f 32ff 	mov.w	r2, #4294967295
 800eba4:	4618      	mov	r0, r3
 800eba6:	f7fa fd3b 	bl	8009620 <osMessageGet>
 800ebaa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800ebae:	463a      	mov	r2, r7
 800ebb0:	ca07      	ldmia	r2, {r0, r1, r2}
 800ebb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		if (event.status == osEventMessage)
 800ebb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ebba:	2b10      	cmp	r3, #16
 800ebbc:	d14e      	bne.n	800ec5c <_ZN5Model4tickEv+0xe4>
		{
			envData = (ENV_MSG *)event.value.p;
 800ebbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ebc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			//DEBUG_PRINT(pMsq->temp);

			snprintf(buf, sizeof(buf), "temp:%d\r\n", envData->temp);
 800ebc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	f107 0018 	add.w	r0, r7, #24
 800ebd0:	4a29      	ldr	r2, [pc, #164]	; (800ec78 <_ZN5Model4tickEv+0x100>)
 800ebd2:	2180      	movs	r1, #128	; 0x80
 800ebd4:	f015 fa54 	bl	8024080 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *)buf, strlen(buf), 100);
 800ebd8:	f107 0318 	add.w	r3, r7, #24
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f7f1 fb57 	bl	8000290 <strlen>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	b29a      	uxth	r2, r3
 800ebe6:	f107 0118 	add.w	r1, r7, #24
 800ebea:	2364      	movs	r3, #100	; 0x64
 800ebec:	4823      	ldr	r0, [pc, #140]	; (800ec7c <_ZN5Model4tickEv+0x104>)
 800ebee:	f7f9 fa12 	bl	8008016 <HAL_UART_Transmit>

			memset(buf, 0x0, sizeof(buf));
 800ebf2:	f107 0318 	add.w	r3, r7, #24
 800ebf6:	2280      	movs	r2, #128	; 0x80
 800ebf8:	2100      	movs	r1, #0
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f014 fe4c 	bl	8023898 <memset>
			snprintf(buf, sizeof(buf), "humid:%d\r\n", envData->humid);
 800ec00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ec04:	685b      	ldr	r3, [r3, #4]
 800ec06:	f107 0018 	add.w	r0, r7, #24
 800ec0a:	4a1d      	ldr	r2, [pc, #116]	; (800ec80 <_ZN5Model4tickEv+0x108>)
 800ec0c:	2180      	movs	r1, #128	; 0x80
 800ec0e:	f015 fa37 	bl	8024080 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *)buf, strlen(buf), 100);
 800ec12:	f107 0318 	add.w	r3, r7, #24
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7f1 fb3a 	bl	8000290 <strlen>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	b29a      	uxth	r2, r3
 800ec20:	f107 0118 	add.w	r1, r7, #24
 800ec24:	2364      	movs	r3, #100	; 0x64
 800ec26:	4815      	ldr	r0, [pc, #84]	; (800ec7c <_ZN5Model4tickEv+0x104>)
 800ec28:	f7f9 f9f5 	bl	8008016 <HAL_UART_Transmit>

			//osPoolFree(Pool_ID, envData);
			modelListener->UpdateTemp((envData->temp));
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	6818      	ldr	r0, [r3, #0]
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	3308      	adds	r3, #8
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ec3e:	6812      	ldr	r2, [r2, #0]
 800ec40:	4611      	mov	r1, r2
 800ec42:	4798      	blx	r3
			modelListener->UpdateHum((envData->humid));
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	6818      	ldr	r0, [r3, #0]
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	330c      	adds	r3, #12
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ec56:	6852      	ldr	r2, [r2, #4]
 800ec58:	4611      	mov	r1, r2
 800ec5a:	4798      	blx	r3
		}
		sensorUpdatePeriod = 0;
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	2200      	movs	r2, #0
 800ec60:	605a      	str	r2, [r3, #4]
	}
	sensorUpdatePeriod++;
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	685b      	ldr	r3, [r3, #4]
 800ec66:	1c5a      	adds	r2, r3, #1
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	605a      	str	r2, [r3, #4]
#endif
}
 800ec6c:	bf00      	nop
 800ec6e:	37a8      	adds	r7, #168	; 0xa8
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd80      	pop	{r7, pc}
 800ec74:	2000acbc 	.word	0x2000acbc
 800ec78:	0802556c 	.word	0x0802556c
 800ec7c:	2000aecc 	.word	0x2000aecc
 800ec80:	08025578 	.word	0x08025578

0800ec84 <_ZN5Model28updateHumidifierControlStateEb>:

void Model::updateHumidifierControlState(bool state)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b082      	sub	sp, #8
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
 800ec8c:	460b      	mov	r3, r1
 800ec8e:	70fb      	strb	r3, [r7, #3]
	if (state == true)
 800ec90:	78fb      	ldrb	r3, [r7, #3]
 800ec92:	2b01      	cmp	r3, #1
 800ec94:	d106      	bne.n	800eca4 <_ZN5Model28updateHumidifierControlStateEb+0x20>
	{
		osSignalSet(defaultTaskHandle, BUZZER_ON | HUM_ON);
 800ec96:	4b08      	ldr	r3, [pc, #32]	; (800ecb8 <_ZN5Model28updateHumidifierControlStateEb+0x34>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	2105      	movs	r1, #5
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f7fa fb07 	bl	80092b0 <osSignalSet>
	}
	else
	{
		osSignalSet(defaultTaskHandle, BUZZER_OFF | HUM_OFF);
	}
}
 800eca2:	e005      	b.n	800ecb0 <_ZN5Model28updateHumidifierControlStateEb+0x2c>
		osSignalSet(defaultTaskHandle, BUZZER_OFF | HUM_OFF);
 800eca4:	4b04      	ldr	r3, [pc, #16]	; (800ecb8 <_ZN5Model28updateHumidifierControlStateEb+0x34>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	210a      	movs	r1, #10
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7fa fb00 	bl	80092b0 <osSignalSet>
}
 800ecb0:	bf00      	nop
 800ecb2:	3708      	adds	r7, #8
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}
 800ecb8:	2000acc0 	.word	0x2000acc0

0800ecbc <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800ecbc:	b480      	push	{r7}
 800ecbe:	b083      	sub	sp, #12
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
    {
    }
 800ecc4:	bf00      	nop
 800ecc6:	370c      	adds	r7, #12
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecce:	4770      	bx	lr

0800ecd0 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800ecd0:	b480      	push	{r7}
 800ecd2:	b083      	sub	sp, #12
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
    {
    }
 800ecd8:	bf00      	nop
 800ecda:	370c      	adds	r7, #12
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece2:	4770      	bx	lr

0800ece4 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800ece4:	b480      	push	{r7}
 800ece6:	b083      	sub	sp, #12
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
    {
 800ecec:	4a04      	ldr	r2, [pc, #16]	; (800ed00 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	601a      	str	r2, [r3, #0]
    }
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	370c      	adds	r7, #12
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfe:	4770      	bx	lr
 800ed00:	08025e78 	.word	0x08025e78

0800ed04 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b082      	sub	sp, #8
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
    }
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	f7ff ffe9 	bl	800ece4 <_ZN8touchgfx9PresenterD1Ev>
 800ed12:	2104      	movs	r1, #4
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f014 fbea 	bl	80234ee <_ZdlPvj>
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	3708      	adds	r7, #8
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd80      	pop	{r7, pc}

0800ed24 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800ed24:	b480      	push	{r7}
 800ed26:	b083      	sub	sp, #12
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
    {
 800ed2c:	4a04      	ldr	r2, [pc, #16]	; (800ed40 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	601a      	str	r2, [r3, #0]
    }
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	4618      	mov	r0, r3
 800ed36:	370c      	adds	r7, #12
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3e:	4770      	bx	lr
 800ed40:	08025e78 	.word	0x08025e78

0800ed44 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800ed44:	b480      	push	{r7}
 800ed46:	b083      	sub	sp, #12
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
 800ed4c:	4a06      	ldr	r2, [pc, #24]	; (800ed68 <_ZN13ModelListenerC1Ev+0x24>)
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	601a      	str	r2, [r3, #0]
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2200      	movs	r2, #0
 800ed56:	605a      	str	r2, [r3, #4]
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	370c      	adds	r7, #12
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed64:	4770      	bx	lr
 800ed66:	bf00      	nop
 800ed68:	08025e60 	.word	0x08025e60

0800ed6c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800ed6c:	b480      	push	{r7}
 800ed6e:	b083      	sub	sp, #12
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	4a04      	ldr	r2, [pc, #16]	; (800ed88 <_ZN13ModelListenerD1Ev+0x1c>)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	601a      	str	r2, [r3, #0]
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	370c      	adds	r7, #12
 800ed80:	46bd      	mov	sp, r7
 800ed82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed86:	4770      	bx	lr
 800ed88:	08025e60 	.word	0x08025e60

0800ed8c <_ZN13ModelListenerD0Ev>:
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b082      	sub	sp, #8
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f7ff ffe9 	bl	800ed6c <_ZN13ModelListenerD1Ev>
 800ed9a:	2108      	movs	r1, #8
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f014 fba6 	bl	80234ee <_ZdlPvj>
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	4618      	mov	r0, r3
 800eda6:	3708      	adds	r7, #8
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}

0800edac <_ZN13ModelListener10UpdateTempEi>:
    //virtual void UpdateTemp(char *val)
    virtual void UpdateTemp(int) {};
 800edac:	b480      	push	{r7}
 800edae:	b083      	sub	sp, #12
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	6039      	str	r1, [r7, #0]
 800edb6:	bf00      	nop
 800edb8:	370c      	adds	r7, #12
 800edba:	46bd      	mov	sp, r7
 800edbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc0:	4770      	bx	lr

0800edc2 <_ZN13ModelListener9UpdateHumEi>:
    virtual void UpdateHum(int) {};
 800edc2:	b480      	push	{r7}
 800edc4:	b083      	sub	sp, #12
 800edc6:	af00      	add	r7, sp, #0
 800edc8:	6078      	str	r0, [r7, #4]
 800edca:	6039      	str	r1, [r7, #0]
 800edcc:	bf00      	nop
 800edce:	370c      	adds	r7, #12
 800edd0:	46bd      	mov	sp, r7
 800edd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd6:	4770      	bx	lr

0800edd8 <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {};
 800edd8:	b580      	push	{r7, lr}
 800edda:	b082      	sub	sp, #8
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
 800ede0:	4a09      	ldr	r2, [pc, #36]	; (800ee08 <_ZN15screenPresenterD1Ev+0x30>)
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	601a      	str	r2, [r3, #0]
 800ede6:	4a09      	ldr	r2, [pc, #36]	; (800ee0c <_ZN15screenPresenterD1Ev+0x34>)
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	605a      	str	r2, [r3, #4]
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	3304      	adds	r3, #4
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7ff ffbb 	bl	800ed6c <_ZN13ModelListenerD1Ev>
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	4618      	mov	r0, r3
 800edfa:	f7ff ff73 	bl	800ece4 <_ZN8touchgfx9PresenterD1Ev>
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	4618      	mov	r0, r3
 800ee02:	3708      	adds	r7, #8
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}
 800ee08:	08025e24 	.word	0x08025e24
 800ee0c:	08025e48 	.word	0x08025e48

0800ee10 <_ZThn4_N15screenPresenterD1Ev>:
 800ee10:	f1a0 0004 	sub.w	r0, r0, #4
 800ee14:	e7e0      	b.n	800edd8 <_ZN15screenPresenterD1Ev>
 800ee16:	bf00      	nop

0800ee18 <_ZN15screenPresenterD0Ev>:
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b082      	sub	sp, #8
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
 800ee20:	6878      	ldr	r0, [r7, #4]
 800ee22:	f7ff ffd9 	bl	800edd8 <_ZN15screenPresenterD1Ev>
 800ee26:	2110      	movs	r1, #16
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f014 fb60 	bl	80234ee <_ZdlPvj>
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	4618      	mov	r0, r3
 800ee32:	3708      	adds	r7, #8
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}

0800ee38 <_ZThn4_N15screenPresenterD0Ev>:
 800ee38:	f1a0 0004 	sub.w	r0, r0, #4
 800ee3c:	e7ec      	b.n	800ee18 <_ZN15screenPresenterD0Ev>
	...

0800ee40 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b082      	sub	sp, #8
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	6039      	str	r1, [r7, #0]
    : view(v)
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	f7ff ff69 	bl	800ed24 <_ZN8touchgfx9PresenterC1Ev>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	3304      	adds	r3, #4
 800ee56:	4618      	mov	r0, r3
 800ee58:	f7ff ff74 	bl	800ed44 <_ZN13ModelListenerC1Ev>
 800ee5c:	4a06      	ldr	r2, [pc, #24]	; (800ee78 <_ZN15screenPresenterC1ER10screenView+0x38>)
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	601a      	str	r2, [r3, #0]
 800ee62:	4a06      	ldr	r2, [pc, #24]	; (800ee7c <_ZN15screenPresenterC1ER10screenView+0x3c>)
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	605a      	str	r2, [r3, #4]
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	683a      	ldr	r2, [r7, #0]
 800ee6c:	60da      	str	r2, [r3, #12]
{

}
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	4618      	mov	r0, r3
 800ee72:	3708      	adds	r7, #8
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bd80      	pop	{r7, pc}
 800ee78:	08025e24 	.word	0x08025e24
 800ee7c:	08025e48 	.word	0x08025e48

0800ee80 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 800ee80:	b480      	push	{r7}
 800ee82:	b083      	sub	sp, #12
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]

}
 800ee88:	bf00      	nop
 800ee8a:	370c      	adds	r7, #12
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee92:	4770      	bx	lr

0800ee94 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 800ee94:	b480      	push	{r7}
 800ee96:	b083      	sub	sp, #12
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]

}
 800ee9c:	bf00      	nop
 800ee9e:	370c      	adds	r7, #12
 800eea0:	46bd      	mov	sp, r7
 800eea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea6:	4770      	bx	lr

0800eea8 <_ZN15screenPresenter28updateHumidifierControlStateEb>:

void screenPresenter::updateHumidifierControlState(bool state)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b082      	sub	sp, #8
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	460b      	mov	r3, r1
 800eeb2:	70fb      	strb	r3, [r7, #3]
	model->updateHumidifierControlState(state);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	689b      	ldr	r3, [r3, #8]
 800eeb8:	78fa      	ldrb	r2, [r7, #3]
 800eeba:	4611      	mov	r1, r2
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7ff fee1 	bl	800ec84 <_ZN5Model28updateHumidifierControlStateEb>
}
 800eec2:	bf00      	nop
 800eec4:	3708      	adds	r7, #8
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}

0800eeca <_ZN15screenPresenter10UpdateTempEi>:

void screenPresenter::UpdateTemp(int val)
{
 800eeca:	b580      	push	{r7, lr}
 800eecc:	b082      	sub	sp, #8
 800eece:	af00      	add	r7, sp, #0
 800eed0:	6078      	str	r0, [r7, #4]
 800eed2:	6039      	str	r1, [r7, #0]
	view.UpdateTempView(val);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	68da      	ldr	r2, [r3, #12]
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	68db      	ldr	r3, [r3, #12]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	3338      	adds	r3, #56	; 0x38
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	6839      	ldr	r1, [r7, #0]
 800eee4:	4610      	mov	r0, r2
 800eee6:	4798      	blx	r3
}
 800eee8:	bf00      	nop
 800eeea:	3708      	adds	r7, #8
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}

0800eef0 <_ZThn4_N15screenPresenter10UpdateTempEi>:

    virtual void updateHumidifierControlState(bool state);

    virtual void UpdateTemp(int);
 800eef0:	f1a0 0004 	sub.w	r0, r0, #4
 800eef4:	f7ff bfe9 	b.w	800eeca <_ZN15screenPresenter10UpdateTempEi>

0800eef8 <_ZN15screenPresenter9UpdateHumEi>:

void screenPresenter::UpdateHum(int val)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b082      	sub	sp, #8
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
 800ef00:	6039      	str	r1, [r7, #0]
	view.UpdateHumView(val);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	68da      	ldr	r2, [r3, #12]
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	68db      	ldr	r3, [r3, #12]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	333c      	adds	r3, #60	; 0x3c
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	6839      	ldr	r1, [r7, #0]
 800ef12:	4610      	mov	r0, r2
 800ef14:	4798      	blx	r3
}
 800ef16:	bf00      	nop
 800ef18:	3708      	adds	r7, #8
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}

0800ef1e <_ZThn4_N15screenPresenter9UpdateHumEi>:
    virtual void UpdateHum(int);
 800ef1e:	f1a0 0004 	sub.w	r0, r0, #4
 800ef22:	f7ff bfe9 	b.w	800eef8 <_ZN15screenPresenter9UpdateHumEi>
	...

0800ef28 <_ZNK8touchgfx6Bitmap5getIdEv>:
    /**
     * Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 800ef30:	4b07      	ldr	r3, [pc, #28]	; (800ef50 <_ZNK8touchgfx6Bitmap5getIdEv+0x28>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d105      	bne.n	800ef44 <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>
 800ef38:	4b06      	ldr	r3, [pc, #24]	; (800ef54 <_ZNK8touchgfx6Bitmap5getIdEv+0x2c>)
 800ef3a:	4a07      	ldr	r2, [pc, #28]	; (800ef58 <_ZNK8touchgfx6Bitmap5getIdEv+0x30>)
 800ef3c:	218b      	movs	r1, #139	; 0x8b
 800ef3e:	4807      	ldr	r0, [pc, #28]	; (800ef5c <_ZNK8touchgfx6Bitmap5getIdEv+0x34>)
 800ef40:	f014 fc00 	bl	8023744 <__assert_func>
        return bitmapId;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	881b      	ldrh	r3, [r3, #0]
    }
 800ef48:	4618      	mov	r0, r3
 800ef4a:	3708      	adds	r7, #8
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}
 800ef50:	2000a0c4 	.word	0x2000a0c4
 800ef54:	08025584 	.word	0x08025584
 800ef58:	080255c0 	.word	0x080255c0
 800ef5c:	080255f4 	.word	0x080255f4

0800ef60 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800ef60:	b480      	push	{r7}
 800ef62:	b083      	sub	sp, #12
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	683a      	ldr	r2, [r7, #0]
 800ef6e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800ef70:	bf00      	nop
 800ef72:	370c      	adds	r7, #12
 800ef74:	46bd      	mov	sp, r7
 800ef76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7a:	4770      	bx	lr

0800ef7c <_ZNK8touchgfx12ToggleButton8getStateEv>:
     * Gets the state of the ToggleButton as set with forceState.
     *
     * @return True if the button has been toggled, i.e. the pressed state is shown when the
     *         button is not pressed.
     */
    bool getState() const
 800ef7c:	b590      	push	{r4, r7, lr}
 800ef7e:	b083      	sub	sp, #12
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
    {
        return up.getId() == originalPressed.getId();
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	332e      	adds	r3, #46	; 0x2e
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f7ff ffcd 	bl	800ef28 <_ZNK8touchgfx6Bitmap5getIdEv>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	461c      	mov	r4, r3
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	3334      	adds	r3, #52	; 0x34
 800ef96:	4618      	mov	r0, r3
 800ef98:	f7ff ffc6 	bl	800ef28 <_ZNK8touchgfx6Bitmap5getIdEv>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	429c      	cmp	r4, r3
 800efa0:	bf0c      	ite	eq
 800efa2:	2301      	moveq	r3, #1
 800efa4:	2300      	movne	r3, #0
 800efa6:	b2db      	uxtb	r3, r3
    }
 800efa8:	4618      	mov	r0, r3
 800efaa:	370c      	adds	r7, #12
 800efac:	46bd      	mov	sp, r7
 800efae:	bd90      	pop	{r4, r7, pc}

0800efb0 <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
 800efb8:	4a05      	ldr	r2, [pc, #20]	; (800efd0 <_ZN10screenViewD1Ev+0x20>)
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	601a      	str	r2, [r3, #0]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7fe fea7 	bl	800dd14 <_ZN14screenViewBaseD1Ev>
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	4618      	mov	r0, r3
 800efca:	3708      	adds	r7, #8
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}
 800efd0:	08025e90 	.word	0x08025e90

0800efd4 <_ZN10screenViewD0Ev>:
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b082      	sub	sp, #8
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
 800efdc:	6878      	ldr	r0, [r7, #4]
 800efde:	f7ff ffe7 	bl	800efb0 <_ZN10screenViewD1Ev>
 800efe2:	f44f 7149 	mov.w	r1, #804	; 0x324
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f014 fa81 	bl	80234ee <_ZdlPvj>
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	4618      	mov	r0, r3
 800eff0:	3708      	adds	r7, #8
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}
	...

0800eff8 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 800eff8:	b580      	push	{r7, lr}
 800effa:	b084      	sub	sp, #16
 800effc:	af02      	add	r7, sp, #8
 800effe:	6078      	str	r0, [r7, #4]
 800f000:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	9300      	str	r3, [sp, #0]
 800f008:	4b04      	ldr	r3, [pc, #16]	; (800f01c <_ZNSt7__cxx119to_stringEi+0x24>)
 800f00a:	2210      	movs	r2, #16
 800f00c:	4904      	ldr	r1, [pc, #16]	; (800f020 <_ZNSt7__cxx119to_stringEi+0x28>)
 800f00e:	f000 f8eb 	bl	800f1e8 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	3708      	adds	r7, #8
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}
 800f01a:	bf00      	nop
 800f01c:	08025638 	.word	0x08025638
 800f020:	080242e5 	.word	0x080242e5

0800f024 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>
#include <string.h>
#include <string>

screenView::screenView()
 800f024:	b580      	push	{r7, lr}
 800f026:	b082      	sub	sp, #8
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	4618      	mov	r0, r3
 800f030:	f7fe ff24 	bl	800de7c <_ZN14screenViewBaseC1Ev>
 800f034:	4a03      	ldr	r2, [pc, #12]	; (800f044 <_ZN10screenViewC1Ev+0x20>)
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	601a      	str	r2, [r3, #0]
{

}
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	4618      	mov	r0, r3
 800f03e:	3708      	adds	r7, #8
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}
 800f044:	08025e90 	.word	0x08025e90

0800f048 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b084      	sub	sp, #16
 800f04c:	af02      	add	r7, sp, #8
 800f04e:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	4618      	mov	r0, r3
 800f054:	f7ff f958 	bl	800e308 <_ZN14screenViewBase11setupScreenEv>

	tempTextViewBuffer[0] = 0;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2200      	movs	r2, #0
 800f05c:	f8a3 22a4 	strh.w	r2, [r3, #676]	; 0x2a4
	humTextViewBuffer[0] = 0;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2200      	movs	r2, #0
 800f064:	f8a3 22e4 	strh.w	r2, [r3, #740]	; 0x2e4
	//screenViewBase::tempText.setPosition(156, 71, 240, 320);

	screenViewBase::tempText.setPosition(100, 71, 240, 320);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f503 7015 	add.w	r0, r3, #596	; 0x254
 800f06e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800f072:	9300      	str	r3, [sp, #0]
 800f074:	23f0      	movs	r3, #240	; 0xf0
 800f076:	2247      	movs	r2, #71	; 0x47
 800f078:	2164      	movs	r1, #100	; 0x64
 800f07a:	f7fe fa74 	bl	800d566 <_ZN8touchgfx8Drawable11setPositionEssss>
	screenViewBase::tempText.setWildcard(tempTextViewBuffer);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f503 7215 	add.w	r2, r3, #596	; 0x254
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 800f08a:	4619      	mov	r1, r3
 800f08c:	4610      	mov	r0, r2
 800f08e:	f7ff ff67 	bl	800ef60 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>

    screenViewBase::humText.setPosition(100, 180, 240, 320);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	f503 7005 	add.w	r0, r3, #532	; 0x214
 800f098:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800f09c:	9300      	str	r3, [sp, #0]
 800f09e:	23f0      	movs	r3, #240	; 0xf0
 800f0a0:	22b4      	movs	r2, #180	; 0xb4
 800f0a2:	2164      	movs	r1, #100	; 0x64
 800f0a4:	f7fe fa5f 	bl	800d566 <_ZN8touchgfx8Drawable11setPositionEssss>
    screenViewBase::humText.setWildcard(humTextViewBuffer);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f503 7205 	add.w	r2, r3, #532	; 0x214
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800f0b4:	4619      	mov	r1, r3
 800f0b6:	4610      	mov	r0, r2
 800f0b8:	f7ff ff52 	bl	800ef60 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>

}
 800f0bc:	bf00      	nop
 800f0be:	3708      	adds	r7, #8
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b082      	sub	sp, #8
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f7fe fbc6 	bl	800d860 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800f0d4:	bf00      	nop
 800f0d6:	3708      	adds	r7, #8
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd80      	pop	{r7, pc}

0800f0dc <_ZN10screenView28HumidifierControlButtonStateEv>:

void screenView::HumidifierControlButtonState()
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b083      	sub	sp, #12
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
	//presenter->updateHumidifierControlState(buttonOnOff.getState());
}
 800f0e4:	bf00      	nop
 800f0e6:	370c      	adds	r7, #12
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ee:	4770      	bx	lr

0800f0f0 <_ZN10screenView22updateOnOffButtonStateEv>:

void screenView::updateOnOffButtonState()
{
 800f0f0:	b5b0      	push	{r4, r5, r7, lr}
 800f0f2:	b082      	sub	sp, #8
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
	presenter->updateHumidifierControlState(humOnOffButton.getState());
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	3310      	adds	r3, #16
 800f104:	681c      	ldr	r4, [r3, #0]
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f10c:	4618      	mov	r0, r3
 800f10e:	f7ff ff35 	bl	800ef7c <_ZNK8touchgfx12ToggleButton8getStateEv>
 800f112:	4603      	mov	r3, r0
 800f114:	4619      	mov	r1, r3
 800f116:	4628      	mov	r0, r5
 800f118:	47a0      	blx	r4
}
 800f11a:	bf00      	nop
 800f11c:	3708      	adds	r7, #8
 800f11e:	46bd      	mov	sp, r7
 800f120:	bdb0      	pop	{r4, r5, r7, pc}

0800f122 <_ZN10screenView14UpdateTempViewEi>:

void screenView::UpdateTempView(int val)
{
 800f122:	b590      	push	{r4, r7, lr}
 800f124:	b08b      	sub	sp, #44	; 0x2c
 800f126:	af00      	add	r7, sp, #0
 800f128:	6078      	str	r0, [r7, #4]
 800f12a:	6039      	str	r1, [r7, #0]
	std::string s = std::to_string(val);
 800f12c:	f107 030c 	add.w	r3, r7, #12
 800f130:	6839      	ldr	r1, [r7, #0]
 800f132:	4618      	mov	r0, r3
 800f134:	f7ff ff60 	bl	800eff8 <_ZNSt7__cxx119to_stringEi>
	char const *pchar = s.c_str();  //use char const* as target type
 800f138:	f107 030c 	add.w	r3, r7, #12
 800f13c:	4618      	mov	r0, r3
 800f13e:	f014 fac9 	bl	80236d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800f142:	6278      	str	r0, [r7, #36]	; 0x24

	//memset(tempTextViewBuffer, 0x0, sizeof(tempTextViewBuffer));

	Unicode::strncpy(tempTextViewBuffer, pchar, strlen(pchar));
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f503 7429 	add.w	r4, r3, #676	; 0x2a4
 800f14a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f14c:	f7f1 f8a0 	bl	8000290 <strlen>
 800f150:	4603      	mov	r3, r0
 800f152:	b29b      	uxth	r3, r3
 800f154:	461a      	mov	r2, r3
 800f156:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f158:	4620      	mov	r0, r4
 800f15a:	f007 ff9a 	bl	8017092 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	screenViewBase::tempText.invalidate();
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800f164:	4618      	mov	r0, r3
 800f166:	f006 fb2c 	bl	80157c2 <_ZNK8touchgfx8Drawable10invalidateEv>
	std::string s = std::to_string(val);
 800f16a:	f107 030c 	add.w	r3, r7, #12
 800f16e:	4618      	mov	r0, r3
 800f170:	f014 fa6e 	bl	8023650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800f174:	bf00      	nop
 800f176:	372c      	adds	r7, #44	; 0x2c
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd90      	pop	{r4, r7, pc}

0800f17c <_ZN10screenView13UpdateHumViewEi>:

void screenView::UpdateHumView(int val)
{
 800f17c:	b590      	push	{r4, r7, lr}
 800f17e:	b08b      	sub	sp, #44	; 0x2c
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
 800f184:	6039      	str	r1, [r7, #0]
	std::string s = std::to_string(val);
 800f186:	f107 030c 	add.w	r3, r7, #12
 800f18a:	6839      	ldr	r1, [r7, #0]
 800f18c:	4618      	mov	r0, r3
 800f18e:	f7ff ff33 	bl	800eff8 <_ZNSt7__cxx119to_stringEi>

	s += "%";
 800f192:	f107 030c 	add.w	r3, r7, #12
 800f196:	4913      	ldr	r1, [pc, #76]	; (800f1e4 <_ZN10screenView13UpdateHumViewEi+0x68>)
 800f198:	4618      	mov	r0, r3
 800f19a:	f014 fa97 	bl	80236cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
	char const *pchar = s.c_str();  //use char const* as target type
 800f19e:	f107 030c 	add.w	r3, r7, #12
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f014 fa96 	bl	80236d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800f1a8:	6278      	str	r0, [r7, #36]	; 0x24

	//memset(humTextViewBuffer, 0x0, sizeof(humTextViewBuffer));

	Unicode::strncpy(humTextViewBuffer, pchar, strlen(pchar));
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f503 7439 	add.w	r4, r3, #740	; 0x2e4
 800f1b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f1b2:	f7f1 f86d 	bl	8000290 <strlen>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	b29b      	uxth	r3, r3
 800f1ba:	461a      	mov	r2, r3
 800f1bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f1be:	4620      	mov	r0, r4
 800f1c0:	f007 ff67 	bl	8017092 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	screenViewBase::humText.invalidate();
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f006 faf9 	bl	80157c2 <_ZNK8touchgfx8Drawable10invalidateEv>
	std::string s = std::to_string(val);
 800f1d0:	f107 030c 	add.w	r3, r7, #12
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f014 fa3b 	bl	8023650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800f1da:	bf00      	nop
 800f1dc:	372c      	adds	r7, #44	; 0x2c
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd90      	pop	{r4, r7, pc}
 800f1e2:	bf00      	nop
 800f1e4:	0802563c 	.word	0x0802563c

0800f1e8 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 800f1e8:	b408      	push	{r3}
 800f1ea:	b590      	push	{r4, r7, lr}
 800f1ec:	b088      	sub	sp, #32
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	60f8      	str	r0, [r7, #12]
 800f1f2:	60b9      	str	r1, [r7, #8]
 800f1f4:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	3307      	adds	r3, #7
 800f1fa:	08db      	lsrs	r3, r3, #3
 800f1fc:	00db      	lsls	r3, r3, #3
 800f1fe:	ebad 0d03 	sub.w	sp, sp, r3
 800f202:	466b      	mov	r3, sp
 800f204:	3307      	adds	r3, #7
 800f206:	08db      	lsrs	r3, r3, #3
 800f208:	00db      	lsls	r3, r3, #3
 800f20a:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 800f20c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f210:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 800f212:	68bc      	ldr	r4, [r7, #8]
 800f214:	693b      	ldr	r3, [r7, #16]
 800f216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f218:	6879      	ldr	r1, [r7, #4]
 800f21a:	69f8      	ldr	r0, [r7, #28]
 800f21c:	47a0      	blx	r4
 800f21e:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 800f220:	69bb      	ldr	r3, [r7, #24]
 800f222:	69fa      	ldr	r2, [r7, #28]
 800f224:	18d4      	adds	r4, r2, r3
 800f226:	f107 0314 	add.w	r3, r7, #20
 800f22a:	4618      	mov	r0, r3
 800f22c:	f014 f973 	bl	8023516 <_ZNSaIcEC1Ev>
 800f230:	f107 0314 	add.w	r3, r7, #20
 800f234:	4622      	mov	r2, r4
 800f236:	69f9      	ldr	r1, [r7, #28]
 800f238:	68f8      	ldr	r0, [r7, #12]
 800f23a:	f000 f80d 	bl	800f258 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 800f23e:	f107 0314 	add.w	r3, r7, #20
 800f242:	4618      	mov	r0, r3
 800f244:	f014 f968 	bl	8023518 <_ZNSaIcED1Ev>
 800f248:	bf00      	nop
    }
 800f24a:	68f8      	ldr	r0, [r7, #12]
 800f24c:	3720      	adds	r7, #32
 800f24e:	46bd      	mov	sp, r7
 800f250:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800f254:	b001      	add	sp, #4
 800f256:	4770      	bx	lr

0800f258 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 800f258:	b590      	push	{r4, r7, lr}
 800f25a:	b085      	sub	sp, #20
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	60f8      	str	r0, [r7, #12]
 800f260:	60b9      	str	r1, [r7, #8]
 800f262:	607a      	str	r2, [r7, #4]
 800f264:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 800f266:	68fc      	ldr	r4, [r7, #12]
 800f268:	68f8      	ldr	r0, [r7, #12]
 800f26a:	f014 f967 	bl	802353c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 800f26e:	4603      	mov	r3, r0
 800f270:	683a      	ldr	r2, [r7, #0]
 800f272:	4619      	mov	r1, r3
 800f274:	4620      	mov	r0, r4
 800f276:	f014 fa2f 	bl	80236d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 800f27a:	687a      	ldr	r2, [r7, #4]
 800f27c:	68b9      	ldr	r1, [r7, #8]
 800f27e:	68f8      	ldr	r0, [r7, #12]
 800f280:	f000 f805 	bl	800f28e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	4618      	mov	r0, r3
 800f288:	3714      	adds	r7, #20
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd90      	pop	{r4, r7, pc}

0800f28e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 800f28e:	b580      	push	{r7, lr}
 800f290:	b086      	sub	sp, #24
 800f292:	af00      	add	r7, sp, #0
 800f294:	60f8      	str	r0, [r7, #12]
 800f296:	60b9      	str	r1, [r7, #8]
 800f298:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 800f29a:	687a      	ldr	r2, [r7, #4]
 800f29c:	68b9      	ldr	r1, [r7, #8]
 800f29e:	68f8      	ldr	r0, [r7, #12]
 800f2a0:	f000 f804 	bl	800f2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 800f2a4:	bf00      	nop
 800f2a6:	3718      	adds	r7, #24
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}

0800f2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 800f2ac:	b590      	push	{r4, r7, lr}
 800f2ae:	b087      	sub	sp, #28
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	60f8      	str	r0, [r7, #12]
 800f2b4:	60b9      	str	r1, [r7, #8]
 800f2b6:	607a      	str	r2, [r7, #4]
 800f2b8:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 800f2ba:	4623      	mov	r3, r4
 800f2bc:	687a      	ldr	r2, [r7, #4]
 800f2be:	68b9      	ldr	r1, [r7, #8]
 800f2c0:	68f8      	ldr	r0, [r7, #12]
 800f2c2:	f000 f805 	bl	800f2d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 800f2c6:	bf00      	nop
 800f2c8:	371c      	adds	r7, #28
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd90      	pop	{r4, r7, pc}
	...

0800f2d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b086      	sub	sp, #24
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	60f8      	str	r0, [r7, #12]
 800f2d8:	60b9      	str	r1, [r7, #8]
 800f2da:	607a      	str	r2, [r7, #4]
 800f2dc:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 800f2de:	68b8      	ldr	r0, [r7, #8]
 800f2e0:	f000 f83e 	bl	800f360 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d005      	beq.n	800f2f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800f2ea:	68ba      	ldr	r2, [r7, #8]
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d001      	beq.n	800f2f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	e000      	b.n	800f2f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d002      	beq.n	800f302 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 800f2fc:	4817      	ldr	r0, [pc, #92]	; (800f35c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 800f2fe:	f014 f90f 	bl	8023520 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800f302:	6879      	ldr	r1, [r7, #4]
 800f304:	68b8      	ldr	r0, [r7, #8]
 800f306:	f000 f83b 	bl	800f380 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 800f30a:	4603      	mov	r3, r0
 800f30c:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	2b0f      	cmp	r3, #15
 800f312:	d910      	bls.n	800f336 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 800f314:	f107 0314 	add.w	r3, r7, #20
 800f318:	2200      	movs	r2, #0
 800f31a:	4619      	mov	r1, r3
 800f31c:	68f8      	ldr	r0, [r7, #12]
 800f31e:	f014 f917 	bl	8023550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800f322:	4603      	mov	r3, r0
 800f324:	4619      	mov	r1, r3
 800f326:	68f8      	ldr	r0, [r7, #12]
 800f328:	f014 f904 	bl	8023534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	4619      	mov	r1, r3
 800f330:	68f8      	ldr	r0, [r7, #12]
 800f332:	f014 f905 	bl	8023540 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800f336:	68f8      	ldr	r0, [r7, #12]
 800f338:	f014 f8fe 	bl	8023538 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800f33c:	4603      	mov	r3, r0
 800f33e:	687a      	ldr	r2, [r7, #4]
 800f340:	68b9      	ldr	r1, [r7, #8]
 800f342:	4618      	mov	r0, r3
 800f344:	f014 f943 	bl	80235ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	4619      	mov	r1, r3
 800f34c:	68f8      	ldr	r0, [r7, #12]
 800f34e:	f014 f8f9 	bl	8023544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 800f352:	bf00      	nop
 800f354:	3718      	adds	r7, #24
 800f356:	46bd      	mov	sp, r7
 800f358:	bd80      	pop	{r7, pc}
 800f35a:	bf00      	nop
 800f35c:	08025640 	.word	0x08025640

0800f360 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 800f360:	b480      	push	{r7}
 800f362:	b083      	sub	sp, #12
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	bf0c      	ite	eq
 800f36e:	2301      	moveq	r3, #1
 800f370:	2300      	movne	r3, #0
 800f372:	b2db      	uxtb	r3, r3
 800f374:	4618      	mov	r0, r3
 800f376:	370c      	adds	r7, #12
 800f378:	46bd      	mov	sp, r7
 800f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37e:	4770      	bx	lr

0800f380 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800f380:	b5b0      	push	{r4, r5, r7, lr}
 800f382:	b084      	sub	sp, #16
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
 800f388:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800f38a:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800f38c:	1d3b      	adds	r3, r7, #4
 800f38e:	4618      	mov	r0, r3
 800f390:	f000 f80a 	bl	800f3a8 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 800f394:	462a      	mov	r2, r5
 800f396:	6839      	ldr	r1, [r7, #0]
 800f398:	4620      	mov	r0, r4
 800f39a:	f000 f80f 	bl	800f3bc <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 800f39e:	4603      	mov	r3, r0
    }
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	3710      	adds	r7, #16
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bdb0      	pop	{r4, r5, r7, pc}

0800f3a8 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800f3a8:	b480      	push	{r7}
 800f3aa:	b083      	sub	sp, #12
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	370c      	adds	r7, #12
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ba:	4770      	bx	lr

0800f3bc <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f3bc:	b480      	push	{r7}
 800f3be:	b085      	sub	sp, #20
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	60f8      	str	r0, [r7, #12]
 800f3c4:	60b9      	str	r1, [r7, #8]
 800f3c6:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800f3c8:	68ba      	ldr	r2, [r7, #8]
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	1ad3      	subs	r3, r2, r3
    }
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3714      	adds	r7, #20
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d8:	4770      	bx	lr
	...

0800f3dc <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800f3dc:	b480      	push	{r7}
 800f3de:	b083      	sub	sp, #12
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
    {
 800f3e4:	4a04      	ldr	r2, [pc, #16]	; (800f3f8 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	601a      	str	r2, [r3, #0]
    }
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	370c      	adds	r7, #12
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f6:	4770      	bx	lr
 800f3f8:	08025ef0 	.word	0x08025ef0

0800f3fc <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b082      	sub	sp, #8
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
    }
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f7ff ffe9 	bl	800f3dc <_ZN8touchgfx15TouchControllerD1Ev>
 800f40a:	2104      	movs	r1, #4
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f014 f86e 	bl	80234ee <_ZdlPvj>
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	4618      	mov	r0, r3
 800f416:	3708      	adds	r7, #8
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}

0800f41c <_ZN20STM32TouchController4initEv>:
//#include <cstring.h>

extern UART_HandleTypeDef huart1;

void STM32TouchController::init()
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b082      	sub	sp, #8
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
	BSP_TS_Init(240, 320);
 800f424:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f428:	20f0      	movs	r0, #240	; 0xf0
 800f42a:	f7f4 f883 	bl	8003534 <BSP_TS_Init>
}
 800f42e:	bf00      	nop
 800f430:	3708      	adds	r7, #8
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}

0800f436 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800f436:	b580      	push	{r7, lr}
 800f438:	b0a6      	sub	sp, #152	; 0x98
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	60f8      	str	r0, [r7, #12]
 800f43e:	60b9      	str	r1, [r7, #8]
 800f440:	607a      	str	r2, [r7, #4]
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    TS_StateTypeDef TS_State;
    BSP_TS_GetState(&TS_State);
 800f442:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800f446:	4618      	mov	r0, r3
 800f448:	f7f4 f8ae 	bl	80035a8 <BSP_TS_GetState>
    if (TS_State.TouchDetected)
 800f44c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800f450:	2b00      	cmp	r3, #0
 800f452:	d01a      	beq.n	800f48a <_ZN20STM32TouchController11sampleTouchERlS0_+0x54>
    {
    	char buf[128] = {0,};
 800f454:	2300      	movs	r3, #0
 800f456:	613b      	str	r3, [r7, #16]
 800f458:	f107 0314 	add.w	r3, r7, #20
 800f45c:	227c      	movs	r2, #124	; 0x7c
 800f45e:	2100      	movs	r1, #0
 800f460:	4618      	mov	r0, r3
 800f462:	f014 fa19 	bl	8023898 <memset>

        x = TS_State.X;
 800f466:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800f46a:	461a      	mov	r2, r3
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	601a      	str	r2, [r3, #0]
        y = TS_State.Y;
 800f470:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800f474:	461a      	mov	r2, r3
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	601a      	str	r2, [r3, #0]

        //x = 240 - x;
        y = 320 - y;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	f5c3 72a0 	rsb	r2, r3, #320	; 0x140
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	601a      	str	r2, [r3, #0]

        //snprintf(buf, sizeof(buf), "x=%lu y=%lu\r\n", x, y);
        //HAL_UART_Transmit(&huart1, (uint8_t *)buf, strlen(buf), 100);
        //DEBUG_PRINT(buf);

        return true;
 800f486:	2301      	movs	r3, #1
 800f488:	e000      	b.n	800f48c <_ZN20STM32TouchController11sampleTouchERlS0_+0x56>
    }

    //DEBUG_PRINT("return false");
    return false;
 800f48a:	2300      	movs	r3, #0
}
 800f48c:	4618      	mov	r0, r3
 800f48e:	3798      	adds	r7, #152	; 0x98
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}

0800f494 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800f494:	b580      	push	{r7, lr}
 800f496:	b082      	sub	sp, #8
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
 800f49c:	4a05      	ldr	r2, [pc, #20]	; (800f4b4 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	601a      	str	r2, [r3, #0]
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f7ff ff99 	bl	800f3dc <_ZN8touchgfx15TouchControllerD1Ev>
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	3708      	adds	r7, #8
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}
 800f4b4:	08025ed8 	.word	0x08025ed8

0800f4b8 <_ZN20STM32TouchControllerD0Ev>:
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b082      	sub	sp, #8
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f7ff ffe7 	bl	800f494 <_ZN20STM32TouchControllerD1Ev>
 800f4c6:	2104      	movs	r1, #4
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f014 f810 	bl	80234ee <_ZdlPvj>
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3708      	adds	r7, #8
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}

0800f4d8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800f4d8:	b480      	push	{r7}
 800f4da:	b083      	sub	sp, #12
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	4603      	mov	r3, r0
 800f4e0:	71fb      	strb	r3, [r7, #7]

}
 800f4e2:	bf00      	nop
 800f4e4:	370c      	adds	r7, #12
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ec:	4770      	bx	lr

0800f4ee <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800f4ee:	b480      	push	{r7}
 800f4f0:	b083      	sub	sp, #12
 800f4f2:	af00      	add	r7, sp, #0
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	71fb      	strb	r3, [r7, #7]

}
 800f4f8:	bf00      	nop
 800f4fa:	370c      	adds	r7, #12
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f502:	4770      	bx	lr

0800f504 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800f504:	b480      	push	{r7}
 800f506:	b083      	sub	sp, #12
 800f508:	af00      	add	r7, sp, #0
 800f50a:	4603      	mov	r3, r0
 800f50c:	71fb      	strb	r3, [r7, #7]

}
 800f50e:	bf00      	nop
 800f510:	370c      	adds	r7, #12
 800f512:	46bd      	mov	sp, r7
 800f514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f518:	4770      	bx	lr
	...

0800f51c <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800f51c:	b480      	push	{r7}
 800f51e:	b083      	sub	sp, #12
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
    {
 800f524:	4a04      	ldr	r2, [pc, #16]	; (800f538 <_ZN8touchgfx3HALD1Ev+0x1c>)
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	601a      	str	r2, [r3, #0]
    }
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	4618      	mov	r0, r3
 800f52e:	370c      	adds	r7, #12
 800f530:	46bd      	mov	sp, r7
 800f532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f536:	4770      	bx	lr
 800f538:	080269c0 	.word	0x080269c0

0800f53c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b082      	sub	sp, #8
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
    }
 800f544:	6878      	ldr	r0, [r7, #4]
 800f546:	f7ff ffe9 	bl	800f51c <_ZN8touchgfx3HALD1Ev>
 800f54a:	217c      	movs	r1, #124	; 0x7c
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	f013 ffce 	bl	80234ee <_ZdlPvj>
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	4618      	mov	r0, r3
 800f556:	3708      	adds	r7, #8
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}

0800f55c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800f55c:	b480      	push	{r7}
 800f55e:	b083      	sub	sp, #12
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
 800f564:	460b      	mov	r3, r1
 800f566:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	78fa      	ldrb	r2, [r7, #3]
 800f56c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2201      	movs	r2, #1
 800f574:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 800f578:	bf00      	nop
 800f57a:	370c      	adds	r7, #12
 800f57c:	46bd      	mov	sp, r7
 800f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f582:	4770      	bx	lr

0800f584 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800f584:	b580      	push	{r7, lr}
 800f586:	b082      	sub	sp, #8
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800f592:	2b00      	cmp	r3, #0
 800f594:	d009      	beq.n	800f5aa <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	685a      	ldr	r2, [r3, #4]
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	685b      	ldr	r3, [r3, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	4610      	mov	r0, r2
 800f5a4:	4798      	blx	r3
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	e000      	b.n	800f5ac <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 800f5aa:	2300      	movs	r3, #0
        }
    }
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	3708      	adds	r7, #8
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}

0800f5b4 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b082      	sub	sp, #8
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800f5bc:	6878      	ldr	r0, [r7, #4]
 800f5be:	f002 ffc1 	bl	8012544 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	3390      	adds	r3, #144	; 0x90
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	4798      	blx	r3
    }
 800f5ce:	bf00      	nop
 800f5d0:	3708      	adds	r7, #8
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}

0800f5d6 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800f5d6:	b480      	push	{r7}
 800f5d8:	b083      	sub	sp, #12
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	6078      	str	r0, [r7, #4]
 800f5de:	6039      	str	r1, [r7, #0]
    {
        return false;
 800f5e0:	2300      	movs	r3, #0
    }
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	370c      	adds	r7, #12
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ec:	4770      	bx	lr
	...

0800f5f0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b084      	sub	sp, #16
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	60f8      	str	r0, [r7, #12]
 800f5f8:	60b9      	str	r1, [r7, #8]
 800f5fa:	607a      	str	r2, [r7, #4]
 800f5fc:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d106      	bne.n	800f612 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800f604:	4b11      	ldr	r3, [pc, #68]	; (800f64c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800f606:	4a12      	ldr	r2, [pc, #72]	; (800f650 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800f608:	f240 216b 	movw	r1, #619	; 0x26b
 800f60c:	4811      	ldr	r0, [pc, #68]	; (800f654 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 800f60e:	f014 f899 	bl	8023744 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	68ba      	ldr	r2, [r7, #8]
 800f616:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	687a      	ldr	r2, [r7, #4]
 800f61c:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	683a      	ldr	r2, [r7, #0]
 800f622:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2b00      	cmp	r3, #0
 800f628:	bf14      	ite	ne
 800f62a:	2301      	movne	r3, #1
 800f62c:	2300      	moveq	r3, #0
 800f62e:	b2da      	uxtb	r2, r3
 800f630:	4b09      	ldr	r3, [pc, #36]	; (800f658 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 800f632:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	2b00      	cmp	r3, #0
 800f638:	bf14      	ite	ne
 800f63a:	2301      	movne	r3, #1
 800f63c:	2300      	moveq	r3, #0
 800f63e:	b2da      	uxtb	r2, r3
 800f640:	4b06      	ldr	r3, [pc, #24]	; (800f65c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 800f642:	701a      	strb	r2, [r3, #0]
    }
 800f644:	bf00      	nop
 800f646:	3710      	adds	r7, #16
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}
 800f64c:	0802566c 	.word	0x0802566c
 800f650:	080256a4 	.word	0x080256a4
 800f654:	080256f4 	.word	0x080256f4
 800f658:	2000a03a 	.word	0x2000a03a
 800f65c:	2000a03b 	.word	0x2000a03b

0800f660 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 800f660:	b480      	push	{r7}
 800f662:	b083      	sub	sp, #12
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800f668:	2300      	movs	r3, #0
    }
 800f66a:	4618      	mov	r0, r3
 800f66c:	370c      	adds	r7, #12
 800f66e:	46bd      	mov	sp, r7
 800f670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f674:	4770      	bx	lr

0800f676 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800f676:	b580      	push	{r7, lr}
 800f678:	b082      	sub	sp, #8
 800f67a:	af00      	add	r7, sp, #0
 800f67c:	6078      	str	r0, [r7, #4]
 800f67e:	460b      	mov	r3, r1
 800f680:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f686:	2b00      	cmp	r3, #0
 800f688:	d004      	beq.n	800f694 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f68e:	887a      	ldrh	r2, [r7, #2]
 800f690:	4610      	mov	r0, r2
 800f692:	4798      	blx	r3
        }
    }
 800f694:	bf00      	nop
 800f696:	3708      	adds	r7, #8
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}

0800f69c <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b082      	sub	sp, #8
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	685a      	ldr	r2, [r3, #4]
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	685b      	ldr	r3, [r3, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	3318      	adds	r3, #24
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	4610      	mov	r0, r2
 800f6b4:	4798      	blx	r3
 800f6b6:	4603      	mov	r3, r0
    }
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	3708      	adds	r7, #8
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd80      	pop	{r7, pc}

0800f6c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 800f6c0:	b480      	push	{r7}
 800f6c2:	b083      	sub	sp, #12
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f6d4:	429a      	cmp	r2, r3
 800f6d6:	d017      	beq.n	800f708 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 800f6d8:	4b1a      	ldr	r3, [pc, #104]	; (800f744 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d12a      	bne.n	800f736 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 800f6e0:	4b19      	ldr	r3, [pc, #100]	; (800f748 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800f6e2:	881a      	ldrh	r2, [r3, #0]
 800f6e4:	4b19      	ldr	r3, [pc, #100]	; (800f74c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800f6e6:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 800f6e8:	4b19      	ldr	r3, [pc, #100]	; (800f750 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800f6ea:	881a      	ldrh	r2, [r3, #0]
 800f6ec:	4b19      	ldr	r3, [pc, #100]	; (800f754 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800f6ee:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 800f6f0:	4b16      	ldr	r3, [pc, #88]	; (800f74c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800f6f2:	881a      	ldrh	r2, [r3, #0]
 800f6f4:	4b16      	ldr	r3, [pc, #88]	; (800f750 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800f6f6:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 800f6f8:	4b16      	ldr	r3, [pc, #88]	; (800f754 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800f6fa:	881a      	ldrh	r2, [r3, #0]
 800f6fc:	4b12      	ldr	r3, [pc, #72]	; (800f748 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800f6fe:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 800f700:	4b10      	ldr	r3, [pc, #64]	; (800f744 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800f702:	2201      	movs	r2, #1
 800f704:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800f706:	e016      	b.n	800f736 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 800f708:	4b0e      	ldr	r3, [pc, #56]	; (800f744 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800f70a:	781b      	ldrb	r3, [r3, #0]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d012      	beq.n	800f736 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 800f710:	4b0f      	ldr	r3, [pc, #60]	; (800f750 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800f712:	881a      	ldrh	r2, [r3, #0]
 800f714:	4b0d      	ldr	r3, [pc, #52]	; (800f74c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800f716:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 800f718:	4b0b      	ldr	r3, [pc, #44]	; (800f748 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800f71a:	881a      	ldrh	r2, [r3, #0]
 800f71c:	4b0d      	ldr	r3, [pc, #52]	; (800f754 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800f71e:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 800f720:	4b0c      	ldr	r3, [pc, #48]	; (800f754 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800f722:	881a      	ldrh	r2, [r3, #0]
 800f724:	4b0a      	ldr	r3, [pc, #40]	; (800f750 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800f726:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 800f728:	4b08      	ldr	r3, [pc, #32]	; (800f74c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800f72a:	881a      	ldrh	r2, [r3, #0]
 800f72c:	4b06      	ldr	r3, [pc, #24]	; (800f748 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800f72e:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 800f730:	4b04      	ldr	r3, [pc, #16]	; (800f744 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800f732:	2200      	movs	r2, #0
 800f734:	701a      	strb	r2, [r3, #0]
    }
 800f736:	bf00      	nop
 800f738:	370c      	adds	r7, #12
 800f73a:	46bd      	mov	sp, r7
 800f73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f740:	4770      	bx	lr
 800f742:	bf00      	nop
 800f744:	2000a034 	.word	0x2000a034
 800f748:	2000a030 	.word	0x2000a030
 800f74c:	2000a036 	.word	0x2000a036
 800f750:	2000a032 	.word	0x2000a032
 800f754:	2000a038 	.word	0x2000a038

0800f758 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingVariant when chaning rendering variant
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 800f758:	b480      	push	{r7}
 800f75a:	b083      	sub	sp, #12
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
    {

    }
 800f760:	bf00      	nop
 800f762:	370c      	adds	r7, #12
 800f764:	46bd      	mov	sp, r7
 800f766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76a:	4770      	bx	lr

0800f76c <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingVariant when chaning rendering variant
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 800f76c:	b480      	push	{r7}
 800f76e:	b083      	sub	sp, #12
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
    {

    }
 800f774:	bf00      	nop
 800f776:	370c      	adds	r7, #12
 800f778:	46bd      	mov	sp, r7
 800f77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77e:	4770      	bx	lr

0800f780 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800f780:	b580      	push	{r7, lr}
 800f782:	b082      	sub	sp, #8
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	4618      	mov	r0, r3
 800f78c:	f002 f947 	bl	8011a1e <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800f790:	bf00      	nop
 800f792:	3708      	adds	r7, #8
 800f794:	46bd      	mov	sp, r7
 800f796:	bd80      	pop	{r7, pc}

0800f798 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800f798:	b580      	push	{r7, lr}
 800f79a:	b082      	sub	sp, #8
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
 800f7a0:	4a05      	ldr	r2, [pc, #20]	; (800f7b8 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	601a      	str	r2, [r3, #0]
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f7ff feb7 	bl	800f51c <_ZN8touchgfx3HALD1Ev>
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	3708      	adds	r7, #8
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}
 800f7b8:	0802611c 	.word	0x0802611c

0800f7bc <_ZN20TouchGFXGeneratedHALD0Ev>:
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b082      	sub	sp, #8
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
 800f7c4:	6878      	ldr	r0, [r7, #4]
 800f7c6:	f7ff ffe7 	bl	800f798 <_ZN20TouchGFXGeneratedHALD1Ev>
 800f7ca:	217c      	movs	r1, #124	; 0x7c
 800f7cc:	6878      	ldr	r0, [r7, #4]
 800f7ce:	f013 fe8e 	bl	80234ee <_ZdlPvj>
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	3708      	adds	r7, #8
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd80      	pop	{r7, pc}

0800f7dc <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b082      	sub	sp, #8
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7ff ffca 	bl	800f780 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800f7ec:	bf00      	nop
 800f7ee:	3708      	adds	r7, #8
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}

0800f7f4 <_ZN11TouchGFXHAL10initializeEv>:
}

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b082      	sub	sp, #8
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	4618      	mov	r0, r3
 800f800:	f001 fb7a 	bl	8010ef8 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 800f804:	bf00      	nop
 800f806:	3708      	adds	r7, #8
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd80      	pop	{r7, pc}

0800f80c <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b082      	sub	sp, #8
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
	enableLCDControllerInterrupt();
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	3368      	adds	r3, #104	; 0x68
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	6878      	ldr	r0, [r7, #4]
 800f81e:	4798      	blx	r3
	enableInterrupts();
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	3360      	adds	r3, #96	; 0x60
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	4798      	blx	r3

	OSWrappers::waitForVSync();
 800f82c:	f000 f91e 	bl	800fa6c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
	backPorchExited();
 800f830:	687a      	ldr	r2, [r7, #4]
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	3358      	adds	r3, #88	; 0x58
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	4610      	mov	r0, r2
 800f83c:	4798      	blx	r3

	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 800f83e:	2201      	movs	r2, #1
 800f840:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f844:	4807      	ldr	r0, [pc, #28]	; (800f864 <_ZN11TouchGFXHAL9taskEntryEv+0x58>)
 800f846:	f7f4 fe13 	bl	8004470 <HAL_GPIO_WritePin>

	LCD_IO_WriteReg(0x29);
 800f84a:	2029      	movs	r0, #41	; 0x29
 800f84c:	f7f3 fdbe 	bl	80033cc <LCD_IO_WriteReg>
	for(;;)
	{
		OSWrappers::waitForVSync();
 800f850:	f000 f90c 	bl	800fa6c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
		backPorchExited();
 800f854:	687a      	ldr	r2, [r7, #4]
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	3358      	adds	r3, #88	; 0x58
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	4610      	mov	r0, r2
 800f860:	4798      	blx	r3
		OSWrappers::waitForVSync();
 800f862:	e7f5      	b.n	800f850 <_ZN11TouchGFXHAL9taskEntryEv+0x44>
 800f864:	40021800 	.word	0x40021800

0800f868 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b082      	sub	sp, #8
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	4618      	mov	r0, r3
 800f874:	f001 fbcc 	bl	8011010 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800f878:	4603      	mov	r3, r0
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3708      	adds	r7, #8
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}

0800f882 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800f882:	b580      	push	{r7, lr}
 800f884:	b082      	sub	sp, #8
 800f886:	af00      	add	r7, sp, #0
 800f888:	6078      	str	r0, [r7, #4]
 800f88a:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	6839      	ldr	r1, [r7, #0]
 800f890:	4618      	mov	r0, r3
 800f892:	f001 fbcb 	bl	801102c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800f896:	bf00      	nop
 800f898:	3708      	adds	r7, #8
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}

0800f89e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800f89e:	b580      	push	{r7, lr}
 800f8a0:	b082      	sub	sp, #8
 800f8a2:	af00      	add	r7, sp, #0
 800f8a4:	6078      	str	r0, [r7, #4]
 800f8a6:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	6839      	ldr	r1, [r7, #0]
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f001 fbd3 	bl	8011058 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 800f8b2:	bf00      	nop
 800f8b4:	3708      	adds	r7, #8
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bd80      	pop	{r7, pc}

0800f8ba <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800f8ba:	b580      	push	{r7, lr}
 800f8bc:	b084      	sub	sp, #16
 800f8be:	af00      	add	r7, sp, #0
 800f8c0:	60f8      	str	r0, [r7, #12]
 800f8c2:	60b9      	str	r1, [r7, #8]
 800f8c4:	607a      	str	r2, [r7, #4]
 800f8c6:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800f8c8:	68f8      	ldr	r0, [r7, #12]
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	687a      	ldr	r2, [r7, #4]
 800f8ce:	68b9      	ldr	r1, [r7, #8]
 800f8d0:	f001 fbd0 	bl	8011074 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 800f8d4:	4603      	mov	r3, r0
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	3710      	adds	r7, #16
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}

0800f8de <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800f8de:	b580      	push	{r7, lr}
 800f8e0:	b082      	sub	sp, #8
 800f8e2:	af00      	add	r7, sp, #0
 800f8e4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f001 fb37 	bl	8010f5c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800f8ee:	bf00      	nop
 800f8f0:	3708      	adds	r7, #8
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	bd80      	pop	{r7, pc}

0800f8f6 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800f8f6:	b580      	push	{r7, lr}
 800f8f8:	b082      	sub	sp, #8
 800f8fa:	af00      	add	r7, sp, #0
 800f8fc:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	4618      	mov	r0, r3
 800f902:	f001 fb3b 	bl	8010f7c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800f906:	bf00      	nop
 800f908:	3708      	adds	r7, #8
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd80      	pop	{r7, pc}

0800f90e <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800f90e:	b580      	push	{r7, lr}
 800f910:	b082      	sub	sp, #8
 800f912:	af00      	add	r7, sp, #0
 800f914:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	4618      	mov	r0, r3
 800f91a:	f001 fb3d 	bl	8010f98 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800f91e:	bf00      	nop
 800f920:	3708      	adds	r7, #8
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}

0800f926 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800f926:	b580      	push	{r7, lr}
 800f928:	b082      	sub	sp, #8
 800f92a:	af00      	add	r7, sp, #0
 800f92c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	4618      	mov	r0, r3
 800f932:	f001 fb3f 	bl	8010fb4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800f936:	bf00      	nop
 800f938:	3708      	adds	r7, #8
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}
	...

0800f940 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800f940:	b580      	push	{r7, lr}
 800f942:	b082      	sub	sp, #8
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
 800f948:	4a05      	ldr	r2, [pc, #20]	; (800f960 <_ZN11TouchGFXHALD1Ev+0x20>)
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	601a      	str	r2, [r3, #0]
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	4618      	mov	r0, r3
 800f952:	f7ff ff21 	bl	800f798 <_ZN20TouchGFXGeneratedHALD1Ev>
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	4618      	mov	r0, r3
 800f95a:	3708      	adds	r7, #8
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}
 800f960:	08025f08 	.word	0x08025f08

0800f964 <_ZN11TouchGFXHALD0Ev>:
 800f964:	b580      	push	{r7, lr}
 800f966:	b082      	sub	sp, #8
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f7ff ffe7 	bl	800f940 <_ZN11TouchGFXHALD1Ev>
 800f972:	217c      	movs	r1, #124	; 0x7c
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f013 fdba 	bl	80234ee <_ZdlPvj>
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	4618      	mov	r0, r3
 800f97e:	3708      	adds	r7, #8
 800f980:	46bd      	mov	sp, r7
 800f982:	bd80      	pop	{r7, pc}

0800f984 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 800f984:	b580      	push	{r7, lr}
 800f986:	af00      	add	r7, sp, #0
    frame_buffer_sem = osSemaphoreCreate(osSemaphore(frame_buffer_sem), 1);
 800f988:	2101      	movs	r1, #1
 800f98a:	4811      	ldr	r0, [pc, #68]	; (800f9d0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 800f98c:	f7f9 fd1c 	bl	80093c8 <osSemaphoreCreate>
 800f990:	4603      	mov	r3, r0
 800f992:	4a10      	ldr	r2, [pc, #64]	; (800f9d4 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800f994:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800f996:	4b0f      	ldr	r3, [pc, #60]	; (800f9d4 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d105      	bne.n	800f9aa <_ZN8touchgfx10OSWrappers10initializeEv+0x26>
 800f99e:	4b0e      	ldr	r3, [pc, #56]	; (800f9d8 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 800f9a0:	4a0e      	ldr	r2, [pc, #56]	; (800f9dc <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800f9a2:	2125      	movs	r1, #37	; 0x25
 800f9a4:	480e      	ldr	r0, [pc, #56]	; (800f9e0 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800f9a6:	f013 fecd 	bl	8023744 <__assert_func>

    vsync_sem = osSemaphoreCreate(osSemaphore(vsync_sem), 1);
 800f9aa:	2101      	movs	r1, #1
 800f9ac:	480d      	ldr	r0, [pc, #52]	; (800f9e4 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800f9ae:	f7f9 fd0b 	bl	80093c8 <osSemaphoreCreate>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	4a0c      	ldr	r2, [pc, #48]	; (800f9e8 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 800f9b6:	6013      	str	r3, [r2, #0]
    assert((vsync_sem != NULL) && "Creation of vsync semaphore failed");
 800f9b8:	4b0b      	ldr	r3, [pc, #44]	; (800f9e8 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d105      	bne.n	800f9cc <_ZN8touchgfx10OSWrappers10initializeEv+0x48>
 800f9c0:	4b0a      	ldr	r3, [pc, #40]	; (800f9ec <_ZN8touchgfx10OSWrappers10initializeEv+0x68>)
 800f9c2:	4a06      	ldr	r2, [pc, #24]	; (800f9dc <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800f9c4:	2128      	movs	r1, #40	; 0x28
 800f9c6:	4806      	ldr	r0, [pc, #24]	; (800f9e0 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800f9c8:	f013 febc 	bl	8023744 <__assert_func>
}
 800f9cc:	bf00      	nop
 800f9ce:	bd80      	pop	{r7, pc}
 800f9d0:	08025fbc 	.word	0x08025fbc
 800f9d4:	20008e38 	.word	0x20008e38
 800f9d8:	08025738 	.word	0x08025738
 800f9dc:	08025784 	.word	0x08025784
 800f9e0:	080257b4 	.word	0x080257b4
 800f9e4:	08025fc4 	.word	0x08025fc4
 800f9e8:	20008e3c 	.word	0x20008e3c
 800f9ec:	080257e0 	.word	0x080257e0

0800f9f0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, osWaitForever);
 800f9f4:	4b04      	ldr	r3, [pc, #16]	; (800fa08 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	f04f 31ff 	mov.w	r1, #4294967295
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f7f9 fd23 	bl	8009448 <osSemaphoreWait>
}
 800fa02:	bf00      	nop
 800fa04:	bd80      	pop	{r7, pc}
 800fa06:	bf00      	nop
 800fa08:	20008e38 	.word	0x20008e38

0800fa0c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800fa10:	4b03      	ldr	r3, [pc, #12]	; (800fa20 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7f9 fd65 	bl	80094e4 <osSemaphoreRelease>
}
 800fa1a:	bf00      	nop
 800fa1c:	bd80      	pop	{r7, pc}
 800fa1e:	bf00      	nop
 800fa20:	20008e38 	.word	0x20008e38

0800fa24 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, 0);
 800fa28:	4b03      	ldr	r3, [pc, #12]	; (800fa38 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	2100      	movs	r1, #0
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f7f9 fd0a 	bl	8009448 <osSemaphoreWait>
}
 800fa34:	bf00      	nop
 800fa36:	bd80      	pop	{r7, pc}
 800fa38:	20008e38 	.word	0x20008e38

0800fa3c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(frame_buffer_sem);
 800fa40:	4b03      	ldr	r3, [pc, #12]	; (800fa50 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	4618      	mov	r0, r3
 800fa46:	f7f9 fd4d 	bl	80094e4 <osSemaphoreRelease>
}
 800fa4a:	bf00      	nop
 800fa4c:	bd80      	pop	{r7, pc}
 800fa4e:	bf00      	nop
 800fa50:	20008e38 	.word	0x20008e38

0800fa54 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(vsync_sem);
 800fa58:	4b03      	ldr	r3, [pc, #12]	; (800fa68 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f7f9 fd41 	bl	80094e4 <osSemaphoreRelease>
}
 800fa62:	bf00      	nop
 800fa64:	bd80      	pop	{r7, pc}
 800fa66:	bf00      	nop
 800fa68:	20008e3c 	.word	0x20008e3c

0800fa6c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osSemaphoreWait(vsync_sem, 0);
 800fa70:	4b07      	ldr	r3, [pc, #28]	; (800fa90 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	2100      	movs	r1, #0
 800fa76:	4618      	mov	r0, r3
 800fa78:	f7f9 fce6 	bl	8009448 <osSemaphoreWait>

    // Then, wait for next VSYNC to occur.
    osSemaphoreWait(vsync_sem, osWaitForever);
 800fa7c:	4b04      	ldr	r3, [pc, #16]	; (800fa90 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	f04f 31ff 	mov.w	r1, #4294967295
 800fa84:	4618      	mov	r0, r3
 800fa86:	f7f9 fcdf 	bl	8009448 <osSemaphoreWait>
}
 800fa8a:	bf00      	nop
 800fa8c:	bd80      	pop	{r7, pc}
 800fa8e:	bf00      	nop
 800fa90:	20008e3c 	.word	0x20008e3c

0800fa94 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b082      	sub	sp, #8
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 800fa9e:	88fb      	ldrh	r3, [r7, #6]
 800faa0:	4618      	mov	r0, r3
 800faa2:	f7f9 fbf1 	bl	8009288 <osDelay>
}
 800faa6:	bf00      	nop
 800faa8:	3708      	adds	r7, #8
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}
	...

0800fab0 <__NVIC_EnableIRQ>:
{
 800fab0:	b480      	push	{r7}
 800fab2:	b083      	sub	sp, #12
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	4603      	mov	r3, r0
 800fab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800faba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	db0b      	blt.n	800fada <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fac2:	79fb      	ldrb	r3, [r7, #7]
 800fac4:	f003 021f 	and.w	r2, r3, #31
 800fac8:	4907      	ldr	r1, [pc, #28]	; (800fae8 <__NVIC_EnableIRQ+0x38>)
 800faca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800face:	095b      	lsrs	r3, r3, #5
 800fad0:	2001      	movs	r0, #1
 800fad2:	fa00 f202 	lsl.w	r2, r0, r2
 800fad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800fada:	bf00      	nop
 800fadc:	370c      	adds	r7, #12
 800fade:	46bd      	mov	sp, r7
 800fae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae4:	4770      	bx	lr
 800fae6:	bf00      	nop
 800fae8:	e000e100 	.word	0xe000e100

0800faec <__NVIC_DisableIRQ>:
{
 800faec:	b480      	push	{r7}
 800faee:	b083      	sub	sp, #12
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	4603      	mov	r3, r0
 800faf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800faf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	db12      	blt.n	800fb24 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fafe:	79fb      	ldrb	r3, [r7, #7]
 800fb00:	f003 021f 	and.w	r2, r3, #31
 800fb04:	490a      	ldr	r1, [pc, #40]	; (800fb30 <__NVIC_DisableIRQ+0x44>)
 800fb06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fb0a:	095b      	lsrs	r3, r3, #5
 800fb0c:	2001      	movs	r0, #1
 800fb0e:	fa00 f202 	lsl.w	r2, r0, r2
 800fb12:	3320      	adds	r3, #32
 800fb14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800fb18:	f3bf 8f4f 	dsb	sy
}
 800fb1c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800fb1e:	f3bf 8f6f 	isb	sy
}
 800fb22:	bf00      	nop
}
 800fb24:	bf00      	nop
 800fb26:	370c      	adds	r7, #12
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2e:	4770      	bx	lr
 800fb30:	e000e100 	.word	0xe000e100

0800fb34 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800fb34:	b480      	push	{r7}
 800fb36:	b083      	sub	sp, #12
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
        : color(0)
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	2200      	movs	r2, #0
 800fb40:	601a      	str	r2, [r3, #0]
    }
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	4618      	mov	r0, r3
 800fb46:	370c      	adds	r7, #12
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4e:	4770      	bx	lr

0800fb50 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 800fb50:	b480      	push	{r7}
 800fb52:	b083      	sub	sp, #12
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
        return color;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
    }
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	370c      	adds	r7, #12
 800fb60:	46bd      	mov	sp, r7
 800fb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb66:	4770      	bx	lr

0800fb68 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800fb68:	b480      	push	{r7}
 800fb6a:	b083      	sub	sp, #12
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
    {
 800fb70:	4a04      	ldr	r2, [pc, #16]	; (800fb84 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	601a      	str	r2, [r3, #0]
    }
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	4618      	mov	r0, r3
 800fb7a:	370c      	adds	r7, #12
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb82:	4770      	bx	lr
 800fb84:	08026024 	.word	0x08026024

0800fb88 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b082      	sub	sp, #8
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
    }
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f7ff ffe9 	bl	800fb68 <_ZN8touchgfx9DMA_QueueD1Ev>
 800fb96:	2104      	movs	r1, #4
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f013 fca8 	bl	80234ee <_ZdlPvj>
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	4618      	mov	r0, r3
 800fba2:	3708      	adds	r7, #8
 800fba4:	46bd      	mov	sp, r7
 800fba6:	bd80      	pop	{r7, pc}

0800fba8 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b082      	sub	sp, #8
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	3344      	adds	r3, #68	; 0x44
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	6878      	ldr	r0, [r7, #4]
 800fbba:	4798      	blx	r3
    }
 800fbbc:	bf00      	nop
 800fbbe:	3708      	adds	r7, #8
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}

0800fbc4 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800fbc4:	b480      	push	{r7}
 800fbc6:	b083      	sub	sp, #12
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
    {
 800fbcc:	4a04      	ldr	r2, [pc, #16]	; (800fbe0 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	601a      	str	r2, [r3, #0]
    }
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	370c      	adds	r7, #12
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbde:	4770      	bx	lr
 800fbe0:	08026e0c 	.word	0x08026e0c

0800fbe4 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b082      	sub	sp, #8
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
    }
 800fbec:	6878      	ldr	r0, [r7, #4]
 800fbee:	f7ff ffe9 	bl	800fbc4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800fbf2:	210c      	movs	r1, #12
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f013 fc7a 	bl	80234ee <_ZdlPvj>
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	3708      	adds	r7, #8
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd80      	pop	{r7, pc}

0800fc04 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800fc04:	b480      	push	{r7}
 800fc06:	b083      	sub	sp, #12
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
 800fc0c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800fc0e:	4a09      	ldr	r2, [pc, #36]	; (800fc34 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	601a      	str	r2, [r3, #0]
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	683a      	ldr	r2, [r7, #0]
 800fc18:	605a      	str	r2, [r3, #4]
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	721a      	strb	r2, [r3, #8]
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2200      	movs	r2, #0
 800fc24:	725a      	strb	r2, [r3, #9]
    {
    }
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	4618      	mov	r0, r3
 800fc2a:	370c      	adds	r7, #12
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc32:	4770      	bx	lr
 800fc34:	08026e0c 	.word	0x08026e0c

0800fc38 <_ZN10STM32F4DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 800fc38:	b480      	push	{r7}
 800fc3a:	b083      	sub	sp, #12
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 800fc40:	2301      	movs	r3, #1
    }
 800fc42:	4618      	mov	r0, r3
 800fc44:	370c      	adds	r7, #12
 800fc46:	46bd      	mov	sp, r7
 800fc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4c:	4770      	bx	lr

0800fc4e <_ZN10STM32F4DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 800fc4e:	b580      	push	{r7, lr}
 800fc50:	b082      	sub	sp, #8
 800fc52:	af00      	add	r7, sp, #0
 800fc54:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 800fc56:	687a      	ldr	r2, [r7, #4]
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	3328      	adds	r3, #40	; 0x28
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	4610      	mov	r0, r2
 800fc62:	4798      	blx	r3
    }
 800fc64:	bf00      	nop
 800fc66:	3708      	adds	r7, #8
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}

0800fc6c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b082      	sub	sp, #8
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	685a      	ldr	r2, [r3, #4]
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	685b      	ldr	r3, [r3, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	3314      	adds	r3, #20
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	4610      	mov	r0, r2
 800fc84:	4798      	blx	r3
    }
 800fc86:	bf00      	nop
 800fc88:	3708      	adds	r7, #8
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}

0800fc8e <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 800fc8e:	b580      	push	{r7, lr}
 800fc90:	b082      	sub	sp, #8
 800fc92:	af00      	add	r7, sp, #0
 800fc94:	6078      	str	r0, [r7, #4]
    (void)handle; // Unused argument
    HAL::getInstance()->signalDMAInterrupt();
 800fc96:	f7fc ff3d 	bl	800cb14 <_ZN8touchgfx3HAL11getInstanceEv>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f7ff ffe5 	bl	800fc6c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 800fca2:	bf00      	nop
 800fca4:	3708      	adds	r7, #8
 800fca6:	46bd      	mov	sp, r7
 800fca8:	bd80      	pop	{r7, pc}

0800fcaa <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800fcaa:	b580      	push	{r7, lr}
 800fcac:	b082      	sub	sp, #8
 800fcae:	af00      	add	r7, sp, #0
 800fcb0:	6078      	str	r0, [r7, #4]
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	3318      	adds	r3, #24
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7ff ff3c 	bl	800fb34 <_ZN8touchgfx9colortypeC1Ev>
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	3708      	adds	r7, #8
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}
	...

0800fcc8 <_ZN10STM32F4DMAC1Ev>:
}

STM32F4DMA::STM32F4DMA()
 800fcc8:	b5b0      	push	{r4, r5, r7, lr}
 800fcca:	b082      	sub	sp, #8
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800fcd0:	687a      	ldr	r2, [r7, #4]
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	330c      	adds	r3, #12
 800fcd6:	4619      	mov	r1, r3
 800fcd8:	4610      	mov	r0, r2
 800fcda:	f7ff ff93 	bl	800fc04 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800fcde:	4a0e      	ldr	r2, [pc, #56]	; (800fd18 <_ZN10STM32F4DMAC1Ev+0x50>)
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	601a      	str	r2, [r3, #0]
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	f103 000c 	add.w	r0, r3, #12
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	3320      	adds	r3, #32
 800fcee:	2260      	movs	r2, #96	; 0x60
 800fcf0:	4619      	mov	r1, r3
 800fcf2:	f002 fd53 	bl	801279c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	3320      	adds	r3, #32
 800fcfa:	245f      	movs	r4, #95	; 0x5f
 800fcfc:	461d      	mov	r5, r3
 800fcfe:	2c00      	cmp	r4, #0
 800fd00:	db05      	blt.n	800fd0e <_ZN10STM32F4DMAC1Ev+0x46>
 800fd02:	4628      	mov	r0, r5
 800fd04:	f7ff ffd1 	bl	800fcaa <_ZN8touchgfx6BlitOpC1Ev>
 800fd08:	3520      	adds	r5, #32
 800fd0a:	3c01      	subs	r4, #1
 800fd0c:	e7f7      	b.n	800fcfe <_ZN10STM32F4DMAC1Ev+0x36>
{
}
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	4618      	mov	r0, r3
 800fd12:	3708      	adds	r7, #8
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bdb0      	pop	{r4, r5, r7, pc}
 800fd18:	08025fd4 	.word	0x08025fd4

0800fd1c <_ZN10STM32F4DMAD1Ev>:

STM32F4DMA::~STM32F4DMA()
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b082      	sub	sp, #8
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
 800fd24:	4a09      	ldr	r2, [pc, #36]	; (800fd4c <_ZN10STM32F4DMAD1Ev+0x30>)
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 800fd2a:	205a      	movs	r0, #90	; 0x5a
 800fd2c:	f7ff fede 	bl	800faec <__NVIC_DisableIRQ>
STM32F4DMA::~STM32F4DMA()
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	330c      	adds	r3, #12
 800fd34:	4618      	mov	r0, r3
 800fd36:	f000 fb27 	bl	8010388 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f7ff ff41 	bl	800fbc4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	4618      	mov	r0, r3
 800fd46:	3708      	adds	r7, #8
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}
 800fd4c:	08025fd4 	.word	0x08025fd4

0800fd50 <_ZN10STM32F4DMAD0Ev>:
STM32F4DMA::~STM32F4DMA()
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b082      	sub	sp, #8
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
}
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f7ff ffdf 	bl	800fd1c <_ZN10STM32F4DMAD1Ev>
 800fd5e:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 800fd62:	6878      	ldr	r0, [r7, #4]
 800fd64:	f013 fbc3 	bl	80234ee <_ZdlPvj>
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	3708      	adds	r7, #8
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}
	...

0800fd74 <_ZN10STM32F4DMA10initializeEv>:

void STM32F4DMA::initialize()
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b084      	sub	sp, #16
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	60fb      	str	r3, [r7, #12]
 800fd80:	4b10      	ldr	r3, [pc, #64]	; (800fdc4 <_ZN10STM32F4DMA10initializeEv+0x50>)
 800fd82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd84:	4a0f      	ldr	r2, [pc, #60]	; (800fdc4 <_ZN10STM32F4DMA10initializeEv+0x50>)
 800fd86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800fd8a:	6313      	str	r3, [r2, #48]	; 0x30
 800fd8c:	4b0d      	ldr	r3, [pc, #52]	; (800fdc4 <_ZN10STM32F4DMA10initializeEv+0x50>)
 800fd8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fd94:	60fb      	str	r3, [r7, #12]
 800fd96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800fd98:	4b0a      	ldr	r3, [pc, #40]	; (800fdc4 <_ZN10STM32F4DMA10initializeEv+0x50>)
 800fd9a:	691b      	ldr	r3, [r3, #16]
 800fd9c:	4a09      	ldr	r2, [pc, #36]	; (800fdc4 <_ZN10STM32F4DMA10initializeEv+0x50>)
 800fd9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800fda2:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800fda4:	4b07      	ldr	r3, [pc, #28]	; (800fdc4 <_ZN10STM32F4DMA10initializeEv+0x50>)
 800fda6:	691b      	ldr	r3, [r3, #16]
 800fda8:	4a06      	ldr	r2, [pc, #24]	; (800fdc4 <_ZN10STM32F4DMA10initializeEv+0x50>)
 800fdaa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800fdae:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800fdb0:	4b05      	ldr	r3, [pc, #20]	; (800fdc8 <_ZN10STM32F4DMA10initializeEv+0x54>)
 800fdb2:	4a06      	ldr	r2, [pc, #24]	; (800fdcc <_ZN10STM32F4DMA10initializeEv+0x58>)
 800fdb4:	611a      	str	r2, [r3, #16]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 800fdb6:	205a      	movs	r0, #90	; 0x5a
 800fdb8:	f7ff fe7a 	bl	800fab0 <__NVIC_EnableIRQ>
}
 800fdbc:	bf00      	nop
 800fdbe:	3710      	adds	r7, #16
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}
 800fdc4:	40023800 	.word	0x40023800
 800fdc8:	2000abac 	.word	0x2000abac
 800fdcc:	0800fc8f 	.word	0x0800fc8f

0800fdd0 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F4DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b084      	sub	sp, #16
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
 800fdd8:	460b      	mov	r3, r1
 800fdda:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800fddc:	2300      	movs	r3, #0
 800fdde:	60fb      	str	r3, [r7, #12]

    switch (format)
 800fde0:	78fb      	ldrb	r3, [r7, #3]
 800fde2:	2b0b      	cmp	r3, #11
 800fde4:	d826      	bhi.n	800fe34 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800fde6:	a201      	add	r2, pc, #4	; (adr r2, 800fdec <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800fde8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdec:	0800fe29 	.word	0x0800fe29
 800fdf0:	0800fe23 	.word	0x0800fe23
 800fdf4:	0800fe1d 	.word	0x0800fe1d
 800fdf8:	0800fe35 	.word	0x0800fe35
 800fdfc:	0800fe35 	.word	0x0800fe35
 800fe00:	0800fe35 	.word	0x0800fe35
 800fe04:	0800fe35 	.word	0x0800fe35
 800fe08:	0800fe2f 	.word	0x0800fe2f
 800fe0c:	0800fe2f 	.word	0x0800fe2f
 800fe10:	0800fe2f 	.word	0x0800fe2f
 800fe14:	0800fe2f 	.word	0x0800fe2f
 800fe18:	0800fe2f 	.word	0x0800fe2f
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	60fb      	str	r3, [r7, #12]
        break;
 800fe20:	e00e      	b.n	800fe40 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 800fe22:	2301      	movs	r3, #1
 800fe24:	60fb      	str	r3, [r7, #12]
        break;
 800fe26:	e00b      	b.n	800fe40 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800fe28:	2302      	movs	r3, #2
 800fe2a:	60fb      	str	r3, [r7, #12]
        break;
 800fe2c:	e008      	b.n	800fe40 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 800fe2e:	2305      	movs	r3, #5
 800fe30:	60fb      	str	r3, [r7, #12]
        break;
 800fe32:	e005      	b.n	800fe40 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 800fe34:	4b05      	ldr	r3, [pc, #20]	; (800fe4c <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 800fe36:	4a06      	ldr	r2, [pc, #24]	; (800fe50 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 800fe38:	2165      	movs	r1, #101	; 0x65
 800fe3a:	4806      	ldr	r0, [pc, #24]	; (800fe54 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 800fe3c:	f013 fc82 	bl	8023744 <__assert_func>
        break;
    }

    return dma2dColorMode;
 800fe40:	68fb      	ldr	r3, [r7, #12]
}
 800fe42:	4618      	mov	r0, r3
 800fe44:	3710      	adds	r7, #16
 800fe46:	46bd      	mov	sp, r7
 800fe48:	bd80      	pop	{r7, pc}
 800fe4a:	bf00      	nop
 800fe4c:	0802581c 	.word	0x0802581c
 800fe50:	08025838 	.word	0x08025838
 800fe54:	08025884 	.word	0x08025884

0800fe58 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F4DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b084      	sub	sp, #16
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
 800fe60:	460b      	mov	r3, r1
 800fe62:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800fe64:	2300      	movs	r3, #0
 800fe66:	60fb      	str	r3, [r7, #12]

    switch (format)
 800fe68:	78fb      	ldrb	r3, [r7, #3]
 800fe6a:	2b0a      	cmp	r3, #10
 800fe6c:	d821      	bhi.n	800feb2 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 800fe6e:	a201      	add	r2, pc, #4	; (adr r2, 800fe74 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800fe70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe74:	0800fead 	.word	0x0800fead
 800fe78:	0800fea7 	.word	0x0800fea7
 800fe7c:	0800fea1 	.word	0x0800fea1
 800fe80:	0800feb3 	.word	0x0800feb3
 800fe84:	0800feb3 	.word	0x0800feb3
 800fe88:	0800feb3 	.word	0x0800feb3
 800fe8c:	0800feb3 	.word	0x0800feb3
 800fe90:	0800fea7 	.word	0x0800fea7
 800fe94:	0800fea7 	.word	0x0800fea7
 800fe98:	0800fea7 	.word	0x0800fea7
 800fe9c:	0800fea7 	.word	0x0800fea7
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800fea0:	2300      	movs	r3, #0
 800fea2:	60fb      	str	r3, [r7, #12]
        break;
 800fea4:	e00b      	b.n	800febe <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800fea6:	2301      	movs	r3, #1
 800fea8:	60fb      	str	r3, [r7, #12]
        break;
 800feaa:	e008      	b.n	800febe <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800feac:	2302      	movs	r3, #2
 800feae:	60fb      	str	r3, [r7, #12]
        break;
 800feb0:	e005      	b.n	800febe <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 800feb2:	4b05      	ldr	r3, [pc, #20]	; (800fec8 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 800feb4:	4a05      	ldr	r2, [pc, #20]	; (800fecc <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800feb6:	2186      	movs	r1, #134	; 0x86
 800feb8:	4805      	ldr	r0, [pc, #20]	; (800fed0 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 800feba:	f013 fc43 	bl	8023744 <__assert_func>
        break;
    }

    return dma2dColorMode;
 800febe:	68fb      	ldr	r3, [r7, #12]
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3710      	adds	r7, #16
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}
 800fec8:	0802581c 	.word	0x0802581c
 800fecc:	080258b0 	.word	0x080258b0
 800fed0:	08025884 	.word	0x08025884

0800fed4 <_ZN10STM32F4DMA11getBlitCapsEv>:

BlitOperations STM32F4DMA::getBlitCaps()
{
 800fed4:	b480      	push	{r7}
 800fed6:	b083      	sub	sp, #12
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 800fedc:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 800fee0:	4618      	mov	r0, r3
 800fee2:	370c      	adds	r7, #12
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr

0800feec <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32F4DMA::setupDataCopy(const BlitOp& blitOp)
{
 800feec:	b590      	push	{r4, r7, lr}
 800feee:	b089      	sub	sp, #36	; 0x24
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
 800fef4:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	7f5b      	ldrb	r3, [r3, #29]
 800fefa:	4619      	mov	r1, r3
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f7ff ff67 	bl	800fdd0 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800ff02:	61f8      	str	r0, [r7, #28]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	7f9b      	ldrb	r3, [r3, #30]
 800ff08:	4619      	mov	r1, r3
 800ff0a:	6878      	ldr	r0, [r7, #4]
 800ff0c:	f7ff ff60 	bl	800fdd0 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800ff10:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	7f9b      	ldrb	r3, [r3, #30]
 800ff16:	4619      	mov	r1, r3
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f7ff ff9d 	bl	800fe58 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800ff1e:	6178      	str	r0, [r7, #20]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	8adb      	ldrh	r3, [r3, #22]
 800ff24:	461a      	mov	r2, r3
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	8a1b      	ldrh	r3, [r3, #16]
 800ff2a:	1ad2      	subs	r2, r2, r3
 800ff2c:	4b8e      	ldr	r3, [pc, #568]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 800ff2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	8adb      	ldrh	r3, [r3, #22]
 800ff34:	461a      	mov	r2, r3
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	8a1b      	ldrh	r3, [r3, #16]
 800ff3a:	1ad2      	subs	r2, r2, r3
 800ff3c:	4b8a      	ldr	r3, [pc, #552]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 800ff3e:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	8a9b      	ldrh	r3, [r3, #20]
 800ff44:	461a      	mov	r2, r3
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	8a1b      	ldrh	r3, [r3, #16]
 800ff4a:	1ad2      	subs	r2, r2, r3
 800ff4c:	4b86      	ldr	r3, [pc, #536]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 800ff4e:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800ff50:	4a85      	ldr	r2, [pc, #532]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 800ff52:	697b      	ldr	r3, [r7, #20]
 800ff54:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	8a5b      	ldrh	r3, [r3, #18]
 800ff5a:	461a      	mov	r2, r3
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	8a1b      	ldrh	r3, [r3, #16]
 800ff60:	041b      	lsls	r3, r3, #16
 800ff62:	431a      	orrs	r2, r3
 800ff64:	4b80      	ldr	r3, [pc, #512]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 800ff66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	68da      	ldr	r2, [r3, #12]
 800ff6c:	4b7e      	ldr	r3, [pc, #504]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 800ff6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	685a      	ldr	r2, [r3, #4]
 800ff74:	4b7c      	ldr	r3, [pc, #496]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 800ff76:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ff80:	d047      	beq.n	8010012 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
 800ff82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ff86:	f200 80f9 	bhi.w	801017c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
 800ff8a:	2b80      	cmp	r3, #128	; 0x80
 800ff8c:	d00e      	beq.n	800ffac <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
 800ff8e:	2b80      	cmp	r3, #128	; 0x80
 800ff90:	f200 80f4 	bhi.w	801017c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
 800ff94:	2b40      	cmp	r3, #64	; 0x40
 800ff96:	f000 80d2 	beq.w	801013e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x252>
 800ff9a:	2b40      	cmp	r3, #64	; 0x40
 800ff9c:	f200 80ee 	bhi.w	801017c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
 800ffa0:	2b04      	cmp	r3, #4
 800ffa2:	d069      	beq.n	8010078 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18c>
 800ffa4:	2b20      	cmp	r3, #32
 800ffa6:	f000 80ca 	beq.w	801013e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x252>
 800ffaa:	e0e7      	b.n	801017c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800ffac:	683b      	ldr	r3, [r7, #0]
 800ffae:	7f1b      	ldrb	r3, [r3, #28]
 800ffb0:	061b      	lsls	r3, r3, #24
 800ffb2:	4a6d      	ldr	r2, [pc, #436]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 800ffb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ffb8:	f043 030a 	orr.w	r3, r3, #10
 800ffbc:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	3318      	adds	r3, #24
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7ff fdc4 	bl	800fb50 <_ZNK8touchgfx9colortypecvmEv>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	021b      	lsls	r3, r3, #8
 800ffcc:	f403 0478 	and.w	r4, r3, #16252928	; 0xf80000
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	3318      	adds	r3, #24
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	f7ff fdbb 	bl	800fb50 <_ZNK8touchgfx9colortypecvmEv>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	015b      	lsls	r3, r3, #5
 800ffde:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 800ffe2:	431c      	orrs	r4, r3
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	3318      	adds	r3, #24
 800ffe8:	4618      	mov	r0, r3
 800ffea:	f7ff fdb1 	bl	800fb50 <_ZNK8touchgfx9colortypecvmEv>
 800ffee:	4603      	mov	r3, r0
 800fff0:	00db      	lsls	r3, r3, #3
 800fff2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800fff6:	4a5c      	ldr	r2, [pc, #368]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 800fff8:	4323      	orrs	r3, r4
 800fffa:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800fffc:	4a5a      	ldr	r2, [pc, #360]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 800fffe:	69bb      	ldr	r3, [r7, #24]
 8010000:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010002:	683b      	ldr	r3, [r7, #0]
 8010004:	68da      	ldr	r2, [r3, #12]
 8010006:	4b58      	ldr	r3, [pc, #352]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8010008:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 801000a:	4b57      	ldr	r3, [pc, #348]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 801000c:	4a57      	ldr	r2, [pc, #348]	; (801016c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>)
 801000e:	601a      	str	r2, [r3, #0]
        break;
 8010010:	e0f7      	b.n	8010202 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x316>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	7f1b      	ldrb	r3, [r3, #28]
 8010016:	061b      	lsls	r3, r3, #24
 8010018:	4a53      	ldr	r2, [pc, #332]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 801001a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801001e:	f043 0309 	orr.w	r3, r3, #9
 8010022:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	3318      	adds	r3, #24
 8010028:	4618      	mov	r0, r3
 801002a:	f7ff fd91 	bl	800fb50 <_ZNK8touchgfx9colortypecvmEv>
 801002e:	4603      	mov	r3, r0
 8010030:	021b      	lsls	r3, r3, #8
 8010032:	f403 0478 	and.w	r4, r3, #16252928	; 0xf80000
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	3318      	adds	r3, #24
 801003a:	4618      	mov	r0, r3
 801003c:	f7ff fd88 	bl	800fb50 <_ZNK8touchgfx9colortypecvmEv>
 8010040:	4603      	mov	r3, r0
 8010042:	015b      	lsls	r3, r3, #5
 8010044:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 8010048:	431c      	orrs	r4, r3
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	3318      	adds	r3, #24
 801004e:	4618      	mov	r0, r3
 8010050:	f7ff fd7e 	bl	800fb50 <_ZNK8touchgfx9colortypecvmEv>
 8010054:	4603      	mov	r3, r0
 8010056:	00db      	lsls	r3, r3, #3
 8010058:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801005c:	4a42      	ldr	r2, [pc, #264]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 801005e:	4323      	orrs	r3, r4
 8010060:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8010062:	4a41      	ldr	r2, [pc, #260]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8010064:	69bb      	ldr	r3, [r7, #24]
 8010066:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010068:	683b      	ldr	r3, [r7, #0]
 801006a:	68da      	ldr	r2, [r3, #12]
 801006c:	4b3e      	ldr	r3, [pc, #248]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 801006e:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8010070:	4b3d      	ldr	r3, [pc, #244]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8010072:	4a3e      	ldr	r2, [pc, #248]	; (801016c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>)
 8010074:	601a      	str	r2, [r3, #0]
        break;
 8010076:	e0c4      	b.n	8010202 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x316>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	7f1b      	ldrb	r3, [r3, #28]
 801007c:	061b      	lsls	r3, r3, #24
 801007e:	461a      	mov	r2, r3
 8010080:	69fb      	ldr	r3, [r7, #28]
 8010082:	4313      	orrs	r3, r2
 8010084:	4a38      	ldr	r2, [pc, #224]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8010086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801008a:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801008c:	4a36      	ldr	r2, [pc, #216]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 801008e:	69bb      	ldr	r3, [r7, #24]
 8010090:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	68da      	ldr	r2, [r3, #12]
 8010096:	4b34      	ldr	r3, [pc, #208]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8010098:	615a      	str	r2, [r3, #20]

        if (blitOp.srcFormat == Bitmap::L8)
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	7f5b      	ldrb	r3, [r3, #29]
 801009e:	2b0b      	cmp	r3, #11
 80100a0:	d149      	bne.n	8010136 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x24a>
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	689b      	ldr	r3, [r3, #8]
 80100a6:	613b      	str	r3, [r7, #16]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80100a8:	693b      	ldr	r3, [r7, #16]
 80100aa:	1d1a      	adds	r2, r3, #4
 80100ac:	4b2e      	ldr	r3, [pc, #184]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80100ae:	62da      	str	r2, [r3, #44]	; 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 80100b0:	693b      	ldr	r3, [r7, #16]
 80100b2:	881b      	ldrh	r3, [r3, #0]
 80100b4:	b2db      	uxtb	r3, r3
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d002      	beq.n	80100c0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d4>
 80100ba:	2b01      	cmp	r3, #1
 80100bc:	d00f      	beq.n	80100de <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f2>
 80100be:	e01e      	b.n	80100fe <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x212>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80100c0:	4b29      	ldr	r3, [pc, #164]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80100c2:	69db      	ldr	r3, [r3, #28]
 80100c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80100c8:	f023 0310 	bic.w	r3, r3, #16
 80100cc:	693a      	ldr	r2, [r7, #16]
 80100ce:	8852      	ldrh	r2, [r2, #2]
 80100d0:	3a01      	subs	r2, #1
 80100d2:	0212      	lsls	r2, r2, #8
 80100d4:	4611      	mov	r1, r2
 80100d6:	4a24      	ldr	r2, [pc, #144]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80100d8:	430b      	orrs	r3, r1
 80100da:	61d3      	str	r3, [r2, #28]
                break;
 80100dc:	e015      	b.n	801010a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21e>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80100de:	4b22      	ldr	r3, [pc, #136]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80100e0:	69db      	ldr	r3, [r3, #28]
 80100e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80100e6:	f023 0310 	bic.w	r3, r3, #16
 80100ea:	693a      	ldr	r2, [r7, #16]
 80100ec:	8852      	ldrh	r2, [r2, #2]
 80100ee:	3a01      	subs	r2, #1
 80100f0:	0212      	lsls	r2, r2, #8
 80100f2:	4313      	orrs	r3, r2
 80100f4:	4a1c      	ldr	r2, [pc, #112]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80100f6:	f043 0310 	orr.w	r3, r3, #16
 80100fa:	61d3      	str	r3, [r2, #28]
                break;
 80100fc:	e005      	b.n	801010a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21e>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 80100fe:	4b1c      	ldr	r3, [pc, #112]	; (8010170 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x284>)
 8010100:	4a1c      	ldr	r2, [pc, #112]	; (8010174 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8010102:	21fc      	movs	r1, #252	; 0xfc
 8010104:	481c      	ldr	r0, [pc, #112]	; (8010178 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010106:	f013 fb1d 	bl	8023744 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 801010a:	4b17      	ldr	r3, [pc, #92]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 801010c:	69db      	ldr	r3, [r3, #28]
 801010e:	4a16      	ldr	r2, [pc, #88]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8010110:	f043 0320 	orr.w	r3, r3, #32
 8010114:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8010116:	4b14      	ldr	r3, [pc, #80]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8010118:	69db      	ldr	r3, [r3, #28]
 801011a:	f003 0320 	and.w	r3, r3, #32
 801011e:	2b00      	cmp	r3, #0
 8010120:	bf14      	ite	ne
 8010122:	2301      	movne	r3, #1
 8010124:	2300      	moveq	r3, #0
 8010126:	b2db      	uxtb	r3, r3
 8010128:	2b00      	cmp	r3, #0
 801012a:	d001      	beq.n	8010130 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
            {
                __NOP();
 801012c:	bf00      	nop
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 801012e:	e7f2      	b.n	8010116 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22a>
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8010130:	4b0d      	ldr	r3, [pc, #52]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8010132:	2210      	movs	r2, #16
 8010134:	609a      	str	r2, [r3, #8]
        }

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8010136:	4b0c      	ldr	r3, [pc, #48]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8010138:	4a0c      	ldr	r2, [pc, #48]	; (801016c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>)
 801013a:	601a      	str	r2, [r3, #0]
        break;
 801013c:	e061      	b.n	8010202 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x316>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	7f1b      	ldrb	r3, [r3, #28]
 8010142:	061b      	lsls	r3, r3, #24
 8010144:	461a      	mov	r2, r3
 8010146:	69fb      	ldr	r3, [r7, #28]
 8010148:	4313      	orrs	r3, r2
 801014a:	4a07      	ldr	r2, [pc, #28]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 801014c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010150:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8010152:	4a05      	ldr	r2, [pc, #20]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8010154:	69bb      	ldr	r3, [r7, #24]
 8010156:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	68da      	ldr	r2, [r3, #12]
 801015c:	4b02      	ldr	r3, [pc, #8]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 801015e:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8010160:	4b01      	ldr	r3, [pc, #4]	; (8010168 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8010162:	4a02      	ldr	r2, [pc, #8]	; (801016c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>)
 8010164:	601a      	str	r2, [r3, #0]
        break;
 8010166:	e04c      	b.n	8010202 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x316>
 8010168:	4002b000 	.word	0x4002b000
 801016c:	00020201 	.word	0x00020201
 8010170:	08025900 	.word	0x08025900
 8010174:	0802591c 	.word	0x0802591c
 8010178:	08025884 	.word	0x08025884
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	7f1b      	ldrb	r3, [r3, #28]
 8010180:	061b      	lsls	r3, r3, #24
 8010182:	461a      	mov	r2, r3
 8010184:	69fb      	ldr	r3, [r7, #28]
 8010186:	4313      	orrs	r3, r2
 8010188:	4a20      	ldr	r2, [pc, #128]	; (801020c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 801018a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801018e:	61d3      	str	r3, [r2, #28]

        if (blitOp.srcFormat == Bitmap::L8)
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	7f5b      	ldrb	r3, [r3, #29]
 8010194:	2b0b      	cmp	r3, #11
 8010196:	d12f      	bne.n	80101f8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30c>
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	689b      	ldr	r3, [r3, #8]
 801019c:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	1d1a      	adds	r2, r3, #4
 80101a2:	4b1a      	ldr	r3, [pc, #104]	; (801020c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 80101a4:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Write foreground CLUT size and CLUT color mode */
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80101a6:	4b19      	ldr	r3, [pc, #100]	; (801020c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 80101a8:	69db      	ldr	r3, [r3, #28]
 80101aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80101ae:	f023 0310 	bic.w	r3, r3, #16
 80101b2:	68fa      	ldr	r2, [r7, #12]
 80101b4:	8852      	ldrh	r2, [r2, #2]
 80101b6:	3a01      	subs	r2, #1
 80101b8:	0212      	lsls	r2, r2, #8
 80101ba:	4313      	orrs	r3, r2
 80101bc:	4a13      	ldr	r2, [pc, #76]	; (801020c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 80101be:	f043 0310 	orr.w	r3, r3, #16
 80101c2:	61d3      	str	r3, [r2, #28]

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80101c4:	4b11      	ldr	r3, [pc, #68]	; (801020c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 80101c6:	69db      	ldr	r3, [r3, #28]
 80101c8:	4a10      	ldr	r2, [pc, #64]	; (801020c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 80101ca:	f043 0320 	orr.w	r3, r3, #32
 80101ce:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80101d0:	4b0e      	ldr	r3, [pc, #56]	; (801020c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 80101d2:	69db      	ldr	r3, [r3, #28]
 80101d4:	f003 0320 	and.w	r3, r3, #32
 80101d8:	2b00      	cmp	r3, #0
 80101da:	bf14      	ite	ne
 80101dc:	2301      	movne	r3, #1
 80101de:	2300      	moveq	r3, #0
 80101e0:	b2db      	uxtb	r3, r3
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d001      	beq.n	80101ea <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2fe>
            {
                __NOP();
 80101e6:	bf00      	nop
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80101e8:	e7f2      	b.n	80101d0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e4>
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80101ea:	4b08      	ldr	r3, [pc, #32]	; (801020c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 80101ec:	2210      	movs	r2, #16
 80101ee:	609a      	str	r2, [r3, #8]
            /* Start DMA2D */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80101f0:	4b06      	ldr	r3, [pc, #24]	; (801020c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 80101f2:	4a07      	ldr	r2, [pc, #28]	; (8010210 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x324>)
 80101f4:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 80101f6:	e003      	b.n	8010200 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x314>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80101f8:	4b04      	ldr	r3, [pc, #16]	; (801020c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 80101fa:	f240 2201 	movw	r2, #513	; 0x201
 80101fe:	601a      	str	r2, [r3, #0]
        break;
 8010200:	bf00      	nop
    }
}
 8010202:	bf00      	nop
 8010204:	3724      	adds	r7, #36	; 0x24
 8010206:	46bd      	mov	sp, r7
 8010208:	bd90      	pop	{r4, r7, pc}
 801020a:	bf00      	nop
 801020c:	4002b000 	.word	0x4002b000
 8010210:	00010201 	.word	0x00010201

08010214 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32F4DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32F4DMA::setupDataFill(const BlitOp& blitOp)
{
 8010214:	b590      	push	{r4, r7, lr}
 8010216:	b085      	sub	sp, #20
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	7f9b      	ldrb	r3, [r3, #30]
 8010222:	4619      	mov	r1, r3
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	f7ff fe17 	bl	800fe58 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801022a:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 801022c:	4a53      	ldr	r2, [pc, #332]	; (801037c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	8a5b      	ldrh	r3, [r3, #18]
 8010236:	461a      	mov	r2, r3
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	8a1b      	ldrh	r3, [r3, #16]
 801023c:	041b      	lsls	r3, r3, #16
 801023e:	431a      	orrs	r2, r3
 8010240:	4b4e      	ldr	r3, [pc, #312]	; (801037c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8010242:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	68da      	ldr	r2, [r3, #12]
 8010248:	4b4c      	ldr	r3, [pc, #304]	; (801037c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 801024a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	8adb      	ldrh	r3, [r3, #22]
 8010250:	461a      	mov	r2, r3
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	8a1b      	ldrh	r3, [r3, #16]
 8010256:	1ad2      	subs	r2, r2, r3
 8010258:	4b48      	ldr	r3, [pc, #288]	; (801037c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 801025a:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	2b08      	cmp	r3, #8
 8010262:	d14d      	bne.n	8010300 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xec>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	8adb      	ldrh	r3, [r3, #22]
 8010268:	461a      	mov	r2, r3
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	8a1b      	ldrh	r3, [r3, #16]
 801026e:	1ad2      	subs	r2, r2, r3
 8010270:	4b42      	ldr	r3, [pc, #264]	; (801037c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8010272:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	8adb      	ldrh	r3, [r3, #22]
 8010278:	461a      	mov	r2, r3
 801027a:	683b      	ldr	r3, [r7, #0]
 801027c:	8a1b      	ldrh	r3, [r3, #16]
 801027e:	1ad2      	subs	r2, r2, r3
 8010280:	4b3e      	ldr	r3, [pc, #248]	; (801037c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8010282:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8010284:	4a3d      	ldr	r2, [pc, #244]	; (801037c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	7f1b      	ldrb	r3, [r3, #28]
 801028e:	061b      	lsls	r3, r3, #24
 8010290:	4a3a      	ldr	r2, [pc, #232]	; (801037c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8010292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010296:	f043 0309 	orr.w	r3, r3, #9
 801029a:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3)) & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	7f1b      	ldrb	r3, [r3, #28]
 80102a0:	061b      	lsls	r3, r3, #24
 80102a2:	461c      	mov	r4, r3
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	3318      	adds	r3, #24
 80102a8:	4618      	mov	r0, r3
 80102aa:	f7ff fc51 	bl	800fb50 <_ZNK8touchgfx9colortypecvmEv>
 80102ae:	4603      	mov	r3, r0
 80102b0:	021b      	lsls	r3, r3, #8
 80102b2:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 80102b6:	431c      	orrs	r4, r3
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	3318      	adds	r3, #24
 80102bc:	4618      	mov	r0, r3
 80102be:	f7ff fc47 	bl	800fb50 <_ZNK8touchgfx9colortypecvmEv>
 80102c2:	4603      	mov	r3, r0
 80102c4:	015b      	lsls	r3, r3, #5
 80102c6:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 80102ca:	431c      	orrs	r4, r3
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	3318      	adds	r3, #24
 80102d0:	4618      	mov	r0, r3
 80102d2:	f7ff fc3d 	bl	800fb50 <_ZNK8touchgfx9colortypecvmEv>
 80102d6:	4603      	mov	r3, r0
 80102d8:	00db      	lsls	r3, r3, #3
 80102da:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80102de:	4323      	orrs	r3, r4
 80102e0:	4a26      	ldr	r2, [pc, #152]	; (801037c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 80102e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80102e6:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80102e8:	683b      	ldr	r3, [r7, #0]
 80102ea:	68da      	ldr	r2, [r3, #12]
 80102ec:	4b23      	ldr	r3, [pc, #140]	; (801037c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 80102ee:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	68da      	ldr	r2, [r3, #12]
 80102f4:	4b21      	ldr	r3, [pc, #132]	; (801037c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 80102f6:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80102f8:	4b20      	ldr	r3, [pc, #128]	; (801037c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 80102fa:	4a21      	ldr	r2, [pc, #132]	; (8010380 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x16c>)
 80102fc:	601a      	str	r2, [r3, #0]
        }

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 80102fe:	e039      	b.n	8010374 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8010300:	4a1e      	ldr	r2, [pc, #120]	; (801037c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8010306:	4b1d      	ldr	r3, [pc, #116]	; (801037c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8010308:	2200      	movs	r2, #0
 801030a:	611a      	str	r2, [r3, #16]
        if (blitOp.dstFormat == Bitmap::RGB565)
 801030c:	683b      	ldr	r3, [r7, #0]
 801030e:	7f9b      	ldrb	r3, [r3, #30]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d108      	bne.n	8010326 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x112>
            WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	3318      	adds	r3, #24
 8010318:	4c18      	ldr	r4, [pc, #96]	; (801037c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 801031a:	4618      	mov	r0, r3
 801031c:	f7ff fc18 	bl	800fb50 <_ZNK8touchgfx9colortypecvmEv>
 8010320:	4603      	mov	r3, r0
 8010322:	63a3      	str	r3, [r4, #56]	; 0x38
 8010324:	e023      	b.n	801036e <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x15a>
            WRITE_REG(DMA2D->OCOLR, (blitOp.alpha << 24) | (blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 8010326:	683b      	ldr	r3, [r7, #0]
 8010328:	7f1b      	ldrb	r3, [r3, #28]
 801032a:	061b      	lsls	r3, r3, #24
 801032c:	461c      	mov	r4, r3
 801032e:	683b      	ldr	r3, [r7, #0]
 8010330:	3318      	adds	r3, #24
 8010332:	4618      	mov	r0, r3
 8010334:	f7ff fc0c 	bl	800fb50 <_ZNK8touchgfx9colortypecvmEv>
 8010338:	4603      	mov	r3, r0
 801033a:	021b      	lsls	r3, r3, #8
 801033c:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 8010340:	431c      	orrs	r4, r3
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	3318      	adds	r3, #24
 8010346:	4618      	mov	r0, r3
 8010348:	f7ff fc02 	bl	800fb50 <_ZNK8touchgfx9colortypecvmEv>
 801034c:	4603      	mov	r3, r0
 801034e:	015b      	lsls	r3, r3, #5
 8010350:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 8010354:	431c      	orrs	r4, r3
 8010356:	683b      	ldr	r3, [r7, #0]
 8010358:	3318      	adds	r3, #24
 801035a:	4618      	mov	r0, r3
 801035c:	f7ff fbf8 	bl	800fb50 <_ZNK8touchgfx9colortypecvmEv>
 8010360:	4603      	mov	r3, r0
 8010362:	00db      	lsls	r3, r3, #3
 8010364:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8010368:	4a04      	ldr	r2, [pc, #16]	; (801037c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 801036a:	4323      	orrs	r3, r4
 801036c:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 801036e:	4b03      	ldr	r3, [pc, #12]	; (801037c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8010370:	4a04      	ldr	r2, [pc, #16]	; (8010384 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x170>)
 8010372:	601a      	str	r2, [r3, #0]
}
 8010374:	bf00      	nop
 8010376:	3714      	adds	r7, #20
 8010378:	46bd      	mov	sp, r7
 801037a:	bd90      	pop	{r4, r7, pc}
 801037c:	4002b000 	.word	0x4002b000
 8010380:	00020201 	.word	0x00020201
 8010384:	00030201 	.word	0x00030201

08010388 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8010388:	b580      	push	{r7, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	4a05      	ldr	r2, [pc, #20]	; (80103a8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	601a      	str	r2, [r3, #0]
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	4618      	mov	r0, r3
 801039a:	f7ff fbe5 	bl	800fb68 <_ZN8touchgfx9DMA_QueueD1Ev>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	4618      	mov	r0, r3
 80103a2:	3708      	adds	r7, #8
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd80      	pop	{r7, pc}
 80103a8:	08026e5c 	.word	0x08026e5c

080103ac <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b082      	sub	sp, #8
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f7ff ffe7 	bl	8010388 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80103ba:	2114      	movs	r1, #20
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f013 f896 	bl	80234ee <_ZdlPvj>
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	4618      	mov	r0, r3
 80103c6:	3708      	adds	r7, #8
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}

080103cc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 80103cc:	b480      	push	{r7}
 80103ce:	b083      	sub	sp, #12
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 80103d4:	4a04      	ldr	r2, [pc, #16]	; (80103e8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	6013      	str	r3, [r2, #0]
    }
 80103da:	bf00      	nop
 80103dc:	370c      	adds	r7, #12
 80103de:	46bd      	mov	sp, r7
 80103e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e4:	4770      	bx	lr
 80103e6:	bf00      	nop
 80103e8:	2000a098 	.word	0x2000a098

080103ec <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80103ec:	b480      	push	{r7}
 80103ee:	b085      	sub	sp, #20
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	60f8      	str	r0, [r7, #12]
 80103f4:	60b9      	str	r1, [r7, #8]
 80103f6:	607a      	str	r2, [r7, #4]
 80103f8:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80103fa:	4a0b      	ldr	r2, [pc, #44]	; (8010428 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	601a      	str	r2, [r3, #0]
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	68ba      	ldr	r2, [r7, #8]
 8010404:	605a      	str	r2, [r3, #4]
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	687a      	ldr	r2, [r7, #4]
 801040a:	609a      	str	r2, [r3, #8]
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	683a      	ldr	r2, [r7, #0]
 8010410:	60da      	str	r2, [r3, #12]
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	69ba      	ldr	r2, [r7, #24]
 8010416:	611a      	str	r2, [r3, #16]
    {
    }
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	4618      	mov	r0, r3
 801041c:	3714      	adds	r7, #20
 801041e:	46bd      	mov	sp, r7
 8010420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010424:	4770      	bx	lr
 8010426:	bf00      	nop
 8010428:	0802610c 	.word	0x0802610c

0801042c <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 801042c:	b480      	push	{r7}
 801042e:	b083      	sub	sp, #12
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
    {
 8010434:	4a04      	ldr	r2, [pc, #16]	; (8010448 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	601a      	str	r2, [r3, #0]
    }
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	4618      	mov	r0, r3
 801043e:	370c      	adds	r7, #12
 8010440:	46bd      	mov	sp, r7
 8010442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010446:	4770      	bx	lr
 8010448:	0802610c 	.word	0x0802610c

0801044c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 801044c:	b580      	push	{r7, lr}
 801044e:	b082      	sub	sp, #8
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
    }
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f7ff ffe9 	bl	801042c <_ZN8touchgfx7MVPHeapD1Ev>
 801045a:	2114      	movs	r1, #20
 801045c:	6878      	ldr	r0, [r7, #4]
 801045e:	f013 f846 	bl	80234ee <_ZdlPvj>
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	4618      	mov	r0, r3
 8010466:	3708      	adds	r7, #8
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}

0801046c <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 801046c:	b480      	push	{r7}
 801046e:	b083      	sub	sp, #12
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
    {
 8010474:	4a04      	ldr	r2, [pc, #16]	; (8010488 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	601a      	str	r2, [r3, #0]
    }
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	4618      	mov	r0, r3
 801047e:	370c      	adds	r7, #12
 8010480:	46bd      	mov	sp, r7
 8010482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010486:	4770      	bx	lr
 8010488:	08027330 	.word	0x08027330

0801048c <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 801048c:	b580      	push	{r7, lr}
 801048e:	b082      	sub	sp, #8
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
    }
 8010494:	6878      	ldr	r0, [r7, #4]
 8010496:	f7ff ffe9 	bl	801046c <_ZN8touchgfx3LCDD1Ev>
 801049a:	2108      	movs	r1, #8
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f013 f826 	bl	80234ee <_ZdlPvj>
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	4618      	mov	r0, r3
 80104a6:	3708      	adds	r7, #8
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}

080104ac <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80104ac:	b480      	push	{r7}
 80104ae:	b083      	sub	sp, #12
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	2200      	movs	r2, #0
 80104b8:	801a      	strh	r2, [r3, #0]
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2200      	movs	r2, #0
 80104be:	805a      	strh	r2, [r3, #2]
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2200      	movs	r2, #0
 80104c4:	809a      	strh	r2, [r3, #4]
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	2200      	movs	r2, #0
 80104ca:	80da      	strh	r2, [r3, #6]
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2200      	movs	r2, #0
 80104d0:	811a      	strh	r2, [r3, #8]
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2200      	movs	r2, #0
 80104d6:	815a      	strh	r2, [r3, #10]
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2200      	movs	r2, #0
 80104dc:	819a      	strh	r2, [r3, #12]
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	2200      	movs	r2, #0
 80104e2:	739a      	strb	r2, [r3, #14]
        {
        }
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	4618      	mov	r0, r3
 80104e8:	370c      	adds	r7, #12
 80104ea:	46bd      	mov	sp, r7
 80104ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f0:	4770      	bx	lr

080104f2 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 80104f2:	b580      	push	{r7, lr}
 80104f4:	b082      	sub	sp, #8
 80104f6:	af00      	add	r7, sp, #0
 80104f8:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	4618      	mov	r0, r3
 80104fe:	f7ff ffd5 	bl	80104ac <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	2200      	movs	r2, #0
 8010506:	611a      	str	r2, [r3, #16]
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2200      	movs	r2, #0
 801050c:	829a      	strh	r2, [r3, #20]
    {
    }
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	4618      	mov	r0, r3
 8010512:	3708      	adds	r7, #8
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}

08010518 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8010518:	b580      	push	{r7, lr}
 801051a:	b084      	sub	sp, #16
 801051c:	af00      	add	r7, sp, #0
 801051e:	60f8      	str	r0, [r7, #12]
 8010520:	60b9      	str	r1, [r7, #8]
 8010522:	607a      	str	r2, [r7, #4]
 8010524:	603b      	str	r3, [r7, #0]
          lastRenderVariant(HARDWARE)
 8010526:	4a4a      	ldr	r2, [pc, #296]	; (8010650 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	601a      	str	r2, [r3, #0]
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	68ba      	ldr	r2, [r7, #8]
 8010530:	605a      	str	r2, [r3, #4]
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	687a      	ldr	r2, [r7, #4]
 8010536:	609a      	str	r2, [r3, #8]
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	683a      	ldr	r2, [r7, #0]
 801053c:	60da      	str	r2, [r3, #12]
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	2200      	movs	r2, #0
 8010542:	611a      	str	r2, [r3, #16]
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	2200      	movs	r2, #0
 8010548:	615a      	str	r2, [r3, #20]
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	2200      	movs	r2, #0
 801054e:	619a      	str	r2, [r3, #24]
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	331c      	adds	r3, #28
 8010554:	4618      	mov	r0, r3
 8010556:	f7ff ffcc 	bl	80104f2 <_ZN8touchgfx8GesturesC1Ev>
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	2200      	movs	r2, #0
 801055e:	639a      	str	r2, [r3, #56]	; 0x38
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	2200      	movs	r2, #0
 8010564:	63da      	str	r2, [r3, #60]	; 0x3c
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	2200      	movs	r2, #0
 801056a:	641a      	str	r2, [r3, #64]	; 0x40
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	2200      	movs	r2, #0
 8010570:	645a      	str	r2, [r3, #68]	; 0x44
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	2200      	movs	r2, #0
 8010576:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	2201      	movs	r2, #1
 801057e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	2200      	movs	r2, #0
 8010586:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	2200      	movs	r2, #0
 801058e:	64da      	str	r2, [r3, #76]	; 0x4c
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	3350      	adds	r3, #80	; 0x50
 8010594:	4618      	mov	r0, r3
 8010596:	f7fc ff46 	bl	800d426 <_ZN8touchgfx4RectC1Ev>
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	2201      	movs	r2, #1
 801059e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	2200      	movs	r2, #0
 80105a6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	2200      	movs	r2, #0
 80105ae:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	2201      	movs	r2, #1
 80105b6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	2200      	movs	r2, #0
 80105be:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	2200      	movs	r2, #0
 80105c6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	2200      	movs	r2, #0
 80105ce:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	2200      	movs	r2, #0
 80105d6:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	2200      	movs	r2, #0
 80105de:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	2200      	movs	r2, #0
 80105e6:	671a      	str	r2, [r3, #112]	; 0x70
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	2200      	movs	r2, #0
 80105ec:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	2200      	movs	r2, #0
 80105f4:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	2201      	movs	r2, #1
 80105fc:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	2201      	movs	r2, #1
 8010604:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8010608:	4a12      	ldr	r2, [pc, #72]	; (8010654 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x13c>)
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 801060e:	4a12      	ldr	r2, [pc, #72]	; (8010658 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 8010610:	8b3b      	ldrh	r3, [r7, #24]
 8010612:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8010614:	4a11      	ldr	r2, [pc, #68]	; (801065c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 8010616:	8bbb      	ldrh	r3, [r7, #28]
 8010618:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 801061a:	4b11      	ldr	r3, [pc, #68]	; (8010660 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x148>)
 801061c:	2200      	movs	r2, #0
 801061e:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8010620:	4b0d      	ldr	r3, [pc, #52]	; (8010658 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 8010622:	881a      	ldrh	r2, [r3, #0]
 8010624:	4b0f      	ldr	r3, [pc, #60]	; (8010664 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x14c>)
 8010626:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8010628:	4b0c      	ldr	r3, [pc, #48]	; (801065c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 801062a:	881a      	ldrh	r2, [r3, #0]
 801062c:	4b0e      	ldr	r3, [pc, #56]	; (8010668 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x150>)
 801062e:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8010630:	8b3a      	ldrh	r2, [r7, #24]
 8010632:	8bbb      	ldrh	r3, [r7, #28]
 8010634:	429a      	cmp	r2, r3
 8010636:	bf34      	ite	cc
 8010638:	2301      	movcc	r3, #1
 801063a:	2300      	movcs	r3, #0
 801063c:	b2db      	uxtb	r3, r3
 801063e:	461a      	mov	r2, r3
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	4618      	mov	r0, r3
 801064a:	3710      	adds	r7, #16
 801064c:	46bd      	mov	sp, r7
 801064e:	bd80      	pop	{r7, pc}
 8010650:	080269c0 	.word	0x080269c0
 8010654:	2000a03c 	.word	0x2000a03c
 8010658:	2000a030 	.word	0x2000a030
 801065c:	2000a032 	.word	0x2000a032
 8010660:	2000a034 	.word	0x2000a034
 8010664:	2000a036 	.word	0x2000a036
 8010668:	2000a038 	.word	0x2000a038

0801066c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 801066c:	b580      	push	{r7, lr}
 801066e:	b082      	sub	sp, #8
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
 8010674:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 8010676:	683b      	ldr	r3, [r7, #0]
 8010678:	4618      	mov	r0, r3
 801067a:	f7fc fc35 	bl	800cee8 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 801067e:	bf00      	nop
 8010680:	3708      	adds	r7, #8
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}
	...

08010688 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8010688:	b580      	push	{r7, lr}
 801068a:	b086      	sub	sp, #24
 801068c:	af02      	add	r7, sp, #8
 801068e:	60f8      	str	r0, [r7, #12]
 8010690:	60b9      	str	r1, [r7, #8]
 8010692:	607a      	str	r2, [r7, #4]
 8010694:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8010696:	68f8      	ldr	r0, [r7, #12]
 8010698:	69bb      	ldr	r3, [r7, #24]
 801069a:	9300      	str	r3, [sp, #0]
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	687a      	ldr	r2, [r7, #4]
 80106a0:	68b9      	ldr	r1, [r7, #8]
 80106a2:	f7ff fea3 	bl	80103ec <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80106a6:	4a04      	ldr	r2, [pc, #16]	; (80106b8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	601a      	str	r2, [r3, #0]
    {

    }
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	4618      	mov	r0, r3
 80106b0:	3710      	adds	r7, #16
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}
 80106b6:	bf00      	nop
 80106b8:	080260f8 	.word	0x080260f8

080106bc <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80106bc:	b580      	push	{r7, lr}
 80106be:	af00      	add	r7, sp, #0
 80106c0:	4801      	ldr	r0, [pc, #4]	; (80106c8 <__tcf_0+0xc>)
 80106c2:	f000 f95f 	bl	8010984 <_ZN12FrontendHeapD1Ev>
 80106c6:	bd80      	pop	{r7, pc}
 80106c8:	20008e40 	.word	0x20008e40

080106cc <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80106cc:	b580      	push	{r7, lr}
 80106ce:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80106d0:	4b12      	ldr	r3, [pc, #72]	; (801071c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80106d2:	781b      	ldrb	r3, [r3, #0]
 80106d4:	f3bf 8f5b 	dmb	ish
 80106d8:	b2db      	uxtb	r3, r3
 80106da:	f003 0301 	and.w	r3, r3, #1
 80106de:	2b00      	cmp	r3, #0
 80106e0:	bf0c      	ite	eq
 80106e2:	2301      	moveq	r3, #1
 80106e4:	2300      	movne	r3, #0
 80106e6:	b2db      	uxtb	r3, r3
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d013      	beq.n	8010714 <_ZN12FrontendHeap11getInstanceEv+0x48>
 80106ec:	480b      	ldr	r0, [pc, #44]	; (801071c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80106ee:	f012 ff00 	bl	80234f2 <__cxa_guard_acquire>
 80106f2:	4603      	mov	r3, r0
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	bf14      	ite	ne
 80106f8:	2301      	movne	r3, #1
 80106fa:	2300      	moveq	r3, #0
 80106fc:	b2db      	uxtb	r3, r3
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d008      	beq.n	8010714 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8010702:	4807      	ldr	r0, [pc, #28]	; (8010720 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8010704:	f000 f868 	bl	80107d8 <_ZN12FrontendHeapC1Ev>
 8010708:	4804      	ldr	r0, [pc, #16]	; (801071c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 801070a:	f012 fefe 	bl	802350a <__cxa_guard_release>
 801070e:	4805      	ldr	r0, [pc, #20]	; (8010724 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8010710:	f013 f836 	bl	8023780 <atexit>
        return instance;
 8010714:	4b02      	ldr	r3, [pc, #8]	; (8010720 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8010716:	4618      	mov	r0, r3
 8010718:	bd80      	pop	{r7, pc}
 801071a:	bf00      	nop
 801071c:	2000930c 	.word	0x2000930c
 8010720:	20008e40 	.word	0x20008e40
 8010724:	080106bd 	.word	0x080106bd

08010728 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8010728:	b580      	push	{r7, lr}
 801072a:	b082      	sub	sp, #8
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
 8010730:	4a05      	ldr	r2, [pc, #20]	; (8010748 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	601a      	str	r2, [r3, #0]
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	4618      	mov	r0, r3
 801073a:	f7ff fe77 	bl	801042c <_ZN8touchgfx7MVPHeapD1Ev>
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	4618      	mov	r0, r3
 8010742:	3708      	adds	r7, #8
 8010744:	46bd      	mov	sp, r7
 8010746:	bd80      	pop	{r7, pc}
 8010748:	080260f8 	.word	0x080260f8

0801074c <_ZN16FrontendHeapBaseD0Ev>:
 801074c:	b580      	push	{r7, lr}
 801074e:	b082      	sub	sp, #8
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f7ff ffe7 	bl	8010728 <_ZN16FrontendHeapBaseD1Ev>
 801075a:	2114      	movs	r1, #20
 801075c:	6878      	ldr	r0, [r7, #4]
 801075e:	f012 fec6 	bl	80234ee <_ZdlPvj>
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	4618      	mov	r0, r3
 8010766:	3708      	adds	r7, #8
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}

0801076c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 801076c:	b580      	push	{r7, lr}
 801076e:	b082      	sub	sp, #8
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	4618      	mov	r0, r3
 8010778:	f000 fd76 	bl	8011268 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801077c:	4a03      	ldr	r2, [pc, #12]	; (801078c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	601a      	str	r2, [r3, #0]
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	4618      	mov	r0, r3
 8010786:	3708      	adds	r7, #8
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}
 801078c:	080260c4 	.word	0x080260c4

08010790 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8010790:	b580      	push	{r7, lr}
 8010792:	b082      	sub	sp, #8
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	4618      	mov	r0, r3
 801079c:	f000 fd64 	bl	8011268 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80107a0:	4a03      	ldr	r2, [pc, #12]	; (80107b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	601a      	str	r2, [r3, #0]
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	4618      	mov	r0, r3
 80107aa:	3708      	adds	r7, #8
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bd80      	pop	{r7, pc}
 80107b0:	08026090 	.word	0x08026090

080107b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b082      	sub	sp, #8
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	4618      	mov	r0, r3
 80107c0:	f000 fd52 	bl	8011268 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80107c4:	4a03      	ldr	r2, [pc, #12]	; (80107d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	601a      	str	r2, [r3, #0]
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	4618      	mov	r0, r3
 80107ce:	3708      	adds	r7, #8
 80107d0:	46bd      	mov	sp, r7
 80107d2:	bd80      	pop	{r7, pc}
 80107d4:	0802605c 	.word	0x0802605c

080107d8 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80107d8:	b590      	push	{r4, r7, lr}
 80107da:	b085      	sub	sp, #20
 80107dc:	af02      	add	r7, sp, #8
 80107de:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	f103 0114 	add.w	r1, r3, #20
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	f503 7456 	add.w	r4, r3, #856	; 0x358
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	f503 735d 	add.w	r3, r3, #884	; 0x374
                     app(model, *this)
 80107fa:	9300      	str	r3, [sp, #0]
 80107fc:	4623      	mov	r3, r4
 80107fe:	f7ff ff43 	bl	8010688 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8010802:	4a18      	ldr	r2, [pc, #96]	; (8010864 <_ZN12FrontendHeapC1Ev+0x8c>)
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	601a      	str	r2, [r3, #0]
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	3314      	adds	r3, #20
 801080c:	4618      	mov	r0, r3
 801080e:	f7ff ffad 	bl	801076c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	332c      	adds	r3, #44	; 0x2c
 8010816:	4618      	mov	r0, r3
 8010818:	f7ff ffba 	bl	8010790 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8010822:	4618      	mov	r0, r3
 8010824:	f7ff ffc6 	bl	80107b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801082e:	4618      	mov	r0, r3
 8010830:	f7fe f994 	bl	800eb5c <_ZN5ModelC1Ev>
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f503 705d 	add.w	r0, r3, #884	; 0x374
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8010840:	687a      	ldr	r2, [r7, #4]
 8010842:	4619      	mov	r1, r3
 8010844:	f7fe f974 	bl	800eb30 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8010848:	687a      	ldr	r2, [r7, #4]
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8010850:	4619      	mov	r1, r3
 8010852:	4610      	mov	r0, r2
 8010854:	f7ff ff0a 	bl	801066c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	4618      	mov	r0, r3
 801085c:	370c      	adds	r7, #12
 801085e:	46bd      	mov	sp, r7
 8010860:	bd90      	pop	{r4, r7, pc}
 8010862:	bf00      	nop
 8010864:	08026048 	.word	0x08026048

08010868 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8010868:	b580      	push	{r7, lr}
 801086a:	b086      	sub	sp, #24
 801086c:	af02      	add	r7, sp, #8
 801086e:	60f8      	str	r0, [r7, #12]
 8010870:	60b9      	str	r1, [r7, #8]
 8010872:	607a      	str	r2, [r7, #4]
 8010874:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8010876:	68f8      	ldr	r0, [r7, #12]
 8010878:	8bbb      	ldrh	r3, [r7, #28]
 801087a:	9301      	str	r3, [sp, #4]
 801087c:	8b3b      	ldrh	r3, [r7, #24]
 801087e:	9300      	str	r3, [sp, #0]
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	687a      	ldr	r2, [r7, #4]
 8010884:	68b9      	ldr	r1, [r7, #8]
 8010886:	f7ff fe47 	bl	8010518 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 801088a:	4a04      	ldr	r2, [pc, #16]	; (801089c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	601a      	str	r2, [r3, #0]
    }
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	4618      	mov	r0, r3
 8010894:	3710      	adds	r7, #16
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}
 801089a:	bf00      	nop
 801089c:	0802611c 	.word	0x0802611c

080108a0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b086      	sub	sp, #24
 80108a4:	af02      	add	r7, sp, #8
 80108a6:	60f8      	str	r0, [r7, #12]
 80108a8:	60b9      	str	r1, [r7, #8]
 80108aa:	607a      	str	r2, [r7, #4]
 80108ac:	603b      	str	r3, [r7, #0]
 80108ae:	68f8      	ldr	r0, [r7, #12]
 80108b0:	8bbb      	ldrh	r3, [r7, #28]
 80108b2:	9301      	str	r3, [sp, #4]
 80108b4:	8b3b      	ldrh	r3, [r7, #24]
 80108b6:	9300      	str	r3, [sp, #0]
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	687a      	ldr	r2, [r7, #4]
 80108bc:	68b9      	ldr	r1, [r7, #8]
 80108be:	f7ff ffd3 	bl	8010868 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80108c2:	4a04      	ldr	r2, [pc, #16]	; (80108d4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	601a      	str	r2, [r3, #0]
    }
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	4618      	mov	r0, r3
 80108cc:	3710      	adds	r7, #16
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd80      	pop	{r7, pc}
 80108d2:	bf00      	nop
 80108d4:	08025f08 	.word	0x08025f08

080108d8 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80108d8:	b480      	push	{r7}
 80108da:	b083      	sub	sp, #12
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
 80108e0:	4a04      	ldr	r2, [pc, #16]	; (80108f4 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	601a      	str	r2, [r3, #0]
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	4618      	mov	r0, r3
 80108ea:	370c      	adds	r7, #12
 80108ec:	46bd      	mov	sp, r7
 80108ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f2:	4770      	bx	lr
 80108f4:	08025ef0 	.word	0x08025ef0

080108f8 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b082      	sub	sp, #8
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	4618      	mov	r0, r3
 8010904:	f7ff ffe8 	bl	80108d8 <_ZN8touchgfx15TouchControllerC1Ev>
 8010908:	4a03      	ldr	r2, [pc, #12]	; (8010918 <_ZN20STM32TouchControllerC1Ev+0x20>)
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	601a      	str	r2, [r3, #0]
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	4618      	mov	r0, r3
 8010912:	3708      	adds	r7, #8
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}
 8010918:	08025ed8 	.word	0x08025ed8

0801091c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 801091c:	b590      	push	{r4, r7, lr}
 801091e:	b085      	sub	sp, #20
 8010920:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8010922:	f7fd fedf 	bl	800e6e4 <_ZN14BitmapDatabase11getInstanceEv>
 8010926:	4604      	mov	r4, r0
 8010928:	f7fd fee6 	bl	800e6f8 <_ZN14BitmapDatabase15getInstanceSizeEv>
 801092c:	4603      	mov	r3, r0
 801092e:	4619      	mov	r1, r3
 8010930:	2300      	movs	r3, #0
 8010932:	9300      	str	r3, [sp, #0]
 8010934:	2300      	movs	r3, #0
 8010936:	2200      	movs	r2, #0
 8010938:	4620      	mov	r0, r4
 801093a:	f006 ffdd 	bl	80178f8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 801093e:	4809      	ldr	r0, [pc, #36]	; (8010964 <touchgfx_init+0x48>)
 8010940:	f7ff fd44 	bl	80103cc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8010944:	2000      	movs	r0, #0
 8010946:	f7fe f811 	bl	800e96c <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 801094a:	4807      	ldr	r0, [pc, #28]	; (8010968 <touchgfx_init+0x4c>)
 801094c:	f006 ff16 	bl	801777c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8010950:	f7ff febc 	bl	80106cc <_ZN12FrontendHeap11getInstanceEv>
 8010954:	6078      	str	r0, [r7, #4]
  (void)heap;

  /*
   * Initialize TouchGFX
   */
  hal.initialize();
 8010956:	4805      	ldr	r0, [pc, #20]	; (801096c <touchgfx_init+0x50>)
 8010958:	f7fe ff4c 	bl	800f7f4 <_ZN11TouchGFXHAL10initializeEv>
}
 801095c:	bf00      	nop
 801095e:	370c      	adds	r7, #12
 8010960:	46bd      	mov	sp, r7
 8010962:	bd90      	pop	{r4, r7, pc}
 8010964:	20009fac 	.word	0x20009fac
 8010968:	2000007c 	.word	0x2000007c
 801096c:	20009fb0 	.word	0x20009fb0

08010970 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8010970:	b580      	push	{r7, lr}
 8010972:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 8010974:	4802      	ldr	r0, [pc, #8]	; (8010980 <touchgfx_taskEntry+0x10>)
 8010976:	f7fe ff49 	bl	800f80c <_ZN11TouchGFXHAL9taskEntryEv>
}
 801097a:	bf00      	nop
 801097c:	bd80      	pop	{r7, pc}
 801097e:	bf00      	nop
 8010980:	20009fb0 	.word	0x20009fb0

08010984 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8010984:	b580      	push	{r7, lr}
 8010986:	b082      	sub	sp, #8
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
 801098c:	4a10      	ldr	r2, [pc, #64]	; (80109d0 <_ZN12FrontendHeapD1Ev+0x4c>)
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	601a      	str	r2, [r3, #0]
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8010998:	4618      	mov	r0, r3
 801099a:	f7fe f893 	bl	800eac4 <_ZN19FrontendApplicationD1Ev>
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80109a4:	4618      	mov	r0, r3
 80109a6:	f000 f827 	bl	80109f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	332c      	adds	r3, #44	; 0x2c
 80109ae:	4618      	mov	r0, r3
 80109b0:	f000 f844 	bl	8010a3c <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	3314      	adds	r3, #20
 80109b8:	4618      	mov	r0, r3
 80109ba:	f000 f863 	bl	8010a84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	4618      	mov	r0, r3
 80109c2:	f7ff feb1 	bl	8010728 <_ZN16FrontendHeapBaseD1Ev>
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	4618      	mov	r0, r3
 80109ca:	3708      	adds	r7, #8
 80109cc:	46bd      	mov	sp, r7
 80109ce:	bd80      	pop	{r7, pc}
 80109d0:	08026048 	.word	0x08026048

080109d4 <_ZN12FrontendHeapD0Ev>:
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b082      	sub	sp, #8
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
 80109dc:	6878      	ldr	r0, [r7, #4]
 80109de:	f7ff ffd1 	bl	8010984 <_ZN12FrontendHeapD1Ev>
 80109e2:	f240 41cc 	movw	r1, #1228	; 0x4cc
 80109e6:	6878      	ldr	r0, [r7, #4]
 80109e8:	f012 fd81 	bl	80234ee <_ZdlPvj>
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	4618      	mov	r0, r3
 80109f0:	3708      	adds	r7, #8
 80109f2:	46bd      	mov	sp, r7
 80109f4:	bd80      	pop	{r7, pc}
	...

080109f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b082      	sub	sp, #8
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
 8010a00:	4a05      	ldr	r2, [pc, #20]	; (8010a18 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	601a      	str	r2, [r3, #0]
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f000 fc2b 	bl	8011264 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	4618      	mov	r0, r3
 8010a12:	3708      	adds	r7, #8
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bd80      	pop	{r7, pc}
 8010a18:	0802605c 	.word	0x0802605c

08010a1c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b082      	sub	sp, #8
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
 8010a24:	6878      	ldr	r0, [r7, #4]
 8010a26:	f7ff ffe7 	bl	80109f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8010a2a:	2114      	movs	r1, #20
 8010a2c:	6878      	ldr	r0, [r7, #4]
 8010a2e:	f012 fd5e 	bl	80234ee <_ZdlPvj>
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	4618      	mov	r0, r3
 8010a36:	3708      	adds	r7, #8
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bd80      	pop	{r7, pc}

08010a3c <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b082      	sub	sp, #8
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
 8010a44:	4a05      	ldr	r2, [pc, #20]	; (8010a5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	601a      	str	r2, [r3, #0]
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f000 fc09 	bl	8011264 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	4618      	mov	r0, r3
 8010a56:	3708      	adds	r7, #8
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}
 8010a5c:	08026090 	.word	0x08026090

08010a60 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b082      	sub	sp, #8
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f7ff ffe7 	bl	8010a3c <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8010a6e:	f44f 714b 	mov.w	r1, #812	; 0x32c
 8010a72:	6878      	ldr	r0, [r7, #4]
 8010a74:	f012 fd3b 	bl	80234ee <_ZdlPvj>
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	3708      	adds	r7, #8
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}
	...

08010a84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b082      	sub	sp, #8
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
 8010a8c:	4a05      	ldr	r2, [pc, #20]	; (8010aa4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	601a      	str	r2, [r3, #0]
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	4618      	mov	r0, r3
 8010a96:	f000 fbe5 	bl	8011264 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	3708      	adds	r7, #8
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bd80      	pop	{r7, pc}
 8010aa4:	080260c4 	.word	0x080260c4

08010aa8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b082      	sub	sp, #8
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	f7ff ffe7 	bl	8010a84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8010ab6:	2118      	movs	r1, #24
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f012 fd18 	bl	80234ee <_ZdlPvj>
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	3708      	adds	r7, #8
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}

08010ac8 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b082      	sub	sp, #8
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
 8010ad0:	4a05      	ldr	r2, [pc, #20]	; (8010ae8 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	601a      	str	r2, [r3, #0]
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f7ff fcc7 	bl	801046c <_ZN8touchgfx3LCDD1Ev>
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	3708      	adds	r7, #8
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	bd80      	pop	{r7, pc}
 8010ae8:	080284a4 	.word	0x080284a4

08010aec <_ZN8touchgfx8LCD16bppD0Ev>:
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b082      	sub	sp, #8
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
 8010af4:	6878      	ldr	r0, [r7, #4]
 8010af6:	f7ff ffe7 	bl	8010ac8 <_ZN8touchgfx8LCD16bppD1Ev>
 8010afa:	2178      	movs	r1, #120	; 0x78
 8010afc:	6878      	ldr	r0, [r7, #4]
 8010afe:	f012 fcf6 	bl	80234ee <_ZdlPvj>
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	4618      	mov	r0, r3
 8010b06:	3708      	adds	r7, #8
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	bd80      	pop	{r7, pc}

08010b0c <_Z41__static_initialization_and_destruction_0ii>:
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b084      	sub	sp, #16
 8010b10:	af02      	add	r7, sp, #8
 8010b12:	6078      	str	r0, [r7, #4]
 8010b14:	6039      	str	r1, [r7, #0]
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	2b01      	cmp	r3, #1
 8010b1a:	d118      	bne.n	8010b4e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8010b1c:	683b      	ldr	r3, [r7, #0]
 8010b1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b22:	4293      	cmp	r3, r2
 8010b24:	d113      	bne.n	8010b4e <_Z41__static_initialization_and_destruction_0ii+0x42>
static STM32TouchController tc;
 8010b26:	4817      	ldr	r0, [pc, #92]	; (8010b84 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8010b28:	f7ff fee6 	bl	80108f8 <_ZN20STM32TouchControllerC1Ev>
static STM32F4DMA dma;
 8010b2c:	4816      	ldr	r0, [pc, #88]	; (8010b88 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8010b2e:	f7ff f8cb 	bl	800fcc8 <_ZN10STM32F4DMAC1Ev>
static LCD16bpp display;
 8010b32:	4816      	ldr	r0, [pc, #88]	; (8010b8c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8010b34:	f009 ff62 	bl	801a9fc <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 320);
 8010b38:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8010b3c:	9301      	str	r3, [sp, #4]
 8010b3e:	23f0      	movs	r3, #240	; 0xf0
 8010b40:	9300      	str	r3, [sp, #0]
 8010b42:	4b10      	ldr	r3, [pc, #64]	; (8010b84 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8010b44:	4a11      	ldr	r2, [pc, #68]	; (8010b8c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8010b46:	4910      	ldr	r1, [pc, #64]	; (8010b88 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8010b48:	4811      	ldr	r0, [pc, #68]	; (8010b90 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8010b4a:	f7ff fea9 	bl	80108a0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d113      	bne.n	8010b7c <_Z41__static_initialization_and_destruction_0ii+0x70>
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b5a:	4293      	cmp	r3, r2
 8010b5c:	d10e      	bne.n	8010b7c <_Z41__static_initialization_and_destruction_0ii+0x70>
 8010b5e:	480c      	ldr	r0, [pc, #48]	; (8010b90 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8010b60:	f7fe feee 	bl	800f940 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8010b64:	480b      	ldr	r0, [pc, #44]	; (8010b94 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8010b66:	f7fb fc71 	bl	800c44c <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8010b6a:	4808      	ldr	r0, [pc, #32]	; (8010b8c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8010b6c:	f7ff ffac 	bl	8010ac8 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32F4DMA dma;
 8010b70:	4805      	ldr	r0, [pc, #20]	; (8010b88 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8010b72:	f7ff f8d3 	bl	800fd1c <_ZN10STM32F4DMAD1Ev>
static STM32TouchController tc;
 8010b76:	4803      	ldr	r0, [pc, #12]	; (8010b84 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8010b78:	f7fe fc8c 	bl	800f494 <_ZN20STM32TouchControllerD1Ev>
}
 8010b7c:	bf00      	nop
 8010b7e:	3708      	adds	r7, #8
 8010b80:	46bd      	mov	sp, r7
 8010b82:	bd80      	pop	{r7, pc}
 8010b84:	20009310 	.word	0x20009310
 8010b88:	20009314 	.word	0x20009314
 8010b8c:	20009f34 	.word	0x20009f34
 8010b90:	20009fb0 	.word	0x20009fb0
 8010b94:	2000007c 	.word	0x2000007c

08010b98 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8010b98:	b480      	push	{r7}
 8010b9a:	b083      	sub	sp, #12
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8010ba0:	2301      	movs	r3, #1
    }
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	370c      	adds	r7, #12
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bac:	4770      	bx	lr

08010bae <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8010bae:	b480      	push	{r7}
 8010bb0:	b083      	sub	sp, #12
 8010bb2:	af00      	add	r7, sp, #0
 8010bb4:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8010bb6:	230c      	movs	r3, #12
    }
 8010bb8:	4618      	mov	r0, r3
 8010bba:	370c      	adds	r7, #12
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc2:	4770      	bx	lr

08010bc4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8010bc4:	b480      	push	{r7}
 8010bc6:	b083      	sub	sp, #12
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
 8010bcc:	460b      	mov	r3, r1
 8010bce:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8010bd0:	887a      	ldrh	r2, [r7, #2]
 8010bd2:	4613      	mov	r3, r2
 8010bd4:	005b      	lsls	r3, r3, #1
 8010bd6:	4413      	add	r3, r2
 8010bd8:	009b      	lsls	r3, r3, #2
 8010bda:	3308      	adds	r3, #8
 8010bdc:	687a      	ldr	r2, [r7, #4]
 8010bde:	4413      	add	r3, r2
    }
 8010be0:	4618      	mov	r0, r3
 8010be2:	370c      	adds	r7, #12
 8010be4:	46bd      	mov	sp, r7
 8010be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bea:	4770      	bx	lr

08010bec <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8010bec:	b480      	push	{r7}
 8010bee:	b083      	sub	sp, #12
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
 8010bf4:	460b      	mov	r3, r1
 8010bf6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8010bf8:	887a      	ldrh	r2, [r7, #2]
 8010bfa:	4613      	mov	r3, r2
 8010bfc:	005b      	lsls	r3, r3, #1
 8010bfe:	4413      	add	r3, r2
 8010c00:	009b      	lsls	r3, r3, #2
 8010c02:	3308      	adds	r3, #8
 8010c04:	687a      	ldr	r2, [r7, #4]
 8010c06:	4413      	add	r3, r2
    }
 8010c08:	4618      	mov	r0, r3
 8010c0a:	370c      	adds	r7, #12
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c12:	4770      	bx	lr

08010c14 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8010c14:	b480      	push	{r7}
 8010c16:	b083      	sub	sp, #12
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8010c1c:	2301      	movs	r3, #1
    }
 8010c1e:	4618      	mov	r0, r3
 8010c20:	370c      	adds	r7, #12
 8010c22:	46bd      	mov	sp, r7
 8010c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c28:	4770      	bx	lr

08010c2a <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8010c2a:	b480      	push	{r7}
 8010c2c:	b083      	sub	sp, #12
 8010c2e:	af00      	add	r7, sp, #0
 8010c30:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8010c32:	f44f 7349 	mov.w	r3, #804	; 0x324
    }
 8010c36:	4618      	mov	r0, r3
 8010c38:	370c      	adds	r7, #12
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c40:	4770      	bx	lr

08010c42 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8010c42:	b480      	push	{r7}
 8010c44:	b083      	sub	sp, #12
 8010c46:	af00      	add	r7, sp, #0
 8010c48:	6078      	str	r0, [r7, #4]
 8010c4a:	460b      	mov	r3, r1
 8010c4c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8010c4e:	887b      	ldrh	r3, [r7, #2]
 8010c50:	f44f 7249 	mov.w	r2, #804	; 0x324
 8010c54:	fb02 f303 	mul.w	r3, r2, r3
 8010c58:	3308      	adds	r3, #8
 8010c5a:	687a      	ldr	r2, [r7, #4]
 8010c5c:	4413      	add	r3, r2
    }
 8010c5e:	4618      	mov	r0, r3
 8010c60:	370c      	adds	r7, #12
 8010c62:	46bd      	mov	sp, r7
 8010c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c68:	4770      	bx	lr

08010c6a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8010c6a:	b480      	push	{r7}
 8010c6c:	b083      	sub	sp, #12
 8010c6e:	af00      	add	r7, sp, #0
 8010c70:	6078      	str	r0, [r7, #4]
 8010c72:	460b      	mov	r3, r1
 8010c74:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8010c76:	887b      	ldrh	r3, [r7, #2]
 8010c78:	f44f 7249 	mov.w	r2, #804	; 0x324
 8010c7c:	fb02 f303 	mul.w	r3, r2, r3
 8010c80:	3308      	adds	r3, #8
 8010c82:	687a      	ldr	r2, [r7, #4]
 8010c84:	4413      	add	r3, r2
    }
 8010c86:	4618      	mov	r0, r3
 8010c88:	370c      	adds	r7, #12
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c90:	4770      	bx	lr

08010c92 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8010c92:	b480      	push	{r7}
 8010c94:	b083      	sub	sp, #12
 8010c96:	af00      	add	r7, sp, #0
 8010c98:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8010c9a:	2301      	movs	r3, #1
    }
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	370c      	adds	r7, #12
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca6:	4770      	bx	lr

08010ca8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8010ca8:	b480      	push	{r7}
 8010caa:	b083      	sub	sp, #12
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8010cb0:	2310      	movs	r3, #16
    }
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	370c      	adds	r7, #12
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cbc:	4770      	bx	lr

08010cbe <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8010cbe:	b480      	push	{r7}
 8010cc0:	b083      	sub	sp, #12
 8010cc2:	af00      	add	r7, sp, #0
 8010cc4:	6078      	str	r0, [r7, #4]
 8010cc6:	460b      	mov	r3, r1
 8010cc8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8010cca:	887b      	ldrh	r3, [r7, #2]
 8010ccc:	011b      	lsls	r3, r3, #4
 8010cce:	3308      	adds	r3, #8
 8010cd0:	687a      	ldr	r2, [r7, #4]
 8010cd2:	4413      	add	r3, r2
    }
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	370c      	adds	r7, #12
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cde:	4770      	bx	lr

08010ce0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8010ce0:	b480      	push	{r7}
 8010ce2:	b083      	sub	sp, #12
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
 8010ce8:	460b      	mov	r3, r1
 8010cea:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8010cec:	887b      	ldrh	r3, [r7, #2]
 8010cee:	011b      	lsls	r3, r3, #4
 8010cf0:	3308      	adds	r3, #8
 8010cf2:	687a      	ldr	r2, [r7, #4]
 8010cf4:	4413      	add	r3, r2
    }
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	370c      	adds	r7, #12
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d00:	4770      	bx	lr

08010d02 <_GLOBAL__sub_I_touchgfx_init>:
 8010d02:	b580      	push	{r7, lr}
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010d0a:	2001      	movs	r0, #1
 8010d0c:	f7ff fefe 	bl	8010b0c <_Z41__static_initialization_and_destruction_0ii>
 8010d10:	bd80      	pop	{r7, pc}

08010d12 <_GLOBAL__sub_D_touchgfx_init>:
 8010d12:	b580      	push	{r7, lr}
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010d1a:	2000      	movs	r0, #0
 8010d1c:	f7ff fef6 	bl	8010b0c <_Z41__static_initialization_and_destruction_0ii>
 8010d20:	bd80      	pop	{r7, pc}

08010d22 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8010d22:	b580      	push	{r7, lr}
 8010d24:	b082      	sub	sp, #8
 8010d26:	af00      	add	r7, sp, #0
 8010d28:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	3318      	adds	r3, #24
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	6878      	ldr	r0, [r7, #4]
 8010d34:	4798      	blx	r3
    }
 8010d36:	bf00      	nop
 8010d38:	3708      	adds	r7, #8
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}

08010d3e <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8010d3e:	b480      	push	{r7}
 8010d40:	b083      	sub	sp, #12
 8010d42:	af00      	add	r7, sp, #0
 8010d44:	6078      	str	r0, [r7, #4]
 8010d46:	460b      	mov	r3, r1
 8010d48:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	78fa      	ldrb	r2, [r7, #3]
 8010d4e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8010d52:	bf00      	nop
 8010d54:	370c      	adds	r7, #12
 8010d56:	46bd      	mov	sp, r7
 8010d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5c:	4770      	bx	lr

08010d5e <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8010d5e:	b480      	push	{r7}
 8010d60:	b083      	sub	sp, #12
 8010d62:	af00      	add	r7, sp, #0
 8010d64:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8010d6c:	3301      	adds	r3, #1
 8010d6e:	b2da      	uxtb	r2, r3
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8010d76:	bf00      	nop
 8010d78:	370c      	adds	r7, #12
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d80:	4770      	bx	lr
	...

08010d84 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b082      	sub	sp, #8
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
 8010d8c:	460b      	mov	r3, r1
 8010d8e:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8010d90:	78fb      	ldrb	r3, [r7, #3]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d002      	beq.n	8010d9c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8010d96:	78fb      	ldrb	r3, [r7, #3]
 8010d98:	2b02      	cmp	r3, #2
 8010d9a:	d105      	bne.n	8010da8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	78fa      	ldrb	r2, [r7, #3]
 8010da0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8010da4:	2301      	movs	r3, #1
 8010da6:	e027      	b.n	8010df8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8010da8:	78fb      	ldrb	r3, [r7, #3]
 8010daa:	2b01      	cmp	r3, #1
 8010dac:	d123      	bne.n	8010df6 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d014      	beq.n	8010de0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	3380      	adds	r3, #128	; 0x80
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	6878      	ldr	r0, [r7, #4]
 8010dc0:	4798      	blx	r3
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	461a      	mov	r2, r3
 8010dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010dca:	429a      	cmp	r2, r3
 8010dcc:	d008      	beq.n	8010de0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8010dce:	4b0c      	ldr	r3, [pc, #48]	; (8010e00 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8010dd0:	781b      	ldrb	r3, [r3, #0]
 8010dd2:	f083 0301 	eor.w	r3, r3, #1
 8010dd6:	b2db      	uxtb	r3, r3
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d001      	beq.n	8010de0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8010ddc:	2301      	movs	r3, #1
 8010dde:	e000      	b.n	8010de2 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8010de0:	2300      	movs	r3, #0
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d005      	beq.n	8010df2 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	78fa      	ldrb	r2, [r7, #3]
 8010dea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8010dee:	2301      	movs	r3, #1
 8010df0:	e002      	b.n	8010df8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8010df2:	2300      	movs	r3, #0
 8010df4:	e000      	b.n	8010df8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8010df6:	2300      	movs	r3, #0
    }
 8010df8:	4618      	mov	r0, r3
 8010dfa:	3708      	adds	r7, #8
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bd80      	pop	{r7, pc}
 8010e00:	2000a03a 	.word	0x2000a03a

08010e04 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8010e04:	b480      	push	{r7}
 8010e06:	b083      	sub	sp, #12
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
 8010e0c:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	683a      	ldr	r2, [r7, #0]
 8010e12:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8010e14:	bf00      	nop
 8010e16:	370c      	adds	r7, #12
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1e:	4770      	bx	lr

08010e20 <__NVIC_EnableIRQ>:
{
 8010e20:	b480      	push	{r7}
 8010e22:	b083      	sub	sp, #12
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	4603      	mov	r3, r0
 8010e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	db0b      	blt.n	8010e4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010e32:	79fb      	ldrb	r3, [r7, #7]
 8010e34:	f003 021f 	and.w	r2, r3, #31
 8010e38:	4907      	ldr	r1, [pc, #28]	; (8010e58 <__NVIC_EnableIRQ+0x38>)
 8010e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e3e:	095b      	lsrs	r3, r3, #5
 8010e40:	2001      	movs	r0, #1
 8010e42:	fa00 f202 	lsl.w	r2, r0, r2
 8010e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010e4a:	bf00      	nop
 8010e4c:	370c      	adds	r7, #12
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e54:	4770      	bx	lr
 8010e56:	bf00      	nop
 8010e58:	e000e100 	.word	0xe000e100

08010e5c <__NVIC_DisableIRQ>:
{
 8010e5c:	b480      	push	{r7}
 8010e5e:	b083      	sub	sp, #12
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	4603      	mov	r3, r0
 8010e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	db12      	blt.n	8010e94 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010e6e:	79fb      	ldrb	r3, [r7, #7]
 8010e70:	f003 021f 	and.w	r2, r3, #31
 8010e74:	490a      	ldr	r1, [pc, #40]	; (8010ea0 <__NVIC_DisableIRQ+0x44>)
 8010e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e7a:	095b      	lsrs	r3, r3, #5
 8010e7c:	2001      	movs	r0, #1
 8010e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8010e82:	3320      	adds	r3, #32
 8010e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8010e88:	f3bf 8f4f 	dsb	sy
}
 8010e8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010e8e:	f3bf 8f6f 	isb	sy
}
 8010e92:	bf00      	nop
}
 8010e94:	bf00      	nop
 8010e96:	370c      	adds	r7, #12
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9e:	4770      	bx	lr
 8010ea0:	e000e100 	.word	0xe000e100

08010ea4 <__NVIC_SetPriority>:
{
 8010ea4:	b480      	push	{r7}
 8010ea6:	b083      	sub	sp, #12
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	4603      	mov	r3, r0
 8010eac:	6039      	str	r1, [r7, #0]
 8010eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	db0a      	blt.n	8010ece <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010eb8:	683b      	ldr	r3, [r7, #0]
 8010eba:	b2da      	uxtb	r2, r3
 8010ebc:	490c      	ldr	r1, [pc, #48]	; (8010ef0 <__NVIC_SetPriority+0x4c>)
 8010ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010ec2:	0112      	lsls	r2, r2, #4
 8010ec4:	b2d2      	uxtb	r2, r2
 8010ec6:	440b      	add	r3, r1
 8010ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010ecc:	e00a      	b.n	8010ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010ece:	683b      	ldr	r3, [r7, #0]
 8010ed0:	b2da      	uxtb	r2, r3
 8010ed2:	4908      	ldr	r1, [pc, #32]	; (8010ef4 <__NVIC_SetPriority+0x50>)
 8010ed4:	79fb      	ldrb	r3, [r7, #7]
 8010ed6:	f003 030f 	and.w	r3, r3, #15
 8010eda:	3b04      	subs	r3, #4
 8010edc:	0112      	lsls	r2, r2, #4
 8010ede:	b2d2      	uxtb	r2, r2
 8010ee0:	440b      	add	r3, r1
 8010ee2:	761a      	strb	r2, [r3, #24]
}
 8010ee4:	bf00      	nop
 8010ee6:	370c      	adds	r7, #12
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eee:	4770      	bx	lr
 8010ef0:	e000e100 	.word	0xe000e100
 8010ef4:	e000ed00 	.word	0xe000ed00

08010ef8 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8010ef8:	b5b0      	push	{r4, r5, r7, lr}
 8010efa:	b082      	sub	sp, #8
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	4618      	mov	r0, r3
 8010f04:	f001 f896 	bl	8012034 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(Application::getInstance()));
 8010f08:	687d      	ldr	r5, [r7, #4]
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	334c      	adds	r3, #76	; 0x4c
 8010f10:	681c      	ldr	r4, [r3, #0]
 8010f12:	f003 fcfb 	bl	801490c <_ZN8touchgfx11Application11getInstanceEv>
 8010f16:	4603      	mov	r3, r0
 8010f18:	4619      	mov	r1, r3
 8010f1a:	4628      	mov	r0, r5
 8010f1c:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	490d      	ldr	r1, [pc, #52]	; (8010f58 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8010f22:	4618      	mov	r0, r3
 8010f24:	f7ff ff6e 	bl	8010e04 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2101      	movs	r1, #1
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	f7ff ff29 	bl	8010d84 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	3370      	adds	r3, #112	; 0x70
 8010f3a:	681c      	ldr	r4, [r3, #0]
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	2200      	movs	r2, #0
 8010f40:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8010f44:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	2101      	movs	r1, #1
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f7ff fef7 	bl	8010d3e <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8010f50:	bf00      	nop
 8010f52:	3708      	adds	r7, #8
 8010f54:	46bd      	mov	sp, r7
 8010f56:	bdb0      	pop	{r4, r5, r7, pc}
 8010f58:	0800fa95 	.word	0x0800fa95

08010f5c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b082      	sub	sp, #8
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8010f64:	2109      	movs	r1, #9
 8010f66:	205a      	movs	r0, #90	; 0x5a
 8010f68:	f7ff ff9c 	bl	8010ea4 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8010f6c:	2109      	movs	r1, #9
 8010f6e:	2058      	movs	r0, #88	; 0x58
 8010f70:	f7ff ff98 	bl	8010ea4 <__NVIC_SetPriority>
}
 8010f74:	bf00      	nop
 8010f76:	3708      	adds	r7, #8
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	bd80      	pop	{r7, pc}

08010f7c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b082      	sub	sp, #8
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8010f84:	205a      	movs	r0, #90	; 0x5a
 8010f86:	f7ff ff4b 	bl	8010e20 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8010f8a:	2058      	movs	r0, #88	; 0x58
 8010f8c:	f7ff ff48 	bl	8010e20 <__NVIC_EnableIRQ>
}
 8010f90:	bf00      	nop
 8010f92:	3708      	adds	r7, #8
 8010f94:	46bd      	mov	sp, r7
 8010f96:	bd80      	pop	{r7, pc}

08010f98 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b082      	sub	sp, #8
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8010fa0:	205a      	movs	r0, #90	; 0x5a
 8010fa2:	f7ff ff5b 	bl	8010e5c <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8010fa6:	2058      	movs	r0, #88	; 0x58
 8010fa8:	f7ff ff58 	bl	8010e5c <__NVIC_DisableIRQ>
}
 8010fac:	bf00      	nop
 8010fae:	3708      	adds	r7, #8
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bd80      	pop	{r7, pc}

08010fb4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8010fb4:	b480      	push	{r7}
 8010fb6:	b083      	sub	sp, #12
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8010fbc:	4b11      	ldr	r3, [pc, #68]	; (8011004 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8010fbe:	68db      	ldr	r3, [r3, #12]
 8010fc0:	b29b      	uxth	r3, r3
 8010fc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010fc6:	b29b      	uxth	r3, r3
 8010fc8:	3b01      	subs	r3, #1
 8010fca:	b29a      	uxth	r2, r3
 8010fcc:	4b0e      	ldr	r3, [pc, #56]	; (8011008 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8010fce:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8010fd0:	4b0c      	ldr	r3, [pc, #48]	; (8011004 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8010fd2:	691b      	ldr	r3, [r3, #16]
 8010fd4:	b29b      	uxth	r3, r3
 8010fd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010fda:	b29b      	uxth	r3, r3
 8010fdc:	3b01      	subs	r3, #1
 8010fde:	b29a      	uxth	r2, r3
 8010fe0:	4b0a      	ldr	r3, [pc, #40]	; (801100c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8010fe2:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8010fe4:	4b08      	ldr	r3, [pc, #32]	; (8011008 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8010fe6:	881a      	ldrh	r2, [r3, #0]
 8010fe8:	4b06      	ldr	r3, [pc, #24]	; (8011004 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8010fea:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8010fec:	4b05      	ldr	r3, [pc, #20]	; (8011004 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8010fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ff0:	4a04      	ldr	r2, [pc, #16]	; (8011004 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8010ff2:	f043 0301 	orr.w	r3, r3, #1
 8010ff6:	6353      	str	r3, [r2, #52]	; 0x34
}
 8010ff8:	bf00      	nop
 8010ffa:	370c      	adds	r7, #12
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011002:	4770      	bx	lr
 8011004:	40016800 	.word	0x40016800
 8011008:	2000a02c 	.word	0x2000a02c
 801100c:	2000a02e 	.word	0x2000a02e

08011010 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8011010:	b480      	push	{r7}
 8011012:	b083      	sub	sp, #12
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8011018:	4b03      	ldr	r3, [pc, #12]	; (8011028 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 801101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801101c:	4618      	mov	r0, r3
 801101e:	370c      	adds	r7, #12
 8011020:	46bd      	mov	sp, r7
 8011022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011026:	4770      	bx	lr
 8011028:	40016884 	.word	0x40016884

0801102c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 801102c:	b480      	push	{r7}
 801102e:	b083      	sub	sp, #12
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
 8011034:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8011036:	4a06      	ldr	r2, [pc, #24]	; (8011050 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8011038:	683b      	ldr	r3, [r7, #0]
 801103a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 801103c:	4b05      	ldr	r3, [pc, #20]	; (8011054 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 801103e:	2201      	movs	r2, #1
 8011040:	625a      	str	r2, [r3, #36]	; 0x24
}
 8011042:	bf00      	nop
 8011044:	370c      	adds	r7, #12
 8011046:	46bd      	mov	sp, r7
 8011048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104c:	4770      	bx	lr
 801104e:	bf00      	nop
 8011050:	40016884 	.word	0x40016884
 8011054:	40016800 	.word	0x40016800

08011058 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b082      	sub	sp, #8
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
 8011060:	6039      	str	r1, [r7, #0]
  HAL::flushFrameBuffer(rect);
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	6839      	ldr	r1, [r7, #0]
 8011066:	4618      	mov	r0, r3
 8011068:	f000 fcdf 	bl	8011a2a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 801106c:	bf00      	nop
 801106e:	3708      	adds	r7, #8
 8011070:	46bd      	mov	sp, r7
 8011072:	bd80      	pop	{r7, pc}

08011074 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8011074:	b580      	push	{r7, lr}
 8011076:	b084      	sub	sp, #16
 8011078:	af00      	add	r7, sp, #0
 801107a:	60f8      	str	r0, [r7, #12]
 801107c:	60b9      	str	r1, [r7, #8]
 801107e:	607a      	str	r2, [r7, #4]
 8011080:	603b      	str	r3, [r7, #0]
  return HAL::blockCopy(dest, src, numBytes);
 8011082:	68f8      	ldr	r0, [r7, #12]
 8011084:	683b      	ldr	r3, [r7, #0]
 8011086:	687a      	ldr	r2, [r7, #4]
 8011088:	68b9      	ldr	r1, [r7, #8]
 801108a:	f000 fe02 	bl	8011c92 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 801108e:	4603      	mov	r3, r0
}
 8011090:	4618      	mov	r0, r3
 8011092:	3710      	adds	r7, #16
 8011094:	46bd      	mov	sp, r7
 8011096:	bd80      	pop	{r7, pc}

08011098 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8011098:	b480      	push	{r7}
 801109a:	b085      	sub	sp, #20
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 80110a0:	4b0d      	ldr	r3, [pc, #52]	; (80110d8 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80110a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110a4:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 80110a6:	4b0c      	ldr	r3, [pc, #48]	; (80110d8 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80110a8:	68db      	ldr	r3, [r3, #12]
 80110aa:	b29b      	uxth	r3, r3
 80110ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80110b0:	b29b      	uxth	r3, r3
 80110b2:	3301      	adds	r3, #1
 80110b4:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 80110b6:	89fa      	ldrh	r2, [r7, #14]
 80110b8:	89bb      	ldrh	r3, [r7, #12]
 80110ba:	429a      	cmp	r2, r3
 80110bc:	d304      	bcc.n	80110c8 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 80110be:	89fa      	ldrh	r2, [r7, #14]
 80110c0:	89bb      	ldrh	r3, [r7, #12]
 80110c2:	1ad3      	subs	r3, r2, r3
 80110c4:	b29b      	uxth	r3, r3
 80110c6:	e000      	b.n	80110ca <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 80110c8:	2300      	movs	r3, #0
}
 80110ca:	4618      	mov	r0, r3
 80110cc:	3714      	adds	r7, #20
 80110ce:	46bd      	mov	sp, r7
 80110d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d4:	4770      	bx	lr
 80110d6:	bf00      	nop
 80110d8:	40016800 	.word	0x40016800

080110dc <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 80110dc:	b580      	push	{r7, lr}
 80110de:	b082      	sub	sp, #8
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 80110e4:	4b1a      	ldr	r3, [pc, #104]	; (8011150 <HAL_LTDC_LineEventCallback+0x74>)
 80110e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110e8:	4a1a      	ldr	r2, [pc, #104]	; (8011154 <HAL_LTDC_LineEventCallback+0x78>)
 80110ea:	8812      	ldrh	r2, [r2, #0]
 80110ec:	4293      	cmp	r3, r2
 80110ee:	bf0c      	ite	eq
 80110f0:	2301      	moveq	r3, #1
 80110f2:	2300      	movne	r3, #0
 80110f4:	b2db      	uxtb	r3, r3
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d017      	beq.n	801112a <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80110fa:	4b17      	ldr	r3, [pc, #92]	; (8011158 <HAL_LTDC_LineEventCallback+0x7c>)
 80110fc:	881b      	ldrh	r3, [r3, #0]
 80110fe:	4619      	mov	r1, r3
 8011100:	6878      	ldr	r0, [r7, #4]
 8011102:	f7f4 fc27 	bl	8005954 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8011106:	f7fb fd05 	bl	800cb14 <_ZN8touchgfx3HAL11getInstanceEv>
 801110a:	4603      	mov	r3, r0
 801110c:	4618      	mov	r0, r3
 801110e:	f7ff fe26 	bl	8010d5e <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8011112:	f7fe fc9f 	bl	800fa54 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8011116:	f7fb fcfd 	bl	800cb14 <_ZN8touchgfx3HAL11getInstanceEv>
 801111a:	4603      	mov	r3, r0
 801111c:	4618      	mov	r0, r3
 801111e:	f001 fa11 	bl	8012544 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8011122:	2000      	movs	r0, #0
 8011124:	f7fe f9d8 	bl	800f4d8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8011128:	e00e      	b.n	8011148 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 801112a:	4b0a      	ldr	r3, [pc, #40]	; (8011154 <HAL_LTDC_LineEventCallback+0x78>)
 801112c:	881b      	ldrh	r3, [r3, #0]
 801112e:	4619      	mov	r1, r3
 8011130:	6878      	ldr	r0, [r7, #4]
 8011132:	f7f4 fc0f 	bl	8005954 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8011136:	2000      	movs	r0, #0
 8011138:	f7fe f9d9 	bl	800f4ee <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 801113c:	f7fb fcea 	bl	800cb14 <_ZN8touchgfx3HAL11getInstanceEv>
 8011140:	4603      	mov	r3, r0
 8011142:	4618      	mov	r0, r3
 8011144:	f7ff fded 	bl	8010d22 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8011148:	bf00      	nop
 801114a:	3708      	adds	r7, #8
 801114c:	46bd      	mov	sp, r7
 801114e:	bd80      	pop	{r7, pc}
 8011150:	40016800 	.word	0x40016800
 8011154:	2000a02c 	.word	0x2000a02c
 8011158:	2000a02e 	.word	0x2000a02e

0801115c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801115c:	8880      	ldrh	r0, [r0, #4]
 801115e:	4770      	bx	lr

08011160 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8011160:	2300      	movs	r3, #0
 8011162:	8083      	strh	r3, [r0, #4]
 8011164:	4770      	bx	lr
	...

08011168 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8011168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801116a:	6803      	ldr	r3, [r0, #0]
 801116c:	4605      	mov	r5, r0
 801116e:	460e      	mov	r6, r1
 8011170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011172:	2100      	movs	r1, #0
 8011174:	4798      	blx	r3
 8011176:	682b      	ldr	r3, [r5, #0]
 8011178:	4604      	mov	r4, r0
 801117a:	6a1b      	ldr	r3, [r3, #32]
 801117c:	4628      	mov	r0, r5
 801117e:	4798      	blx	r3
 8011180:	88ab      	ldrh	r3, [r5, #4]
 8011182:	1b34      	subs	r4, r6, r4
 8011184:	b2a4      	uxth	r4, r4
 8011186:	fbb4 f4f0 	udiv	r4, r4, r0
 801118a:	42a3      	cmp	r3, r4
 801118c:	d805      	bhi.n	801119a <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 801118e:	4b0e      	ldr	r3, [pc, #56]	; (80111c8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8011190:	4a0e      	ldr	r2, [pc, #56]	; (80111cc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8011192:	2120      	movs	r1, #32
 8011194:	480e      	ldr	r0, [pc, #56]	; (80111d0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8011196:	f012 fad5 	bl	8023744 <__assert_func>
 801119a:	682b      	ldr	r3, [r5, #0]
 801119c:	2100      	movs	r1, #0
 801119e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111a0:	4628      	mov	r0, r5
 80111a2:	4798      	blx	r3
 80111a4:	682b      	ldr	r3, [r5, #0]
 80111a6:	4607      	mov	r7, r0
 80111a8:	6a1b      	ldr	r3, [r3, #32]
 80111aa:	4628      	mov	r0, r5
 80111ac:	4798      	blx	r3
 80111ae:	1bf3      	subs	r3, r6, r7
 80111b0:	b29b      	uxth	r3, r3
 80111b2:	fbb3 f2f0 	udiv	r2, r3, r0
 80111b6:	fb02 3010 	mls	r0, r2, r0, r3
 80111ba:	b118      	cbz	r0, 80111c4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 80111bc:	4b05      	ldr	r3, [pc, #20]	; (80111d4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 80111be:	4a03      	ldr	r2, [pc, #12]	; (80111cc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80111c0:	2121      	movs	r1, #33	; 0x21
 80111c2:	e7e7      	b.n	8011194 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 80111c4:	4620      	mov	r0, r4
 80111c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111c8:	080261d0 	.word	0x080261d0
 80111cc:	0802633e 	.word	0x0802633e
 80111d0:	080261e5 	.word	0x080261e5
 80111d4:	08026213 	.word	0x08026213

080111d8 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80111d8:	b538      	push	{r3, r4, r5, lr}
 80111da:	6803      	ldr	r3, [r0, #0]
 80111dc:	6a1b      	ldr	r3, [r3, #32]
 80111de:	460d      	mov	r5, r1
 80111e0:	4604      	mov	r4, r0
 80111e2:	4798      	blx	r3
 80111e4:	4285      	cmp	r5, r0
 80111e6:	d905      	bls.n	80111f4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 80111e8:	4b0c      	ldr	r3, [pc, #48]	; (801121c <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 80111ea:	4a0d      	ldr	r2, [pc, #52]	; (8011220 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80111ec:	2132      	movs	r1, #50	; 0x32
 80111ee:	480d      	ldr	r0, [pc, #52]	; (8011224 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 80111f0:	f012 faa8 	bl	8023744 <__assert_func>
 80111f4:	6823      	ldr	r3, [r4, #0]
 80111f6:	88a5      	ldrh	r5, [r4, #4]
 80111f8:	69db      	ldr	r3, [r3, #28]
 80111fa:	4620      	mov	r0, r4
 80111fc:	4798      	blx	r3
 80111fe:	4285      	cmp	r5, r0
 8011200:	d303      	bcc.n	801120a <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8011202:	4b09      	ldr	r3, [pc, #36]	; (8011228 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8011204:	4a06      	ldr	r2, [pc, #24]	; (8011220 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8011206:	2133      	movs	r1, #51	; 0x33
 8011208:	e7f1      	b.n	80111ee <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 801120a:	6823      	ldr	r3, [r4, #0]
 801120c:	88a1      	ldrh	r1, [r4, #4]
 801120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011210:	4620      	mov	r0, r4
 8011212:	4798      	blx	r3
 8011214:	88a3      	ldrh	r3, [r4, #4]
 8011216:	3301      	adds	r3, #1
 8011218:	80a3      	strh	r3, [r4, #4]
 801121a:	bd38      	pop	{r3, r4, r5, pc}
 801121c:	0802628d 	.word	0x0802628d
 8011220:	08026381 	.word	0x08026381
 8011224:	080261e5 	.word	0x080261e5
 8011228:	080262a4 	.word	0x080262a4

0801122c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801122c:	b570      	push	{r4, r5, r6, lr}
 801122e:	6803      	ldr	r3, [r0, #0]
 8011230:	6a1b      	ldr	r3, [r3, #32]
 8011232:	4616      	mov	r6, r2
 8011234:	4604      	mov	r4, r0
 8011236:	460d      	mov	r5, r1
 8011238:	4798      	blx	r3
 801123a:	4286      	cmp	r6, r0
 801123c:	d905      	bls.n	801124a <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 801123e:	4b06      	ldr	r3, [pc, #24]	; (8011258 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8011240:	4a06      	ldr	r2, [pc, #24]	; (801125c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8011242:	4807      	ldr	r0, [pc, #28]	; (8011260 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8011244:	213c      	movs	r1, #60	; 0x3c
 8011246:	f012 fa7d 	bl	8023744 <__assert_func>
 801124a:	6823      	ldr	r3, [r4, #0]
 801124c:	4629      	mov	r1, r5
 801124e:	4620      	mov	r0, r4
 8011250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011252:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011256:	4718      	bx	r3
 8011258:	0802628d 	.word	0x0802628d
 801125c:	080262f4 	.word	0x080262f4
 8011260:	080261e5 	.word	0x080261e5

08011264 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8011264:	4770      	bx	lr
	...

08011268 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8011268:	4a02      	ldr	r2, [pc, #8]	; (8011274 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801126a:	6002      	str	r2, [r0, #0]
 801126c:	2200      	movs	r2, #0
 801126e:	8082      	strh	r2, [r0, #4]
 8011270:	4770      	bx	lr
 8011272:	bf00      	nop
 8011274:	080262c8 	.word	0x080262c8

08011278 <_ZN8touchgfx9Container13getFirstChildEv>:
 8011278:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801127a:	4770      	bx	lr

0801127c <_ZNK8touchgfx12DigitalClock14getDisplayModeEv>:
 801127c:	f890 002f 	ldrb.w	r0, [r0, #47]	; 0x2f
 8011280:	4770      	bx	lr

08011282 <_ZN8touchgfx12DigitalClock8setWidthEs>:
 8011282:	8101      	strh	r1, [r0, #8]
 8011284:	8781      	strh	r1, [r0, #60]	; 0x3c
 8011286:	4770      	bx	lr

08011288 <_ZN8touchgfx12DigitalClock9setHeightEs>:
 8011288:	8141      	strh	r1, [r0, #10]
 801128a:	87c1      	strh	r1, [r0, #62]	; 0x3e
 801128c:	4770      	bx	lr

0801128e <_ZN8touchgfx12DigitalClock8setAlphaEh>:
 801128e:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
 8011292:	4770      	bx	lr

08011294 <_ZNK8touchgfx12DigitalClock8getAlphaEv>:
 8011294:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8011298:	4770      	bx	lr

0801129a <_ZNK8touchgfx12DigitalClock8getColorEv>:
 801129a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801129c:	4770      	bx	lr

0801129e <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>:
 801129e:	6641      	str	r1, [r0, #100]	; 0x64
 80112a0:	3034      	adds	r0, #52	; 0x34
 80112a2:	f004 ba8e 	b.w	80157c2 <_ZNK8touchgfx8Drawable10invalidateEv>
	...

080112a8 <_ZN8touchgfx12DigitalClock12setBaselineYEs>:
 80112a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112ac:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80112b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80112b4:	4293      	cmp	r3, r2
 80112b6:	4605      	mov	r5, r0
 80112b8:	d026      	beq.n	8011308 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x60>
 80112ba:	6802      	ldr	r2, [r0, #0]
 80112bc:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 80112c0:	6d56      	ldr	r6, [r2, #84]	; 0x54
 80112c2:	4a12      	ldr	r2, [pc, #72]	; (801130c <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x64>)
 80112c4:	6812      	ldr	r2, [r2, #0]
 80112c6:	b28c      	uxth	r4, r1
 80112c8:	b92a      	cbnz	r2, 80112d6 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x2e>
 80112ca:	4b11      	ldr	r3, [pc, #68]	; (8011310 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x68>)
 80112cc:	4a11      	ldr	r2, [pc, #68]	; (8011314 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x6c>)
 80112ce:	21b1      	movs	r1, #177	; 0xb1
 80112d0:	4811      	ldr	r0, [pc, #68]	; (8011318 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x70>)
 80112d2:	f012 fa37 	bl	8023744 <__assert_func>
 80112d6:	4911      	ldr	r1, [pc, #68]	; (801131c <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x74>)
 80112d8:	8809      	ldrh	r1, [r1, #0]
 80112da:	4299      	cmp	r1, r3
 80112dc:	d803      	bhi.n	80112e6 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x3e>
 80112de:	4b10      	ldr	r3, [pc, #64]	; (8011320 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x78>)
 80112e0:	4a0c      	ldr	r2, [pc, #48]	; (8011314 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x6c>)
 80112e2:	21b2      	movs	r1, #178	; 0xb2
 80112e4:	e7f4      	b.n	80112d0 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x28>
 80112e6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80112ea:	4b0e      	ldr	r3, [pc, #56]	; (8011324 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x7c>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80112f2:	6803      	ldr	r3, [r0, #0]
 80112f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112f6:	4798      	blx	r3
 80112f8:	1a22      	subs	r2, r4, r0
 80112fa:	4639      	mov	r1, r7
 80112fc:	4628      	mov	r0, r5
 80112fe:	4633      	mov	r3, r6
 8011300:	b212      	sxth	r2, r2
 8011302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011306:	4718      	bx	r3
 8011308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801130c:	2000a08c 	.word	0x2000a08c
 8011310:	08026413 	.word	0x08026413
 8011314:	08026588 	.word	0x08026588
 8011318:	08026455 	.word	0x08026455
 801131c:	2000a090 	.word	0x2000a090
 8011320:	0802647e 	.word	0x0802647e
 8011324:	2000a094 	.word	0x2000a094

08011328 <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>:
 8011328:	b513      	push	{r0, r1, r4, lr}
 801132a:	4b08      	ldr	r3, [pc, #32]	; (801134c <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE+0x24>)
 801132c:	9300      	str	r3, [sp, #0]
 801132e:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8011332:	888b      	ldrh	r3, [r1, #4]
 8011334:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011338:	4669      	mov	r1, sp
 801133a:	4620      	mov	r0, r4
 801133c:	f001 fc57 	bl	8012bee <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8011340:	4620      	mov	r0, r4
 8011342:	f004 fa3e 	bl	80157c2 <_ZNK8touchgfx8Drawable10invalidateEv>
 8011346:	b002      	add	sp, #8
 8011348:	bd10      	pop	{r4, pc}
 801134a:	bf00      	nop
 801134c:	08025a04 	.word	0x08025a04

08011350 <_ZN8touchgfx12DigitalClock11updateClockEv>:
 8011350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011354:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8011358:	b085      	sub	sp, #20
 801135a:	4604      	mov	r4, r0
 801135c:	b9fb      	cbnz	r3, 801139e <_ZN8touchgfx12DigitalClock11updateClockEv+0x4e>
 801135e:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8011362:	4a3f      	ldr	r2, [pc, #252]	; (8011460 <_ZN8touchgfx12DigitalClock11updateClockEv+0x110>)
 8011364:	4e3f      	ldr	r6, [pc, #252]	; (8011464 <_ZN8touchgfx12DigitalClock11updateClockEv+0x114>)
 8011366:	f100 0574 	add.w	r5, r0, #116	; 0x74
 801136a:	2b00      	cmp	r3, #0
 801136c:	bf08      	it	eq
 801136e:	4616      	moveq	r6, r2
 8011370:	f000 f961 	bl	8011636 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 8011374:	4607      	mov	r7, r0
 8011376:	4620      	mov	r0, r4
 8011378:	f000 f970 	bl	801165c <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 801137c:	4680      	mov	r8, r0
 801137e:	4620      	mov	r0, r4
 8011380:	f000 f965 	bl	801164e <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 8011384:	2800      	cmp	r0, #0
 8011386:	bf14      	ite	ne
 8011388:	2341      	movne	r3, #65	; 0x41
 801138a:	2350      	moveq	r3, #80	; 0x50
 801138c:	e9cd 8300 	strd	r8, r3, [sp]
 8011390:	4632      	mov	r2, r6
 8011392:	463b      	mov	r3, r7
 8011394:	210c      	movs	r1, #12
 8011396:	4628      	mov	r0, r5
 8011398:	f006 f9e2 	bl	8017760 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801139c:	e016      	b.n	80113cc <_ZN8touchgfx12DigitalClock11updateClockEv+0x7c>
 801139e:	2b01      	cmp	r3, #1
 80113a0:	d11b      	bne.n	80113da <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 80113a2:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 80113a6:	4a30      	ldr	r2, [pc, #192]	; (8011468 <_ZN8touchgfx12DigitalClock11updateClockEv+0x118>)
 80113a8:	4d30      	ldr	r5, [pc, #192]	; (801146c <_ZN8touchgfx12DigitalClock11updateClockEv+0x11c>)
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	bf08      	it	eq
 80113ae:	4615      	moveq	r5, r2
 80113b0:	f000 f93e 	bl	8011630 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 80113b4:	4606      	mov	r6, r0
 80113b6:	4620      	mov	r0, r4
 80113b8:	f000 f950 	bl	801165c <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 80113bc:	4633      	mov	r3, r6
 80113be:	9000      	str	r0, [sp, #0]
 80113c0:	462a      	mov	r2, r5
 80113c2:	210c      	movs	r1, #12
 80113c4:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80113c8:	f006 f9ca 	bl	8017760 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80113cc:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80113d0:	b005      	add	sp, #20
 80113d2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80113d6:	f004 b9f4 	b.w	80157c2 <_ZNK8touchgfx8Drawable10invalidateEv>
 80113da:	2b02      	cmp	r3, #2
 80113dc:	d125      	bne.n	801142a <_ZN8touchgfx12DigitalClock11updateClockEv+0xda>
 80113de:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 80113e2:	4a23      	ldr	r2, [pc, #140]	; (8011470 <_ZN8touchgfx12DigitalClock11updateClockEv+0x120>)
 80113e4:	4e23      	ldr	r6, [pc, #140]	; (8011474 <_ZN8touchgfx12DigitalClock11updateClockEv+0x124>)
 80113e6:	f100 0574 	add.w	r5, r0, #116	; 0x74
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	bf08      	it	eq
 80113ee:	4616      	moveq	r6, r2
 80113f0:	f000 f921 	bl	8011636 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 80113f4:	4607      	mov	r7, r0
 80113f6:	4620      	mov	r0, r4
 80113f8:	f000 f930 	bl	801165c <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 80113fc:	4680      	mov	r8, r0
 80113fe:	4620      	mov	r0, r4
 8011400:	f000 f92f 	bl	8011662 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 8011404:	4681      	mov	r9, r0
 8011406:	4620      	mov	r0, r4
 8011408:	f000 f921 	bl	801164e <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 801140c:	2800      	cmp	r0, #0
 801140e:	bf14      	ite	ne
 8011410:	2341      	movne	r3, #65	; 0x41
 8011412:	2350      	moveq	r3, #80	; 0x50
 8011414:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8011418:	f8cd 8000 	str.w	r8, [sp]
 801141c:	463b      	mov	r3, r7
 801141e:	4632      	mov	r2, r6
 8011420:	210c      	movs	r1, #12
 8011422:	4628      	mov	r0, r5
 8011424:	f006 f99c 	bl	8017760 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011428:	e7d0      	b.n	80113cc <_ZN8touchgfx12DigitalClock11updateClockEv+0x7c>
 801142a:	2b03      	cmp	r3, #3
 801142c:	d1ce      	bne.n	80113cc <_ZN8touchgfx12DigitalClock11updateClockEv+0x7c>
 801142e:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8011432:	4a11      	ldr	r2, [pc, #68]	; (8011478 <_ZN8touchgfx12DigitalClock11updateClockEv+0x128>)
 8011434:	4d11      	ldr	r5, [pc, #68]	; (801147c <_ZN8touchgfx12DigitalClock11updateClockEv+0x12c>)
 8011436:	2b00      	cmp	r3, #0
 8011438:	bf08      	it	eq
 801143a:	4615      	moveq	r5, r2
 801143c:	f000 f8f8 	bl	8011630 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 8011440:	4606      	mov	r6, r0
 8011442:	4620      	mov	r0, r4
 8011444:	f000 f90a 	bl	801165c <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8011448:	4607      	mov	r7, r0
 801144a:	4620      	mov	r0, r4
 801144c:	f000 f909 	bl	8011662 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 8011450:	4633      	mov	r3, r6
 8011452:	e9cd 7000 	strd	r7, r0, [sp]
 8011456:	462a      	mov	r2, r5
 8011458:	210c      	movs	r1, #12
 801145a:	f104 0074 	add.w	r0, r4, #116	; 0x74
 801145e:	e79b      	b.n	8011398 <_ZN8touchgfx12DigitalClock11updateClockEv+0x48>
 8011460:	080263bf 	.word	0x080263bf
 8011464:	080263e9 	.word	0x080263e9
 8011468:	080263cb 	.word	0x080263cb
 801146c:	08026409 	.word	0x08026409
 8011470:	080263e6 	.word	0x080263e6
 8011474:	080263d3 	.word	0x080263d3
 8011478:	08026406 	.word	0x08026406
 801147c:	080263f7 	.word	0x080263f7

08011480 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8011480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011482:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8011484:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011488:	4299      	cmp	r1, r3
 801148a:	4606      	mov	r6, r0
 801148c:	d02a      	beq.n	80114e4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 801148e:	4b16      	ldr	r3, [pc, #88]	; (80114e8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	b92b      	cbnz	r3, 80114a0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 8011494:	4b15      	ldr	r3, [pc, #84]	; (80114ec <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 8011496:	4a16      	ldr	r2, [pc, #88]	; (80114f0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8011498:	21b1      	movs	r1, #177	; 0xb1
 801149a:	4816      	ldr	r0, [pc, #88]	; (80114f4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 801149c:	f012 f952 	bl	8023744 <__assert_func>
 80114a0:	4a15      	ldr	r2, [pc, #84]	; (80114f8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 80114a2:	8812      	ldrh	r2, [r2, #0]
 80114a4:	428a      	cmp	r2, r1
 80114a6:	d803      	bhi.n	80114b0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 80114a8:	4b14      	ldr	r3, [pc, #80]	; (80114fc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 80114aa:	4a11      	ldr	r2, [pc, #68]	; (80114f0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 80114ac:	21b2      	movs	r1, #178	; 0xb2
 80114ae:	e7f4      	b.n	801149a <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 80114b0:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80114b4:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80114b8:	4b11      	ldr	r3, [pc, #68]	; (8011500 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 80114ba:	7854      	ldrb	r4, [r2, #1]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80114c2:	682b      	ldr	r3, [r5, #0]
 80114c4:	69df      	ldr	r7, [r3, #28]
 80114c6:	4b0f      	ldr	r3, [pc, #60]	; (8011504 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 80114c8:	6818      	ldr	r0, [r3, #0]
 80114ca:	f7fd faa5 	bl	800ea18 <_ZNK8touchgfx5Texts7getTextEt>
 80114ce:	f3c4 0481 	ubfx	r4, r4, #2, #2
 80114d2:	2300      	movs	r3, #0
 80114d4:	9300      	str	r3, [sp, #0]
 80114d6:	4602      	mov	r2, r0
 80114d8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80114da:	4621      	mov	r1, r4
 80114dc:	4628      	mov	r0, r5
 80114de:	47b8      	blx	r7
 80114e0:	b003      	add	sp, #12
 80114e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114e4:	2000      	movs	r0, #0
 80114e6:	e7fb      	b.n	80114e0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 80114e8:	2000a08c 	.word	0x2000a08c
 80114ec:	08026413 	.word	0x08026413
 80114f0:	08026588 	.word	0x08026588
 80114f4:	08026455 	.word	0x08026455
 80114f8:	2000a090 	.word	0x2000a090
 80114fc:	0802647e 	.word	0x0802647e
 8011500:	2000a094 	.word	0x2000a094
 8011504:	2000a098 	.word	0x2000a098

08011508 <_ZNK8touchgfx12DigitalClock12getTextWidthEv>:
 8011508:	b508      	push	{r3, lr}
 801150a:	3034      	adds	r0, #52	; 0x34
 801150c:	f7ff ffb8 	bl	8011480 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>
 8011510:	bd08      	pop	{r3, pc}
	...

08011514 <_ZN8touchgfx12DigitalClockC1Ev>:
 8011514:	b510      	push	{r4, lr}
 8011516:	4604      	mov	r4, r0
 8011518:	f000 f870 	bl	80115fc <_ZN8touchgfx13AbstractClockC1Ev>
 801151c:	2201      	movs	r2, #1
 801151e:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8011522:	4a1a      	ldr	r2, [pc, #104]	; (801158c <_ZN8touchgfx12DigitalClockC1Ev+0x78>)
 8011524:	65e2      	str	r2, [r4, #92]	; 0x5c
 8011526:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801152a:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
 801152e:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8011532:	66a2      	str	r2, [r4, #104]	; 0x68
 8011534:	4b16      	ldr	r3, [pc, #88]	; (8011590 <_ZN8touchgfx12DigitalClockC1Ev+0x7c>)
 8011536:	4a17      	ldr	r2, [pc, #92]	; (8011594 <_ZN8touchgfx12DigitalClockC1Ev+0x80>)
 8011538:	6023      	str	r3, [r4, #0]
 801153a:	6362      	str	r2, [r4, #52]	; 0x34
 801153c:	2303      	movs	r3, #3
 801153e:	4622      	mov	r2, r4
 8011540:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 8011544:	2300      	movs	r3, #0
 8011546:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 801154a:	8723      	strh	r3, [r4, #56]	; 0x38
 801154c:	8763      	strh	r3, [r4, #58]	; 0x3a
 801154e:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8011550:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8011552:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8011556:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 801155a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
 801155e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8011562:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011566:	6523      	str	r3, [r4, #80]	; 0x50
 8011568:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 801156c:	6663      	str	r3, [r4, #100]	; 0x64
 801156e:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
 8011572:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 8011576:	f822 3f74 	strh.w	r3, [r2, #116]!
 801157a:	4620      	mov	r0, r4
 801157c:	6722      	str	r2, [r4, #112]	; 0x70
 801157e:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8011582:	f000 f909 	bl	8011798 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8011586:	4620      	mov	r0, r4
 8011588:	bd10      	pop	{r4, pc}
 801158a:	bf00      	nop
 801158c:	08025a04 	.word	0x08025a04
 8011590:	080264d8 	.word	0x080264d8
 8011594:	08027220 	.word	0x08027220

08011598 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>:
 8011598:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
 801159c:	4770      	bx	lr

0801159e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>:
 801159e:	b470      	push	{r4, r5, r6}
 80115a0:	2518      	movs	r5, #24
 80115a2:	fbb1 f6f5 	udiv	r6, r1, r5
 80115a6:	fb06 1115 	mls	r1, r6, r5, r1
 80115aa:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 80115ae:	213c      	movs	r1, #60	; 0x3c
 80115b0:	fbb2 f5f1 	udiv	r5, r2, r1
 80115b4:	fb05 2211 	mls	r2, r5, r1, r2
 80115b8:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
 80115bc:	fbb3 f2f1 	udiv	r2, r3, r1
 80115c0:	fb02 3311 	mls	r3, r2, r1, r3
 80115c4:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
 80115c8:	6803      	ldr	r3, [r0, #0]
 80115ca:	bc70      	pop	{r4, r5, r6}
 80115cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80115d0:	4718      	bx	r3

080115d2 <_ZN8touchgfx13AbstractClock13setTime12HourEhhhb>:
 80115d2:	b4f0      	push	{r4, r5, r6, r7}
 80115d4:	6804      	ldr	r4, [r0, #0]
 80115d6:	f89d 6010 	ldrb.w	r6, [sp, #16]
 80115da:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80115de:	2e00      	cmp	r6, #0
 80115e0:	f04f 040c 	mov.w	r4, #12
 80115e4:	fbb1 f7f4 	udiv	r7, r1, r4
 80115e8:	fb07 1114 	mls	r1, r7, r4, r1
 80115ec:	bf18      	it	ne
 80115ee:	2400      	movne	r4, #0
 80115f0:	fa54 f181 	uxtab	r1, r4, r1
 80115f4:	46ac      	mov	ip, r5
 80115f6:	b2c9      	uxtb	r1, r1
 80115f8:	bcf0      	pop	{r4, r5, r6, r7}
 80115fa:	4760      	bx	ip

080115fc <_ZN8touchgfx13AbstractClockC1Ev>:
 80115fc:	2101      	movs	r1, #1
 80115fe:	2200      	movs	r2, #0
 8011600:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8011604:	4909      	ldr	r1, [pc, #36]	; (801162c <_ZN8touchgfx13AbstractClockC1Ev+0x30>)
 8011606:	8082      	strh	r2, [r0, #4]
 8011608:	80c2      	strh	r2, [r0, #6]
 801160a:	8102      	strh	r2, [r0, #8]
 801160c:	8142      	strh	r2, [r0, #10]
 801160e:	8182      	strh	r2, [r0, #12]
 8011610:	81c2      	strh	r2, [r0, #14]
 8011612:	8202      	strh	r2, [r0, #16]
 8011614:	8242      	strh	r2, [r0, #18]
 8011616:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801161a:	61c2      	str	r2, [r0, #28]
 801161c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8011620:	6001      	str	r1, [r0, #0]
 8011622:	6282      	str	r2, [r0, #40]	; 0x28
 8011624:	8582      	strh	r2, [r0, #44]	; 0x2c
 8011626:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 801162a:	4770      	bx	lr
 801162c:	080265c0 	.word	0x080265c0

08011630 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>:
 8011630:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8011634:	4770      	bx	lr

08011636 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>:
 8011636:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801163a:	220c      	movs	r2, #12
 801163c:	f100 030b 	add.w	r3, r0, #11
 8011640:	fb93 f0f2 	sdiv	r0, r3, r2
 8011644:	fb02 3010 	mls	r0, r2, r0, r3
 8011648:	3001      	adds	r0, #1
 801164a:	b2c0      	uxtb	r0, r0
 801164c:	4770      	bx	lr

0801164e <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>:
 801164e:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8011652:	280b      	cmp	r0, #11
 8011654:	bf8c      	ite	hi
 8011656:	2000      	movhi	r0, #0
 8011658:	2001      	movls	r0, #1
 801165a:	4770      	bx	lr

0801165c <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>:
 801165c:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8011660:	4770      	bx	lr

08011662 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>:
 8011662:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 8011666:	4770      	bx	lr

08011668 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8011668:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801166a:	2000      	movs	r0, #0
 801166c:	b12b      	cbz	r3, 801167a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801166e:	b920      	cbnz	r0, 801167a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8011670:	1a5a      	subs	r2, r3, r1
 8011672:	4250      	negs	r0, r2
 8011674:	4150      	adcs	r0, r2
 8011676:	699b      	ldr	r3, [r3, #24]
 8011678:	e7f8      	b.n	801166c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801167a:	4770      	bx	lr

0801167c <_ZN8touchgfx9Container9removeAllEv>:
 801167c:	2200      	movs	r2, #0
 801167e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011680:	b123      	cbz	r3, 801168c <_ZN8touchgfx9Container9removeAllEv+0x10>
 8011682:	6999      	ldr	r1, [r3, #24]
 8011684:	6281      	str	r1, [r0, #40]	; 0x28
 8011686:	e9c3 2205 	strd	r2, r2, [r3, #20]
 801168a:	e7f8      	b.n	801167e <_ZN8touchgfx9Container9removeAllEv+0x2>
 801168c:	4770      	bx	lr

0801168e <_ZN8touchgfx9Container6unlinkEv>:
 801168e:	2300      	movs	r3, #0
 8011690:	6283      	str	r3, [r0, #40]	; 0x28
 8011692:	4770      	bx	lr

08011694 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8011694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011698:	461f      	mov	r7, r3
 801169a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801169e:	460d      	mov	r5, r1
 80116a0:	4616      	mov	r6, r2
 80116a2:	b103      	cbz	r3, 80116a6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80116a4:	6038      	str	r0, [r7, #0]
 80116a6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80116a8:	b314      	cbz	r4, 80116f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80116aa:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80116ae:	b1eb      	cbz	r3, 80116ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80116b0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80116b4:	428d      	cmp	r5, r1
 80116b6:	db19      	blt.n	80116ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80116b8:	8923      	ldrh	r3, [r4, #8]
 80116ba:	b289      	uxth	r1, r1
 80116bc:	440b      	add	r3, r1
 80116be:	b21b      	sxth	r3, r3
 80116c0:	429d      	cmp	r5, r3
 80116c2:	da13      	bge.n	80116ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80116c4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80116c8:	4296      	cmp	r6, r2
 80116ca:	db0f      	blt.n	80116ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80116cc:	8963      	ldrh	r3, [r4, #10]
 80116ce:	b292      	uxth	r2, r2
 80116d0:	4413      	add	r3, r2
 80116d2:	b21b      	sxth	r3, r3
 80116d4:	429e      	cmp	r6, r3
 80116d6:	da09      	bge.n	80116ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80116d8:	6823      	ldr	r3, [r4, #0]
 80116da:	1ab2      	subs	r2, r6, r2
 80116dc:	1a69      	subs	r1, r5, r1
 80116de:	f8d3 8020 	ldr.w	r8, [r3, #32]
 80116e2:	b212      	sxth	r2, r2
 80116e4:	463b      	mov	r3, r7
 80116e6:	b209      	sxth	r1, r1
 80116e8:	4620      	mov	r0, r4
 80116ea:	47c0      	blx	r8
 80116ec:	69a4      	ldr	r4, [r4, #24]
 80116ee:	e7db      	b.n	80116a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80116f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080116f4 <_ZNK8touchgfx9Container12getSolidRectEv>:
 80116f4:	2200      	movs	r2, #0
 80116f6:	8002      	strh	r2, [r0, #0]
 80116f8:	8042      	strh	r2, [r0, #2]
 80116fa:	8082      	strh	r2, [r0, #4]
 80116fc:	80c2      	strh	r2, [r0, #6]
 80116fe:	4770      	bx	lr

08011700 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8011700:	b570      	push	{r4, r5, r6, lr}
 8011702:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011704:	460d      	mov	r5, r1
 8011706:	4616      	mov	r6, r2
 8011708:	b13c      	cbz	r4, 801171a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801170a:	6823      	ldr	r3, [r4, #0]
 801170c:	4620      	mov	r0, r4
 801170e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011710:	4632      	mov	r2, r6
 8011712:	4629      	mov	r1, r5
 8011714:	4798      	blx	r3
 8011716:	69a4      	ldr	r4, [r4, #24]
 8011718:	e7f6      	b.n	8011708 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801171a:	bd70      	pop	{r4, r5, r6, pc}

0801171c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801171c:	b538      	push	{r3, r4, r5, lr}
 801171e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011720:	460d      	mov	r5, r1
 8011722:	b134      	cbz	r4, 8011732 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8011724:	682b      	ldr	r3, [r5, #0]
 8011726:	4621      	mov	r1, r4
 8011728:	689b      	ldr	r3, [r3, #8]
 801172a:	4628      	mov	r0, r5
 801172c:	4798      	blx	r3
 801172e:	69a4      	ldr	r4, [r4, #24]
 8011730:	e7f7      	b.n	8011722 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8011732:	bd38      	pop	{r3, r4, r5, pc}

08011734 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8011734:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011736:	b19b      	cbz	r3, 8011760 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8011738:	428b      	cmp	r3, r1
 801173a:	d109      	bne.n	8011750 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801173c:	699a      	ldr	r2, [r3, #24]
 801173e:	2100      	movs	r1, #0
 8011740:	6159      	str	r1, [r3, #20]
 8011742:	6282      	str	r2, [r0, #40]	; 0x28
 8011744:	b902      	cbnz	r2, 8011748 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8011746:	4770      	bx	lr
 8011748:	6199      	str	r1, [r3, #24]
 801174a:	4770      	bx	lr
 801174c:	4613      	mov	r3, r2
 801174e:	b13a      	cbz	r2, 8011760 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8011750:	699a      	ldr	r2, [r3, #24]
 8011752:	428a      	cmp	r2, r1
 8011754:	d1fa      	bne.n	801174c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8011756:	698a      	ldr	r2, [r1, #24]
 8011758:	619a      	str	r2, [r3, #24]
 801175a:	2300      	movs	r3, #0
 801175c:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8011760:	4770      	bx	lr

08011762 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8011762:	b410      	push	{r4}
 8011764:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011766:	4604      	mov	r4, r0
 8011768:	b92b      	cbnz	r3, 8011776 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801176a:	6803      	ldr	r3, [r0, #0]
 801176c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011772:	4611      	mov	r1, r2
 8011774:	4718      	bx	r3
 8011776:	b941      	cbnz	r1, 801178a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8011778:	6193      	str	r3, [r2, #24]
 801177a:	6282      	str	r2, [r0, #40]	; 0x28
 801177c:	6154      	str	r4, [r2, #20]
 801177e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011782:	4770      	bx	lr
 8011784:	4603      	mov	r3, r0
 8011786:	2800      	cmp	r0, #0
 8011788:	d0f9      	beq.n	801177e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 801178a:	4299      	cmp	r1, r3
 801178c:	6998      	ldr	r0, [r3, #24]
 801178e:	d1f9      	bne.n	8011784 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8011790:	6190      	str	r0, [r2, #24]
 8011792:	618a      	str	r2, [r1, #24]
 8011794:	e7f2      	b.n	801177c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08011798 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8011798:	4288      	cmp	r0, r1
 801179a:	b508      	push	{r3, lr}
 801179c:	d105      	bne.n	80117aa <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 801179e:	4b11      	ldr	r3, [pc, #68]	; (80117e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 80117a0:	4a11      	ldr	r2, [pc, #68]	; (80117e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80117a2:	2123      	movs	r1, #35	; 0x23
 80117a4:	4811      	ldr	r0, [pc, #68]	; (80117ec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 80117a6:	f011 ffcd 	bl	8023744 <__assert_func>
 80117aa:	694b      	ldr	r3, [r1, #20]
 80117ac:	b11b      	cbz	r3, 80117b6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 80117ae:	4b10      	ldr	r3, [pc, #64]	; (80117f0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 80117b0:	4a0d      	ldr	r2, [pc, #52]	; (80117e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80117b2:	2124      	movs	r1, #36	; 0x24
 80117b4:	e7f6      	b.n	80117a4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80117b6:	e9c1 0305 	strd	r0, r3, [r1, #20]
 80117ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80117bc:	b913      	cbnz	r3, 80117c4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 80117be:	6281      	str	r1, [r0, #40]	; 0x28
 80117c0:	bd08      	pop	{r3, pc}
 80117c2:	4613      	mov	r3, r2
 80117c4:	699a      	ldr	r2, [r3, #24]
 80117c6:	b12a      	cbz	r2, 80117d4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 80117c8:	428b      	cmp	r3, r1
 80117ca:	d1fa      	bne.n	80117c2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 80117cc:	4b09      	ldr	r3, [pc, #36]	; (80117f4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80117ce:	4a06      	ldr	r2, [pc, #24]	; (80117e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80117d0:	2135      	movs	r1, #53	; 0x35
 80117d2:	e7e7      	b.n	80117a4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80117d4:	428b      	cmp	r3, r1
 80117d6:	d103      	bne.n	80117e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 80117d8:	4b06      	ldr	r3, [pc, #24]	; (80117f4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80117da:	4a03      	ldr	r2, [pc, #12]	; (80117e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80117dc:	2138      	movs	r1, #56	; 0x38
 80117de:	e7e1      	b.n	80117a4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80117e0:	6199      	str	r1, [r3, #24]
 80117e2:	e7ed      	b.n	80117c0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 80117e4:	0802664c 	.word	0x0802664c
 80117e8:	0802679c 	.word	0x0802679c
 80117ec:	08026678 	.word	0x08026678
 80117f0:	080266ab 	.word	0x080266ab
 80117f4:	080266e1 	.word	0x080266e1

080117f8 <_ZN8touchgfx4RectaNERKS0_>:
 80117f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80117fc:	f9b1 7000 	ldrsh.w	r7, [r1]
 8011800:	888c      	ldrh	r4, [r1, #4]
 8011802:	f9b0 9000 	ldrsh.w	r9, [r0]
 8011806:	443c      	add	r4, r7
 8011808:	b2a4      	uxth	r4, r4
 801180a:	fa0f f884 	sxth.w	r8, r4
 801180e:	45c1      	cmp	r9, r8
 8011810:	da2f      	bge.n	8011872 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011812:	8882      	ldrh	r2, [r0, #4]
 8011814:	444a      	add	r2, r9
 8011816:	b292      	uxth	r2, r2
 8011818:	fa0f fe82 	sxth.w	lr, r2
 801181c:	4577      	cmp	r7, lr
 801181e:	da28      	bge.n	8011872 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011820:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8011824:	88cb      	ldrh	r3, [r1, #6]
 8011826:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801182a:	442b      	add	r3, r5
 801182c:	b21b      	sxth	r3, r3
 801182e:	429e      	cmp	r6, r3
 8011830:	da1f      	bge.n	8011872 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011832:	88c3      	ldrh	r3, [r0, #6]
 8011834:	4433      	add	r3, r6
 8011836:	b29b      	uxth	r3, r3
 8011838:	fa0f fc83 	sxth.w	ip, r3
 801183c:	4565      	cmp	r5, ip
 801183e:	da18      	bge.n	8011872 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011840:	454f      	cmp	r7, r9
 8011842:	bfb8      	it	lt
 8011844:	464f      	movlt	r7, r9
 8011846:	42b5      	cmp	r5, r6
 8011848:	bfb8      	it	lt
 801184a:	4635      	movlt	r5, r6
 801184c:	45f0      	cmp	r8, lr
 801184e:	bfd8      	it	le
 8011850:	4622      	movle	r2, r4
 8011852:	1bd2      	subs	r2, r2, r7
 8011854:	8082      	strh	r2, [r0, #4]
 8011856:	884a      	ldrh	r2, [r1, #2]
 8011858:	88c9      	ldrh	r1, [r1, #6]
 801185a:	8007      	strh	r7, [r0, #0]
 801185c:	440a      	add	r2, r1
 801185e:	b292      	uxth	r2, r2
 8011860:	b211      	sxth	r1, r2
 8011862:	458c      	cmp	ip, r1
 8011864:	bfa8      	it	ge
 8011866:	4613      	movge	r3, r2
 8011868:	1b5b      	subs	r3, r3, r5
 801186a:	80c3      	strh	r3, [r0, #6]
 801186c:	8045      	strh	r5, [r0, #2]
 801186e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011872:	2300      	movs	r3, #0
 8011874:	8003      	strh	r3, [r0, #0]
 8011876:	8043      	strh	r3, [r0, #2]
 8011878:	8083      	strh	r3, [r0, #4]
 801187a:	80c3      	strh	r3, [r0, #6]
 801187c:	e7f7      	b.n	801186e <_ZN8touchgfx4RectaNERKS0_+0x76>

0801187e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801187e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011882:	2b00      	cmp	r3, #0
 8011884:	dd06      	ble.n	8011894 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8011886:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801188a:	2800      	cmp	r0, #0
 801188c:	bfcc      	ite	gt
 801188e:	2000      	movgt	r0, #0
 8011890:	2001      	movle	r0, #1
 8011892:	4770      	bx	lr
 8011894:	2001      	movs	r0, #1
 8011896:	4770      	bx	lr

08011898 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8011898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801189c:	2300      	movs	r3, #0
 801189e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80118a0:	8003      	strh	r3, [r0, #0]
 80118a2:	4604      	mov	r4, r0
 80118a4:	8043      	strh	r3, [r0, #2]
 80118a6:	8083      	strh	r3, [r0, #4]
 80118a8:	80c3      	strh	r3, [r0, #6]
 80118aa:	2d00      	cmp	r5, #0
 80118ac:	d040      	beq.n	8011930 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80118ae:	1d28      	adds	r0, r5, #4
 80118b0:	f7ff ffe5 	bl	801187e <_ZNK8touchgfx4Rect7isEmptyEv>
 80118b4:	b988      	cbnz	r0, 80118da <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80118b6:	4620      	mov	r0, r4
 80118b8:	f7ff ffe1 	bl	801187e <_ZNK8touchgfx4Rect7isEmptyEv>
 80118bc:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80118c0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80118c4:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80118c8:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80118cc:	b138      	cbz	r0, 80118de <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80118ce:	8022      	strh	r2, [r4, #0]
 80118d0:	8063      	strh	r3, [r4, #2]
 80118d2:	f8a4 e004 	strh.w	lr, [r4, #4]
 80118d6:	f8a4 c006 	strh.w	ip, [r4, #6]
 80118da:	69ad      	ldr	r5, [r5, #24]
 80118dc:	e7e5      	b.n	80118aa <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80118de:	f9b4 0000 	ldrsh.w	r0, [r4]
 80118e2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80118e6:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80118ea:	4290      	cmp	r0, r2
 80118ec:	4607      	mov	r7, r0
 80118ee:	bfa8      	it	ge
 80118f0:	4617      	movge	r7, r2
 80118f2:	4472      	add	r2, lr
 80118f4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80118f8:	8027      	strh	r7, [r4, #0]
 80118fa:	4299      	cmp	r1, r3
 80118fc:	460e      	mov	r6, r1
 80118fe:	4440      	add	r0, r8
 8011900:	bfa8      	it	ge
 8011902:	461e      	movge	r6, r3
 8011904:	4471      	add	r1, lr
 8011906:	4463      	add	r3, ip
 8011908:	b200      	sxth	r0, r0
 801190a:	b212      	sxth	r2, r2
 801190c:	b209      	sxth	r1, r1
 801190e:	b21b      	sxth	r3, r3
 8011910:	4290      	cmp	r0, r2
 8011912:	bfac      	ite	ge
 8011914:	ebc7 0200 	rsbge	r2, r7, r0
 8011918:	ebc7 0202 	rsblt	r2, r7, r2
 801191c:	4299      	cmp	r1, r3
 801191e:	bfac      	ite	ge
 8011920:	ebc6 0301 	rsbge	r3, r6, r1
 8011924:	ebc6 0303 	rsblt	r3, r6, r3
 8011928:	8066      	strh	r6, [r4, #2]
 801192a:	80a2      	strh	r2, [r4, #4]
 801192c:	80e3      	strh	r3, [r4, #6]
 801192e:	e7d4      	b.n	80118da <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8011930:	4620      	mov	r0, r4
 8011932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011936 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8011936:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801193a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801193e:	b383      	cbz	r3, 80119a2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8011940:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011942:	b374      	cbz	r4, 80119a2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8011944:	f9b1 5000 	ldrsh.w	r5, [r1]
 8011948:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801194c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8011950:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8011954:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8011958:	b303      	cbz	r3, 801199c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801195a:	4668      	mov	r0, sp
 801195c:	1d21      	adds	r1, r4, #4
 801195e:	f8ad 5000 	strh.w	r5, [sp]
 8011962:	f8ad 6002 	strh.w	r6, [sp, #2]
 8011966:	f8ad 7004 	strh.w	r7, [sp, #4]
 801196a:	f8ad 8006 	strh.w	r8, [sp, #6]
 801196e:	f7ff ff43 	bl	80117f8 <_ZN8touchgfx4RectaNERKS0_>
 8011972:	4668      	mov	r0, sp
 8011974:	f7ff ff83 	bl	801187e <_ZNK8touchgfx4Rect7isEmptyEv>
 8011978:	b980      	cbnz	r0, 801199c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801197a:	f8bd 3000 	ldrh.w	r3, [sp]
 801197e:	88a2      	ldrh	r2, [r4, #4]
 8011980:	1a9b      	subs	r3, r3, r2
 8011982:	f8ad 3000 	strh.w	r3, [sp]
 8011986:	88e2      	ldrh	r2, [r4, #6]
 8011988:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801198c:	1a9b      	subs	r3, r3, r2
 801198e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011992:	6823      	ldr	r3, [r4, #0]
 8011994:	4669      	mov	r1, sp
 8011996:	689b      	ldr	r3, [r3, #8]
 8011998:	4620      	mov	r0, r4
 801199a:	4798      	blx	r3
 801199c:	69a4      	ldr	r4, [r4, #24]
 801199e:	2c00      	cmp	r4, #0
 80119a0:	d1d8      	bne.n	8011954 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80119a2:	b002      	add	sp, #8
 80119a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080119a8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80119a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80119aa:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80119ae:	460d      	mov	r5, r1
 80119b0:	4616      	mov	r6, r2
 80119b2:	b323      	cbz	r3, 80119fe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80119b4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80119b6:	b314      	cbz	r4, 80119fe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80119b8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80119bc:	b1eb      	cbz	r3, 80119fa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80119be:	6828      	ldr	r0, [r5, #0]
 80119c0:	6869      	ldr	r1, [r5, #4]
 80119c2:	466b      	mov	r3, sp
 80119c4:	c303      	stmia	r3!, {r0, r1}
 80119c6:	4668      	mov	r0, sp
 80119c8:	1d21      	adds	r1, r4, #4
 80119ca:	f7ff ff15 	bl	80117f8 <_ZN8touchgfx4RectaNERKS0_>
 80119ce:	4668      	mov	r0, sp
 80119d0:	f7ff ff55 	bl	801187e <_ZNK8touchgfx4Rect7isEmptyEv>
 80119d4:	b988      	cbnz	r0, 80119fa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80119d6:	f8bd 3000 	ldrh.w	r3, [sp]
 80119da:	88a2      	ldrh	r2, [r4, #4]
 80119dc:	1a9b      	subs	r3, r3, r2
 80119de:	f8ad 3000 	strh.w	r3, [sp]
 80119e2:	88e2      	ldrh	r2, [r4, #6]
 80119e4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80119e8:	1a9b      	subs	r3, r3, r2
 80119ea:	f8ad 3002 	strh.w	r3, [sp, #2]
 80119ee:	6823      	ldr	r3, [r4, #0]
 80119f0:	4632      	mov	r2, r6
 80119f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80119f4:	4669      	mov	r1, sp
 80119f6:	4620      	mov	r0, r4
 80119f8:	4798      	blx	r3
 80119fa:	69a4      	ldr	r4, [r4, #24]
 80119fc:	e7db      	b.n	80119b6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80119fe:	b002      	add	sp, #8
 8011a00:	bd70      	pop	{r4, r5, r6, pc}

08011a02 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8011a02:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011a06:	4770      	bx	lr

08011a08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8011a08:	b513      	push	{r0, r1, r4, lr}
 8011a0a:	6803      	ldr	r3, [r0, #0]
 8011a0c:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8011a10:	2300      	movs	r3, #0
 8011a12:	e9cd 3300 	strd	r3, r3, [sp]
 8011a16:	466b      	mov	r3, sp
 8011a18:	47a0      	blx	r4
 8011a1a:	b002      	add	sp, #8
 8011a1c:	bd10      	pop	{r4, pc}

08011a1e <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8011a1e:	2301      	movs	r3, #1
 8011a20:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8011a24:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8011a28:	4770      	bx	lr

08011a2a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8011a2a:	2301      	movs	r3, #1
 8011a2c:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8011a30:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8011a34:	4770      	bx	lr

08011a36 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8011a36:	6843      	ldr	r3, [r0, #4]
 8011a38:	2201      	movs	r2, #1
 8011a3a:	725a      	strb	r2, [r3, #9]
 8011a3c:	6840      	ldr	r0, [r0, #4]
 8011a3e:	6803      	ldr	r3, [r0, #0]
 8011a40:	691b      	ldr	r3, [r3, #16]
 8011a42:	4718      	bx	r3

08011a44 <_ZN8touchgfx3HAL8flushDMAEv>:
 8011a44:	6840      	ldr	r0, [r0, #4]
 8011a46:	6803      	ldr	r3, [r0, #0]
 8011a48:	689b      	ldr	r3, [r3, #8]
 8011a4a:	4718      	bx	r3

08011a4c <_ZN8touchgfx3HAL10beginFrameEv>:
 8011a4c:	4b04      	ldr	r3, [pc, #16]	; (8011a60 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8011a4e:	781b      	ldrb	r3, [r3, #0]
 8011a50:	b123      	cbz	r3, 8011a5c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8011a52:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8011a56:	f080 0001 	eor.w	r0, r0, #1
 8011a5a:	4770      	bx	lr
 8011a5c:	2001      	movs	r0, #1
 8011a5e:	4770      	bx	lr
 8011a60:	2000a03a 	.word	0x2000a03a

08011a64 <_ZN8touchgfx3HAL8endFrameEv>:
 8011a64:	b510      	push	{r4, lr}
 8011a66:	4604      	mov	r4, r0
 8011a68:	6840      	ldr	r0, [r0, #4]
 8011a6a:	6803      	ldr	r3, [r0, #0]
 8011a6c:	689b      	ldr	r3, [r3, #8]
 8011a6e:	4798      	blx	r3
 8011a70:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8011a74:	b113      	cbz	r3, 8011a7c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8011a76:	2301      	movs	r3, #1
 8011a78:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8011a7c:	bd10      	pop	{r4, pc}

08011a7e <_ZN8touchgfx3HAL9taskEntryEv>:
 8011a7e:	b508      	push	{r3, lr}
 8011a80:	6803      	ldr	r3, [r0, #0]
 8011a82:	4604      	mov	r4, r0
 8011a84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011a86:	4798      	blx	r3
 8011a88:	6823      	ldr	r3, [r4, #0]
 8011a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011a8c:	4620      	mov	r0, r4
 8011a8e:	4798      	blx	r3
 8011a90:	f7fd ffec 	bl	800fa6c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8011a94:	6823      	ldr	r3, [r4, #0]
 8011a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a98:	e7f8      	b.n	8011a8c <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08011a9c <_ZN8touchgfx3HAL4tickEv>:
 8011a9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011a9e:	6803      	ldr	r3, [r0, #0]
 8011aa0:	4d5c      	ldr	r5, [pc, #368]	; (8011c14 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8011aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011aa6:	4604      	mov	r4, r0
 8011aa8:	4798      	blx	r3
 8011aaa:	2800      	cmp	r0, #0
 8011aac:	f000 8097 	beq.w	8011bde <_ZN8touchgfx3HAL4tickEv+0x142>
 8011ab0:	2001      	movs	r0, #1
 8011ab2:	f7fd fd11 	bl	800f4d8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8011ab6:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8011aba:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8011abe:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8011ac2:	2600      	movs	r6, #0
 8011ac4:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8011ac8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8011acc:	b133      	cbz	r3, 8011adc <_ZN8touchgfx3HAL4tickEv+0x40>
 8011ace:	6823      	ldr	r3, [r4, #0]
 8011ad0:	4620      	mov	r0, r4
 8011ad2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011ad6:	4798      	blx	r3
 8011ad8:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8011adc:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8011ae0:	6862      	ldr	r2, [r4, #4]
 8011ae2:	f083 0301 	eor.w	r3, r3, #1
 8011ae6:	7253      	strb	r3, [r2, #9]
 8011ae8:	2601      	movs	r6, #1
 8011aea:	702e      	strb	r6, [r5, #0]
 8011aec:	f002 ff0e 	bl	801490c <_ZN8touchgfx11Application11getInstanceEv>
 8011af0:	6803      	ldr	r3, [r0, #0]
 8011af2:	4631      	mov	r1, r6
 8011af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011af6:	4798      	blx	r3
 8011af8:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8011afc:	b90b      	cbnz	r3, 8011b02 <_ZN8touchgfx3HAL4tickEv+0x66>
 8011afe:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8011b02:	f002 ff03 	bl	801490c <_ZN8touchgfx11Application11getInstanceEv>
 8011b06:	6803      	ldr	r3, [r0, #0]
 8011b08:	695b      	ldr	r3, [r3, #20]
 8011b0a:	4798      	blx	r3
 8011b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b0e:	6803      	ldr	r3, [r0, #0]
 8011b10:	691b      	ldr	r3, [r3, #16]
 8011b12:	4798      	blx	r3
 8011b14:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8011b18:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8011b1c:	3b01      	subs	r3, #1
 8011b1e:	b2db      	uxtb	r3, r3
 8011b20:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8011b24:	b10a      	cbz	r2, 8011b2a <_ZN8touchgfx3HAL4tickEv+0x8e>
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d1eb      	bne.n	8011b02 <_ZN8touchgfx3HAL4tickEv+0x66>
 8011b2a:	4a3b      	ldr	r2, [pc, #236]	; (8011c18 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8011b2c:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8011b30:	7813      	ldrb	r3, [r2, #0]
 8011b32:	3301      	adds	r3, #1
 8011b34:	b25b      	sxtb	r3, r3
 8011b36:	4299      	cmp	r1, r3
 8011b38:	7013      	strb	r3, [r2, #0]
 8011b3a:	dc10      	bgt.n	8011b5e <_ZN8touchgfx3HAL4tickEv+0xc2>
 8011b3c:	68e0      	ldr	r0, [r4, #12]
 8011b3e:	2300      	movs	r3, #0
 8011b40:	7013      	strb	r3, [r2, #0]
 8011b42:	6803      	ldr	r3, [r0, #0]
 8011b44:	aa03      	add	r2, sp, #12
 8011b46:	68db      	ldr	r3, [r3, #12]
 8011b48:	a902      	add	r1, sp, #8
 8011b4a:	4798      	blx	r3
 8011b4c:	6823      	ldr	r3, [r4, #0]
 8011b4e:	2800      	cmp	r0, #0
 8011b50:	d051      	beq.n	8011bf6 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8011b52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011b56:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8011b5a:	4620      	mov	r0, r4
 8011b5c:	4798      	blx	r3
 8011b5e:	6960      	ldr	r0, [r4, #20]
 8011b60:	2300      	movs	r3, #0
 8011b62:	f88d 3007 	strb.w	r3, [sp, #7]
 8011b66:	b158      	cbz	r0, 8011b80 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8011b68:	6803      	ldr	r3, [r0, #0]
 8011b6a:	f10d 0107 	add.w	r1, sp, #7
 8011b6e:	68db      	ldr	r3, [r3, #12]
 8011b70:	4798      	blx	r3
 8011b72:	b128      	cbz	r0, 8011b80 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8011b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b76:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011b7a:	6803      	ldr	r3, [r0, #0]
 8011b7c:	68db      	ldr	r3, [r3, #12]
 8011b7e:	4798      	blx	r3
 8011b80:	f104 001c 	add.w	r0, r4, #28
 8011b84:	f011 fbfa 	bl	802337c <_ZN8touchgfx8Gestures4tickEv>
 8011b88:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8011b8c:	b30b      	cbz	r3, 8011bd2 <_ZN8touchgfx3HAL4tickEv+0x136>
 8011b8e:	6920      	ldr	r0, [r4, #16]
 8011b90:	6803      	ldr	r3, [r0, #0]
 8011b92:	691b      	ldr	r3, [r3, #16]
 8011b94:	4798      	blx	r3
 8011b96:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011b98:	4606      	mov	r6, r0
 8011b9a:	b903      	cbnz	r3, 8011b9e <_ZN8touchgfx3HAL4tickEv+0x102>
 8011b9c:	6720      	str	r0, [r4, #112]	; 0x70
 8011b9e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011ba0:	4a1e      	ldr	r2, [pc, #120]	; (8011c1c <_ZN8touchgfx3HAL4tickEv+0x180>)
 8011ba2:	1af3      	subs	r3, r6, r3
 8011ba4:	4293      	cmp	r3, r2
 8011ba6:	d914      	bls.n	8011bd2 <_ZN8touchgfx3HAL4tickEv+0x136>
 8011ba8:	6920      	ldr	r0, [r4, #16]
 8011baa:	6803      	ldr	r3, [r0, #0]
 8011bac:	699b      	ldr	r3, [r3, #24]
 8011bae:	4798      	blx	r3
 8011bb0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011bb2:	2264      	movs	r2, #100	; 0x64
 8011bb4:	1af3      	subs	r3, r6, r3
 8011bb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8011bba:	fbb0 f0f3 	udiv	r0, r0, r3
 8011bbe:	2800      	cmp	r0, #0
 8011bc0:	dc1e      	bgt.n	8011c00 <_ZN8touchgfx3HAL4tickEv+0x164>
 8011bc2:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8011bc6:	6920      	ldr	r0, [r4, #16]
 8011bc8:	6803      	ldr	r3, [r0, #0]
 8011bca:	2100      	movs	r1, #0
 8011bcc:	69db      	ldr	r3, [r3, #28]
 8011bce:	4798      	blx	r3
 8011bd0:	6726      	str	r6, [r4, #112]	; 0x70
 8011bd2:	f002 fe9b 	bl	801490c <_ZN8touchgfx11Application11getInstanceEv>
 8011bd6:	6803      	ldr	r3, [r0, #0]
 8011bd8:	2100      	movs	r1, #0
 8011bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bdc:	4798      	blx	r3
 8011bde:	6823      	ldr	r3, [r4, #0]
 8011be0:	4620      	mov	r0, r4
 8011be2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011be6:	4798      	blx	r3
 8011be8:	2001      	movs	r0, #1
 8011bea:	f7fd fc80 	bl	800f4ee <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8011bee:	2300      	movs	r3, #0
 8011bf0:	702b      	strb	r3, [r5, #0]
 8011bf2:	b004      	add	sp, #16
 8011bf4:	bd70      	pop	{r4, r5, r6, pc}
 8011bf6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011bfa:	4620      	mov	r0, r4
 8011bfc:	4798      	blx	r3
 8011bfe:	e7ae      	b.n	8011b5e <_ZN8touchgfx3HAL4tickEv+0xc2>
 8011c00:	2863      	cmp	r0, #99	; 0x63
 8011c02:	bfcb      	itete	gt
 8011c04:	2300      	movgt	r3, #0
 8011c06:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8011c0a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8011c0e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8011c12:	e7d8      	b.n	8011bc6 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8011c14:	2000a040 	.word	0x2000a040
 8011c18:	2000a041 	.word	0x2000a041
 8011c1c:	05f5e100 	.word	0x05f5e100

08011c20 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8011c20:	f7fd bef4 	b.w	800fa0c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08011c24 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8011c24:	6581      	str	r1, [r0, #88]	; 0x58
 8011c26:	301c      	adds	r0, #28
 8011c28:	f011 bba6 	b.w	8023378 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08011c2c <_ZN8touchgfx3HAL5touchEll>:
 8011c2c:	b530      	push	{r4, r5, lr}
 8011c2e:	b087      	sub	sp, #28
 8011c30:	4604      	mov	r4, r0
 8011c32:	a804      	add	r0, sp, #16
 8011c34:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8011c38:	f002 fc32 	bl	80144a0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8011c3c:	9b04      	ldr	r3, [sp, #16]
 8011c3e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011c42:	a906      	add	r1, sp, #24
 8011c44:	9b05      	ldr	r3, [sp, #20]
 8011c46:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8011c4a:	a803      	add	r0, sp, #12
 8011c4c:	f002 fc66 	bl	801451c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8011c50:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8011c54:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8011c58:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8011c5c:	f104 001c 	add.w	r0, r4, #28
 8011c60:	b189      	cbz	r1, 8011c86 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8011c62:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8011c66:	9300      	str	r3, [sp, #0]
 8011c68:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8011c6c:	4613      	mov	r3, r2
 8011c6e:	462a      	mov	r2, r5
 8011c70:	f011 fb92 	bl	8023398 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8011c74:	b128      	cbz	r0, 8011c82 <_ZN8touchgfx3HAL5touchEll+0x56>
 8011c76:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8011c7a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8011c7c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8011c80:	6623      	str	r3, [r4, #96]	; 0x60
 8011c82:	b007      	add	sp, #28
 8011c84:	bd30      	pop	{r4, r5, pc}
 8011c86:	f011 fbcb 	bl	8023420 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8011c8a:	2301      	movs	r3, #1
 8011c8c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8011c90:	e7f1      	b.n	8011c76 <_ZN8touchgfx3HAL5touchEll+0x4a>

08011c92 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8011c92:	b570      	push	{r4, r5, r6, lr}
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d050      	beq.n	8011d3a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8011c98:	ea81 0002 	eor.w	r0, r1, r2
 8011c9c:	07c6      	lsls	r6, r0, #31
 8011c9e:	d508      	bpl.n	8011cb2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8011ca0:	3a01      	subs	r2, #1
 8011ca2:	18cc      	adds	r4, r1, r3
 8011ca4:	42a1      	cmp	r1, r4
 8011ca6:	d048      	beq.n	8011d3a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8011ca8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8011cac:	f801 0b01 	strb.w	r0, [r1], #1
 8011cb0:	e7f8      	b.n	8011ca4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8011cb2:	07d5      	lsls	r5, r2, #31
 8011cb4:	bf42      	ittt	mi
 8011cb6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8011cba:	f801 0b01 	strbmi.w	r0, [r1], #1
 8011cbe:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8011cc2:	2b01      	cmp	r3, #1
 8011cc4:	d915      	bls.n	8011cf2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8011cc6:	ea82 0001 	eor.w	r0, r2, r1
 8011cca:	0784      	lsls	r4, r0, #30
 8011ccc:	d02d      	beq.n	8011d2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8011cce:	1e94      	subs	r4, r2, #2
 8011cd0:	4608      	mov	r0, r1
 8011cd2:	18ce      	adds	r6, r1, r3
 8011cd4:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8011cd8:	f820 5b02 	strh.w	r5, [r0], #2
 8011cdc:	1a35      	subs	r5, r6, r0
 8011cde:	2d01      	cmp	r5, #1
 8011ce0:	d8f8      	bhi.n	8011cd4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8011ce2:	1e98      	subs	r0, r3, #2
 8011ce4:	f020 0001 	bic.w	r0, r0, #1
 8011ce8:	3002      	adds	r0, #2
 8011cea:	4401      	add	r1, r0
 8011cec:	4402      	add	r2, r0
 8011cee:	f003 0301 	and.w	r3, r3, #1
 8011cf2:	1f14      	subs	r4, r2, #4
 8011cf4:	4608      	mov	r0, r1
 8011cf6:	18ce      	adds	r6, r1, r3
 8011cf8:	1a35      	subs	r5, r6, r0
 8011cfa:	2d03      	cmp	r5, #3
 8011cfc:	d810      	bhi.n	8011d20 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8011cfe:	089c      	lsrs	r4, r3, #2
 8011d00:	00a0      	lsls	r0, r4, #2
 8011d02:	4401      	add	r1, r0
 8011d04:	3801      	subs	r0, #1
 8011d06:	4402      	add	r2, r0
 8011d08:	f06f 0003 	mvn.w	r0, #3
 8011d0c:	fb00 3404 	mla	r4, r0, r4, r3
 8011d10:	440c      	add	r4, r1
 8011d12:	42a1      	cmp	r1, r4
 8011d14:	d011      	beq.n	8011d3a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8011d16:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8011d1a:	f801 3b01 	strb.w	r3, [r1], #1
 8011d1e:	e7f8      	b.n	8011d12 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8011d20:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8011d24:	f840 5b04 	str.w	r5, [r0], #4
 8011d28:	e7e6      	b.n	8011cf8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8011d2a:	0790      	lsls	r0, r2, #30
 8011d2c:	d0e1      	beq.n	8011cf2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8011d2e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8011d32:	f821 0b02 	strh.w	r0, [r1], #2
 8011d36:	3b02      	subs	r3, #2
 8011d38:	e7db      	b.n	8011cf2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8011d3a:	2001      	movs	r0, #1
 8011d3c:	bd70      	pop	{r4, r5, r6, pc}

08011d3e <_ZN8touchgfx3HAL7noTouchEv>:
 8011d3e:	b510      	push	{r4, lr}
 8011d40:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8011d44:	4604      	mov	r4, r0
 8011d46:	b153      	cbz	r3, 8011d5e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8011d48:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8011d4c:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8011d50:	2101      	movs	r1, #1
 8011d52:	301c      	adds	r0, #28
 8011d54:	f011 fb64 	bl	8023420 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8011d58:	2300      	movs	r3, #0
 8011d5a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8011d5e:	bd10      	pop	{r4, pc}

08011d60 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8011d60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d64:	4604      	mov	r4, r0
 8011d66:	6980      	ldr	r0, [r0, #24]
 8011d68:	b085      	sub	sp, #20
 8011d6a:	460f      	mov	r7, r1
 8011d6c:	4690      	mov	r8, r2
 8011d6e:	4699      	mov	r9, r3
 8011d70:	b930      	cbnz	r0, 8011d80 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8011d72:	4b1c      	ldr	r3, [pc, #112]	; (8011de4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8011d74:	4a1c      	ldr	r2, [pc, #112]	; (8011de8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8011d76:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8011d7a:	481c      	ldr	r0, [pc, #112]	; (8011dec <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8011d7c:	f011 fce2 	bl	8023744 <__assert_func>
 8011d80:	ad04      	add	r5, sp, #16
 8011d82:	2600      	movs	r6, #0
 8011d84:	f845 6d04 	str.w	r6, [r5, #-4]!
 8011d88:	6806      	ldr	r6, [r0, #0]
 8011d8a:	9501      	str	r5, [sp, #4]
 8011d8c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8011d90:	9500      	str	r5, [sp, #0]
 8011d92:	6835      	ldr	r5, [r6, #0]
 8011d94:	47a8      	blx	r5
 8011d96:	4d16      	ldr	r5, [pc, #88]	; (8011df0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8011d98:	4606      	mov	r6, r0
 8011d9a:	f8a5 9000 	strh.w	r9, [r5]
 8011d9e:	f7fa fec5 	bl	800cb2c <_ZN8touchgfx3HAL3lcdEv>
 8011da2:	6803      	ldr	r3, [r0, #0]
 8011da4:	6a1b      	ldr	r3, [r3, #32]
 8011da6:	4798      	blx	r3
 8011da8:	2801      	cmp	r0, #1
 8011daa:	d012      	beq.n	8011dd2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8011dac:	d306      	bcc.n	8011dbc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 8011dae:	280d      	cmp	r0, #13
 8011db0:	d80b      	bhi.n	8011dca <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8011db2:	4b10      	ldr	r3, [pc, #64]	; (8011df4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8011db4:	4a0c      	ldr	r2, [pc, #48]	; (8011de8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8011db6:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8011dba:	e7de      	b.n	8011d7a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8011dbc:	882b      	ldrh	r3, [r5, #0]
 8011dbe:	fb08 7203 	mla	r2, r8, r3, r7
 8011dc2:	9b03      	ldr	r3, [sp, #12]
 8011dc4:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8011dc8:	63e3      	str	r3, [r4, #60]	; 0x3c
 8011dca:	4630      	mov	r0, r6
 8011dcc:	b005      	add	sp, #20
 8011dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011dd2:	882a      	ldrh	r2, [r5, #0]
 8011dd4:	9b03      	ldr	r3, [sp, #12]
 8011dd6:	fb08 7202 	mla	r2, r8, r2, r7
 8011dda:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011dde:	1a9a      	subs	r2, r3, r2
 8011de0:	63e2      	str	r2, [r4, #60]	; 0x3c
 8011de2:	e7f2      	b.n	8011dca <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8011de4:	08026845 	.word	0x08026845
 8011de8:	08026b5e 	.word	0x08026b5e
 8011dec:	0802688a 	.word	0x0802688a
 8011df0:	2000a036 	.word	0x2000a036
 8011df4:	080268b0 	.word	0x080268b0

08011df8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8011df8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011dfc:	4698      	mov	r8, r3
 8011dfe:	6803      	ldr	r3, [r0, #0]
 8011e00:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8011e02:	4b0f      	ldr	r3, [pc, #60]	; (8011e40 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8011e04:	b087      	sub	sp, #28
 8011e06:	f8b3 9000 	ldrh.w	r9, [r3]
 8011e0a:	460e      	mov	r6, r1
 8011e0c:	4617      	mov	r7, r2
 8011e0e:	4604      	mov	r4, r0
 8011e10:	f7fa fe8c 	bl	800cb2c <_ZN8touchgfx3HAL3lcdEv>
 8011e14:	6803      	ldr	r3, [r0, #0]
 8011e16:	6a1b      	ldr	r3, [r3, #32]
 8011e18:	4798      	blx	r3
 8011e1a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8011e1e:	9302      	str	r3, [sp, #8]
 8011e20:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8011e24:	9301      	str	r3, [sp, #4]
 8011e26:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8011e2a:	9300      	str	r3, [sp, #0]
 8011e2c:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8011e30:	4643      	mov	r3, r8
 8011e32:	463a      	mov	r2, r7
 8011e34:	4631      	mov	r1, r6
 8011e36:	4620      	mov	r0, r4
 8011e38:	47a8      	blx	r5
 8011e3a:	b007      	add	sp, #28
 8011e3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e40:	2000a036 	.word	0x2000a036

08011e44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8011e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e48:	4604      	mov	r4, r0
 8011e4a:	b08b      	sub	sp, #44	; 0x2c
 8011e4c:	4610      	mov	r0, r2
 8011e4e:	460d      	mov	r5, r1
 8011e50:	4691      	mov	r9, r2
 8011e52:	461e      	mov	r6, r3
 8011e54:	f005 fcaa 	bl	80177ac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8011e58:	2800      	cmp	r0, #0
 8011e5a:	f000 80a0 	beq.w	8011f9e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8011e5e:	6823      	ldr	r3, [r4, #0]
 8011e60:	f8df b170 	ldr.w	fp, [pc, #368]	; 8011fd4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>
 8011e64:	6a1b      	ldr	r3, [r3, #32]
 8011e66:	f8df a170 	ldr.w	sl, [pc, #368]	; 8011fd8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>
 8011e6a:	4620      	mov	r0, r4
 8011e6c:	4798      	blx	r3
 8011e6e:	6823      	ldr	r3, [r4, #0]
 8011e70:	4620      	mov	r0, r4
 8011e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e74:	4798      	blx	r3
 8011e76:	f8bb 3000 	ldrh.w	r3, [fp]
 8011e7a:	9301      	str	r3, [sp, #4]
 8011e7c:	f8ba 3000 	ldrh.w	r3, [sl]
 8011e80:	9302      	str	r3, [sp, #8]
 8011e82:	4b51      	ldr	r3, [pc, #324]	; (8011fc8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 8011e84:	881a      	ldrh	r2, [r3, #0]
 8011e86:	9203      	str	r2, [sp, #12]
 8011e88:	4a50      	ldr	r2, [pc, #320]	; (8011fcc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 8011e8a:	8812      	ldrh	r2, [r2, #0]
 8011e8c:	9204      	str	r2, [sp, #16]
 8011e8e:	af0a      	add	r7, sp, #40	; 0x28
 8011e90:	4a4f      	ldr	r2, [pc, #316]	; (8011fd0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x18c>)
 8011e92:	f827 9d0c 	strh.w	r9, [r7, #-12]!
 8011e96:	7812      	ldrb	r2, [r2, #0]
 8011e98:	4698      	mov	r8, r3
 8011e9a:	4638      	mov	r0, r7
 8011e9c:	2a00      	cmp	r2, #0
 8011e9e:	f040 8081 	bne.w	8011fa4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x160>
 8011ea2:	f005 fd3d 	bl	8017920 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011ea6:	f8ab 0000 	strh.w	r0, [fp]
 8011eaa:	4638      	mov	r0, r7
 8011eac:	f005 fd72 	bl	8017994 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011eb0:	f8aa 0000 	strh.w	r0, [sl]
 8011eb4:	4638      	mov	r0, r7
 8011eb6:	f005 fd33 	bl	8017920 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011eba:	f8a8 0000 	strh.w	r0, [r8]
 8011ebe:	4638      	mov	r0, r7
 8011ec0:	f005 fd68 	bl	8017994 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011ec4:	4b41      	ldr	r3, [pc, #260]	; (8011fcc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 8011ec6:	8018      	strh	r0, [r3, #0]
 8011ec8:	4648      	mov	r0, r9
 8011eca:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8011ece:	f005 fc6d 	bl	80177ac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8011ed2:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	4611      	mov	r1, r2
 8011eda:	4628      	mov	r0, r5
 8011edc:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8011ee0:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8011ee4:	f7fb fb7e 	bl	800d5e4 <_ZN8touchgfx8Drawable5setXYEss>
 8011ee8:	2301      	movs	r3, #1
 8011eea:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8011eee:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8011ef2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	dd5c      	ble.n	8011fb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 8011efa:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	dd58      	ble.n	8011fb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 8011f02:	462a      	mov	r2, r5
 8011f04:	ab08      	add	r3, sp, #32
 8011f06:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8011f0a:	6851      	ldr	r1, [r2, #4]
 8011f0c:	c303      	stmia	r3!, {r0, r1}
 8011f0e:	4631      	mov	r1, r6
 8011f10:	a808      	add	r0, sp, #32
 8011f12:	f7ff fc71 	bl	80117f8 <_ZN8touchgfx4RectaNERKS0_>
 8011f16:	a807      	add	r0, sp, #28
 8011f18:	f005 fe94 	bl	8017c44 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8011f1c:	4606      	mov	r6, r0
 8011f1e:	f7fa fe05 	bl	800cb2c <_ZN8touchgfx3HAL3lcdEv>
 8011f22:	6803      	ldr	r3, [r0, #0]
 8011f24:	6a1b      	ldr	r3, [r3, #32]
 8011f26:	4798      	blx	r3
 8011f28:	4286      	cmp	r6, r0
 8011f2a:	d04a      	beq.n	8011fc2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x17e>
 8011f2c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8011f2e:	b150      	cbz	r0, 8011f46 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 8011f30:	a807      	add	r0, sp, #28
 8011f32:	f005 fe87 	bl	8017c44 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8011f36:	4606      	mov	r6, r0
 8011f38:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8011f3a:	6803      	ldr	r3, [r0, #0]
 8011f3c:	6a1b      	ldr	r3, [r3, #32]
 8011f3e:	4798      	blx	r3
 8011f40:	1a33      	subs	r3, r6, r0
 8011f42:	4258      	negs	r0, r3
 8011f44:	4158      	adcs	r0, r3
 8011f46:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8011f4a:	2600      	movs	r6, #0
 8011f4c:	682a      	ldr	r2, [r5, #0]
 8011f4e:	696b      	ldr	r3, [r5, #20]
 8011f50:	616e      	str	r6, [r5, #20]
 8011f52:	9305      	str	r3, [sp, #20]
 8011f54:	6892      	ldr	r2, [r2, #8]
 8011f56:	a908      	add	r1, sp, #32
 8011f58:	4628      	mov	r0, r5
 8011f5a:	4790      	blx	r2
 8011f5c:	9b05      	ldr	r3, [sp, #20]
 8011f5e:	616b      	str	r3, [r5, #20]
 8011f60:	4652      	mov	r2, sl
 8011f62:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8011f66:	4649      	mov	r1, r9
 8011f68:	4628      	mov	r0, r5
 8011f6a:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8011f6e:	f7fb fb39 	bl	800d5e4 <_ZN8touchgfx8Drawable5setXYEss>
 8011f72:	4b18      	ldr	r3, [pc, #96]	; (8011fd4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>)
 8011f74:	9a01      	ldr	r2, [sp, #4]
 8011f76:	801a      	strh	r2, [r3, #0]
 8011f78:	4b17      	ldr	r3, [pc, #92]	; (8011fd8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>)
 8011f7a:	9a02      	ldr	r2, [sp, #8]
 8011f7c:	801a      	strh	r2, [r3, #0]
 8011f7e:	4b12      	ldr	r3, [pc, #72]	; (8011fc8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 8011f80:	9a03      	ldr	r2, [sp, #12]
 8011f82:	801a      	strh	r2, [r3, #0]
 8011f84:	4b11      	ldr	r3, [pc, #68]	; (8011fcc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 8011f86:	9a04      	ldr	r2, [sp, #16]
 8011f88:	801a      	strh	r2, [r3, #0]
 8011f8a:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8011f8e:	6823      	ldr	r3, [r4, #0]
 8011f90:	4620      	mov	r0, r4
 8011f92:	6a1b      	ldr	r3, [r3, #32]
 8011f94:	4798      	blx	r3
 8011f96:	6823      	ldr	r3, [r4, #0]
 8011f98:	4620      	mov	r0, r4
 8011f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f9c:	4798      	blx	r3
 8011f9e:	b00b      	add	sp, #44	; 0x2c
 8011fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fa4:	f005 fcf6 	bl	8017994 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011fa8:	f8ab 0000 	strh.w	r0, [fp]
 8011fac:	4638      	mov	r0, r7
 8011fae:	f005 fcb7 	bl	8017920 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011fb2:	e77d      	b.n	8011eb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x6c>
 8011fb4:	462a      	mov	r2, r5
 8011fb6:	ab08      	add	r3, sp, #32
 8011fb8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8011fbc:	6851      	ldr	r1, [r2, #4]
 8011fbe:	c303      	stmia	r3!, {r0, r1}
 8011fc0:	e7a9      	b.n	8011f16 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xd2>
 8011fc2:	2000      	movs	r0, #0
 8011fc4:	e7bf      	b.n	8011f46 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 8011fc6:	bf00      	nop
 8011fc8:	2000a030 	.word	0x2000a030
 8011fcc:	2000a032 	.word	0x2000a032
 8011fd0:	2000a034 	.word	0x2000a034
 8011fd4:	2000a036 	.word	0x2000a036
 8011fd8:	2000a038 	.word	0x2000a038

08011fdc <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8011fdc:	b510      	push	{r4, lr}
 8011fde:	4b07      	ldr	r3, [pc, #28]	; (8011ffc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8011fe0:	781b      	ldrb	r3, [r3, #0]
 8011fe2:	4604      	mov	r4, r0
 8011fe4:	b13b      	cbz	r3, 8011ff6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8011fe6:	6803      	ldr	r3, [r0, #0]
 8011fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fea:	4798      	blx	r3
 8011fec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011fee:	4283      	cmp	r3, r0
 8011ff0:	d101      	bne.n	8011ff6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8011ff2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8011ff4:	bd10      	pop	{r4, pc}
 8011ff6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8011ff8:	e7fc      	b.n	8011ff4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8011ffa:	bf00      	nop
 8011ffc:	2000a03a 	.word	0x2000a03a

08012000 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8012000:	b510      	push	{r4, lr}
 8012002:	4b0b      	ldr	r3, [pc, #44]	; (8012030 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8012004:	781b      	ldrb	r3, [r3, #0]
 8012006:	4604      	mov	r4, r0
 8012008:	b95b      	cbnz	r3, 8012022 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801200a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801200e:	2b02      	cmp	r3, #2
 8012010:	d007      	beq.n	8012022 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8012012:	6840      	ldr	r0, [r0, #4]
 8012014:	f000 fbce 	bl	80127b4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8012018:	b118      	cbz	r0, 8012022 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801201a:	6862      	ldr	r2, [r4, #4]
 801201c:	7a53      	ldrb	r3, [r2, #9]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d0fc      	beq.n	801201c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8012022:	f7fd fce5 	bl	800f9f0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8012026:	4620      	mov	r0, r4
 8012028:	f7ff ffd8 	bl	8011fdc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801202c:	bd10      	pop	{r4, pc}
 801202e:	bf00      	nop
 8012030:	2000a03a 	.word	0x2000a03a

08012034 <_ZN8touchgfx3HAL10initializeEv>:
 8012034:	b510      	push	{r4, lr}
 8012036:	4604      	mov	r4, r0
 8012038:	f7fd fca4 	bl	800f984 <_ZN8touchgfx10OSWrappers10initializeEv>
 801203c:	6860      	ldr	r0, [r4, #4]
 801203e:	6803      	ldr	r3, [r0, #0]
 8012040:	68db      	ldr	r3, [r3, #12]
 8012042:	4798      	blx	r3
 8012044:	68e0      	ldr	r0, [r4, #12]
 8012046:	6803      	ldr	r3, [r0, #0]
 8012048:	689b      	ldr	r3, [r3, #8]
 801204a:	4798      	blx	r3
 801204c:	6823      	ldr	r3, [r4, #0]
 801204e:	4620      	mov	r0, r4
 8012050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012056:	4718      	bx	r3

08012058 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8012058:	b508      	push	{r3, lr}
 801205a:	290d      	cmp	r1, #13
 801205c:	d817      	bhi.n	801208e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 801205e:	e8df f001 	tbb	[pc, r1]
 8012062:	090b      	.short	0x090b
 8012064:	0d0d0d07 	.word	0x0d0d0d07
 8012068:	1414140d 	.word	0x1414140d
 801206c:	0d0d1414 	.word	0x0d0d1414
 8012070:	2020      	movs	r0, #32
 8012072:	bd08      	pop	{r3, pc}
 8012074:	2018      	movs	r0, #24
 8012076:	e7fc      	b.n	8012072 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8012078:	2010      	movs	r0, #16
 801207a:	e7fa      	b.n	8012072 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801207c:	4b05      	ldr	r3, [pc, #20]	; (8012094 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 801207e:	4a06      	ldr	r2, [pc, #24]	; (8012098 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8012080:	4806      	ldr	r0, [pc, #24]	; (801209c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8012082:	f44f 7111 	mov.w	r1, #580	; 0x244
 8012086:	f011 fb5d 	bl	8023744 <__assert_func>
 801208a:	2008      	movs	r0, #8
 801208c:	e7f1      	b.n	8012072 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801208e:	2000      	movs	r0, #0
 8012090:	e7ef      	b.n	8012072 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8012092:	bf00      	nop
 8012094:	08026983 	.word	0x08026983
 8012098:	08026d20 	.word	0x08026d20
 801209c:	0802688a 	.word	0x0802688a

080120a0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 80120a0:	b570      	push	{r4, r5, r6, lr}
 80120a2:	460d      	mov	r5, r1
 80120a4:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80120a8:	4616      	mov	r6, r2
 80120aa:	461c      	mov	r4, r3
 80120ac:	f7ff ffd4 	bl	8012058 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 80120b0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80120b4:	10c0      	asrs	r0, r0, #3
 80120b6:	fb06 5101 	mla	r1, r6, r1, r5
 80120ba:	fb00 4001 	mla	r0, r0, r1, r4
 80120be:	bd70      	pop	{r4, r5, r6, pc}

080120c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 80120c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120c4:	b08a      	sub	sp, #40	; 0x28
 80120c6:	f04f 0c00 	mov.w	ip, #0
 80120ca:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 80120ce:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80120d2:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80120d6:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 80120da:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80120de:	f8cd c020 	str.w	ip, [sp, #32]
 80120e2:	f1b8 0f02 	cmp.w	r8, #2
 80120e6:	4604      	mov	r4, r0
 80120e8:	469a      	mov	sl, r3
 80120ea:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80120ee:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80120f2:	d030      	beq.n	8012156 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 80120f4:	2bff      	cmp	r3, #255	; 0xff
 80120f6:	d12c      	bne.n	8012152 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 80120f8:	4560      	cmp	r0, ip
 80120fa:	bf14      	ite	ne
 80120fc:	2004      	movne	r0, #4
 80120fe:	2001      	moveq	r0, #1
 8012100:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012104:	9204      	str	r2, [sp, #16]
 8012106:	4620      	mov	r0, r4
 8012108:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801210c:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012110:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8012114:	f8ad 6018 	strh.w	r6, [sp, #24]
 8012118:	f8ad 501a 	strh.w	r5, [sp, #26]
 801211c:	f7ff ff5e 	bl	8011fdc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012120:	e9cd 9700 	strd	r9, r7, [sp]
 8012124:	4603      	mov	r3, r0
 8012126:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 801212a:	4651      	mov	r1, sl
 801212c:	4620      	mov	r0, r4
 801212e:	f7ff ffb7 	bl	80120a0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8012132:	f8ad 901e 	strh.w	r9, [sp, #30]
 8012136:	9005      	str	r0, [sp, #20]
 8012138:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 801213c:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8012140:	b106      	cbz	r6, 8012144 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8012142:	b98d      	cbnz	r5, 8012168 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8012144:	4b12      	ldr	r3, [pc, #72]	; (8012190 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8012146:	4a13      	ldr	r2, [pc, #76]	; (8012194 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8012148:	f240 11c3 	movw	r1, #451	; 0x1c3
 801214c:	4812      	ldr	r0, [pc, #72]	; (8012198 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 801214e:	f011 faf9 	bl	8023744 <__assert_func>
 8012152:	2004      	movs	r0, #4
 8012154:	e7d4      	b.n	8012100 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8012156:	2bff      	cmp	r3, #255	; 0xff
 8012158:	d104      	bne.n	8012164 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 801215a:	2800      	cmp	r0, #0
 801215c:	bf14      	ite	ne
 801215e:	2040      	movne	r0, #64	; 0x40
 8012160:	2020      	moveq	r0, #32
 8012162:	e7cd      	b.n	8012100 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8012164:	2040      	movs	r0, #64	; 0x40
 8012166:	e7cb      	b.n	8012100 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8012168:	6823      	ldr	r3, [r4, #0]
 801216a:	9d02      	ldr	r5, [sp, #8]
 801216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801216e:	4620      	mov	r0, r4
 8012170:	4798      	blx	r3
 8012172:	4228      	tst	r0, r5
 8012174:	d104      	bne.n	8012180 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8012176:	4b09      	ldr	r3, [pc, #36]	; (801219c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8012178:	4a06      	ldr	r2, [pc, #24]	; (8012194 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801217a:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 801217e:	e7e5      	b.n	801214c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8012180:	6860      	ldr	r0, [r4, #4]
 8012182:	6803      	ldr	r3, [r0, #0]
 8012184:	a902      	add	r1, sp, #8
 8012186:	685b      	ldr	r3, [r3, #4]
 8012188:	4798      	blx	r3
 801218a:	b00a      	add	sp, #40	; 0x28
 801218c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012190:	08026906 	.word	0x08026906
 8012194:	08026bc2 	.word	0x08026bc2
 8012198:	0802688a 	.word	0x0802688a
 801219c:	0802693e 	.word	0x0802693e

080121a0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 80121a0:	b510      	push	{r4, lr}
 80121a2:	b08a      	sub	sp, #40	; 0x28
 80121a4:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80121a8:	9408      	str	r4, [sp, #32]
 80121aa:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80121ae:	9407      	str	r4, [sp, #28]
 80121b0:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 80121b4:	9406      	str	r4, [sp, #24]
 80121b6:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80121ba:	9405      	str	r4, [sp, #20]
 80121bc:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 80121c0:	9404      	str	r4, [sp, #16]
 80121c2:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 80121c6:	9403      	str	r4, [sp, #12]
 80121c8:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 80121cc:	9402      	str	r4, [sp, #8]
 80121ce:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80121d2:	e9cd 3400 	strd	r3, r4, [sp]
 80121d6:	4613      	mov	r3, r2
 80121d8:	2200      	movs	r2, #0
 80121da:	f7ff ff71 	bl	80120c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80121de:	b00a      	add	sp, #40	; 0x28
 80121e0:	bd10      	pop	{r4, pc}
	...

080121e4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 80121e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121e6:	b08b      	sub	sp, #44	; 0x2c
 80121e8:	4616      	mov	r6, r2
 80121ea:	460d      	mov	r5, r1
 80121ec:	461f      	mov	r7, r3
 80121ee:	4604      	mov	r4, r0
 80121f0:	f7fa fc9c 	bl	800cb2c <_ZN8touchgfx3HAL3lcdEv>
 80121f4:	6803      	ldr	r3, [r0, #0]
 80121f6:	6a1b      	ldr	r3, [r3, #32]
 80121f8:	4798      	blx	r3
 80121fa:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80121fe:	4b0d      	ldr	r3, [pc, #52]	; (8012234 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8012200:	881b      	ldrh	r3, [r3, #0]
 8012202:	9306      	str	r3, [sp, #24]
 8012204:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8012208:	9305      	str	r3, [sp, #20]
 801220a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801220e:	9304      	str	r3, [sp, #16]
 8012210:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012214:	9303      	str	r3, [sp, #12]
 8012216:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801221a:	9302      	str	r3, [sp, #8]
 801221c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012220:	2200      	movs	r2, #0
 8012222:	e9cd 7300 	strd	r7, r3, [sp]
 8012226:	4629      	mov	r1, r5
 8012228:	4633      	mov	r3, r6
 801222a:	4620      	mov	r0, r4
 801222c:	f7ff ff48 	bl	80120c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8012230:	b00b      	add	sp, #44	; 0x2c
 8012232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012234:	2000a036 	.word	0x2000a036

08012238 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8012238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801223c:	461f      	mov	r7, r3
 801223e:	4b14      	ldr	r3, [pc, #80]	; (8012290 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8012240:	b08a      	sub	sp, #40	; 0x28
 8012242:	4616      	mov	r6, r2
 8012244:	f8b3 8000 	ldrh.w	r8, [r3]
 8012248:	460d      	mov	r5, r1
 801224a:	4604      	mov	r4, r0
 801224c:	f7fa fc6e 	bl	800cb2c <_ZN8touchgfx3HAL3lcdEv>
 8012250:	6803      	ldr	r3, [r0, #0]
 8012252:	6a1b      	ldr	r3, [r3, #32]
 8012254:	4798      	blx	r3
 8012256:	2302      	movs	r3, #2
 8012258:	e9cd 8306 	strd	r8, r3, [sp, #24]
 801225c:	2301      	movs	r3, #1
 801225e:	9305      	str	r3, [sp, #20]
 8012260:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8012264:	9304      	str	r3, [sp, #16]
 8012266:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801226a:	9303      	str	r3, [sp, #12]
 801226c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012270:	9302      	str	r3, [sp, #8]
 8012272:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012276:	9008      	str	r0, [sp, #32]
 8012278:	e9cd 7300 	strd	r7, r3, [sp]
 801227c:	2200      	movs	r2, #0
 801227e:	4633      	mov	r3, r6
 8012280:	4629      	mov	r1, r5
 8012282:	4620      	mov	r0, r4
 8012284:	f7ff ff1c 	bl	80120c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8012288:	b00a      	add	sp, #40	; 0x28
 801228a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801228e:	bf00      	nop
 8012290:	2000a036 	.word	0x2000a036

08012294 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8012294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012298:	b08b      	sub	sp, #44	; 0x2c
 801229a:	469b      	mov	fp, r3
 801229c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80122a0:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 80122a4:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 80122a8:	2fff      	cmp	r7, #255	; 0xff
 80122aa:	bf14      	ite	ne
 80122ac:	2308      	movne	r3, #8
 80122ae:	2302      	moveq	r3, #2
 80122b0:	2600      	movs	r6, #0
 80122b2:	4604      	mov	r4, r0
 80122b4:	4689      	mov	r9, r1
 80122b6:	4692      	mov	sl, r2
 80122b8:	e9cd 3602 	strd	r3, r6, [sp, #8]
 80122bc:	9608      	str	r6, [sp, #32]
 80122be:	f7ff fe8d 	bl	8011fdc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80122c2:	e9cd 8500 	strd	r8, r5, [sp]
 80122c6:	4603      	mov	r3, r0
 80122c8:	465a      	mov	r2, fp
 80122ca:	4651      	mov	r1, sl
 80122cc:	4620      	mov	r0, r4
 80122ce:	f7ff fee7 	bl	80120a0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80122d2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80122d6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80122da:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80122de:	f8ad 301a 	strh.w	r3, [sp, #26]
 80122e2:	6823      	ldr	r3, [r4, #0]
 80122e4:	9005      	str	r0, [sp, #20]
 80122e6:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 80122ea:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 80122ee:	f8ad 601c 	strh.w	r6, [sp, #28]
 80122f2:	f8ad 801e 	strh.w	r8, [sp, #30]
 80122f6:	f8cd 9020 	str.w	r9, [sp, #32]
 80122fa:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 80122fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012300:	9d02      	ldr	r5, [sp, #8]
 8012302:	4620      	mov	r0, r4
 8012304:	4798      	blx	r3
 8012306:	4228      	tst	r0, r5
 8012308:	d106      	bne.n	8012318 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 801230a:	4b07      	ldr	r3, [pc, #28]	; (8012328 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 801230c:	4a07      	ldr	r2, [pc, #28]	; (801232c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 801230e:	4808      	ldr	r0, [pc, #32]	; (8012330 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8012310:	f240 11fb 	movw	r1, #507	; 0x1fb
 8012314:	f011 fa16 	bl	8023744 <__assert_func>
 8012318:	6860      	ldr	r0, [r4, #4]
 801231a:	6803      	ldr	r3, [r0, #0]
 801231c:	a902      	add	r1, sp, #8
 801231e:	685b      	ldr	r3, [r3, #4]
 8012320:	4798      	blx	r3
 8012322:	b00b      	add	sp, #44	; 0x2c
 8012324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012328:	0802693e 	.word	0x0802693e
 801232c:	08026c8b 	.word	0x08026c8b
 8012330:	0802688a 	.word	0x0802688a

08012334 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8012334:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012338:	461f      	mov	r7, r3
 801233a:	4b0b      	ldr	r3, [pc, #44]	; (8012368 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801233c:	460d      	mov	r5, r1
 801233e:	f8b3 8000 	ldrh.w	r8, [r3]
 8012342:	4616      	mov	r6, r2
 8012344:	4604      	mov	r4, r0
 8012346:	f7fa fbf1 	bl	800cb2c <_ZN8touchgfx3HAL3lcdEv>
 801234a:	6803      	ldr	r3, [r0, #0]
 801234c:	6a1b      	ldr	r3, [r3, #32]
 801234e:	4798      	blx	r3
 8012350:	463b      	mov	r3, r7
 8012352:	e9cd 8000 	strd	r8, r0, [sp]
 8012356:	4632      	mov	r2, r6
 8012358:	4629      	mov	r1, r5
 801235a:	4620      	mov	r0, r4
 801235c:	f7ff fea0 	bl	80120a0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8012360:	b002      	add	sp, #8
 8012362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012366:	bf00      	nop
 8012368:	2000a036 	.word	0x2000a036

0801236c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 801236c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012370:	b088      	sub	sp, #32
 8012372:	4698      	mov	r8, r3
 8012374:	2300      	movs	r3, #0
 8012376:	9306      	str	r3, [sp, #24]
 8012378:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801237c:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8012380:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8012384:	f8ad 6010 	strh.w	r6, [sp, #16]
 8012388:	e9cd 3100 	strd	r3, r1, [sp]
 801238c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012390:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012394:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8012398:	f88d 301c 	strb.w	r3, [sp, #28]
 801239c:	4617      	mov	r7, r2
 801239e:	4604      	mov	r4, r0
 80123a0:	f8ad 5012 	strh.w	r5, [sp, #18]
 80123a4:	f7ff fe1a 	bl	8011fdc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80123a8:	4642      	mov	r2, r8
 80123aa:	4603      	mov	r3, r0
 80123ac:	4639      	mov	r1, r7
 80123ae:	4620      	mov	r0, r4
 80123b0:	f7ff ffc0 	bl	8012334 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80123b4:	4b16      	ldr	r3, [pc, #88]	; (8012410 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 80123b6:	9003      	str	r0, [sp, #12]
 80123b8:	881b      	ldrh	r3, [r3, #0]
 80123ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 80123be:	f7fa fbb5 	bl	800cb2c <_ZN8touchgfx3HAL3lcdEv>
 80123c2:	6803      	ldr	r3, [r0, #0]
 80123c4:	6a1b      	ldr	r3, [r3, #32]
 80123c6:	4798      	blx	r3
 80123c8:	f88d 001e 	strb.w	r0, [sp, #30]
 80123cc:	f88d 001d 	strb.w	r0, [sp, #29]
 80123d0:	b106      	cbz	r6, 80123d4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 80123d2:	b935      	cbnz	r5, 80123e2 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 80123d4:	4b0f      	ldr	r3, [pc, #60]	; (8012414 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 80123d6:	4a10      	ldr	r2, [pc, #64]	; (8012418 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80123d8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80123dc:	480f      	ldr	r0, [pc, #60]	; (801241c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 80123de:	f011 f9b1 	bl	8023744 <__assert_func>
 80123e2:	6823      	ldr	r3, [r4, #0]
 80123e4:	9d00      	ldr	r5, [sp, #0]
 80123e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123e8:	4620      	mov	r0, r4
 80123ea:	4798      	blx	r3
 80123ec:	4228      	tst	r0, r5
 80123ee:	d104      	bne.n	80123fa <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 80123f0:	4b0b      	ldr	r3, [pc, #44]	; (8012420 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 80123f2:	4a09      	ldr	r2, [pc, #36]	; (8012418 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80123f4:	f240 11e1 	movw	r1, #481	; 0x1e1
 80123f8:	e7f0      	b.n	80123dc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 80123fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80123fc:	6860      	ldr	r0, [r4, #4]
 80123fe:	9306      	str	r3, [sp, #24]
 8012400:	6803      	ldr	r3, [r0, #0]
 8012402:	4669      	mov	r1, sp
 8012404:	685b      	ldr	r3, [r3, #4]
 8012406:	4798      	blx	r3
 8012408:	b008      	add	sp, #32
 801240a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801240e:	bf00      	nop
 8012410:	2000a036 	.word	0x2000a036
 8012414:	08026906 	.word	0x08026906
 8012418:	08026a74 	.word	0x08026a74
 801241c:	0802688a 	.word	0x0802688a
 8012420:	0802693e 	.word	0x0802693e

08012424 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8012424:	b570      	push	{r4, r5, r6, lr}
 8012426:	b08a      	sub	sp, #40	; 0x28
 8012428:	466b      	mov	r3, sp
 801242a:	e883 0006 	stmia.w	r3, {r1, r2}
 801242e:	4b20      	ldr	r3, [pc, #128]	; (80124b0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8012430:	781b      	ldrb	r3, [r3, #0]
 8012432:	4604      	mov	r4, r0
 8012434:	b933      	cbnz	r3, 8012444 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8012436:	4b1f      	ldr	r3, [pc, #124]	; (80124b4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8012438:	4a1f      	ldr	r2, [pc, #124]	; (80124b8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801243a:	4820      	ldr	r0, [pc, #128]	; (80124bc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 801243c:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8012440:	f011 f980 	bl	8023744 <__assert_func>
 8012444:	2300      	movs	r3, #0
 8012446:	9308      	str	r3, [sp, #32]
 8012448:	2301      	movs	r3, #1
 801244a:	9302      	str	r3, [sp, #8]
 801244c:	6803      	ldr	r3, [r0, #0]
 801244e:	f8bd 5000 	ldrh.w	r5, [sp]
 8012452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012454:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8012458:	4798      	blx	r3
 801245a:	4632      	mov	r2, r6
 801245c:	4629      	mov	r1, r5
 801245e:	4603      	mov	r3, r0
 8012460:	4620      	mov	r0, r4
 8012462:	f7ff ff67 	bl	8012334 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8012466:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012468:	9305      	str	r3, [sp, #20]
 801246a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801246e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012472:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8012476:	f8ad 301a 	strh.w	r3, [sp, #26]
 801247a:	4b11      	ldr	r3, [pc, #68]	; (80124c0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 801247c:	9003      	str	r0, [sp, #12]
 801247e:	881b      	ldrh	r3, [r3, #0]
 8012480:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012484:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012488:	f7fa fb50 	bl	800cb2c <_ZN8touchgfx3HAL3lcdEv>
 801248c:	6803      	ldr	r3, [r0, #0]
 801248e:	6a1b      	ldr	r3, [r3, #32]
 8012490:	4798      	blx	r3
 8012492:	23ff      	movs	r3, #255	; 0xff
 8012494:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8012498:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801249c:	6860      	ldr	r0, [r4, #4]
 801249e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80124a2:	6803      	ldr	r3, [r0, #0]
 80124a4:	a902      	add	r1, sp, #8
 80124a6:	685b      	ldr	r3, [r3, #4]
 80124a8:	4798      	blx	r3
 80124aa:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80124ac:	b00a      	add	sp, #40	; 0x28
 80124ae:	bd70      	pop	{r4, r5, r6, pc}
 80124b0:	2000a03b 	.word	0x2000a03b
 80124b4:	080267d7 	.word	0x080267d7
 80124b8:	08026b18 	.word	0x08026b18
 80124bc:	0802688a 	.word	0x0802688a
 80124c0:	2000a036 	.word	0x2000a036

080124c4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80124c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124c6:	b08b      	sub	sp, #44	; 0x2c
 80124c8:	466d      	mov	r5, sp
 80124ca:	e885 0006 	stmia.w	r5, {r1, r2}
 80124ce:	461d      	mov	r5, r3
 80124d0:	2300      	movs	r3, #0
 80124d2:	9308      	str	r3, [sp, #32]
 80124d4:	2301      	movs	r3, #1
 80124d6:	9302      	str	r3, [sp, #8]
 80124d8:	6803      	ldr	r3, [r0, #0]
 80124da:	f8bd 6000 	ldrh.w	r6, [sp]
 80124de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124e0:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80124e4:	4604      	mov	r4, r0
 80124e6:	4798      	blx	r3
 80124e8:	463a      	mov	r2, r7
 80124ea:	4631      	mov	r1, r6
 80124ec:	4603      	mov	r3, r0
 80124ee:	4620      	mov	r0, r4
 80124f0:	f7ff ff20 	bl	8012334 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80124f4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80124f8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80124fc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8012500:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012504:	4b0e      	ldr	r3, [pc, #56]	; (8012540 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8012506:	9003      	str	r0, [sp, #12]
 8012508:	881b      	ldrh	r3, [r3, #0]
 801250a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801250e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012510:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012514:	9505      	str	r5, [sp, #20]
 8012516:	f7fa fb09 	bl	800cb2c <_ZN8touchgfx3HAL3lcdEv>
 801251a:	6803      	ldr	r3, [r0, #0]
 801251c:	6a1b      	ldr	r3, [r3, #32]
 801251e:	4798      	blx	r3
 8012520:	23ff      	movs	r3, #255	; 0xff
 8012522:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8012526:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801252a:	6860      	ldr	r0, [r4, #4]
 801252c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8012530:	6803      	ldr	r3, [r0, #0]
 8012532:	a902      	add	r1, sp, #8
 8012534:	685b      	ldr	r3, [r3, #4]
 8012536:	4798      	blx	r3
 8012538:	4628      	mov	r0, r5
 801253a:	b00b      	add	sp, #44	; 0x2c
 801253c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801253e:	bf00      	nop
 8012540:	2000a036 	.word	0x2000a036

08012544 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8012544:	b570      	push	{r4, r5, r6, lr}
 8012546:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801254a:	4604      	mov	r4, r0
 801254c:	b19b      	cbz	r3, 8012576 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801254e:	2002      	movs	r0, #2
 8012550:	f7fc ffd8 	bl	800f504 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8012554:	2300      	movs	r3, #0
 8012556:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801255a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801255e:	6823      	ldr	r3, [r4, #0]
 8012560:	4620      	mov	r0, r4
 8012562:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8012566:	f7ff fd39 	bl	8011fdc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801256a:	462b      	mov	r3, r5
 801256c:	4601      	mov	r1, r0
 801256e:	4620      	mov	r0, r4
 8012570:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012574:	4718      	bx	r3
 8012576:	bd70      	pop	{r4, r5, r6, pc}

08012578 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>:
 8012578:	4770      	bx	lr

0801257a <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801257a:	4770      	bx	lr

0801257c <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 801257c:	2000      	movs	r0, #0
 801257e:	4770      	bx	lr

08012580 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8012580:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8012584:	1a13      	subs	r3, r2, r0
 8012586:	4258      	negs	r0, r3
 8012588:	4158      	adcs	r0, r3
 801258a:	4770      	bx	lr

0801258c <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801258c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8012590:	1a9b      	subs	r3, r3, r2
 8012592:	2b00      	cmp	r3, #0
 8012594:	bfdc      	itt	le
 8012596:	6882      	ldrle	r2, [r0, #8]
 8012598:	189b      	addle	r3, r3, r2
 801259a:	2b01      	cmp	r3, #1
 801259c:	bfcc      	ite	gt
 801259e:	2000      	movgt	r0, #0
 80125a0:	2001      	movle	r0, #1
 80125a2:	4770      	bx	lr

080125a4 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80125a4:	6902      	ldr	r2, [r0, #16]
 80125a6:	6840      	ldr	r0, [r0, #4]
 80125a8:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 80125ac:	4770      	bx	lr

080125ae <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80125ae:	6803      	ldr	r3, [r0, #0]
 80125b0:	691b      	ldr	r3, [r3, #16]
 80125b2:	4718      	bx	r3

080125b4 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80125b4:	4770      	bx	lr

080125b6 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80125b6:	4770      	bx	lr

080125b8 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80125b8:	b570      	push	{r4, r5, r6, lr}
 80125ba:	2301      	movs	r3, #1
 80125bc:	7203      	strb	r3, [r0, #8]
 80125be:	4604      	mov	r4, r0
 80125c0:	6840      	ldr	r0, [r0, #4]
 80125c2:	6803      	ldr	r3, [r0, #0]
 80125c4:	699b      	ldr	r3, [r3, #24]
 80125c6:	4798      	blx	r3
 80125c8:	6803      	ldr	r3, [r0, #0]
 80125ca:	2b08      	cmp	r3, #8
 80125cc:	4605      	mov	r5, r0
 80125ce:	d01e      	beq.n	801260e <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 80125d0:	d80b      	bhi.n	80125ea <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80125d2:	2b02      	cmp	r3, #2
 80125d4:	d027      	beq.n	8012626 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80125d6:	2b04      	cmp	r3, #4
 80125d8:	d011      	beq.n	80125fe <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 80125da:	2b01      	cmp	r3, #1
 80125dc:	d028      	beq.n	8012630 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80125de:	4b17      	ldr	r3, [pc, #92]	; (801263c <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 80125e0:	4a17      	ldr	r2, [pc, #92]	; (8012640 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 80125e2:	4818      	ldr	r0, [pc, #96]	; (8012644 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 80125e4:	218c      	movs	r1, #140	; 0x8c
 80125e6:	f011 f8ad 	bl	8023744 <__assert_func>
 80125ea:	2b40      	cmp	r3, #64	; 0x40
 80125ec:	d020      	beq.n	8012630 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80125ee:	d801      	bhi.n	80125f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80125f0:	2b20      	cmp	r3, #32
 80125f2:	e7f3      	b.n	80125dc <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80125f4:	2b80      	cmp	r3, #128	; 0x80
 80125f6:	d01b      	beq.n	8012630 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80125f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80125fc:	e7ee      	b.n	80125dc <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80125fe:	6823      	ldr	r3, [r4, #0]
 8012600:	7f01      	ldrb	r1, [r0, #28]
 8012602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012604:	4620      	mov	r0, r4
 8012606:	4798      	blx	r3
 8012608:	6823      	ldr	r3, [r4, #0]
 801260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801260c:	e006      	b.n	801261c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801260e:	6823      	ldr	r3, [r4, #0]
 8012610:	7f01      	ldrb	r1, [r0, #28]
 8012612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012614:	4620      	mov	r0, r4
 8012616:	4798      	blx	r3
 8012618:	6823      	ldr	r3, [r4, #0]
 801261a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801261c:	4629      	mov	r1, r5
 801261e:	4620      	mov	r0, r4
 8012620:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012624:	4718      	bx	r3
 8012626:	6823      	ldr	r3, [r4, #0]
 8012628:	4620      	mov	r0, r4
 801262a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801262c:	4798      	blx	r3
 801262e:	e7f3      	b.n	8012618 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8012630:	6823      	ldr	r3, [r4, #0]
 8012632:	4620      	mov	r0, r4
 8012634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012636:	4798      	blx	r3
 8012638:	e7e6      	b.n	8012608 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801263a:	bf00      	nop
 801263c:	08026d69 	.word	0x08026d69
 8012640:	08026e78 	.word	0x08026e78
 8012644:	08026d8e 	.word	0x08026d8e

08012648 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8012648:	b570      	push	{r4, r5, r6, lr}
 801264a:	4604      	mov	r4, r0
 801264c:	460e      	mov	r6, r1
 801264e:	6860      	ldr	r0, [r4, #4]
 8012650:	6803      	ldr	r3, [r0, #0]
 8012652:	685b      	ldr	r3, [r3, #4]
 8012654:	4798      	blx	r3
 8012656:	2800      	cmp	r0, #0
 8012658:	d1f9      	bne.n	801264e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801265a:	4d0d      	ldr	r5, [pc, #52]	; (8012690 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801265c:	6828      	ldr	r0, [r5, #0]
 801265e:	6803      	ldr	r3, [r0, #0]
 8012660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012662:	4798      	blx	r3
 8012664:	f7fd f9de 	bl	800fa24 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8012668:	6828      	ldr	r0, [r5, #0]
 801266a:	2101      	movs	r1, #1
 801266c:	f7ff ff84 	bl	8012578 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 8012670:	6860      	ldr	r0, [r4, #4]
 8012672:	6803      	ldr	r3, [r0, #0]
 8012674:	4631      	mov	r1, r6
 8012676:	689b      	ldr	r3, [r3, #8]
 8012678:	4798      	blx	r3
 801267a:	6823      	ldr	r3, [r4, #0]
 801267c:	4620      	mov	r0, r4
 801267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012680:	4798      	blx	r3
 8012682:	6828      	ldr	r0, [r5, #0]
 8012684:	6803      	ldr	r3, [r0, #0]
 8012686:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801268a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801268c:	4718      	bx	r3
 801268e:	bf00      	nop
 8012690:	2000a03c 	.word	0x2000a03c

08012694 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8012694:	b508      	push	{r3, lr}
 8012696:	f7fd f9ab 	bl	800f9f0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801269a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801269e:	f7fd b9b5 	b.w	800fa0c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080126a2 <_ZN8touchgfx13DMA_Interface5startEv>:
 80126a2:	b510      	push	{r4, lr}
 80126a4:	4604      	mov	r4, r0
 80126a6:	6840      	ldr	r0, [r0, #4]
 80126a8:	6803      	ldr	r3, [r0, #0]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	4798      	blx	r3
 80126ae:	b948      	cbnz	r0, 80126c4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80126b0:	7a63      	ldrb	r3, [r4, #9]
 80126b2:	b13b      	cbz	r3, 80126c4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80126b4:	7a23      	ldrb	r3, [r4, #8]
 80126b6:	b92b      	cbnz	r3, 80126c4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80126b8:	6823      	ldr	r3, [r4, #0]
 80126ba:	4620      	mov	r0, r4
 80126bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126c2:	4718      	bx	r3
 80126c4:	bd10      	pop	{r4, pc}
	...

080126c8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80126c8:	b510      	push	{r4, lr}
 80126ca:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 80126ce:	1b12      	subs	r2, r2, r4
 80126d0:	2a00      	cmp	r2, #0
 80126d2:	bfdc      	itt	le
 80126d4:	6883      	ldrle	r3, [r0, #8]
 80126d6:	18d2      	addle	r2, r2, r3
 80126d8:	2a01      	cmp	r2, #1
 80126da:	dd18      	ble.n	801270e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 80126dc:	6843      	ldr	r3, [r0, #4]
 80126de:	f101 021c 	add.w	r2, r1, #28
 80126e2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80126e6:	f851 4b04 	ldr.w	r4, [r1], #4
 80126ea:	f843 4b04 	str.w	r4, [r3], #4
 80126ee:	4291      	cmp	r1, r2
 80126f0:	d1f9      	bne.n	80126e6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 80126f2:	880a      	ldrh	r2, [r1, #0]
 80126f4:	801a      	strh	r2, [r3, #0]
 80126f6:	788a      	ldrb	r2, [r1, #2]
 80126f8:	709a      	strb	r2, [r3, #2]
 80126fa:	68c3      	ldr	r3, [r0, #12]
 80126fc:	6882      	ldr	r2, [r0, #8]
 80126fe:	f3bf 8f5b 	dmb	ish
 8012702:	3301      	adds	r3, #1
 8012704:	429a      	cmp	r2, r3
 8012706:	bfd8      	it	le
 8012708:	1a9b      	suble	r3, r3, r2
 801270a:	60c3      	str	r3, [r0, #12]
 801270c:	bd10      	pop	{r4, pc}
 801270e:	4b03      	ldr	r3, [pc, #12]	; (801271c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8012710:	4a03      	ldr	r2, [pc, #12]	; (8012720 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8012712:	4804      	ldr	r0, [pc, #16]	; (8012724 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8012714:	2139      	movs	r1, #57	; 0x39
 8012716:	f011 f815 	bl	8023744 <__assert_func>
 801271a:	bf00      	nop
 801271c:	08026db4 	.word	0x08026db4
 8012720:	08026ea8 	.word	0x08026ea8
 8012724:	08026d8e 	.word	0x08026d8e

08012728 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8012728:	b510      	push	{r4, lr}
 801272a:	6803      	ldr	r3, [r0, #0]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	4604      	mov	r4, r0
 8012730:	4798      	blx	r3
 8012732:	b128      	cbz	r0, 8012740 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8012734:	4b07      	ldr	r3, [pc, #28]	; (8012754 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8012736:	4a08      	ldr	r2, [pc, #32]	; (8012758 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8012738:	4808      	ldr	r0, [pc, #32]	; (801275c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 801273a:	213f      	movs	r1, #63	; 0x3f
 801273c:	f011 f802 	bl	8023744 <__assert_func>
 8012740:	6923      	ldr	r3, [r4, #16]
 8012742:	68a2      	ldr	r2, [r4, #8]
 8012744:	f3bf 8f5b 	dmb	ish
 8012748:	3301      	adds	r3, #1
 801274a:	429a      	cmp	r2, r3
 801274c:	bfd8      	it	le
 801274e:	1a9b      	suble	r3, r3, r2
 8012750:	6123      	str	r3, [r4, #16]
 8012752:	bd10      	pop	{r4, pc}
 8012754:	08026dd7 	.word	0x08026dd7
 8012758:	08026ef6 	.word	0x08026ef6
 801275c:	08026d8e 	.word	0x08026d8e

08012760 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8012760:	b570      	push	{r4, r5, r6, lr}
 8012762:	4604      	mov	r4, r0
 8012764:	6840      	ldr	r0, [r0, #4]
 8012766:	6803      	ldr	r3, [r0, #0]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	4798      	blx	r3
 801276c:	4605      	mov	r5, r0
 801276e:	b930      	cbnz	r0, 801277e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8012770:	7a23      	ldrb	r3, [r4, #8]
 8012772:	b123      	cbz	r3, 801277e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8012774:	6860      	ldr	r0, [r4, #4]
 8012776:	6803      	ldr	r3, [r0, #0]
 8012778:	695b      	ldr	r3, [r3, #20]
 801277a:	4798      	blx	r3
 801277c:	7225      	strb	r5, [r4, #8]
 801277e:	6860      	ldr	r0, [r4, #4]
 8012780:	6803      	ldr	r3, [r0, #0]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	4798      	blx	r3
 8012786:	b928      	cbnz	r0, 8012794 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8012788:	6823      	ldr	r3, [r4, #0]
 801278a:	4620      	mov	r0, r4
 801278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801278e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012792:	4718      	bx	r3
 8012794:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012798:	f7fd b950 	b.w	800fa3c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0801279c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801279c:	b510      	push	{r4, lr}
 801279e:	4c04      	ldr	r4, [pc, #16]	; (80127b0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80127a0:	6082      	str	r2, [r0, #8]
 80127a2:	2200      	movs	r2, #0
 80127a4:	e9c0 4100 	strd	r4, r1, [r0]
 80127a8:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80127ac:	bd10      	pop	{r4, pc}
 80127ae:	bf00      	nop
 80127b0:	08026e5c 	.word	0x08026e5c

080127b4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80127b4:	6840      	ldr	r0, [r0, #4]
 80127b6:	6803      	ldr	r3, [r0, #0]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	4718      	bx	r3

080127bc <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80127bc:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80127c0:	4770      	bx	lr

080127c2 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 80127c2:	b510      	push	{r4, lr}
 80127c4:	4604      	mov	r4, r0
 80127c6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80127c8:	b150      	cbz	r0, 80127e0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80127ca:	6803      	ldr	r3, [r0, #0]
 80127cc:	68db      	ldr	r3, [r3, #12]
 80127ce:	4798      	blx	r3
 80127d0:	b130      	cbz	r0, 80127e0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80127d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80127d4:	6803      	ldr	r3, [r0, #0]
 80127d6:	4621      	mov	r1, r4
 80127d8:	689b      	ldr	r3, [r3, #8]
 80127da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80127de:	4718      	bx	r3
 80127e0:	bd10      	pop	{r4, pc}

080127e2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80127e2:	b570      	push	{r4, r5, r6, lr}
 80127e4:	790b      	ldrb	r3, [r1, #4]
 80127e6:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	bf0c      	ite	eq
 80127ee:	2301      	moveq	r3, #1
 80127f0:	2300      	movne	r3, #0
 80127f2:	4604      	mov	r4, r0
 80127f4:	460e      	mov	r6, r1
 80127f6:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 80127fa:	d109      	bne.n	8012810 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 80127fc:	b14d      	cbz	r5, 8012812 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 80127fe:	7933      	ldrb	r3, [r6, #4]
 8012800:	2b01      	cmp	r3, #1
 8012802:	d10c      	bne.n	801281e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8012804:	6823      	ldr	r3, [r4, #0]
 8012806:	4620      	mov	r0, r4
 8012808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801280a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801280e:	4718      	bx	r3
 8012810:	b12d      	cbz	r5, 801281e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8012812:	6823      	ldr	r3, [r4, #0]
 8012814:	4620      	mov	r0, r4
 8012816:	695b      	ldr	r3, [r3, #20]
 8012818:	4798      	blx	r3
 801281a:	2d00      	cmp	r5, #0
 801281c:	d1ef      	bne.n	80127fe <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801281e:	bd70      	pop	{r4, r5, r6, pc}

08012820 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 8012820:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8012824:	b133      	cbz	r3, 8012834 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 8012826:	790b      	ldrb	r3, [r1, #4]
 8012828:	2b01      	cmp	r3, #1
 801282a:	bf01      	itttt	eq
 801282c:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 801282e:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 8012830:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 8012832:	8603      	strheq	r3, [r0, #48]	; 0x30
 8012834:	f7ff bfd5 	b.w	80127e2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

08012838 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8012838:	2200      	movs	r2, #0
 801283a:	8002      	strh	r2, [r0, #0]
 801283c:	8042      	strh	r2, [r0, #2]
 801283e:	8082      	strh	r2, [r0, #4]
 8012840:	80c2      	strh	r2, [r0, #6]
 8012842:	4770      	bx	lr

08012844 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8012844:	b570      	push	{r4, r5, r6, lr}
 8012846:	6803      	ldr	r3, [r0, #0]
 8012848:	4604      	mov	r4, r0
 801284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801284c:	4615      	mov	r5, r2
 801284e:	4798      	blx	r3
 8012850:	6823      	ldr	r3, [r4, #0]
 8012852:	4629      	mov	r1, r5
 8012854:	4620      	mov	r0, r4
 8012856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012858:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801285c:	4718      	bx	r3
	...

08012860 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8012860:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012862:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8012864:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012868:	4299      	cmp	r1, r3
 801286a:	d029      	beq.n	80128c0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 801286c:	4b15      	ldr	r3, [pc, #84]	; (80128c4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	b92b      	cbnz	r3, 801287e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8012872:	4b15      	ldr	r3, [pc, #84]	; (80128c8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8012874:	4a15      	ldr	r2, [pc, #84]	; (80128cc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8012876:	21b1      	movs	r1, #177	; 0xb1
 8012878:	4815      	ldr	r0, [pc, #84]	; (80128d0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801287a:	f010 ff63 	bl	8023744 <__assert_func>
 801287e:	4a15      	ldr	r2, [pc, #84]	; (80128d4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8012880:	8812      	ldrh	r2, [r2, #0]
 8012882:	428a      	cmp	r2, r1
 8012884:	d803      	bhi.n	801288e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 8012886:	4b14      	ldr	r3, [pc, #80]	; (80128d8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8012888:	4a10      	ldr	r2, [pc, #64]	; (80128cc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801288a:	21b2      	movs	r1, #178	; 0xb2
 801288c:	e7f4      	b.n	8012878 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 801288e:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8012892:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8012896:	4b11      	ldr	r3, [pc, #68]	; (80128dc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8012898:	7854      	ldrb	r4, [r2, #1]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80128a0:	682b      	ldr	r3, [r5, #0]
 80128a2:	69de      	ldr	r6, [r3, #28]
 80128a4:	4b0e      	ldr	r3, [pc, #56]	; (80128e0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 80128a6:	6818      	ldr	r0, [r3, #0]
 80128a8:	f7fc f8b6 	bl	800ea18 <_ZNK8touchgfx5Texts7getTextEt>
 80128ac:	f3c4 0481 	ubfx	r4, r4, #2, #2
 80128b0:	2300      	movs	r3, #0
 80128b2:	4602      	mov	r2, r0
 80128b4:	9300      	str	r3, [sp, #0]
 80128b6:	4621      	mov	r1, r4
 80128b8:	4628      	mov	r0, r5
 80128ba:	47b0      	blx	r6
 80128bc:	b002      	add	sp, #8
 80128be:	bd70      	pop	{r4, r5, r6, pc}
 80128c0:	2000      	movs	r0, #0
 80128c2:	e7fb      	b.n	80128bc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 80128c4:	2000a08c 	.word	0x2000a08c
 80128c8:	08026413 	.word	0x08026413
 80128cc:	0802707c 	.word	0x0802707c
 80128d0:	08026455 	.word	0x08026455
 80128d4:	2000a090 	.word	0x2000a090
 80128d8:	0802647e 	.word	0x0802647e
 80128dc:	2000a094 	.word	0x2000a094
 80128e0:	2000a098 	.word	0x2000a098

080128e4 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 80128e4:	b570      	push	{r4, r5, r6, lr}
 80128e6:	6803      	ldr	r3, [r0, #0]
 80128e8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80128ea:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80128ec:	4b11      	ldr	r3, [pc, #68]	; (8012934 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	4604      	mov	r4, r0
 80128f2:	b28d      	uxth	r5, r1
 80128f4:	b92b      	cbnz	r3, 8012902 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 80128f6:	4b10      	ldr	r3, [pc, #64]	; (8012938 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 80128f8:	4a10      	ldr	r2, [pc, #64]	; (801293c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80128fa:	21b1      	movs	r1, #177	; 0xb1
 80128fc:	4810      	ldr	r0, [pc, #64]	; (8012940 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 80128fe:	f010 ff21 	bl	8023744 <__assert_func>
 8012902:	4910      	ldr	r1, [pc, #64]	; (8012944 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8012904:	8809      	ldrh	r1, [r1, #0]
 8012906:	4291      	cmp	r1, r2
 8012908:	d803      	bhi.n	8012912 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 801290a:	4b0f      	ldr	r3, [pc, #60]	; (8012948 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 801290c:	4a0b      	ldr	r2, [pc, #44]	; (801293c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 801290e:	21b2      	movs	r1, #178	; 0xb2
 8012910:	e7f4      	b.n	80128fc <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8012912:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8012916:	4b0d      	ldr	r3, [pc, #52]	; (801294c <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801291e:	6803      	ldr	r3, [r0, #0]
 8012920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012922:	4798      	blx	r3
 8012924:	1a29      	subs	r1, r5, r0
 8012926:	4633      	mov	r3, r6
 8012928:	4620      	mov	r0, r4
 801292a:	b209      	sxth	r1, r1
 801292c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012930:	4718      	bx	r3
 8012932:	bf00      	nop
 8012934:	2000a08c 	.word	0x2000a08c
 8012938:	08026413 	.word	0x08026413
 801293c:	0802707c 	.word	0x0802707c
 8012940:	08026455 	.word	0x08026455
 8012944:	2000a090 	.word	0x2000a090
 8012948:	0802647e 	.word	0x0802647e
 801294c:	2000a094 	.word	0x2000a094

08012950 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8012950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012954:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8012956:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801295a:	4293      	cmp	r3, r2
 801295c:	b08c      	sub	sp, #48	; 0x30
 801295e:	4604      	mov	r4, r0
 8012960:	4688      	mov	r8, r1
 8012962:	d05f      	beq.n	8012a24 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8012964:	4e31      	ldr	r6, [pc, #196]	; (8012a2c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8012966:	6832      	ldr	r2, [r6, #0]
 8012968:	b92a      	cbnz	r2, 8012976 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 801296a:	4b31      	ldr	r3, [pc, #196]	; (8012a30 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 801296c:	4a31      	ldr	r2, [pc, #196]	; (8012a34 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 801296e:	21b1      	movs	r1, #177	; 0xb1
 8012970:	4831      	ldr	r0, [pc, #196]	; (8012a38 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8012972:	f010 fee7 	bl	8023744 <__assert_func>
 8012976:	4d31      	ldr	r5, [pc, #196]	; (8012a3c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8012978:	8829      	ldrh	r1, [r5, #0]
 801297a:	4299      	cmp	r1, r3
 801297c:	d803      	bhi.n	8012986 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 801297e:	4b30      	ldr	r3, [pc, #192]	; (8012a40 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8012980:	4a2c      	ldr	r2, [pc, #176]	; (8012a34 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8012982:	21b2      	movs	r1, #178	; 0xb2
 8012984:	e7f4      	b.n	8012970 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8012986:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801298a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801298e:	4b2d      	ldr	r3, [pc, #180]	; (8012a44 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012996:	2a00      	cmp	r2, #0
 8012998:	d044      	beq.n	8012a24 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 801299a:	784b      	ldrb	r3, [r1, #1]
 801299c:	9207      	str	r2, [sp, #28]
 801299e:	f3c3 0901 	ubfx	r9, r3, #0, #2
 80129a2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80129a6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80129aa:	4b27      	ldr	r3, [pc, #156]	; (8012a48 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 80129ac:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 80129b6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80129ba:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 80129be:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 80129c2:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 80129c6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80129c8:	9009      	str	r0, [sp, #36]	; 0x24
 80129ca:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 80129ce:	f88d 9020 	strb.w	r9, [sp, #32]
 80129d2:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 80129d6:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 80129da:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 80129de:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 80129e2:	b10a      	cbz	r2, 80129e8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 80129e4:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 80129e6:	b907      	cbnz	r7, 80129ea <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 80129e8:	689f      	ldr	r7, [r3, #8]
 80129ea:	f10d 0914 	add.w	r9, sp, #20
 80129ee:	4621      	mov	r1, r4
 80129f0:	4648      	mov	r0, r9
 80129f2:	f002 ff94 	bl	801591e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80129f6:	6833      	ldr	r3, [r6, #0]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d0b6      	beq.n	801296a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 80129fc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80129fe:	882b      	ldrh	r3, [r5, #0]
 8012a00:	428b      	cmp	r3, r1
 8012a02:	d9bc      	bls.n	801297e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8012a04:	4b11      	ldr	r3, [pc, #68]	; (8012a4c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 8012a06:	6818      	ldr	r0, [r3, #0]
 8012a08:	f7fc f806 	bl	800ea18 <_ZNK8touchgfx5Texts7getTextEt>
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012a12:	ab07      	add	r3, sp, #28
 8012a14:	9001      	str	r0, [sp, #4]
 8012a16:	9300      	str	r3, [sp, #0]
 8012a18:	e899 0006 	ldmia.w	r9, {r1, r2}
 8012a1c:	4643      	mov	r3, r8
 8012a1e:	4638      	mov	r0, r7
 8012a20:	f7fb ff8b 	bl	800e93a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8012a24:	b00c      	add	sp, #48	; 0x30
 8012a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a2a:	bf00      	nop
 8012a2c:	2000a08c 	.word	0x2000a08c
 8012a30:	08026413 	.word	0x08026413
 8012a34:	0802707c 	.word	0x0802707c
 8012a38:	08026455 	.word	0x08026455
 8012a3c:	2000a090 	.word	0x2000a090
 8012a40:	0802647e 	.word	0x0802647e
 8012a44:	2000a094 	.word	0x2000a094
 8012a48:	2000a03c 	.word	0x2000a03c
 8012a4c:	2000a098 	.word	0x2000a098

08012a50 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8012a50:	b40e      	push	{r1, r2, r3}
 8012a52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a56:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8012a58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a5c:	4293      	cmp	r3, r2
 8012a5e:	b09b      	sub	sp, #108	; 0x6c
 8012a60:	4604      	mov	r4, r0
 8012a62:	d061      	beq.n	8012b28 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
 8012a64:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012b3c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 8012a68:	aa24      	add	r2, sp, #144	; 0x90
 8012a6a:	9203      	str	r2, [sp, #12]
 8012a6c:	f8da 2000 	ldr.w	r2, [sl]
 8012a70:	b92a      	cbnz	r2, 8012a7e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8012a72:	4b2e      	ldr	r3, [pc, #184]	; (8012b2c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>)
 8012a74:	4a2e      	ldr	r2, [pc, #184]	; (8012b30 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 8012a76:	21b1      	movs	r1, #177	; 0xb1
 8012a78:	482e      	ldr	r0, [pc, #184]	; (8012b34 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>)
 8012a7a:	f010 fe63 	bl	8023744 <__assert_func>
 8012a7e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8012b40 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>
 8012a82:	f8b8 1000 	ldrh.w	r1, [r8]
 8012a86:	4299      	cmp	r1, r3
 8012a88:	d803      	bhi.n	8012a92 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 8012a8a:	4b2b      	ldr	r3, [pc, #172]	; (8012b38 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 8012a8c:	4a28      	ldr	r2, [pc, #160]	; (8012b30 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 8012a8e:	21b2      	movs	r1, #178	; 0xb2
 8012a90:	e7f2      	b.n	8012a78 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 8012a92:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8012b44 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>
 8012a96:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8012a9a:	f8d9 3000 	ldr.w	r3, [r9]
 8012a9e:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8012aa2:	683b      	ldr	r3, [r7, #0]
 8012aa4:	4638      	mov	r0, r7
 8012aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012aa8:	4798      	blx	r3
 8012aaa:	4606      	mov	r6, r0
 8012aac:	b205      	sxth	r5, r0
 8012aae:	a804      	add	r0, sp, #16
 8012ab0:	f003 fb49 	bl	8016146 <_ZN8touchgfx12TextProviderC1Ev>
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	4638      	mov	r0, r7
 8012ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012aba:	4798      	blx	r3
 8012abc:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8012abe:	9a03      	ldr	r2, [sp, #12]
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	a804      	add	r0, sp, #16
 8012ac4:	f003 fb84 	bl	80161d0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8012ac8:	f8da 3000 	ldr.w	r3, [sl]
 8012acc:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d0ce      	beq.n	8012a72 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8012ad4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8012ad6:	f8b8 0000 	ldrh.w	r0, [r8]
 8012ada:	4290      	cmp	r0, r2
 8012adc:	d9d5      	bls.n	8012a8a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 8012ade:	eb03 0742 	add.w	r7, r3, r2, lsl #1
 8012ae2:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8012ae6:	787a      	ldrb	r2, [r7, #1]
 8012ae8:	f8d9 3000 	ldr.w	r3, [r9]
 8012aec:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
 8012af0:	9700      	str	r7, [sp, #0]
 8012af2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012af6:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8012afa:	a804      	add	r0, sp, #16
 8012afc:	f001 fa7a 	bl	8013ff4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8012b00:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8012b04:	18a9      	adds	r1, r5, r2
 8012b06:	2900      	cmp	r1, #0
 8012b08:	b203      	sxth	r3, r0
 8012b0a:	dd0b      	ble.n	8012b24 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 8012b0c:	3b01      	subs	r3, #1
 8012b0e:	fb13 f302 	smulbb	r3, r3, r2
 8012b12:	fb16 3300 	smlabb	r3, r6, r0, r3
 8012b16:	b21d      	sxth	r5, r3
 8012b18:	4628      	mov	r0, r5
 8012b1a:	b01b      	add	sp, #108	; 0x6c
 8012b1c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b20:	b003      	add	sp, #12
 8012b22:	4770      	bx	lr
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	dcf7      	bgt.n	8012b18 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8012b28:	2500      	movs	r5, #0
 8012b2a:	e7f5      	b.n	8012b18 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8012b2c:	08026413 	.word	0x08026413
 8012b30:	0802707c 	.word	0x0802707c
 8012b34:	08026455 	.word	0x08026455
 8012b38:	0802647e 	.word	0x0802647e
 8012b3c:	2000a08c 	.word	0x2000a08c
 8012b40:	2000a090 	.word	0x2000a090
 8012b44:	2000a094 	.word	0x2000a094

08012b48 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8012b48:	b570      	push	{r4, r5, r6, lr}
 8012b4a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8012b4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012b50:	4299      	cmp	r1, r3
 8012b52:	4604      	mov	r4, r0
 8012b54:	d01e      	beq.n	8012b94 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8012b56:	6803      	ldr	r3, [r0, #0]
 8012b58:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8012b5a:	4b0f      	ldr	r3, [pc, #60]	; (8012b98 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	b92b      	cbnz	r3, 8012b6c <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8012b60:	4b0e      	ldr	r3, [pc, #56]	; (8012b9c <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 8012b62:	4a0f      	ldr	r2, [pc, #60]	; (8012ba0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8012b64:	21b1      	movs	r1, #177	; 0xb1
 8012b66:	480f      	ldr	r0, [pc, #60]	; (8012ba4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8012b68:	f010 fdec 	bl	8023744 <__assert_func>
 8012b6c:	4b0e      	ldr	r3, [pc, #56]	; (8012ba8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 8012b6e:	881b      	ldrh	r3, [r3, #0]
 8012b70:	428b      	cmp	r3, r1
 8012b72:	d803      	bhi.n	8012b7c <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8012b74:	4b0d      	ldr	r3, [pc, #52]	; (8012bac <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8012b76:	4a0a      	ldr	r2, [pc, #40]	; (8012ba0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8012b78:	21b2      	movs	r1, #178	; 0xb2
 8012b7a:	e7f4      	b.n	8012b66 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8012b7c:	4b0c      	ldr	r3, [pc, #48]	; (8012bb0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 8012b7e:	6818      	ldr	r0, [r3, #0]
 8012b80:	f7fb ff4a 	bl	800ea18 <_ZNK8touchgfx5Texts7getTextEt>
 8012b84:	2300      	movs	r3, #0
 8012b86:	4601      	mov	r1, r0
 8012b88:	46ac      	mov	ip, r5
 8012b8a:	4620      	mov	r0, r4
 8012b8c:	461a      	mov	r2, r3
 8012b8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b92:	4760      	bx	ip
 8012b94:	2000      	movs	r0, #0
 8012b96:	bd70      	pop	{r4, r5, r6, pc}
 8012b98:	2000a08c 	.word	0x2000a08c
 8012b9c:	08026413 	.word	0x08026413
 8012ba0:	0802707c 	.word	0x0802707c
 8012ba4:	08026455 	.word	0x08026455
 8012ba8:	2000a090 	.word	0x2000a090
 8012bac:	0802647e 	.word	0x0802647e
 8012bb0:	2000a098 	.word	0x2000a098

08012bb4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8012bb4:	b538      	push	{r3, r4, r5, lr}
 8012bb6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8012bb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012bbc:	429a      	cmp	r2, r3
 8012bbe:	4604      	mov	r4, r0
 8012bc0:	d014      	beq.n	8012bec <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8012bc2:	6803      	ldr	r3, [r0, #0]
 8012bc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012bc6:	4798      	blx	r3
 8012bc8:	6823      	ldr	r3, [r4, #0]
 8012bca:	4605      	mov	r5, r0
 8012bcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012bce:	4620      	mov	r0, r4
 8012bd0:	4798      	blx	r3
 8012bd2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012bd6:	b22d      	sxth	r5, r5
 8012bd8:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8012bdc:	4601      	mov	r1, r0
 8012bde:	bf06      	itte	eq
 8012be0:	4602      	moveq	r2, r0
 8012be2:	4629      	moveq	r1, r5
 8012be4:	462a      	movne	r2, r5
 8012be6:	4620      	mov	r0, r4
 8012be8:	f7fa fd58 	bl	800d69c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8012bec:	bd38      	pop	{r3, r4, r5, pc}

08012bee <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8012bee:	888a      	ldrh	r2, [r1, #4]
 8012bf0:	8582      	strh	r2, [r0, #44]	; 0x2c
 8012bf2:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8012bf6:	b922      	cbnz	r2, 8012c02 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 8012bf8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8012bfc:	b90b      	cbnz	r3, 8012c02 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 8012bfe:	f7ff bfd9 	b.w	8012bb4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8012c02:	4770      	bx	lr

08012c04 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8012c04:	2300      	movs	r3, #0
 8012c06:	8083      	strh	r3, [r0, #4]
 8012c08:	80c3      	strh	r3, [r0, #6]
 8012c0a:	8003      	strh	r3, [r0, #0]
 8012c0c:	8043      	strh	r3, [r0, #2]
 8012c0e:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8012c12:	2bff      	cmp	r3, #255	; 0xff
 8012c14:	bf01      	itttt	eq
 8012c16:	890b      	ldrheq	r3, [r1, #8]
 8012c18:	8083      	strheq	r3, [r0, #4]
 8012c1a:	894b      	ldrheq	r3, [r1, #10]
 8012c1c:	80c3      	strheq	r3, [r0, #6]
 8012c1e:	4770      	bx	lr

08012c20 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8012c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012c22:	4604      	mov	r4, r0
 8012c24:	6808      	ldr	r0, [r1, #0]
 8012c26:	6849      	ldr	r1, [r1, #4]
 8012c28:	466b      	mov	r3, sp
 8012c2a:	c303      	stmia	r3!, {r0, r1}
 8012c2c:	6823      	ldr	r3, [r4, #0]
 8012c2e:	4669      	mov	r1, sp
 8012c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c32:	4620      	mov	r0, r4
 8012c34:	4798      	blx	r3
 8012c36:	4b08      	ldr	r3, [pc, #32]	; (8012c58 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8012c3e:	b10a      	cbz	r2, 8012c44 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8012c40:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8012c42:	b900      	cbnz	r0, 8012c46 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8012c44:	6898      	ldr	r0, [r3, #8]
 8012c46:	6803      	ldr	r3, [r0, #0]
 8012c48:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8012c4a:	699d      	ldr	r5, [r3, #24]
 8012c4c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8012c50:	4669      	mov	r1, sp
 8012c52:	47a8      	blx	r5
 8012c54:	b003      	add	sp, #12
 8012c56:	bd30      	pop	{r4, r5, pc}
 8012c58:	2000a03c 	.word	0x2000a03c

08012c5c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8012c5c:	b570      	push	{r4, r5, r6, lr}
 8012c5e:	880b      	ldrh	r3, [r1, #0]
 8012c60:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8012c62:	4605      	mov	r5, r0
 8012c64:	8813      	ldrh	r3, [r2, #0]
 8012c66:	f825 3f30 	strh.w	r3, [r5, #48]!
 8012c6a:	4604      	mov	r4, r0
 8012c6c:	4628      	mov	r0, r5
 8012c6e:	f004 fe57 	bl	8017920 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012c72:	4606      	mov	r6, r0
 8012c74:	4628      	mov	r0, r5
 8012c76:	f004 fe8d 	bl	8017994 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012c7a:	6823      	ldr	r3, [r4, #0]
 8012c7c:	4605      	mov	r5, r0
 8012c7e:	b231      	sxth	r1, r6
 8012c80:	4620      	mov	r0, r4
 8012c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c84:	4798      	blx	r3
 8012c86:	6823      	ldr	r3, [r4, #0]
 8012c88:	b229      	sxth	r1, r5
 8012c8a:	4620      	mov	r0, r4
 8012c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c92:	4718      	bx	r3

08012c94 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8012c94:	b510      	push	{r4, lr}
 8012c96:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8012c9a:	2bff      	cmp	r3, #255	; 0xff
 8012c9c:	4604      	mov	r4, r0
 8012c9e:	d006      	beq.n	8012cae <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8012ca0:	2300      	movs	r3, #0
 8012ca2:	8003      	strh	r3, [r0, #0]
 8012ca4:	8043      	strh	r3, [r0, #2]
 8012ca6:	8083      	strh	r3, [r0, #4]
 8012ca8:	80c3      	strh	r3, [r0, #6]
 8012caa:	4620      	mov	r0, r4
 8012cac:	bd10      	pop	{r4, pc}
 8012cae:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8012cb2:	b11b      	cbz	r3, 8012cbc <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8012cb4:	3130      	adds	r1, #48	; 0x30
 8012cb6:	f004 fea7 	bl	8017a08 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8012cba:	e7f6      	b.n	8012caa <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8012cbc:	312e      	adds	r1, #46	; 0x2e
 8012cbe:	e7fa      	b.n	8012cb6 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08012cc0 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8012cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cc4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8012cc8:	b08a      	sub	sp, #40	; 0x28
 8012cca:	4604      	mov	r4, r0
 8012ccc:	4688      	mov	r8, r1
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d044      	beq.n	8012d5c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 8012cd2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8012cd4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012cd8:	a805      	add	r0, sp, #20
 8012cda:	f004 fe21 	bl	8017920 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012cde:	4605      	mov	r5, r0
 8012ce0:	b206      	sxth	r6, r0
 8012ce2:	a805      	add	r0, sp, #20
 8012ce4:	f004 fe56 	bl	8017994 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012ce8:	f9b8 2000 	ldrsh.w	r2, [r8]
 8012cec:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8012cf0:	4417      	add	r7, r2
 8012cf2:	b2bf      	uxth	r7, r7
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	fa0f fe87 	sxth.w	lr, r7
 8012cfa:	459e      	cmp	lr, r3
 8012cfc:	fa0f fc80 	sxth.w	ip, r0
 8012d00:	9306      	str	r3, [sp, #24]
 8012d02:	dd2d      	ble.n	8012d60 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8012d04:	4296      	cmp	r6, r2
 8012d06:	dd2b      	ble.n	8012d60 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8012d08:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8012d0c:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 8012d10:	4419      	add	r1, r3
 8012d12:	b289      	uxth	r1, r1
 8012d14:	fa0f f881 	sxth.w	r8, r1
 8012d18:	f1b8 0f00 	cmp.w	r8, #0
 8012d1c:	dd20      	ble.n	8012d60 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8012d1e:	459c      	cmp	ip, r3
 8012d20:	dd1e      	ble.n	8012d60 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8012d22:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8012d26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012d2a:	4576      	cmp	r6, lr
 8012d2c:	bfa8      	it	ge
 8012d2e:	463d      	movge	r5, r7
 8012d30:	45c4      	cmp	ip, r8
 8012d32:	bfa8      	it	ge
 8012d34:	4608      	movge	r0, r1
 8012d36:	1aad      	subs	r5, r5, r2
 8012d38:	1ac0      	subs	r0, r0, r3
 8012d3a:	f8ad 501c 	strh.w	r5, [sp, #28]
 8012d3e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8012d42:	f8ad 2018 	strh.w	r2, [sp, #24]
 8012d46:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012d4a:	4b1f      	ldr	r3, [pc, #124]	; (8012dc8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	b953      	cbnz	r3, 8012d66 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 8012d50:	4b1e      	ldr	r3, [pc, #120]	; (8012dcc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 8012d52:	4a1f      	ldr	r2, [pc, #124]	; (8012dd0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 8012d54:	481f      	ldr	r0, [pc, #124]	; (8012dd4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 8012d56:	218b      	movs	r1, #139	; 0x8b
 8012d58:	f010 fcf4 	bl	8023744 <__assert_func>
 8012d5c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8012d5e:	e7b9      	b.n	8012cd4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8012d60:	2300      	movs	r3, #0
 8012d62:	9307      	str	r3, [sp, #28]
 8012d64:	e7f1      	b.n	8012d4a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 8012d66:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8012d6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012d6e:	429a      	cmp	r2, r3
 8012d70:	d026      	beq.n	8012dc0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8012d72:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	dd22      	ble.n	8012dc0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8012d7a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	dd1e      	ble.n	8012dc0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8012d82:	2300      	movs	r3, #0
 8012d84:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8012d88:	6823      	ldr	r3, [r4, #0]
 8012d8a:	a908      	add	r1, sp, #32
 8012d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d8e:	4620      	mov	r0, r4
 8012d90:	4798      	blx	r3
 8012d92:	4b11      	ldr	r3, [pc, #68]	; (8012dd8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8012d9a:	b10a      	cbz	r2, 8012da0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8012d9c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8012d9e:	b900      	cbnz	r0, 8012da2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 8012da0:	6898      	ldr	r0, [r3, #8]
 8012da2:	6801      	ldr	r1, [r0, #0]
 8012da4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8012da8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8012dac:	2501      	movs	r5, #1
 8012dae:	9502      	str	r5, [sp, #8]
 8012db0:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8012db4:	9401      	str	r4, [sp, #4]
 8012db6:	ac06      	add	r4, sp, #24
 8012db8:	9400      	str	r4, [sp, #0]
 8012dba:	688c      	ldr	r4, [r1, #8]
 8012dbc:	a905      	add	r1, sp, #20
 8012dbe:	47a0      	blx	r4
 8012dc0:	b00a      	add	sp, #40	; 0x28
 8012dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dc6:	bf00      	nop
 8012dc8:	2000a0c4 	.word	0x2000a0c4
 8012dcc:	08027110 	.word	0x08027110
 8012dd0:	080271e4 	.word	0x080271e4
 8012dd4:	0802714c 	.word	0x0802714c
 8012dd8:	2000a03c 	.word	0x2000a03c

08012ddc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8012ddc:	b570      	push	{r4, r5, r6, lr}
 8012dde:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8012de0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012de4:	4299      	cmp	r1, r3
 8012de6:	4604      	mov	r4, r0
 8012de8:	d01e      	beq.n	8012e28 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 8012dea:	6803      	ldr	r3, [r0, #0]
 8012dec:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8012dee:	4b0f      	ldr	r3, [pc, #60]	; (8012e2c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	b92b      	cbnz	r3, 8012e00 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 8012df4:	4b0e      	ldr	r3, [pc, #56]	; (8012e30 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 8012df6:	4a0f      	ldr	r2, [pc, #60]	; (8012e34 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8012df8:	21b1      	movs	r1, #177	; 0xb1
 8012dfa:	480f      	ldr	r0, [pc, #60]	; (8012e38 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 8012dfc:	f010 fca2 	bl	8023744 <__assert_func>
 8012e00:	4b0e      	ldr	r3, [pc, #56]	; (8012e3c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 8012e02:	881b      	ldrh	r3, [r3, #0]
 8012e04:	428b      	cmp	r3, r1
 8012e06:	d803      	bhi.n	8012e10 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 8012e08:	4b0d      	ldr	r3, [pc, #52]	; (8012e40 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 8012e0a:	4a0a      	ldr	r2, [pc, #40]	; (8012e34 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8012e0c:	21b2      	movs	r1, #178	; 0xb2
 8012e0e:	e7f4      	b.n	8012dfa <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 8012e10:	4b0c      	ldr	r3, [pc, #48]	; (8012e44 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 8012e12:	6818      	ldr	r0, [r3, #0]
 8012e14:	f7fb fe00 	bl	800ea18 <_ZNK8touchgfx5Texts7getTextEt>
 8012e18:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8012e1a:	4601      	mov	r1, r0
 8012e1c:	46ac      	mov	ip, r5
 8012e1e:	4620      	mov	r0, r4
 8012e20:	2300      	movs	r3, #0
 8012e22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e26:	4760      	bx	ip
 8012e28:	2000      	movs	r0, #0
 8012e2a:	bd70      	pop	{r4, r5, r6, pc}
 8012e2c:	2000a08c 	.word	0x2000a08c
 8012e30:	08026413 	.word	0x08026413
 8012e34:	08027290 	.word	0x08027290
 8012e38:	08026455 	.word	0x08026455
 8012e3c:	2000a090 	.word	0x2000a090
 8012e40:	0802647e 	.word	0x0802647e
 8012e44:	2000a098 	.word	0x2000a098

08012e48 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8012e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e4c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8012e4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012e52:	4293      	cmp	r3, r2
 8012e54:	b08c      	sub	sp, #48	; 0x30
 8012e56:	4604      	mov	r4, r0
 8012e58:	460e      	mov	r6, r1
 8012e5a:	d05d      	beq.n	8012f18 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8012e5c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8012f3c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 8012e60:	f8d8 2000 	ldr.w	r2, [r8]
 8012e64:	b92a      	cbnz	r2, 8012e72 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 8012e66:	4b2e      	ldr	r3, [pc, #184]	; (8012f20 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 8012e68:	4a2e      	ldr	r2, [pc, #184]	; (8012f24 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8012e6a:	21b1      	movs	r1, #177	; 0xb1
 8012e6c:	482e      	ldr	r0, [pc, #184]	; (8012f28 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 8012e6e:	f010 fc69 	bl	8023744 <__assert_func>
 8012e72:	4f2e      	ldr	r7, [pc, #184]	; (8012f2c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 8012e74:	8839      	ldrh	r1, [r7, #0]
 8012e76:	4299      	cmp	r1, r3
 8012e78:	d803      	bhi.n	8012e82 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 8012e7a:	4b2d      	ldr	r3, [pc, #180]	; (8012f30 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 8012e7c:	4a29      	ldr	r2, [pc, #164]	; (8012f24 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8012e7e:	21b2      	movs	r1, #178	; 0xb2
 8012e80:	e7f4      	b.n	8012e6c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 8012e82:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8012e86:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8012e8a:	4b2a      	ldr	r3, [pc, #168]	; (8012f34 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012e92:	2a00      	cmp	r2, #0
 8012e94:	d040      	beq.n	8012f18 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8012e96:	784b      	ldrb	r3, [r1, #1]
 8012e98:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8012e9c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8012ea0:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8012ea4:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 8012ea8:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 8012eac:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8012eae:	9207      	str	r2, [sp, #28]
 8012eb0:	f3c3 0901 	ubfx	r9, r3, #0, #2
 8012eb4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8012eb8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8012ebc:	f88d 9020 	strb.w	r9, [sp, #32]
 8012ec0:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8012ec4:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8012ec8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8012ecc:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8012ed0:	9009      	str	r0, [sp, #36]	; 0x24
 8012ed2:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8012ed6:	f7f9 fe29 	bl	800cb2c <_ZN8touchgfx3HAL3lcdEv>
 8012eda:	ad05      	add	r5, sp, #20
 8012edc:	4681      	mov	r9, r0
 8012ede:	4621      	mov	r1, r4
 8012ee0:	4628      	mov	r0, r5
 8012ee2:	f002 fd1c 	bl	801591e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012ee6:	f8d8 3000 	ldr.w	r3, [r8]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d0bb      	beq.n	8012e66 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 8012eee:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8012ef0:	883b      	ldrh	r3, [r7, #0]
 8012ef2:	428b      	cmp	r3, r1
 8012ef4:	d9c1      	bls.n	8012e7a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 8012ef6:	4b10      	ldr	r3, [pc, #64]	; (8012f38 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 8012ef8:	6818      	ldr	r0, [r3, #0]
 8012efa:	f7fb fd8d 	bl	800ea18 <_ZNK8touchgfx5Texts7getTextEt>
 8012efe:	2300      	movs	r3, #0
 8012f00:	9303      	str	r3, [sp, #12]
 8012f02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012f04:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8012f08:	ab07      	add	r3, sp, #28
 8012f0a:	9300      	str	r3, [sp, #0]
 8012f0c:	e895 0006 	ldmia.w	r5, {r1, r2}
 8012f10:	4633      	mov	r3, r6
 8012f12:	4648      	mov	r0, r9
 8012f14:	f7fb fd11 	bl	800e93a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8012f18:	b00c      	add	sp, #48	; 0x30
 8012f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f1e:	bf00      	nop
 8012f20:	08026413 	.word	0x08026413
 8012f24:	08027290 	.word	0x08027290
 8012f28:	08026455 	.word	0x08026455
 8012f2c:	2000a090 	.word	0x2000a090
 8012f30:	0802647e 	.word	0x0802647e
 8012f34:	2000a094 	.word	0x2000a094
 8012f38:	2000a098 	.word	0x2000a098
 8012f3c:	2000a08c 	.word	0x2000a08c

08012f40 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8012f40:	b570      	push	{r4, r5, r6, lr}
 8012f42:	880b      	ldrh	r3, [r1, #0]
 8012f44:	84c3      	strh	r3, [r0, #38]	; 0x26
 8012f46:	4604      	mov	r4, r0
 8012f48:	4608      	mov	r0, r1
 8012f4a:	460d      	mov	r5, r1
 8012f4c:	f004 fce8 	bl	8017920 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012f50:	4606      	mov	r6, r0
 8012f52:	4628      	mov	r0, r5
 8012f54:	f004 fd1e 	bl	8017994 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012f58:	6823      	ldr	r3, [r4, #0]
 8012f5a:	4605      	mov	r5, r0
 8012f5c:	b231      	sxth	r1, r6
 8012f5e:	4620      	mov	r0, r4
 8012f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f62:	4798      	blx	r3
 8012f64:	6823      	ldr	r3, [r4, #0]
 8012f66:	b229      	sxth	r1, r5
 8012f68:	4620      	mov	r0, r4
 8012f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f70:	4718      	bx	r3

08012f72 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8012f72:	b510      	push	{r4, lr}
 8012f74:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8012f78:	2bff      	cmp	r3, #255	; 0xff
 8012f7a:	4604      	mov	r4, r0
 8012f7c:	d006      	beq.n	8012f8c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8012f7e:	2300      	movs	r3, #0
 8012f80:	8003      	strh	r3, [r0, #0]
 8012f82:	8043      	strh	r3, [r0, #2]
 8012f84:	8083      	strh	r3, [r0, #4]
 8012f86:	80c3      	strh	r3, [r0, #6]
 8012f88:	4620      	mov	r0, r4
 8012f8a:	bd10      	pop	{r4, pc}
 8012f8c:	3126      	adds	r1, #38	; 0x26
 8012f8e:	f004 fd3b 	bl	8017a08 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8012f92:	e7f9      	b.n	8012f88 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08012f94 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8012f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f98:	4604      	mov	r4, r0
 8012f9a:	b088      	sub	sp, #32
 8012f9c:	f854 3b26 	ldr.w	r3, [r4], #38
 8012fa0:	2500      	movs	r5, #0
 8012fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fa4:	460f      	mov	r7, r1
 8012fa6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012faa:	a904      	add	r1, sp, #16
 8012fac:	4606      	mov	r6, r0
 8012fae:	4798      	blx	r3
 8012fb0:	4620      	mov	r0, r4
 8012fb2:	f004 fcb5 	bl	8017920 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012fb6:	4680      	mov	r8, r0
 8012fb8:	4620      	mov	r0, r4
 8012fba:	f004 fceb 	bl	8017994 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012fbe:	9506      	str	r5, [sp, #24]
 8012fc0:	ad06      	add	r5, sp, #24
 8012fc2:	f8ad 001e 	strh.w	r0, [sp, #30]
 8012fc6:	4639      	mov	r1, r7
 8012fc8:	4628      	mov	r0, r5
 8012fca:	f8ad 801c 	strh.w	r8, [sp, #28]
 8012fce:	f7fe fc13 	bl	80117f8 <_ZN8touchgfx4RectaNERKS0_>
 8012fd2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	dd19      	ble.n	801300e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8012fda:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	dd15      	ble.n	801300e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8012fe2:	4b0c      	ldr	r3, [pc, #48]	; (8013014 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8012fea:	b10a      	cbz	r2, 8012ff0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8012fec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8012fee:	b900      	cbnz	r0, 8012ff2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8012ff0:	6898      	ldr	r0, [r3, #8]
 8012ff2:	6801      	ldr	r1, [r0, #0]
 8012ff4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8012ff8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8012ffc:	2701      	movs	r7, #1
 8012ffe:	9702      	str	r7, [sp, #8]
 8013000:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8013004:	e9cd 5600 	strd	r5, r6, [sp]
 8013008:	688d      	ldr	r5, [r1, #8]
 801300a:	4621      	mov	r1, r4
 801300c:	47a8      	blx	r5
 801300e:	b008      	add	sp, #32
 8013010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013014:	2000a03c 	.word	0x2000a03c

08013018 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8013018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801301c:	4696      	mov	lr, r2
 801301e:	4605      	mov	r5, r0
 8013020:	4614      	mov	r4, r2
 8013022:	460e      	mov	r6, r1
 8013024:	461f      	mov	r7, r3
 8013026:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801302a:	b097      	sub	sp, #92	; 0x5c
 801302c:	f10d 0c1c 	add.w	ip, sp, #28
 8013030:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013034:	f8de 3000 	ldr.w	r3, [lr]
 8013038:	f8cc 3000 	str.w	r3, [ip]
 801303c:	f104 0e14 	add.w	lr, r4, #20
 8013040:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013044:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8013048:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801304c:	f8de 3000 	ldr.w	r3, [lr]
 8013050:	f8cc 3000 	str.w	r3, [ip]
 8013054:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8013058:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801305c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8013060:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013064:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8013068:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801306c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8013070:	f8de 3000 	ldr.w	r3, [lr]
 8013074:	f8cc 3000 	str.w	r3, [ip]
 8013078:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801307a:	682b      	ldr	r3, [r5, #0]
 801307c:	9201      	str	r2, [sp, #4]
 801307e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8013082:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013084:	9200      	str	r2, [sp, #0]
 8013086:	f8cd 8008 	str.w	r8, [sp, #8]
 801308a:	f8d3 b038 	ldr.w	fp, [r3, #56]	; 0x38
 801308e:	aa07      	add	r2, sp, #28
 8013090:	463b      	mov	r3, r7
 8013092:	4631      	mov	r1, r6
 8013094:	4628      	mov	r0, r5
 8013096:	47d8      	blx	fp
 8013098:	46a6      	mov	lr, r4
 801309a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801309e:	f10d 0c1c 	add.w	ip, sp, #28
 80130a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80130a6:	f8de 3000 	ldr.w	r3, [lr]
 80130aa:	f8cc 3000 	str.w	r3, [ip]
 80130ae:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80130b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80130b6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80130ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80130be:	343c      	adds	r4, #60	; 0x3c
 80130c0:	f8de 3000 	ldr.w	r3, [lr]
 80130c4:	f8cc 3000 	str.w	r3, [ip]
 80130c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80130ca:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80130ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80130d2:	6823      	ldr	r3, [r4, #0]
 80130d4:	f8cc 3000 	str.w	r3, [ip]
 80130d8:	682b      	ldr	r3, [r5, #0]
 80130da:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80130de:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80130e0:	9201      	str	r2, [sp, #4]
 80130e2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80130e4:	9200      	str	r2, [sp, #0]
 80130e6:	f8cd 8008 	str.w	r8, [sp, #8]
 80130ea:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80130ec:	aa07      	add	r2, sp, #28
 80130ee:	463b      	mov	r3, r7
 80130f0:	4631      	mov	r1, r6
 80130f2:	4628      	mov	r0, r5
 80130f4:	47a0      	blx	r4
 80130f6:	b017      	add	sp, #92	; 0x5c
 80130f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080130fc <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80130fc:	2000      	movs	r0, #0
 80130fe:	4770      	bx	lr

08013100 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8013100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013104:	b08d      	sub	sp, #52	; 0x34
 8013106:	4688      	mov	r8, r1
 8013108:	9916      	ldr	r1, [sp, #88]	; 0x58
 801310a:	f8d3 c000 	ldr.w	ip, [r3]
 801310e:	680f      	ldr	r7, [r1, #0]
 8013110:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8013114:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8013118:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801311c:	edd3 6a07 	vldr	s13, [r3, #28]
 8013120:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013122:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8013126:	f9b1 9000 	ldrsh.w	r9, [r1]
 801312a:	f9ba 1000 	ldrsh.w	r1, [sl]
 801312e:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8013132:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8013136:	eba7 070c 	sub.w	r7, r7, ip
 801313a:	42bc      	cmp	r4, r7
 801313c:	bfa8      	it	ge
 801313e:	463c      	movge	r4, r7
 8013140:	ee07 4a90 	vmov	s15, r4
 8013144:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8013148:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801314c:	ee25 4a04 	vmul.f32	s8, s10, s8
 8013150:	ee65 4a24 	vmul.f32	s9, s10, s9
 8013154:	ee25 5a27 	vmul.f32	s10, s10, s15
 8013158:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801315c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013160:	eb09 0e0c 	add.w	lr, r9, ip
 8013164:	4571      	cmp	r1, lr
 8013166:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801316a:	ee32 1a05 	vadd.f32	s2, s4, s10
 801316e:	ee36 0a84 	vadd.f32	s0, s13, s8
 8013172:	ee61 1a87 	vmul.f32	s3, s3, s14
 8013176:	ee22 2a07 	vmul.f32	s4, s4, s14
 801317a:	f340 808d 	ble.w	8013298 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 801317e:	eba1 060e 	sub.w	r6, r1, lr
 8013182:	fb96 f5f4 	sdiv	r5, r6, r4
 8013186:	ee07 5a10 	vmov	s14, r5
 801318a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801318e:	2d00      	cmp	r5, #0
 8013190:	fb04 6615 	mls	r6, r4, r5, r6
 8013194:	eea7 0a04 	vfma.f32	s0, s14, s8
 8013198:	eee7 0a24 	vfma.f32	s1, s14, s9
 801319c:	eea7 1a05 	vfma.f32	s2, s14, s10
 80131a0:	dd13      	ble.n	80131ca <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 80131a2:	ee70 6a44 	vsub.f32	s13, s0, s8
 80131a6:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80131aa:	eef5 6a40 	vcmp.f32	s13, #0.0
 80131ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131b2:	bf18      	it	ne
 80131b4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80131b8:	ee31 2a45 	vsub.f32	s4, s2, s10
 80131bc:	bf08      	it	eq
 80131be:	eeb0 7a67 	vmoveq.f32	s14, s15
 80131c2:	ee61 1a87 	vmul.f32	s3, s3, s14
 80131c6:	ee22 2a07 	vmul.f32	s4, s4, s14
 80131ca:	fb05 f204 	mul.w	r2, r5, r4
 80131ce:	1abf      	subs	r7, r7, r2
 80131d0:	4494      	add	ip, r2
 80131d2:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80131d6:	4411      	add	r1, r2
 80131d8:	eb09 020c 	add.w	r2, r9, ip
 80131dc:	443a      	add	r2, r7
 80131de:	b209      	sxth	r1, r1
 80131e0:	428a      	cmp	r2, r1
 80131e2:	bfc4      	itt	gt
 80131e4:	eba1 0209 	subgt.w	r2, r1, r9
 80131e8:	eba2 070c 	subgt.w	r7, r2, ip
 80131ec:	2f00      	cmp	r7, #0
 80131ee:	dd50      	ble.n	8013292 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 80131f0:	fb97 f1f4 	sdiv	r1, r7, r4
 80131f4:	fb04 7211 	mls	r2, r4, r1, r7
 80131f8:	b90a      	cbnz	r2, 80131fe <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 80131fa:	3901      	subs	r1, #1
 80131fc:	4622      	mov	r2, r4
 80131fe:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8013202:	6840      	ldr	r0, [r0, #4]
 8013204:	900b      	str	r0, [sp, #44]	; 0x2c
 8013206:	f8d0 a000 	ldr.w	sl, [r0]
 801320a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801320c:	9008      	str	r0, [sp, #32]
 801320e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8013212:	9818      	ldr	r0, [sp, #96]	; 0x60
 8013214:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8013218:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801321c:	695b      	ldr	r3, [r3, #20]
 801321e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013220:	445b      	add	r3, fp
 8013222:	eef0 6a42 	vmov.f32	s13, s4
 8013226:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801322a:	ee21 3a23 	vmul.f32	s6, s2, s7
 801322e:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8013232:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013236:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801323a:	9307      	str	r3, [sp, #28]
 801323c:	ee17 7a90 	vmov	r7, s15
 8013240:	ee73 7a42 	vsub.f32	s15, s6, s4
 8013244:	eeb0 7a61 	vmov.f32	s14, s3
 8013248:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801324c:	ee16 3a90 	vmov	r3, s13
 8013250:	fb97 f7f4 	sdiv	r7, r7, r4
 8013254:	ee17 ca90 	vmov	ip, s15
 8013258:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801325c:	fb9c fcf4 	sdiv	ip, ip, r4
 8013260:	fb0c 3306 	mla	r3, ip, r6, r3
 8013264:	9302      	str	r3, [sp, #8]
 8013266:	ee17 3a10 	vmov	r3, s14
 801326a:	44b6      	add	lr, r6
 801326c:	fb04 e505 	mla	r5, r4, r5, lr
 8013270:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8013274:	fb07 3706 	mla	r7, r7, r6, r3
 8013278:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801327c:	e9cd 4700 	strd	r4, r7, [sp]
 8013280:	2900      	cmp	r1, #0
 8013282:	bfcc      	ite	gt
 8013284:	46a1      	movgt	r9, r4
 8013286:	4691      	movle	r9, r2
 8013288:	eba9 0306 	sub.w	r3, r9, r6
 801328c:	f8da 4008 	ldr.w	r4, [sl, #8]
 8013290:	47a0      	blx	r4
 8013292:	b00d      	add	sp, #52	; 0x34
 8013294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013298:	2500      	movs	r5, #0
 801329a:	462e      	mov	r6, r5
 801329c:	e799      	b.n	80131d2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

080132a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80132a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132a4:	b0db      	sub	sp, #364	; 0x16c
 80132a6:	461d      	mov	r5, r3
 80132a8:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 80132ac:	930a      	str	r3, [sp, #40]	; 0x28
 80132ae:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 80132b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80132b4:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 80132b8:	9310      	str	r3, [sp, #64]	; 0x40
 80132ba:	6803      	ldr	r3, [r0, #0]
 80132bc:	910f      	str	r1, [sp, #60]	; 0x3c
 80132be:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 80132c0:	9009      	str	r0, [sp, #36]	; 0x24
 80132c2:	4614      	mov	r4, r2
 80132c4:	4629      	mov	r1, r5
 80132c6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80132ca:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 80132ce:	47b8      	blx	r7
 80132d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132d2:	6058      	str	r0, [r3, #4]
 80132d4:	2800      	cmp	r0, #0
 80132d6:	f000 83a1 	beq.w	8013a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80132da:	682b      	ldr	r3, [r5, #0]
 80132dc:	9314      	str	r3, [sp, #80]	; 0x50
 80132de:	686b      	ldr	r3, [r5, #4]
 80132e0:	9315      	str	r3, [sp, #84]	; 0x54
 80132e2:	4bc4      	ldr	r3, [pc, #784]	; (80135f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80132e4:	ed94 7a02 	vldr	s14, [r4, #8]
 80132e8:	7819      	ldrb	r1, [r3, #0]
 80132ea:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80132ee:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80132f2:	2900      	cmp	r1, #0
 80132f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80132f8:	bf16      	itet	ne
 80132fa:	4619      	movne	r1, r3
 80132fc:	4611      	moveq	r1, r2
 80132fe:	4613      	movne	r3, r2
 8013300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013304:	9116      	str	r1, [sp, #88]	; 0x58
 8013306:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801330a:	f240 8387 	bls.w	8013a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801330e:	ed94 7a07 	vldr	s14, [r4, #28]
 8013312:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801331a:	f240 837f 	bls.w	8013a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801331e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8013322:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801332a:	f240 8377 	bls.w	8013a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801332e:	6822      	ldr	r2, [r4, #0]
 8013330:	4bb1      	ldr	r3, [pc, #708]	; (80135f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8013332:	429a      	cmp	r2, r3
 8013334:	f2c0 8372 	blt.w	8013a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013338:	49b0      	ldr	r1, [pc, #704]	; (80135fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801333a:	6963      	ldr	r3, [r4, #20]
 801333c:	428a      	cmp	r2, r1
 801333e:	f300 836d 	bgt.w	8013a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013342:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8013346:	48ae      	ldr	r0, [pc, #696]	; (8013600 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8013348:	33ff      	adds	r3, #255	; 0xff
 801334a:	4283      	cmp	r3, r0
 801334c:	f200 8366 	bhi.w	8013a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013350:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013352:	4dac      	ldr	r5, [pc, #688]	; (8013604 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8013354:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8013358:	33ff      	adds	r3, #255	; 0xff
 801335a:	42ab      	cmp	r3, r5
 801335c:	f200 835e 	bhi.w	8013a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013360:	6862      	ldr	r2, [r4, #4]
 8013362:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8013366:	33ff      	adds	r3, #255	; 0xff
 8013368:	4283      	cmp	r3, r0
 801336a:	f200 8357 	bhi.w	8013a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801336e:	69a1      	ldr	r1, [r4, #24]
 8013370:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8013374:	33ff      	adds	r3, #255	; 0xff
 8013376:	4283      	cmp	r3, r0
 8013378:	f200 8350 	bhi.w	8013a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801337c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801337e:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8013382:	30ff      	adds	r0, #255	; 0xff
 8013384:	42a8      	cmp	r0, r5
 8013386:	f200 8349 	bhi.w	8013a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801338a:	428a      	cmp	r2, r1
 801338c:	f280 8110 	bge.w	80135b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8013390:	429a      	cmp	r2, r3
 8013392:	f300 8119 	bgt.w	80135c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8013396:	4299      	cmp	r1, r3
 8013398:	f280 811d 	bge.w	80135d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801339c:	2502      	movs	r5, #2
 801339e:	2701      	movs	r7, #1
 80133a0:	46a9      	mov	r9, r5
 80133a2:	46b8      	mov	r8, r7
 80133a4:	f04f 0a00 	mov.w	sl, #0
 80133a8:	4621      	mov	r1, r4
 80133aa:	a849      	add	r0, sp, #292	; 0x124
 80133ac:	f003 fc84 	bl	8016cb8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80133b0:	4622      	mov	r2, r4
 80133b2:	4653      	mov	r3, sl
 80133b4:	a949      	add	r1, sp, #292	; 0x124
 80133b6:	f8cd 9000 	str.w	r9, [sp]
 80133ba:	a819      	add	r0, sp, #100	; 0x64
 80133bc:	f003 fdac 	bl	8016f18 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80133c0:	4622      	mov	r2, r4
 80133c2:	4653      	mov	r3, sl
 80133c4:	a949      	add	r1, sp, #292	; 0x124
 80133c6:	f8cd 8000 	str.w	r8, [sp]
 80133ca:	a829      	add	r0, sp, #164	; 0xa4
 80133cc:	f003 fda4 	bl	8016f18 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80133d0:	4643      	mov	r3, r8
 80133d2:	4622      	mov	r2, r4
 80133d4:	a949      	add	r1, sp, #292	; 0x124
 80133d6:	f8cd 9000 	str.w	r9, [sp]
 80133da:	a839      	add	r0, sp, #228	; 0xe4
 80133dc:	f003 fd9c 	bl	8016f18 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80133e0:	42af      	cmp	r7, r5
 80133e2:	bfb5      	itete	lt
 80133e4:	2300      	movlt	r3, #0
 80133e6:	2301      	movge	r3, #1
 80133e8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80133ea:	930e      	strge	r3, [sp, #56]	; 0x38
 80133ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80133ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80133f2:	af12      	add	r7, sp, #72	; 0x48
 80133f4:	bfb9      	ittee	lt
 80133f6:	ad29      	addlt	r5, sp, #164	; 0xa4
 80133f8:	ac19      	addlt	r4, sp, #100	; 0x64
 80133fa:	ad19      	addge	r5, sp, #100	; 0x64
 80133fc:	ac29      	addge	r4, sp, #164	; 0xa4
 80133fe:	e887 0003 	stmia.w	r7, {r0, r1}
 8013402:	b928      	cbnz	r0, 8013410 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8013404:	4b80      	ldr	r3, [pc, #512]	; (8013608 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8013406:	6818      	ldr	r0, [r3, #0]
 8013408:	6803      	ldr	r3, [r0, #0]
 801340a:	6a1b      	ldr	r3, [r3, #32]
 801340c:	4798      	blx	r3
 801340e:	6038      	str	r0, [r7, #0]
 8013410:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8013412:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8013416:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801341a:	930c      	str	r3, [sp, #48]	; 0x30
 801341c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801341e:	6963      	ldr	r3, [r4, #20]
 8013420:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8013422:	440b      	add	r3, r1
 8013424:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8013428:	4408      	add	r0, r1
 801342a:	b200      	sxth	r0, r0
 801342c:	4283      	cmp	r3, r0
 801342e:	900d      	str	r0, [sp, #52]	; 0x34
 8013430:	f280 80dd 	bge.w	80135ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8013434:	428b      	cmp	r3, r1
 8013436:	da08      	bge.n	801344a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8013438:	2a00      	cmp	r2, #0
 801343a:	dd06      	ble.n	801344a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801343c:	1acb      	subs	r3, r1, r3
 801343e:	429a      	cmp	r2, r3
 8013440:	f2c0 80e4 	blt.w	801360c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8013444:	2b00      	cmp	r3, #0
 8013446:	f300 80e2 	bgt.w	801360e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801344a:	6967      	ldr	r7, [r4, #20]
 801344c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801344e:	443b      	add	r3, r7
 8013450:	461f      	mov	r7, r3
 8013452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013454:	1bdf      	subs	r7, r3, r7
 8013456:	4297      	cmp	r7, r2
 8013458:	bfa8      	it	ge
 801345a:	4617      	movge	r7, r2
 801345c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8013460:	2f00      	cmp	r7, #0
 8013462:	f340 8166 	ble.w	8013732 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8013466:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8013468:	6829      	ldr	r1, [r5, #0]
 801346a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801346e:	f9bb 3000 	ldrsh.w	r3, [fp]
 8013472:	6820      	ldr	r0, [r4, #0]
 8013474:	4411      	add	r1, r2
 8013476:	4299      	cmp	r1, r3
 8013478:	dd1a      	ble.n	80134b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801347a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801347e:	440b      	add	r3, r1
 8013480:	4402      	add	r2, r0
 8013482:	b21b      	sxth	r3, r3
 8013484:	429a      	cmp	r2, r3
 8013486:	dc13      	bgt.n	80134b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8013488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801348a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	9206      	str	r2, [sp, #24]
 8013490:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013492:	9205      	str	r2, [sp, #20]
 8013494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013496:	9500      	str	r5, [sp, #0]
 8013498:	e9cd b203 	strd	fp, r2, [sp, #12]
 801349c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801349e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80134a0:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80134a4:	a912      	add	r1, sp, #72	; 0x48
 80134a6:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 80134aa:	aa49      	add	r2, sp, #292	; 0x124
 80134ac:	4623      	mov	r3, r4
 80134ae:	47c8      	blx	r9
 80134b0:	e9d4 2300 	ldrd	r2, r3, [r4]
 80134b4:	441a      	add	r2, r3
 80134b6:	6963      	ldr	r3, [r4, #20]
 80134b8:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80134bc:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80134c0:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80134c4:	68a1      	ldr	r1, [r4, #8]
 80134c6:	ed94 6a08 	vldr	s12, [r4, #32]
 80134ca:	6022      	str	r2, [r4, #0]
 80134cc:	3301      	adds	r3, #1
 80134ce:	6163      	str	r3, [r4, #20]
 80134d0:	69a3      	ldr	r3, [r4, #24]
 80134d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80134d6:	3b01      	subs	r3, #1
 80134d8:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80134dc:	61a3      	str	r3, [r4, #24]
 80134de:	6923      	ldr	r3, [r4, #16]
 80134e0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80134e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80134e8:	edd4 6a07 	vldr	s13, [r4, #28]
 80134ec:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80134f0:	440b      	add	r3, r1
 80134f2:	68e1      	ldr	r1, [r4, #12]
 80134f4:	6123      	str	r3, [r4, #16]
 80134f6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80134fa:	428b      	cmp	r3, r1
 80134fc:	edc4 6a07 	vstr	s13, [r4, #28]
 8013500:	db15      	blt.n	801352e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8013502:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8013506:	ee76 6a26 	vadd.f32	s13, s12, s13
 801350a:	3201      	adds	r2, #1
 801350c:	edc4 6a07 	vstr	s13, [r4, #28]
 8013510:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8013514:	6022      	str	r2, [r4, #0]
 8013516:	ee36 7a87 	vadd.f32	s14, s13, s14
 801351a:	1a5b      	subs	r3, r3, r1
 801351c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8013520:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8013524:	6123      	str	r3, [r4, #16]
 8013526:	ee77 7a27 	vadd.f32	s15, s14, s15
 801352a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801352e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013532:	441a      	add	r2, r3
 8013534:	696b      	ldr	r3, [r5, #20]
 8013536:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801353a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801353e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8013542:	68a9      	ldr	r1, [r5, #8]
 8013544:	ed95 6a08 	vldr	s12, [r5, #32]
 8013548:	602a      	str	r2, [r5, #0]
 801354a:	3301      	adds	r3, #1
 801354c:	616b      	str	r3, [r5, #20]
 801354e:	69ab      	ldr	r3, [r5, #24]
 8013550:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013554:	3b01      	subs	r3, #1
 8013556:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801355a:	61ab      	str	r3, [r5, #24]
 801355c:	692b      	ldr	r3, [r5, #16]
 801355e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8013562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013566:	edd5 6a07 	vldr	s13, [r5, #28]
 801356a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801356e:	440b      	add	r3, r1
 8013570:	68e9      	ldr	r1, [r5, #12]
 8013572:	612b      	str	r3, [r5, #16]
 8013574:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013578:	428b      	cmp	r3, r1
 801357a:	edc5 6a07 	vstr	s13, [r5, #28]
 801357e:	db15      	blt.n	80135ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8013580:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8013584:	ee76 6a26 	vadd.f32	s13, s12, s13
 8013588:	3201      	adds	r2, #1
 801358a:	edc5 6a07 	vstr	s13, [r5, #28]
 801358e:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8013592:	602a      	str	r2, [r5, #0]
 8013594:	ee36 7a87 	vadd.f32	s14, s13, s14
 8013598:	1a5b      	subs	r3, r3, r1
 801359a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801359e:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80135a2:	612b      	str	r3, [r5, #16]
 80135a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80135a8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80135ac:	3f01      	subs	r7, #1
 80135ae:	e757      	b.n	8013460 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80135b0:	4299      	cmp	r1, r3
 80135b2:	dc13      	bgt.n	80135dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80135b4:	429a      	cmp	r2, r3
 80135b6:	da14      	bge.n	80135e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80135b8:	2502      	movs	r5, #2
 80135ba:	2703      	movs	r7, #3
 80135bc:	46a9      	mov	r9, r5
 80135be:	f04f 0800 	mov.w	r8, #0
 80135c2:	f04f 0a01 	mov.w	sl, #1
 80135c6:	e6ef      	b.n	80133a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80135c8:	2501      	movs	r5, #1
 80135ca:	2700      	movs	r7, #0
 80135cc:	46a9      	mov	r9, r5
 80135ce:	46b8      	mov	r8, r7
 80135d0:	f04f 0a02 	mov.w	sl, #2
 80135d4:	e6e8      	b.n	80133a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80135d6:	2501      	movs	r5, #1
 80135d8:	2702      	movs	r7, #2
 80135da:	e6e1      	b.n	80133a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80135dc:	2500      	movs	r5, #0
 80135de:	2701      	movs	r7, #1
 80135e0:	e7f4      	b.n	80135cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80135e2:	2702      	movs	r7, #2
 80135e4:	2503      	movs	r5, #3
 80135e6:	f04f 0900 	mov.w	r9, #0
 80135ea:	46b8      	mov	r8, r7
 80135ec:	e7e9      	b.n	80135c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80135ee:	4613      	mov	r3, r2
 80135f0:	e728      	b.n	8013444 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80135f2:	bf00      	nop
 80135f4:	2000a034 	.word	0x2000a034
 80135f8:	fffd8f01 	.word	0xfffd8f01
 80135fc:	00027100 	.word	0x00027100
 8013600:	0004e1ff 	.word	0x0004e1ff
 8013604:	0004e1fe 	.word	0x0004e1fe
 8013608:	2000a03c 	.word	0x2000a03c
 801360c:	4613      	mov	r3, r2
 801360e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8013610:	9111      	str	r1, [sp, #68]	; 0x44
 8013612:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8013616:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801361a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801361c:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8013620:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8013624:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8013628:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801362c:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8013630:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8013634:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8013638:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801363c:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8013640:	469e      	mov	lr, r3
 8013642:	469c      	mov	ip, r3
 8013644:	f04f 0900 	mov.w	r9, #0
 8013648:	f1bc 0f00 	cmp.w	ip, #0
 801364c:	d147      	bne.n	80136de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801364e:	eb03 0c07 	add.w	ip, r3, r7
 8013652:	1ad7      	subs	r7, r2, r3
 8013654:	f1b9 0f00 	cmp.w	r9, #0
 8013658:	d009      	beq.n	801366e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801365a:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801365e:	9029      	str	r0, [sp, #164]	; 0xa4
 8013660:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8013664:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8013668:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801366c:	912d      	str	r1, [sp, #180]	; 0xb4
 801366e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8013670:	9111      	str	r1, [sp, #68]	; 0x44
 8013672:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8013676:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801367a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801367e:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8013682:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8013686:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801368a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801368e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8013692:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8013696:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801369a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801369e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80136a2:	f04f 0800 	mov.w	r8, #0
 80136a6:	f1be 0f00 	cmp.w	lr, #0
 80136aa:	d031      	beq.n	8013710 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80136ac:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80136ae:	4431      	add	r1, r6
 80136b0:	4549      	cmp	r1, r9
 80136b2:	4450      	add	r0, sl
 80136b4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80136b8:	ee37 7a04 	vadd.f32	s14, s14, s8
 80136bc:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80136c0:	db08      	blt.n	80136d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80136c2:	ee77 7a85 	vadd.f32	s15, s15, s10
 80136c6:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80136ca:	ee37 7a06 	vadd.f32	s14, s14, s12
 80136ce:	3001      	adds	r0, #1
 80136d0:	eba1 0109 	sub.w	r1, r1, r9
 80136d4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80136d8:	f04f 0801 	mov.w	r8, #1
 80136dc:	e7e3      	b.n	80136a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80136de:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80136e0:	4431      	add	r1, r6
 80136e2:	4541      	cmp	r1, r8
 80136e4:	4450      	add	r0, sl
 80136e6:	ee37 7a24 	vadd.f32	s14, s14, s9
 80136ea:	ee77 7a84 	vadd.f32	s15, s15, s8
 80136ee:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80136f2:	db08      	blt.n	8013706 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80136f4:	ee76 6a85 	vadd.f32	s13, s13, s10
 80136f8:	ee37 7a25 	vadd.f32	s14, s14, s11
 80136fc:	ee77 7a86 	vadd.f32	s15, s15, s12
 8013700:	3001      	adds	r0, #1
 8013702:	eba1 0108 	sub.w	r1, r1, r8
 8013706:	f10c 3cff 	add.w	ip, ip, #4294967295
 801370a:	f04f 0901 	mov.w	r9, #1
 801370e:	e79b      	b.n	8013648 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8013710:	449c      	add	ip, r3
 8013712:	1aff      	subs	r7, r7, r3
 8013714:	f1b8 0f00 	cmp.w	r8, #0
 8013718:	d009      	beq.n	801372e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801371a:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801371e:	9019      	str	r0, [sp, #100]	; 0x64
 8013720:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8013724:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8013728:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801372c:	911d      	str	r1, [sp, #116]	; 0x74
 801372e:	1ad2      	subs	r2, r2, r3
 8013730:	e68b      	b.n	801344a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8013732:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013734:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8013736:	2b00      	cmp	r3, #0
 8013738:	f000 80d1 	beq.w	80138de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801373c:	ad19      	add	r5, sp, #100	; 0x64
 801373e:	ac39      	add	r4, sp, #228	; 0xe4
 8013740:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8013742:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8013746:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801374a:	930c      	str	r3, [sp, #48]	; 0x30
 801374c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801374e:	6963      	ldr	r3, [r4, #20]
 8013750:	440b      	add	r3, r1
 8013752:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8013756:	4408      	add	r0, r1
 8013758:	b200      	sxth	r0, r0
 801375a:	4283      	cmp	r3, r0
 801375c:	900d      	str	r0, [sp, #52]	; 0x34
 801375e:	f280 80c1 	bge.w	80138e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8013762:	428b      	cmp	r3, r1
 8013764:	da08      	bge.n	8013778 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8013766:	2a00      	cmp	r2, #0
 8013768:	dd06      	ble.n	8013778 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801376a:	1acb      	subs	r3, r1, r3
 801376c:	429a      	cmp	r2, r3
 801376e:	f2c0 80bb 	blt.w	80138e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8013772:	2b00      	cmp	r3, #0
 8013774:	f300 80b9 	bgt.w	80138ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8013778:	6967      	ldr	r7, [r4, #20]
 801377a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801377c:	443b      	add	r3, r7
 801377e:	461f      	mov	r7, r3
 8013780:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013782:	1bdf      	subs	r7, r3, r7
 8013784:	4297      	cmp	r7, r2
 8013786:	bfa8      	it	ge
 8013788:	4617      	movge	r7, r2
 801378a:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801378e:	2f00      	cmp	r7, #0
 8013790:	f340 813c 	ble.w	8013a0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8013794:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8013796:	6829      	ldr	r1, [r5, #0]
 8013798:	f9b3 2000 	ldrsh.w	r2, [r3]
 801379c:	f9bb 3000 	ldrsh.w	r3, [fp]
 80137a0:	6820      	ldr	r0, [r4, #0]
 80137a2:	4411      	add	r1, r2
 80137a4:	4299      	cmp	r1, r3
 80137a6:	dd1a      	ble.n	80137de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80137a8:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80137ac:	440b      	add	r3, r1
 80137ae:	4402      	add	r2, r0
 80137b0:	b21b      	sxth	r3, r3
 80137b2:	429a      	cmp	r2, r3
 80137b4:	dc13      	bgt.n	80137de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80137b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	9206      	str	r2, [sp, #24]
 80137be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80137c0:	9205      	str	r2, [sp, #20]
 80137c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80137c4:	9500      	str	r5, [sp, #0]
 80137c6:	e9cd b203 	strd	fp, r2, [sp, #12]
 80137ca:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80137cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80137ce:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80137d2:	a912      	add	r1, sp, #72	; 0x48
 80137d4:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 80137d8:	aa49      	add	r2, sp, #292	; 0x124
 80137da:	4623      	mov	r3, r4
 80137dc:	47c8      	blx	r9
 80137de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80137e2:	441a      	add	r2, r3
 80137e4:	6963      	ldr	r3, [r4, #20]
 80137e6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80137ea:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80137ee:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80137f2:	68a1      	ldr	r1, [r4, #8]
 80137f4:	ed94 6a08 	vldr	s12, [r4, #32]
 80137f8:	6022      	str	r2, [r4, #0]
 80137fa:	3301      	adds	r3, #1
 80137fc:	6163      	str	r3, [r4, #20]
 80137fe:	69a3      	ldr	r3, [r4, #24]
 8013800:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013804:	3b01      	subs	r3, #1
 8013806:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801380a:	61a3      	str	r3, [r4, #24]
 801380c:	6923      	ldr	r3, [r4, #16]
 801380e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8013812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013816:	edd4 6a07 	vldr	s13, [r4, #28]
 801381a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801381e:	440b      	add	r3, r1
 8013820:	68e1      	ldr	r1, [r4, #12]
 8013822:	6123      	str	r3, [r4, #16]
 8013824:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013828:	428b      	cmp	r3, r1
 801382a:	edc4 6a07 	vstr	s13, [r4, #28]
 801382e:	db15      	blt.n	801385c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8013830:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8013834:	ee76 6a26 	vadd.f32	s13, s12, s13
 8013838:	3201      	adds	r2, #1
 801383a:	edc4 6a07 	vstr	s13, [r4, #28]
 801383e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8013842:	6022      	str	r2, [r4, #0]
 8013844:	ee36 7a87 	vadd.f32	s14, s13, s14
 8013848:	1a5b      	subs	r3, r3, r1
 801384a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801384e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8013852:	6123      	str	r3, [r4, #16]
 8013854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013858:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801385c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013860:	441a      	add	r2, r3
 8013862:	696b      	ldr	r3, [r5, #20]
 8013864:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8013868:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801386c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8013870:	68a9      	ldr	r1, [r5, #8]
 8013872:	ed95 6a08 	vldr	s12, [r5, #32]
 8013876:	602a      	str	r2, [r5, #0]
 8013878:	3301      	adds	r3, #1
 801387a:	616b      	str	r3, [r5, #20]
 801387c:	69ab      	ldr	r3, [r5, #24]
 801387e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013882:	3b01      	subs	r3, #1
 8013884:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8013888:	61ab      	str	r3, [r5, #24]
 801388a:	692b      	ldr	r3, [r5, #16]
 801388c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8013890:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013894:	edd5 6a07 	vldr	s13, [r5, #28]
 8013898:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801389c:	440b      	add	r3, r1
 801389e:	68e9      	ldr	r1, [r5, #12]
 80138a0:	612b      	str	r3, [r5, #16]
 80138a2:	ee76 6a86 	vadd.f32	s13, s13, s12
 80138a6:	428b      	cmp	r3, r1
 80138a8:	edc5 6a07 	vstr	s13, [r5, #28]
 80138ac:	db15      	blt.n	80138da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80138ae:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80138b2:	ee76 6a26 	vadd.f32	s13, s12, s13
 80138b6:	3201      	adds	r2, #1
 80138b8:	edc5 6a07 	vstr	s13, [r5, #28]
 80138bc:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80138c0:	602a      	str	r2, [r5, #0]
 80138c2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80138c6:	1a5b      	subs	r3, r3, r1
 80138c8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80138cc:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80138d0:	612b      	str	r3, [r5, #16]
 80138d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80138d6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80138da:	3f01      	subs	r7, #1
 80138dc:	e757      	b.n	801378e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80138de:	ad39      	add	r5, sp, #228	; 0xe4
 80138e0:	ac19      	add	r4, sp, #100	; 0x64
 80138e2:	e72d      	b.n	8013740 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80138e4:	4613      	mov	r3, r2
 80138e6:	e744      	b.n	8013772 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80138e8:	4613      	mov	r3, r2
 80138ea:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 80138ee:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 80138f0:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 80138f4:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 80138f8:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 80138fc:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8013900:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8013904:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8013908:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801390c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801390e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8013912:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8013916:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801391a:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801391e:	960e      	str	r6, [sp, #56]	; 0x38
 8013920:	469e      	mov	lr, r3
 8013922:	461f      	mov	r7, r3
 8013924:	f04f 0900 	mov.w	r9, #0
 8013928:	2f00      	cmp	r7, #0
 801392a:	d146      	bne.n	80139ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801392c:	449c      	add	ip, r3
 801392e:	1ad7      	subs	r7, r2, r3
 8013930:	f1b9 0f00 	cmp.w	r9, #0
 8013934:	d009      	beq.n	801394a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8013936:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801393a:	9039      	str	r0, [sp, #228]	; 0xe4
 801393c:	913d      	str	r1, [sp, #244]	; 0xf4
 801393e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8013942:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8013946:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801394a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801394c:	910e      	str	r1, [sp, #56]	; 0x38
 801394e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8013952:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8013956:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801395a:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801395e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8013962:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8013966:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801396a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801396e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8013972:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8013976:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801397a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801397e:	f04f 0800 	mov.w	r8, #0
 8013982:	f1be 0f00 	cmp.w	lr, #0
 8013986:	d030      	beq.n	80139ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8013988:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801398a:	4431      	add	r1, r6
 801398c:	4549      	cmp	r1, r9
 801398e:	4450      	add	r0, sl
 8013990:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8013994:	ee37 7a04 	vadd.f32	s14, s14, s8
 8013998:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801399c:	db08      	blt.n	80139b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801399e:	ee77 7a85 	vadd.f32	s15, s15, s10
 80139a2:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80139a6:	ee37 7a06 	vadd.f32	s14, s14, s12
 80139aa:	3001      	adds	r0, #1
 80139ac:	eba1 0109 	sub.w	r1, r1, r9
 80139b0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80139b4:	f04f 0801 	mov.w	r8, #1
 80139b8:	e7e3      	b.n	8013982 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80139ba:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80139bc:	4431      	add	r1, r6
 80139be:	4541      	cmp	r1, r8
 80139c0:	4450      	add	r0, sl
 80139c2:	ee37 7a24 	vadd.f32	s14, s14, s9
 80139c6:	ee77 7a84 	vadd.f32	s15, s15, s8
 80139ca:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80139ce:	db08      	blt.n	80139e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80139d0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80139d4:	ee37 7a25 	vadd.f32	s14, s14, s11
 80139d8:	ee77 7a86 	vadd.f32	s15, s15, s12
 80139dc:	3001      	adds	r0, #1
 80139de:	eba1 0108 	sub.w	r1, r1, r8
 80139e2:	3f01      	subs	r7, #1
 80139e4:	f04f 0901 	mov.w	r9, #1
 80139e8:	e79e      	b.n	8013928 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80139ea:	449c      	add	ip, r3
 80139ec:	1aff      	subs	r7, r7, r3
 80139ee:	f1b8 0f00 	cmp.w	r8, #0
 80139f2:	d009      	beq.n	8013a08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80139f4:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80139f8:	9019      	str	r0, [sp, #100]	; 0x64
 80139fa:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80139fe:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8013a02:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8013a06:	911d      	str	r1, [sp, #116]	; 0x74
 8013a08:	1ad2      	subs	r2, r2, r3
 8013a0a:	e6b5      	b.n	8013778 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8013a0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	b923      	cbnz	r3, 8013a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013a12:	4b04      	ldr	r3, [pc, #16]	; (8013a24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8013a14:	6818      	ldr	r0, [r3, #0]
 8013a16:	6803      	ldr	r3, [r0, #0]
 8013a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a1a:	4798      	blx	r3
 8013a1c:	b05b      	add	sp, #364	; 0x16c
 8013a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a22:	bf00      	nop
 8013a24:	2000a03c 	.word	0x2000a03c

08013a28 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8013a28:	b570      	push	{r4, r5, r6, lr}
 8013a2a:	4604      	mov	r4, r0
 8013a2c:	2500      	movs	r5, #0
 8013a2e:	7223      	strb	r3, [r4, #8]
 8013a30:	9804      	ldr	r0, [sp, #16]
 8013a32:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8013a36:	8025      	strh	r5, [r4, #0]
 8013a38:	6061      	str	r1, [r4, #4]
 8013a3a:	7263      	strb	r3, [r4, #9]
 8013a3c:	60e0      	str	r0, [r4, #12]
 8013a3e:	8222      	strh	r2, [r4, #16]
 8013a40:	8265      	strh	r5, [r4, #18]
 8013a42:	82a5      	strh	r5, [r4, #20]
 8013a44:	82e5      	strh	r5, [r4, #22]
 8013a46:	8325      	strh	r5, [r4, #24]
 8013a48:	8365      	strh	r5, [r4, #26]
 8013a4a:	83a5      	strh	r5, [r4, #28]
 8013a4c:	77a5      	strb	r5, [r4, #30]
 8013a4e:	6803      	ldr	r3, [r0, #0]
 8013a50:	695b      	ldr	r3, [r3, #20]
 8013a52:	4798      	blx	r3
 8013a54:	4606      	mov	r6, r0
 8013a56:	b1f8      	cbz	r0, 8013a98 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8013a58:	68e0      	ldr	r0, [r4, #12]
 8013a5a:	6803      	ldr	r3, [r0, #0]
 8013a5c:	4631      	mov	r1, r6
 8013a5e:	68db      	ldr	r3, [r3, #12]
 8013a60:	4798      	blx	r3
 8013a62:	7b43      	ldrb	r3, [r0, #13]
 8013a64:	7a82      	ldrb	r2, [r0, #10]
 8013a66:	005b      	lsls	r3, r3, #1
 8013a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013a6c:	4313      	orrs	r3, r2
 8013a6e:	83a3      	strh	r3, [r4, #28]
 8013a70:	7a63      	ldrb	r3, [r4, #9]
 8013a72:	2b04      	cmp	r3, #4
 8013a74:	4605      	mov	r5, r0
 8013a76:	d10f      	bne.n	8013a98 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8013a78:	68e0      	ldr	r0, [r4, #12]
 8013a7a:	6803      	ldr	r3, [r0, #0]
 8013a7c:	462a      	mov	r2, r5
 8013a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a80:	4631      	mov	r1, r6
 8013a82:	4798      	blx	r3
 8013a84:	7b6b      	ldrb	r3, [r5, #13]
 8013a86:	005b      	lsls	r3, r3, #1
 8013a88:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8013a8c:	7aab      	ldrb	r3, [r5, #10]
 8013a8e:	4313      	orrs	r3, r2
 8013a90:	4418      	add	r0, r3
 8013a92:	8ba3      	ldrh	r3, [r4, #28]
 8013a94:	4418      	add	r0, r3
 8013a96:	83a0      	strh	r0, [r4, #28]
 8013a98:	4620      	mov	r0, r4
 8013a9a:	bd70      	pop	{r4, r5, r6, pc}

08013a9c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8013a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013aa0:	2400      	movs	r4, #0
 8013aa2:	b085      	sub	sp, #20
 8013aa4:	4681      	mov	r9, r0
 8013aa6:	4688      	mov	r8, r1
 8013aa8:	4692      	mov	sl, r2
 8013aaa:	469b      	mov	fp, r3
 8013aac:	4627      	mov	r7, r4
 8013aae:	4625      	mov	r5, r4
 8013ab0:	4626      	mov	r6, r4
 8013ab2:	4554      	cmp	r4, sl
 8013ab4:	da2a      	bge.n	8013b0c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	9303      	str	r3, [sp, #12]
 8013aba:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8013abe:	429d      	cmp	r5, r3
 8013ac0:	d004      	beq.n	8013acc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8013ac2:	f242 030b 	movw	r3, #8203	; 0x200b
 8013ac6:	429d      	cmp	r5, r3
 8013ac8:	bf18      	it	ne
 8013aca:	462f      	movne	r7, r5
 8013acc:	ab03      	add	r3, sp, #12
 8013ace:	4642      	mov	r2, r8
 8013ad0:	4659      	mov	r1, fp
 8013ad2:	4648      	mov	r0, r9
 8013ad4:	f002 fe76 	bl	80167c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013ad8:	4605      	mov	r5, r0
 8013ada:	b1b8      	cbz	r0, 8013b0c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8013adc:	280a      	cmp	r0, #10
 8013ade:	d015      	beq.n	8013b0c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8013ae0:	9a03      	ldr	r2, [sp, #12]
 8013ae2:	b18a      	cbz	r2, 8013b08 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8013ae4:	7b50      	ldrb	r0, [r2, #13]
 8013ae6:	7a93      	ldrb	r3, [r2, #10]
 8013ae8:	8895      	ldrh	r5, [r2, #4]
 8013aea:	0040      	lsls	r0, r0, #1
 8013aec:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8013af0:	4303      	orrs	r3, r0
 8013af2:	9301      	str	r3, [sp, #4]
 8013af4:	f8d8 3000 	ldr.w	r3, [r8]
 8013af8:	4639      	mov	r1, r7
 8013afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013afc:	4640      	mov	r0, r8
 8013afe:	4798      	blx	r3
 8013b00:	9b01      	ldr	r3, [sp, #4]
 8013b02:	4418      	add	r0, r3
 8013b04:	4406      	add	r6, r0
 8013b06:	b2b6      	uxth	r6, r6
 8013b08:	3401      	adds	r4, #1
 8013b0a:	e7d2      	b.n	8013ab2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8013b0c:	4630      	mov	r0, r6
 8013b0e:	b005      	add	sp, #20
 8013b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013b14 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8013b14:	2a02      	cmp	r2, #2
 8013b16:	b530      	push	{r4, r5, lr}
 8013b18:	d011      	beq.n	8013b3e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8013b1a:	2a03      	cmp	r2, #3
 8013b1c:	d01c      	beq.n	8013b58 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8013b1e:	2a01      	cmp	r2, #1
 8013b20:	d10c      	bne.n	8013b3c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8013b22:	888b      	ldrh	r3, [r1, #4]
 8013b24:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8013b28:	8801      	ldrh	r1, [r0, #0]
 8013b2a:	8844      	ldrh	r4, [r0, #2]
 8013b2c:	8004      	strh	r4, [r0, #0]
 8013b2e:	1a9b      	subs	r3, r3, r2
 8013b30:	1a5b      	subs	r3, r3, r1
 8013b32:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8013b36:	8043      	strh	r3, [r0, #2]
 8013b38:	8081      	strh	r1, [r0, #4]
 8013b3a:	80c2      	strh	r2, [r0, #6]
 8013b3c:	bd30      	pop	{r4, r5, pc}
 8013b3e:	88cb      	ldrh	r3, [r1, #6]
 8013b40:	88c2      	ldrh	r2, [r0, #6]
 8013b42:	1a9b      	subs	r3, r3, r2
 8013b44:	8842      	ldrh	r2, [r0, #2]
 8013b46:	1a9b      	subs	r3, r3, r2
 8013b48:	888a      	ldrh	r2, [r1, #4]
 8013b4a:	8881      	ldrh	r1, [r0, #4]
 8013b4c:	8043      	strh	r3, [r0, #2]
 8013b4e:	1a52      	subs	r2, r2, r1
 8013b50:	8801      	ldrh	r1, [r0, #0]
 8013b52:	1a52      	subs	r2, r2, r1
 8013b54:	8002      	strh	r2, [r0, #0]
 8013b56:	e7f1      	b.n	8013b3c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8013b58:	88cb      	ldrh	r3, [r1, #6]
 8013b5a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8013b5e:	8841      	ldrh	r1, [r0, #2]
 8013b60:	f9b0 5000 	ldrsh.w	r5, [r0]
 8013b64:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8013b68:	8045      	strh	r5, [r0, #2]
 8013b6a:	1a9b      	subs	r3, r3, r2
 8013b6c:	1a5b      	subs	r3, r3, r1
 8013b6e:	8003      	strh	r3, [r0, #0]
 8013b70:	8082      	strh	r2, [r0, #4]
 8013b72:	80c4      	strh	r4, [r0, #6]
 8013b74:	e7e2      	b.n	8013b3c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08013b76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8013b76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b7a:	b09f      	sub	sp, #124	; 0x7c
 8013b7c:	9116      	str	r1, [sp, #88]	; 0x58
 8013b7e:	9317      	str	r3, [sp, #92]	; 0x5c
 8013b80:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8013b82:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8013b84:	8809      	ldrh	r1, [r1, #0]
 8013b86:	889b      	ldrh	r3, [r3, #4]
 8013b88:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8013b8c:	9212      	str	r2, [sp, #72]	; 0x48
 8013b8e:	440b      	add	r3, r1
 8013b90:	b21b      	sxth	r3, r3
 8013b92:	9310      	str	r3, [sp, #64]	; 0x40
 8013b94:	f8d8 3000 	ldr.w	r3, [r8]
 8013b98:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8013b9c:	7a59      	ldrb	r1, [r3, #9]
 8013b9e:	7a1b      	ldrb	r3, [r3, #8]
 8013ba0:	9315      	str	r3, [sp, #84]	; 0x54
 8013ba2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8013ba4:	9011      	str	r0, [sp, #68]	; 0x44
 8013ba6:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8013baa:	9114      	str	r1, [sp, #80]	; 0x50
 8013bac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013bb0:	2a00      	cmp	r2, #0
 8013bb2:	d067      	beq.n	8013c84 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 8013bb4:	f898 3010 	ldrb.w	r3, [r8, #16]
 8013bb8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8013bba:	2b04      	cmp	r3, #4
 8013bbc:	bf14      	ite	ne
 8013bbe:	2301      	movne	r3, #1
 8013bc0:	2302      	moveq	r3, #2
 8013bc2:	4413      	add	r3, r2
 8013bc4:	f04f 0900 	mov.w	r9, #0
 8013bc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8013bca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8013bce:	464c      	mov	r4, r9
 8013bd0:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8013bd4:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8013bd8:	4293      	cmp	r3, r2
 8013bda:	f280 808c 	bge.w	8013cf6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8013bde:	2300      	movs	r3, #0
 8013be0:	931c      	str	r3, [sp, #112]	; 0x70
 8013be2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8013be6:	429c      	cmp	r4, r3
 8013be8:	d006      	beq.n	8013bf8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 8013bea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013bec:	f242 020b 	movw	r2, #8203	; 0x200b
 8013bf0:	4294      	cmp	r4, r2
 8013bf2:	bf18      	it	ne
 8013bf4:	4623      	movne	r3, r4
 8013bf6:	930d      	str	r3, [sp, #52]	; 0x34
 8013bf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013bfa:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8013bfc:	f8d8 2000 	ldr.w	r2, [r8]
 8013c00:	428b      	cmp	r3, r1
 8013c02:	db41      	blt.n	8013c88 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8013c04:	6813      	ldr	r3, [r2, #0]
 8013c06:	4610      	mov	r0, r2
 8013c08:	695b      	ldr	r3, [r3, #20]
 8013c0a:	4798      	blx	r3
 8013c0c:	4604      	mov	r4, r0
 8013c0e:	f8d8 0000 	ldr.w	r0, [r8]
 8013c12:	6803      	ldr	r3, [r0, #0]
 8013c14:	aa1d      	add	r2, sp, #116	; 0x74
 8013c16:	689e      	ldr	r6, [r3, #8]
 8013c18:	4621      	mov	r1, r4
 8013c1a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8013c1e:	47b0      	blx	r6
 8013c20:	901c      	str	r0, [sp, #112]	; 0x70
 8013c22:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8013c26:	429c      	cmp	r4, r3
 8013c28:	f000 80e9 	beq.w	8013dfe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8013c2c:	f242 030b 	movw	r3, #8203	; 0x200b
 8013c30:	429c      	cmp	r4, r3
 8013c32:	f000 80e4 	beq.w	8013dfe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8013c36:	2c00      	cmp	r4, #0
 8013c38:	f000 80f6 	beq.w	8013e28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 8013c3c:	2c0a      	cmp	r4, #10
 8013c3e:	d060      	beq.n	8013d02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8013c40:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013c42:	b36a      	cbz	r2, 8013ca0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 8013c44:	8894      	ldrh	r4, [r2, #4]
 8013c46:	f1bb 0f00 	cmp.w	fp, #0
 8013c4a:	d03b      	beq.n	8013cc4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 8013c4c:	f892 900d 	ldrb.w	r9, [r2, #13]
 8013c50:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8013c54:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8013c58:	f892 900a 	ldrb.w	r9, [r2, #10]
 8013c5c:	f1bb 0f01 	cmp.w	fp, #1
 8013c60:	ea49 0903 	orr.w	r9, r9, r3
 8013c64:	d134      	bne.n	8013cd0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 8013c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c68:	eba5 0509 	sub.w	r5, r5, r9
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d14f      	bne.n	8013d10 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8013c70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013c72:	eb09 0305 	add.w	r3, r9, r5
 8013c76:	4413      	add	r3, r2
 8013c78:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8013c7a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8013c7e:	4293      	cmp	r3, r2
 8013c80:	da51      	bge.n	8013d26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8013c82:	e038      	b.n	8013cf6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8013c84:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013c86:	e79d      	b.n	8013bc4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 8013c88:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8013c8c:	9301      	str	r3, [sp, #4]
 8013c8e:	ab1d      	add	r3, sp, #116	; 0x74
 8013c90:	9300      	str	r3, [sp, #0]
 8013c92:	4659      	mov	r1, fp
 8013c94:	ab1c      	add	r3, sp, #112	; 0x70
 8013c96:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8013c98:	f002 fdec 	bl	8016874 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8013c9c:	4604      	mov	r4, r0
 8013c9e:	e7c0      	b.n	8013c22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8013ca0:	f8d8 0000 	ldr.w	r0, [r8]
 8013ca4:	6803      	ldr	r3, [r0, #0]
 8013ca6:	691b      	ldr	r3, [r3, #16]
 8013ca8:	4798      	blx	r3
 8013caa:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8013cae:	4298      	cmp	r0, r3
 8013cb0:	f000 80a5 	beq.w	8013dfe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8013cb4:	f242 030b 	movw	r3, #8203	; 0x200b
 8013cb8:	4298      	cmp	r0, r3
 8013cba:	f000 80a0 	beq.w	8013dfe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8013cbe:	f1bb 0f00 	cmp.w	fp, #0
 8013cc2:	d100      	bne.n	8013cc6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8013cc4:	444d      	add	r5, r9
 8013cc6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013cc8:	2a00      	cmp	r2, #0
 8013cca:	d1bf      	bne.n	8013c4c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 8013ccc:	4691      	mov	r9, r2
 8013cce:	e096      	b.n	8013dfe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8013cd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	f000 80aa 	beq.w	8013e2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 8013cd8:	f1bb 0f00 	cmp.w	fp, #0
 8013cdc:	d118      	bne.n	8013d10 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8013cde:	f8d8 0000 	ldr.w	r0, [r8]
 8013ce2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013ce4:	6803      	ldr	r3, [r0, #0]
 8013ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ce8:	4798      	blx	r3
 8013cea:	4405      	add	r5, r0
 8013cec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013cee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013cf0:	1aeb      	subs	r3, r5, r3
 8013cf2:	4293      	cmp	r3, r2
 8013cf4:	dd17      	ble.n	8013d26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8013cf6:	2c00      	cmp	r4, #0
 8013cf8:	f000 8096 	beq.w	8013e28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 8013cfc:	2c0a      	cmp	r4, #10
 8013cfe:	f040 8084 	bne.w	8013e0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x294>
 8013d02:	240a      	movs	r4, #10
 8013d04:	fab4 f084 	clz	r0, r4
 8013d08:	0940      	lsrs	r0, r0, #5
 8013d0a:	b01f      	add	sp, #124	; 0x7c
 8013d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d10:	f8d8 0000 	ldr.w	r0, [r8]
 8013d14:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013d16:	6803      	ldr	r3, [r0, #0]
 8013d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d1a:	4798      	blx	r3
 8013d1c:	f1bb 0f01 	cmp.w	fp, #1
 8013d20:	eba5 0500 	sub.w	r5, r5, r0
 8013d24:	d0a4      	beq.n	8013c70 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8013d26:	981c      	ldr	r0, [sp, #112]	; 0x70
 8013d28:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8013d2a:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8013d2e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013d32:	7b43      	ldrb	r3, [r0, #13]
 8013d34:	015b      	lsls	r3, r3, #5
 8013d36:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8013d3a:	7983      	ldrb	r3, [r0, #6]
 8013d3c:	4429      	add	r1, r5
 8013d3e:	4313      	orrs	r3, r2
 8013d40:	440b      	add	r3, r1
 8013d42:	42b3      	cmp	r3, r6
 8013d44:	db5b      	blt.n	8013dfe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8013d46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013d48:	4299      	cmp	r1, r3
 8013d4a:	da58      	bge.n	8013dfe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8013d4c:	f8d8 0000 	ldr.w	r0, [r8]
 8013d50:	6803      	ldr	r3, [r0, #0]
 8013d52:	42ae      	cmp	r6, r5
 8013d54:	bfc8      	it	gt
 8013d56:	1b76      	subgt	r6, r6, r5
 8013d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d5a:	bfcc      	ite	gt
 8013d5c:	b2b6      	uxthgt	r6, r6
 8013d5e:	2600      	movle	r6, #0
 8013d60:	4798      	blx	r3
 8013d62:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8013d64:	7b5a      	ldrb	r2, [r3, #13]
 8013d66:	00d1      	lsls	r1, r2, #3
 8013d68:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8013d6c:	7a19      	ldrb	r1, [r3, #8]
 8013d6e:	4339      	orrs	r1, r7
 8013d70:	0657      	lsls	r7, r2, #25
 8013d72:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8013d74:	bf44      	itt	mi
 8013d76:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8013d7a:	b209      	sxthmi	r1, r1
 8013d7c:	19c7      	adds	r7, r0, r7
 8013d7e:	1a7f      	subs	r7, r7, r1
 8013d80:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8013d82:	b2bf      	uxth	r7, r7
 8013d84:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8013d88:	fa0f fa87 	sxth.w	sl, r7
 8013d8c:	4551      	cmp	r1, sl
 8013d8e:	dd3a      	ble.n	8013e06 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8013d90:	0112      	lsls	r2, r2, #4
 8013d92:	79d8      	ldrb	r0, [r3, #7]
 8013d94:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8013d98:	4302      	orrs	r2, r0
 8013d9a:	4492      	add	sl, r2
 8013d9c:	4551      	cmp	r1, sl
 8013d9e:	dc2e      	bgt.n	8013dfe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8013da0:	1bcf      	subs	r7, r1, r7
 8013da2:	b2bf      	uxth	r7, r7
 8013da4:	468a      	mov	sl, r1
 8013da6:	9319      	str	r3, [sp, #100]	; 0x64
 8013da8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013daa:	f8d8 0000 	ldr.w	r0, [r8]
 8013dae:	681a      	ldr	r2, [r3, #0]
 8013db0:	6801      	ldr	r1, [r0, #0]
 8013db2:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8013db4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013db6:	9313      	str	r3, [sp, #76]	; 0x4c
 8013db8:	9218      	str	r2, [sp, #96]	; 0x60
 8013dba:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8013dbc:	4788      	blx	r1
 8013dbe:	f898 1006 	ldrb.w	r1, [r8, #6]
 8013dc2:	910b      	str	r1, [sp, #44]	; 0x2c
 8013dc4:	f898 100e 	ldrb.w	r1, [r8, #14]
 8013dc8:	910a      	str	r1, [sp, #40]	; 0x28
 8013dca:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8013dce:	9109      	str	r1, [sp, #36]	; 0x24
 8013dd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013dd2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8013dd6:	9305      	str	r3, [sp, #20]
 8013dd8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8013dda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013ddc:	9206      	str	r2, [sp, #24]
 8013dde:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8013de2:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8013de6:	e9cd a601 	strd	sl, r6, [sp, #4]
 8013dea:	442e      	add	r6, r5
 8013dec:	b236      	sxth	r6, r6
 8013dee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013df0:	9600      	str	r6, [sp, #0]
 8013df2:	681a      	ldr	r2, [r3, #0]
 8013df4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013df6:	685b      	ldr	r3, [r3, #4]
 8013df8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013dfa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8013dfc:	47b0      	blx	r6
 8013dfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013e00:	3301      	adds	r3, #1
 8013e02:	930e      	str	r3, [sp, #56]	; 0x38
 8013e04:	e6e6      	b.n	8013bd4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 8013e06:	2700      	movs	r7, #0
 8013e08:	e7cd      	b.n	8013da6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x230>
 8013e0a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8013e0c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013e0e:	3501      	adds	r5, #1
 8013e10:	429d      	cmp	r5, r3
 8013e12:	f6bf af77 	bge.w	8013d04 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8013e16:	4659      	mov	r1, fp
 8013e18:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8013e1a:	f7fa fcdd 	bl	800e7d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8013e1e:	4604      	mov	r4, r0
 8013e20:	b110      	cbz	r0, 8013e28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 8013e22:	280a      	cmp	r0, #10
 8013e24:	d1f2      	bne.n	8013e0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8013e26:	e76c      	b.n	8013d02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8013e28:	2400      	movs	r4, #0
 8013e2a:	e76b      	b.n	8013d04 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8013e2c:	f1bb 0f00 	cmp.w	fp, #0
 8013e30:	f43f af5c 	beq.w	8013cec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8013e34:	e777      	b.n	8013d26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

08013e36 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8013e36:	b530      	push	{r4, r5, lr}
 8013e38:	8a44      	ldrh	r4, [r0, #18]
 8013e3a:	8ac5      	ldrh	r5, [r0, #22]
 8013e3c:	82c3      	strh	r3, [r0, #22]
 8013e3e:	442c      	add	r4, r5
 8013e40:	1ae4      	subs	r4, r4, r3
 8013e42:	8244      	strh	r4, [r0, #18]
 8013e44:	8b03      	ldrh	r3, [r0, #24]
 8013e46:	8a84      	ldrh	r4, [r0, #20]
 8013e48:	4422      	add	r2, r4
 8013e4a:	440c      	add	r4, r1
 8013e4c:	1a59      	subs	r1, r3, r1
 8013e4e:	8342      	strh	r2, [r0, #26]
 8013e50:	8284      	strh	r4, [r0, #20]
 8013e52:	8301      	strh	r1, [r0, #24]
 8013e54:	bd30      	pop	{r4, r5, pc}

08013e56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8013e56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e5a:	7a43      	ldrb	r3, [r0, #9]
 8013e5c:	1eda      	subs	r2, r3, #3
 8013e5e:	b087      	sub	sp, #28
 8013e60:	4604      	mov	r4, r0
 8013e62:	b2d2      	uxtb	r2, r2
 8013e64:	460f      	mov	r7, r1
 8013e66:	2900      	cmp	r1, #0
 8013e68:	d036      	beq.n	8013ed8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8013e6a:	2a01      	cmp	r2, #1
 8013e6c:	d932      	bls.n	8013ed4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8013e6e:	1e58      	subs	r0, r3, #1
 8013e70:	f1d0 0b00 	rsbs	fp, r0, #0
 8013e74:	eb4b 0b00 	adc.w	fp, fp, r0
 8013e78:	1e99      	subs	r1, r3, #2
 8013e7a:	424b      	negs	r3, r1
 8013e7c:	414b      	adcs	r3, r1
 8013e7e:	9303      	str	r3, [sp, #12]
 8013e80:	2300      	movs	r3, #0
 8013e82:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8013e86:	2500      	movs	r5, #0
 8013e88:	8265      	strh	r5, [r4, #18]
 8013e8a:	82a5      	strh	r5, [r4, #20]
 8013e8c:	46a9      	mov	r9, r5
 8013e8e:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8013e92:	2300      	movs	r3, #0
 8013e94:	9305      	str	r3, [sp, #20]
 8013e96:	8823      	ldrh	r3, [r4, #0]
 8013e98:	2b20      	cmp	r3, #32
 8013e9a:	d02b      	beq.n	8013ef4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8013e9c:	eba3 020a 	sub.w	r2, r3, sl
 8013ea0:	4256      	negs	r6, r2
 8013ea2:	4156      	adcs	r6, r2
 8013ea4:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8013ea8:	4293      	cmp	r3, r2
 8013eaa:	d004      	beq.n	8013eb6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8013eac:	4553      	cmp	r3, sl
 8013eae:	bf16      	itet	ne
 8013eb0:	4699      	movne	r9, r3
 8013eb2:	2601      	moveq	r6, #1
 8013eb4:	2600      	movne	r6, #0
 8013eb6:	ab05      	add	r3, sp, #20
 8013eb8:	68e2      	ldr	r2, [r4, #12]
 8013eba:	7a21      	ldrb	r1, [r4, #8]
 8013ebc:	6860      	ldr	r0, [r4, #4]
 8013ebe:	f002 fc81 	bl	80167c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013ec2:	8020      	strh	r0, [r4, #0]
 8013ec4:	b9c8      	cbnz	r0, 8013efa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8013ec6:	8b22      	ldrh	r2, [r4, #24]
 8013ec8:	2300      	movs	r3, #0
 8013eca:	4611      	mov	r1, r2
 8013ecc:	4620      	mov	r0, r4
 8013ece:	f7ff ffb2 	bl	8013e36 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8013ed2:	e066      	b.n	8013fa2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8013ed4:	468b      	mov	fp, r1
 8013ed6:	e7cf      	b.n	8013e78 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 8013ed8:	3b01      	subs	r3, #1
 8013eda:	2a01      	cmp	r2, #1
 8013edc:	bf8c      	ite	hi
 8013ede:	2200      	movhi	r2, #0
 8013ee0:	2201      	movls	r2, #1
 8013ee2:	2b01      	cmp	r3, #1
 8013ee4:	bf8c      	ite	hi
 8013ee6:	2300      	movhi	r3, #0
 8013ee8:	2301      	movls	r3, #1
 8013eea:	9202      	str	r2, [sp, #8]
 8013eec:	9301      	str	r3, [sp, #4]
 8013eee:	9103      	str	r1, [sp, #12]
 8013ef0:	468b      	mov	fp, r1
 8013ef2:	e7c8      	b.n	8013e86 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8013ef4:	4699      	mov	r9, r3
 8013ef6:	2601      	movs	r6, #1
 8013ef8:	e7dd      	b.n	8013eb6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8013efa:	8ae3      	ldrh	r3, [r4, #22]
 8013efc:	280a      	cmp	r0, #10
 8013efe:	f103 0301 	add.w	r3, r3, #1
 8013f02:	82e3      	strh	r3, [r4, #22]
 8013f04:	d0df      	beq.n	8013ec6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8013f06:	9a05      	ldr	r2, [sp, #20]
 8013f08:	bb42      	cbnz	r2, 8013f5c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 8013f0a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8013f0e:	4298      	cmp	r0, r3
 8013f10:	d001      	beq.n	8013f16 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8013f12:	4550      	cmp	r0, sl
 8013f14:	d1bd      	bne.n	8013e92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8013f16:	8823      	ldrh	r3, [r4, #0]
 8013f18:	8b21      	ldrh	r1, [r4, #24]
 8013f1a:	2b20      	cmp	r3, #32
 8013f1c:	d001      	beq.n	8013f22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8013f1e:	4553      	cmp	r3, sl
 8013f20:	d131      	bne.n	8013f86 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8013f22:	2e00      	cmp	r6, #0
 8013f24:	bf0a      	itet	eq
 8013f26:	460d      	moveq	r5, r1
 8013f28:	4630      	movne	r0, r6
 8013f2a:	2001      	moveq	r0, #1
 8013f2c:	440a      	add	r2, r1
 8013f2e:	8aa3      	ldrh	r3, [r4, #20]
 8013f30:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8013f34:	b292      	uxth	r2, r2
 8013f36:	8322      	strh	r2, [r4, #24]
 8013f38:	4413      	add	r3, r2
 8013f3a:	2f00      	cmp	r7, #0
 8013f3c:	d03a      	beq.n	8013fb4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8013f3e:	f1bb 0f00 	cmp.w	fp, #0
 8013f42:	d102      	bne.n	8013f4a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 8013f44:	9903      	ldr	r1, [sp, #12]
 8013f46:	b301      	cbz	r1, 8013f8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8013f48:	b1f8      	cbz	r0, 8013f8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8013f4a:	8ba1      	ldrh	r1, [r4, #28]
 8013f4c:	4419      	add	r1, r3
 8013f4e:	458c      	cmp	ip, r1
 8013f50:	da2a      	bge.n	8013fa8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8013f52:	8a61      	ldrh	r1, [r4, #18]
 8013f54:	b341      	cbz	r1, 8013fa8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8013f56:	4563      	cmp	r3, ip
 8013f58:	dd9b      	ble.n	8013e92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8013f5a:	e01c      	b.n	8013f96 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8013f5c:	8893      	ldrh	r3, [r2, #4]
 8013f5e:	8023      	strh	r3, [r4, #0]
 8013f60:	f892 800d 	ldrb.w	r8, [r2, #13]
 8013f64:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8013f68:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8013f6c:	f892 800a 	ldrb.w	r8, [r2, #10]
 8013f70:	ea48 0800 	orr.w	r8, r8, r0
 8013f74:	68e0      	ldr	r0, [r4, #12]
 8013f76:	6803      	ldr	r3, [r0, #0]
 8013f78:	4649      	mov	r1, r9
 8013f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f7c:	4798      	blx	r3
 8013f7e:	eb08 0200 	add.w	r2, r8, r0
 8013f82:	b292      	uxth	r2, r2
 8013f84:	e7c7      	b.n	8013f16 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8013f86:	2000      	movs	r0, #0
 8013f88:	e7d0      	b.n	8013f2c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8013f8a:	4563      	cmp	r3, ip
 8013f8c:	dd81      	ble.n	8013e92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8013f8e:	8a63      	ldrh	r3, [r4, #18]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	f43f af7e 	beq.w	8013e92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8013f96:	2301      	movs	r3, #1
 8013f98:	77a3      	strb	r3, [r4, #30]
 8013f9a:	8ba2      	ldrh	r2, [r4, #28]
 8013f9c:	8b63      	ldrh	r3, [r4, #26]
 8013f9e:	4413      	add	r3, r2
 8013fa0:	8363      	strh	r3, [r4, #26]
 8013fa2:	b007      	add	sp, #28
 8013fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fa8:	2300      	movs	r3, #0
 8013faa:	4611      	mov	r1, r2
 8013fac:	4620      	mov	r0, r4
 8013fae:	f7ff ff42 	bl	8013e36 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8013fb2:	e76e      	b.n	8013e92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8013fb4:	4563      	cmp	r3, ip
 8013fb6:	dd14      	ble.n	8013fe2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8013fb8:	9b02      	ldr	r3, [sp, #8]
 8013fba:	b113      	cbz	r3, 8013fc2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8013fbc:	2301      	movs	r3, #1
 8013fbe:	460a      	mov	r2, r1
 8013fc0:	e783      	b.n	8013eca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8013fc2:	9b01      	ldr	r3, [sp, #4]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	f43f af64 	beq.w	8013e92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8013fca:	2800      	cmp	r0, #0
 8013fcc:	f47f af61 	bne.w	8013e92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8013fd0:	b116      	cbz	r6, 8013fd8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8013fd2:	2301      	movs	r3, #1
 8013fd4:	462a      	mov	r2, r5
 8013fd6:	e779      	b.n	8013ecc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 8013fd8:	8a63      	ldrh	r3, [r4, #18]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	f43f af59 	beq.w	8013e92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8013fe0:	e7df      	b.n	8013fa2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8013fe2:	2800      	cmp	r0, #0
 8013fe4:	f47f af55 	bne.w	8013e92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8013fe8:	2e00      	cmp	r6, #0
 8013fea:	f43f af52 	beq.w	8013e92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8013fee:	2301      	movs	r3, #1
 8013ff0:	462a      	mov	r2, r5
 8013ff2:	e7db      	b.n	8013fac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08013ff4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8013ff4:	b530      	push	{r4, r5, lr}
 8013ff6:	4605      	mov	r5, r0
 8013ff8:	b08b      	sub	sp, #44	; 0x2c
 8013ffa:	b191      	cbz	r1, 8014022 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 8013ffc:	e9cd 3100 	strd	r3, r1, [sp]
 8014000:	4613      	mov	r3, r2
 8014002:	4601      	mov	r1, r0
 8014004:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8014008:	a802      	add	r0, sp, #8
 801400a:	f7ff fd0d 	bl	8013a28 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801400e:	2401      	movs	r4, #1
 8014010:	2100      	movs	r1, #0
 8014012:	a802      	add	r0, sp, #8
 8014014:	f7ff ff1f 	bl	8013e56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8014018:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801401c:	b163      	cbz	r3, 8014038 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801401e:	3401      	adds	r4, #1
 8014020:	e7f6      	b.n	8014010 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8014022:	f002 fcc7 	bl	80169b4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014026:	2401      	movs	r4, #1
 8014028:	280a      	cmp	r0, #10
 801402a:	4628      	mov	r0, r5
 801402c:	bf08      	it	eq
 801402e:	3401      	addeq	r4, #1
 8014030:	f002 fcc0 	bl	80169b4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014034:	2800      	cmp	r0, #0
 8014036:	d1f7      	bne.n	8014028 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8014038:	b2a0      	uxth	r0, r4
 801403a:	b00b      	add	sp, #44	; 0x2c
 801403c:	bd30      	pop	{r4, r5, pc}

0801403e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801403e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014042:	b0db      	sub	sp, #364	; 0x16c
 8014044:	4689      	mov	r9, r1
 8014046:	f8dd a190 	ldr.w	sl, [sp, #400]	; 0x190
 801404a:	900a      	str	r0, [sp, #40]	; 0x28
 801404c:	461c      	mov	r4, r3
 801404e:	f1ba 0f00 	cmp.w	sl, #0
 8014052:	f000 80a5 	beq.w	80141a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	2b00      	cmp	r3, #0
 801405a:	f000 80a1 	beq.w	80141a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801405e:	7ba3      	ldrb	r3, [r4, #14]
 8014060:	2b00      	cmp	r3, #0
 8014062:	f000 809d 	beq.w	80141a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8014066:	6810      	ldr	r0, [r2, #0]
 8014068:	6851      	ldr	r1, [r2, #4]
 801406a:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801406e:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8014072:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8014076:	4643      	mov	r3, r8
 8014078:	c303      	stmia	r3!, {r0, r1}
 801407a:	2500      	movs	r5, #0
 801407c:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8014080:	79a2      	ldrb	r2, [r4, #6]
 8014082:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8014086:	a90e      	add	r1, sp, #56	; 0x38
 8014088:	4640      	mov	r0, r8
 801408a:	950e      	str	r5, [sp, #56]	; 0x38
 801408c:	f7ff fd42 	bl	8013b14 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8014090:	a90e      	add	r1, sp, #56	; 0x38
 8014092:	4608      	mov	r0, r1
 8014094:	79a2      	ldrb	r2, [r4, #6]
 8014096:	af18      	add	r7, sp, #96	; 0x60
 8014098:	f7ff fd3c 	bl	8013b14 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801409c:	4638      	mov	r0, r7
 801409e:	f002 f852 	bl	8016146 <_ZN8touchgfx12TextProviderC1Ev>
 80140a2:	6820      	ldr	r0, [r4, #0]
 80140a4:	6803      	ldr	r3, [r0, #0]
 80140a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80140a8:	4798      	blx	r3
 80140aa:	9a65      	ldr	r2, [sp, #404]	; 0x194
 80140ac:	4603      	mov	r3, r0
 80140ae:	4651      	mov	r1, sl
 80140b0:	4638      	mov	r0, r7
 80140b2:	f002 f88d 	bl	80161d0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80140b6:	6820      	ldr	r0, [r4, #0]
 80140b8:	7923      	ldrb	r3, [r4, #4]
 80140ba:	9308      	str	r3, [sp, #32]
 80140bc:	6803      	ldr	r3, [r0, #0]
 80140be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80140c0:	4798      	blx	r3
 80140c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80140c6:	181e      	adds	r6, r3, r0
 80140c8:	42ae      	cmp	r6, r5
 80140ca:	dd06      	ble.n	80140da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 80140cc:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 80140d0:	4282      	cmp	r2, r0
 80140d2:	bfa4      	itt	ge
 80140d4:	189d      	addge	r5, r3, r2
 80140d6:	fb95 f5f6 	sdivge	r5, r5, r6
 80140da:	a82e      	add	r0, sp, #184	; 0xb8
 80140dc:	f002 f833 	bl	8016146 <_ZN8touchgfx12TextProviderC1Ev>
 80140e0:	7c23      	ldrb	r3, [r4, #16]
 80140e2:	b14b      	cbz	r3, 80140f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xba>
 80140e4:	6820      	ldr	r0, [r4, #0]
 80140e6:	6803      	ldr	r3, [r0, #0]
 80140e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80140ea:	4798      	blx	r3
 80140ec:	9a65      	ldr	r2, [sp, #404]	; 0x194
 80140ee:	4603      	mov	r3, r0
 80140f0:	4651      	mov	r1, sl
 80140f2:	a82e      	add	r0, sp, #184	; 0xb8
 80140f4:	f002 f86c 	bl	80161d0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80140f8:	7c21      	ldrb	r1, [r4, #16]
 80140fa:	9101      	str	r1, [sp, #4]
 80140fc:	6821      	ldr	r1, [r4, #0]
 80140fe:	7963      	ldrb	r3, [r4, #5]
 8014100:	9100      	str	r1, [sp, #0]
 8014102:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8014106:	a92e      	add	r1, sp, #184	; 0xb8
 8014108:	a810      	add	r0, sp, #64	; 0x40
 801410a:	f7ff fc8d 	bl	8013a28 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801410e:	7c23      	ldrb	r3, [r4, #16]
 8014110:	b9bb      	cbnz	r3, 8014142 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x104>
 8014112:	fa1f fa86 	uxth.w	sl, r6
 8014116:	2d00      	cmp	r5, #0
 8014118:	dd45      	ble.n	80141a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 801411a:	4638      	mov	r0, r7
 801411c:	f002 fc4a 	bl	80169b4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014120:	2800      	cmp	r0, #0
 8014122:	d03d      	beq.n	80141a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8014124:	280a      	cmp	r0, #10
 8014126:	d1f6      	bne.n	8014116 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 8014128:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801412c:	4453      	add	r3, sl
 801412e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8014132:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8014136:	eba3 030a 	sub.w	r3, r3, sl
 801413a:	3d01      	subs	r5, #1
 801413c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8014140:	e7e9      	b.n	8014116 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 8014142:	0073      	lsls	r3, r6, #1
 8014144:	9309      	str	r3, [sp, #36]	; 0x24
 8014146:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801414a:	fa1f fa86 	uxth.w	sl, r6
 801414e:	2d00      	cmp	r5, #0
 8014150:	dd29      	ble.n	80141a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 8014152:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8014156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014158:	428b      	cmp	r3, r1
 801415a:	bfd4      	ite	le
 801415c:	2100      	movle	r1, #0
 801415e:	2101      	movgt	r1, #1
 8014160:	a810      	add	r0, sp, #64	; 0x40
 8014162:	f7ff fe78 	bl	8013e56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8014166:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 801416a:	3b01      	subs	r3, #1
 801416c:	b29b      	uxth	r3, r3
 801416e:	455b      	cmp	r3, fp
 8014170:	930b      	str	r3, [sp, #44]	; 0x2c
 8014172:	d005      	beq.n	8014180 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 8014174:	7961      	ldrb	r1, [r4, #5]
 8014176:	4638      	mov	r0, r7
 8014178:	f7fa fb2e 	bl	800e7d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801417c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801417e:	e7f4      	b.n	801416a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12c>
 8014180:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8014184:	4453      	add	r3, sl
 8014186:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801418a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801418e:	eba3 030a 	sub.w	r3, r3, sl
 8014192:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8014196:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801419a:	3d01      	subs	r5, #1
 801419c:	2b00      	cmp	r3, #0
 801419e:	d1d6      	bne.n	801414e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x110>
 80141a0:	b05b      	add	sp, #364	; 0x16c
 80141a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141a6:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 80141aa:	ad44      	add	r5, sp, #272	; 0x110
 80141ac:	f04f 0b00 	mov.w	fp, #0
 80141b0:	7c23      	ldrb	r3, [r4, #16]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d067      	beq.n	8014286 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 80141b6:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 80141ba:	458a      	cmp	sl, r1
 80141bc:	bfd4      	ite	le
 80141be:	2100      	movle	r1, #0
 80141c0:	2101      	movgt	r1, #1
 80141c2:	a810      	add	r0, sp, #64	; 0x40
 80141c4:	f7ff fe47 	bl	8013e56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80141c8:	9b08      	ldr	r3, [sp, #32]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d056      	beq.n	801427c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 80141ce:	7c23      	ldrb	r3, [r4, #16]
 80141d0:	9309      	str	r3, [sp, #36]	; 0x24
 80141d2:	2258      	movs	r2, #88	; 0x58
 80141d4:	4639      	mov	r1, r7
 80141d6:	4628      	mov	r0, r5
 80141d8:	f00f fb36 	bl	8023848 <memcpy>
 80141dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d059      	beq.n	8014296 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 80141e2:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 80141e6:	7922      	ldrb	r2, [r4, #4]
 80141e8:	2a01      	cmp	r2, #1
 80141ea:	d13d      	bne.n	8014268 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>
 80141ec:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 80141f0:	1ac0      	subs	r0, r0, r3
 80141f2:	2302      	movs	r3, #2
 80141f4:	fb90 f0f3 	sdiv	r0, r0, r3
 80141f8:	b200      	sxth	r0, r0
 80141fa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80141fe:	4418      	add	r0, r3
 8014200:	7c23      	ldrb	r3, [r4, #16]
 8014202:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
 8014206:	2b00      	cmp	r3, #0
 8014208:	d03a      	beq.n	8014280 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801420a:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 801420e:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 8014212:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8014216:	9500      	str	r5, [sp, #0]
 8014218:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801421c:	e9cd b703 	strd	fp, r7, [sp, #12]
 8014220:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8014224:	464a      	mov	r2, r9
 8014226:	2100      	movs	r1, #0
 8014228:	980a      	ldr	r0, [sp, #40]	; 0x28
 801422a:	f7ff fca4 	bl	8013b76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801422e:	2800      	cmp	r0, #0
 8014230:	d1b6      	bne.n	80141a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8014232:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8014236:	b2b2      	uxth	r2, r6
 8014238:	4611      	mov	r1, r2
 801423a:	4413      	add	r3, r2
 801423c:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8014240:	1a52      	subs	r2, r2, r1
 8014242:	7c21      	ldrb	r1, [r4, #16]
 8014244:	b21b      	sxth	r3, r3
 8014246:	b212      	sxth	r2, r2
 8014248:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801424c:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8014250:	b109      	cbz	r1, 8014256 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 8014252:	42b2      	cmp	r2, r6
 8014254:	dba4      	blt.n	80141a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8014256:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801425a:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801425e:	440a      	add	r2, r1
 8014260:	b212      	sxth	r2, r2
 8014262:	4293      	cmp	r3, r2
 8014264:	dda4      	ble.n	80141b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x172>
 8014266:	e79b      	b.n	80141a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8014268:	2a02      	cmp	r2, #2
 801426a:	d105      	bne.n	8014278 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23a>
 801426c:	7be2      	ldrb	r2, [r4, #15]
 801426e:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8014272:	1a80      	subs	r0, r0, r2
 8014274:	1ac0      	subs	r0, r0, r3
 8014276:	e7bf      	b.n	80141f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ba>
 8014278:	2000      	movs	r0, #0
 801427a:	e7be      	b.n	80141fa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 801427c:	7be0      	ldrb	r0, [r4, #15]
 801427e:	e7bc      	b.n	80141fa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 8014280:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014284:	e7c3      	b.n	801420e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d0>
 8014286:	9b08      	ldr	r3, [sp, #32]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d0f7      	beq.n	801427c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801428c:	2258      	movs	r2, #88	; 0x58
 801428e:	4639      	mov	r1, r7
 8014290:	4628      	mov	r0, r5
 8014292:	f00f fad9 	bl	8023848 <memcpy>
 8014296:	2300      	movs	r3, #0
 8014298:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801429c:	6821      	ldr	r1, [r4, #0]
 801429e:	4628      	mov	r0, r5
 80142a0:	f7ff fbfc 	bl	8013a9c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80142a4:	b203      	sxth	r3, r0
 80142a6:	e79e      	b.n	80141e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a8>

080142a8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80142a8:	b510      	push	{r4, lr}
 80142aa:	2b02      	cmp	r3, #2
 80142ac:	f9b0 4000 	ldrsh.w	r4, [r0]
 80142b0:	d00b      	beq.n	80142ca <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 80142b2:	2b03      	cmp	r3, #3
 80142b4:	d00e      	beq.n	80142d4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 80142b6:	2b01      	cmp	r3, #1
 80142b8:	d001      	beq.n	80142be <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 80142ba:	1860      	adds	r0, r4, r1
 80142bc:	bd10      	pop	{r4, pc}
 80142be:	8880      	ldrh	r0, [r0, #4]
 80142c0:	4420      	add	r0, r4
 80142c2:	b200      	sxth	r0, r0
 80142c4:	1a80      	subs	r0, r0, r2
 80142c6:	3801      	subs	r0, #1
 80142c8:	e7f8      	b.n	80142bc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 80142ca:	8880      	ldrh	r0, [r0, #4]
 80142cc:	4420      	add	r0, r4
 80142ce:	b200      	sxth	r0, r0
 80142d0:	1a40      	subs	r0, r0, r1
 80142d2:	e7f8      	b.n	80142c6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80142d4:	18a0      	adds	r0, r4, r2
 80142d6:	e7f1      	b.n	80142bc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

080142d8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80142d8:	b510      	push	{r4, lr}
 80142da:	2b02      	cmp	r3, #2
 80142dc:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80142e0:	d006      	beq.n	80142f0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 80142e2:	2b03      	cmp	r3, #3
 80142e4:	d00a      	beq.n	80142fc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80142e6:	2b01      	cmp	r3, #1
 80142e8:	bf14      	ite	ne
 80142ea:	18a0      	addne	r0, r4, r2
 80142ec:	1860      	addeq	r0, r4, r1
 80142ee:	bd10      	pop	{r4, pc}
 80142f0:	88c0      	ldrh	r0, [r0, #6]
 80142f2:	4420      	add	r0, r4
 80142f4:	b200      	sxth	r0, r0
 80142f6:	1a80      	subs	r0, r0, r2
 80142f8:	3801      	subs	r0, #1
 80142fa:	e7f8      	b.n	80142ee <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 80142fc:	88c0      	ldrh	r0, [r0, #6]
 80142fe:	4420      	add	r0, r4
 8014300:	b200      	sxth	r0, r0
 8014302:	1a40      	subs	r0, r0, r1
 8014304:	e7f8      	b.n	80142f8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08014308 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8014308:	4b01      	ldr	r3, [pc, #4]	; (8014310 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801430a:	2200      	movs	r2, #0
 801430c:	601a      	str	r2, [r3, #0]
 801430e:	4770      	bx	lr
 8014310:	2000a044 	.word	0x2000a044

08014314 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8014314:	4603      	mov	r3, r0
 8014316:	b1c8      	cbz	r0, 801434c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8014318:	0c02      	lsrs	r2, r0, #16
 801431a:	0412      	lsls	r2, r2, #16
 801431c:	b9a2      	cbnz	r2, 8014348 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801431e:	0403      	lsls	r3, r0, #16
 8014320:	2010      	movs	r0, #16
 8014322:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014326:	bf04      	itt	eq
 8014328:	021b      	lsleq	r3, r3, #8
 801432a:	3008      	addeq	r0, #8
 801432c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014330:	bf04      	itt	eq
 8014332:	011b      	lsleq	r3, r3, #4
 8014334:	3004      	addeq	r0, #4
 8014336:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801433a:	bf04      	itt	eq
 801433c:	009b      	lsleq	r3, r3, #2
 801433e:	3002      	addeq	r0, #2
 8014340:	2b00      	cmp	r3, #0
 8014342:	db04      	blt.n	801434e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8014344:	3001      	adds	r0, #1
 8014346:	4770      	bx	lr
 8014348:	2000      	movs	r0, #0
 801434a:	e7ea      	b.n	8014322 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801434c:	2020      	movs	r0, #32
 801434e:	4770      	bx	lr

08014350 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8014350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014354:	b087      	sub	sp, #28
 8014356:	4681      	mov	r9, r0
 8014358:	4698      	mov	r8, r3
 801435a:	4610      	mov	r0, r2
 801435c:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8014360:	460d      	mov	r5, r1
 8014362:	b981      	cbnz	r1, 8014386 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8014364:	b14b      	cbz	r3, 801437a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8014366:	460b      	mov	r3, r1
 8014368:	e9cd 4700 	strd	r4, r7, [sp]
 801436c:	464a      	mov	r2, r9
 801436e:	4641      	mov	r1, r8
 8014370:	f7ff ffee 	bl	8014350 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8014374:	b007      	add	sp, #28
 8014376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801437a:	f04f 33ff 	mov.w	r3, #4294967295
 801437e:	603b      	str	r3, [r7, #0]
 8014380:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8014384:	e7f6      	b.n	8014374 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8014386:	fa32 fa01 	lsrs.w	sl, r2, r1
 801438a:	d107      	bne.n	801439c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801438c:	fb09 f602 	mul.w	r6, r9, r2
 8014390:	fbb6 f0f4 	udiv	r0, r6, r4
 8014394:	fb04 6610 	mls	r6, r4, r0, r6
 8014398:	603e      	str	r6, [r7, #0]
 801439a:	e7eb      	b.n	8014374 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801439c:	2601      	movs	r6, #1
 801439e:	408e      	lsls	r6, r1
 80143a0:	3e01      	subs	r6, #1
 80143a2:	4016      	ands	r6, r2
 80143a4:	fa09 fb01 	lsl.w	fp, r9, r1
 80143a8:	4630      	mov	r0, r6
 80143aa:	fbbb f3f4 	udiv	r3, fp, r4
 80143ae:	9302      	str	r3, [sp, #8]
 80143b0:	fb0a f303 	mul.w	r3, sl, r3
 80143b4:	9303      	str	r3, [sp, #12]
 80143b6:	f7ff ffad 	bl	8014314 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80143ba:	464a      	mov	r2, r9
 80143bc:	460b      	mov	r3, r1
 80143be:	e9cd 4700 	strd	r4, r7, [sp]
 80143c2:	4601      	mov	r1, r0
 80143c4:	4630      	mov	r0, r6
 80143c6:	f7ff ffc3 	bl	8014350 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80143ca:	9b02      	ldr	r3, [sp, #8]
 80143cc:	fb04 bb13 	mls	fp, r4, r3, fp
 80143d0:	4606      	mov	r6, r0
 80143d2:	4658      	mov	r0, fp
 80143d4:	eb05 0108 	add.w	r1, r5, r8
 80143d8:	f7ff ff9c 	bl	8014314 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80143dc:	ab05      	add	r3, sp, #20
 80143de:	e9cd 4300 	strd	r4, r3, [sp]
 80143e2:	465a      	mov	r2, fp
 80143e4:	4603      	mov	r3, r0
 80143e6:	4650      	mov	r0, sl
 80143e8:	f7ff ffb2 	bl	8014350 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80143ec:	6839      	ldr	r1, [r7, #0]
 80143ee:	9a05      	ldr	r2, [sp, #20]
 80143f0:	9b03      	ldr	r3, [sp, #12]
 80143f2:	4411      	add	r1, r2
 80143f4:	fbb1 f2f4 	udiv	r2, r1, r4
 80143f8:	18d3      	adds	r3, r2, r3
 80143fa:	441e      	add	r6, r3
 80143fc:	fb04 1412 	mls	r4, r4, r2, r1
 8014400:	4430      	add	r0, r6
 8014402:	603c      	str	r4, [r7, #0]
 8014404:	e7b6      	b.n	8014374 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08014406 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8014406:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801440a:	b085      	sub	sp, #20
 801440c:	f1b0 0900 	subs.w	r9, r0, #0
 8014410:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8014412:	461d      	mov	r5, r3
 8014414:	bfbf      	itttt	lt
 8014416:	6823      	ldrlt	r3, [r4, #0]
 8014418:	425b      	neglt	r3, r3
 801441a:	f1c9 0900 	rsblt	r9, r9, #0
 801441e:	6023      	strlt	r3, [r4, #0]
 8014420:	bfb4      	ite	lt
 8014422:	f04f 36ff 	movlt.w	r6, #4294967295
 8014426:	2601      	movge	r6, #1
 8014428:	2a00      	cmp	r2, #0
 801442a:	4617      	mov	r7, r2
 801442c:	da04      	bge.n	8014438 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801442e:	6823      	ldr	r3, [r4, #0]
 8014430:	425b      	negs	r3, r3
 8014432:	4257      	negs	r7, r2
 8014434:	4276      	negs	r6, r6
 8014436:	6023      	str	r3, [r4, #0]
 8014438:	2d00      	cmp	r5, #0
 801443a:	4638      	mov	r0, r7
 801443c:	bfba      	itte	lt
 801443e:	426d      	neglt	r5, r5
 8014440:	f04f 38ff 	movlt.w	r8, #4294967295
 8014444:	f04f 0801 	movge.w	r8, #1
 8014448:	f7ff ff64 	bl	8014314 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801444c:	ab03      	add	r3, sp, #12
 801444e:	e9cd 5300 	strd	r5, r3, [sp]
 8014452:	463a      	mov	r2, r7
 8014454:	4603      	mov	r3, r0
 8014456:	4648      	mov	r0, r9
 8014458:	f7ff ff7a 	bl	8014350 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801445c:	6823      	ldr	r3, [r4, #0]
 801445e:	9a03      	ldr	r2, [sp, #12]
 8014460:	4546      	cmp	r6, r8
 8014462:	441a      	add	r2, r3
 8014464:	fb92 f3f5 	sdiv	r3, r2, r5
 8014468:	4418      	add	r0, r3
 801446a:	bf18      	it	ne
 801446c:	4240      	negne	r0, r0
 801446e:	fb05 2313 	mls	r3, r5, r3, r2
 8014472:	1c72      	adds	r2, r6, #1
 8014474:	6023      	str	r3, [r4, #0]
 8014476:	d105      	bne.n	8014484 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8014478:	2b00      	cmp	r3, #0
 801447a:	f1c3 0200 	rsb	r2, r3, #0
 801447e:	db0b      	blt.n	8014498 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8014480:	6022      	str	r2, [r4, #0]
 8014482:	e006      	b.n	8014492 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8014484:	2e01      	cmp	r6, #1
 8014486:	d104      	bne.n	8014492 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8014488:	2b00      	cmp	r3, #0
 801448a:	da02      	bge.n	8014492 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801448c:	442b      	add	r3, r5
 801448e:	3801      	subs	r0, #1
 8014490:	6023      	str	r3, [r4, #0]
 8014492:	b005      	add	sp, #20
 8014494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014498:	3801      	subs	r0, #1
 801449a:	1b52      	subs	r2, r2, r5
 801449c:	e7f0      	b.n	8014480 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

080144a0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80144a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80144a4:	4c1c      	ldr	r4, [pc, #112]	; (8014518 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80144a6:	6807      	ldr	r7, [r0, #0]
 80144a8:	69a3      	ldr	r3, [r4, #24]
 80144aa:	4605      	mov	r5, r0
 80144ac:	b92b      	cbnz	r3, 80144ba <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80144ae:	6840      	ldr	r0, [r0, #4]
 80144b0:	e9c5 7000 	strd	r7, r0, [r5]
 80144b4:	b004      	add	sp, #16
 80144b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144ba:	68a2      	ldr	r2, [r4, #8]
 80144bc:	6820      	ldr	r0, [r4, #0]
 80144be:	ae04      	add	r6, sp, #16
 80144c0:	f04f 0802 	mov.w	r8, #2
 80144c4:	fb93 f1f8 	sdiv	r1, r3, r8
 80144c8:	440a      	add	r2, r1
 80144ca:	f846 2d04 	str.w	r2, [r6, #-4]!
 80144ce:	69e1      	ldr	r1, [r4, #28]
 80144d0:	9600      	str	r6, [sp, #0]
 80144d2:	463a      	mov	r2, r7
 80144d4:	f7ff ff97 	bl	8014406 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80144d8:	69a3      	ldr	r3, [r4, #24]
 80144da:	686a      	ldr	r2, [r5, #4]
 80144dc:	6a21      	ldr	r1, [r4, #32]
 80144de:	9600      	str	r6, [sp, #0]
 80144e0:	4607      	mov	r7, r0
 80144e2:	6860      	ldr	r0, [r4, #4]
 80144e4:	f7ff ff8f 	bl	8014406 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80144e8:	6962      	ldr	r2, [r4, #20]
 80144ea:	69a3      	ldr	r3, [r4, #24]
 80144ec:	fb93 f8f8 	sdiv	r8, r3, r8
 80144f0:	4442      	add	r2, r8
 80144f2:	9203      	str	r2, [sp, #12]
 80144f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80144f6:	682a      	ldr	r2, [r5, #0]
 80144f8:	9600      	str	r6, [sp, #0]
 80144fa:	4407      	add	r7, r0
 80144fc:	68e0      	ldr	r0, [r4, #12]
 80144fe:	f7ff ff82 	bl	8014406 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014502:	9600      	str	r6, [sp, #0]
 8014504:	4680      	mov	r8, r0
 8014506:	69a3      	ldr	r3, [r4, #24]
 8014508:	686a      	ldr	r2, [r5, #4]
 801450a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801450c:	6920      	ldr	r0, [r4, #16]
 801450e:	f7ff ff7a 	bl	8014406 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014512:	4440      	add	r0, r8
 8014514:	e7cc      	b.n	80144b0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8014516:	bf00      	nop
 8014518:	2000a048 	.word	0x2000a048

0801451c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801451c:	b510      	push	{r4, lr}
 801451e:	4b07      	ldr	r3, [pc, #28]	; (801453c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8014520:	781b      	ldrb	r3, [r3, #0]
 8014522:	2b01      	cmp	r3, #1
 8014524:	d108      	bne.n	8014538 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8014526:	4b06      	ldr	r3, [pc, #24]	; (8014540 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8014528:	880c      	ldrh	r4, [r1, #0]
 801452a:	881b      	ldrh	r3, [r3, #0]
 801452c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8014530:	3b01      	subs	r3, #1
 8014532:	1b1b      	subs	r3, r3, r4
 8014534:	8003      	strh	r3, [r0, #0]
 8014536:	800a      	strh	r2, [r1, #0]
 8014538:	bd10      	pop	{r4, pc}
 801453a:	bf00      	nop
 801453c:	2000a034 	.word	0x2000a034
 8014540:	2000a038 	.word	0x2000a038

08014544 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8014544:	b510      	push	{r4, lr}
 8014546:	4b0a      	ldr	r3, [pc, #40]	; (8014570 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8014548:	781b      	ldrb	r3, [r3, #0]
 801454a:	2b01      	cmp	r3, #1
 801454c:	d10e      	bne.n	801456c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801454e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8014552:	8843      	ldrh	r3, [r0, #2]
 8014554:	f9b0 4000 	ldrsh.w	r4, [r0]
 8014558:	8044      	strh	r4, [r0, #2]
 801455a:	18ca      	adds	r2, r1, r3
 801455c:	4b05      	ldr	r3, [pc, #20]	; (8014574 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801455e:	881b      	ldrh	r3, [r3, #0]
 8014560:	1a9b      	subs	r3, r3, r2
 8014562:	8003      	strh	r3, [r0, #0]
 8014564:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014568:	80c3      	strh	r3, [r0, #6]
 801456a:	8081      	strh	r1, [r0, #4]
 801456c:	bd10      	pop	{r4, pc}
 801456e:	bf00      	nop
 8014570:	2000a034 	.word	0x2000a034
 8014574:	2000a030 	.word	0x2000a030

08014578 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8014578:	b510      	push	{r4, lr}
 801457a:	4b07      	ldr	r3, [pc, #28]	; (8014598 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801457c:	781b      	ldrb	r3, [r3, #0]
 801457e:	2b01      	cmp	r3, #1
 8014580:	d108      	bne.n	8014594 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8014582:	f9b1 3000 	ldrsh.w	r3, [r1]
 8014586:	f9b0 4000 	ldrsh.w	r4, [r0]
 801458a:	8003      	strh	r3, [r0, #0]
 801458c:	8893      	ldrh	r3, [r2, #4]
 801458e:	3b01      	subs	r3, #1
 8014590:	1b1b      	subs	r3, r3, r4
 8014592:	800b      	strh	r3, [r1, #0]
 8014594:	bd10      	pop	{r4, pc}
 8014596:	bf00      	nop
 8014598:	2000a034 	.word	0x2000a034

0801459c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801459c:	b513      	push	{r0, r1, r4, lr}
 801459e:	4b08      	ldr	r3, [pc, #32]	; (80145c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80145a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80145a4:	4b07      	ldr	r3, [pc, #28]	; (80145c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 80145a6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80145aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80145ae:	f8ad 3006 	strh.w	r3, [sp, #6]
 80145b2:	2400      	movs	r4, #0
 80145b4:	466a      	mov	r2, sp
 80145b6:	9400      	str	r4, [sp, #0]
 80145b8:	f7ff ffde 	bl	8014578 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80145bc:	b002      	add	sp, #8
 80145be:	bd10      	pop	{r4, pc}
 80145c0:	2000a030 	.word	0x2000a030
 80145c4:	2000a032 	.word	0x2000a032

080145c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80145c8:	b510      	push	{r4, lr}
 80145ca:	4b0a      	ldr	r3, [pc, #40]	; (80145f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80145cc:	781b      	ldrb	r3, [r3, #0]
 80145ce:	2b01      	cmp	r3, #1
 80145d0:	460a      	mov	r2, r1
 80145d2:	d10d      	bne.n	80145f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80145d4:	8881      	ldrh	r1, [r0, #4]
 80145d6:	8803      	ldrh	r3, [r0, #0]
 80145d8:	440b      	add	r3, r1
 80145da:	4601      	mov	r1, r0
 80145dc:	3b01      	subs	r3, #1
 80145de:	f821 3b02 	strh.w	r3, [r1], #2
 80145e2:	f7ff ffc9 	bl	8014578 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80145e6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80145ea:	88c2      	ldrh	r2, [r0, #6]
 80145ec:	8082      	strh	r2, [r0, #4]
 80145ee:	80c3      	strh	r3, [r0, #6]
 80145f0:	bd10      	pop	{r4, pc}
 80145f2:	bf00      	nop
 80145f4:	2000a034 	.word	0x2000a034

080145f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80145f8:	b507      	push	{r0, r1, r2, lr}
 80145fa:	4b09      	ldr	r3, [pc, #36]	; (8014620 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80145fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014600:	4b08      	ldr	r3, [pc, #32]	; (8014624 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8014602:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014606:	2100      	movs	r1, #0
 8014608:	f9b3 3000 	ldrsh.w	r3, [r3]
 801460c:	9100      	str	r1, [sp, #0]
 801460e:	4669      	mov	r1, sp
 8014610:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014614:	f7ff ffd8 	bl	80145c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8014618:	b003      	add	sp, #12
 801461a:	f85d fb04 	ldr.w	pc, [sp], #4
 801461e:	bf00      	nop
 8014620:	2000a030 	.word	0x2000a030
 8014624:	2000a032 	.word	0x2000a032

08014628 <_ZN8touchgfx11Application13requestRedrawEv>:
 8014628:	4b06      	ldr	r3, [pc, #24]	; (8014644 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801462a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801462e:	4b06      	ldr	r3, [pc, #24]	; (8014648 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8014630:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8014634:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014638:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801463c:	2100      	movs	r1, #0
 801463e:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8014642:	4770      	bx	lr
 8014644:	2000a030 	.word	0x2000a030
 8014648:	2000a032 	.word	0x2000a032

0801464c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801464c:	4b03      	ldr	r3, [pc, #12]	; (801465c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801464e:	6818      	ldr	r0, [r3, #0]
 8014650:	b110      	cbz	r0, 8014658 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8014652:	6803      	ldr	r3, [r0, #0]
 8014654:	699b      	ldr	r3, [r3, #24]
 8014656:	4718      	bx	r3
 8014658:	4770      	bx	lr
 801465a:	bf00      	nop
 801465c:	2000a078 	.word	0x2000a078

08014660 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8014660:	4770      	bx	lr
	...

08014664 <_ZN8touchgfx11Application4drawEv>:
 8014664:	b507      	push	{r0, r1, r2, lr}
 8014666:	4b09      	ldr	r3, [pc, #36]	; (801468c <_ZN8touchgfx11Application4drawEv+0x28>)
 8014668:	f9b3 2000 	ldrsh.w	r2, [r3]
 801466c:	4b08      	ldr	r3, [pc, #32]	; (8014690 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801466e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014672:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014676:	f8ad 3006 	strh.w	r3, [sp, #6]
 801467a:	6803      	ldr	r3, [r0, #0]
 801467c:	2100      	movs	r1, #0
 801467e:	9100      	str	r1, [sp, #0]
 8014680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014682:	4669      	mov	r1, sp
 8014684:	4798      	blx	r3
 8014686:	b003      	add	sp, #12
 8014688:	f85d fb04 	ldr.w	pc, [sp], #4
 801468c:	2000a030 	.word	0x2000a030
 8014690:	2000a032 	.word	0x2000a032

08014694 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8014694:	4b03      	ldr	r3, [pc, #12]	; (80146a4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8014696:	6818      	ldr	r0, [r3, #0]
 8014698:	b110      	cbz	r0, 80146a0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801469a:	6803      	ldr	r3, [r0, #0]
 801469c:	69db      	ldr	r3, [r3, #28]
 801469e:	4718      	bx	r3
 80146a0:	4770      	bx	lr
 80146a2:	bf00      	nop
 80146a4:	2000a078 	.word	0x2000a078

080146a8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80146a8:	4b03      	ldr	r3, [pc, #12]	; (80146b8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80146aa:	6818      	ldr	r0, [r3, #0]
 80146ac:	b110      	cbz	r0, 80146b4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80146ae:	6803      	ldr	r3, [r0, #0]
 80146b0:	6a1b      	ldr	r3, [r3, #32]
 80146b2:	4718      	bx	r3
 80146b4:	4770      	bx	lr
 80146b6:	bf00      	nop
 80146b8:	2000a078 	.word	0x2000a078

080146bc <_ZN8touchgfx11Application14handleKeyEventEh>:
 80146bc:	4b03      	ldr	r3, [pc, #12]	; (80146cc <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80146be:	6818      	ldr	r0, [r3, #0]
 80146c0:	b110      	cbz	r0, 80146c8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80146c2:	6803      	ldr	r3, [r0, #0]
 80146c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146c6:	4718      	bx	r3
 80146c8:	4770      	bx	lr
 80146ca:	bf00      	nop
 80146cc:	2000a078 	.word	0x2000a078

080146d0 <_ZN8touchgfx11Application15handleTickEventEv>:
 80146d0:	b570      	push	{r4, r5, r6, lr}
 80146d2:	4d34      	ldr	r5, [pc, #208]	; (80147a4 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 80146d4:	4604      	mov	r4, r0
 80146d6:	6828      	ldr	r0, [r5, #0]
 80146d8:	b140      	cbz	r0, 80146ec <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80146da:	7a03      	ldrb	r3, [r0, #8]
 80146dc:	b933      	cbnz	r3, 80146ec <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80146de:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 80146e2:	6803      	ldr	r3, [r0, #0]
 80146e4:	689b      	ldr	r3, [r3, #8]
 80146e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80146ea:	4718      	bx	r3
 80146ec:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 80146f0:	b97b      	cbnz	r3, 8014712 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80146f2:	b170      	cbz	r0, 8014712 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80146f4:	7a03      	ldrb	r3, [r0, #8]
 80146f6:	b163      	cbz	r3, 8014712 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80146f8:	4b2b      	ldr	r3, [pc, #172]	; (80147a8 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 80146fa:	6818      	ldr	r0, [r3, #0]
 80146fc:	b110      	cbz	r0, 8014704 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80146fe:	6803      	ldr	r3, [r0, #0]
 8014700:	691b      	ldr	r3, [r3, #16]
 8014702:	4798      	blx	r3
 8014704:	6828      	ldr	r0, [r5, #0]
 8014706:	6803      	ldr	r3, [r0, #0]
 8014708:	68db      	ldr	r3, [r3, #12]
 801470a:	4798      	blx	r3
 801470c:	2301      	movs	r3, #1
 801470e:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8014712:	2500      	movs	r5, #0
 8014714:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8014718:	42a8      	cmp	r0, r5
 801471a:	dd0c      	ble.n	8014736 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801471c:	1963      	adds	r3, r4, r5
 801471e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8014722:	b132      	cbz	r2, 8014732 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8014724:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8014728:	4413      	add	r3, r2
 801472a:	6858      	ldr	r0, [r3, #4]
 801472c:	6803      	ldr	r3, [r0, #0]
 801472e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014730:	4798      	blx	r3
 8014732:	3501      	adds	r5, #1
 8014734:	e7ee      	b.n	8014714 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8014736:	2300      	movs	r3, #0
 8014738:	461a      	mov	r2, r3
 801473a:	4298      	cmp	r0, r3
 801473c:	d114      	bne.n	8014768 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 801473e:	1d25      	adds	r5, r4, #4
 8014740:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 8014744:	1e48      	subs	r0, r1, #1
 8014746:	b280      	uxth	r0, r0
 8014748:	4291      	cmp	r1, r2
 801474a:	dd24      	ble.n	8014796 <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 801474c:	4288      	cmp	r0, r1
 801474e:	d2fb      	bcs.n	8014748 <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 8014750:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8014754:	3304      	adds	r3, #4
 8014756:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801475a:	428b      	cmp	r3, r1
 801475c:	d018      	beq.n	8014790 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801475e:	f853 6f04 	ldr.w	r6, [r3, #4]!
 8014762:	f843 6c04 	str.w	r6, [r3, #-4]
 8014766:	e7f8      	b.n	801475a <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 8014768:	18e1      	adds	r1, r4, r3
 801476a:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801476e:	b16d      	cbz	r5, 801478c <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 8014770:	429a      	cmp	r2, r3
 8014772:	d00a      	beq.n	801478a <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 8014774:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8014778:	4431      	add	r1, r6
 801477a:	684e      	ldr	r6, [r1, #4]
 801477c:	b291      	uxth	r1, r2
 801477e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8014782:	604e      	str	r6, [r1, #4]
 8014784:	18a1      	adds	r1, r4, r2
 8014786:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801478a:	3201      	adds	r2, #1
 801478c:	3301      	adds	r3, #1
 801478e:	e7d4      	b.n	801473a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8014790:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8014794:	e7d4      	b.n	8014740 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 8014796:	4b04      	ldr	r3, [pc, #16]	; (80147a8 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 8014798:	6818      	ldr	r0, [r3, #0]
 801479a:	b110      	cbz	r0, 80147a2 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 801479c:	6803      	ldr	r3, [r0, #0]
 801479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147a0:	e7a1      	b.n	80146e6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80147a2:	bd70      	pop	{r4, r5, r6, pc}
 80147a4:	2000a07c 	.word	0x2000a07c
 80147a8:	2000a078 	.word	0x2000a078

080147ac <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80147ac:	b570      	push	{r4, r5, r6, lr}
 80147ae:	4606      	mov	r6, r0
 80147b0:	460c      	mov	r4, r1
 80147b2:	b929      	cbnz	r1, 80147c0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 80147b4:	4b0c      	ldr	r3, [pc, #48]	; (80147e8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 80147b6:	4a0d      	ldr	r2, [pc, #52]	; (80147ec <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 80147b8:	480d      	ldr	r0, [pc, #52]	; (80147f0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 80147ba:	2164      	movs	r1, #100	; 0x64
 80147bc:	f00e ffc2 	bl	8023744 <__assert_func>
 80147c0:	4d0c      	ldr	r5, [pc, #48]	; (80147f4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 80147c2:	2300      	movs	r3, #0
 80147c4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80147c8:	6828      	ldr	r0, [r5, #0]
 80147ca:	b110      	cbz	r0, 80147d2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 80147cc:	6803      	ldr	r3, [r0, #0]
 80147ce:	695b      	ldr	r3, [r3, #20]
 80147d0:	4798      	blx	r3
 80147d2:	602c      	str	r4, [r5, #0]
 80147d4:	6823      	ldr	r3, [r4, #0]
 80147d6:	4620      	mov	r0, r4
 80147d8:	68db      	ldr	r3, [r3, #12]
 80147da:	4798      	blx	r3
 80147dc:	6833      	ldr	r3, [r6, #0]
 80147de:	4630      	mov	r0, r6
 80147e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80147e6:	4718      	bx	r3
 80147e8:	0802737c 	.word	0x0802737c
 80147ec:	0802744c 	.word	0x0802744c
 80147f0:	08027386 	.word	0x08027386
 80147f4:	2000a078 	.word	0x2000a078

080147f8 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80147f8:	b510      	push	{r4, lr}
 80147fa:	f9b1 4000 	ldrsh.w	r4, [r1]
 80147fe:	888a      	ldrh	r2, [r1, #4]
 8014800:	f9b0 3000 	ldrsh.w	r3, [r0]
 8014804:	4422      	add	r2, r4
 8014806:	b212      	sxth	r2, r2
 8014808:	4293      	cmp	r3, r2
 801480a:	da15      	bge.n	8014838 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801480c:	8882      	ldrh	r2, [r0, #4]
 801480e:	4413      	add	r3, r2
 8014810:	b21b      	sxth	r3, r3
 8014812:	429c      	cmp	r4, r3
 8014814:	da10      	bge.n	8014838 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8014816:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801481a:	88c9      	ldrh	r1, [r1, #6]
 801481c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8014820:	4419      	add	r1, r3
 8014822:	b209      	sxth	r1, r1
 8014824:	428a      	cmp	r2, r1
 8014826:	da07      	bge.n	8014838 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8014828:	88c0      	ldrh	r0, [r0, #6]
 801482a:	4410      	add	r0, r2
 801482c:	b200      	sxth	r0, r0
 801482e:	4283      	cmp	r3, r0
 8014830:	bfac      	ite	ge
 8014832:	2000      	movge	r0, #0
 8014834:	2001      	movlt	r0, #1
 8014836:	bd10      	pop	{r4, pc}
 8014838:	2000      	movs	r0, #0
 801483a:	e7fc      	b.n	8014836 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801483c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801483c:	b570      	push	{r4, r5, r6, lr}
 801483e:	f9b1 4000 	ldrsh.w	r4, [r1]
 8014842:	f9b0 5000 	ldrsh.w	r5, [r0]
 8014846:	42ac      	cmp	r4, r5
 8014848:	db18      	blt.n	801487c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801484a:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801484e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8014852:	429a      	cmp	r2, r3
 8014854:	db12      	blt.n	801487c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8014856:	8886      	ldrh	r6, [r0, #4]
 8014858:	4435      	add	r5, r6
 801485a:	888e      	ldrh	r6, [r1, #4]
 801485c:	4434      	add	r4, r6
 801485e:	b22d      	sxth	r5, r5
 8014860:	b224      	sxth	r4, r4
 8014862:	42a5      	cmp	r5, r4
 8014864:	db0a      	blt.n	801487c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8014866:	88c0      	ldrh	r0, [r0, #6]
 8014868:	4418      	add	r0, r3
 801486a:	88cb      	ldrh	r3, [r1, #6]
 801486c:	441a      	add	r2, r3
 801486e:	b200      	sxth	r0, r0
 8014870:	b212      	sxth	r2, r2
 8014872:	4290      	cmp	r0, r2
 8014874:	bfb4      	ite	lt
 8014876:	2000      	movlt	r0, #0
 8014878:	2001      	movge	r0, #1
 801487a:	bd70      	pop	{r4, r5, r6, pc}
 801487c:	2000      	movs	r0, #0
 801487e:	e7fc      	b.n	801487a <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08014880 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8014880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014882:	4604      	mov	r4, r0
 8014884:	4608      	mov	r0, r1
 8014886:	460d      	mov	r5, r1
 8014888:	f7fc fff9 	bl	801187e <_ZNK8touchgfx4Rect7isEmptyEv>
 801488c:	b978      	cbnz	r0, 80148ae <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801488e:	4620      	mov	r0, r4
 8014890:	f7fc fff5 	bl	801187e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014894:	f9b5 6000 	ldrsh.w	r6, [r5]
 8014898:	b150      	cbz	r0, 80148b0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801489a:	8026      	strh	r6, [r4, #0]
 801489c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80148a0:	8063      	strh	r3, [r4, #2]
 80148a2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80148a6:	80a3      	strh	r3, [r4, #4]
 80148a8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80148ac:	80e3      	strh	r3, [r4, #6]
 80148ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148b0:	f9b4 1000 	ldrsh.w	r1, [r4]
 80148b4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80148b8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80148bc:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80148c0:	88ed      	ldrh	r5, [r5, #6]
 80148c2:	42b1      	cmp	r1, r6
 80148c4:	460f      	mov	r7, r1
 80148c6:	bfa8      	it	ge
 80148c8:	4637      	movge	r7, r6
 80148ca:	4293      	cmp	r3, r2
 80148cc:	4618      	mov	r0, r3
 80148ce:	4466      	add	r6, ip
 80148d0:	bfa8      	it	ge
 80148d2:	4610      	movge	r0, r2
 80148d4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80148d8:	8027      	strh	r7, [r4, #0]
 80148da:	442a      	add	r2, r5
 80148dc:	88e5      	ldrh	r5, [r4, #6]
 80148de:	8060      	strh	r0, [r4, #2]
 80148e0:	4461      	add	r1, ip
 80148e2:	442b      	add	r3, r5
 80148e4:	b236      	sxth	r6, r6
 80148e6:	b209      	sxth	r1, r1
 80148e8:	b212      	sxth	r2, r2
 80148ea:	b21b      	sxth	r3, r3
 80148ec:	428e      	cmp	r6, r1
 80148ee:	bfac      	ite	ge
 80148f0:	ebc7 0106 	rsbge	r1, r7, r6
 80148f4:	ebc7 0101 	rsblt	r1, r7, r1
 80148f8:	429a      	cmp	r2, r3
 80148fa:	bfac      	ite	ge
 80148fc:	ebc0 0202 	rsbge	r2, r0, r2
 8014900:	ebc0 0203 	rsblt	r2, r0, r3
 8014904:	80a1      	strh	r1, [r4, #4]
 8014906:	80e2      	strh	r2, [r4, #6]
 8014908:	e7d1      	b.n	80148ae <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801490c <_ZN8touchgfx11Application11getInstanceEv>:
 801490c:	4b01      	ldr	r3, [pc, #4]	; (8014914 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801490e:	6818      	ldr	r0, [r3, #0]
 8014910:	4770      	bx	lr
 8014912:	bf00      	nop
 8014914:	2000a088 	.word	0x2000a088

08014918 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8014918:	2300      	movs	r3, #0
 801491a:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801491e:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8014922:	30a8      	adds	r0, #168	; 0xa8
 8014924:	f802 3b01 	strb.w	r3, [r2], #1
 8014928:	4282      	cmp	r2, r0
 801492a:	d1fb      	bne.n	8014924 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801492c:	4770      	bx	lr

0801492e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801492e:	4603      	mov	r3, r0
 8014930:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8014934:	2200      	movs	r2, #0
 8014936:	801a      	strh	r2, [r3, #0]
 8014938:	805a      	strh	r2, [r3, #2]
 801493a:	809a      	strh	r2, [r3, #4]
 801493c:	80da      	strh	r2, [r3, #6]
 801493e:	3308      	adds	r3, #8
 8014940:	428b      	cmp	r3, r1
 8014942:	d1f8      	bne.n	8014936 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8014944:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8014948:	4770      	bx	lr
	...

0801494c <_ZN8touchgfx11ApplicationC1Ev>:
 801494c:	b570      	push	{r4, r5, r6, lr}
 801494e:	4b1a      	ldr	r3, [pc, #104]	; (80149b8 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8014950:	6003      	str	r3, [r0, #0]
 8014952:	2500      	movs	r5, #0
 8014954:	4604      	mov	r4, r0
 8014956:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 801495a:	30a8      	adds	r0, #168	; 0xa8
 801495c:	f7ff ffe7 	bl	801492e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8014960:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8014964:	f7ff ffe3 	bl	801492e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8014968:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801496c:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8014970:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8014974:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8014978:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801497c:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 8014980:	490e      	ldr	r1, [pc, #56]	; (80149bc <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8014982:	480f      	ldr	r0, [pc, #60]	; (80149c0 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8014984:	4e0f      	ldr	r6, [pc, #60]	; (80149c4 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8014986:	f00e fcab 	bl	80232e0 <CRC_Lock>
 801498a:	4b0f      	ldr	r3, [pc, #60]	; (80149c8 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801498c:	b158      	cbz	r0, 80149a6 <_ZN8touchgfx11ApplicationC1Ev+0x5a>
 801498e:	801d      	strh	r5, [r3, #0]
 8014990:	4a0e      	ldr	r2, [pc, #56]	; (80149cc <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8014992:	2300      	movs	r3, #0
 8014994:	6013      	str	r3, [r2, #0]
 8014996:	4a0e      	ldr	r2, [pc, #56]	; (80149d0 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8014998:	6033      	str	r3, [r6, #0]
 801499a:	4620      	mov	r0, r4
 801499c:	6013      	str	r3, [r2, #0]
 801499e:	f7ff ffbb 	bl	8014918 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80149a2:	4620      	mov	r0, r4
 80149a4:	bd70      	pop	{r4, r5, r6, pc}
 80149a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80149aa:	2002      	movs	r0, #2
 80149ac:	801a      	strh	r2, [r3, #0]
 80149ae:	6030      	str	r0, [r6, #0]
 80149b0:	f001 fa7e 	bl	8015eb0 <_ZN8touchgfx6Screen4drawEv>
 80149b4:	e7ec      	b.n	8014990 <_ZN8touchgfx11ApplicationC1Ev+0x44>
 80149b6:	bf00      	nop
 80149b8:	08027410 	.word	0x08027410
 80149bc:	b5e8b5cd 	.word	0xb5e8b5cd
 80149c0:	f407a5c2 	.word	0xf407a5c2
 80149c4:	2000a078 	.word	0x2000a078
 80149c8:	20000080 	.word	0x20000080
 80149cc:	2000a088 	.word	0x2000a088
 80149d0:	2000a07c 	.word	0x2000a07c

080149d4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80149d4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80149d8:	428b      	cmp	r3, r1
 80149da:	b510      	push	{r4, lr}
 80149dc:	d90e      	bls.n	80149fc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 80149de:	3b01      	subs	r3, #1
 80149e0:	b29b      	uxth	r3, r3
 80149e2:	428b      	cmp	r3, r1
 80149e4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 80149e8:	d908      	bls.n	80149fc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 80149ea:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80149ee:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 80149f2:	681a      	ldr	r2, [r3, #0]
 80149f4:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 80149f8:	685a      	ldr	r2, [r3, #4]
 80149fa:	6062      	str	r2, [r4, #4]
 80149fc:	bd10      	pop	{r4, pc}
	...

08014a00 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8014a00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014a02:	466b      	mov	r3, sp
 8014a04:	e883 0006 	stmia.w	r3, {r1, r2}
 8014a08:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8014a0c:	2a07      	cmp	r2, #7
 8014a0e:	4604      	mov	r4, r0
 8014a10:	d906      	bls.n	8014a20 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8014a12:	4b09      	ldr	r3, [pc, #36]	; (8014a38 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8014a14:	4a09      	ldr	r2, [pc, #36]	; (8014a3c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8014a16:	480a      	ldr	r0, [pc, #40]	; (8014a40 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8014a18:	f240 118f 	movw	r1, #399	; 0x18f
 8014a1c:	f00e fe92 	bl	8023744 <__assert_func>
 8014a20:	1c51      	adds	r1, r2, #1
 8014a22:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8014a26:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8014a2a:	cb03      	ldmia	r3!, {r0, r1}
 8014a2c:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8014a30:	6069      	str	r1, [r5, #4]
 8014a32:	b003      	add	sp, #12
 8014a34:	bd30      	pop	{r4, r5, pc}
 8014a36:	bf00      	nop
 8014a38:	080273b0 	.word	0x080273b0
 8014a3c:	08027490 	.word	0x08027490
 8014a40:	080273df 	.word	0x080273df

08014a44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8014a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a48:	b08d      	sub	sp, #52	; 0x34
 8014a4a:	ac08      	add	r4, sp, #32
 8014a4c:	4683      	mov	fp, r0
 8014a4e:	4620      	mov	r0, r4
 8014a50:	e884 0006 	stmia.w	r4, {r1, r2}
 8014a54:	f7fc ff13 	bl	801187e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014a58:	2800      	cmp	r0, #0
 8014a5a:	d16a      	bne.n	8014b32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8014a5c:	9402      	str	r4, [sp, #8]
 8014a5e:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8014a62:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8014a66:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 8014a6a:	2400      	movs	r4, #0
 8014a6c:	9301      	str	r3, [sp, #4]
 8014a6e:	36a0      	adds	r6, #160	; 0xa0
 8014a70:	42a5      	cmp	r5, r4
 8014a72:	d00d      	beq.n	8014a90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 8014a74:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8014a78:	9802      	ldr	r0, [sp, #8]
 8014a7a:	f7ff fedf 	bl	801483c <_ZNK8touchgfx4Rect8includesERKS0_>
 8014a7e:	b128      	cbz	r0, 8014a8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8014a80:	1e69      	subs	r1, r5, #1
 8014a82:	1b09      	subs	r1, r1, r4
 8014a84:	b289      	uxth	r1, r1
 8014a86:	9801      	ldr	r0, [sp, #4]
 8014a88:	f7ff ffa4 	bl	80149d4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014a8c:	3401      	adds	r4, #1
 8014a8e:	e7ef      	b.n	8014a70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8014a90:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8014a94:	9703      	str	r7, [sp, #12]
 8014a96:	1e7b      	subs	r3, r7, #1
 8014a98:	9300      	str	r3, [sp, #0]
 8014a9a:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8014a9e:	2400      	movs	r4, #0
 8014aa0:	4655      	mov	r5, sl
 8014aa2:	9704      	str	r7, [sp, #16]
 8014aa4:	4626      	mov	r6, r4
 8014aa6:	9b04      	ldr	r3, [sp, #16]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d078      	beq.n	8014b9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 8014aac:	9902      	ldr	r1, [sp, #8]
 8014aae:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8014ab2:	f7ff fea1 	bl	80147f8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014ab6:	b360      	cbz	r0, 8014b12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8014ab8:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8014abc:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8014ac0:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 8014ac4:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8014ac8:	45e6      	cmp	lr, ip
 8014aca:	db35      	blt.n	8014b38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8014acc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8014ad0:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8014ad4:	4472      	add	r2, lr
 8014ad6:	4463      	add	r3, ip
 8014ad8:	b212      	sxth	r2, r2
 8014ada:	b21b      	sxth	r3, r3
 8014adc:	429a      	cmp	r2, r3
 8014ade:	dc2b      	bgt.n	8014b38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8014ae0:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8014ae4:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8014ae8:	fa1f f288 	uxth.w	r2, r8
 8014aec:	4413      	add	r3, r2
 8014aee:	b29b      	uxth	r3, r3
 8014af0:	45c1      	cmp	r9, r8
 8014af2:	fa0f fe83 	sxth.w	lr, r3
 8014af6:	fa1f fc89 	uxth.w	ip, r9
 8014afa:	db0f      	blt.n	8014b1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 8014afc:	eba3 030c 	sub.w	r3, r3, ip
 8014b00:	1ac9      	subs	r1, r1, r3
 8014b02:	b209      	sxth	r1, r1
 8014b04:	2900      	cmp	r1, #0
 8014b06:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8014b0a:	dd12      	ble.n	8014b32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8014b0c:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 8014b10:	4604      	mov	r4, r0
 8014b12:	9b04      	ldr	r3, [sp, #16]
 8014b14:	3b01      	subs	r3, #1
 8014b16:	9304      	str	r3, [sp, #16]
 8014b18:	3d08      	subs	r5, #8
 8014b1a:	e7c4      	b.n	8014aa6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 8014b1c:	4461      	add	r1, ip
 8014b1e:	b209      	sxth	r1, r1
 8014b20:	4571      	cmp	r1, lr
 8014b22:	dc3a      	bgt.n	8014b9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8014b24:	eba2 020c 	sub.w	r2, r2, ip
 8014b28:	b212      	sxth	r2, r2
 8014b2a:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8014b2e:	2a00      	cmp	r2, #0
 8014b30:	dcee      	bgt.n	8014b10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8014b32:	b00d      	add	sp, #52	; 0x34
 8014b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b38:	45c1      	cmp	r9, r8
 8014b3a:	db2e      	blt.n	8014b9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8014b3c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8014b40:	4499      	add	r9, r3
 8014b42:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8014b46:	4498      	add	r8, r3
 8014b48:	fa0f f989 	sxth.w	r9, r9
 8014b4c:	fa0f f888 	sxth.w	r8, r8
 8014b50:	45c1      	cmp	r9, r8
 8014b52:	dc22      	bgt.n	8014b9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8014b54:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8014b58:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8014b5c:	fa1f f28c 	uxth.w	r2, ip
 8014b60:	4413      	add	r3, r2
 8014b62:	b29b      	uxth	r3, r3
 8014b64:	45e6      	cmp	lr, ip
 8014b66:	fa1f f88e 	uxth.w	r8, lr
 8014b6a:	fa0f f983 	sxth.w	r9, r3
 8014b6e:	db0a      	blt.n	8014b86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 8014b70:	eba3 0308 	sub.w	r3, r3, r8
 8014b74:	1ac9      	subs	r1, r1, r3
 8014b76:	b209      	sxth	r1, r1
 8014b78:	2900      	cmp	r1, #0
 8014b7a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8014b7e:	ddd8      	ble.n	8014b32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8014b80:	f8ad 9020 	strh.w	r9, [sp, #32]
 8014b84:	e7c4      	b.n	8014b10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8014b86:	4441      	add	r1, r8
 8014b88:	b209      	sxth	r1, r1
 8014b8a:	4549      	cmp	r1, r9
 8014b8c:	dc05      	bgt.n	8014b9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8014b8e:	eba2 0208 	sub.w	r2, r2, r8
 8014b92:	b212      	sxth	r2, r2
 8014b94:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8014b98:	e7c9      	b.n	8014b2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8014b9a:	4606      	mov	r6, r0
 8014b9c:	e7b9      	b.n	8014b12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8014b9e:	2c00      	cmp	r4, #0
 8014ba0:	f47f af7d 	bne.w	8014a9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8014ba4:	2e00      	cmp	r6, #0
 8014ba6:	f000 81dd 	beq.w	8014f64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 8014baa:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 8014bae:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8014bb2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8014bb6:	b2b9      	uxth	r1, r7
 8014bb8:	9104      	str	r1, [sp, #16]
 8014bba:	9804      	ldr	r0, [sp, #16]
 8014bbc:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8014bc0:	4401      	add	r1, r0
 8014bc2:	b2b3      	uxth	r3, r6
 8014bc4:	b289      	uxth	r1, r1
 8014bc6:	441a      	add	r2, r3
 8014bc8:	9105      	str	r1, [sp, #20]
 8014bca:	b292      	uxth	r2, r2
 8014bcc:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 8014bd0:	fa0f f882 	sxth.w	r8, r2
 8014bd4:	4655      	mov	r5, sl
 8014bd6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014bda:	9b03      	ldr	r3, [sp, #12]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d054      	beq.n	8014c8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8014be0:	9902      	ldr	r1, [sp, #8]
 8014be2:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8014be6:	f7ff fe07 	bl	80147f8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014bea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014bee:	b1d8      	cbz	r0, 8014c28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8014bf0:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8014bf4:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8014bf8:	4576      	cmp	r6, lr
 8014bfa:	dc26      	bgt.n	8014c4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8014bfc:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8014c00:	44f4      	add	ip, lr
 8014c02:	fa0f fc8c 	sxth.w	ip, ip
 8014c06:	45e0      	cmp	r8, ip
 8014c08:	db1f      	blt.n	8014c4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8014c0a:	428f      	cmp	r7, r1
 8014c0c:	fa1f fc81 	uxth.w	ip, r1
 8014c10:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8014c14:	dc0f      	bgt.n	8014c36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8014c16:	9805      	ldr	r0, [sp, #20]
 8014c18:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8014c1c:	eba0 0c0c 	sub.w	ip, r0, ip
 8014c20:	eba1 010c 	sub.w	r1, r1, ip
 8014c24:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8014c28:	4620      	mov	r0, r4
 8014c2a:	9903      	ldr	r1, [sp, #12]
 8014c2c:	3901      	subs	r1, #1
 8014c2e:	9103      	str	r1, [sp, #12]
 8014c30:	3d08      	subs	r5, #8
 8014c32:	4604      	mov	r4, r0
 8014c34:	e7cf      	b.n	8014bd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 8014c36:	4461      	add	r1, ip
 8014c38:	b209      	sxth	r1, r1
 8014c3a:	4549      	cmp	r1, r9
 8014c3c:	dcf5      	bgt.n	8014c2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8014c3e:	9904      	ldr	r1, [sp, #16]
 8014c40:	eba1 0c0c 	sub.w	ip, r1, ip
 8014c44:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8014c48:	e7ee      	b.n	8014c28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8014c4a:	428f      	cmp	r7, r1
 8014c4c:	dced      	bgt.n	8014c2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8014c4e:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8014c52:	4461      	add	r1, ip
 8014c54:	b209      	sxth	r1, r1
 8014c56:	4589      	cmp	r9, r1
 8014c58:	dbe7      	blt.n	8014c2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8014c5a:	4576      	cmp	r6, lr
 8014c5c:	fa1f fc8e 	uxth.w	ip, lr
 8014c60:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8014c64:	dc08      	bgt.n	8014c78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 8014c66:	eba2 0c0c 	sub.w	ip, r2, ip
 8014c6a:	eba1 010c 	sub.w	r1, r1, ip
 8014c6e:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8014c72:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8014c76:	e7d7      	b.n	8014c28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8014c78:	4461      	add	r1, ip
 8014c7a:	b209      	sxth	r1, r1
 8014c7c:	4588      	cmp	r8, r1
 8014c7e:	dbd4      	blt.n	8014c2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8014c80:	eba3 0c0c 	sub.w	ip, r3, ip
 8014c84:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8014c88:	e7ce      	b.n	8014c28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8014c8a:	2c00      	cmp	r4, #0
 8014c8c:	f000 816a 	beq.w	8014f64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 8014c90:	9b00      	ldr	r3, [sp, #0]
 8014c92:	3301      	adds	r3, #1
 8014c94:	f000 8166 	beq.w	8014f64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 8014c98:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8014c9c:	4621      	mov	r1, r4
 8014c9e:	9802      	ldr	r0, [sp, #8]
 8014ca0:	f7ff fdcc 	bl	801483c <_ZNK8touchgfx4Rect8includesERKS0_>
 8014ca4:	b120      	cbz	r0, 8014cb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 8014ca6:	f8bd 1000 	ldrh.w	r1, [sp]
 8014caa:	9801      	ldr	r0, [sp, #4]
 8014cac:	f7ff fe92 	bl	80149d4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014cb0:	9902      	ldr	r1, [sp, #8]
 8014cb2:	4620      	mov	r0, r4
 8014cb4:	f7ff fda0 	bl	80147f8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014cb8:	2800      	cmp	r0, #0
 8014cba:	f000 809b 	beq.w	8014df4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 8014cbe:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8014cc2:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 8014cc6:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 8014cca:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 8014cce:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8014cd2:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 8014cd6:	fa1f f288 	uxth.w	r2, r8
 8014cda:	19d5      	adds	r5, r2, r7
 8014cdc:	fa1f f985 	uxth.w	r9, r5
 8014ce0:	fa0f f589 	sxth.w	r5, r9
 8014ce4:	b2a1      	uxth	r1, r4
 8014ce6:	440b      	add	r3, r1
 8014ce8:	9503      	str	r5, [sp, #12]
 8014cea:	45a0      	cmp	r8, r4
 8014cec:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8014cf0:	9507      	str	r5, [sp, #28]
 8014cf2:	b29b      	uxth	r3, r3
 8014cf4:	f340 809d 	ble.w	8014e32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8014cf8:	1a52      	subs	r2, r2, r1
 8014cfa:	b292      	uxth	r2, r2
 8014cfc:	4584      	cmp	ip, r0
 8014cfe:	fa0f fe83 	sxth.w	lr, r3
 8014d02:	b215      	sxth	r5, r2
 8014d04:	dd2f      	ble.n	8014d66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 8014d06:	9e00      	ldr	r6, [sp, #0]
 8014d08:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8014d0c:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 8014d10:	9e03      	ldr	r6, [sp, #12]
 8014d12:	eba6 060e 	sub.w	r6, r6, lr
 8014d16:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 8014d1a:	fa1f fc8c 	uxth.w	ip, ip
 8014d1e:	b280      	uxth	r0, r0
 8014d20:	ebac 0300 	sub.w	r3, ip, r0
 8014d24:	448c      	add	ip, r1
 8014d26:	4470      	add	r0, lr
 8014d28:	b29b      	uxth	r3, r3
 8014d2a:	fa0f fc8c 	sxth.w	ip, ip
 8014d2e:	b200      	sxth	r0, r0
 8014d30:	b21c      	sxth	r4, r3
 8014d32:	ebac 0000 	sub.w	r0, ip, r0
 8014d36:	4366      	muls	r6, r4
 8014d38:	4368      	muls	r0, r5
 8014d3a:	4286      	cmp	r6, r0
 8014d3c:	db09      	blt.n	8014d52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 8014d3e:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 8014d42:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 8014d46:	4417      	add	r7, r2
 8014d48:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014d4c:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8014d50:	e685      	b.n	8014a5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8014d52:	440b      	add	r3, r1
 8014d54:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8014d58:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8014d5c:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 8014d60:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014d64:	e67b      	b.n	8014a5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8014d66:	9e03      	ldr	r6, [sp, #12]
 8014d68:	45b6      	cmp	lr, r6
 8014d6a:	da28      	bge.n	8014dbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 8014d6c:	9b00      	ldr	r3, [sp, #0]
 8014d6e:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 8014d72:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 8014d76:	eb04 030c 	add.w	r3, r4, ip
 8014d7a:	fa1f f883 	uxth.w	r8, r3
 8014d7e:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 8014d82:	4403      	add	r3, r0
 8014d84:	eba3 0308 	sub.w	r3, r3, r8
 8014d88:	b29b      	uxth	r3, r3
 8014d8a:	fa0f f988 	sxth.w	r9, r8
 8014d8e:	eba0 000c 	sub.w	r0, r0, ip
 8014d92:	fa0f f883 	sxth.w	r8, r3
 8014d96:	eba6 060e 	sub.w	r6, r6, lr
 8014d9a:	4368      	muls	r0, r5
 8014d9c:	fb08 f606 	mul.w	r6, r8, r6
 8014da0:	42b0      	cmp	r0, r6
 8014da2:	dc06      	bgt.n	8014db2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 8014da4:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 8014da8:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 8014dac:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 8014db0:	e7c9      	b.n	8014d46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 8014db2:	4423      	add	r3, r4
 8014db4:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 8014db8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8014dbc:	e64f      	b.n	8014a5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8014dbe:	9807      	ldr	r0, [sp, #28]
 8014dc0:	eba3 0309 	sub.w	r3, r3, r9
 8014dc4:	b29b      	uxth	r3, r3
 8014dc6:	2806      	cmp	r0, #6
 8014dc8:	fa0f fc83 	sxth.w	ip, r3
 8014dcc:	d818      	bhi.n	8014e00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 8014dce:	4652      	mov	r2, sl
 8014dd0:	ab0a      	add	r3, sp, #40	; 0x28
 8014dd2:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 8014dd6:	6851      	ldr	r1, [r2, #4]
 8014dd8:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 8014ddc:	c303      	stmia	r3!, {r0, r1}
 8014dde:	9b03      	ldr	r3, [sp, #12]
 8014de0:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8014de4:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 8014de8:	ab0a      	add	r3, sp, #40	; 0x28
 8014dea:	e893 0006 	ldmia.w	r3, {r1, r2}
 8014dee:	9801      	ldr	r0, [sp, #4]
 8014df0:	f7ff fe06 	bl	8014a00 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8014df4:	9b00      	ldr	r3, [sp, #0]
 8014df6:	3b01      	subs	r3, #1
 8014df8:	9300      	str	r3, [sp, #0]
 8014dfa:	f1aa 0a08 	sub.w	sl, sl, #8
 8014dfe:	e747      	b.n	8014c90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8014e00:	9800      	ldr	r0, [sp, #0]
 8014e02:	45ac      	cmp	ip, r5
 8014e04:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8014e08:	db0c      	blt.n	8014e24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 8014e0a:	4417      	add	r7, r2
 8014e0c:	b2bf      	uxth	r7, r7
 8014e0e:	4458      	add	r0, fp
 8014e10:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8014e14:	440f      	add	r7, r1
 8014e16:	f8ad 4020 	strh.w	r4, [sp, #32]
 8014e1a:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 8014e1e:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 8014e22:	e61c      	b.n	8014a5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8014e24:	4458      	add	r0, fp
 8014e26:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 8014e2a:	443b      	add	r3, r7
 8014e2c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8014e30:	e615      	b.n	8014a5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8014e32:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 8014e36:	fa1f f18c 	uxth.w	r1, ip
 8014e3a:	eb01 0e05 	add.w	lr, r1, r5
 8014e3e:	b282      	uxth	r2, r0
 8014e40:	fa1f fe8e 	uxth.w	lr, lr
 8014e44:	9204      	str	r2, [sp, #16]
 8014e46:	fa0f f28e 	sxth.w	r2, lr
 8014e4a:	9205      	str	r2, [sp, #20]
 8014e4c:	9e04      	ldr	r6, [sp, #16]
 8014e4e:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 8014e52:	4432      	add	r2, r6
 8014e54:	b292      	uxth	r2, r2
 8014e56:	4584      	cmp	ip, r0
 8014e58:	9206      	str	r2, [sp, #24]
 8014e5a:	da26      	bge.n	8014eaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 8014e5c:	eba3 0309 	sub.w	r3, r3, r9
 8014e60:	eba2 020e 	sub.w	r2, r2, lr
 8014e64:	b29b      	uxth	r3, r3
 8014e66:	b292      	uxth	r2, r2
 8014e68:	fa0f fa83 	sxth.w	sl, r3
 8014e6c:	b211      	sxth	r1, r2
 8014e6e:	eba0 000c 	sub.w	r0, r0, ip
 8014e72:	eba4 0408 	sub.w	r4, r4, r8
 8014e76:	fb0a f000 	mul.w	r0, sl, r0
 8014e7a:	434c      	muls	r4, r1
 8014e7c:	42a0      	cmp	r0, r4
 8014e7e:	9800      	ldr	r0, [sp, #0]
 8014e80:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8014e84:	dc06      	bgt.n	8014e94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 8014e86:	4458      	add	r0, fp
 8014e88:	9a05      	ldr	r2, [sp, #20]
 8014e8a:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 8014e8e:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8014e92:	e7ca      	b.n	8014e2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8014e94:	eb0b 0300 	add.w	r3, fp, r0
 8014e98:	9903      	ldr	r1, [sp, #12]
 8014e9a:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 8014e9e:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 8014ea2:	442a      	add	r2, r5
 8014ea4:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8014ea8:	e5d9      	b.n	8014a5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8014eaa:	9e04      	ldr	r6, [sp, #16]
 8014eac:	9a03      	ldr	r2, [sp, #12]
 8014eae:	1b89      	subs	r1, r1, r6
 8014eb0:	b21e      	sxth	r6, r3
 8014eb2:	b289      	uxth	r1, r1
 8014eb4:	4296      	cmp	r6, r2
 8014eb6:	fa0f fc81 	sxth.w	ip, r1
 8014eba:	dd26      	ble.n	8014f0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c6>
 8014ebc:	eba3 0309 	sub.w	r3, r3, r9
 8014ec0:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8014ec4:	9e05      	ldr	r6, [sp, #20]
 8014ec6:	b29b      	uxth	r3, r3
 8014ec8:	eba6 0902 	sub.w	r9, r6, r2
 8014ecc:	b218      	sxth	r0, r3
 8014ece:	eba4 0408 	sub.w	r4, r4, r8
 8014ed2:	fb0c f404 	mul.w	r4, ip, r4
 8014ed6:	fb00 f909 	mul.w	r9, r0, r9
 8014eda:	9a00      	ldr	r2, [sp, #0]
 8014edc:	454c      	cmp	r4, r9
 8014ede:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8014ee2:	db03      	blt.n	8014eec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a8>
 8014ee4:	445a      	add	r2, fp
 8014ee6:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 8014eea:	e79e      	b.n	8014e2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8014eec:	eb0b 0302 	add.w	r3, fp, r2
 8014ef0:	9a03      	ldr	r2, [sp, #12]
 8014ef2:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8014ef6:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 8014efa:	4429      	add	r1, r5
 8014efc:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8014f00:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014f04:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8014f08:	e5a9      	b.n	8014a5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8014f0a:	9b06      	ldr	r3, [sp, #24]
 8014f0c:	9c07      	ldr	r4, [sp, #28]
 8014f0e:	eba3 020e 	sub.w	r2, r3, lr
 8014f12:	b292      	uxth	r2, r2
 8014f14:	2c06      	cmp	r4, #6
 8014f16:	b213      	sxth	r3, r2
 8014f18:	d80d      	bhi.n	8014f36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f2>
 8014f1a:	4651      	mov	r1, sl
 8014f1c:	aa0a      	add	r2, sp, #40	; 0x28
 8014f1e:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 8014f22:	6849      	ldr	r1, [r1, #4]
 8014f24:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 8014f28:	9b05      	ldr	r3, [sp, #20]
 8014f2a:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 8014f2e:	c203      	stmia	r2!, {r0, r1}
 8014f30:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 8014f34:	e758      	b.n	8014de8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 8014f36:	9c00      	ldr	r4, [sp, #0]
 8014f38:	4563      	cmp	r3, ip
 8014f3a:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8014f3e:	db0d      	blt.n	8014f5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x518>
 8014f40:	4429      	add	r1, r5
 8014f42:	9a04      	ldr	r2, [sp, #16]
 8014f44:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8014f48:	b289      	uxth	r1, r1
 8014f4a:	445c      	add	r4, fp
 8014f4c:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8014f50:	4411      	add	r1, r2
 8014f52:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 8014f56:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 8014f5a:	e580      	b.n	8014a5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8014f5c:	445c      	add	r4, fp
 8014f5e:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 8014f62:	e79e      	b.n	8014ea2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 8014f64:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8014f68:	2f07      	cmp	r7, #7
 8014f6a:	d806      	bhi.n	8014f7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x536>
 8014f6c:	ab08      	add	r3, sp, #32
 8014f6e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8014f72:	9801      	ldr	r0, [sp, #4]
 8014f74:	f7ff fd44 	bl	8014a00 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8014f78:	e5db      	b.n	8014b32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8014f7a:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8014f7e:	f107 39ff 	add.w	r9, r7, #4294967295
 8014f82:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8014f86:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 8014f8a:	f04f 35ff 	mov.w	r5, #4294967295
 8014f8e:	2400      	movs	r4, #0
 8014f90:	9304      	str	r3, [sp, #16]
 8014f92:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8014f96:	9300      	str	r3, [sp, #0]
 8014f98:	f109 32ff 	add.w	r2, r9, #4294967295
 8014f9c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8014fa0:	9303      	str	r3, [sp, #12]
 8014fa2:	4690      	mov	r8, r2
 8014fa4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8014fa8:	f1b8 3fff 	cmp.w	r8, #4294967295
 8014fac:	bf14      	ite	ne
 8014fae:	9904      	ldrne	r1, [sp, #16]
 8014fb0:	f8dd e008 	ldreq.w	lr, [sp, #8]
 8014fb4:	6818      	ldr	r0, [r3, #0]
 8014fb6:	9206      	str	r2, [sp, #24]
 8014fb8:	bf18      	it	ne
 8014fba:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 8014fbe:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8014fc2:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8014fc6:	f8be 6004 	ldrh.w	r6, [lr, #4]
 8014fca:	9305      	str	r3, [sp, #20]
 8014fcc:	fb16 f601 	smulbb	r6, r6, r1
 8014fd0:	6859      	ldr	r1, [r3, #4]
 8014fd2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8014fd6:	4671      	mov	r1, lr
 8014fd8:	a80a      	add	r0, sp, #40	; 0x28
 8014fda:	f7ff fc51 	bl	8014880 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014fde:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8014fe2:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8014fe6:	9b03      	ldr	r3, [sp, #12]
 8014fe8:	9a00      	ldr	r2, [sp, #0]
 8014fea:	fb11 f100 	smulbb	r1, r1, r0
 8014fee:	fb02 6603 	mla	r6, r2, r3, r6
 8014ff2:	1b8e      	subs	r6, r1, r6
 8014ff4:	2008      	movs	r0, #8
 8014ff6:	fb91 f1f0 	sdiv	r1, r1, r0
 8014ffa:	42b1      	cmp	r1, r6
 8014ffc:	dc21      	bgt.n	8015042 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 8014ffe:	4556      	cmp	r6, sl
 8015000:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8015004:	da03      	bge.n	801500e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8015006:	b1e6      	cbz	r6, 8015042 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 8015008:	46b2      	mov	sl, r6
 801500a:	4645      	mov	r5, r8
 801500c:	464c      	mov	r4, r9
 801500e:	f108 38ff 	add.w	r8, r8, #4294967295
 8015012:	f118 0f02 	cmn.w	r8, #2
 8015016:	d1c7      	bne.n	8014fa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x564>
 8015018:	f1b2 3fff 	cmp.w	r2, #4294967295
 801501c:	f1a7 0708 	sub.w	r7, r7, #8
 8015020:	4691      	mov	r9, r2
 8015022:	d1b6      	bne.n	8014f92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54e>
 8015024:	9b01      	ldr	r3, [sp, #4]
 8015026:	b2a6      	uxth	r6, r4
 8015028:	00e4      	lsls	r4, r4, #3
 801502a:	1918      	adds	r0, r3, r4
 801502c:	1c6b      	adds	r3, r5, #1
 801502e:	d10b      	bne.n	8015048 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x604>
 8015030:	4601      	mov	r1, r0
 8015032:	9802      	ldr	r0, [sp, #8]
 8015034:	f7ff fc24 	bl	8014880 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015038:	4631      	mov	r1, r6
 801503a:	9801      	ldr	r0, [sp, #4]
 801503c:	f7ff fcca 	bl	80149d4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015040:	e50d      	b.n	8014a5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8015042:	4645      	mov	r5, r8
 8015044:	464c      	mov	r4, r9
 8015046:	e7ed      	b.n	8015024 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e0>
 8015048:	9b01      	ldr	r3, [sp, #4]
 801504a:	00ed      	lsls	r5, r5, #3
 801504c:	1959      	adds	r1, r3, r5
 801504e:	f7ff fc17 	bl	8014880 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015052:	9b02      	ldr	r3, [sp, #8]
 8015054:	cb03      	ldmia	r3!, {r0, r1}
 8015056:	445d      	add	r5, fp
 8015058:	445c      	add	r4, fp
 801505a:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 801505e:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 8015062:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 8015066:	9b02      	ldr	r3, [sp, #8]
 8015068:	6861      	ldr	r1, [r4, #4]
 801506a:	c303      	stmia	r3!, {r0, r1}
 801506c:	e7e4      	b.n	8015038 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f4>
	...

08015070 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8015070:	b530      	push	{r4, r5, lr}
 8015072:	4b1d      	ldr	r3, [pc, #116]	; (80150e8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8015074:	b085      	sub	sp, #20
 8015076:	460c      	mov	r4, r1
 8015078:	f9b3 2000 	ldrsh.w	r2, [r3]
 801507c:	4b1b      	ldr	r3, [pc, #108]	; (80150ec <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801507e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015082:	2100      	movs	r1, #0
 8015084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015088:	9100      	str	r1, [sp, #0]
 801508a:	4605      	mov	r5, r0
 801508c:	6861      	ldr	r1, [r4, #4]
 801508e:	6820      	ldr	r0, [r4, #0]
 8015090:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015094:	ab02      	add	r3, sp, #8
 8015096:	c303      	stmia	r3!, {r0, r1}
 8015098:	4669      	mov	r1, sp
 801509a:	a802      	add	r0, sp, #8
 801509c:	f7fc fbac 	bl	80117f8 <_ZN8touchgfx4RectaNERKS0_>
 80150a0:	ab02      	add	r3, sp, #8
 80150a2:	cb03      	ldmia	r3!, {r0, r1}
 80150a4:	4b12      	ldr	r3, [pc, #72]	; (80150f0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 80150a6:	6020      	str	r0, [r4, #0]
 80150a8:	6818      	ldr	r0, [r3, #0]
 80150aa:	6061      	str	r1, [r4, #4]
 80150ac:	b138      	cbz	r0, 80150be <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80150ae:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 80150b2:	b133      	cbz	r3, 80150c2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 80150b4:	6821      	ldr	r1, [r4, #0]
 80150b6:	6862      	ldr	r2, [r4, #4]
 80150b8:	4628      	mov	r0, r5
 80150ba:	f7ff fcc3 	bl	8014a44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80150be:	b005      	add	sp, #20
 80150c0:	bd30      	pop	{r4, r5, pc}
 80150c2:	6803      	ldr	r3, [r0, #0]
 80150c4:	4621      	mov	r1, r4
 80150c6:	689b      	ldr	r3, [r3, #8]
 80150c8:	4798      	blx	r3
 80150ca:	4b0a      	ldr	r3, [pc, #40]	; (80150f4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 80150cc:	6818      	ldr	r0, [r3, #0]
 80150ce:	b118      	cbz	r0, 80150d8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 80150d0:	6803      	ldr	r3, [r0, #0]
 80150d2:	4621      	mov	r1, r4
 80150d4:	689b      	ldr	r3, [r3, #8]
 80150d6:	4798      	blx	r3
 80150d8:	4b07      	ldr	r3, [pc, #28]	; (80150f8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 80150da:	6818      	ldr	r0, [r3, #0]
 80150dc:	6803      	ldr	r3, [r0, #0]
 80150de:	4621      	mov	r1, r4
 80150e0:	695b      	ldr	r3, [r3, #20]
 80150e2:	4798      	blx	r3
 80150e4:	e7eb      	b.n	80150be <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80150e6:	bf00      	nop
 80150e8:	2000a030 	.word	0x2000a030
 80150ec:	2000a032 	.word	0x2000a032
 80150f0:	2000a078 	.word	0x2000a078
 80150f4:	2000a074 	.word	0x2000a074
 80150f8:	2000a03c 	.word	0x2000a03c

080150fc <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 80150fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015100:	4604      	mov	r4, r0
 8015102:	b09b      	sub	sp, #108	; 0x6c
 8015104:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 8015108:	b129      	cbz	r1, 8015116 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801510a:	2300      	movs	r3, #0
 801510c:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8015110:	b01b      	add	sp, #108	; 0x6c
 8015112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015116:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801511a:	4630      	mov	r0, r6
 801511c:	f7fc fbaf 	bl	801187e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015120:	4605      	mov	r5, r0
 8015122:	b940      	cbnz	r0, 8015136 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 8015124:	e896 0006 	ldmia.w	r6, {r1, r2}
 8015128:	4620      	mov	r0, r4
 801512a:	f7ff fc8b 	bl	8014a44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801512e:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8015132:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8015136:	4ba6      	ldr	r3, [pc, #664]	; (80153d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	b33b      	cbz	r3, 801518c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801513c:	4da5      	ldr	r5, [pc, #660]	; (80153d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801513e:	4628      	mov	r0, r5
 8015140:	f7fc fb9d 	bl	801187e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015144:	4606      	mov	r6, r0
 8015146:	bb08      	cbnz	r0, 801518c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8015148:	4628      	mov	r0, r5
 801514a:	f7ff f9fb 	bl	8014544 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801514e:	6829      	ldr	r1, [r5, #0]
 8015150:	686a      	ldr	r2, [r5, #4]
 8015152:	4620      	mov	r0, r4
 8015154:	f7ff fc76 	bl	8014a44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8015158:	802e      	strh	r6, [r5, #0]
 801515a:	806e      	strh	r6, [r5, #2]
 801515c:	80ae      	strh	r6, [r5, #4]
 801515e:	80ee      	strh	r6, [r5, #6]
 8015160:	4f9d      	ldr	r7, [pc, #628]	; (80153d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 8015162:	a809      	add	r0, sp, #36	; 0x24
 8015164:	f7ff fbe3 	bl	801492e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8015168:	883d      	ldrh	r5, [r7, #0]
 801516a:	462e      	mov	r6, r5
 801516c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8015170:	42b3      	cmp	r3, r6
 8015172:	d910      	bls.n	8015196 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 8015174:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8015178:	a809      	add	r0, sp, #36	; 0x24
 801517a:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801517e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8015182:	3601      	adds	r6, #1
 8015184:	f7ff fc3c 	bl	8014a00 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8015188:	b2b6      	uxth	r6, r6
 801518a:	e7ef      	b.n	801516c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801518c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8015190:	2b00      	cmp	r3, #0
 8015192:	d1e5      	bne.n	8015160 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 8015194:	e7bc      	b.n	8015110 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8015196:	462e      	mov	r6, r5
 8015198:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801519c:	42b3      	cmp	r3, r6
 801519e:	d90b      	bls.n	80151b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 80151a0:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80151a4:	4620      	mov	r0, r4
 80151a6:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 80151aa:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 80151ae:	3601      	adds	r6, #1
 80151b0:	f7ff fc48 	bl	8014a44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80151b4:	b2b6      	uxth	r6, r6
 80151b6:	e7ef      	b.n	8015198 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 80151b8:	4a88      	ldr	r2, [pc, #544]	; (80153dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 80151ba:	6813      	ldr	r3, [r2, #0]
 80151bc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80151c0:	2b01      	cmp	r3, #1
 80151c2:	4690      	mov	r8, r2
 80151c4:	f040 8093 	bne.w	80152ee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f2>
 80151c8:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80151cc:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 80151d0:	33aa      	adds	r3, #170	; 0xaa
 80151d2:	f04f 0900 	mov.w	r9, #0
 80151d6:	42a8      	cmp	r0, r5
 80151d8:	f103 0308 	add.w	r3, r3, #8
 80151dc:	dd0a      	ble.n	80151f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 80151de:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80151e2:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 80151e6:	440a      	add	r2, r1
 80151e8:	b212      	sxth	r2, r2
 80151ea:	4591      	cmp	r9, r2
 80151ec:	bfb8      	it	lt
 80151ee:	4691      	movlt	r9, r2
 80151f0:	3501      	adds	r5, #1
 80151f2:	e7f0      	b.n	80151d6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 80151f4:	4b7a      	ldr	r3, [pc, #488]	; (80153e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 80151f6:	4e7b      	ldr	r6, [pc, #492]	; (80153e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 80151f8:	881d      	ldrh	r5, [r3, #0]
 80151fa:	2300      	movs	r3, #0
 80151fc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8015200:	2d0f      	cmp	r5, #15
 8015202:	bf8c      	ite	hi
 8015204:	08ed      	lsrhi	r5, r5, #3
 8015206:	2501      	movls	r5, #1
 8015208:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801520c:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8015210:	f8d8 0000 	ldr.w	r0, [r8]
 8015214:	440b      	add	r3, r1
 8015216:	b21b      	sxth	r3, r3
 8015218:	4599      	cmp	r9, r3
 801521a:	6802      	ldr	r2, [r0, #0]
 801521c:	dd4a      	ble.n	80152b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 801521e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8015222:	4798      	blx	r3
 8015224:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8015228:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801522c:	4413      	add	r3, r2
 801522e:	b21b      	sxth	r3, r3
 8015230:	195a      	adds	r2, r3, r5
 8015232:	4290      	cmp	r0, r2
 8015234:	da07      	bge.n	8015246 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 8015236:	4581      	cmp	r9, r0
 8015238:	dd05      	ble.n	8015246 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801523a:	4298      	cmp	r0, r3
 801523c:	da33      	bge.n	80152a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801523e:	2b00      	cmp	r3, #0
 8015240:	dd31      	ble.n	80152a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 8015242:	4648      	mov	r0, r9
 8015244:	e004      	b.n	8015250 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 8015246:	4298      	cmp	r0, r3
 8015248:	dbfb      	blt.n	8015242 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801524a:	4548      	cmp	r0, r9
 801524c:	bfa8      	it	ge
 801524e:	4648      	movge	r0, r9
 8015250:	f9b6 2000 	ldrsh.w	r2, [r6]
 8015254:	f8b7 a000 	ldrh.w	sl, [r7]
 8015258:	f8ad 3016 	strh.w	r3, [sp, #22]
 801525c:	2100      	movs	r1, #0
 801525e:	1ac0      	subs	r0, r0, r3
 8015260:	f8ad 1014 	strh.w	r1, [sp, #20]
 8015264:	f8ad 2018 	strh.w	r2, [sp, #24]
 8015268:	f8ad 001a 	strh.w	r0, [sp, #26]
 801526c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8015270:	4553      	cmp	r3, sl
 8015272:	d9c9      	bls.n	8015208 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8015274:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8015278:	ab07      	add	r3, sp, #28
 801527a:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801527e:	6851      	ldr	r1, [r2, #4]
 8015280:	c303      	stmia	r3!, {r0, r1}
 8015282:	a807      	add	r0, sp, #28
 8015284:	a905      	add	r1, sp, #20
 8015286:	f7fc fab7 	bl	80117f8 <_ZN8touchgfx4RectaNERKS0_>
 801528a:	a807      	add	r0, sp, #28
 801528c:	f7fc faf7 	bl	801187e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015290:	b920      	cbnz	r0, 801529c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 8015292:	6823      	ldr	r3, [r4, #0]
 8015294:	a907      	add	r1, sp, #28
 8015296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015298:	4620      	mov	r0, r4
 801529a:	4798      	blx	r3
 801529c:	f10a 0a01 	add.w	sl, sl, #1
 80152a0:	fa1f fa8a 	uxth.w	sl, sl
 80152a4:	e7e2      	b.n	801526c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 80152a6:	f8d8 0000 	ldr.w	r0, [r8]
 80152aa:	6803      	ldr	r3, [r0, #0]
 80152ac:	2101      	movs	r1, #1
 80152ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80152b0:	4798      	blx	r3
 80152b2:	e7a9      	b.n	8015208 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 80152b4:	69d3      	ldr	r3, [r2, #28]
 80152b6:	4798      	blx	r3
 80152b8:	4b4b      	ldr	r3, [pc, #300]	; (80153e8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 80152ba:	781b      	ldrb	r3, [r3, #0]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	f43f af27 	beq.w	8015110 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80152c2:	2300      	movs	r3, #0
 80152c4:	883d      	ldrh	r5, [r7, #0]
 80152c6:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 80152ca:	34ea      	adds	r4, #234	; 0xea
 80152cc:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 80152d0:	42ab      	cmp	r3, r5
 80152d2:	f67f af1d 	bls.w	8015110 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80152d6:	ab1a      	add	r3, sp, #104	; 0x68
 80152d8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80152dc:	3b44      	subs	r3, #68	; 0x44
 80152de:	e893 0006 	ldmia.w	r3, {r1, r2}
 80152e2:	4620      	mov	r0, r4
 80152e4:	3501      	adds	r5, #1
 80152e6:	f7ff fb8b 	bl	8014a00 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80152ea:	b2ad      	uxth	r5, r5
 80152ec:	e7ee      	b.n	80152cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d0>
 80152ee:	2b02      	cmp	r3, #2
 80152f0:	f040 813c 	bne.w	801556c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x470>
 80152f4:	4b3d      	ldr	r3, [pc, #244]	; (80153ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 80152f6:	781b      	ldrb	r3, [r3, #0]
 80152f8:	2b01      	cmp	r3, #1
 80152fa:	d02c      	beq.n	8015356 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25a>
 80152fc:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 8015300:	883a      	ldrh	r2, [r7, #0]
 8015302:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 8015306:	3201      	adds	r2, #1
 8015308:	b292      	uxth	r2, r2
 801530a:	2900      	cmp	r1, #0
 801530c:	d0d4      	beq.n	80152b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 801530e:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8015312:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 8015316:	441d      	add	r5, r3
 8015318:	b22d      	sxth	r5, r5
 801531a:	4610      	mov	r0, r2
 801531c:	f04f 0a00 	mov.w	sl, #0
 8015320:	b283      	uxth	r3, r0
 8015322:	4299      	cmp	r1, r3
 8015324:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 8015328:	f240 80c4 	bls.w	80154b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 801532c:	4426      	add	r6, r4
 801532e:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 8015332:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 8015336:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801533a:	4573      	cmp	r3, lr
 801533c:	4684      	mov	ip, r0
 801533e:	f340 80a6 	ble.w	801548e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 8015342:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 8015346:	4475      	add	r5, lr
 8015348:	b22d      	sxth	r5, r5
 801534a:	429d      	cmp	r5, r3
 801534c:	bfa8      	it	ge
 801534e:	461d      	movge	r5, r3
 8015350:	3001      	adds	r0, #1
 8015352:	46e2      	mov	sl, ip
 8015354:	e7e4      	b.n	8015320 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x224>
 8015356:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801535a:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801535e:	f1bb 0f00 	cmp.w	fp, #0
 8015362:	d0a9      	beq.n	80152b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 8015364:	883b      	ldrh	r3, [r7, #0]
 8015366:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801536a:	3301      	adds	r3, #1
 801536c:	b29b      	uxth	r3, r3
 801536e:	2600      	movs	r6, #0
 8015370:	b299      	uxth	r1, r3
 8015372:	458b      	cmp	fp, r1
 8015374:	ea4f 05c6 	mov.w	r5, r6, lsl #3
 8015378:	d93a      	bls.n	80153f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801537a:	4425      	add	r5, r4
 801537c:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8015380:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8015384:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8015388:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801538c:	4408      	add	r0, r1
 801538e:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8015392:	4471      	add	r1, lr
 8015394:	b200      	sxth	r0, r0
 8015396:	b209      	sxth	r1, r1
 8015398:	4288      	cmp	r0, r1
 801539a:	469c      	mov	ip, r3
 801539c:	da06      	bge.n	80153ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 801539e:	4586      	cmp	lr, r0
 80153a0:	4672      	mov	r2, lr
 80153a2:	bfb8      	it	lt
 80153a4:	4602      	movlt	r2, r0
 80153a6:	3301      	adds	r3, #1
 80153a8:	4666      	mov	r6, ip
 80153aa:	e7e1      	b.n	8015370 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x274>
 80153ac:	d10b      	bne.n	80153c6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 80153ae:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 80153b2:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 80153b6:	458c      	cmp	ip, r1
 80153b8:	bfb4      	ite	lt
 80153ba:	469c      	movlt	ip, r3
 80153bc:	46b4      	movge	ip, r6
 80153be:	4572      	cmp	r2, lr
 80153c0:	bfb8      	it	lt
 80153c2:	4672      	movlt	r2, lr
 80153c4:	e7ef      	b.n	80153a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 80153c6:	428a      	cmp	r2, r1
 80153c8:	bfb8      	it	lt
 80153ca:	460a      	movlt	r2, r1
 80153cc:	46b4      	mov	ip, r6
 80153ce:	e7ea      	b.n	80153a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 80153d0:	2000a074 	.word	0x2000a074
 80153d4:	2000a080 	.word	0x2000a080
 80153d8:	20000080 	.word	0x20000080
 80153dc:	2000a03c 	.word	0x2000a03c
 80153e0:	2000a032 	.word	0x2000a032
 80153e4:	2000a030 	.word	0x2000a030
 80153e8:	2000a03a 	.word	0x2000a03a
 80153ec:	2000a034 	.word	0x2000a034
 80153f0:	1961      	adds	r1, r4, r5
 80153f2:	ab07      	add	r3, sp, #28
 80153f4:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 80153f8:	6849      	ldr	r1, [r1, #4]
 80153fa:	c303      	stmia	r3!, {r0, r1}
 80153fc:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8015400:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015404:	2b13      	cmp	r3, #19
 8015406:	bfd8      	it	le
 8015408:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801540c:	f8ad 201c 	strh.w	r2, [sp, #28]
 8015410:	440b      	add	r3, r1
 8015412:	1a9b      	subs	r3, r3, r2
 8015414:	a807      	add	r0, sp, #28
 8015416:	f8ad 3020 	strh.w	r3, [sp, #32]
 801541a:	f7ff f8ed 	bl	80145f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801541e:	a807      	add	r0, sp, #28
 8015420:	f7fc fa2d 	bl	801187e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015424:	2800      	cmp	r0, #0
 8015426:	d198      	bne.n	801535a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 8015428:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801542c:	f8d8 0000 	ldr.w	r0, [r8]
 8015430:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015434:	f8d0 e000 	ldr.w	lr, [r0]
 8015438:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801543c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015440:	f1bc 0f14 	cmp.w	ip, #20
 8015444:	bfa8      	it	ge
 8015446:	f04f 0c14 	movge.w	ip, #20
 801544a:	fa1f fc8c 	uxth.w	ip, ip
 801544e:	f8cd c000 	str.w	ip, [sp]
 8015452:	f8de a074 	ldr.w	sl, [lr, #116]	; 0x74
 8015456:	47d0      	blx	sl
 8015458:	4682      	mov	sl, r0
 801545a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801545e:	a807      	add	r0, sp, #28
 8015460:	f7ff f870 	bl	8014544 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8015464:	6823      	ldr	r3, [r4, #0]
 8015466:	4425      	add	r5, r4
 8015468:	4620      	mov	r0, r4
 801546a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801546c:	a907      	add	r1, sp, #28
 801546e:	4798      	blx	r3
 8015470:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8015474:	eba0 000a 	sub.w	r0, r0, sl
 8015478:	b200      	sxth	r0, r0
 801547a:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801547e:	2800      	cmp	r0, #0
 8015480:	f47f af6b 	bne.w	801535a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 8015484:	b2b1      	uxth	r1, r6
 8015486:	4648      	mov	r0, r9
 8015488:	f7ff faa4 	bl	80149d4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801548c:	e765      	b.n	801535a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 801548e:	d10c      	bne.n	80154aa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 8015490:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 8015494:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 8015498:	45b4      	cmp	ip, r6
 801549a:	bfb4      	ite	lt
 801549c:	4684      	movlt	ip, r0
 801549e:	46d4      	movge	ip, sl
 80154a0:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 80154a4:	4433      	add	r3, r6
 80154a6:	b21b      	sxth	r3, r3
 80154a8:	e74f      	b.n	801534a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x24e>
 80154aa:	4575      	cmp	r5, lr
 80154ac:	bfa8      	it	ge
 80154ae:	4675      	movge	r5, lr
 80154b0:	46d4      	mov	ip, sl
 80154b2:	e74d      	b.n	8015350 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x254>
 80154b4:	eb0b 0006 	add.w	r0, fp, r6
 80154b8:	4426      	add	r6, r4
 80154ba:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80154be:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 80154c2:	f1b9 0f13 	cmp.w	r9, #19
 80154c6:	bfde      	ittt	le
 80154c8:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 80154cc:	444d      	addle	r5, r9
 80154ce:	b22d      	sxthle	r5, r5
 80154d0:	f7fc f9d5 	bl	801187e <_ZNK8touchgfx4Rect7isEmptyEv>
 80154d4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80154d8:	2800      	cmp	r0, #0
 80154da:	f47f af16 	bne.w	801530a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x20e>
 80154de:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 80154e2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80154e6:	eba5 050c 	sub.w	r5, r5, ip
 80154ea:	fa1f f28c 	uxth.w	r2, ip
 80154ee:	fa1f f989 	uxth.w	r9, r9
 80154f2:	eb02 0009 	add.w	r0, r2, r9
 80154f6:	2d14      	cmp	r5, #20
 80154f8:	bfa8      	it	ge
 80154fa:	2514      	movge	r5, #20
 80154fc:	b200      	sxth	r0, r0
 80154fe:	fa1f fe85 	uxth.w	lr, r5
 8015502:	eba0 000c 	sub.w	r0, r0, ip
 8015506:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801550a:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801550e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8015512:	4586      	cmp	lr, r0
 8015514:	f8d8 0000 	ldr.w	r0, [r8]
 8015518:	f8ad c01e 	strh.w	ip, [sp, #30]
 801551c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015520:	bfb8      	it	lt
 8015522:	46f1      	movlt	r9, lr
 8015524:	6805      	ldr	r5, [r0, #0]
 8015526:	f8cd 9000 	str.w	r9, [sp]
 801552a:	b29b      	uxth	r3, r3
 801552c:	b289      	uxth	r1, r1
 801552e:	6f6d      	ldr	r5, [r5, #116]	; 0x74
 8015530:	47a8      	blx	r5
 8015532:	6823      	ldr	r3, [r4, #0]
 8015534:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8015538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801553a:	a907      	add	r1, sp, #28
 801553c:	4620      	mov	r0, r4
 801553e:	4798      	blx	r3
 8015540:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8015544:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 8015548:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 801554c:	1a5b      	subs	r3, r3, r1
 801554e:	440a      	add	r2, r1
 8015550:	b21b      	sxth	r3, r3
 8015552:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 8015556:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801555a:	2b00      	cmp	r3, #0
 801555c:	f47f aed0 	bne.w	8015300 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x204>
 8015560:	fa1f f18a 	uxth.w	r1, sl
 8015564:	4658      	mov	r0, fp
 8015566:	f7ff fa35 	bl	80149d4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801556a:	e6c9      	b.n	8015300 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x204>
 801556c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8015570:	42ab      	cmp	r3, r5
 8015572:	f67f aea1 	bls.w	80152b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 8015576:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801557a:	ab07      	add	r3, sp, #28
 801557c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8015580:	6851      	ldr	r1, [r2, #4]
 8015582:	c303      	stmia	r3!, {r0, r1}
 8015584:	a807      	add	r0, sp, #28
 8015586:	f7fc f97a 	bl	801187e <_ZNK8touchgfx4Rect7isEmptyEv>
 801558a:	b920      	cbnz	r0, 8015596 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49a>
 801558c:	6823      	ldr	r3, [r4, #0]
 801558e:	a907      	add	r1, sp, #28
 8015590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015592:	4620      	mov	r0, r4
 8015594:	4798      	blx	r3
 8015596:	3501      	adds	r5, #1
 8015598:	b2ad      	uxth	r5, r5
 801559a:	e7e7      	b.n	801556c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x470>

0801559c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801559c:	4b03      	ldr	r3, [pc, #12]	; (80155ac <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801559e:	2200      	movs	r2, #0
 80155a0:	801a      	strh	r2, [r3, #0]
 80155a2:	805a      	strh	r2, [r3, #2]
 80155a4:	809a      	strh	r2, [r3, #4]
 80155a6:	80da      	strh	r2, [r3, #6]
 80155a8:	4770      	bx	lr
 80155aa:	bf00      	nop
 80155ac:	2000a080 	.word	0x2000a080

080155b0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80155b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155b4:	4607      	mov	r7, r0
 80155b6:	b099      	sub	sp, #100	; 0x64
 80155b8:	a802      	add	r0, sp, #8
 80155ba:	4614      	mov	r4, r2
 80155bc:	461d      	mov	r5, r3
 80155be:	468a      	mov	sl, r1
 80155c0:	f000 fdc1 	bl	8016146 <_ZN8touchgfx12TextProviderC1Ev>
 80155c4:	683b      	ldr	r3, [r7, #0]
 80155c6:	4638      	mov	r0, r7
 80155c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80155ca:	4798      	blx	r3
 80155cc:	462a      	mov	r2, r5
 80155ce:	4603      	mov	r3, r0
 80155d0:	4621      	mov	r1, r4
 80155d2:	a802      	add	r0, sp, #8
 80155d4:	f000 fdfc 	bl	80161d0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80155d8:	2500      	movs	r5, #0
 80155da:	462c      	mov	r4, r5
 80155dc:	46a9      	mov	r9, r5
 80155de:	46a8      	mov	r8, r5
 80155e0:	f242 0b0b 	movw	fp, #8203	; 0x200b
 80155e4:	2300      	movs	r3, #0
 80155e6:	9301      	str	r3, [sp, #4]
 80155e8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80155ec:	429c      	cmp	r4, r3
 80155ee:	d002      	beq.n	80155f6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 80155f0:	455c      	cmp	r4, fp
 80155f2:	bf18      	it	ne
 80155f4:	4625      	movne	r5, r4
 80155f6:	ab01      	add	r3, sp, #4
 80155f8:	463a      	mov	r2, r7
 80155fa:	4651      	mov	r1, sl
 80155fc:	a802      	add	r0, sp, #8
 80155fe:	f001 f8e1 	bl	80167c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015602:	4604      	mov	r4, r0
 8015604:	b108      	cbz	r0, 801560a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 8015606:	280a      	cmp	r0, #10
 8015608:	d10a      	bne.n	8015620 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 801560a:	45c1      	cmp	r9, r8
 801560c:	bf38      	it	cc
 801560e:	46c1      	movcc	r9, r8
 8015610:	f04f 0800 	mov.w	r8, #0
 8015614:	2c00      	cmp	r4, #0
 8015616:	d1e5      	bne.n	80155e4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8015618:	4648      	mov	r0, r9
 801561a:	b019      	add	sp, #100	; 0x64
 801561c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015620:	9a01      	ldr	r2, [sp, #4]
 8015622:	2a00      	cmp	r2, #0
 8015624:	d0de      	beq.n	80155e4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8015626:	7b56      	ldrb	r6, [r2, #13]
 8015628:	683b      	ldr	r3, [r7, #0]
 801562a:	8894      	ldrh	r4, [r2, #4]
 801562c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801562e:	0076      	lsls	r6, r6, #1
 8015630:	f406 7080 	and.w	r0, r6, #256	; 0x100
 8015634:	7a96      	ldrb	r6, [r2, #10]
 8015636:	4629      	mov	r1, r5
 8015638:	4306      	orrs	r6, r0
 801563a:	4638      	mov	r0, r7
 801563c:	4798      	blx	r3
 801563e:	4430      	add	r0, r6
 8015640:	4480      	add	r8, r0
 8015642:	fa1f f888 	uxth.w	r8, r8
 8015646:	e7e5      	b.n	8015614 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

08015648 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8015648:	b508      	push	{r3, lr}
 801564a:	6803      	ldr	r3, [r0, #0]
 801564c:	68db      	ldr	r3, [r3, #12]
 801564e:	4798      	blx	r3
 8015650:	b128      	cbz	r0, 801565e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8015652:	7b43      	ldrb	r3, [r0, #13]
 8015654:	7a80      	ldrb	r0, [r0, #10]
 8015656:	005b      	lsls	r3, r3, #1
 8015658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801565c:	4318      	orrs	r0, r3
 801565e:	bd08      	pop	{r3, pc}

08015660 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8015660:	b40e      	push	{r1, r2, r3}
 8015662:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015664:	b098      	sub	sp, #96	; 0x60
 8015666:	ab1d      	add	r3, sp, #116	; 0x74
 8015668:	4605      	mov	r5, r0
 801566a:	f853 4b04 	ldr.w	r4, [r3], #4
 801566e:	9300      	str	r3, [sp, #0]
 8015670:	a802      	add	r0, sp, #8
 8015672:	f000 fd68 	bl	8016146 <_ZN8touchgfx12TextProviderC1Ev>
 8015676:	682b      	ldr	r3, [r5, #0]
 8015678:	4628      	mov	r0, r5
 801567a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801567c:	4798      	blx	r3
 801567e:	ae18      	add	r6, sp, #96	; 0x60
 8015680:	4603      	mov	r3, r0
 8015682:	4621      	mov	r1, r4
 8015684:	9a00      	ldr	r2, [sp, #0]
 8015686:	2400      	movs	r4, #0
 8015688:	a802      	add	r0, sp, #8
 801568a:	f000 fda1 	bl	80161d0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801568e:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8015692:	462a      	mov	r2, r5
 8015694:	4633      	mov	r3, r6
 8015696:	4621      	mov	r1, r4
 8015698:	a802      	add	r0, sp, #8
 801569a:	f001 f893 	bl	80167c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801569e:	b1f0      	cbz	r0, 80156de <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7e>
 80156a0:	280a      	cmp	r0, #10
 80156a2:	d018      	beq.n	80156d6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x76>
 80156a4:	9f01      	ldr	r7, [sp, #4]
 80156a6:	b1b7      	cbz	r7, 80156d6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x76>
 80156a8:	7b78      	ldrb	r0, [r7, #13]
 80156aa:	7a3b      	ldrb	r3, [r7, #8]
 80156ac:	88aa      	ldrh	r2, [r5, #4]
 80156ae:	00c1      	lsls	r1, r0, #3
 80156b0:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80156b4:	4319      	orrs	r1, r3
 80156b6:	0643      	lsls	r3, r0, #25
 80156b8:	bf44      	itt	mi
 80156ba:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 80156be:	b219      	sxthmi	r1, r3
 80156c0:	0100      	lsls	r0, r0, #4
 80156c2:	79fb      	ldrb	r3, [r7, #7]
 80156c4:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80156c8:	4303      	orrs	r3, r0
 80156ca:	4413      	add	r3, r2
 80156cc:	1a5b      	subs	r3, r3, r1
 80156ce:	b29b      	uxth	r3, r3
 80156d0:	42a3      	cmp	r3, r4
 80156d2:	bfc8      	it	gt
 80156d4:	b21c      	sxthgt	r4, r3
 80156d6:	4633      	mov	r3, r6
 80156d8:	462a      	mov	r2, r5
 80156da:	2100      	movs	r1, #0
 80156dc:	e7dc      	b.n	8015698 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 80156de:	b2a0      	uxth	r0, r4
 80156e0:	b018      	add	sp, #96	; 0x60
 80156e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80156e6:	b003      	add	sp, #12
 80156e8:	4770      	bx	lr

080156ea <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80156ea:	b40e      	push	{r1, r2, r3}
 80156ec:	b530      	push	{r4, r5, lr}
 80156ee:	b098      	sub	sp, #96	; 0x60
 80156f0:	ab1b      	add	r3, sp, #108	; 0x6c
 80156f2:	4604      	mov	r4, r0
 80156f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80156f8:	9301      	str	r3, [sp, #4]
 80156fa:	a802      	add	r0, sp, #8
 80156fc:	f000 fd23 	bl	8016146 <_ZN8touchgfx12TextProviderC1Ev>
 8015700:	6823      	ldr	r3, [r4, #0]
 8015702:	4620      	mov	r0, r4
 8015704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015706:	4798      	blx	r3
 8015708:	9a01      	ldr	r2, [sp, #4]
 801570a:	4603      	mov	r3, r0
 801570c:	4629      	mov	r1, r5
 801570e:	a802      	add	r0, sp, #8
 8015710:	f000 fd5e 	bl	80161d0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8015714:	a802      	add	r0, sp, #8
 8015716:	f001 f94d 	bl	80169b4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801571a:	2401      	movs	r4, #1
 801571c:	b2a3      	uxth	r3, r4
 801571e:	b140      	cbz	r0, 8015732 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x48>
 8015720:	280a      	cmp	r0, #10
 8015722:	bf08      	it	eq
 8015724:	3301      	addeq	r3, #1
 8015726:	a802      	add	r0, sp, #8
 8015728:	bf08      	it	eq
 801572a:	b21c      	sxtheq	r4, r3
 801572c:	f001 f942 	bl	80169b4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015730:	e7f4      	b.n	801571c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 8015732:	4618      	mov	r0, r3
 8015734:	b018      	add	sp, #96	; 0x60
 8015736:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801573a:	b003      	add	sp, #12
 801573c:	4770      	bx	lr

0801573e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801573e:	b40e      	push	{r1, r2, r3}
 8015740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015742:	b098      	sub	sp, #96	; 0x60
 8015744:	ab1d      	add	r3, sp, #116	; 0x74
 8015746:	4604      	mov	r4, r0
 8015748:	f853 5b04 	ldr.w	r5, [r3], #4
 801574c:	9300      	str	r3, [sp, #0]
 801574e:	a802      	add	r0, sp, #8
 8015750:	f000 fcf9 	bl	8016146 <_ZN8touchgfx12TextProviderC1Ev>
 8015754:	6823      	ldr	r3, [r4, #0]
 8015756:	4620      	mov	r0, r4
 8015758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801575a:	4798      	blx	r3
 801575c:	4629      	mov	r1, r5
 801575e:	4603      	mov	r3, r0
 8015760:	9a00      	ldr	r2, [sp, #0]
 8015762:	a802      	add	r0, sp, #8
 8015764:	ad18      	add	r5, sp, #96	; 0x60
 8015766:	f000 fd33 	bl	80161d0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801576a:	2100      	movs	r1, #0
 801576c:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8015770:	4622      	mov	r2, r4
 8015772:	462b      	mov	r3, r5
 8015774:	a802      	add	r0, sp, #8
 8015776:	f001 f825 	bl	80167c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801577a:	26ff      	movs	r6, #255	; 0xff
 801577c:	b1d8      	cbz	r0, 80157b6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801577e:	280a      	cmp	r0, #10
 8015780:	d012      	beq.n	80157a8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 8015782:	9801      	ldr	r0, [sp, #4]
 8015784:	b180      	cbz	r0, 80157a8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 8015786:	7b47      	ldrb	r7, [r0, #13]
 8015788:	7922      	ldrb	r2, [r4, #4]
 801578a:	00fb      	lsls	r3, r7, #3
 801578c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8015790:	7a03      	ldrb	r3, [r0, #8]
 8015792:	430b      	orrs	r3, r1
 8015794:	0679      	lsls	r1, r7, #25
 8015796:	bf44      	itt	mi
 8015798:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801579c:	b21b      	sxthmi	r3, r3
 801579e:	1ad3      	subs	r3, r2, r3
 80157a0:	b2db      	uxtb	r3, r3
 80157a2:	429e      	cmp	r6, r3
 80157a4:	bf28      	it	cs
 80157a6:	461e      	movcs	r6, r3
 80157a8:	462b      	mov	r3, r5
 80157aa:	4622      	mov	r2, r4
 80157ac:	2100      	movs	r1, #0
 80157ae:	a802      	add	r0, sp, #8
 80157b0:	f001 f808 	bl	80167c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80157b4:	e7e2      	b.n	801577c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 80157b6:	4630      	mov	r0, r6
 80157b8:	b018      	add	sp, #96	; 0x60
 80157ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80157be:	b003      	add	sp, #12
 80157c0:	4770      	bx	lr

080157c2 <_ZNK8touchgfx8Drawable10invalidateEv>:
 80157c2:	b513      	push	{r0, r1, r4, lr}
 80157c4:	1d01      	adds	r1, r0, #4
 80157c6:	4603      	mov	r3, r0
 80157c8:	c903      	ldmia	r1, {r0, r1}
 80157ca:	466a      	mov	r2, sp
 80157cc:	e882 0003 	stmia.w	r2, {r0, r1}
 80157d0:	2100      	movs	r1, #0
 80157d2:	9100      	str	r1, [sp, #0]
 80157d4:	6819      	ldr	r1, [r3, #0]
 80157d6:	4618      	mov	r0, r3
 80157d8:	690c      	ldr	r4, [r1, #16]
 80157da:	4611      	mov	r1, r2
 80157dc:	47a0      	blx	r4
 80157de:	b002      	add	sp, #8
 80157e0:	bd10      	pop	{r4, pc}

080157e2 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80157e2:	b538      	push	{r3, r4, r5, lr}
 80157e4:	680b      	ldr	r3, [r1, #0]
 80157e6:	460c      	mov	r4, r1
 80157e8:	68db      	ldr	r3, [r3, #12]
 80157ea:	4605      	mov	r5, r0
 80157ec:	4798      	blx	r3
 80157ee:	6823      	ldr	r3, [r4, #0]
 80157f0:	4620      	mov	r0, r4
 80157f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157f4:	4629      	mov	r1, r5
 80157f6:	4798      	blx	r3
 80157f8:	4628      	mov	r0, r5
 80157fa:	bd38      	pop	{r3, r4, r5, pc}

080157fc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80157fc:	b410      	push	{r4}
 80157fe:	880a      	ldrh	r2, [r1, #0]
 8015800:	8884      	ldrh	r4, [r0, #4]
 8015802:	4422      	add	r2, r4
 8015804:	800a      	strh	r2, [r1, #0]
 8015806:	88c4      	ldrh	r4, [r0, #6]
 8015808:	884a      	ldrh	r2, [r1, #2]
 801580a:	4422      	add	r2, r4
 801580c:	804a      	strh	r2, [r1, #2]
 801580e:	6940      	ldr	r0, [r0, #20]
 8015810:	b120      	cbz	r0, 801581c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8015812:	6803      	ldr	r3, [r0, #0]
 8015814:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801581a:	4718      	bx	r3
 801581c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015820:	4770      	bx	lr

08015822 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8015822:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015824:	460b      	mov	r3, r1
 8015826:	b085      	sub	sp, #20
 8015828:	4604      	mov	r4, r0
 801582a:	b901      	cbnz	r1, 801582e <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801582c:	b322      	cbz	r2, 8015878 <_ZN8touchgfx8Drawable12moveRelativeEss+0x56>
 801582e:	1d27      	adds	r7, r4, #4
 8015830:	e897 0003 	ldmia.w	r7, {r0, r1}
 8015834:	466e      	mov	r6, sp
 8015836:	e886 0003 	stmia.w	r6, {r0, r1}
 801583a:	88a1      	ldrh	r1, [r4, #4]
 801583c:	88e5      	ldrh	r5, [r4, #6]
 801583e:	4419      	add	r1, r3
 8015840:	6823      	ldr	r3, [r4, #0]
 8015842:	442a      	add	r2, r5
 8015844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015846:	b209      	sxth	r1, r1
 8015848:	4620      	mov	r0, r4
 801584a:	b215      	sxth	r5, r2
 801584c:	4798      	blx	r3
 801584e:	6823      	ldr	r3, [r4, #0]
 8015850:	4629      	mov	r1, r5
 8015852:	4620      	mov	r0, r4
 8015854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015856:	4798      	blx	r3
 8015858:	e897 0003 	ldmia.w	r7, {r0, r1}
 801585c:	ad02      	add	r5, sp, #8
 801585e:	e885 0003 	stmia.w	r5, {r0, r1}
 8015862:	6960      	ldr	r0, [r4, #20]
 8015864:	b150      	cbz	r0, 801587c <_ZN8touchgfx8Drawable12moveRelativeEss+0x5a>
 8015866:	6803      	ldr	r3, [r0, #0]
 8015868:	4631      	mov	r1, r6
 801586a:	691b      	ldr	r3, [r3, #16]
 801586c:	4798      	blx	r3
 801586e:	6960      	ldr	r0, [r4, #20]
 8015870:	6803      	ldr	r3, [r0, #0]
 8015872:	691b      	ldr	r3, [r3, #16]
 8015874:	4629      	mov	r1, r5
 8015876:	4798      	blx	r3
 8015878:	b005      	add	sp, #20
 801587a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801587c:	f7ff f846 	bl	801490c <_ZN8touchgfx11Application11getInstanceEv>
 8015880:	6803      	ldr	r3, [r0, #0]
 8015882:	4631      	mov	r1, r6
 8015884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015886:	4798      	blx	r3
 8015888:	f7ff f840 	bl	801490c <_ZN8touchgfx11Application11getInstanceEv>
 801588c:	6803      	ldr	r3, [r0, #0]
 801588e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015890:	e7f0      	b.n	8015874 <_ZN8touchgfx8Drawable12moveRelativeEss+0x52>

08015892 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8015892:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015894:	8882      	ldrh	r2, [r0, #4]
 8015896:	880b      	ldrh	r3, [r1, #0]
 8015898:	4413      	add	r3, r2
 801589a:	800b      	strh	r3, [r1, #0]
 801589c:	88c2      	ldrh	r2, [r0, #6]
 801589e:	884b      	ldrh	r3, [r1, #2]
 80158a0:	4413      	add	r3, r2
 80158a2:	4602      	mov	r2, r0
 80158a4:	804b      	strh	r3, [r1, #2]
 80158a6:	4605      	mov	r5, r0
 80158a8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80158ac:	460c      	mov	r4, r1
 80158ae:	6851      	ldr	r1, [r2, #4]
 80158b0:	466b      	mov	r3, sp
 80158b2:	c303      	stmia	r3!, {r0, r1}
 80158b4:	4621      	mov	r1, r4
 80158b6:	4668      	mov	r0, sp
 80158b8:	f7fb ff9e 	bl	80117f8 <_ZN8touchgfx4RectaNERKS0_>
 80158bc:	466b      	mov	r3, sp
 80158be:	cb03      	ldmia	r3!, {r0, r1}
 80158c0:	6020      	str	r0, [r4, #0]
 80158c2:	6061      	str	r1, [r4, #4]
 80158c4:	6968      	ldr	r0, [r5, #20]
 80158c6:	b128      	cbz	r0, 80158d4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 80158c8:	6803      	ldr	r3, [r0, #0]
 80158ca:	691b      	ldr	r3, [r3, #16]
 80158cc:	4621      	mov	r1, r4
 80158ce:	4798      	blx	r3
 80158d0:	b003      	add	sp, #12
 80158d2:	bd30      	pop	{r4, r5, pc}
 80158d4:	f7ff f81a 	bl	801490c <_ZN8touchgfx11Application11getInstanceEv>
 80158d8:	6803      	ldr	r3, [r0, #0]
 80158da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80158dc:	e7f6      	b.n	80158cc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

080158de <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80158de:	b570      	push	{r4, r5, r6, lr}
 80158e0:	8882      	ldrh	r2, [r0, #4]
 80158e2:	880b      	ldrh	r3, [r1, #0]
 80158e4:	4413      	add	r3, r2
 80158e6:	800b      	strh	r3, [r1, #0]
 80158e8:	88c2      	ldrh	r2, [r0, #6]
 80158ea:	884b      	ldrh	r3, [r1, #2]
 80158ec:	460c      	mov	r4, r1
 80158ee:	4413      	add	r3, r2
 80158f0:	804b      	strh	r3, [r1, #2]
 80158f2:	4605      	mov	r5, r0
 80158f4:	1d01      	adds	r1, r0, #4
 80158f6:	4620      	mov	r0, r4
 80158f8:	f7fb ff7e 	bl	80117f8 <_ZN8touchgfx4RectaNERKS0_>
 80158fc:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8015900:	2b00      	cmp	r3, #0
 8015902:	dd0b      	ble.n	801591c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8015904:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8015908:	2b00      	cmp	r3, #0
 801590a:	dd07      	ble.n	801591c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801590c:	6968      	ldr	r0, [r5, #20]
 801590e:	b128      	cbz	r0, 801591c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8015910:	6803      	ldr	r3, [r0, #0]
 8015912:	4621      	mov	r1, r4
 8015914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015916:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801591a:	4718      	bx	r3
 801591c:	bd70      	pop	{r4, r5, r6, pc}

0801591e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801591e:	b510      	push	{r4, lr}
 8015920:	4604      	mov	r4, r0
 8015922:	4608      	mov	r0, r1
 8015924:	2300      	movs	r3, #0
 8015926:	8023      	strh	r3, [r4, #0]
 8015928:	8063      	strh	r3, [r4, #2]
 801592a:	6803      	ldr	r3, [r0, #0]
 801592c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8015930:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8015934:	80a1      	strh	r1, [r4, #4]
 8015936:	80e2      	strh	r2, [r4, #6]
 8015938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801593a:	4621      	mov	r1, r4
 801593c:	4798      	blx	r3
 801593e:	4620      	mov	r0, r4
 8015940:	bd10      	pop	{r4, pc}
	...

08015944 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8015944:	b530      	push	{r4, r5, lr}
 8015946:	8083      	strh	r3, [r0, #4]
 8015948:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801594c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8015950:	7183      	strb	r3, [r0, #6]
 8015952:	79c3      	ldrb	r3, [r0, #7]
 8015954:	6101      	str	r1, [r0, #16]
 8015956:	f365 0306 	bfi	r3, r5, #0, #7
 801595a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801595e:	8282      	strh	r2, [r0, #20]
 8015960:	f365 13c7 	bfi	r3, r5, #7, #1
 8015964:	71c3      	strb	r3, [r0, #7]
 8015966:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801596a:	7203      	strb	r3, [r0, #8]
 801596c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8015970:	7243      	strb	r3, [r0, #9]
 8015972:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015976:	8143      	strh	r3, [r0, #10]
 8015978:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801597c:	8183      	strh	r3, [r0, #12]
 801597e:	4b01      	ldr	r3, [pc, #4]	; (8015984 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8015980:	6003      	str	r3, [r0, #0]
 8015982:	bd30      	pop	{r4, r5, pc}
 8015984:	08027564 	.word	0x08027564

08015988 <_ZNK8touchgfx9ConstFont4findEt>:
 8015988:	b5f0      	push	{r4, r5, r6, r7, lr}
 801598a:	6904      	ldr	r4, [r0, #16]
 801598c:	b3bc      	cbz	r4, 80159fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801598e:	88a3      	ldrh	r3, [r4, #4]
 8015990:	8a82      	ldrh	r2, [r0, #20]
 8015992:	1acb      	subs	r3, r1, r3
 8015994:	f102 32ff 	add.w	r2, r2, #4294967295
 8015998:	d431      	bmi.n	80159fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801599a:	4293      	cmp	r3, r2
 801599c:	dd0c      	ble.n	80159b8 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801599e:	230e      	movs	r3, #14
 80159a0:	fb03 4302 	mla	r3, r3, r2, r4
 80159a4:	889b      	ldrh	r3, [r3, #4]
 80159a6:	1a5b      	subs	r3, r3, r1
 80159a8:	1ad3      	subs	r3, r2, r3
 80159aa:	429a      	cmp	r2, r3
 80159ac:	db27      	blt.n	80159fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	bfbc      	itt	lt
 80159b2:	2302      	movlt	r3, #2
 80159b4:	fb92 f3f3 	sdivlt	r3, r2, r3
 80159b8:	2500      	movs	r5, #0
 80159ba:	260e      	movs	r6, #14
 80159bc:	4295      	cmp	r5, r2
 80159be:	dc1e      	bgt.n	80159fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80159c0:	fb06 4003 	mla	r0, r6, r3, r4
 80159c4:	8887      	ldrh	r7, [r0, #4]
 80159c6:	42b9      	cmp	r1, r7
 80159c8:	d01a      	beq.n	8015a00 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 80159ca:	d20d      	bcs.n	80159e8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 80159cc:	1e5a      	subs	r2, r3, #1
 80159ce:	4295      	cmp	r5, r2
 80159d0:	dc15      	bgt.n	80159fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80159d2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80159d6:	1a5b      	subs	r3, r3, r1
 80159d8:	1ad3      	subs	r3, r2, r3
 80159da:	429a      	cmp	r2, r3
 80159dc:	db0f      	blt.n	80159fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80159de:	429d      	cmp	r5, r3
 80159e0:	ddec      	ble.n	80159bc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80159e2:	1953      	adds	r3, r2, r5
 80159e4:	105b      	asrs	r3, r3, #1
 80159e6:	e7e9      	b.n	80159bc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80159e8:	1c5d      	adds	r5, r3, #1
 80159ea:	42aa      	cmp	r2, r5
 80159ec:	db07      	blt.n	80159fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80159ee:	8a43      	ldrh	r3, [r0, #18]
 80159f0:	1acb      	subs	r3, r1, r3
 80159f2:	442b      	add	r3, r5
 80159f4:	429d      	cmp	r5, r3
 80159f6:	dc02      	bgt.n	80159fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80159f8:	429a      	cmp	r2, r3
 80159fa:	dadf      	bge.n	80159bc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80159fc:	e7f1      	b.n	80159e2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80159fe:	2000      	movs	r0, #0
 8015a00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015a02 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8015a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a04:	4604      	mov	r4, r0
 8015a06:	4617      	mov	r7, r2
 8015a08:	461e      	mov	r6, r3
 8015a0a:	b911      	cbnz	r1, 8015a12 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8015a0c:	2500      	movs	r5, #0
 8015a0e:	4628      	mov	r0, r5
 8015a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a12:	290a      	cmp	r1, #10
 8015a14:	d0fa      	beq.n	8015a0c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015a16:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8015a1a:	4291      	cmp	r1, r2
 8015a1c:	d0f6      	beq.n	8015a0c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015a1e:	f242 020b 	movw	r2, #8203	; 0x200b
 8015a22:	4291      	cmp	r1, r2
 8015a24:	d0f2      	beq.n	8015a0c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015a26:	f7ff ffaf 	bl	8015988 <_ZNK8touchgfx9ConstFont4findEt>
 8015a2a:	4605      	mov	r5, r0
 8015a2c:	b950      	cbnz	r0, 8015a44 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8015a2e:	6823      	ldr	r3, [r4, #0]
 8015a30:	4620      	mov	r0, r4
 8015a32:	691b      	ldr	r3, [r3, #16]
 8015a34:	4798      	blx	r3
 8015a36:	4601      	mov	r1, r0
 8015a38:	4620      	mov	r0, r4
 8015a3a:	f7ff ffa5 	bl	8015988 <_ZNK8touchgfx9ConstFont4findEt>
 8015a3e:	4605      	mov	r5, r0
 8015a40:	2800      	cmp	r0, #0
 8015a42:	d0e3      	beq.n	8015a0c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015a44:	6823      	ldr	r3, [r4, #0]
 8015a46:	4629      	mov	r1, r5
 8015a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015a4a:	4620      	mov	r0, r4
 8015a4c:	4798      	blx	r3
 8015a4e:	6038      	str	r0, [r7, #0]
 8015a50:	6823      	ldr	r3, [r4, #0]
 8015a52:	4620      	mov	r0, r4
 8015a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a56:	4798      	blx	r3
 8015a58:	7030      	strb	r0, [r6, #0]
 8015a5a:	e7d8      	b.n	8015a0e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08015a5c <_ZN8touchgfx6memsetEPvhm>:
 8015a5c:	4402      	add	r2, r0
 8015a5e:	4290      	cmp	r0, r2
 8015a60:	d002      	beq.n	8015a68 <_ZN8touchgfx6memsetEPvhm+0xc>
 8015a62:	f800 1b01 	strb.w	r1, [r0], #1
 8015a66:	e7fa      	b.n	8015a5e <_ZN8touchgfx6memsetEPvhm+0x2>
 8015a68:	4770      	bx	lr

08015a6a <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8015a6a:	2000      	movs	r0, #0
 8015a6c:	4770      	bx	lr

08015a6e <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8015a6e:	2001      	movs	r0, #1
 8015a70:	4770      	bx	lr

08015a72 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8015a72:	2002      	movs	r0, #2
 8015a74:	4770      	bx	lr

08015a76 <_ZN8touchgfx12GestureEventD1Ev>:
 8015a76:	4770      	bx	lr

08015a78 <_ZN8touchgfx9DragEventD1Ev>:
 8015a78:	4770      	bx	lr

08015a7a <_ZN8touchgfx10ClickEventD1Ev>:
 8015a7a:	4770      	bx	lr

08015a7c <_ZN8touchgfx10ClickEventD0Ev>:
 8015a7c:	b510      	push	{r4, lr}
 8015a7e:	210c      	movs	r1, #12
 8015a80:	4604      	mov	r4, r0
 8015a82:	f00d fd34 	bl	80234ee <_ZdlPvj>
 8015a86:	4620      	mov	r0, r4
 8015a88:	bd10      	pop	{r4, pc}

08015a8a <_ZN8touchgfx9DragEventD0Ev>:
 8015a8a:	b510      	push	{r4, lr}
 8015a8c:	2110      	movs	r1, #16
 8015a8e:	4604      	mov	r4, r0
 8015a90:	f00d fd2d 	bl	80234ee <_ZdlPvj>
 8015a94:	4620      	mov	r0, r4
 8015a96:	bd10      	pop	{r4, pc}

08015a98 <_ZN8touchgfx12GestureEventD0Ev>:
 8015a98:	b510      	push	{r4, lr}
 8015a9a:	210c      	movs	r1, #12
 8015a9c:	4604      	mov	r4, r0
 8015a9e:	f00d fd26 	bl	80234ee <_ZdlPvj>
 8015aa2:	4620      	mov	r0, r4
 8015aa4:	bd10      	pop	{r4, pc}
	...

08015aa8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8015aa8:	b530      	push	{r4, r5, lr}
 8015aaa:	460d      	mov	r5, r1
 8015aac:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8015aae:	b087      	sub	sp, #28
 8015ab0:	4604      	mov	r4, r0
 8015ab2:	b301      	cbz	r1, 8015af6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8015ab4:	a801      	add	r0, sp, #4
 8015ab6:	f7ff ff32 	bl	801591e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015aba:	892a      	ldrh	r2, [r5, #8]
 8015abc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015ac0:	7928      	ldrb	r0, [r5, #4]
 8015ac2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8015ac6:	f88d 0010 	strb.w	r0, [sp, #16]
 8015aca:	1ad2      	subs	r2, r2, r3
 8015acc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8015ace:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8015ad0:	f8ad 1012 	strh.w	r1, [sp, #18]
 8015ad4:	441a      	add	r2, r3
 8015ad6:	896b      	ldrh	r3, [r5, #10]
 8015ad8:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8015adc:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015ae0:	1b5b      	subs	r3, r3, r5
 8015ae2:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8015ae4:	442b      	add	r3, r5
 8015ae6:	4d05      	ldr	r5, [pc, #20]	; (8015afc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8015ae8:	9503      	str	r5, [sp, #12]
 8015aea:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015aee:	6803      	ldr	r3, [r0, #0]
 8015af0:	a903      	add	r1, sp, #12
 8015af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015af4:	4798      	blx	r3
 8015af6:	b007      	add	sp, #28
 8015af8:	bd30      	pop	{r4, r5, pc}
 8015afa:	bf00      	nop
 8015afc:	080275e0 	.word	0x080275e0

08015b00 <_ZNK8touchgfx4Rect9intersectEss>:
 8015b00:	b510      	push	{r4, lr}
 8015b02:	f9b0 3000 	ldrsh.w	r3, [r0]
 8015b06:	428b      	cmp	r3, r1
 8015b08:	dc10      	bgt.n	8015b2c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8015b0a:	8884      	ldrh	r4, [r0, #4]
 8015b0c:	4423      	add	r3, r4
 8015b0e:	b21b      	sxth	r3, r3
 8015b10:	4299      	cmp	r1, r3
 8015b12:	da0b      	bge.n	8015b2c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8015b14:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8015b18:	4293      	cmp	r3, r2
 8015b1a:	dc07      	bgt.n	8015b2c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8015b1c:	88c0      	ldrh	r0, [r0, #6]
 8015b1e:	4418      	add	r0, r3
 8015b20:	b200      	sxth	r0, r0
 8015b22:	4282      	cmp	r2, r0
 8015b24:	bfac      	ite	ge
 8015b26:	2000      	movge	r0, #0
 8015b28:	2001      	movlt	r0, #1
 8015b2a:	bd10      	pop	{r4, pc}
 8015b2c:	2000      	movs	r0, #0
 8015b2e:	e7fc      	b.n	8015b2a <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08015b30 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8015b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b32:	460c      	mov	r4, r1
 8015b34:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8015b36:	b089      	sub	sp, #36	; 0x24
 8015b38:	4605      	mov	r5, r0
 8015b3a:	2900      	cmp	r1, #0
 8015b3c:	d054      	beq.n	8015be8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 8015b3e:	4668      	mov	r0, sp
 8015b40:	f7ff feed 	bl	801591e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015b44:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 8015b46:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8015b48:	8922      	ldrh	r2, [r4, #8]
 8015b4a:	88e1      	ldrh	r1, [r4, #6]
 8015b4c:	443a      	add	r2, r7
 8015b4e:	4431      	add	r1, r6
 8015b50:	b212      	sxth	r2, r2
 8015b52:	b209      	sxth	r1, r1
 8015b54:	4668      	mov	r0, sp
 8015b56:	f7ff ffd3 	bl	8015b00 <_ZNK8touchgfx4Rect9intersectEss>
 8015b5a:	b1d0      	cbz	r0, 8015b92 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8015b5c:	89a2      	ldrh	r2, [r4, #12]
 8015b5e:	8961      	ldrh	r1, [r4, #10]
 8015b60:	443a      	add	r2, r7
 8015b62:	4431      	add	r1, r6
 8015b64:	b212      	sxth	r2, r2
 8015b66:	b209      	sxth	r1, r1
 8015b68:	4668      	mov	r0, sp
 8015b6a:	f7ff ffc9 	bl	8015b00 <_ZNK8touchgfx4Rect9intersectEss>
 8015b6e:	4603      	mov	r3, r0
 8015b70:	b978      	cbnz	r0, 8015b92 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8015b72:	4a1e      	ldr	r2, [pc, #120]	; (8015bec <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 8015b74:	9204      	str	r2, [sp, #16]
 8015b76:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8015b78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015b7c:	2202      	movs	r2, #2
 8015b7e:	f88d 2014 	strb.w	r2, [sp, #20]
 8015b82:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015b86:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015b8a:	6803      	ldr	r3, [r0, #0]
 8015b8c:	a904      	add	r1, sp, #16
 8015b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b90:	4798      	blx	r3
 8015b92:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8015b94:	a802      	add	r0, sp, #8
 8015b96:	f7ff fec2 	bl	801591e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015b9a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8015b9e:	88e0      	ldrh	r0, [r4, #6]
 8015ba0:	8961      	ldrh	r1, [r4, #10]
 8015ba2:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8015ba6:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 8015baa:	8923      	ldrh	r3, [r4, #8]
 8015bac:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8015bae:	7927      	ldrb	r7, [r4, #4]
 8015bb0:	f88d 7014 	strb.w	r7, [sp, #20]
 8015bb4:	1a80      	subs	r0, r0, r2
 8015bb6:	1a89      	subs	r1, r1, r2
 8015bb8:	89a2      	ldrh	r2, [r4, #12]
 8015bba:	4c0d      	ldr	r4, [pc, #52]	; (8015bf0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 8015bbc:	9404      	str	r4, [sp, #16]
 8015bbe:	4460      	add	r0, ip
 8015bc0:	eba3 030e 	sub.w	r3, r3, lr
 8015bc4:	eba2 020e 	sub.w	r2, r2, lr
 8015bc8:	f8ad 0016 	strh.w	r0, [sp, #22]
 8015bcc:	4433      	add	r3, r6
 8015bce:	4461      	add	r1, ip
 8015bd0:	4432      	add	r2, r6
 8015bd2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8015bd4:	f8ad 101a 	strh.w	r1, [sp, #26]
 8015bd8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015bdc:	f8ad 201c 	strh.w	r2, [sp, #28]
 8015be0:	6803      	ldr	r3, [r0, #0]
 8015be2:	a904      	add	r1, sp, #16
 8015be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015be6:	4798      	blx	r3
 8015be8:	b009      	add	sp, #36	; 0x24
 8015bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bec:	080275b8 	.word	0x080275b8
 8015bf0:	080275cc 	.word	0x080275cc

08015bf4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8015bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bf8:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 8015bfc:	790b      	ldrb	r3, [r1, #4]
 8015bfe:	b0a1      	sub	sp, #132	; 0x84
 8015c00:	4604      	mov	r4, r0
 8015c02:	460d      	mov	r5, r1
 8015c04:	f1b9 0f00 	cmp.w	r9, #0
 8015c08:	d00f      	beq.n	8015c2a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	f040 80a0 	bne.w	8015d50 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 8015c10:	b021      	add	sp, #132	; 0x84
 8015c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c16:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8015c1a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8015c1e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8015c22:	1d20      	adds	r0, r4, #4
 8015c24:	f7fb fd36 	bl	8011694 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8015c28:	e092      	b.n	8015d50 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d1f0      	bne.n	8015c10 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8015c2e:	4b5e      	ldr	r3, [pc, #376]	; (8015da8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b4>)
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 8015c36:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8015c3a:	f1ba 0f03 	cmp.w	sl, #3
 8015c3e:	ddea      	ble.n	8015c16 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8015c40:	f1ba 0f0c 	cmp.w	sl, #12
 8015c44:	f04f 0303 	mov.w	r3, #3
 8015c48:	bfdc      	itt	le
 8015c4a:	f10a 32ff 	addle.w	r2, sl, #4294967295
 8015c4e:	fb92 f3f3 	sdivle	r3, r2, r3
 8015c52:	9301      	str	r3, [sp, #4]
 8015c54:	4b55      	ldr	r3, [pc, #340]	; (8015dac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 8015c56:	4956      	ldr	r1, [pc, #344]	; (8015db0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 8015c58:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015c5c:	4b55      	ldr	r3, [pc, #340]	; (8015db4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 8015c5e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8015c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c66:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8015c6a:	ab0e      	add	r3, sp, #56	; 0x38
 8015c6c:	2248      	movs	r2, #72	; 0x48
 8015c6e:	2600      	movs	r6, #0
 8015c70:	4618      	mov	r0, r3
 8015c72:	960a      	str	r6, [sp, #40]	; 0x28
 8015c74:	f00d fde8 	bl	8023848 <memcpy>
 8015c78:	f04f 32ff 	mov.w	r2, #4294967295
 8015c7c:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8015c80:	f8cd a008 	str.w	sl, [sp, #8]
 8015c84:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8015c88:	fb93 f3f2 	sdiv	r3, r3, r2
 8015c8c:	b29b      	uxth	r3, r3
 8015c8e:	46b3      	mov	fp, r6
 8015c90:	9303      	str	r3, [sp, #12]
 8015c92:	2300      	movs	r3, #0
 8015c94:	9309      	str	r3, [sp, #36]	; 0x24
 8015c96:	9b07      	ldr	r3, [sp, #28]
 8015c98:	9a03      	ldr	r2, [sp, #12]
 8015c9a:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 8015c9e:	88ef      	ldrh	r7, [r5, #6]
 8015ca0:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8015ca4:	fb13 f302 	smulbb	r3, r3, r2
 8015ca8:	b29b      	uxth	r3, r3
 8015caa:	9304      	str	r3, [sp, #16]
 8015cac:	9b07      	ldr	r3, [sp, #28]
 8015cae:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015cb2:	a80a      	add	r0, sp, #40	; 0x28
 8015cb4:	685b      	ldr	r3, [r3, #4]
 8015cb6:	fb13 f302 	smulbb	r3, r3, r2
 8015cba:	b29b      	uxth	r3, r3
 8015cbc:	9305      	str	r3, [sp, #20]
 8015cbe:	9b04      	ldr	r3, [sp, #16]
 8015cc0:	441f      	add	r7, r3
 8015cc2:	9b05      	ldr	r3, [sp, #20]
 8015cc4:	4498      	add	r8, r3
 8015cc6:	b23f      	sxth	r7, r7
 8015cc8:	fa0f f888 	sxth.w	r8, r8
 8015ccc:	4642      	mov	r2, r8
 8015cce:	4639      	mov	r1, r7
 8015cd0:	f7ff ff16 	bl	8015b00 <_ZNK8touchgfx4Rect9intersectEss>
 8015cd4:	b380      	cbz	r0, 8015d38 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 8015cd6:	4639      	mov	r1, r7
 8015cd8:	ab09      	add	r3, sp, #36	; 0x24
 8015cda:	4642      	mov	r2, r8
 8015cdc:	1d20      	adds	r0, r4, #4
 8015cde:	f7fb fcd9 	bl	8011694 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8015ce2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015ce4:	b341      	cbz	r1, 8015d38 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 8015ce6:	4549      	cmp	r1, r9
 8015ce8:	d026      	beq.n	8015d38 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 8015cea:	a80c      	add	r0, sp, #48	; 0x30
 8015cec:	f7ff fe17 	bl	801591e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015cf0:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8015cf4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015cf8:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8015cfc:	2002      	movs	r0, #2
 8015cfe:	fb92 f2f0 	sdiv	r2, r2, r0
 8015d02:	440a      	add	r2, r1
 8015d04:	1a99      	subs	r1, r3, r2
 8015d06:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8015d0a:	fb93 f3f0 	sdiv	r3, r3, r0
 8015d0e:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 8015d12:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8015d16:	4403      	add	r3, r0
 8015d18:	1ad3      	subs	r3, r2, r3
 8015d1a:	435b      	muls	r3, r3
 8015d1c:	9a06      	ldr	r2, [sp, #24]
 8015d1e:	fb01 3301 	mla	r3, r1, r1, r3
 8015d22:	4293      	cmp	r3, r2
 8015d24:	d208      	bcs.n	8015d38 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 8015d26:	9a04      	ldr	r2, [sp, #16]
 8015d28:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8015d2c:	86a2      	strh	r2, [r4, #52]	; 0x34
 8015d2e:	9a05      	ldr	r2, [sp, #20]
 8015d30:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8015d34:	86e2      	strh	r2, [r4, #54]	; 0x36
 8015d36:	9306      	str	r3, [sp, #24]
 8015d38:	f10b 0b02 	add.w	fp, fp, #2
 8015d3c:	f1bb 0f08 	cmp.w	fp, #8
 8015d40:	dda7      	ble.n	8015c92 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8015d42:	9b02      	ldr	r3, [sp, #8]
 8015d44:	4453      	add	r3, sl
 8015d46:	9302      	str	r3, [sp, #8]
 8015d48:	9b01      	ldr	r3, [sp, #4]
 8015d4a:	3601      	adds	r6, #1
 8015d4c:	42b3      	cmp	r3, r6
 8015d4e:	d199      	bne.n	8015c84 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x90>
 8015d50:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8015d52:	2900      	cmp	r1, #0
 8015d54:	f43f af5c 	beq.w	8015c10 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8015d58:	a80c      	add	r0, sp, #48	; 0x30
 8015d5a:	f7ff fde0 	bl	801591e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015d5e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8015d62:	88ea      	ldrh	r2, [r5, #6]
 8015d64:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 8015d68:	7929      	ldrb	r1, [r5, #4]
 8015d6a:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 8015d6e:	1ad2      	subs	r2, r2, r3
 8015d70:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8015d72:	441a      	add	r2, r3
 8015d74:	892b      	ldrh	r3, [r5, #8]
 8015d76:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8015d7a:	1a1b      	subs	r3, r3, r0
 8015d7c:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8015d7e:	4403      	add	r3, r0
 8015d80:	480d      	ldr	r0, [pc, #52]	; (8015db8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 8015d82:	900e      	str	r0, [sp, #56]	; 0x38
 8015d84:	2600      	movs	r6, #0
 8015d86:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8015d88:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8015d8c:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 8015d90:	6803      	ldr	r3, [r0, #0]
 8015d92:	a90e      	add	r1, sp, #56	; 0x38
 8015d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d96:	4798      	blx	r3
 8015d98:	792b      	ldrb	r3, [r5, #4]
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	f43f af38 	beq.w	8015c10 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8015da0:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8015da4:	e734      	b.n	8015c10 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8015da6:	bf00      	nop
 8015da8:	2000a03c 	.word	0x2000a03c
 8015dac:	2000a030 	.word	0x2000a030
 8015db0:	0802595c 	.word	0x0802595c
 8015db4:	2000a032 	.word	0x2000a032
 8015db8:	080275b8 	.word	0x080275b8

08015dbc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8015dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015dbe:	4604      	mov	r4, r0
 8015dc0:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8015dc4:	3201      	adds	r2, #1
 8015dc6:	d112      	bne.n	8015dee <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8015dc8:	6803      	ldr	r3, [r0, #0]
 8015dca:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8015dce:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8015dd2:	f8ad 1004 	strh.w	r1, [sp, #4]
 8015dd6:	2500      	movs	r5, #0
 8015dd8:	9500      	str	r5, [sp, #0]
 8015dda:	466d      	mov	r5, sp
 8015ddc:	4629      	mov	r1, r5
 8015dde:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015de4:	4798      	blx	r3
 8015de6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015dea:	e884 0003 	stmia.w	r4, {r0, r1}
 8015dee:	4620      	mov	r0, r4
 8015df0:	b003      	add	sp, #12
 8015df2:	bd30      	pop	{r4, r5, pc}

08015df4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8015df4:	b513      	push	{r0, r1, r4, lr}
 8015df6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8015dfa:	3301      	adds	r3, #1
 8015dfc:	4604      	mov	r4, r0
 8015dfe:	d109      	bne.n	8015e14 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8015e00:	4601      	mov	r1, r0
 8015e02:	4668      	mov	r0, sp
 8015e04:	f7ff fd8b 	bl	801591e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015e08:	f8bd 3000 	ldrh.w	r3, [sp]
 8015e0c:	8423      	strh	r3, [r4, #32]
 8015e0e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015e12:	8463      	strh	r3, [r4, #34]	; 0x22
 8015e14:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8015e18:	b002      	add	sp, #8
 8015e1a:	bd10      	pop	{r4, pc}

08015e1c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8015e1c:	b513      	push	{r0, r1, r4, lr}
 8015e1e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8015e22:	3301      	adds	r3, #1
 8015e24:	4604      	mov	r4, r0
 8015e26:	d109      	bne.n	8015e3c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8015e28:	4601      	mov	r1, r0
 8015e2a:	4668      	mov	r0, sp
 8015e2c:	f7ff fd77 	bl	801591e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015e30:	f8bd 3000 	ldrh.w	r3, [sp]
 8015e34:	8423      	strh	r3, [r4, #32]
 8015e36:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015e3a:	8463      	strh	r3, [r4, #34]	; 0x22
 8015e3c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8015e40:	b002      	add	sp, #8
 8015e42:	bd10      	pop	{r4, pc}

08015e44 <_ZN8touchgfx6ScreenC1Ev>:
 8015e44:	b570      	push	{r4, r5, r6, lr}
 8015e46:	4605      	mov	r5, r0
 8015e48:	4b15      	ldr	r3, [pc, #84]	; (8015ea0 <_ZN8touchgfx6ScreenC1Ev+0x5c>)
 8015e4a:	f845 3b04 	str.w	r3, [r5], #4
 8015e4e:	2300      	movs	r3, #0
 8015e50:	8103      	strh	r3, [r0, #8]
 8015e52:	8143      	strh	r3, [r0, #10]
 8015e54:	8183      	strh	r3, [r0, #12]
 8015e56:	81c3      	strh	r3, [r0, #14]
 8015e58:	8203      	strh	r3, [r0, #16]
 8015e5a:	8243      	strh	r3, [r0, #18]
 8015e5c:	8283      	strh	r3, [r0, #20]
 8015e5e:	82c3      	strh	r3, [r0, #22]
 8015e60:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8015e64:	6203      	str	r3, [r0, #32]
 8015e66:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8015e6a:	4a0e      	ldr	r2, [pc, #56]	; (8015ea4 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8015e6c:	6343      	str	r3, [r0, #52]	; 0x34
 8015e6e:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8015e72:	4b0d      	ldr	r3, [pc, #52]	; (8015ea8 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8015e74:	6042      	str	r2, [r0, #4]
 8015e76:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015e7a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8015e7c:	4a0b      	ldr	r2, [pc, #44]	; (8015eac <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8015e7e:	4604      	mov	r4, r0
 8015e80:	2101      	movs	r1, #1
 8015e82:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8015e86:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8015e8a:	f9b2 1000 	ldrsh.w	r1, [r2]
 8015e8e:	4628      	mov	r0, r5
 8015e90:	4798      	blx	r3
 8015e92:	6863      	ldr	r3, [r4, #4]
 8015e94:	4628      	mov	r0, r5
 8015e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e98:	4631      	mov	r1, r6
 8015e9a:	4798      	blx	r3
 8015e9c:	4620      	mov	r0, r4
 8015e9e:	bd70      	pop	{r4, r5, r6, pc}
 8015ea0:	080275f4 	.word	0x080275f4
 8015ea4:	0802671c 	.word	0x0802671c
 8015ea8:	2000a032 	.word	0x2000a032
 8015eac:	2000a030 	.word	0x2000a030

08015eb0 <_ZN8touchgfx6Screen4drawEv>:
 8015eb0:	b507      	push	{r0, r1, r2, lr}
 8015eb2:	4b09      	ldr	r3, [pc, #36]	; (8015ed8 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8015eb4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015eb8:	4b08      	ldr	r3, [pc, #32]	; (8015edc <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8015eba:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015ebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015ec2:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015ec6:	6803      	ldr	r3, [r0, #0]
 8015ec8:	2100      	movs	r1, #0
 8015eca:	9100      	str	r1, [sp, #0]
 8015ecc:	689b      	ldr	r3, [r3, #8]
 8015ece:	4669      	mov	r1, sp
 8015ed0:	4798      	blx	r3
 8015ed2:	b003      	add	sp, #12
 8015ed4:	f85d fb04 	ldr.w	pc, [sp], #4
 8015ed8:	2000a030 	.word	0x2000a030
 8015edc:	2000a032 	.word	0x2000a032

08015ee0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8015ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ee4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	b089      	sub	sp, #36	; 0x24
 8015eec:	4680      	mov	r8, r0
 8015eee:	460c      	mov	r4, r1
 8015ef0:	4615      	mov	r5, r2
 8015ef2:	dd0e      	ble.n	8015f12 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8015ef4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	dd0a      	ble.n	8015f12 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8015efc:	4628      	mov	r0, r5
 8015efe:	f7ff ff5d 	bl	8015dbc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8015f02:	4621      	mov	r1, r4
 8015f04:	f7fe fc78 	bl	80147f8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015f08:	69eb      	ldr	r3, [r5, #28]
 8015f0a:	b928      	cbnz	r0, 8015f18 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8015f0c:	461d      	mov	r5, r3
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d1f4      	bne.n	8015efc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8015f12:	b009      	add	sp, #36	; 0x24
 8015f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f18:	ae04      	add	r6, sp, #16
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	f000 80b5 	beq.w	801608a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8015f20:	682b      	ldr	r3, [r5, #0]
 8015f22:	4629      	mov	r1, r5
 8015f24:	68db      	ldr	r3, [r3, #12]
 8015f26:	a802      	add	r0, sp, #8
 8015f28:	4798      	blx	r3
 8015f2a:	4628      	mov	r0, r5
 8015f2c:	f7ff ff62 	bl	8015df4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8015f30:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8015f34:	4407      	add	r7, r0
 8015f36:	4628      	mov	r0, r5
 8015f38:	f7ff ff70 	bl	8015e1c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8015f3c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8015f40:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8015f44:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015f48:	4418      	add	r0, r3
 8015f4a:	4621      	mov	r1, r4
 8015f4c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015f50:	f8ad 0012 	strh.w	r0, [sp, #18]
 8015f54:	b23f      	sxth	r7, r7
 8015f56:	4630      	mov	r0, r6
 8015f58:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015f5c:	f8ad 7010 	strh.w	r7, [sp, #16]
 8015f60:	f7fb fc4a 	bl	80117f8 <_ZN8touchgfx4RectaNERKS0_>
 8015f64:	4628      	mov	r0, r5
 8015f66:	f7ff ff29 	bl	8015dbc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8015f6a:	4602      	mov	r2, r0
 8015f6c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8015f70:	ab06      	add	r3, sp, #24
 8015f72:	e883 0003 	stmia.w	r3, {r0, r1}
 8015f76:	4611      	mov	r1, r2
 8015f78:	4618      	mov	r0, r3
 8015f7a:	f7fb fc3d 	bl	80117f8 <_ZN8touchgfx4RectaNERKS0_>
 8015f7e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8015f82:	f9b4 1000 	ldrsh.w	r1, [r4]
 8015f86:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8015f8a:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8015f8e:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8015f92:	4299      	cmp	r1, r3
 8015f94:	d10b      	bne.n	8015fae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8015f96:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8015f9a:	4552      	cmp	r2, sl
 8015f9c:	d107      	bne.n	8015fae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8015f9e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8015fa2:	455a      	cmp	r2, fp
 8015fa4:	d103      	bne.n	8015fae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8015fa6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8015faa:	454a      	cmp	r2, r9
 8015fac:	d06d      	beq.n	801608a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8015fae:	f1bb 0f00 	cmp.w	fp, #0
 8015fb2:	dd65      	ble.n	8016080 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8015fb4:	f1b9 0f00 	cmp.w	r9, #0
 8015fb8:	dd62      	ble.n	8016080 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8015fba:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8015fbe:	fa1f f08a 	uxth.w	r0, sl
 8015fc2:	4552      	cmp	r2, sl
 8015fc4:	9000      	str	r0, [sp, #0]
 8015fc6:	da12      	bge.n	8015fee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8015fc8:	9301      	str	r3, [sp, #4]
 8015fca:	9b00      	ldr	r3, [sp, #0]
 8015fcc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8015fd0:	f8ad 2012 	strh.w	r2, [sp, #18]
 8015fd4:	1a9a      	subs	r2, r3, r2
 8015fd6:	f8ad 1010 	strh.w	r1, [sp, #16]
 8015fda:	f8ad 0014 	strh.w	r0, [sp, #20]
 8015fde:	f8ad 2016 	strh.w	r2, [sp, #22]
 8015fe2:	69ea      	ldr	r2, [r5, #28]
 8015fe4:	4631      	mov	r1, r6
 8015fe6:	4640      	mov	r0, r8
 8015fe8:	f7ff ff7a 	bl	8015ee0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8015fec:	9b01      	ldr	r3, [sp, #4]
 8015fee:	f9b4 2000 	ldrsh.w	r2, [r4]
 8015ff2:	429a      	cmp	r2, r3
 8015ff4:	b29f      	uxth	r7, r3
 8015ff6:	da0d      	bge.n	8016014 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8015ff8:	f8ad 2010 	strh.w	r2, [sp, #16]
 8015ffc:	1aba      	subs	r2, r7, r2
 8015ffe:	f8ad a012 	strh.w	sl, [sp, #18]
 8016002:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016006:	f8ad 9016 	strh.w	r9, [sp, #22]
 801600a:	69ea      	ldr	r2, [r5, #28]
 801600c:	4631      	mov	r1, r6
 801600e:	4640      	mov	r0, r8
 8016010:	f7ff ff66 	bl	8015ee0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016014:	8822      	ldrh	r2, [r4, #0]
 8016016:	88a3      	ldrh	r3, [r4, #4]
 8016018:	445f      	add	r7, fp
 801601a:	4413      	add	r3, r2
 801601c:	b29b      	uxth	r3, r3
 801601e:	b2bf      	uxth	r7, r7
 8016020:	b23a      	sxth	r2, r7
 8016022:	b219      	sxth	r1, r3
 8016024:	4291      	cmp	r1, r2
 8016026:	dd0d      	ble.n	8016044 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8016028:	1bdb      	subs	r3, r3, r7
 801602a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801602e:	f8ad a012 	strh.w	sl, [sp, #18]
 8016032:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016036:	f8ad 9016 	strh.w	r9, [sp, #22]
 801603a:	69ea      	ldr	r2, [r5, #28]
 801603c:	4631      	mov	r1, r6
 801603e:	4640      	mov	r0, r8
 8016040:	f7ff ff4e 	bl	8015ee0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016044:	88e2      	ldrh	r2, [r4, #6]
 8016046:	8863      	ldrh	r3, [r4, #2]
 8016048:	4413      	add	r3, r2
 801604a:	9a00      	ldr	r2, [sp, #0]
 801604c:	444a      	add	r2, r9
 801604e:	b29b      	uxth	r3, r3
 8016050:	fa1f f982 	uxth.w	r9, r2
 8016054:	fa0f f289 	sxth.w	r2, r9
 8016058:	b219      	sxth	r1, r3
 801605a:	428a      	cmp	r2, r1
 801605c:	da15      	bge.n	801608a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801605e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016062:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016066:	f8ad 1014 	strh.w	r1, [sp, #20]
 801606a:	eba3 0309 	sub.w	r3, r3, r9
 801606e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8016072:	f8ad 2012 	strh.w	r2, [sp, #18]
 8016076:	f8ad 3016 	strh.w	r3, [sp, #22]
 801607a:	69ea      	ldr	r2, [r5, #28]
 801607c:	4631      	mov	r1, r6
 801607e:	e001      	b.n	8016084 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8016080:	69ea      	ldr	r2, [r5, #28]
 8016082:	4621      	mov	r1, r4
 8016084:	4640      	mov	r0, r8
 8016086:	f7ff ff2b 	bl	8015ee0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801608a:	4628      	mov	r0, r5
 801608c:	f7ff fe96 	bl	8015dbc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8016090:	6861      	ldr	r1, [r4, #4]
 8016092:	4602      	mov	r2, r0
 8016094:	6820      	ldr	r0, [r4, #0]
 8016096:	4633      	mov	r3, r6
 8016098:	c303      	stmia	r3!, {r0, r1}
 801609a:	4611      	mov	r1, r2
 801609c:	4630      	mov	r0, r6
 801609e:	f7fb fbab 	bl	80117f8 <_ZN8touchgfx4RectaNERKS0_>
 80160a2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	f77f af33 	ble.w	8015f12 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80160ac:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	f77f af2e 	ble.w	8015f12 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80160b6:	4628      	mov	r0, r5
 80160b8:	f7ff fe9c 	bl	8015df4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80160bc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80160c0:	1a18      	subs	r0, r3, r0
 80160c2:	f8ad 0010 	strh.w	r0, [sp, #16]
 80160c6:	4628      	mov	r0, r5
 80160c8:	f7ff fea8 	bl	8015e1c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80160cc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80160d0:	1a18      	subs	r0, r3, r0
 80160d2:	f8ad 0012 	strh.w	r0, [sp, #18]
 80160d6:	682b      	ldr	r3, [r5, #0]
 80160d8:	4631      	mov	r1, r6
 80160da:	689b      	ldr	r3, [r3, #8]
 80160dc:	4628      	mov	r0, r5
 80160de:	4798      	blx	r3
 80160e0:	e717      	b.n	8015f12 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080160e2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80160e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80160e4:	aa02      	add	r2, sp, #8
 80160e6:	2300      	movs	r3, #0
 80160e8:	f842 3d04 	str.w	r3, [r2, #-4]!
 80160ec:	4604      	mov	r4, r0
 80160ee:	3004      	adds	r0, #4
 80160f0:	460d      	mov	r5, r1
 80160f2:	f7fb fc59 	bl	80119a8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80160f6:	9a01      	ldr	r2, [sp, #4]
 80160f8:	b11a      	cbz	r2, 8016102 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 80160fa:	4629      	mov	r1, r5
 80160fc:	4620      	mov	r0, r4
 80160fe:	f7ff feef 	bl	8015ee0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016102:	b003      	add	sp, #12
 8016104:	bd30      	pop	{r4, r5, pc}

08016106 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8016106:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016108:	4602      	mov	r2, r0
 801610a:	4604      	mov	r4, r0
 801610c:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8016110:	460d      	mov	r5, r1
 8016112:	6851      	ldr	r1, [r2, #4]
 8016114:	466b      	mov	r3, sp
 8016116:	c303      	stmia	r3!, {r0, r1}
 8016118:	4629      	mov	r1, r5
 801611a:	4668      	mov	r0, sp
 801611c:	f7fb fb6c 	bl	80117f8 <_ZN8touchgfx4RectaNERKS0_>
 8016120:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8016124:	4669      	mov	r1, sp
 8016126:	b123      	cbz	r3, 8016132 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 8016128:	4620      	mov	r0, r4
 801612a:	f7ff ffda 	bl	80160e2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801612e:	b003      	add	sp, #12
 8016130:	bd30      	pop	{r4, r5, pc}
 8016132:	1d20      	adds	r0, r4, #4
 8016134:	f7fb fbff 	bl	8011936 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8016138:	e7f9      	b.n	801612e <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801613a <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801613a:	680a      	ldr	r2, [r1, #0]
 801613c:	460b      	mov	r3, r1
 801613e:	6992      	ldr	r2, [r2, #24]
 8016140:	1d01      	adds	r1, r0, #4
 8016142:	4618      	mov	r0, r3
 8016144:	4710      	bx	r2

08016146 <_ZN8touchgfx12TextProviderC1Ev>:
 8016146:	b510      	push	{r4, lr}
 8016148:	2300      	movs	r3, #0
 801614a:	2201      	movs	r2, #1
 801614c:	4604      	mov	r4, r0
 801614e:	e9c0 3300 	strd	r3, r3, [r0]
 8016152:	60c3      	str	r3, [r0, #12]
 8016154:	7403      	strb	r3, [r0, #16]
 8016156:	82c3      	strh	r3, [r0, #22]
 8016158:	8303      	strh	r3, [r0, #24]
 801615a:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801615c:	8603      	strh	r3, [r0, #48]	; 0x30
 801615e:	86c3      	strh	r3, [r0, #54]	; 0x36
 8016160:	8703      	strh	r3, [r0, #56]	; 0x38
 8016162:	63c3      	str	r3, [r0, #60]	; 0x3c
 8016164:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8016168:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801616c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8016170:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 8016174:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 8016178:	f7f8 fbd4 	bl	800e924 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801617c:	4620      	mov	r0, r4
 801617e:	bd10      	pop	{r4, pc}

08016180 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8016180:	b530      	push	{r4, r5, lr}
 8016182:	2500      	movs	r5, #0
 8016184:	2401      	movs	r4, #1
 8016186:	6843      	ldr	r3, [r0, #4]
 8016188:	b913      	cbnz	r3, 8016190 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801618a:	6803      	ldr	r3, [r0, #0]
 801618c:	b1f3      	cbz	r3, 80161cc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801618e:	6043      	str	r3, [r0, #4]
 8016190:	7c03      	ldrb	r3, [r0, #16]
 8016192:	b143      	cbz	r3, 80161a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8016194:	68c3      	ldr	r3, [r0, #12]
 8016196:	b12b      	cbz	r3, 80161a4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8016198:	881a      	ldrh	r2, [r3, #0]
 801619a:	b11a      	cbz	r2, 80161a4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801619c:	1c9a      	adds	r2, r3, #2
 801619e:	60c2      	str	r2, [r0, #12]
 80161a0:	8818      	ldrh	r0, [r3, #0]
 80161a2:	bd30      	pop	{r4, r5, pc}
 80161a4:	7405      	strb	r5, [r0, #16]
 80161a6:	6843      	ldr	r3, [r0, #4]
 80161a8:	8819      	ldrh	r1, [r3, #0]
 80161aa:	b179      	cbz	r1, 80161cc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 80161ac:	1c9a      	adds	r2, r3, #2
 80161ae:	2902      	cmp	r1, #2
 80161b0:	6042      	str	r2, [r0, #4]
 80161b2:	d1f5      	bne.n	80161a0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80161b4:	6883      	ldr	r3, [r0, #8]
 80161b6:	1d1a      	adds	r2, r3, #4
 80161b8:	6082      	str	r2, [r0, #8]
 80161ba:	681b      	ldr	r3, [r3, #0]
 80161bc:	60c3      	str	r3, [r0, #12]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d0e1      	beq.n	8016186 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80161c2:	881b      	ldrh	r3, [r3, #0]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d0de      	beq.n	8016186 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80161c8:	7404      	strb	r4, [r0, #16]
 80161ca:	e7dc      	b.n	8016186 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80161cc:	2000      	movs	r0, #0
 80161ce:	e7e8      	b.n	80161a2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080161d0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 80161d0:	b410      	push	{r4}
 80161d2:	63c3      	str	r3, [r0, #60]	; 0x3c
 80161d4:	2300      	movs	r3, #0
 80161d6:	6082      	str	r2, [r0, #8]
 80161d8:	6001      	str	r1, [r0, #0]
 80161da:	6043      	str	r3, [r0, #4]
 80161dc:	60c3      	str	r3, [r0, #12]
 80161de:	7403      	strb	r3, [r0, #16]
 80161e0:	8603      	strh	r3, [r0, #48]	; 0x30
 80161e2:	8303      	strh	r3, [r0, #24]
 80161e4:	8703      	strh	r3, [r0, #56]	; 0x38
 80161e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80161ea:	f7f8 bb9b 	b.w	800e924 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080161ee <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80161ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161f0:	4605      	mov	r5, r0
 80161f2:	4608      	mov	r0, r1
 80161f4:	b1e9      	cbz	r1, 8016232 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 80161f6:	f105 0440 	add.w	r4, r5, #64	; 0x40
 80161fa:	460b      	mov	r3, r1
 80161fc:	f101 0708 	add.w	r7, r1, #8
 8016200:	4622      	mov	r2, r4
 8016202:	6818      	ldr	r0, [r3, #0]
 8016204:	6859      	ldr	r1, [r3, #4]
 8016206:	4626      	mov	r6, r4
 8016208:	c603      	stmia	r6!, {r0, r1}
 801620a:	3308      	adds	r3, #8
 801620c:	42bb      	cmp	r3, r7
 801620e:	4634      	mov	r4, r6
 8016210:	d1f7      	bne.n	8016202 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8016212:	6818      	ldr	r0, [r3, #0]
 8016214:	6030      	str	r0, [r6, #0]
 8016216:	889b      	ldrh	r3, [r3, #4]
 8016218:	80b3      	strh	r3, [r6, #4]
 801621a:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801621e:	015b      	lsls	r3, r3, #5
 8016220:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8016224:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 8016228:	430b      	orrs	r3, r1
 801622a:	425b      	negs	r3, r3
 801622c:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 8016230:	4610      	mov	r0, r2
 8016232:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016234 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8016234:	b538      	push	{r3, r4, r5, lr}
 8016236:	460c      	mov	r4, r1
 8016238:	6811      	ldr	r1, [r2, #0]
 801623a:	4610      	mov	r0, r2
 801623c:	68cd      	ldr	r5, [r1, #12]
 801623e:	4619      	mov	r1, r3
 8016240:	47a8      	blx	r5
 8016242:	2800      	cmp	r0, #0
 8016244:	bf08      	it	eq
 8016246:	4620      	moveq	r0, r4
 8016248:	bd38      	pop	{r3, r4, r5, pc}
	...

0801624c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801624c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801624e:	4604      	mov	r4, r0
 8016250:	4615      	mov	r5, r2
 8016252:	4608      	mov	r0, r1
 8016254:	b93a      	cbnz	r2, 8016266 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8016256:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801625a:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801625e:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8016262:	4628      	mov	r0, r5
 8016264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016266:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801626a:	8893      	ldrh	r3, [r2, #4]
 801626c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8016270:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8016274:	79ee      	ldrb	r6, [r5, #7]
 8016276:	4316      	orrs	r6, r2
 8016278:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801627c:	189a      	adds	r2, r3, r2
 801627e:	b291      	uxth	r1, r2
 8016280:	291d      	cmp	r1, #29
 8016282:	b2b7      	uxth	r7, r6
 8016284:	f200 8083 	bhi.w	801638e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 8016288:	2201      	movs	r2, #1
 801628a:	408a      	lsls	r2, r1
 801628c:	4978      	ldr	r1, [pc, #480]	; (8016470 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801628e:	420a      	tst	r2, r1
 8016290:	ea4f 06e6 	mov.w	r6, r6, asr #3
 8016294:	d12d      	bne.n	80162f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8016296:	f412 7f60 	tst.w	r2, #896	; 0x380
 801629a:	d078      	beq.n	801638e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 801629c:	f104 0240 	add.w	r2, r4, #64	; 0x40
 80162a0:	462b      	mov	r3, r5
 80162a2:	f105 0e08 	add.w	lr, r5, #8
 80162a6:	4615      	mov	r5, r2
 80162a8:	6818      	ldr	r0, [r3, #0]
 80162aa:	6859      	ldr	r1, [r3, #4]
 80162ac:	4694      	mov	ip, r2
 80162ae:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80162b2:	3308      	adds	r3, #8
 80162b4:	4573      	cmp	r3, lr
 80162b6:	4662      	mov	r2, ip
 80162b8:	d1f6      	bne.n	80162a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5c>
 80162ba:	6818      	ldr	r0, [r3, #0]
 80162bc:	f8cc 0000 	str.w	r0, [ip]
 80162c0:	889b      	ldrh	r3, [r3, #4]
 80162c2:	f8ac 3004 	strh.w	r3, [ip, #4]
 80162c6:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 80162ca:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 80162ce:	b2b3      	uxth	r3, r6
 80162d0:	1aca      	subs	r2, r1, r3
 80162d2:	b292      	uxth	r2, r2
 80162d4:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 80162d8:	10d2      	asrs	r2, r2, #3
 80162da:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80162de:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80162e2:	4302      	orrs	r2, r0
 80162e4:	1bcf      	subs	r7, r1, r7
 80162e6:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 80162ea:	1afb      	subs	r3, r7, r3
 80162ec:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 80162f0:	e7b7      	b.n	8016262 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80162f2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80162f4:	b92b      	cbnz	r3, 8016302 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 80162f6:	4b5f      	ldr	r3, [pc, #380]	; (8016474 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 80162f8:	4a5f      	ldr	r2, [pc, #380]	; (8016478 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 80162fa:	4860      	ldr	r0, [pc, #384]	; (801647c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 80162fc:	21c0      	movs	r1, #192	; 0xc0
 80162fe:	f00d fa21 	bl	8023744 <__assert_func>
 8016302:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8016304:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016308:	8b59      	ldrh	r1, [r3, #26]
 801630a:	f640 6333 	movw	r3, #3635	; 0xe33
 801630e:	4299      	cmp	r1, r3
 8016310:	d110      	bne.n	8016334 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 8016312:	6803      	ldr	r3, [r0, #0]
 8016314:	68db      	ldr	r3, [r3, #12]
 8016316:	4798      	blx	r3
 8016318:	7b41      	ldrb	r1, [r0, #13]
 801631a:	00cb      	lsls	r3, r1, #3
 801631c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016320:	7a03      	ldrb	r3, [r0, #8]
 8016322:	0648      	lsls	r0, r1, #25
 8016324:	ea43 0302 	orr.w	r3, r3, r2
 8016328:	bf44      	itt	mi
 801632a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801632e:	b21b      	sxthmi	r3, r3
 8016330:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8016334:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 8016338:	443b      	add	r3, r7
 801633a:	4433      	add	r3, r6
 801633c:	b29b      	uxth	r3, r3
 801633e:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8016342:	462a      	mov	r2, r5
 8016344:	f105 0c08 	add.w	ip, r5, #8
 8016348:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801634c:	4635      	mov	r5, r6
 801634e:	6810      	ldr	r0, [r2, #0]
 8016350:	6851      	ldr	r1, [r2, #4]
 8016352:	4637      	mov	r7, r6
 8016354:	c703      	stmia	r7!, {r0, r1}
 8016356:	3208      	adds	r2, #8
 8016358:	4562      	cmp	r2, ip
 801635a:	463e      	mov	r6, r7
 801635c:	d1f7      	bne.n	801634e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801635e:	6810      	ldr	r0, [r2, #0]
 8016360:	6038      	str	r0, [r7, #0]
 8016362:	8892      	ldrh	r2, [r2, #4]
 8016364:	80ba      	strh	r2, [r7, #4]
 8016366:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801636a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801636e:	10db      	asrs	r3, r3, #3
 8016370:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8016374:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016378:	4313      	orrs	r3, r2
 801637a:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801637e:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8016382:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8016386:	1a9b      	subs	r3, r3, r2
 8016388:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801638c:	e769      	b.n	8016262 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801638e:	f023 0204 	bic.w	r2, r3, #4
 8016392:	f640 611b 	movw	r1, #3611	; 0xe1b
 8016396:	428a      	cmp	r2, r1
 8016398:	d003      	beq.n	80163a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x156>
 801639a:	f640 621d 	movw	r2, #3613	; 0xe1d
 801639e:	4293      	cmp	r3, r2
 80163a0:	d120      	bne.n	80163e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x198>
 80163a2:	3b01      	subs	r3, #1
 80163a4:	4602      	mov	r2, r0
 80163a6:	b29b      	uxth	r3, r3
 80163a8:	4629      	mov	r1, r5
 80163aa:	4620      	mov	r0, r4
 80163ac:	f7ff ff42 	bl	8016234 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80163b0:	7b41      	ldrb	r1, [r0, #13]
 80163b2:	00cb      	lsls	r3, r1, #3
 80163b4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80163b8:	7a03      	ldrb	r3, [r0, #8]
 80163ba:	0649      	lsls	r1, r1, #25
 80163bc:	ea43 0302 	orr.w	r3, r3, r2
 80163c0:	bf44      	itt	mi
 80163c2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80163c6:	b21b      	sxthmi	r3, r3
 80163c8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 80163cc:	7b6b      	ldrb	r3, [r5, #13]
 80163ce:	7aaa      	ldrb	r2, [r5, #10]
 80163d0:	005b      	lsls	r3, r3, #1
 80163d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80163d6:	4313      	orrs	r3, r2
 80163d8:	115a      	asrs	r2, r3, #5
 80163da:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80163de:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80163e2:	e036      	b.n	8016452 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 80163e4:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80163e8:	f402 7180 	and.w	r1, r2, #256	; 0x100
 80163ec:	7a2a      	ldrb	r2, [r5, #8]
 80163ee:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80163f2:	ea42 0201 	orr.w	r2, r2, r1
 80163f6:	bf1c      	itt	ne
 80163f8:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 80163fc:	b212      	sxthne	r2, r2
 80163fe:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 8016402:	f640 6109 	movw	r1, #3593	; 0xe09
 8016406:	f023 0210 	bic.w	r2, r3, #16
 801640a:	428a      	cmp	r2, r1
 801640c:	d003      	beq.n	8016416 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ca>
 801640e:	f640 6213 	movw	r2, #3603	; 0xe13
 8016412:	4293      	cmp	r3, r2
 8016414:	d12a      	bne.n	801646c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 8016416:	7b6e      	ldrb	r6, [r5, #13]
 8016418:	0076      	lsls	r6, r6, #1
 801641a:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801641e:	7aae      	ldrb	r6, [r5, #10]
 8016420:	4316      	orrs	r6, r2
 8016422:	f640 6213 	movw	r2, #3603	; 0xe13
 8016426:	4293      	cmp	r3, r2
 8016428:	bf18      	it	ne
 801642a:	f103 33ff 	addne.w	r3, r3, #4294967295
 801642e:	4602      	mov	r2, r0
 8016430:	bf14      	ite	ne
 8016432:	b29b      	uxthne	r3, r3
 8016434:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8016438:	4629      	mov	r1, r5
 801643a:	4620      	mov	r0, r4
 801643c:	f7ff fefa 	bl	8016234 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8016440:	7b43      	ldrb	r3, [r0, #13]
 8016442:	7a82      	ldrb	r2, [r0, #10]
 8016444:	005b      	lsls	r3, r3, #1
 8016446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801644a:	4313      	orrs	r3, r2
 801644c:	1af6      	subs	r6, r6, r3
 801644e:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 8016452:	7b69      	ldrb	r1, [r5, #13]
 8016454:	00cb      	lsls	r3, r1, #3
 8016456:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801645a:	7a2b      	ldrb	r3, [r5, #8]
 801645c:	4313      	orrs	r3, r2
 801645e:	064a      	lsls	r2, r1, #25
 8016460:	bf44      	itt	mi
 8016462:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016466:	b21b      	sxthmi	r3, r3
 8016468:	1bdb      	subs	r3, r3, r7
 801646a:	e73f      	b.n	80162ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801646c:	2300      	movs	r3, #0
 801646e:	e7b6      	b.n	80163de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x192>
 8016470:	3fc00079 	.word	0x3fc00079
 8016474:	08027620 	.word	0x08027620
 8016478:	08027892 	.word	0x08027892
 801647c:	08027629 	.word	0x08027629

08016480 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8016480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016484:	4604      	mov	r4, r0
 8016486:	b942      	cbnz	r2, 801649a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8016488:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801648c:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8016490:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8016494:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8016498:	e046      	b.n	8016528 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801649a:	7b51      	ldrb	r1, [r2, #13]
 801649c:	8893      	ldrh	r3, [r2, #4]
 801649e:	010f      	lsls	r7, r1, #4
 80164a0:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80164a4:	79d7      	ldrb	r7, [r2, #7]
 80164a6:	4307      	orrs	r7, r0
 80164a8:	2f04      	cmp	r7, #4
 80164aa:	b2bd      	uxth	r5, r7
 80164ac:	bfcc      	ite	gt
 80164ae:	08bf      	lsrgt	r7, r7, #2
 80164b0:	2701      	movle	r7, #1
 80164b2:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80164b6:	f200 80ab 	bhi.w	8016610 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 80164ba:	f240 60e7 	movw	r0, #1767	; 0x6e7
 80164be:	4283      	cmp	r3, r0
 80164c0:	d216      	bcs.n	80164f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80164c2:	f240 605b 	movw	r0, #1627	; 0x65b
 80164c6:	4283      	cmp	r3, r0
 80164c8:	d859      	bhi.n	801657e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 80164ca:	f240 6057 	movw	r0, #1623	; 0x657
 80164ce:	4283      	cmp	r3, r0
 80164d0:	d20e      	bcs.n	80164f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80164d2:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80164d6:	d24a      	bcs.n	801656e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 80164d8:	f240 604e 	movw	r0, #1614	; 0x64e
 80164dc:	4283      	cmp	r3, r0
 80164de:	d207      	bcs.n	80164f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80164e0:	f240 601a 	movw	r0, #1562	; 0x61a
 80164e4:	4283      	cmp	r3, r0
 80164e6:	d02a      	beq.n	801653e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80164e8:	d821      	bhi.n	801652e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 80164ea:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 80164ee:	d35b      	bcc.n	80165a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80164f0:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 80164f4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80164f8:	f040 80d0 	bne.w	801669c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 80164fc:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 8016500:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8016504:	f040 80ca 	bne.w	801669c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8016508:	00cb      	lsls	r3, r1, #3
 801650a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801650e:	7a13      	ldrb	r3, [r2, #8]
 8016510:	0649      	lsls	r1, r1, #25
 8016512:	ea43 0300 	orr.w	r3, r3, r0
 8016516:	bf44      	itt	mi
 8016518:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801651c:	b21b      	sxthmi	r3, r3
 801651e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8016522:	1b5d      	subs	r5, r3, r5
 8016524:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8016528:	4610      	mov	r0, r2
 801652a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801652e:	f240 604b 	movw	r0, #1611	; 0x64b
 8016532:	4283      	cmp	r3, r0
 8016534:	d338      	bcc.n	80165a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8016536:	f240 604c 	movw	r0, #1612	; 0x64c
 801653a:	4283      	cmp	r3, r0
 801653c:	d9d8      	bls.n	80164f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801653e:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 8016542:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 8016546:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801654a:	f040 80f1 	bne.w	8016730 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 801654e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8016552:	f040 80ed 	bne.w	8016730 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 8016556:	00cb      	lsls	r3, r1, #3
 8016558:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801655c:	7a13      	ldrb	r3, [r2, #8]
 801655e:	064e      	lsls	r6, r1, #25
 8016560:	ea43 0300 	orr.w	r3, r3, r0
 8016564:	bf44      	itt	mi
 8016566:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801656a:	b21b      	sxthmi	r3, r3
 801656c:	e7d9      	b.n	8016522 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801656e:	f240 6054 	movw	r0, #1620	; 0x654
 8016572:	4283      	cmp	r3, r0
 8016574:	d8e3      	bhi.n	801653e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8016576:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801657a:	d9e0      	bls.n	801653e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801657c:	e7b8      	b.n	80164f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801657e:	f240 6074 	movw	r0, #1652	; 0x674
 8016582:	4283      	cmp	r3, r0
 8016584:	d0b4      	beq.n	80164f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016586:	d82d      	bhi.n	80165e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 8016588:	f240 605e 	movw	r0, #1630	; 0x65e
 801658c:	4283      	cmp	r3, r0
 801658e:	d804      	bhi.n	801659a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 8016590:	f240 605d 	movw	r0, #1629	; 0x65d
 8016594:	4283      	cmp	r3, r0
 8016596:	d3d2      	bcc.n	801653e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8016598:	e7aa      	b.n	80164f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801659a:	f240 605f 	movw	r0, #1631	; 0x65f
 801659e:	4283      	cmp	r3, r0
 80165a0:	d0cd      	beq.n	801653e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80165a2:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80165a6:	d0a3      	beq.n	80164f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80165a8:	00cb      	lsls	r3, r1, #3
 80165aa:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80165ae:	7a13      	ldrb	r3, [r2, #8]
 80165b0:	0649      	lsls	r1, r1, #25
 80165b2:	ea43 0300 	orr.w	r3, r3, r0
 80165b6:	bf44      	itt	mi
 80165b8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80165bc:	b21b      	sxthmi	r3, r3
 80165be:	1b5d      	subs	r5, r3, r5
 80165c0:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 80165c4:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 80165c8:	7b53      	ldrb	r3, [r2, #13]
 80165ca:	015b      	lsls	r3, r3, #5
 80165cc:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80165d0:	7993      	ldrb	r3, [r2, #6]
 80165d2:	430b      	orrs	r3, r1
 80165d4:	005b      	lsls	r3, r3, #1
 80165d6:	2105      	movs	r1, #5
 80165d8:	fb93 f3f1 	sdiv	r3, r3, r1
 80165dc:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80165e0:	440b      	add	r3, r1
 80165e2:	e757      	b.n	8016494 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80165e4:	f240 60e2 	movw	r0, #1762	; 0x6e2
 80165e8:	4283      	cmp	r3, r0
 80165ea:	d809      	bhi.n	8016600 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 80165ec:	f240 60df 	movw	r0, #1759	; 0x6df
 80165f0:	4283      	cmp	r3, r0
 80165f2:	f4bf af7d 	bcs.w	80164f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80165f6:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 80165fa:	2b05      	cmp	r3, #5
 80165fc:	d8d4      	bhi.n	80165a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80165fe:	e777      	b.n	80164f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016600:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8016604:	4283      	cmp	r3, r0
 8016606:	d09a      	beq.n	801653e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8016608:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801660c:	4283      	cmp	r3, r0
 801660e:	e7ca      	b.n	80165a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8016610:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8016614:	d22b      	bcs.n	801666e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 8016616:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801661a:	4283      	cmp	r3, r0
 801661c:	d28f      	bcs.n	801653e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801661e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8016622:	4283      	cmp	r3, r0
 8016624:	d816      	bhi.n	8016654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 8016626:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801662a:	4283      	cmp	r3, r0
 801662c:	f4bf af60 	bcs.w	80164f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016630:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8016634:	4283      	cmp	r3, r0
 8016636:	d80a      	bhi.n	801664e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 8016638:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801663c:	4283      	cmp	r3, r0
 801663e:	f4bf af57 	bcs.w	80164f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016642:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8016646:	4283      	cmp	r3, r0
 8016648:	f43f af79 	beq.w	801653e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801664c:	e7ac      	b.n	80165a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801664e:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8016652:	e7f8      	b.n	8016646 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8016654:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8016658:	4283      	cmp	r3, r0
 801665a:	d802      	bhi.n	8016662 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801665c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8016660:	e798      	b.n	8016594 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 8016662:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8016666:	4283      	cmp	r3, r0
 8016668:	f47f af42 	bne.w	80164f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801666c:	e767      	b.n	801653e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801666e:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8016672:	4283      	cmp	r3, r0
 8016674:	f43f af63 	beq.w	801653e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8016678:	d802      	bhi.n	8016680 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801667a:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801667e:	e7f2      	b.n	8016666 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 8016680:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8016684:	4283      	cmp	r3, r0
 8016686:	d805      	bhi.n	8016694 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 8016688:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801668c:	4283      	cmp	r3, r0
 801668e:	f4ff af2f 	bcc.w	80164f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8016692:	e754      	b.n	801653e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8016694:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8016698:	4283      	cmp	r3, r0
 801669a:	e7af      	b.n	80165fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801669c:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 80166a0:	4617      	mov	r7, r2
 80166a2:	f102 0808 	add.w	r8, r2, #8
 80166a6:	4666      	mov	r6, ip
 80166a8:	6838      	ldr	r0, [r7, #0]
 80166aa:	6879      	ldr	r1, [r7, #4]
 80166ac:	46e6      	mov	lr, ip
 80166ae:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80166b2:	3708      	adds	r7, #8
 80166b4:	4547      	cmp	r7, r8
 80166b6:	46f4      	mov	ip, lr
 80166b8:	d1f6      	bne.n	80166a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 80166ba:	6838      	ldr	r0, [r7, #0]
 80166bc:	f8ce 0000 	str.w	r0, [lr]
 80166c0:	88b9      	ldrh	r1, [r7, #4]
 80166c2:	f8ae 1004 	strh.w	r1, [lr, #4]
 80166c6:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 80166ca:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80166ce:	d009      	beq.n	80166e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x264>
 80166d0:	7b51      	ldrb	r1, [r2, #13]
 80166d2:	7992      	ldrb	r2, [r2, #6]
 80166d4:	0149      	lsls	r1, r1, #5
 80166d6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80166da:	4311      	orrs	r1, r2
 80166dc:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80166e0:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 80166e4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80166e8:	d00d      	beq.n	8016706 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x286>
 80166ea:	442b      	add	r3, r5
 80166ec:	b29b      	uxth	r3, r3
 80166ee:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 80166f2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 80166f6:	10db      	asrs	r3, r3, #3
 80166f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80166fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016700:	4313      	orrs	r3, r2
 8016702:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8016706:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801670a:	00cb      	lsls	r3, r1, #3
 801670c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016710:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8016714:	064f      	lsls	r7, r1, #25
 8016716:	ea43 0302 	orr.w	r3, r3, r2
 801671a:	bf44      	itt	mi
 801671c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016720:	b21b      	sxthmi	r3, r3
 8016722:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8016726:	1b5d      	subs	r5, r3, r5
 8016728:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801672c:	4632      	mov	r2, r6
 801672e:	e6fb      	b.n	8016528 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8016730:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8016734:	4694      	mov	ip, r2
 8016736:	f102 0908 	add.w	r9, r2, #8
 801673a:	4676      	mov	r6, lr
 801673c:	f8dc 0000 	ldr.w	r0, [ip]
 8016740:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8016744:	46f0      	mov	r8, lr
 8016746:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801674a:	f10c 0c08 	add.w	ip, ip, #8
 801674e:	45cc      	cmp	ip, r9
 8016750:	46c6      	mov	lr, r8
 8016752:	d1f3      	bne.n	801673c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2bc>
 8016754:	f8dc 0000 	ldr.w	r0, [ip]
 8016758:	f8c8 0000 	str.w	r0, [r8]
 801675c:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8016760:	f8a8 1004 	strh.w	r1, [r8, #4]
 8016764:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 8016768:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801676c:	d009      	beq.n	8016782 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x302>
 801676e:	7b51      	ldrb	r1, [r2, #13]
 8016770:	7992      	ldrb	r2, [r2, #6]
 8016772:	0149      	lsls	r1, r1, #5
 8016774:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8016778:	4311      	orrs	r1, r2
 801677a:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801677e:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 8016782:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8016786:	d00d      	beq.n	80167a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8016788:	1bdb      	subs	r3, r3, r7
 801678a:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801678e:	b29b      	uxth	r3, r3
 8016790:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8016794:	10db      	asrs	r3, r3, #3
 8016796:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801679a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801679e:	4313      	orrs	r3, r2
 80167a0:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 80167a4:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 80167a8:	00cb      	lsls	r3, r1, #3
 80167aa:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80167ae:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80167b2:	0648      	lsls	r0, r1, #25
 80167b4:	ea43 0302 	orr.w	r3, r3, r2
 80167b8:	bf44      	itt	mi
 80167ba:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80167be:	b21b      	sxthmi	r3, r3
 80167c0:	e7b1      	b.n	8016726 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a6>
	...

080167c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80167c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167c8:	461e      	mov	r6, r3
 80167ca:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80167cc:	4604      	mov	r4, r0
 80167ce:	4617      	mov	r7, r2
 80167d0:	b92b      	cbnz	r3, 80167de <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 80167d2:	4b25      	ldr	r3, [pc, #148]	; (8016868 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 80167d4:	4a25      	ldr	r2, [pc, #148]	; (801686c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 80167d6:	4826      	ldr	r0, [pc, #152]	; (8016870 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 80167d8:	21c0      	movs	r1, #192	; 0xc0
 80167da:	f00c ffb3 	bl	8023744 <__assert_func>
 80167de:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80167e0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80167e4:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 80167e8:	f7f7 fff6 	bl	800e7d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80167ec:	4605      	mov	r5, r0
 80167ee:	b918      	cbnz	r0, 80167f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 80167f0:	6030      	str	r0, [r6, #0]
 80167f2:	4628      	mov	r0, r5
 80167f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167f8:	683b      	ldr	r3, [r7, #0]
 80167fa:	4601      	mov	r1, r0
 80167fc:	68db      	ldr	r3, [r3, #12]
 80167fe:	4638      	mov	r0, r7
 8016800:	4798      	blx	r3
 8016802:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8016806:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801680a:	4602      	mov	r2, r0
 801680c:	6030      	str	r0, [r6, #0]
 801680e:	d213      	bcs.n	8016838 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 8016810:	4643      	mov	r3, r8
 8016812:	4639      	mov	r1, r7
 8016814:	4620      	mov	r0, r4
 8016816:	f7ff fe33 	bl	8016480 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801681a:	6030      	str	r0, [r6, #0]
 801681c:	6833      	ldr	r3, [r6, #0]
 801681e:	b143      	cbz	r3, 8016832 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 8016820:	7b5a      	ldrb	r2, [r3, #13]
 8016822:	7a9b      	ldrb	r3, [r3, #10]
 8016824:	0052      	lsls	r2, r2, #1
 8016826:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801682a:	4313      	orrs	r3, r2
 801682c:	bf0c      	ite	eq
 801682e:	2301      	moveq	r3, #1
 8016830:	2300      	movne	r3, #0
 8016832:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8016836:	e7dc      	b.n	80167f2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 8016838:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801683c:	b29b      	uxth	r3, r3
 801683e:	2b7f      	cmp	r3, #127	; 0x7f
 8016840:	d804      	bhi.n	801684c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 8016842:	4639      	mov	r1, r7
 8016844:	4620      	mov	r0, r4
 8016846:	f7ff fd01 	bl	801624c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801684a:	e7e6      	b.n	801681a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801684c:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8016850:	2b00      	cmp	r3, #0
 8016852:	d0e3      	beq.n	801681c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8016854:	f640 1302 	movw	r3, #2306	; 0x902
 8016858:	429d      	cmp	r5, r3
 801685a:	d1df      	bne.n	801681c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801685c:	4601      	mov	r1, r0
 801685e:	4620      	mov	r0, r4
 8016860:	f7ff fcc5 	bl	80161ee <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8016864:	e7d9      	b.n	801681a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8016866:	bf00      	nop
 8016868:	08027620 	.word	0x08027620
 801686c:	08027892 	.word	0x08027892
 8016870:	08027629 	.word	0x08027629

08016874 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8016874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016878:	461e      	mov	r6, r3
 801687a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801687c:	4604      	mov	r4, r0
 801687e:	4617      	mov	r7, r2
 8016880:	b92b      	cbnz	r3, 801688e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 8016882:	4b26      	ldr	r3, [pc, #152]	; (801691c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 8016884:	4a26      	ldr	r2, [pc, #152]	; (8016920 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 8016886:	4827      	ldr	r0, [pc, #156]	; (8016924 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 8016888:	21c0      	movs	r1, #192	; 0xc0
 801688a:	f00c ff5b 	bl	8023744 <__assert_func>
 801688e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8016890:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8016894:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8016898:	f7f7 ff9e 	bl	800e7d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801689c:	4605      	mov	r5, r0
 801689e:	b918      	cbnz	r0, 80168a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 80168a0:	6030      	str	r0, [r6, #0]
 80168a2:	4628      	mov	r0, r5
 80168a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80168a8:	683b      	ldr	r3, [r7, #0]
 80168aa:	4601      	mov	r1, r0
 80168ac:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80168b0:	4638      	mov	r0, r7
 80168b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80168b6:	47c8      	blx	r9
 80168b8:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80168bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80168c0:	4602      	mov	r2, r0
 80168c2:	6030      	str	r0, [r6, #0]
 80168c4:	d213      	bcs.n	80168ee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 80168c6:	4643      	mov	r3, r8
 80168c8:	4639      	mov	r1, r7
 80168ca:	4620      	mov	r0, r4
 80168cc:	f7ff fdd8 	bl	8016480 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80168d0:	6030      	str	r0, [r6, #0]
 80168d2:	6833      	ldr	r3, [r6, #0]
 80168d4:	b143      	cbz	r3, 80168e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 80168d6:	7b5a      	ldrb	r2, [r3, #13]
 80168d8:	7a9b      	ldrb	r3, [r3, #10]
 80168da:	0052      	lsls	r2, r2, #1
 80168dc:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80168e0:	4313      	orrs	r3, r2
 80168e2:	bf0c      	ite	eq
 80168e4:	2301      	moveq	r3, #1
 80168e6:	2300      	movne	r3, #0
 80168e8:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 80168ec:	e7d9      	b.n	80168a2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 80168ee:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80168f2:	b29b      	uxth	r3, r3
 80168f4:	2b7f      	cmp	r3, #127	; 0x7f
 80168f6:	d804      	bhi.n	8016902 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 80168f8:	4639      	mov	r1, r7
 80168fa:	4620      	mov	r0, r4
 80168fc:	f7ff fca6 	bl	801624c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8016900:	e7e6      	b.n	80168d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8016902:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8016906:	2b00      	cmp	r3, #0
 8016908:	d0e3      	beq.n	80168d2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801690a:	f640 1302 	movw	r3, #2306	; 0x902
 801690e:	429d      	cmp	r5, r3
 8016910:	d1df      	bne.n	80168d2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8016912:	4601      	mov	r1, r0
 8016914:	4620      	mov	r0, r4
 8016916:	f7ff fc6a 	bl	80161ee <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801691a:	e7d9      	b.n	80168d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801691c:	08027620 	.word	0x08027620
 8016920:	08027892 	.word	0x08027892
 8016924:	08027629 	.word	0x08027629

08016928 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8016928:	b510      	push	{r4, lr}
 801692a:	4604      	mov	r4, r0
 801692c:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801692e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8016930:	b9d9      	cbnz	r1, 801696a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 8016932:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8016934:	2b0a      	cmp	r3, #10
 8016936:	d036      	beq.n	80169a6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 8016938:	4620      	mov	r0, r4
 801693a:	f7ff fc21 	bl	8016180 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801693e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8016940:	2b09      	cmp	r3, #9
 8016942:	d906      	bls.n	8016952 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 8016944:	4b18      	ldr	r3, [pc, #96]	; (80169a8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 8016946:	4a19      	ldr	r2, [pc, #100]	; (80169ac <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 8016948:	4819      	ldr	r0, [pc, #100]	; (80169b0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801694a:	f44f 7182 	mov.w	r1, #260	; 0x104
 801694e:	f00c fef9 	bl	8023744 <__assert_func>
 8016952:	1c5a      	adds	r2, r3, #1
 8016954:	8622      	strh	r2, [r4, #48]	; 0x30
 8016956:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8016958:	4413      	add	r3, r2
 801695a:	b29b      	uxth	r3, r3
 801695c:	2b09      	cmp	r3, #9
 801695e:	bf88      	it	hi
 8016960:	3b0a      	subhi	r3, #10
 8016962:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016966:	8358      	strh	r0, [r3, #26]
 8016968:	e7e3      	b.n	8016932 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 801696a:	2b0a      	cmp	r3, #10
 801696c:	d01b      	beq.n	80169a6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801696e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8016970:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8016974:	3901      	subs	r1, #1
 8016976:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 8016978:	8721      	strh	r1, [r4, #56]	; 0x38
 801697a:	1c51      	adds	r1, r2, #1
 801697c:	b289      	uxth	r1, r1
 801697e:	2901      	cmp	r1, #1
 8016980:	bf8a      	itet	hi
 8016982:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016986:	86e1      	strhls	r1, [r4, #54]	; 0x36
 8016988:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 801698a:	2b09      	cmp	r3, #9
 801698c:	d8da      	bhi.n	8016944 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801698e:	1c5a      	adds	r2, r3, #1
 8016990:	8622      	strh	r2, [r4, #48]	; 0x30
 8016992:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8016994:	4413      	add	r3, r2
 8016996:	b29b      	uxth	r3, r3
 8016998:	2b09      	cmp	r3, #9
 801699a:	bf88      	it	hi
 801699c:	3b0a      	subhi	r3, #10
 801699e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80169a2:	8358      	strh	r0, [r3, #26]
 80169a4:	e7c2      	b.n	801692c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80169a6:	bd10      	pop	{r4, pc}
 80169a8:	08027655 	.word	0x08027655
 80169ac:	080279e8 	.word	0x080279e8
 80169b0:	08027629 	.word	0x08027629

080169b4 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80169b4:	b538      	push	{r3, r4, r5, lr}
 80169b6:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 80169b8:	4604      	mov	r4, r0
 80169ba:	b92a      	cbnz	r2, 80169c8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 80169bc:	4b13      	ldr	r3, [pc, #76]	; (8016a0c <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 80169be:	4a14      	ldr	r2, [pc, #80]	; (8016a10 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 80169c0:	4814      	ldr	r0, [pc, #80]	; (8016a14 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 80169c2:	21d5      	movs	r1, #213	; 0xd5
 80169c4:	f00c febe 	bl	8023744 <__assert_func>
 80169c8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80169ca:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 80169ce:	3a01      	subs	r2, #1
 80169d0:	8b4d      	ldrh	r5, [r1, #26]
 80169d2:	8602      	strh	r2, [r0, #48]	; 0x30
 80169d4:	1c5a      	adds	r2, r3, #1
 80169d6:	b292      	uxth	r2, r2
 80169d8:	2a09      	cmp	r2, #9
 80169da:	bf86      	itte	hi
 80169dc:	3b09      	subhi	r3, #9
 80169de:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 80169e0:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 80169e2:	f7ff ffa1 	bl	8016928 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80169e6:	8b23      	ldrh	r3, [r4, #24]
 80169e8:	2b01      	cmp	r3, #1
 80169ea:	bf9c      	itt	ls
 80169ec:	3301      	addls	r3, #1
 80169ee:	8323      	strhls	r3, [r4, #24]
 80169f0:	8ae3      	ldrh	r3, [r4, #22]
 80169f2:	b90b      	cbnz	r3, 80169f8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 80169f4:	2302      	movs	r3, #2
 80169f6:	82e3      	strh	r3, [r4, #22]
 80169f8:	8ae3      	ldrh	r3, [r4, #22]
 80169fa:	3b01      	subs	r3, #1
 80169fc:	b29b      	uxth	r3, r3
 80169fe:	82e3      	strh	r3, [r4, #22]
 8016a00:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016a04:	4628      	mov	r0, r5
 8016a06:	8265      	strh	r5, [r4, #18]
 8016a08:	bd38      	pop	{r3, r4, r5, pc}
 8016a0a:	bf00      	nop
 8016a0c:	08027620 	.word	0x08027620
 8016a10:	0802793d 	.word	0x0802793d
 8016a14:	08027629 	.word	0x08027629

08016a18 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8016a18:	b538      	push	{r3, r4, r5, lr}
 8016a1a:	428a      	cmp	r2, r1
 8016a1c:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 8016a1e:	d90c      	bls.n	8016a3a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8016a20:	b92c      	cbnz	r4, 8016a2e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 8016a22:	4b1c      	ldr	r3, [pc, #112]	; (8016a94 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 8016a24:	4a1c      	ldr	r2, [pc, #112]	; (8016a98 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8016a26:	21e1      	movs	r1, #225	; 0xe1
 8016a28:	481c      	ldr	r0, [pc, #112]	; (8016a9c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 8016a2a:	f00c fe8b 	bl	8023744 <__assert_func>
 8016a2e:	3c01      	subs	r4, #1
 8016a30:	8604      	strh	r4, [r0, #48]	; 0x30
 8016a32:	4b1b      	ldr	r3, [pc, #108]	; (8016aa0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 8016a34:	4a1b      	ldr	r2, [pc, #108]	; (8016aa4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 8016a36:	21c5      	movs	r1, #197	; 0xc5
 8016a38:	e7f6      	b.n	8016a28 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8016a3a:	428c      	cmp	r4, r1
 8016a3c:	d203      	bcs.n	8016a46 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 8016a3e:	4b1a      	ldr	r3, [pc, #104]	; (8016aa8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 8016a40:	4a1a      	ldr	r2, [pc, #104]	; (8016aac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 8016a42:	21cb      	movs	r1, #203	; 0xcb
 8016a44:	e7f0      	b.n	8016a28 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8016a46:	1a64      	subs	r4, r4, r1
 8016a48:	8604      	strh	r4, [r0, #48]	; 0x30
 8016a4a:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8016a4c:	4421      	add	r1, r4
 8016a4e:	b289      	uxth	r1, r1
 8016a50:	2909      	cmp	r1, #9
 8016a52:	bf88      	it	hi
 8016a54:	390a      	subhi	r1, #10
 8016a56:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8016a58:	250a      	movs	r5, #10
 8016a5a:	b1ba      	cbz	r2, 8016a8c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8016a5c:	3a01      	subs	r2, #1
 8016a5e:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 8016a60:	b292      	uxth	r2, r2
 8016a62:	2909      	cmp	r1, #9
 8016a64:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8016a68:	d903      	bls.n	8016a72 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8016a6a:	4b11      	ldr	r3, [pc, #68]	; (8016ab0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8016a6c:	4a11      	ldr	r2, [pc, #68]	; (8016ab4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 8016a6e:	21e6      	movs	r1, #230	; 0xe6
 8016a70:	e7da      	b.n	8016a28 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8016a72:	3101      	adds	r1, #1
 8016a74:	8601      	strh	r1, [r0, #48]	; 0x30
 8016a76:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 8016a78:	b901      	cbnz	r1, 8016a7c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8016a7a:	85c5      	strh	r5, [r0, #46]	; 0x2e
 8016a7c:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 8016a7e:	3901      	subs	r1, #1
 8016a80:	b289      	uxth	r1, r1
 8016a82:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8016a84:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8016a88:	834c      	strh	r4, [r1, #26]
 8016a8a:	e7e6      	b.n	8016a5a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8016a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016a90:	f7ff bf4a 	b.w	8016928 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8016a94:	08027620 	.word	0x08027620
 8016a98:	08027716 	.word	0x08027716
 8016a9c:	08027629 	.word	0x08027629
 8016aa0:	08027661 	.word	0x08027661
 8016aa4:	080277c0 	.word	0x080277c0
 8016aa8:	0802766f 	.word	0x0802766f
 8016aac:	08027a97 	.word	0x08027a97
 8016ab0:	0802767b 	.word	0x0802767b
 8016ab4:	0802768e 	.word	0x0802768e

08016ab8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8016ab8:	3a01      	subs	r2, #1
 8016aba:	b570      	push	{r4, r5, r6, lr}
 8016abc:	b292      	uxth	r2, r2
 8016abe:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8016ac2:	42b2      	cmp	r2, r6
 8016ac4:	d019      	beq.n	8016afa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 8016ac6:	8b04      	ldrh	r4, [r0, #24]
 8016ac8:	f831 5b02 	ldrh.w	r5, [r1], #2
 8016acc:	4294      	cmp	r4, r2
 8016ace:	d805      	bhi.n	8016adc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 8016ad0:	4b19      	ldr	r3, [pc, #100]	; (8016b38 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8016ad2:	4a1a      	ldr	r2, [pc, #104]	; (8016b3c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 8016ad4:	481a      	ldr	r0, [pc, #104]	; (8016b40 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 8016ad6:	21c5      	movs	r1, #197	; 0xc5
 8016ad8:	f00c fe34 	bl	8023744 <__assert_func>
 8016adc:	8ac4      	ldrh	r4, [r0, #22]
 8016ade:	4414      	add	r4, r2
 8016ae0:	b2a4      	uxth	r4, r4
 8016ae2:	2c01      	cmp	r4, #1
 8016ae4:	bf88      	it	hi
 8016ae6:	3c02      	subhi	r4, #2
 8016ae8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8016aec:	3a01      	subs	r2, #1
 8016aee:	8a64      	ldrh	r4, [r4, #18]
 8016af0:	42ac      	cmp	r4, r5
 8016af2:	b292      	uxth	r2, r2
 8016af4:	d0e5      	beq.n	8016ac2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 8016af6:	2000      	movs	r0, #0
 8016af8:	bd70      	pop	{r4, r5, r6, pc}
 8016afa:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8016afe:	2400      	movs	r4, #0
 8016b00:	4413      	add	r3, r2
 8016b02:	b2a2      	uxth	r2, r4
 8016b04:	429a      	cmp	r2, r3
 8016b06:	da14      	bge.n	8016b32 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 8016b08:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 8016b0a:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8016b0e:	4296      	cmp	r6, r2
 8016b10:	d802      	bhi.n	8016b18 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 8016b12:	4b09      	ldr	r3, [pc, #36]	; (8016b38 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8016b14:	4a0b      	ldr	r2, [pc, #44]	; (8016b44 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 8016b16:	e7dd      	b.n	8016ad4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 8016b18:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 8016b1a:	4432      	add	r2, r6
 8016b1c:	b292      	uxth	r2, r2
 8016b1e:	2a09      	cmp	r2, #9
 8016b20:	bf88      	it	hi
 8016b22:	3a0a      	subhi	r2, #10
 8016b24:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8016b28:	3401      	adds	r4, #1
 8016b2a:	8b52      	ldrh	r2, [r2, #26]
 8016b2c:	42aa      	cmp	r2, r5
 8016b2e:	d0e8      	beq.n	8016b02 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 8016b30:	e7e1      	b.n	8016af6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 8016b32:	2001      	movs	r0, #1
 8016b34:	e7e0      	b.n	8016af8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8016b36:	bf00      	nop
 8016b38:	08027661 	.word	0x08027661
 8016b3c:	08027b1b 	.word	0x08027b1b
 8016b40:	08027629 	.word	0x08027629
 8016b44:	080277c0 	.word	0x080277c0

08016b48 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8016b48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b4c:	4605      	mov	r5, r0
 8016b4e:	4616      	mov	r6, r2
 8016b50:	1c8c      	adds	r4, r1, #2
 8016b52:	8809      	ldrh	r1, [r1, #0]
 8016b54:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8016b58:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8016b5c:	42b3      	cmp	r3, r6
 8016b5e:	d124      	bne.n	8016baa <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8016b60:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8016b64:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8016b68:	f001 070f 	and.w	r7, r1, #15
 8016b6c:	f8cd 8000 	str.w	r8, [sp]
 8016b70:	464b      	mov	r3, r9
 8016b72:	4652      	mov	r2, sl
 8016b74:	4621      	mov	r1, r4
 8016b76:	4628      	mov	r0, r5
 8016b78:	f7ff ff9e 	bl	8016ab8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8016b7c:	4683      	mov	fp, r0
 8016b7e:	b168      	cbz	r0, 8016b9c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8016b80:	eb0a 0109 	add.w	r1, sl, r9
 8016b84:	4441      	add	r1, r8
 8016b86:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8016b8a:	463a      	mov	r2, r7
 8016b8c:	4649      	mov	r1, r9
 8016b8e:	4628      	mov	r0, r5
 8016b90:	f7ff ff42 	bl	8016a18 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8016b94:	4658      	mov	r0, fp
 8016b96:	b003      	add	sp, #12
 8016b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b9c:	eb07 010a 	add.w	r1, r7, sl
 8016ba0:	4449      	add	r1, r9
 8016ba2:	4441      	add	r1, r8
 8016ba4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8016ba8:	e7d2      	b.n	8016b50 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8016baa:	f04f 0b00 	mov.w	fp, #0
 8016bae:	e7f1      	b.n	8016b94 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08016bb0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8016bb0:	b570      	push	{r4, r5, r6, lr}
 8016bb2:	8810      	ldrh	r0, [r2, #0]
 8016bb4:	4298      	cmp	r0, r3
 8016bb6:	d817      	bhi.n	8016be8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8016bb8:	1e48      	subs	r0, r1, #1
 8016bba:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8016bbe:	4298      	cmp	r0, r3
 8016bc0:	d312      	bcc.n	8016be8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8016bc2:	2400      	movs	r4, #0
 8016bc4:	428c      	cmp	r4, r1
 8016bc6:	d20f      	bcs.n	8016be8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8016bc8:	1860      	adds	r0, r4, r1
 8016bca:	1040      	asrs	r0, r0, #1
 8016bcc:	0085      	lsls	r5, r0, #2
 8016bce:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8016bd2:	42b3      	cmp	r3, r6
 8016bd4:	d902      	bls.n	8016bdc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8016bd6:	3001      	adds	r0, #1
 8016bd8:	b284      	uxth	r4, r0
 8016bda:	e7f3      	b.n	8016bc4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8016bdc:	d201      	bcs.n	8016be2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8016bde:	b281      	uxth	r1, r0
 8016be0:	e7f0      	b.n	8016bc4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8016be2:	442a      	add	r2, r5
 8016be4:	8850      	ldrh	r0, [r2, #2]
 8016be6:	bd70      	pop	{r4, r5, r6, pc}
 8016be8:	2000      	movs	r0, #0
 8016bea:	e7fc      	b.n	8016be6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08016bec <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8016bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bf0:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8016bf2:	886f      	ldrh	r7, [r5, #2]
 8016bf4:	4604      	mov	r4, r0
 8016bf6:	087f      	lsrs	r7, r7, #1
 8016bf8:	260b      	movs	r6, #11
 8016bfa:	3e01      	subs	r6, #1
 8016bfc:	d01b      	beq.n	8016c36 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8016bfe:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8016c00:	b92b      	cbnz	r3, 8016c0e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 8016c02:	4b0e      	ldr	r3, [pc, #56]	; (8016c3c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 8016c04:	4a0e      	ldr	r2, [pc, #56]	; (8016c40 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 8016c06:	480f      	ldr	r0, [pc, #60]	; (8016c44 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 8016c08:	21c0      	movs	r1, #192	; 0xc0
 8016c0a:	f00c fd9b 	bl	8023744 <__assert_func>
 8016c0e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8016c10:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016c14:	462a      	mov	r2, r5
 8016c16:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8016c1a:	4639      	mov	r1, r7
 8016c1c:	4643      	mov	r3, r8
 8016c1e:	4620      	mov	r0, r4
 8016c20:	f7ff ffc6 	bl	8016bb0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8016c24:	b138      	cbz	r0, 8016c36 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8016c26:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8016c2a:	4642      	mov	r2, r8
 8016c2c:	4620      	mov	r0, r4
 8016c2e:	f7ff ff8b 	bl	8016b48 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8016c32:	2800      	cmp	r0, #0
 8016c34:	d1e1      	bne.n	8016bfa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8016c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c3a:	bf00      	nop
 8016c3c:	08027620 	.word	0x08027620
 8016c40:	08027892 	.word	0x08027892
 8016c44:	08027629 	.word	0x08027629

08016c48 <_ZN8touchgfx8ceil28_4El>:
 8016c48:	f110 030f 	adds.w	r3, r0, #15
 8016c4c:	d401      	bmi.n	8016c52 <_ZN8touchgfx8ceil28_4El+0xa>
 8016c4e:	1118      	asrs	r0, r3, #4
 8016c50:	4770      	bx	lr
 8016c52:	f1c0 0001 	rsb	r0, r0, #1
 8016c56:	f010 000f 	ands.w	r0, r0, #15
 8016c5a:	bf18      	it	ne
 8016c5c:	2001      	movne	r0, #1
 8016c5e:	2210      	movs	r2, #16
 8016c60:	fb93 f3f2 	sdiv	r3, r3, r2
 8016c64:	1a18      	subs	r0, r3, r0
 8016c66:	4770      	bx	lr

08016c68 <_ZN8touchgfx11floorDivModEllRlS0_>:
 8016c68:	2900      	cmp	r1, #0
 8016c6a:	b538      	push	{r3, r4, r5, lr}
 8016c6c:	dc05      	bgt.n	8016c7a <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 8016c6e:	4b0f      	ldr	r3, [pc, #60]	; (8016cac <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 8016c70:	4a0f      	ldr	r2, [pc, #60]	; (8016cb0 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 8016c72:	4810      	ldr	r0, [pc, #64]	; (8016cb4 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 8016c74:	21fa      	movs	r1, #250	; 0xfa
 8016c76:	f00c fd65 	bl	8023744 <__assert_func>
 8016c7a:	2800      	cmp	r0, #0
 8016c7c:	db06      	blt.n	8016c8c <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 8016c7e:	fb90 f4f1 	sdiv	r4, r0, r1
 8016c82:	6014      	str	r4, [r2, #0]
 8016c84:	fb01 0114 	mls	r1, r1, r4, r0
 8016c88:	6019      	str	r1, [r3, #0]
 8016c8a:	bd38      	pop	{r3, r4, r5, pc}
 8016c8c:	4240      	negs	r0, r0
 8016c8e:	fb90 f4f1 	sdiv	r4, r0, r1
 8016c92:	4265      	negs	r5, r4
 8016c94:	fb01 0014 	mls	r0, r1, r4, r0
 8016c98:	6015      	str	r5, [r2, #0]
 8016c9a:	6018      	str	r0, [r3, #0]
 8016c9c:	2800      	cmp	r0, #0
 8016c9e:	d0f4      	beq.n	8016c8a <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 8016ca0:	6810      	ldr	r0, [r2, #0]
 8016ca2:	3801      	subs	r0, #1
 8016ca4:	6010      	str	r0, [r2, #0]
 8016ca6:	6818      	ldr	r0, [r3, #0]
 8016ca8:	1a09      	subs	r1, r1, r0
 8016caa:	e7ed      	b.n	8016c88 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 8016cac:	08027bec 	.word	0x08027bec
 8016cb0:	08027c2b 	.word	0x08027c2b
 8016cb4:	08027bfc 	.word	0x08027bfc

08016cb8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8016cb8:	b570      	push	{r4, r5, r6, lr}
 8016cba:	694a      	ldr	r2, [r1, #20]
 8016cbc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8016cbe:	684b      	ldr	r3, [r1, #4]
 8016cc0:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8016cc2:	1b54      	subs	r4, r2, r5
 8016cc4:	f000 8106 	beq.w	8016ed4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8016cc8:	1b9b      	subs	r3, r3, r6
 8016cca:	d003      	beq.n	8016cd4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8016ccc:	4363      	muls	r3, r4
 8016cce:	2210      	movs	r2, #16
 8016cd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8016cd4:	680c      	ldr	r4, [r1, #0]
 8016cd6:	698a      	ldr	r2, [r1, #24]
 8016cd8:	1b65      	subs	r5, r4, r5
 8016cda:	f000 80fd 	beq.w	8016ed8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8016cde:	1b92      	subs	r2, r2, r6
 8016ce0:	d003      	beq.n	8016cea <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8016ce2:	436a      	muls	r2, r5
 8016ce4:	2410      	movs	r4, #16
 8016ce6:	fb92 f2f4 	sdiv	r2, r2, r4
 8016cea:	1a9b      	subs	r3, r3, r2
 8016cec:	ee07 3a90 	vmov	s15, r3
 8016cf0:	ed9f 4a88 	vldr	s8, [pc, #544]	; 8016f14 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8016cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016cf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016cfc:	ee67 7a84 	vmul.f32	s15, s15, s8
 8016d00:	460a      	mov	r2, r1
 8016d02:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8016d06:	4603      	mov	r3, r0
 8016d08:	f100 040c 	add.w	r4, r0, #12
 8016d0c:	eeb1 6a43 	vneg.f32	s12, s6
 8016d10:	edd2 7a02 	vldr	s15, [r2, #8]
 8016d14:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8016d18:	3214      	adds	r2, #20
 8016d1a:	ece3 6a01 	vstmia	r3!, {s13}
 8016d1e:	ed52 7a02 	vldr	s15, [r2, #-8]
 8016d22:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016d26:	429c      	cmp	r4, r3
 8016d28:	edc3 7a02 	vstr	s15, [r3, #8]
 8016d2c:	ed52 7a01 	vldr	s15, [r2, #-4]
 8016d30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016d34:	edc3 7a05 	vstr	s15, [r3, #20]
 8016d38:	d1ea      	bne.n	8016d10 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8016d3a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8016d3c:	698b      	ldr	r3, [r1, #24]
 8016d3e:	edd0 4a02 	vldr	s9, [r0, #8]
 8016d42:	edd0 3a00 	vldr	s7, [r0]
 8016d46:	edd0 6a01 	vldr	s13, [r0, #4]
 8016d4a:	ed90 5a05 	vldr	s10, [r0, #20]
 8016d4e:	ed90 2a03 	vldr	s4, [r0, #12]
 8016d52:	edd0 5a04 	vldr	s11, [r0, #16]
 8016d56:	ed90 1a07 	vldr	s2, [r0, #28]
 8016d5a:	edd0 2a06 	vldr	s5, [r0, #24]
 8016d5e:	1a9b      	subs	r3, r3, r2
 8016d60:	ee07 3a90 	vmov	s15, r3
 8016d64:	684b      	ldr	r3, [r1, #4]
 8016d66:	1a9b      	subs	r3, r3, r2
 8016d68:	ee07 3a10 	vmov	s14, r3
 8016d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016d70:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8016d74:	ee67 7a84 	vmul.f32	s15, s15, s8
 8016d78:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8016d7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016d80:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8016d84:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016d88:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8016d8c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016d90:	ee32 5a45 	vsub.f32	s10, s4, s10
 8016d94:	ee67 7a83 	vmul.f32	s15, s15, s6
 8016d98:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8016d9c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8016d9e:	694a      	ldr	r2, [r1, #20]
 8016da0:	1b13      	subs	r3, r2, r4
 8016da2:	ee07 3a10 	vmov	s14, r3
 8016da6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016daa:	680b      	ldr	r3, [r1, #0]
 8016dac:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016db0:	1b1b      	subs	r3, r3, r4
 8016db2:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8016db6:	ee07 3a10 	vmov	s14, r3
 8016dba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016dbe:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016dc2:	eee6 4a87 	vfma.f32	s9, s13, s14
 8016dc6:	ee64 4a86 	vmul.f32	s9, s9, s12
 8016dca:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8016dce:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8016dd0:	698b      	ldr	r3, [r1, #24]
 8016dd2:	1a9b      	subs	r3, r3, r2
 8016dd4:	ee06 3a90 	vmov	s13, r3
 8016dd8:	684b      	ldr	r3, [r1, #4]
 8016dda:	1a9b      	subs	r3, r3, r2
 8016ddc:	ee07 3a10 	vmov	s14, r3
 8016de0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016de4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016de8:	ee66 6a84 	vmul.f32	s13, s13, s8
 8016dec:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016df0:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8016df4:	eee5 6a87 	vfma.f32	s13, s11, s14
 8016df8:	ee66 6a83 	vmul.f32	s13, s13, s6
 8016dfc:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8016e00:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8016e02:	694a      	ldr	r2, [r1, #20]
 8016e04:	1b13      	subs	r3, r2, r4
 8016e06:	ee07 3a10 	vmov	s14, r3
 8016e0a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016e0e:	680b      	ldr	r3, [r1, #0]
 8016e10:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016e14:	1b1b      	subs	r3, r3, r4
 8016e16:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8016e1a:	ee07 3a10 	vmov	s14, r3
 8016e1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016e22:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016e26:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016e2a:	edd0 5a08 	vldr	s11, [r0, #32]
 8016e2e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8016e32:	ee31 1a65 	vsub.f32	s2, s2, s11
 8016e36:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8016e3a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8016e3c:	698b      	ldr	r3, [r1, #24]
 8016e3e:	1a9b      	subs	r3, r3, r2
 8016e40:	ee07 3a10 	vmov	s14, r3
 8016e44:	684b      	ldr	r3, [r1, #4]
 8016e46:	1a9b      	subs	r3, r3, r2
 8016e48:	ee01 3a90 	vmov	s3, r3
 8016e4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016e50:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8016e54:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016e58:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8016e5c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8016e60:	ee61 1a84 	vmul.f32	s3, s3, s8
 8016e64:	eea1 7a21 	vfma.f32	s14, s2, s3
 8016e68:	ee27 7a03 	vmul.f32	s14, s14, s6
 8016e6c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8016e70:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8016e72:	694a      	ldr	r2, [r1, #20]
 8016e74:	1b13      	subs	r3, r2, r4
 8016e76:	ee03 3a10 	vmov	s6, r3
 8016e7a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8016e7e:	680b      	ldr	r3, [r1, #0]
 8016e80:	ee23 3a04 	vmul.f32	s6, s6, s8
 8016e84:	1b1b      	subs	r3, r3, r4
 8016e86:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8016e8a:	ee03 3a10 	vmov	s6, r3
 8016e8e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8016e92:	ee23 4a04 	vmul.f32	s8, s6, s8
 8016e96:	eee1 5a04 	vfma.f32	s11, s2, s8
 8016e9a:	ee25 6a86 	vmul.f32	s12, s11, s12
 8016e9e:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8016ea2:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8016ea6:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8016eaa:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8016eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016eb2:	dd13      	ble.n	8016edc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8016eb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016eb8:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8016ebc:	63c3      	str	r3, [r0, #60]	; 0x3c
 8016ebe:	eee3 7a87 	vfma.f32	s15, s7, s14
 8016ec2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016eca:	dd15      	ble.n	8016ef8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8016ecc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016ed0:	6403      	str	r3, [r0, #64]	; 0x40
 8016ed2:	bd70      	pop	{r4, r5, r6, pc}
 8016ed4:	4623      	mov	r3, r4
 8016ed6:	e6fd      	b.n	8016cd4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8016ed8:	462a      	mov	r2, r5
 8016eda:	e706      	b.n	8016cea <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8016edc:	d502      	bpl.n	8016ee4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8016ede:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016ee2:	e7e9      	b.n	8016eb8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8016ee4:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8016ee8:	eea3 2a85 	vfma.f32	s4, s7, s10
 8016eec:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8016ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ef4:	dade      	bge.n	8016eb4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8016ef6:	e7f2      	b.n	8016ede <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8016ef8:	d502      	bpl.n	8016f00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8016efa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016efe:	e7e7      	b.n	8016ed0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8016f00:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8016f04:	eee3 4a86 	vfma.f32	s9, s7, s12
 8016f08:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8016f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f10:	dadc      	bge.n	8016ecc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8016f12:	e7f2      	b.n	8016efa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8016f14:	3d800000 	.word	0x3d800000

08016f18 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8016f18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f1c:	f04f 0814 	mov.w	r8, #20
 8016f20:	fb08 f903 	mul.w	r9, r8, r3
 8016f24:	eb02 0a09 	add.w	sl, r2, r9
 8016f28:	4604      	mov	r4, r0
 8016f2a:	f8da 0004 	ldr.w	r0, [sl, #4]
 8016f2e:	4617      	mov	r7, r2
 8016f30:	460d      	mov	r5, r1
 8016f32:	461e      	mov	r6, r3
 8016f34:	f7ff fe88 	bl	8016c48 <_ZN8touchgfx8ceil28_4El>
 8016f38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f3a:	6160      	str	r0, [r4, #20]
 8016f3c:	fb08 f803 	mul.w	r8, r8, r3
 8016f40:	eb07 0b08 	add.w	fp, r7, r8
 8016f44:	9001      	str	r0, [sp, #4]
 8016f46:	f8db 0004 	ldr.w	r0, [fp, #4]
 8016f4a:	f7ff fe7d 	bl	8016c48 <_ZN8touchgfx8ceil28_4El>
 8016f4e:	9a01      	ldr	r2, [sp, #4]
 8016f50:	1a80      	subs	r0, r0, r2
 8016f52:	61a0      	str	r0, [r4, #24]
 8016f54:	2800      	cmp	r0, #0
 8016f56:	f000 8088 	beq.w	801706a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 8016f5a:	f857 3009 	ldr.w	r3, [r7, r9]
 8016f5e:	f857 c008 	ldr.w	ip, [r7, r8]
 8016f62:	f8da 1004 	ldr.w	r1, [sl, #4]
 8016f66:	f8db 0004 	ldr.w	r0, [fp, #4]
 8016f6a:	ebac 0c03 	sub.w	ip, ip, r3
 8016f6e:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 8016f72:	fb0b f202 	mul.w	r2, fp, r2
 8016f76:	fb0c 2211 	mls	r2, ip, r1, r2
 8016f7a:	1a40      	subs	r0, r0, r1
 8016f7c:	ea4f 1800 	mov.w	r8, r0, lsl #4
 8016f80:	fb00 2003 	mla	r0, r0, r3, r2
 8016f84:	3801      	subs	r0, #1
 8016f86:	f104 0310 	add.w	r3, r4, #16
 8016f8a:	4622      	mov	r2, r4
 8016f8c:	4641      	mov	r1, r8
 8016f8e:	4440      	add	r0, r8
 8016f90:	f7ff fe6a 	bl	8016c68 <_ZN8touchgfx11floorDivModEllRlS0_>
 8016f94:	f104 0308 	add.w	r3, r4, #8
 8016f98:	1d22      	adds	r2, r4, #4
 8016f9a:	4641      	mov	r1, r8
 8016f9c:	4658      	mov	r0, fp
 8016f9e:	f7ff fe63 	bl	8016c68 <_ZN8touchgfx11floorDivModEllRlS0_>
 8016fa2:	f8c4 800c 	str.w	r8, [r4, #12]
 8016fa6:	f8da 3004 	ldr.w	r3, [sl, #4]
 8016faa:	6962      	ldr	r2, [r4, #20]
 8016fac:	eddf 6a31 	vldr	s13, [pc, #196]	; 8017074 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8016fb0:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8016fb4:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8016fb8:	ee07 3a10 	vmov	s14, r3
 8016fbc:	6822      	ldr	r2, [r4, #0]
 8016fbe:	f857 3009 	ldr.w	r3, [r7, r9]
 8016fc2:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8016fc6:	ee07 3a90 	vmov	s15, r3
 8016fca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016fd2:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 8016fd6:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016fda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016fde:	edd3 6a00 	vldr	s13, [r3]
 8016fe2:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016fe6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8016fea:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016fee:	edc4 6a07 	vstr	s13, [r4, #28]
 8016ff2:	edd4 6a01 	vldr	s13, [r4, #4]
 8016ff6:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 8016ffa:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8016ffe:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017002:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8017006:	ed84 6a08 	vstr	s12, [r4, #32]
 801700a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801700c:	6262      	str	r2, [r4, #36]	; 0x24
 801700e:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 8017012:	ed93 6a03 	vldr	s12, [r3, #12]
 8017016:	eea5 6a87 	vfma.f32	s12, s11, s14
 801701a:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801701e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8017022:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 8017026:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801702a:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801702e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8017032:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 8017036:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8017038:	6322      	str	r2, [r4, #48]	; 0x30
 801703a:	ed93 6a06 	vldr	s12, [r3, #24]
 801703e:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 8017042:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017046:	eeb0 7a46 	vmov.f32	s14, s12
 801704a:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801704e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8017052:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 8017056:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801705a:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801705e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017062:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 8017066:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8017068:	63e3      	str	r3, [r4, #60]	; 0x3c
 801706a:	4620      	mov	r0, r4
 801706c:	b003      	add	sp, #12
 801706e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017072:	bf00      	nop
 8017074:	3d800000 	.word	0x3d800000

08017078 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8017078:	4602      	mov	r2, r0
 801707a:	b148      	cbz	r0, 8017090 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801707c:	2300      	movs	r3, #0
 801707e:	b298      	uxth	r0, r3
 8017080:	3301      	adds	r3, #1
 8017082:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8017086:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801708a:	2900      	cmp	r1, #0
 801708c:	d1f7      	bne.n	801707e <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801708e:	4770      	bx	lr
 8017090:	4770      	bx	lr

08017092 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8017092:	b530      	push	{r4, r5, lr}
 8017094:	4604      	mov	r4, r0
 8017096:	b159      	cbz	r1, 80170b0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8017098:	b148      	cbz	r0, 80170ae <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801709a:	2300      	movs	r3, #0
 801709c:	b298      	uxth	r0, r3
 801709e:	4282      	cmp	r2, r0
 80170a0:	d905      	bls.n	80170ae <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 80170a2:	5ccd      	ldrb	r5, [r1, r3]
 80170a4:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 80170a8:	3301      	adds	r3, #1
 80170aa:	2d00      	cmp	r5, #0
 80170ac:	d1f6      	bne.n	801709c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 80170ae:	bd30      	pop	{r4, r5, pc}
 80170b0:	4608      	mov	r0, r1
 80170b2:	e7fc      	b.n	80170ae <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

080170b4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 80170b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170b6:	b08b      	sub	sp, #44	; 0x2c
 80170b8:	468c      	mov	ip, r1
 80170ba:	2100      	movs	r1, #0
 80170bc:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80170c0:	ae01      	add	r6, sp, #4
 80170c2:	211f      	movs	r1, #31
 80170c4:	fbb0 f7f3 	udiv	r7, r0, r3
 80170c8:	fb03 0517 	mls	r5, r3, r7, r0
 80170cc:	b2ec      	uxtb	r4, r5
 80170ce:	2d09      	cmp	r5, #9
 80170d0:	bfd4      	ite	le
 80170d2:	3430      	addle	r4, #48	; 0x30
 80170d4:	3457      	addgt	r4, #87	; 0x57
 80170d6:	b2e4      	uxtb	r4, r4
 80170d8:	558c      	strb	r4, [r1, r6]
 80170da:	4638      	mov	r0, r7
 80170dc:	1e4c      	subs	r4, r1, #1
 80170de:	b92f      	cbnz	r7, 80170ec <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 80170e0:	4431      	add	r1, r6
 80170e2:	4660      	mov	r0, ip
 80170e4:	f7ff ffd5 	bl	8017092 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80170e8:	b00b      	add	sp, #44	; 0x2c
 80170ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170ec:	4621      	mov	r1, r4
 80170ee:	e7e9      	b.n	80170c4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

080170f0 <_ZN8touchgfx7Unicode4itoaElPtti>:
 80170f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170f2:	4607      	mov	r7, r0
 80170f4:	b08b      	sub	sp, #44	; 0x2c
 80170f6:	4608      	mov	r0, r1
 80170f8:	b341      	cbz	r1, 801714c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 80170fa:	1e99      	subs	r1, r3, #2
 80170fc:	2922      	cmp	r1, #34	; 0x22
 80170fe:	d825      	bhi.n	801714c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8017100:	2100      	movs	r1, #0
 8017102:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8017106:	463c      	mov	r4, r7
 8017108:	261f      	movs	r6, #31
 801710a:	f10d 0c04 	add.w	ip, sp, #4
 801710e:	fb94 fef3 	sdiv	lr, r4, r3
 8017112:	fb03 441e 	mls	r4, r3, lr, r4
 8017116:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801711a:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801711e:	b2ec      	uxtb	r4, r5
 8017120:	2d09      	cmp	r5, #9
 8017122:	bfd4      	ite	le
 8017124:	3430      	addle	r4, #48	; 0x30
 8017126:	3457      	addgt	r4, #87	; 0x57
 8017128:	b2e4      	uxtb	r4, r4
 801712a:	f80c 4006 	strb.w	r4, [ip, r6]
 801712e:	4674      	mov	r4, lr
 8017130:	1e71      	subs	r1, r6, #1
 8017132:	b96c      	cbnz	r4, 8017150 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8017134:	2f00      	cmp	r7, #0
 8017136:	da05      	bge.n	8017144 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8017138:	ab0a      	add	r3, sp, #40	; 0x28
 801713a:	4419      	add	r1, r3
 801713c:	232d      	movs	r3, #45	; 0x2d
 801713e:	f801 3c24 	strb.w	r3, [r1, #-36]
 8017142:	1eb1      	subs	r1, r6, #2
 8017144:	3101      	adds	r1, #1
 8017146:	4461      	add	r1, ip
 8017148:	f7ff ffa3 	bl	8017092 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801714c:	b00b      	add	sp, #44	; 0x2c
 801714e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017150:	460e      	mov	r6, r1
 8017152:	e7dc      	b.n	801710e <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08017154 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8017154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017158:	4691      	mov	r9, r2
 801715a:	b085      	sub	sp, #20
 801715c:	6802      	ldr	r2, [r0, #0]
 801715e:	9201      	str	r2, [sp, #4]
 8017160:	4688      	mov	r8, r1
 8017162:	4683      	mov	fp, r0
 8017164:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8017168:	9103      	str	r1, [sp, #12]
 801716a:	4610      	mov	r0, r2
 801716c:	461c      	mov	r4, r3
 801716e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8017172:	9302      	str	r3, [sp, #8]
 8017174:	f7ff ff80 	bl	8017078 <_ZN8touchgfx7Unicode6strlenEPKt>
 8017178:	f1b8 0f00 	cmp.w	r8, #0
 801717c:	bf0c      	ite	eq
 801717e:	4684      	moveq	ip, r0
 8017180:	f100 0c01 	addne.w	ip, r0, #1
 8017184:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8017188:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801718c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801718e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8017190:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8017194:	9903      	ldr	r1, [sp, #12]
 8017196:	fa1f fc8c 	uxth.w	ip, ip
 801719a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801719e:	d041      	beq.n	8017224 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 80171a0:	d834      	bhi.n	801720c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 80171a2:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 80171a6:	d059      	beq.n	801725c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 80171a8:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 80171ac:	d03a      	beq.n	8017224 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 80171ae:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 80171b2:	d034      	beq.n	801721e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 80171b4:	2400      	movs	r4, #0
 80171b6:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 80171ba:	3a01      	subs	r2, #1
 80171bc:	b169      	cbz	r1, 80171da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80171be:	9911      	ldr	r1, [sp, #68]	; 0x44
 80171c0:	458c      	cmp	ip, r1
 80171c2:	da09      	bge.n	80171d8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 80171c4:	eba1 010c 	sub.w	r1, r1, ip
 80171c8:	b289      	uxth	r1, r1
 80171ca:	b933      	cbnz	r3, 80171da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80171cc:	2e00      	cmp	r6, #0
 80171ce:	d051      	beq.n	8017274 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 80171d0:	2800      	cmp	r0, #0
 80171d2:	d04f      	beq.n	8017274 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 80171d4:	440c      	add	r4, r1
 80171d6:	b2a4      	uxth	r4, r4
 80171d8:	2100      	movs	r1, #0
 80171da:	682b      	ldr	r3, [r5, #0]
 80171dc:	4293      	cmp	r3, r2
 80171de:	da07      	bge.n	80171f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 80171e0:	f1b8 0f00 	cmp.w	r8, #0
 80171e4:	d004      	beq.n	80171f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 80171e6:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 80171ea:	682b      	ldr	r3, [r5, #0]
 80171ec:	3301      	adds	r3, #1
 80171ee:	602b      	str	r3, [r5, #0]
 80171f0:	2730      	movs	r7, #48	; 0x30
 80171f2:	2c00      	cmp	r4, #0
 80171f4:	d04e      	beq.n	8017294 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80171f6:	682e      	ldr	r6, [r5, #0]
 80171f8:	3c01      	subs	r4, #1
 80171fa:	42b2      	cmp	r2, r6
 80171fc:	b2a4      	uxth	r4, r4
 80171fe:	dd49      	ble.n	8017294 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8017200:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8017204:	682b      	ldr	r3, [r5, #0]
 8017206:	3301      	adds	r3, #1
 8017208:	602b      	str	r3, [r5, #0]
 801720a:	e7f2      	b.n	80171f2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801720c:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 8017210:	d01d      	beq.n	801724e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 8017212:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 8017216:	d002      	beq.n	801721e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8017218:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801721c:	e7c9      	b.n	80171b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801721e:	4684      	mov	ip, r0
 8017220:	f04f 0800 	mov.w	r8, #0
 8017224:	2c00      	cmp	r4, #0
 8017226:	d0c6      	beq.n	80171b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8017228:	b947      	cbnz	r7, 801723c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801722a:	2801      	cmp	r0, #1
 801722c:	d106      	bne.n	801723c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801722e:	8814      	ldrh	r4, [r2, #0]
 8017230:	2c30      	cmp	r4, #48	; 0x30
 8017232:	bf02      	ittt	eq
 8017234:	3202      	addeq	r2, #2
 8017236:	f8cb 2000 	streq.w	r2, [fp]
 801723a:	4638      	moveq	r0, r7
 801723c:	45bc      	cmp	ip, r7
 801723e:	da14      	bge.n	801726a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8017240:	b2bf      	uxth	r7, r7
 8017242:	eba7 040c 	sub.w	r4, r7, ip
 8017246:	b2a4      	uxth	r4, r4
 8017248:	46bc      	mov	ip, r7
 801724a:	2600      	movs	r6, #0
 801724c:	e7b3      	b.n	80171b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801724e:	4684      	mov	ip, r0
 8017250:	b16c      	cbz	r4, 801726e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 8017252:	42b8      	cmp	r0, r7
 8017254:	dd00      	ble.n	8017258 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 8017256:	b2b8      	uxth	r0, r7
 8017258:	2400      	movs	r4, #0
 801725a:	e003      	b.n	8017264 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801725c:	f04f 0c01 	mov.w	ip, #1
 8017260:	2400      	movs	r4, #0
 8017262:	4660      	mov	r0, ip
 8017264:	4626      	mov	r6, r4
 8017266:	46a0      	mov	r8, r4
 8017268:	e7a5      	b.n	80171b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801726a:	2400      	movs	r4, #0
 801726c:	e7ed      	b.n	801724a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801726e:	4626      	mov	r6, r4
 8017270:	46a0      	mov	r8, r4
 8017272:	e7a0      	b.n	80171b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8017274:	2900      	cmp	r1, #0
 8017276:	d0b0      	beq.n	80171da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8017278:	2720      	movs	r7, #32
 801727a:	682e      	ldr	r6, [r5, #0]
 801727c:	2900      	cmp	r1, #0
 801727e:	d0ac      	beq.n	80171da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8017280:	3901      	subs	r1, #1
 8017282:	4296      	cmp	r6, r2
 8017284:	b289      	uxth	r1, r1
 8017286:	daa7      	bge.n	80171d8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8017288:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801728c:	682b      	ldr	r3, [r5, #0]
 801728e:	3301      	adds	r3, #1
 8017290:	602b      	str	r3, [r5, #0]
 8017292:	e7f2      	b.n	801727a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8017294:	b188      	cbz	r0, 80172ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8017296:	682b      	ldr	r3, [r5, #0]
 8017298:	3801      	subs	r0, #1
 801729a:	429a      	cmp	r2, r3
 801729c:	b280      	uxth	r0, r0
 801729e:	dd0c      	ble.n	80172ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 80172a0:	f8db 3000 	ldr.w	r3, [fp]
 80172a4:	1c9c      	adds	r4, r3, #2
 80172a6:	f8cb 4000 	str.w	r4, [fp]
 80172aa:	881c      	ldrh	r4, [r3, #0]
 80172ac:	682b      	ldr	r3, [r5, #0]
 80172ae:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 80172b2:	682b      	ldr	r3, [r5, #0]
 80172b4:	3301      	adds	r3, #1
 80172b6:	602b      	str	r3, [r5, #0]
 80172b8:	e7ec      	b.n	8017294 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80172ba:	2620      	movs	r6, #32
 80172bc:	b151      	cbz	r1, 80172d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 80172be:	6828      	ldr	r0, [r5, #0]
 80172c0:	3901      	subs	r1, #1
 80172c2:	4282      	cmp	r2, r0
 80172c4:	b289      	uxth	r1, r1
 80172c6:	dd05      	ble.n	80172d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 80172c8:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 80172cc:	682b      	ldr	r3, [r5, #0]
 80172ce:	3301      	adds	r3, #1
 80172d0:	602b      	str	r3, [r5, #0]
 80172d2:	e7f3      	b.n	80172bc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 80172d4:	b005      	add	sp, #20
 80172d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080172da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 80172da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80172de:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 80172e2:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 80172e6:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 80172ea:	2400      	movs	r4, #0
 80172ec:	8014      	strh	r4, [r2, #0]
 80172ee:	701c      	strb	r4, [r3, #0]
 80172f0:	f888 4000 	strb.w	r4, [r8]
 80172f4:	f88c 4000 	strb.w	r4, [ip]
 80172f8:	f88e 4000 	strb.w	r4, [lr]
 80172fc:	703c      	strb	r4, [r7, #0]
 80172fe:	6804      	ldr	r4, [r0, #0]
 8017300:	b1a4      	cbz	r4, 801732c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 8017302:	8824      	ldrh	r4, [r4, #0]
 8017304:	f04f 0901 	mov.w	r9, #1
 8017308:	b314      	cbz	r4, 8017350 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801730a:	2c2b      	cmp	r4, #43	; 0x2b
 801730c:	d001      	beq.n	8017312 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801730e:	2c20      	cmp	r4, #32
 8017310:	d110      	bne.n	8017334 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 8017312:	8014      	strh	r4, [r2, #0]
 8017314:	6804      	ldr	r4, [r0, #0]
 8017316:	b10c      	cbz	r4, 801731c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8017318:	3402      	adds	r4, #2
 801731a:	6004      	str	r4, [r0, #0]
 801731c:	680c      	ldr	r4, [r1, #0]
 801731e:	b10c      	cbz	r4, 8017324 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8017320:	3401      	adds	r4, #1
 8017322:	600c      	str	r4, [r1, #0]
 8017324:	6804      	ldr	r4, [r0, #0]
 8017326:	b17c      	cbz	r4, 8017348 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8017328:	8824      	ldrh	r4, [r4, #0]
 801732a:	e7ed      	b.n	8017308 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801732c:	680c      	ldr	r4, [r1, #0]
 801732e:	b17c      	cbz	r4, 8017350 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8017330:	7824      	ldrb	r4, [r4, #0]
 8017332:	e7e7      	b.n	8017304 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 8017334:	2c2d      	cmp	r4, #45	; 0x2d
 8017336:	d102      	bne.n	801733e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8017338:	f883 9000 	strb.w	r9, [r3]
 801733c:	e7ea      	b.n	8017314 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801733e:	2c23      	cmp	r4, #35	; 0x23
 8017340:	d107      	bne.n	8017352 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 8017342:	f888 9000 	strb.w	r9, [r8]
 8017346:	e7e5      	b.n	8017314 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8017348:	680c      	ldr	r4, [r1, #0]
 801734a:	b10c      	cbz	r4, 8017350 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801734c:	7824      	ldrb	r4, [r4, #0]
 801734e:	e7db      	b.n	8017308 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8017350:	2400      	movs	r4, #0
 8017352:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8017356:	2b09      	cmp	r3, #9
 8017358:	d901      	bls.n	801735e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801735a:	2c2a      	cmp	r4, #42	; 0x2a
 801735c:	d122      	bne.n	80173a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801735e:	2301      	movs	r3, #1
 8017360:	2c30      	cmp	r4, #48	; 0x30
 8017362:	f88e 3000 	strb.w	r3, [lr]
 8017366:	d10d      	bne.n	8017384 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8017368:	f88c 3000 	strb.w	r3, [ip]
 801736c:	6803      	ldr	r3, [r0, #0]
 801736e:	b10b      	cbz	r3, 8017374 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8017370:	3302      	adds	r3, #2
 8017372:	6003      	str	r3, [r0, #0]
 8017374:	680b      	ldr	r3, [r1, #0]
 8017376:	b10b      	cbz	r3, 801737c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8017378:	3301      	adds	r3, #1
 801737a:	600b      	str	r3, [r1, #0]
 801737c:	6803      	ldr	r3, [r0, #0]
 801737e:	2b00      	cmp	r3, #0
 8017380:	d02f      	beq.n	80173e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 8017382:	881c      	ldrh	r4, [r3, #0]
 8017384:	2c2a      	cmp	r4, #42	; 0x2a
 8017386:	d135      	bne.n	80173f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8017388:	f04f 33ff 	mov.w	r3, #4294967295
 801738c:	6033      	str	r3, [r6, #0]
 801738e:	6803      	ldr	r3, [r0, #0]
 8017390:	b10b      	cbz	r3, 8017396 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 8017392:	3302      	adds	r3, #2
 8017394:	6003      	str	r3, [r0, #0]
 8017396:	680b      	ldr	r3, [r1, #0]
 8017398:	b10b      	cbz	r3, 801739e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801739a:	3301      	adds	r3, #1
 801739c:	600b      	str	r3, [r1, #0]
 801739e:	6803      	ldr	r3, [r0, #0]
 80173a0:	b31b      	cbz	r3, 80173ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 80173a2:	881c      	ldrh	r4, [r3, #0]
 80173a4:	2c2e      	cmp	r4, #46	; 0x2e
 80173a6:	d11a      	bne.n	80173de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80173a8:	2301      	movs	r3, #1
 80173aa:	703b      	strb	r3, [r7, #0]
 80173ac:	6803      	ldr	r3, [r0, #0]
 80173ae:	b10b      	cbz	r3, 80173b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 80173b0:	3302      	adds	r3, #2
 80173b2:	6003      	str	r3, [r0, #0]
 80173b4:	680b      	ldr	r3, [r1, #0]
 80173b6:	b10b      	cbz	r3, 80173bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 80173b8:	3301      	adds	r3, #1
 80173ba:	600b      	str	r3, [r1, #0]
 80173bc:	6803      	ldr	r3, [r0, #0]
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d036      	beq.n	8017430 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 80173c2:	881b      	ldrh	r3, [r3, #0]
 80173c4:	2b2a      	cmp	r3, #42	; 0x2a
 80173c6:	d137      	bne.n	8017438 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 80173c8:	f04f 33ff 	mov.w	r3, #4294967295
 80173cc:	602b      	str	r3, [r5, #0]
 80173ce:	6803      	ldr	r3, [r0, #0]
 80173d0:	b10b      	cbz	r3, 80173d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 80173d2:	3302      	adds	r3, #2
 80173d4:	6003      	str	r3, [r0, #0]
 80173d6:	680b      	ldr	r3, [r1, #0]
 80173d8:	b10b      	cbz	r3, 80173de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80173da:	3301      	adds	r3, #1
 80173dc:	600b      	str	r3, [r1, #0]
 80173de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80173e2:	680c      	ldr	r4, [r1, #0]
 80173e4:	b134      	cbz	r4, 80173f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 80173e6:	7824      	ldrb	r4, [r4, #0]
 80173e8:	e7cc      	b.n	8017384 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 80173ea:	680b      	ldr	r3, [r1, #0]
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d0f6      	beq.n	80173de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80173f0:	781c      	ldrb	r4, [r3, #0]
 80173f2:	e7d7      	b.n	80173a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80173f4:	2300      	movs	r3, #0
 80173f6:	6033      	str	r3, [r6, #0]
 80173f8:	220a      	movs	r2, #10
 80173fa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80173fe:	fa1f f38c 	uxth.w	r3, ip
 8017402:	2b09      	cmp	r3, #9
 8017404:	d8ce      	bhi.n	80173a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8017406:	6833      	ldr	r3, [r6, #0]
 8017408:	fb02 c303 	mla	r3, r2, r3, ip
 801740c:	6033      	str	r3, [r6, #0]
 801740e:	6803      	ldr	r3, [r0, #0]
 8017410:	b10b      	cbz	r3, 8017416 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 8017412:	3302      	adds	r3, #2
 8017414:	6003      	str	r3, [r0, #0]
 8017416:	680b      	ldr	r3, [r1, #0]
 8017418:	b10b      	cbz	r3, 801741e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801741a:	3301      	adds	r3, #1
 801741c:	600b      	str	r3, [r1, #0]
 801741e:	6803      	ldr	r3, [r0, #0]
 8017420:	b10b      	cbz	r3, 8017426 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 8017422:	881c      	ldrh	r4, [r3, #0]
 8017424:	e7e9      	b.n	80173fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8017426:	680c      	ldr	r4, [r1, #0]
 8017428:	2c00      	cmp	r4, #0
 801742a:	d0e6      	beq.n	80173fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801742c:	7824      	ldrb	r4, [r4, #0]
 801742e:	e7e4      	b.n	80173fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8017430:	680b      	ldr	r3, [r1, #0]
 8017432:	b10b      	cbz	r3, 8017438 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8017434:	781b      	ldrb	r3, [r3, #0]
 8017436:	e7c5      	b.n	80173c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8017438:	2200      	movs	r2, #0
 801743a:	602a      	str	r2, [r5, #0]
 801743c:	240a      	movs	r4, #10
 801743e:	3b30      	subs	r3, #48	; 0x30
 8017440:	b29e      	uxth	r6, r3
 8017442:	2e09      	cmp	r6, #9
 8017444:	682a      	ldr	r2, [r5, #0]
 8017446:	d813      	bhi.n	8017470 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8017448:	fb04 3302 	mla	r3, r4, r2, r3
 801744c:	602b      	str	r3, [r5, #0]
 801744e:	6803      	ldr	r3, [r0, #0]
 8017450:	b10b      	cbz	r3, 8017456 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8017452:	3302      	adds	r3, #2
 8017454:	6003      	str	r3, [r0, #0]
 8017456:	680b      	ldr	r3, [r1, #0]
 8017458:	b10b      	cbz	r3, 801745e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801745a:	3301      	adds	r3, #1
 801745c:	600b      	str	r3, [r1, #0]
 801745e:	6803      	ldr	r3, [r0, #0]
 8017460:	b10b      	cbz	r3, 8017466 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8017462:	881b      	ldrh	r3, [r3, #0]
 8017464:	e7eb      	b.n	801743e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8017466:	680b      	ldr	r3, [r1, #0]
 8017468:	2b00      	cmp	r3, #0
 801746a:	d0e8      	beq.n	801743e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801746c:	781b      	ldrb	r3, [r3, #0]
 801746e:	e7e6      	b.n	801743e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8017470:	2a06      	cmp	r2, #6
 8017472:	bfa8      	it	ge
 8017474:	2206      	movge	r2, #6
 8017476:	602a      	str	r2, [r5, #0]
 8017478:	e7b1      	b.n	80173de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801747a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801747a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801747e:	b0a3      	sub	sp, #140	; 0x8c
 8017480:	2600      	movs	r6, #0
 8017482:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8017486:	4607      	mov	r7, r0
 8017488:	4688      	mov	r8, r1
 801748a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801748e:	4631      	mov	r1, r6
 8017490:	2242      	movs	r2, #66	; 0x42
 8017492:	4648      	mov	r0, r9
 8017494:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8017496:	960d      	str	r6, [sp, #52]	; 0x34
 8017498:	f7fe fae0 	bl	8015a5c <_ZN8touchgfx6memsetEPvhm>
 801749c:	b15f      	cbz	r7, 80174b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801749e:	f108 3aff 	add.w	sl, r8, #4294967295
 80174a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80174a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80174a6:	b152      	cbz	r2, 80174be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 80174a8:	8812      	ldrh	r2, [r2, #0]
 80174aa:	b10a      	cbz	r2, 80174b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 80174ac:	459a      	cmp	sl, r3
 80174ae:	dc2e      	bgt.n	801750e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 80174b0:	2200      	movs	r2, #0
 80174b2:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80174b6:	4638      	mov	r0, r7
 80174b8:	b023      	add	sp, #140	; 0x8c
 80174ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174be:	9a08      	ldr	r2, [sp, #32]
 80174c0:	2a00      	cmp	r2, #0
 80174c2:	d0f5      	beq.n	80174b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 80174c4:	7812      	ldrb	r2, [r2, #0]
 80174c6:	e7f0      	b.n	80174aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 80174c8:	2d00      	cmp	r5, #0
 80174ca:	d0ea      	beq.n	80174a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80174cc:	782a      	ldrb	r2, [r5, #0]
 80174ce:	b142      	cbz	r2, 80174e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 80174d0:	2a25      	cmp	r2, #37	; 0x25
 80174d2:	d001      	beq.n	80174d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 80174d4:	459a      	cmp	sl, r3
 80174d6:	dc08      	bgt.n	80174ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 80174d8:	f1bb 0f00 	cmp.w	fp, #0
 80174dc:	d121      	bne.n	8017522 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 80174de:	2d00      	cmp	r5, #0
 80174e0:	d0df      	beq.n	80174a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80174e2:	782a      	ldrb	r2, [r5, #0]
 80174e4:	f04f 0b00 	mov.w	fp, #0
 80174e8:	e01d      	b.n	8017526 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 80174ea:	f1bb 0f00 	cmp.w	fp, #0
 80174ee:	d078      	beq.n	80175e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 80174f0:	f8bb 2000 	ldrh.w	r2, [fp]
 80174f4:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80174f8:	f1bb 0f00 	cmp.w	fp, #0
 80174fc:	d002      	beq.n	8017504 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 80174fe:	f10b 0202 	add.w	r2, fp, #2
 8017502:	9209      	str	r2, [sp, #36]	; 0x24
 8017504:	b10d      	cbz	r5, 801750a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8017506:	3501      	adds	r5, #1
 8017508:	9508      	str	r5, [sp, #32]
 801750a:	3301      	adds	r3, #1
 801750c:	930d      	str	r3, [sp, #52]	; 0x34
 801750e:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 8017512:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017514:	f1bb 0f00 	cmp.w	fp, #0
 8017518:	d0d6      	beq.n	80174c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801751a:	f8bb 2000 	ldrh.w	r2, [fp]
 801751e:	2a00      	cmp	r2, #0
 8017520:	d1d6      	bne.n	80174d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 8017522:	f8bb 2000 	ldrh.w	r2, [fp]
 8017526:	2a00      	cmp	r2, #0
 8017528:	d0bb      	beq.n	80174a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801752a:	459a      	cmp	sl, r3
 801752c:	ddb9      	ble.n	80174a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801752e:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 8017532:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8017536:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801753a:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801753e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8017542:	960e      	str	r6, [sp, #56]	; 0x38
 8017544:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 8017548:	960f      	str	r6, [sp, #60]	; 0x3c
 801754a:	f1bb 0f00 	cmp.w	fp, #0
 801754e:	d002      	beq.n	8017556 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8017550:	f10b 0302 	add.w	r3, fp, #2
 8017554:	9309      	str	r3, [sp, #36]	; 0x24
 8017556:	b10d      	cbz	r5, 801755c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8017558:	1c6b      	adds	r3, r5, #1
 801755a:	9308      	str	r3, [sp, #32]
 801755c:	ab0f      	add	r3, sp, #60	; 0x3c
 801755e:	9305      	str	r3, [sp, #20]
 8017560:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8017564:	9304      	str	r3, [sp, #16]
 8017566:	ab0e      	add	r3, sp, #56	; 0x38
 8017568:	9303      	str	r3, [sp, #12]
 801756a:	ab0c      	add	r3, sp, #48	; 0x30
 801756c:	9302      	str	r3, [sp, #8]
 801756e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8017572:	9301      	str	r3, [sp, #4]
 8017574:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8017578:	9300      	str	r3, [sp, #0]
 801757a:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801757e:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 8017582:	a908      	add	r1, sp, #32
 8017584:	a809      	add	r0, sp, #36	; 0x24
 8017586:	f7ff fea8 	bl	80172da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801758a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801758c:	2b00      	cmp	r3, #0
 801758e:	bfbe      	ittt	lt
 8017590:	6823      	ldrlt	r3, [r4, #0]
 8017592:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8017596:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017598:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801759a:	bfb8      	it	lt
 801759c:	3404      	addlt	r4, #4
 801759e:	2b00      	cmp	r3, #0
 80175a0:	bfb8      	it	lt
 80175a2:	6823      	ldrlt	r3, [r4, #0]
 80175a4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80175a8:	bfbe      	ittt	lt
 80175aa:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80175ae:	930f      	strlt	r3, [sp, #60]	; 0x3c
 80175b0:	3404      	addlt	r4, #4
 80175b2:	b1d9      	cbz	r1, 80175ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 80175b4:	880b      	ldrh	r3, [r1, #0]
 80175b6:	2b69      	cmp	r3, #105	; 0x69
 80175b8:	d01f      	beq.n	80175fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 80175ba:	d82f      	bhi.n	801761c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 80175bc:	2b58      	cmp	r3, #88	; 0x58
 80175be:	d01c      	beq.n	80175fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 80175c0:	d818      	bhi.n	80175f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 80175c2:	2b25      	cmp	r3, #37	; 0x25
 80175c4:	d034      	beq.n	8017630 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 80175c6:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 80175ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80175cc:	f1bb 0f00 	cmp.w	fp, #0
 80175d0:	f000 80b8 	beq.w	8017744 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 80175d4:	f8bb 5000 	ldrh.w	r5, [fp]
 80175d8:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 80175dc:	3301      	adds	r3, #1
 80175de:	930d      	str	r3, [sp, #52]	; 0x34
 80175e0:	e029      	b.n	8017636 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 80175e2:	b10d      	cbz	r5, 80175e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 80175e4:	782a      	ldrb	r2, [r5, #0]
 80175e6:	e785      	b.n	80174f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 80175e8:	462a      	mov	r2, r5
 80175ea:	e783      	b.n	80174f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 80175ec:	2a00      	cmp	r2, #0
 80175ee:	d0ea      	beq.n	80175c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 80175f0:	7813      	ldrb	r3, [r2, #0]
 80175f2:	e7e0      	b.n	80175b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 80175f4:	3b63      	subs	r3, #99	; 0x63
 80175f6:	2b01      	cmp	r3, #1
 80175f8:	d8e5      	bhi.n	80175c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 80175fa:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 80175fe:	b329      	cbz	r1, 801764c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 8017600:	880b      	ldrh	r3, [r1, #0]
 8017602:	2b69      	cmp	r3, #105	; 0x69
 8017604:	d063      	beq.n	80176ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 8017606:	d825      	bhi.n	8017654 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 8017608:	2b63      	cmp	r3, #99	; 0x63
 801760a:	d038      	beq.n	801767e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 801760c:	2b64      	cmp	r3, #100	; 0x64
 801760e:	d05e      	beq.n	80176ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 8017610:	2b58      	cmp	r3, #88	; 0x58
 8017612:	d07b      	beq.n	801770c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 8017614:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 8017618:	4625      	mov	r5, r4
 801761a:	e036      	b.n	801768a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801761c:	2b73      	cmp	r3, #115	; 0x73
 801761e:	d0ec      	beq.n	80175fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8017620:	d802      	bhi.n	8017628 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 8017622:	2b6f      	cmp	r3, #111	; 0x6f
 8017624:	d1cf      	bne.n	80175c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 8017626:	e7e8      	b.n	80175fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8017628:	2b75      	cmp	r3, #117	; 0x75
 801762a:	d0e6      	beq.n	80175fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801762c:	2b78      	cmp	r3, #120	; 0x78
 801762e:	e7f9      	b.n	8017624 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 8017630:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017632:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8017636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017638:	b10b      	cbz	r3, 801763e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 801763a:	3302      	adds	r3, #2
 801763c:	9309      	str	r3, [sp, #36]	; 0x24
 801763e:	9b08      	ldr	r3, [sp, #32]
 8017640:	2b00      	cmp	r3, #0
 8017642:	f43f af2e 	beq.w	80174a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8017646:	3301      	adds	r3, #1
 8017648:	9308      	str	r3, [sp, #32]
 801764a:	e72a      	b.n	80174a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801764c:	2a00      	cmp	r2, #0
 801764e:	d0e1      	beq.n	8017614 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 8017650:	7813      	ldrb	r3, [r2, #0]
 8017652:	e7d6      	b.n	8017602 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 8017654:	2b73      	cmp	r3, #115	; 0x73
 8017656:	d036      	beq.n	80176c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 8017658:	d807      	bhi.n	801766a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 801765a:	2b6f      	cmp	r3, #111	; 0x6f
 801765c:	d1da      	bne.n	8017614 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801765e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017660:	1d25      	adds	r5, r4, #4
 8017662:	eba8 0202 	sub.w	r2, r8, r2
 8017666:	2308      	movs	r3, #8
 8017668:	e04a      	b.n	8017700 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 801766a:	2b75      	cmp	r3, #117	; 0x75
 801766c:	d043      	beq.n	80176f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 801766e:	2b78      	cmp	r3, #120	; 0x78
 8017670:	d1d0      	bne.n	8017614 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 8017672:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017674:	1d25      	adds	r5, r4, #4
 8017676:	eba8 0202 	sub.w	r2, r8, r2
 801767a:	2310      	movs	r3, #16
 801767c:	e040      	b.n	8017700 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 801767e:	7823      	ldrb	r3, [r4, #0]
 8017680:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8017684:	1d25      	adds	r5, r4, #4
 8017686:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801768a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801768c:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8017690:	2b00      	cmp	r3, #0
 8017692:	d052      	beq.n	801773a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 8017694:	881a      	ldrh	r2, [r3, #0]
 8017696:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801769a:	a80d      	add	r0, sp, #52	; 0x34
 801769c:	9005      	str	r0, [sp, #20]
 801769e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 80176a2:	9004      	str	r0, [sp, #16]
 80176a4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80176a6:	9003      	str	r0, [sp, #12]
 80176a8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 80176ac:	9002      	str	r0, [sp, #8]
 80176ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80176b0:	9001      	str	r0, [sp, #4]
 80176b2:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 80176b6:	9000      	str	r0, [sp, #0]
 80176b8:	e9cd 8706 	strd	r8, r7, [sp, #24]
 80176bc:	a810      	add	r0, sp, #64	; 0x40
 80176be:	f7ff fd49 	bl	8017154 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 80176c2:	462c      	mov	r4, r5
 80176c4:	e7b7      	b.n	8017636 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 80176c6:	6823      	ldr	r3, [r4, #0]
 80176c8:	1d25      	adds	r5, r4, #4
 80176ca:	9310      	str	r3, [sp, #64]	; 0x40
 80176cc:	e7dd      	b.n	801768a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 80176ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80176d0:	6820      	ldr	r0, [r4, #0]
 80176d2:	eba8 0202 	sub.w	r2, r8, r2
 80176d6:	230a      	movs	r3, #10
 80176d8:	b292      	uxth	r2, r2
 80176da:	4649      	mov	r1, r9
 80176dc:	f7ff fd08 	bl	80170f0 <_ZN8touchgfx7Unicode4itoaElPtti>
 80176e0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80176e4:	2b2d      	cmp	r3, #45	; 0x2d
 80176e6:	f104 0504 	add.w	r5, r4, #4
 80176ea:	d1ce      	bne.n	801768a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 80176ec:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80176f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80176f2:	3302      	adds	r3, #2
 80176f4:	e7e9      	b.n	80176ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 80176f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80176f8:	1d25      	adds	r5, r4, #4
 80176fa:	eba8 0202 	sub.w	r2, r8, r2
 80176fe:	230a      	movs	r3, #10
 8017700:	b292      	uxth	r2, r2
 8017702:	4649      	mov	r1, r9
 8017704:	6820      	ldr	r0, [r4, #0]
 8017706:	f7ff fcd5 	bl	80170b4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801770a:	e7be      	b.n	801768a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801770c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801770e:	6820      	ldr	r0, [r4, #0]
 8017710:	eba8 0202 	sub.w	r2, r8, r2
 8017714:	b292      	uxth	r2, r2
 8017716:	2310      	movs	r3, #16
 8017718:	4649      	mov	r1, r9
 801771a:	f7ff fccb 	bl	80170b4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801771e:	1d25      	adds	r5, r4, #4
 8017720:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8017724:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8017728:	2b00      	cmp	r3, #0
 801772a:	d0ae      	beq.n	801768a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801772c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8017730:	2919      	cmp	r1, #25
 8017732:	d8f7      	bhi.n	8017724 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 8017734:	3b20      	subs	r3, #32
 8017736:	8013      	strh	r3, [r2, #0]
 8017738:	e7f4      	b.n	8017724 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 801773a:	9a08      	ldr	r2, [sp, #32]
 801773c:	2a00      	cmp	r2, #0
 801773e:	d0aa      	beq.n	8017696 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 8017740:	7812      	ldrb	r2, [r2, #0]
 8017742:	e7a8      	b.n	8017696 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 8017744:	2d00      	cmp	r5, #0
 8017746:	f43f af47 	beq.w	80175d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 801774a:	782d      	ldrb	r5, [r5, #0]
 801774c:	e744      	b.n	80175d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

0801774e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801774e:	b507      	push	{r0, r1, r2, lr}
 8017750:	9300      	str	r3, [sp, #0]
 8017752:	4613      	mov	r3, r2
 8017754:	2200      	movs	r2, #0
 8017756:	f7ff fe90 	bl	801747a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801775a:	b003      	add	sp, #12
 801775c:	f85d fb04 	ldr.w	pc, [sp], #4

08017760 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8017760:	b40c      	push	{r2, r3}
 8017762:	b507      	push	{r0, r1, r2, lr}
 8017764:	ab04      	add	r3, sp, #16
 8017766:	f853 2b04 	ldr.w	r2, [r3], #4
 801776a:	9301      	str	r3, [sp, #4]
 801776c:	f7ff ffef 	bl	801774e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8017770:	b003      	add	sp, #12
 8017772:	f85d eb04 	ldr.w	lr, [sp], #4
 8017776:	b002      	add	sp, #8
 8017778:	4770      	bx	lr
	...

0801777c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801777c:	4b01      	ldr	r3, [pc, #4]	; (8017784 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801777e:	6018      	str	r0, [r3, #0]
 8017780:	4770      	bx	lr
 8017782:	bf00      	nop
 8017784:	2000a09c 	.word	0x2000a09c

08017788 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8017788:	4b06      	ldr	r3, [pc, #24]	; (80177a4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801778a:	881a      	ldrh	r2, [r3, #0]
 801778c:	4282      	cmp	r2, r0
 801778e:	d807      	bhi.n	80177a0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8017790:	4b05      	ldr	r3, [pc, #20]	; (80177a8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8017792:	881b      	ldrh	r3, [r3, #0]
 8017794:	4413      	add	r3, r2
 8017796:	4298      	cmp	r0, r3
 8017798:	bfac      	ite	ge
 801779a:	2000      	movge	r0, #0
 801779c:	2001      	movlt	r0, #1
 801779e:	4770      	bx	lr
 80177a0:	2000      	movs	r0, #0
 80177a2:	4770      	bx	lr
 80177a4:	2000a0bc 	.word	0x2000a0bc
 80177a8:	2000a0c0 	.word	0x2000a0c0

080177ac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80177ac:	b508      	push	{r3, lr}
 80177ae:	4601      	mov	r1, r0
 80177b0:	f7ff ffea 	bl	8017788 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80177b4:	b118      	cbz	r0, 80177be <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80177b6:	4b02      	ldr	r3, [pc, #8]	; (80177c0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80177b8:	681b      	ldr	r3, [r3, #0]
 80177ba:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80177be:	bd08      	pop	{r3, pc}
 80177c0:	2000a0a0 	.word	0x2000a0a0

080177c4 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80177c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177c8:	4d28      	ldr	r5, [pc, #160]	; (801786c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 80177ca:	682b      	ldr	r3, [r5, #0]
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d04a      	beq.n	8017866 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 80177d0:	4a27      	ldr	r2, [pc, #156]	; (8017870 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80177d2:	4e28      	ldr	r6, [pc, #160]	; (8017874 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80177d4:	8810      	ldrh	r0, [r2, #0]
 80177d6:	f8b6 8000 	ldrh.w	r8, [r6]
 80177da:	4c27      	ldr	r4, [pc, #156]	; (8017878 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80177dc:	4f27      	ldr	r7, [pc, #156]	; (801787c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80177de:	4440      	add	r0, r8
 80177e0:	1c41      	adds	r1, r0, #1
 80177e2:	f021 0101 	bic.w	r1, r1, #1
 80177e6:	0409      	lsls	r1, r1, #16
 80177e8:	0c09      	lsrs	r1, r1, #16
 80177ea:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 80177ee:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80177f2:	eb03 020e 	add.w	r2, r3, lr
 80177f6:	eb0e 010c 	add.w	r1, lr, ip
 80177fa:	6022      	str	r2, [r4, #0]
 80177fc:	185a      	adds	r2, r3, r1
 80177fe:	603a      	str	r2, [r7, #0]
 8017800:	220e      	movs	r2, #14
 8017802:	fb02 f208 	mul.w	r2, r2, r8
 8017806:	3203      	adds	r2, #3
 8017808:	f022 0203 	bic.w	r2, r2, #3
 801780c:	4411      	add	r1, r2
 801780e:	440b      	add	r3, r1
 8017810:	491b      	ldr	r1, [pc, #108]	; (8017880 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 8017812:	600b      	str	r3, [r1, #0]
 8017814:	491b      	ldr	r1, [pc, #108]	; (8017884 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 8017816:	2300      	movs	r3, #0
 8017818:	800b      	strh	r3, [r1, #0]
 801781a:	491b      	ldr	r1, [pc, #108]	; (8017888 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801781c:	6809      	ldr	r1, [r1, #0]
 801781e:	eba1 010e 	sub.w	r1, r1, lr
 8017822:	eba1 010c 	sub.w	r1, r1, ip
 8017826:	1a8a      	subs	r2, r1, r2
 8017828:	4918      	ldr	r1, [pc, #96]	; (801788c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801782a:	600a      	str	r2, [r1, #0]
 801782c:	4a18      	ldr	r2, [pc, #96]	; (8017890 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801782e:	469c      	mov	ip, r3
 8017830:	8013      	strh	r3, [r2, #0]
 8017832:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017836:	4283      	cmp	r3, r0
 8017838:	d10d      	bne.n	8017856 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801783a:	8835      	ldrh	r5, [r6, #0]
 801783c:	6838      	ldr	r0, [r7, #0]
 801783e:	2300      	movs	r3, #0
 8017840:	240e      	movs	r4, #14
 8017842:	429d      	cmp	r5, r3
 8017844:	d90f      	bls.n	8017866 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 8017846:	fb04 0203 	mla	r2, r4, r3, r0
 801784a:	3301      	adds	r3, #1
 801784c:	7b11      	ldrb	r1, [r2, #12]
 801784e:	f36f 1145 	bfc	r1, #5, #1
 8017852:	7311      	strb	r1, [r2, #12]
 8017854:	e7f5      	b.n	8017842 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 8017856:	682a      	ldr	r2, [r5, #0]
 8017858:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801785c:	6822      	ldr	r2, [r4, #0]
 801785e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8017862:	3301      	adds	r3, #1
 8017864:	e7e7      	b.n	8017836 <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 8017866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801786a:	bf00      	nop
 801786c:	2000a0a0 	.word	0x2000a0a0
 8017870:	2000a0bc 	.word	0x2000a0bc
 8017874:	2000a0c0 	.word	0x2000a0c0
 8017878:	2000a0b4 	.word	0x2000a0b4
 801787c:	2000a0a4 	.word	0x2000a0a4
 8017880:	2000a0ac 	.word	0x2000a0ac
 8017884:	2000a0be 	.word	0x2000a0be
 8017888:	2000a0a8 	.word	0x2000a0a8
 801788c:	2000a0b8 	.word	0x2000a0b8
 8017890:	2000a0b0 	.word	0x2000a0b0

08017894 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8017894:	b510      	push	{r4, lr}
 8017896:	4b10      	ldr	r3, [pc, #64]	; (80178d8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	b9db      	cbnz	r3, 80178d4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801789c:	b1d1      	cbz	r1, 80178d4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801789e:	4b0f      	ldr	r3, [pc, #60]	; (80178dc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 80178a0:	801a      	strh	r2, [r3, #0]
 80178a2:	4b0f      	ldr	r3, [pc, #60]	; (80178e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 80178a4:	881b      	ldrh	r3, [r3, #0]
 80178a6:	b292      	uxth	r2, r2
 80178a8:	240e      	movs	r4, #14
 80178aa:	4413      	add	r3, r2
 80178ac:	4362      	muls	r2, r4
 80178ae:	2406      	movs	r4, #6
 80178b0:	fb04 2203 	mla	r2, r4, r3, r2
 80178b4:	428a      	cmp	r2, r1
 80178b6:	d305      	bcc.n	80178c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 80178b8:	4b0a      	ldr	r3, [pc, #40]	; (80178e4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 80178ba:	4a0b      	ldr	r2, [pc, #44]	; (80178e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 80178bc:	480b      	ldr	r0, [pc, #44]	; (80178ec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 80178be:	2137      	movs	r1, #55	; 0x37
 80178c0:	f00b ff40 	bl	8023744 <__assert_func>
 80178c4:	4b0a      	ldr	r3, [pc, #40]	; (80178f0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 80178c6:	6019      	str	r1, [r3, #0]
 80178c8:	4b0a      	ldr	r3, [pc, #40]	; (80178f4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 80178ca:	6018      	str	r0, [r3, #0]
 80178cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178d0:	f7ff bf78 	b.w	80177c4 <_ZN8touchgfx6Bitmap10clearCacheEv>
 80178d4:	bd10      	pop	{r4, pc}
 80178d6:	bf00      	nop
 80178d8:	2000a0ac 	.word	0x2000a0ac
 80178dc:	2000a0c0 	.word	0x2000a0c0
 80178e0:	2000a0bc 	.word	0x2000a0bc
 80178e4:	08027cc9 	.word	0x08027cc9
 80178e8:	08027d22 	.word	0x08027d22
 80178ec:	08027ca4 	.word	0x08027ca4
 80178f0:	2000a0a8 	.word	0x2000a0a8
 80178f4:	2000a0a0 	.word	0x2000a0a0

080178f8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80178f8:	b470      	push	{r4, r5, r6}
 80178fa:	4c07      	ldr	r4, [pc, #28]	; (8017918 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80178fc:	6826      	ldr	r6, [r4, #0]
 80178fe:	4605      	mov	r5, r0
 8017900:	4610      	mov	r0, r2
 8017902:	9a03      	ldr	r2, [sp, #12]
 8017904:	b936      	cbnz	r6, 8017914 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8017906:	6025      	str	r5, [r4, #0]
 8017908:	4c04      	ldr	r4, [pc, #16]	; (801791c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801790a:	8021      	strh	r1, [r4, #0]
 801790c:	bc70      	pop	{r4, r5, r6}
 801790e:	4619      	mov	r1, r3
 8017910:	f7ff bfc0 	b.w	8017894 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8017914:	bc70      	pop	{r4, r5, r6}
 8017916:	4770      	bx	lr
 8017918:	2000a0c4 	.word	0x2000a0c4
 801791c:	2000a0bc 	.word	0x2000a0bc

08017920 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8017920:	b508      	push	{r3, lr}
 8017922:	4b14      	ldr	r3, [pc, #80]	; (8017974 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8017924:	6819      	ldr	r1, [r3, #0]
 8017926:	b931      	cbnz	r1, 8017936 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8017928:	4b13      	ldr	r3, [pc, #76]	; (8017978 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801792a:	4a14      	ldr	r2, [pc, #80]	; (801797c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801792c:	4814      	ldr	r0, [pc, #80]	; (8017980 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801792e:	f240 3187 	movw	r1, #903	; 0x387
 8017932:	f00b ff07 	bl	8023744 <__assert_func>
 8017936:	4a13      	ldr	r2, [pc, #76]	; (8017984 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8017938:	8803      	ldrh	r3, [r0, #0]
 801793a:	8812      	ldrh	r2, [r2, #0]
 801793c:	4293      	cmp	r3, r2
 801793e:	d204      	bcs.n	801794a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8017940:	2214      	movs	r2, #20
 8017942:	fb02 1303 	mla	r3, r2, r3, r1
 8017946:	8918      	ldrh	r0, [r3, #8]
 8017948:	bd08      	pop	{r3, pc}
 801794a:	490f      	ldr	r1, [pc, #60]	; (8017988 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801794c:	8809      	ldrh	r1, [r1, #0]
 801794e:	4411      	add	r1, r2
 8017950:	428b      	cmp	r3, r1
 8017952:	da06      	bge.n	8017962 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8017954:	1a9b      	subs	r3, r3, r2
 8017956:	4a0d      	ldr	r2, [pc, #52]	; (801798c <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8017958:	6812      	ldr	r2, [r2, #0]
 801795a:	210e      	movs	r1, #14
 801795c:	fb01 2303 	mla	r3, r1, r3, r2
 8017960:	e7f1      	b.n	8017946 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8017962:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017966:	4293      	cmp	r3, r2
 8017968:	bf0a      	itet	eq
 801796a:	4b09      	ldreq	r3, [pc, #36]	; (8017990 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801796c:	2000      	movne	r0, #0
 801796e:	8818      	ldrheq	r0, [r3, #0]
 8017970:	e7ea      	b.n	8017948 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8017972:	bf00      	nop
 8017974:	2000a0c4 	.word	0x2000a0c4
 8017978:	08027110 	.word	0x08027110
 801797c:	08027dcf 	.word	0x08027dcf
 8017980:	08027ca4 	.word	0x08027ca4
 8017984:	2000a0bc 	.word	0x2000a0bc
 8017988:	2000a0c0 	.word	0x2000a0c0
 801798c:	2000a0a4 	.word	0x2000a0a4
 8017990:	2000a030 	.word	0x2000a030

08017994 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8017994:	b508      	push	{r3, lr}
 8017996:	4b14      	ldr	r3, [pc, #80]	; (80179e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8017998:	6819      	ldr	r1, [r3, #0]
 801799a:	b931      	cbnz	r1, 80179aa <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801799c:	4b13      	ldr	r3, [pc, #76]	; (80179ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801799e:	4a14      	ldr	r2, [pc, #80]	; (80179f0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80179a0:	4814      	ldr	r0, [pc, #80]	; (80179f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80179a2:	f240 319b 	movw	r1, #923	; 0x39b
 80179a6:	f00b fecd 	bl	8023744 <__assert_func>
 80179aa:	4a13      	ldr	r2, [pc, #76]	; (80179f8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80179ac:	8803      	ldrh	r3, [r0, #0]
 80179ae:	8812      	ldrh	r2, [r2, #0]
 80179b0:	4293      	cmp	r3, r2
 80179b2:	d204      	bcs.n	80179be <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 80179b4:	2214      	movs	r2, #20
 80179b6:	fb02 1303 	mla	r3, r2, r3, r1
 80179ba:	8958      	ldrh	r0, [r3, #10]
 80179bc:	bd08      	pop	{r3, pc}
 80179be:	490f      	ldr	r1, [pc, #60]	; (80179fc <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 80179c0:	8809      	ldrh	r1, [r1, #0]
 80179c2:	4411      	add	r1, r2
 80179c4:	428b      	cmp	r3, r1
 80179c6:	da06      	bge.n	80179d6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 80179c8:	1a9b      	subs	r3, r3, r2
 80179ca:	4a0d      	ldr	r2, [pc, #52]	; (8017a00 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 80179cc:	6812      	ldr	r2, [r2, #0]
 80179ce:	210e      	movs	r1, #14
 80179d0:	fb01 2303 	mla	r3, r1, r3, r2
 80179d4:	e7f1      	b.n	80179ba <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 80179d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80179da:	4293      	cmp	r3, r2
 80179dc:	bf0a      	itet	eq
 80179de:	4b09      	ldreq	r3, [pc, #36]	; (8017a04 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 80179e0:	2000      	movne	r0, #0
 80179e2:	8818      	ldrheq	r0, [r3, #0]
 80179e4:	e7ea      	b.n	80179bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 80179e6:	bf00      	nop
 80179e8:	2000a0c4 	.word	0x2000a0c4
 80179ec:	08027110 	.word	0x08027110
 80179f0:	08027dfb 	.word	0x08027dfb
 80179f4:	08027ca4 	.word	0x08027ca4
 80179f8:	2000a0bc 	.word	0x2000a0bc
 80179fc:	2000a0c0 	.word	0x2000a0c0
 8017a00:	2000a0a4 	.word	0x2000a0a4
 8017a04:	2000a032 	.word	0x2000a032

08017a08 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8017a08:	b510      	push	{r4, lr}
 8017a0a:	4b23      	ldr	r3, [pc, #140]	; (8017a98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8017a0c:	681c      	ldr	r4, [r3, #0]
 8017a0e:	b934      	cbnz	r4, 8017a1e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8017a10:	4b22      	ldr	r3, [pc, #136]	; (8017a9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8017a12:	4a23      	ldr	r2, [pc, #140]	; (8017aa0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8017a14:	4823      	ldr	r0, [pc, #140]	; (8017aa4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8017a16:	f240 31af 	movw	r1, #943	; 0x3af
 8017a1a:	f00b fe93 	bl	8023744 <__assert_func>
 8017a1e:	4a22      	ldr	r2, [pc, #136]	; (8017aa8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8017a20:	880b      	ldrh	r3, [r1, #0]
 8017a22:	8812      	ldrh	r2, [r2, #0]
 8017a24:	4293      	cmp	r3, r2
 8017a26:	d211      	bcs.n	8017a4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8017a28:	2214      	movs	r2, #20
 8017a2a:	fb02 4303 	mla	r3, r2, r3, r4
 8017a2e:	8a1a      	ldrh	r2, [r3, #16]
 8017a30:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8017a34:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8017a38:	8a5b      	ldrh	r3, [r3, #18]
 8017a3a:	8004      	strh	r4, [r0, #0]
 8017a3c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8017a40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017a44:	8041      	strh	r1, [r0, #2]
 8017a46:	8082      	strh	r2, [r0, #4]
 8017a48:	80c3      	strh	r3, [r0, #6]
 8017a4a:	e00e      	b.n	8017a6a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8017a4c:	4917      	ldr	r1, [pc, #92]	; (8017aac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8017a4e:	8809      	ldrh	r1, [r1, #0]
 8017a50:	4411      	add	r1, r2
 8017a52:	428b      	cmp	r3, r1
 8017a54:	da0a      	bge.n	8017a6c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 8017a56:	1a9b      	subs	r3, r3, r2
 8017a58:	4a15      	ldr	r2, [pc, #84]	; (8017ab0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8017a5a:	6812      	ldr	r2, [r2, #0]
 8017a5c:	210e      	movs	r1, #14
 8017a5e:	fb01 2303 	mla	r3, r1, r3, r2
 8017a62:	681a      	ldr	r2, [r3, #0]
 8017a64:	6002      	str	r2, [r0, #0]
 8017a66:	685a      	ldr	r2, [r3, #4]
 8017a68:	6042      	str	r2, [r0, #4]
 8017a6a:	bd10      	pop	{r4, pc}
 8017a6c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017a70:	4293      	cmp	r3, r2
 8017a72:	d10b      	bne.n	8017a8c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8017a74:	4b0f      	ldr	r3, [pc, #60]	; (8017ab4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8017a76:	f9b3 1000 	ldrsh.w	r1, [r3]
 8017a7a:	4b0f      	ldr	r3, [pc, #60]	; (8017ab8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8017a7c:	8081      	strh	r1, [r0, #4]
 8017a7e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017a82:	80c2      	strh	r2, [r0, #6]
 8017a84:	2300      	movs	r3, #0
 8017a86:	8003      	strh	r3, [r0, #0]
 8017a88:	8043      	strh	r3, [r0, #2]
 8017a8a:	e7ee      	b.n	8017a6a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8017a8c:	2300      	movs	r3, #0
 8017a8e:	8003      	strh	r3, [r0, #0]
 8017a90:	8043      	strh	r3, [r0, #2]
 8017a92:	8083      	strh	r3, [r0, #4]
 8017a94:	e7d8      	b.n	8017a48 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 8017a96:	bf00      	nop
 8017a98:	2000a0c4 	.word	0x2000a0c4
 8017a9c:	08027110 	.word	0x08027110
 8017aa0:	08027d68 	.word	0x08027d68
 8017aa4:	08027ca4 	.word	0x08027ca4
 8017aa8:	2000a0bc 	.word	0x2000a0bc
 8017aac:	2000a0c0 	.word	0x2000a0c0
 8017ab0:	2000a0a4 	.word	0x2000a0a4
 8017ab4:	2000a030 	.word	0x2000a030
 8017ab8:	2000a032 	.word	0x2000a032

08017abc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8017abc:	4b18      	ldr	r3, [pc, #96]	; (8017b20 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	b34b      	cbz	r3, 8017b16 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8017ac2:	4a18      	ldr	r2, [pc, #96]	; (8017b24 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8017ac4:	8800      	ldrh	r0, [r0, #0]
 8017ac6:	8812      	ldrh	r2, [r2, #0]
 8017ac8:	4290      	cmp	r0, r2
 8017aca:	d211      	bcs.n	8017af0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8017acc:	2214      	movs	r2, #20
 8017ace:	fb02 3300 	mla	r3, r2, r0, r3
 8017ad2:	8a1a      	ldrh	r2, [r3, #16]
 8017ad4:	8919      	ldrh	r1, [r3, #8]
 8017ad6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8017ada:	428a      	cmp	r2, r1
 8017adc:	db1d      	blt.n	8017b1a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8017ade:	8a58      	ldrh	r0, [r3, #18]
 8017ae0:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8017ae4:	895b      	ldrh	r3, [r3, #10]
 8017ae6:	4298      	cmp	r0, r3
 8017ae8:	bfac      	ite	ge
 8017aea:	2000      	movge	r0, #0
 8017aec:	2001      	movlt	r0, #1
 8017aee:	4770      	bx	lr
 8017af0:	4b0d      	ldr	r3, [pc, #52]	; (8017b28 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8017af2:	881b      	ldrh	r3, [r3, #0]
 8017af4:	4413      	add	r3, r2
 8017af6:	4298      	cmp	r0, r3
 8017af8:	da0d      	bge.n	8017b16 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8017afa:	4b0c      	ldr	r3, [pc, #48]	; (8017b2c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8017afc:	681b      	ldr	r3, [r3, #0]
 8017afe:	1a80      	subs	r0, r0, r2
 8017b00:	220e      	movs	r2, #14
 8017b02:	fb02 3300 	mla	r3, r2, r0, r3
 8017b06:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8017b0a:	891a      	ldrh	r2, [r3, #8]
 8017b0c:	4291      	cmp	r1, r2
 8017b0e:	db04      	blt.n	8017b1a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8017b10:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8017b14:	e7e6      	b.n	8017ae4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 8017b16:	2000      	movs	r0, #0
 8017b18:	4770      	bx	lr
 8017b1a:	2001      	movs	r0, #1
 8017b1c:	4770      	bx	lr
 8017b1e:	bf00      	nop
 8017b20:	2000a0c4 	.word	0x2000a0c4
 8017b24:	2000a0bc 	.word	0x2000a0bc
 8017b28:	2000a0c0 	.word	0x2000a0c0
 8017b2c:	2000a0a4 	.word	0x2000a0a4

08017b30 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8017b30:	b508      	push	{r3, lr}
 8017b32:	4b12      	ldr	r3, [pc, #72]	; (8017b7c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8017b34:	6819      	ldr	r1, [r3, #0]
 8017b36:	b931      	cbnz	r1, 8017b46 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8017b38:	4b11      	ldr	r3, [pc, #68]	; (8017b80 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8017b3a:	4a12      	ldr	r2, [pc, #72]	; (8017b84 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8017b3c:	4812      	ldr	r0, [pc, #72]	; (8017b88 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8017b3e:	f240 31d3 	movw	r1, #979	; 0x3d3
 8017b42:	f00b fdff 	bl	8023744 <__assert_func>
 8017b46:	8803      	ldrh	r3, [r0, #0]
 8017b48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017b4c:	4293      	cmp	r3, r2
 8017b4e:	d012      	beq.n	8017b76 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8017b50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017b54:	4293      	cmp	r3, r2
 8017b56:	d103      	bne.n	8017b60 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8017b58:	4b0c      	ldr	r3, [pc, #48]	; (8017b8c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8017b5e:	bd08      	pop	{r3, pc}
 8017b60:	4a0b      	ldr	r2, [pc, #44]	; (8017b90 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8017b62:	6812      	ldr	r2, [r2, #0]
 8017b64:	b11a      	cbz	r2, 8017b6e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8017b66:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8017b6a:	2800      	cmp	r0, #0
 8017b6c:	d1f7      	bne.n	8017b5e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8017b6e:	2214      	movs	r2, #20
 8017b70:	4353      	muls	r3, r2
 8017b72:	58c8      	ldr	r0, [r1, r3]
 8017b74:	e7f3      	b.n	8017b5e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8017b76:	2000      	movs	r0, #0
 8017b78:	e7f1      	b.n	8017b5e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8017b7a:	bf00      	nop
 8017b7c:	2000a0c4 	.word	0x2000a0c4
 8017b80:	08027110 	.word	0x08027110
 8017b84:	08027d9e 	.word	0x08027d9e
 8017b88:	08027ca4 	.word	0x08027ca4
 8017b8c:	2000a03c 	.word	0x2000a03c
 8017b90:	2000a0a0 	.word	0x2000a0a0

08017b94 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8017b94:	8802      	ldrh	r2, [r0, #0]
 8017b96:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8017b9a:	429a      	cmp	r2, r3
 8017b9c:	d845      	bhi.n	8017c2a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8017b9e:	4b24      	ldr	r3, [pc, #144]	; (8017c30 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8017ba0:	8818      	ldrh	r0, [r3, #0]
 8017ba2:	4282      	cmp	r2, r0
 8017ba4:	d221      	bcs.n	8017bea <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 8017ba6:	4b23      	ldr	r3, [pc, #140]	; (8017c34 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8017ba8:	6819      	ldr	r1, [r3, #0]
 8017baa:	2314      	movs	r3, #20
 8017bac:	fb03 1302 	mla	r3, r3, r2, r1
 8017bb0:	6858      	ldr	r0, [r3, #4]
 8017bb2:	2800      	cmp	r0, #0
 8017bb4:	d03a      	beq.n	8017c2c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8017bb6:	4920      	ldr	r1, [pc, #128]	; (8017c38 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8017bb8:	6809      	ldr	r1, [r1, #0]
 8017bba:	2900      	cmp	r1, #0
 8017bbc:	d036      	beq.n	8017c2c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8017bbe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017bc2:	2900      	cmp	r1, #0
 8017bc4:	d032      	beq.n	8017c2c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8017bc6:	891a      	ldrh	r2, [r3, #8]
 8017bc8:	8958      	ldrh	r0, [r3, #10]
 8017bca:	4350      	muls	r0, r2
 8017bcc:	7c5a      	ldrb	r2, [r3, #17]
 8017bce:	7cdb      	ldrb	r3, [r3, #19]
 8017bd0:	0952      	lsrs	r2, r2, #5
 8017bd2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8017bd6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8017bda:	2b0b      	cmp	r3, #11
 8017bdc:	bf18      	it	ne
 8017bde:	0040      	lslne	r0, r0, #1
 8017be0:	3003      	adds	r0, #3
 8017be2:	f020 0003 	bic.w	r0, r0, #3
 8017be6:	4408      	add	r0, r1
 8017be8:	4770      	bx	lr
 8017bea:	4b14      	ldr	r3, [pc, #80]	; (8017c3c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 8017bec:	881b      	ldrh	r3, [r3, #0]
 8017bee:	4403      	add	r3, r0
 8017bf0:	429a      	cmp	r2, r3
 8017bf2:	da1a      	bge.n	8017c2a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8017bf4:	4b12      	ldr	r3, [pc, #72]	; (8017c40 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	1a10      	subs	r0, r2, r0
 8017bfa:	210e      	movs	r1, #14
 8017bfc:	fb01 3000 	mla	r0, r1, r0, r3
 8017c00:	7b03      	ldrb	r3, [r0, #12]
 8017c02:	f003 031f 	and.w	r3, r3, #31
 8017c06:	2b0b      	cmp	r3, #11
 8017c08:	d10b      	bne.n	8017c22 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8017c0a:	8903      	ldrh	r3, [r0, #8]
 8017c0c:	8940      	ldrh	r0, [r0, #10]
 8017c0e:	4358      	muls	r0, r3
 8017c10:	4b09      	ldr	r3, [pc, #36]	; (8017c38 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8017c12:	6819      	ldr	r1, [r3, #0]
 8017c14:	3003      	adds	r0, #3
 8017c16:	f020 0303 	bic.w	r3, r0, #3
 8017c1a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8017c1e:	4418      	add	r0, r3
 8017c20:	4770      	bx	lr
 8017c22:	2b0d      	cmp	r3, #13
 8017c24:	d101      	bne.n	8017c2a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8017c26:	300d      	adds	r0, #13
 8017c28:	4770      	bx	lr
 8017c2a:	2000      	movs	r0, #0
 8017c2c:	4770      	bx	lr
 8017c2e:	bf00      	nop
 8017c30:	2000a0bc 	.word	0x2000a0bc
 8017c34:	2000a0c4 	.word	0x2000a0c4
 8017c38:	2000a0a0 	.word	0x2000a0a0
 8017c3c:	2000a0c0 	.word	0x2000a0c0
 8017c40:	2000a0a4 	.word	0x2000a0a4

08017c44 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8017c44:	4b19      	ldr	r3, [pc, #100]	; (8017cac <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8017c46:	6819      	ldr	r1, [r3, #0]
 8017c48:	8803      	ldrh	r3, [r0, #0]
 8017c4a:	b1e9      	cbz	r1, 8017c88 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8017c4c:	4a18      	ldr	r2, [pc, #96]	; (8017cb0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8017c4e:	8812      	ldrh	r2, [r2, #0]
 8017c50:	429a      	cmp	r2, r3
 8017c52:	d90a      	bls.n	8017c6a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8017c54:	2214      	movs	r2, #20
 8017c56:	fb02 1303 	mla	r3, r2, r3, r1
 8017c5a:	7c58      	ldrb	r0, [r3, #17]
 8017c5c:	0942      	lsrs	r2, r0, #5
 8017c5e:	7cd8      	ldrb	r0, [r3, #19]
 8017c60:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8017c64:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8017c68:	4770      	bx	lr
 8017c6a:	4912      	ldr	r1, [pc, #72]	; (8017cb4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 8017c6c:	8809      	ldrh	r1, [r1, #0]
 8017c6e:	4411      	add	r1, r2
 8017c70:	428b      	cmp	r3, r1
 8017c72:	da09      	bge.n	8017c88 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8017c74:	1a9b      	subs	r3, r3, r2
 8017c76:	4a10      	ldr	r2, [pc, #64]	; (8017cb8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 8017c78:	6812      	ldr	r2, [r2, #0]
 8017c7a:	210e      	movs	r1, #14
 8017c7c:	fb01 2303 	mla	r3, r1, r3, r2
 8017c80:	7b18      	ldrb	r0, [r3, #12]
 8017c82:	f000 001f 	and.w	r0, r0, #31
 8017c86:	4770      	bx	lr
 8017c88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017c8c:	4293      	cmp	r3, r2
 8017c8e:	d10a      	bne.n	8017ca6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 8017c90:	4b0a      	ldr	r3, [pc, #40]	; (8017cbc <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017c98:	b10a      	cbz	r2, 8017c9e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8017c9a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017c9c:	b900      	cbnz	r0, 8017ca0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8017c9e:	6898      	ldr	r0, [r3, #8]
 8017ca0:	6803      	ldr	r3, [r0, #0]
 8017ca2:	6a1b      	ldr	r3, [r3, #32]
 8017ca4:	4718      	bx	r3
 8017ca6:	2000      	movs	r0, #0
 8017ca8:	4770      	bx	lr
 8017caa:	bf00      	nop
 8017cac:	2000a0c4 	.word	0x2000a0c4
 8017cb0:	2000a0bc 	.word	0x2000a0bc
 8017cb4:	2000a0c0 	.word	0x2000a0c0
 8017cb8:	2000a0a4 	.word	0x2000a0a4
 8017cbc:	2000a03c 	.word	0x2000a03c

08017cc0 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8017cc0:	2010      	movs	r0, #16
 8017cc2:	4770      	bx	lr

08017cc4 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8017cc4:	2000      	movs	r0, #0
 8017cc6:	4770      	bx	lr

08017cc8 <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 8017cc8:	00d2      	lsls	r2, r2, #3
 8017cca:	0209      	lsls	r1, r1, #8
 8017ccc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8017cd0:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 8017cd4:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8017cd8:	4310      	orrs	r0, r2
 8017cda:	4770      	bx	lr

08017cdc <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 8017cdc:	0a09      	lsrs	r1, r1, #8
 8017cde:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 8017ce2:	4770      	bx	lr

08017ce4 <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 8017ce4:	08c9      	lsrs	r1, r1, #3
 8017ce6:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 8017cea:	4770      	bx	lr

08017cec <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 8017cec:	00c9      	lsls	r1, r1, #3
 8017cee:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 8017cf2:	4770      	bx	lr

08017cf4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8017cf4:	2bff      	cmp	r3, #255	; 0xff
 8017cf6:	d050      	beq.n	8017d9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8017cf8:	2a0b      	cmp	r2, #11
 8017cfa:	d04a      	beq.n	8017d92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8017cfc:	d80e      	bhi.n	8017d1c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8017cfe:	2a03      	cmp	r2, #3
 8017d00:	d03f      	beq.n	8017d82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8017d02:	d804      	bhi.n	8017d0e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8017d04:	2a01      	cmp	r2, #1
 8017d06:	d03e      	beq.n	8017d86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8017d08:	d93f      	bls.n	8017d8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8017d0a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8017d0c:	4770      	bx	lr
 8017d0e:	2a09      	cmp	r2, #9
 8017d10:	d03f      	beq.n	8017d92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8017d12:	d83c      	bhi.n	8017d8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8017d14:	2a08      	cmp	r2, #8
 8017d16:	d03a      	beq.n	8017d8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8017d18:	2000      	movs	r0, #0
 8017d1a:	4770      	bx	lr
 8017d1c:	2a2f      	cmp	r2, #47	; 0x2f
 8017d1e:	d024      	beq.n	8017d6a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8017d20:	d80d      	bhi.n	8017d3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8017d22:	2a2d      	cmp	r2, #45	; 0x2d
 8017d24:	d014      	beq.n	8017d50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8017d26:	d826      	bhi.n	8017d76 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8017d28:	2a2c      	cmp	r2, #44	; 0x2c
 8017d2a:	d1f5      	bne.n	8017d18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017d2c:	684b      	ldr	r3, [r1, #4]
 8017d2e:	781b      	ldrb	r3, [r3, #0]
 8017d30:	2b01      	cmp	r3, #1
 8017d32:	d018      	beq.n	8017d66 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8017d34:	d323      	bcc.n	8017d7e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8017d36:	2b02      	cmp	r3, #2
 8017d38:	d1ee      	bne.n	8017d18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017d3a:	6880      	ldr	r0, [r0, #8]
 8017d3c:	4770      	bx	lr
 8017d3e:	2a31      	cmp	r2, #49	; 0x31
 8017d40:	d004      	beq.n	8017d4c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8017d42:	d328      	bcc.n	8017d96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8017d44:	2a32      	cmp	r2, #50	; 0x32
 8017d46:	d026      	beq.n	8017d96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8017d48:	2a33      	cmp	r2, #51	; 0x33
 8017d4a:	d1e5      	bne.n	8017d18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017d4c:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8017d4e:	4770      	bx	lr
 8017d50:	684b      	ldr	r3, [r1, #4]
 8017d52:	781b      	ldrb	r3, [r3, #0]
 8017d54:	2b01      	cmp	r3, #1
 8017d56:	d004      	beq.n	8017d62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8017d58:	d30b      	bcc.n	8017d72 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8017d5a:	2b02      	cmp	r3, #2
 8017d5c:	d1dc      	bne.n	8017d18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017d5e:	6900      	ldr	r0, [r0, #16]
 8017d60:	4770      	bx	lr
 8017d62:	6a00      	ldr	r0, [r0, #32]
 8017d64:	4770      	bx	lr
 8017d66:	6980      	ldr	r0, [r0, #24]
 8017d68:	4770      	bx	lr
 8017d6a:	684b      	ldr	r3, [r1, #4]
 8017d6c:	781b      	ldrb	r3, [r3, #0]
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	d1d2      	bne.n	8017d18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017d72:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8017d74:	4770      	bx	lr
 8017d76:	684b      	ldr	r3, [r1, #4]
 8017d78:	781b      	ldrb	r3, [r3, #0]
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d1cc      	bne.n	8017d18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017d7e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8017d80:	4770      	bx	lr
 8017d82:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8017d84:	4770      	bx	lr
 8017d86:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8017d88:	4770      	bx	lr
 8017d8a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8017d8c:	4770      	bx	lr
 8017d8e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8017d90:	4770      	bx	lr
 8017d92:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8017d94:	4770      	bx	lr
 8017d96:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8017d98:	4770      	bx	lr
 8017d9a:	2a0b      	cmp	r2, #11
 8017d9c:	d049      	beq.n	8017e32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8017d9e:	d80e      	bhi.n	8017dbe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8017da0:	2a03      	cmp	r2, #3
 8017da2:	d040      	beq.n	8017e26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8017da4:	d804      	bhi.n	8017db0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8017da6:	2a01      	cmp	r2, #1
 8017da8:	d03f      	beq.n	8017e2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8017daa:	d940      	bls.n	8017e2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8017dac:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8017dae:	4770      	bx	lr
 8017db0:	2a09      	cmp	r2, #9
 8017db2:	d03e      	beq.n	8017e32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8017db4:	d801      	bhi.n	8017dba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8017db6:	2a08      	cmp	r2, #8
 8017db8:	d1ae      	bne.n	8017d18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017dba:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8017dbc:	4770      	bx	lr
 8017dbe:	2a2f      	cmp	r2, #47	; 0x2f
 8017dc0:	d024      	beq.n	8017e0c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8017dc2:	d80d      	bhi.n	8017de0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8017dc4:	2a2d      	cmp	r2, #45	; 0x2d
 8017dc6:	d014      	beq.n	8017df2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8017dc8:	d826      	bhi.n	8017e18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8017dca:	2a2c      	cmp	r2, #44	; 0x2c
 8017dcc:	d1a4      	bne.n	8017d18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017dce:	684b      	ldr	r3, [r1, #4]
 8017dd0:	781b      	ldrb	r3, [r3, #0]
 8017dd2:	2b01      	cmp	r3, #1
 8017dd4:	d018      	beq.n	8017e08 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8017dd6:	d324      	bcc.n	8017e22 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8017dd8:	2b02      	cmp	r3, #2
 8017dda:	d19d      	bne.n	8017d18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017ddc:	68c0      	ldr	r0, [r0, #12]
 8017dde:	4770      	bx	lr
 8017de0:	2a31      	cmp	r2, #49	; 0x31
 8017de2:	d004      	beq.n	8017dee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8017de4:	d327      	bcc.n	8017e36 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8017de6:	2a32      	cmp	r2, #50	; 0x32
 8017de8:	d025      	beq.n	8017e36 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8017dea:	2a33      	cmp	r2, #51	; 0x33
 8017dec:	d194      	bne.n	8017d18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017dee:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8017df0:	4770      	bx	lr
 8017df2:	684b      	ldr	r3, [r1, #4]
 8017df4:	781b      	ldrb	r3, [r3, #0]
 8017df6:	2b01      	cmp	r3, #1
 8017df8:	d004      	beq.n	8017e04 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8017dfa:	d30b      	bcc.n	8017e14 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8017dfc:	2b02      	cmp	r3, #2
 8017dfe:	d18b      	bne.n	8017d18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017e00:	6940      	ldr	r0, [r0, #20]
 8017e02:	4770      	bx	lr
 8017e04:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8017e06:	4770      	bx	lr
 8017e08:	69c0      	ldr	r0, [r0, #28]
 8017e0a:	4770      	bx	lr
 8017e0c:	684b      	ldr	r3, [r1, #4]
 8017e0e:	781b      	ldrb	r3, [r3, #0]
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d181      	bne.n	8017d18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017e14:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8017e16:	4770      	bx	lr
 8017e18:	684b      	ldr	r3, [r1, #4]
 8017e1a:	781b      	ldrb	r3, [r3, #0]
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	f47f af7b 	bne.w	8017d18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017e22:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8017e24:	4770      	bx	lr
 8017e26:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8017e28:	4770      	bx	lr
 8017e2a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8017e2c:	4770      	bx	lr
 8017e2e:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8017e30:	4770      	bx	lr
 8017e32:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8017e34:	4770      	bx	lr
 8017e36:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8017e38:	4770      	bx	lr

08017e3a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017e3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e3e:	b087      	sub	sp, #28
 8017e40:	9815      	ldr	r0, [sp, #84]	; 0x54
 8017e42:	9205      	str	r2, [sp, #20]
 8017e44:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8017e48:	9202      	str	r2, [sp, #8]
 8017e4a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8017e4e:	9101      	str	r1, [sp, #4]
 8017e50:	6841      	ldr	r1, [r0, #4]
 8017e52:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8017e56:	fb01 2404 	mla	r4, r1, r4, r2
 8017e5a:	6802      	ldr	r2, [r0, #0]
 8017e5c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8017e60:	f8de 2000 	ldr.w	r2, [lr]
 8017e64:	9203      	str	r2, [sp, #12]
 8017e66:	f8de 2004 	ldr.w	r2, [lr, #4]
 8017e6a:	3204      	adds	r2, #4
 8017e6c:	9204      	str	r2, [sp, #16]
 8017e6e:	9a02      	ldr	r2, [sp, #8]
 8017e70:	43d6      	mvns	r6, r2
 8017e72:	b2f6      	uxtb	r6, r6
 8017e74:	9a01      	ldr	r2, [sp, #4]
 8017e76:	2a00      	cmp	r2, #0
 8017e78:	dc03      	bgt.n	8017e82 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8017e7a:	9a05      	ldr	r2, [sp, #20]
 8017e7c:	2a00      	cmp	r2, #0
 8017e7e:	f340 8129 	ble.w	80180d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017e82:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017e84:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8017e88:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8017e8c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8017e90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017e92:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	dd0e      	ble.n	8017eb8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017e9a:	1408      	asrs	r0, r1, #16
 8017e9c:	d405      	bmi.n	8017eaa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017e9e:	4560      	cmp	r0, ip
 8017ea0:	da03      	bge.n	8017eaa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017ea2:	1410      	asrs	r0, r2, #16
 8017ea4:	d401      	bmi.n	8017eaa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017ea6:	42b8      	cmp	r0, r7
 8017ea8:	db07      	blt.n	8017eba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8017eaa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8017eac:	4401      	add	r1, r0
 8017eae:	9814      	ldr	r0, [sp, #80]	; 0x50
 8017eb0:	3b01      	subs	r3, #1
 8017eb2:	4402      	add	r2, r0
 8017eb4:	3402      	adds	r4, #2
 8017eb6:	e7ee      	b.n	8017e96 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8017eb8:	d071      	beq.n	8017f9e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017eba:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8017ebc:	1e58      	subs	r0, r3, #1
 8017ebe:	fb05 1500 	mla	r5, r5, r0, r1
 8017ec2:	142d      	asrs	r5, r5, #16
 8017ec4:	d45f      	bmi.n	8017f86 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8017ec6:	4565      	cmp	r5, ip
 8017ec8:	da5d      	bge.n	8017f86 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8017eca:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8017ecc:	fb05 2000 	mla	r0, r5, r0, r2
 8017ed0:	1400      	asrs	r0, r0, #16
 8017ed2:	d458      	bmi.n	8017f86 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8017ed4:	42b8      	cmp	r0, r7
 8017ed6:	da56      	bge.n	8017f86 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8017ed8:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8017edc:	4699      	mov	r9, r3
 8017ede:	46a2      	mov	sl, r4
 8017ee0:	f1b9 0f00 	cmp.w	r9, #0
 8017ee4:	dd57      	ble.n	8017f96 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8017ee6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8017eea:	9803      	ldr	r0, [sp, #12]
 8017eec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017ef0:	140d      	asrs	r5, r1, #16
 8017ef2:	fb07 000c 	mla	r0, r7, ip, r0
 8017ef6:	f109 39ff 	add.w	r9, r9, #4294967295
 8017efa:	5d40      	ldrb	r0, [r0, r5]
 8017efc:	9d04      	ldr	r5, [sp, #16]
 8017efe:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8017f02:	f8ba 5000 	ldrh.w	r5, [sl]
 8017f06:	122f      	asrs	r7, r5, #8
 8017f08:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8017f0c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017f10:	fb17 f706 	smulbb	r7, r7, r6
 8017f14:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8017f18:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017f1c:	00ed      	lsls	r5, r5, #3
 8017f1e:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8017f22:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8017f26:	10c7      	asrs	r7, r0, #3
 8017f28:	b2ed      	uxtb	r5, r5
 8017f2a:	00c0      	lsls	r0, r0, #3
 8017f2c:	fb18 f806 	smulbb	r8, r8, r6
 8017f30:	fb15 f506 	smulbb	r5, r5, r6
 8017f34:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8017f38:	b2c0      	uxtb	r0, r0
 8017f3a:	fa1f fc8c 	uxth.w	ip, ip
 8017f3e:	fb07 870b 	mla	r7, r7, fp, r8
 8017f42:	fb00 500b 	mla	r0, r0, fp, r5
 8017f46:	b280      	uxth	r0, r0
 8017f48:	b2bf      	uxth	r7, r7
 8017f4a:	f10c 0501 	add.w	r5, ip, #1
 8017f4e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8017f52:	f107 0801 	add.w	r8, r7, #1
 8017f56:	1c45      	adds	r5, r0, #1
 8017f58:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8017f5c:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8017f60:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8017f62:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8017f66:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8017f6a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8017f6e:	ea4c 0c05 	orr.w	ip, ip, r5
 8017f72:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8017f76:	4401      	add	r1, r0
 8017f78:	9814      	ldr	r0, [sp, #80]	; 0x50
 8017f7a:	ea4c 0c08 	orr.w	ip, ip, r8
 8017f7e:	f82a cb02 	strh.w	ip, [sl], #2
 8017f82:	4402      	add	r2, r0
 8017f84:	e7ac      	b.n	8017ee0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8017f86:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8017f8a:	f04f 0800 	mov.w	r8, #0
 8017f8e:	eb03 0008 	add.w	r0, r3, r8
 8017f92:	2800      	cmp	r0, #0
 8017f94:	dc41      	bgt.n	801801a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8017f96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017f9a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017f9e:	9b01      	ldr	r3, [sp, #4]
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	f340 8097 	ble.w	80180d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017fa6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017faa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017fae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017fb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017fb4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017fb8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017fbc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017fc0:	eef0 6a62 	vmov.f32	s13, s5
 8017fc4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017fc8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017fcc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017fd0:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8017fd4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017fd8:	eef0 6a43 	vmov.f32	s13, s6
 8017fdc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017fe0:	ee12 2a90 	vmov	r2, s5
 8017fe4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017fe8:	fb92 f3f3 	sdiv	r3, r2, r3
 8017fec:	ee13 2a10 	vmov	r2, s6
 8017ff0:	9313      	str	r3, [sp, #76]	; 0x4c
 8017ff2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017ff4:	fb92 f3f3 	sdiv	r3, r2, r3
 8017ff8:	9314      	str	r3, [sp, #80]	; 0x50
 8017ffa:	9b01      	ldr	r3, [sp, #4]
 8017ffc:	9a05      	ldr	r2, [sp, #20]
 8017ffe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018002:	3b01      	subs	r3, #1
 8018004:	9301      	str	r3, [sp, #4]
 8018006:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801800a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801800c:	eeb0 3a67 	vmov.f32	s6, s15
 8018010:	bf08      	it	eq
 8018012:	4613      	moveq	r3, r2
 8018014:	eef0 2a47 	vmov.f32	s5, s14
 8018018:	e72c      	b.n	8017e74 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801801a:	140f      	asrs	r7, r1, #16
 801801c:	d453      	bmi.n	80180c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801801e:	f8de 5008 	ldr.w	r5, [lr, #8]
 8018022:	42bd      	cmp	r5, r7
 8018024:	dd4f      	ble.n	80180c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8018026:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801802a:	d44c      	bmi.n	80180c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801802c:	f8de 000c 	ldr.w	r0, [lr, #12]
 8018030:	4560      	cmp	r0, ip
 8018032:	dd48      	ble.n	80180c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8018034:	9803      	ldr	r0, [sp, #12]
 8018036:	b22d      	sxth	r5, r5
 8018038:	fb0c 0505 	mla	r5, ip, r5, r0
 801803c:	5de8      	ldrb	r0, [r5, r7]
 801803e:	9d04      	ldr	r5, [sp, #16]
 8018040:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8018044:	f06f 0501 	mvn.w	r5, #1
 8018048:	fb05 fb08 	mul.w	fp, r5, r8
 801804c:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8018050:	f834 500b 	ldrh.w	r5, [r4, fp]
 8018054:	122f      	asrs	r7, r5, #8
 8018056:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801805a:	fb17 f706 	smulbb	r7, r7, r6
 801805e:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8018062:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018066:	00ed      	lsls	r5, r5, #3
 8018068:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801806c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8018070:	10c7      	asrs	r7, r0, #3
 8018072:	b2ed      	uxtb	r5, r5
 8018074:	00c0      	lsls	r0, r0, #3
 8018076:	fb19 f906 	smulbb	r9, r9, r6
 801807a:	fb15 f506 	smulbb	r5, r5, r6
 801807e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018082:	b2c0      	uxtb	r0, r0
 8018084:	fa1f fc8c 	uxth.w	ip, ip
 8018088:	fb07 970a 	mla	r7, r7, sl, r9
 801808c:	fb00 500a 	mla	r0, r0, sl, r5
 8018090:	b2bf      	uxth	r7, r7
 8018092:	b280      	uxth	r0, r0
 8018094:	f10c 0501 	add.w	r5, ip, #1
 8018098:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801809c:	f107 0901 	add.w	r9, r7, #1
 80180a0:	1c45      	adds	r5, r0, #1
 80180a2:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80180a6:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 80180aa:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80180ae:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80180b2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80180b6:	ea4c 0c05 	orr.w	ip, ip, r5
 80180ba:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80180be:	ea4c 0c09 	orr.w	ip, ip, r9
 80180c2:	f824 c00b 	strh.w	ip, [r4, fp]
 80180c6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80180c8:	4401      	add	r1, r0
 80180ca:	9814      	ldr	r0, [sp, #80]	; 0x50
 80180cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80180d0:	4402      	add	r2, r0
 80180d2:	e75c      	b.n	8017f8e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80180d4:	b007      	add	sp, #28
 80180d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080180da <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80180da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180de:	b085      	sub	sp, #20
 80180e0:	4693      	mov	fp, r2
 80180e2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80180e4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80180e6:	6870      	ldr	r0, [r6, #4]
 80180e8:	9100      	str	r1, [sp, #0]
 80180ea:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80180ee:	fb00 2404 	mla	r4, r0, r4, r2
 80180f2:	6832      	ldr	r2, [r6, #0]
 80180f4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80180f8:	682a      	ldr	r2, [r5, #0]
 80180fa:	9201      	str	r2, [sp, #4]
 80180fc:	686a      	ldr	r2, [r5, #4]
 80180fe:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8018102:	3204      	adds	r2, #4
 8018104:	9202      	str	r2, [sp, #8]
 8018106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801810a:	9a00      	ldr	r2, [sp, #0]
 801810c:	2a00      	cmp	r2, #0
 801810e:	dc03      	bgt.n	8018118 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8018110:	f1bb 0f00 	cmp.w	fp, #0
 8018114:	f340 80a0 	ble.w	8018258 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8018118:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801811a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801811e:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8018122:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018126:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018128:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801812c:	2b00      	cmp	r3, #0
 801812e:	dd0c      	ble.n	801814a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018130:	1406      	asrs	r6, r0, #16
 8018132:	d405      	bmi.n	8018140 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018134:	454e      	cmp	r6, r9
 8018136:	da03      	bge.n	8018140 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018138:	1416      	asrs	r6, r2, #16
 801813a:	d401      	bmi.n	8018140 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801813c:	4546      	cmp	r6, r8
 801813e:	db05      	blt.n	801814c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018140:	4470      	add	r0, lr
 8018142:	4462      	add	r2, ip
 8018144:	3b01      	subs	r3, #1
 8018146:	3402      	adds	r4, #2
 8018148:	e7f0      	b.n	801812c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801814a:	d00f      	beq.n	801816c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801814c:	1e5e      	subs	r6, r3, #1
 801814e:	fb0e 0706 	mla	r7, lr, r6, r0
 8018152:	143f      	asrs	r7, r7, #16
 8018154:	d541      	bpl.n	80181da <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 8018156:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801815a:	4698      	mov	r8, r3
 801815c:	9603      	str	r6, [sp, #12]
 801815e:	f1b8 0f00 	cmp.w	r8, #0
 8018162:	dc59      	bgt.n	8018218 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8018164:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018168:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801816c:	9b00      	ldr	r3, [sp, #0]
 801816e:	2b00      	cmp	r3, #0
 8018170:	dd72      	ble.n	8018258 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8018172:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018176:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801817a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801817e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018180:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018184:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018188:	eeb0 6a62 	vmov.f32	s12, s5
 801818c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018190:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018194:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018198:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801819c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80181a0:	eeb0 6a43 	vmov.f32	s12, s6
 80181a4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80181a8:	ee12 2a90 	vmov	r2, s5
 80181ac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80181b0:	fb92 fef3 	sdiv	lr, r2, r3
 80181b4:	ee13 2a10 	vmov	r2, s6
 80181b8:	fb92 fcf3 	sdiv	ip, r2, r3
 80181bc:	9b00      	ldr	r3, [sp, #0]
 80181be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80181c2:	3b01      	subs	r3, #1
 80181c4:	9300      	str	r3, [sp, #0]
 80181c6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80181ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80181cc:	eeb0 3a67 	vmov.f32	s6, s15
 80181d0:	bf08      	it	eq
 80181d2:	465b      	moveq	r3, fp
 80181d4:	eef0 2a47 	vmov.f32	s5, s14
 80181d8:	e797      	b.n	801810a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80181da:	454f      	cmp	r7, r9
 80181dc:	dabb      	bge.n	8018156 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80181de:	fb0c 2606 	mla	r6, ip, r6, r2
 80181e2:	1436      	asrs	r6, r6, #16
 80181e4:	d4b7      	bmi.n	8018156 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80181e6:	4546      	cmp	r6, r8
 80181e8:	dab5      	bge.n	8018156 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80181ea:	461e      	mov	r6, r3
 80181ec:	46a0      	mov	r8, r4
 80181ee:	2e00      	cmp	r6, #0
 80181f0:	ddb8      	ble.n	8018164 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80181f2:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 80181f6:	9901      	ldr	r1, [sp, #4]
 80181f8:	1417      	asrs	r7, r2, #16
 80181fa:	ea4f 4920 	mov.w	r9, r0, asr #16
 80181fe:	fb0a 1707 	mla	r7, sl, r7, r1
 8018202:	9902      	ldr	r1, [sp, #8]
 8018204:	f817 7009 	ldrb.w	r7, [r7, r9]
 8018208:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801820c:	f828 7b02 	strh.w	r7, [r8], #2
 8018210:	4470      	add	r0, lr
 8018212:	4462      	add	r2, ip
 8018214:	3e01      	subs	r6, #1
 8018216:	e7ea      	b.n	80181ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8018218:	ea5f 4920 	movs.w	r9, r0, asr #16
 801821c:	d417      	bmi.n	801824e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801821e:	68ae      	ldr	r6, [r5, #8]
 8018220:	454e      	cmp	r6, r9
 8018222:	dd14      	ble.n	801824e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8018224:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8018228:	d411      	bmi.n	801824e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801822a:	68ef      	ldr	r7, [r5, #12]
 801822c:	4557      	cmp	r7, sl
 801822e:	dd0e      	ble.n	801824e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8018230:	9f01      	ldr	r7, [sp, #4]
 8018232:	b236      	sxth	r6, r6
 8018234:	fb0a 7606 	mla	r6, sl, r6, r7
 8018238:	9f02      	ldr	r7, [sp, #8]
 801823a:	f816 6009 	ldrb.w	r6, [r6, r9]
 801823e:	f06f 0101 	mvn.w	r1, #1
 8018242:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8018246:	fb01 f608 	mul.w	r6, r1, r8
 801824a:	9903      	ldr	r1, [sp, #12]
 801824c:	538f      	strh	r7, [r1, r6]
 801824e:	4470      	add	r0, lr
 8018250:	4462      	add	r2, ip
 8018252:	f108 38ff 	add.w	r8, r8, #4294967295
 8018256:	e782      	b.n	801815e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8018258:	b005      	add	sp, #20
 801825a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801825e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801825e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018262:	b087      	sub	sp, #28
 8018264:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8018266:	9205      	str	r2, [sp, #20]
 8018268:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801826c:	9203      	str	r2, [sp, #12]
 801826e:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8018272:	9102      	str	r1, [sp, #8]
 8018274:	6861      	ldr	r1, [r4, #4]
 8018276:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801827a:	fb01 2000 	mla	r0, r1, r0, r2
 801827e:	6822      	ldr	r2, [r4, #0]
 8018280:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8018284:	9200      	str	r2, [sp, #0]
 8018286:	f8dc 2000 	ldr.w	r2, [ip]
 801828a:	9204      	str	r2, [sp, #16]
 801828c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8018290:	3204      	adds	r2, #4
 8018292:	9201      	str	r2, [sp, #4]
 8018294:	9a03      	ldr	r2, [sp, #12]
 8018296:	43d5      	mvns	r5, r2
 8018298:	b2ed      	uxtb	r5, r5
 801829a:	9a02      	ldr	r2, [sp, #8]
 801829c:	2a00      	cmp	r2, #0
 801829e:	dc03      	bgt.n	80182a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80182a0:	9a05      	ldr	r2, [sp, #20]
 80182a2:	2a00      	cmp	r2, #0
 80182a4:	f340 812c 	ble.w	8018500 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80182a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80182aa:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80182ae:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80182b2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80182b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80182b8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80182bc:	2b00      	cmp	r3, #0
 80182be:	dd10      	ble.n	80182e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80182c0:	140c      	asrs	r4, r1, #16
 80182c2:	d405      	bmi.n	80182d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80182c4:	4574      	cmp	r4, lr
 80182c6:	da03      	bge.n	80182d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80182c8:	1414      	asrs	r4, r2, #16
 80182ca:	d401      	bmi.n	80182d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80182cc:	42bc      	cmp	r4, r7
 80182ce:	db09      	blt.n	80182e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80182d0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80182d2:	9800      	ldr	r0, [sp, #0]
 80182d4:	4421      	add	r1, r4
 80182d6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80182d8:	3002      	adds	r0, #2
 80182da:	4422      	add	r2, r4
 80182dc:	3b01      	subs	r3, #1
 80182de:	9000      	str	r0, [sp, #0]
 80182e0:	e7ec      	b.n	80182bc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80182e2:	d071      	beq.n	80183c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 80182e4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80182e6:	1e5c      	subs	r4, r3, #1
 80182e8:	fb06 1604 	mla	r6, r6, r4, r1
 80182ec:	1436      	asrs	r6, r6, #16
 80182ee:	d45d      	bmi.n	80183ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80182f0:	4576      	cmp	r6, lr
 80182f2:	da5b      	bge.n	80183ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80182f4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80182f6:	fb06 2404 	mla	r4, r6, r4, r2
 80182fa:	1424      	asrs	r4, r4, #16
 80182fc:	d456      	bmi.n	80183ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80182fe:	42bc      	cmp	r4, r7
 8018300:	da54      	bge.n	80183ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8018302:	f8dd 9000 	ldr.w	r9, [sp]
 8018306:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801830a:	4698      	mov	r8, r3
 801830c:	f1b8 0f00 	cmp.w	r8, #0
 8018310:	dd54      	ble.n	80183bc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8018312:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8018316:	9804      	ldr	r0, [sp, #16]
 8018318:	1414      	asrs	r4, r2, #16
 801831a:	fb07 0404 	mla	r4, r7, r4, r0
 801831e:	140e      	asrs	r6, r1, #16
 8018320:	9801      	ldr	r0, [sp, #4]
 8018322:	f814 e006 	ldrb.w	lr, [r4, r6]
 8018326:	f8b9 4000 	ldrh.w	r4, [r9]
 801832a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801832e:	eb00 0b0e 	add.w	fp, r0, lr
 8018332:	1227      	asrs	r7, r4, #8
 8018334:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8018338:	f89b b001 	ldrb.w	fp, [fp, #1]
 801833c:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8018340:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018342:	fb16 f60a 	smulbb	r6, r6, sl
 8018346:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801834a:	fb07 6705 	mla	r7, r7, r5, r6
 801834e:	10e6      	asrs	r6, r4, #3
 8018350:	00e4      	lsls	r4, r4, #3
 8018352:	b2e4      	uxtb	r4, r4
 8018354:	fb1b fb0a 	smulbb	fp, fp, sl
 8018358:	fb14 f405 	smulbb	r4, r4, r5
 801835c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018360:	b2bf      	uxth	r7, r7
 8018362:	fb06 b605 	mla	r6, r6, r5, fp
 8018366:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801836a:	b2b6      	uxth	r6, r6
 801836c:	fa1f fe8e 	uxth.w	lr, lr
 8018370:	1c7c      	adds	r4, r7, #1
 8018372:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8018376:	f106 0b01 	add.w	fp, r6, #1
 801837a:	f10e 0401 	add.w	r4, lr, #1
 801837e:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 8018382:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8018386:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801838a:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801838e:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8018392:	4327      	orrs	r7, r4
 8018394:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8018398:	4401      	add	r1, r0
 801839a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801839c:	ea47 070b 	orr.w	r7, r7, fp
 80183a0:	f829 7b02 	strh.w	r7, [r9], #2
 80183a4:	4402      	add	r2, r0
 80183a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80183aa:	e7af      	b.n	801830c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80183ac:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 80183b0:	f04f 0e00 	mov.w	lr, #0
 80183b4:	eb03 040e 	add.w	r4, r3, lr
 80183b8:	2c00      	cmp	r4, #0
 80183ba:	dc43      	bgt.n	8018444 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80183bc:	9a00      	ldr	r2, [sp, #0]
 80183be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80183c2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80183c6:	9300      	str	r3, [sp, #0]
 80183c8:	9b02      	ldr	r3, [sp, #8]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	f340 8098 	ble.w	8018500 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80183d0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80183d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80183d8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80183dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80183de:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80183e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80183e6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80183ea:	eef0 6a62 	vmov.f32	s13, s5
 80183ee:	ee61 7a27 	vmul.f32	s15, s2, s15
 80183f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80183f6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80183fa:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 80183fe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018402:	eef0 6a43 	vmov.f32	s13, s6
 8018406:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801840a:	ee12 2a90 	vmov	r2, s5
 801840e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018412:	fb92 f3f3 	sdiv	r3, r2, r3
 8018416:	ee13 2a10 	vmov	r2, s6
 801841a:	9313      	str	r3, [sp, #76]	; 0x4c
 801841c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801841e:	fb92 f3f3 	sdiv	r3, r2, r3
 8018422:	9314      	str	r3, [sp, #80]	; 0x50
 8018424:	9b02      	ldr	r3, [sp, #8]
 8018426:	9a05      	ldr	r2, [sp, #20]
 8018428:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801842c:	3b01      	subs	r3, #1
 801842e:	9302      	str	r3, [sp, #8]
 8018430:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8018434:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018436:	eeb0 3a67 	vmov.f32	s6, s15
 801843a:	bf08      	it	eq
 801843c:	4613      	moveq	r3, r2
 801843e:	eef0 2a47 	vmov.f32	s5, s14
 8018442:	e72a      	b.n	801829a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8018444:	140f      	asrs	r7, r1, #16
 8018446:	d454      	bmi.n	80184f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8018448:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801844c:	42be      	cmp	r6, r7
 801844e:	dd50      	ble.n	80184f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8018450:	ea5f 4822 	movs.w	r8, r2, asr #16
 8018454:	d44d      	bmi.n	80184f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8018456:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801845a:	4544      	cmp	r4, r8
 801845c:	dd49      	ble.n	80184f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801845e:	9c04      	ldr	r4, [sp, #16]
 8018460:	b236      	sxth	r6, r6
 8018462:	fb08 4606 	mla	r6, r8, r6, r4
 8018466:	f06f 0001 	mvn.w	r0, #1
 801846a:	f816 8007 	ldrb.w	r8, [r6, r7]
 801846e:	9c01      	ldr	r4, [sp, #4]
 8018470:	fb00 fa0e 	mul.w	sl, r0, lr
 8018474:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8018478:	9800      	ldr	r0, [sp, #0]
 801847a:	eb04 0b08 	add.w	fp, r4, r8
 801847e:	f830 400a 	ldrh.w	r4, [r0, sl]
 8018482:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8018486:	9801      	ldr	r0, [sp, #4]
 8018488:	f89b b001 	ldrb.w	fp, [fp, #1]
 801848c:	f810 8008 	ldrb.w	r8, [r0, r8]
 8018490:	9800      	ldr	r0, [sp, #0]
 8018492:	1227      	asrs	r7, r4, #8
 8018494:	fb16 f609 	smulbb	r6, r6, r9
 8018498:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801849c:	fb07 6705 	mla	r7, r7, r5, r6
 80184a0:	10e6      	asrs	r6, r4, #3
 80184a2:	00e4      	lsls	r4, r4, #3
 80184a4:	b2e4      	uxtb	r4, r4
 80184a6:	fb1b fb09 	smulbb	fp, fp, r9
 80184aa:	fb14 f405 	smulbb	r4, r4, r5
 80184ae:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80184b2:	b2bf      	uxth	r7, r7
 80184b4:	fb06 b605 	mla	r6, r6, r5, fp
 80184b8:	fb08 4809 	mla	r8, r8, r9, r4
 80184bc:	b2b6      	uxth	r6, r6
 80184be:	fa1f f888 	uxth.w	r8, r8
 80184c2:	1c7c      	adds	r4, r7, #1
 80184c4:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 80184c8:	f106 0b01 	add.w	fp, r6, #1
 80184cc:	f108 0401 	add.w	r4, r8, #1
 80184d0:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 80184d4:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 80184d8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80184dc:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 80184e0:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80184e4:	4327      	orrs	r7, r4
 80184e6:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80184ea:	ea47 070b 	orr.w	r7, r7, fp
 80184ee:	f820 700a 	strh.w	r7, [r0, sl]
 80184f2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80184f4:	4401      	add	r1, r0
 80184f6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80184f8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80184fc:	4402      	add	r2, r0
 80184fe:	e759      	b.n	80183b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8018500:	b007      	add	sp, #28
 8018502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08018508 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801850c:	b085      	sub	sp, #20
 801850e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018512:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8018514:	9203      	str	r2, [sp, #12]
 8018516:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801851a:	6870      	ldr	r0, [r6, #4]
 801851c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801851e:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 8018522:	686f      	ldr	r7, [r5, #4]
 8018524:	9101      	str	r1, [sp, #4]
 8018526:	fb00 2404 	mla	r4, r0, r4, r2
 801852a:	6832      	ldr	r2, [r6, #0]
 801852c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018530:	682a      	ldr	r2, [r5, #0]
 8018532:	9202      	str	r2, [sp, #8]
 8018534:	3704      	adds	r7, #4
 8018536:	9a01      	ldr	r2, [sp, #4]
 8018538:	2a00      	cmp	r2, #0
 801853a:	dc03      	bgt.n	8018544 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801853c:	9a03      	ldr	r2, [sp, #12]
 801853e:	2a00      	cmp	r2, #0
 8018540:	f340 80cc 	ble.w	80186dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8018544:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018546:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801854a:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801854e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018552:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018554:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018558:	2b00      	cmp	r3, #0
 801855a:	dd0d      	ble.n	8018578 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801855c:	1406      	asrs	r6, r0, #16
 801855e:	d405      	bmi.n	801856c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8018560:	454e      	cmp	r6, r9
 8018562:	da03      	bge.n	801856c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8018564:	1416      	asrs	r6, r2, #16
 8018566:	d401      	bmi.n	801856c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8018568:	4546      	cmp	r6, r8
 801856a:	db06      	blt.n	801857a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801856c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801856e:	4460      	add	r0, ip
 8018570:	4432      	add	r2, r6
 8018572:	3b01      	subs	r3, #1
 8018574:	3402      	adds	r4, #2
 8018576:	e7ef      	b.n	8018558 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8018578:	d00f      	beq.n	801859a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801857a:	1e5e      	subs	r6, r3, #1
 801857c:	fb0c 0e06 	mla	lr, ip, r6, r0
 8018580:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8018584:	d543      	bpl.n	801860e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8018586:	4698      	mov	r8, r3
 8018588:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801858c:	f1b8 0f00 	cmp.w	r8, #0
 8018590:	dc71      	bgt.n	8018676 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8018592:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018596:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801859a:	9b01      	ldr	r3, [sp, #4]
 801859c:	2b00      	cmp	r3, #0
 801859e:	f340 809d 	ble.w	80186dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80185a2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80185a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80185aa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80185ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80185b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80185b4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80185b8:	eeb0 6a62 	vmov.f32	s12, s5
 80185bc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80185c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80185c4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80185c8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80185cc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80185d0:	eeb0 6a43 	vmov.f32	s12, s6
 80185d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80185d8:	ee12 2a90 	vmov	r2, s5
 80185dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80185e0:	fb92 fcf3 	sdiv	ip, r2, r3
 80185e4:	ee13 2a10 	vmov	r2, s6
 80185e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80185ec:	9312      	str	r3, [sp, #72]	; 0x48
 80185ee:	9b01      	ldr	r3, [sp, #4]
 80185f0:	9a03      	ldr	r2, [sp, #12]
 80185f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80185f6:	3b01      	subs	r3, #1
 80185f8:	9301      	str	r3, [sp, #4]
 80185fa:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80185fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018600:	eeb0 3a67 	vmov.f32	s6, s15
 8018604:	bf08      	it	eq
 8018606:	4613      	moveq	r3, r2
 8018608:	eef0 2a47 	vmov.f32	s5, s14
 801860c:	e793      	b.n	8018536 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801860e:	45ce      	cmp	lr, r9
 8018610:	dab9      	bge.n	8018586 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018612:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018614:	fb01 2606 	mla	r6, r1, r6, r2
 8018618:	1436      	asrs	r6, r6, #16
 801861a:	d4b4      	bmi.n	8018586 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801861c:	4546      	cmp	r6, r8
 801861e:	dab2      	bge.n	8018586 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018620:	4698      	mov	r8, r3
 8018622:	46a2      	mov	sl, r4
 8018624:	f1b8 0f00 	cmp.w	r8, #0
 8018628:	ddb3      	ble.n	8018592 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801862a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801862e:	9902      	ldr	r1, [sp, #8]
 8018630:	1416      	asrs	r6, r2, #16
 8018632:	fb09 1606 	mla	r6, r9, r6, r1
 8018636:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801863a:	492a      	ldr	r1, [pc, #168]	; (80186e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801863c:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8018640:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8018644:	eb07 0b0e 	add.w	fp, r7, lr
 8018648:	4460      	add	r0, ip
 801864a:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801864e:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8018652:	00f6      	lsls	r6, r6, #3
 8018654:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8018658:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801865c:	ea49 0606 	orr.w	r6, r9, r6
 8018660:	f817 900e 	ldrb.w	r9, [r7, lr]
 8018664:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018666:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801866a:	f82a 6b02 	strh.w	r6, [sl], #2
 801866e:	440a      	add	r2, r1
 8018670:	f108 38ff 	add.w	r8, r8, #4294967295
 8018674:	e7d6      	b.n	8018624 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8018676:	ea5f 4920 	movs.w	r9, r0, asr #16
 801867a:	d429      	bmi.n	80186d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801867c:	68ae      	ldr	r6, [r5, #8]
 801867e:	454e      	cmp	r6, r9
 8018680:	dd26      	ble.n	80186d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8018682:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8018686:	d423      	bmi.n	80186d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8018688:	68e9      	ldr	r1, [r5, #12]
 801868a:	4559      	cmp	r1, fp
 801868c:	dd20      	ble.n	80186d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801868e:	9902      	ldr	r1, [sp, #8]
 8018690:	fa0f fe86 	sxth.w	lr, r6
 8018694:	fb0b 1e0e 	mla	lr, fp, lr, r1
 8018698:	f06f 0101 	mvn.w	r1, #1
 801869c:	f81e e009 	ldrb.w	lr, [lr, r9]
 80186a0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80186a4:	eb07 060e 	add.w	r6, r7, lr
 80186a8:	fb01 f908 	mul.w	r9, r1, r8
 80186ac:	f896 b002 	ldrb.w	fp, [r6, #2]
 80186b0:	7876      	ldrb	r6, [r6, #1]
 80186b2:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 80186b6:	00f6      	lsls	r6, r6, #3
 80186b8:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 80186bc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80186c0:	ea4b 0606 	orr.w	r6, fp, r6
 80186c4:	f817 b00e 	ldrb.w	fp, [r7, lr]
 80186c8:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 80186cc:	f82a 6009 	strh.w	r6, [sl, r9]
 80186d0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80186d2:	4460      	add	r0, ip
 80186d4:	440a      	add	r2, r1
 80186d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80186da:	e757      	b.n	801858c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80186dc:	b005      	add	sp, #20
 80186de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186e2:	bf00      	nop
 80186e4:	fffff800 	.word	0xfffff800

080186e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80186e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186ec:	b087      	sub	sp, #28
 80186ee:	468b      	mov	fp, r1
 80186f0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80186f2:	9204      	str	r2, [sp, #16]
 80186f4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80186f8:	9205      	str	r2, [sp, #20]
 80186fa:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80186fe:	6841      	ldr	r1, [r0, #4]
 8018700:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8018704:	fb01 2404 	mla	r4, r1, r4, r2
 8018708:	6802      	ldr	r2, [r0, #0]
 801870a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801870e:	f8dc 2000 	ldr.w	r2, [ip]
 8018712:	9201      	str	r2, [sp, #4]
 8018714:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8018718:	3204      	adds	r2, #4
 801871a:	9202      	str	r2, [sp, #8]
 801871c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018720:	f1bb 0f00 	cmp.w	fp, #0
 8018724:	dc03      	bgt.n	801872e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8018726:	9a04      	ldr	r2, [sp, #16]
 8018728:	2a00      	cmp	r2, #0
 801872a:	f340 8138 	ble.w	801899e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801872e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018730:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8018734:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 8018738:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801873c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801873e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018742:	2b00      	cmp	r3, #0
 8018744:	dd0e      	ble.n	8018764 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018746:	1402      	asrs	r2, r0, #16
 8018748:	d405      	bmi.n	8018756 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801874a:	42ba      	cmp	r2, r7
 801874c:	da03      	bge.n	8018756 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801874e:	140a      	asrs	r2, r1, #16
 8018750:	d401      	bmi.n	8018756 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018752:	42b2      	cmp	r2, r6
 8018754:	db07      	blt.n	8018766 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018756:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018758:	4410      	add	r0, r2
 801875a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801875c:	3b01      	subs	r3, #1
 801875e:	4411      	add	r1, r2
 8018760:	3402      	adds	r4, #2
 8018762:	e7ee      	b.n	8018742 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8018764:	d019      	beq.n	801879a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8018766:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018768:	1e5a      	subs	r2, r3, #1
 801876a:	fb05 0502 	mla	r5, r5, r2, r0
 801876e:	142d      	asrs	r5, r5, #16
 8018770:	d409      	bmi.n	8018786 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018772:	42bd      	cmp	r5, r7
 8018774:	da07      	bge.n	8018786 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018776:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8018778:	fb05 1202 	mla	r2, r5, r2, r1
 801877c:	1412      	asrs	r2, r2, #16
 801877e:	d402      	bmi.n	8018786 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018780:	42b2      	cmp	r2, r6
 8018782:	f2c0 80ac 	blt.w	80188de <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8018786:	f04f 0e00 	mov.w	lr, #0
 801878a:	eb03 020e 	add.w	r2, r3, lr
 801878e:	2a00      	cmp	r2, #0
 8018790:	dc3e      	bgt.n	8018810 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8018792:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018796:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801879a:	f1bb 0f00 	cmp.w	fp, #0
 801879e:	f340 80fe 	ble.w	801899e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80187a2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80187a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80187aa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80187ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80187b0:	f1bb 0b01 	subs.w	fp, fp, #1
 80187b4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80187b8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80187bc:	eeb0 6a62 	vmov.f32	s12, s5
 80187c0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80187c4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80187c8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80187cc:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80187d0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80187d4:	eeb0 6a43 	vmov.f32	s12, s6
 80187d8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80187dc:	ee12 2a90 	vmov	r2, s5
 80187e0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80187e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80187e8:	ee13 2a10 	vmov	r2, s6
 80187ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80187f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80187f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80187f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80187f8:	9a04      	ldr	r2, [sp, #16]
 80187fa:	9314      	str	r3, [sp, #80]	; 0x50
 80187fc:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8018800:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018802:	eeb0 3a67 	vmov.f32	s6, s15
 8018806:	bf08      	it	eq
 8018808:	4613      	moveq	r3, r2
 801880a:	eef0 2a47 	vmov.f32	s5, s14
 801880e:	e787      	b.n	8018720 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8018810:	1406      	asrs	r6, r0, #16
 8018812:	d45d      	bmi.n	80188d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8018814:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8018818:	42b5      	cmp	r5, r6
 801881a:	dd59      	ble.n	80188d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801881c:	140f      	asrs	r7, r1, #16
 801881e:	d457      	bmi.n	80188d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8018820:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8018824:	42ba      	cmp	r2, r7
 8018826:	dd53      	ble.n	80188d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8018828:	9a01      	ldr	r2, [sp, #4]
 801882a:	b22d      	sxth	r5, r5
 801882c:	fb07 2505 	mla	r5, r7, r5, r2
 8018830:	5daa      	ldrb	r2, [r5, r6]
 8018832:	9d02      	ldr	r5, [sp, #8]
 8018834:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8018838:	0e2e      	lsrs	r6, r5, #24
 801883a:	d049      	beq.n	80188d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801883c:	f06f 0201 	mvn.w	r2, #1
 8018840:	fb02 f20e 	mul.w	r2, r2, lr
 8018844:	9203      	str	r2, [sp, #12]
 8018846:	f834 8002 	ldrh.w	r8, [r4, r2]
 801884a:	9a05      	ldr	r2, [sp, #20]
 801884c:	4356      	muls	r6, r2
 801884e:	1c72      	adds	r2, r6, #1
 8018850:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8018854:	1212      	asrs	r2, r2, #8
 8018856:	fa1f f982 	uxth.w	r9, r2
 801885a:	ea4f 2728 	mov.w	r7, r8, asr #8
 801885e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8018862:	43d2      	mvns	r2, r2
 8018864:	b2d2      	uxtb	r2, r2
 8018866:	fb16 f609 	smulbb	r6, r6, r9
 801886a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801886e:	fb07 6702 	mla	r7, r7, r2, r6
 8018872:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8018876:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801887a:	b2ed      	uxtb	r5, r5
 801887c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8018880:	fa5f f888 	uxtb.w	r8, r8
 8018884:	fb15 f509 	smulbb	r5, r5, r9
 8018888:	fb08 5502 	mla	r5, r8, r2, r5
 801888c:	b2bf      	uxth	r7, r7
 801888e:	fb1a fa09 	smulbb	sl, sl, r9
 8018892:	b2ad      	uxth	r5, r5
 8018894:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018898:	fb06 a602 	mla	r6, r6, r2, sl
 801889c:	1c7a      	adds	r2, r7, #1
 801889e:	f105 0a01 	add.w	sl, r5, #1
 80188a2:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80188a6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80188aa:	b2b6      	uxth	r6, r6
 80188ac:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80188b0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80188b4:	ea47 070a 	orr.w	r7, r7, sl
 80188b8:	f106 0a01 	add.w	sl, r6, #1
 80188bc:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80188c0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80188c4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80188c8:	9a03      	ldr	r2, [sp, #12]
 80188ca:	ea47 070a 	orr.w	r7, r7, sl
 80188ce:	52a7      	strh	r7, [r4, r2]
 80188d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80188d2:	4410      	add	r0, r2
 80188d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80188d6:	f10e 3eff 	add.w	lr, lr, #4294967295
 80188da:	4411      	add	r1, r2
 80188dc:	e755      	b.n	801878a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80188de:	f04f 0800 	mov.w	r8, #0
 80188e2:	eba3 0208 	sub.w	r2, r3, r8
 80188e6:	2a00      	cmp	r2, #0
 80188e8:	f77f af53 	ble.w	8018792 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80188ec:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 80188f0:	9f01      	ldr	r7, [sp, #4]
 80188f2:	140a      	asrs	r2, r1, #16
 80188f4:	1405      	asrs	r5, r0, #16
 80188f6:	fb06 7202 	mla	r2, r6, r2, r7
 80188fa:	5d52      	ldrb	r2, [r2, r5]
 80188fc:	9d02      	ldr	r5, [sp, #8]
 80188fe:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8018902:	0e2e      	lsrs	r6, r5, #24
 8018904:	d044      	beq.n	8018990 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8018906:	9a05      	ldr	r2, [sp, #20]
 8018908:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801890c:	4356      	muls	r6, r2
 801890e:	1c72      	adds	r2, r6, #1
 8018910:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8018914:	1212      	asrs	r2, r2, #8
 8018916:	fa1f f982 	uxth.w	r9, r2
 801891a:	ea4f 272e 	mov.w	r7, lr, asr #8
 801891e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8018922:	43d2      	mvns	r2, r2
 8018924:	b2d2      	uxtb	r2, r2
 8018926:	fb16 f609 	smulbb	r6, r6, r9
 801892a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801892e:	fb07 6702 	mla	r7, r7, r2, r6
 8018932:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8018936:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801893a:	b2ed      	uxtb	r5, r5
 801893c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8018940:	fa5f fe8e 	uxtb.w	lr, lr
 8018944:	fb15 f509 	smulbb	r5, r5, r9
 8018948:	fb0e 5502 	mla	r5, lr, r2, r5
 801894c:	b2bf      	uxth	r7, r7
 801894e:	fb1a fa09 	smulbb	sl, sl, r9
 8018952:	b2ad      	uxth	r5, r5
 8018954:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018958:	fb06 a602 	mla	r6, r6, r2, sl
 801895c:	1c7a      	adds	r2, r7, #1
 801895e:	f105 0a01 	add.w	sl, r5, #1
 8018962:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8018966:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801896a:	b2b6      	uxth	r6, r6
 801896c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018970:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8018974:	ea47 070a 	orr.w	r7, r7, sl
 8018978:	f106 0a01 	add.w	sl, r6, #1
 801897c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8018980:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018984:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018988:	ea47 070a 	orr.w	r7, r7, sl
 801898c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8018990:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018992:	4410      	add	r0, r2
 8018994:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018996:	f108 0801 	add.w	r8, r8, #1
 801899a:	4411      	add	r1, r2
 801899c:	e7a1      	b.n	80188e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801899e:	b007      	add	sp, #28
 80189a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080189a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80189a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189a8:	b085      	sub	sp, #20
 80189aa:	468b      	mov	fp, r1
 80189ac:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80189ae:	9203      	str	r2, [sp, #12]
 80189b0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80189b4:	6841      	ldr	r1, [r0, #4]
 80189b6:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 80189ba:	fb01 2404 	mla	r4, r1, r4, r2
 80189be:	6802      	ldr	r2, [r0, #0]
 80189c0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80189c4:	f8de 2000 	ldr.w	r2, [lr]
 80189c8:	9200      	str	r2, [sp, #0]
 80189ca:	f8de 2004 	ldr.w	r2, [lr, #4]
 80189ce:	3204      	adds	r2, #4
 80189d0:	9201      	str	r2, [sp, #4]
 80189d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80189d6:	f1bb 0f00 	cmp.w	fp, #0
 80189da:	dc03      	bgt.n	80189e4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80189dc:	9a03      	ldr	r2, [sp, #12]
 80189de:	2a00      	cmp	r2, #0
 80189e0:	f340 8153 	ble.w	8018c8a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 80189e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80189e6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80189ea:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 80189ee:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80189f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80189f4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	dd0e      	ble.n	8018a1a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80189fc:	1408      	asrs	r0, r1, #16
 80189fe:	d405      	bmi.n	8018a0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018a00:	42b8      	cmp	r0, r7
 8018a02:	da03      	bge.n	8018a0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018a04:	1410      	asrs	r0, r2, #16
 8018a06:	d401      	bmi.n	8018a0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018a08:	42b0      	cmp	r0, r6
 8018a0a:	db07      	blt.n	8018a1c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8018a0c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018a0e:	4401      	add	r1, r0
 8018a10:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018a12:	3b01      	subs	r3, #1
 8018a14:	4402      	add	r2, r0
 8018a16:	3402      	adds	r4, #2
 8018a18:	e7ee      	b.n	80189f8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8018a1a:	d017      	beq.n	8018a4c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8018a1c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018a1e:	1e58      	subs	r0, r3, #1
 8018a20:	fb05 1500 	mla	r5, r5, r0, r1
 8018a24:	142d      	asrs	r5, r5, #16
 8018a26:	d409      	bmi.n	8018a3c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018a28:	42bd      	cmp	r5, r7
 8018a2a:	da07      	bge.n	8018a3c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018a2c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8018a2e:	fb05 2000 	mla	r0, r5, r0, r2
 8018a32:	1400      	asrs	r0, r0, #16
 8018a34:	d402      	bmi.n	8018a3c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018a36:	42b0      	cmp	r0, r6
 8018a38:	f2c0 80bc 	blt.w	8018bb4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8018a3c:	2600      	movs	r6, #0
 8018a3e:	1998      	adds	r0, r3, r6
 8018a40:	2800      	cmp	r0, #0
 8018a42:	dc3e      	bgt.n	8018ac2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8018a44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018a48:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018a4c:	f1bb 0f00 	cmp.w	fp, #0
 8018a50:	f340 811b 	ble.w	8018c8a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8018a54:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018a58:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018a5c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018a60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018a62:	f1bb 0b01 	subs.w	fp, fp, #1
 8018a66:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018a6a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018a6e:	eeb0 6a62 	vmov.f32	s12, s5
 8018a72:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018a76:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018a7a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018a7e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8018a82:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018a86:	eeb0 6a43 	vmov.f32	s12, s6
 8018a8a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018a8e:	ee12 2a90 	vmov	r2, s5
 8018a92:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018a96:	fb92 f3f3 	sdiv	r3, r2, r3
 8018a9a:	ee13 2a10 	vmov	r2, s6
 8018a9e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018aa2:	9311      	str	r3, [sp, #68]	; 0x44
 8018aa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018aa6:	fb92 f3f3 	sdiv	r3, r2, r3
 8018aaa:	9a03      	ldr	r2, [sp, #12]
 8018aac:	9312      	str	r3, [sp, #72]	; 0x48
 8018aae:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8018ab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018ab4:	eeb0 3a67 	vmov.f32	s6, s15
 8018ab8:	bf08      	it	eq
 8018aba:	4613      	moveq	r3, r2
 8018abc:	eef0 2a47 	vmov.f32	s5, s14
 8018ac0:	e789      	b.n	80189d6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8018ac2:	140f      	asrs	r7, r1, #16
 8018ac4:	d45e      	bmi.n	8018b84 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8018ac6:	f8de 5008 	ldr.w	r5, [lr, #8]
 8018aca:	42bd      	cmp	r5, r7
 8018acc:	dd5a      	ble.n	8018b84 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8018ace:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8018ad2:	d457      	bmi.n	8018b84 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8018ad4:	f8de 000c 	ldr.w	r0, [lr, #12]
 8018ad8:	4560      	cmp	r0, ip
 8018ada:	dd53      	ble.n	8018b84 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8018adc:	9800      	ldr	r0, [sp, #0]
 8018ade:	b22d      	sxth	r5, r5
 8018ae0:	fb0c 0505 	mla	r5, ip, r5, r0
 8018ae4:	5de8      	ldrb	r0, [r5, r7]
 8018ae6:	9d01      	ldr	r5, [sp, #4]
 8018ae8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8018aec:	0e07      	lsrs	r7, r0, #24
 8018aee:	2fff      	cmp	r7, #255	; 0xff
 8018af0:	d04e      	beq.n	8018b90 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8018af2:	b2fd      	uxtb	r5, r7
 8018af4:	2f00      	cmp	r7, #0
 8018af6:	d045      	beq.n	8018b84 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8018af8:	f06f 0701 	mvn.w	r7, #1
 8018afc:	4377      	muls	r7, r6
 8018afe:	fa1f f985 	uxth.w	r9, r5
 8018b02:	f834 8007 	ldrh.w	r8, [r4, r7]
 8018b06:	9702      	str	r7, [sp, #8]
 8018b08:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8018b0c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8018b10:	43ed      	mvns	r5, r5
 8018b12:	b2ed      	uxtb	r5, r5
 8018b14:	fb17 f709 	smulbb	r7, r7, r9
 8018b18:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018b1c:	fb0c 7c05 	mla	ip, ip, r5, r7
 8018b20:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8018b24:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8018b28:	b2c0      	uxtb	r0, r0
 8018b2a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8018b2e:	fa5f f888 	uxtb.w	r8, r8
 8018b32:	fb10 f009 	smulbb	r0, r0, r9
 8018b36:	fb08 0005 	mla	r0, r8, r5, r0
 8018b3a:	b280      	uxth	r0, r0
 8018b3c:	fa1f fc8c 	uxth.w	ip, ip
 8018b40:	fb1a fa09 	smulbb	sl, sl, r9
 8018b44:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018b48:	fb07 a705 	mla	r7, r7, r5, sl
 8018b4c:	f100 0a01 	add.w	sl, r0, #1
 8018b50:	f10c 0501 	add.w	r5, ip, #1
 8018b54:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8018b58:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8018b5c:	b2bf      	uxth	r7, r7
 8018b5e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018b62:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018b66:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018b6a:	f107 0a01 	add.w	sl, r7, #1
 8018b6e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8018b72:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018b76:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018b7a:	9802      	ldr	r0, [sp, #8]
 8018b7c:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018b80:	f824 c000 	strh.w	ip, [r4, r0]
 8018b84:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018b86:	4401      	add	r1, r0
 8018b88:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018b8a:	3e01      	subs	r6, #1
 8018b8c:	4402      	add	r2, r0
 8018b8e:	e756      	b.n	8018a3e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8018b90:	f06f 0501 	mvn.w	r5, #1
 8018b94:	fb05 f706 	mul.w	r7, r5, r6
 8018b98:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8018b9c:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8018ba0:	0945      	lsrs	r5, r0, #5
 8018ba2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8018ba6:	ea4c 0505 	orr.w	r5, ip, r5
 8018baa:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8018bae:	4305      	orrs	r5, r0
 8018bb0:	53e5      	strh	r5, [r4, r7]
 8018bb2:	e7e7      	b.n	8018b84 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8018bb4:	f04f 0800 	mov.w	r8, #0
 8018bb8:	eba3 0008 	sub.w	r0, r3, r8
 8018bbc:	2800      	cmp	r0, #0
 8018bbe:	f77f af41 	ble.w	8018a44 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018bc2:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8018bc6:	9f00      	ldr	r7, [sp, #0]
 8018bc8:	1410      	asrs	r0, r2, #16
 8018bca:	140d      	asrs	r5, r1, #16
 8018bcc:	fb06 7000 	mla	r0, r6, r0, r7
 8018bd0:	5d40      	ldrb	r0, [r0, r5]
 8018bd2:	9d01      	ldr	r5, [sp, #4]
 8018bd4:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8018bd8:	0e06      	lsrs	r6, r0, #24
 8018bda:	2eff      	cmp	r6, #255	; 0xff
 8018bdc:	d048      	beq.n	8018c70 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8018bde:	b2f5      	uxtb	r5, r6
 8018be0:	2e00      	cmp	r6, #0
 8018be2:	d03e      	beq.n	8018c62 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8018be4:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8018be8:	fa1f f985 	uxth.w	r9, r5
 8018bec:	ea4f 272c 	mov.w	r7, ip, asr #8
 8018bf0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8018bf4:	43ed      	mvns	r5, r5
 8018bf6:	b2ed      	uxtb	r5, r5
 8018bf8:	fb16 f609 	smulbb	r6, r6, r9
 8018bfc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018c00:	fb07 6705 	mla	r7, r7, r5, r6
 8018c04:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8018c08:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8018c0c:	b2c0      	uxtb	r0, r0
 8018c0e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8018c12:	fa5f fc8c 	uxtb.w	ip, ip
 8018c16:	fb10 f009 	smulbb	r0, r0, r9
 8018c1a:	fb0c 0005 	mla	r0, ip, r5, r0
 8018c1e:	b2bf      	uxth	r7, r7
 8018c20:	fb1a fa09 	smulbb	sl, sl, r9
 8018c24:	b280      	uxth	r0, r0
 8018c26:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018c2a:	fb06 a605 	mla	r6, r6, r5, sl
 8018c2e:	1c7d      	adds	r5, r7, #1
 8018c30:	f100 0a01 	add.w	sl, r0, #1
 8018c34:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 8018c38:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8018c3c:	b2b6      	uxth	r6, r6
 8018c3e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018c42:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8018c46:	ea47 070a 	orr.w	r7, r7, sl
 8018c4a:	f106 0a01 	add.w	sl, r6, #1
 8018c4e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8018c52:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018c56:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018c5a:	ea47 070a 	orr.w	r7, r7, sl
 8018c5e:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8018c62:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018c64:	4401      	add	r1, r0
 8018c66:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018c68:	f108 0801 	add.w	r8, r8, #1
 8018c6c:	4402      	add	r2, r0
 8018c6e:	e7a3      	b.n	8018bb8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8018c70:	4d07      	ldr	r5, [pc, #28]	; (8018c90 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8018c72:	ea05 2610 	and.w	r6, r5, r0, lsr #8
 8018c76:	0945      	lsrs	r5, r0, #5
 8018c78:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8018c7c:	4335      	orrs	r5, r6
 8018c7e:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8018c82:	4305      	orrs	r5, r0
 8018c84:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8018c88:	e7eb      	b.n	8018c62 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8018c8a:	b005      	add	sp, #20
 8018c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c90:	fffff800 	.word	0xfffff800

08018c94 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c98:	b087      	sub	sp, #28
 8018c9a:	468b      	mov	fp, r1
 8018c9c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8018c9e:	9204      	str	r2, [sp, #16]
 8018ca0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8018ca4:	9205      	str	r2, [sp, #20]
 8018ca6:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8018caa:	6861      	ldr	r1, [r4, #4]
 8018cac:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8018cb0:	fb01 2000 	mla	r0, r1, r0, r2
 8018cb4:	6822      	ldr	r2, [r4, #0]
 8018cb6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8018cba:	f8de 2000 	ldr.w	r2, [lr]
 8018cbe:	9201      	str	r2, [sp, #4]
 8018cc0:	f8de 2004 	ldr.w	r2, [lr, #4]
 8018cc4:	9202      	str	r2, [sp, #8]
 8018cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018cca:	f1bb 0f00 	cmp.w	fp, #0
 8018cce:	dc03      	bgt.n	8018cd8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8018cd0:	9a04      	ldr	r2, [sp, #16]
 8018cd2:	2a00      	cmp	r2, #0
 8018cd4:	f340 8142 	ble.w	8018f5c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8018cd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018cda:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8018cde:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8018ce2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018ce6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018ce8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	dd0e      	ble.n	8018d0e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8018cf0:	140c      	asrs	r4, r1, #16
 8018cf2:	d405      	bmi.n	8018d00 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8018cf4:	42bc      	cmp	r4, r7
 8018cf6:	da03      	bge.n	8018d00 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8018cf8:	1414      	asrs	r4, r2, #16
 8018cfa:	d401      	bmi.n	8018d00 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8018cfc:	42b4      	cmp	r4, r6
 8018cfe:	db07      	blt.n	8018d10 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018d00:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018d02:	4421      	add	r1, r4
 8018d04:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018d06:	3b01      	subs	r3, #1
 8018d08:	4422      	add	r2, r4
 8018d0a:	3002      	adds	r0, #2
 8018d0c:	e7ee      	b.n	8018cec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8018d0e:	d019      	beq.n	8018d44 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8018d10:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018d12:	1e5c      	subs	r4, r3, #1
 8018d14:	fb05 1504 	mla	r5, r5, r4, r1
 8018d18:	142d      	asrs	r5, r5, #16
 8018d1a:	d409      	bmi.n	8018d30 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8018d1c:	42bd      	cmp	r5, r7
 8018d1e:	da07      	bge.n	8018d30 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8018d20:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8018d22:	fb05 2404 	mla	r4, r5, r4, r2
 8018d26:	1424      	asrs	r4, r4, #16
 8018d28:	d402      	bmi.n	8018d30 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8018d2a:	42b4      	cmp	r4, r6
 8018d2c:	f2c0 80b1 	blt.w	8018e92 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8018d30:	f04f 0800 	mov.w	r8, #0
 8018d34:	eb03 0408 	add.w	r4, r3, r8
 8018d38:	2c00      	cmp	r4, #0
 8018d3a:	dc3e      	bgt.n	8018dba <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8018d3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018d40:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018d44:	f1bb 0f00 	cmp.w	fp, #0
 8018d48:	f340 8108 	ble.w	8018f5c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8018d4c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018d50:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018d54:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018d58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018d5a:	f1bb 0b01 	subs.w	fp, fp, #1
 8018d5e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018d62:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018d66:	eeb0 6a62 	vmov.f32	s12, s5
 8018d6a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018d6e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018d72:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018d76:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8018d7a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018d7e:	eeb0 6a43 	vmov.f32	s12, s6
 8018d82:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018d86:	ee12 2a90 	vmov	r2, s5
 8018d8a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018d8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8018d92:	ee13 2a10 	vmov	r2, s6
 8018d96:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018d9a:	9313      	str	r3, [sp, #76]	; 0x4c
 8018d9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018d9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8018da2:	9a04      	ldr	r2, [sp, #16]
 8018da4:	9314      	str	r3, [sp, #80]	; 0x50
 8018da6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8018daa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018dac:	eeb0 3a67 	vmov.f32	s6, s15
 8018db0:	bf08      	it	eq
 8018db2:	4613      	moveq	r3, r2
 8018db4:	eef0 2a47 	vmov.f32	s5, s14
 8018db8:	e787      	b.n	8018cca <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8018dba:	140e      	asrs	r6, r1, #16
 8018dbc:	d462      	bmi.n	8018e84 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018dbe:	f8de 5008 	ldr.w	r5, [lr, #8]
 8018dc2:	42b5      	cmp	r5, r6
 8018dc4:	dd5e      	ble.n	8018e84 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018dc6:	1417      	asrs	r7, r2, #16
 8018dc8:	d45c      	bmi.n	8018e84 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018dca:	f8de 400c 	ldr.w	r4, [lr, #12]
 8018dce:	42bc      	cmp	r4, r7
 8018dd0:	dd58      	ble.n	8018e84 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018dd2:	b22d      	sxth	r5, r5
 8018dd4:	fb07 6505 	mla	r5, r7, r5, r6
 8018dd8:	9c02      	ldr	r4, [sp, #8]
 8018dda:	5d66      	ldrb	r6, [r4, r5]
 8018ddc:	2e00      	cmp	r6, #0
 8018dde:	d051      	beq.n	8018e84 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018de0:	9c01      	ldr	r4, [sp, #4]
 8018de2:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 8018de6:	f06f 0401 	mvn.w	r4, #1
 8018dea:	fb04 f408 	mul.w	r4, r4, r8
 8018dee:	9403      	str	r4, [sp, #12]
 8018df0:	5b05      	ldrh	r5, [r0, r4]
 8018df2:	9c05      	ldr	r4, [sp, #20]
 8018df4:	4366      	muls	r6, r4
 8018df6:	1c74      	adds	r4, r6, #1
 8018df8:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8018dfc:	1224      	asrs	r4, r4, #8
 8018dfe:	b2a7      	uxth	r7, r4
 8018e00:	122e      	asrs	r6, r5, #8
 8018e02:	43e4      	mvns	r4, r4
 8018e04:	b2e4      	uxtb	r4, r4
 8018e06:	ea4f 2c29 	mov.w	ip, r9, asr #8
 8018e0a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8018e0e:	fb16 f604 	smulbb	r6, r6, r4
 8018e12:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8018e16:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018e1a:	00ed      	lsls	r5, r5, #3
 8018e1c:	fb0c 6c07 	mla	ip, ip, r7, r6
 8018e20:	b2ed      	uxtb	r5, r5
 8018e22:	ea4f 06e9 	mov.w	r6, r9, asr #3
 8018e26:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8018e2a:	fb15 f504 	smulbb	r5, r5, r4
 8018e2e:	fa5f f989 	uxtb.w	r9, r9
 8018e32:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8018e36:	fb09 5507 	mla	r5, r9, r7, r5
 8018e3a:	fb1a fa04 	smulbb	sl, sl, r4
 8018e3e:	fa1f fc8c 	uxth.w	ip, ip
 8018e42:	b2ad      	uxth	r5, r5
 8018e44:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018e48:	fb06 a607 	mla	r6, r6, r7, sl
 8018e4c:	f10c 0401 	add.w	r4, ip, #1
 8018e50:	f105 0a01 	add.w	sl, r5, #1
 8018e54:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8018e58:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018e5c:	b2b6      	uxth	r6, r6
 8018e5e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018e62:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018e66:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018e6a:	f106 0a01 	add.w	sl, r6, #1
 8018e6e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8018e72:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018e76:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018e7a:	9c03      	ldr	r4, [sp, #12]
 8018e7c:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018e80:	f820 c004 	strh.w	ip, [r0, r4]
 8018e84:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018e86:	4421      	add	r1, r4
 8018e88:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018e8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8018e8e:	4422      	add	r2, r4
 8018e90:	e750      	b.n	8018d34 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018e92:	f04f 0900 	mov.w	r9, #0
 8018e96:	eba3 0409 	sub.w	r4, r3, r9
 8018e9a:	2c00      	cmp	r4, #0
 8018e9c:	f77f af4e 	ble.w	8018d3c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8018ea0:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8018ea4:	140d      	asrs	r5, r1, #16
 8018ea6:	1414      	asrs	r4, r2, #16
 8018ea8:	fb06 5404 	mla	r4, r6, r4, r5
 8018eac:	9d02      	ldr	r5, [sp, #8]
 8018eae:	5d2e      	ldrb	r6, [r5, r4]
 8018eb0:	2e00      	cmp	r6, #0
 8018eb2:	d04c      	beq.n	8018f4e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8018eb4:	9d01      	ldr	r5, [sp, #4]
 8018eb6:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 8018eba:	9c05      	ldr	r4, [sp, #20]
 8018ebc:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8018ec0:	4366      	muls	r6, r4
 8018ec2:	1c74      	adds	r4, r6, #1
 8018ec4:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8018ec8:	1224      	asrs	r4, r4, #8
 8018eca:	b2a7      	uxth	r7, r4
 8018ecc:	122e      	asrs	r6, r5, #8
 8018ece:	43e4      	mvns	r4, r4
 8018ed0:	b2e4      	uxtb	r4, r4
 8018ed2:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8018ed6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8018eda:	fb16 f604 	smulbb	r6, r6, r4
 8018ede:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8018ee2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018ee6:	00ed      	lsls	r5, r5, #3
 8018ee8:	fb0c 6c07 	mla	ip, ip, r7, r6
 8018eec:	b2ed      	uxtb	r5, r5
 8018eee:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8018ef2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8018ef6:	fb15 f504 	smulbb	r5, r5, r4
 8018efa:	fa5f f888 	uxtb.w	r8, r8
 8018efe:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8018f02:	fb08 5507 	mla	r5, r8, r7, r5
 8018f06:	fb1a fa04 	smulbb	sl, sl, r4
 8018f0a:	fa1f fc8c 	uxth.w	ip, ip
 8018f0e:	b2ad      	uxth	r5, r5
 8018f10:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018f14:	fb06 a607 	mla	r6, r6, r7, sl
 8018f18:	f10c 0401 	add.w	r4, ip, #1
 8018f1c:	f105 0a01 	add.w	sl, r5, #1
 8018f20:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8018f24:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018f28:	b2b6      	uxth	r6, r6
 8018f2a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018f2e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018f32:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018f36:	f106 0a01 	add.w	sl, r6, #1
 8018f3a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8018f3e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018f42:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018f46:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018f4a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8018f4e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018f50:	4421      	add	r1, r4
 8018f52:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018f54:	f109 0901 	add.w	r9, r9, #1
 8018f58:	4422      	add	r2, r4
 8018f5a:	e79c      	b.n	8018e96 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8018f5c:	b007      	add	sp, #28
 8018f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018f62 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018f62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f66:	b085      	sub	sp, #20
 8018f68:	468b      	mov	fp, r1
 8018f6a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018f6c:	9203      	str	r2, [sp, #12]
 8018f6e:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 8018f72:	6861      	ldr	r1, [r4, #4]
 8018f74:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8018f78:	fb01 2000 	mla	r0, r1, r0, r2
 8018f7c:	6822      	ldr	r2, [r4, #0]
 8018f7e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8018f82:	f8d8 2000 	ldr.w	r2, [r8]
 8018f86:	9200      	str	r2, [sp, #0]
 8018f88:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8018f8c:	9201      	str	r2, [sp, #4]
 8018f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018f92:	f1bb 0f00 	cmp.w	fp, #0
 8018f96:	dc03      	bgt.n	8018fa0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8018f98:	9a03      	ldr	r2, [sp, #12]
 8018f9a:	2a00      	cmp	r2, #0
 8018f9c:	f340 8146 	ble.w	801922c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8018fa0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018fa2:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8018fa6:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8018faa:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018fae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018fb0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	dd0e      	ble.n	8018fd6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8018fb8:	140c      	asrs	r4, r1, #16
 8018fba:	d405      	bmi.n	8018fc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018fbc:	42bc      	cmp	r4, r7
 8018fbe:	da03      	bge.n	8018fc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018fc0:	1414      	asrs	r4, r2, #16
 8018fc2:	d401      	bmi.n	8018fc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018fc4:	42b4      	cmp	r4, r6
 8018fc6:	db07      	blt.n	8018fd8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018fc8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018fca:	4421      	add	r1, r4
 8018fcc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018fce:	3b01      	subs	r3, #1
 8018fd0:	4422      	add	r2, r4
 8018fd2:	3002      	adds	r0, #2
 8018fd4:	e7ee      	b.n	8018fb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8018fd6:	d017      	beq.n	8019008 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8018fd8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018fda:	1e5c      	subs	r4, r3, #1
 8018fdc:	fb05 1504 	mla	r5, r5, r4, r1
 8018fe0:	142d      	asrs	r5, r5, #16
 8018fe2:	d409      	bmi.n	8018ff8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018fe4:	42bd      	cmp	r5, r7
 8018fe6:	da07      	bge.n	8018ff8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018fe8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8018fea:	fb05 2404 	mla	r4, r5, r4, r2
 8018fee:	1424      	asrs	r4, r4, #16
 8018ff0:	d402      	bmi.n	8018ff8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018ff2:	42b4      	cmp	r4, r6
 8018ff4:	f2c0 80b3 	blt.w	801915e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8018ff8:	2600      	movs	r6, #0
 8018ffa:	199c      	adds	r4, r3, r6
 8018ffc:	2c00      	cmp	r4, #0
 8018ffe:	dc3e      	bgt.n	801907e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8019000:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019004:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019008:	f1bb 0f00 	cmp.w	fp, #0
 801900c:	f340 810e 	ble.w	801922c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8019010:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019014:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019018:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801901c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801901e:	f1bb 0b01 	subs.w	fp, fp, #1
 8019022:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019026:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801902a:	eeb0 6a62 	vmov.f32	s12, s5
 801902e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019032:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019036:	ee77 2a62 	vsub.f32	s5, s14, s5
 801903a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801903e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019042:	eeb0 6a43 	vmov.f32	s12, s6
 8019046:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801904a:	ee12 2a90 	vmov	r2, s5
 801904e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019052:	fb92 f3f3 	sdiv	r3, r2, r3
 8019056:	ee13 2a10 	vmov	r2, s6
 801905a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801905e:	9311      	str	r3, [sp, #68]	; 0x44
 8019060:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019062:	fb92 f3f3 	sdiv	r3, r2, r3
 8019066:	9a03      	ldr	r2, [sp, #12]
 8019068:	9312      	str	r3, [sp, #72]	; 0x48
 801906a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801906e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019070:	eeb0 3a67 	vmov.f32	s6, s15
 8019074:	bf08      	it	eq
 8019076:	4613      	moveq	r3, r2
 8019078:	eef0 2a47 	vmov.f32	s5, s14
 801907c:	e789      	b.n	8018f92 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801907e:	140f      	asrs	r7, r1, #16
 8019080:	d45f      	bmi.n	8019142 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8019082:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8019086:	42bd      	cmp	r5, r7
 8019088:	dd5b      	ble.n	8019142 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801908a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801908e:	d458      	bmi.n	8019142 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8019090:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8019094:	4564      	cmp	r4, ip
 8019096:	dd54      	ble.n	8019142 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8019098:	b22d      	sxth	r5, r5
 801909a:	fb0c 7505 	mla	r5, ip, r5, r7
 801909e:	9c01      	ldr	r4, [sp, #4]
 80190a0:	5d64      	ldrb	r4, [r4, r5]
 80190a2:	2cff      	cmp	r4, #255	; 0xff
 80190a4:	d053      	beq.n	801914e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 80190a6:	2c00      	cmp	r4, #0
 80190a8:	d04b      	beq.n	8019142 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 80190aa:	9f00      	ldr	r7, [sp, #0]
 80190ac:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 80190b0:	f06f 0501 	mvn.w	r5, #1
 80190b4:	4375      	muls	r5, r6
 80190b6:	9502      	str	r5, [sp, #8]
 80190b8:	5b45      	ldrh	r5, [r0, r5]
 80190ba:	fa1f fc84 	uxth.w	ip, r4
 80190be:	122f      	asrs	r7, r5, #8
 80190c0:	43e4      	mvns	r4, r4
 80190c2:	b2e4      	uxtb	r4, r4
 80190c4:	ea4f 2e29 	mov.w	lr, r9, asr #8
 80190c8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80190cc:	fb17 f704 	smulbb	r7, r7, r4
 80190d0:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80190d4:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80190d8:	00ed      	lsls	r5, r5, #3
 80190da:	fb0e 7e0c 	mla	lr, lr, ip, r7
 80190de:	b2ed      	uxtb	r5, r5
 80190e0:	ea4f 07e9 	mov.w	r7, r9, asr #3
 80190e4:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80190e8:	fb15 f504 	smulbb	r5, r5, r4
 80190ec:	fa5f f989 	uxtb.w	r9, r9
 80190f0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80190f4:	fb09 550c 	mla	r5, r9, ip, r5
 80190f8:	fb1a fa04 	smulbb	sl, sl, r4
 80190fc:	fa1f fe8e 	uxth.w	lr, lr
 8019100:	b2ad      	uxth	r5, r5
 8019102:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019106:	fb07 a70c 	mla	r7, r7, ip, sl
 801910a:	f10e 0401 	add.w	r4, lr, #1
 801910e:	f105 0a01 	add.w	sl, r5, #1
 8019112:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8019116:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801911a:	b2bf      	uxth	r7, r7
 801911c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019120:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8019124:	ea4e 0e0a 	orr.w	lr, lr, sl
 8019128:	f107 0a01 	add.w	sl, r7, #1
 801912c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8019130:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019134:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019138:	9c02      	ldr	r4, [sp, #8]
 801913a:	ea4e 0e0a 	orr.w	lr, lr, sl
 801913e:	f820 e004 	strh.w	lr, [r0, r4]
 8019142:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019144:	4421      	add	r1, r4
 8019146:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019148:	3e01      	subs	r6, #1
 801914a:	4422      	add	r2, r4
 801914c:	e755      	b.n	8018ffa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801914e:	9c00      	ldr	r4, [sp, #0]
 8019150:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8019154:	f06f 0401 	mvn.w	r4, #1
 8019158:	4374      	muls	r4, r6
 801915a:	5305      	strh	r5, [r0, r4]
 801915c:	e7f1      	b.n	8019142 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801915e:	f04f 0900 	mov.w	r9, #0
 8019162:	eba3 0409 	sub.w	r4, r3, r9
 8019166:	2c00      	cmp	r4, #0
 8019168:	f77f af4a 	ble.w	8019000 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801916c:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8019170:	1414      	asrs	r4, r2, #16
 8019172:	140d      	asrs	r5, r1, #16
 8019174:	fb06 5504 	mla	r5, r6, r4, r5
 8019178:	9c01      	ldr	r4, [sp, #4]
 801917a:	5d64      	ldrb	r4, [r4, r5]
 801917c:	2cff      	cmp	r4, #255	; 0xff
 801917e:	d04f      	beq.n	8019220 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8019180:	2c00      	cmp	r4, #0
 8019182:	d046      	beq.n	8019212 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019184:	9e00      	ldr	r6, [sp, #0]
 8019186:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801918a:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801918e:	b2a7      	uxth	r7, r4
 8019190:	122e      	asrs	r6, r5, #8
 8019192:	43e4      	mvns	r4, r4
 8019194:	b2e4      	uxtb	r4, r4
 8019196:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801919a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801919e:	fb16 f604 	smulbb	r6, r6, r4
 80191a2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80191a6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80191aa:	00ed      	lsls	r5, r5, #3
 80191ac:	fb0c 6c07 	mla	ip, ip, r7, r6
 80191b0:	b2ed      	uxtb	r5, r5
 80191b2:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80191b6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80191ba:	fb15 f504 	smulbb	r5, r5, r4
 80191be:	fa5f fe8e 	uxtb.w	lr, lr
 80191c2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80191c6:	fb0e 5507 	mla	r5, lr, r7, r5
 80191ca:	fb1a fa04 	smulbb	sl, sl, r4
 80191ce:	fa1f fc8c 	uxth.w	ip, ip
 80191d2:	b2ad      	uxth	r5, r5
 80191d4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80191d8:	fb06 a607 	mla	r6, r6, r7, sl
 80191dc:	f10c 0401 	add.w	r4, ip, #1
 80191e0:	f105 0a01 	add.w	sl, r5, #1
 80191e4:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80191e8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80191ec:	b2b6      	uxth	r6, r6
 80191ee:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80191f2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80191f6:	ea4c 0c0a 	orr.w	ip, ip, sl
 80191fa:	f106 0a01 	add.w	sl, r6, #1
 80191fe:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019202:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019206:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801920a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801920e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8019212:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019214:	4421      	add	r1, r4
 8019216:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019218:	f109 0901 	add.w	r9, r9, #1
 801921c:	4422      	add	r2, r4
 801921e:	e7a0      	b.n	8019162 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8019220:	9c00      	ldr	r4, [sp, #0]
 8019222:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 8019226:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801922a:	e7f2      	b.n	8019212 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801922c:	b005      	add	sp, #20
 801922e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019232 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019232:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019236:	b085      	sub	sp, #20
 8019238:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801923a:	9203      	str	r2, [sp, #12]
 801923c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8019240:	9201      	str	r2, [sp, #4]
 8019242:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019246:	9100      	str	r1, [sp, #0]
 8019248:	6841      	ldr	r1, [r0, #4]
 801924a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801924e:	fb01 2404 	mla	r4, r1, r4, r2
 8019252:	6802      	ldr	r2, [r0, #0]
 8019254:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019258:	f8de 2000 	ldr.w	r2, [lr]
 801925c:	9202      	str	r2, [sp, #8]
 801925e:	9a01      	ldr	r2, [sp, #4]
 8019260:	43d6      	mvns	r6, r2
 8019262:	b2f6      	uxtb	r6, r6
 8019264:	9a00      	ldr	r2, [sp, #0]
 8019266:	2a00      	cmp	r2, #0
 8019268:	dc03      	bgt.n	8019272 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801926a:	9a03      	ldr	r2, [sp, #12]
 801926c:	2a00      	cmp	r2, #0
 801926e:	f340 8124 	ble.w	80194ba <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8019272:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019274:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8019278:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801927c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019280:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019282:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019286:	2b00      	cmp	r3, #0
 8019288:	dd0e      	ble.n	80192a8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801928a:	1408      	asrs	r0, r1, #16
 801928c:	d405      	bmi.n	801929a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801928e:	4560      	cmp	r0, ip
 8019290:	da03      	bge.n	801929a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019292:	1410      	asrs	r0, r2, #16
 8019294:	d401      	bmi.n	801929a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019296:	42b8      	cmp	r0, r7
 8019298:	db07      	blt.n	80192aa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801929a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801929c:	4401      	add	r1, r0
 801929e:	9812      	ldr	r0, [sp, #72]	; 0x48
 80192a0:	3b01      	subs	r3, #1
 80192a2:	4402      	add	r2, r0
 80192a4:	3402      	adds	r4, #2
 80192a6:	e7ee      	b.n	8019286 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80192a8:	d06e      	beq.n	8019388 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80192aa:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80192ac:	1e58      	subs	r0, r3, #1
 80192ae:	fb05 1500 	mla	r5, r5, r0, r1
 80192b2:	142d      	asrs	r5, r5, #16
 80192b4:	d45c      	bmi.n	8019370 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80192b6:	4565      	cmp	r5, ip
 80192b8:	da5a      	bge.n	8019370 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80192ba:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80192bc:	fb05 2000 	mla	r0, r5, r0, r2
 80192c0:	1400      	asrs	r0, r0, #16
 80192c2:	d455      	bmi.n	8019370 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80192c4:	42b8      	cmp	r0, r7
 80192c6:	da53      	bge.n	8019370 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80192c8:	f8bd b004 	ldrh.w	fp, [sp, #4]
 80192cc:	4699      	mov	r9, r3
 80192ce:	46a2      	mov	sl, r4
 80192d0:	f1b9 0f00 	cmp.w	r9, #0
 80192d4:	dd54      	ble.n	8019380 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80192d6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80192da:	140d      	asrs	r5, r1, #16
 80192dc:	1410      	asrs	r0, r2, #16
 80192de:	fb07 5000 	mla	r0, r7, r0, r5
 80192e2:	9d02      	ldr	r5, [sp, #8]
 80192e4:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80192e8:	f8ba 5000 	ldrh.w	r5, [sl]
 80192ec:	122f      	asrs	r7, r5, #8
 80192ee:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80192f2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80192f6:	fb17 f706 	smulbb	r7, r7, r6
 80192fa:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80192fe:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019302:	00ed      	lsls	r5, r5, #3
 8019304:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8019308:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801930c:	10c7      	asrs	r7, r0, #3
 801930e:	b2ed      	uxtb	r5, r5
 8019310:	00c0      	lsls	r0, r0, #3
 8019312:	fb18 f806 	smulbb	r8, r8, r6
 8019316:	fb15 f506 	smulbb	r5, r5, r6
 801931a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801931e:	b2c0      	uxtb	r0, r0
 8019320:	fa1f fc8c 	uxth.w	ip, ip
 8019324:	fb07 870b 	mla	r7, r7, fp, r8
 8019328:	fb00 500b 	mla	r0, r0, fp, r5
 801932c:	b280      	uxth	r0, r0
 801932e:	b2bf      	uxth	r7, r7
 8019330:	f10c 0501 	add.w	r5, ip, #1
 8019334:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019338:	f107 0801 	add.w	r8, r7, #1
 801933c:	1c45      	adds	r5, r0, #1
 801933e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8019342:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8019346:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019348:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801934c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019350:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8019354:	ea4c 0c05 	orr.w	ip, ip, r5
 8019358:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801935c:	4401      	add	r1, r0
 801935e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019360:	ea4c 0c08 	orr.w	ip, ip, r8
 8019364:	f82a cb02 	strh.w	ip, [sl], #2
 8019368:	4402      	add	r2, r0
 801936a:	f109 39ff 	add.w	r9, r9, #4294967295
 801936e:	e7af      	b.n	80192d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8019370:	f8bd a004 	ldrh.w	sl, [sp, #4]
 8019374:	f04f 0800 	mov.w	r8, #0
 8019378:	eb03 0008 	add.w	r0, r3, r8
 801937c:	2800      	cmp	r0, #0
 801937e:	dc41      	bgt.n	8019404 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8019380:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019384:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019388:	9b00      	ldr	r3, [sp, #0]
 801938a:	2b00      	cmp	r3, #0
 801938c:	f340 8095 	ble.w	80194ba <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8019390:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019394:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019398:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801939c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801939e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80193a2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80193a6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80193aa:	eef0 6a62 	vmov.f32	s13, s5
 80193ae:	ee61 7a27 	vmul.f32	s15, s2, s15
 80193b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80193b6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80193ba:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 80193be:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80193c2:	eef0 6a43 	vmov.f32	s13, s6
 80193c6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80193ca:	ee12 2a90 	vmov	r2, s5
 80193ce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80193d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80193d6:	ee13 2a10 	vmov	r2, s6
 80193da:	9311      	str	r3, [sp, #68]	; 0x44
 80193dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80193de:	fb92 f3f3 	sdiv	r3, r2, r3
 80193e2:	9312      	str	r3, [sp, #72]	; 0x48
 80193e4:	9b00      	ldr	r3, [sp, #0]
 80193e6:	9a03      	ldr	r2, [sp, #12]
 80193e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80193ec:	3b01      	subs	r3, #1
 80193ee:	9300      	str	r3, [sp, #0]
 80193f0:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 80193f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80193f6:	eeb0 3a67 	vmov.f32	s6, s15
 80193fa:	bf08      	it	eq
 80193fc:	4613      	moveq	r3, r2
 80193fe:	eef0 2a47 	vmov.f32	s5, s14
 8019402:	e72f      	b.n	8019264 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8019404:	140f      	asrs	r7, r1, #16
 8019406:	d451      	bmi.n	80194ac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8019408:	f8de 5008 	ldr.w	r5, [lr, #8]
 801940c:	42bd      	cmp	r5, r7
 801940e:	dd4d      	ble.n	80194ac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8019410:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8019414:	d44a      	bmi.n	80194ac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8019416:	f8de 000c 	ldr.w	r0, [lr, #12]
 801941a:	4560      	cmp	r0, ip
 801941c:	dd46      	ble.n	80194ac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801941e:	b22d      	sxth	r5, r5
 8019420:	fb0c 7505 	mla	r5, ip, r5, r7
 8019424:	9802      	ldr	r0, [sp, #8]
 8019426:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801942a:	f06f 0501 	mvn.w	r5, #1
 801942e:	fb05 fb08 	mul.w	fp, r5, r8
 8019432:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8019436:	f834 500b 	ldrh.w	r5, [r4, fp]
 801943a:	122f      	asrs	r7, r5, #8
 801943c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019440:	fb17 f706 	smulbb	r7, r7, r6
 8019444:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8019448:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801944c:	00ed      	lsls	r5, r5, #3
 801944e:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8019452:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8019456:	10c7      	asrs	r7, r0, #3
 8019458:	b2ed      	uxtb	r5, r5
 801945a:	00c0      	lsls	r0, r0, #3
 801945c:	fb19 f906 	smulbb	r9, r9, r6
 8019460:	fb15 f506 	smulbb	r5, r5, r6
 8019464:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019468:	b2c0      	uxtb	r0, r0
 801946a:	fa1f fc8c 	uxth.w	ip, ip
 801946e:	fb07 970a 	mla	r7, r7, sl, r9
 8019472:	fb00 500a 	mla	r0, r0, sl, r5
 8019476:	b2bf      	uxth	r7, r7
 8019478:	b280      	uxth	r0, r0
 801947a:	f10c 0501 	add.w	r5, ip, #1
 801947e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019482:	f107 0901 	add.w	r9, r7, #1
 8019486:	1c45      	adds	r5, r0, #1
 8019488:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801948c:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8019490:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019494:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019498:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801949c:	ea4c 0c05 	orr.w	ip, ip, r5
 80194a0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80194a4:	ea4c 0c09 	orr.w	ip, ip, r9
 80194a8:	f824 c00b 	strh.w	ip, [r4, fp]
 80194ac:	9811      	ldr	r0, [sp, #68]	; 0x44
 80194ae:	4401      	add	r1, r0
 80194b0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80194b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80194b6:	4402      	add	r2, r0
 80194b8:	e75e      	b.n	8019378 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80194ba:	b005      	add	sp, #20
 80194bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080194c0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80194c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194c4:	b085      	sub	sp, #20
 80194c6:	4693      	mov	fp, r2
 80194c8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80194ca:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80194cc:	6870      	ldr	r0, [r6, #4]
 80194ce:	9101      	str	r1, [sp, #4]
 80194d0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80194d4:	fb00 2404 	mla	r4, r0, r4, r2
 80194d8:	6832      	ldr	r2, [r6, #0]
 80194da:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 80194de:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80194e2:	682a      	ldr	r2, [r5, #0]
 80194e4:	9202      	str	r2, [sp, #8]
 80194e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80194ea:	9a01      	ldr	r2, [sp, #4]
 80194ec:	2a00      	cmp	r2, #0
 80194ee:	dc03      	bgt.n	80194f8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80194f0:	f1bb 0f00 	cmp.w	fp, #0
 80194f4:	f340 809a 	ble.w	801962c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80194f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80194fa:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80194fe:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8019502:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019506:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019508:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801950c:	2b00      	cmp	r3, #0
 801950e:	dd0c      	ble.n	801952a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8019510:	1406      	asrs	r6, r0, #16
 8019512:	d405      	bmi.n	8019520 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8019514:	454e      	cmp	r6, r9
 8019516:	da03      	bge.n	8019520 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8019518:	1416      	asrs	r6, r2, #16
 801951a:	d401      	bmi.n	8019520 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801951c:	4546      	cmp	r6, r8
 801951e:	db05      	blt.n	801952c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8019520:	4470      	add	r0, lr
 8019522:	4462      	add	r2, ip
 8019524:	3b01      	subs	r3, #1
 8019526:	3402      	adds	r4, #2
 8019528:	e7f0      	b.n	801950c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801952a:	d00f      	beq.n	801954c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801952c:	1e5e      	subs	r6, r3, #1
 801952e:	fb0e 0706 	mla	r7, lr, r6, r0
 8019532:	143f      	asrs	r7, r7, #16
 8019534:	d541      	bpl.n	80195ba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 8019536:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801953a:	4698      	mov	r8, r3
 801953c:	9603      	str	r6, [sp, #12]
 801953e:	f1b8 0f00 	cmp.w	r8, #0
 8019542:	dc56      	bgt.n	80195f2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8019544:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019548:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801954c:	9b01      	ldr	r3, [sp, #4]
 801954e:	2b00      	cmp	r3, #0
 8019550:	dd6c      	ble.n	801962c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8019552:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019556:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801955a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801955e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019560:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019564:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019568:	eeb0 6a62 	vmov.f32	s12, s5
 801956c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019570:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019574:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019578:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801957c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019580:	eeb0 6a43 	vmov.f32	s12, s6
 8019584:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019588:	ee12 2a90 	vmov	r2, s5
 801958c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019590:	fb92 fef3 	sdiv	lr, r2, r3
 8019594:	ee13 2a10 	vmov	r2, s6
 8019598:	fb92 fcf3 	sdiv	ip, r2, r3
 801959c:	9b01      	ldr	r3, [sp, #4]
 801959e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80195a2:	3b01      	subs	r3, #1
 80195a4:	9301      	str	r3, [sp, #4]
 80195a6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80195aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80195ac:	eeb0 3a67 	vmov.f32	s6, s15
 80195b0:	bf08      	it	eq
 80195b2:	465b      	moveq	r3, fp
 80195b4:	eef0 2a47 	vmov.f32	s5, s14
 80195b8:	e797      	b.n	80194ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80195ba:	454f      	cmp	r7, r9
 80195bc:	dabb      	bge.n	8019536 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80195be:	fb0c 2606 	mla	r6, ip, r6, r2
 80195c2:	1436      	asrs	r6, r6, #16
 80195c4:	d4b7      	bmi.n	8019536 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80195c6:	4546      	cmp	r6, r8
 80195c8:	dab5      	bge.n	8019536 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80195ca:	461e      	mov	r6, r3
 80195cc:	46a0      	mov	r8, r4
 80195ce:	2e00      	cmp	r6, #0
 80195d0:	ddb8      	ble.n	8019544 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80195d2:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 80195d6:	9902      	ldr	r1, [sp, #8]
 80195d8:	1417      	asrs	r7, r2, #16
 80195da:	ea4f 4920 	mov.w	r9, r0, asr #16
 80195de:	fb0a 9707 	mla	r7, sl, r7, r9
 80195e2:	4470      	add	r0, lr
 80195e4:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 80195e8:	f828 7b02 	strh.w	r7, [r8], #2
 80195ec:	4462      	add	r2, ip
 80195ee:	3e01      	subs	r6, #1
 80195f0:	e7ed      	b.n	80195ce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 80195f2:	ea5f 4920 	movs.w	r9, r0, asr #16
 80195f6:	d414      	bmi.n	8019622 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80195f8:	68ae      	ldr	r6, [r5, #8]
 80195fa:	454e      	cmp	r6, r9
 80195fc:	dd11      	ble.n	8019622 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80195fe:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8019602:	d40e      	bmi.n	8019622 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8019604:	68ef      	ldr	r7, [r5, #12]
 8019606:	4557      	cmp	r7, sl
 8019608:	dd0b      	ble.n	8019622 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801960a:	b236      	sxth	r6, r6
 801960c:	fb0a 9606 	mla	r6, sl, r6, r9
 8019610:	9f02      	ldr	r7, [sp, #8]
 8019612:	f06f 0101 	mvn.w	r1, #1
 8019616:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801961a:	fb01 f608 	mul.w	r6, r1, r8
 801961e:	9903      	ldr	r1, [sp, #12]
 8019620:	538f      	strh	r7, [r1, r6]
 8019622:	4470      	add	r0, lr
 8019624:	4462      	add	r2, ip
 8019626:	f108 38ff 	add.w	r8, r8, #4294967295
 801962a:	e788      	b.n	801953e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801962c:	b005      	add	sp, #20
 801962e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019632 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019632:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019636:	b085      	sub	sp, #20
 8019638:	468b      	mov	fp, r1
 801963a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801963c:	9202      	str	r2, [sp, #8]
 801963e:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8019642:	9203      	str	r2, [sp, #12]
 8019644:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019648:	6841      	ldr	r1, [r0, #4]
 801964a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801964e:	fb01 2404 	mla	r4, r1, r4, r2
 8019652:	6802      	ldr	r2, [r0, #0]
 8019654:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019658:	f8d8 2000 	ldr.w	r2, [r8]
 801965c:	9200      	str	r2, [sp, #0]
 801965e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019662:	f1bb 0f00 	cmp.w	fp, #0
 8019666:	dc03      	bgt.n	8019670 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8019668:	9a02      	ldr	r2, [sp, #8]
 801966a:	2a00      	cmp	r2, #0
 801966c:	f340 8134 	ble.w	80198d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8019670:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019672:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8019676:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801967a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801967e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019680:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019684:	2b00      	cmp	r3, #0
 8019686:	dd0e      	ble.n	80196a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8019688:	1402      	asrs	r2, r0, #16
 801968a:	d405      	bmi.n	8019698 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801968c:	42ba      	cmp	r2, r7
 801968e:	da03      	bge.n	8019698 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019690:	140a      	asrs	r2, r1, #16
 8019692:	d401      	bmi.n	8019698 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019694:	42b2      	cmp	r2, r6
 8019696:	db07      	blt.n	80196a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8019698:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801969a:	4410      	add	r0, r2
 801969c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801969e:	3b01      	subs	r3, #1
 80196a0:	4411      	add	r1, r2
 80196a2:	3402      	adds	r4, #2
 80196a4:	e7ee      	b.n	8019684 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80196a6:	d019      	beq.n	80196dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80196a8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80196aa:	1e5a      	subs	r2, r3, #1
 80196ac:	fb05 0502 	mla	r5, r5, r2, r0
 80196b0:	142d      	asrs	r5, r5, #16
 80196b2:	d409      	bmi.n	80196c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80196b4:	42bd      	cmp	r5, r7
 80196b6:	da07      	bge.n	80196c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80196b8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80196ba:	fb05 1202 	mla	r2, r5, r2, r1
 80196be:	1412      	asrs	r2, r2, #16
 80196c0:	d402      	bmi.n	80196c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80196c2:	42b2      	cmp	r2, r6
 80196c4:	f2c0 80aa 	blt.w	801981c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80196c8:	f04f 0c00 	mov.w	ip, #0
 80196cc:	eb03 020c 	add.w	r2, r3, ip
 80196d0:	2a00      	cmp	r2, #0
 80196d2:	dc3e      	bgt.n	8019752 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 80196d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80196d8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80196dc:	f1bb 0f00 	cmp.w	fp, #0
 80196e0:	f340 80fa 	ble.w	80198d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80196e4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80196e8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80196ec:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80196f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80196f2:	f1bb 0b01 	subs.w	fp, fp, #1
 80196f6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80196fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80196fe:	eeb0 6a62 	vmov.f32	s12, s5
 8019702:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019706:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801970a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801970e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019712:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019716:	eeb0 6a43 	vmov.f32	s12, s6
 801971a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801971e:	ee12 2a90 	vmov	r2, s5
 8019722:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019726:	fb92 f3f3 	sdiv	r3, r2, r3
 801972a:	ee13 2a10 	vmov	r2, s6
 801972e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019732:	9311      	str	r3, [sp, #68]	; 0x44
 8019734:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019736:	fb92 f3f3 	sdiv	r3, r2, r3
 801973a:	9a02      	ldr	r2, [sp, #8]
 801973c:	9312      	str	r3, [sp, #72]	; 0x48
 801973e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019742:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019744:	eeb0 3a67 	vmov.f32	s6, s15
 8019748:	bf08      	it	eq
 801974a:	4613      	moveq	r3, r2
 801974c:	eef0 2a47 	vmov.f32	s5, s14
 8019750:	e787      	b.n	8019662 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8019752:	1406      	asrs	r6, r0, #16
 8019754:	d45b      	bmi.n	801980e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8019756:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801975a:	42b5      	cmp	r5, r6
 801975c:	dd57      	ble.n	801980e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801975e:	140f      	asrs	r7, r1, #16
 8019760:	d455      	bmi.n	801980e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8019762:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8019766:	42ba      	cmp	r2, r7
 8019768:	dd51      	ble.n	801980e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801976a:	b22d      	sxth	r5, r5
 801976c:	fb07 6505 	mla	r5, r7, r5, r6
 8019770:	9a00      	ldr	r2, [sp, #0]
 8019772:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 8019776:	0e2e      	lsrs	r6, r5, #24
 8019778:	d049      	beq.n	801980e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801977a:	f06f 0201 	mvn.w	r2, #1
 801977e:	fb02 f20c 	mul.w	r2, r2, ip
 8019782:	9201      	str	r2, [sp, #4]
 8019784:	f834 e002 	ldrh.w	lr, [r4, r2]
 8019788:	9a03      	ldr	r2, [sp, #12]
 801978a:	4356      	muls	r6, r2
 801978c:	1c72      	adds	r2, r6, #1
 801978e:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8019792:	1212      	asrs	r2, r2, #8
 8019794:	fa1f f982 	uxth.w	r9, r2
 8019798:	ea4f 272e 	mov.w	r7, lr, asr #8
 801979c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80197a0:	43d2      	mvns	r2, r2
 80197a2:	b2d2      	uxtb	r2, r2
 80197a4:	fb16 f609 	smulbb	r6, r6, r9
 80197a8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80197ac:	fb07 6702 	mla	r7, r7, r2, r6
 80197b0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80197b4:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80197b8:	b2ed      	uxtb	r5, r5
 80197ba:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80197be:	fa5f fe8e 	uxtb.w	lr, lr
 80197c2:	fb15 f509 	smulbb	r5, r5, r9
 80197c6:	fb0e 5502 	mla	r5, lr, r2, r5
 80197ca:	b2bf      	uxth	r7, r7
 80197cc:	fb1a fa09 	smulbb	sl, sl, r9
 80197d0:	b2ad      	uxth	r5, r5
 80197d2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80197d6:	fb06 a602 	mla	r6, r6, r2, sl
 80197da:	1c7a      	adds	r2, r7, #1
 80197dc:	f105 0a01 	add.w	sl, r5, #1
 80197e0:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80197e4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80197e8:	b2b6      	uxth	r6, r6
 80197ea:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80197ee:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80197f2:	ea47 070a 	orr.w	r7, r7, sl
 80197f6:	f106 0a01 	add.w	sl, r6, #1
 80197fa:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80197fe:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019802:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019806:	9a01      	ldr	r2, [sp, #4]
 8019808:	ea47 070a 	orr.w	r7, r7, sl
 801980c:	52a7      	strh	r7, [r4, r2]
 801980e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019810:	4410      	add	r0, r2
 8019812:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019814:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019818:	4411      	add	r1, r2
 801981a:	e757      	b.n	80196cc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801981c:	f04f 0e00 	mov.w	lr, #0
 8019820:	eba3 020e 	sub.w	r2, r3, lr
 8019824:	2a00      	cmp	r2, #0
 8019826:	f77f af55 	ble.w	80196d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801982a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801982e:	1405      	asrs	r5, r0, #16
 8019830:	140a      	asrs	r2, r1, #16
 8019832:	fb06 5202 	mla	r2, r6, r2, r5
 8019836:	9d00      	ldr	r5, [sp, #0]
 8019838:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801983c:	0e2e      	lsrs	r6, r5, #24
 801983e:	d044      	beq.n	80198ca <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8019840:	9a03      	ldr	r2, [sp, #12]
 8019842:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8019846:	4356      	muls	r6, r2
 8019848:	1c72      	adds	r2, r6, #1
 801984a:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801984e:	1212      	asrs	r2, r2, #8
 8019850:	fa1f f982 	uxth.w	r9, r2
 8019854:	ea4f 272c 	mov.w	r7, ip, asr #8
 8019858:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801985c:	43d2      	mvns	r2, r2
 801985e:	b2d2      	uxtb	r2, r2
 8019860:	fb16 f609 	smulbb	r6, r6, r9
 8019864:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019868:	fb07 6702 	mla	r7, r7, r2, r6
 801986c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8019870:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8019874:	b2ed      	uxtb	r5, r5
 8019876:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801987a:	fa5f fc8c 	uxtb.w	ip, ip
 801987e:	fb15 f509 	smulbb	r5, r5, r9
 8019882:	fb0c 5502 	mla	r5, ip, r2, r5
 8019886:	b2bf      	uxth	r7, r7
 8019888:	fb1a fa09 	smulbb	sl, sl, r9
 801988c:	b2ad      	uxth	r5, r5
 801988e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019892:	fb06 a602 	mla	r6, r6, r2, sl
 8019896:	1c7a      	adds	r2, r7, #1
 8019898:	f105 0a01 	add.w	sl, r5, #1
 801989c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80198a0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80198a4:	b2b6      	uxth	r6, r6
 80198a6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80198aa:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80198ae:	ea47 070a 	orr.w	r7, r7, sl
 80198b2:	f106 0a01 	add.w	sl, r6, #1
 80198b6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80198ba:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80198be:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80198c2:	ea47 070a 	orr.w	r7, r7, sl
 80198c6:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 80198ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80198cc:	4410      	add	r0, r2
 80198ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80198d0:	f10e 0e01 	add.w	lr, lr, #1
 80198d4:	4411      	add	r1, r2
 80198d6:	e7a3      	b.n	8019820 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80198d8:	b005      	add	sp, #20
 80198da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080198e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80198e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198e4:	b085      	sub	sp, #20
 80198e6:	468b      	mov	fp, r1
 80198e8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80198ea:	9203      	str	r2, [sp, #12]
 80198ec:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 80198f0:	6861      	ldr	r1, [r4, #4]
 80198f2:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 80198f6:	fb01 2000 	mla	r0, r1, r0, r2
 80198fa:	6822      	ldr	r2, [r4, #0]
 80198fc:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8019900:	f8d9 2000 	ldr.w	r2, [r9]
 8019904:	9200      	str	r2, [sp, #0]
 8019906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801990a:	f1bb 0f00 	cmp.w	fp, #0
 801990e:	dc03      	bgt.n	8019918 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8019910:	9a03      	ldr	r2, [sp, #12]
 8019912:	2a00      	cmp	r2, #0
 8019914:	f340 8154 	ble.w	8019bc0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8019918:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801991a:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801991e:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8019922:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019926:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019928:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801992c:	2b00      	cmp	r3, #0
 801992e:	dd0e      	ble.n	801994e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019930:	140c      	asrs	r4, r1, #16
 8019932:	d405      	bmi.n	8019940 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8019934:	42bc      	cmp	r4, r7
 8019936:	da03      	bge.n	8019940 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8019938:	1414      	asrs	r4, r2, #16
 801993a:	d401      	bmi.n	8019940 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801993c:	42b4      	cmp	r4, r6
 801993e:	db07      	blt.n	8019950 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019940:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019942:	4421      	add	r1, r4
 8019944:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019946:	3b01      	subs	r3, #1
 8019948:	4422      	add	r2, r4
 801994a:	3002      	adds	r0, #2
 801994c:	e7ee      	b.n	801992c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801994e:	d017      	beq.n	8019980 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019950:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8019952:	1e5c      	subs	r4, r3, #1
 8019954:	fb05 1504 	mla	r5, r5, r4, r1
 8019958:	142d      	asrs	r5, r5, #16
 801995a:	d409      	bmi.n	8019970 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801995c:	42bd      	cmp	r5, r7
 801995e:	da07      	bge.n	8019970 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8019960:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8019962:	fb05 2404 	mla	r4, r5, r4, r2
 8019966:	1424      	asrs	r4, r4, #16
 8019968:	d402      	bmi.n	8019970 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801996a:	42b4      	cmp	r4, r6
 801996c:	f2c0 80c0 	blt.w	8019af0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8019970:	2700      	movs	r7, #0
 8019972:	19dc      	adds	r4, r3, r7
 8019974:	2c00      	cmp	r4, #0
 8019976:	dc3e      	bgt.n	80199f6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8019978:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801997c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019980:	f1bb 0f00 	cmp.w	fp, #0
 8019984:	f340 811c 	ble.w	8019bc0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8019988:	ee30 0a04 	vadd.f32	s0, s0, s8
 801998c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019990:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019994:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019996:	f1bb 0b01 	subs.w	fp, fp, #1
 801999a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801999e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80199a2:	eeb0 6a62 	vmov.f32	s12, s5
 80199a6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80199aa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80199ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 80199b2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80199b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80199ba:	eeb0 6a43 	vmov.f32	s12, s6
 80199be:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80199c2:	ee12 2a90 	vmov	r2, s5
 80199c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80199ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80199ce:	ee13 2a10 	vmov	r2, s6
 80199d2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80199d6:	9311      	str	r3, [sp, #68]	; 0x44
 80199d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80199da:	fb92 f3f3 	sdiv	r3, r2, r3
 80199de:	9a03      	ldr	r2, [sp, #12]
 80199e0:	9312      	str	r3, [sp, #72]	; 0x48
 80199e2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80199e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80199e8:	eeb0 3a67 	vmov.f32	s6, s15
 80199ec:	bf08      	it	eq
 80199ee:	4613      	moveq	r3, r2
 80199f0:	eef0 2a47 	vmov.f32	s5, s14
 80199f4:	e789      	b.n	801990a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80199f6:	140e      	asrs	r6, r1, #16
 80199f8:	d461      	bmi.n	8019abe <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80199fa:	f8d9 5008 	ldr.w	r5, [r9, #8]
 80199fe:	42b5      	cmp	r5, r6
 8019a00:	dd5d      	ble.n	8019abe <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8019a02:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8019a06:	d45a      	bmi.n	8019abe <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8019a08:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8019a0c:	4564      	cmp	r4, ip
 8019a0e:	dd56      	ble.n	8019abe <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8019a10:	b22d      	sxth	r5, r5
 8019a12:	fb0c 6505 	mla	r5, ip, r5, r6
 8019a16:	9c00      	ldr	r4, [sp, #0]
 8019a18:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8019a1c:	ea5f 6e14 	movs.w	lr, r4, lsr #24
 8019a20:	d04d      	beq.n	8019abe <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8019a22:	0a26      	lsrs	r6, r4, #8
 8019a24:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8019a28:	fa5f f58e 	uxtb.w	r5, lr
 8019a2c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8019a30:	9601      	str	r6, [sp, #4]
 8019a32:	d04a      	beq.n	8019aca <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8019a34:	f06f 0601 	mvn.w	r6, #1
 8019a38:	437e      	muls	r6, r7
 8019a3a:	fa1f fa85 	uxth.w	sl, r5
 8019a3e:	f830 8006 	ldrh.w	r8, [r0, r6]
 8019a42:	9602      	str	r6, [sp, #8]
 8019a44:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8019a48:	43ed      	mvns	r5, r5
 8019a4a:	fa5f fc8c 	uxtb.w	ip, ip
 8019a4e:	b2ed      	uxtb	r5, r5
 8019a50:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8019a54:	fb1c fc0a 	smulbb	ip, ip, sl
 8019a58:	fb0e cc05 	mla	ip, lr, r5, ip
 8019a5c:	b2e4      	uxtb	r4, r4
 8019a5e:	ea4f 0ee8 	mov.w	lr, r8, asr #3
 8019a62:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8019a66:	f89d 6004 	ldrb.w	r6, [sp, #4]
 8019a6a:	fa5f f888 	uxtb.w	r8, r8
 8019a6e:	fb14 f40a 	smulbb	r4, r4, sl
 8019a72:	fb08 4405 	mla	r4, r8, r5, r4
 8019a76:	b2a4      	uxth	r4, r4
 8019a78:	fa1f fc8c 	uxth.w	ip, ip
 8019a7c:	fb16 f60a 	smulbb	r6, r6, sl
 8019a80:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8019a84:	fb0e 6e05 	mla	lr, lr, r5, r6
 8019a88:	1c66      	adds	r6, r4, #1
 8019a8a:	f10c 0501 	add.w	r5, ip, #1
 8019a8e:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8019a92:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019a96:	fa1f fe8e 	uxth.w	lr, lr
 8019a9a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8019a9e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019aa2:	ea4c 0c06 	orr.w	ip, ip, r6
 8019aa6:	f10e 0601 	add.w	r6, lr, #1
 8019aaa:	eb06 261e 	add.w	r6, r6, lr, lsr #8
 8019aae:	0976      	lsrs	r6, r6, #5
 8019ab0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019ab4:	9c02      	ldr	r4, [sp, #8]
 8019ab6:	ea4c 0c06 	orr.w	ip, ip, r6
 8019aba:	f820 c004 	strh.w	ip, [r0, r4]
 8019abe:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019ac0:	4421      	add	r1, r4
 8019ac2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019ac4:	3f01      	subs	r7, #1
 8019ac6:	4422      	add	r2, r4
 8019ac8:	e753      	b.n	8019972 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8019aca:	4e3f      	ldr	r6, [pc, #252]	; (8019bc8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>)
 8019acc:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8019ad0:	ea06 2c0c 	and.w	ip, r6, ip, lsl #8
 8019ad4:	ea4c 0c04 	orr.w	ip, ip, r4
 8019ad8:	9c01      	ldr	r4, [sp, #4]
 8019ada:	f06f 0501 	mvn.w	r5, #1
 8019ade:	00e6      	lsls	r6, r4, #3
 8019ae0:	437d      	muls	r5, r7
 8019ae2:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 8019ae6:	ea4c 0c04 	orr.w	ip, ip, r4
 8019aea:	f820 c005 	strh.w	ip, [r0, r5]
 8019aee:	e7e6      	b.n	8019abe <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8019af0:	f04f 0800 	mov.w	r8, #0
 8019af4:	eba3 0408 	sub.w	r4, r3, r8
 8019af8:	2c00      	cmp	r4, #0
 8019afa:	f77f af3d 	ble.w	8019978 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8019afe:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8019b02:	140d      	asrs	r5, r1, #16
 8019b04:	1414      	asrs	r4, r2, #16
 8019b06:	fb06 5404 	mla	r4, r6, r4, r5
 8019b0a:	9d00      	ldr	r5, [sp, #0]
 8019b0c:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 8019b10:	ea5f 6c14 	movs.w	ip, r4, lsr #24
 8019b14:	d042      	beq.n	8019b9c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8019b16:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8019b1a:	fa5f f58c 	uxtb.w	r5, ip
 8019b1e:	ea4f 4714 	mov.w	r7, r4, lsr #16
 8019b22:	ea4f 2614 	mov.w	r6, r4, lsr #8
 8019b26:	d040      	beq.n	8019baa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8019b28:	f830 e018 	ldrh.w	lr, [r0, r8, lsl #1]
 8019b2c:	fa1f fa85 	uxth.w	sl, r5
 8019b30:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8019b34:	43ed      	mvns	r5, r5
 8019b36:	b2ff      	uxtb	r7, r7
 8019b38:	b2ed      	uxtb	r5, r5
 8019b3a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019b3e:	fb17 f70a 	smulbb	r7, r7, sl
 8019b42:	fb0c 7705 	mla	r7, ip, r5, r7
 8019b46:	b2e4      	uxtb	r4, r4
 8019b48:	ea4f 0cee 	mov.w	ip, lr, asr #3
 8019b4c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8019b50:	fa5f fe8e 	uxtb.w	lr, lr
 8019b54:	fb14 f40a 	smulbb	r4, r4, sl
 8019b58:	fb0e 4405 	mla	r4, lr, r5, r4
 8019b5c:	b2f6      	uxtb	r6, r6
 8019b5e:	b2bf      	uxth	r7, r7
 8019b60:	fb16 f60a 	smulbb	r6, r6, sl
 8019b64:	b2a4      	uxth	r4, r4
 8019b66:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8019b6a:	fb0c 6c05 	mla	ip, ip, r5, r6
 8019b6e:	1c7d      	adds	r5, r7, #1
 8019b70:	1c66      	adds	r6, r4, #1
 8019b72:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 8019b76:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8019b7a:	fa1f fc8c 	uxth.w	ip, ip
 8019b7e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8019b82:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019b86:	4337      	orrs	r7, r6
 8019b88:	f10c 0601 	add.w	r6, ip, #1
 8019b8c:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8019b90:	0976      	lsrs	r6, r6, #5
 8019b92:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019b96:	4337      	orrs	r7, r6
 8019b98:	f820 7018 	strh.w	r7, [r0, r8, lsl #1]
 8019b9c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019b9e:	4421      	add	r1, r4
 8019ba0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019ba2:	f108 0801 	add.w	r8, r8, #1
 8019ba6:	4422      	add	r2, r4
 8019ba8:	e7a4      	b.n	8019af4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8019baa:	4d07      	ldr	r5, [pc, #28]	; (8019bc8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>)
 8019bac:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8019bb0:	ea05 2707 	and.w	r7, r5, r7, lsl #8
 8019bb4:	00f6      	lsls	r6, r6, #3
 8019bb6:	4327      	orrs	r7, r4
 8019bb8:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 8019bbc:	4327      	orrs	r7, r4
 8019bbe:	e7eb      	b.n	8019b98 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8019bc0:	b005      	add	sp, #20
 8019bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bc6:	bf00      	nop
 8019bc8:	fffff800 	.word	0xfffff800

08019bcc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bd0:	b087      	sub	sp, #28
 8019bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019bd6:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019bd8:	9204      	str	r2, [sp, #16]
 8019bda:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019bde:	9205      	str	r2, [sp, #20]
 8019be0:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8019be4:	9101      	str	r1, [sp, #4]
 8019be6:	6841      	ldr	r1, [r0, #4]
 8019be8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8019bec:	fb01 2404 	mla	r4, r1, r4, r2
 8019bf0:	6802      	ldr	r2, [r0, #0]
 8019bf2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019bf6:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8019bfa:	3201      	adds	r2, #1
 8019bfc:	f022 0201 	bic.w	r2, r2, #1
 8019c00:	9202      	str	r2, [sp, #8]
 8019c02:	f8d8 2000 	ldr.w	r2, [r8]
 8019c06:	9203      	str	r2, [sp, #12]
 8019c08:	9a01      	ldr	r2, [sp, #4]
 8019c0a:	2a00      	cmp	r2, #0
 8019c0c:	dc03      	bgt.n	8019c16 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8019c0e:	9a04      	ldr	r2, [sp, #16]
 8019c10:	2a00      	cmp	r2, #0
 8019c12:	f340 814d 	ble.w	8019eb0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8019c16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019c18:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8019c1c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8019c20:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019c24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019c26:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	dd0e      	ble.n	8019c4c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8019c2e:	1402      	asrs	r2, r0, #16
 8019c30:	d405      	bmi.n	8019c3e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019c32:	42ba      	cmp	r2, r7
 8019c34:	da03      	bge.n	8019c3e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019c36:	140a      	asrs	r2, r1, #16
 8019c38:	d401      	bmi.n	8019c3e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019c3a:	42b2      	cmp	r2, r6
 8019c3c:	db07      	blt.n	8019c4e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8019c3e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019c40:	4410      	add	r0, r2
 8019c42:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019c44:	3b01      	subs	r3, #1
 8019c46:	4411      	add	r1, r2
 8019c48:	3402      	adds	r4, #2
 8019c4a:	e7ee      	b.n	8019c2a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8019c4c:	d019      	beq.n	8019c82 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8019c4e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019c50:	1e5a      	subs	r2, r3, #1
 8019c52:	fb05 0502 	mla	r5, r5, r2, r0
 8019c56:	142d      	asrs	r5, r5, #16
 8019c58:	d409      	bmi.n	8019c6e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8019c5a:	42bd      	cmp	r5, r7
 8019c5c:	da07      	bge.n	8019c6e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8019c5e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019c60:	fb05 1202 	mla	r2, r5, r2, r1
 8019c64:	1412      	asrs	r2, r2, #16
 8019c66:	d402      	bmi.n	8019c6e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8019c68:	42b2      	cmp	r2, r6
 8019c6a:	f2c0 80b7 	blt.w	8019ddc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8019c6e:	f04f 0c00 	mov.w	ip, #0
 8019c72:	eb03 020c 	add.w	r2, r3, ip
 8019c76:	2a00      	cmp	r2, #0
 8019c78:	dc3f      	bgt.n	8019cfa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 8019c7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019c7e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019c82:	9b01      	ldr	r3, [sp, #4]
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	f340 8113 	ble.w	8019eb0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8019c8a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019c8e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019c92:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019c96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019c98:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019c9c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019ca0:	eeb0 6a62 	vmov.f32	s12, s5
 8019ca4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019ca8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019cac:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019cb0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8019cb4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019cb8:	eeb0 6a43 	vmov.f32	s12, s6
 8019cbc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019cc0:	ee12 2a90 	vmov	r2, s5
 8019cc4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019cc8:	fb92 f3f3 	sdiv	r3, r2, r3
 8019ccc:	ee13 2a10 	vmov	r2, s6
 8019cd0:	9313      	str	r3, [sp, #76]	; 0x4c
 8019cd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019cd4:	fb92 f3f3 	sdiv	r3, r2, r3
 8019cd8:	9314      	str	r3, [sp, #80]	; 0x50
 8019cda:	9b01      	ldr	r3, [sp, #4]
 8019cdc:	9a04      	ldr	r2, [sp, #16]
 8019cde:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019ce2:	3b01      	subs	r3, #1
 8019ce4:	9301      	str	r3, [sp, #4]
 8019ce6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8019cea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019cec:	eeb0 3a67 	vmov.f32	s6, s15
 8019cf0:	bf08      	it	eq
 8019cf2:	4613      	moveq	r3, r2
 8019cf4:	eef0 2a47 	vmov.f32	s5, s14
 8019cf8:	e786      	b.n	8019c08 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019cfa:	1405      	asrs	r5, r0, #16
 8019cfc:	d467      	bmi.n	8019dce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8019cfe:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8019d02:	42aa      	cmp	r2, r5
 8019d04:	dd63      	ble.n	8019dce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8019d06:	140e      	asrs	r6, r1, #16
 8019d08:	d461      	bmi.n	8019dce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8019d0a:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8019d0e:	42b2      	cmp	r2, r6
 8019d10:	dd5d      	ble.n	8019dce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8019d12:	9a02      	ldr	r2, [sp, #8]
 8019d14:	fb06 5502 	mla	r5, r6, r2, r5
 8019d18:	086a      	lsrs	r2, r5, #1
 8019d1a:	9e03      	ldr	r6, [sp, #12]
 8019d1c:	5cb2      	ldrb	r2, [r6, r2]
 8019d1e:	07ee      	lsls	r6, r5, #31
 8019d20:	bf54      	ite	pl
 8019d22:	f002 020f 	andpl.w	r2, r2, #15
 8019d26:	1112      	asrmi	r2, r2, #4
 8019d28:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019d2c:	b2d2      	uxtb	r2, r2
 8019d2e:	2a00      	cmp	r2, #0
 8019d30:	d04d      	beq.n	8019dce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8019d32:	f06f 0601 	mvn.w	r6, #1
 8019d36:	fb06 fb0c 	mul.w	fp, r6, ip
 8019d3a:	9e05      	ldr	r6, [sp, #20]
 8019d3c:	4d5e      	ldr	r5, [pc, #376]	; (8019eb8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8019d3e:	f834 e00b 	ldrh.w	lr, [r4, fp]
 8019d42:	682d      	ldr	r5, [r5, #0]
 8019d44:	4372      	muls	r2, r6
 8019d46:	1c56      	adds	r6, r2, #1
 8019d48:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8019d4c:	1212      	asrs	r2, r2, #8
 8019d4e:	0a2f      	lsrs	r7, r5, #8
 8019d50:	fa1f fa82 	uxth.w	sl, r2
 8019d54:	ea4f 262e 	mov.w	r6, lr, asr #8
 8019d58:	43d2      	mvns	r2, r2
 8019d5a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019d5e:	b2d2      	uxtb	r2, r2
 8019d60:	fb17 f70a 	smulbb	r7, r7, sl
 8019d64:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 8019d68:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8019d6c:	fb06 7602 	mla	r6, r6, r2, r7
 8019d70:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8019d74:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8019d78:	fb19 f90a 	smulbb	r9, r9, sl
 8019d7c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019d80:	00ed      	lsls	r5, r5, #3
 8019d82:	fb07 9702 	mla	r7, r7, r2, r9
 8019d86:	b2ed      	uxtb	r5, r5
 8019d88:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8019d8c:	b2bf      	uxth	r7, r7
 8019d8e:	fa5f fe8e 	uxtb.w	lr, lr
 8019d92:	fb15 f50a 	smulbb	r5, r5, sl
 8019d96:	b2b6      	uxth	r6, r6
 8019d98:	fb0e 5502 	mla	r5, lr, r2, r5
 8019d9c:	f107 0901 	add.w	r9, r7, #1
 8019da0:	b2ad      	uxth	r5, r5
 8019da2:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8019da6:	f106 0901 	add.w	r9, r6, #1
 8019daa:	097f      	lsrs	r7, r7, #5
 8019dac:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8019db0:	f105 0e01 	add.w	lr, r5, #1
 8019db4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8019db8:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8019dbc:	eb0e 2e15 	add.w	lr, lr, r5, lsr #8
 8019dc0:	4337      	orrs	r7, r6
 8019dc2:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8019dc6:	ea47 070e 	orr.w	r7, r7, lr
 8019dca:	f824 700b 	strh.w	r7, [r4, fp]
 8019dce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019dd0:	4410      	add	r0, r2
 8019dd2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019dd4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019dd8:	4411      	add	r1, r2
 8019dda:	e74a      	b.n	8019c72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8019ddc:	f04f 0e00 	mov.w	lr, #0
 8019de0:	eba3 020e 	sub.w	r2, r3, lr
 8019de4:	2a00      	cmp	r2, #0
 8019de6:	f77f af48 	ble.w	8019c7a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8019dea:	9e02      	ldr	r6, [sp, #8]
 8019dec:	1402      	asrs	r2, r0, #16
 8019dee:	140d      	asrs	r5, r1, #16
 8019df0:	fb06 2505 	mla	r5, r6, r5, r2
 8019df4:	086a      	lsrs	r2, r5, #1
 8019df6:	9e03      	ldr	r6, [sp, #12]
 8019df8:	5cb2      	ldrb	r2, [r6, r2]
 8019dfa:	07ed      	lsls	r5, r5, #31
 8019dfc:	bf54      	ite	pl
 8019dfe:	f002 020f 	andpl.w	r2, r2, #15
 8019e02:	1112      	asrmi	r2, r2, #4
 8019e04:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019e08:	b2d2      	uxtb	r2, r2
 8019e0a:	2a00      	cmp	r2, #0
 8019e0c:	d049      	beq.n	8019ea2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8019e0e:	9e05      	ldr	r6, [sp, #20]
 8019e10:	4d29      	ldr	r5, [pc, #164]	; (8019eb8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8019e12:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8019e16:	682d      	ldr	r5, [r5, #0]
 8019e18:	4372      	muls	r2, r6
 8019e1a:	1c56      	adds	r6, r2, #1
 8019e1c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8019e20:	1212      	asrs	r2, r2, #8
 8019e22:	0a2f      	lsrs	r7, r5, #8
 8019e24:	fa1f fa82 	uxth.w	sl, r2
 8019e28:	ea4f 262c 	mov.w	r6, ip, asr #8
 8019e2c:	43d2      	mvns	r2, r2
 8019e2e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019e32:	b2d2      	uxtb	r2, r2
 8019e34:	fb17 f70a 	smulbb	r7, r7, sl
 8019e38:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 8019e3c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8019e40:	fb06 7602 	mla	r6, r6, r2, r7
 8019e44:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8019e48:	ea4f 07ec 	mov.w	r7, ip, asr #3
 8019e4c:	fb19 f90a 	smulbb	r9, r9, sl
 8019e50:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019e54:	00ed      	lsls	r5, r5, #3
 8019e56:	fb07 9702 	mla	r7, r7, r2, r9
 8019e5a:	b2ed      	uxtb	r5, r5
 8019e5c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8019e60:	b2bf      	uxth	r7, r7
 8019e62:	fa5f fc8c 	uxtb.w	ip, ip
 8019e66:	fb15 f50a 	smulbb	r5, r5, sl
 8019e6a:	b2b6      	uxth	r6, r6
 8019e6c:	fb0c 5502 	mla	r5, ip, r2, r5
 8019e70:	f107 0901 	add.w	r9, r7, #1
 8019e74:	b2ad      	uxth	r5, r5
 8019e76:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8019e7a:	f106 0b01 	add.w	fp, r6, #1
 8019e7e:	097f      	lsrs	r7, r7, #5
 8019e80:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 8019e84:	f105 0c01 	add.w	ip, r5, #1
 8019e88:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8019e8c:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8019e90:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 8019e94:	4337      	orrs	r7, r6
 8019e96:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8019e9a:	ea47 070c 	orr.w	r7, r7, ip
 8019e9e:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8019ea2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019ea4:	4410      	add	r0, r2
 8019ea6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019ea8:	f10e 0e01 	add.w	lr, lr, #1
 8019eac:	4411      	add	r1, r2
 8019eae:	e797      	b.n	8019de0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8019eb0:	b007      	add	sp, #28
 8019eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019eb6:	bf00      	nop
 8019eb8:	2000a044 	.word	0x2000a044

08019ebc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ec0:	b087      	sub	sp, #28
 8019ec2:	468b      	mov	fp, r1
 8019ec4:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019ec6:	9205      	str	r2, [sp, #20]
 8019ec8:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8019ecc:	6841      	ldr	r1, [r0, #4]
 8019ece:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8019ed2:	fb01 2404 	mla	r4, r1, r4, r2
 8019ed6:	6802      	ldr	r2, [r0, #0]
 8019ed8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019edc:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8019ee0:	3201      	adds	r2, #1
 8019ee2:	f022 0201 	bic.w	r2, r2, #1
 8019ee6:	9201      	str	r2, [sp, #4]
 8019ee8:	f8d8 2000 	ldr.w	r2, [r8]
 8019eec:	9202      	str	r2, [sp, #8]
 8019eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019ef2:	f1bb 0f00 	cmp.w	fp, #0
 8019ef6:	dc03      	bgt.n	8019f00 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8019ef8:	9a05      	ldr	r2, [sp, #20]
 8019efa:	2a00      	cmp	r2, #0
 8019efc:	f340 8156 	ble.w	801a1ac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8019f00:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019f02:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8019f06:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8019f0a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019f0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019f10:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019f14:	2b00      	cmp	r3, #0
 8019f16:	dd0e      	ble.n	8019f36 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8019f18:	1402      	asrs	r2, r0, #16
 8019f1a:	d405      	bmi.n	8019f28 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8019f1c:	42ba      	cmp	r2, r7
 8019f1e:	da03      	bge.n	8019f28 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8019f20:	140a      	asrs	r2, r1, #16
 8019f22:	d401      	bmi.n	8019f28 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8019f24:	42b2      	cmp	r2, r6
 8019f26:	db07      	blt.n	8019f38 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019f28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019f2a:	4410      	add	r0, r2
 8019f2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019f2e:	3b01      	subs	r3, #1
 8019f30:	4411      	add	r1, r2
 8019f32:	3402      	adds	r4, #2
 8019f34:	e7ee      	b.n	8019f14 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8019f36:	d017      	beq.n	8019f68 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8019f38:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019f3a:	1e5a      	subs	r2, r3, #1
 8019f3c:	fb05 0502 	mla	r5, r5, r2, r0
 8019f40:	142d      	asrs	r5, r5, #16
 8019f42:	d409      	bmi.n	8019f58 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8019f44:	42bd      	cmp	r5, r7
 8019f46:	da07      	bge.n	8019f58 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8019f48:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019f4a:	fb05 1202 	mla	r2, r5, r2, r1
 8019f4e:	1412      	asrs	r2, r2, #16
 8019f50:	d402      	bmi.n	8019f58 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8019f52:	42b2      	cmp	r2, r6
 8019f54:	f2c0 80be 	blt.w	801a0d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8019f58:	2600      	movs	r6, #0
 8019f5a:	199a      	adds	r2, r3, r6
 8019f5c:	2a00      	cmp	r2, #0
 8019f5e:	dc3e      	bgt.n	8019fde <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8019f60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019f64:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019f68:	f1bb 0f00 	cmp.w	fp, #0
 8019f6c:	f340 811e 	ble.w	801a1ac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8019f70:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019f74:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019f78:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019f7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019f7e:	f1bb 0b01 	subs.w	fp, fp, #1
 8019f82:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019f86:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019f8a:	eeb0 6a62 	vmov.f32	s12, s5
 8019f8e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019f92:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019f96:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019f9a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8019f9e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019fa2:	eeb0 6a43 	vmov.f32	s12, s6
 8019fa6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019faa:	ee12 2a90 	vmov	r2, s5
 8019fae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019fb2:	fb92 f3f3 	sdiv	r3, r2, r3
 8019fb6:	ee13 2a10 	vmov	r2, s6
 8019fba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019fbe:	9313      	str	r3, [sp, #76]	; 0x4c
 8019fc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019fc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8019fc6:	9a05      	ldr	r2, [sp, #20]
 8019fc8:	9314      	str	r3, [sp, #80]	; 0x50
 8019fca:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8019fce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019fd0:	eeb0 3a67 	vmov.f32	s6, s15
 8019fd4:	bf08      	it	eq
 8019fd6:	4613      	moveq	r3, r2
 8019fd8:	eef0 2a47 	vmov.f32	s5, s14
 8019fdc:	e789      	b.n	8019ef2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8019fde:	1405      	asrs	r5, r0, #16
 8019fe0:	d465      	bmi.n	801a0ae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 8019fe2:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8019fe6:	42aa      	cmp	r2, r5
 8019fe8:	dd61      	ble.n	801a0ae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 8019fea:	140f      	asrs	r7, r1, #16
 8019fec:	d45f      	bmi.n	801a0ae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 8019fee:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8019ff2:	42ba      	cmp	r2, r7
 8019ff4:	dd5b      	ble.n	801a0ae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 8019ff6:	9a01      	ldr	r2, [sp, #4]
 8019ff8:	fb07 5502 	mla	r5, r7, r2, r5
 8019ffc:	086a      	lsrs	r2, r5, #1
 8019ffe:	9f02      	ldr	r7, [sp, #8]
 801a000:	5cba      	ldrb	r2, [r7, r2]
 801a002:	07ef      	lsls	r7, r5, #31
 801a004:	bf54      	ite	pl
 801a006:	f002 020f 	andpl.w	r2, r2, #15
 801a00a:	1112      	asrmi	r2, r2, #4
 801a00c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a010:	b2d2      	uxtb	r2, r2
 801a012:	2a00      	cmp	r2, #0
 801a014:	d04b      	beq.n	801a0ae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801a016:	4d67      	ldr	r5, [pc, #412]	; (801a1b4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>)
 801a018:	682f      	ldr	r7, [r5, #0]
 801a01a:	08fd      	lsrs	r5, r7, #3
 801a01c:	ea4f 2917 	mov.w	r9, r7, lsr #8
 801a020:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801a024:	00ff      	lsls	r7, r7, #3
 801a026:	2aff      	cmp	r2, #255	; 0xff
 801a028:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801a02c:	9503      	str	r5, [sp, #12]
 801a02e:	b2ff      	uxtb	r7, r7
 801a030:	d043      	beq.n	801a0ba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801a032:	f06f 0501 	mvn.w	r5, #1
 801a036:	4375      	muls	r5, r6
 801a038:	fa1f fa82 	uxth.w	sl, r2
 801a03c:	f834 e005 	ldrh.w	lr, [r4, r5]
 801a040:	9504      	str	r5, [sp, #16]
 801a042:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801a046:	43d2      	mvns	r2, r2
 801a048:	b2d2      	uxtb	r2, r2
 801a04a:	fb19 f90a 	smulbb	r9, r9, sl
 801a04e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a052:	9d03      	ldr	r5, [sp, #12]
 801a054:	fb0c 9c02 	mla	ip, ip, r2, r9
 801a058:	ea4f 09ee 	mov.w	r9, lr, asr #3
 801a05c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801a060:	fb15 f50a 	smulbb	r5, r5, sl
 801a064:	fb09 5502 	mla	r5, r9, r2, r5
 801a068:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a06c:	b2ad      	uxth	r5, r5
 801a06e:	fa5f fe8e 	uxtb.w	lr, lr
 801a072:	fb17 f70a 	smulbb	r7, r7, sl
 801a076:	fa1f fc8c 	uxth.w	ip, ip
 801a07a:	fb0e 7702 	mla	r7, lr, r2, r7
 801a07e:	f105 0901 	add.w	r9, r5, #1
 801a082:	b2bf      	uxth	r7, r7
 801a084:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801a088:	f10c 0901 	add.w	r9, ip, #1
 801a08c:	1c7a      	adds	r2, r7, #1
 801a08e:	096d      	lsrs	r5, r5, #5
 801a090:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801a094:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801a098:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a09c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a0a0:	ea45 050c 	orr.w	r5, r5, ip
 801a0a4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801a0a8:	9a04      	ldr	r2, [sp, #16]
 801a0aa:	433d      	orrs	r5, r7
 801a0ac:	52a5      	strh	r5, [r4, r2]
 801a0ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a0b0:	4410      	add	r0, r2
 801a0b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a0b4:	3e01      	subs	r6, #1
 801a0b6:	4411      	add	r1, r2
 801a0b8:	e74f      	b.n	8019f5a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a0ba:	f06f 0201 	mvn.w	r2, #1
 801a0be:	fb02 fe06 	mul.w	lr, r2, r6
 801a0c2:	9a03      	ldr	r2, [sp, #12]
 801a0c4:	00d5      	lsls	r5, r2, #3
 801a0c6:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801a0ca:	ea45 05d7 	orr.w	r5, r5, r7, lsr #3
 801a0ce:	f824 500e 	strh.w	r5, [r4, lr]
 801a0d2:	e7ec      	b.n	801a0ae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801a0d4:	f04f 0e00 	mov.w	lr, #0
 801a0d8:	eba3 020e 	sub.w	r2, r3, lr
 801a0dc:	2a00      	cmp	r2, #0
 801a0de:	f77f af3f 	ble.w	8019f60 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801a0e2:	9e01      	ldr	r6, [sp, #4]
 801a0e4:	1402      	asrs	r2, r0, #16
 801a0e6:	140d      	asrs	r5, r1, #16
 801a0e8:	fb06 2505 	mla	r5, r6, r5, r2
 801a0ec:	086a      	lsrs	r2, r5, #1
 801a0ee:	9e02      	ldr	r6, [sp, #8]
 801a0f0:	5cb2      	ldrb	r2, [r6, r2]
 801a0f2:	07ed      	lsls	r5, r5, #31
 801a0f4:	bf54      	ite	pl
 801a0f6:	f002 020f 	andpl.w	r2, r2, #15
 801a0fa:	1112      	asrmi	r2, r2, #4
 801a0fc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a100:	b2d2      	uxtb	r2, r2
 801a102:	2a00      	cmp	r2, #0
 801a104:	d045      	beq.n	801a192 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801a106:	4d2b      	ldr	r5, [pc, #172]	; (801a1b4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>)
 801a108:	682e      	ldr	r6, [r5, #0]
 801a10a:	2aff      	cmp	r2, #255	; 0xff
 801a10c:	ea4f 2916 	mov.w	r9, r6, lsr #8
 801a110:	ea4f 05d6 	mov.w	r5, r6, lsr #3
 801a114:	ea4f 06c6 	mov.w	r6, r6, lsl #3
 801a118:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801a11c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801a120:	b2f6      	uxtb	r6, r6
 801a122:	d03d      	beq.n	801a1a0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801a124:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801a128:	fa1f fa82 	uxth.w	sl, r2
 801a12c:	ea4f 272c 	mov.w	r7, ip, asr #8
 801a130:	43d2      	mvns	r2, r2
 801a132:	b2d2      	uxtb	r2, r2
 801a134:	fb19 f90a 	smulbb	r9, r9, sl
 801a138:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a13c:	fb07 9702 	mla	r7, r7, r2, r9
 801a140:	ea4f 09ec 	mov.w	r9, ip, asr #3
 801a144:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801a148:	fb15 f50a 	smulbb	r5, r5, sl
 801a14c:	fb09 5502 	mla	r5, r9, r2, r5
 801a150:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801a154:	b2ad      	uxth	r5, r5
 801a156:	fa5f fc8c 	uxtb.w	ip, ip
 801a15a:	fb16 f60a 	smulbb	r6, r6, sl
 801a15e:	b2bf      	uxth	r7, r7
 801a160:	fb0c 6602 	mla	r6, ip, r2, r6
 801a164:	f105 0901 	add.w	r9, r5, #1
 801a168:	b2b6      	uxth	r6, r6
 801a16a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801a16e:	f107 0901 	add.w	r9, r7, #1
 801a172:	096d      	lsrs	r5, r5, #5
 801a174:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801a178:	1c72      	adds	r2, r6, #1
 801a17a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801a17e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a182:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801a186:	433d      	orrs	r5, r7
 801a188:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801a18c:	4335      	orrs	r5, r6
 801a18e:	f824 501e 	strh.w	r5, [r4, lr, lsl #1]
 801a192:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a194:	4410      	add	r0, r2
 801a196:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a198:	f10e 0e01 	add.w	lr, lr, #1
 801a19c:	4411      	add	r1, r2
 801a19e:	e79b      	b.n	801a0d8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 801a1a0:	00ed      	lsls	r5, r5, #3
 801a1a2:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801a1a6:	ea45 05d6 	orr.w	r5, r5, r6, lsr #3
 801a1aa:	e7f0      	b.n	801a18e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 801a1ac:	b007      	add	sp, #28
 801a1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1b2:	bf00      	nop
 801a1b4:	2000a044 	.word	0x2000a044

0801a1b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801a1b8:	4770      	bx	lr

0801a1ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801a1ba:	4770      	bx	lr

0801a1bc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801a1bc:	4770      	bx	lr

0801a1be <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801a1be:	4770      	bx	lr

0801a1c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801a1c0:	4770      	bx	lr

0801a1c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801a1c2:	4770      	bx	lr

0801a1c4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801a1c4:	4770      	bx	lr

0801a1c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801a1c6:	4770      	bx	lr

0801a1c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801a1c8:	4770      	bx	lr

0801a1ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801a1ca:	4770      	bx	lr

0801a1cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801a1cc:	4770      	bx	lr

0801a1ce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801a1ce:	4770      	bx	lr

0801a1d0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801a1d0:	4770      	bx	lr

0801a1d2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801a1d2:	4770      	bx	lr

0801a1d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801a1d4:	4770      	bx	lr

0801a1d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801a1d6:	4770      	bx	lr

0801a1d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801a1d8:	4770      	bx	lr

0801a1da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801a1da:	4770      	bx	lr

0801a1dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801a1dc:	4770      	bx	lr

0801a1de <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801a1de:	4770      	bx	lr

0801a1e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801a1e0:	4770      	bx	lr

0801a1e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801a1e2:	4770      	bx	lr

0801a1e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801a1e4:	4770      	bx	lr

0801a1e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801a1e6:	4770      	bx	lr

0801a1e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801a1e8:	4770      	bx	lr

0801a1ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801a1ea:	4770      	bx	lr

0801a1ec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801a1ec:	4770      	bx	lr

0801a1ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801a1ee:	4770      	bx	lr

0801a1f0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801a1f0:	b508      	push	{r3, lr}
 801a1f2:	4b06      	ldr	r3, [pc, #24]	; (801a20c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 801a1f4:	8818      	ldrh	r0, [r3, #0]
 801a1f6:	b928      	cbnz	r0, 801a204 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 801a1f8:	4b05      	ldr	r3, [pc, #20]	; (801a210 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 801a1fa:	4a06      	ldr	r2, [pc, #24]	; (801a214 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 801a1fc:	4806      	ldr	r0, [pc, #24]	; (801a218 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 801a1fe:	2154      	movs	r1, #84	; 0x54
 801a200:	f009 faa0 	bl	8023744 <__assert_func>
 801a204:	0040      	lsls	r0, r0, #1
 801a206:	b280      	uxth	r0, r0
 801a208:	bd08      	pop	{r3, pc}
 801a20a:	bf00      	nop
 801a20c:	2000a036 	.word	0x2000a036
 801a210:	080281f5 	.word	0x080281f5
 801a214:	0802877f 	.word	0x0802877f
 801a218:	08028237 	.word	0x08028237

0801a21c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801a21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a220:	b08b      	sub	sp, #44	; 0x2c
 801a222:	460f      	mov	r7, r1
 801a224:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801a228:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801a22c:	4616      	mov	r6, r2
 801a22e:	f1bb 0f00 	cmp.w	fp, #0
 801a232:	d046      	beq.n	801a2c2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801a234:	6810      	ldr	r0, [r2, #0]
 801a236:	6851      	ldr	r1, [r2, #4]
 801a238:	ad06      	add	r5, sp, #24
 801a23a:	c503      	stmia	r5!, {r0, r1}
 801a23c:	6818      	ldr	r0, [r3, #0]
 801a23e:	6859      	ldr	r1, [r3, #4]
 801a240:	ad08      	add	r5, sp, #32
 801a242:	c503      	stmia	r5!, {r0, r1}
 801a244:	a806      	add	r0, sp, #24
 801a246:	f7fa f9d7 	bl	80145f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a24a:	4631      	mov	r1, r6
 801a24c:	a808      	add	r0, sp, #32
 801a24e:	f7fa f9bb 	bl	80145c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a252:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801a256:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801a25a:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801a25e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801a262:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801a266:	fb16 2103 	smlabb	r1, r6, r3, r2
 801a26a:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801a26e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801a272:	4f5d      	ldr	r7, [pc, #372]	; (801a3e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 801a274:	440a      	add	r2, r1
 801a276:	f8ad 2020 	strh.w	r2, [sp, #32]
 801a27a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801a27e:	6838      	ldr	r0, [r7, #0]
 801a280:	4413      	add	r3, r2
 801a282:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801a286:	6803      	ldr	r3, [r0, #0]
 801a288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a28a:	4798      	blx	r3
 801a28c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801a290:	46b9      	mov	r9, r7
 801a292:	d019      	beq.n	801a2c8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801a294:	f010 0f04 	tst.w	r0, #4
 801a298:	d01a      	beq.n	801a2d0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801a29a:	f8d9 0000 	ldr.w	r0, [r9]
 801a29e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801a2a2:	6801      	ldr	r1, [r0, #0]
 801a2a4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801a2a8:	e9cd b403 	strd	fp, r4, [sp, #12]
 801a2ac:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801a2b0:	9402      	str	r4, [sp, #8]
 801a2b2:	b2ad      	uxth	r5, r5
 801a2b4:	fa1f f488 	uxth.w	r4, r8
 801a2b8:	9501      	str	r5, [sp, #4]
 801a2ba:	9400      	str	r4, [sp, #0]
 801a2bc:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 801a2be:	4631      	mov	r1, r6
 801a2c0:	47a0      	blx	r4
 801a2c2:	b00b      	add	sp, #44	; 0x2c
 801a2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2c8:	b914      	cbnz	r4, 801a2d0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801a2ca:	f010 0f01 	tst.w	r0, #1
 801a2ce:	e7e3      	b.n	801a298 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801a2d0:	f8d9 0000 	ldr.w	r0, [r9]
 801a2d4:	6803      	ldr	r3, [r0, #0]
 801a2d6:	6a1b      	ldr	r3, [r3, #32]
 801a2d8:	4798      	blx	r3
 801a2da:	4b44      	ldr	r3, [pc, #272]	; (801a3ec <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d0>)
 801a2dc:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801a2e0:	881a      	ldrh	r2, [r3, #0]
 801a2e2:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801a2e6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801a2ea:	fb02 1404 	mla	r4, r2, r4, r1
 801a2ee:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801a2f2:	469a      	mov	sl, r3
 801a2f4:	fb05 f502 	mul.w	r5, r5, r2
 801a2f8:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801a2fc:	d058      	beq.n	801a3b0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x194>
 801a2fe:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801a302:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801a306:	fa1f f28b 	uxth.w	r2, fp
 801a30a:	fa1f f989 	uxth.w	r9, r9
 801a30e:	469e      	mov	lr, r3
 801a310:	42ac      	cmp	r4, r5
 801a312:	d263      	bcs.n	801a3dc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 801a314:	eb04 0a07 	add.w	sl, r4, r7
 801a318:	4554      	cmp	r4, sl
 801a31a:	d23c      	bcs.n	801a396 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17a>
 801a31c:	8821      	ldrh	r1, [r4, #0]
 801a31e:	f836 3b02 	ldrh.w	r3, [r6], #2
 801a322:	1208      	asrs	r0, r1, #8
 801a324:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801a328:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801a32c:	fb10 f009 	smulbb	r0, r0, r9
 801a330:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801a334:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a338:	00c9      	lsls	r1, r1, #3
 801a33a:	fb0c 0c02 	mla	ip, ip, r2, r0
 801a33e:	b2c9      	uxtb	r1, r1
 801a340:	10d8      	asrs	r0, r3, #3
 801a342:	00db      	lsls	r3, r3, #3
 801a344:	fb11 f109 	smulbb	r1, r1, r9
 801a348:	b2db      	uxtb	r3, r3
 801a34a:	fa1f fc8c 	uxth.w	ip, ip
 801a34e:	fb03 1302 	mla	r3, r3, r2, r1
 801a352:	b29b      	uxth	r3, r3
 801a354:	f10c 0101 	add.w	r1, ip, #1
 801a358:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801a35c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 801a360:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801a364:	fb1b fb09 	smulbb	fp, fp, r9
 801a368:	1c59      	adds	r1, r3, #1
 801a36a:	fb00 b002 	mla	r0, r0, r2, fp
 801a36e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801a372:	b280      	uxth	r0, r0
 801a374:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801a378:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a37c:	ea4c 0c03 	orr.w	ip, ip, r3
 801a380:	1c43      	adds	r3, r0, #1
 801a382:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801a386:	0940      	lsrs	r0, r0, #5
 801a388:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801a38c:	ea4c 0c00 	orr.w	ip, ip, r0
 801a390:	f824 cb02 	strh.w	ip, [r4], #2
 801a394:	e7c0      	b.n	801a318 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801a396:	f8be 3000 	ldrh.w	r3, [lr]
 801a39a:	eba3 0308 	sub.w	r3, r3, r8
 801a39e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a3a2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801a3a6:	eba3 0308 	sub.w	r3, r3, r8
 801a3aa:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801a3ae:	e7af      	b.n	801a310 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801a3b0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801a3b4:	f8d9 0000 	ldr.w	r0, [r9]
 801a3b8:	42ac      	cmp	r4, r5
 801a3ba:	6803      	ldr	r3, [r0, #0]
 801a3bc:	d20e      	bcs.n	801a3dc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 801a3be:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
 801a3c2:	4632      	mov	r2, r6
 801a3c4:	463b      	mov	r3, r7
 801a3c6:	4621      	mov	r1, r4
 801a3c8:	47c0      	blx	r8
 801a3ca:	f8ba 3000 	ldrh.w	r3, [sl]
 801a3ce:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a3d2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801a3d6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801a3da:	e7eb      	b.n	801a3b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>
 801a3dc:	4b02      	ldr	r3, [pc, #8]	; (801a3e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 801a3de:	6818      	ldr	r0, [r3, #0]
 801a3e0:	6803      	ldr	r3, [r0, #0]
 801a3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3e4:	4798      	blx	r3
 801a3e6:	e76c      	b.n	801a2c2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801a3e8:	2000a03c 	.word	0x2000a03c
 801a3ec:	2000a036 	.word	0x2000a036

0801a3f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801a3f0:	b510      	push	{r4, lr}
 801a3f2:	2104      	movs	r1, #4
 801a3f4:	4604      	mov	r4, r0
 801a3f6:	f009 f87a 	bl	80234ee <_ZdlPvj>
 801a3fa:	4620      	mov	r0, r4
 801a3fc:	bd10      	pop	{r4, pc}

0801a3fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801a3fe:	b510      	push	{r4, lr}
 801a400:	2104      	movs	r1, #4
 801a402:	4604      	mov	r4, r0
 801a404:	f009 f873 	bl	80234ee <_ZdlPvj>
 801a408:	4620      	mov	r0, r4
 801a40a:	bd10      	pop	{r4, pc}

0801a40c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801a40c:	b510      	push	{r4, lr}
 801a40e:	2104      	movs	r1, #4
 801a410:	4604      	mov	r4, r0
 801a412:	f009 f86c 	bl	80234ee <_ZdlPvj>
 801a416:	4620      	mov	r0, r4
 801a418:	bd10      	pop	{r4, pc}

0801a41a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801a41a:	b510      	push	{r4, lr}
 801a41c:	2104      	movs	r1, #4
 801a41e:	4604      	mov	r4, r0
 801a420:	f009 f865 	bl	80234ee <_ZdlPvj>
 801a424:	4620      	mov	r0, r4
 801a426:	bd10      	pop	{r4, pc}

0801a428 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801a428:	b510      	push	{r4, lr}
 801a42a:	2104      	movs	r1, #4
 801a42c:	4604      	mov	r4, r0
 801a42e:	f009 f85e 	bl	80234ee <_ZdlPvj>
 801a432:	4620      	mov	r0, r4
 801a434:	bd10      	pop	{r4, pc}

0801a436 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801a436:	b510      	push	{r4, lr}
 801a438:	2104      	movs	r1, #4
 801a43a:	4604      	mov	r4, r0
 801a43c:	f009 f857 	bl	80234ee <_ZdlPvj>
 801a440:	4620      	mov	r0, r4
 801a442:	bd10      	pop	{r4, pc}

0801a444 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801a444:	b510      	push	{r4, lr}
 801a446:	2104      	movs	r1, #4
 801a448:	4604      	mov	r4, r0
 801a44a:	f009 f850 	bl	80234ee <_ZdlPvj>
 801a44e:	4620      	mov	r0, r4
 801a450:	bd10      	pop	{r4, pc}

0801a452 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801a452:	b510      	push	{r4, lr}
 801a454:	2104      	movs	r1, #4
 801a456:	4604      	mov	r4, r0
 801a458:	f009 f849 	bl	80234ee <_ZdlPvj>
 801a45c:	4620      	mov	r0, r4
 801a45e:	bd10      	pop	{r4, pc}

0801a460 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a460:	b510      	push	{r4, lr}
 801a462:	2104      	movs	r1, #4
 801a464:	4604      	mov	r4, r0
 801a466:	f009 f842 	bl	80234ee <_ZdlPvj>
 801a46a:	4620      	mov	r0, r4
 801a46c:	bd10      	pop	{r4, pc}

0801a46e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a46e:	b510      	push	{r4, lr}
 801a470:	2104      	movs	r1, #4
 801a472:	4604      	mov	r4, r0
 801a474:	f009 f83b 	bl	80234ee <_ZdlPvj>
 801a478:	4620      	mov	r0, r4
 801a47a:	bd10      	pop	{r4, pc}

0801a47c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a47c:	b510      	push	{r4, lr}
 801a47e:	2104      	movs	r1, #4
 801a480:	4604      	mov	r4, r0
 801a482:	f009 f834 	bl	80234ee <_ZdlPvj>
 801a486:	4620      	mov	r0, r4
 801a488:	bd10      	pop	{r4, pc}

0801a48a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a48a:	b510      	push	{r4, lr}
 801a48c:	2104      	movs	r1, #4
 801a48e:	4604      	mov	r4, r0
 801a490:	f009 f82d 	bl	80234ee <_ZdlPvj>
 801a494:	4620      	mov	r0, r4
 801a496:	bd10      	pop	{r4, pc}

0801a498 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801a498:	b510      	push	{r4, lr}
 801a49a:	2104      	movs	r1, #4
 801a49c:	4604      	mov	r4, r0
 801a49e:	f009 f826 	bl	80234ee <_ZdlPvj>
 801a4a2:	4620      	mov	r0, r4
 801a4a4:	bd10      	pop	{r4, pc}

0801a4a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801a4a6:	b510      	push	{r4, lr}
 801a4a8:	2104      	movs	r1, #4
 801a4aa:	4604      	mov	r4, r0
 801a4ac:	f009 f81f 	bl	80234ee <_ZdlPvj>
 801a4b0:	4620      	mov	r0, r4
 801a4b2:	bd10      	pop	{r4, pc}

0801a4b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a4b4:	b510      	push	{r4, lr}
 801a4b6:	2104      	movs	r1, #4
 801a4b8:	4604      	mov	r4, r0
 801a4ba:	f009 f818 	bl	80234ee <_ZdlPvj>
 801a4be:	4620      	mov	r0, r4
 801a4c0:	bd10      	pop	{r4, pc}

0801a4c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a4c2:	b510      	push	{r4, lr}
 801a4c4:	2104      	movs	r1, #4
 801a4c6:	4604      	mov	r4, r0
 801a4c8:	f009 f811 	bl	80234ee <_ZdlPvj>
 801a4cc:	4620      	mov	r0, r4
 801a4ce:	bd10      	pop	{r4, pc}

0801a4d0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801a4d0:	b510      	push	{r4, lr}
 801a4d2:	2104      	movs	r1, #4
 801a4d4:	4604      	mov	r4, r0
 801a4d6:	f009 f80a 	bl	80234ee <_ZdlPvj>
 801a4da:	4620      	mov	r0, r4
 801a4dc:	bd10      	pop	{r4, pc}

0801a4de <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801a4de:	b510      	push	{r4, lr}
 801a4e0:	2104      	movs	r1, #4
 801a4e2:	4604      	mov	r4, r0
 801a4e4:	f009 f803 	bl	80234ee <_ZdlPvj>
 801a4e8:	4620      	mov	r0, r4
 801a4ea:	bd10      	pop	{r4, pc}

0801a4ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a4ec:	b510      	push	{r4, lr}
 801a4ee:	2104      	movs	r1, #4
 801a4f0:	4604      	mov	r4, r0
 801a4f2:	f008 fffc 	bl	80234ee <_ZdlPvj>
 801a4f6:	4620      	mov	r0, r4
 801a4f8:	bd10      	pop	{r4, pc}

0801a4fa <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a4fa:	b510      	push	{r4, lr}
 801a4fc:	2104      	movs	r1, #4
 801a4fe:	4604      	mov	r4, r0
 801a500:	f008 fff5 	bl	80234ee <_ZdlPvj>
 801a504:	4620      	mov	r0, r4
 801a506:	bd10      	pop	{r4, pc}

0801a508 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a508:	b510      	push	{r4, lr}
 801a50a:	2104      	movs	r1, #4
 801a50c:	4604      	mov	r4, r0
 801a50e:	f008 ffee 	bl	80234ee <_ZdlPvj>
 801a512:	4620      	mov	r0, r4
 801a514:	bd10      	pop	{r4, pc}

0801a516 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a516:	b510      	push	{r4, lr}
 801a518:	2104      	movs	r1, #4
 801a51a:	4604      	mov	r4, r0
 801a51c:	f008 ffe7 	bl	80234ee <_ZdlPvj>
 801a520:	4620      	mov	r0, r4
 801a522:	bd10      	pop	{r4, pc}

0801a524 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a524:	b510      	push	{r4, lr}
 801a526:	2104      	movs	r1, #4
 801a528:	4604      	mov	r4, r0
 801a52a:	f008 ffe0 	bl	80234ee <_ZdlPvj>
 801a52e:	4620      	mov	r0, r4
 801a530:	bd10      	pop	{r4, pc}

0801a532 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a532:	b510      	push	{r4, lr}
 801a534:	2104      	movs	r1, #4
 801a536:	4604      	mov	r4, r0
 801a538:	f008 ffd9 	bl	80234ee <_ZdlPvj>
 801a53c:	4620      	mov	r0, r4
 801a53e:	bd10      	pop	{r4, pc}

0801a540 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801a540:	b510      	push	{r4, lr}
 801a542:	2104      	movs	r1, #4
 801a544:	4604      	mov	r4, r0
 801a546:	f008 ffd2 	bl	80234ee <_ZdlPvj>
 801a54a:	4620      	mov	r0, r4
 801a54c:	bd10      	pop	{r4, pc}

0801a54e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801a54e:	b510      	push	{r4, lr}
 801a550:	2104      	movs	r1, #4
 801a552:	4604      	mov	r4, r0
 801a554:	f008 ffcb 	bl	80234ee <_ZdlPvj>
 801a558:	4620      	mov	r0, r4
 801a55a:	bd10      	pop	{r4, pc}

0801a55c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801a55c:	b510      	push	{r4, lr}
 801a55e:	2104      	movs	r1, #4
 801a560:	4604      	mov	r4, r0
 801a562:	f008 ffc4 	bl	80234ee <_ZdlPvj>
 801a566:	4620      	mov	r0, r4
 801a568:	bd10      	pop	{r4, pc}

0801a56a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801a56a:	b510      	push	{r4, lr}
 801a56c:	2104      	movs	r1, #4
 801a56e:	4604      	mov	r4, r0
 801a570:	f008 ffbd 	bl	80234ee <_ZdlPvj>
 801a574:	4620      	mov	r0, r4
 801a576:	bd10      	pop	{r4, pc}

0801a578 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801a578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a57c:	460d      	mov	r5, r1
 801a57e:	b087      	sub	sp, #28
 801a580:	4614      	mov	r4, r2
 801a582:	4698      	mov	r8, r3
 801a584:	b333      	cbz	r3, 801a5d4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801a586:	4608      	mov	r0, r1
 801a588:	f7f7 f979 	bl	801187e <_ZNK8touchgfx4Rect7isEmptyEv>
 801a58c:	bb10      	cbnz	r0, 801a5d4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801a58e:	6828      	ldr	r0, [r5, #0]
 801a590:	6869      	ldr	r1, [r5, #4]
 801a592:	4e73      	ldr	r6, [pc, #460]	; (801a760 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1e8>)
 801a594:	ab04      	add	r3, sp, #16
 801a596:	c303      	stmia	r3!, {r0, r1}
 801a598:	a804      	add	r0, sp, #16
 801a59a:	f7fa f82d 	bl	80145f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a59e:	6830      	ldr	r0, [r6, #0]
 801a5a0:	6803      	ldr	r3, [r0, #0]
 801a5a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a5a4:	4798      	blx	r3
 801a5a6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801a5aa:	d016      	beq.n	801a5da <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801a5ac:	f010 0f08 	tst.w	r0, #8
 801a5b0:	d016      	beq.n	801a5e0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801a5b2:	6830      	ldr	r0, [r6, #0]
 801a5b4:	f8bd 5016 	ldrh.w	r5, [sp, #22]
 801a5b8:	6801      	ldr	r1, [r0, #0]
 801a5ba:	9501      	str	r5, [sp, #4]
 801a5bc:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 801a5c0:	f8cd 8008 	str.w	r8, [sp, #8]
 801a5c4:	9500      	str	r5, [sp, #0]
 801a5c6:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 801a5c8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a5cc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801a5d0:	4621      	mov	r1, r4
 801a5d2:	47a8      	blx	r5
 801a5d4:	b007      	add	sp, #28
 801a5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5da:	f010 0f02 	tst.w	r0, #2
 801a5de:	e7e7      	b.n	801a5b0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x38>
 801a5e0:	6830      	ldr	r0, [r6, #0]
 801a5e2:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801a5e6:	6803      	ldr	r3, [r0, #0]
 801a5e8:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801a5ec:	6a1b      	ldr	r3, [r3, #32]
 801a5ee:	4798      	blx	r3
 801a5f0:	495c      	ldr	r1, [pc, #368]	; (801a764 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ec>)
 801a5f2:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 801a5f6:	880b      	ldrh	r3, [r1, #0]
 801a5f8:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801a5fc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801a600:	fb03 c202 	mla	r2, r3, r2, ip
 801a604:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801a608:	468e      	mov	lr, r1
 801a60a:	fb07 f203 	mul.w	r2, r7, r3
 801a60e:	d053      	beq.n	801a6b8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x140>
 801a610:	fa1f f388 	uxth.w	r3, r8
 801a614:	f1c8 07ff 	rsb	r7, r8, #255	; 0xff
 801a618:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 801a61c:	ea4f 2814 	mov.w	r8, r4, lsr #8
 801a620:	00e4      	lsls	r4, r4, #3
 801a622:	b2e4      	uxtb	r4, r4
 801a624:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801a628:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801a62c:	fb08 f803 	mul.w	r8, r8, r3
 801a630:	fb09 f903 	mul.w	r9, r9, r3
 801a634:	eb00 0142 	add.w	r1, r0, r2, lsl #1
 801a638:	4363      	muls	r3, r4
 801a63a:	006d      	lsls	r5, r5, #1
 801a63c:	b2bc      	uxth	r4, r7
 801a63e:	4288      	cmp	r0, r1
 801a640:	f080 8088 	bcs.w	801a754 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 801a644:	eb00 0a05 	add.w	sl, r0, r5
 801a648:	4550      	cmp	r0, sl
 801a64a:	d22f      	bcs.n	801a6ac <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x134>
 801a64c:	8802      	ldrh	r2, [r0, #0]
 801a64e:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801a652:	10d7      	asrs	r7, r2, #3
 801a654:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a658:	00d2      	lsls	r2, r2, #3
 801a65a:	fb1c fc04 	smulbb	ip, ip, r4
 801a65e:	b2d2      	uxtb	r2, r2
 801a660:	44c4      	add	ip, r8
 801a662:	fb12 f204 	smulbb	r2, r2, r4
 801a666:	fa1f fc8c 	uxth.w	ip, ip
 801a66a:	441a      	add	r2, r3
 801a66c:	b292      	uxth	r2, r2
 801a66e:	f10c 0b01 	add.w	fp, ip, #1
 801a672:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a676:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801a67a:	fb17 f704 	smulbb	r7, r7, r4
 801a67e:	f102 0b01 	add.w	fp, r2, #1
 801a682:	444f      	add	r7, r9
 801a684:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801a688:	b2bf      	uxth	r7, r7
 801a68a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a68e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801a692:	ea4c 0202 	orr.w	r2, ip, r2
 801a696:	f107 0c01 	add.w	ip, r7, #1
 801a69a:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801a69e:	097f      	lsrs	r7, r7, #5
 801a6a0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801a6a4:	433a      	orrs	r2, r7
 801a6a6:	f820 2b02 	strh.w	r2, [r0], #2
 801a6aa:	e7cd      	b.n	801a648 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xd0>
 801a6ac:	f8be 2000 	ldrh.w	r2, [lr]
 801a6b0:	ebc5 0242 	rsb	r2, r5, r2, lsl #1
 801a6b4:	4410      	add	r0, r2
 801a6b6:	e7c2      	b.n	801a63e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xc6>
 801a6b8:	07db      	lsls	r3, r3, #31
 801a6ba:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801a6be:	d50e      	bpl.n	801a6de <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x166>
 801a6c0:	006d      	lsls	r5, r5, #1
 801a6c2:	4290      	cmp	r0, r2
 801a6c4:	d246      	bcs.n	801a754 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 801a6c6:	1943      	adds	r3, r0, r5
 801a6c8:	4298      	cmp	r0, r3
 801a6ca:	d202      	bcs.n	801a6d2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15a>
 801a6cc:	f820 4b02 	strh.w	r4, [r0], #2
 801a6d0:	e7fa      	b.n	801a6c8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x150>
 801a6d2:	f8be 3000 	ldrh.w	r3, [lr]
 801a6d6:	ebc5 0343 	rsb	r3, r5, r3, lsl #1
 801a6da:	4418      	add	r0, r3
 801a6dc:	e7f1      	b.n	801a6c2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x14a>
 801a6de:	0787      	lsls	r7, r0, #30
 801a6e0:	462b      	mov	r3, r5
 801a6e2:	d00a      	beq.n	801a6fa <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x182>
 801a6e4:	4603      	mov	r3, r0
 801a6e6:	4293      	cmp	r3, r2
 801a6e8:	d205      	bcs.n	801a6f6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17e>
 801a6ea:	801c      	strh	r4, [r3, #0]
 801a6ec:	f8be 1000 	ldrh.w	r1, [lr]
 801a6f0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801a6f4:	e7f7      	b.n	801a6e6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
 801a6f6:	3002      	adds	r0, #2
 801a6f8:	1e6b      	subs	r3, r5, #1
 801a6fa:	07dd      	lsls	r5, r3, #31
 801a6fc:	d50d      	bpl.n	801a71a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a2>
 801a6fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a702:	3901      	subs	r1, #1
 801a704:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801a708:	4291      	cmp	r1, r2
 801a70a:	d205      	bcs.n	801a718 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a0>
 801a70c:	800c      	strh	r4, [r1, #0]
 801a70e:	f8be 5000 	ldrh.w	r5, [lr]
 801a712:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 801a716:	e7f7      	b.n	801a708 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>
 801a718:	3b01      	subs	r3, #1
 801a71a:	b1db      	cbz	r3, 801a754 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 801a71c:	b2a1      	uxth	r1, r4
 801a71e:	105b      	asrs	r3, r3, #1
 801a720:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 801a724:	009b      	lsls	r3, r3, #2
 801a726:	4290      	cmp	r0, r2
 801a728:	d214      	bcs.n	801a754 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 801a72a:	0781      	lsls	r1, r0, #30
 801a72c:	d006      	beq.n	801a73c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c4>
 801a72e:	4b0e      	ldr	r3, [pc, #56]	; (801a768 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f0>)
 801a730:	4a0e      	ldr	r2, [pc, #56]	; (801a76c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f4>)
 801a732:	480f      	ldr	r0, [pc, #60]	; (801a770 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f8>)
 801a734:	f44f 7162 	mov.w	r1, #904	; 0x388
 801a738:	f009 f804 	bl	8023744 <__assert_func>
 801a73c:	18c5      	adds	r5, r0, r3
 801a73e:	4601      	mov	r1, r0
 801a740:	42a9      	cmp	r1, r5
 801a742:	d202      	bcs.n	801a74a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1d2>
 801a744:	f841 4b04 	str.w	r4, [r1], #4
 801a748:	e7fa      	b.n	801a740 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c8>
 801a74a:	f8be 1000 	ldrh.w	r1, [lr]
 801a74e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801a752:	e7e8      	b.n	801a726 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ae>
 801a754:	6830      	ldr	r0, [r6, #0]
 801a756:	6803      	ldr	r3, [r0, #0]
 801a758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a75a:	4798      	blx	r3
 801a75c:	e73a      	b.n	801a5d4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801a75e:	bf00      	nop
 801a760:	2000a03c 	.word	0x2000a03c
 801a764:	2000a036 	.word	0x2000a036
 801a768:	08028194 	.word	0x08028194
 801a76c:	0802894c 	.word	0x0802894c
 801a770:	080281c3 	.word	0x080281c3

0801a774 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801a774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a778:	4f97      	ldr	r7, [pc, #604]	; (801a9d8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 801a77a:	4616      	mov	r6, r2
 801a77c:	683a      	ldr	r2, [r7, #0]
 801a77e:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801a782:	2a02      	cmp	r2, #2
 801a784:	b08f      	sub	sp, #60	; 0x3c
 801a786:	4604      	mov	r4, r0
 801a788:	4689      	mov	r9, r1
 801a78a:	d106      	bne.n	801a79a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801a78c:	4b93      	ldr	r3, [pc, #588]	; (801a9dc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 801a78e:	4a94      	ldr	r2, [pc, #592]	; (801a9e0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801a790:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 801a794:	4893      	ldr	r0, [pc, #588]	; (801a9e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 801a796:	f008 ffd5 	bl	8023744 <__assert_func>
 801a79a:	ad0e      	add	r5, sp, #56	; 0x38
 801a79c:	f825 3d24 	strh.w	r3, [r5, #-36]!
 801a7a0:	4628      	mov	r0, r5
 801a7a2:	f7fd fa4f 	bl	8017c44 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801a7a6:	6823      	ldr	r3, [r4, #0]
 801a7a8:	4680      	mov	r8, r0
 801a7aa:	6a1b      	ldr	r3, [r3, #32]
 801a7ac:	4620      	mov	r0, r4
 801a7ae:	4798      	blx	r3
 801a7b0:	4580      	cmp	r8, r0
 801a7b2:	d004      	beq.n	801a7be <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801a7b4:	4b8c      	ldr	r3, [pc, #560]	; (801a9e8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 801a7b6:	4a8a      	ldr	r2, [pc, #552]	; (801a9e0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801a7b8:	f240 21ca 	movw	r1, #714	; 0x2ca
 801a7bc:	e7ea      	b.n	801a794 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801a7be:	4628      	mov	r0, r5
 801a7c0:	f7fd f9b6 	bl	8017b30 <_ZNK8touchgfx6Bitmap7getDataEv>
 801a7c4:	4680      	mov	r8, r0
 801a7c6:	b920      	cbnz	r0, 801a7d2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801a7c8:	4b88      	ldr	r3, [pc, #544]	; (801a9ec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 801a7ca:	4a85      	ldr	r2, [pc, #532]	; (801a9e0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801a7cc:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801a7d0:	e7e0      	b.n	801a794 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801a7d2:	6830      	ldr	r0, [r6, #0]
 801a7d4:	6871      	ldr	r1, [r6, #4]
 801a7d6:	f9b6 a000 	ldrsh.w	sl, [r6]
 801a7da:	ab06      	add	r3, sp, #24
 801a7dc:	c303      	stmia	r3!, {r0, r1}
 801a7de:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801a7e2:	f8d9 0000 	ldr.w	r0, [r9]
 801a7e6:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801a7ea:	ab08      	add	r3, sp, #32
 801a7ec:	c303      	stmia	r3!, {r0, r1}
 801a7ee:	4628      	mov	r0, r5
 801a7f0:	f7fd f896 	bl	8017920 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a7f4:	4606      	mov	r6, r0
 801a7f6:	4628      	mov	r0, r5
 801a7f8:	f7fd f8cc 	bl	8017994 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a7fc:	f10d 0b20 	add.w	fp, sp, #32
 801a800:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801a804:	a806      	add	r0, sp, #24
 801a806:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801a80a:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801a80e:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 801a812:	f7f9 fef1 	bl	80145f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a816:	4658      	mov	r0, fp
 801a818:	f7f9 feee 	bl	80145f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a81c:	a80a      	add	r0, sp, #40	; 0x28
 801a81e:	f7f9 feeb 	bl	80145f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a822:	4d73      	ldr	r5, [pc, #460]	; (801a9f0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 801a824:	4b73      	ldr	r3, [pc, #460]	; (801a9f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801a826:	f9b5 2000 	ldrsh.w	r2, [r5]
 801a82a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a82e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801a832:	2100      	movs	r1, #0
 801a834:	910c      	str	r1, [sp, #48]	; 0x30
 801a836:	4658      	mov	r0, fp
 801a838:	a90c      	add	r1, sp, #48	; 0x30
 801a83a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801a83e:	f7f6 ffdb 	bl	80117f8 <_ZN8touchgfx4RectaNERKS0_>
 801a842:	4658      	mov	r0, fp
 801a844:	f7f7 f81b 	bl	801187e <_ZNK8touchgfx4Rect7isEmptyEv>
 801a848:	2800      	cmp	r0, #0
 801a84a:	f040 8099 	bne.w	801a980 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 801a84e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801a852:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801a856:	4288      	cmp	r0, r1
 801a858:	db37      	blt.n	801a8ca <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 801a85a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801a85e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801a862:	429a      	cmp	r2, r3
 801a864:	db31      	blt.n	801a8ca <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 801a866:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801a86a:	4430      	add	r0, r6
 801a86c:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801a870:	4431      	add	r1, r6
 801a872:	b200      	sxth	r0, r0
 801a874:	b209      	sxth	r1, r1
 801a876:	4288      	cmp	r0, r1
 801a878:	dc27      	bgt.n	801a8ca <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 801a87a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801a87e:	440a      	add	r2, r1
 801a880:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801a884:	440b      	add	r3, r1
 801a886:	b212      	sxth	r2, r2
 801a888:	b21b      	sxth	r3, r3
 801a88a:	429a      	cmp	r2, r3
 801a88c:	dc1d      	bgt.n	801a8ca <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 801a88e:	6823      	ldr	r3, [r4, #0]
 801a890:	4620      	mov	r0, r4
 801a892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a894:	4798      	blx	r3
 801a896:	4682      	mov	sl, r0
 801a898:	6838      	ldr	r0, [r7, #0]
 801a89a:	6803      	ldr	r3, [r0, #0]
 801a89c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a89e:	4798      	blx	r3
 801a8a0:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801a8a4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801a8a8:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801a8ac:	1a5b      	subs	r3, r3, r1
 801a8ae:	b29b      	uxth	r3, r3
 801a8b0:	b21c      	sxth	r4, r3
 801a8b2:	2c00      	cmp	r4, #0
 801a8b4:	dc0e      	bgt.n	801a8d4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801a8b6:	bf1f      	itttt	ne
 801a8b8:	f8ad 1020 	strhne.w	r1, [sp, #32]
 801a8bc:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 801a8c0:	185b      	addne	r3, r3, r1
 801a8c2:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 801a8c6:	4644      	mov	r4, r8
 801a8c8:	e009      	b.n	801a8de <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16a>
 801a8ca:	4b4b      	ldr	r3, [pc, #300]	; (801a9f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801a8cc:	4a44      	ldr	r2, [pc, #272]	; (801a9e0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801a8ce:	f240 21da 	movw	r1, #730	; 0x2da
 801a8d2:	e75f      	b.n	801a794 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801a8d4:	1ad3      	subs	r3, r2, r3
 801a8d6:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801a8da:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801a8de:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 801a8e2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801a8e6:	1b9b      	subs	r3, r3, r6
 801a8e8:	b29b      	uxth	r3, r3
 801a8ea:	b219      	sxth	r1, r3
 801a8ec:	2900      	cmp	r1, #0
 801a8ee:	dd4b      	ble.n	801a988 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x214>
 801a8f0:	4351      	muls	r1, r2
 801a8f2:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801a8f6:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801a8fa:	1acb      	subs	r3, r1, r3
 801a8fc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801a900:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801a904:	2e00      	cmp	r6, #0
 801a906:	dd3b      	ble.n	801a980 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 801a908:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801a90c:	2b00      	cmp	r3, #0
 801a90e:	dd37      	ble.n	801a980 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 801a910:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801a914:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801a918:	fb0a f90c 	mul.w	r9, sl, ip
 801a91c:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 801a920:	4481      	add	r9, r0
 801a922:	8828      	ldrh	r0, [r5, #0]
 801a924:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 801a928:	42ae      	cmp	r6, r5
 801a92a:	bfa8      	it	ge
 801a92c:	462e      	movge	r6, r5
 801a92e:	1a41      	subs	r1, r0, r1
 801a930:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801a934:	428e      	cmp	r6, r1
 801a936:	bfa8      	it	ge
 801a938:	460e      	movge	r6, r1
 801a93a:	429d      	cmp	r5, r3
 801a93c:	bfa8      	it	ge
 801a93e:	461d      	movge	r5, r3
 801a940:	4b2c      	ldr	r3, [pc, #176]	; (801a9f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801a942:	881b      	ldrh	r3, [r3, #0]
 801a944:	eba3 030c 	sub.w	r3, r3, ip
 801a948:	429d      	cmp	r5, r3
 801a94a:	bfa8      	it	ge
 801a94c:	461d      	movge	r5, r3
 801a94e:	42b0      	cmp	r0, r6
 801a950:	d12c      	bne.n	801a9ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x238>
 801a952:	4290      	cmp	r0, r2
 801a954:	d12a      	bne.n	801a9ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x238>
 801a956:	6838      	ldr	r0, [r7, #0]
 801a958:	9203      	str	r2, [sp, #12]
 801a95a:	6803      	ldr	r3, [r0, #0]
 801a95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a95e:	4798      	blx	r3
 801a960:	07c3      	lsls	r3, r0, #31
 801a962:	d51a      	bpl.n	801a99a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 801a964:	9a03      	ldr	r2, [sp, #12]
 801a966:	6838      	ldr	r0, [r7, #0]
 801a968:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 801a96c:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801a970:	6803      	ldr	r3, [r0, #0]
 801a972:	9200      	str	r2, [sp, #0]
 801a974:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801a976:	e89b 0006 	ldmia.w	fp, {r1, r2}
 801a97a:	4623      	mov	r3, r4
 801a97c:	47a8      	blx	r5
 801a97e:	4680      	mov	r8, r0
 801a980:	4640      	mov	r0, r8
 801a982:	b00f      	add	sp, #60	; 0x3c
 801a984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a988:	bf1f      	itttt	ne
 801a98a:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 801a98e:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 801a992:	185b      	addne	r3, r3, r1
 801a994:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801a998:	e7b2      	b.n	801a900 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18c>
 801a99a:	6838      	ldr	r0, [r7, #0]
 801a99c:	6803      	ldr	r3, [r0, #0]
 801a99e:	464a      	mov	r2, r9
 801a9a0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 801a9a2:	4621      	mov	r1, r4
 801a9a4:	fb05 f30a 	mul.w	r3, r5, sl
 801a9a8:	47b0      	blx	r6
 801a9aa:	e7e9      	b.n	801a980 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 801a9ac:	4355      	muls	r5, r2
 801a9ae:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 801a9b2:	9303      	str	r3, [sp, #12]
 801a9b4:	0076      	lsls	r6, r6, #1
 801a9b6:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 801a9ba:	9b03      	ldr	r3, [sp, #12]
 801a9bc:	429c      	cmp	r4, r3
 801a9be:	d2df      	bcs.n	801a980 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 801a9c0:	6838      	ldr	r0, [r7, #0]
 801a9c2:	6803      	ldr	r3, [r0, #0]
 801a9c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a9c6:	464a      	mov	r2, r9
 801a9c8:	461d      	mov	r5, r3
 801a9ca:	4621      	mov	r1, r4
 801a9cc:	4633      	mov	r3, r6
 801a9ce:	47a8      	blx	r5
 801a9d0:	44d1      	add	r9, sl
 801a9d2:	445c      	add	r4, fp
 801a9d4:	e7f1      	b.n	801a9ba <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x246>
 801a9d6:	bf00      	nop
 801a9d8:	2000a03c 	.word	0x2000a03c
 801a9dc:	08027fba 	.word	0x08027fba
 801a9e0:	0802882f 	.word	0x0802882f
 801a9e4:	080281c3 	.word	0x080281c3
 801a9e8:	0802806c 	.word	0x0802806c
 801a9ec:	080280c1 	.word	0x080280c1
 801a9f0:	2000a036 	.word	0x2000a036
 801a9f4:	2000a038 	.word	0x2000a038
 801a9f8:	080280ff 	.word	0x080280ff

0801a9fc <_ZN8touchgfx8LCD16bppC1Ev>:
 801a9fc:	2200      	movs	r2, #0
 801a9fe:	4910      	ldr	r1, [pc, #64]	; (801aa40 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801aa00:	6042      	str	r2, [r0, #4]
 801aa02:	6001      	str	r1, [r0, #0]
 801aa04:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801aa08:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801aa0c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801aa10:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801aa14:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801aa18:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801aa1c:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801aa20:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801aa24:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801aa28:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801aa2c:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801aa30:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801aa34:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801aa38:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801aa3c:	4770      	bx	lr
 801aa3e:	bf00      	nop
 801aa40:	080284a4 	.word	0x080284a4

0801aa44 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801aa44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa48:	460d      	mov	r5, r1
 801aa4a:	b08b      	sub	sp, #44	; 0x2c
 801aa4c:	4604      	mov	r4, r0
 801aa4e:	6808      	ldr	r0, [r1, #0]
 801aa50:	6849      	ldr	r1, [r1, #4]
 801aa52:	4699      	mov	r9, r3
 801aa54:	ab06      	add	r3, sp, #24
 801aa56:	c303      	stmia	r3!, {r0, r1}
 801aa58:	6810      	ldr	r0, [r2, #0]
 801aa5a:	6851      	ldr	r1, [r2, #4]
 801aa5c:	ab08      	add	r3, sp, #32
 801aa5e:	c303      	stmia	r3!, {r0, r1}
 801aa60:	a806      	add	r0, sp, #24
 801aa62:	f7f9 fdc9 	bl	80145f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801aa66:	4629      	mov	r1, r5
 801aa68:	a808      	add	r0, sp, #32
 801aa6a:	f7f9 fdad 	bl	80145c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801aa6e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801aa72:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801aa76:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801aa7a:	4d5f      	ldr	r5, [pc, #380]	; (801abf8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 801aa7c:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801aa80:	6828      	ldr	r0, [r5, #0]
 801aa82:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801aa86:	fb11 2103 	smlabb	r1, r1, r3, r2
 801aa8a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801aa8e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801aa92:	440a      	add	r2, r1
 801aa94:	f8ad 2020 	strh.w	r2, [sp, #32]
 801aa98:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801aa9c:	4413      	add	r3, r2
 801aa9e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801aaa2:	6803      	ldr	r3, [r0, #0]
 801aaa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aaa6:	4798      	blx	r3
 801aaa8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801aaac:	d118      	bne.n	801aae0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801aaae:	f010 0f20 	tst.w	r0, #32
 801aab2:	6828      	ldr	r0, [r5, #0]
 801aab4:	d017      	beq.n	801aae6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801aab6:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 801aaba:	6801      	ldr	r1, [r0, #0]
 801aabc:	9502      	str	r5, [sp, #8]
 801aabe:	b2b6      	uxth	r6, r6
 801aac0:	fa1f f588 	uxth.w	r5, r8
 801aac4:	f8cd 900c 	str.w	r9, [sp, #12]
 801aac8:	9601      	str	r6, [sp, #4]
 801aaca:	9500      	str	r5, [sp, #0]
 801aacc:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801aace:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801aad2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801aad6:	4621      	mov	r1, r4
 801aad8:	47a8      	blx	r5
 801aada:	b00b      	add	sp, #44	; 0x2c
 801aadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aae0:	f010 0f40 	tst.w	r0, #64	; 0x40
 801aae4:	e7e5      	b.n	801aab2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801aae6:	6803      	ldr	r3, [r0, #0]
 801aae8:	6a1b      	ldr	r3, [r3, #32]
 801aaea:	4798      	blx	r3
 801aaec:	4a43      	ldr	r2, [pc, #268]	; (801abfc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 801aaee:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801aaf2:	f8b2 e000 	ldrh.w	lr, [r2]
 801aaf6:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801aafa:	fb0e 1303 	mla	r3, lr, r3, r1
 801aafe:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ab02:	fb0e fe06 	mul.w	lr, lr, r6
 801ab06:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801ab0a:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 801ab0e:	9305      	str	r3, [sp, #20]
 801ab10:	4692      	mov	sl, r2
 801ab12:	4570      	cmp	r0, lr
 801ab14:	d26a      	bcs.n	801abec <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a8>
 801ab16:	9b05      	ldr	r3, [sp, #20]
 801ab18:	4621      	mov	r1, r4
 801ab1a:	eb00 0b03 	add.w	fp, r0, r3
 801ab1e:	4558      	cmp	r0, fp
 801ab20:	d257      	bcs.n	801abd2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18e>
 801ab22:	f851 4b04 	ldr.w	r4, [r1], #4
 801ab26:	0e22      	lsrs	r2, r4, #24
 801ab28:	d012      	beq.n	801ab50 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801ab2a:	2aff      	cmp	r2, #255	; 0xff
 801ab2c:	ea4f 2714 	mov.w	r7, r4, lsr #8
 801ab30:	d110      	bne.n	801ab54 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801ab32:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ab36:	d10d      	bne.n	801ab54 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801ab38:	0963      	lsrs	r3, r4, #5
 801ab3a:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801ab3e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ab42:	f027 0707 	bic.w	r7, r7, #7
 801ab46:	431f      	orrs	r7, r3
 801ab48:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801ab4c:	433c      	orrs	r4, r7
 801ab4e:	8004      	strh	r4, [r0, #0]
 801ab50:	3002      	adds	r0, #2
 801ab52:	e7e4      	b.n	801ab1e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xda>
 801ab54:	fb09 f302 	mul.w	r3, r9, r2
 801ab58:	1c5a      	adds	r2, r3, #1
 801ab5a:	f8b0 c000 	ldrh.w	ip, [r0]
 801ab5e:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801ab62:	1212      	asrs	r2, r2, #8
 801ab64:	b293      	uxth	r3, r2
 801ab66:	ea4f 262c 	mov.w	r6, ip, asr #8
 801ab6a:	f3c4 4507 	ubfx	r5, r4, #16, #8
 801ab6e:	43d2      	mvns	r2, r2
 801ab70:	b2d2      	uxtb	r2, r2
 801ab72:	fb15 f503 	smulbb	r5, r5, r3
 801ab76:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ab7a:	fb06 5602 	mla	r6, r6, r2, r5
 801ab7e:	b2ff      	uxtb	r7, r7
 801ab80:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801ab84:	b2e4      	uxtb	r4, r4
 801ab86:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ab8a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801ab8e:	fb17 f703 	smulbb	r7, r7, r3
 801ab92:	fa5f fc8c 	uxtb.w	ip, ip
 801ab96:	fb14 f403 	smulbb	r4, r4, r3
 801ab9a:	fb05 7702 	mla	r7, r5, r2, r7
 801ab9e:	fb0c 4202 	mla	r2, ip, r2, r4
 801aba2:	b2b6      	uxth	r6, r6
 801aba4:	b2bf      	uxth	r7, r7
 801aba6:	b292      	uxth	r2, r2
 801aba8:	1c73      	adds	r3, r6, #1
 801abaa:	f102 0c01 	add.w	ip, r2, #1
 801abae:	1c7d      	adds	r5, r7, #1
 801abb0:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801abb4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801abb8:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801abbc:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801abc0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801abc4:	097f      	lsrs	r7, r7, #5
 801abc6:	4316      	orrs	r6, r2
 801abc8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801abcc:	433e      	orrs	r6, r7
 801abce:	8006      	strh	r6, [r0, #0]
 801abd0:	e7be      	b.n	801ab50 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801abd2:	f8ba 3000 	ldrh.w	r3, [sl]
 801abd6:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 801abda:	eba3 0308 	sub.w	r3, r3, r8
 801abde:	eba4 0408 	sub.w	r4, r4, r8
 801abe2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801abe6:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801abea:	e792      	b.n	801ab12 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801abec:	4b02      	ldr	r3, [pc, #8]	; (801abf8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 801abee:	6818      	ldr	r0, [r3, #0]
 801abf0:	6803      	ldr	r3, [r0, #0]
 801abf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801abf4:	4798      	blx	r3
 801abf6:	e770      	b.n	801aada <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801abf8:	2000a03c 	.word	0x2000a03c
 801abfc:	2000a036 	.word	0x2000a036

0801ac00 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801ac00:	b570      	push	{r4, r5, r6, lr}
 801ac02:	9d04      	ldr	r5, [sp, #16]
 801ac04:	f89d 6018 	ldrb.w	r6, [sp, #24]
 801ac08:	460c      	mov	r4, r1
 801ac0a:	4619      	mov	r1, r3
 801ac0c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801ac10:	2a0d      	cmp	r2, #13
 801ac12:	d820      	bhi.n	801ac56 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x56>
 801ac14:	e8df f002 	tbb	[pc, r2]
 801ac18:	18121807 	.word	0x18121807
 801ac1c:	18181818 	.word	0x18181818
 801ac20:	18181818 	.word	0x18181818
 801ac24:	1818      	.short	0x1818
 801ac26:	6802      	ldr	r2, [r0, #0]
 801ac28:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801ac2c:	68d6      	ldr	r6, [r2, #12]
 801ac2e:	462b      	mov	r3, r5
 801ac30:	460a      	mov	r2, r1
 801ac32:	46b4      	mov	ip, r6
 801ac34:	4621      	mov	r1, r4
 801ac36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ac3a:	4760      	bx	ip
 801ac3c:	462a      	mov	r2, r5
 801ac3e:	4620      	mov	r0, r4
 801ac40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ac44:	f7ff befe 	b.w	801aa44 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ac48:	4b03      	ldr	r3, [pc, #12]	; (801ac58 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 801ac4a:	4a04      	ldr	r2, [pc, #16]	; (801ac5c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 801ac4c:	4804      	ldr	r0, [pc, #16]	; (801ac60 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801ac4e:	f240 21c1 	movw	r1, #705	; 0x2c1
 801ac52:	f008 fd77 	bl	8023744 <__assert_func>
 801ac56:	bd70      	pop	{r4, r5, r6, pc}
 801ac58:	0802815f 	.word	0x0802815f
 801ac5c:	080288b5 	.word	0x080288b5
 801ac60:	080281c3 	.word	0x080281c3

0801ac64 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801ac64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac68:	b093      	sub	sp, #76	; 0x4c
 801ac6a:	880f      	ldrh	r7, [r1, #0]
 801ac6c:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801ac70:	4604      	mov	r4, r0
 801ac72:	4688      	mov	r8, r1
 801ac74:	4616      	mov	r6, r2
 801ac76:	b12f      	cbz	r7, 801ac84 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801ac78:	4b6f      	ldr	r3, [pc, #444]	; (801ae38 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801ac7a:	4a70      	ldr	r2, [pc, #448]	; (801ae3c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801ac7c:	4870      	ldr	r0, [pc, #448]	; (801ae40 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801ac7e:	21e2      	movs	r1, #226	; 0xe2
 801ac80:	f008 fd60 	bl	8023744 <__assert_func>
 801ac84:	6810      	ldr	r0, [r2, #0]
 801ac86:	6851      	ldr	r1, [r2, #4]
 801ac88:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 801ae48 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>
 801ac8c:	ad0e      	add	r5, sp, #56	; 0x38
 801ac8e:	c503      	stmia	r5!, {r0, r1}
 801ac90:	6818      	ldr	r0, [r3, #0]
 801ac92:	6859      	ldr	r1, [r3, #4]
 801ac94:	ad10      	add	r5, sp, #64	; 0x40
 801ac96:	c503      	stmia	r5!, {r0, r1}
 801ac98:	a80e      	add	r0, sp, #56	; 0x38
 801ac9a:	f7f9 fcad 	bl	80145f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ac9e:	4631      	mov	r1, r6
 801aca0:	a810      	add	r0, sp, #64	; 0x40
 801aca2:	f7f9 fc91 	bl	80145c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801aca6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801acaa:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801acae:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801acb2:	f8db 0000 	ldr.w	r0, [fp]
 801acb6:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801acba:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801acbe:	4e61      	ldr	r6, [pc, #388]	; (801ae44 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801acc0:	fb11 2103 	smlabb	r1, r1, r3, r2
 801acc4:	440c      	add	r4, r1
 801acc6:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801acca:	440a      	add	r2, r1
 801accc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801acd0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801acd4:	4413      	add	r3, r2
 801acd6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801acda:	6803      	ldr	r3, [r0, #0]
 801acdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ace0:	4798      	blx	r3
 801ace2:	2801      	cmp	r0, #1
 801ace4:	d11d      	bne.n	801ad22 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801ace6:	220b      	movs	r2, #11
 801ace8:	9708      	str	r7, [sp, #32]
 801acea:	9207      	str	r2, [sp, #28]
 801acec:	8832      	ldrh	r2, [r6, #0]
 801acee:	f8cd a010 	str.w	sl, [sp, #16]
 801acf2:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801acf6:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801acfa:	9203      	str	r2, [sp, #12]
 801acfc:	fa1f f289 	uxth.w	r2, r9
 801ad00:	9201      	str	r2, [sp, #4]
 801ad02:	b2ad      	uxth	r5, r5
 801ad04:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801ad08:	9200      	str	r2, [sp, #0]
 801ad0a:	9502      	str	r5, [sp, #8]
 801ad0c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801ad10:	f8db 0000 	ldr.w	r0, [fp]
 801ad14:	4642      	mov	r2, r8
 801ad16:	4621      	mov	r1, r4
 801ad18:	f7f7 f9d2 	bl	80120c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801ad1c:	b013      	add	sp, #76	; 0x4c
 801ad1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad22:	f8db 0000 	ldr.w	r0, [fp]
 801ad26:	6803      	ldr	r3, [r0, #0]
 801ad28:	6a1b      	ldr	r3, [r3, #32]
 801ad2a:	4798      	blx	r3
 801ad2c:	8832      	ldrh	r2, [r6, #0]
 801ad2e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801ad32:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801ad36:	960d      	str	r6, [sp, #52]	; 0x34
 801ad38:	fb02 1303 	mla	r3, r2, r3, r1
 801ad3c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ad40:	4355      	muls	r5, r2
 801ad42:	eb00 0345 	add.w	r3, r0, r5, lsl #1
 801ad46:	930c      	str	r3, [sp, #48]	; 0x30
 801ad48:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801ad4c:	930b      	str	r3, [sp, #44]	; 0x2c
 801ad4e:	f04f 0e04 	mov.w	lr, #4
 801ad52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ad54:	4298      	cmp	r0, r3
 801ad56:	d269      	bcs.n	801ae2c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 801ad58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ad5a:	4621      	mov	r1, r4
 801ad5c:	eb00 0b03 	add.w	fp, r0, r3
 801ad60:	4558      	cmp	r0, fp
 801ad62:	460b      	mov	r3, r1
 801ad64:	d256      	bcs.n	801ae14 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801ad66:	781b      	ldrb	r3, [r3, #0]
 801ad68:	fb1e e303 	smlabb	r3, lr, r3, lr
 801ad6c:	3101      	adds	r1, #1
 801ad6e:	f858 2003 	ldr.w	r2, [r8, r3]
 801ad72:	0e14      	lsrs	r4, r2, #24
 801ad74:	d012      	beq.n	801ad9c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801ad76:	2cff      	cmp	r4, #255	; 0xff
 801ad78:	ea4f 2612 	mov.w	r6, r2, lsr #8
 801ad7c:	d110      	bne.n	801ada0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801ad7e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801ad82:	d10d      	bne.n	801ada0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801ad84:	0953      	lsrs	r3, r2, #5
 801ad86:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801ad8a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ad8e:	f026 0607 	bic.w	r6, r6, #7
 801ad92:	431e      	orrs	r6, r3
 801ad94:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801ad98:	4332      	orrs	r2, r6
 801ad9a:	8002      	strh	r2, [r0, #0]
 801ad9c:	3002      	adds	r0, #2
 801ad9e:	e7df      	b.n	801ad60 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfc>
 801ada0:	fb0a f404 	mul.w	r4, sl, r4
 801ada4:	1c63      	adds	r3, r4, #1
 801ada6:	8807      	ldrh	r7, [r0, #0]
 801ada8:	eb03 2324 	add.w	r3, r3, r4, asr #8
 801adac:	121b      	asrs	r3, r3, #8
 801adae:	fa1f fc83 	uxth.w	ip, r3
 801adb2:	123d      	asrs	r5, r7, #8
 801adb4:	f3c2 4407 	ubfx	r4, r2, #16, #8
 801adb8:	43db      	mvns	r3, r3
 801adba:	b2db      	uxtb	r3, r3
 801adbc:	fb14 f40c 	smulbb	r4, r4, ip
 801adc0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801adc4:	fb05 4503 	mla	r5, r5, r3, r4
 801adc8:	b2d2      	uxtb	r2, r2
 801adca:	10fc      	asrs	r4, r7, #3
 801adcc:	00ff      	lsls	r7, r7, #3
 801adce:	b2ff      	uxtb	r7, r7
 801add0:	fb12 f20c 	smulbb	r2, r2, ip
 801add4:	fb07 2203 	mla	r2, r7, r3, r2
 801add8:	b2f6      	uxtb	r6, r6
 801adda:	b2ad      	uxth	r5, r5
 801addc:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801ade0:	b292      	uxth	r2, r2
 801ade2:	fb16 f60c 	smulbb	r6, r6, ip
 801ade6:	fb04 6603 	mla	r6, r4, r3, r6
 801adea:	1c6b      	adds	r3, r5, #1
 801adec:	1c54      	adds	r4, r2, #1
 801adee:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801adf2:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801adf6:	b2b6      	uxth	r6, r6
 801adf8:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801adfc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801ae00:	4325      	orrs	r5, r4
 801ae02:	1c74      	adds	r4, r6, #1
 801ae04:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801ae08:	0976      	lsrs	r6, r6, #5
 801ae0a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ae0e:	4335      	orrs	r5, r6
 801ae10:	8005      	strh	r5, [r0, #0]
 801ae12:	e7c3      	b.n	801ad9c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801ae14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ae16:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801ae1a:	881b      	ldrh	r3, [r3, #0]
 801ae1c:	eba4 0409 	sub.w	r4, r4, r9
 801ae20:	eba3 0309 	sub.w	r3, r3, r9
 801ae24:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ae28:	440c      	add	r4, r1
 801ae2a:	e792      	b.n	801ad52 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801ae2c:	4b06      	ldr	r3, [pc, #24]	; (801ae48 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801ae2e:	6818      	ldr	r0, [r3, #0]
 801ae30:	6803      	ldr	r3, [r0, #0]
 801ae32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae34:	4798      	blx	r3
 801ae36:	e771      	b.n	801ad1c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 801ae38:	08027f6a 	.word	0x08027f6a
 801ae3c:	08028686 	.word	0x08028686
 801ae40:	080281c3 	.word	0x080281c3
 801ae44:	2000a036 	.word	0x2000a036
 801ae48:	2000a03c 	.word	0x2000a03c

0801ae4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801ae4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae50:	4614      	mov	r4, r2
 801ae52:	880a      	ldrh	r2, [r1, #0]
 801ae54:	b091      	sub	sp, #68	; 0x44
 801ae56:	2a02      	cmp	r2, #2
 801ae58:	4607      	mov	r7, r0
 801ae5a:	4689      	mov	r9, r1
 801ae5c:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 801ae60:	d006      	beq.n	801ae70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 801ae62:	4b77      	ldr	r3, [pc, #476]	; (801b040 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f4>)
 801ae64:	4a77      	ldr	r2, [pc, #476]	; (801b044 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f8>)
 801ae66:	4878      	ldr	r0, [pc, #480]	; (801b048 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1fc>)
 801ae68:	f240 113b 	movw	r1, #315	; 0x13b
 801ae6c:	f008 fc6a 	bl	8023744 <__assert_func>
 801ae70:	2e00      	cmp	r6, #0
 801ae72:	d04b      	beq.n	801af0c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801ae74:	6820      	ldr	r0, [r4, #0]
 801ae76:	6861      	ldr	r1, [r4, #4]
 801ae78:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 801b050 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>
 801ae7c:	ad0c      	add	r5, sp, #48	; 0x30
 801ae7e:	c503      	stmia	r5!, {r0, r1}
 801ae80:	6818      	ldr	r0, [r3, #0]
 801ae82:	6859      	ldr	r1, [r3, #4]
 801ae84:	ad0e      	add	r5, sp, #56	; 0x38
 801ae86:	c503      	stmia	r5!, {r0, r1}
 801ae88:	a80c      	add	r0, sp, #48	; 0x30
 801ae8a:	f7f9 fbb5 	bl	80145f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ae8e:	4621      	mov	r1, r4
 801ae90:	a80e      	add	r0, sp, #56	; 0x38
 801ae92:	f7f9 fb99 	bl	80145c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ae96:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801ae9a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801ae9e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801aea2:	f8da 0000 	ldr.w	r0, [sl]
 801aea6:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801aeaa:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801aeae:	fb11 2103 	smlabb	r1, r1, r3, r2
 801aeb2:	187c      	adds	r4, r7, r1
 801aeb4:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801aeb8:	4f64      	ldr	r7, [pc, #400]	; (801b04c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
 801aeba:	440a      	add	r2, r1
 801aebc:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801aec0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801aec4:	4413      	add	r3, r2
 801aec6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801aeca:	6803      	ldr	r3, [r0, #0]
 801aecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801aed0:	4798      	blx	r3
 801aed2:	2801      	cmp	r0, #1
 801aed4:	d11d      	bne.n	801af12 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
 801aed6:	2200      	movs	r2, #0
 801aed8:	210b      	movs	r1, #11
 801aeda:	e9cd 1207 	strd	r1, r2, [sp, #28]
 801aede:	8839      	ldrh	r1, [r7, #0]
 801aee0:	9604      	str	r6, [sp, #16]
 801aee2:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801aee6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801aeea:	9203      	str	r2, [sp, #12]
 801aeec:	fa1f f288 	uxth.w	r2, r8
 801aef0:	9201      	str	r2, [sp, #4]
 801aef2:	b2ad      	uxth	r5, r5
 801aef4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801aef8:	9200      	str	r2, [sp, #0]
 801aefa:	9502      	str	r5, [sp, #8]
 801aefc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801af00:	f8da 0000 	ldr.w	r0, [sl]
 801af04:	464a      	mov	r2, r9
 801af06:	4621      	mov	r1, r4
 801af08:	f7f7 f8da 	bl	80120c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801af0c:	b011      	add	sp, #68	; 0x44
 801af0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af12:	f8da 0000 	ldr.w	r0, [sl]
 801af16:	6803      	ldr	r3, [r0, #0]
 801af18:	6a1b      	ldr	r3, [r3, #32]
 801af1a:	4798      	blx	r3
 801af1c:	8839      	ldrh	r1, [r7, #0]
 801af1e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801af22:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801af26:	2eff      	cmp	r6, #255	; 0xff
 801af28:	fb01 2303 	mla	r3, r1, r3, r2
 801af2c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801af30:	f109 0204 	add.w	r2, r9, #4
 801af34:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 801af38:	fb05 f501 	mul.w	r5, r5, r1
 801af3c:	d05f      	beq.n	801affe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b2>
 801af3e:	f1c6 09ff 	rsb	r9, r6, #255	; 0xff
 801af42:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801af46:	b2b6      	uxth	r6, r6
 801af48:	fa1f f989 	uxth.w	r9, r9
 801af4c:	970b      	str	r7, [sp, #44]	; 0x2c
 801af4e:	42a8      	cmp	r0, r5
 801af50:	d26f      	bcs.n	801b032 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 801af52:	eb00 010b 	add.w	r1, r0, fp
 801af56:	4288      	cmp	r0, r1
 801af58:	4623      	mov	r3, r4
 801af5a:	d244      	bcs.n	801afe6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19a>
 801af5c:	781b      	ldrb	r3, [r3, #0]
 801af5e:	8807      	ldrh	r7, [r0, #0]
 801af60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801af64:	ea4f 2c27 	mov.w	ip, r7, asr #8
 801af68:	ea4f 2e23 	mov.w	lr, r3, asr #8
 801af6c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801af70:	fb1c fc09 	smulbb	ip, ip, r9
 801af74:	ea4f 0ae7 	mov.w	sl, r7, asr #3
 801af78:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801af7c:	00ff      	lsls	r7, r7, #3
 801af7e:	fb0e ce06 	mla	lr, lr, r6, ip
 801af82:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801af86:	ea4f 0ce3 	mov.w	ip, r3, asr #3
 801af8a:	b2ff      	uxtb	r7, r7
 801af8c:	00db      	lsls	r3, r3, #3
 801af8e:	fa1f fe8e 	uxth.w	lr, lr
 801af92:	fb1a fa09 	smulbb	sl, sl, r9
 801af96:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801af9a:	b2db      	uxtb	r3, r3
 801af9c:	fb17 f709 	smulbb	r7, r7, r9
 801afa0:	fb0c ac06 	mla	ip, ip, r6, sl
 801afa4:	fb03 7306 	mla	r3, r3, r6, r7
 801afa8:	f10e 0a01 	add.w	sl, lr, #1
 801afac:	b29b      	uxth	r3, r3
 801afae:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801afb2:	f40e 4a78 	and.w	sl, lr, #63488	; 0xf800
 801afb6:	f103 0e01 	add.w	lr, r3, #1
 801afba:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801afbe:	fa1f fc8c 	uxth.w	ip, ip
 801afc2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801afc6:	ea4a 0e03 	orr.w	lr, sl, r3
 801afca:	f10c 0a01 	add.w	sl, ip, #1
 801afce:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801afd2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801afd6:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801afda:	ea4e 0e0c 	orr.w	lr, lr, ip
 801afde:	3401      	adds	r4, #1
 801afe0:	f820 eb02 	strh.w	lr, [r0], #2
 801afe4:	e7b7      	b.n	801af56 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x10a>
 801afe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801afe8:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 801afec:	881b      	ldrh	r3, [r3, #0]
 801afee:	eba1 0108 	sub.w	r1, r1, r8
 801aff2:	eba3 0308 	sub.w	r3, r3, r8
 801aff6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801affa:	440c      	add	r4, r1
 801affc:	e7a7      	b.n	801af4e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x102>
 801affe:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801b002:	42a8      	cmp	r0, r5
 801b004:	d215      	bcs.n	801b032 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 801b006:	eb00 010b 	add.w	r1, r0, fp
 801b00a:	4288      	cmp	r0, r1
 801b00c:	d206      	bcs.n	801b01c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1d0>
 801b00e:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b012:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801b016:	f820 3b02 	strh.w	r3, [r0], #2
 801b01a:	e7f6      	b.n	801b00a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1be>
 801b01c:	883b      	ldrh	r3, [r7, #0]
 801b01e:	eba3 0308 	sub.w	r3, r3, r8
 801b022:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b026:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801b02a:	eba3 0308 	sub.w	r3, r3, r8
 801b02e:	441c      	add	r4, r3
 801b030:	e7e7      	b.n	801b002 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b6>
 801b032:	4b07      	ldr	r3, [pc, #28]	; (801b050 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
 801b034:	6818      	ldr	r0, [r3, #0]
 801b036:	6803      	ldr	r3, [r0, #0]
 801b038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b03a:	4798      	blx	r3
 801b03c:	e766      	b.n	801af0c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801b03e:	bf00      	nop
 801b040:	08027e28 	.word	0x08027e28
 801b044:	080284f0 	.word	0x080284f0
 801b048:	080281c3 	.word	0x080281c3
 801b04c:	2000a036 	.word	0x2000a036
 801b050:	2000a03c 	.word	0x2000a03c

0801b054 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801b054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b058:	4614      	mov	r4, r2
 801b05a:	880a      	ldrh	r2, [r1, #0]
 801b05c:	b091      	sub	sp, #68	; 0x44
 801b05e:	2a01      	cmp	r2, #1
 801b060:	4606      	mov	r6, r0
 801b062:	4688      	mov	r8, r1
 801b064:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801b068:	d006      	beq.n	801b078 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 801b06a:	4b7c      	ldr	r3, [pc, #496]	; (801b25c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x208>)
 801b06c:	4a7c      	ldr	r2, [pc, #496]	; (801b260 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20c>)
 801b06e:	487d      	ldr	r0, [pc, #500]	; (801b264 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x210>)
 801b070:	f240 1197 	movw	r1, #407	; 0x197
 801b074:	f008 fb66 	bl	8023744 <__assert_func>
 801b078:	2f00      	cmp	r7, #0
 801b07a:	d04b      	beq.n	801b114 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801b07c:	6820      	ldr	r0, [r4, #0]
 801b07e:	6861      	ldr	r1, [r4, #4]
 801b080:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 801b270 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801b084:	ad0c      	add	r5, sp, #48	; 0x30
 801b086:	c503      	stmia	r5!, {r0, r1}
 801b088:	6818      	ldr	r0, [r3, #0]
 801b08a:	6859      	ldr	r1, [r3, #4]
 801b08c:	ad0e      	add	r5, sp, #56	; 0x38
 801b08e:	c503      	stmia	r5!, {r0, r1}
 801b090:	a80c      	add	r0, sp, #48	; 0x30
 801b092:	f7f9 fab1 	bl	80145f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b096:	4621      	mov	r1, r4
 801b098:	a80e      	add	r0, sp, #56	; 0x38
 801b09a:	f7f9 fa95 	bl	80145c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b09e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801b0a2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801b0a6:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801b0aa:	f8da 0000 	ldr.w	r0, [sl]
 801b0ae:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801b0b2:	f9bd 903e 	ldrsh.w	r9, [sp, #62]	; 0x3e
 801b0b6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b0ba:	1874      	adds	r4, r6, r1
 801b0bc:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801b0c0:	4e69      	ldr	r6, [pc, #420]	; (801b268 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x214>)
 801b0c2:	440a      	add	r2, r1
 801b0c4:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801b0c8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801b0cc:	4413      	add	r3, r2
 801b0ce:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801b0d2:	6803      	ldr	r3, [r0, #0]
 801b0d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b0d8:	4798      	blx	r3
 801b0da:	2801      	cmp	r0, #1
 801b0dc:	d11d      	bne.n	801b11a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 801b0de:	220b      	movs	r2, #11
 801b0e0:	2100      	movs	r1, #0
 801b0e2:	e9cd 2107 	strd	r2, r1, [sp, #28]
 801b0e6:	8832      	ldrh	r2, [r6, #0]
 801b0e8:	9704      	str	r7, [sp, #16]
 801b0ea:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801b0ee:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801b0f2:	9203      	str	r2, [sp, #12]
 801b0f4:	fa1f f289 	uxth.w	r2, r9
 801b0f8:	9202      	str	r2, [sp, #8]
 801b0fa:	b2ad      	uxth	r5, r5
 801b0fc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801b100:	9200      	str	r2, [sp, #0]
 801b102:	9501      	str	r5, [sp, #4]
 801b104:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b108:	f8da 0000 	ldr.w	r0, [sl]
 801b10c:	4642      	mov	r2, r8
 801b10e:	4621      	mov	r1, r4
 801b110:	f7f6 ffd6 	bl	80120c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801b114:	b011      	add	sp, #68	; 0x44
 801b116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b11a:	f8da 0000 	ldr.w	r0, [sl]
 801b11e:	6803      	ldr	r3, [r0, #0]
 801b120:	6a1b      	ldr	r3, [r3, #32]
 801b122:	4798      	blx	r3
 801b124:	8832      	ldrh	r2, [r6, #0]
 801b126:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801b12a:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801b12e:	2fff      	cmp	r7, #255	; 0xff
 801b130:	fb02 1303 	mla	r3, r2, r3, r1
 801b134:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b138:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 801b13c:	fb09 f902 	mul.w	r9, r9, r2
 801b140:	d056      	beq.n	801b1f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19c>
 801b142:	ea6f 0c07 	mvn.w	ip, r7
 801b146:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 801b14a:	b2bb      	uxth	r3, r7
 801b14c:	fa5f fc8c 	uxtb.w	ip, ip
 801b150:	960b      	str	r6, [sp, #44]	; 0x2c
 801b152:	4548      	cmp	r0, r9
 801b154:	d27b      	bcs.n	801b24e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 801b156:	eb00 0a0e 	add.w	sl, r0, lr
 801b15a:	4550      	cmp	r0, sl
 801b15c:	4622      	mov	r2, r4
 801b15e:	d23d      	bcs.n	801b1dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x188>
 801b160:	7811      	ldrb	r1, [r2, #0]
 801b162:	2604      	movs	r6, #4
 801b164:	2203      	movs	r2, #3
 801b166:	fb12 6101 	smlabb	r1, r2, r1, r6
 801b16a:	eb08 0b01 	add.w	fp, r8, r1
 801b16e:	8802      	ldrh	r2, [r0, #0]
 801b170:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801b174:	f89b b001 	ldrb.w	fp, [fp, #1]
 801b178:	f818 1001 	ldrb.w	r1, [r8, r1]
 801b17c:	1217      	asrs	r7, r2, #8
 801b17e:	fb16 f603 	smulbb	r6, r6, r3
 801b182:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b186:	fb07 670c 	mla	r7, r7, ip, r6
 801b18a:	10d6      	asrs	r6, r2, #3
 801b18c:	00d2      	lsls	r2, r2, #3
 801b18e:	b2d2      	uxtb	r2, r2
 801b190:	fb1b fb03 	smulbb	fp, fp, r3
 801b194:	fb12 f20c 	smulbb	r2, r2, ip
 801b198:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b19c:	b2bf      	uxth	r7, r7
 801b19e:	fb06 b60c 	mla	r6, r6, ip, fp
 801b1a2:	fb01 2103 	mla	r1, r1, r3, r2
 801b1a6:	b2b6      	uxth	r6, r6
 801b1a8:	b289      	uxth	r1, r1
 801b1aa:	1c7a      	adds	r2, r7, #1
 801b1ac:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801b1b0:	f106 0b01 	add.w	fp, r6, #1
 801b1b4:	1c4a      	adds	r2, r1, #1
 801b1b6:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801b1ba:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801b1be:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b1c2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801b1c6:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801b1ca:	4317      	orrs	r7, r2
 801b1cc:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801b1d0:	ea47 070b 	orr.w	r7, r7, fp
 801b1d4:	3401      	adds	r4, #1
 801b1d6:	f820 7b02 	strh.w	r7, [r0], #2
 801b1da:	e7be      	b.n	801b15a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 801b1dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b1de:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 801b1e2:	8812      	ldrh	r2, [r2, #0]
 801b1e4:	1b49      	subs	r1, r1, r5
 801b1e6:	1b52      	subs	r2, r2, r5
 801b1e8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801b1ec:	440c      	add	r4, r1
 801b1ee:	e7b0      	b.n	801b152 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xfe>
 801b1f0:	491e      	ldr	r1, [pc, #120]	; (801b26c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801b1f2:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 801b1f6:	2203      	movs	r2, #3
 801b1f8:	2704      	movs	r7, #4
 801b1fa:	4548      	cmp	r0, r9
 801b1fc:	d227      	bcs.n	801b24e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 801b1fe:	eb00 0c0e 	add.w	ip, r0, lr
 801b202:	4560      	cmp	r0, ip
 801b204:	4623      	mov	r3, r4
 801b206:	d219      	bcs.n	801b23c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801b208:	f893 a000 	ldrb.w	sl, [r3]
 801b20c:	fb12 7a0a 	smlabb	sl, r2, sl, r7
 801b210:	eb08 0b0a 	add.w	fp, r8, sl
 801b214:	f818 a00a 	ldrb.w	sl, [r8, sl]
 801b218:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801b21c:	f89b b001 	ldrb.w	fp, [fp, #1]
 801b220:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801b224:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801b228:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801b22c:	ea43 030b 	orr.w	r3, r3, fp
 801b230:	ea43 03da 	orr.w	r3, r3, sl, lsr #3
 801b234:	3401      	adds	r4, #1
 801b236:	f820 3b02 	strh.w	r3, [r0], #2
 801b23a:	e7e2      	b.n	801b202 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ae>
 801b23c:	8833      	ldrh	r3, [r6, #0]
 801b23e:	1b5b      	subs	r3, r3, r5
 801b240:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b244:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801b248:	1b5b      	subs	r3, r3, r5
 801b24a:	441c      	add	r4, r3
 801b24c:	e7d5      	b.n	801b1fa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a6>
 801b24e:	4b08      	ldr	r3, [pc, #32]	; (801b270 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801b250:	6818      	ldr	r0, [r3, #0]
 801b252:	6803      	ldr	r3, [r0, #0]
 801b254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b256:	4798      	blx	r3
 801b258:	e75c      	b.n	801b114 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801b25a:	bf00      	nop
 801b25c:	08027e76 	.word	0x08027e76
 801b260:	08028579 	.word	0x08028579
 801b264:	080281c3 	.word	0x080281c3
 801b268:	2000a036 	.word	0x2000a036
 801b26c:	fffff800 	.word	0xfffff800
 801b270:	2000a03c 	.word	0x2000a03c

0801b274 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801b274:	b430      	push	{r4, r5}
 801b276:	780d      	ldrb	r5, [r1, #0]
 801b278:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801b27c:	2d01      	cmp	r5, #1
 801b27e:	d00a      	beq.n	801b296 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801b280:	d305      	bcc.n	801b28e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801b282:	2d02      	cmp	r5, #2
 801b284:	d10b      	bne.n	801b29e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801b286:	9402      	str	r4, [sp, #8]
 801b288:	bc30      	pop	{r4, r5}
 801b28a:	f7ff bddf 	b.w	801ae4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801b28e:	9402      	str	r4, [sp, #8]
 801b290:	bc30      	pop	{r4, r5}
 801b292:	f7ff bce7 	b.w	801ac64 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801b296:	9402      	str	r4, [sp, #8]
 801b298:	bc30      	pop	{r4, r5}
 801b29a:	f7ff bedb 	b.w	801b054 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801b29e:	bc30      	pop	{r4, r5}
 801b2a0:	4770      	bx	lr
	...

0801b2a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801b2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2a8:	4604      	mov	r4, r0
 801b2aa:	b087      	sub	sp, #28
 801b2ac:	6810      	ldr	r0, [r2, #0]
 801b2ae:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801b2b2:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801b4ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801b2b6:	460e      	mov	r6, r1
 801b2b8:	6851      	ldr	r1, [r2, #4]
 801b2ba:	ad02      	add	r5, sp, #8
 801b2bc:	c503      	stmia	r5!, {r0, r1}
 801b2be:	6818      	ldr	r0, [r3, #0]
 801b2c0:	6859      	ldr	r1, [r3, #4]
 801b2c2:	ad04      	add	r5, sp, #16
 801b2c4:	4617      	mov	r7, r2
 801b2c6:	c503      	stmia	r5!, {r0, r1}
 801b2c8:	a802      	add	r0, sp, #8
 801b2ca:	f7f9 f995 	bl	80145f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b2ce:	4639      	mov	r1, r7
 801b2d0:	a804      	add	r0, sp, #16
 801b2d2:	f7f9 f979 	bl	80145c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b2d6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801b2da:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b2de:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801b2e2:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801b2e6:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801b2ea:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b2ee:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801b2f2:	440e      	add	r6, r1
 801b2f4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801b2f8:	440a      	add	r2, r1
 801b2fa:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b2fe:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801b302:	4413      	add	r3, r2
 801b304:	f8ad 3012 	strh.w	r3, [sp, #18]
 801b308:	4b77      	ldr	r3, [pc, #476]	; (801b4e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801b30a:	6818      	ldr	r0, [r3, #0]
 801b30c:	6803      	ldr	r3, [r0, #0]
 801b30e:	6a1b      	ldr	r3, [r3, #32]
 801b310:	4798      	blx	r3
 801b312:	f8b9 b000 	ldrh.w	fp, [r9]
 801b316:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b31a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801b31e:	fb0b 2303 	mla	r3, fp, r3, r2
 801b322:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b326:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801b32a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801b32e:	fb05 f50b 	mul.w	r5, r5, fp
 801b332:	9300      	str	r3, [sp, #0]
 801b334:	d068      	beq.n	801b408 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x164>
 801b336:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801b33a:	4558      	cmp	r0, fp
 801b33c:	f080 80cc 	bcs.w	801b4d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801b340:	9b00      	ldr	r3, [sp, #0]
 801b342:	18c3      	adds	r3, r0, r3
 801b344:	9301      	str	r3, [sp, #4]
 801b346:	4631      	mov	r1, r6
 801b348:	9b01      	ldr	r3, [sp, #4]
 801b34a:	4298      	cmp	r0, r3
 801b34c:	d24e      	bcs.n	801b3ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x148>
 801b34e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b352:	2a00      	cmp	r2, #0
 801b354:	d047      	beq.n	801b3e6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 801b356:	fb0a f202 	mul.w	r2, sl, r2
 801b35a:	1c53      	adds	r3, r2, #1
 801b35c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801b360:	121b      	asrs	r3, r3, #8
 801b362:	d040      	beq.n	801b3e6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 801b364:	8802      	ldrh	r2, [r0, #0]
 801b366:	f8b4 c000 	ldrh.w	ip, [r4]
 801b36a:	b29e      	uxth	r6, r3
 801b36c:	1215      	asrs	r5, r2, #8
 801b36e:	43db      	mvns	r3, r3
 801b370:	b2db      	uxtb	r3, r3
 801b372:	ea4f 272c 	mov.w	r7, ip, asr #8
 801b376:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801b37a:	fb15 f503 	smulbb	r5, r5, r3
 801b37e:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801b382:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b386:	00d2      	lsls	r2, r2, #3
 801b388:	fb07 5706 	mla	r7, r7, r6, r5
 801b38c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801b390:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801b394:	b2d2      	uxtb	r2, r2
 801b396:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b39a:	fb1e fe03 	smulbb	lr, lr, r3
 801b39e:	fb12 f203 	smulbb	r2, r2, r3
 801b3a2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801b3a6:	fa5f fc8c 	uxtb.w	ip, ip
 801b3aa:	fb05 e506 	mla	r5, r5, r6, lr
 801b3ae:	fb0c 2c06 	mla	ip, ip, r6, r2
 801b3b2:	b2bf      	uxth	r7, r7
 801b3b4:	b2ad      	uxth	r5, r5
 801b3b6:	fa1f fc8c 	uxth.w	ip, ip
 801b3ba:	1c7b      	adds	r3, r7, #1
 801b3bc:	f10c 0601 	add.w	r6, ip, #1
 801b3c0:	f105 0e01 	add.w	lr, r5, #1
 801b3c4:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801b3c8:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801b3cc:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801b3d0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b3d4:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801b3d8:	096d      	lsrs	r5, r5, #5
 801b3da:	ea47 070c 	orr.w	r7, r7, ip
 801b3de:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b3e2:	432f      	orrs	r7, r5
 801b3e4:	8007      	strh	r7, [r0, #0]
 801b3e6:	3002      	adds	r0, #2
 801b3e8:	3402      	adds	r4, #2
 801b3ea:	e7ad      	b.n	801b348 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801b3ec:	f8b9 3000 	ldrh.w	r3, [r9]
 801b3f0:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801b3f4:	eba3 0308 	sub.w	r3, r3, r8
 801b3f8:	eba6 0608 	sub.w	r6, r6, r8
 801b3fc:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801b400:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b404:	440e      	add	r6, r1
 801b406:	e798      	b.n	801b33a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801b408:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801b40c:	42a8      	cmp	r0, r5
 801b40e:	d263      	bcs.n	801b4d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801b410:	9b00      	ldr	r3, [sp, #0]
 801b412:	4631      	mov	r1, r6
 801b414:	eb00 0b03 	add.w	fp, r0, r3
 801b418:	4558      	cmp	r0, fp
 801b41a:	d24f      	bcs.n	801b4bc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801b41c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b420:	b12b      	cbz	r3, 801b42e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 801b422:	2bff      	cmp	r3, #255	; 0xff
 801b424:	f8b4 e000 	ldrh.w	lr, [r4]
 801b428:	d104      	bne.n	801b434 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x190>
 801b42a:	f8a0 e000 	strh.w	lr, [r0]
 801b42e:	3002      	adds	r0, #2
 801b430:	3402      	adds	r4, #2
 801b432:	e7f1      	b.n	801b418 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x174>
 801b434:	8802      	ldrh	r2, [r0, #0]
 801b436:	b29f      	uxth	r7, r3
 801b438:	1216      	asrs	r6, r2, #8
 801b43a:	43db      	mvns	r3, r3
 801b43c:	b2db      	uxtb	r3, r3
 801b43e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b442:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b446:	fb16 f603 	smulbb	r6, r6, r3
 801b44a:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801b44e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b452:	00d2      	lsls	r2, r2, #3
 801b454:	fb0c 6c07 	mla	ip, ip, r7, r6
 801b458:	b2d2      	uxtb	r2, r2
 801b45a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801b45e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801b462:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b466:	fb1a fa03 	smulbb	sl, sl, r3
 801b46a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b46e:	fb12 f303 	smulbb	r3, r2, r3
 801b472:	fa5f fe8e 	uxtb.w	lr, lr
 801b476:	fb06 a607 	mla	r6, r6, r7, sl
 801b47a:	fb0e 3e07 	mla	lr, lr, r7, r3
 801b47e:	fa1f fc8c 	uxth.w	ip, ip
 801b482:	b2b6      	uxth	r6, r6
 801b484:	fa1f fe8e 	uxth.w	lr, lr
 801b488:	f10c 0201 	add.w	r2, ip, #1
 801b48c:	f10e 0301 	add.w	r3, lr, #1
 801b490:	f106 0a01 	add.w	sl, r6, #1
 801b494:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801b498:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801b49c:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801b4a0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b4a4:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801b4a8:	0976      	lsrs	r6, r6, #5
 801b4aa:	ea4c 0c0e 	orr.w	ip, ip, lr
 801b4ae:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b4b2:	ea4c 0c06 	orr.w	ip, ip, r6
 801b4b6:	f8a0 c000 	strh.w	ip, [r0]
 801b4ba:	e7b8      	b.n	801b42e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 801b4bc:	f8b9 3000 	ldrh.w	r3, [r9]
 801b4c0:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801b4c4:	eba3 0308 	sub.w	r3, r3, r8
 801b4c8:	eba6 0608 	sub.w	r6, r6, r8
 801b4cc:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801b4d0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b4d4:	440e      	add	r6, r1
 801b4d6:	e799      	b.n	801b40c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x168>
 801b4d8:	4b03      	ldr	r3, [pc, #12]	; (801b4e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801b4da:	6818      	ldr	r0, [r3, #0]
 801b4dc:	6803      	ldr	r3, [r0, #0]
 801b4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b4e0:	4798      	blx	r3
 801b4e2:	b007      	add	sp, #28
 801b4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4e8:	2000a03c 	.word	0x2000a03c
 801b4ec:	2000a036 	.word	0x2000a036

0801b4f0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801b4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4f4:	b089      	sub	sp, #36	; 0x24
 801b4f6:	4682      	mov	sl, r0
 801b4f8:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801b4fc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b4fe:	460d      	mov	r5, r1
 801b500:	4691      	mov	r9, r2
 801b502:	4698      	mov	r8, r3
 801b504:	b3ae      	cbz	r6, 801b572 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801b506:	4608      	mov	r0, r1
 801b508:	f7fc fa0a 	bl	8017920 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b50c:	4607      	mov	r7, r0
 801b50e:	4628      	mov	r0, r5
 801b510:	f7fc fa40 	bl	8017994 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b514:	f8ad 000e 	strh.w	r0, [sp, #14]
 801b518:	4628      	mov	r0, r5
 801b51a:	f8ad 9008 	strh.w	r9, [sp, #8]
 801b51e:	f8ad 800a 	strh.w	r8, [sp, #10]
 801b522:	f8ad 700c 	strh.w	r7, [sp, #12]
 801b526:	f7fc fb8d 	bl	8017c44 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b52a:	b178      	cbz	r0, 801b54c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801b52c:	4628      	mov	r0, r5
 801b52e:	f7fc fb89 	bl	8017c44 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b532:	2802      	cmp	r0, #2
 801b534:	d00a      	beq.n	801b54c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801b536:	4628      	mov	r0, r5
 801b538:	f7fc fb84 	bl	8017c44 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b53c:	280b      	cmp	r0, #11
 801b53e:	d005      	beq.n	801b54c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801b540:	4b69      	ldr	r3, [pc, #420]	; (801b6e8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f8>)
 801b542:	4a6a      	ldr	r2, [pc, #424]	; (801b6ec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
 801b544:	486a      	ldr	r0, [pc, #424]	; (801b6f0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
 801b546:	214b      	movs	r1, #75	; 0x4b
 801b548:	f008 f8fc 	bl	8023744 <__assert_func>
 801b54c:	4628      	mov	r0, r5
 801b54e:	f7fc faef 	bl	8017b30 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b552:	4607      	mov	r7, r0
 801b554:	4628      	mov	r0, r5
 801b556:	f7fc fb1d 	bl	8017b94 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801b55a:	4681      	mov	r9, r0
 801b55c:	4628      	mov	r0, r5
 801b55e:	f7fc fb71 	bl	8017c44 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b562:	2802      	cmp	r0, #2
 801b564:	d108      	bne.n	801b578 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 801b566:	4633      	mov	r3, r6
 801b568:	4622      	mov	r2, r4
 801b56a:	a902      	add	r1, sp, #8
 801b56c:	4638      	mov	r0, r7
 801b56e:	f7ff fa69 	bl	801aa44 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b572:	b009      	add	sp, #36	; 0x24
 801b574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b578:	4628      	mov	r0, r5
 801b57a:	f7fc fb63 	bl	8017c44 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b57e:	280b      	cmp	r0, #11
 801b580:	d107      	bne.n	801b592 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801b582:	9600      	str	r6, [sp, #0]
 801b584:	4623      	mov	r3, r4
 801b586:	aa02      	add	r2, sp, #8
 801b588:	4649      	mov	r1, r9
 801b58a:	4638      	mov	r0, r7
 801b58c:	f7ff fe72 	bl	801b274 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801b590:	e7ef      	b.n	801b572 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801b592:	4628      	mov	r0, r5
 801b594:	f7fc fa92 	bl	8017abc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801b598:	b950      	cbnz	r0, 801b5b0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801b59a:	e9cd 6000 	strd	r6, r0, [sp]
 801b59e:	f8da 3000 	ldr.w	r3, [sl]
 801b5a2:	aa02      	add	r2, sp, #8
 801b5a4:	68dd      	ldr	r5, [r3, #12]
 801b5a6:	4639      	mov	r1, r7
 801b5a8:	4623      	mov	r3, r4
 801b5aa:	4650      	mov	r0, sl
 801b5ac:	47a8      	blx	r5
 801b5ae:	e7e0      	b.n	801b572 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801b5b0:	f10d 0818 	add.w	r8, sp, #24
 801b5b4:	4629      	mov	r1, r5
 801b5b6:	4640      	mov	r0, r8
 801b5b8:	f7fc fa26 	bl	8017a08 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b5bc:	e898 0003 	ldmia.w	r8, {r0, r1}
 801b5c0:	ad04      	add	r5, sp, #16
 801b5c2:	e885 0003 	stmia.w	r5, {r0, r1}
 801b5c6:	4628      	mov	r0, r5
 801b5c8:	4621      	mov	r1, r4
 801b5ca:	f7f6 f915 	bl	80117f8 <_ZN8touchgfx4RectaNERKS0_>
 801b5ce:	4628      	mov	r0, r5
 801b5d0:	f7f6 f955 	bl	801187e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b5d4:	b138      	cbz	r0, 801b5e6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf6>
 801b5d6:	9600      	str	r6, [sp, #0]
 801b5d8:	4623      	mov	r3, r4
 801b5da:	aa02      	add	r2, sp, #8
 801b5dc:	4649      	mov	r1, r9
 801b5de:	4638      	mov	r0, r7
 801b5e0:	f7ff fe60 	bl	801b2a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801b5e4:	e7c5      	b.n	801b572 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801b5e6:	e9cd 6000 	strd	r6, r0, [sp]
 801b5ea:	f8da 3000 	ldr.w	r3, [sl]
 801b5ee:	aa02      	add	r2, sp, #8
 801b5f0:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801b5f4:	4639      	mov	r1, r7
 801b5f6:	462b      	mov	r3, r5
 801b5f8:	4650      	mov	r0, sl
 801b5fa:	47d8      	blx	fp
 801b5fc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b600:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b604:	4293      	cmp	r3, r2
 801b606:	dd13      	ble.n	801b630 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x140>
 801b608:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b60c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b610:	f8ad 0018 	strh.w	r0, [sp, #24]
 801b614:	1a9b      	subs	r3, r3, r2
 801b616:	f8ad 201a 	strh.w	r2, [sp, #26]
 801b61a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b61e:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b622:	9600      	str	r6, [sp, #0]
 801b624:	4643      	mov	r3, r8
 801b626:	aa02      	add	r2, sp, #8
 801b628:	4649      	mov	r1, r9
 801b62a:	4638      	mov	r0, r7
 801b62c:	f7ff fe3a 	bl	801b2a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801b630:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801b634:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b638:	4293      	cmp	r3, r2
 801b63a:	dd13      	ble.n	801b664 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 801b63c:	1a9b      	subs	r3, r3, r2
 801b63e:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801b642:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801b646:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b64a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b64e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b652:	f8ad 101e 	strh.w	r1, [sp, #30]
 801b656:	9600      	str	r6, [sp, #0]
 801b658:	4643      	mov	r3, r8
 801b65a:	aa02      	add	r2, sp, #8
 801b65c:	4649      	mov	r1, r9
 801b65e:	4638      	mov	r0, r7
 801b660:	f7ff fe20 	bl	801b2a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801b664:	88a2      	ldrh	r2, [r4, #4]
 801b666:	8823      	ldrh	r3, [r4, #0]
 801b668:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801b66c:	4413      	add	r3, r2
 801b66e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b672:	440a      	add	r2, r1
 801b674:	b29b      	uxth	r3, r3
 801b676:	b292      	uxth	r2, r2
 801b678:	b211      	sxth	r1, r2
 801b67a:	b218      	sxth	r0, r3
 801b67c:	4288      	cmp	r0, r1
 801b67e:	dd13      	ble.n	801b6a8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b8>
 801b680:	1a9b      	subs	r3, r3, r2
 801b682:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801b686:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 801b68a:	f8ad 1018 	strh.w	r1, [sp, #24]
 801b68e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b692:	f8ad 001e 	strh.w	r0, [sp, #30]
 801b696:	9600      	str	r6, [sp, #0]
 801b698:	4643      	mov	r3, r8
 801b69a:	aa02      	add	r2, sp, #8
 801b69c:	4649      	mov	r1, r9
 801b69e:	4638      	mov	r0, r7
 801b6a0:	f8ad 501a 	strh.w	r5, [sp, #26]
 801b6a4:	f7ff fdfe 	bl	801b2a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801b6a8:	88e2      	ldrh	r2, [r4, #6]
 801b6aa:	8863      	ldrh	r3, [r4, #2]
 801b6ac:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801b6b0:	4413      	add	r3, r2
 801b6b2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801b6b6:	440a      	add	r2, r1
 801b6b8:	b29b      	uxth	r3, r3
 801b6ba:	b292      	uxth	r2, r2
 801b6bc:	b211      	sxth	r1, r2
 801b6be:	b218      	sxth	r0, r3
 801b6c0:	4288      	cmp	r0, r1
 801b6c2:	f77f af56 	ble.w	801b572 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801b6c6:	f9b4 5000 	ldrsh.w	r5, [r4]
 801b6ca:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b6ce:	f8ad 5018 	strh.w	r5, [sp, #24]
 801b6d2:	1a9b      	subs	r3, r3, r2
 801b6d4:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b6d8:	f8ad 101a 	strh.w	r1, [sp, #26]
 801b6dc:	f8ad 001c 	strh.w	r0, [sp, #28]
 801b6e0:	9600      	str	r6, [sp, #0]
 801b6e2:	4643      	mov	r3, r8
 801b6e4:	e779      	b.n	801b5da <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
 801b6e6:	bf00      	nop
 801b6e8:	08027ec4 	.word	0x08027ec4
 801b6ec:	08028602 	.word	0x08028602
 801b6f0:	080281c3 	.word	0x080281c3

0801b6f4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801b6f4:	b508      	push	{r3, lr}
 801b6f6:	b180      	cbz	r0, 801b71a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 801b6f8:	2902      	cmp	r1, #2
 801b6fa:	d014      	beq.n	801b726 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 801b6fc:	2903      	cmp	r1, #3
 801b6fe:	d01d      	beq.n	801b73c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801b700:	2901      	cmp	r1, #1
 801b702:	d101      	bne.n	801b708 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801b704:	2001      	movs	r0, #1
 801b706:	bd08      	pop	{r3, pc}
 801b708:	4b0e      	ldr	r3, [pc, #56]	; (801b744 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801b70a:	8818      	ldrh	r0, [r3, #0]
 801b70c:	b990      	cbnz	r0, 801b734 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801b70e:	4b0e      	ldr	r3, [pc, #56]	; (801b748 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 801b710:	4a0e      	ldr	r2, [pc, #56]	; (801b74c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 801b712:	480f      	ldr	r0, [pc, #60]	; (801b750 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 801b714:	2154      	movs	r1, #84	; 0x54
 801b716:	f008 f815 	bl	8023744 <__assert_func>
 801b71a:	2902      	cmp	r1, #2
 801b71c:	d00e      	beq.n	801b73c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801b71e:	2903      	cmp	r1, #3
 801b720:	d0f2      	beq.n	801b708 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801b722:	2901      	cmp	r1, #1
 801b724:	d1ee      	bne.n	801b704 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 801b726:	4b07      	ldr	r3, [pc, #28]	; (801b744 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801b728:	8818      	ldrh	r0, [r3, #0]
 801b72a:	2800      	cmp	r0, #0
 801b72c:	d0ef      	beq.n	801b70e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801b72e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801b732:	e7e8      	b.n	801b706 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801b734:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801b738:	4240      	negs	r0, r0
 801b73a:	e7e4      	b.n	801b706 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801b73c:	f04f 30ff 	mov.w	r0, #4294967295
 801b740:	e7e1      	b.n	801b706 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801b742:	bf00      	nop
 801b744:	2000a036 	.word	0x2000a036
 801b748:	080281f5 	.word	0x080281f5
 801b74c:	0802877f 	.word	0x0802877f
 801b750:	08028237 	.word	0x08028237

0801b754 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801b754:	b508      	push	{r3, lr}
 801b756:	b180      	cbz	r0, 801b77a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 801b758:	2902      	cmp	r1, #2
 801b75a:	d014      	beq.n	801b786 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 801b75c:	2903      	cmp	r1, #3
 801b75e:	d018      	beq.n	801b792 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801b760:	2901      	cmp	r1, #1
 801b762:	d001      	beq.n	801b768 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801b764:	2001      	movs	r0, #1
 801b766:	e013      	b.n	801b790 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801b768:	4b0e      	ldr	r3, [pc, #56]	; (801b7a4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801b76a:	8818      	ldrh	r0, [r3, #0]
 801b76c:	b970      	cbnz	r0, 801b78c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 801b76e:	4b0e      	ldr	r3, [pc, #56]	; (801b7a8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 801b770:	4a0e      	ldr	r2, [pc, #56]	; (801b7ac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 801b772:	480f      	ldr	r0, [pc, #60]	; (801b7b0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 801b774:	2154      	movs	r1, #84	; 0x54
 801b776:	f007 ffe5 	bl	8023744 <__assert_func>
 801b77a:	2902      	cmp	r1, #2
 801b77c:	d009      	beq.n	801b792 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801b77e:	2903      	cmp	r1, #3
 801b780:	d0f0      	beq.n	801b764 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 801b782:	2901      	cmp	r1, #1
 801b784:	d1f0      	bne.n	801b768 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801b786:	f04f 30ff 	mov.w	r0, #4294967295
 801b78a:	e001      	b.n	801b790 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801b78c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801b790:	bd08      	pop	{r3, pc}
 801b792:	4b04      	ldr	r3, [pc, #16]	; (801b7a4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801b794:	8818      	ldrh	r0, [r3, #0]
 801b796:	2800      	cmp	r0, #0
 801b798:	d0e9      	beq.n	801b76e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 801b79a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801b79e:	4240      	negs	r0, r0
 801b7a0:	e7f6      	b.n	801b790 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801b7a2:	bf00      	nop
 801b7a4:	2000a036 	.word	0x2000a036
 801b7a8:	080281f5 	.word	0x080281f5
 801b7ac:	0802877f 	.word	0x0802877f
 801b7b0:	08028237 	.word	0x08028237

0801b7b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801b7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7b8:	b099      	sub	sp, #100	; 0x64
 801b7ba:	910b      	str	r1, [sp, #44]	; 0x2c
 801b7bc:	a914      	add	r1, sp, #80	; 0x50
 801b7be:	e881 000c 	stmia.w	r1, {r2, r3}
 801b7c2:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801b7c6:	9308      	str	r3, [sp, #32]
 801b7c8:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 801b7cc:	f89d 10a4 	ldrb.w	r1, [sp, #164]	; 0xa4
 801b7d0:	f893 b00d 	ldrb.w	fp, [r3, #13]
 801b7d4:	910c      	str	r1, [sp, #48]	; 0x30
 801b7d6:	f89d 10b0 	ldrb.w	r1, [sp, #176]	; 0xb0
 801b7da:	910d      	str	r1, [sp, #52]	; 0x34
 801b7dc:	7998      	ldrb	r0, [r3, #6]
 801b7de:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 801b7e2:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 801b7e6:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 801b7ea:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801b7ee:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801b7f2:	ea4f 114b 	mov.w	r1, fp, lsl #5
 801b7f6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801b7fa:	4301      	orrs	r1, r0
 801b7fc:	9109      	str	r1, [sp, #36]	; 0x24
 801b7fe:	f000 81e2 	beq.w	801bbc6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x412>
 801b802:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
 801b806:	79d9      	ldrb	r1, [r3, #7]
 801b808:	f40b 7b80 	and.w	fp, fp, #256	; 0x100
 801b80c:	ea51 0b0b 	orrs.w	fp, r1, fp
 801b810:	f000 81d9 	beq.w	801bbc6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x412>
 801b814:	f993 3009 	ldrsb.w	r3, [r3, #9]
 801b818:	b29b      	uxth	r3, r3
 801b81a:	2e00      	cmp	r6, #0
 801b81c:	f000 80fc 	beq.w	801ba18 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x264>
 801b820:	1af6      	subs	r6, r6, r3
 801b822:	b2b6      	uxth	r6, r6
 801b824:	0433      	lsls	r3, r6, #16
 801b826:	d502      	bpl.n	801b82e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801b828:	1bad      	subs	r5, r5, r6
 801b82a:	b22d      	sxth	r5, r5
 801b82c:	2600      	movs	r6, #0
 801b82e:	f9b2 1000 	ldrsh.w	r1, [r2]
 801b832:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801b836:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801b83a:	428d      	cmp	r5, r1
 801b83c:	b28b      	uxth	r3, r1
 801b83e:	bfbf      	itttt	lt
 801b840:	18f6      	addlt	r6, r6, r3
 801b842:	1b75      	sublt	r5, r6, r5
 801b844:	b2ae      	uxthlt	r6, r5
 801b846:	460d      	movlt	r5, r1
 801b848:	8891      	ldrh	r1, [r2, #4]
 801b84a:	440b      	add	r3, r1
 801b84c:	b21b      	sxth	r3, r3
 801b84e:	9311      	str	r3, [sp, #68]	; 0x44
 801b850:	8853      	ldrh	r3, [r2, #2]
 801b852:	88d2      	ldrh	r2, [r2, #6]
 801b854:	4413      	add	r3, r2
 801b856:	b21b      	sxth	r3, r3
 801b858:	9310      	str	r3, [sp, #64]	; 0x40
 801b85a:	4bb2      	ldr	r3, [pc, #712]	; (801bb24 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x370>)
 801b85c:	9a08      	ldr	r2, [sp, #32]
 801b85e:	f893 9000 	ldrb.w	r9, [r3]
 801b862:	f109 3cff 	add.w	ip, r9, #4294967295
 801b866:	f1dc 0300 	rsbs	r3, ip, #0
 801b86a:	eb43 030c 	adc.w	r3, r3, ip
 801b86e:	930f      	str	r3, [sp, #60]	; 0x3c
 801b870:	4629      	mov	r1, r5
 801b872:	4653      	mov	r3, sl
 801b874:	a814      	add	r0, sp, #80	; 0x50
 801b876:	f7f8 fd17 	bl	80142a8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801b87a:	4629      	mov	r1, r5
 801b87c:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801b880:	4653      	mov	r3, sl
 801b882:	9a08      	ldr	r2, [sp, #32]
 801b884:	a814      	add	r0, sp, #80	; 0x50
 801b886:	f7f8 fd27 	bl	80142d8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801b88a:	a918      	add	r1, sp, #96	; 0x60
 801b88c:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801b890:	a817      	add	r0, sp, #92	; 0x5c
 801b892:	f7f8 fe83 	bl	801459c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801b896:	f1ba 0f00 	cmp.w	sl, #0
 801b89a:	f040 80c0 	bne.w	801ba1e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26a>
 801b89e:	f1b9 0f01 	cmp.w	r9, #1
 801b8a2:	f040 80c4 	bne.w	801ba2e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x27a>
 801b8a6:	2301      	movs	r3, #1
 801b8a8:	fa03 f308 	lsl.w	r3, r3, r8
 801b8ac:	3b01      	subs	r3, #1
 801b8ae:	b2db      	uxtb	r3, r3
 801b8b0:	f1b8 0f01 	cmp.w	r8, #1
 801b8b4:	930a      	str	r3, [sp, #40]	; 0x28
 801b8b6:	f000 80e5 	beq.w	801ba84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d0>
 801b8ba:	f1b8 0f02 	cmp.w	r8, #2
 801b8be:	f000 80e4 	beq.w	801ba8a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d6>
 801b8c2:	f1b8 0f04 	cmp.w	r8, #4
 801b8c6:	bf15      	itete	ne
 801b8c8:	46c1      	movne	r9, r8
 801b8ca:	f04f 0904 	moveq.w	r9, #4
 801b8ce:	2301      	movne	r3, #1
 801b8d0:	2311      	moveq	r3, #17
 801b8d2:	9307      	str	r3, [sp, #28]
 801b8d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b8d6:	b153      	cbz	r3, 801b8ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13a>
 801b8d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b8da:	2408      	movs	r4, #8
 801b8dc:	fb94 f3f9 	sdiv	r3, r4, r9
 801b8e0:	1e5c      	subs	r4, r3, #1
 801b8e2:	4414      	add	r4, r2
 801b8e4:	fb94 f4f3 	sdiv	r4, r4, r3
 801b8e8:	fb14 f403 	smulbb	r4, r4, r3
 801b8ec:	b2a4      	uxth	r4, r4
 801b8ee:	b906      	cbnz	r6, 801b8f2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801b8f0:	b16f      	cbz	r7, 801b90e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15a>
 801b8f2:	fb07 6304 	mla	r3, r7, r4, r6
 801b8f6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801b8f8:	fb08 f303 	mul.w	r3, r8, r3
 801b8fc:	4639      	mov	r1, r7
 801b8fe:	f003 0707 	and.w	r7, r3, #7
 801b902:	eb02 03d3 	add.w	r3, r2, r3, lsr #3
 801b906:	9328      	str	r3, [sp, #160]	; 0xa0
 801b908:	ebab 0301 	sub.w	r3, fp, r1
 801b90c:	930e      	str	r3, [sp, #56]	; 0x38
 801b90e:	4651      	mov	r1, sl
 801b910:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b912:	f7ff feef 	bl	801b6f4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801b916:	4651      	mov	r1, sl
 801b918:	4683      	mov	fp, r0
 801b91a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b91c:	f7ff ff1a 	bl	801b754 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801b920:	9a08      	ldr	r2, [sp, #32]
 801b922:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b924:	1a9b      	subs	r3, r3, r2
 801b926:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b928:	429a      	cmp	r2, r3
 801b92a:	bfa8      	it	ge
 801b92c:	461a      	movge	r2, r3
 801b92e:	2a00      	cmp	r2, #0
 801b930:	4682      	mov	sl, r0
 801b932:	9208      	str	r2, [sp, #32]
 801b934:	f340 8147 	ble.w	801bbc6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x412>
 801b938:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b93a:	1bad      	subs	r5, r5, r6
 801b93c:	1b5d      	subs	r5, r3, r5
 801b93e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b940:	429d      	cmp	r5, r3
 801b942:	bfd4      	ite	le
 801b944:	ebc6 0605 	rsble	r6, r6, r5
 801b948:	ebc6 0603 	rsbgt	r6, r6, r3
 801b94c:	2e00      	cmp	r6, #0
 801b94e:	f340 813a 	ble.w	801bbc6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x412>
 801b952:	1ba4      	subs	r4, r4, r6
 801b954:	fb09 f304 	mul.w	r3, r9, r4
 801b958:	930e      	str	r3, [sp, #56]	; 0x38
 801b95a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b95c:	2b00      	cmp	r3, #0
 801b95e:	f040 809d 	bne.w	801ba9c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 801b962:	4b71      	ldr	r3, [pc, #452]	; (801bb28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 801b964:	6818      	ldr	r0, [r3, #0]
 801b966:	6803      	ldr	r3, [r0, #0]
 801b968:	6a1b      	ldr	r3, [r3, #32]
 801b96a:	4798      	blx	r3
 801b96c:	496f      	ldr	r1, [pc, #444]	; (801bb2c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 801b96e:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801b972:	880c      	ldrh	r4, [r1, #0]
 801b974:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 801b978:	fb04 1303 	mla	r3, r4, r3, r1
 801b97c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b980:	9309      	str	r3, [sp, #36]	; 0x24
 801b982:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b984:	7819      	ldrb	r1, [r3, #0]
 801b986:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b988:	0a1b      	lsrs	r3, r3, #8
 801b98a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801b98e:	930f      	str	r3, [sp, #60]	; 0x3c
 801b990:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b992:	08db      	lsrs	r3, r3, #3
 801b994:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801b998:	9310      	str	r3, [sp, #64]	; 0x40
 801b99a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b99c:	00db      	lsls	r3, r3, #3
 801b99e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801b9a2:	9311      	str	r3, [sp, #68]	; 0x44
 801b9a4:	ea4f 034b 	mov.w	r3, fp, lsl #1
 801b9a8:	fb0b ab16 	mls	fp, fp, r6, sl
 801b9ac:	fb03 fa06 	mul.w	sl, r3, r6
 801b9b0:	930c      	str	r3, [sp, #48]	; 0x30
 801b9b2:	eb0a 034b 	add.w	r3, sl, fp, lsl #1
 801b9b6:	9312      	str	r3, [sp, #72]	; 0x48
 801b9b8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b9ba:	4139      	asrs	r1, r7
 801b9bc:	b29b      	uxth	r3, r3
 801b9be:	b2c9      	uxtb	r1, r1
 801b9c0:	9313      	str	r3, [sp, #76]	; 0x4c
 801b9c2:	9b08      	ldr	r3, [sp, #32]
 801b9c4:	3b01      	subs	r3, #1
 801b9c6:	9308      	str	r3, [sp, #32]
 801b9c8:	3301      	adds	r3, #1
 801b9ca:	f000 80c3 	beq.w	801bb54 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 801b9ce:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801b9d2:	46b2      	mov	sl, r6
 801b9d4:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801b9d8:	f0c0 80aa 	bcc.w	801bb30 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 801b9dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b9de:	400b      	ands	r3, r1
 801b9e0:	d00a      	beq.n	801b9f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x244>
 801b9e2:	9807      	ldr	r0, [sp, #28]
 801b9e4:	fb13 f300 	smulbb	r3, r3, r0
 801b9e8:	2bfe      	cmp	r3, #254	; 0xfe
 801b9ea:	dd59      	ble.n	801baa0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ec>
 801b9ec:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b9ee:	28ff      	cmp	r0, #255	; 0xff
 801b9f0:	d156      	bne.n	801baa0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ec>
 801b9f2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b9f4:	f8ae 4000 	strh.w	r4, [lr]
 801b9f8:	4447      	add	r7, r8
 801b9fa:	b2bf      	uxth	r7, r7
 801b9fc:	2f07      	cmp	r7, #7
 801b9fe:	bf81      	itttt	hi
 801ba00:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801ba02:	7859      	ldrbhi	r1, [r3, #1]
 801ba04:	3301      	addhi	r3, #1
 801ba06:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801ba08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ba0a:	bf9a      	itte	ls
 801ba0c:	fa41 f109 	asrls.w	r1, r1, r9
 801ba10:	b2c9      	uxtbls	r1, r1
 801ba12:	2700      	movhi	r7, #0
 801ba14:	449e      	add	lr, r3
 801ba16:	e7dd      	b.n	801b9d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x220>
 801ba18:	441d      	add	r5, r3
 801ba1a:	b22d      	sxth	r5, r5
 801ba1c:	e707      	b.n	801b82e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801ba1e:	f1ba 0f01 	cmp.w	sl, #1
 801ba22:	f47f af40 	bne.w	801b8a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801ba26:	f1b9 0f01 	cmp.w	r9, #1
 801ba2a:	f47f af3c 	bne.w	801b8a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801ba2e:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 801bb28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801ba32:	f8d9 0000 	ldr.w	r0, [r9]
 801ba36:	6803      	ldr	r3, [r0, #0]
 801ba38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ba3a:	4798      	blx	r3
 801ba3c:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801ba40:	464a      	mov	r2, r9
 801ba42:	d006      	beq.n	801ba52 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29e>
 801ba44:	f1b8 0f04 	cmp.w	r8, #4
 801ba48:	d11a      	bne.n	801ba80 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801ba4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ba4c:	3300      	adds	r3, #0
 801ba4e:	bf18      	it	ne
 801ba50:	2301      	movne	r3, #1
 801ba52:	05c0      	lsls	r0, r0, #23
 801ba54:	f140 8087 	bpl.w	801bb66 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801ba58:	f1b8 0f08 	cmp.w	r8, #8
 801ba5c:	f040 8083 	bne.w	801bb66 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801ba60:	2b00      	cmp	r3, #0
 801ba62:	bf14      	ite	ne
 801ba64:	2180      	movne	r1, #128	; 0x80
 801ba66:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801ba6a:	2e00      	cmp	r6, #0
 801ba6c:	f040 80ae 	bne.w	801bbcc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x418>
 801ba70:	2f00      	cmp	r7, #0
 801ba72:	f000 8082 	beq.w	801bb7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c6>
 801ba76:	23ff      	movs	r3, #255	; 0xff
 801ba78:	930a      	str	r3, [sp, #40]	; 0x28
 801ba7a:	46c1      	mov	r9, r8
 801ba7c:	2301      	movs	r3, #1
 801ba7e:	e728      	b.n	801b8d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x11e>
 801ba80:	2300      	movs	r3, #0
 801ba82:	e7e6      	b.n	801ba52 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29e>
 801ba84:	46c1      	mov	r9, r8
 801ba86:	23ff      	movs	r3, #255	; 0xff
 801ba88:	e723      	b.n	801b8d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x11e>
 801ba8a:	46c1      	mov	r9, r8
 801ba8c:	2355      	movs	r3, #85	; 0x55
 801ba8e:	e720      	b.n	801b8d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x11e>
 801ba90:	23ff      	movs	r3, #255	; 0xff
 801ba92:	930a      	str	r3, [sp, #40]	; 0x28
 801ba94:	2301      	movs	r3, #1
 801ba96:	46c1      	mov	r9, r8
 801ba98:	9307      	str	r3, [sp, #28]
 801ba9a:	e71d      	b.n	801b8d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x124>
 801ba9c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ba9e:	e765      	b.n	801b96c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1b8>
 801baa0:	980d      	ldr	r0, [sp, #52]	; 0x34
 801baa2:	f8be 5000 	ldrh.w	r5, [lr]
 801baa6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801baa8:	fb10 f303 	smulbb	r3, r0, r3
 801baac:	b29b      	uxth	r3, r3
 801baae:	1c58      	adds	r0, r3, #1
 801bab0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801bab4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801bab8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801baba:	fa1f fc83 	uxth.w	ip, r3
 801babe:	122c      	asrs	r4, r5, #8
 801bac0:	43db      	mvns	r3, r3
 801bac2:	b2db      	uxtb	r3, r3
 801bac4:	fb1c fb02 	smulbb	fp, ip, r2
 801bac8:	fb10 f00c 	smulbb	r0, r0, ip
 801bacc:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801bad0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bad2:	fb04 0403 	mla	r4, r4, r3, r0
 801bad6:	10e8      	asrs	r0, r5, #3
 801bad8:	00ed      	lsls	r5, r5, #3
 801bada:	b2ed      	uxtb	r5, r5
 801badc:	fb1c fc02 	smulbb	ip, ip, r2
 801bae0:	fb05 cc03 	mla	ip, r5, r3, ip
 801bae4:	b2a4      	uxth	r4, r4
 801bae6:	fa1f fc8c 	uxth.w	ip, ip
 801baea:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801baee:	fb00 b003 	mla	r0, r0, r3, fp
 801baf2:	1c63      	adds	r3, r4, #1
 801baf4:	f10c 0b01 	add.w	fp, ip, #1
 801baf8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801bafc:	eb0b 2b1c 	add.w	fp, fp, ip, lsr #8
 801bb00:	b280      	uxth	r0, r0
 801bb02:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 801bb06:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801bb0a:	ea44 040b 	orr.w	r4, r4, fp
 801bb0e:	f100 0b01 	add.w	fp, r0, #1
 801bb12:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 801bb16:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801bb1a:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801bb1e:	ea44 040b 	orr.w	r4, r4, fp
 801bb22:	e767      	b.n	801b9f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x240>
 801bb24:	2000a034 	.word	0x2000a034
 801bb28:	2000a03c 	.word	0x2000a03c
 801bb2c:	2000a036 	.word	0x2000a036
 801bb30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bb32:	b153      	cbz	r3, 801bb4a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801bb34:	441f      	add	r7, r3
 801bb36:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bb38:	b2bf      	uxth	r7, r7
 801bb3a:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 801bb3e:	f007 0707 	and.w	r7, r7, #7
 801bb42:	7819      	ldrb	r1, [r3, #0]
 801bb44:	9328      	str	r3, [sp, #160]	; 0xa0
 801bb46:	4139      	asrs	r1, r7
 801bb48:	b2c9      	uxtb	r1, r1
 801bb4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bb4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801bb4e:	441a      	add	r2, r3
 801bb50:	9209      	str	r2, [sp, #36]	; 0x24
 801bb52:	e736      	b.n	801b9c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x20e>
 801bb54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bb56:	2b00      	cmp	r3, #0
 801bb58:	d135      	bne.n	801bbc6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x412>
 801bb5a:	4b21      	ldr	r3, [pc, #132]	; (801bbe0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x42c>)
 801bb5c:	6818      	ldr	r0, [r3, #0]
 801bb5e:	6803      	ldr	r3, [r0, #0]
 801bb60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb62:	4798      	blx	r3
 801bb64:	e02f      	b.n	801bbc6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x412>
 801bb66:	2b00      	cmp	r3, #0
 801bb68:	f43f ae9d 	beq.w	801b8a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801bb6c:	2e00      	cmp	r6, #0
 801bb6e:	f47f ae9a 	bne.w	801b8a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801bb72:	2f00      	cmp	r7, #0
 801bb74:	f47f ae97 	bne.w	801b8a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801bb78:	2180      	movs	r1, #128	; 0x80
 801bb7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb7c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bb7e:	18eb      	adds	r3, r5, r3
 801bb80:	4283      	cmp	r3, r0
 801bb82:	f73f ae90 	bgt.w	801b8a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801bb86:	9b08      	ldr	r3, [sp, #32]
 801bb88:	9810      	ldr	r0, [sp, #64]	; 0x40
 801bb8a:	445b      	add	r3, fp
 801bb8c:	4283      	cmp	r3, r0
 801bb8e:	f73f ae8a 	bgt.w	801b8a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801bb92:	6810      	ldr	r0, [r2, #0]
 801bb94:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801bb98:	6805      	ldr	r5, [r0, #0]
 801bb9a:	9105      	str	r1, [sp, #20]
 801bb9c:	f1b8 0f08 	cmp.w	r8, #8
 801bba0:	bf18      	it	ne
 801bba2:	3401      	addne	r4, #1
 801bba4:	990d      	ldr	r1, [sp, #52]	; 0x34
 801bba6:	9104      	str	r1, [sp, #16]
 801bba8:	bf18      	it	ne
 801bbaa:	f024 0401 	bicne.w	r4, r4, #1
 801bbae:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801bbb0:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801bbb4:	bf18      	it	ne
 801bbb6:	b2a4      	uxthne	r4, r4
 801bbb8:	e9cd 4102 	strd	r4, r1, [sp, #8]
 801bbbc:	e9cd 4b00 	strd	r4, fp, [sp]
 801bbc0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801bbc2:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 801bbc4:	47a0      	blx	r4
 801bbc6:	b019      	add	sp, #100	; 0x64
 801bbc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bbce:	2b00      	cmp	r3, #0
 801bbd0:	f47f af5e 	bne.w	801ba90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 801bbd4:	23ff      	movs	r3, #255	; 0xff
 801bbd6:	930a      	str	r3, [sp, #40]	; 0x28
 801bbd8:	2301      	movs	r3, #1
 801bbda:	46c1      	mov	r9, r8
 801bbdc:	9307      	str	r3, [sp, #28]
 801bbde:	e688      	b.n	801b8f2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801bbe0:	2000a03c 	.word	0x2000a03c

0801bbe4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801bbe4:	b538      	push	{r3, r4, r5, lr}
 801bbe6:	4c15      	ldr	r4, [pc, #84]	; (801bc3c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801bbe8:	7823      	ldrb	r3, [r4, #0]
 801bbea:	f3bf 8f5b 	dmb	ish
 801bbee:	07da      	lsls	r2, r3, #31
 801bbf0:	4605      	mov	r5, r0
 801bbf2:	d40b      	bmi.n	801bc0c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801bbf4:	4620      	mov	r0, r4
 801bbf6:	f007 fc7c 	bl	80234f2 <__cxa_guard_acquire>
 801bbfa:	b138      	cbz	r0, 801bc0c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801bbfc:	4620      	mov	r0, r4
 801bbfe:	f007 fc84 	bl	802350a <__cxa_guard_release>
 801bc02:	4a0f      	ldr	r2, [pc, #60]	; (801bc40 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801bc04:	490f      	ldr	r1, [pc, #60]	; (801bc44 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801bc06:	4810      	ldr	r0, [pc, #64]	; (801bc48 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801bc08:	f007 fc6c 	bl	80234e4 <__aeabi_atexit>
 801bc0c:	4c0f      	ldr	r4, [pc, #60]	; (801bc4c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801bc0e:	7823      	ldrb	r3, [r4, #0]
 801bc10:	f3bf 8f5b 	dmb	ish
 801bc14:	07db      	lsls	r3, r3, #31
 801bc16:	d40b      	bmi.n	801bc30 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801bc18:	4620      	mov	r0, r4
 801bc1a:	f007 fc6a 	bl	80234f2 <__cxa_guard_acquire>
 801bc1e:	b138      	cbz	r0, 801bc30 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801bc20:	4620      	mov	r0, r4
 801bc22:	f007 fc72 	bl	802350a <__cxa_guard_release>
 801bc26:	4a06      	ldr	r2, [pc, #24]	; (801bc40 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801bc28:	4909      	ldr	r1, [pc, #36]	; (801bc50 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801bc2a:	480a      	ldr	r0, [pc, #40]	; (801bc54 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801bc2c:	f007 fc5a 	bl	80234e4 <__aeabi_atexit>
 801bc30:	4b05      	ldr	r3, [pc, #20]	; (801bc48 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801bc32:	612b      	str	r3, [r5, #16]
 801bc34:	4b07      	ldr	r3, [pc, #28]	; (801bc54 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801bc36:	616b      	str	r3, [r5, #20]
 801bc38:	bd38      	pop	{r3, r4, r5, pc}
 801bc3a:	bf00      	nop
 801bc3c:	2000a108 	.word	0x2000a108
 801bc40:	20000000 	.word	0x20000000
 801bc44:	0801a1eb 	.word	0x0801a1eb
 801bc48:	200000c4 	.word	0x200000c4
 801bc4c:	2000a10c 	.word	0x2000a10c
 801bc50:	0801a1e9 	.word	0x0801a1e9
 801bc54:	200000c8 	.word	0x200000c8

0801bc58 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801bc58:	b538      	push	{r3, r4, r5, lr}
 801bc5a:	4c15      	ldr	r4, [pc, #84]	; (801bcb0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801bc5c:	7823      	ldrb	r3, [r4, #0]
 801bc5e:	f3bf 8f5b 	dmb	ish
 801bc62:	07da      	lsls	r2, r3, #31
 801bc64:	4605      	mov	r5, r0
 801bc66:	d40b      	bmi.n	801bc80 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801bc68:	4620      	mov	r0, r4
 801bc6a:	f007 fc42 	bl	80234f2 <__cxa_guard_acquire>
 801bc6e:	b138      	cbz	r0, 801bc80 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801bc70:	4620      	mov	r0, r4
 801bc72:	f007 fc4a 	bl	802350a <__cxa_guard_release>
 801bc76:	4a0f      	ldr	r2, [pc, #60]	; (801bcb4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801bc78:	490f      	ldr	r1, [pc, #60]	; (801bcb8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801bc7a:	4810      	ldr	r0, [pc, #64]	; (801bcbc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801bc7c:	f007 fc32 	bl	80234e4 <__aeabi_atexit>
 801bc80:	4c0f      	ldr	r4, [pc, #60]	; (801bcc0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801bc82:	7823      	ldrb	r3, [r4, #0]
 801bc84:	f3bf 8f5b 	dmb	ish
 801bc88:	07db      	lsls	r3, r3, #31
 801bc8a:	d40b      	bmi.n	801bca4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801bc8c:	4620      	mov	r0, r4
 801bc8e:	f007 fc30 	bl	80234f2 <__cxa_guard_acquire>
 801bc92:	b138      	cbz	r0, 801bca4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801bc94:	4620      	mov	r0, r4
 801bc96:	f007 fc38 	bl	802350a <__cxa_guard_release>
 801bc9a:	4a06      	ldr	r2, [pc, #24]	; (801bcb4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801bc9c:	4909      	ldr	r1, [pc, #36]	; (801bcc4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801bc9e:	480a      	ldr	r0, [pc, #40]	; (801bcc8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801bca0:	f007 fc20 	bl	80234e4 <__aeabi_atexit>
 801bca4:	4b05      	ldr	r3, [pc, #20]	; (801bcbc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801bca6:	60ab      	str	r3, [r5, #8]
 801bca8:	4b07      	ldr	r3, [pc, #28]	; (801bcc8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801bcaa:	60eb      	str	r3, [r5, #12]
 801bcac:	bd38      	pop	{r3, r4, r5, pc}
 801bcae:	bf00      	nop
 801bcb0:	2000a0e0 	.word	0x2000a0e0
 801bcb4:	20000000 	.word	0x20000000
 801bcb8:	0801a1ef 	.word	0x0801a1ef
 801bcbc:	2000009c 	.word	0x2000009c
 801bcc0:	2000a0e4 	.word	0x2000a0e4
 801bcc4:	0801a1ed 	.word	0x0801a1ed
 801bcc8:	200000a0 	.word	0x200000a0

0801bccc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801bccc:	b510      	push	{r4, lr}
 801bcce:	4604      	mov	r4, r0
 801bcd0:	f7ff ff88 	bl	801bbe4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801bcd4:	4620      	mov	r0, r4
 801bcd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bcda:	f7ff bfbd 	b.w	801bc58 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801bce0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801bce0:	b538      	push	{r3, r4, r5, lr}
 801bce2:	4c15      	ldr	r4, [pc, #84]	; (801bd38 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801bce4:	7823      	ldrb	r3, [r4, #0]
 801bce6:	f3bf 8f5b 	dmb	ish
 801bcea:	07da      	lsls	r2, r3, #31
 801bcec:	4605      	mov	r5, r0
 801bcee:	d40b      	bmi.n	801bd08 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801bcf0:	4620      	mov	r0, r4
 801bcf2:	f007 fbfe 	bl	80234f2 <__cxa_guard_acquire>
 801bcf6:	b138      	cbz	r0, 801bd08 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801bcf8:	4620      	mov	r0, r4
 801bcfa:	f007 fc06 	bl	802350a <__cxa_guard_release>
 801bcfe:	4a0f      	ldr	r2, [pc, #60]	; (801bd3c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801bd00:	490f      	ldr	r1, [pc, #60]	; (801bd40 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801bd02:	4810      	ldr	r0, [pc, #64]	; (801bd44 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801bd04:	f007 fbee 	bl	80234e4 <__aeabi_atexit>
 801bd08:	4c0f      	ldr	r4, [pc, #60]	; (801bd48 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801bd0a:	7823      	ldrb	r3, [r4, #0]
 801bd0c:	f3bf 8f5b 	dmb	ish
 801bd10:	07db      	lsls	r3, r3, #31
 801bd12:	d40b      	bmi.n	801bd2c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801bd14:	4620      	mov	r0, r4
 801bd16:	f007 fbec 	bl	80234f2 <__cxa_guard_acquire>
 801bd1a:	b138      	cbz	r0, 801bd2c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801bd1c:	4620      	mov	r0, r4
 801bd1e:	f007 fbf4 	bl	802350a <__cxa_guard_release>
 801bd22:	4a06      	ldr	r2, [pc, #24]	; (801bd3c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801bd24:	4909      	ldr	r1, [pc, #36]	; (801bd4c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801bd26:	480a      	ldr	r0, [pc, #40]	; (801bd50 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801bd28:	f007 fbdc 	bl	80234e4 <__aeabi_atexit>
 801bd2c:	4b05      	ldr	r3, [pc, #20]	; (801bd44 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801bd2e:	622b      	str	r3, [r5, #32]
 801bd30:	4b07      	ldr	r3, [pc, #28]	; (801bd50 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801bd32:	626b      	str	r3, [r5, #36]	; 0x24
 801bd34:	bd38      	pop	{r3, r4, r5, pc}
 801bd36:	bf00      	nop
 801bd38:	2000a110 	.word	0x2000a110
 801bd3c:	20000000 	.word	0x20000000
 801bd40:	0801a1e3 	.word	0x0801a1e3
 801bd44:	200000cc 	.word	0x200000cc
 801bd48:	2000a114 	.word	0x2000a114
 801bd4c:	0801a1e1 	.word	0x0801a1e1
 801bd50:	200000d0 	.word	0x200000d0

0801bd54 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801bd54:	b538      	push	{r3, r4, r5, lr}
 801bd56:	4c15      	ldr	r4, [pc, #84]	; (801bdac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801bd58:	7823      	ldrb	r3, [r4, #0]
 801bd5a:	f3bf 8f5b 	dmb	ish
 801bd5e:	07da      	lsls	r2, r3, #31
 801bd60:	4605      	mov	r5, r0
 801bd62:	d40b      	bmi.n	801bd7c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801bd64:	4620      	mov	r0, r4
 801bd66:	f007 fbc4 	bl	80234f2 <__cxa_guard_acquire>
 801bd6a:	b138      	cbz	r0, 801bd7c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801bd6c:	4620      	mov	r0, r4
 801bd6e:	f007 fbcc 	bl	802350a <__cxa_guard_release>
 801bd72:	4a0f      	ldr	r2, [pc, #60]	; (801bdb0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801bd74:	490f      	ldr	r1, [pc, #60]	; (801bdb4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801bd76:	4810      	ldr	r0, [pc, #64]	; (801bdb8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801bd78:	f007 fbb4 	bl	80234e4 <__aeabi_atexit>
 801bd7c:	4c0f      	ldr	r4, [pc, #60]	; (801bdbc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801bd7e:	7823      	ldrb	r3, [r4, #0]
 801bd80:	f3bf 8f5b 	dmb	ish
 801bd84:	07db      	lsls	r3, r3, #31
 801bd86:	d40b      	bmi.n	801bda0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801bd88:	4620      	mov	r0, r4
 801bd8a:	f007 fbb2 	bl	80234f2 <__cxa_guard_acquire>
 801bd8e:	b138      	cbz	r0, 801bda0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801bd90:	4620      	mov	r0, r4
 801bd92:	f007 fbba 	bl	802350a <__cxa_guard_release>
 801bd96:	4a06      	ldr	r2, [pc, #24]	; (801bdb0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801bd98:	4909      	ldr	r1, [pc, #36]	; (801bdc0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801bd9a:	480a      	ldr	r0, [pc, #40]	; (801bdc4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801bd9c:	f007 fba2 	bl	80234e4 <__aeabi_atexit>
 801bda0:	4b05      	ldr	r3, [pc, #20]	; (801bdb8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801bda2:	61ab      	str	r3, [r5, #24]
 801bda4:	4b07      	ldr	r3, [pc, #28]	; (801bdc4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801bda6:	61eb      	str	r3, [r5, #28]
 801bda8:	bd38      	pop	{r3, r4, r5, pc}
 801bdaa:	bf00      	nop
 801bdac:	2000a0e8 	.word	0x2000a0e8
 801bdb0:	20000000 	.word	0x20000000
 801bdb4:	0801a1e7 	.word	0x0801a1e7
 801bdb8:	200000a4 	.word	0x200000a4
 801bdbc:	2000a0ec 	.word	0x2000a0ec
 801bdc0:	0801a1e5 	.word	0x0801a1e5
 801bdc4:	200000a8 	.word	0x200000a8

0801bdc8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801bdc8:	b510      	push	{r4, lr}
 801bdca:	4604      	mov	r4, r0
 801bdcc:	f7ff ff88 	bl	801bce0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801bdd0:	4620      	mov	r0, r4
 801bdd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bdd6:	f7ff bfbd 	b.w	801bd54 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801bddc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801bddc:	b538      	push	{r3, r4, r5, lr}
 801bdde:	4c15      	ldr	r4, [pc, #84]	; (801be34 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801bde0:	7823      	ldrb	r3, [r4, #0]
 801bde2:	f3bf 8f5b 	dmb	ish
 801bde6:	07da      	lsls	r2, r3, #31
 801bde8:	4605      	mov	r5, r0
 801bdea:	d40b      	bmi.n	801be04 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801bdec:	4620      	mov	r0, r4
 801bdee:	f007 fb80 	bl	80234f2 <__cxa_guard_acquire>
 801bdf2:	b138      	cbz	r0, 801be04 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801bdf4:	4620      	mov	r0, r4
 801bdf6:	f007 fb88 	bl	802350a <__cxa_guard_release>
 801bdfa:	4a0f      	ldr	r2, [pc, #60]	; (801be38 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801bdfc:	490f      	ldr	r1, [pc, #60]	; (801be3c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801bdfe:	4810      	ldr	r0, [pc, #64]	; (801be40 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801be00:	f007 fb70 	bl	80234e4 <__aeabi_atexit>
 801be04:	4c0f      	ldr	r4, [pc, #60]	; (801be44 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801be06:	7823      	ldrb	r3, [r4, #0]
 801be08:	f3bf 8f5b 	dmb	ish
 801be0c:	07db      	lsls	r3, r3, #31
 801be0e:	d40b      	bmi.n	801be28 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801be10:	4620      	mov	r0, r4
 801be12:	f007 fb6e 	bl	80234f2 <__cxa_guard_acquire>
 801be16:	b138      	cbz	r0, 801be28 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801be18:	4620      	mov	r0, r4
 801be1a:	f007 fb76 	bl	802350a <__cxa_guard_release>
 801be1e:	4a06      	ldr	r2, [pc, #24]	; (801be38 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801be20:	4909      	ldr	r1, [pc, #36]	; (801be48 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801be22:	480a      	ldr	r0, [pc, #40]	; (801be4c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801be24:	f007 fb5e 	bl	80234e4 <__aeabi_atexit>
 801be28:	4b05      	ldr	r3, [pc, #20]	; (801be40 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801be2a:	632b      	str	r3, [r5, #48]	; 0x30
 801be2c:	4b07      	ldr	r3, [pc, #28]	; (801be4c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801be2e:	636b      	str	r3, [r5, #52]	; 0x34
 801be30:	bd38      	pop	{r3, r4, r5, pc}
 801be32:	bf00      	nop
 801be34:	2000a120 	.word	0x2000a120
 801be38:	20000000 	.word	0x20000000
 801be3c:	0801a1db 	.word	0x0801a1db
 801be40:	200000dc 	.word	0x200000dc
 801be44:	2000a124 	.word	0x2000a124
 801be48:	0801a1d9 	.word	0x0801a1d9
 801be4c:	200000e0 	.word	0x200000e0

0801be50 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801be50:	b538      	push	{r3, r4, r5, lr}
 801be52:	4c15      	ldr	r4, [pc, #84]	; (801bea8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801be54:	7823      	ldrb	r3, [r4, #0]
 801be56:	f3bf 8f5b 	dmb	ish
 801be5a:	07da      	lsls	r2, r3, #31
 801be5c:	4605      	mov	r5, r0
 801be5e:	d40b      	bmi.n	801be78 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801be60:	4620      	mov	r0, r4
 801be62:	f007 fb46 	bl	80234f2 <__cxa_guard_acquire>
 801be66:	b138      	cbz	r0, 801be78 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801be68:	4620      	mov	r0, r4
 801be6a:	f007 fb4e 	bl	802350a <__cxa_guard_release>
 801be6e:	4a0f      	ldr	r2, [pc, #60]	; (801beac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801be70:	490f      	ldr	r1, [pc, #60]	; (801beb0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801be72:	4810      	ldr	r0, [pc, #64]	; (801beb4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801be74:	f007 fb36 	bl	80234e4 <__aeabi_atexit>
 801be78:	4c0f      	ldr	r4, [pc, #60]	; (801beb8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801be7a:	7823      	ldrb	r3, [r4, #0]
 801be7c:	f3bf 8f5b 	dmb	ish
 801be80:	07db      	lsls	r3, r3, #31
 801be82:	d40b      	bmi.n	801be9c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801be84:	4620      	mov	r0, r4
 801be86:	f007 fb34 	bl	80234f2 <__cxa_guard_acquire>
 801be8a:	b138      	cbz	r0, 801be9c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801be8c:	4620      	mov	r0, r4
 801be8e:	f007 fb3c 	bl	802350a <__cxa_guard_release>
 801be92:	4a06      	ldr	r2, [pc, #24]	; (801beac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801be94:	4909      	ldr	r1, [pc, #36]	; (801bebc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801be96:	480a      	ldr	r0, [pc, #40]	; (801bec0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801be98:	f007 fb24 	bl	80234e4 <__aeabi_atexit>
 801be9c:	4b05      	ldr	r3, [pc, #20]	; (801beb4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801be9e:	62ab      	str	r3, [r5, #40]	; 0x28
 801bea0:	4b07      	ldr	r3, [pc, #28]	; (801bec0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801bea2:	62eb      	str	r3, [r5, #44]	; 0x2c
 801bea4:	bd38      	pop	{r3, r4, r5, pc}
 801bea6:	bf00      	nop
 801bea8:	2000a0f0 	.word	0x2000a0f0
 801beac:	20000000 	.word	0x20000000
 801beb0:	0801a1df 	.word	0x0801a1df
 801beb4:	200000ac 	.word	0x200000ac
 801beb8:	2000a0f4 	.word	0x2000a0f4
 801bebc:	0801a1dd 	.word	0x0801a1dd
 801bec0:	200000b0 	.word	0x200000b0

0801bec4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801bec4:	b510      	push	{r4, lr}
 801bec6:	4604      	mov	r4, r0
 801bec8:	f7ff ff88 	bl	801bddc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801becc:	4620      	mov	r0, r4
 801bece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bed2:	f7ff bfbd 	b.w	801be50 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801bed8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801bed8:	b538      	push	{r3, r4, r5, lr}
 801beda:	4c15      	ldr	r4, [pc, #84]	; (801bf30 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801bedc:	7823      	ldrb	r3, [r4, #0]
 801bede:	f3bf 8f5b 	dmb	ish
 801bee2:	07da      	lsls	r2, r3, #31
 801bee4:	4605      	mov	r5, r0
 801bee6:	d40b      	bmi.n	801bf00 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801bee8:	4620      	mov	r0, r4
 801beea:	f007 fb02 	bl	80234f2 <__cxa_guard_acquire>
 801beee:	b138      	cbz	r0, 801bf00 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801bef0:	4620      	mov	r0, r4
 801bef2:	f007 fb0a 	bl	802350a <__cxa_guard_release>
 801bef6:	4a0f      	ldr	r2, [pc, #60]	; (801bf34 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801bef8:	490f      	ldr	r1, [pc, #60]	; (801bf38 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801befa:	4810      	ldr	r0, [pc, #64]	; (801bf3c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801befc:	f007 faf2 	bl	80234e4 <__aeabi_atexit>
 801bf00:	4c0f      	ldr	r4, [pc, #60]	; (801bf40 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801bf02:	7823      	ldrb	r3, [r4, #0]
 801bf04:	f3bf 8f5b 	dmb	ish
 801bf08:	07db      	lsls	r3, r3, #31
 801bf0a:	d40b      	bmi.n	801bf24 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801bf0c:	4620      	mov	r0, r4
 801bf0e:	f007 faf0 	bl	80234f2 <__cxa_guard_acquire>
 801bf12:	b138      	cbz	r0, 801bf24 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801bf14:	4620      	mov	r0, r4
 801bf16:	f007 faf8 	bl	802350a <__cxa_guard_release>
 801bf1a:	4a06      	ldr	r2, [pc, #24]	; (801bf34 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801bf1c:	4909      	ldr	r1, [pc, #36]	; (801bf44 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801bf1e:	480a      	ldr	r0, [pc, #40]	; (801bf48 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801bf20:	f007 fae0 	bl	80234e4 <__aeabi_atexit>
 801bf24:	4b05      	ldr	r3, [pc, #20]	; (801bf3c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801bf26:	652b      	str	r3, [r5, #80]	; 0x50
 801bf28:	4b07      	ldr	r3, [pc, #28]	; (801bf48 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801bf2a:	656b      	str	r3, [r5, #84]	; 0x54
 801bf2c:	bd38      	pop	{r3, r4, r5, pc}
 801bf2e:	bf00      	nop
 801bf30:	2000a128 	.word	0x2000a128
 801bf34:	20000000 	.word	0x20000000
 801bf38:	0801a1cb 	.word	0x0801a1cb
 801bf3c:	200000e4 	.word	0x200000e4
 801bf40:	2000a12c 	.word	0x2000a12c
 801bf44:	0801a1c9 	.word	0x0801a1c9
 801bf48:	200000e8 	.word	0x200000e8

0801bf4c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801bf4c:	b538      	push	{r3, r4, r5, lr}
 801bf4e:	4c15      	ldr	r4, [pc, #84]	; (801bfa4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801bf50:	7823      	ldrb	r3, [r4, #0]
 801bf52:	f3bf 8f5b 	dmb	ish
 801bf56:	07da      	lsls	r2, r3, #31
 801bf58:	4605      	mov	r5, r0
 801bf5a:	d40b      	bmi.n	801bf74 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801bf5c:	4620      	mov	r0, r4
 801bf5e:	f007 fac8 	bl	80234f2 <__cxa_guard_acquire>
 801bf62:	b138      	cbz	r0, 801bf74 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801bf64:	4620      	mov	r0, r4
 801bf66:	f007 fad0 	bl	802350a <__cxa_guard_release>
 801bf6a:	4a0f      	ldr	r2, [pc, #60]	; (801bfa8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801bf6c:	490f      	ldr	r1, [pc, #60]	; (801bfac <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801bf6e:	4810      	ldr	r0, [pc, #64]	; (801bfb0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801bf70:	f007 fab8 	bl	80234e4 <__aeabi_atexit>
 801bf74:	4c0f      	ldr	r4, [pc, #60]	; (801bfb4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801bf76:	7823      	ldrb	r3, [r4, #0]
 801bf78:	f3bf 8f5b 	dmb	ish
 801bf7c:	07db      	lsls	r3, r3, #31
 801bf7e:	d40b      	bmi.n	801bf98 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801bf80:	4620      	mov	r0, r4
 801bf82:	f007 fab6 	bl	80234f2 <__cxa_guard_acquire>
 801bf86:	b138      	cbz	r0, 801bf98 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801bf88:	4620      	mov	r0, r4
 801bf8a:	f007 fabe 	bl	802350a <__cxa_guard_release>
 801bf8e:	4a06      	ldr	r2, [pc, #24]	; (801bfa8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801bf90:	4909      	ldr	r1, [pc, #36]	; (801bfb8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801bf92:	480a      	ldr	r0, [pc, #40]	; (801bfbc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801bf94:	f007 faa6 	bl	80234e4 <__aeabi_atexit>
 801bf98:	4b05      	ldr	r3, [pc, #20]	; (801bfb0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801bf9a:	64ab      	str	r3, [r5, #72]	; 0x48
 801bf9c:	4b07      	ldr	r3, [pc, #28]	; (801bfbc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801bf9e:	64eb      	str	r3, [r5, #76]	; 0x4c
 801bfa0:	bd38      	pop	{r3, r4, r5, pc}
 801bfa2:	bf00      	nop
 801bfa4:	2000a130 	.word	0x2000a130
 801bfa8:	20000000 	.word	0x20000000
 801bfac:	0801a1cf 	.word	0x0801a1cf
 801bfb0:	200000ec 	.word	0x200000ec
 801bfb4:	2000a134 	.word	0x2000a134
 801bfb8:	0801a1cd 	.word	0x0801a1cd
 801bfbc:	200000f0 	.word	0x200000f0

0801bfc0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801bfc0:	b538      	push	{r3, r4, r5, lr}
 801bfc2:	4c15      	ldr	r4, [pc, #84]	; (801c018 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801bfc4:	7823      	ldrb	r3, [r4, #0]
 801bfc6:	f3bf 8f5b 	dmb	ish
 801bfca:	07da      	lsls	r2, r3, #31
 801bfcc:	4605      	mov	r5, r0
 801bfce:	d40b      	bmi.n	801bfe8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801bfd0:	4620      	mov	r0, r4
 801bfd2:	f007 fa8e 	bl	80234f2 <__cxa_guard_acquire>
 801bfd6:	b138      	cbz	r0, 801bfe8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801bfd8:	4620      	mov	r0, r4
 801bfda:	f007 fa96 	bl	802350a <__cxa_guard_release>
 801bfde:	4a0f      	ldr	r2, [pc, #60]	; (801c01c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801bfe0:	490f      	ldr	r1, [pc, #60]	; (801c020 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801bfe2:	4810      	ldr	r0, [pc, #64]	; (801c024 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801bfe4:	f007 fa7e 	bl	80234e4 <__aeabi_atexit>
 801bfe8:	4c0f      	ldr	r4, [pc, #60]	; (801c028 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801bfea:	7823      	ldrb	r3, [r4, #0]
 801bfec:	f3bf 8f5b 	dmb	ish
 801bff0:	07db      	lsls	r3, r3, #31
 801bff2:	d40b      	bmi.n	801c00c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801bff4:	4620      	mov	r0, r4
 801bff6:	f007 fa7c 	bl	80234f2 <__cxa_guard_acquire>
 801bffa:	b138      	cbz	r0, 801c00c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801bffc:	4620      	mov	r0, r4
 801bffe:	f007 fa84 	bl	802350a <__cxa_guard_release>
 801c002:	4a06      	ldr	r2, [pc, #24]	; (801c01c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801c004:	4909      	ldr	r1, [pc, #36]	; (801c02c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801c006:	480a      	ldr	r0, [pc, #40]	; (801c030 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801c008:	f007 fa6c 	bl	80234e4 <__aeabi_atexit>
 801c00c:	4b05      	ldr	r3, [pc, #20]	; (801c024 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801c00e:	642b      	str	r3, [r5, #64]	; 0x40
 801c010:	4b07      	ldr	r3, [pc, #28]	; (801c030 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801c012:	646b      	str	r3, [r5, #68]	; 0x44
 801c014:	bd38      	pop	{r3, r4, r5, pc}
 801c016:	bf00      	nop
 801c018:	2000a0f8 	.word	0x2000a0f8
 801c01c:	20000000 	.word	0x20000000
 801c020:	0801a1d3 	.word	0x0801a1d3
 801c024:	200000b4 	.word	0x200000b4
 801c028:	2000a0fc 	.word	0x2000a0fc
 801c02c:	0801a1d1 	.word	0x0801a1d1
 801c030:	200000b8 	.word	0x200000b8

0801c034 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801c034:	b538      	push	{r3, r4, r5, lr}
 801c036:	4c15      	ldr	r4, [pc, #84]	; (801c08c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801c038:	7823      	ldrb	r3, [r4, #0]
 801c03a:	f3bf 8f5b 	dmb	ish
 801c03e:	07da      	lsls	r2, r3, #31
 801c040:	4605      	mov	r5, r0
 801c042:	d40b      	bmi.n	801c05c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801c044:	4620      	mov	r0, r4
 801c046:	f007 fa54 	bl	80234f2 <__cxa_guard_acquire>
 801c04a:	b138      	cbz	r0, 801c05c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801c04c:	4620      	mov	r0, r4
 801c04e:	f007 fa5c 	bl	802350a <__cxa_guard_release>
 801c052:	4a0f      	ldr	r2, [pc, #60]	; (801c090 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801c054:	490f      	ldr	r1, [pc, #60]	; (801c094 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801c056:	4810      	ldr	r0, [pc, #64]	; (801c098 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801c058:	f007 fa44 	bl	80234e4 <__aeabi_atexit>
 801c05c:	4c0f      	ldr	r4, [pc, #60]	; (801c09c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801c05e:	7823      	ldrb	r3, [r4, #0]
 801c060:	f3bf 8f5b 	dmb	ish
 801c064:	07db      	lsls	r3, r3, #31
 801c066:	d40b      	bmi.n	801c080 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801c068:	4620      	mov	r0, r4
 801c06a:	f007 fa42 	bl	80234f2 <__cxa_guard_acquire>
 801c06e:	b138      	cbz	r0, 801c080 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801c070:	4620      	mov	r0, r4
 801c072:	f007 fa4a 	bl	802350a <__cxa_guard_release>
 801c076:	4a06      	ldr	r2, [pc, #24]	; (801c090 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801c078:	4909      	ldr	r1, [pc, #36]	; (801c0a0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801c07a:	480a      	ldr	r0, [pc, #40]	; (801c0a4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801c07c:	f007 fa32 	bl	80234e4 <__aeabi_atexit>
 801c080:	4b05      	ldr	r3, [pc, #20]	; (801c098 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801c082:	63ab      	str	r3, [r5, #56]	; 0x38
 801c084:	4b07      	ldr	r3, [pc, #28]	; (801c0a4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801c086:	63eb      	str	r3, [r5, #60]	; 0x3c
 801c088:	bd38      	pop	{r3, r4, r5, pc}
 801c08a:	bf00      	nop
 801c08c:	2000a118 	.word	0x2000a118
 801c090:	20000000 	.word	0x20000000
 801c094:	0801a1d7 	.word	0x0801a1d7
 801c098:	200000d4 	.word	0x200000d4
 801c09c:	2000a11c 	.word	0x2000a11c
 801c0a0:	0801a1d5 	.word	0x0801a1d5
 801c0a4:	200000d8 	.word	0x200000d8

0801c0a8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801c0a8:	b510      	push	{r4, lr}
 801c0aa:	4604      	mov	r4, r0
 801c0ac:	f7ff ff14 	bl	801bed8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801c0b0:	4620      	mov	r0, r4
 801c0b2:	f7ff ff85 	bl	801bfc0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801c0b6:	4620      	mov	r0, r4
 801c0b8:	f7ff ff48 	bl	801bf4c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801c0bc:	4620      	mov	r0, r4
 801c0be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c0c2:	f7ff bfb7 	b.w	801c034 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801c0c8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801c0c8:	b538      	push	{r3, r4, r5, lr}
 801c0ca:	4c15      	ldr	r4, [pc, #84]	; (801c120 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801c0cc:	7823      	ldrb	r3, [r4, #0]
 801c0ce:	f3bf 8f5b 	dmb	ish
 801c0d2:	07da      	lsls	r2, r3, #31
 801c0d4:	4605      	mov	r5, r0
 801c0d6:	d40b      	bmi.n	801c0f0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801c0d8:	4620      	mov	r0, r4
 801c0da:	f007 fa0a 	bl	80234f2 <__cxa_guard_acquire>
 801c0de:	b138      	cbz	r0, 801c0f0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801c0e0:	4620      	mov	r0, r4
 801c0e2:	f007 fa12 	bl	802350a <__cxa_guard_release>
 801c0e6:	4a0f      	ldr	r2, [pc, #60]	; (801c124 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801c0e8:	490f      	ldr	r1, [pc, #60]	; (801c128 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801c0ea:	4810      	ldr	r0, [pc, #64]	; (801c12c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801c0ec:	f007 f9fa 	bl	80234e4 <__aeabi_atexit>
 801c0f0:	4c0f      	ldr	r4, [pc, #60]	; (801c130 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801c0f2:	7823      	ldrb	r3, [r4, #0]
 801c0f4:	f3bf 8f5b 	dmb	ish
 801c0f8:	07db      	lsls	r3, r3, #31
 801c0fa:	d40b      	bmi.n	801c114 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801c0fc:	4620      	mov	r0, r4
 801c0fe:	f007 f9f8 	bl	80234f2 <__cxa_guard_acquire>
 801c102:	b138      	cbz	r0, 801c114 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801c104:	4620      	mov	r0, r4
 801c106:	f007 fa00 	bl	802350a <__cxa_guard_release>
 801c10a:	4a06      	ldr	r2, [pc, #24]	; (801c124 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801c10c:	4909      	ldr	r1, [pc, #36]	; (801c134 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801c10e:	480a      	ldr	r0, [pc, #40]	; (801c138 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801c110:	f007 f9e8 	bl	80234e4 <__aeabi_atexit>
 801c114:	4b05      	ldr	r3, [pc, #20]	; (801c12c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801c116:	662b      	str	r3, [r5, #96]	; 0x60
 801c118:	4b07      	ldr	r3, [pc, #28]	; (801c138 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801c11a:	666b      	str	r3, [r5, #100]	; 0x64
 801c11c:	bd38      	pop	{r3, r4, r5, pc}
 801c11e:	bf00      	nop
 801c120:	2000a100 	.word	0x2000a100
 801c124:	20000000 	.word	0x20000000
 801c128:	0801a1c3 	.word	0x0801a1c3
 801c12c:	200000bc 	.word	0x200000bc
 801c130:	2000a104 	.word	0x2000a104
 801c134:	0801a1c1 	.word	0x0801a1c1
 801c138:	200000c0 	.word	0x200000c0

0801c13c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801c13c:	b538      	push	{r3, r4, r5, lr}
 801c13e:	4c15      	ldr	r4, [pc, #84]	; (801c194 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801c140:	7823      	ldrb	r3, [r4, #0]
 801c142:	f3bf 8f5b 	dmb	ish
 801c146:	07da      	lsls	r2, r3, #31
 801c148:	4605      	mov	r5, r0
 801c14a:	d40b      	bmi.n	801c164 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c14c:	4620      	mov	r0, r4
 801c14e:	f007 f9d0 	bl	80234f2 <__cxa_guard_acquire>
 801c152:	b138      	cbz	r0, 801c164 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c154:	4620      	mov	r0, r4
 801c156:	f007 f9d8 	bl	802350a <__cxa_guard_release>
 801c15a:	4a0f      	ldr	r2, [pc, #60]	; (801c198 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c15c:	490f      	ldr	r1, [pc, #60]	; (801c19c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801c15e:	4810      	ldr	r0, [pc, #64]	; (801c1a0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c160:	f007 f9c0 	bl	80234e4 <__aeabi_atexit>
 801c164:	4c0f      	ldr	r4, [pc, #60]	; (801c1a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801c166:	7823      	ldrb	r3, [r4, #0]
 801c168:	f3bf 8f5b 	dmb	ish
 801c16c:	07db      	lsls	r3, r3, #31
 801c16e:	d40b      	bmi.n	801c188 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c170:	4620      	mov	r0, r4
 801c172:	f007 f9be 	bl	80234f2 <__cxa_guard_acquire>
 801c176:	b138      	cbz	r0, 801c188 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c178:	4620      	mov	r0, r4
 801c17a:	f007 f9c6 	bl	802350a <__cxa_guard_release>
 801c17e:	4a06      	ldr	r2, [pc, #24]	; (801c198 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c180:	4909      	ldr	r1, [pc, #36]	; (801c1a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801c182:	480a      	ldr	r0, [pc, #40]	; (801c1ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801c184:	f007 f9ae 	bl	80234e4 <__aeabi_atexit>
 801c188:	4b05      	ldr	r3, [pc, #20]	; (801c1a0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c18a:	65ab      	str	r3, [r5, #88]	; 0x58
 801c18c:	4b07      	ldr	r3, [pc, #28]	; (801c1ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801c18e:	65eb      	str	r3, [r5, #92]	; 0x5c
 801c190:	bd38      	pop	{r3, r4, r5, pc}
 801c192:	bf00      	nop
 801c194:	2000a0d8 	.word	0x2000a0d8
 801c198:	20000000 	.word	0x20000000
 801c19c:	0801a1c7 	.word	0x0801a1c7
 801c1a0:	20000094 	.word	0x20000094
 801c1a4:	2000a0dc 	.word	0x2000a0dc
 801c1a8:	0801a1c5 	.word	0x0801a1c5
 801c1ac:	20000098 	.word	0x20000098

0801c1b0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801c1b0:	b510      	push	{r4, lr}
 801c1b2:	4604      	mov	r4, r0
 801c1b4:	f7ff ff88 	bl	801c0c8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801c1b8:	4620      	mov	r0, r4
 801c1ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c1be:	f7ff bfbd 	b.w	801c13c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801c1c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801c1c4:	b538      	push	{r3, r4, r5, lr}
 801c1c6:	4c15      	ldr	r4, [pc, #84]	; (801c21c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801c1c8:	7823      	ldrb	r3, [r4, #0]
 801c1ca:	f3bf 8f5b 	dmb	ish
 801c1ce:	07da      	lsls	r2, r3, #31
 801c1d0:	4605      	mov	r5, r0
 801c1d2:	d40b      	bmi.n	801c1ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801c1d4:	4620      	mov	r0, r4
 801c1d6:	f007 f98c 	bl	80234f2 <__cxa_guard_acquire>
 801c1da:	b138      	cbz	r0, 801c1ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801c1dc:	4620      	mov	r0, r4
 801c1de:	f007 f994 	bl	802350a <__cxa_guard_release>
 801c1e2:	4a0f      	ldr	r2, [pc, #60]	; (801c220 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801c1e4:	490f      	ldr	r1, [pc, #60]	; (801c224 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801c1e6:	4810      	ldr	r0, [pc, #64]	; (801c228 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801c1e8:	f007 f97c 	bl	80234e4 <__aeabi_atexit>
 801c1ec:	4c0f      	ldr	r4, [pc, #60]	; (801c22c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801c1ee:	7823      	ldrb	r3, [r4, #0]
 801c1f0:	f3bf 8f5b 	dmb	ish
 801c1f4:	07db      	lsls	r3, r3, #31
 801c1f6:	d40b      	bmi.n	801c210 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801c1f8:	4620      	mov	r0, r4
 801c1fa:	f007 f97a 	bl	80234f2 <__cxa_guard_acquire>
 801c1fe:	b138      	cbz	r0, 801c210 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801c200:	4620      	mov	r0, r4
 801c202:	f007 f982 	bl	802350a <__cxa_guard_release>
 801c206:	4a06      	ldr	r2, [pc, #24]	; (801c220 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801c208:	4909      	ldr	r1, [pc, #36]	; (801c230 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801c20a:	480a      	ldr	r0, [pc, #40]	; (801c234 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801c20c:	f007 f96a 	bl	80234e4 <__aeabi_atexit>
 801c210:	4b05      	ldr	r3, [pc, #20]	; (801c228 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801c212:	672b      	str	r3, [r5, #112]	; 0x70
 801c214:	4b07      	ldr	r3, [pc, #28]	; (801c234 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801c216:	676b      	str	r3, [r5, #116]	; 0x74
 801c218:	bd38      	pop	{r3, r4, r5, pc}
 801c21a:	bf00      	nop
 801c21c:	2000a0d0 	.word	0x2000a0d0
 801c220:	20000000 	.word	0x20000000
 801c224:	0801a1bb 	.word	0x0801a1bb
 801c228:	2000008c 	.word	0x2000008c
 801c22c:	2000a0d4 	.word	0x2000a0d4
 801c230:	0801a1b9 	.word	0x0801a1b9
 801c234:	20000090 	.word	0x20000090

0801c238 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801c238:	b538      	push	{r3, r4, r5, lr}
 801c23a:	4c15      	ldr	r4, [pc, #84]	; (801c290 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801c23c:	7823      	ldrb	r3, [r4, #0]
 801c23e:	f3bf 8f5b 	dmb	ish
 801c242:	07da      	lsls	r2, r3, #31
 801c244:	4605      	mov	r5, r0
 801c246:	d40b      	bmi.n	801c260 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801c248:	4620      	mov	r0, r4
 801c24a:	f007 f952 	bl	80234f2 <__cxa_guard_acquire>
 801c24e:	b138      	cbz	r0, 801c260 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801c250:	4620      	mov	r0, r4
 801c252:	f007 f95a 	bl	802350a <__cxa_guard_release>
 801c256:	4a0f      	ldr	r2, [pc, #60]	; (801c294 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801c258:	490f      	ldr	r1, [pc, #60]	; (801c298 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801c25a:	4810      	ldr	r0, [pc, #64]	; (801c29c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801c25c:	f007 f942 	bl	80234e4 <__aeabi_atexit>
 801c260:	4c0f      	ldr	r4, [pc, #60]	; (801c2a0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801c262:	7823      	ldrb	r3, [r4, #0]
 801c264:	f3bf 8f5b 	dmb	ish
 801c268:	07db      	lsls	r3, r3, #31
 801c26a:	d40b      	bmi.n	801c284 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801c26c:	4620      	mov	r0, r4
 801c26e:	f007 f940 	bl	80234f2 <__cxa_guard_acquire>
 801c272:	b138      	cbz	r0, 801c284 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801c274:	4620      	mov	r0, r4
 801c276:	f007 f948 	bl	802350a <__cxa_guard_release>
 801c27a:	4a06      	ldr	r2, [pc, #24]	; (801c294 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801c27c:	4909      	ldr	r1, [pc, #36]	; (801c2a4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801c27e:	480a      	ldr	r0, [pc, #40]	; (801c2a8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801c280:	f007 f930 	bl	80234e4 <__aeabi_atexit>
 801c284:	4b05      	ldr	r3, [pc, #20]	; (801c29c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801c286:	66ab      	str	r3, [r5, #104]	; 0x68
 801c288:	4b07      	ldr	r3, [pc, #28]	; (801c2a8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801c28a:	66eb      	str	r3, [r5, #108]	; 0x6c
 801c28c:	bd38      	pop	{r3, r4, r5, pc}
 801c28e:	bf00      	nop
 801c290:	2000a0c8 	.word	0x2000a0c8
 801c294:	20000000 	.word	0x20000000
 801c298:	0801a1bf 	.word	0x0801a1bf
 801c29c:	20000084 	.word	0x20000084
 801c2a0:	2000a0cc 	.word	0x2000a0cc
 801c2a4:	0801a1bd 	.word	0x0801a1bd
 801c2a8:	20000088 	.word	0x20000088

0801c2ac <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801c2ac:	b510      	push	{r4, lr}
 801c2ae:	4604      	mov	r4, r0
 801c2b0:	f7ff ff88 	bl	801c1c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801c2b4:	4620      	mov	r0, r4
 801c2b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c2ba:	f7ff bfbd 	b.w	801c238 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801c2be <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801c2be:	b510      	push	{r4, lr}
 801c2c0:	4604      	mov	r4, r0
 801c2c2:	f7ff fff3 	bl	801c2ac <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801c2c6:	4620      	mov	r0, r4
 801c2c8:	f7ff ff72 	bl	801c1b0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801c2cc:	4620      	mov	r0, r4
 801c2ce:	f7ff fdf9 	bl	801bec4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801c2d2:	4620      	mov	r0, r4
 801c2d4:	f7ff fcfa 	bl	801bccc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801c2d8:	4620      	mov	r0, r4
 801c2da:	f7ff fd75 	bl	801bdc8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801c2de:	4620      	mov	r0, r4
 801c2e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c2e4:	f7ff bee0 	b.w	801c0a8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801c2e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801c2e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2ec:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 801c2f0:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801c2f4:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801c2f8:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801c2fc:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 801c300:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 801c304:	8808      	ldrh	r0, [r1, #0]
 801c306:	fb0e 4708 	mla	r7, lr, r8, r4
 801c30a:	f1be 0f00 	cmp.w	lr, #0
 801c30e:	eb02 0a07 	add.w	sl, r2, r7
 801c312:	db37      	blt.n	801c384 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 801c314:	45f3      	cmp	fp, lr
 801c316:	dd35      	ble.n	801c384 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 801c318:	2c00      	cmp	r4, #0
 801c31a:	db31      	blt.n	801c380 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 801c31c:	45a0      	cmp	r8, r4
 801c31e:	dd2f      	ble.n	801c380 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 801c320:	5dd2      	ldrb	r2, [r2, r7]
 801c322:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 801c326:	1c62      	adds	r2, r4, #1
 801c328:	d42f      	bmi.n	801c38a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801c32a:	4590      	cmp	r8, r2
 801c32c:	dd2d      	ble.n	801c38a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801c32e:	b366      	cbz	r6, 801c38a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801c330:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801c334:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801c338:	f11e 0e01 	adds.w	lr, lr, #1
 801c33c:	d429      	bmi.n	801c392 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 801c33e:	45f3      	cmp	fp, lr
 801c340:	dd27      	ble.n	801c392 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 801c342:	f1bc 0f00 	cmp.w	ip, #0
 801c346:	f000 80a0 	beq.w	801c48a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a2>
 801c34a:	2c00      	cmp	r4, #0
 801c34c:	db1f      	blt.n	801c38e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801c34e:	45a0      	cmp	r8, r4
 801c350:	dd1d      	ble.n	801c38e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801c352:	f81a 2008 	ldrb.w	r2, [sl, r8]
 801c356:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 801c35a:	3401      	adds	r4, #1
 801c35c:	d41c      	bmi.n	801c398 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 801c35e:	45a0      	cmp	r8, r4
 801c360:	dd1a      	ble.n	801c398 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 801c362:	b1de      	cbz	r6, 801c39c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 801c364:	44d0      	add	r8, sl
 801c366:	f898 2001 	ldrb.w	r2, [r8, #1]
 801c36a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801c36e:	2e0f      	cmp	r6, #15
 801c370:	d915      	bls.n	801c39e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 801c372:	4b49      	ldr	r3, [pc, #292]	; (801c498 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 801c374:	4a49      	ldr	r2, [pc, #292]	; (801c49c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 801c376:	484a      	ldr	r0, [pc, #296]	; (801c4a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 801c378:	f240 11ef 	movw	r1, #495	; 0x1ef
 801c37c:	f007 f9e2 	bl	8023744 <__assert_func>
 801c380:	4681      	mov	r9, r0
 801c382:	e7d0      	b.n	801c326 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 801c384:	4607      	mov	r7, r0
 801c386:	4681      	mov	r9, r0
 801c388:	e7d6      	b.n	801c338 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801c38a:	4607      	mov	r7, r0
 801c38c:	e7d4      	b.n	801c338 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801c38e:	4686      	mov	lr, r0
 801c390:	e7e3      	b.n	801c35a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 801c392:	4603      	mov	r3, r0
 801c394:	4686      	mov	lr, r0
 801c396:	e7ea      	b.n	801c36e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 801c398:	4603      	mov	r3, r0
 801c39a:	e7e8      	b.n	801c36e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 801c39c:	4603      	mov	r3, r0
 801c39e:	f1bc 0f0f 	cmp.w	ip, #15
 801c3a2:	d8e6      	bhi.n	801c372 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 801c3a4:	ea4f 4409 	mov.w	r4, r9, lsl #16
 801c3a8:	fb16 f80c 	smulbb	r8, r6, ip
 801c3ac:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801c3b0:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801c3b4:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801c3b8:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801c3bc:	ea44 0909 	orr.w	r9, r4, r9
 801c3c0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801c3c4:	f1cc 0410 	rsb	r4, ip, #16
 801c3c8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801c3cc:	1ba4      	subs	r4, r4, r6
 801c3ce:	041a      	lsls	r2, r3, #16
 801c3d0:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 801c3d4:	ea4a 0707 	orr.w	r7, sl, r7
 801c3d8:	4377      	muls	r7, r6
 801c3da:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801c3de:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801c3e2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c3e6:	fb04 7409 	mla	r4, r4, r9, r7
 801c3ea:	4313      	orrs	r3, r2
 801c3ec:	ea4f 420e 	mov.w	r2, lr, lsl #16
 801c3f0:	fb08 4303 	mla	r3, r8, r3, r4
 801c3f4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801c3f8:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 801c3fc:	4322      	orrs	r2, r4
 801c3fe:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 801c402:	fb0c 3202 	mla	r2, ip, r2, r3
 801c406:	0d53      	lsrs	r3, r2, #21
 801c408:	0952      	lsrs	r2, r2, #5
 801c40a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c40e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c412:	431a      	orrs	r2, r3
 801c414:	b293      	uxth	r3, r2
 801c416:	b2af      	uxth	r7, r5
 801c418:	1202      	asrs	r2, r0, #8
 801c41a:	43ed      	mvns	r5, r5
 801c41c:	b2ed      	uxtb	r5, r5
 801c41e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801c422:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801c426:	fb12 f205 	smulbb	r2, r2, r5
 801c42a:	10c6      	asrs	r6, r0, #3
 801c42c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c430:	fb0c 2c07 	mla	ip, ip, r7, r2
 801c434:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c438:	10da      	asrs	r2, r3, #3
 801c43a:	fb16 f605 	smulbb	r6, r6, r5
 801c43e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801c442:	fb02 6207 	mla	r2, r2, r7, r6
 801c446:	b296      	uxth	r6, r2
 801c448:	00c2      	lsls	r2, r0, #3
 801c44a:	00dc      	lsls	r4, r3, #3
 801c44c:	b2d2      	uxtb	r2, r2
 801c44e:	b2e4      	uxtb	r4, r4
 801c450:	fb12 f205 	smulbb	r2, r2, r5
 801c454:	fb04 2207 	mla	r2, r4, r7, r2
 801c458:	fa1f fc8c 	uxth.w	ip, ip
 801c45c:	b292      	uxth	r2, r2
 801c45e:	f10c 0301 	add.w	r3, ip, #1
 801c462:	1c50      	adds	r0, r2, #1
 801c464:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801c468:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801c46c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c470:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801c474:	4313      	orrs	r3, r2
 801c476:	1c72      	adds	r2, r6, #1
 801c478:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 801c47c:	0952      	lsrs	r2, r2, #5
 801c47e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c482:	4313      	orrs	r3, r2
 801c484:	800b      	strh	r3, [r1, #0]
 801c486:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c48a:	2e0f      	cmp	r6, #15
 801c48c:	f63f af71 	bhi.w	801c372 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 801c490:	4603      	mov	r3, r0
 801c492:	4686      	mov	lr, r0
 801c494:	e786      	b.n	801c3a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 801c496:	bf00      	nop
 801c498:	0802814e 	.word	0x0802814e
 801c49c:	080287ba 	.word	0x080287ba
 801c4a0:	08028237 	.word	0x08028237

0801c4a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4a8:	ed2d 8b08 	vpush	{d8-d11}
 801c4ac:	b099      	sub	sp, #100	; 0x64
 801c4ae:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 801c4b2:	9215      	str	r2, [sp, #84]	; 0x54
 801c4b4:	9309      	str	r3, [sp, #36]	; 0x24
 801c4b6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801c4b8:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 801c4bc:	930d      	str	r3, [sp, #52]	; 0x34
 801c4be:	910c      	str	r1, [sp, #48]	; 0x30
 801c4c0:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801c4c4:	9016      	str	r0, [sp, #88]	; 0x58
 801c4c6:	6850      	ldr	r0, [r2, #4]
 801c4c8:	6812      	ldr	r2, [r2, #0]
 801c4ca:	fb00 1303 	mla	r3, r0, r3, r1
 801c4ce:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801c4d2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c4d4:	681b      	ldr	r3, [r3, #0]
 801c4d6:	930b      	str	r3, [sp, #44]	; 0x2c
 801c4d8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c4da:	685e      	ldr	r6, [r3, #4]
 801c4dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c4de:	43db      	mvns	r3, r3
 801c4e0:	b2db      	uxtb	r3, r3
 801c4e2:	eeb0 aa40 	vmov.f32	s20, s0
 801c4e6:	eef0 9a60 	vmov.f32	s19, s1
 801c4ea:	eeb0 9a41 	vmov.f32	s18, s2
 801c4ee:	eeb0 8a62 	vmov.f32	s16, s5
 801c4f2:	eef0 8a43 	vmov.f32	s17, s6
 801c4f6:	eef0 ba44 	vmov.f32	s23, s8
 801c4fa:	eeb0 ba64 	vmov.f32	s22, s9
 801c4fe:	eef0 aa45 	vmov.f32	s21, s10
 801c502:	3604      	adds	r6, #4
 801c504:	930a      	str	r3, [sp, #40]	; 0x28
 801c506:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c508:	2b00      	cmp	r3, #0
 801c50a:	dc03      	bgt.n	801c514 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c50c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c50e:	2b00      	cmp	r3, #0
 801c510:	f340 8226 	ble.w	801c960 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 801c514:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c516:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c51a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c51e:	1e48      	subs	r0, r1, #1
 801c520:	1e57      	subs	r7, r2, #1
 801c522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c524:	2b00      	cmp	r3, #0
 801c526:	f340 80e4 	ble.w	801c6f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 801c52a:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801c52e:	ea4f 4325 	mov.w	r3, r5, asr #16
 801c532:	d406      	bmi.n	801c542 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c534:	4584      	cmp	ip, r0
 801c536:	da04      	bge.n	801c542 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c538:	2b00      	cmp	r3, #0
 801c53a:	db02      	blt.n	801c542 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c53c:	42bb      	cmp	r3, r7
 801c53e:	f2c0 80d9 	blt.w	801c6f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801c542:	f11c 0c01 	adds.w	ip, ip, #1
 801c546:	f100 80ca 	bmi.w	801c6de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801c54a:	4561      	cmp	r1, ip
 801c54c:	f2c0 80c7 	blt.w	801c6de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801c550:	3301      	adds	r3, #1
 801c552:	f100 80c4 	bmi.w	801c6de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801c556:	429a      	cmp	r2, r3
 801c558:	f2c0 80c1 	blt.w	801c6de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801c55c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801c560:	4647      	mov	r7, r8
 801c562:	f1bb 0f00 	cmp.w	fp, #0
 801c566:	f340 80e4 	ble.w	801c732 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 801c56a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801c56c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c56e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801c572:	689b      	ldr	r3, [r3, #8]
 801c574:	ea5f 422a 	movs.w	r2, sl, asr #16
 801c578:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801c57c:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801c580:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c584:	f100 8122 	bmi.w	801c7cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 801c588:	f103 39ff 	add.w	r9, r3, #4294967295
 801c58c:	454a      	cmp	r2, r9
 801c58e:	f280 811d 	bge.w	801c7cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 801c592:	f1bc 0f00 	cmp.w	ip, #0
 801c596:	f2c0 8119 	blt.w	801c7cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 801c59a:	f10e 39ff 	add.w	r9, lr, #4294967295
 801c59e:	45cc      	cmp	ip, r9
 801c5a0:	f280 8114 	bge.w	801c7cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 801c5a4:	b21b      	sxth	r3, r3
 801c5a6:	fb0c 2203 	mla	r2, ip, r3, r2
 801c5aa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c5ac:	eb04 0902 	add.w	r9, r4, r2
 801c5b0:	5ca2      	ldrb	r2, [r4, r2]
 801c5b2:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801c5b6:	2800      	cmp	r0, #0
 801c5b8:	f000 80ff 	beq.w	801c7ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 801c5bc:	f899 2001 	ldrb.w	r2, [r9, #1]
 801c5c0:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801c5c4:	9211      	str	r2, [sp, #68]	; 0x44
 801c5c6:	b151      	cbz	r1, 801c5de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c5c8:	eb09 0203 	add.w	r2, r9, r3
 801c5cc:	f819 3003 	ldrb.w	r3, [r9, r3]
 801c5d0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c5d4:	930f      	str	r3, [sp, #60]	; 0x3c
 801c5d6:	7853      	ldrb	r3, [r2, #1]
 801c5d8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c5dc:	9312      	str	r3, [sp, #72]	; 0x48
 801c5de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c5e0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c5e2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801c5e6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c5ea:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c5ee:	ea4c 0c03 	orr.w	ip, ip, r3
 801c5f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c5f4:	041b      	lsls	r3, r3, #16
 801c5f6:	fb10 f201 	smulbb	r2, r0, r1
 801c5fa:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801c5fe:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801c602:	10d2      	asrs	r2, r2, #3
 801c604:	4323      	orrs	r3, r4
 801c606:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801c60a:	4353      	muls	r3, r2
 801c60c:	fb09 330c 	mla	r3, r9, ip, r3
 801c610:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801c614:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c618:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801c61c:	ea4c 0e0e 	orr.w	lr, ip, lr
 801c620:	f1c1 0c10 	rsb	ip, r1, #16
 801c624:	ebac 0c00 	sub.w	ip, ip, r0
 801c628:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801c62c:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801c630:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c632:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c634:	0418      	lsls	r0, r3, #16
 801c636:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801c63a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c63e:	4318      	orrs	r0, r3
 801c640:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801c644:	fb02 c200 	mla	r2, r2, r0, ip
 801c648:	0d53      	lsrs	r3, r2, #21
 801c64a:	0952      	lsrs	r2, r2, #5
 801c64c:	f8b7 c000 	ldrh.w	ip, [r7]
 801c650:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c654:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c658:	431a      	orrs	r2, r3
 801c65a:	b292      	uxth	r2, r2
 801c65c:	ea4f 212c 	mov.w	r1, ip, asr #8
 801c660:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801c664:	1210      	asrs	r0, r2, #8
 801c666:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801c66a:	fb11 f104 	smulbb	r1, r1, r4
 801c66e:	ea4f 0eec 	mov.w	lr, ip, asr #3
 801c672:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801c676:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c67a:	fb00 1003 	mla	r0, r0, r3, r1
 801c67e:	fa5f fc8c 	uxtb.w	ip, ip
 801c682:	10d1      	asrs	r1, r2, #3
 801c684:	00d2      	lsls	r2, r2, #3
 801c686:	fb1c fc04 	smulbb	ip, ip, r4
 801c68a:	b2d2      	uxtb	r2, r2
 801c68c:	fb02 c203 	mla	r2, r2, r3, ip
 801c690:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801c694:	b280      	uxth	r0, r0
 801c696:	b292      	uxth	r2, r2
 801c698:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801c69c:	fb1e fe04 	smulbb	lr, lr, r4
 801c6a0:	fb01 e103 	mla	r1, r1, r3, lr
 801c6a4:	f102 0c01 	add.w	ip, r2, #1
 801c6a8:	1c43      	adds	r3, r0, #1
 801c6aa:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801c6ae:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801c6b2:	b289      	uxth	r1, r1
 801c6b4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c6b8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801c6bc:	4313      	orrs	r3, r2
 801c6be:	1c4a      	adds	r2, r1, #1
 801c6c0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801c6c4:	0949      	lsrs	r1, r1, #5
 801c6c6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c6ca:	430b      	orrs	r3, r1
 801c6cc:	803b      	strh	r3, [r7, #0]
 801c6ce:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801c6d0:	449a      	add	sl, r3
 801c6d2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c6d4:	3702      	adds	r7, #2
 801c6d6:	441d      	add	r5, r3
 801c6d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c6dc:	e741      	b.n	801c562 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801c6de:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801c6e0:	449a      	add	sl, r3
 801c6e2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c6e4:	441d      	add	r5, r3
 801c6e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c6e8:	3b01      	subs	r3, #1
 801c6ea:	9309      	str	r3, [sp, #36]	; 0x24
 801c6ec:	f108 0802 	add.w	r8, r8, #2
 801c6f0:	e717      	b.n	801c522 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c6f2:	d023      	beq.n	801c73c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 801c6f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c6f6:	982d      	ldr	r0, [sp, #180]	; 0xb4
 801c6f8:	3b01      	subs	r3, #1
 801c6fa:	fb00 a003 	mla	r0, r0, r3, sl
 801c6fe:	1400      	asrs	r0, r0, #16
 801c700:	f53f af2c 	bmi.w	801c55c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801c704:	3901      	subs	r1, #1
 801c706:	4288      	cmp	r0, r1
 801c708:	f6bf af28 	bge.w	801c55c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801c70c:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801c70e:	fb01 5303 	mla	r3, r1, r3, r5
 801c712:	141b      	asrs	r3, r3, #16
 801c714:	f53f af22 	bmi.w	801c55c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801c718:	3a01      	subs	r2, #1
 801c71a:	4293      	cmp	r3, r2
 801c71c:	f6bf af1e 	bge.w	801c55c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801c720:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801c724:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801c728:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801c72c:	f1be 0f00 	cmp.w	lr, #0
 801c730:	dc6c      	bgt.n	801c80c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801c732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c734:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c738:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801c73c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c73e:	2b00      	cmp	r3, #0
 801c740:	f340 810e 	ble.w	801c960 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 801c744:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801c748:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c74c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801c750:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c752:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801c756:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801c75a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801c75e:	eef0 6a48 	vmov.f32	s13, s16
 801c762:	ee69 7a27 	vmul.f32	s15, s18, s15
 801c766:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c76a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801c76e:	ee16 aa90 	vmov	sl, s13
 801c772:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801c776:	eef0 6a68 	vmov.f32	s13, s17
 801c77a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801c77e:	ee18 2a10 	vmov	r2, s16
 801c782:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801c786:	fb92 f3f3 	sdiv	r3, r2, r3
 801c78a:	ee18 2a90 	vmov	r2, s17
 801c78e:	932d      	str	r3, [sp, #180]	; 0xb4
 801c790:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c792:	fb92 f3f3 	sdiv	r3, r2, r3
 801c796:	932e      	str	r3, [sp, #184]	; 0xb8
 801c798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c79a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801c79c:	3b01      	subs	r3, #1
 801c79e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c7a2:	930c      	str	r3, [sp, #48]	; 0x30
 801c7a4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c7a6:	bf08      	it	eq
 801c7a8:	4613      	moveq	r3, r2
 801c7aa:	ee16 5a90 	vmov	r5, s13
 801c7ae:	9309      	str	r3, [sp, #36]	; 0x24
 801c7b0:	eef0 8a67 	vmov.f32	s17, s15
 801c7b4:	eeb0 8a47 	vmov.f32	s16, s14
 801c7b8:	e6a5      	b.n	801c506 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801c7ba:	2900      	cmp	r1, #0
 801c7bc:	f43f af0f 	beq.w	801c5de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c7c0:	f819 3003 	ldrb.w	r3, [r9, r3]
 801c7c4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c7c8:	930f      	str	r3, [sp, #60]	; 0x3c
 801c7ca:	e708      	b.n	801c5de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c7cc:	f112 0901 	adds.w	r9, r2, #1
 801c7d0:	f53f af7d 	bmi.w	801c6ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801c7d4:	454b      	cmp	r3, r9
 801c7d6:	f6ff af7a 	blt.w	801c6ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801c7da:	f11c 0901 	adds.w	r9, ip, #1
 801c7de:	f53f af76 	bmi.w	801c6ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801c7e2:	45ce      	cmp	lr, r9
 801c7e4:	f6ff af73 	blt.w	801c6ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801c7e8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c7ea:	9202      	str	r2, [sp, #8]
 801c7ec:	b21b      	sxth	r3, r3
 801c7ee:	fa0f f28e 	sxth.w	r2, lr
 801c7f2:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801c7f6:	e9cd c003 	strd	ip, r0, [sp, #12]
 801c7fa:	9201      	str	r2, [sp, #4]
 801c7fc:	9300      	str	r3, [sp, #0]
 801c7fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c800:	9816      	ldr	r0, [sp, #88]	; 0x58
 801c802:	4633      	mov	r3, r6
 801c804:	4639      	mov	r1, r7
 801c806:	f7ff fd6f 	bl	801c2e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801c80a:	e760      	b.n	801c6ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801c80c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c80e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c810:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801c814:	ea4f 422a 	mov.w	r2, sl, asr #16
 801c818:	1429      	asrs	r1, r5, #16
 801c81a:	fb03 2101 	mla	r1, r3, r1, r2
 801c81e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c820:	440a      	add	r2, r1
 801c822:	5c61      	ldrb	r1, [r4, r1]
 801c824:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801c828:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801c82c:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801c830:	f1bc 0f00 	cmp.w	ip, #0
 801c834:	f000 808c 	beq.w	801c950 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 801c838:	7857      	ldrb	r7, [r2, #1]
 801c83a:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801c83e:	9413      	str	r4, [sp, #76]	; 0x4c
 801c840:	b140      	cbz	r0, 801c854 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 801c842:	18d7      	adds	r7, r2, r3
 801c844:	5cd3      	ldrb	r3, [r2, r3]
 801c846:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c84a:	9310      	str	r3, [sp, #64]	; 0x40
 801c84c:	787b      	ldrb	r3, [r7, #1]
 801c84e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c852:	9314      	str	r3, [sp, #80]	; 0x50
 801c854:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c856:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c858:	fb1c f200 	smulbb	r2, ip, r0
 801c85c:	041f      	lsls	r7, r3, #16
 801c85e:	10d2      	asrs	r2, r2, #3
 801c860:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c864:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801c868:	431f      	orrs	r7, r3
 801c86a:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801c86e:	9317      	str	r3, [sp, #92]	; 0x5c
 801c870:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c872:	041b      	lsls	r3, r3, #16
 801c874:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801c878:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801c87c:	ea43 030b 	orr.w	r3, r3, fp
 801c880:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801c882:	4353      	muls	r3, r2
 801c884:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801c888:	fb04 3707 	mla	r7, r4, r7, r3
 801c88c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801c890:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801c894:	ea43 0b01 	orr.w	fp, r3, r1
 801c898:	f1c0 0110 	rsb	r1, r0, #16
 801c89c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c89e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c8a0:	eba1 0c0c 	sub.w	ip, r1, ip
 801c8a4:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801c8a8:	fb0c 770b 	mla	r7, ip, fp, r7
 801c8ac:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801c8b0:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801c8b4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c8b8:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801c8bc:	ea4c 0c0b 	orr.w	ip, ip, fp
 801c8c0:	fb02 770c 	mla	r7, r2, ip, r7
 801c8c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c8c6:	0d79      	lsrs	r1, r7, #21
 801c8c8:	097f      	lsrs	r7, r7, #5
 801c8ca:	8812      	ldrh	r2, [r2, #0]
 801c8cc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c8d0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801c8d4:	430f      	orrs	r7, r1
 801c8d6:	b2bb      	uxth	r3, r7
 801c8d8:	1211      	asrs	r1, r2, #8
 801c8da:	1218      	asrs	r0, r3, #8
 801c8dc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801c8e0:	fb11 f104 	smulbb	r1, r1, r4
 801c8e4:	10d7      	asrs	r7, r2, #3
 801c8e6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801c8ea:	00d2      	lsls	r2, r2, #3
 801c8ec:	fb00 1009 	mla	r0, r0, r9, r1
 801c8f0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c8f4:	10d9      	asrs	r1, r3, #3
 801c8f6:	b2d2      	uxtb	r2, r2
 801c8f8:	00db      	lsls	r3, r3, #3
 801c8fa:	fb17 f704 	smulbb	r7, r7, r4
 801c8fe:	fb12 f204 	smulbb	r2, r2, r4
 801c902:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801c906:	b2db      	uxtb	r3, r3
 801c908:	b280      	uxth	r0, r0
 801c90a:	fb01 7109 	mla	r1, r1, r9, r7
 801c90e:	fb03 2309 	mla	r3, r3, r9, r2
 801c912:	b29b      	uxth	r3, r3
 801c914:	b289      	uxth	r1, r1
 801c916:	1c42      	adds	r2, r0, #1
 801c918:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801c91c:	1c4f      	adds	r7, r1, #1
 801c91e:	1c5a      	adds	r2, r3, #1
 801c920:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c924:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801c928:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801c92c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c930:	0949      	lsrs	r1, r1, #5
 801c932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c934:	4310      	orrs	r0, r2
 801c936:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c93a:	4308      	orrs	r0, r1
 801c93c:	f823 0b02 	strh.w	r0, [r3], #2
 801c940:	930e      	str	r3, [sp, #56]	; 0x38
 801c942:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801c944:	449a      	add	sl, r3
 801c946:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c948:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c94c:	441d      	add	r5, r3
 801c94e:	e6ed      	b.n	801c72c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801c950:	2800      	cmp	r0, #0
 801c952:	f43f af7f 	beq.w	801c854 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 801c956:	5cd3      	ldrb	r3, [r2, r3]
 801c958:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c95c:	9310      	str	r3, [sp, #64]	; 0x40
 801c95e:	e779      	b.n	801c854 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 801c960:	b019      	add	sp, #100	; 0x64
 801c962:	ecbd 8b08 	vpop	{d8-d11}
 801c966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801c96c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801c96c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c970:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 801c974:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801c978:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801c97c:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 801c980:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801c984:	8808      	ldrh	r0, [r1, #0]
 801c986:	fb06 570e 	mla	r7, r6, lr, r5
 801c98a:	2e00      	cmp	r6, #0
 801c98c:	eb02 0807 	add.w	r8, r2, r7
 801c990:	db38      	blt.n	801ca04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 801c992:	45b1      	cmp	r9, r6
 801c994:	dd36      	ble.n	801ca04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 801c996:	2d00      	cmp	r5, #0
 801c998:	db32      	blt.n	801ca00 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 801c99a:	45ae      	cmp	lr, r5
 801c99c:	dd30      	ble.n	801ca00 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 801c99e:	5dd2      	ldrb	r2, [r2, r7]
 801c9a0:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801c9a4:	1c6a      	adds	r2, r5, #1
 801c9a6:	d430      	bmi.n	801ca0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801c9a8:	4596      	cmp	lr, r2
 801c9aa:	dd2e      	ble.n	801ca0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801c9ac:	b36c      	cbz	r4, 801ca0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801c9ae:	f898 2001 	ldrb.w	r2, [r8, #1]
 801c9b2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801c9b6:	3601      	adds	r6, #1
 801c9b8:	d42b      	bmi.n	801ca12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 801c9ba:	45b1      	cmp	r9, r6
 801c9bc:	dd29      	ble.n	801ca12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 801c9be:	f1bc 0f00 	cmp.w	ip, #0
 801c9c2:	d028      	beq.n	801ca16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 801c9c4:	2d00      	cmp	r5, #0
 801c9c6:	db22      	blt.n	801ca0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 801c9c8:	45ae      	cmp	lr, r5
 801c9ca:	dd20      	ble.n	801ca0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 801c9cc:	f818 600e 	ldrb.w	r6, [r8, lr]
 801c9d0:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 801c9d4:	3501      	adds	r5, #1
 801c9d6:	d407      	bmi.n	801c9e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801c9d8:	45ae      	cmp	lr, r5
 801c9da:	dd05      	ble.n	801c9e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801c9dc:	b134      	cbz	r4, 801c9ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801c9de:	44c6      	add	lr, r8
 801c9e0:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801c9e4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801c9e8:	2c0f      	cmp	r4, #15
 801c9ea:	d802      	bhi.n	801c9f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 801c9ec:	f1bc 0f0f 	cmp.w	ip, #15
 801c9f0:	d914      	bls.n	801ca1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 801c9f2:	4b26      	ldr	r3, [pc, #152]	; (801ca8c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 801c9f4:	4a26      	ldr	r2, [pc, #152]	; (801ca90 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 801c9f6:	4827      	ldr	r0, [pc, #156]	; (801ca94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 801c9f8:	f240 11ef 	movw	r1, #495	; 0x1ef
 801c9fc:	f006 fea2 	bl	8023744 <__assert_func>
 801ca00:	4607      	mov	r7, r0
 801ca02:	e7cf      	b.n	801c9a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 801ca04:	4602      	mov	r2, r0
 801ca06:	4607      	mov	r7, r0
 801ca08:	e7d5      	b.n	801c9b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 801ca0a:	4602      	mov	r2, r0
 801ca0c:	e7d3      	b.n	801c9b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 801ca0e:	4606      	mov	r6, r0
 801ca10:	e7e0      	b.n	801c9d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 801ca12:	4606      	mov	r6, r0
 801ca14:	e7e8      	b.n	801c9e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801ca16:	2c0f      	cmp	r4, #15
 801ca18:	d8eb      	bhi.n	801c9f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 801ca1a:	4606      	mov	r6, r0
 801ca1c:	043d      	lsls	r5, r7, #16
 801ca1e:	fb14 f30c 	smulbb	r3, r4, ip
 801ca22:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 801ca26:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 801ca2a:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801ca2e:	10db      	asrs	r3, r3, #3
 801ca30:	432f      	orrs	r7, r5
 801ca32:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801ca36:	f1cc 0510 	rsb	r5, ip, #16
 801ca3a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ca3e:	1b2d      	subs	r5, r5, r4
 801ca40:	ea4e 0202 	orr.w	r2, lr, r2
 801ca44:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 801ca48:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801ca4c:	4354      	muls	r4, r2
 801ca4e:	fb05 4507 	mla	r5, r5, r7, r4
 801ca52:	0404      	lsls	r4, r0, #16
 801ca54:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801ca58:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801ca5c:	4320      	orrs	r0, r4
 801ca5e:	fb03 5400 	mla	r4, r3, r0, r5
 801ca62:	0430      	lsls	r0, r6, #16
 801ca64:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801ca68:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 801ca6c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801ca70:	4330      	orrs	r0, r6
 801ca72:	fb03 4000 	mla	r0, r3, r0, r4
 801ca76:	0d43      	lsrs	r3, r0, #21
 801ca78:	0940      	lsrs	r0, r0, #5
 801ca7a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ca7e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801ca82:	4318      	orrs	r0, r3
 801ca84:	8008      	strh	r0, [r1, #0]
 801ca86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ca8a:	bf00      	nop
 801ca8c:	0802814e 	.word	0x0802814e
 801ca90:	080287ba 	.word	0x080287ba
 801ca94:	08028237 	.word	0x08028237

0801ca98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ca98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca9c:	ed2d 8b0a 	vpush	{d8-d12}
 801caa0:	b093      	sub	sp, #76	; 0x4c
 801caa2:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 801caa6:	920f      	str	r2, [sp, #60]	; 0x3c
 801caa8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801caaa:	9108      	str	r1, [sp, #32]
 801caac:	9306      	str	r3, [sp, #24]
 801caae:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801cab2:	9010      	str	r0, [sp, #64]	; 0x40
 801cab4:	6850      	ldr	r0, [r2, #4]
 801cab6:	6812      	ldr	r2, [r2, #0]
 801cab8:	fb00 1303 	mla	r3, r0, r3, r1
 801cabc:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801cac0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801cac2:	681b      	ldr	r3, [r3, #0]
 801cac4:	9307      	str	r3, [sp, #28]
 801cac6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801cac8:	685f      	ldr	r7, [r3, #4]
 801caca:	eeb0 aa40 	vmov.f32	s20, s0
 801cace:	eef0 9a60 	vmov.f32	s19, s1
 801cad2:	eeb0 9a41 	vmov.f32	s18, s2
 801cad6:	eeb0 8a62 	vmov.f32	s16, s5
 801cada:	eef0 8a43 	vmov.f32	s17, s6
 801cade:	eeb0 ca44 	vmov.f32	s24, s8
 801cae2:	eef0 ba64 	vmov.f32	s23, s9
 801cae6:	eeb0 ba45 	vmov.f32	s22, s10
 801caea:	3704      	adds	r7, #4
 801caec:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801caf0:	9b08      	ldr	r3, [sp, #32]
 801caf2:	2b00      	cmp	r3, #0
 801caf4:	dc03      	bgt.n	801cafe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801caf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801caf8:	2b00      	cmp	r3, #0
 801cafa:	f340 81b2 	ble.w	801ce62 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801cafe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801cb00:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cb04:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801cb08:	1e48      	subs	r0, r1, #1
 801cb0a:	f102 3cff 	add.w	ip, r2, #4294967295
 801cb0e:	9b06      	ldr	r3, [sp, #24]
 801cb10:	2b00      	cmp	r3, #0
 801cb12:	f340 80a9 	ble.w	801cc68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801cb16:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801cb1a:	ea4f 4326 	mov.w	r3, r6, asr #16
 801cb1e:	d406      	bmi.n	801cb2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801cb20:	4586      	cmp	lr, r0
 801cb22:	da04      	bge.n	801cb2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801cb24:	2b00      	cmp	r3, #0
 801cb26:	db02      	blt.n	801cb2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801cb28:	4563      	cmp	r3, ip
 801cb2a:	f2c0 809e 	blt.w	801cc6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801cb2e:	f11e 0e01 	adds.w	lr, lr, #1
 801cb32:	f100 808f 	bmi.w	801cc54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801cb36:	4571      	cmp	r1, lr
 801cb38:	f2c0 808c 	blt.w	801cc54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801cb3c:	3301      	adds	r3, #1
 801cb3e:	f100 8089 	bmi.w	801cc54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801cb42:	429a      	cmp	r2, r3
 801cb44:	f2c0 8086 	blt.w	801cc54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801cb48:	f8dd b018 	ldr.w	fp, [sp, #24]
 801cb4c:	46c8      	mov	r8, r9
 801cb4e:	f1bb 0f00 	cmp.w	fp, #0
 801cb52:	f340 80a6 	ble.w	801cca2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801cb56:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801cb58:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801cb5a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801cb5e:	689b      	ldr	r3, [r3, #8]
 801cb60:	1422      	asrs	r2, r4, #16
 801cb62:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801cb66:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801cb6a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801cb6e:	f100 80e3 	bmi.w	801cd38 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801cb72:	f103 3aff 	add.w	sl, r3, #4294967295
 801cb76:	4552      	cmp	r2, sl
 801cb78:	f280 80de 	bge.w	801cd38 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801cb7c:	f1bc 0f00 	cmp.w	ip, #0
 801cb80:	f2c0 80da 	blt.w	801cd38 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801cb84:	f10e 3aff 	add.w	sl, lr, #4294967295
 801cb88:	45d4      	cmp	ip, sl
 801cb8a:	f280 80d5 	bge.w	801cd38 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801cb8e:	b21b      	sxth	r3, r3
 801cb90:	fb0c 2203 	mla	r2, ip, r3, r2
 801cb94:	9d07      	ldr	r5, [sp, #28]
 801cb96:	eb05 0a02 	add.w	sl, r5, r2
 801cb9a:	5caa      	ldrb	r2, [r5, r2]
 801cb9c:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801cba0:	2800      	cmp	r0, #0
 801cba2:	f000 80c0 	beq.w	801cd26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 801cba6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801cbaa:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801cbae:	920b      	str	r2, [sp, #44]	; 0x2c
 801cbb0:	b151      	cbz	r1, 801cbc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 801cbb2:	eb0a 0203 	add.w	r2, sl, r3
 801cbb6:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801cbba:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801cbbe:	9309      	str	r3, [sp, #36]	; 0x24
 801cbc0:	7853      	ldrb	r3, [r2, #1]
 801cbc2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801cbc6:	930c      	str	r3, [sp, #48]	; 0x30
 801cbc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cbca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801cbcc:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801cbd0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801cbd4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801cbd8:	ea4c 0c03 	orr.w	ip, ip, r3
 801cbdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cbde:	041b      	lsls	r3, r3, #16
 801cbe0:	fb10 f201 	smulbb	r2, r0, r1
 801cbe4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801cbe8:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801cbec:	10d2      	asrs	r2, r2, #3
 801cbee:	432b      	orrs	r3, r5
 801cbf0:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801cbf4:	4353      	muls	r3, r2
 801cbf6:	fb0a 330c 	mla	r3, sl, ip, r3
 801cbfa:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801cbfe:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801cc02:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801cc06:	ea4c 0e0e 	orr.w	lr, ip, lr
 801cc0a:	f1c1 0c10 	rsb	ip, r1, #16
 801cc0e:	ebac 0c00 	sub.w	ip, ip, r0
 801cc12:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801cc16:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801cc1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc1c:	0418      	lsls	r0, r3, #16
 801cc1e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801cc22:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801cc26:	4318      	orrs	r0, r3
 801cc28:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801cc2c:	fb02 c200 	mla	r2, r2, r0, ip
 801cc30:	0d53      	lsrs	r3, r2, #21
 801cc32:	0952      	lsrs	r2, r2, #5
 801cc34:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cc38:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801cc3c:	431a      	orrs	r2, r3
 801cc3e:	f8a8 2000 	strh.w	r2, [r8]
 801cc42:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801cc44:	441c      	add	r4, r3
 801cc46:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801cc48:	f108 0802 	add.w	r8, r8, #2
 801cc4c:	441e      	add	r6, r3
 801cc4e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cc52:	e77c      	b.n	801cb4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801cc54:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801cc56:	441c      	add	r4, r3
 801cc58:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801cc5a:	441e      	add	r6, r3
 801cc5c:	9b06      	ldr	r3, [sp, #24]
 801cc5e:	3b01      	subs	r3, #1
 801cc60:	9306      	str	r3, [sp, #24]
 801cc62:	f109 0902 	add.w	r9, r9, #2
 801cc66:	e752      	b.n	801cb0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cc68:	d020      	beq.n	801ccac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801cc6a:	9b06      	ldr	r3, [sp, #24]
 801cc6c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801cc6e:	3b01      	subs	r3, #1
 801cc70:	fb00 4003 	mla	r0, r0, r3, r4
 801cc74:	1400      	asrs	r0, r0, #16
 801cc76:	f53f af67 	bmi.w	801cb48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801cc7a:	3901      	subs	r1, #1
 801cc7c:	4288      	cmp	r0, r1
 801cc7e:	f6bf af63 	bge.w	801cb48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801cc82:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801cc84:	fb01 6303 	mla	r3, r1, r3, r6
 801cc88:	141b      	asrs	r3, r3, #16
 801cc8a:	f53f af5d 	bmi.w	801cb48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801cc8e:	3a01      	subs	r2, #1
 801cc90:	4293      	cmp	r3, r2
 801cc92:	f6bf af59 	bge.w	801cb48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801cc96:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801cc9a:	46ca      	mov	sl, r9
 801cc9c:	f1b8 0f00 	cmp.w	r8, #0
 801cca0:	dc67      	bgt.n	801cd72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 801cca2:	9b06      	ldr	r3, [sp, #24]
 801cca4:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801cca8:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801ccac:	9b08      	ldr	r3, [sp, #32]
 801ccae:	2b00      	cmp	r3, #0
 801ccb0:	f340 80d7 	ble.w	801ce62 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801ccb4:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801ccb8:	ee79 9aab 	vadd.f32	s19, s19, s23
 801ccbc:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801ccc0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ccc2:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801ccc6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ccca:	eef0 6a48 	vmov.f32	s13, s16
 801ccce:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ccd2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ccd6:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ccda:	ee16 4a90 	vmov	r4, s13
 801ccde:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801cce2:	eef0 6a68 	vmov.f32	s13, s17
 801cce6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ccea:	ee18 2a10 	vmov	r2, s16
 801ccee:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ccf2:	fb92 f3f3 	sdiv	r3, r2, r3
 801ccf6:	ee18 2a90 	vmov	r2, s17
 801ccfa:	9329      	str	r3, [sp, #164]	; 0xa4
 801ccfc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ccfe:	fb92 f3f3 	sdiv	r3, r2, r3
 801cd02:	932a      	str	r3, [sp, #168]	; 0xa8
 801cd04:	9b08      	ldr	r3, [sp, #32]
 801cd06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cd08:	3b01      	subs	r3, #1
 801cd0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cd0e:	9308      	str	r3, [sp, #32]
 801cd10:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cd12:	bf08      	it	eq
 801cd14:	4613      	moveq	r3, r2
 801cd16:	ee16 6a90 	vmov	r6, s13
 801cd1a:	9306      	str	r3, [sp, #24]
 801cd1c:	eef0 8a67 	vmov.f32	s17, s15
 801cd20:	eeb0 8a47 	vmov.f32	s16, s14
 801cd24:	e6e4      	b.n	801caf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801cd26:	2900      	cmp	r1, #0
 801cd28:	f43f af4e 	beq.w	801cbc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 801cd2c:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801cd30:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801cd34:	9309      	str	r3, [sp, #36]	; 0x24
 801cd36:	e747      	b.n	801cbc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 801cd38:	f112 0a01 	adds.w	sl, r2, #1
 801cd3c:	d481      	bmi.n	801cc42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801cd3e:	4553      	cmp	r3, sl
 801cd40:	f6ff af7f 	blt.w	801cc42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801cd44:	f11c 0a01 	adds.w	sl, ip, #1
 801cd48:	f53f af7b 	bmi.w	801cc42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801cd4c:	45d6      	cmp	lr, sl
 801cd4e:	f6ff af78 	blt.w	801cc42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801cd52:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801cd56:	b21b      	sxth	r3, r3
 801cd58:	fa0f f28e 	sxth.w	r2, lr
 801cd5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801cd60:	9201      	str	r2, [sp, #4]
 801cd62:	9300      	str	r3, [sp, #0]
 801cd64:	9a07      	ldr	r2, [sp, #28]
 801cd66:	9810      	ldr	r0, [sp, #64]	; 0x40
 801cd68:	463b      	mov	r3, r7
 801cd6a:	4641      	mov	r1, r8
 801cd6c:	f7ff fdfe 	bl	801c96c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801cd70:	e767      	b.n	801cc42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801cd72:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801cd74:	9d07      	ldr	r5, [sp, #28]
 801cd76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801cd7a:	1422      	asrs	r2, r4, #16
 801cd7c:	1431      	asrs	r1, r6, #16
 801cd7e:	fb03 2101 	mla	r1, r3, r1, r2
 801cd82:	9a07      	ldr	r2, [sp, #28]
 801cd84:	440a      	add	r2, r1
 801cd86:	5c69      	ldrb	r1, [r5, r1]
 801cd88:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801cd8c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801cd90:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801cd94:	f1be 0f00 	cmp.w	lr, #0
 801cd98:	d05c      	beq.n	801ce54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 801cd9a:	f892 c001 	ldrb.w	ip, [r2, #1]
 801cd9e:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801cda2:	950d      	str	r5, [sp, #52]	; 0x34
 801cda4:	b150      	cbz	r0, 801cdbc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 801cda6:	eb02 0c03 	add.w	ip, r2, r3
 801cdaa:	5cd3      	ldrb	r3, [r2, r3]
 801cdac:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801cdb0:	930a      	str	r3, [sp, #40]	; 0x28
 801cdb2:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801cdb6:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801cdba:	930e      	str	r3, [sp, #56]	; 0x38
 801cdbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cdbe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801cdc0:	fb1e f200 	smulbb	r2, lr, r0
 801cdc4:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801cdc8:	10d2      	asrs	r2, r2, #3
 801cdca:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801cdce:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801cdd2:	ea4c 0c03 	orr.w	ip, ip, r3
 801cdd6:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801cdda:	9311      	str	r3, [sp, #68]	; 0x44
 801cddc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cdde:	041b      	lsls	r3, r3, #16
 801cde0:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801cde4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801cde8:	ea43 030b 	orr.w	r3, r3, fp
 801cdec:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801cdee:	4353      	muls	r3, r2
 801cdf0:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801cdf4:	fb05 3c0c 	mla	ip, r5, ip, r3
 801cdf8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801cdfc:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801ce00:	ea43 0b01 	orr.w	fp, r3, r1
 801ce04:	f1c0 0110 	rsb	r1, r0, #16
 801ce08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ce0a:	eba1 0e0e 	sub.w	lr, r1, lr
 801ce0e:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801ce12:	fb0e cc0b 	mla	ip, lr, fp, ip
 801ce16:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801ce1a:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801ce1e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801ce22:	ea4b 0e0e 	orr.w	lr, fp, lr
 801ce26:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801ce2a:	fb02 cc0e 	mla	ip, r2, lr, ip
 801ce2e:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801ce32:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801ce36:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ce3a:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801ce3e:	ea43 0c0c 	orr.w	ip, r3, ip
 801ce42:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ce44:	f82a cb02 	strh.w	ip, [sl], #2
 801ce48:	441c      	add	r4, r3
 801ce4a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ce4c:	f108 38ff 	add.w	r8, r8, #4294967295
 801ce50:	441e      	add	r6, r3
 801ce52:	e723      	b.n	801cc9c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801ce54:	2800      	cmp	r0, #0
 801ce56:	d0b1      	beq.n	801cdbc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 801ce58:	5cd3      	ldrb	r3, [r2, r3]
 801ce5a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ce5e:	930a      	str	r3, [sp, #40]	; 0x28
 801ce60:	e7ac      	b.n	801cdbc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 801ce62:	b013      	add	sp, #76	; 0x4c
 801ce64:	ecbd 8b0a 	vpop	{d8-d12}
 801ce68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ce6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801ce6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce70:	468b      	mov	fp, r1
 801ce72:	8809      	ldrh	r1, [r1, #0]
 801ce74:	b089      	sub	sp, #36	; 0x24
 801ce76:	10cd      	asrs	r5, r1, #3
 801ce78:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 801ce7c:	ea4f 2921 	mov.w	r9, r1, asr #8
 801ce80:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801ce84:	00c9      	lsls	r1, r1, #3
 801ce86:	9500      	str	r5, [sp, #0]
 801ce88:	b2c9      	uxtb	r1, r1
 801ce8a:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 801ce8e:	9101      	str	r1, [sp, #4]
 801ce90:	9900      	ldr	r1, [sp, #0]
 801ce92:	9202      	str	r2, [sp, #8]
 801ce94:	fb04 650e 	mla	r5, r4, lr, r6
 801ce98:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801ce9c:	eb02 0805 	add.w	r8, r2, r5
 801cea0:	0209      	lsls	r1, r1, #8
 801cea2:	9a01      	ldr	r2, [sp, #4]
 801cea4:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 801cea8:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801ceac:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801ceb0:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 801ceb4:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 801ceb8:	4311      	orrs	r1, r2
 801ceba:	2c00      	cmp	r4, #0
 801cebc:	9107      	str	r1, [sp, #28]
 801cebe:	db43      	blt.n	801cf48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 801cec0:	45a2      	cmp	sl, r4
 801cec2:	dd41      	ble.n	801cf48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 801cec4:	2e00      	cmp	r6, #0
 801cec6:	db3d      	blt.n	801cf44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 801cec8:	45b6      	cmp	lr, r6
 801ceca:	dd3b      	ble.n	801cf44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 801cecc:	9a02      	ldr	r2, [sp, #8]
 801cece:	5d55      	ldrb	r5, [r2, r5]
 801ced0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ced4:	441d      	add	r5, r3
 801ced6:	1c72      	adds	r2, r6, #1
 801ced8:	d439      	bmi.n	801cf4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 801ceda:	4596      	cmp	lr, r2
 801cedc:	dd37      	ble.n	801cf4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 801cede:	2f00      	cmp	r7, #0
 801cee0:	d035      	beq.n	801cf4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 801cee2:	f898 1001 	ldrb.w	r1, [r8, #1]
 801cee6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ceea:	4419      	add	r1, r3
 801ceec:	3401      	adds	r4, #1
 801ceee:	d432      	bmi.n	801cf56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 801cef0:	45a2      	cmp	sl, r4
 801cef2:	dd30      	ble.n	801cf56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 801cef4:	b378      	cbz	r0, 801cf56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 801cef6:	2e00      	cmp	r6, #0
 801cef8:	db2b      	blt.n	801cf52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 801cefa:	45b6      	cmp	lr, r6
 801cefc:	dd29      	ble.n	801cf52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 801cefe:	f818 400e 	ldrb.w	r4, [r8, lr]
 801cf02:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cf06:	441c      	add	r4, r3
 801cf08:	3601      	adds	r6, #1
 801cf0a:	d427      	bmi.n	801cf5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 801cf0c:	45b6      	cmp	lr, r6
 801cf0e:	dd25      	ble.n	801cf5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 801cf10:	b327      	cbz	r7, 801cf5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 801cf12:	44c6      	add	lr, r8
 801cf14:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801cf18:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cf1c:	4413      	add	r3, r2
 801cf1e:	782a      	ldrb	r2, [r5, #0]
 801cf20:	9202      	str	r2, [sp, #8]
 801cf22:	780a      	ldrb	r2, [r1, #0]
 801cf24:	9203      	str	r2, [sp, #12]
 801cf26:	7822      	ldrb	r2, [r4, #0]
 801cf28:	9204      	str	r2, [sp, #16]
 801cf2a:	2f0f      	cmp	r7, #15
 801cf2c:	781a      	ldrb	r2, [r3, #0]
 801cf2e:	9205      	str	r2, [sp, #20]
 801cf30:	d801      	bhi.n	801cf36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xca>
 801cf32:	280f      	cmp	r0, #15
 801cf34:	d914      	bls.n	801cf60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf4>
 801cf36:	4b3f      	ldr	r3, [pc, #252]	; (801d034 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c8>)
 801cf38:	4a3f      	ldr	r2, [pc, #252]	; (801d038 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 801cf3a:	4840      	ldr	r0, [pc, #256]	; (801d03c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 801cf3c:	f240 210d 	movw	r1, #525	; 0x20d
 801cf40:	f006 fc00 	bl	8023744 <__assert_func>
 801cf44:	ad07      	add	r5, sp, #28
 801cf46:	e7c6      	b.n	801ced6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6a>
 801cf48:	a907      	add	r1, sp, #28
 801cf4a:	460d      	mov	r5, r1
 801cf4c:	e7ce      	b.n	801ceec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 801cf4e:	a907      	add	r1, sp, #28
 801cf50:	e7cc      	b.n	801ceec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 801cf52:	ac07      	add	r4, sp, #28
 801cf54:	e7d8      	b.n	801cf08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9c>
 801cf56:	ab07      	add	r3, sp, #28
 801cf58:	461c      	mov	r4, r3
 801cf5a:	e7e0      	b.n	801cf1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 801cf5c:	ab07      	add	r3, sp, #28
 801cf5e:	e7de      	b.n	801cf1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 801cf60:	b2ba      	uxth	r2, r7
 801cf62:	b280      	uxth	r0, r0
 801cf64:	fb02 fa00 	mul.w	sl, r2, r0
 801cf68:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801cf6c:	0112      	lsls	r2, r2, #4
 801cf6e:	b280      	uxth	r0, r0
 801cf70:	f891 8002 	ldrb.w	r8, [r1, #2]
 801cf74:	7849      	ldrb	r1, [r1, #1]
 801cf76:	78ae      	ldrb	r6, [r5, #2]
 801cf78:	786d      	ldrb	r5, [r5, #1]
 801cf7a:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801cf7e:	eba2 020a 	sub.w	r2, r2, sl
 801cf82:	b292      	uxth	r2, r2
 801cf84:	ebae 0e00 	sub.w	lr, lr, r0
 801cf88:	fa1f fe8e 	uxth.w	lr, lr
 801cf8c:	4351      	muls	r1, r2
 801cf8e:	fb02 f808 	mul.w	r8, r2, r8
 801cf92:	fb0e 8806 	mla	r8, lr, r6, r8
 801cf96:	fb0e 1505 	mla	r5, lr, r5, r1
 801cf9a:	78a6      	ldrb	r6, [r4, #2]
 801cf9c:	7861      	ldrb	r1, [r4, #1]
 801cf9e:	fa1f f78c 	uxth.w	r7, ip
 801cfa2:	fb00 8806 	mla	r8, r0, r6, r8
 801cfa6:	fb00 5501 	mla	r5, r0, r1, r5
 801cfaa:	789e      	ldrb	r6, [r3, #2]
 801cfac:	7859      	ldrb	r1, [r3, #1]
 801cfae:	9b00      	ldr	r3, [sp, #0]
 801cfb0:	ea6f 0c0c 	mvn.w	ip, ip
 801cfb4:	fa5f fc8c 	uxtb.w	ip, ip
 801cfb8:	fb0a 5101 	mla	r1, sl, r1, r5
 801cfbc:	fb13 f50c 	smulbb	r5, r3, ip
 801cfc0:	9b03      	ldr	r3, [sp, #12]
 801cfc2:	435a      	muls	r2, r3
 801cfc4:	9b02      	ldr	r3, [sp, #8]
 801cfc6:	fb0e 2203 	mla	r2, lr, r3, r2
 801cfca:	9b04      	ldr	r3, [sp, #16]
 801cfcc:	fb00 2003 	mla	r0, r0, r3, r2
 801cfd0:	9b05      	ldr	r3, [sp, #20]
 801cfd2:	fb0a 8606 	mla	r6, sl, r6, r8
 801cfd6:	fb0a 0a03 	mla	sl, sl, r3, r0
 801cfda:	9b01      	ldr	r3, [sp, #4]
 801cfdc:	fb19 f90c 	smulbb	r9, r9, ip
 801cfe0:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801cfe4:	fb13 fc0c 	smulbb	ip, r3, ip
 801cfe8:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801cfec:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801cff0:	fb06 9607 	mla	r6, r6, r7, r9
 801cff4:	fb01 5107 	mla	r1, r1, r7, r5
 801cff8:	fb0a c707 	mla	r7, sl, r7, ip
 801cffc:	b2b6      	uxth	r6, r6
 801cffe:	b289      	uxth	r1, r1
 801d000:	b2bf      	uxth	r7, r7
 801d002:	f106 0901 	add.w	r9, r6, #1
 801d006:	f107 0c01 	add.w	ip, r7, #1
 801d00a:	1c4d      	adds	r5, r1, #1
 801d00c:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 801d010:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801d014:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 801d018:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d01c:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801d020:	0949      	lsrs	r1, r1, #5
 801d022:	433e      	orrs	r6, r7
 801d024:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801d028:	430e      	orrs	r6, r1
 801d02a:	f8ab 6000 	strh.w	r6, [fp]
 801d02e:	b009      	add	sp, #36	; 0x24
 801d030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d034:	0802814e 	.word	0x0802814e
 801d038:	08028711 	.word	0x08028711
 801d03c:	08028237 	.word	0x08028237

0801d040 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d044:	ed2d 8b08 	vpush	{d8-d11}
 801d048:	b095      	sub	sp, #84	; 0x54
 801d04a:	eeb0 aa40 	vmov.f32	s20, s0
 801d04e:	9212      	str	r2, [sp, #72]	; 0x48
 801d050:	9309      	str	r3, [sp, #36]	; 0x24
 801d052:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801d054:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801d058:	930f      	str	r3, [sp, #60]	; 0x3c
 801d05a:	910e      	str	r1, [sp, #56]	; 0x38
 801d05c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801d060:	9013      	str	r0, [sp, #76]	; 0x4c
 801d062:	6850      	ldr	r0, [r2, #4]
 801d064:	6812      	ldr	r2, [r2, #0]
 801d066:	fb00 1303 	mla	r3, r0, r3, r1
 801d06a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d06e:	930a      	str	r3, [sp, #40]	; 0x28
 801d070:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d072:	681b      	ldr	r3, [r3, #0]
 801d074:	930d      	str	r3, [sp, #52]	; 0x34
 801d076:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d078:	685c      	ldr	r4, [r3, #4]
 801d07a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d07c:	43db      	mvns	r3, r3
 801d07e:	b2db      	uxtb	r3, r3
 801d080:	eef0 9a60 	vmov.f32	s19, s1
 801d084:	eeb0 9a41 	vmov.f32	s18, s2
 801d088:	eeb0 8a62 	vmov.f32	s16, s5
 801d08c:	eef0 8a43 	vmov.f32	s17, s6
 801d090:	eef0 ba44 	vmov.f32	s23, s8
 801d094:	eeb0 ba64 	vmov.f32	s22, s9
 801d098:	eef0 aa45 	vmov.f32	s21, s10
 801d09c:	3404      	adds	r4, #4
 801d09e:	930b      	str	r3, [sp, #44]	; 0x2c
 801d0a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d0a2:	2b00      	cmp	r3, #0
 801d0a4:	dc03      	bgt.n	801d0ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d0a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d0a8:	2b00      	cmp	r3, #0
 801d0aa:	f340 8258 	ble.w	801d55e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801d0ae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d0b0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d0b4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d0b8:	1e48      	subs	r0, r1, #1
 801d0ba:	1e55      	subs	r5, r2, #1
 801d0bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d0be:	2b00      	cmp	r3, #0
 801d0c0:	f340 80fc 	ble.w	801d2bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801d0c4:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 801d0c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d0c8:	1436      	asrs	r6, r6, #16
 801d0ca:	ea4f 4323 	mov.w	r3, r3, asr #16
 801d0ce:	d406      	bmi.n	801d0de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d0d0:	4286      	cmp	r6, r0
 801d0d2:	da04      	bge.n	801d0de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d0d4:	2b00      	cmp	r3, #0
 801d0d6:	db02      	blt.n	801d0de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d0d8:	42ab      	cmp	r3, r5
 801d0da:	f2c0 80f0 	blt.w	801d2be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801d0de:	3601      	adds	r6, #1
 801d0e0:	f100 80dd 	bmi.w	801d29e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d0e4:	42b1      	cmp	r1, r6
 801d0e6:	f2c0 80da 	blt.w	801d29e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d0ea:	3301      	adds	r3, #1
 801d0ec:	f100 80d7 	bmi.w	801d29e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d0f0:	429a      	cmp	r2, r3
 801d0f2:	f2c0 80d4 	blt.w	801d29e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d0f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d0f8:	9311      	str	r3, [sp, #68]	; 0x44
 801d0fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d0fc:	930c      	str	r3, [sp, #48]	; 0x30
 801d0fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d100:	2b00      	cmp	r3, #0
 801d102:	f340 80fd 	ble.w	801d300 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 801d106:	982e      	ldr	r0, [sp, #184]	; 0xb8
 801d108:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d10a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801d10c:	68c6      	ldr	r6, [r0, #12]
 801d10e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801d110:	141d      	asrs	r5, r3, #16
 801d112:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d116:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d118:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801d11a:	1400      	asrs	r0, r0, #16
 801d11c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801d120:	6892      	ldr	r2, [r2, #8]
 801d122:	f100 8141 	bmi.w	801d3a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801d126:	1e57      	subs	r7, r2, #1
 801d128:	42b8      	cmp	r0, r7
 801d12a:	f280 813d 	bge.w	801d3a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801d12e:	2d00      	cmp	r5, #0
 801d130:	f2c0 813a 	blt.w	801d3a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801d134:	1e77      	subs	r7, r6, #1
 801d136:	42bd      	cmp	r5, r7
 801d138:	f280 8136 	bge.w	801d3a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801d13c:	b212      	sxth	r2, r2
 801d13e:	fb05 0002 	mla	r0, r5, r2, r0
 801d142:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801d144:	f815 a000 	ldrb.w	sl, [r5, r0]
 801d148:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801d14c:	182e      	adds	r6, r5, r0
 801d14e:	eb04 050a 	add.w	r5, r4, sl
 801d152:	2b00      	cmp	r3, #0
 801d154:	f000 811a 	beq.w	801d38c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801d158:	f896 c001 	ldrb.w	ip, [r6, #1]
 801d15c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801d160:	44a4      	add	ip, r4
 801d162:	2900      	cmp	r1, #0
 801d164:	f000 811a 	beq.w	801d39c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801d168:	18b0      	adds	r0, r6, r2
 801d16a:	5cb2      	ldrb	r2, [r6, r2]
 801d16c:	7840      	ldrb	r0, [r0, #1]
 801d16e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d172:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d176:	4422      	add	r2, r4
 801d178:	4420      	add	r0, r4
 801d17a:	b29b      	uxth	r3, r3
 801d17c:	b289      	uxth	r1, r1
 801d17e:	fb03 f901 	mul.w	r9, r3, r1
 801d182:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d186:	011b      	lsls	r3, r3, #4
 801d188:	b289      	uxth	r1, r1
 801d18a:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801d18e:	f895 b002 	ldrb.w	fp, [r5, #2]
 801d192:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801d194:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801d198:	f8b6 e000 	ldrh.w	lr, [r6]
 801d19c:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801d1a0:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801d1a4:	eba3 0309 	sub.w	r3, r3, r9
 801d1a8:	b29b      	uxth	r3, r3
 801d1aa:	eba8 0801 	sub.w	r8, r8, r1
 801d1ae:	fa1f f888 	uxth.w	r8, r8
 801d1b2:	435f      	muls	r7, r3
 801d1b4:	fb08 770b 	mla	r7, r8, fp, r7
 801d1b8:	f892 b002 	ldrb.w	fp, [r2, #2]
 801d1bc:	9310      	str	r3, [sp, #64]	; 0x40
 801d1be:	fb01 770b 	mla	r7, r1, fp, r7
 801d1c2:	f890 b002 	ldrb.w	fp, [r0, #2]
 801d1c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d1c8:	fb09 770b 	mla	r7, r9, fp, r7
 801d1cc:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801d1d0:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801d1d4:	fb1b fb03 	smulbb	fp, fp, r3
 801d1d8:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801d1dc:	fb07 b706 	mla	r7, r7, r6, fp
 801d1e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d1e2:	f895 b001 	ldrb.w	fp, [r5, #1]
 801d1e6:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801d1ea:	f89c c000 	ldrb.w	ip, [ip]
 801d1ee:	435d      	muls	r5, r3
 801d1f0:	fb08 550b 	mla	r5, r8, fp, r5
 801d1f4:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d1f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d1fa:	fb01 550b 	mla	r5, r1, fp, r5
 801d1fe:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d202:	fb09 550b 	mla	r5, r9, fp, r5
 801d206:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801d20a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801d20e:	fb1b fb03 	smulbb	fp, fp, r3
 801d212:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d214:	fb03 f30c 	mul.w	r3, r3, ip
 801d218:	f892 c000 	ldrb.w	ip, [r2]
 801d21c:	fb08 330a 	mla	r3, r8, sl, r3
 801d220:	fb01 330c 	mla	r3, r1, ip, r3
 801d224:	f890 c000 	ldrb.w	ip, [r0]
 801d228:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d22c:	fb09 3c0c 	mla	ip, r9, ip, r3
 801d230:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d232:	fa5f fe8e 	uxtb.w	lr, lr
 801d236:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801d23a:	fb1e fe03 	smulbb	lr, lr, r3
 801d23e:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801d242:	fb05 b506 	mla	r5, r5, r6, fp
 801d246:	fb0c ee06 	mla	lr, ip, r6, lr
 801d24a:	b2bf      	uxth	r7, r7
 801d24c:	b2ad      	uxth	r5, r5
 801d24e:	fa1f fe8e 	uxth.w	lr, lr
 801d252:	1c7a      	adds	r2, r7, #1
 801d254:	f10e 0c01 	add.w	ip, lr, #1
 801d258:	f105 0b01 	add.w	fp, r5, #1
 801d25c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801d260:	eb0c 2e1e 	add.w	lr, ip, lr, lsr #8
 801d264:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801d268:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801d26c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801d270:	096d      	lsrs	r5, r5, #5
 801d272:	ea47 070e 	orr.w	r7, r7, lr
 801d276:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d27a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d27c:	433d      	orrs	r5, r7
 801d27e:	801d      	strh	r5, [r3, #0]
 801d280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d282:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d284:	3302      	adds	r3, #2
 801d286:	930c      	str	r3, [sp, #48]	; 0x30
 801d288:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d28a:	4413      	add	r3, r2
 801d28c:	9327      	str	r3, [sp, #156]	; 0x9c
 801d28e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801d290:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d292:	4413      	add	r3, r2
 801d294:	9328      	str	r3, [sp, #160]	; 0xa0
 801d296:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d298:	3b01      	subs	r3, #1
 801d29a:	9311      	str	r3, [sp, #68]	; 0x44
 801d29c:	e72f      	b.n	801d0fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801d29e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d2a0:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 801d2a2:	4433      	add	r3, r6
 801d2a4:	9327      	str	r3, [sp, #156]	; 0x9c
 801d2a6:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 801d2a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d2aa:	4433      	add	r3, r6
 801d2ac:	9328      	str	r3, [sp, #160]	; 0xa0
 801d2ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2b0:	3b01      	subs	r3, #1
 801d2b2:	9309      	str	r3, [sp, #36]	; 0x24
 801d2b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d2b6:	3302      	adds	r3, #2
 801d2b8:	930a      	str	r3, [sp, #40]	; 0x28
 801d2ba:	e6ff      	b.n	801d0bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d2bc:	d027      	beq.n	801d30e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ce>
 801d2be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2c0:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801d2c2:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 801d2c4:	3b01      	subs	r3, #1
 801d2c6:	fb00 5003 	mla	r0, r0, r3, r5
 801d2ca:	1400      	asrs	r0, r0, #16
 801d2cc:	f53f af13 	bmi.w	801d0f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801d2d0:	3901      	subs	r1, #1
 801d2d2:	4288      	cmp	r0, r1
 801d2d4:	f6bf af0f 	bge.w	801d0f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801d2d8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801d2da:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801d2dc:	fb01 0303 	mla	r3, r1, r3, r0
 801d2e0:	141b      	asrs	r3, r3, #16
 801d2e2:	f53f af08 	bmi.w	801d0f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801d2e6:	3a01      	subs	r2, #1
 801d2e8:	4293      	cmp	r3, r2
 801d2ea:	f6bf af04 	bge.w	801d0f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801d2ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2f0:	9311      	str	r3, [sp, #68]	; 0x44
 801d2f2:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 801d2f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d2f8:	930c      	str	r3, [sp, #48]	; 0x30
 801d2fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d2fc:	2b00      	cmp	r3, #0
 801d2fe:	dc70      	bgt.n	801d3e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 801d300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d302:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d304:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d308:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d30c:	930a      	str	r3, [sp, #40]	; 0x28
 801d30e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d310:	2b00      	cmp	r3, #0
 801d312:	f340 8124 	ble.w	801d55e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801d316:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801d31a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d31e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801d322:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d324:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801d328:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801d32c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801d330:	eef0 6a48 	vmov.f32	s13, s16
 801d334:	ee69 7a27 	vmul.f32	s15, s18, s15
 801d338:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d33c:	ee37 8a48 	vsub.f32	s16, s14, s16
 801d340:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801d344:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801d348:	eef0 6a68 	vmov.f32	s13, s17
 801d34c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801d350:	ee18 2a10 	vmov	r2, s16
 801d354:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801d358:	fb92 f3f3 	sdiv	r3, r2, r3
 801d35c:	ee18 2a90 	vmov	r2, s17
 801d360:	9329      	str	r3, [sp, #164]	; 0xa4
 801d362:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d364:	fb92 f3f3 	sdiv	r3, r2, r3
 801d368:	932a      	str	r3, [sp, #168]	; 0xa8
 801d36a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d36c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d36e:	3b01      	subs	r3, #1
 801d370:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d374:	930e      	str	r3, [sp, #56]	; 0x38
 801d376:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d378:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801d37c:	bf08      	it	eq
 801d37e:	4613      	moveq	r3, r2
 801d380:	9309      	str	r3, [sp, #36]	; 0x24
 801d382:	eef0 8a67 	vmov.f32	s17, s15
 801d386:	eeb0 8a47 	vmov.f32	s16, s14
 801d38a:	e689      	b.n	801d0a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d38c:	b149      	cbz	r1, 801d3a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801d38e:	5cb2      	ldrb	r2, [r6, r2]
 801d390:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d394:	4422      	add	r2, r4
 801d396:	4628      	mov	r0, r5
 801d398:	46ac      	mov	ip, r5
 801d39a:	e6ee      	b.n	801d17a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801d39c:	4628      	mov	r0, r5
 801d39e:	462a      	mov	r2, r5
 801d3a0:	e6eb      	b.n	801d17a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801d3a2:	4628      	mov	r0, r5
 801d3a4:	462a      	mov	r2, r5
 801d3a6:	e7f7      	b.n	801d398 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801d3a8:	1c47      	adds	r7, r0, #1
 801d3aa:	f53f af69 	bmi.w	801d280 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801d3ae:	42ba      	cmp	r2, r7
 801d3b0:	f6ff af66 	blt.w	801d280 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801d3b4:	1c6f      	adds	r7, r5, #1
 801d3b6:	f53f af63 	bmi.w	801d280 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801d3ba:	42be      	cmp	r6, r7
 801d3bc:	f6ff af60 	blt.w	801d280 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801d3c0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d3c2:	9002      	str	r0, [sp, #8]
 801d3c4:	b236      	sxth	r6, r6
 801d3c6:	b212      	sxth	r2, r2
 801d3c8:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801d3cc:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801d3d0:	9200      	str	r2, [sp, #0]
 801d3d2:	9601      	str	r6, [sp, #4]
 801d3d4:	4623      	mov	r3, r4
 801d3d6:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801d3da:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d3dc:	f7ff fd46 	bl	801ce6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801d3e0:	e74e      	b.n	801d280 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801d3e2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801d3e4:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801d3e6:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 801d3e8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d3ea:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d3ee:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801d3f0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801d3f4:	142d      	asrs	r5, r5, #16
 801d3f6:	1400      	asrs	r0, r0, #16
 801d3f8:	fb02 5000 	mla	r0, r2, r0, r5
 801d3fc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801d3fe:	f815 9000 	ldrb.w	r9, [r5, r0]
 801d402:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801d406:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801d40a:	182e      	adds	r6, r5, r0
 801d40c:	eb04 0509 	add.w	r5, r4, r9
 801d410:	2b00      	cmp	r3, #0
 801d412:	f000 8096 	beq.w	801d542 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x502>
 801d416:	7877      	ldrb	r7, [r6, #1]
 801d418:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d41c:	4427      	add	r7, r4
 801d41e:	2900      	cmp	r1, #0
 801d420:	f000 8097 	beq.w	801d552 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 801d424:	18b0      	adds	r0, r6, r2
 801d426:	5cb2      	ldrb	r2, [r6, r2]
 801d428:	7840      	ldrb	r0, [r0, #1]
 801d42a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d42e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d432:	4422      	add	r2, r4
 801d434:	4420      	add	r0, r4
 801d436:	b29b      	uxth	r3, r3
 801d438:	b289      	uxth	r1, r1
 801d43a:	fb03 f801 	mul.w	r8, r3, r1
 801d43e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801d440:	f895 b002 	ldrb.w	fp, [r5, #2]
 801d444:	f8b6 c000 	ldrh.w	ip, [r6]
 801d448:	78be      	ldrb	r6, [r7, #2]
 801d44a:	f814 9009 	ldrb.w	r9, [r4, r9]
 801d44e:	011b      	lsls	r3, r3, #4
 801d450:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801d454:	b289      	uxth	r1, r1
 801d456:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801d45a:	eba3 0308 	sub.w	r3, r3, r8
 801d45e:	b29b      	uxth	r3, r3
 801d460:	ebae 0e01 	sub.w	lr, lr, r1
 801d464:	fa1f fe8e 	uxth.w	lr, lr
 801d468:	435e      	muls	r6, r3
 801d46a:	fb0e 660b 	mla	r6, lr, fp, r6
 801d46e:	f892 b002 	ldrb.w	fp, [r2, #2]
 801d472:	9310      	str	r3, [sp, #64]	; 0x40
 801d474:	fb01 660b 	mla	r6, r1, fp, r6
 801d478:	f890 b002 	ldrb.w	fp, [r0, #2]
 801d47c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d47e:	fb08 660b 	mla	r6, r8, fp, r6
 801d482:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801d486:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801d48a:	fb1b fb03 	smulbb	fp, fp, r3
 801d48e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801d492:	fb06 b60a 	mla	r6, r6, sl, fp
 801d496:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d498:	f895 b001 	ldrb.w	fp, [r5, #1]
 801d49c:	787d      	ldrb	r5, [r7, #1]
 801d49e:	783f      	ldrb	r7, [r7, #0]
 801d4a0:	435d      	muls	r5, r3
 801d4a2:	fb0e 550b 	mla	r5, lr, fp, r5
 801d4a6:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d4aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d4ac:	fb01 550b 	mla	r5, r1, fp, r5
 801d4b0:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d4b4:	fb08 550b 	mla	r5, r8, fp, r5
 801d4b8:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801d4bc:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801d4c0:	fb1b fb03 	smulbb	fp, fp, r3
 801d4c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d4c6:	437b      	muls	r3, r7
 801d4c8:	7817      	ldrb	r7, [r2, #0]
 801d4ca:	fb0e 3309 	mla	r3, lr, r9, r3
 801d4ce:	fb01 3307 	mla	r3, r1, r7, r3
 801d4d2:	7807      	ldrb	r7, [r0, #0]
 801d4d4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d4d8:	fb08 3707 	mla	r7, r8, r7, r3
 801d4dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d4de:	fa5f fc8c 	uxtb.w	ip, ip
 801d4e2:	fb1c fc03 	smulbb	ip, ip, r3
 801d4e6:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801d4ea:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801d4ee:	fb05 b50a 	mla	r5, r5, sl, fp
 801d4f2:	fb07 c70a 	mla	r7, r7, sl, ip
 801d4f6:	b2b6      	uxth	r6, r6
 801d4f8:	b2ad      	uxth	r5, r5
 801d4fa:	b2bf      	uxth	r7, r7
 801d4fc:	1c73      	adds	r3, r6, #1
 801d4fe:	1c7a      	adds	r2, r7, #1
 801d500:	f105 0b01 	add.w	fp, r5, #1
 801d504:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801d508:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801d50c:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801d510:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d514:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801d518:	096d      	lsrs	r5, r5, #5
 801d51a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d51c:	4316      	orrs	r6, r2
 801d51e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d522:	432e      	orrs	r6, r5
 801d524:	f823 6b02 	strh.w	r6, [r3], #2
 801d528:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d52a:	930c      	str	r3, [sp, #48]	; 0x30
 801d52c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d52e:	4413      	add	r3, r2
 801d530:	9327      	str	r3, [sp, #156]	; 0x9c
 801d532:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801d534:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d536:	4413      	add	r3, r2
 801d538:	9328      	str	r3, [sp, #160]	; 0xa0
 801d53a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d53c:	3b01      	subs	r3, #1
 801d53e:	9311      	str	r3, [sp, #68]	; 0x44
 801d540:	e6db      	b.n	801d2fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801d542:	b149      	cbz	r1, 801d558 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 801d544:	5cb2      	ldrb	r2, [r6, r2]
 801d546:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d54a:	4422      	add	r2, r4
 801d54c:	4628      	mov	r0, r5
 801d54e:	462f      	mov	r7, r5
 801d550:	e771      	b.n	801d436 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 801d552:	4628      	mov	r0, r5
 801d554:	462a      	mov	r2, r5
 801d556:	e76e      	b.n	801d436 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 801d558:	4628      	mov	r0, r5
 801d55a:	462a      	mov	r2, r5
 801d55c:	e7f7      	b.n	801d54e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50e>
 801d55e:	b015      	add	sp, #84	; 0x54
 801d560:	ecbd 8b08 	vpop	{d8-d11}
 801d564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d568 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801d568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d56c:	880e      	ldrh	r6, [r1, #0]
 801d56e:	b085      	sub	sp, #20
 801d570:	0230      	lsls	r0, r6, #8
 801d572:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 801d576:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 801d57a:	0170      	lsls	r0, r6, #5
 801d57c:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801d580:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801d584:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801d588:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 801d58c:	00f6      	lsls	r6, r6, #3
 801d58e:	ea4b 0000 	orr.w	r0, fp, r0
 801d592:	b2f6      	uxtb	r6, r6
 801d594:	4691      	mov	r9, r2
 801d596:	fb05 7a0c 	mla	sl, r5, ip, r7
 801d59a:	4306      	orrs	r6, r0
 801d59c:	2d00      	cmp	r5, #0
 801d59e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 801d5a2:	9603      	str	r6, [sp, #12]
 801d5a4:	eb09 0e0a 	add.w	lr, r9, sl
 801d5a8:	db42      	blt.n	801d630 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 801d5aa:	45a8      	cmp	r8, r5
 801d5ac:	dd40      	ble.n	801d630 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 801d5ae:	2f00      	cmp	r7, #0
 801d5b0:	db3c      	blt.n	801d62c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 801d5b2:	45bc      	cmp	ip, r7
 801d5b4:	dd3a      	ble.n	801d62c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 801d5b6:	f819 600a 	ldrb.w	r6, [r9, sl]
 801d5ba:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d5be:	441e      	add	r6, r3
 801d5c0:	1c78      	adds	r0, r7, #1
 801d5c2:	d438      	bmi.n	801d636 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 801d5c4:	4584      	cmp	ip, r0
 801d5c6:	dd36      	ble.n	801d636 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 801d5c8:	b3aa      	cbz	r2, 801d636 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 801d5ca:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801d5ce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d5d2:	4418      	add	r0, r3
 801d5d4:	3501      	adds	r5, #1
 801d5d6:	d432      	bmi.n	801d63e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 801d5d8:	45a8      	cmp	r8, r5
 801d5da:	dd30      	ble.n	801d63e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 801d5dc:	b37c      	cbz	r4, 801d63e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 801d5de:	2f00      	cmp	r7, #0
 801d5e0:	db2b      	blt.n	801d63a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 801d5e2:	45bc      	cmp	ip, r7
 801d5e4:	dd29      	ble.n	801d63a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 801d5e6:	f81e 500c 	ldrb.w	r5, [lr, ip]
 801d5ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d5ee:	441d      	add	r5, r3
 801d5f0:	3701      	adds	r7, #1
 801d5f2:	d427      	bmi.n	801d644 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 801d5f4:	45bc      	cmp	ip, r7
 801d5f6:	dd25      	ble.n	801d644 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 801d5f8:	b322      	cbz	r2, 801d644 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 801d5fa:	44f4      	add	ip, lr
 801d5fc:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801d600:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d604:	443b      	add	r3, r7
 801d606:	781f      	ldrb	r7, [r3, #0]
 801d608:	f896 a000 	ldrb.w	sl, [r6]
 801d60c:	f890 b000 	ldrb.w	fp, [r0]
 801d610:	f895 9000 	ldrb.w	r9, [r5]
 801d614:	9700      	str	r7, [sp, #0]
 801d616:	2a0f      	cmp	r2, #15
 801d618:	d801      	bhi.n	801d61e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb6>
 801d61a:	2c0f      	cmp	r4, #15
 801d61c:	d914      	bls.n	801d648 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe0>
 801d61e:	4b2c      	ldr	r3, [pc, #176]	; (801d6d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x168>)
 801d620:	4a2c      	ldr	r2, [pc, #176]	; (801d6d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 801d622:	482d      	ldr	r0, [pc, #180]	; (801d6d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 801d624:	f240 210d 	movw	r1, #525	; 0x20d
 801d628:	f006 f88c 	bl	8023744 <__assert_func>
 801d62c:	ae03      	add	r6, sp, #12
 801d62e:	e7c7      	b.n	801d5c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x58>
 801d630:	a803      	add	r0, sp, #12
 801d632:	4606      	mov	r6, r0
 801d634:	e7ce      	b.n	801d5d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 801d636:	a803      	add	r0, sp, #12
 801d638:	e7cc      	b.n	801d5d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 801d63a:	ad03      	add	r5, sp, #12
 801d63c:	e7d8      	b.n	801d5f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x88>
 801d63e:	ab03      	add	r3, sp, #12
 801d640:	461d      	mov	r5, r3
 801d642:	e7e0      	b.n	801d606 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 801d644:	ab03      	add	r3, sp, #12
 801d646:	e7de      	b.n	801d606 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 801d648:	b292      	uxth	r2, r2
 801d64a:	b2a4      	uxth	r4, r4
 801d64c:	fb02 f804 	mul.w	r8, r2, r4
 801d650:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801d654:	0112      	lsls	r2, r2, #4
 801d656:	b2a4      	uxth	r4, r4
 801d658:	f890 e002 	ldrb.w	lr, [r0, #2]
 801d65c:	78b7      	ldrb	r7, [r6, #2]
 801d65e:	7840      	ldrb	r0, [r0, #1]
 801d660:	7876      	ldrb	r6, [r6, #1]
 801d662:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801d666:	eba2 0208 	sub.w	r2, r2, r8
 801d66a:	b292      	uxth	r2, r2
 801d66c:	ebac 0c04 	sub.w	ip, ip, r4
 801d670:	fa1f fc8c 	uxth.w	ip, ip
 801d674:	fb02 fe0e 	mul.w	lr, r2, lr
 801d678:	fb0c ee07 	mla	lr, ip, r7, lr
 801d67c:	78af      	ldrb	r7, [r5, #2]
 801d67e:	fb04 ee07 	mla	lr, r4, r7, lr
 801d682:	789f      	ldrb	r7, [r3, #2]
 801d684:	785b      	ldrb	r3, [r3, #1]
 801d686:	fb08 e707 	mla	r7, r8, r7, lr
 801d68a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801d68e:	fb02 fe0b 	mul.w	lr, r2, fp
 801d692:	4342      	muls	r2, r0
 801d694:	7868      	ldrb	r0, [r5, #1]
 801d696:	9701      	str	r7, [sp, #4]
 801d698:	fb0c ee0a 	mla	lr, ip, sl, lr
 801d69c:	9f00      	ldr	r7, [sp, #0]
 801d69e:	fb0c 2206 	mla	r2, ip, r6, r2
 801d6a2:	fb04 ee09 	mla	lr, r4, r9, lr
 801d6a6:	fb04 2400 	mla	r4, r4, r0, r2
 801d6aa:	fb08 ee07 	mla	lr, r8, r7, lr
 801d6ae:	9f01      	ldr	r7, [sp, #4]
 801d6b0:	fb08 4803 	mla	r8, r8, r3, r4
 801d6b4:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801d6b8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801d6bc:	ea47 070e 	orr.w	r7, r7, lr
 801d6c0:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801d6c4:	ea47 0708 	orr.w	r7, r7, r8
 801d6c8:	800f      	strh	r7, [r1, #0]
 801d6ca:	b005      	add	sp, #20
 801d6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6d0:	0802814e 	.word	0x0802814e
 801d6d4:	08028711 	.word	0x08028711
 801d6d8:	08028237 	.word	0x08028237

0801d6dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6e0:	ed2d 8b08 	vpush	{d8-d11}
 801d6e4:	b08f      	sub	sp, #60	; 0x3c
 801d6e6:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 801d6ea:	920c      	str	r2, [sp, #48]	; 0x30
 801d6ec:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801d6ee:	910a      	str	r1, [sp, #40]	; 0x28
 801d6f0:	9306      	str	r3, [sp, #24]
 801d6f2:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801d6f6:	900d      	str	r0, [sp, #52]	; 0x34
 801d6f8:	6850      	ldr	r0, [r2, #4]
 801d6fa:	6812      	ldr	r2, [r2, #0]
 801d6fc:	fb00 1303 	mla	r3, r0, r3, r1
 801d700:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d704:	9307      	str	r3, [sp, #28]
 801d706:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d708:	681b      	ldr	r3, [r3, #0]
 801d70a:	9308      	str	r3, [sp, #32]
 801d70c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d70e:	685c      	ldr	r4, [r3, #4]
 801d710:	eeb0 aa40 	vmov.f32	s20, s0
 801d714:	eef0 9a60 	vmov.f32	s19, s1
 801d718:	eeb0 9a41 	vmov.f32	s18, s2
 801d71c:	eeb0 8a62 	vmov.f32	s16, s5
 801d720:	eef0 8a43 	vmov.f32	s17, s6
 801d724:	eef0 ba44 	vmov.f32	s23, s8
 801d728:	eeb0 ba64 	vmov.f32	s22, s9
 801d72c:	eef0 aa45 	vmov.f32	s21, s10
 801d730:	3404      	adds	r4, #4
 801d732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d734:	2b00      	cmp	r3, #0
 801d736:	dc03      	bgt.n	801d740 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d73a:	2b00      	cmp	r3, #0
 801d73c:	f340 81d6 	ble.w	801daec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801d740:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d742:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d746:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d74a:	1e48      	subs	r0, r1, #1
 801d74c:	1e56      	subs	r6, r2, #1
 801d74e:	9b06      	ldr	r3, [sp, #24]
 801d750:	2b00      	cmp	r3, #0
 801d752:	f340 80b7 	ble.w	801d8c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d756:	ea5f 472b 	movs.w	r7, fp, asr #16
 801d75a:	ea4f 4325 	mov.w	r3, r5, asr #16
 801d75e:	d406      	bmi.n	801d76e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d760:	4287      	cmp	r7, r0
 801d762:	da04      	bge.n	801d76e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d764:	2b00      	cmp	r3, #0
 801d766:	db02      	blt.n	801d76e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d768:	42b3      	cmp	r3, r6
 801d76a:	f2c0 80ac 	blt.w	801d8c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d76e:	3701      	adds	r7, #1
 801d770:	f100 809d 	bmi.w	801d8ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801d774:	42b9      	cmp	r1, r7
 801d776:	f2c0 809a 	blt.w	801d8ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801d77a:	3301      	adds	r3, #1
 801d77c:	f100 8097 	bmi.w	801d8ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801d780:	429a      	cmp	r2, r3
 801d782:	f2c0 8094 	blt.w	801d8ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801d786:	9b06      	ldr	r3, [sp, #24]
 801d788:	930b      	str	r3, [sp, #44]	; 0x2c
 801d78a:	9b07      	ldr	r3, [sp, #28]
 801d78c:	9309      	str	r3, [sp, #36]	; 0x24
 801d78e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d790:	2b00      	cmp	r3, #0
 801d792:	f340 80b5 	ble.w	801d900 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801d796:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801d798:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801d79a:	68c7      	ldr	r7, [r0, #12]
 801d79c:	6892      	ldr	r2, [r2, #8]
 801d79e:	ea5f 402b 	movs.w	r0, fp, asr #16
 801d7a2:	ea4f 4625 	mov.w	r6, r5, asr #16
 801d7a6:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801d7aa:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d7ae:	f100 80fb 	bmi.w	801d9a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 801d7b2:	f102 3cff 	add.w	ip, r2, #4294967295
 801d7b6:	4560      	cmp	r0, ip
 801d7b8:	f280 80f6 	bge.w	801d9a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 801d7bc:	2e00      	cmp	r6, #0
 801d7be:	f2c0 80f3 	blt.w	801d9a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 801d7c2:	f107 3cff 	add.w	ip, r7, #4294967295
 801d7c6:	4566      	cmp	r6, ip
 801d7c8:	f280 80ee 	bge.w	801d9a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 801d7cc:	b212      	sxth	r2, r2
 801d7ce:	fb06 0002 	mla	r0, r6, r2, r0
 801d7d2:	9e08      	ldr	r6, [sp, #32]
 801d7d4:	1837      	adds	r7, r6, r0
 801d7d6:	5c30      	ldrb	r0, [r6, r0]
 801d7d8:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801d7dc:	eb04 0c08 	add.w	ip, r4, r8
 801d7e0:	2b00      	cmp	r3, #0
 801d7e2:	f000 80d3 	beq.w	801d98c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d7e6:	787e      	ldrb	r6, [r7, #1]
 801d7e8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d7ec:	4426      	add	r6, r4
 801d7ee:	2900      	cmp	r1, #0
 801d7f0:	f000 80d4 	beq.w	801d99c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 801d7f4:	18b8      	adds	r0, r7, r2
 801d7f6:	5cba      	ldrb	r2, [r7, r2]
 801d7f8:	7840      	ldrb	r0, [r0, #1]
 801d7fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d7fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d802:	4422      	add	r2, r4
 801d804:	4420      	add	r0, r4
 801d806:	b29b      	uxth	r3, r3
 801d808:	b289      	uxth	r1, r1
 801d80a:	fb03 f901 	mul.w	r9, r3, r1
 801d80e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d812:	011b      	lsls	r3, r3, #4
 801d814:	b289      	uxth	r1, r1
 801d816:	78b7      	ldrb	r7, [r6, #2]
 801d818:	f89c a002 	ldrb.w	sl, [ip, #2]
 801d81c:	f89c c001 	ldrb.w	ip, [ip, #1]
 801d820:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801d824:	eba3 0309 	sub.w	r3, r3, r9
 801d828:	b29b      	uxth	r3, r3
 801d82a:	ebae 0e01 	sub.w	lr, lr, r1
 801d82e:	fa1f fe8e 	uxth.w	lr, lr
 801d832:	435f      	muls	r7, r3
 801d834:	fb0e 770a 	mla	r7, lr, sl, r7
 801d838:	f892 a002 	ldrb.w	sl, [r2, #2]
 801d83c:	fb01 770a 	mla	r7, r1, sl, r7
 801d840:	f890 a002 	ldrb.w	sl, [r0, #2]
 801d844:	fb09 7a0a 	mla	sl, r9, sl, r7
 801d848:	f814 7008 	ldrb.w	r7, [r4, r8]
 801d84c:	f896 8000 	ldrb.w	r8, [r6]
 801d850:	7876      	ldrb	r6, [r6, #1]
 801d852:	fb03 f808 	mul.w	r8, r3, r8
 801d856:	fb0e 8807 	mla	r8, lr, r7, r8
 801d85a:	7817      	ldrb	r7, [r2, #0]
 801d85c:	fb01 8807 	mla	r8, r1, r7, r8
 801d860:	7807      	ldrb	r7, [r0, #0]
 801d862:	fb09 8707 	mla	r7, r9, r7, r8
 801d866:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801d86a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d86e:	ea4a 0707 	orr.w	r7, sl, r7
 801d872:	4373      	muls	r3, r6
 801d874:	f892 a001 	ldrb.w	sl, [r2, #1]
 801d878:	fb0e 330c 	mla	r3, lr, ip, r3
 801d87c:	fb01 310a 	mla	r1, r1, sl, r3
 801d880:	f890 a001 	ldrb.w	sl, [r0, #1]
 801d884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d886:	fb09 1a0a 	mla	sl, r9, sl, r1
 801d88a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d88e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d892:	ea47 070a 	orr.w	r7, r7, sl
 801d896:	801f      	strh	r7, [r3, #0]
 801d898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d89a:	3302      	adds	r3, #2
 801d89c:	9309      	str	r3, [sp, #36]	; 0x24
 801d89e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d8a0:	449b      	add	fp, r3
 801d8a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d8a4:	441d      	add	r5, r3
 801d8a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d8a8:	3b01      	subs	r3, #1
 801d8aa:	930b      	str	r3, [sp, #44]	; 0x2c
 801d8ac:	e76f      	b.n	801d78e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801d8ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d8b0:	449b      	add	fp, r3
 801d8b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d8b4:	441d      	add	r5, r3
 801d8b6:	9b06      	ldr	r3, [sp, #24]
 801d8b8:	3b01      	subs	r3, #1
 801d8ba:	9306      	str	r3, [sp, #24]
 801d8bc:	9b07      	ldr	r3, [sp, #28]
 801d8be:	3302      	adds	r3, #2
 801d8c0:	9307      	str	r3, [sp, #28]
 801d8c2:	e744      	b.n	801d74e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d8c4:	d023      	beq.n	801d90e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801d8c6:	9b06      	ldr	r3, [sp, #24]
 801d8c8:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801d8ca:	3b01      	subs	r3, #1
 801d8cc:	fb00 b003 	mla	r0, r0, r3, fp
 801d8d0:	1400      	asrs	r0, r0, #16
 801d8d2:	f53f af58 	bmi.w	801d786 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801d8d6:	3901      	subs	r1, #1
 801d8d8:	4288      	cmp	r0, r1
 801d8da:	f6bf af54 	bge.w	801d786 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801d8de:	9924      	ldr	r1, [sp, #144]	; 0x90
 801d8e0:	fb01 5303 	mla	r3, r1, r3, r5
 801d8e4:	141b      	asrs	r3, r3, #16
 801d8e6:	f53f af4e 	bmi.w	801d786 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801d8ea:	3a01      	subs	r2, #1
 801d8ec:	4293      	cmp	r3, r2
 801d8ee:	f6bf af4a 	bge.w	801d786 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801d8f2:	9b06      	ldr	r3, [sp, #24]
 801d8f4:	9309      	str	r3, [sp, #36]	; 0x24
 801d8f6:	9b07      	ldr	r3, [sp, #28]
 801d8f8:	930b      	str	r3, [sp, #44]	; 0x2c
 801d8fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d8fc:	2b00      	cmp	r3, #0
 801d8fe:	dc70      	bgt.n	801d9e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 801d900:	9b06      	ldr	r3, [sp, #24]
 801d902:	9a07      	ldr	r2, [sp, #28]
 801d904:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d908:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d90c:	9307      	str	r3, [sp, #28]
 801d90e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d910:	2b00      	cmp	r3, #0
 801d912:	f340 80eb 	ble.w	801daec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801d916:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801d91a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d91e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801d922:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d924:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801d928:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801d92c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801d930:	eef0 6a48 	vmov.f32	s13, s16
 801d934:	ee69 7a27 	vmul.f32	s15, s18, s15
 801d938:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d93c:	ee37 8a48 	vsub.f32	s16, s14, s16
 801d940:	ee16 ba90 	vmov	fp, s13
 801d944:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801d948:	eef0 6a68 	vmov.f32	s13, s17
 801d94c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801d950:	ee18 2a10 	vmov	r2, s16
 801d954:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801d958:	fb92 f3f3 	sdiv	r3, r2, r3
 801d95c:	ee18 2a90 	vmov	r2, s17
 801d960:	9323      	str	r3, [sp, #140]	; 0x8c
 801d962:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d964:	fb92 f3f3 	sdiv	r3, r2, r3
 801d968:	9324      	str	r3, [sp, #144]	; 0x90
 801d96a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d96c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d96e:	3b01      	subs	r3, #1
 801d970:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d974:	930a      	str	r3, [sp, #40]	; 0x28
 801d976:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d978:	bf08      	it	eq
 801d97a:	4613      	moveq	r3, r2
 801d97c:	ee16 5a90 	vmov	r5, s13
 801d980:	9306      	str	r3, [sp, #24]
 801d982:	eef0 8a67 	vmov.f32	s17, s15
 801d986:	eeb0 8a47 	vmov.f32	s16, s14
 801d98a:	e6d2      	b.n	801d732 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801d98c:	b149      	cbz	r1, 801d9a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801d98e:	5cba      	ldrb	r2, [r7, r2]
 801d990:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d994:	4422      	add	r2, r4
 801d996:	4660      	mov	r0, ip
 801d998:	4666      	mov	r6, ip
 801d99a:	e734      	b.n	801d806 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801d99c:	4660      	mov	r0, ip
 801d99e:	4662      	mov	r2, ip
 801d9a0:	e731      	b.n	801d806 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801d9a2:	4660      	mov	r0, ip
 801d9a4:	4662      	mov	r2, ip
 801d9a6:	e7f7      	b.n	801d998 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d9a8:	f110 0c01 	adds.w	ip, r0, #1
 801d9ac:	f53f af74 	bmi.w	801d898 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801d9b0:	4562      	cmp	r2, ip
 801d9b2:	f6ff af71 	blt.w	801d898 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801d9b6:	f116 0c01 	adds.w	ip, r6, #1
 801d9ba:	f53f af6d 	bmi.w	801d898 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801d9be:	4567      	cmp	r7, ip
 801d9c0:	f6ff af6a 	blt.w	801d898 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801d9c4:	b23f      	sxth	r7, r7
 801d9c6:	b212      	sxth	r2, r2
 801d9c8:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801d9cc:	e9cd 0602 	strd	r0, r6, [sp, #8]
 801d9d0:	9200      	str	r2, [sp, #0]
 801d9d2:	9701      	str	r7, [sp, #4]
 801d9d4:	4623      	mov	r3, r4
 801d9d6:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801d9da:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d9dc:	f7ff fdc4 	bl	801d568 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801d9e0:	e75a      	b.n	801d898 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801d9e2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801d9e4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801d9e8:	ea4f 462b 	mov.w	r6, fp, asr #16
 801d9ec:	1428      	asrs	r0, r5, #16
 801d9ee:	fb02 6000 	mla	r0, r2, r0, r6
 801d9f2:	9e08      	ldr	r6, [sp, #32]
 801d9f4:	f816 8000 	ldrb.w	r8, [r6, r0]
 801d9f8:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801d9fc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801da00:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801da04:	1837      	adds	r7, r6, r0
 801da06:	eb04 0c08 	add.w	ip, r4, r8
 801da0a:	2b00      	cmp	r3, #0
 801da0c:	d060      	beq.n	801dad0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 801da0e:	787e      	ldrb	r6, [r7, #1]
 801da10:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801da14:	4426      	add	r6, r4
 801da16:	2900      	cmp	r1, #0
 801da18:	d062      	beq.n	801dae0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801da1a:	18b8      	adds	r0, r7, r2
 801da1c:	5cba      	ldrb	r2, [r7, r2]
 801da1e:	7840      	ldrb	r0, [r0, #1]
 801da20:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801da24:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801da28:	4422      	add	r2, r4
 801da2a:	4420      	add	r0, r4
 801da2c:	b29b      	uxth	r3, r3
 801da2e:	b289      	uxth	r1, r1
 801da30:	fb03 f901 	mul.w	r9, r3, r1
 801da34:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801da38:	011b      	lsls	r3, r3, #4
 801da3a:	b289      	uxth	r1, r1
 801da3c:	78b7      	ldrb	r7, [r6, #2]
 801da3e:	f89c a002 	ldrb.w	sl, [ip, #2]
 801da42:	f89c c001 	ldrb.w	ip, [ip, #1]
 801da46:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801da4a:	eba3 0309 	sub.w	r3, r3, r9
 801da4e:	b29b      	uxth	r3, r3
 801da50:	ebae 0e01 	sub.w	lr, lr, r1
 801da54:	fa1f fe8e 	uxth.w	lr, lr
 801da58:	435f      	muls	r7, r3
 801da5a:	fb0e 770a 	mla	r7, lr, sl, r7
 801da5e:	f892 a002 	ldrb.w	sl, [r2, #2]
 801da62:	fb01 770a 	mla	r7, r1, sl, r7
 801da66:	f890 a002 	ldrb.w	sl, [r0, #2]
 801da6a:	fb09 7a0a 	mla	sl, r9, sl, r7
 801da6e:	f814 7008 	ldrb.w	r7, [r4, r8]
 801da72:	f896 8000 	ldrb.w	r8, [r6]
 801da76:	7876      	ldrb	r6, [r6, #1]
 801da78:	fb03 f808 	mul.w	r8, r3, r8
 801da7c:	fb0e 8807 	mla	r8, lr, r7, r8
 801da80:	7817      	ldrb	r7, [r2, #0]
 801da82:	fb01 8807 	mla	r8, r1, r7, r8
 801da86:	7807      	ldrb	r7, [r0, #0]
 801da88:	fb09 8707 	mla	r7, r9, r7, r8
 801da8c:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801da90:	4373      	muls	r3, r6
 801da92:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801da96:	7856      	ldrb	r6, [r2, #1]
 801da98:	ea4a 0707 	orr.w	r7, sl, r7
 801da9c:	fb0e 330c 	mla	r3, lr, ip, r3
 801daa0:	f890 a001 	ldrb.w	sl, [r0, #1]
 801daa4:	fb01 3306 	mla	r3, r1, r6, r3
 801daa8:	fb09 3a0a 	mla	sl, r9, sl, r3
 801daac:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801dab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dab2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801dab6:	ea47 070a 	orr.w	r7, r7, sl
 801daba:	f823 7b02 	strh.w	r7, [r3], #2
 801dabe:	930b      	str	r3, [sp, #44]	; 0x2c
 801dac0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801dac2:	449b      	add	fp, r3
 801dac4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801dac6:	441d      	add	r5, r3
 801dac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801daca:	3b01      	subs	r3, #1
 801dacc:	9309      	str	r3, [sp, #36]	; 0x24
 801dace:	e714      	b.n	801d8fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801dad0:	b149      	cbz	r1, 801dae6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801dad2:	5cba      	ldrb	r2, [r7, r2]
 801dad4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dad8:	4422      	add	r2, r4
 801dada:	4660      	mov	r0, ip
 801dadc:	4666      	mov	r6, ip
 801dade:	e7a5      	b.n	801da2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801dae0:	4660      	mov	r0, ip
 801dae2:	4662      	mov	r2, ip
 801dae4:	e7a2      	b.n	801da2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801dae6:	4660      	mov	r0, ip
 801dae8:	4662      	mov	r2, ip
 801daea:	e7f7      	b.n	801dadc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801daec:	b00f      	add	sp, #60	; 0x3c
 801daee:	ecbd 8b08 	vpop	{d8-d11}
 801daf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801daf8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801daf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dafc:	880e      	ldrh	r6, [r1, #0]
 801dafe:	b085      	sub	sp, #20
 801db00:	ea4f 2e26 	mov.w	lr, r6, asr #8
 801db04:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801db08:	4691      	mov	r9, r2
 801db0a:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801db0e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801db12:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801db16:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801db1a:	f00e 02f8 	and.w	r2, lr, #248	; 0xf8
 801db1e:	ea4f 0ee6 	mov.w	lr, r6, asr #3
 801db22:	9200      	str	r2, [sp, #0]
 801db24:	00f6      	lsls	r6, r6, #3
 801db26:	f00e 02fc 	and.w	r2, lr, #252	; 0xfc
 801db2a:	9201      	str	r2, [sp, #4]
 801db2c:	2c00      	cmp	r4, #0
 801db2e:	b2f2      	uxtb	r2, r6
 801db30:	fb04 560c 	mla	r6, r4, ip, r5
 801db34:	9202      	str	r2, [sp, #8]
 801db36:	eb09 0e06 	add.w	lr, r9, r6
 801db3a:	db3e      	blt.n	801dbba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 801db3c:	45a0      	cmp	r8, r4
 801db3e:	dd3c      	ble.n	801dbba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 801db40:	2d00      	cmp	r5, #0
 801db42:	db38      	blt.n	801dbb6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 801db44:	45ac      	cmp	ip, r5
 801db46:	dd36      	ble.n	801dbb6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 801db48:	f819 2006 	ldrb.w	r2, [r9, r6]
 801db4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801db50:	1c6e      	adds	r6, r5, #1
 801db52:	d435      	bmi.n	801dbc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc8>
 801db54:	45b4      	cmp	ip, r6
 801db56:	dd33      	ble.n	801dbc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc8>
 801db58:	b3a0      	cbz	r0, 801dbc4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 801db5a:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801db5e:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 801db62:	3401      	adds	r4, #1
 801db64:	d432      	bmi.n	801dbcc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd4>
 801db66:	45a0      	cmp	r8, r4
 801db68:	dd30      	ble.n	801dbcc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd4>
 801db6a:	b397      	cbz	r7, 801dbd2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 801db6c:	2d00      	cmp	r5, #0
 801db6e:	db2b      	blt.n	801dbc8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 801db70:	45ac      	cmp	ip, r5
 801db72:	dd29      	ble.n	801dbc8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 801db74:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801db78:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 801db7c:	3501      	adds	r5, #1
 801db7e:	d42b      	bmi.n	801dbd8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe0>
 801db80:	45ac      	cmp	ip, r5
 801db82:	dd29      	ble.n	801dbd8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe0>
 801db84:	b350      	cbz	r0, 801dbdc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe4>
 801db86:	44f4      	add	ip, lr
 801db88:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801db8c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801db90:	280f      	cmp	r0, #15
 801db92:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801db96:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801db9a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801db9e:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801dba2:	d801      	bhi.n	801dba8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb0>
 801dba4:	2f0f      	cmp	r7, #15
 801dba6:	d91b      	bls.n	801dbe0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe8>
 801dba8:	4b84      	ldr	r3, [pc, #528]	; (801ddbc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 801dbaa:	4a85      	ldr	r2, [pc, #532]	; (801ddc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 801dbac:	4885      	ldr	r0, [pc, #532]	; (801ddc4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 801dbae:	f240 210d 	movw	r1, #525	; 0x20d
 801dbb2:	f005 fdc7 	bl	8023744 <__assert_func>
 801dbb6:	2200      	movs	r2, #0
 801dbb8:	e7ca      	b.n	801db50 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x58>
 801dbba:	2600      	movs	r6, #0
 801dbbc:	4632      	mov	r2, r6
 801dbbe:	e7d0      	b.n	801db62 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 801dbc0:	2600      	movs	r6, #0
 801dbc2:	e7ce      	b.n	801db62 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 801dbc4:	4606      	mov	r6, r0
 801dbc6:	e7cc      	b.n	801db62 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 801dbc8:	2400      	movs	r4, #0
 801dbca:	e7d7      	b.n	801db7c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x84>
 801dbcc:	2300      	movs	r3, #0
 801dbce:	461c      	mov	r4, r3
 801dbd0:	e7de      	b.n	801db90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 801dbd2:	463b      	mov	r3, r7
 801dbd4:	463c      	mov	r4, r7
 801dbd6:	e7db      	b.n	801db90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 801dbd8:	2300      	movs	r3, #0
 801dbda:	e7d9      	b.n	801db90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 801dbdc:	4603      	mov	r3, r0
 801dbde:	e7d7      	b.n	801db90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 801dbe0:	b280      	uxth	r0, r0
 801dbe2:	b2bf      	uxth	r7, r7
 801dbe4:	fb00 fe07 	mul.w	lr, r0, r7
 801dbe8:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801dbec:	0100      	lsls	r0, r0, #4
 801dbee:	eba0 0c0e 	sub.w	ip, r0, lr
 801dbf2:	b2bf      	uxth	r7, r7
 801dbf4:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 801dbf8:	fa1f fc8c 	uxth.w	ip, ip
 801dbfc:	1bed      	subs	r5, r5, r7
 801dbfe:	b2ad      	uxth	r5, r5
 801dc00:	fb0c f00a 	mul.w	r0, ip, sl
 801dc04:	fb05 000b 	mla	r0, r5, fp, r0
 801dc08:	fb07 0009 	mla	r0, r7, r9, r0
 801dc0c:	fb0e 0008 	mla	r0, lr, r8, r0
 801dc10:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801dc14:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801dc18:	9003      	str	r0, [sp, #12]
 801dc1a:	d018      	beq.n	801dc4e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x156>
 801dc1c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801dc20:	fb0b f000 	mul.w	r0, fp, r0
 801dc24:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801dc28:	fb0b fb02 	mul.w	fp, fp, r2
 801dc2c:	0a02      	lsrs	r2, r0, #8
 801dc2e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801dc32:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801dc36:	4402      	add	r2, r0
 801dc38:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801dc3c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801dc40:	0a12      	lsrs	r2, r2, #8
 801dc42:	0a00      	lsrs	r0, r0, #8
 801dc44:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801dc48:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801dc4c:	4302      	orrs	r2, r0
 801dc4e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801dc52:	d019      	beq.n	801dc88 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x190>
 801dc54:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801dc58:	fb0a fb0b 	mul.w	fp, sl, fp
 801dc5c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801dc60:	fb0a fa06 	mul.w	sl, sl, r6
 801dc64:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801dc68:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801dc6c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801dc70:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801dc74:	445e      	add	r6, fp
 801dc76:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801dc7a:	0a36      	lsrs	r6, r6, #8
 801dc7c:	0a00      	lsrs	r0, r0, #8
 801dc7e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801dc82:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801dc86:	4306      	orrs	r6, r0
 801dc88:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801dc8c:	d019      	beq.n	801dcc2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1ca>
 801dc8e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801dc92:	fb09 fa0a 	mul.w	sl, r9, sl
 801dc96:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801dc9a:	fb09 f904 	mul.w	r9, r9, r4
 801dc9e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801dca2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801dca6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801dcaa:	f509 7080 	add.w	r0, r9, #256	; 0x100
 801dcae:	4454      	add	r4, sl
 801dcb0:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 801dcb4:	0a24      	lsrs	r4, r4, #8
 801dcb6:	0a00      	lsrs	r0, r0, #8
 801dcb8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801dcbc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801dcc0:	4304      	orrs	r4, r0
 801dcc2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801dcc6:	d019      	beq.n	801dcfc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x204>
 801dcc8:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801dccc:	fb08 f909 	mul.w	r9, r8, r9
 801dcd0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dcd4:	fb08 f803 	mul.w	r8, r8, r3
 801dcd8:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801dcdc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dce0:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801dce4:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801dce8:	444b      	add	r3, r9
 801dcea:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801dcee:	0a1b      	lsrs	r3, r3, #8
 801dcf0:	0a00      	lsrs	r0, r0, #8
 801dcf2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dcf6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801dcfa:	4303      	orrs	r3, r0
 801dcfc:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801dd00:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801dd04:	fb0c f808 	mul.w	r8, ip, r8
 801dd08:	fb05 8800 	mla	r8, r5, r0, r8
 801dd0c:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 801dd10:	fb07 8800 	mla	r8, r7, r0, r8
 801dd14:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 801dd18:	fb0e 8000 	mla	r0, lr, r0, r8
 801dd1c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801dd20:	fb0c f606 	mul.w	r6, ip, r6
 801dd24:	0a00      	lsrs	r0, r0, #8
 801dd26:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801dd2a:	fb05 6202 	mla	r2, r5, r2, r6
 801dd2e:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 801dd32:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 801dd36:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 801dd3a:	fb07 2700 	mla	r7, r7, r0, r2
 801dd3e:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 801dd42:	9b03      	ldr	r3, [sp, #12]
 801dd44:	9c00      	ldr	r4, [sp, #0]
 801dd46:	b2ad      	uxth	r5, r5
 801dd48:	436b      	muls	r3, r5
 801dd4a:	fb0e 7000 	mla	r0, lr, r0, r7
 801dd4e:	1c5a      	adds	r2, r3, #1
 801dd50:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801dd54:	0a00      	lsrs	r0, r0, #8
 801dd56:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801dd5a:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801dd5e:	ea48 0000 	orr.w	r0, r8, r0
 801dd62:	b2d2      	uxtb	r2, r2
 801dd64:	fb14 f602 	smulbb	r6, r4, r2
 801dd68:	0c03      	lsrs	r3, r0, #16
 801dd6a:	fb03 6305 	mla	r3, r3, r5, r6
 801dd6e:	b29e      	uxth	r6, r3
 801dd70:	9b01      	ldr	r3, [sp, #4]
 801dd72:	f3c0 2407 	ubfx	r4, r0, #8, #8
 801dd76:	fb13 f302 	smulbb	r3, r3, r2
 801dd7a:	fb04 3405 	mla	r4, r4, r5, r3
 801dd7e:	9b02      	ldr	r3, [sp, #8]
 801dd80:	b2c0      	uxtb	r0, r0
 801dd82:	fb13 f202 	smulbb	r2, r3, r2
 801dd86:	fb00 2005 	mla	r0, r0, r5, r2
 801dd8a:	b280      	uxth	r0, r0
 801dd8c:	b2a4      	uxth	r4, r4
 801dd8e:	1c42      	adds	r2, r0, #1
 801dd90:	1c73      	adds	r3, r6, #1
 801dd92:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801dd96:	1c62      	adds	r2, r4, #1
 801dd98:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 801dd9c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801dda0:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801dda4:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801dda8:	0952      	lsrs	r2, r2, #5
 801ddaa:	4303      	orrs	r3, r0
 801ddac:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ddb0:	4313      	orrs	r3, r2
 801ddb2:	800b      	strh	r3, [r1, #0]
 801ddb4:	b005      	add	sp, #20
 801ddb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddba:	bf00      	nop
 801ddbc:	0802814e 	.word	0x0802814e
 801ddc0:	08028711 	.word	0x08028711
 801ddc4:	08028237 	.word	0x08028237

0801ddc8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ddc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddcc:	ed2d 8b08 	vpush	{d8-d11}
 801ddd0:	b09f      	sub	sp, #124	; 0x7c
 801ddd2:	eeb0 aa40 	vmov.f32	s20, s0
 801ddd6:	921b      	str	r2, [sp, #108]	; 0x6c
 801ddd8:	9309      	str	r3, [sp, #36]	; 0x24
 801ddda:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801dddc:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 801dde0:	931c      	str	r3, [sp, #112]	; 0x70
 801dde2:	9119      	str	r1, [sp, #100]	; 0x64
 801dde4:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 801dde8:	901d      	str	r0, [sp, #116]	; 0x74
 801ddea:	6850      	ldr	r0, [r2, #4]
 801ddec:	6812      	ldr	r2, [r2, #0]
 801ddee:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 801ddf0:	fb00 1303 	mla	r3, r0, r3, r1
 801ddf4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801ddf8:	930c      	str	r3, [sp, #48]	; 0x30
 801ddfa:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801ddfc:	681b      	ldr	r3, [r3, #0]
 801ddfe:	9312      	str	r3, [sp, #72]	; 0x48
 801de00:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801de02:	685e      	ldr	r6, [r3, #4]
 801de04:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801de08:	930d      	str	r3, [sp, #52]	; 0x34
 801de0a:	eef0 9a60 	vmov.f32	s19, s1
 801de0e:	eeb0 9a41 	vmov.f32	s18, s2
 801de12:	eeb0 8a62 	vmov.f32	s16, s5
 801de16:	eef0 8a43 	vmov.f32	s17, s6
 801de1a:	eef0 ba44 	vmov.f32	s23, s8
 801de1e:	eeb0 ba64 	vmov.f32	s22, s9
 801de22:	eef0 aa45 	vmov.f32	s21, s10
 801de26:	3604      	adds	r6, #4
 801de28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801de2a:	2b00      	cmp	r3, #0
 801de2c:	dc03      	bgt.n	801de36 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801de2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801de30:	2b00      	cmp	r3, #0
 801de32:	f340 838e 	ble.w	801e552 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78a>
 801de36:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801de38:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801de3c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801de40:	1e48      	subs	r0, r1, #1
 801de42:	1e57      	subs	r7, r2, #1
 801de44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de46:	2b00      	cmp	r3, #0
 801de48:	f340 819b 	ble.w	801e182 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801de4c:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801de4e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801de52:	ea4f 4325 	mov.w	r3, r5, asr #16
 801de56:	d406      	bmi.n	801de66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801de58:	4584      	cmp	ip, r0
 801de5a:	da04      	bge.n	801de66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801de5c:	2b00      	cmp	r3, #0
 801de5e:	db02      	blt.n	801de66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801de60:	42bb      	cmp	r3, r7
 801de62:	f2c0 818f 	blt.w	801e184 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 801de66:	f11c 0c01 	adds.w	ip, ip, #1
 801de6a:	f100 817d 	bmi.w	801e168 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 801de6e:	4561      	cmp	r1, ip
 801de70:	f2c0 817a 	blt.w	801e168 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 801de74:	3301      	adds	r3, #1
 801de76:	f100 8177 	bmi.w	801e168 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 801de7a:	429a      	cmp	r2, r3
 801de7c:	f2c0 8174 	blt.w	801e168 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 801de80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de82:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801de84:	931a      	str	r3, [sp, #104]	; 0x68
 801de86:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801de88:	2b00      	cmp	r3, #0
 801de8a:	f340 8199 	ble.w	801e1c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 801de8e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801de90:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801de94:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801de96:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801de9a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801de9c:	141b      	asrs	r3, r3, #16
 801de9e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801dea2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801dea6:	f100 81dc 	bmi.w	801e262 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 801deaa:	f100 38ff 	add.w	r8, r0, #4294967295
 801deae:	4543      	cmp	r3, r8
 801deb0:	f280 81d7 	bge.w	801e262 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 801deb4:	f1bc 0f00 	cmp.w	ip, #0
 801deb8:	f2c0 81d3 	blt.w	801e262 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 801debc:	f10e 38ff 	add.w	r8, lr, #4294967295
 801dec0:	45c4      	cmp	ip, r8
 801dec2:	f280 81ce 	bge.w	801e262 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 801dec6:	b200      	sxth	r0, r0
 801dec8:	fb0c 3300 	mla	r3, ip, r0, r3
 801decc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801dece:	eb04 0803 	add.w	r8, r4, r3
 801ded2:	5ce3      	ldrb	r3, [r4, r3]
 801ded4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ded8:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801dedc:	2a00      	cmp	r2, #0
 801dede:	f000 81b5 	beq.w	801e24c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 801dee2:	f898 c001 	ldrb.w	ip, [r8, #1]
 801dee6:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801deea:	940e      	str	r4, [sp, #56]	; 0x38
 801deec:	0e24      	lsrs	r4, r4, #24
 801deee:	9415      	str	r4, [sp, #84]	; 0x54
 801def0:	b179      	cbz	r1, 801df12 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801def2:	eb08 0c00 	add.w	ip, r8, r0
 801def6:	f818 0000 	ldrb.w	r0, [r8, r0]
 801defa:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801defe:	900a      	str	r0, [sp, #40]	; 0x28
 801df00:	0e00      	lsrs	r0, r0, #24
 801df02:	9013      	str	r0, [sp, #76]	; 0x4c
 801df04:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801df08:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801df0c:	900f      	str	r0, [sp, #60]	; 0x3c
 801df0e:	0e00      	lsrs	r0, r0, #24
 801df10:	9016      	str	r0, [sp, #88]	; 0x58
 801df12:	b292      	uxth	r2, r2
 801df14:	b289      	uxth	r1, r1
 801df16:	fb02 f901 	mul.w	r9, r2, r1
 801df1a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801df1e:	0112      	lsls	r2, r2, #4
 801df20:	eba2 0809 	sub.w	r8, r2, r9
 801df24:	b289      	uxth	r1, r1
 801df26:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801df2a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801df2c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801df2e:	fa1f f888 	uxth.w	r8, r8
 801df32:	1a52      	subs	r2, r2, r1
 801df34:	b292      	uxth	r2, r2
 801df36:	fb08 f000 	mul.w	r0, r8, r0
 801df3a:	fb02 000e 	mla	r0, r2, lr, r0
 801df3e:	fb01 0004 	mla	r0, r1, r4, r0
 801df42:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801df44:	fb09 0004 	mla	r0, r9, r4, r0
 801df48:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801df4c:	2800      	cmp	r0, #0
 801df4e:	f000 8100 	beq.w	801e152 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801df52:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801df56:	d01b      	beq.n	801df90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801df58:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801df5c:	fb0e fa0a 	mul.w	sl, lr, sl
 801df60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801df64:	fb0e fe03 	mul.w	lr, lr, r3
 801df68:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801df6c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801df70:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801df74:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801df78:	4453      	add	r3, sl
 801df7a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801df7e:	0a1b      	lsrs	r3, r3, #8
 801df80:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801df84:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801df88:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801df8c:	ea43 030c 	orr.w	r3, r3, ip
 801df90:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801df92:	2cff      	cmp	r4, #255	; 0xff
 801df94:	d021      	beq.n	801dfda <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801df96:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801df98:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801df9c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801df9e:	fb04 fb0b 	mul.w	fp, r4, fp
 801dfa2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801dfa4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801dfa8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801dfaa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dfae:	fb04 fa0a 	mul.w	sl, r4, sl
 801dfb2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dfb6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801dfba:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801dfbe:	44de      	add	lr, fp
 801dfc0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dfc4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dfc8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dfcc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dfd0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dfd4:	ea4e 040a 	orr.w	r4, lr, sl
 801dfd8:	940e      	str	r4, [sp, #56]	; 0x38
 801dfda:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dfdc:	2cff      	cmp	r4, #255	; 0xff
 801dfde:	d021      	beq.n	801e024 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 801dfe0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801dfe2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801dfe6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dfe8:	fb04 fb0b 	mul.w	fp, r4, fp
 801dfec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801dfee:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801dff2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dff4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dff8:	fb04 fa0a 	mul.w	sl, r4, sl
 801dffc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e000:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e004:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e008:	44de      	add	lr, fp
 801e00a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e00e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e012:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e016:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e01a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e01e:	ea4e 040a 	orr.w	r4, lr, sl
 801e022:	940a      	str	r4, [sp, #40]	; 0x28
 801e024:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801e026:	2cff      	cmp	r4, #255	; 0xff
 801e028:	d021      	beq.n	801e06e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801e02a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e02c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e030:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801e032:	fb04 fb0b 	mul.w	fp, r4, fp
 801e036:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e038:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e03c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801e03e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e042:	fb04 fa0a 	mul.w	sl, r4, sl
 801e046:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e04a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e04e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e052:	44de      	add	lr, fp
 801e054:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e058:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e05c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e060:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e064:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e068:	ea4e 040a 	orr.w	r4, lr, sl
 801e06c:	940f      	str	r4, [sp, #60]	; 0x3c
 801e06e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e070:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e074:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e076:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801e07a:	fb08 fc0c 	mul.w	ip, r8, ip
 801e07e:	fb02 cc0e 	mla	ip, r2, lr, ip
 801e082:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801e086:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e088:	fb01 cc0e 	mla	ip, r1, lr, ip
 801e08c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801e090:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e092:	fb09 cc0e 	mla	ip, r9, lr, ip
 801e096:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801e09a:	fb08 f80e 	mul.w	r8, r8, lr
 801e09e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e0a2:	fb02 8303 	mla	r3, r2, r3, r8
 801e0a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e0a8:	f8b7 e000 	ldrh.w	lr, [r7]
 801e0ac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e0ae:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801e0b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e0b4:	fb01 330a 	mla	r3, r1, sl, r3
 801e0b8:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801e0bc:	fb09 3901 	mla	r9, r9, r1, r3
 801e0c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e0c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e0c4:	4343      	muls	r3, r0
 801e0c6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e0ca:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e0ce:	1c58      	adds	r0, r3, #1
 801e0d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e0d4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801e0d8:	ea4c 0c09 	orr.w	ip, ip, r9
 801e0dc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801e0e0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 801e0e4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801e0e8:	ea4f 232e 	mov.w	r3, lr, asr #8
 801e0ec:	b2c0      	uxtb	r0, r0
 801e0ee:	fb11 f102 	smulbb	r1, r1, r2
 801e0f2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801e0f6:	fb03 1300 	mla	r3, r3, r0, r1
 801e0fa:	b299      	uxth	r1, r3
 801e0fc:	ea4f 02ee 	mov.w	r2, lr, asr #3
 801e100:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801e104:	fb13 f304 	smulbb	r3, r3, r4
 801e108:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801e10c:	fb02 3200 	mla	r2, r2, r0, r3
 801e110:	fa5f fc8c 	uxtb.w	ip, ip
 801e114:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 801e118:	b2db      	uxtb	r3, r3
 801e11a:	fb1c fc04 	smulbb	ip, ip, r4
 801e11e:	fb03 cc00 	mla	ip, r3, r0, ip
 801e122:	b292      	uxth	r2, r2
 801e124:	fa1f fc8c 	uxth.w	ip, ip
 801e128:	1c4b      	adds	r3, r1, #1
 801e12a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e12e:	f10c 0001 	add.w	r0, ip, #1
 801e132:	1c51      	adds	r1, r2, #1
 801e134:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 801e138:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801e13c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801e140:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801e144:	0952      	lsrs	r2, r2, #5
 801e146:	ea43 030c 	orr.w	r3, r3, ip
 801e14a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e14e:	4313      	orrs	r3, r2
 801e150:	803b      	strh	r3, [r7, #0]
 801e152:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801e154:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801e156:	441a      	add	r2, r3
 801e158:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801e15a:	9231      	str	r2, [sp, #196]	; 0xc4
 801e15c:	441d      	add	r5, r3
 801e15e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801e160:	3b01      	subs	r3, #1
 801e162:	3702      	adds	r7, #2
 801e164:	931a      	str	r3, [sp, #104]	; 0x68
 801e166:	e68e      	b.n	801de86 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801e168:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801e16a:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801e16c:	441c      	add	r4, r3
 801e16e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801e170:	9431      	str	r4, [sp, #196]	; 0xc4
 801e172:	441d      	add	r5, r3
 801e174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e176:	3b01      	subs	r3, #1
 801e178:	9309      	str	r3, [sp, #36]	; 0x24
 801e17a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e17c:	3302      	adds	r3, #2
 801e17e:	930c      	str	r3, [sp, #48]	; 0x30
 801e180:	e660      	b.n	801de44 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e182:	d024      	beq.n	801e1ce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x406>
 801e184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e186:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801e188:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801e18a:	3b01      	subs	r3, #1
 801e18c:	fb00 4003 	mla	r0, r0, r3, r4
 801e190:	1400      	asrs	r0, r0, #16
 801e192:	f53f ae75 	bmi.w	801de80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801e196:	3901      	subs	r1, #1
 801e198:	4288      	cmp	r0, r1
 801e19a:	f6bf ae71 	bge.w	801de80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801e19e:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801e1a0:	fb01 5303 	mla	r3, r1, r3, r5
 801e1a4:	141b      	asrs	r3, r3, #16
 801e1a6:	f53f ae6b 	bmi.w	801de80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801e1aa:	3a01      	subs	r2, #1
 801e1ac:	4293      	cmp	r3, r2
 801e1ae:	f6bf ae67 	bge.w	801de80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801e1b2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801e1b6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801e1ba:	f1bb 0f00 	cmp.w	fp, #0
 801e1be:	dc70      	bgt.n	801e2a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801e1c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e1c2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e1c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e1c8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801e1cc:	930c      	str	r3, [sp, #48]	; 0x30
 801e1ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e1d0:	2b00      	cmp	r3, #0
 801e1d2:	f340 81be 	ble.w	801e552 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78a>
 801e1d6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801e1da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e1de:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801e1e2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e1e4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801e1e8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801e1ec:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801e1f0:	eef0 6a48 	vmov.f32	s13, s16
 801e1f4:	ee69 7a27 	vmul.f32	s15, s18, s15
 801e1f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e1fc:	ee37 8a48 	vsub.f32	s16, s14, s16
 801e200:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 801e204:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801e208:	eef0 6a68 	vmov.f32	s13, s17
 801e20c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801e210:	ee18 2a10 	vmov	r2, s16
 801e214:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801e218:	fb92 f3f3 	sdiv	r3, r2, r3
 801e21c:	ee18 2a90 	vmov	r2, s17
 801e220:	9333      	str	r3, [sp, #204]	; 0xcc
 801e222:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e224:	fb92 f3f3 	sdiv	r3, r2, r3
 801e228:	9334      	str	r3, [sp, #208]	; 0xd0
 801e22a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e22c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801e22e:	3b01      	subs	r3, #1
 801e230:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e234:	9319      	str	r3, [sp, #100]	; 0x64
 801e236:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e238:	bf08      	it	eq
 801e23a:	4613      	moveq	r3, r2
 801e23c:	ee16 5a90 	vmov	r5, s13
 801e240:	9309      	str	r3, [sp, #36]	; 0x24
 801e242:	eef0 8a67 	vmov.f32	s17, s15
 801e246:	eeb0 8a47 	vmov.f32	s16, s14
 801e24a:	e5ed      	b.n	801de28 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e24c:	2900      	cmp	r1, #0
 801e24e:	f43f ae60 	beq.w	801df12 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801e252:	f818 0000 	ldrb.w	r0, [r8, r0]
 801e256:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801e25a:	900a      	str	r0, [sp, #40]	; 0x28
 801e25c:	0e00      	lsrs	r0, r0, #24
 801e25e:	9013      	str	r0, [sp, #76]	; 0x4c
 801e260:	e657      	b.n	801df12 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801e262:	f113 0801 	adds.w	r8, r3, #1
 801e266:	f53f af74 	bmi.w	801e152 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801e26a:	4540      	cmp	r0, r8
 801e26c:	f6ff af71 	blt.w	801e152 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801e270:	f11c 0801 	adds.w	r8, ip, #1
 801e274:	f53f af6d 	bmi.w	801e152 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801e278:	45c6      	cmp	lr, r8
 801e27a:	f6ff af6a 	blt.w	801e152 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801e27e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801e280:	9302      	str	r3, [sp, #8]
 801e282:	b200      	sxth	r0, r0
 801e284:	fa0f f38e 	sxth.w	r3, lr
 801e288:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801e28c:	e9cd c203 	strd	ip, r2, [sp, #12]
 801e290:	9301      	str	r3, [sp, #4]
 801e292:	9000      	str	r0, [sp, #0]
 801e294:	4633      	mov	r3, r6
 801e296:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e298:	981d      	ldr	r0, [sp, #116]	; 0x74
 801e29a:	4639      	mov	r1, r7
 801e29c:	f7ff fc2c 	bl	801daf8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 801e2a0:	e757      	b.n	801e152 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801e2a2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801e2a4:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801e2a6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e2aa:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801e2ac:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e2b0:	1427      	asrs	r7, r4, #16
 801e2b2:	142b      	asrs	r3, r5, #16
 801e2b4:	fb01 7303 	mla	r3, r1, r3, r7
 801e2b8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e2ba:	18e7      	adds	r7, r4, r3
 801e2bc:	5ce3      	ldrb	r3, [r4, r3]
 801e2be:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e2c2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e2c6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e2ca:	2a00      	cmp	r2, #0
 801e2cc:	f000 8137 	beq.w	801e53e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x776>
 801e2d0:	f897 e001 	ldrb.w	lr, [r7, #1]
 801e2d4:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801e2d8:	9410      	str	r4, [sp, #64]	; 0x40
 801e2da:	0e24      	lsrs	r4, r4, #24
 801e2dc:	9417      	str	r4, [sp, #92]	; 0x5c
 801e2de:	b170      	cbz	r0, 801e2fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x536>
 801e2e0:	eb07 0e01 	add.w	lr, r7, r1
 801e2e4:	5c79      	ldrb	r1, [r7, r1]
 801e2e6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e2ea:	910b      	str	r1, [sp, #44]	; 0x2c
 801e2ec:	0e09      	lsrs	r1, r1, #24
 801e2ee:	9114      	str	r1, [sp, #80]	; 0x50
 801e2f0:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801e2f4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e2f8:	9111      	str	r1, [sp, #68]	; 0x44
 801e2fa:	0e09      	lsrs	r1, r1, #24
 801e2fc:	9118      	str	r1, [sp, #96]	; 0x60
 801e2fe:	b292      	uxth	r2, r2
 801e300:	b280      	uxth	r0, r0
 801e302:	fb02 f800 	mul.w	r8, r2, r0
 801e306:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801e30a:	0112      	lsls	r2, r2, #4
 801e30c:	eba2 0e08 	sub.w	lr, r2, r8
 801e310:	b280      	uxth	r0, r0
 801e312:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801e316:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801e318:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e31a:	fa1f fe8e 	uxth.w	lr, lr
 801e31e:	1a12      	subs	r2, r2, r0
 801e320:	b292      	uxth	r2, r2
 801e322:	fb0e f101 	mul.w	r1, lr, r1
 801e326:	fb02 110c 	mla	r1, r2, ip, r1
 801e32a:	fb00 1104 	mla	r1, r0, r4, r1
 801e32e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801e330:	fb08 1104 	mla	r1, r8, r4, r1
 801e334:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e338:	2900      	cmp	r1, #0
 801e33a:	f000 80f5 	beq.w	801e528 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 801e33e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e342:	d019      	beq.n	801e378 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b0>
 801e344:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801e348:	fb0c fa0a 	mul.w	sl, ip, sl
 801e34c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e350:	fb0c fc03 	mul.w	ip, ip, r3
 801e354:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e358:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e35c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e360:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801e364:	4453      	add	r3, sl
 801e366:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e36a:	0a1b      	lsrs	r3, r3, #8
 801e36c:	0a3f      	lsrs	r7, r7, #8
 801e36e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e372:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e376:	433b      	orrs	r3, r7
 801e378:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801e37a:	2cff      	cmp	r4, #255	; 0xff
 801e37c:	d020      	beq.n	801e3c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f8>
 801e37e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e380:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e384:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801e386:	4367      	muls	r7, r4
 801e388:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e38a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e38e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801e390:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e394:	fb04 fa0a 	mul.w	sl, r4, sl
 801e398:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e39c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e3a0:	44bc      	add	ip, r7
 801e3a2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e3a6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e3aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e3ae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e3b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e3b6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e3ba:	ea4c 040a 	orr.w	r4, ip, sl
 801e3be:	9410      	str	r4, [sp, #64]	; 0x40
 801e3c0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e3c2:	2cff      	cmp	r4, #255	; 0xff
 801e3c4:	d020      	beq.n	801e408 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 801e3c6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e3c8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e3cc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e3ce:	4367      	muls	r7, r4
 801e3d0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e3d2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e3d6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e3d8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e3dc:	fb04 fa0a 	mul.w	sl, r4, sl
 801e3e0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e3e4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e3e8:	44bc      	add	ip, r7
 801e3ea:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e3ee:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e3f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e3f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e3fa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e3fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e402:	ea4c 040a 	orr.w	r4, ip, sl
 801e406:	940b      	str	r4, [sp, #44]	; 0x2c
 801e408:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801e40a:	2cff      	cmp	r4, #255	; 0xff
 801e40c:	d020      	beq.n	801e450 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 801e40e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e410:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e414:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801e416:	4367      	muls	r7, r4
 801e418:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e41a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e41e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801e420:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e424:	fb04 fa0a 	mul.w	sl, r4, sl
 801e428:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e42c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e430:	44bc      	add	ip, r7
 801e432:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e436:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e43a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e43e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e442:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e446:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e44a:	ea4c 040a 	orr.w	r4, ip, sl
 801e44e:	9411      	str	r4, [sp, #68]	; 0x44
 801e450:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e452:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e456:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e458:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801e45c:	fb0e f707 	mul.w	r7, lr, r7
 801e460:	fb02 770c 	mla	r7, r2, ip, r7
 801e464:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e468:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e46a:	fb00 770c 	mla	r7, r0, ip, r7
 801e46e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e472:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e474:	fb08 770c 	mla	r7, r8, ip, r7
 801e478:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801e47c:	fb0e fe0c 	mul.w	lr, lr, ip
 801e480:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e484:	fb02 e303 	mla	r3, r2, r3, lr
 801e488:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e48a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e48c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801e490:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e492:	fb00 330a 	mla	r3, r0, sl, r3
 801e496:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801e49a:	fb08 3c0c 	mla	ip, r8, ip, r3
 801e49e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e4a0:	f8b9 0000 	ldrh.w	r0, [r9]
 801e4a4:	434b      	muls	r3, r1
 801e4a6:	0a3f      	lsrs	r7, r7, #8
 801e4a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e4ac:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e4b0:	1c59      	adds	r1, r3, #1
 801e4b2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e4b6:	ea47 070c 	orr.w	r7, r7, ip
 801e4ba:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e4be:	1202      	asrs	r2, r0, #8
 801e4c0:	0c3b      	lsrs	r3, r7, #16
 801e4c2:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801e4c6:	b2c9      	uxtb	r1, r1
 801e4c8:	fb13 f304 	smulbb	r3, r3, r4
 801e4cc:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801e4d0:	fb02 3201 	mla	r2, r2, r1, r3
 801e4d4:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 801e4d8:	10c3      	asrs	r3, r0, #3
 801e4da:	b2ff      	uxtb	r7, r7
 801e4dc:	00c0      	lsls	r0, r0, #3
 801e4de:	b292      	uxth	r2, r2
 801e4e0:	fb1c fc04 	smulbb	ip, ip, r4
 801e4e4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801e4e8:	b2c0      	uxtb	r0, r0
 801e4ea:	fb17 f704 	smulbb	r7, r7, r4
 801e4ee:	fb03 c301 	mla	r3, r3, r1, ip
 801e4f2:	fb00 7001 	mla	r0, r0, r1, r7
 801e4f6:	f102 0c01 	add.w	ip, r2, #1
 801e4fa:	b280      	uxth	r0, r0
 801e4fc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e500:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 801e504:	1c42      	adds	r2, r0, #1
 801e506:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e50a:	b29b      	uxth	r3, r3
 801e50c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801e510:	ea4c 0200 	orr.w	r2, ip, r0
 801e514:	f103 0c01 	add.w	ip, r3, #1
 801e518:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801e51c:	095b      	lsrs	r3, r3, #5
 801e51e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e522:	431a      	orrs	r2, r3
 801e524:	f8a9 2000 	strh.w	r2, [r9]
 801e528:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801e52a:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801e52c:	441a      	add	r2, r3
 801e52e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801e530:	9231      	str	r2, [sp, #196]	; 0xc4
 801e532:	f109 0902 	add.w	r9, r9, #2
 801e536:	441d      	add	r5, r3
 801e538:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e53c:	e63d      	b.n	801e1ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801e53e:	2800      	cmp	r0, #0
 801e540:	f43f aedd 	beq.w	801e2fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x536>
 801e544:	5c79      	ldrb	r1, [r7, r1]
 801e546:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e54a:	910b      	str	r1, [sp, #44]	; 0x2c
 801e54c:	0e09      	lsrs	r1, r1, #24
 801e54e:	9114      	str	r1, [sp, #80]	; 0x50
 801e550:	e6d5      	b.n	801e2fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x536>
 801e552:	b01f      	add	sp, #124	; 0x7c
 801e554:	ecbd 8b08 	vpop	{d8-d11}
 801e558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e55c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 801e55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e560:	880e      	ldrh	r6, [r1, #0]
 801e562:	b085      	sub	sp, #20
 801e564:	ea4f 2e26 	mov.w	lr, r6, asr #8
 801e568:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801e56c:	4691      	mov	r9, r2
 801e56e:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801e572:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801e576:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801e57a:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801e57e:	f00e 02f8 	and.w	r2, lr, #248	; 0xf8
 801e582:	ea4f 0ee6 	mov.w	lr, r6, asr #3
 801e586:	9200      	str	r2, [sp, #0]
 801e588:	00f6      	lsls	r6, r6, #3
 801e58a:	f00e 02fc 	and.w	r2, lr, #252	; 0xfc
 801e58e:	9201      	str	r2, [sp, #4]
 801e590:	2c00      	cmp	r4, #0
 801e592:	b2f2      	uxtb	r2, r6
 801e594:	fb04 560c 	mla	r6, r4, ip, r5
 801e598:	9202      	str	r2, [sp, #8]
 801e59a:	eb09 0e06 	add.w	lr, r9, r6
 801e59e:	db3e      	blt.n	801e61e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc2>
 801e5a0:	45a0      	cmp	r8, r4
 801e5a2:	dd3c      	ble.n	801e61e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc2>
 801e5a4:	2d00      	cmp	r5, #0
 801e5a6:	db38      	blt.n	801e61a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 801e5a8:	45ac      	cmp	ip, r5
 801e5aa:	dd36      	ble.n	801e61a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 801e5ac:	f819 2006 	ldrb.w	r2, [r9, r6]
 801e5b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801e5b4:	1c6e      	adds	r6, r5, #1
 801e5b6:	d435      	bmi.n	801e624 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc8>
 801e5b8:	45b4      	cmp	ip, r6
 801e5ba:	dd33      	ble.n	801e624 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc8>
 801e5bc:	b3a0      	cbz	r0, 801e628 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 801e5be:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801e5c2:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 801e5c6:	3401      	adds	r4, #1
 801e5c8:	d432      	bmi.n	801e630 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd4>
 801e5ca:	45a0      	cmp	r8, r4
 801e5cc:	dd30      	ble.n	801e630 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd4>
 801e5ce:	b397      	cbz	r7, 801e636 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 801e5d0:	2d00      	cmp	r5, #0
 801e5d2:	db2b      	blt.n	801e62c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 801e5d4:	45ac      	cmp	ip, r5
 801e5d6:	dd29      	ble.n	801e62c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 801e5d8:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801e5dc:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 801e5e0:	3501      	adds	r5, #1
 801e5e2:	d42b      	bmi.n	801e63c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe0>
 801e5e4:	45ac      	cmp	ip, r5
 801e5e6:	dd29      	ble.n	801e63c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe0>
 801e5e8:	b350      	cbz	r0, 801e640 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe4>
 801e5ea:	44f4      	add	ip, lr
 801e5ec:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801e5f0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801e5f4:	280f      	cmp	r0, #15
 801e5f6:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801e5fa:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801e5fe:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801e602:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801e606:	d801      	bhi.n	801e60c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb0>
 801e608:	2f0f      	cmp	r7, #15
 801e60a:	d91b      	bls.n	801e644 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe8>
 801e60c:	4b7d      	ldr	r3, [pc, #500]	; (801e804 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a8>)
 801e60e:	4a7e      	ldr	r2, [pc, #504]	; (801e808 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 801e610:	487e      	ldr	r0, [pc, #504]	; (801e80c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 801e612:	f240 210d 	movw	r1, #525	; 0x20d
 801e616:	f005 f895 	bl	8023744 <__assert_func>
 801e61a:	2200      	movs	r2, #0
 801e61c:	e7ca      	b.n	801e5b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 801e61e:	2600      	movs	r6, #0
 801e620:	4632      	mov	r2, r6
 801e622:	e7d0      	b.n	801e5c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 801e624:	2600      	movs	r6, #0
 801e626:	e7ce      	b.n	801e5c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 801e628:	4606      	mov	r6, r0
 801e62a:	e7cc      	b.n	801e5c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 801e62c:	2400      	movs	r4, #0
 801e62e:	e7d7      	b.n	801e5e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x84>
 801e630:	2300      	movs	r3, #0
 801e632:	461c      	mov	r4, r3
 801e634:	e7de      	b.n	801e5f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 801e636:	463b      	mov	r3, r7
 801e638:	463c      	mov	r4, r7
 801e63a:	e7db      	b.n	801e5f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 801e63c:	2300      	movs	r3, #0
 801e63e:	e7d9      	b.n	801e5f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 801e640:	4603      	mov	r3, r0
 801e642:	e7d7      	b.n	801e5f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 801e644:	b280      	uxth	r0, r0
 801e646:	b2bf      	uxth	r7, r7
 801e648:	fb00 fe07 	mul.w	lr, r0, r7
 801e64c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801e650:	0100      	lsls	r0, r0, #4
 801e652:	eba0 0c0e 	sub.w	ip, r0, lr
 801e656:	b2bf      	uxth	r7, r7
 801e658:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 801e65c:	fa1f fc8c 	uxth.w	ip, ip
 801e660:	1bed      	subs	r5, r5, r7
 801e662:	b2ad      	uxth	r5, r5
 801e664:	fb0c f00a 	mul.w	r0, ip, sl
 801e668:	fb05 000b 	mla	r0, r5, fp, r0
 801e66c:	fb07 0009 	mla	r0, r7, r9, r0
 801e670:	fb0e 0008 	mla	r0, lr, r8, r0
 801e674:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e678:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801e67c:	9003      	str	r0, [sp, #12]
 801e67e:	d018      	beq.n	801e6b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x156>
 801e680:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801e684:	fb0b f000 	mul.w	r0, fp, r0
 801e688:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e68c:	fb0b fb02 	mul.w	fp, fp, r2
 801e690:	0a02      	lsrs	r2, r0, #8
 801e692:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801e696:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801e69a:	4402      	add	r2, r0
 801e69c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801e6a0:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801e6a4:	0a12      	lsrs	r2, r2, #8
 801e6a6:	0a00      	lsrs	r0, r0, #8
 801e6a8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801e6ac:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e6b0:	4302      	orrs	r2, r0
 801e6b2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e6b6:	d019      	beq.n	801e6ec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x190>
 801e6b8:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801e6bc:	fb0a fb0b 	mul.w	fp, sl, fp
 801e6c0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e6c4:	fb0a fa06 	mul.w	sl, sl, r6
 801e6c8:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801e6cc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e6d0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e6d4:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801e6d8:	445e      	add	r6, fp
 801e6da:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801e6de:	0a36      	lsrs	r6, r6, #8
 801e6e0:	0a00      	lsrs	r0, r0, #8
 801e6e2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e6e6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e6ea:	4306      	orrs	r6, r0
 801e6ec:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e6f0:	d019      	beq.n	801e726 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1ca>
 801e6f2:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801e6f6:	fb09 fa0a 	mul.w	sl, r9, sl
 801e6fa:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801e6fe:	fb09 f904 	mul.w	r9, r9, r4
 801e702:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801e706:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801e70a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e70e:	f509 7080 	add.w	r0, r9, #256	; 0x100
 801e712:	4454      	add	r4, sl
 801e714:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 801e718:	0a24      	lsrs	r4, r4, #8
 801e71a:	0a00      	lsrs	r0, r0, #8
 801e71c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801e720:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e724:	4304      	orrs	r4, r0
 801e726:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e72a:	d019      	beq.n	801e760 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x204>
 801e72c:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801e730:	fb08 f909 	mul.w	r9, r8, r9
 801e734:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e738:	fb08 f803 	mul.w	r8, r8, r3
 801e73c:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801e740:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e744:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801e748:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801e74c:	444b      	add	r3, r9
 801e74e:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801e752:	0a1b      	lsrs	r3, r3, #8
 801e754:	0a00      	lsrs	r0, r0, #8
 801e756:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e75a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e75e:	4303      	orrs	r3, r0
 801e760:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801e764:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801e768:	fb0c f808 	mul.w	r8, ip, r8
 801e76c:	fb05 8800 	mla	r8, r5, r0, r8
 801e770:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 801e774:	fb07 8800 	mla	r8, r7, r0, r8
 801e778:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 801e77c:	fb0e 8000 	mla	r0, lr, r0, r8
 801e780:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e784:	0a00      	lsrs	r0, r0, #8
 801e786:	fb0c f606 	mul.w	r6, ip, r6
 801e78a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e78e:	fb05 6202 	mla	r2, r5, r2, r6
 801e792:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 801e796:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 801e79a:	fb07 2700 	mla	r7, r7, r0, r2
 801e79e:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 801e7a2:	9b03      	ldr	r3, [sp, #12]
 801e7a4:	9c02      	ldr	r4, [sp, #8]
 801e7a6:	9d01      	ldr	r5, [sp, #4]
 801e7a8:	fb0e 7000 	mla	r0, lr, r0, r7
 801e7ac:	43da      	mvns	r2, r3
 801e7ae:	9b00      	ldr	r3, [sp, #0]
 801e7b0:	b2d2      	uxtb	r2, r2
 801e7b2:	0a00      	lsrs	r0, r0, #8
 801e7b4:	4353      	muls	r3, r2
 801e7b6:	4354      	muls	r4, r2
 801e7b8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e7bc:	ea48 0000 	orr.w	r0, r8, r0
 801e7c0:	4355      	muls	r5, r2
 801e7c2:	4622      	mov	r2, r4
 801e7c4:	1c5c      	adds	r4, r3, #1
 801e7c6:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 801e7ca:	0c03      	lsrs	r3, r0, #16
 801e7cc:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801e7d0:	4b0f      	ldr	r3, [pc, #60]	; (801e810 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 801e7d2:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 801e7d6:	1c54      	adds	r4, r2, #1
 801e7d8:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801e7dc:	b2c2      	uxtb	r2, r0
 801e7de:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801e7e2:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 801e7e6:	1c6a      	adds	r2, r5, #1
 801e7e8:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 801e7ec:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e7f0:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801e7f4:	00c0      	lsls	r0, r0, #3
 801e7f6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e7fa:	4318      	orrs	r0, r3
 801e7fc:	8008      	strh	r0, [r1, #0]
 801e7fe:	b005      	add	sp, #20
 801e800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e804:	0802814e 	.word	0x0802814e
 801e808:	08028711 	.word	0x08028711
 801e80c:	08028237 	.word	0x08028237
 801e810:	fffff800 	.word	0xfffff800

0801e814 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e818:	ed2d 8b08 	vpush	{d8-d11}
 801e81c:	b09b      	sub	sp, #108	; 0x6c
 801e81e:	eeb0 aa40 	vmov.f32	s20, s0
 801e822:	9218      	str	r2, [sp, #96]	; 0x60
 801e824:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801e826:	9116      	str	r1, [sp, #88]	; 0x58
 801e828:	9307      	str	r3, [sp, #28]
 801e82a:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801e82e:	9019      	str	r0, [sp, #100]	; 0x64
 801e830:	6850      	ldr	r0, [r2, #4]
 801e832:	6812      	ldr	r2, [r2, #0]
 801e834:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 801e836:	fb00 1303 	mla	r3, r0, r3, r1
 801e83a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e83e:	930a      	str	r3, [sp, #40]	; 0x28
 801e840:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801e842:	681b      	ldr	r3, [r3, #0]
 801e844:	930f      	str	r3, [sp, #60]	; 0x3c
 801e846:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801e848:	685e      	ldr	r6, [r3, #4]
 801e84a:	eef0 9a60 	vmov.f32	s19, s1
 801e84e:	eeb0 9a41 	vmov.f32	s18, s2
 801e852:	eeb0 8a62 	vmov.f32	s16, s5
 801e856:	eef0 8a43 	vmov.f32	s17, s6
 801e85a:	eef0 ba44 	vmov.f32	s23, s8
 801e85e:	eeb0 ba64 	vmov.f32	s22, s9
 801e862:	eef0 aa45 	vmov.f32	s21, s10
 801e866:	3604      	adds	r6, #4
 801e868:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e86a:	2b00      	cmp	r3, #0
 801e86c:	dc03      	bgt.n	801e876 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e86e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e870:	2b00      	cmp	r3, #0
 801e872:	f340 8371 	ble.w	801ef58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 801e876:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801e878:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e87c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e880:	1e48      	subs	r0, r1, #1
 801e882:	1e57      	subs	r7, r2, #1
 801e884:	9b07      	ldr	r3, [sp, #28]
 801e886:	2b00      	cmp	r3, #0
 801e888:	f340 8189 	ble.w	801eb9e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801e88c:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 801e88e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801e892:	ea4f 4325 	mov.w	r3, r5, asr #16
 801e896:	d406      	bmi.n	801e8a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e898:	4584      	cmp	ip, r0
 801e89a:	da04      	bge.n	801e8a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e89c:	2b00      	cmp	r3, #0
 801e89e:	db02      	blt.n	801e8a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e8a0:	42bb      	cmp	r3, r7
 801e8a2:	f2c0 817d 	blt.w	801eba0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 801e8a6:	f11c 0c01 	adds.w	ip, ip, #1
 801e8aa:	f100 816b 	bmi.w	801eb84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801e8ae:	4561      	cmp	r1, ip
 801e8b0:	f2c0 8168 	blt.w	801eb84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801e8b4:	3301      	adds	r3, #1
 801e8b6:	f100 8165 	bmi.w	801eb84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801e8ba:	429a      	cmp	r2, r3
 801e8bc:	f2c0 8162 	blt.w	801eb84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801e8c0:	9b07      	ldr	r3, [sp, #28]
 801e8c2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801e8c4:	9317      	str	r3, [sp, #92]	; 0x5c
 801e8c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e8c8:	2b00      	cmp	r3, #0
 801e8ca:	f340 8187 	ble.w	801ebdc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 801e8ce:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801e8d0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e8d4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801e8d6:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801e8da:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801e8dc:	141b      	asrs	r3, r3, #16
 801e8de:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801e8e2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e8e6:	f100 81ca 	bmi.w	801ec7e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 801e8ea:	f101 38ff 	add.w	r8, r1, #4294967295
 801e8ee:	4543      	cmp	r3, r8
 801e8f0:	f280 81c5 	bge.w	801ec7e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 801e8f4:	f1bc 0f00 	cmp.w	ip, #0
 801e8f8:	f2c0 81c1 	blt.w	801ec7e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 801e8fc:	f10e 38ff 	add.w	r8, lr, #4294967295
 801e900:	45c4      	cmp	ip, r8
 801e902:	f280 81bc 	bge.w	801ec7e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 801e906:	b209      	sxth	r1, r1
 801e908:	fb0c 3301 	mla	r3, ip, r1, r3
 801e90c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e90e:	eb04 0803 	add.w	r8, r4, r3
 801e912:	5ce3      	ldrb	r3, [r4, r3]
 801e914:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e918:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801e91c:	2a00      	cmp	r2, #0
 801e91e:	f000 81a3 	beq.w	801ec68 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 801e922:	f898 c001 	ldrb.w	ip, [r8, #1]
 801e926:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801e92a:	940b      	str	r4, [sp, #44]	; 0x2c
 801e92c:	0e24      	lsrs	r4, r4, #24
 801e92e:	9412      	str	r4, [sp, #72]	; 0x48
 801e930:	b178      	cbz	r0, 801e952 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e932:	eb08 0c01 	add.w	ip, r8, r1
 801e936:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e93a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e93e:	9108      	str	r1, [sp, #32]
 801e940:	0e09      	lsrs	r1, r1, #24
 801e942:	9110      	str	r1, [sp, #64]	; 0x40
 801e944:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801e948:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e94c:	910c      	str	r1, [sp, #48]	; 0x30
 801e94e:	0e09      	lsrs	r1, r1, #24
 801e950:	9113      	str	r1, [sp, #76]	; 0x4c
 801e952:	b292      	uxth	r2, r2
 801e954:	b280      	uxth	r0, r0
 801e956:	fb02 f900 	mul.w	r9, r2, r0
 801e95a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e95e:	0112      	lsls	r2, r2, #4
 801e960:	eba2 0809 	sub.w	r8, r2, r9
 801e964:	b280      	uxth	r0, r0
 801e966:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801e96a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e96c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e96e:	fa1f f888 	uxth.w	r8, r8
 801e972:	1a12      	subs	r2, r2, r0
 801e974:	b292      	uxth	r2, r2
 801e976:	fb08 f101 	mul.w	r1, r8, r1
 801e97a:	fb02 110e 	mla	r1, r2, lr, r1
 801e97e:	fb00 1104 	mla	r1, r0, r4, r1
 801e982:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e984:	fb09 1104 	mla	r1, r9, r4, r1
 801e988:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e98c:	2900      	cmp	r1, #0
 801e98e:	f000 80ee 	beq.w	801eb6e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 801e992:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801e996:	d01b      	beq.n	801e9d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801e998:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801e99c:	fb0e fa0a 	mul.w	sl, lr, sl
 801e9a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e9a4:	fb0e fe03 	mul.w	lr, lr, r3
 801e9a8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e9ac:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e9b0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e9b4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801e9b8:	4453      	add	r3, sl
 801e9ba:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801e9be:	0a1b      	lsrs	r3, r3, #8
 801e9c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e9c4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e9c8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e9cc:	ea43 030c 	orr.w	r3, r3, ip
 801e9d0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e9d2:	2cff      	cmp	r4, #255	; 0xff
 801e9d4:	d021      	beq.n	801ea1a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e9d6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e9d8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e9dc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e9de:	fb04 fb0b 	mul.w	fp, r4, fp
 801e9e2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e9e4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e9e8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e9ea:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e9ee:	fb04 fa0a 	mul.w	sl, r4, sl
 801e9f2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e9f6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e9fa:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e9fe:	44de      	add	lr, fp
 801ea00:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ea04:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ea08:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ea0c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ea10:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ea14:	ea4e 040a 	orr.w	r4, lr, sl
 801ea18:	940b      	str	r4, [sp, #44]	; 0x2c
 801ea1a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ea1c:	2cff      	cmp	r4, #255	; 0xff
 801ea1e:	d021      	beq.n	801ea64 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801ea20:	9c08      	ldr	r4, [sp, #32]
 801ea22:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801ea26:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ea28:	fb04 fb0b 	mul.w	fp, r4, fp
 801ea2c:	9c08      	ldr	r4, [sp, #32]
 801ea2e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ea32:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ea34:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ea38:	fb04 fa0a 	mul.w	sl, r4, sl
 801ea3c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ea40:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ea44:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ea48:	44de      	add	lr, fp
 801ea4a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ea4e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ea52:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ea56:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ea5a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ea5e:	ea4e 040a 	orr.w	r4, lr, sl
 801ea62:	9408      	str	r4, [sp, #32]
 801ea64:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ea66:	2cff      	cmp	r4, #255	; 0xff
 801ea68:	d021      	beq.n	801eaae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ea6a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ea6c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801ea70:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ea72:	fb04 fb0b 	mul.w	fp, r4, fp
 801ea76:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ea78:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ea7c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ea7e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ea82:	fb04 fa0a 	mul.w	sl, r4, sl
 801ea86:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ea8a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ea8e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ea92:	44de      	add	lr, fp
 801ea94:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ea98:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ea9c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801eaa0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801eaa4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801eaa8:	ea4e 040a 	orr.w	r4, lr, sl
 801eaac:	940c      	str	r4, [sp, #48]	; 0x30
 801eaae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801eab0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801eab4:	9c08      	ldr	r4, [sp, #32]
 801eab6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801eaba:	fb08 fc0c 	mul.w	ip, r8, ip
 801eabe:	fb02 cc0e 	mla	ip, r2, lr, ip
 801eac2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801eac6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801eac8:	fb00 cc0e 	mla	ip, r0, lr, ip
 801eacc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801ead0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ead2:	fb09 cc0e 	mla	ip, r9, lr, ip
 801ead6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801eada:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801eade:	fb08 f80e 	mul.w	r8, r8, lr
 801eae2:	fb02 8303 	mla	r3, r2, r3, r8
 801eae6:	9a08      	ldr	r2, [sp, #32]
 801eae8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801eaec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801eaee:	fb00 330a 	mla	r3, r0, sl, r3
 801eaf2:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801eaf6:	fb09 3900 	mla	r9, r9, r0, r3
 801eafa:	883b      	ldrh	r3, [r7, #0]
 801eafc:	43c9      	mvns	r1, r1
 801eafe:	1218      	asrs	r0, r3, #8
 801eb00:	b2c9      	uxtb	r1, r1
 801eb02:	10da      	asrs	r2, r3, #3
 801eb04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eb08:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801eb0c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801eb10:	00db      	lsls	r3, r3, #3
 801eb12:	4348      	muls	r0, r1
 801eb14:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801eb18:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801eb1c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801eb20:	b2db      	uxtb	r3, r3
 801eb22:	434b      	muls	r3, r1
 801eb24:	ea4c 0c09 	orr.w	ip, ip, r9
 801eb28:	434a      	muls	r2, r1
 801eb2a:	1c41      	adds	r1, r0, #1
 801eb2c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801eb30:	ea4f 401c 	mov.w	r0, ip, lsr #16
 801eb34:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 801eb38:	4960      	ldr	r1, [pc, #384]	; (801ecbc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 801eb3a:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 801eb3e:	1c59      	adds	r1, r3, #1
 801eb40:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801eb44:	fa5f f38c 	uxtb.w	r3, ip
 801eb48:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801eb4c:	1c51      	adds	r1, r2, #1
 801eb4e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801eb52:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801eb56:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801eb5a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801eb5e:	ea40 03d3 	orr.w	r3, r0, r3, lsr #3
 801eb62:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801eb66:	ea43 0c0c 	orr.w	ip, r3, ip
 801eb6a:	f8a7 c000 	strh.w	ip, [r7]
 801eb6e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801eb70:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801eb72:	441a      	add	r2, r3
 801eb74:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801eb76:	922d      	str	r2, [sp, #180]	; 0xb4
 801eb78:	441d      	add	r5, r3
 801eb7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801eb7c:	3b01      	subs	r3, #1
 801eb7e:	3702      	adds	r7, #2
 801eb80:	9317      	str	r3, [sp, #92]	; 0x5c
 801eb82:	e6a0      	b.n	801e8c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801eb84:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801eb86:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 801eb88:	441c      	add	r4, r3
 801eb8a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801eb8c:	942d      	str	r4, [sp, #180]	; 0xb4
 801eb8e:	441d      	add	r5, r3
 801eb90:	9b07      	ldr	r3, [sp, #28]
 801eb92:	3b01      	subs	r3, #1
 801eb94:	9307      	str	r3, [sp, #28]
 801eb96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eb98:	3302      	adds	r3, #2
 801eb9a:	930a      	str	r3, [sp, #40]	; 0x28
 801eb9c:	e672      	b.n	801e884 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801eb9e:	d024      	beq.n	801ebea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d6>
 801eba0:	9b07      	ldr	r3, [sp, #28]
 801eba2:	982f      	ldr	r0, [sp, #188]	; 0xbc
 801eba4:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 801eba6:	3b01      	subs	r3, #1
 801eba8:	fb00 4003 	mla	r0, r0, r3, r4
 801ebac:	1400      	asrs	r0, r0, #16
 801ebae:	f53f ae87 	bmi.w	801e8c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 801ebb2:	3901      	subs	r1, #1
 801ebb4:	4288      	cmp	r0, r1
 801ebb6:	f6bf ae83 	bge.w	801e8c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 801ebba:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801ebbc:	fb01 5303 	mla	r3, r1, r3, r5
 801ebc0:	141b      	asrs	r3, r3, #16
 801ebc2:	f53f ae7d 	bmi.w	801e8c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 801ebc6:	3a01      	subs	r2, #1
 801ebc8:	4293      	cmp	r3, r2
 801ebca:	f6bf ae79 	bge.w	801e8c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 801ebce:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801ebd2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801ebd6:	f1bb 0f00 	cmp.w	fp, #0
 801ebda:	dc71      	bgt.n	801ecc0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 801ebdc:	9b07      	ldr	r3, [sp, #28]
 801ebde:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ebe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ebe4:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801ebe8:	930a      	str	r3, [sp, #40]	; 0x28
 801ebea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ebec:	2b00      	cmp	r3, #0
 801ebee:	f340 81b3 	ble.w	801ef58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 801ebf2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ebf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ebfa:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ebfe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ec00:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ec04:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801ec08:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ec0c:	eef0 6a48 	vmov.f32	s13, s16
 801ec10:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ec14:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ec18:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ec1c:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801ec20:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ec24:	eef0 6a68 	vmov.f32	s13, s17
 801ec28:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ec2c:	ee18 2a10 	vmov	r2, s16
 801ec30:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ec34:	fb92 f3f3 	sdiv	r3, r2, r3
 801ec38:	ee18 2a90 	vmov	r2, s17
 801ec3c:	932f      	str	r3, [sp, #188]	; 0xbc
 801ec3e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ec40:	fb92 f3f3 	sdiv	r3, r2, r3
 801ec44:	9330      	str	r3, [sp, #192]	; 0xc0
 801ec46:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ec48:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ec4a:	3b01      	subs	r3, #1
 801ec4c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ec50:	9316      	str	r3, [sp, #88]	; 0x58
 801ec52:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ec54:	bf08      	it	eq
 801ec56:	4613      	moveq	r3, r2
 801ec58:	ee16 5a90 	vmov	r5, s13
 801ec5c:	9307      	str	r3, [sp, #28]
 801ec5e:	eef0 8a67 	vmov.f32	s17, s15
 801ec62:	eeb0 8a47 	vmov.f32	s16, s14
 801ec66:	e5ff      	b.n	801e868 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801ec68:	2800      	cmp	r0, #0
 801ec6a:	f43f ae72 	beq.w	801e952 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ec6e:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ec72:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ec76:	9108      	str	r1, [sp, #32]
 801ec78:	0e09      	lsrs	r1, r1, #24
 801ec7a:	9110      	str	r1, [sp, #64]	; 0x40
 801ec7c:	e669      	b.n	801e952 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801ec7e:	f113 0801 	adds.w	r8, r3, #1
 801ec82:	f53f af74 	bmi.w	801eb6e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 801ec86:	4541      	cmp	r1, r8
 801ec88:	f6ff af71 	blt.w	801eb6e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 801ec8c:	f11c 0801 	adds.w	r8, ip, #1
 801ec90:	f53f af6d 	bmi.w	801eb6e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 801ec94:	45c6      	cmp	lr, r8
 801ec96:	f6ff af6a 	blt.w	801eb6e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 801ec9a:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801ec9e:	b209      	sxth	r1, r1
 801eca0:	fa0f f38e 	sxth.w	r3, lr
 801eca4:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801eca8:	9301      	str	r3, [sp, #4]
 801ecaa:	9100      	str	r1, [sp, #0]
 801ecac:	4633      	mov	r3, r6
 801ecae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ecb0:	9819      	ldr	r0, [sp, #100]	; 0x64
 801ecb2:	4639      	mov	r1, r7
 801ecb4:	f7ff fc52 	bl	801e55c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 801ecb8:	e759      	b.n	801eb6e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 801ecba:	bf00      	nop
 801ecbc:	fffff800 	.word	0xfffff800
 801ecc0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801ecc2:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 801ecc4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ecc8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801ecca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ecce:	1427      	asrs	r7, r4, #16
 801ecd0:	142b      	asrs	r3, r5, #16
 801ecd2:	fb01 7303 	mla	r3, r1, r3, r7
 801ecd6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ecd8:	18e7      	adds	r7, r4, r3
 801ecda:	5ce3      	ldrb	r3, [r4, r3]
 801ecdc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ece0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ece4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801ece8:	2a00      	cmp	r2, #0
 801ecea:	f000 812b 	beq.w	801ef44 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 801ecee:	f897 e001 	ldrb.w	lr, [r7, #1]
 801ecf2:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801ecf6:	940d      	str	r4, [sp, #52]	; 0x34
 801ecf8:	0e24      	lsrs	r4, r4, #24
 801ecfa:	9414      	str	r4, [sp, #80]	; 0x50
 801ecfc:	b170      	cbz	r0, 801ed1c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 801ecfe:	eb07 0e01 	add.w	lr, r7, r1
 801ed02:	5c79      	ldrb	r1, [r7, r1]
 801ed04:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ed08:	9109      	str	r1, [sp, #36]	; 0x24
 801ed0a:	0e09      	lsrs	r1, r1, #24
 801ed0c:	9111      	str	r1, [sp, #68]	; 0x44
 801ed0e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801ed12:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ed16:	910e      	str	r1, [sp, #56]	; 0x38
 801ed18:	0e09      	lsrs	r1, r1, #24
 801ed1a:	9115      	str	r1, [sp, #84]	; 0x54
 801ed1c:	b292      	uxth	r2, r2
 801ed1e:	b280      	uxth	r0, r0
 801ed20:	fb02 f800 	mul.w	r8, r2, r0
 801ed24:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801ed28:	0112      	lsls	r2, r2, #4
 801ed2a:	eba2 0e08 	sub.w	lr, r2, r8
 801ed2e:	b280      	uxth	r0, r0
 801ed30:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801ed34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ed36:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ed38:	fa1f fe8e 	uxth.w	lr, lr
 801ed3c:	1a09      	subs	r1, r1, r0
 801ed3e:	b289      	uxth	r1, r1
 801ed40:	fb0e f202 	mul.w	r2, lr, r2
 801ed44:	fb01 220c 	mla	r2, r1, ip, r2
 801ed48:	fb00 2204 	mla	r2, r0, r4, r2
 801ed4c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ed4e:	fb08 2204 	mla	r2, r8, r4, r2
 801ed52:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801ed56:	2a00      	cmp	r2, #0
 801ed58:	f000 80e9 	beq.w	801ef2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71a>
 801ed5c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801ed60:	d019      	beq.n	801ed96 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x582>
 801ed62:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801ed66:	fb0c fa0a 	mul.w	sl, ip, sl
 801ed6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ed6e:	fb0c fc03 	mul.w	ip, ip, r3
 801ed72:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ed76:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ed7a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801ed7e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801ed82:	4453      	add	r3, sl
 801ed84:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801ed88:	0a1b      	lsrs	r3, r3, #8
 801ed8a:	0a3f      	lsrs	r7, r7, #8
 801ed8c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ed90:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ed94:	433b      	orrs	r3, r7
 801ed96:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ed98:	2cff      	cmp	r4, #255	; 0xff
 801ed9a:	d020      	beq.n	801edde <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 801ed9c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ed9e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801eda2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801eda4:	4367      	muls	r7, r4
 801eda6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801eda8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801edac:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801edae:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801edb2:	fb04 fa0a 	mul.w	sl, r4, sl
 801edb6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801edba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801edbe:	44bc      	add	ip, r7
 801edc0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801edc4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801edc8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801edcc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801edd0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801edd4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801edd8:	ea4c 040a 	orr.w	r4, ip, sl
 801eddc:	940d      	str	r4, [sp, #52]	; 0x34
 801edde:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ede0:	2cff      	cmp	r4, #255	; 0xff
 801ede2:	d020      	beq.n	801ee26 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x612>
 801ede4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ede6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801edea:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801edec:	4367      	muls	r7, r4
 801edee:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801edf0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801edf4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801edf6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801edfa:	fb04 fa0a 	mul.w	sl, r4, sl
 801edfe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ee02:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ee06:	44bc      	add	ip, r7
 801ee08:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ee0c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ee10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ee14:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ee18:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ee1c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ee20:	ea4c 040a 	orr.w	r4, ip, sl
 801ee24:	9409      	str	r4, [sp, #36]	; 0x24
 801ee26:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ee28:	2cff      	cmp	r4, #255	; 0xff
 801ee2a:	d020      	beq.n	801ee6e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 801ee2c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ee2e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ee32:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ee34:	4367      	muls	r7, r4
 801ee36:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ee38:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ee3c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ee3e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ee42:	fb04 fa0a 	mul.w	sl, r4, sl
 801ee46:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ee4a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ee4e:	44bc      	add	ip, r7
 801ee50:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ee54:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ee58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ee5c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ee60:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ee64:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ee68:	ea4c 040a 	orr.w	r4, ip, sl
 801ee6c:	940e      	str	r4, [sp, #56]	; 0x38
 801ee6e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ee70:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ee74:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ee76:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801ee7a:	fb0e f707 	mul.w	r7, lr, r7
 801ee7e:	fb01 770c 	mla	r7, r1, ip, r7
 801ee82:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ee86:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ee88:	fb00 770c 	mla	r7, r0, ip, r7
 801ee8c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ee90:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ee92:	fb08 770c 	mla	r7, r8, ip, r7
 801ee96:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801ee9a:	fb0e fe0c 	mul.w	lr, lr, ip
 801ee9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801eea2:	fb01 e303 	mla	r3, r1, r3, lr
 801eea6:	9909      	ldr	r1, [sp, #36]	; 0x24
 801eea8:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801eeac:	990e      	ldr	r1, [sp, #56]	; 0x38
 801eeae:	fb00 330a 	mla	r3, r0, sl, r3
 801eeb2:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801eeb6:	fb08 3c0c 	mla	ip, r8, ip, r3
 801eeba:	f8b9 3000 	ldrh.w	r3, [r9]
 801eebe:	43d2      	mvns	r2, r2
 801eec0:	1218      	asrs	r0, r3, #8
 801eec2:	b2d2      	uxtb	r2, r2
 801eec4:	0a3f      	lsrs	r7, r7, #8
 801eec6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eeca:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801eece:	4350      	muls	r0, r2
 801eed0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801eed4:	10d9      	asrs	r1, r3, #3
 801eed6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801eeda:	00db      	lsls	r3, r3, #3
 801eedc:	ea47 070c 	orr.w	r7, r7, ip
 801eee0:	b2db      	uxtb	r3, r3
 801eee2:	f100 0c01 	add.w	ip, r0, #1
 801eee6:	4353      	muls	r3, r2
 801eee8:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 801eeec:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801eef0:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801eef4:	4351      	muls	r1, r2
 801eef6:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 801eefa:	4a1a      	ldr	r2, [pc, #104]	; (801ef64 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 801eefc:	f103 0c01 	add.w	ip, r3, #1
 801ef00:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801ef04:	fa5f fc87 	uxtb.w	ip, r7
 801ef08:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801ef0c:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 801ef10:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 801ef14:	1c4b      	adds	r3, r1, #1
 801ef16:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801ef1a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801ef1e:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 801ef22:	00ff      	lsls	r7, r7, #3
 801ef24:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801ef28:	4338      	orrs	r0, r7
 801ef2a:	f8a9 0000 	strh.w	r0, [r9]
 801ef2e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801ef30:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ef32:	441a      	add	r2, r3
 801ef34:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ef36:	922d      	str	r2, [sp, #180]	; 0xb4
 801ef38:	f109 0902 	add.w	r9, r9, #2
 801ef3c:	441d      	add	r5, r3
 801ef3e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ef42:	e648      	b.n	801ebd6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 801ef44:	2800      	cmp	r0, #0
 801ef46:	f43f aee9 	beq.w	801ed1c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 801ef4a:	5c79      	ldrb	r1, [r7, r1]
 801ef4c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ef50:	9109      	str	r1, [sp, #36]	; 0x24
 801ef52:	0e09      	lsrs	r1, r1, #24
 801ef54:	9111      	str	r1, [sp, #68]	; 0x44
 801ef56:	e6e1      	b.n	801ed1c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 801ef58:	b01b      	add	sp, #108	; 0x6c
 801ef5a:	ecbd 8b08 	vpop	{d8-d11}
 801ef5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef62:	bf00      	nop
 801ef64:	fffff800 	.word	0xfffff800

0801ef68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 801ef68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef6c:	b085      	sub	sp, #20
 801ef6e:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 801ef72:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801ef76:	9103      	str	r1, [sp, #12]
 801ef78:	fb05 7106 	mla	r1, r5, r6, r7
 801ef7c:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 801ef80:	2d00      	cmp	r5, #0
 801ef82:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801ef86:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801ef8a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801ef8e:	9401      	str	r4, [sp, #4]
 801ef90:	eb03 0901 	add.w	r9, r3, r1
 801ef94:	f2c0 80c0 	blt.w	801f118 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 801ef98:	45a8      	cmp	r8, r5
 801ef9a:	f340 80bd 	ble.w	801f118 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 801ef9e:	2f00      	cmp	r7, #0
 801efa0:	f2c0 80b6 	blt.w	801f110 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 801efa4:	42be      	cmp	r6, r7
 801efa6:	f340 80b3 	ble.w	801f110 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 801efaa:	f813 c001 	ldrb.w	ip, [r3, r1]
 801efae:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 801efb2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801efb6:	d019      	beq.n	801efec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 801efb8:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 801efbc:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801efc0:	435a      	muls	r2, r3
 801efc2:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 801efc6:	f64f 011f 	movw	r1, #63519	; 0xf81f
 801efca:	fb0c f403 	mul.w	r4, ip, r3
 801efce:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 801efd2:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801efd6:	441a      	add	r2, r3
 801efd8:	f104 0320 	add.w	r3, r4, #32
 801efdc:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801efe0:	0a1b      	lsrs	r3, r3, #8
 801efe2:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 801efe6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801efea:	4319      	orrs	r1, r3
 801efec:	b289      	uxth	r1, r1
 801efee:	1c7b      	adds	r3, r7, #1
 801eff0:	f100 8097 	bmi.w	801f122 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 801eff4:	429e      	cmp	r6, r3
 801eff6:	f340 8094 	ble.w	801f122 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 801effa:	2800      	cmp	r0, #0
 801effc:	f000 8094 	beq.w	801f128 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 801f000:	f899 4001 	ldrb.w	r4, [r9, #1]
 801f004:	9b01      	ldr	r3, [sp, #4]
 801f006:	2cff      	cmp	r4, #255	; 0xff
 801f008:	885b      	ldrh	r3, [r3, #2]
 801f00a:	d01b      	beq.n	801f044 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 801f00c:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 801f010:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801f014:	fb0a f202 	mul.w	r2, sl, r2
 801f018:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f01c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801f020:	fb04 fa03 	mul.w	sl, r4, r3
 801f024:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 801f028:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801f02c:	441a      	add	r2, r3
 801f02e:	f10a 0320 	add.w	r3, sl, #32
 801f032:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801f036:	0a1b      	lsrs	r3, r3, #8
 801f038:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 801f03c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f040:	ea4b 0303 	orr.w	r3, fp, r3
 801f044:	b29b      	uxth	r3, r3
 801f046:	3501      	adds	r5, #1
 801f048:	d474      	bmi.n	801f134 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 801f04a:	45a8      	cmp	r8, r5
 801f04c:	dd72      	ble.n	801f134 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 801f04e:	f1be 0f00 	cmp.w	lr, #0
 801f052:	f000 8120 	beq.w	801f296 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 801f056:	2f00      	cmp	r7, #0
 801f058:	db69      	blt.n	801f12e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 801f05a:	42be      	cmp	r6, r7
 801f05c:	dd67      	ble.n	801f12e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 801f05e:	f819 5006 	ldrb.w	r5, [r9, r6]
 801f062:	9a01      	ldr	r2, [sp, #4]
 801f064:	2dff      	cmp	r5, #255	; 0xff
 801f066:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 801f06a:	d01c      	beq.n	801f0a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 801f06c:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 801f070:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801f074:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801f078:	fb05 fa0b 	mul.w	sl, r5, fp
 801f07c:	fb08 f802 	mul.w	r8, r8, r2
 801f080:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801f084:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 801f088:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f08c:	4490      	add	r8, r2
 801f08e:	f10a 0220 	add.w	r2, sl, #32
 801f092:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 801f096:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f09a:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 801f09e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f0a2:	ea4b 0b0a 	orr.w	fp, fp, sl
 801f0a6:	fa1f fb8b 	uxth.w	fp, fp
 801f0aa:	3701      	adds	r7, #1
 801f0ac:	d447      	bmi.n	801f13e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 801f0ae:	42be      	cmp	r6, r7
 801f0b0:	dd45      	ble.n	801f13e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 801f0b2:	2800      	cmp	r0, #0
 801f0b4:	d046      	beq.n	801f144 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 801f0b6:	3601      	adds	r6, #1
 801f0b8:	9a01      	ldr	r2, [sp, #4]
 801f0ba:	f819 7006 	ldrb.w	r7, [r9, r6]
 801f0be:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 801f0c2:	2fff      	cmp	r7, #255	; 0xff
 801f0c4:	d01a      	beq.n	801f0fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 801f0c6:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 801f0ca:	ea4f 08e7 	mov.w	r8, r7, asr #3
 801f0ce:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f0d2:	fb07 f902 	mul.w	r9, r7, r2
 801f0d6:	fb08 f806 	mul.w	r8, r8, r6
 801f0da:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801f0de:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 801f0e2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f0e6:	44b0      	add	r8, r6
 801f0e8:	f109 0620 	add.w	r6, r9, #32
 801f0ec:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 801f0f0:	0a36      	lsrs	r6, r6, #8
 801f0f2:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801f0f6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801f0fa:	4332      	orrs	r2, r6
 801f0fc:	b292      	uxth	r2, r2
 801f0fe:	280f      	cmp	r0, #15
 801f100:	d922      	bls.n	801f148 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 801f102:	4b69      	ldr	r3, [pc, #420]	; (801f2a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 801f104:	4a69      	ldr	r2, [pc, #420]	; (801f2ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 801f106:	486a      	ldr	r0, [pc, #424]	; (801f2b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 801f108:	f240 210d 	movw	r1, #525	; 0x20d
 801f10c:	f004 fb1a 	bl	8023744 <__assert_func>
 801f110:	f04f 0c00 	mov.w	ip, #0
 801f114:	4661      	mov	r1, ip
 801f116:	e76a      	b.n	801efee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 801f118:	2400      	movs	r4, #0
 801f11a:	46a4      	mov	ip, r4
 801f11c:	4623      	mov	r3, r4
 801f11e:	4621      	mov	r1, r4
 801f120:	e791      	b.n	801f046 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 801f122:	2400      	movs	r4, #0
 801f124:	4623      	mov	r3, r4
 801f126:	e78e      	b.n	801f046 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 801f128:	4604      	mov	r4, r0
 801f12a:	4603      	mov	r3, r0
 801f12c:	e78b      	b.n	801f046 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 801f12e:	2500      	movs	r5, #0
 801f130:	46ab      	mov	fp, r5
 801f132:	e7ba      	b.n	801f0aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 801f134:	2700      	movs	r7, #0
 801f136:	463d      	mov	r5, r7
 801f138:	463a      	mov	r2, r7
 801f13a:	46bb      	mov	fp, r7
 801f13c:	e7df      	b.n	801f0fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 801f13e:	2700      	movs	r7, #0
 801f140:	463a      	mov	r2, r7
 801f142:	e7dc      	b.n	801f0fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 801f144:	4607      	mov	r7, r0
 801f146:	4602      	mov	r2, r0
 801f148:	f1be 0f0f 	cmp.w	lr, #15
 801f14c:	d8d9      	bhi.n	801f102 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 801f14e:	b286      	uxth	r6, r0
 801f150:	fa1f f98e 	uxth.w	r9, lr
 801f154:	fb06 f809 	mul.w	r8, r6, r9
 801f158:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801f15c:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801f160:	0136      	lsls	r6, r6, #4
 801f162:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f166:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f16a:	9601      	str	r6, [sp, #4]
 801f16c:	ea4a 0101 	orr.w	r1, sl, r1
 801f170:	fa1f f689 	uxth.w	r6, r9
 801f174:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 801f178:	fb10 f90e 	smulbb	r9, r0, lr
 801f17c:	ea4f 09e9 	mov.w	r9, r9, asr #3
 801f180:	9602      	str	r6, [sp, #8]
 801f182:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f186:	460e      	mov	r6, r1
 801f188:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f18c:	f1ce 0110 	rsb	r1, lr, #16
 801f190:	1a09      	subs	r1, r1, r0
 801f192:	ea4a 0303 	orr.w	r3, sl, r3
 801f196:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 801f19a:	4343      	muls	r3, r0
 801f19c:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 801f1a0:	9801      	ldr	r0, [sp, #4]
 801f1a2:	fb01 3106 	mla	r1, r1, r6, r3
 801f1a6:	9e02      	ldr	r6, [sp, #8]
 801f1a8:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801f1ac:	1b80      	subs	r0, r0, r6
 801f1ae:	9e01      	ldr	r6, [sp, #4]
 801f1b0:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801f1b4:	eba6 0608 	sub.w	r6, r6, r8
 801f1b8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f1bc:	b2b6      	uxth	r6, r6
 801f1be:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f1c2:	ea4a 0202 	orr.w	r2, sl, r2
 801f1c6:	b280      	uxth	r0, r0
 801f1c8:	4374      	muls	r4, r6
 801f1ca:	fb09 1302 	mla	r3, r9, r2, r1
 801f1ce:	fb0c 4400 	mla	r4, ip, r0, r4
 801f1d2:	9a03      	ldr	r2, [sp, #12]
 801f1d4:	9802      	ldr	r0, [sp, #8]
 801f1d6:	8811      	ldrh	r1, [r2, #0]
 801f1d8:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801f1dc:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 801f1e0:	fb00 4505 	mla	r5, r0, r5, r4
 801f1e4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f1e8:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801f1ec:	fb08 5707 	mla	r7, r8, r7, r5
 801f1f0:	ea4a 0b0b 	orr.w	fp, sl, fp
 801f1f4:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801f1f8:	b292      	uxth	r2, r2
 801f1fa:	fb0e 3e0b 	mla	lr, lr, fp, r3
 801f1fe:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801f202:	4357      	muls	r7, r2
 801f204:	ea4f 535e 	mov.w	r3, lr, lsr #21
 801f208:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801f20c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f210:	f107 0801 	add.w	r8, r7, #1
 801f214:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f218:	ea43 0e0e 	orr.w	lr, r3, lr
 801f21c:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801f220:	fa1f f38e 	uxth.w	r3, lr
 801f224:	1208      	asrs	r0, r1, #8
 801f226:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 801f22a:	b2ff      	uxtb	r7, r7
 801f22c:	121c      	asrs	r4, r3, #8
 801f22e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f232:	fb10 f007 	smulbb	r0, r0, r7
 801f236:	10cd      	asrs	r5, r1, #3
 801f238:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801f23c:	00c9      	lsls	r1, r1, #3
 801f23e:	fb04 0402 	mla	r4, r4, r2, r0
 801f242:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801f246:	10d8      	asrs	r0, r3, #3
 801f248:	b2c9      	uxtb	r1, r1
 801f24a:	00db      	lsls	r3, r3, #3
 801f24c:	fb11 f107 	smulbb	r1, r1, r7
 801f250:	fb15 f507 	smulbb	r5, r5, r7
 801f254:	b2db      	uxtb	r3, r3
 801f256:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801f25a:	fb00 5002 	mla	r0, r0, r2, r5
 801f25e:	fb03 1202 	mla	r2, r3, r2, r1
 801f262:	b2a4      	uxth	r4, r4
 801f264:	b292      	uxth	r2, r2
 801f266:	1c63      	adds	r3, r4, #1
 801f268:	1c51      	adds	r1, r2, #1
 801f26a:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801f26e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801f272:	b280      	uxth	r0, r0
 801f274:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f278:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801f27c:	4313      	orrs	r3, r2
 801f27e:	1c42      	adds	r2, r0, #1
 801f280:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801f284:	0940      	lsrs	r0, r0, #5
 801f286:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f28a:	9a03      	ldr	r2, [sp, #12]
 801f28c:	4303      	orrs	r3, r0
 801f28e:	8013      	strh	r3, [r2, #0]
 801f290:	b005      	add	sp, #20
 801f292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f296:	280f      	cmp	r0, #15
 801f298:	f63f af33 	bhi.w	801f102 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 801f29c:	4677      	mov	r7, lr
 801f29e:	4675      	mov	r5, lr
 801f2a0:	4672      	mov	r2, lr
 801f2a2:	46f3      	mov	fp, lr
 801f2a4:	e753      	b.n	801f14e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 801f2a6:	bf00      	nop
 801f2a8:	0802814e 	.word	0x0802814e
 801f2ac:	08028711 	.word	0x08028711
 801f2b0:	08028237 	.word	0x08028237

0801f2b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2b8:	ed2d 8b08 	vpush	{d8-d11}
 801f2bc:	b097      	sub	sp, #92	; 0x5c
 801f2be:	eeb0 aa40 	vmov.f32	s20, s0
 801f2c2:	9214      	str	r2, [sp, #80]	; 0x50
 801f2c4:	9308      	str	r3, [sp, #32]
 801f2c6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f2c8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801f2cc:	9312      	str	r3, [sp, #72]	; 0x48
 801f2ce:	9111      	str	r1, [sp, #68]	; 0x44
 801f2d0:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801f2d4:	9015      	str	r0, [sp, #84]	; 0x54
 801f2d6:	6850      	ldr	r0, [r2, #4]
 801f2d8:	6812      	ldr	r2, [r2, #0]
 801f2da:	fb00 1303 	mla	r3, r0, r3, r1
 801f2de:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f2e2:	9309      	str	r3, [sp, #36]	; 0x24
 801f2e4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f2e6:	681b      	ldr	r3, [r3, #0]
 801f2e8:	930b      	str	r3, [sp, #44]	; 0x2c
 801f2ea:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f2ec:	685b      	ldr	r3, [r3, #4]
 801f2ee:	930c      	str	r3, [sp, #48]	; 0x30
 801f2f0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801f2f4:	930a      	str	r3, [sp, #40]	; 0x28
 801f2f6:	eef0 9a60 	vmov.f32	s19, s1
 801f2fa:	eeb0 9a41 	vmov.f32	s18, s2
 801f2fe:	eeb0 8a62 	vmov.f32	s16, s5
 801f302:	eef0 8a43 	vmov.f32	s17, s6
 801f306:	eef0 ba44 	vmov.f32	s23, s8
 801f30a:	eeb0 ba64 	vmov.f32	s22, s9
 801f30e:	eef0 aa45 	vmov.f32	s21, s10
 801f312:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f314:	2b00      	cmp	r3, #0
 801f316:	dc03      	bgt.n	801f320 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f318:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f31a:	2b00      	cmp	r3, #0
 801f31c:	f340 83cb 	ble.w	801fab6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x802>
 801f320:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f322:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f326:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f32a:	1e48      	subs	r0, r1, #1
 801f32c:	1e55      	subs	r5, r2, #1
 801f32e:	9b08      	ldr	r3, [sp, #32]
 801f330:	2b00      	cmp	r3, #0
 801f332:	f340 81a3 	ble.w	801f67c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 801f336:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 801f338:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f33a:	1436      	asrs	r6, r6, #16
 801f33c:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f340:	d406      	bmi.n	801f350 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f342:	4286      	cmp	r6, r0
 801f344:	da04      	bge.n	801f350 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f346:	2b00      	cmp	r3, #0
 801f348:	db02      	blt.n	801f350 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f34a:	42ab      	cmp	r3, r5
 801f34c:	f2c0 8197 	blt.w	801f67e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801f350:	3601      	adds	r6, #1
 801f352:	f100 8184 	bmi.w	801f65e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801f356:	42b1      	cmp	r1, r6
 801f358:	f2c0 8181 	blt.w	801f65e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801f35c:	3301      	adds	r3, #1
 801f35e:	f100 817e 	bmi.w	801f65e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801f362:	429a      	cmp	r2, r3
 801f364:	f2c0 817b 	blt.w	801f65e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801f368:	9b08      	ldr	r3, [sp, #32]
 801f36a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f36c:	9313      	str	r3, [sp, #76]	; 0x4c
 801f36e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801f372:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f374:	2b00      	cmp	r3, #0
 801f376:	f340 81a4 	ble.w	801f6c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 801f37a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f37c:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 801f37e:	1418      	asrs	r0, r3, #16
 801f380:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f382:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801f386:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f388:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801f38c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f38e:	142d      	asrs	r5, r5, #16
 801f390:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801f394:	f100 81f8 	bmi.w	801f788 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 801f398:	f102 3eff 	add.w	lr, r2, #4294967295
 801f39c:	4575      	cmp	r5, lr
 801f39e:	f280 81f3 	bge.w	801f788 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 801f3a2:	2800      	cmp	r0, #0
 801f3a4:	f2c0 81f0 	blt.w	801f788 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 801f3a8:	f103 3eff 	add.w	lr, r3, #4294967295
 801f3ac:	4570      	cmp	r0, lr
 801f3ae:	f280 81eb 	bge.w	801f788 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 801f3b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f3b4:	b212      	sxth	r2, r2
 801f3b6:	fb00 5002 	mla	r0, r0, r2, r5
 801f3ba:	fa1f fe81 	uxth.w	lr, r1
 801f3be:	eb03 0a00 	add.w	sl, r3, r0
 801f3c2:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801f3c6:	f813 9000 	ldrb.w	r9, [r3, r0]
 801f3ca:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801f3ce:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801f3d2:	b29b      	uxth	r3, r3
 801f3d4:	f1bc 0f00 	cmp.w	ip, #0
 801f3d8:	f000 81b9 	beq.w	801f74e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 801f3dc:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801f3e0:	940d      	str	r4, [sp, #52]	; 0x34
 801f3e2:	eb0a 0b02 	add.w	fp, sl, r2
 801f3e6:	fa1f fa8c 	uxth.w	sl, ip
 801f3ea:	fb0a fe0e 	mul.w	lr, sl, lr
 801f3ee:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801f3f2:	fa1f fa8a 	uxth.w	sl, sl
 801f3f6:	eba5 050e 	sub.w	r5, r5, lr
 801f3fa:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801f3fe:	940e      	str	r4, [sp, #56]	; 0x38
 801f400:	eba3 030a 	sub.w	r3, r3, sl
 801f404:	b2ad      	uxth	r5, r5
 801f406:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f408:	b29b      	uxth	r3, r3
 801f40a:	fb08 f505 	mul.w	r5, r8, r5
 801f40e:	fb09 5303 	mla	r3, r9, r3, r5
 801f412:	fb0a 3304 	mla	r3, sl, r4, r3
 801f416:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f418:	fb0e 3304 	mla	r3, lr, r4, r3
 801f41c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f420:	2b00      	cmp	r3, #0
 801f422:	f000 810f 	beq.w	801f644 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 801f426:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f428:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f42c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801f430:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801f434:	f000 8190 	beq.w	801f758 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 801f438:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801f43c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801f440:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f444:	fb09 f000 	mul.w	r0, r9, r0
 801f448:	fb0a fe0e 	mul.w	lr, sl, lr
 801f44c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801f450:	f100 0b20 	add.w	fp, r0, #32
 801f454:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801f458:	44ce      	add	lr, r9
 801f45a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801f45e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f462:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801f466:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f46a:	ea4e 0909 	orr.w	r9, lr, r9
 801f46e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f472:	8868      	ldrh	r0, [r5, #2]
 801f474:	d019      	beq.n	801f4aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801f476:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801f47a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801f47e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f482:	fb08 f800 	mul.w	r8, r8, r0
 801f486:	fb0a fe0e 	mul.w	lr, sl, lr
 801f48a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801f48e:	f108 0b20 	add.w	fp, r8, #32
 801f492:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801f496:	4486      	add	lr, r0
 801f498:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801f49c:	0a00      	lsrs	r0, r0, #8
 801f49e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801f4a2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f4a6:	ea4e 0000 	orr.w	r0, lr, r0
 801f4aa:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801f4ae:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801f4b2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801f4b6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f4ba:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f4be:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f4c2:	ea4e 0909 	orr.w	r9, lr, r9
 801f4c6:	ea4a 0000 	orr.w	r0, sl, r0
 801f4ca:	f1bc 0f00 	cmp.w	ip, #0
 801f4ce:	f000 8145 	beq.w	801f75c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 801f4d2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801f4d6:	3a01      	subs	r2, #1
 801f4d8:	0052      	lsls	r2, r2, #1
 801f4da:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f4dc:	3202      	adds	r2, #2
 801f4de:	2cff      	cmp	r4, #255	; 0xff
 801f4e0:	eb05 0e02 	add.w	lr, r5, r2
 801f4e4:	5aaa      	ldrh	r2, [r5, r2]
 801f4e6:	d018      	beq.n	801f51a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801f4e8:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 801f4ec:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f4f0:	fb04 fa02 	mul.w	sl, r4, r2
 801f4f4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f4f8:	fb08 f805 	mul.w	r8, r8, r5
 801f4fc:	f10a 0520 	add.w	r5, sl, #32
 801f500:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801f504:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801f508:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f50c:	4442      	add	r2, r8
 801f50e:	0a2d      	lsrs	r5, r5, #8
 801f510:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801f514:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f518:	432a      	orrs	r2, r5
 801f51a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f51c:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801f520:	2cff      	cmp	r4, #255	; 0xff
 801f522:	d01a      	beq.n	801f55a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f524:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 801f528:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f52c:	fb04 fa05 	mul.w	sl, r4, r5
 801f530:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f534:	fb08 f80e 	mul.w	r8, r8, lr
 801f538:	f10a 0e20 	add.w	lr, sl, #32
 801f53c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801f540:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801f544:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f548:	4445      	add	r5, r8
 801f54a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f54e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801f552:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801f556:	ea45 050e 	orr.w	r5, r5, lr
 801f55a:	fb1c fe01 	smulbb	lr, ip, r1
 801f55e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801f562:	f1cc 0810 	rsb	r8, ip, #16
 801f566:	eba8 0801 	sub.w	r8, r8, r1
 801f56a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801f56e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801f572:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801f576:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801f57a:	4341      	muls	r1, r0
 801f57c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f580:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f584:	ea4a 0202 	orr.w	r2, sl, r2
 801f588:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801f58c:	fb09 1108 	mla	r1, r9, r8, r1
 801f590:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f594:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801f598:	fb0c 1102 	mla	r1, ip, r2, r1
 801f59c:	ea4b 0505 	orr.w	r5, fp, r5
 801f5a0:	fb0e 1e05 	mla	lr, lr, r5, r1
 801f5a4:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801f5a8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801f5ac:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f5b0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f5b4:	ea42 0e0e 	orr.w	lr, r2, lr
 801f5b8:	fa1f f28e 	uxth.w	r2, lr
 801f5bc:	2bff      	cmp	r3, #255	; 0xff
 801f5be:	d103      	bne.n	801f5c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801f5c0:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f5c2:	29ff      	cmp	r1, #255	; 0xff
 801f5c4:	f000 80de 	beq.w	801f784 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 801f5c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f5ca:	8838      	ldrh	r0, [r7, #0]
 801f5cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f5ce:	434b      	muls	r3, r1
 801f5d0:	f103 0c01 	add.w	ip, r3, #1
 801f5d4:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 801f5d8:	ea6f 2c23 	mvn.w	ip, r3, asr #8
 801f5dc:	1205      	asrs	r5, r0, #8
 801f5de:	fa5f fc8c 	uxtb.w	ip, ip
 801f5e2:	1213      	asrs	r3, r2, #8
 801f5e4:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f5e8:	fb15 f50c 	smulbb	r5, r5, ip
 801f5ec:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801f5f0:	fb03 5301 	mla	r3, r3, r1, r5
 801f5f4:	b29d      	uxth	r5, r3
 801f5f6:	10c3      	asrs	r3, r0, #3
 801f5f8:	00c0      	lsls	r0, r0, #3
 801f5fa:	10d1      	asrs	r1, r2, #3
 801f5fc:	b2c0      	uxtb	r0, r0
 801f5fe:	00d2      	lsls	r2, r2, #3
 801f600:	fb10 f00c 	smulbb	r0, r0, ip
 801f604:	b2d2      	uxtb	r2, r2
 801f606:	fb02 0204 	mla	r2, r2, r4, r0
 801f60a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801f60e:	fb13 f30c 	smulbb	r3, r3, ip
 801f612:	b292      	uxth	r2, r2
 801f614:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f618:	fb01 3104 	mla	r1, r1, r4, r3
 801f61c:	1c50      	adds	r0, r2, #1
 801f61e:	1c6b      	adds	r3, r5, #1
 801f620:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 801f624:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f628:	b289      	uxth	r1, r1
 801f62a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f62e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801f632:	4313      	orrs	r3, r2
 801f634:	1c4a      	adds	r2, r1, #1
 801f636:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801f63a:	0949      	lsrs	r1, r1, #5
 801f63c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f640:	430b      	orrs	r3, r1
 801f642:	803b      	strh	r3, [r7, #0]
 801f644:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f646:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f648:	4413      	add	r3, r2
 801f64a:	9329      	str	r3, [sp, #164]	; 0xa4
 801f64c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f64e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f650:	441a      	add	r2, r3
 801f652:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f654:	922a      	str	r2, [sp, #168]	; 0xa8
 801f656:	3b01      	subs	r3, #1
 801f658:	3702      	adds	r7, #2
 801f65a:	9313      	str	r3, [sp, #76]	; 0x4c
 801f65c:	e689      	b.n	801f372 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801f65e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f660:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 801f662:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 801f664:	4433      	add	r3, r6
 801f666:	9329      	str	r3, [sp, #164]	; 0xa4
 801f668:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f66a:	441c      	add	r4, r3
 801f66c:	9b08      	ldr	r3, [sp, #32]
 801f66e:	942a      	str	r4, [sp, #168]	; 0xa8
 801f670:	3b01      	subs	r3, #1
 801f672:	9308      	str	r3, [sp, #32]
 801f674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f676:	3302      	adds	r3, #2
 801f678:	9309      	str	r3, [sp, #36]	; 0x24
 801f67a:	e658      	b.n	801f32e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f67c:	d028      	beq.n	801f6d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 801f67e:	9b08      	ldr	r3, [sp, #32]
 801f680:	982b      	ldr	r0, [sp, #172]	; 0xac
 801f682:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 801f684:	3b01      	subs	r3, #1
 801f686:	fb00 5003 	mla	r0, r0, r3, r5
 801f68a:	1400      	asrs	r0, r0, #16
 801f68c:	f53f ae6c 	bmi.w	801f368 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801f690:	3901      	subs	r1, #1
 801f692:	4288      	cmp	r0, r1
 801f694:	f6bf ae68 	bge.w	801f368 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801f698:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801f69a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801f69c:	fb01 0303 	mla	r3, r1, r3, r0
 801f6a0:	141b      	asrs	r3, r3, #16
 801f6a2:	f53f ae61 	bmi.w	801f368 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801f6a6:	3a01      	subs	r2, #1
 801f6a8:	4293      	cmp	r3, r2
 801f6aa:	f6bf ae5d 	bge.w	801f368 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801f6ae:	9b08      	ldr	r3, [sp, #32]
 801f6b0:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801f6b4:	9313      	str	r3, [sp, #76]	; 0x4c
 801f6b6:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801f6ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f6bc:	2b00      	cmp	r3, #0
 801f6be:	f300 8082 	bgt.w	801f7c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 801f6c2:	9b08      	ldr	r3, [sp, #32]
 801f6c4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f6c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f6ca:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801f6ce:	9309      	str	r3, [sp, #36]	; 0x24
 801f6d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f6d2:	2b00      	cmp	r3, #0
 801f6d4:	f340 81ef 	ble.w	801fab6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x802>
 801f6d8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f6dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f6e0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f6e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f6e6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f6ea:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f6ee:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f6f2:	eef0 6a48 	vmov.f32	s13, s16
 801f6f6:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f6fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f6fe:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f702:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801f706:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f70a:	eef0 6a68 	vmov.f32	s13, s17
 801f70e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f712:	ee18 2a10 	vmov	r2, s16
 801f716:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f71a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f71e:	ee18 2a90 	vmov	r2, s17
 801f722:	932b      	str	r3, [sp, #172]	; 0xac
 801f724:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f726:	fb92 f3f3 	sdiv	r3, r2, r3
 801f72a:	932c      	str	r3, [sp, #176]	; 0xb0
 801f72c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f72e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f730:	3b01      	subs	r3, #1
 801f732:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f736:	9311      	str	r3, [sp, #68]	; 0x44
 801f738:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f73a:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 801f73e:	bf08      	it	eq
 801f740:	4613      	moveq	r3, r2
 801f742:	9308      	str	r3, [sp, #32]
 801f744:	eef0 8a67 	vmov.f32	s17, s15
 801f748:	eeb0 8a47 	vmov.f32	s16, s14
 801f74c:	e5e1      	b.n	801f312 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801f74e:	fb08 f505 	mul.w	r5, r8, r5
 801f752:	fb09 5303 	mla	r3, r9, r3, r5
 801f756:	e661      	b.n	801f41c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 801f758:	4681      	mov	r9, r0
 801f75a:	e688      	b.n	801f46e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801f75c:	f1c1 0210 	rsb	r2, r1, #16
 801f760:	4341      	muls	r1, r0
 801f762:	fb09 1902 	mla	r9, r9, r2, r1
 801f766:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801f76a:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801f76e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f772:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f776:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f77a:	ea42 0909 	orr.w	r9, r2, r9
 801f77e:	fa1f f289 	uxth.w	r2, r9
 801f782:	e71b      	b.n	801f5bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 801f784:	803a      	strh	r2, [r7, #0]
 801f786:	e75d      	b.n	801f644 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 801f788:	f115 0e01 	adds.w	lr, r5, #1
 801f78c:	f53f af5a 	bmi.w	801f644 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 801f790:	4572      	cmp	r2, lr
 801f792:	f6ff af57 	blt.w	801f644 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 801f796:	f110 0e01 	adds.w	lr, r0, #1
 801f79a:	f53f af53 	bmi.w	801f644 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 801f79e:	4573      	cmp	r3, lr
 801f7a0:	f6ff af50 	blt.w	801f644 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 801f7a4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f7a6:	9502      	str	r5, [sp, #8]
 801f7a8:	b21b      	sxth	r3, r3
 801f7aa:	b212      	sxth	r2, r2
 801f7ac:	e9cd 0103 	strd	r0, r1, [sp, #12]
 801f7b0:	9301      	str	r3, [sp, #4]
 801f7b2:	9200      	str	r2, [sp, #0]
 801f7b4:	e9cd c405 	strd	ip, r4, [sp, #20]
 801f7b8:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 801f7bc:	4639      	mov	r1, r7
 801f7be:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f7c0:	f7ff fbd2 	bl	801ef68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 801f7c4:	e73e      	b.n	801f644 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 801f7c6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f7c8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f7cc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f7ce:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801f7d2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f7d4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f7d8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f7da:	141f      	asrs	r7, r3, #16
 801f7dc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f7de:	141b      	asrs	r3, r3, #16
 801f7e0:	fb01 3707 	mla	r7, r1, r7, r3
 801f7e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f7e6:	fa1f fc82 	uxth.w	ip, r2
 801f7ea:	eb03 0a07 	add.w	sl, r3, r7
 801f7ee:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801f7f2:	f813 9007 	ldrb.w	r9, [r3, r7]
 801f7f6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801f7fa:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801f7fe:	b29b      	uxth	r3, r3
 801f800:	2d00      	cmp	r5, #0
 801f802:	f000 813d 	beq.w	801fa80 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 801f806:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801f80a:	940f      	str	r4, [sp, #60]	; 0x3c
 801f80c:	eb0a 0b01 	add.w	fp, sl, r1
 801f810:	fa1f fa85 	uxth.w	sl, r5
 801f814:	fb0a fc0c 	mul.w	ip, sl, ip
 801f818:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801f81c:	fa1f fa8a 	uxth.w	sl, sl
 801f820:	eba0 000c 	sub.w	r0, r0, ip
 801f824:	eba3 030a 	sub.w	r3, r3, sl
 801f828:	b280      	uxth	r0, r0
 801f82a:	fb08 f000 	mul.w	r0, r8, r0
 801f82e:	b29b      	uxth	r3, r3
 801f830:	fb09 0303 	mla	r3, r9, r3, r0
 801f834:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f836:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801f83a:	9410      	str	r4, [sp, #64]	; 0x40
 801f83c:	fb0a 3300 	mla	r3, sl, r0, r3
 801f840:	fb0c 3304 	mla	r3, ip, r4, r3
 801f844:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f848:	2b00      	cmp	r3, #0
 801f84a:	f000 810b 	beq.w	801fa64 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>
 801f84e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f850:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f852:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f856:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801f85a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801f85e:	f000 8114 	beq.w	801fa8a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d6>
 801f862:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801f866:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801f86a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f86e:	fb09 f707 	mul.w	r7, r9, r7
 801f872:	fb0a fc0c 	mul.w	ip, sl, ip
 801f876:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801f87a:	f107 0b20 	add.w	fp, r7, #32
 801f87e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801f882:	44cc      	add	ip, r9
 801f884:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801f888:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f88c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801f890:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f894:	ea4c 0909 	orr.w	r9, ip, r9
 801f898:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f89c:	8847      	ldrh	r7, [r0, #2]
 801f89e:	d019      	beq.n	801f8d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x620>
 801f8a0:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801f8a4:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801f8a8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f8ac:	fb08 f807 	mul.w	r8, r8, r7
 801f8b0:	fb0a fc0c 	mul.w	ip, sl, ip
 801f8b4:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801f8b8:	f108 0b20 	add.w	fp, r8, #32
 801f8bc:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801f8c0:	44bc      	add	ip, r7
 801f8c2:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801f8c6:	0a3f      	lsrs	r7, r7, #8
 801f8c8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801f8cc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f8d0:	ea4c 0707 	orr.w	r7, ip, r7
 801f8d4:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801f8d8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801f8dc:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f8e0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f8e4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f8e8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801f8ec:	ea4c 0909 	orr.w	r9, ip, r9
 801f8f0:	ea4a 0707 	orr.w	r7, sl, r7
 801f8f4:	2d00      	cmp	r5, #0
 801f8f6:	f000 80ca 	beq.w	801fa8e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 801f8fa:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801f8fe:	3901      	subs	r1, #1
 801f900:	0049      	lsls	r1, r1, #1
 801f902:	3102      	adds	r1, #2
 801f904:	eb00 0c01 	add.w	ip, r0, r1
 801f908:	5a41      	ldrh	r1, [r0, r1]
 801f90a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f90c:	28ff      	cmp	r0, #255	; 0xff
 801f90e:	d019      	beq.n	801f944 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x690>
 801f910:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f912:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801f916:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f91a:	fb04 fa01 	mul.w	sl, r4, r1
 801f91e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f922:	fb08 f800 	mul.w	r8, r8, r0
 801f926:	f10a 0020 	add.w	r0, sl, #32
 801f92a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801f92e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801f932:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f936:	4441      	add	r1, r8
 801f938:	0a00      	lsrs	r0, r0, #8
 801f93a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801f93e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f942:	4301      	orrs	r1, r0
 801f944:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f946:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801f94a:	2cff      	cmp	r4, #255	; 0xff
 801f94c:	d01a      	beq.n	801f984 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 801f94e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 801f952:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f956:	fb04 fa00 	mul.w	sl, r4, r0
 801f95a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f95e:	fb08 f80c 	mul.w	r8, r8, ip
 801f962:	f10a 0c20 	add.w	ip, sl, #32
 801f966:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801f96a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801f96e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f972:	4440      	add	r0, r8
 801f974:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f978:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801f97c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801f980:	ea40 000c 	orr.w	r0, r0, ip
 801f984:	fb15 fc02 	smulbb	ip, r5, r2
 801f988:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801f98c:	f1c5 0810 	rsb	r8, r5, #16
 801f990:	eba8 0802 	sub.w	r8, r8, r2
 801f994:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801f998:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801f99c:	437a      	muls	r2, r7
 801f99e:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801f9a2:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801f9a6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f9aa:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f9ae:	fb09 2208 	mla	r2, r9, r8, r2
 801f9b2:	ea4a 0101 	orr.w	r1, sl, r1
 801f9b6:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 801f9ba:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f9be:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f9c2:	fb05 2201 	mla	r2, r5, r1, r2
 801f9c6:	ea4b 0000 	orr.w	r0, fp, r0
 801f9ca:	fb0c 2200 	mla	r2, ip, r0, r2
 801f9ce:	0d57      	lsrs	r7, r2, #21
 801f9d0:	0952      	lsrs	r2, r2, #5
 801f9d2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f9d6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f9da:	433a      	orrs	r2, r7
 801f9dc:	2bff      	cmp	r3, #255	; 0xff
 801f9de:	b292      	uxth	r2, r2
 801f9e0:	d102      	bne.n	801f9e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 801f9e2:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f9e4:	29ff      	cmp	r1, #255	; 0xff
 801f9e6:	d063      	beq.n	801fab0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7fc>
 801f9e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f9ea:	f8be 1000 	ldrh.w	r1, [lr]
 801f9ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f9f0:	4343      	muls	r3, r0
 801f9f2:	1c58      	adds	r0, r3, #1
 801f9f4:	eb00 2323 	add.w	r3, r0, r3, asr #8
 801f9f8:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801f9fc:	1208      	asrs	r0, r1, #8
 801f9fe:	b2db      	uxtb	r3, r3
 801fa00:	1215      	asrs	r5, r2, #8
 801fa02:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801fa06:	fb10 f003 	smulbb	r0, r0, r3
 801fa0a:	10cf      	asrs	r7, r1, #3
 801fa0c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801fa10:	00c9      	lsls	r1, r1, #3
 801fa12:	fb05 0504 	mla	r5, r5, r4, r0
 801fa16:	b2c9      	uxtb	r1, r1
 801fa18:	10d0      	asrs	r0, r2, #3
 801fa1a:	00d2      	lsls	r2, r2, #3
 801fa1c:	fb11 f103 	smulbb	r1, r1, r3
 801fa20:	b2d2      	uxtb	r2, r2
 801fa22:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fa26:	fb02 1204 	mla	r2, r2, r4, r1
 801fa2a:	fb17 f703 	smulbb	r7, r7, r3
 801fa2e:	b2ad      	uxth	r5, r5
 801fa30:	b292      	uxth	r2, r2
 801fa32:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801fa36:	fb00 7004 	mla	r0, r0, r4, r7
 801fa3a:	1c6b      	adds	r3, r5, #1
 801fa3c:	1c57      	adds	r7, r2, #1
 801fa3e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801fa42:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801fa46:	b280      	uxth	r0, r0
 801fa48:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801fa4c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801fa50:	433d      	orrs	r5, r7
 801fa52:	1c47      	adds	r7, r0, #1
 801fa54:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801fa58:	097f      	lsrs	r7, r7, #5
 801fa5a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801fa5e:	433d      	orrs	r5, r7
 801fa60:	f8ae 5000 	strh.w	r5, [lr]
 801fa64:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fa66:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801fa68:	4413      	add	r3, r2
 801fa6a:	9329      	str	r3, [sp, #164]	; 0xa4
 801fa6c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801fa6e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fa70:	441a      	add	r2, r3
 801fa72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801fa74:	922a      	str	r2, [sp, #168]	; 0xa8
 801fa76:	3b01      	subs	r3, #1
 801fa78:	f10e 0e02 	add.w	lr, lr, #2
 801fa7c:	9313      	str	r3, [sp, #76]	; 0x4c
 801fa7e:	e61c      	b.n	801f6ba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x406>
 801fa80:	fb08 f000 	mul.w	r0, r8, r0
 801fa84:	fb09 0303 	mla	r3, r9, r3, r0
 801fa88:	e6dc      	b.n	801f844 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x590>
 801fa8a:	46b9      	mov	r9, r7
 801fa8c:	e704      	b.n	801f898 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e4>
 801fa8e:	f1c2 0110 	rsb	r1, r2, #16
 801fa92:	437a      	muls	r2, r7
 801fa94:	fb09 2901 	mla	r9, r9, r1, r2
 801fa98:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801fa9c:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801faa0:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801faa4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801faa8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801faac:	4302      	orrs	r2, r0
 801faae:	e795      	b.n	801f9dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801fab0:	f8ae 2000 	strh.w	r2, [lr]
 801fab4:	e7d6      	b.n	801fa64 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>
 801fab6:	b017      	add	sp, #92	; 0x5c
 801fab8:	ecbd 8b08 	vpop	{d8-d11}
 801fabc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fac0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801fac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fac4:	b085      	sub	sp, #20
 801fac6:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 801faca:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801face:	9103      	str	r1, [sp, #12]
 801fad0:	fb05 7106 	mla	r1, r5, r6, r7
 801fad4:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 801fad8:	2d00      	cmp	r5, #0
 801fada:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801fade:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801fae2:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801fae6:	9401      	str	r4, [sp, #4]
 801fae8:	eb02 0901 	add.w	r9, r2, r1
 801faec:	f2c0 80c0 	blt.w	801fc70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 801faf0:	45a8      	cmp	r8, r5
 801faf2:	f340 80bd 	ble.w	801fc70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 801faf6:	2f00      	cmp	r7, #0
 801faf8:	f2c0 80b6 	blt.w	801fc68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 801fafc:	42be      	cmp	r6, r7
 801fafe:	f340 80b3 	ble.w	801fc68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 801fb02:	f812 c001 	ldrb.w	ip, [r2, r1]
 801fb06:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 801fb0a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fb0e:	d019      	beq.n	801fb44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 801fb10:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 801fb14:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801fb18:	435a      	muls	r2, r3
 801fb1a:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 801fb1e:	f64f 011f 	movw	r1, #63519	; 0xf81f
 801fb22:	fb0c f403 	mul.w	r4, ip, r3
 801fb26:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 801fb2a:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801fb2e:	441a      	add	r2, r3
 801fb30:	f104 0320 	add.w	r3, r4, #32
 801fb34:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801fb38:	0a1b      	lsrs	r3, r3, #8
 801fb3a:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 801fb3e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fb42:	4319      	orrs	r1, r3
 801fb44:	b289      	uxth	r1, r1
 801fb46:	1c7b      	adds	r3, r7, #1
 801fb48:	f100 8097 	bmi.w	801fc7a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 801fb4c:	429e      	cmp	r6, r3
 801fb4e:	f340 8094 	ble.w	801fc7a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 801fb52:	2800      	cmp	r0, #0
 801fb54:	f000 8094 	beq.w	801fc80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 801fb58:	f899 4001 	ldrb.w	r4, [r9, #1]
 801fb5c:	9b01      	ldr	r3, [sp, #4]
 801fb5e:	2cff      	cmp	r4, #255	; 0xff
 801fb60:	885b      	ldrh	r3, [r3, #2]
 801fb62:	d01b      	beq.n	801fb9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 801fb64:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 801fb68:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801fb6c:	fb0a f202 	mul.w	r2, sl, r2
 801fb70:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fb74:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801fb78:	fb04 fa03 	mul.w	sl, r4, r3
 801fb7c:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 801fb80:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801fb84:	441a      	add	r2, r3
 801fb86:	f10a 0320 	add.w	r3, sl, #32
 801fb8a:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801fb8e:	0a1b      	lsrs	r3, r3, #8
 801fb90:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 801fb94:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fb98:	ea4b 0303 	orr.w	r3, fp, r3
 801fb9c:	b29b      	uxth	r3, r3
 801fb9e:	3501      	adds	r5, #1
 801fba0:	d474      	bmi.n	801fc8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 801fba2:	45a8      	cmp	r8, r5
 801fba4:	dd72      	ble.n	801fc8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 801fba6:	f1be 0f00 	cmp.w	lr, #0
 801fbaa:	f000 8111 	beq.w	801fdd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x310>
 801fbae:	2f00      	cmp	r7, #0
 801fbb0:	db69      	blt.n	801fc86 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 801fbb2:	42be      	cmp	r6, r7
 801fbb4:	dd67      	ble.n	801fc86 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 801fbb6:	f819 5006 	ldrb.w	r5, [r9, r6]
 801fbba:	9a01      	ldr	r2, [sp, #4]
 801fbbc:	2dff      	cmp	r5, #255	; 0xff
 801fbbe:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 801fbc2:	d01c      	beq.n	801fbfe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 801fbc4:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 801fbc8:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801fbcc:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801fbd0:	fb05 fa0b 	mul.w	sl, r5, fp
 801fbd4:	fb08 f802 	mul.w	r8, r8, r2
 801fbd8:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801fbdc:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 801fbe0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801fbe4:	4490      	add	r8, r2
 801fbe6:	f10a 0220 	add.w	r2, sl, #32
 801fbea:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 801fbee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fbf2:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 801fbf6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fbfa:	ea4b 0b0a 	orr.w	fp, fp, sl
 801fbfe:	fa1f fb8b 	uxth.w	fp, fp
 801fc02:	3701      	adds	r7, #1
 801fc04:	d447      	bmi.n	801fc96 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 801fc06:	42be      	cmp	r6, r7
 801fc08:	dd45      	ble.n	801fc96 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 801fc0a:	2800      	cmp	r0, #0
 801fc0c:	d046      	beq.n	801fc9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 801fc0e:	3601      	adds	r6, #1
 801fc10:	9a01      	ldr	r2, [sp, #4]
 801fc12:	f819 7006 	ldrb.w	r7, [r9, r6]
 801fc16:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 801fc1a:	2fff      	cmp	r7, #255	; 0xff
 801fc1c:	d01a      	beq.n	801fc54 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 801fc1e:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 801fc22:	ea4f 08e7 	mov.w	r8, r7, asr #3
 801fc26:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fc2a:	fb07 f902 	mul.w	r9, r7, r2
 801fc2e:	fb08 f806 	mul.w	r8, r8, r6
 801fc32:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801fc36:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 801fc3a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801fc3e:	44b0      	add	r8, r6
 801fc40:	f109 0620 	add.w	r6, r9, #32
 801fc44:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 801fc48:	0a36      	lsrs	r6, r6, #8
 801fc4a:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801fc4e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801fc52:	4332      	orrs	r2, r6
 801fc54:	b292      	uxth	r2, r2
 801fc56:	280f      	cmp	r0, #15
 801fc58:	d922      	bls.n	801fca0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 801fc5a:	4b61      	ldr	r3, [pc, #388]	; (801fde0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 801fc5c:	4a61      	ldr	r2, [pc, #388]	; (801fde4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 801fc5e:	4862      	ldr	r0, [pc, #392]	; (801fde8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 801fc60:	f240 210d 	movw	r1, #525	; 0x20d
 801fc64:	f003 fd6e 	bl	8023744 <__assert_func>
 801fc68:	f04f 0c00 	mov.w	ip, #0
 801fc6c:	4661      	mov	r1, ip
 801fc6e:	e76a      	b.n	801fb46 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 801fc70:	2400      	movs	r4, #0
 801fc72:	46a4      	mov	ip, r4
 801fc74:	4623      	mov	r3, r4
 801fc76:	4621      	mov	r1, r4
 801fc78:	e791      	b.n	801fb9e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 801fc7a:	2400      	movs	r4, #0
 801fc7c:	4623      	mov	r3, r4
 801fc7e:	e78e      	b.n	801fb9e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 801fc80:	4604      	mov	r4, r0
 801fc82:	4603      	mov	r3, r0
 801fc84:	e78b      	b.n	801fb9e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 801fc86:	2500      	movs	r5, #0
 801fc88:	46ab      	mov	fp, r5
 801fc8a:	e7ba      	b.n	801fc02 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 801fc8c:	2700      	movs	r7, #0
 801fc8e:	463d      	mov	r5, r7
 801fc90:	463a      	mov	r2, r7
 801fc92:	46bb      	mov	fp, r7
 801fc94:	e7df      	b.n	801fc56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 801fc96:	2700      	movs	r7, #0
 801fc98:	463a      	mov	r2, r7
 801fc9a:	e7dc      	b.n	801fc56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 801fc9c:	4607      	mov	r7, r0
 801fc9e:	4602      	mov	r2, r0
 801fca0:	f1be 0f0f 	cmp.w	lr, #15
 801fca4:	d8d9      	bhi.n	801fc5a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 801fca6:	b286      	uxth	r6, r0
 801fca8:	fa1f f98e 	uxth.w	r9, lr
 801fcac:	fb06 f809 	mul.w	r8, r6, r9
 801fcb0:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801fcb4:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801fcb8:	0136      	lsls	r6, r6, #4
 801fcba:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801fcbe:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801fcc2:	9601      	str	r6, [sp, #4]
 801fcc4:	ea4a 0101 	orr.w	r1, sl, r1
 801fcc8:	fa1f f689 	uxth.w	r6, r9
 801fccc:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 801fcd0:	fb10 f90e 	smulbb	r9, r0, lr
 801fcd4:	ea4f 09e9 	mov.w	r9, r9, asr #3
 801fcd8:	9602      	str	r6, [sp, #8]
 801fcda:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801fcde:	460e      	mov	r6, r1
 801fce0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801fce4:	f1ce 0110 	rsb	r1, lr, #16
 801fce8:	1a09      	subs	r1, r1, r0
 801fcea:	ea4a 0303 	orr.w	r3, sl, r3
 801fcee:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 801fcf2:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801fcf6:	4343      	muls	r3, r0
 801fcf8:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 801fcfc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801fd00:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801fd04:	fb01 3106 	mla	r1, r1, r6, r3
 801fd08:	ea4a 0202 	orr.w	r2, sl, r2
 801fd0c:	fb09 1302 	mla	r3, r9, r2, r1
 801fd10:	9901      	ldr	r1, [sp, #4]
 801fd12:	9802      	ldr	r0, [sp, #8]
 801fd14:	9a03      	ldr	r2, [sp, #12]
 801fd16:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801fd1a:	1a09      	subs	r1, r1, r0
 801fd1c:	9801      	ldr	r0, [sp, #4]
 801fd1e:	8812      	ldrh	r2, [r2, #0]
 801fd20:	eba0 0608 	sub.w	r6, r0, r8
 801fd24:	b2b6      	uxth	r6, r6
 801fd26:	b289      	uxth	r1, r1
 801fd28:	4374      	muls	r4, r6
 801fd2a:	fb0c 4401 	mla	r4, ip, r1, r4
 801fd2e:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 801fd32:	9902      	ldr	r1, [sp, #8]
 801fd34:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801fd38:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801fd3c:	fb01 4505 	mla	r5, r1, r5, r4
 801fd40:	ea4a 0b0b 	orr.w	fp, sl, fp
 801fd44:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801fd48:	fb0e 3e0b 	mla	lr, lr, fp, r3
 801fd4c:	fb08 5707 	mla	r7, r8, r7, r5
 801fd50:	ea4f 535e 	mov.w	r3, lr, lsr #21
 801fd54:	1211      	asrs	r1, r2, #8
 801fd56:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801fd5a:	ea6f 2727 	mvn.w	r7, r7, asr #8
 801fd5e:	b2ff      	uxtb	r7, r7
 801fd60:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fd64:	10d0      	asrs	r0, r2, #3
 801fd66:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801fd6a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801fd6e:	00d2      	lsls	r2, r2, #3
 801fd70:	4379      	muls	r1, r7
 801fd72:	ea43 0e0e 	orr.w	lr, r3, lr
 801fd76:	b2d2      	uxtb	r2, r2
 801fd78:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801fd7c:	fa1f f38e 	uxth.w	r3, lr
 801fd80:	4378      	muls	r0, r7
 801fd82:	4357      	muls	r7, r2
 801fd84:	1c4a      	adds	r2, r1, #1
 801fd86:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801fd8a:	1219      	asrs	r1, r3, #8
 801fd8c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801fd90:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801fd94:	4a15      	ldr	r2, [pc, #84]	; (801fdec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x32c>)
 801fd96:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801fd9a:	1c42      	adds	r2, r0, #1
 801fd9c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801fda0:	10da      	asrs	r2, r3, #3
 801fda2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801fda6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801fdaa:	00d2      	lsls	r2, r2, #3
 801fdac:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fdb0:	430a      	orrs	r2, r1
 801fdb2:	00db      	lsls	r3, r3, #3
 801fdb4:	1c79      	adds	r1, r7, #1
 801fdb6:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801fdba:	b2db      	uxtb	r3, r3
 801fdbc:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801fdc0:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801fdc4:	4313      	orrs	r3, r2
 801fdc6:	9a03      	ldr	r2, [sp, #12]
 801fdc8:	8013      	strh	r3, [r2, #0]
 801fdca:	b005      	add	sp, #20
 801fdcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdd0:	280f      	cmp	r0, #15
 801fdd2:	f63f af42 	bhi.w	801fc5a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 801fdd6:	4677      	mov	r7, lr
 801fdd8:	4675      	mov	r5, lr
 801fdda:	4672      	mov	r2, lr
 801fddc:	46f3      	mov	fp, lr
 801fdde:	e762      	b.n	801fca6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 801fde0:	0802814e 	.word	0x0802814e
 801fde4:	08028711 	.word	0x08028711
 801fde8:	08028237 	.word	0x08028237
 801fdec:	fffff800 	.word	0xfffff800

0801fdf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fdf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdf4:	ed2d 8b08 	vpush	{d8-d11}
 801fdf8:	b093      	sub	sp, #76	; 0x4c
 801fdfa:	eeb0 aa40 	vmov.f32	s20, s0
 801fdfe:	9210      	str	r2, [sp, #64]	; 0x40
 801fe00:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801fe02:	910e      	str	r1, [sp, #56]	; 0x38
 801fe04:	9306      	str	r3, [sp, #24]
 801fe06:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801fe0a:	9011      	str	r0, [sp, #68]	; 0x44
 801fe0c:	6850      	ldr	r0, [r2, #4]
 801fe0e:	6812      	ldr	r2, [r2, #0]
 801fe10:	fb00 1303 	mla	r3, r0, r3, r1
 801fe14:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801fe18:	9307      	str	r3, [sp, #28]
 801fe1a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fe1c:	681b      	ldr	r3, [r3, #0]
 801fe1e:	9308      	str	r3, [sp, #32]
 801fe20:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fe22:	685b      	ldr	r3, [r3, #4]
 801fe24:	9309      	str	r3, [sp, #36]	; 0x24
 801fe26:	eef0 9a60 	vmov.f32	s19, s1
 801fe2a:	eeb0 9a41 	vmov.f32	s18, s2
 801fe2e:	eeb0 8a62 	vmov.f32	s16, s5
 801fe32:	eef0 8a43 	vmov.f32	s17, s6
 801fe36:	eef0 ba44 	vmov.f32	s23, s8
 801fe3a:	eeb0 ba64 	vmov.f32	s22, s9
 801fe3e:	eef0 aa45 	vmov.f32	s21, s10
 801fe42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fe44:	2b00      	cmp	r3, #0
 801fe46:	dc03      	bgt.n	801fe50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fe48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fe4a:	2b00      	cmp	r3, #0
 801fe4c:	f340 83b6 	ble.w	80205bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 801fe50:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fe52:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fe56:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fe5a:	1e48      	subs	r0, r1, #1
 801fe5c:	1e55      	subs	r5, r2, #1
 801fe5e:	9b06      	ldr	r3, [sp, #24]
 801fe60:	2b00      	cmp	r3, #0
 801fe62:	f340 8199 	ble.w	8020198 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 801fe66:	9e25      	ldr	r6, [sp, #148]	; 0x94
 801fe68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fe6a:	1436      	asrs	r6, r6, #16
 801fe6c:	ea4f 4323 	mov.w	r3, r3, asr #16
 801fe70:	d406      	bmi.n	801fe80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fe72:	4286      	cmp	r6, r0
 801fe74:	da04      	bge.n	801fe80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fe76:	2b00      	cmp	r3, #0
 801fe78:	db02      	blt.n	801fe80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fe7a:	42ab      	cmp	r3, r5
 801fe7c:	f2c0 818d 	blt.w	802019a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801fe80:	3601      	adds	r6, #1
 801fe82:	f100 817a 	bmi.w	802017a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801fe86:	42b1      	cmp	r1, r6
 801fe88:	f2c0 8177 	blt.w	802017a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801fe8c:	3301      	adds	r3, #1
 801fe8e:	f100 8174 	bmi.w	802017a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801fe92:	429a      	cmp	r2, r3
 801fe94:	f2c0 8171 	blt.w	802017a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801fe98:	9b06      	ldr	r3, [sp, #24]
 801fe9a:	9f07      	ldr	r7, [sp, #28]
 801fe9c:	930f      	str	r3, [sp, #60]	; 0x3c
 801fe9e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801fea2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fea4:	2b00      	cmp	r3, #0
 801fea6:	f340 819a 	ble.w	80201de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801feaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801feac:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801feae:	1418      	asrs	r0, r3, #16
 801feb0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801feb2:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801feb6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801feb8:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801febc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801febe:	142d      	asrs	r5, r5, #16
 801fec0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801fec4:	f100 81ee 	bmi.w	80202a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801fec8:	f102 3eff 	add.w	lr, r2, #4294967295
 801fecc:	4575      	cmp	r5, lr
 801fece:	f280 81e9 	bge.w	80202a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801fed2:	2800      	cmp	r0, #0
 801fed4:	f2c0 81e6 	blt.w	80202a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801fed8:	f103 3eff 	add.w	lr, r3, #4294967295
 801fedc:	4570      	cmp	r0, lr
 801fede:	f280 81e1 	bge.w	80202a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801fee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fee4:	b212      	sxth	r2, r2
 801fee6:	fb00 5002 	mla	r0, r0, r2, r5
 801feea:	fa1f fe81 	uxth.w	lr, r1
 801feee:	eb03 0a00 	add.w	sl, r3, r0
 801fef2:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801fef6:	f813 9000 	ldrb.w	r9, [r3, r0]
 801fefa:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801fefe:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801ff02:	b29b      	uxth	r3, r3
 801ff04:	f1bc 0f00 	cmp.w	ip, #0
 801ff08:	f000 81af 	beq.w	802026a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 801ff0c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801ff10:	940a      	str	r4, [sp, #40]	; 0x28
 801ff12:	eb0a 0b02 	add.w	fp, sl, r2
 801ff16:	fa1f fa8c 	uxth.w	sl, ip
 801ff1a:	fb0a fe0e 	mul.w	lr, sl, lr
 801ff1e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801ff22:	fa1f fa8a 	uxth.w	sl, sl
 801ff26:	eba5 050e 	sub.w	r5, r5, lr
 801ff2a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801ff2e:	940b      	str	r4, [sp, #44]	; 0x2c
 801ff30:	eba3 030a 	sub.w	r3, r3, sl
 801ff34:	b2ad      	uxth	r5, r5
 801ff36:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ff38:	b29b      	uxth	r3, r3
 801ff3a:	fb08 f505 	mul.w	r5, r8, r5
 801ff3e:	fb09 5303 	mla	r3, r9, r3, r5
 801ff42:	fb0a 3304 	mla	r3, sl, r4, r3
 801ff46:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ff48:	fb0e 3304 	mla	r3, lr, r4, r3
 801ff4c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ff50:	2b00      	cmp	r3, #0
 801ff52:	f000 8105 	beq.w	8020160 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801ff56:	9c08      	ldr	r4, [sp, #32]
 801ff58:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ff5c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801ff60:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801ff64:	f000 8186 	beq.w	8020274 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 801ff68:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801ff6c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801ff70:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ff74:	fb09 f000 	mul.w	r0, r9, r0
 801ff78:	fb0a fe0e 	mul.w	lr, sl, lr
 801ff7c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801ff80:	f100 0b20 	add.w	fp, r0, #32
 801ff84:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801ff88:	44ce      	add	lr, r9
 801ff8a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801ff8e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ff92:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801ff96:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ff9a:	ea4e 0909 	orr.w	r9, lr, r9
 801ff9e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801ffa2:	8868      	ldrh	r0, [r5, #2]
 801ffa4:	d019      	beq.n	801ffda <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ffa6:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801ffaa:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801ffae:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ffb2:	fb08 f800 	mul.w	r8, r8, r0
 801ffb6:	fb0a fe0e 	mul.w	lr, sl, lr
 801ffba:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801ffbe:	f108 0b20 	add.w	fp, r8, #32
 801ffc2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801ffc6:	4486      	add	lr, r0
 801ffc8:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801ffcc:	0a00      	lsrs	r0, r0, #8
 801ffce:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801ffd2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ffd6:	ea4e 0000 	orr.w	r0, lr, r0
 801ffda:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801ffde:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801ffe2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801ffe6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801ffea:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ffee:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801fff2:	ea4e 0909 	orr.w	r9, lr, r9
 801fff6:	ea4a 0000 	orr.w	r0, sl, r0
 801fffa:	f1bc 0f00 	cmp.w	ip, #0
 801fffe:	f000 813b 	beq.w	8020278 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8020002:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8020006:	3a01      	subs	r2, #1
 8020008:	0052      	lsls	r2, r2, #1
 802000a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802000c:	3202      	adds	r2, #2
 802000e:	2cff      	cmp	r4, #255	; 0xff
 8020010:	eb05 0e02 	add.w	lr, r5, r2
 8020014:	5aaa      	ldrh	r2, [r5, r2]
 8020016:	d018      	beq.n	802004a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8020018:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 802001c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020020:	fb04 fa02 	mul.w	sl, r4, r2
 8020024:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8020028:	fb08 f805 	mul.w	r8, r8, r5
 802002c:	f10a 0520 	add.w	r5, sl, #32
 8020030:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8020034:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8020038:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802003c:	4442      	add	r2, r8
 802003e:	0a2d      	lsrs	r5, r5, #8
 8020040:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8020044:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020048:	432a      	orrs	r2, r5
 802004a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802004c:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8020050:	2cff      	cmp	r4, #255	; 0xff
 8020052:	d01a      	beq.n	802008a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8020054:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8020058:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802005c:	fb04 fa05 	mul.w	sl, r4, r5
 8020060:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8020064:	fb08 f80e 	mul.w	r8, r8, lr
 8020068:	f10a 0e20 	add.w	lr, sl, #32
 802006c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8020070:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8020074:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8020078:	4445      	add	r5, r8
 802007a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802007e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8020082:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8020086:	ea45 050e 	orr.w	r5, r5, lr
 802008a:	fb1c fe01 	smulbb	lr, ip, r1
 802008e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8020092:	f1cc 0810 	rsb	r8, ip, #16
 8020096:	eba8 0801 	sub.w	r8, r8, r1
 802009a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802009e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80200a2:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80200a6:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80200aa:	4341      	muls	r1, r0
 80200ac:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80200b0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80200b4:	ea4a 0202 	orr.w	r2, sl, r2
 80200b8:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80200bc:	fb09 1108 	mla	r1, r9, r8, r1
 80200c0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80200c4:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80200c8:	fb0c 1102 	mla	r1, ip, r2, r1
 80200cc:	ea4b 0505 	orr.w	r5, fp, r5
 80200d0:	fb0e 1e05 	mla	lr, lr, r5, r1
 80200d4:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80200d8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80200dc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80200e0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80200e4:	ea42 0e0e 	orr.w	lr, r2, lr
 80200e8:	fa1f f28e 	uxth.w	r2, lr
 80200ec:	2bff      	cmp	r3, #255	; 0xff
 80200ee:	f000 80d7 	beq.w	80202a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80200f2:	f8b7 c000 	ldrh.w	ip, [r7]
 80200f6:	43db      	mvns	r3, r3
 80200f8:	ea4f 202c 	mov.w	r0, ip, asr #8
 80200fc:	fa5f fe83 	uxtb.w	lr, r3
 8020100:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020104:	fb00 f00e 	mul.w	r0, r0, lr
 8020108:	1c41      	adds	r1, r0, #1
 802010a:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802010e:	1210      	asrs	r0, r2, #8
 8020110:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8020114:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020118:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 802011c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8020120:	496f      	ldr	r1, [pc, #444]	; (80202e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>)
 8020122:	fb05 f50e 	mul.w	r5, r5, lr
 8020126:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 802012a:	1c69      	adds	r1, r5, #1
 802012c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8020130:	10d1      	asrs	r1, r2, #3
 8020132:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020136:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 802013a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802013e:	b2db      	uxtb	r3, r3
 8020140:	00c9      	lsls	r1, r1, #3
 8020142:	fb03 f30e 	mul.w	r3, r3, lr
 8020146:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802014a:	4301      	orrs	r1, r0
 802014c:	1c58      	adds	r0, r3, #1
 802014e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020152:	00d3      	lsls	r3, r2, #3
 8020154:	b2db      	uxtb	r3, r3
 8020156:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802015a:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 802015e:	803b      	strh	r3, [r7, #0]
 8020160:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020162:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8020164:	4413      	add	r3, r2
 8020166:	9325      	str	r3, [sp, #148]	; 0x94
 8020168:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802016a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802016c:	441a      	add	r2, r3
 802016e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020170:	9226      	str	r2, [sp, #152]	; 0x98
 8020172:	3b01      	subs	r3, #1
 8020174:	3702      	adds	r7, #2
 8020176:	930f      	str	r3, [sp, #60]	; 0x3c
 8020178:	e693      	b.n	801fea2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802017a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802017c:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 802017e:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8020180:	4433      	add	r3, r6
 8020182:	9325      	str	r3, [sp, #148]	; 0x94
 8020184:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020186:	441c      	add	r4, r3
 8020188:	9b06      	ldr	r3, [sp, #24]
 802018a:	9426      	str	r4, [sp, #152]	; 0x98
 802018c:	3b01      	subs	r3, #1
 802018e:	9306      	str	r3, [sp, #24]
 8020190:	9b07      	ldr	r3, [sp, #28]
 8020192:	3302      	adds	r3, #2
 8020194:	9307      	str	r3, [sp, #28]
 8020196:	e662      	b.n	801fe5e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020198:	d028      	beq.n	80201ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 802019a:	9b06      	ldr	r3, [sp, #24]
 802019c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802019e:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80201a0:	3b01      	subs	r3, #1
 80201a2:	fb00 5003 	mla	r0, r0, r3, r5
 80201a6:	1400      	asrs	r0, r0, #16
 80201a8:	f53f ae76 	bmi.w	801fe98 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80201ac:	3901      	subs	r1, #1
 80201ae:	4288      	cmp	r0, r1
 80201b0:	f6bf ae72 	bge.w	801fe98 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80201b4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80201b6:	9826      	ldr	r0, [sp, #152]	; 0x98
 80201b8:	fb01 0303 	mla	r3, r1, r3, r0
 80201bc:	141b      	asrs	r3, r3, #16
 80201be:	f53f ae6b 	bmi.w	801fe98 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80201c2:	3a01      	subs	r2, #1
 80201c4:	4293      	cmp	r3, r2
 80201c6:	f6bf ae67 	bge.w	801fe98 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80201ca:	9b06      	ldr	r3, [sp, #24]
 80201cc:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80201d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80201d2:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80201d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80201d8:	2b00      	cmp	r3, #0
 80201da:	f300 8083 	bgt.w	80202e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 80201de:	9b06      	ldr	r3, [sp, #24]
 80201e0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80201e4:	9b07      	ldr	r3, [sp, #28]
 80201e6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80201ea:	9307      	str	r3, [sp, #28]
 80201ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80201ee:	2b00      	cmp	r3, #0
 80201f0:	f340 81e4 	ble.w	80205bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 80201f4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80201f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80201fc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020200:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020202:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020206:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802020a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802020e:	eef0 6a48 	vmov.f32	s13, s16
 8020212:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020216:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802021a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802021e:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8020222:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020226:	eef0 6a68 	vmov.f32	s13, s17
 802022a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802022e:	ee18 2a10 	vmov	r2, s16
 8020232:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020236:	fb92 f3f3 	sdiv	r3, r2, r3
 802023a:	ee18 2a90 	vmov	r2, s17
 802023e:	9327      	str	r3, [sp, #156]	; 0x9c
 8020240:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020242:	fb92 f3f3 	sdiv	r3, r2, r3
 8020246:	9328      	str	r3, [sp, #160]	; 0xa0
 8020248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802024a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802024c:	3b01      	subs	r3, #1
 802024e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020252:	930e      	str	r3, [sp, #56]	; 0x38
 8020254:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020256:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 802025a:	bf08      	it	eq
 802025c:	4613      	moveq	r3, r2
 802025e:	9306      	str	r3, [sp, #24]
 8020260:	eef0 8a67 	vmov.f32	s17, s15
 8020264:	eeb0 8a47 	vmov.f32	s16, s14
 8020268:	e5eb      	b.n	801fe42 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802026a:	fb08 f505 	mul.w	r5, r8, r5
 802026e:	fb09 5303 	mla	r3, r9, r3, r5
 8020272:	e66b      	b.n	801ff4c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8020274:	4681      	mov	r9, r0
 8020276:	e692      	b.n	801ff9e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8020278:	f1c1 0210 	rsb	r2, r1, #16
 802027c:	4341      	muls	r1, r0
 802027e:	fb09 1902 	mla	r9, r9, r2, r1
 8020282:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8020286:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802028a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802028e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020292:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8020296:	ea42 0909 	orr.w	r9, r2, r9
 802029a:	fa1f f289 	uxth.w	r2, r9
 802029e:	e725      	b.n	80200ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80202a0:	803a      	strh	r2, [r7, #0]
 80202a2:	e75d      	b.n	8020160 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80202a4:	f115 0e01 	adds.w	lr, r5, #1
 80202a8:	f53f af5a 	bmi.w	8020160 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80202ac:	4572      	cmp	r2, lr
 80202ae:	f6ff af57 	blt.w	8020160 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80202b2:	f110 0e01 	adds.w	lr, r0, #1
 80202b6:	f53f af53 	bmi.w	8020160 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80202ba:	4573      	cmp	r3, lr
 80202bc:	f6ff af50 	blt.w	8020160 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80202c0:	b21b      	sxth	r3, r3
 80202c2:	b212      	sxth	r2, r2
 80202c4:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80202c8:	e9cd 5002 	strd	r5, r0, [sp, #8]
 80202cc:	9301      	str	r3, [sp, #4]
 80202ce:	9200      	str	r2, [sp, #0]
 80202d0:	4639      	mov	r1, r7
 80202d2:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80202d6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80202d8:	f7ff fbf2 	bl	801fac0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80202dc:	e740      	b.n	8020160 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80202de:	bf00      	nop
 80202e0:	fffff800 	.word	0xfffff800
 80202e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80202e6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80202ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80202ec:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80202f0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80202f2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80202f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80202f8:	141f      	asrs	r7, r3, #16
 80202fa:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80202fc:	141b      	asrs	r3, r3, #16
 80202fe:	fb01 3707 	mla	r7, r1, r7, r3
 8020302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020304:	fa1f fc82 	uxth.w	ip, r2
 8020308:	eb03 0a07 	add.w	sl, r3, r7
 802030c:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8020310:	f813 9007 	ldrb.w	r9, [r3, r7]
 8020314:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8020318:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802031c:	b29b      	uxth	r3, r3
 802031e:	2d00      	cmp	r5, #0
 8020320:	f000 8131 	beq.w	8020586 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x796>
 8020324:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8020328:	940c      	str	r4, [sp, #48]	; 0x30
 802032a:	eb0a 0b01 	add.w	fp, sl, r1
 802032e:	fa1f fa85 	uxth.w	sl, r5
 8020332:	fb0a fc0c 	mul.w	ip, sl, ip
 8020336:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 802033a:	fa1f fa8a 	uxth.w	sl, sl
 802033e:	eba0 000c 	sub.w	r0, r0, ip
 8020342:	eba3 030a 	sub.w	r3, r3, sl
 8020346:	b280      	uxth	r0, r0
 8020348:	fb08 f000 	mul.w	r0, r8, r0
 802034c:	b29b      	uxth	r3, r3
 802034e:	fb09 0303 	mla	r3, r9, r3, r0
 8020352:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020354:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8020358:	940d      	str	r4, [sp, #52]	; 0x34
 802035a:	fb0a 3300 	mla	r3, sl, r0, r3
 802035e:	fb0c 3304 	mla	r3, ip, r4, r3
 8020362:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020366:	2b00      	cmp	r3, #0
 8020368:	f000 80ff 	beq.w	802056a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77a>
 802036c:	9808      	ldr	r0, [sp, #32]
 802036e:	9c08      	ldr	r4, [sp, #32]
 8020370:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020374:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8020378:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802037c:	f000 8108 	beq.w	8020590 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a0>
 8020380:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8020384:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8020388:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802038c:	fb09 f707 	mul.w	r7, r9, r7
 8020390:	fb0a fc0c 	mul.w	ip, sl, ip
 8020394:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8020398:	f107 0b20 	add.w	fp, r7, #32
 802039c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80203a0:	44cc      	add	ip, r9
 80203a2:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80203a6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80203aa:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80203ae:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80203b2:	ea4c 0909 	orr.w	r9, ip, r9
 80203b6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80203ba:	8847      	ldrh	r7, [r0, #2]
 80203bc:	d019      	beq.n	80203f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x602>
 80203be:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80203c2:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80203c6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80203ca:	fb08 f807 	mul.w	r8, r8, r7
 80203ce:	fb0a fc0c 	mul.w	ip, sl, ip
 80203d2:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80203d6:	f108 0b20 	add.w	fp, r8, #32
 80203da:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80203de:	44bc      	add	ip, r7
 80203e0:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80203e4:	0a3f      	lsrs	r7, r7, #8
 80203e6:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80203ea:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80203ee:	ea4c 0707 	orr.w	r7, ip, r7
 80203f2:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80203f6:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80203fa:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80203fe:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8020402:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020406:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802040a:	ea4c 0909 	orr.w	r9, ip, r9
 802040e:	ea4a 0707 	orr.w	r7, sl, r7
 8020412:	2d00      	cmp	r5, #0
 8020414:	f000 80be 	beq.w	8020594 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8020418:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802041c:	3901      	subs	r1, #1
 802041e:	0049      	lsls	r1, r1, #1
 8020420:	3102      	adds	r1, #2
 8020422:	eb00 0c01 	add.w	ip, r0, r1
 8020426:	5a41      	ldrh	r1, [r0, r1]
 8020428:	980c      	ldr	r0, [sp, #48]	; 0x30
 802042a:	28ff      	cmp	r0, #255	; 0xff
 802042c:	d019      	beq.n	8020462 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x672>
 802042e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020430:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8020434:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020438:	fb04 fa01 	mul.w	sl, r4, r1
 802043c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8020440:	fb08 f800 	mul.w	r8, r8, r0
 8020444:	f10a 0020 	add.w	r0, sl, #32
 8020448:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802044c:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8020450:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8020454:	4441      	add	r1, r8
 8020456:	0a00      	lsrs	r0, r0, #8
 8020458:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802045c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020460:	4301      	orrs	r1, r0
 8020462:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020464:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8020468:	2cff      	cmp	r4, #255	; 0xff
 802046a:	d01a      	beq.n	80204a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b2>
 802046c:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8020470:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020474:	fb04 fa00 	mul.w	sl, r4, r0
 8020478:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802047c:	fb08 f80c 	mul.w	r8, r8, ip
 8020480:	f10a 0c20 	add.w	ip, sl, #32
 8020484:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8020488:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802048c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8020490:	4440      	add	r0, r8
 8020492:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020496:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 802049a:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802049e:	ea40 000c 	orr.w	r0, r0, ip
 80204a2:	fb15 fc02 	smulbb	ip, r5, r2
 80204a6:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80204aa:	f1c5 0810 	rsb	r8, r5, #16
 80204ae:	eba8 0802 	sub.w	r8, r8, r2
 80204b2:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80204b6:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80204ba:	437a      	muls	r2, r7
 80204bc:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80204c0:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80204c4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80204c8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80204cc:	fb09 2208 	mla	r2, r9, r8, r2
 80204d0:	ea4a 0101 	orr.w	r1, sl, r1
 80204d4:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80204d8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80204dc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80204e0:	fb05 2201 	mla	r2, r5, r1, r2
 80204e4:	ea4b 0000 	orr.w	r0, fp, r0
 80204e8:	fb0c 2200 	mla	r2, ip, r0, r2
 80204ec:	0d57      	lsrs	r7, r2, #21
 80204ee:	0952      	lsrs	r2, r2, #5
 80204f0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80204f4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80204f8:	433a      	orrs	r2, r7
 80204fa:	2bff      	cmp	r3, #255	; 0xff
 80204fc:	b292      	uxth	r2, r2
 80204fe:	d05a      	beq.n	80205b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c6>
 8020500:	f8be 7000 	ldrh.w	r7, [lr]
 8020504:	4c30      	ldr	r4, [pc, #192]	; (80205c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 8020506:	43db      	mvns	r3, r3
 8020508:	1238      	asrs	r0, r7, #8
 802050a:	fa5f fc83 	uxtb.w	ip, r3
 802050e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020512:	10fd      	asrs	r5, r7, #3
 8020514:	fb00 f00c 	mul.w	r0, r0, ip
 8020518:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802051c:	fb05 f10c 	mul.w	r1, r5, ip
 8020520:	1c45      	adds	r5, r0, #1
 8020522:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8020526:	1215      	asrs	r5, r2, #8
 8020528:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802052c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8020530:	1c4d      	adds	r5, r1, #1
 8020532:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8020536:	10d1      	asrs	r1, r2, #3
 8020538:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802053c:	00fb      	lsls	r3, r7, #3
 802053e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8020542:	b2db      	uxtb	r3, r3
 8020544:	00c9      	lsls	r1, r1, #3
 8020546:	fb03 f30c 	mul.w	r3, r3, ip
 802054a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802054e:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8020552:	4308      	orrs	r0, r1
 8020554:	00d2      	lsls	r2, r2, #3
 8020556:	1c59      	adds	r1, r3, #1
 8020558:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802055c:	b2d1      	uxtb	r1, r2
 802055e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8020562:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 8020566:	f8ae 0000 	strh.w	r0, [lr]
 802056a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802056c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802056e:	4413      	add	r3, r2
 8020570:	9325      	str	r3, [sp, #148]	; 0x94
 8020572:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8020574:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020576:	441a      	add	r2, r3
 8020578:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802057a:	9226      	str	r2, [sp, #152]	; 0x98
 802057c:	3b01      	subs	r3, #1
 802057e:	f10e 0e02 	add.w	lr, lr, #2
 8020582:	930f      	str	r3, [sp, #60]	; 0x3c
 8020584:	e627      	b.n	80201d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8020586:	fb08 f000 	mul.w	r0, r8, r0
 802058a:	fb09 0303 	mla	r3, r9, r3, r0
 802058e:	e6e8      	b.n	8020362 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x572>
 8020590:	46b9      	mov	r9, r7
 8020592:	e710      	b.n	80203b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8020594:	f1c2 0110 	rsb	r1, r2, #16
 8020598:	437a      	muls	r2, r7
 802059a:	fb09 2901 	mla	r9, r9, r1, r2
 802059e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80205a2:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80205a6:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80205aa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80205ae:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80205b2:	4302      	orrs	r2, r0
 80205b4:	e7a1      	b.n	80204fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 80205b6:	f8ae 2000 	strh.w	r2, [lr]
 80205ba:	e7d6      	b.n	802056a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77a>
 80205bc:	b013      	add	sp, #76	; 0x4c
 80205be:	ecbd 8b08 	vpop	{d8-d11}
 80205c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80205c6:	bf00      	nop
 80205c8:	fffff800 	.word	0xfffff800

080205cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 80205cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80205d0:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 80205d4:	fb0c 4e03 	mla	lr, ip, r3, r4
 80205d8:	f1bc 0f00 	cmp.w	ip, #0
 80205dc:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 80205e0:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 80205e4:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 80205e8:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80205ec:	8808      	ldrh	r0, [r1, #0]
 80205ee:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 80205f2:	db2f      	blt.n	8020654 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 80205f4:	45e2      	cmp	sl, ip
 80205f6:	dd2d      	ble.n	8020654 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 80205f8:	2c00      	cmp	r4, #0
 80205fa:	db29      	blt.n	8020650 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 80205fc:	42a3      	cmp	r3, r4
 80205fe:	dd27      	ble.n	8020650 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8020600:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 8020604:	1c62      	adds	r2, r4, #1
 8020606:	d428      	bmi.n	802065a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8020608:	4293      	cmp	r3, r2
 802060a:	dd26      	ble.n	802065a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 802060c:	b32f      	cbz	r7, 802065a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 802060e:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 8020612:	f11c 0c01 	adds.w	ip, ip, #1
 8020616:	d424      	bmi.n	8020662 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8020618:	45e2      	cmp	sl, ip
 802061a:	dd22      	ble.n	8020662 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 802061c:	2e00      	cmp	r6, #0
 802061e:	f000 809c 	beq.w	802075a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18e>
 8020622:	2c00      	cmp	r4, #0
 8020624:	db1b      	blt.n	802065e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8020626:	42a3      	cmp	r3, r4
 8020628:	dd19      	ble.n	802065e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 802062a:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 802062e:	3401      	adds	r4, #1
 8020630:	d41a      	bmi.n	8020668 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8020632:	42a3      	cmp	r3, r4
 8020634:	dd18      	ble.n	8020668 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8020636:	b1cf      	cbz	r7, 802066c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 8020638:	3301      	adds	r3, #1
 802063a:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 802063e:	2f0f      	cmp	r7, #15
 8020640:	d915      	bls.n	802066e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 8020642:	4b49      	ldr	r3, [pc, #292]	; (8020768 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 8020644:	4a49      	ldr	r2, [pc, #292]	; (802076c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 8020646:	484a      	ldr	r0, [pc, #296]	; (8020770 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 8020648:	f240 11ef 	movw	r1, #495	; 0x1ef
 802064c:	f003 f87a 	bl	8023744 <__assert_func>
 8020650:	4681      	mov	r9, r0
 8020652:	e7d7      	b.n	8020604 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 8020654:	4686      	mov	lr, r0
 8020656:	4681      	mov	r9, r0
 8020658:	e7db      	b.n	8020612 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 802065a:	4686      	mov	lr, r0
 802065c:	e7d9      	b.n	8020612 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 802065e:	4684      	mov	ip, r0
 8020660:	e7e5      	b.n	802062e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 8020662:	4603      	mov	r3, r0
 8020664:	4684      	mov	ip, r0
 8020666:	e7ea      	b.n	802063e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8020668:	4603      	mov	r3, r0
 802066a:	e7e8      	b.n	802063e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 802066c:	4603      	mov	r3, r0
 802066e:	2e0f      	cmp	r6, #15
 8020670:	d8e7      	bhi.n	8020642 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8020672:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8020676:	fb17 f806 	smulbb	r8, r7, r6
 802067a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802067e:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 8020682:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8020686:	ea4f 08e8 	mov.w	r8, r8, asr #3
 802068a:	ea44 0909 	orr.w	r9, r4, r9
 802068e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020692:	f1c6 0410 	rsb	r4, r6, #16
 8020696:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802069a:	1be4      	subs	r4, r4, r7
 802069c:	041a      	lsls	r2, r3, #16
 802069e:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 80206a2:	ea4a 0e0e 	orr.w	lr, sl, lr
 80206a6:	fb07 fe0e 	mul.w	lr, r7, lr
 80206aa:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80206ae:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 80206b2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80206b6:	fb04 e409 	mla	r4, r4, r9, lr
 80206ba:	4313      	orrs	r3, r2
 80206bc:	ea4f 420c 	mov.w	r2, ip, lsl #16
 80206c0:	fb08 4303 	mla	r3, r8, r3, r4
 80206c4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80206c8:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 80206cc:	4322      	orrs	r2, r4
 80206ce:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 80206d2:	fb06 3202 	mla	r2, r6, r2, r3
 80206d6:	0d53      	lsrs	r3, r2, #21
 80206d8:	0952      	lsrs	r2, r2, #5
 80206da:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80206de:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80206e2:	431a      	orrs	r2, r3
 80206e4:	b293      	uxth	r3, r2
 80206e6:	b2af      	uxth	r7, r5
 80206e8:	1202      	asrs	r2, r0, #8
 80206ea:	43ed      	mvns	r5, r5
 80206ec:	b2ed      	uxtb	r5, r5
 80206ee:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80206f2:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80206f6:	fb12 f205 	smulbb	r2, r2, r5
 80206fa:	10c6      	asrs	r6, r0, #3
 80206fc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020700:	fb0c 2c07 	mla	ip, ip, r7, r2
 8020704:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020708:	10da      	asrs	r2, r3, #3
 802070a:	fb16 f605 	smulbb	r6, r6, r5
 802070e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020712:	fb02 6207 	mla	r2, r2, r7, r6
 8020716:	b296      	uxth	r6, r2
 8020718:	00c2      	lsls	r2, r0, #3
 802071a:	00dc      	lsls	r4, r3, #3
 802071c:	b2d2      	uxtb	r2, r2
 802071e:	b2e4      	uxtb	r4, r4
 8020720:	fb12 f205 	smulbb	r2, r2, r5
 8020724:	fb04 2207 	mla	r2, r4, r7, r2
 8020728:	fa1f fc8c 	uxth.w	ip, ip
 802072c:	b292      	uxth	r2, r2
 802072e:	f10c 0301 	add.w	r3, ip, #1
 8020732:	1c50      	adds	r0, r2, #1
 8020734:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8020738:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802073c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020740:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8020744:	4313      	orrs	r3, r2
 8020746:	1c72      	adds	r2, r6, #1
 8020748:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 802074c:	0952      	lsrs	r2, r2, #5
 802074e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020752:	4313      	orrs	r3, r2
 8020754:	800b      	strh	r3, [r1, #0]
 8020756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802075a:	2f0f      	cmp	r7, #15
 802075c:	f63f af71 	bhi.w	8020642 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8020760:	4603      	mov	r3, r0
 8020762:	4684      	mov	ip, r0
 8020764:	e785      	b.n	8020672 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 8020766:	bf00      	nop
 8020768:	0802814e 	.word	0x0802814e
 802076c:	080287ba 	.word	0x080287ba
 8020770:	08028237 	.word	0x08028237

08020774 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020778:	ed2d 8b08 	vpush	{d8-d11}
 802077c:	b093      	sub	sp, #76	; 0x4c
 802077e:	461d      	mov	r5, r3
 8020780:	9210      	str	r2, [sp, #64]	; 0x40
 8020782:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020784:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 8020788:	920b      	str	r2, [sp, #44]	; 0x2c
 802078a:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 802078e:	910a      	str	r1, [sp, #40]	; 0x28
 8020790:	6859      	ldr	r1, [r3, #4]
 8020792:	681b      	ldr	r3, [r3, #0]
 8020794:	9011      	str	r0, [sp, #68]	; 0x44
 8020796:	fb01 2707 	mla	r7, r1, r7, r2
 802079a:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 802079e:	9307      	str	r3, [sp, #28]
 80207a0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80207a2:	681b      	ldr	r3, [r3, #0]
 80207a4:	9309      	str	r3, [sp, #36]	; 0x24
 80207a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80207a8:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 80207ac:	43db      	mvns	r3, r3
 80207ae:	b2db      	uxtb	r3, r3
 80207b0:	eeb0 aa40 	vmov.f32	s20, s0
 80207b4:	eef0 9a60 	vmov.f32	s19, s1
 80207b8:	eeb0 9a41 	vmov.f32	s18, s2
 80207bc:	eeb0 8a62 	vmov.f32	s16, s5
 80207c0:	eef0 8a43 	vmov.f32	s17, s6
 80207c4:	eef0 ba44 	vmov.f32	s23, s8
 80207c8:	eeb0 ba64 	vmov.f32	s22, s9
 80207cc:	eef0 aa45 	vmov.f32	s21, s10
 80207d0:	9308      	str	r3, [sp, #32]
 80207d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80207d4:	2b00      	cmp	r3, #0
 80207d6:	dc03      	bgt.n	80207e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80207d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80207da:	2b00      	cmp	r3, #0
 80207dc:	f340 8203 	ble.w	8020be6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 80207e0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80207e2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80207e6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80207ea:	1e48      	subs	r0, r1, #1
 80207ec:	f102 3cff 	add.w	ip, r2, #4294967295
 80207f0:	2d00      	cmp	r5, #0
 80207f2:	f340 80da 	ble.w	80209aa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80207f6:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80207fa:	ea4f 4326 	mov.w	r3, r6, asr #16
 80207fe:	d406      	bmi.n	802080e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8020800:	4586      	cmp	lr, r0
 8020802:	da04      	bge.n	802080e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8020804:	2b00      	cmp	r3, #0
 8020806:	db02      	blt.n	802080e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8020808:	4563      	cmp	r3, ip
 802080a:	f2c0 80cf 	blt.w	80209ac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 802080e:	f11e 0e01 	adds.w	lr, lr, #1
 8020812:	f100 80c1 	bmi.w	8020998 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8020816:	4571      	cmp	r1, lr
 8020818:	f2c0 80be 	blt.w	8020998 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802081c:	3301      	adds	r3, #1
 802081e:	f100 80bb 	bmi.w	8020998 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8020822:	429a      	cmp	r2, r3
 8020824:	f2c0 80b8 	blt.w	8020998 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8020828:	f8dd 801c 	ldr.w	r8, [sp, #28]
 802082c:	46a9      	mov	r9, r5
 802082e:	f1b9 0f00 	cmp.w	r9, #0
 8020832:	f340 80d8 	ble.w	80209e6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8020836:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020838:	1421      	asrs	r1, r4, #16
 802083a:	ea4f 4026 	mov.w	r0, r6, asr #16
 802083e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020842:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8020846:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802084a:	f100 8111 	bmi.w	8020a70 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802084e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8020852:	4551      	cmp	r1, sl
 8020854:	f280 810c 	bge.w	8020a70 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8020858:	2800      	cmp	r0, #0
 802085a:	f2c0 8109 	blt.w	8020a70 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802085e:	f103 3aff 	add.w	sl, r3, #4294967295
 8020862:	4550      	cmp	r0, sl
 8020864:	f280 8104 	bge.w	8020a70 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8020868:	fa0f f38e 	sxth.w	r3, lr
 802086c:	fb00 1103 	mla	r1, r0, r3, r1
 8020870:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020872:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8020876:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 802087a:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 802087e:	f1bc 0f00 	cmp.w	ip, #0
 8020882:	d007      	beq.n	8020894 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8020884:	005b      	lsls	r3, r3, #1
 8020886:	eb0a 0003 	add.w	r0, sl, r3
 802088a:	f83a 3003 	ldrh.w	r3, [sl, r3]
 802088e:	930c      	str	r3, [sp, #48]	; 0x30
 8020890:	8843      	ldrh	r3, [r0, #2]
 8020892:	930d      	str	r3, [sp, #52]	; 0x34
 8020894:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8020898:	fb12 f30c 	smulbb	r3, r2, ip
 802089c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80208a0:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80208a4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80208a8:	10db      	asrs	r3, r3, #3
 80208aa:	ea40 000e 	orr.w	r0, r0, lr
 80208ae:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80208b2:	f1cc 0e10 	rsb	lr, ip, #16
 80208b6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80208ba:	ebae 0e02 	sub.w	lr, lr, r2
 80208be:	ea4a 0101 	orr.w	r1, sl, r1
 80208c2:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80208c6:	4351      	muls	r1, r2
 80208c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80208ca:	9f08      	ldr	r7, [sp, #32]
 80208cc:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80208d0:	fb0e 1e00 	mla	lr, lr, r0, r1
 80208d4:	0410      	lsls	r0, r2, #16
 80208d6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80208da:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80208de:	4310      	orrs	r0, r2
 80208e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80208e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80208e4:	0412      	lsls	r2, r2, #16
 80208e6:	fb03 e000 	mla	r0, r3, r0, lr
 80208ea:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80208ee:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80208f2:	ea42 020e 	orr.w	r2, r2, lr
 80208f6:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80208fa:	fb03 0302 	mla	r3, r3, r2, r0
 80208fe:	0d5a      	lsrs	r2, r3, #21
 8020900:	095b      	lsrs	r3, r3, #5
 8020902:	f8b8 c000 	ldrh.w	ip, [r8]
 8020906:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802090a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802090e:	4313      	orrs	r3, r2
 8020910:	b29b      	uxth	r3, r3
 8020912:	ea4f 212c 	mov.w	r1, ip, asr #8
 8020916:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 802091a:	1218      	asrs	r0, r3, #8
 802091c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020920:	fb11 f107 	smulbb	r1, r1, r7
 8020924:	ea4f 0eec 	mov.w	lr, ip, asr #3
 8020928:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802092c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020930:	fb00 1002 	mla	r0, r0, r2, r1
 8020934:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8020938:	10d9      	asrs	r1, r3, #3
 802093a:	fa5f fc8c 	uxtb.w	ip, ip
 802093e:	00db      	lsls	r3, r3, #3
 8020940:	b2db      	uxtb	r3, r3
 8020942:	fb1c fc07 	smulbb	ip, ip, r7
 8020946:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802094a:	fb1e fe07 	smulbb	lr, lr, r7
 802094e:	fb01 e102 	mla	r1, r1, r2, lr
 8020952:	fb03 c202 	mla	r2, r3, r2, ip
 8020956:	b280      	uxth	r0, r0
 8020958:	b292      	uxth	r2, r2
 802095a:	1c43      	adds	r3, r0, #1
 802095c:	f102 0c01 	add.w	ip, r2, #1
 8020960:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020964:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020968:	b289      	uxth	r1, r1
 802096a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802096e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8020972:	4313      	orrs	r3, r2
 8020974:	1c4a      	adds	r2, r1, #1
 8020976:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802097a:	0949      	lsrs	r1, r1, #5
 802097c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020980:	430b      	orrs	r3, r1
 8020982:	f8a8 3000 	strh.w	r3, [r8]
 8020986:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020988:	441c      	add	r4, r3
 802098a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802098c:	f108 0802 	add.w	r8, r8, #2
 8020990:	441e      	add	r6, r3
 8020992:	f109 39ff 	add.w	r9, r9, #4294967295
 8020996:	e74a      	b.n	802082e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8020998:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802099a:	441c      	add	r4, r3
 802099c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802099e:	441e      	add	r6, r3
 80209a0:	9b07      	ldr	r3, [sp, #28]
 80209a2:	3302      	adds	r3, #2
 80209a4:	3d01      	subs	r5, #1
 80209a6:	9307      	str	r3, [sp, #28]
 80209a8:	e722      	b.n	80207f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80209aa:	d022      	beq.n	80209f2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80209ac:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80209ae:	1e6b      	subs	r3, r5, #1
 80209b0:	fb00 4003 	mla	r0, r0, r3, r4
 80209b4:	1400      	asrs	r0, r0, #16
 80209b6:	f53f af37 	bmi.w	8020828 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80209ba:	3901      	subs	r1, #1
 80209bc:	4288      	cmp	r0, r1
 80209be:	f6bf af33 	bge.w	8020828 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80209c2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80209c4:	fb01 6303 	mla	r3, r1, r3, r6
 80209c8:	141b      	asrs	r3, r3, #16
 80209ca:	f53f af2d 	bmi.w	8020828 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80209ce:	3a01      	subs	r2, #1
 80209d0:	4293      	cmp	r3, r2
 80209d2:	f6bf af29 	bge.w	8020828 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80209d6:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80209da:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 80209de:	46a8      	mov	r8, r5
 80209e0:	f1b8 0f00 	cmp.w	r8, #0
 80209e4:	dc5e      	bgt.n	8020aa4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80209e6:	9b07      	ldr	r3, [sp, #28]
 80209e8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80209ec:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80209f0:	9307      	str	r3, [sp, #28]
 80209f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80209f4:	2b00      	cmp	r3, #0
 80209f6:	f340 80f6 	ble.w	8020be6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 80209fa:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80209fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020a02:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020a06:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020a08:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020a0c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020a10:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020a14:	eef0 6a48 	vmov.f32	s13, s16
 8020a18:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020a1c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020a20:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020a24:	ee16 4a90 	vmov	r4, s13
 8020a28:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020a2c:	eef0 6a68 	vmov.f32	s13, s17
 8020a30:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020a34:	ee18 2a10 	vmov	r2, s16
 8020a38:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020a3c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a40:	ee18 2a90 	vmov	r2, s17
 8020a44:	9327      	str	r3, [sp, #156]	; 0x9c
 8020a46:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020a48:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a4c:	9328      	str	r3, [sp, #160]	; 0xa0
 8020a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020a50:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020a52:	3b01      	subs	r3, #1
 8020a54:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020a58:	930a      	str	r3, [sp, #40]	; 0x28
 8020a5a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020a5c:	ee16 6a90 	vmov	r6, s13
 8020a60:	bf14      	ite	ne
 8020a62:	461d      	movne	r5, r3
 8020a64:	4615      	moveq	r5, r2
 8020a66:	eef0 8a67 	vmov.f32	s17, s15
 8020a6a:	eeb0 8a47 	vmov.f32	s16, s14
 8020a6e:	e6b0      	b.n	80207d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8020a70:	f111 0a01 	adds.w	sl, r1, #1
 8020a74:	d487      	bmi.n	8020986 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8020a76:	45d6      	cmp	lr, sl
 8020a78:	db85      	blt.n	8020986 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8020a7a:	f110 0a01 	adds.w	sl, r0, #1
 8020a7e:	d482      	bmi.n	8020986 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8020a80:	4553      	cmp	r3, sl
 8020a82:	db80      	blt.n	8020986 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8020a84:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020a86:	9101      	str	r1, [sp, #4]
 8020a88:	b21b      	sxth	r3, r3
 8020a8a:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8020a8e:	9300      	str	r3, [sp, #0]
 8020a90:	e9cd c704 	strd	ip, r7, [sp, #16]
 8020a94:	fa0f f38e 	sxth.w	r3, lr
 8020a98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020a9a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020a9c:	4641      	mov	r1, r8
 8020a9e:	f7ff fd95 	bl	80205cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8020aa2:	e770      	b.n	8020986 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8020aa4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020aa6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020aa8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020aac:	1430      	asrs	r0, r6, #16
 8020aae:	1423      	asrs	r3, r4, #16
 8020ab0:	fb01 3000 	mla	r0, r1, r0, r3
 8020ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020ab6:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8020aba:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8020abe:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8020ac2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020ac6:	8858      	ldrh	r0, [r3, #2]
 8020ac8:	f1be 0f00 	cmp.w	lr, #0
 8020acc:	d00b      	beq.n	8020ae6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8020ace:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8020ad2:	3901      	subs	r1, #1
 8020ad4:	0049      	lsls	r1, r1, #1
 8020ad6:	3102      	adds	r1, #2
 8020ad8:	eb03 0b01 	add.w	fp, r3, r1
 8020adc:	5a5b      	ldrh	r3, [r3, r1]
 8020ade:	930e      	str	r3, [sp, #56]	; 0x38
 8020ae0:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8020ae4:	930f      	str	r3, [sp, #60]	; 0x3c
 8020ae6:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8020aea:	fb12 f30e 	smulbb	r3, r2, lr
 8020aee:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8020af2:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8020af6:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8020afa:	10db      	asrs	r3, r3, #3
 8020afc:	ea41 010c 	orr.w	r1, r1, ip
 8020b00:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020b04:	f1ce 0c10 	rsb	ip, lr, #16
 8020b08:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020b0c:	ebac 0c02 	sub.w	ip, ip, r2
 8020b10:	ea4b 0000 	orr.w	r0, fp, r0
 8020b14:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8020b18:	4350      	muls	r0, r2
 8020b1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020b1c:	9f08      	ldr	r7, [sp, #32]
 8020b1e:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8020b22:	fb0c 0c01 	mla	ip, ip, r1, r0
 8020b26:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8020b2a:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8020b2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020b30:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020b32:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020b36:	0412      	lsls	r2, r2, #16
 8020b38:	ea4b 0101 	orr.w	r1, fp, r1
 8020b3c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020b40:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8020b44:	fb03 c101 	mla	r1, r3, r1, ip
 8020b48:	4302      	orrs	r2, r0
 8020b4a:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8020b4e:	fb03 1202 	mla	r2, r3, r2, r1
 8020b52:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8020b56:	0952      	lsrs	r2, r2, #5
 8020b58:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8020b5c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8020b60:	f8b9 2000 	ldrh.w	r2, [r9]
 8020b64:	ea4b 0303 	orr.w	r3, fp, r3
 8020b68:	b29b      	uxth	r3, r3
 8020b6a:	1211      	asrs	r1, r2, #8
 8020b6c:	1218      	asrs	r0, r3, #8
 8020b6e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020b72:	fb11 f107 	smulbb	r1, r1, r7
 8020b76:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8020b7a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020b7e:	00d2      	lsls	r2, r2, #3
 8020b80:	fb00 100a 	mla	r0, r0, sl, r1
 8020b84:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8020b88:	10d9      	asrs	r1, r3, #3
 8020b8a:	b2d2      	uxtb	r2, r2
 8020b8c:	00db      	lsls	r3, r3, #3
 8020b8e:	fb1c fc07 	smulbb	ip, ip, r7
 8020b92:	fb12 f207 	smulbb	r2, r2, r7
 8020b96:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020b9a:	b2db      	uxtb	r3, r3
 8020b9c:	b280      	uxth	r0, r0
 8020b9e:	fb01 c10a 	mla	r1, r1, sl, ip
 8020ba2:	fb03 230a 	mla	r3, r3, sl, r2
 8020ba6:	b29b      	uxth	r3, r3
 8020ba8:	b289      	uxth	r1, r1
 8020baa:	1c42      	adds	r2, r0, #1
 8020bac:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020bb0:	f101 0c01 	add.w	ip, r1, #1
 8020bb4:	1c5a      	adds	r2, r3, #1
 8020bb6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020bba:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8020bbe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020bc0:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8020bc4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020bc8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8020bcc:	4310      	orrs	r0, r2
 8020bce:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8020bd2:	441c      	add	r4, r3
 8020bd4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020bd6:	ea40 000c 	orr.w	r0, r0, ip
 8020bda:	f829 0b02 	strh.w	r0, [r9], #2
 8020bde:	441e      	add	r6, r3
 8020be0:	f108 38ff 	add.w	r8, r8, #4294967295
 8020be4:	e6fc      	b.n	80209e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8020be6:	b013      	add	sp, #76	; 0x4c
 8020be8:	ecbd 8b08 	vpop	{d8-d11}
 8020bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020bf0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8020bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020bf4:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 8020bf8:	fb06 5c03 	mla	ip, r6, r3, r5
 8020bfc:	2e00      	cmp	r6, #0
 8020bfe:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 8020c02:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8020c06:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8020c0a:	8808      	ldrh	r0, [r1, #0]
 8020c0c:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8020c10:	db2e      	blt.n	8020c70 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8020c12:	45b0      	cmp	r8, r6
 8020c14:	dd2c      	ble.n	8020c70 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8020c16:	2d00      	cmp	r5, #0
 8020c18:	db28      	blt.n	8020c6c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8020c1a:	42ab      	cmp	r3, r5
 8020c1c:	dd26      	ble.n	8020c6c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8020c1e:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 8020c22:	1c6a      	adds	r2, r5, #1
 8020c24:	d427      	bmi.n	8020c76 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8020c26:	4293      	cmp	r3, r2
 8020c28:	dd25      	ble.n	8020c76 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8020c2a:	b324      	cbz	r4, 8020c76 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8020c2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8020c30:	3601      	adds	r6, #1
 8020c32:	d424      	bmi.n	8020c7e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8020c34:	45b0      	cmp	r8, r6
 8020c36:	dd22      	ble.n	8020c7e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8020c38:	b31f      	cbz	r7, 8020c82 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 8020c3a:	2d00      	cmp	r5, #0
 8020c3c:	db1d      	blt.n	8020c7a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8020c3e:	42ab      	cmp	r3, r5
 8020c40:	dd1b      	ble.n	8020c7a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8020c42:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 8020c46:	3501      	adds	r5, #1
 8020c48:	d405      	bmi.n	8020c56 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8020c4a:	42ab      	cmp	r3, r5
 8020c4c:	dd03      	ble.n	8020c56 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8020c4e:	b124      	cbz	r4, 8020c5a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 8020c50:	3301      	adds	r3, #1
 8020c52:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 8020c56:	2c0f      	cmp	r4, #15
 8020c58:	d801      	bhi.n	8020c5e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8020c5a:	2f0f      	cmp	r7, #15
 8020c5c:	d914      	bls.n	8020c88 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 8020c5e:	4b27      	ldr	r3, [pc, #156]	; (8020cfc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 8020c60:	4a27      	ldr	r2, [pc, #156]	; (8020d00 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 8020c62:	4828      	ldr	r0, [pc, #160]	; (8020d04 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 8020c64:	f240 11ef 	movw	r1, #495	; 0x1ef
 8020c68:	f002 fd6c 	bl	8023744 <__assert_func>
 8020c6c:	4684      	mov	ip, r0
 8020c6e:	e7d8      	b.n	8020c22 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 8020c70:	4602      	mov	r2, r0
 8020c72:	4684      	mov	ip, r0
 8020c74:	e7dc      	b.n	8020c30 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8020c76:	4602      	mov	r2, r0
 8020c78:	e7da      	b.n	8020c30 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8020c7a:	4606      	mov	r6, r0
 8020c7c:	e7e3      	b.n	8020c46 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 8020c7e:	4606      	mov	r6, r0
 8020c80:	e7e9      	b.n	8020c56 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8020c82:	2c0f      	cmp	r4, #15
 8020c84:	d8eb      	bhi.n	8020c5e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8020c86:	4606      	mov	r6, r0
 8020c88:	ea4f 450c 	mov.w	r5, ip, lsl #16
 8020c8c:	fb14 f307 	smulbb	r3, r4, r7
 8020c90:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8020c94:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8020c98:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8020c9c:	10db      	asrs	r3, r3, #3
 8020c9e:	ea45 0c0c 	orr.w	ip, r5, ip
 8020ca2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8020ca6:	f1c7 0510 	rsb	r5, r7, #16
 8020caa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020cae:	1b2d      	subs	r5, r5, r4
 8020cb0:	ea4e 0202 	orr.w	r2, lr, r2
 8020cb4:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8020cb8:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8020cbc:	4354      	muls	r4, r2
 8020cbe:	fb05 450c 	mla	r5, r5, ip, r4
 8020cc2:	0404      	lsls	r4, r0, #16
 8020cc4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8020cc8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020ccc:	4320      	orrs	r0, r4
 8020cce:	fb03 5400 	mla	r4, r3, r0, r5
 8020cd2:	0430      	lsls	r0, r6, #16
 8020cd4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020cd8:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8020cdc:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 8020ce0:	4330      	orrs	r0, r6
 8020ce2:	fb07 4000 	mla	r0, r7, r0, r4
 8020ce6:	0d43      	lsrs	r3, r0, #21
 8020ce8:	0940      	lsrs	r0, r0, #5
 8020cea:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020cee:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020cf2:	4318      	orrs	r0, r3
 8020cf4:	8008      	strh	r0, [r1, #0]
 8020cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020cfa:	bf00      	nop
 8020cfc:	0802814e 	.word	0x0802814e
 8020d00:	080287ba 	.word	0x080287ba
 8020d04:	08028237 	.word	0x08028237

08020d08 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d0c:	ed2d 8b08 	vpush	{d8-d11}
 8020d10:	b08f      	sub	sp, #60	; 0x3c
 8020d12:	461d      	mov	r5, r3
 8020d14:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020d16:	920c      	str	r2, [sp, #48]	; 0x30
 8020d18:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 8020d1c:	9107      	str	r1, [sp, #28]
 8020d1e:	6859      	ldr	r1, [r3, #4]
 8020d20:	681b      	ldr	r3, [r3, #0]
 8020d22:	900d      	str	r0, [sp, #52]	; 0x34
 8020d24:	fb01 2707 	mla	r7, r1, r7, r2
 8020d28:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8020d2c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020d2e:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8020d32:	f8d3 8000 	ldr.w	r8, [r3]
 8020d36:	eeb0 aa40 	vmov.f32	s20, s0
 8020d3a:	eef0 9a60 	vmov.f32	s19, s1
 8020d3e:	eeb0 9a41 	vmov.f32	s18, s2
 8020d42:	eeb0 8a62 	vmov.f32	s16, s5
 8020d46:	eef0 8a43 	vmov.f32	s17, s6
 8020d4a:	eef0 ba44 	vmov.f32	s23, s8
 8020d4e:	eeb0 ba64 	vmov.f32	s22, s9
 8020d52:	eef0 aa45 	vmov.f32	s21, s10
 8020d56:	9b07      	ldr	r3, [sp, #28]
 8020d58:	2b00      	cmp	r3, #0
 8020d5a:	dc03      	bgt.n	8020d64 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020d5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020d5e:	2b00      	cmp	r3, #0
 8020d60:	f340 8181 	ble.w	8021066 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8020d64:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020d66:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020d6a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020d6e:	1e48      	subs	r0, r1, #1
 8020d70:	f102 3cff 	add.w	ip, r2, #4294967295
 8020d74:	2d00      	cmp	r5, #0
 8020d76:	f340 809b 	ble.w	8020eb0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 8020d7a:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8020d7e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020d82:	d406      	bmi.n	8020d92 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020d84:	4586      	cmp	lr, r0
 8020d86:	da04      	bge.n	8020d92 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020d88:	2b00      	cmp	r3, #0
 8020d8a:	db02      	blt.n	8020d92 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020d8c:	4563      	cmp	r3, ip
 8020d8e:	f2c0 8090 	blt.w	8020eb2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8020d92:	f11e 0e01 	adds.w	lr, lr, #1
 8020d96:	f100 8084 	bmi.w	8020ea2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020d9a:	4571      	cmp	r1, lr
 8020d9c:	f2c0 8081 	blt.w	8020ea2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020da0:	3301      	adds	r3, #1
 8020da2:	d47e      	bmi.n	8020ea2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020da4:	429a      	cmp	r2, r3
 8020da6:	db7c      	blt.n	8020ea2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020da8:	46aa      	mov	sl, r5
 8020daa:	46b9      	mov	r9, r7
 8020dac:	f1ba 0f00 	cmp.w	sl, #0
 8020db0:	f340 8099 	ble.w	8020ee6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8020db4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020db6:	1421      	asrs	r1, r4, #16
 8020db8:	ea4f 4026 	mov.w	r0, r6, asr #16
 8020dbc:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020dc0:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8020dc4:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8020dc8:	f100 80d0 	bmi.w	8020f6c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8020dcc:	f10e 3bff 	add.w	fp, lr, #4294967295
 8020dd0:	4559      	cmp	r1, fp
 8020dd2:	f280 80cb 	bge.w	8020f6c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8020dd6:	2800      	cmp	r0, #0
 8020dd8:	f2c0 80c8 	blt.w	8020f6c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8020ddc:	f103 3bff 	add.w	fp, r3, #4294967295
 8020de0:	4558      	cmp	r0, fp
 8020de2:	f280 80c3 	bge.w	8020f6c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8020de6:	fa0f fe8e 	sxth.w	lr, lr
 8020dea:	fb00 110e 	mla	r1, r0, lr, r1
 8020dee:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8020df2:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8020df6:	8841      	ldrh	r1, [r0, #2]
 8020df8:	f1bc 0f00 	cmp.w	ip, #0
 8020dfc:	d00b      	beq.n	8020e16 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8020dfe:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8020e02:	3b01      	subs	r3, #1
 8020e04:	005b      	lsls	r3, r3, #1
 8020e06:	3302      	adds	r3, #2
 8020e08:	eb00 0e03 	add.w	lr, r0, r3
 8020e0c:	5ac3      	ldrh	r3, [r0, r3]
 8020e0e:	9308      	str	r3, [sp, #32]
 8020e10:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8020e14:	9309      	str	r3, [sp, #36]	; 0x24
 8020e16:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8020e1a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020e1e:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8020e22:	ea40 000b 	orr.w	r0, r0, fp
 8020e26:	fb12 f30c 	smulbb	r3, r2, ip
 8020e2a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8020e2e:	10db      	asrs	r3, r3, #3
 8020e30:	f1cc 0e10 	rsb	lr, ip, #16
 8020e34:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020e38:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020e3c:	ebae 0e02 	sub.w	lr, lr, r2
 8020e40:	ea4b 0101 	orr.w	r1, fp, r1
 8020e44:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8020e48:	4351      	muls	r1, r2
 8020e4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020e4c:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8020e50:	fb0e 1e00 	mla	lr, lr, r0, r1
 8020e54:	0410      	lsls	r0, r2, #16
 8020e56:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020e5a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020e5e:	4310      	orrs	r0, r2
 8020e60:	9a08      	ldr	r2, [sp, #32]
 8020e62:	9908      	ldr	r1, [sp, #32]
 8020e64:	0412      	lsls	r2, r2, #16
 8020e66:	fb03 e000 	mla	r0, r3, r0, lr
 8020e6a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8020e6e:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8020e72:	ea42 020e 	orr.w	r2, r2, lr
 8020e76:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8020e7a:	fb03 0302 	mla	r3, r3, r2, r0
 8020e7e:	0d5a      	lsrs	r2, r3, #21
 8020e80:	095b      	lsrs	r3, r3, #5
 8020e82:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020e86:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020e8a:	4313      	orrs	r3, r2
 8020e8c:	f8a9 3000 	strh.w	r3, [r9]
 8020e90:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020e92:	441c      	add	r4, r3
 8020e94:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020e96:	f109 0902 	add.w	r9, r9, #2
 8020e9a:	441e      	add	r6, r3
 8020e9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020ea0:	e784      	b.n	8020dac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8020ea2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020ea4:	441c      	add	r4, r3
 8020ea6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020ea8:	3d01      	subs	r5, #1
 8020eaa:	441e      	add	r6, r3
 8020eac:	3702      	adds	r7, #2
 8020eae:	e761      	b.n	8020d74 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020eb0:	d01d      	beq.n	8020eee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8020eb2:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8020eb4:	1e6b      	subs	r3, r5, #1
 8020eb6:	fb00 4003 	mla	r0, r0, r3, r4
 8020eba:	1400      	asrs	r0, r0, #16
 8020ebc:	f53f af74 	bmi.w	8020da8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020ec0:	3901      	subs	r1, #1
 8020ec2:	4288      	cmp	r0, r1
 8020ec4:	f6bf af70 	bge.w	8020da8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020ec8:	9924      	ldr	r1, [sp, #144]	; 0x90
 8020eca:	fb01 6303 	mla	r3, r1, r3, r6
 8020ece:	141b      	asrs	r3, r3, #16
 8020ed0:	f53f af6a 	bmi.w	8020da8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020ed4:	3a01      	subs	r2, #1
 8020ed6:	4293      	cmp	r3, r2
 8020ed8:	f6bf af66 	bge.w	8020da8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020edc:	46a9      	mov	r9, r5
 8020ede:	46ba      	mov	sl, r7
 8020ee0:	f1b9 0f00 	cmp.w	r9, #0
 8020ee4:	dc5a      	bgt.n	8020f9c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8020ee6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8020eea:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8020eee:	9b07      	ldr	r3, [sp, #28]
 8020ef0:	2b00      	cmp	r3, #0
 8020ef2:	f340 80b8 	ble.w	8021066 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8020ef6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020efa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020efe:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020f02:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020f04:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020f08:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020f0c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020f10:	eef0 6a48 	vmov.f32	s13, s16
 8020f14:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020f18:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020f1c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020f20:	ee16 4a90 	vmov	r4, s13
 8020f24:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020f28:	eef0 6a68 	vmov.f32	s13, s17
 8020f2c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020f30:	ee18 2a10 	vmov	r2, s16
 8020f34:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020f38:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f3c:	ee18 2a90 	vmov	r2, s17
 8020f40:	9323      	str	r3, [sp, #140]	; 0x8c
 8020f42:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020f44:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f48:	9324      	str	r3, [sp, #144]	; 0x90
 8020f4a:	9b07      	ldr	r3, [sp, #28]
 8020f4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020f4e:	3b01      	subs	r3, #1
 8020f50:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020f54:	9307      	str	r3, [sp, #28]
 8020f56:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020f58:	ee16 6a90 	vmov	r6, s13
 8020f5c:	bf14      	ite	ne
 8020f5e:	461d      	movne	r5, r3
 8020f60:	4615      	moveq	r5, r2
 8020f62:	eef0 8a67 	vmov.f32	s17, s15
 8020f66:	eeb0 8a47 	vmov.f32	s16, s14
 8020f6a:	e6f4      	b.n	8020d56 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8020f6c:	f111 0b01 	adds.w	fp, r1, #1
 8020f70:	d48e      	bmi.n	8020e90 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8020f72:	45de      	cmp	lr, fp
 8020f74:	db8c      	blt.n	8020e90 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8020f76:	f110 0b01 	adds.w	fp, r0, #1
 8020f7a:	d489      	bmi.n	8020e90 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8020f7c:	455b      	cmp	r3, fp
 8020f7e:	db87      	blt.n	8020e90 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8020f80:	b21b      	sxth	r3, r3
 8020f82:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8020f86:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8020f8a:	9300      	str	r3, [sp, #0]
 8020f8c:	4642      	mov	r2, r8
 8020f8e:	fa0f f38e 	sxth.w	r3, lr
 8020f92:	4649      	mov	r1, r9
 8020f94:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020f96:	f7ff fe2b 	bl	8020bf0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8020f9a:	e779      	b.n	8020e90 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8020f9c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020f9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8020fa2:	1420      	asrs	r0, r4, #16
 8020fa4:	1431      	asrs	r1, r6, #16
 8020fa6:	fb03 0101 	mla	r1, r3, r1, r0
 8020faa:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8020fae:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8020fb2:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8020fb6:	8841      	ldrh	r1, [r0, #2]
 8020fb8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020fbc:	f1be 0f00 	cmp.w	lr, #0
 8020fc0:	d00b      	beq.n	8020fda <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 8020fc2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8020fc6:	3b01      	subs	r3, #1
 8020fc8:	005b      	lsls	r3, r3, #1
 8020fca:	3302      	adds	r3, #2
 8020fcc:	eb00 0b03 	add.w	fp, r0, r3
 8020fd0:	5ac3      	ldrh	r3, [r0, r3]
 8020fd2:	930a      	str	r3, [sp, #40]	; 0x28
 8020fd4:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8020fd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8020fda:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8020fde:	fb12 f30e 	smulbb	r3, r2, lr
 8020fe2:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8020fe6:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8020fea:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020fee:	10db      	asrs	r3, r3, #3
 8020ff0:	ea40 000c 	orr.w	r0, r0, ip
 8020ff4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020ff8:	f1ce 0c10 	rsb	ip, lr, #16
 8020ffc:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8021000:	ebac 0c02 	sub.w	ip, ip, r2
 8021004:	ea4b 0101 	orr.w	r1, fp, r1
 8021008:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802100c:	4351      	muls	r1, r2
 802100e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021010:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8021014:	fb0c 1c00 	mla	ip, ip, r0, r1
 8021018:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802101c:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8021020:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021022:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021024:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021028:	0412      	lsls	r2, r2, #16
 802102a:	ea4b 0000 	orr.w	r0, fp, r0
 802102e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8021032:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8021036:	fb03 c000 	mla	r0, r3, r0, ip
 802103a:	ea42 0b0b 	orr.w	fp, r2, fp
 802103e:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8021042:	fb03 000b 	mla	r0, r3, fp, r0
 8021046:	0d43      	lsrs	r3, r0, #21
 8021048:	0940      	lsrs	r0, r0, #5
 802104a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802104e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021052:	4318      	orrs	r0, r3
 8021054:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021056:	f82a 0b02 	strh.w	r0, [sl], #2
 802105a:	441c      	add	r4, r3
 802105c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802105e:	f109 39ff 	add.w	r9, r9, #4294967295
 8021062:	441e      	add	r6, r3
 8021064:	e73c      	b.n	8020ee0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8021066:	b00f      	add	sp, #60	; 0x3c
 8021068:	ecbd 8b08 	vpop	{d8-d11}
 802106c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021070 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8021070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021074:	880e      	ldrh	r6, [r1, #0]
 8021076:	b085      	sub	sp, #20
 8021078:	ea4f 2c26 	mov.w	ip, r6, asr #8
 802107c:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
 8021080:	4690      	mov	r8, r2
 8021082:	f00c 02f8 	and.w	r2, ip, #248	; 0xf8
 8021086:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 802108a:	9200      	str	r2, [sp, #0]
 802108c:	00f6      	lsls	r6, r6, #3
 802108e:	f00c 02fc 	and.w	r2, ip, #252	; 0xfc
 8021092:	9201      	str	r2, [sp, #4]
 8021094:	2c00      	cmp	r4, #0
 8021096:	b2f2      	uxtb	r2, r6
 8021098:	fb04 5603 	mla	r6, r4, r3, r5
 802109c:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 80210a0:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80210a4:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 80210a8:	9202      	str	r2, [sp, #8]
 80210aa:	eb08 0c86 	add.w	ip, r8, r6, lsl #2
 80210ae:	db36      	blt.n	802111e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xae>
 80210b0:	45a6      	cmp	lr, r4
 80210b2:	dd34      	ble.n	802111e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xae>
 80210b4:	2d00      	cmp	r5, #0
 80210b6:	db30      	blt.n	802111a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xaa>
 80210b8:	42ab      	cmp	r3, r5
 80210ba:	dd2e      	ble.n	802111a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xaa>
 80210bc:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
 80210c0:	1c6e      	adds	r6, r5, #1
 80210c2:	d42f      	bmi.n	8021124 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 80210c4:	42b3      	cmp	r3, r6
 80210c6:	dd2d      	ble.n	8021124 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 80210c8:	b370      	cbz	r0, 8021128 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb8>
 80210ca:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80210ce:	3401      	adds	r4, #1
 80210d0:	d42e      	bmi.n	8021130 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc0>
 80210d2:	45a6      	cmp	lr, r4
 80210d4:	dd2c      	ble.n	8021130 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc0>
 80210d6:	b377      	cbz	r7, 8021136 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc6>
 80210d8:	2d00      	cmp	r5, #0
 80210da:	db27      	blt.n	802112c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbc>
 80210dc:	42ab      	cmp	r3, r5
 80210de:	dd25      	ble.n	802112c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbc>
 80210e0:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80210e4:	3501      	adds	r5, #1
 80210e6:	d429      	bmi.n	802113c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 80210e8:	42ab      	cmp	r3, r5
 80210ea:	dd27      	ble.n	802113c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 80210ec:	b340      	cbz	r0, 8021140 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 80210ee:	3301      	adds	r3, #1
 80210f0:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80210f4:	280f      	cmp	r0, #15
 80210f6:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80210fa:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80210fe:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021102:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8021106:	d801      	bhi.n	802110c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8021108:	2f0f      	cmp	r7, #15
 802110a:	d91b      	bls.n	8021144 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd4>
 802110c:	4b84      	ldr	r3, [pc, #528]	; (8021320 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b0>)
 802110e:	4a85      	ldr	r2, [pc, #532]	; (8021324 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 8021110:	4885      	ldr	r0, [pc, #532]	; (8021328 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 8021112:	f240 210d 	movw	r1, #525	; 0x20d
 8021116:	f002 fb15 	bl	8023744 <__assert_func>
 802111a:	2200      	movs	r2, #0
 802111c:	e7d0      	b.n	80210c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x50>
 802111e:	2600      	movs	r6, #0
 8021120:	4632      	mov	r2, r6
 8021122:	e7d4      	b.n	80210ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 8021124:	2600      	movs	r6, #0
 8021126:	e7d2      	b.n	80210ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 8021128:	4606      	mov	r6, r0
 802112a:	e7d0      	b.n	80210ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 802112c:	2400      	movs	r4, #0
 802112e:	e7d9      	b.n	80210e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8021130:	2300      	movs	r3, #0
 8021132:	461c      	mov	r4, r3
 8021134:	e7de      	b.n	80210f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8021136:	463b      	mov	r3, r7
 8021138:	463c      	mov	r4, r7
 802113a:	e7db      	b.n	80210f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 802113c:	2300      	movs	r3, #0
 802113e:	e7d9      	b.n	80210f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8021140:	4603      	mov	r3, r0
 8021142:	e7d7      	b.n	80210f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8021144:	b280      	uxth	r0, r0
 8021146:	b2bf      	uxth	r7, r7
 8021148:	fb00 fe07 	mul.w	lr, r0, r7
 802114c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8021150:	0100      	lsls	r0, r0, #4
 8021152:	eba0 0c0e 	sub.w	ip, r0, lr
 8021156:	b2bf      	uxth	r7, r7
 8021158:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 802115c:	fa1f fc8c 	uxth.w	ip, ip
 8021160:	1bed      	subs	r5, r5, r7
 8021162:	b2ad      	uxth	r5, r5
 8021164:	fb0c f00a 	mul.w	r0, ip, sl
 8021168:	fb05 000b 	mla	r0, r5, fp, r0
 802116c:	fb07 0009 	mla	r0, r7, r9, r0
 8021170:	fb0e 0008 	mla	r0, lr, r8, r0
 8021174:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021178:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802117c:	9003      	str	r0, [sp, #12]
 802117e:	d018      	beq.n	80211b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x142>
 8021180:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8021184:	fb0b f000 	mul.w	r0, fp, r0
 8021188:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802118c:	fb0b fb02 	mul.w	fp, fp, r2
 8021190:	0a02      	lsrs	r2, r0, #8
 8021192:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021196:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802119a:	4402      	add	r2, r0
 802119c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80211a0:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80211a4:	0a12      	lsrs	r2, r2, #8
 80211a6:	0a00      	lsrs	r0, r0, #8
 80211a8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80211ac:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80211b0:	4302      	orrs	r2, r0
 80211b2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80211b6:	d019      	beq.n	80211ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x17c>
 80211b8:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80211bc:	fb0a fb0b 	mul.w	fp, sl, fp
 80211c0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80211c4:	fb0a fa06 	mul.w	sl, sl, r6
 80211c8:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80211cc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80211d0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80211d4:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80211d8:	445e      	add	r6, fp
 80211da:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80211de:	0a36      	lsrs	r6, r6, #8
 80211e0:	0a00      	lsrs	r0, r0, #8
 80211e2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80211e6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80211ea:	4306      	orrs	r6, r0
 80211ec:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80211f0:	d019      	beq.n	8021226 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1b6>
 80211f2:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80211f6:	fb09 fa0a 	mul.w	sl, r9, sl
 80211fa:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80211fe:	fb09 f904 	mul.w	r9, r9, r4
 8021202:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021206:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802120a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802120e:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8021212:	4454      	add	r4, sl
 8021214:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8021218:	0a24      	lsrs	r4, r4, #8
 802121a:	0a00      	lsrs	r0, r0, #8
 802121c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021220:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021224:	4304      	orrs	r4, r0
 8021226:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802122a:	d019      	beq.n	8021260 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1f0>
 802122c:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8021230:	fb08 f909 	mul.w	r9, r8, r9
 8021234:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021238:	fb08 f803 	mul.w	r8, r8, r3
 802123c:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8021240:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021244:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8021248:	f508 7080 	add.w	r0, r8, #256	; 0x100
 802124c:	444b      	add	r3, r9
 802124e:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8021252:	0a1b      	lsrs	r3, r3, #8
 8021254:	0a00      	lsrs	r0, r0, #8
 8021256:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802125a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802125e:	4303      	orrs	r3, r0
 8021260:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8021264:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8021268:	fb0c f808 	mul.w	r8, ip, r8
 802126c:	fb05 8800 	mla	r8, r5, r0, r8
 8021270:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8021274:	fb07 8800 	mla	r8, r7, r0, r8
 8021278:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 802127c:	fb0e 8000 	mla	r0, lr, r0, r8
 8021280:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021284:	fb0c f606 	mul.w	r6, ip, r6
 8021288:	0a00      	lsrs	r0, r0, #8
 802128a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802128e:	fb05 6202 	mla	r2, r5, r2, r6
 8021292:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8021296:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 802129a:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 802129e:	fb07 2700 	mla	r7, r7, r0, r2
 80212a2:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 80212a6:	9b03      	ldr	r3, [sp, #12]
 80212a8:	9c00      	ldr	r4, [sp, #0]
 80212aa:	b2ad      	uxth	r5, r5
 80212ac:	436b      	muls	r3, r5
 80212ae:	fb0e 7000 	mla	r0, lr, r0, r7
 80212b2:	1c5a      	adds	r2, r3, #1
 80212b4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80212b8:	0a00      	lsrs	r0, r0, #8
 80212ba:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80212be:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 80212c2:	ea48 0000 	orr.w	r0, r8, r0
 80212c6:	b2d2      	uxtb	r2, r2
 80212c8:	fb14 f602 	smulbb	r6, r4, r2
 80212cc:	0c03      	lsrs	r3, r0, #16
 80212ce:	fb03 6305 	mla	r3, r3, r5, r6
 80212d2:	b29e      	uxth	r6, r3
 80212d4:	9b01      	ldr	r3, [sp, #4]
 80212d6:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80212da:	fb13 f302 	smulbb	r3, r3, r2
 80212de:	fb04 3405 	mla	r4, r4, r5, r3
 80212e2:	9b02      	ldr	r3, [sp, #8]
 80212e4:	b2c0      	uxtb	r0, r0
 80212e6:	fb13 f202 	smulbb	r2, r3, r2
 80212ea:	fb00 2005 	mla	r0, r0, r5, r2
 80212ee:	b280      	uxth	r0, r0
 80212f0:	b2a4      	uxth	r4, r4
 80212f2:	1c42      	adds	r2, r0, #1
 80212f4:	1c73      	adds	r3, r6, #1
 80212f6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80212fa:	1c62      	adds	r2, r4, #1
 80212fc:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8021300:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8021304:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8021308:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802130c:	0952      	lsrs	r2, r2, #5
 802130e:	4303      	orrs	r3, r0
 8021310:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021314:	4313      	orrs	r3, r2
 8021316:	800b      	strh	r3, [r1, #0]
 8021318:	b005      	add	sp, #20
 802131a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802131e:	bf00      	nop
 8021320:	0802814e 	.word	0x0802814e
 8021324:	08028711 	.word	0x08028711
 8021328:	08028237 	.word	0x08028237

0802132c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802132c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021330:	ed2d 8b08 	vpush	{d8-d11}
 8021334:	b09d      	sub	sp, #116	; 0x74
 8021336:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 802133a:	9219      	str	r2, [sp, #100]	; 0x64
 802133c:	9307      	str	r3, [sp, #28]
 802133e:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8021340:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8021344:	931a      	str	r3, [sp, #104]	; 0x68
 8021346:	9117      	str	r1, [sp, #92]	; 0x5c
 8021348:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 802134c:	901b      	str	r0, [sp, #108]	; 0x6c
 802134e:	6850      	ldr	r0, [r2, #4]
 8021350:	6812      	ldr	r2, [r2, #0]
 8021352:	fb00 1303 	mla	r3, r0, r3, r1
 8021356:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802135a:	930a      	str	r3, [sp, #40]	; 0x28
 802135c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802135e:	681b      	ldr	r3, [r3, #0]
 8021360:	9310      	str	r3, [sp, #64]	; 0x40
 8021362:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8021366:	930b      	str	r3, [sp, #44]	; 0x2c
 8021368:	eeb0 aa40 	vmov.f32	s20, s0
 802136c:	eef0 9a60 	vmov.f32	s19, s1
 8021370:	eeb0 9a41 	vmov.f32	s18, s2
 8021374:	eeb0 8a62 	vmov.f32	s16, s5
 8021378:	eef0 8a43 	vmov.f32	s17, s6
 802137c:	eef0 ba44 	vmov.f32	s23, s8
 8021380:	eeb0 ba64 	vmov.f32	s22, s9
 8021384:	eef0 aa45 	vmov.f32	s21, s10
 8021388:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802138a:	2b00      	cmp	r3, #0
 802138c:	dc03      	bgt.n	8021396 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802138e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021390:	2b00      	cmp	r3, #0
 8021392:	f340 837b 	ble.w	8021a8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8021396:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021398:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802139c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80213a0:	1e48      	subs	r0, r1, #1
 80213a2:	1e57      	subs	r7, r2, #1
 80213a4:	9b07      	ldr	r3, [sp, #28]
 80213a6:	2b00      	cmp	r3, #0
 80213a8:	f340 8194 	ble.w	80216d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 80213ac:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80213b0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80213b4:	d406      	bmi.n	80213c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80213b6:	4584      	cmp	ip, r0
 80213b8:	da04      	bge.n	80213c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80213ba:	2b00      	cmp	r3, #0
 80213bc:	db02      	blt.n	80213c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80213be:	42bb      	cmp	r3, r7
 80213c0:	f2c0 8189 	blt.w	80216d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80213c4:	f11c 0c01 	adds.w	ip, ip, #1
 80213c8:	f100 8179 	bmi.w	80216be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80213cc:	4561      	cmp	r1, ip
 80213ce:	f2c0 8176 	blt.w	80216be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80213d2:	3301      	adds	r3, #1
 80213d4:	f100 8173 	bmi.w	80216be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80213d8:	429a      	cmp	r2, r3
 80213da:	f2c0 8170 	blt.w	80216be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80213de:	9b07      	ldr	r3, [sp, #28]
 80213e0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80213e2:	9318      	str	r3, [sp, #96]	; 0x60
 80213e4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80213e6:	2b00      	cmp	r3, #0
 80213e8:	f340 8192 	ble.w	8021710 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80213ec:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80213ee:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80213f0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80213f4:	689b      	ldr	r3, [r3, #8]
 80213f6:	1422      	asrs	r2, r4, #16
 80213f8:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80213fc:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8021400:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021404:	f100 81d3 	bmi.w	80217ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8021408:	f103 38ff 	add.w	r8, r3, #4294967295
 802140c:	4542      	cmp	r2, r8
 802140e:	f280 81ce 	bge.w	80217ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8021412:	f1bc 0f00 	cmp.w	ip, #0
 8021416:	f2c0 81ca 	blt.w	80217ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 802141a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802141e:	45c4      	cmp	ip, r8
 8021420:	f280 81c5 	bge.w	80217ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8021424:	b21b      	sxth	r3, r3
 8021426:	fb0c 2203 	mla	r2, ip, r3, r2
 802142a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802142c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8021430:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8021434:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8021438:	2800      	cmp	r0, #0
 802143a:	f000 81af 	beq.w	802179c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 802143e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8021442:	950c      	str	r5, [sp, #48]	; 0x30
 8021444:	0e2d      	lsrs	r5, r5, #24
 8021446:	9513      	str	r5, [sp, #76]	; 0x4c
 8021448:	b181      	cbz	r1, 802146c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802144a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802144e:	3b01      	subs	r3, #1
 8021450:	009b      	lsls	r3, r3, #2
 8021452:	3304      	adds	r3, #4
 8021454:	eb08 0c03 	add.w	ip, r8, r3
 8021458:	f858 3003 	ldr.w	r3, [r8, r3]
 802145c:	9308      	str	r3, [sp, #32]
 802145e:	0e1b      	lsrs	r3, r3, #24
 8021460:	9311      	str	r3, [sp, #68]	; 0x44
 8021462:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8021466:	930d      	str	r3, [sp, #52]	; 0x34
 8021468:	0e1b      	lsrs	r3, r3, #24
 802146a:	9314      	str	r3, [sp, #80]	; 0x50
 802146c:	b280      	uxth	r0, r0
 802146e:	b289      	uxth	r1, r1
 8021470:	fb00 f901 	mul.w	r9, r0, r1
 8021474:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021478:	0100      	lsls	r0, r0, #4
 802147a:	eba0 0809 	sub.w	r8, r0, r9
 802147e:	b289      	uxth	r1, r1
 8021480:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8021484:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021486:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021488:	fa1f f888 	uxth.w	r8, r8
 802148c:	1a5b      	subs	r3, r3, r1
 802148e:	b29b      	uxth	r3, r3
 8021490:	fb08 f000 	mul.w	r0, r8, r0
 8021494:	fb03 000e 	mla	r0, r3, lr, r0
 8021498:	fb01 0005 	mla	r0, r1, r5, r0
 802149c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802149e:	fb09 0005 	mla	r0, r9, r5, r0
 80214a2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80214a6:	2800      	cmp	r0, #0
 80214a8:	f000 8100 	beq.w	80216ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 80214ac:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80214b0:	d01b      	beq.n	80214ea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80214b2:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80214b6:	fb0e fa0a 	mul.w	sl, lr, sl
 80214ba:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80214be:	fb0e fe02 	mul.w	lr, lr, r2
 80214c2:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80214c6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80214ca:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80214ce:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80214d2:	4452      	add	r2, sl
 80214d4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80214d8:	0a12      	lsrs	r2, r2, #8
 80214da:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80214de:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80214e2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80214e6:	ea42 020c 	orr.w	r2, r2, ip
 80214ea:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80214ec:	2dff      	cmp	r5, #255	; 0xff
 80214ee:	d021      	beq.n	8021534 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80214f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80214f2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80214f6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80214f8:	fb05 fb0b 	mul.w	fp, r5, fp
 80214fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80214fe:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021502:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021504:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021508:	fb05 fa0a 	mul.w	sl, r5, sl
 802150c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021510:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021514:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021518:	44de      	add	lr, fp
 802151a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802151e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021522:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021526:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802152a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802152e:	ea4e 050a 	orr.w	r5, lr, sl
 8021532:	950c      	str	r5, [sp, #48]	; 0x30
 8021534:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021536:	2dff      	cmp	r5, #255	; 0xff
 8021538:	d021      	beq.n	802157e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 802153a:	9d08      	ldr	r5, [sp, #32]
 802153c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8021540:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021542:	fb05 fb0b 	mul.w	fp, r5, fp
 8021546:	9d08      	ldr	r5, [sp, #32]
 8021548:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802154c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802154e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021552:	fb05 fa0a 	mul.w	sl, r5, sl
 8021556:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802155a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802155e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021562:	44de      	add	lr, fp
 8021564:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021568:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802156c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021570:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021574:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021578:	ea4e 050a 	orr.w	r5, lr, sl
 802157c:	9508      	str	r5, [sp, #32]
 802157e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021580:	2dff      	cmp	r5, #255	; 0xff
 8021582:	d021      	beq.n	80215c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8021584:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021586:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802158a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802158c:	fb05 fb0b 	mul.w	fp, r5, fp
 8021590:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021592:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021596:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021598:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802159c:	fb05 fa0a 	mul.w	sl, r5, sl
 80215a0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80215a4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80215a8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80215ac:	44de      	add	lr, fp
 80215ae:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80215b2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80215b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80215ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80215be:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80215c2:	ea4e 050a 	orr.w	r5, lr, sl
 80215c6:	950d      	str	r5, [sp, #52]	; 0x34
 80215c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80215ca:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80215ce:	9d08      	ldr	r5, [sp, #32]
 80215d0:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80215d4:	fb08 fc0c 	mul.w	ip, r8, ip
 80215d8:	fb03 cc0e 	mla	ip, r3, lr, ip
 80215dc:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80215e0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80215e2:	fb01 cc0e 	mla	ip, r1, lr, ip
 80215e6:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80215ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80215ec:	fb09 cc0e 	mla	ip, r9, lr, ip
 80215f0:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80215f4:	fb08 f80e 	mul.w	r8, r8, lr
 80215f8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80215fc:	fb03 8202 	mla	r2, r3, r2, r8
 8021600:	9b08      	ldr	r3, [sp, #32]
 8021602:	f8b7 e000 	ldrh.w	lr, [r7]
 8021606:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021608:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 802160c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802160e:	fb01 220a 	mla	r2, r1, sl, r2
 8021612:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8021616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021618:	fb09 2901 	mla	r9, r9, r1, r2
 802161c:	4343      	muls	r3, r0
 802161e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021622:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021626:	1c58      	adds	r0, r3, #1
 8021628:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802162c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021630:	ea4c 0c09 	orr.w	ip, ip, r9
 8021634:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021638:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802163a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 802163e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8021642:	ea4f 232e 	mov.w	r3, lr, asr #8
 8021646:	b2c0      	uxtb	r0, r0
 8021648:	fb11 f102 	smulbb	r1, r1, r2
 802164c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021650:	fb03 1300 	mla	r3, r3, r0, r1
 8021654:	b299      	uxth	r1, r3
 8021656:	ea4f 02ee 	mov.w	r2, lr, asr #3
 802165a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 802165e:	fb13 f305 	smulbb	r3, r3, r5
 8021662:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021666:	fb02 3200 	mla	r2, r2, r0, r3
 802166a:	fa5f fc8c 	uxtb.w	ip, ip
 802166e:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8021672:	b2db      	uxtb	r3, r3
 8021674:	fb1c fc05 	smulbb	ip, ip, r5
 8021678:	fb03 cc00 	mla	ip, r3, r0, ip
 802167c:	b292      	uxth	r2, r2
 802167e:	fa1f fc8c 	uxth.w	ip, ip
 8021682:	1c4b      	adds	r3, r1, #1
 8021684:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021688:	f10c 0001 	add.w	r0, ip, #1
 802168c:	1c51      	adds	r1, r2, #1
 802168e:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 8021692:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021696:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802169a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802169e:	0952      	lsrs	r2, r2, #5
 80216a0:	ea43 030c 	orr.w	r3, r3, ip
 80216a4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80216a8:	4313      	orrs	r3, r2
 80216aa:	803b      	strh	r3, [r7, #0]
 80216ac:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80216ae:	441c      	add	r4, r3
 80216b0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80216b2:	441e      	add	r6, r3
 80216b4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80216b6:	3b01      	subs	r3, #1
 80216b8:	3702      	adds	r7, #2
 80216ba:	9318      	str	r3, [sp, #96]	; 0x60
 80216bc:	e692      	b.n	80213e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80216be:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80216c0:	441c      	add	r4, r3
 80216c2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80216c4:	441e      	add	r6, r3
 80216c6:	9b07      	ldr	r3, [sp, #28]
 80216c8:	3b01      	subs	r3, #1
 80216ca:	9307      	str	r3, [sp, #28]
 80216cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80216ce:	3302      	adds	r3, #2
 80216d0:	930a      	str	r3, [sp, #40]	; 0x28
 80216d2:	e667      	b.n	80213a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80216d4:	d023      	beq.n	802171e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80216d6:	9b07      	ldr	r3, [sp, #28]
 80216d8:	9831      	ldr	r0, [sp, #196]	; 0xc4
 80216da:	3b01      	subs	r3, #1
 80216dc:	fb00 4003 	mla	r0, r0, r3, r4
 80216e0:	1400      	asrs	r0, r0, #16
 80216e2:	f53f ae7c 	bmi.w	80213de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80216e6:	3901      	subs	r1, #1
 80216e8:	4288      	cmp	r0, r1
 80216ea:	f6bf ae78 	bge.w	80213de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80216ee:	9932      	ldr	r1, [sp, #200]	; 0xc8
 80216f0:	fb01 6303 	mla	r3, r1, r3, r6
 80216f4:	141b      	asrs	r3, r3, #16
 80216f6:	f53f ae72 	bmi.w	80213de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80216fa:	3a01      	subs	r2, #1
 80216fc:	4293      	cmp	r3, r2
 80216fe:	f6bf ae6e 	bge.w	80213de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8021702:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021706:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 802170a:	f1bb 0f00 	cmp.w	fp, #0
 802170e:	dc6c      	bgt.n	80217ea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4be>
 8021710:	9b07      	ldr	r3, [sp, #28]
 8021712:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8021716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021718:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802171c:	930a      	str	r3, [sp, #40]	; 0x28
 802171e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021720:	2b00      	cmp	r3, #0
 8021722:	f340 81b3 	ble.w	8021a8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8021726:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802172a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802172e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021732:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021734:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021738:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802173c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021740:	eef0 6a48 	vmov.f32	s13, s16
 8021744:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021748:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802174c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021750:	ee16 4a90 	vmov	r4, s13
 8021754:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021758:	eef0 6a68 	vmov.f32	s13, s17
 802175c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021760:	ee18 2a10 	vmov	r2, s16
 8021764:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021768:	fb92 f3f3 	sdiv	r3, r2, r3
 802176c:	ee18 2a90 	vmov	r2, s17
 8021770:	9331      	str	r3, [sp, #196]	; 0xc4
 8021772:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021774:	fb92 f3f3 	sdiv	r3, r2, r3
 8021778:	9332      	str	r3, [sp, #200]	; 0xc8
 802177a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802177c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802177e:	3b01      	subs	r3, #1
 8021780:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021784:	9317      	str	r3, [sp, #92]	; 0x5c
 8021786:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021788:	bf08      	it	eq
 802178a:	4613      	moveq	r3, r2
 802178c:	ee16 6a90 	vmov	r6, s13
 8021790:	9307      	str	r3, [sp, #28]
 8021792:	eef0 8a67 	vmov.f32	s17, s15
 8021796:	eeb0 8a47 	vmov.f32	s16, s14
 802179a:	e5f5      	b.n	8021388 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802179c:	2900      	cmp	r1, #0
 802179e:	f43f ae65 	beq.w	802146c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80217a2:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80217a6:	9308      	str	r3, [sp, #32]
 80217a8:	0e1b      	lsrs	r3, r3, #24
 80217aa:	9311      	str	r3, [sp, #68]	; 0x44
 80217ac:	e65e      	b.n	802146c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80217ae:	f112 0801 	adds.w	r8, r2, #1
 80217b2:	f53f af7b 	bmi.w	80216ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 80217b6:	4543      	cmp	r3, r8
 80217b8:	f6ff af78 	blt.w	80216ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 80217bc:	f11c 0801 	adds.w	r8, ip, #1
 80217c0:	f53f af74 	bmi.w	80216ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 80217c4:	45c6      	cmp	lr, r8
 80217c6:	f6ff af71 	blt.w	80216ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 80217ca:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80217cc:	9201      	str	r2, [sp, #4]
 80217ce:	fa0f f28e 	sxth.w	r2, lr
 80217d2:	e9cd 1504 	strd	r1, r5, [sp, #16]
 80217d6:	e9cd c002 	strd	ip, r0, [sp, #8]
 80217da:	9200      	str	r2, [sp, #0]
 80217dc:	b21b      	sxth	r3, r3
 80217de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80217e0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80217e2:	4639      	mov	r1, r7
 80217e4:	f7ff fc44 	bl	8021070 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 80217e8:	e760      	b.n	80216ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 80217ea:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80217ec:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80217ee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80217f2:	1427      	asrs	r7, r4, #16
 80217f4:	1433      	asrs	r3, r6, #16
 80217f6:	fb01 7303 	mla	r3, r1, r3, r7
 80217fa:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 80217fe:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8021802:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8021806:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802180a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802180e:	2a00      	cmp	r2, #0
 8021810:	f000 8133 	beq.w	8021a7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74e>
 8021814:	687d      	ldr	r5, [r7, #4]
 8021816:	950e      	str	r5, [sp, #56]	; 0x38
 8021818:	0e2d      	lsrs	r5, r5, #24
 802181a:	9515      	str	r5, [sp, #84]	; 0x54
 802181c:	b178      	cbz	r0, 802183e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 802181e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8021822:	3901      	subs	r1, #1
 8021824:	0089      	lsls	r1, r1, #2
 8021826:	3104      	adds	r1, #4
 8021828:	eb07 0e01 	add.w	lr, r7, r1
 802182c:	5879      	ldr	r1, [r7, r1]
 802182e:	9109      	str	r1, [sp, #36]	; 0x24
 8021830:	0e09      	lsrs	r1, r1, #24
 8021832:	9112      	str	r1, [sp, #72]	; 0x48
 8021834:	f8de 1004 	ldr.w	r1, [lr, #4]
 8021838:	910f      	str	r1, [sp, #60]	; 0x3c
 802183a:	0e09      	lsrs	r1, r1, #24
 802183c:	9116      	str	r1, [sp, #88]	; 0x58
 802183e:	b292      	uxth	r2, r2
 8021840:	b280      	uxth	r0, r0
 8021842:	fb02 f800 	mul.w	r8, r2, r0
 8021846:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802184a:	0112      	lsls	r2, r2, #4
 802184c:	eba2 0e08 	sub.w	lr, r2, r8
 8021850:	b280      	uxth	r0, r0
 8021852:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8021856:	9915      	ldr	r1, [sp, #84]	; 0x54
 8021858:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802185a:	fa1f fe8e 	uxth.w	lr, lr
 802185e:	1a12      	subs	r2, r2, r0
 8021860:	b292      	uxth	r2, r2
 8021862:	fb0e f101 	mul.w	r1, lr, r1
 8021866:	fb02 110c 	mla	r1, r2, ip, r1
 802186a:	fb00 1105 	mla	r1, r0, r5, r1
 802186e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8021870:	fb08 1105 	mla	r1, r8, r5, r1
 8021874:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021878:	2900      	cmp	r1, #0
 802187a:	f000 80f5 	beq.w	8021a68 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 802187e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021882:	d019      	beq.n	80218b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 8021884:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021888:	fb0c fa0a 	mul.w	sl, ip, sl
 802188c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021890:	fb0c fc03 	mul.w	ip, ip, r3
 8021894:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021898:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802189c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80218a0:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80218a4:	4453      	add	r3, sl
 80218a6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80218aa:	0a1b      	lsrs	r3, r3, #8
 80218ac:	0a3f      	lsrs	r7, r7, #8
 80218ae:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80218b2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80218b6:	433b      	orrs	r3, r7
 80218b8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80218ba:	2dff      	cmp	r5, #255	; 0xff
 80218bc:	d020      	beq.n	8021900 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d4>
 80218be:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80218c0:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80218c4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80218c6:	436f      	muls	r7, r5
 80218c8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80218ca:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80218ce:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80218d0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80218d4:	fb05 fa0a 	mul.w	sl, r5, sl
 80218d8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80218dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80218e0:	44bc      	add	ip, r7
 80218e2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80218e6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80218ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80218ee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80218f2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80218f6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80218fa:	ea4c 050a 	orr.w	r5, ip, sl
 80218fe:	950e      	str	r5, [sp, #56]	; 0x38
 8021900:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021902:	2dff      	cmp	r5, #255	; 0xff
 8021904:	d020      	beq.n	8021948 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8021906:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8021908:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802190c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802190e:	436f      	muls	r7, r5
 8021910:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8021912:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021916:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021918:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802191c:	fb05 fa0a 	mul.w	sl, r5, sl
 8021920:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021924:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021928:	44bc      	add	ip, r7
 802192a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802192e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021932:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021936:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802193a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802193e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021942:	ea4c 050a 	orr.w	r5, ip, sl
 8021946:	9509      	str	r5, [sp, #36]	; 0x24
 8021948:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802194a:	2dff      	cmp	r5, #255	; 0xff
 802194c:	d020      	beq.n	8021990 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x664>
 802194e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021950:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8021954:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8021956:	436f      	muls	r7, r5
 8021958:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802195a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802195e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8021960:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021964:	fb05 fa0a 	mul.w	sl, r5, sl
 8021968:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802196c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021970:	44bc      	add	ip, r7
 8021972:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021976:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802197a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802197e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021982:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021986:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802198a:	ea4c 050a 	orr.w	r5, ip, sl
 802198e:	950f      	str	r5, [sp, #60]	; 0x3c
 8021990:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021992:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8021996:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8021998:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802199c:	fb0e f707 	mul.w	r7, lr, r7
 80219a0:	fb02 770c 	mla	r7, r2, ip, r7
 80219a4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80219a8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80219aa:	fb00 770c 	mla	r7, r0, ip, r7
 80219ae:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80219b2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80219b4:	fb08 770c 	mla	r7, r8, ip, r7
 80219b8:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80219bc:	fb0e fe0c 	mul.w	lr, lr, ip
 80219c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80219c4:	fb02 e303 	mla	r3, r2, r3, lr
 80219c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80219ca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80219cc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80219d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80219d2:	fb00 330a 	mla	r3, r0, sl, r3
 80219d6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80219da:	fb08 3c0c 	mla	ip, r8, ip, r3
 80219de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80219e0:	f8b9 0000 	ldrh.w	r0, [r9]
 80219e4:	4359      	muls	r1, r3
 80219e6:	0a3f      	lsrs	r7, r7, #8
 80219e8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80219ec:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80219f0:	1c4b      	adds	r3, r1, #1
 80219f2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80219f6:	ea47 070c 	orr.w	r7, r7, ip
 80219fa:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80219fe:	1202      	asrs	r2, r0, #8
 8021a00:	0c3b      	lsrs	r3, r7, #16
 8021a02:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8021a06:	b2c9      	uxtb	r1, r1
 8021a08:	fb13 f305 	smulbb	r3, r3, r5
 8021a0c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8021a10:	fb02 3201 	mla	r2, r2, r1, r3
 8021a14:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8021a18:	10c3      	asrs	r3, r0, #3
 8021a1a:	b2ff      	uxtb	r7, r7
 8021a1c:	00c0      	lsls	r0, r0, #3
 8021a1e:	b2c0      	uxtb	r0, r0
 8021a20:	fb17 f705 	smulbb	r7, r7, r5
 8021a24:	fb00 7001 	mla	r0, r0, r1, r7
 8021a28:	b292      	uxth	r2, r2
 8021a2a:	fb1c fc05 	smulbb	ip, ip, r5
 8021a2e:	b280      	uxth	r0, r0
 8021a30:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8021a34:	fb03 c301 	mla	r3, r3, r1, ip
 8021a38:	1c51      	adds	r1, r2, #1
 8021a3a:	f100 0c01 	add.w	ip, r0, #1
 8021a3e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021a42:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8021a46:	b29b      	uxth	r3, r3
 8021a48:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021a4c:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8021a50:	ea42 020c 	orr.w	r2, r2, ip
 8021a54:	f103 0c01 	add.w	ip, r3, #1
 8021a58:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8021a5c:	095b      	lsrs	r3, r3, #5
 8021a5e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021a62:	431a      	orrs	r2, r3
 8021a64:	f8a9 2000 	strh.w	r2, [r9]
 8021a68:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021a6a:	441c      	add	r4, r3
 8021a6c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021a6e:	f109 0902 	add.w	r9, r9, #2
 8021a72:	441e      	add	r6, r3
 8021a74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021a78:	e647      	b.n	802170a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8021a7a:	2800      	cmp	r0, #0
 8021a7c:	f43f aedf 	beq.w	802183e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8021a80:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8021a84:	9109      	str	r1, [sp, #36]	; 0x24
 8021a86:	0e09      	lsrs	r1, r1, #24
 8021a88:	9112      	str	r1, [sp, #72]	; 0x48
 8021a8a:	e6d8      	b.n	802183e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8021a8c:	b01d      	add	sp, #116	; 0x74
 8021a8e:	ecbd 8b08 	vpop	{d8-d11}
 8021a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021a98 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8021a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a9c:	880e      	ldrh	r6, [r1, #0]
 8021a9e:	b085      	sub	sp, #20
 8021aa0:	ea4f 2c26 	mov.w	ip, r6, asr #8
 8021aa4:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
 8021aa8:	4690      	mov	r8, r2
 8021aaa:	f00c 02f8 	and.w	r2, ip, #248	; 0xf8
 8021aae:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 8021ab2:	9200      	str	r2, [sp, #0]
 8021ab4:	00f6      	lsls	r6, r6, #3
 8021ab6:	f00c 02fc 	and.w	r2, ip, #252	; 0xfc
 8021aba:	9201      	str	r2, [sp, #4]
 8021abc:	2c00      	cmp	r4, #0
 8021abe:	b2f2      	uxtb	r2, r6
 8021ac0:	fb04 5603 	mla	r6, r4, r3, r5
 8021ac4:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8021ac8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8021acc:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8021ad0:	9202      	str	r2, [sp, #8]
 8021ad2:	eb08 0c86 	add.w	ip, r8, r6, lsl #2
 8021ad6:	db36      	blt.n	8021b46 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8021ad8:	45a6      	cmp	lr, r4
 8021ada:	dd34      	ble.n	8021b46 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8021adc:	2d00      	cmp	r5, #0
 8021ade:	db30      	blt.n	8021b42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xaa>
 8021ae0:	42ab      	cmp	r3, r5
 8021ae2:	dd2e      	ble.n	8021b42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xaa>
 8021ae4:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
 8021ae8:	1c6e      	adds	r6, r5, #1
 8021aea:	d42f      	bmi.n	8021b4c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb4>
 8021aec:	42b3      	cmp	r3, r6
 8021aee:	dd2d      	ble.n	8021b4c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb4>
 8021af0:	b370      	cbz	r0, 8021b50 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb8>
 8021af2:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8021af6:	3401      	adds	r4, #1
 8021af8:	d42e      	bmi.n	8021b58 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc0>
 8021afa:	45a6      	cmp	lr, r4
 8021afc:	dd2c      	ble.n	8021b58 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc0>
 8021afe:	b377      	cbz	r7, 8021b5e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc6>
 8021b00:	2d00      	cmp	r5, #0
 8021b02:	db27      	blt.n	8021b54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbc>
 8021b04:	42ab      	cmp	r3, r5
 8021b06:	dd25      	ble.n	8021b54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbc>
 8021b08:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8021b0c:	3501      	adds	r5, #1
 8021b0e:	d429      	bmi.n	8021b64 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 8021b10:	42ab      	cmp	r3, r5
 8021b12:	dd27      	ble.n	8021b64 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 8021b14:	b340      	cbz	r0, 8021b68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 8021b16:	3301      	adds	r3, #1
 8021b18:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8021b1c:	280f      	cmp	r0, #15
 8021b1e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021b22:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021b26:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021b2a:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8021b2e:	d801      	bhi.n	8021b34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9c>
 8021b30:	2f0f      	cmp	r7, #15
 8021b32:	d91b      	bls.n	8021b6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd4>
 8021b34:	4b7d      	ldr	r3, [pc, #500]	; (8021d2c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x294>)
 8021b36:	4a7e      	ldr	r2, [pc, #504]	; (8021d30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x298>)
 8021b38:	487e      	ldr	r0, [pc, #504]	; (8021d34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 8021b3a:	f240 210d 	movw	r1, #525	; 0x20d
 8021b3e:	f001 fe01 	bl	8023744 <__assert_func>
 8021b42:	2200      	movs	r2, #0
 8021b44:	e7d0      	b.n	8021ae8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x50>
 8021b46:	2600      	movs	r6, #0
 8021b48:	4632      	mov	r2, r6
 8021b4a:	e7d4      	b.n	8021af6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 8021b4c:	2600      	movs	r6, #0
 8021b4e:	e7d2      	b.n	8021af6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 8021b50:	4606      	mov	r6, r0
 8021b52:	e7d0      	b.n	8021af6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 8021b54:	2400      	movs	r4, #0
 8021b56:	e7d9      	b.n	8021b0c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x74>
 8021b58:	2300      	movs	r3, #0
 8021b5a:	461c      	mov	r4, r3
 8021b5c:	e7de      	b.n	8021b1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 8021b5e:	463b      	mov	r3, r7
 8021b60:	463c      	mov	r4, r7
 8021b62:	e7db      	b.n	8021b1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 8021b64:	2300      	movs	r3, #0
 8021b66:	e7d9      	b.n	8021b1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 8021b68:	4603      	mov	r3, r0
 8021b6a:	e7d7      	b.n	8021b1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 8021b6c:	b280      	uxth	r0, r0
 8021b6e:	b2bf      	uxth	r7, r7
 8021b70:	fb00 fe07 	mul.w	lr, r0, r7
 8021b74:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8021b78:	0100      	lsls	r0, r0, #4
 8021b7a:	eba0 0c0e 	sub.w	ip, r0, lr
 8021b7e:	b2bf      	uxth	r7, r7
 8021b80:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8021b84:	fa1f fc8c 	uxth.w	ip, ip
 8021b88:	1bed      	subs	r5, r5, r7
 8021b8a:	b2ad      	uxth	r5, r5
 8021b8c:	fb0c f00a 	mul.w	r0, ip, sl
 8021b90:	fb05 000b 	mla	r0, r5, fp, r0
 8021b94:	fb07 0009 	mla	r0, r7, r9, r0
 8021b98:	fb0e 0008 	mla	r0, lr, r8, r0
 8021b9c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021ba0:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021ba4:	9003      	str	r0, [sp, #12]
 8021ba6:	d018      	beq.n	8021bda <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x142>
 8021ba8:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8021bac:	fb0b f000 	mul.w	r0, fp, r0
 8021bb0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021bb4:	fb0b fb02 	mul.w	fp, fp, r2
 8021bb8:	0a02      	lsrs	r2, r0, #8
 8021bba:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021bbe:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8021bc2:	4402      	add	r2, r0
 8021bc4:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8021bc8:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8021bcc:	0a12      	lsrs	r2, r2, #8
 8021bce:	0a00      	lsrs	r0, r0, #8
 8021bd0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021bd4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021bd8:	4302      	orrs	r2, r0
 8021bda:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021bde:	d019      	beq.n	8021c14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x17c>
 8021be0:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8021be4:	fb0a fb0b 	mul.w	fp, sl, fp
 8021be8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021bec:	fb0a fa06 	mul.w	sl, sl, r6
 8021bf0:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8021bf4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021bf8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021bfc:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8021c00:	445e      	add	r6, fp
 8021c02:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8021c06:	0a36      	lsrs	r6, r6, #8
 8021c08:	0a00      	lsrs	r0, r0, #8
 8021c0a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021c0e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021c12:	4306      	orrs	r6, r0
 8021c14:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021c18:	d019      	beq.n	8021c4e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1b6>
 8021c1a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021c1e:	fb09 fa0a 	mul.w	sl, r9, sl
 8021c22:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021c26:	fb09 f904 	mul.w	r9, r9, r4
 8021c2a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021c2e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021c32:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021c36:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8021c3a:	4454      	add	r4, sl
 8021c3c:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8021c40:	0a24      	lsrs	r4, r4, #8
 8021c42:	0a00      	lsrs	r0, r0, #8
 8021c44:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021c48:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021c4c:	4304      	orrs	r4, r0
 8021c4e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021c52:	d019      	beq.n	8021c88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1f0>
 8021c54:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8021c58:	fb08 f909 	mul.w	r9, r8, r9
 8021c5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021c60:	fb08 f803 	mul.w	r8, r8, r3
 8021c64:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8021c68:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021c6c:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8021c70:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8021c74:	444b      	add	r3, r9
 8021c76:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8021c7a:	0a1b      	lsrs	r3, r3, #8
 8021c7c:	0a00      	lsrs	r0, r0, #8
 8021c7e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021c82:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021c86:	4303      	orrs	r3, r0
 8021c88:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8021c8c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8021c90:	fb0c f808 	mul.w	r8, ip, r8
 8021c94:	fb05 8800 	mla	r8, r5, r0, r8
 8021c98:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8021c9c:	fb07 8800 	mla	r8, r7, r0, r8
 8021ca0:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8021ca4:	fb0e 8000 	mla	r0, lr, r0, r8
 8021ca8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021cac:	0a00      	lsrs	r0, r0, #8
 8021cae:	fb0c f606 	mul.w	r6, ip, r6
 8021cb2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021cb6:	fb05 6202 	mla	r2, r5, r2, r6
 8021cba:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8021cbe:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8021cc2:	fb07 2700 	mla	r7, r7, r0, r2
 8021cc6:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8021cca:	9b03      	ldr	r3, [sp, #12]
 8021ccc:	9c02      	ldr	r4, [sp, #8]
 8021cce:	9d01      	ldr	r5, [sp, #4]
 8021cd0:	fb0e 7000 	mla	r0, lr, r0, r7
 8021cd4:	43da      	mvns	r2, r3
 8021cd6:	9b00      	ldr	r3, [sp, #0]
 8021cd8:	b2d2      	uxtb	r2, r2
 8021cda:	0a00      	lsrs	r0, r0, #8
 8021cdc:	4353      	muls	r3, r2
 8021cde:	4354      	muls	r4, r2
 8021ce0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021ce4:	ea48 0000 	orr.w	r0, r8, r0
 8021ce8:	4355      	muls	r5, r2
 8021cea:	4622      	mov	r2, r4
 8021cec:	1c5c      	adds	r4, r3, #1
 8021cee:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 8021cf2:	0c03      	lsrs	r3, r0, #16
 8021cf4:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8021cf8:	4b0f      	ldr	r3, [pc, #60]	; (8021d38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 8021cfa:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 8021cfe:	1c54      	adds	r4, r2, #1
 8021d00:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8021d04:	b2c2      	uxtb	r2, r0
 8021d06:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8021d0a:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8021d0e:	1c6a      	adds	r2, r5, #1
 8021d10:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8021d14:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021d18:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8021d1c:	00c0      	lsls	r0, r0, #3
 8021d1e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021d22:	4318      	orrs	r0, r3
 8021d24:	8008      	strh	r0, [r1, #0]
 8021d26:	b005      	add	sp, #20
 8021d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d2c:	0802814e 	.word	0x0802814e
 8021d30:	08028711 	.word	0x08028711
 8021d34:	08028237 	.word	0x08028237
 8021d38:	fffff800 	.word	0xfffff800

08021d3c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d40:	ed2d 8b08 	vpush	{d8-d11}
 8021d44:	b09b      	sub	sp, #108	; 0x6c
 8021d46:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 8021d4a:	9218      	str	r2, [sp, #96]	; 0x60
 8021d4c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8021d4e:	9116      	str	r1, [sp, #88]	; 0x58
 8021d50:	9307      	str	r3, [sp, #28]
 8021d52:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8021d56:	9019      	str	r0, [sp, #100]	; 0x64
 8021d58:	6850      	ldr	r0, [r2, #4]
 8021d5a:	6812      	ldr	r2, [r2, #0]
 8021d5c:	fb00 1303 	mla	r3, r0, r3, r1
 8021d60:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021d64:	930a      	str	r3, [sp, #40]	; 0x28
 8021d66:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021d68:	681b      	ldr	r3, [r3, #0]
 8021d6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8021d6c:	eeb0 aa40 	vmov.f32	s20, s0
 8021d70:	eef0 9a60 	vmov.f32	s19, s1
 8021d74:	eeb0 9a41 	vmov.f32	s18, s2
 8021d78:	eeb0 8a62 	vmov.f32	s16, s5
 8021d7c:	eef0 8a43 	vmov.f32	s17, s6
 8021d80:	eef0 ba44 	vmov.f32	s23, s8
 8021d84:	eeb0 ba64 	vmov.f32	s22, s9
 8021d88:	eef0 aa45 	vmov.f32	s21, s10
 8021d8c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021d8e:	2b00      	cmp	r3, #0
 8021d90:	dc03      	bgt.n	8021d9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8021d92:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021d94:	2b00      	cmp	r3, #0
 8021d96:	f340 838a 	ble.w	80224ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x772>
 8021d9a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021d9c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021da0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021da4:	1e48      	subs	r0, r1, #1
 8021da6:	1e57      	subs	r7, r2, #1
 8021da8:	9b07      	ldr	r3, [sp, #28]
 8021daa:	2b00      	cmp	r3, #0
 8021dac:	f340 818b 	ble.w	80220c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021db0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8021db4:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021db8:	d406      	bmi.n	8021dc8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021dba:	4584      	cmp	ip, r0
 8021dbc:	da04      	bge.n	8021dc8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021dbe:	2b00      	cmp	r3, #0
 8021dc0:	db02      	blt.n	8021dc8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021dc2:	42bb      	cmp	r3, r7
 8021dc4:	f2c0 8180 	blt.w	80220c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8021dc8:	f11c 0c01 	adds.w	ip, ip, #1
 8021dcc:	f100 8170 	bmi.w	80220b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8021dd0:	4561      	cmp	r1, ip
 8021dd2:	f2c0 816d 	blt.w	80220b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8021dd6:	3301      	adds	r3, #1
 8021dd8:	f100 816a 	bmi.w	80220b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8021ddc:	429a      	cmp	r2, r3
 8021dde:	f2c0 8167 	blt.w	80220b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8021de2:	9b07      	ldr	r3, [sp, #28]
 8021de4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021de6:	9317      	str	r3, [sp, #92]	; 0x5c
 8021de8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021dea:	2b00      	cmp	r3, #0
 8021dec:	f340 8189 	ble.w	8022102 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8021df0:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8021df2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021df4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8021df8:	689b      	ldr	r3, [r3, #8]
 8021dfa:	1422      	asrs	r2, r4, #16
 8021dfc:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8021e00:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8021e04:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021e08:	f100 81d8 	bmi.w	80221bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8021e0c:	f103 38ff 	add.w	r8, r3, #4294967295
 8021e10:	4542      	cmp	r2, r8
 8021e12:	f280 81d3 	bge.w	80221bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8021e16:	f1bc 0f00 	cmp.w	ip, #0
 8021e1a:	f2c0 81cf 	blt.w	80221bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8021e1e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021e22:	45c4      	cmp	ip, r8
 8021e24:	f280 81ca 	bge.w	80221bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8021e28:	b21b      	sxth	r3, r3
 8021e2a:	fb0c 2203 	mla	r2, ip, r3, r2
 8021e2e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021e30:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8021e34:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8021e38:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8021e3c:	2900      	cmp	r1, #0
 8021e3e:	f000 81a6 	beq.w	802218e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8021e42:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8021e46:	950b      	str	r5, [sp, #44]	; 0x2c
 8021e48:	0e2d      	lsrs	r5, r5, #24
 8021e4a:	9512      	str	r5, [sp, #72]	; 0x48
 8021e4c:	b180      	cbz	r0, 8021e70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8021e4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8021e52:	3b01      	subs	r3, #1
 8021e54:	009b      	lsls	r3, r3, #2
 8021e56:	3304      	adds	r3, #4
 8021e58:	eb08 0c03 	add.w	ip, r8, r3
 8021e5c:	f858 3003 	ldr.w	r3, [r8, r3]
 8021e60:	9308      	str	r3, [sp, #32]
 8021e62:	0e1b      	lsrs	r3, r3, #24
 8021e64:	9310      	str	r3, [sp, #64]	; 0x40
 8021e66:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8021e6a:	930c      	str	r3, [sp, #48]	; 0x30
 8021e6c:	0e1b      	lsrs	r3, r3, #24
 8021e6e:	9313      	str	r3, [sp, #76]	; 0x4c
 8021e70:	b289      	uxth	r1, r1
 8021e72:	b280      	uxth	r0, r0
 8021e74:	fb01 f900 	mul.w	r9, r1, r0
 8021e78:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021e7c:	0109      	lsls	r1, r1, #4
 8021e7e:	eba1 0809 	sub.w	r8, r1, r9
 8021e82:	b280      	uxth	r0, r0
 8021e84:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8021e88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021e8a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021e8c:	fa1f f888 	uxth.w	r8, r8
 8021e90:	1a09      	subs	r1, r1, r0
 8021e92:	b289      	uxth	r1, r1
 8021e94:	fb08 f303 	mul.w	r3, r8, r3
 8021e98:	fb01 330e 	mla	r3, r1, lr, r3
 8021e9c:	fb00 3305 	mla	r3, r0, r5, r3
 8021ea0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021ea2:	fb09 3305 	mla	r3, r9, r5, r3
 8021ea6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021eaa:	2b00      	cmp	r3, #0
 8021eac:	f000 80f7 	beq.w	802209e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8021eb0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021eb4:	d01b      	beq.n	8021eee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 8021eb6:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8021eba:	fb0e fa0a 	mul.w	sl, lr, sl
 8021ebe:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021ec2:	fb0e fe02 	mul.w	lr, lr, r2
 8021ec6:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8021eca:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021ece:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021ed2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8021ed6:	4452      	add	r2, sl
 8021ed8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021edc:	0a12      	lsrs	r2, r2, #8
 8021ede:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021ee2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021ee6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021eea:	ea42 020c 	orr.w	r2, r2, ip
 8021eee:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021ef0:	2dff      	cmp	r5, #255	; 0xff
 8021ef2:	d021      	beq.n	8021f38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8021ef4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021ef6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8021efa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021efc:	fb05 fb0b 	mul.w	fp, r5, fp
 8021f00:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021f02:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021f06:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021f08:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021f0c:	fb05 fa0a 	mul.w	sl, r5, sl
 8021f10:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021f14:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021f18:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021f1c:	44de      	add	lr, fp
 8021f1e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021f22:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021f26:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021f2a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021f2e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021f32:	ea4e 050a 	orr.w	r5, lr, sl
 8021f36:	950b      	str	r5, [sp, #44]	; 0x2c
 8021f38:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021f3a:	2dff      	cmp	r5, #255	; 0xff
 8021f3c:	d021      	beq.n	8021f82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8021f3e:	9d08      	ldr	r5, [sp, #32]
 8021f40:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8021f44:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021f46:	fb05 fb0b 	mul.w	fp, r5, fp
 8021f4a:	9d08      	ldr	r5, [sp, #32]
 8021f4c:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8021f50:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021f52:	fb05 fa0e 	mul.w	sl, r5, lr
 8021f56:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021f5a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021f5e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021f62:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021f66:	44de      	add	lr, fp
 8021f68:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021f6c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021f70:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021f74:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021f78:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021f7c:	ea4e 050a 	orr.w	r5, lr, sl
 8021f80:	9508      	str	r5, [sp, #32]
 8021f82:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021f84:	2dff      	cmp	r5, #255	; 0xff
 8021f86:	d021      	beq.n	8021fcc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8021f88:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021f8a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8021f8e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021f90:	fb05 fb0b 	mul.w	fp, r5, fp
 8021f94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021f96:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021f9a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021f9c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021fa0:	fb05 fa0a 	mul.w	sl, r5, sl
 8021fa4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021fa8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021fac:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021fb0:	44de      	add	lr, fp
 8021fb2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021fb6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021fba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021fbe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021fc2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021fc6:	ea4e 050a 	orr.w	r5, lr, sl
 8021fca:	950c      	str	r5, [sp, #48]	; 0x30
 8021fcc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021fce:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8021fd2:	9d08      	ldr	r5, [sp, #32]
 8021fd4:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8021fd8:	fb08 fc0c 	mul.w	ip, r8, ip
 8021fdc:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021fe0:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8021fe4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021fe6:	fb00 cc0e 	mla	ip, r0, lr, ip
 8021fea:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8021fee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021ff0:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021ff4:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8021ff8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021ffc:	fb08 f80e 	mul.w	r8, r8, lr
 8022000:	fb01 8202 	mla	r2, r1, r2, r8
 8022004:	9908      	ldr	r1, [sp, #32]
 8022006:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802200a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802200c:	fb00 220a 	mla	r2, r0, sl, r2
 8022010:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8022014:	fb09 2900 	mla	r9, r9, r0, r2
 8022018:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802201c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022020:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022024:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022028:	ea4c 0c09 	orr.w	ip, ip, r9
 802202c:	2bff      	cmp	r3, #255	; 0xff
 802202e:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8022032:	f000 80b5 	beq.w	80221a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 8022036:	8839      	ldrh	r1, [r7, #0]
 8022038:	43db      	mvns	r3, r3
 802203a:	ea4f 2e21 	mov.w	lr, r1, asr #8
 802203e:	fa5f f883 	uxtb.w	r8, r3
 8022042:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8022046:	fb0e fe08 	mul.w	lr, lr, r8
 802204a:	10c8      	asrs	r0, r1, #3
 802204c:	00cb      	lsls	r3, r1, #3
 802204e:	f10e 0101 	add.w	r1, lr, #1
 8022052:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8022056:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 802205a:	eb0e 2e11 	add.w	lr, lr, r1, lsr #8
 802205e:	b2db      	uxtb	r3, r3
 8022060:	4964      	ldr	r1, [pc, #400]	; (80221f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>)
 8022062:	fb03 f308 	mul.w	r3, r3, r8
 8022066:	ea01 2e0e 	and.w	lr, r1, lr, lsl #8
 802206a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802206e:	1c59      	adds	r1, r3, #1
 8022070:	fb00 f008 	mul.w	r0, r0, r8
 8022074:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022078:	fa5f fc8c 	uxtb.w	ip, ip
 802207c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8022080:	1c43      	adds	r3, r0, #1
 8022082:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8022086:	b2d3      	uxtb	r3, r2
 8022088:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802208c:	00db      	lsls	r3, r3, #3
 802208e:	ea4e 0cdc 	orr.w	ip, lr, ip, lsr #3
 8022092:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022096:	ea4c 0c03 	orr.w	ip, ip, r3
 802209a:	f8a7 c000 	strh.w	ip, [r7]
 802209e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80220a0:	441c      	add	r4, r3
 80220a2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80220a4:	441e      	add	r6, r3
 80220a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80220a8:	3b01      	subs	r3, #1
 80220aa:	3702      	adds	r7, #2
 80220ac:	9317      	str	r3, [sp, #92]	; 0x5c
 80220ae:	e69b      	b.n	8021de8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 80220b0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80220b2:	441c      	add	r4, r3
 80220b4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80220b6:	441e      	add	r6, r3
 80220b8:	9b07      	ldr	r3, [sp, #28]
 80220ba:	3b01      	subs	r3, #1
 80220bc:	9307      	str	r3, [sp, #28]
 80220be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80220c0:	3302      	adds	r3, #2
 80220c2:	930a      	str	r3, [sp, #40]	; 0x28
 80220c4:	e670      	b.n	8021da8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80220c6:	d023      	beq.n	8022110 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 80220c8:	9b07      	ldr	r3, [sp, #28]
 80220ca:	982f      	ldr	r0, [sp, #188]	; 0xbc
 80220cc:	3b01      	subs	r3, #1
 80220ce:	fb00 4003 	mla	r0, r0, r3, r4
 80220d2:	1400      	asrs	r0, r0, #16
 80220d4:	f53f ae85 	bmi.w	8021de2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80220d8:	3901      	subs	r1, #1
 80220da:	4288      	cmp	r0, r1
 80220dc:	f6bf ae81 	bge.w	8021de2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80220e0:	9930      	ldr	r1, [sp, #192]	; 0xc0
 80220e2:	fb01 6303 	mla	r3, r1, r3, r6
 80220e6:	141b      	asrs	r3, r3, #16
 80220e8:	f53f ae7b 	bmi.w	8021de2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80220ec:	3a01      	subs	r2, #1
 80220ee:	4293      	cmp	r3, r2
 80220f0:	f6bf ae77 	bge.w	8021de2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80220f4:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80220f8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80220fc:	f1bb 0f00 	cmp.w	fp, #0
 8022100:	dc7a      	bgt.n	80221f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8022102:	9b07      	ldr	r3, [sp, #28]
 8022104:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8022108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802210a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802210e:	930a      	str	r3, [sp, #40]	; 0x28
 8022110:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022112:	2b00      	cmp	r3, #0
 8022114:	f340 81cb 	ble.w	80224ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x772>
 8022118:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802211c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022120:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022124:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022126:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802212a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802212e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022132:	eef0 6a48 	vmov.f32	s13, s16
 8022136:	ee69 7a27 	vmul.f32	s15, s18, s15
 802213a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802213e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022142:	ee16 4a90 	vmov	r4, s13
 8022146:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802214a:	eef0 6a68 	vmov.f32	s13, s17
 802214e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022152:	ee18 2a10 	vmov	r2, s16
 8022156:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802215a:	fb92 f3f3 	sdiv	r3, r2, r3
 802215e:	ee18 2a90 	vmov	r2, s17
 8022162:	932f      	str	r3, [sp, #188]	; 0xbc
 8022164:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022166:	fb92 f3f3 	sdiv	r3, r2, r3
 802216a:	9330      	str	r3, [sp, #192]	; 0xc0
 802216c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802216e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8022170:	3b01      	subs	r3, #1
 8022172:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022176:	9316      	str	r3, [sp, #88]	; 0x58
 8022178:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802217a:	bf08      	it	eq
 802217c:	4613      	moveq	r3, r2
 802217e:	ee16 6a90 	vmov	r6, s13
 8022182:	9307      	str	r3, [sp, #28]
 8022184:	eef0 8a67 	vmov.f32	s17, s15
 8022188:	eeb0 8a47 	vmov.f32	s16, s14
 802218c:	e5fe      	b.n	8021d8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 802218e:	2800      	cmp	r0, #0
 8022190:	f43f ae6e 	beq.w	8021e70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8022194:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8022198:	9308      	str	r3, [sp, #32]
 802219a:	0e1b      	lsrs	r3, r3, #24
 802219c:	9310      	str	r3, [sp, #64]	; 0x40
 802219e:	e667      	b.n	8021e70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80221a0:	ea4f 135c 	mov.w	r3, ip, lsr #5
 80221a4:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80221a8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80221ac:	f022 0207 	bic.w	r2, r2, #7
 80221b0:	431a      	orrs	r2, r3
 80221b2:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80221b6:	ea42 0c0c 	orr.w	ip, r2, ip
 80221ba:	e76e      	b.n	802209a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 80221bc:	f112 0801 	adds.w	r8, r2, #1
 80221c0:	f53f af6d 	bmi.w	802209e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80221c4:	4543      	cmp	r3, r8
 80221c6:	f6ff af6a 	blt.w	802209e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80221ca:	f11c 0801 	adds.w	r8, ip, #1
 80221ce:	f53f af66 	bmi.w	802209e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80221d2:	45c6      	cmp	lr, r8
 80221d4:	f6ff af63 	blt.w	802209e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80221d8:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80221dc:	fa0f f28e 	sxth.w	r2, lr
 80221e0:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80221e4:	9200      	str	r2, [sp, #0]
 80221e6:	b21b      	sxth	r3, r3
 80221e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80221ea:	9819      	ldr	r0, [sp, #100]	; 0x64
 80221ec:	4639      	mov	r1, r7
 80221ee:	f7ff fc53 	bl	8021a98 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 80221f2:	e754      	b.n	802209e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80221f4:	fffff800 	.word	0xfffff800
 80221f8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80221fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80221fc:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8022200:	1421      	asrs	r1, r4, #16
 8022202:	1433      	asrs	r3, r6, #16
 8022204:	fb07 1303 	mla	r3, r7, r3, r1
 8022208:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802220a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802220e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8022212:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022216:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802221a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802221e:	2a00      	cmp	r2, #0
 8022220:	f000 812e 	beq.w	8022480 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8022224:	684d      	ldr	r5, [r1, #4]
 8022226:	950d      	str	r5, [sp, #52]	; 0x34
 8022228:	0e2d      	lsrs	r5, r5, #24
 802222a:	9514      	str	r5, [sp, #80]	; 0x50
 802222c:	b178      	cbz	r0, 802224e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 802222e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8022232:	3f01      	subs	r7, #1
 8022234:	00bf      	lsls	r7, r7, #2
 8022236:	3704      	adds	r7, #4
 8022238:	eb01 0e07 	add.w	lr, r1, r7
 802223c:	59c9      	ldr	r1, [r1, r7]
 802223e:	9109      	str	r1, [sp, #36]	; 0x24
 8022240:	0e09      	lsrs	r1, r1, #24
 8022242:	9111      	str	r1, [sp, #68]	; 0x44
 8022244:	f8de 1004 	ldr.w	r1, [lr, #4]
 8022248:	910e      	str	r1, [sp, #56]	; 0x38
 802224a:	0e09      	lsrs	r1, r1, #24
 802224c:	9115      	str	r1, [sp, #84]	; 0x54
 802224e:	b292      	uxth	r2, r2
 8022250:	b280      	uxth	r0, r0
 8022252:	fb02 f900 	mul.w	r9, r2, r0
 8022256:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802225a:	0112      	lsls	r2, r2, #4
 802225c:	eba2 0e09 	sub.w	lr, r2, r9
 8022260:	b280      	uxth	r0, r0
 8022262:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8022266:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022268:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802226a:	fa1f fe8e 	uxth.w	lr, lr
 802226e:	1a09      	subs	r1, r1, r0
 8022270:	b289      	uxth	r1, r1
 8022272:	fb0e f202 	mul.w	r2, lr, r2
 8022276:	fb01 220c 	mla	r2, r1, ip, r2
 802227a:	fb00 2205 	mla	r2, r0, r5, r2
 802227e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8022280:	fb09 2205 	mla	r2, r9, r5, r2
 8022284:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022288:	2a00      	cmp	r2, #0
 802228a:	f000 80f0 	beq.w	802246e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x732>
 802228e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022292:	d019      	beq.n	80222c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 8022294:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8022298:	fb0c fa0a 	mul.w	sl, ip, sl
 802229c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80222a0:	fb0c fc03 	mul.w	ip, ip, r3
 80222a4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80222a8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80222ac:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80222b0:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80222b4:	4453      	add	r3, sl
 80222b6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80222ba:	0a1b      	lsrs	r3, r3, #8
 80222bc:	0a3f      	lsrs	r7, r7, #8
 80222be:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80222c2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80222c6:	433b      	orrs	r3, r7
 80222c8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80222ca:	2dff      	cmp	r5, #255	; 0xff
 80222cc:	d020      	beq.n	8022310 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d4>
 80222ce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80222d0:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80222d4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80222d6:	436f      	muls	r7, r5
 80222d8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80222da:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80222de:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80222e0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80222e4:	fb05 fa0a 	mul.w	sl, r5, sl
 80222e8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80222ec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80222f0:	44bc      	add	ip, r7
 80222f2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80222f6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80222fa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80222fe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022302:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022306:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802230a:	ea4c 050a 	orr.w	r5, ip, sl
 802230e:	950d      	str	r5, [sp, #52]	; 0x34
 8022310:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022312:	2dff      	cmp	r5, #255	; 0xff
 8022314:	d020      	beq.n	8022358 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8022316:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8022318:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802231c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802231e:	436f      	muls	r7, r5
 8022320:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8022322:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8022326:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022328:	fb05 fa0c 	mul.w	sl, r5, ip
 802232c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022330:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022334:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022338:	44bc      	add	ip, r7
 802233a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802233e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022342:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022346:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802234a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802234e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022352:	ea4c 050a 	orr.w	r5, ip, sl
 8022356:	9509      	str	r5, [sp, #36]	; 0x24
 8022358:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802235a:	2dff      	cmp	r5, #255	; 0xff
 802235c:	d020      	beq.n	80223a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x664>
 802235e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8022360:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8022364:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8022366:	436f      	muls	r7, r5
 8022368:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802236a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802236e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8022370:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022374:	fb05 fa0a 	mul.w	sl, r5, sl
 8022378:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802237c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022380:	44bc      	add	ip, r7
 8022382:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022386:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802238a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802238e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022392:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022396:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802239a:	ea4c 050a 	orr.w	r5, ip, sl
 802239e:	950e      	str	r5, [sp, #56]	; 0x38
 80223a0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80223a2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80223a6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80223a8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80223ac:	fb0e f707 	mul.w	r7, lr, r7
 80223b0:	fb01 770c 	mla	r7, r1, ip, r7
 80223b4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80223b8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80223ba:	fb00 770c 	mla	r7, r0, ip, r7
 80223be:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80223c2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80223c4:	fb09 770c 	mla	r7, r9, ip, r7
 80223c8:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80223cc:	fb0e fe0c 	mul.w	lr, lr, ip
 80223d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80223d4:	fb01 e303 	mla	r3, r1, r3, lr
 80223d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80223da:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80223de:	990e      	ldr	r1, [sp, #56]	; 0x38
 80223e0:	fb00 330a 	mla	r3, r0, sl, r3
 80223e4:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80223e8:	fb09 3c0c 	mla	ip, r9, ip, r3
 80223ec:	0a3f      	lsrs	r7, r7, #8
 80223ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80223f2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80223f6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80223fa:	ea47 070c 	orr.w	r7, r7, ip
 80223fe:	2aff      	cmp	r2, #255	; 0xff
 8022400:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8022404:	d045      	beq.n	8022492 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x756>
 8022406:	f8b8 1000 	ldrh.w	r1, [r8]
 802240a:	43d2      	mvns	r2, r2
 802240c:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8022410:	fa5f fe82 	uxtb.w	lr, r2
 8022414:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022418:	fb0c fc0e 	mul.w	ip, ip, lr
 802241c:	10c8      	asrs	r0, r1, #3
 802241e:	00ca      	lsls	r2, r1, #3
 8022420:	f10c 0101 	add.w	r1, ip, #1
 8022424:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 8022428:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802242c:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8022430:	b2d2      	uxtb	r2, r2
 8022432:	4921      	ldr	r1, [pc, #132]	; (80224b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>)
 8022434:	fb02 f20e 	mul.w	r2, r2, lr
 8022438:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 802243c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022440:	1c51      	adds	r1, r2, #1
 8022442:	fb00 f00e 	mul.w	r0, r0, lr
 8022446:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802244a:	b2ff      	uxtb	r7, r7
 802244c:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8022450:	1c42      	adds	r2, r0, #1
 8022452:	ea4c 0cd7 	orr.w	ip, ip, r7, lsr #3
 8022456:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802245a:	b2df      	uxtb	r7, r3
 802245c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8022460:	00ff      	lsls	r7, r7, #3
 8022462:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022466:	ea4c 0c07 	orr.w	ip, ip, r7
 802246a:	f8a8 c000 	strh.w	ip, [r8]
 802246e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8022470:	441c      	add	r4, r3
 8022472:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022474:	f108 0802 	add.w	r8, r8, #2
 8022478:	441e      	add	r6, r3
 802247a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802247e:	e63d      	b.n	80220fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8022480:	2800      	cmp	r0, #0
 8022482:	f43f aee4 	beq.w	802224e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8022486:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802248a:	9109      	str	r1, [sp, #36]	; 0x24
 802248c:	0e09      	lsrs	r1, r1, #24
 802248e:	9111      	str	r1, [sp, #68]	; 0x44
 8022490:	e6dd      	b.n	802224e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8022492:	097a      	lsrs	r2, r7, #5
 8022494:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8022498:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802249c:	f023 0307 	bic.w	r3, r3, #7
 80224a0:	4313      	orrs	r3, r2
 80224a2:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80224a6:	431f      	orrs	r7, r3
 80224a8:	f8a8 7000 	strh.w	r7, [r8]
 80224ac:	e7df      	b.n	802246e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x732>
 80224ae:	b01b      	add	sp, #108	; 0x6c
 80224b0:	ecbd 8b08 	vpop	{d8-d11}
 80224b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80224b8:	fffff800 	.word	0xfffff800

080224bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 80224bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80224c0:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 80224c4:	2c00      	cmp	r4, #0
 80224c6:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80224ca:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80224ce:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80224d2:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 80224d6:	fb04 ce03 	mla	lr, r4, r3, ip
 80224da:	db60      	blt.n	802259e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 80224dc:	45a1      	cmp	r9, r4
 80224de:	dd5e      	ble.n	802259e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 80224e0:	f1bc 0f00 	cmp.w	ip, #0
 80224e4:	db59      	blt.n	802259a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 80224e6:	45e0      	cmp	r8, ip
 80224e8:	dd57      	ble.n	802259a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 80224ea:	ea4f 005e 	mov.w	r0, lr, lsr #1
 80224ee:	f01e 0f01 	tst.w	lr, #1
 80224f2:	5c16      	ldrb	r6, [r2, r0]
 80224f4:	bf0c      	ite	eq
 80224f6:	f006 060f 	andeq.w	r6, r6, #15
 80224fa:	1136      	asrne	r6, r6, #4
 80224fc:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022500:	b2f6      	uxtb	r6, r6
 8022502:	f11c 0001 	adds.w	r0, ip, #1
 8022506:	d44d      	bmi.n	80225a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8022508:	4580      	cmp	r8, r0
 802250a:	dd4b      	ble.n	80225a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 802250c:	2d00      	cmp	r5, #0
 802250e:	d04b      	beq.n	80225a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 8022510:	f10e 0a01 	add.w	sl, lr, #1
 8022514:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8022518:	f01a 0f01 	tst.w	sl, #1
 802251c:	5c10      	ldrb	r0, [r2, r0]
 802251e:	bf0c      	ite	eq
 8022520:	f000 000f 	andeq.w	r0, r0, #15
 8022524:	1100      	asrne	r0, r0, #4
 8022526:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802252a:	b2c0      	uxtb	r0, r0
 802252c:	3401      	adds	r4, #1
 802252e:	d43f      	bmi.n	80225b0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8022530:	45a1      	cmp	r9, r4
 8022532:	dd3d      	ble.n	80225b0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8022534:	2f00      	cmp	r7, #0
 8022536:	f000 809e 	beq.w	8022676 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ba>
 802253a:	f1bc 0f00 	cmp.w	ip, #0
 802253e:	db35      	blt.n	80225ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8022540:	45e0      	cmp	r8, ip
 8022542:	dd33      	ble.n	80225ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8022544:	eb03 090e 	add.w	r9, r3, lr
 8022548:	ea4f 0459 	mov.w	r4, r9, lsr #1
 802254c:	f019 0f01 	tst.w	r9, #1
 8022550:	5d14      	ldrb	r4, [r2, r4]
 8022552:	bf0c      	ite	eq
 8022554:	f004 040f 	andeq.w	r4, r4, #15
 8022558:	1124      	asrne	r4, r4, #4
 802255a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802255e:	b2e4      	uxtb	r4, r4
 8022560:	f11c 0c01 	adds.w	ip, ip, #1
 8022564:	d427      	bmi.n	80225b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8022566:	45e0      	cmp	r8, ip
 8022568:	dd25      	ble.n	80225b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 802256a:	b335      	cbz	r5, 80225ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 802256c:	3301      	adds	r3, #1
 802256e:	449e      	add	lr, r3
 8022570:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022574:	f01e 0f01 	tst.w	lr, #1
 8022578:	5cd2      	ldrb	r2, [r2, r3]
 802257a:	bf0c      	ite	eq
 802257c:	f002 020f 	andeq.w	r2, r2, #15
 8022580:	1112      	asrne	r2, r2, #4
 8022582:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022586:	b2d3      	uxtb	r3, r2
 8022588:	2d0f      	cmp	r5, #15
 802258a:	d917      	bls.n	80225bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 802258c:	4b3c      	ldr	r3, [pc, #240]	; (8022680 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c4>)
 802258e:	4a3d      	ldr	r2, [pc, #244]	; (8022684 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8022590:	483d      	ldr	r0, [pc, #244]	; (8022688 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8022592:	f240 210d 	movw	r1, #525	; 0x20d
 8022596:	f001 f8d5 	bl	8023744 <__assert_func>
 802259a:	2600      	movs	r6, #0
 802259c:	e7b1      	b.n	8022502 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 802259e:	2000      	movs	r0, #0
 80225a0:	4606      	mov	r6, r0
 80225a2:	e7c3      	b.n	802252c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 80225a4:	2000      	movs	r0, #0
 80225a6:	e7c1      	b.n	802252c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 80225a8:	4628      	mov	r0, r5
 80225aa:	e7bf      	b.n	802252c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 80225ac:	2400      	movs	r4, #0
 80225ae:	e7d7      	b.n	8022560 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 80225b0:	2300      	movs	r3, #0
 80225b2:	461c      	mov	r4, r3
 80225b4:	e7e8      	b.n	8022588 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 80225b6:	2300      	movs	r3, #0
 80225b8:	e7e6      	b.n	8022588 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 80225ba:	462b      	mov	r3, r5
 80225bc:	2f0f      	cmp	r7, #15
 80225be:	d8e5      	bhi.n	802258c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 80225c0:	b2ad      	uxth	r5, r5
 80225c2:	b2bf      	uxth	r7, r7
 80225c4:	fb05 fc07 	mul.w	ip, r5, r7
 80225c8:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 80225cc:	012d      	lsls	r5, r5, #4
 80225ce:	b2bf      	uxth	r7, r7
 80225d0:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 80225d4:	eba5 050c 	sub.w	r5, r5, ip
 80225d8:	1bd2      	subs	r2, r2, r7
 80225da:	b2ad      	uxth	r5, r5
 80225dc:	b292      	uxth	r2, r2
 80225de:	4368      	muls	r0, r5
 80225e0:	fb06 0002 	mla	r0, r6, r2, r0
 80225e4:	fb07 0404 	mla	r4, r7, r4, r0
 80225e8:	fb0c 4303 	mla	r3, ip, r3, r4
 80225ec:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80225f0:	2b00      	cmp	r3, #0
 80225f2:	d03e      	beq.n	8022672 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1b6>
 80225f4:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 80225f8:	4a24      	ldr	r2, [pc, #144]	; (802268c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1d0>)
 80225fa:	4343      	muls	r3, r0
 80225fc:	1c58      	adds	r0, r3, #1
 80225fe:	6816      	ldr	r6, [r2, #0]
 8022600:	880a      	ldrh	r2, [r1, #0]
 8022602:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022606:	1200      	asrs	r0, r0, #8
 8022608:	b284      	uxth	r4, r0
 802260a:	1215      	asrs	r5, r2, #8
 802260c:	43c0      	mvns	r0, r0
 802260e:	b2c3      	uxtb	r3, r0
 8022610:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022614:	0a30      	lsrs	r0, r6, #8
 8022616:	fb15 f503 	smulbb	r5, r5, r3
 802261a:	10d7      	asrs	r7, r2, #3
 802261c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022620:	fb00 5004 	mla	r0, r0, r4, r5
 8022624:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022628:	08f5      	lsrs	r5, r6, #3
 802262a:	00d2      	lsls	r2, r2, #3
 802262c:	fb17 f703 	smulbb	r7, r7, r3
 8022630:	b2d2      	uxtb	r2, r2
 8022632:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022636:	00f6      	lsls	r6, r6, #3
 8022638:	fb05 7504 	mla	r5, r5, r4, r7
 802263c:	fb12 f303 	smulbb	r3, r2, r3
 8022640:	b2f6      	uxtb	r6, r6
 8022642:	fb06 3304 	mla	r3, r6, r4, r3
 8022646:	b2ad      	uxth	r5, r5
 8022648:	b29a      	uxth	r2, r3
 802264a:	b280      	uxth	r0, r0
 802264c:	1c6b      	adds	r3, r5, #1
 802264e:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8022652:	1c44      	adds	r4, r0, #1
 8022654:	095b      	lsrs	r3, r3, #5
 8022656:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 802265a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802265e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022662:	4303      	orrs	r3, r0
 8022664:	1c50      	adds	r0, r2, #1
 8022666:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802266a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802266e:	4313      	orrs	r3, r2
 8022670:	800b      	strh	r3, [r1, #0]
 8022672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022676:	2d0f      	cmp	r5, #15
 8022678:	d888      	bhi.n	802258c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 802267a:	463b      	mov	r3, r7
 802267c:	463c      	mov	r4, r7
 802267e:	e79f      	b.n	80225c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 8022680:	0802814e 	.word	0x0802814e
 8022684:	08028711 	.word	0x08028711
 8022688:	08028237 	.word	0x08028237
 802268c:	2000a044 	.word	0x2000a044

08022690 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022694:	ed2d 8b08 	vpush	{d8-d11}
 8022698:	b097      	sub	sp, #92	; 0x5c
 802269a:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 802269e:	9214      	str	r2, [sp, #80]	; 0x50
 80226a0:	9309      	str	r3, [sp, #36]	; 0x24
 80226a2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80226a4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80226a8:	910d      	str	r1, [sp, #52]	; 0x34
 80226aa:	930e      	str	r3, [sp, #56]	; 0x38
 80226ac:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80226b0:	9015      	str	r0, [sp, #84]	; 0x54
 80226b2:	6850      	ldr	r0, [r2, #4]
 80226b4:	6812      	ldr	r2, [r2, #0]
 80226b6:	fb00 1303 	mla	r3, r0, r3, r1
 80226ba:	eb02 0a43 	add.w	sl, r2, r3, lsl #1
 80226be:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80226c0:	689b      	ldr	r3, [r3, #8]
 80226c2:	3301      	adds	r3, #1
 80226c4:	f023 0301 	bic.w	r3, r3, #1
 80226c8:	930a      	str	r3, [sp, #40]	; 0x28
 80226ca:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80226cc:	681f      	ldr	r7, [r3, #0]
 80226ce:	eeb0 aa40 	vmov.f32	s20, s0
 80226d2:	eef0 9a60 	vmov.f32	s19, s1
 80226d6:	eeb0 9a41 	vmov.f32	s18, s2
 80226da:	eeb0 8a62 	vmov.f32	s16, s5
 80226de:	eef0 8a43 	vmov.f32	s17, s6
 80226e2:	eef0 ba44 	vmov.f32	s23, s8
 80226e6:	eeb0 ba64 	vmov.f32	s22, s9
 80226ea:	eef0 aa45 	vmov.f32	s21, s10
 80226ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80226f0:	2b00      	cmp	r3, #0
 80226f2:	dc03      	bgt.n	80226fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80226f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80226f6:	2b00      	cmp	r3, #0
 80226f8:	f340 826a 	ble.w	8022bd0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>
 80226fc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80226fe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022702:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022706:	1e48      	subs	r0, r1, #1
 8022708:	f102 3cff 	add.w	ip, r2, #4294967295
 802270c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802270e:	2b00      	cmp	r3, #0
 8022710:	f340 80f3 	ble.w	80228fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8022714:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022718:	ea4f 4326 	mov.w	r3, r6, asr #16
 802271c:	d406      	bmi.n	802272c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802271e:	4586      	cmp	lr, r0
 8022720:	da04      	bge.n	802272c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8022722:	2b00      	cmp	r3, #0
 8022724:	db02      	blt.n	802272c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8022726:	4563      	cmp	r3, ip
 8022728:	f2c0 80e8 	blt.w	80228fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 802272c:	f11e 0e01 	adds.w	lr, lr, #1
 8022730:	f100 80d9 	bmi.w	80228e6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 8022734:	4571      	cmp	r1, lr
 8022736:	f2c0 80d6 	blt.w	80228e6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 802273a:	3301      	adds	r3, #1
 802273c:	f100 80d3 	bmi.w	80228e6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 8022740:	429a      	cmp	r2, r3
 8022742:	f2c0 80d0 	blt.w	80228e6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 8022746:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 802274a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 802274e:	930f      	str	r3, [sp, #60]	; 0x3c
 8022750:	46d0      	mov	r8, sl
 8022752:	f1b9 0f00 	cmp.w	r9, #0
 8022756:	f340 80f0 	ble.w	802293a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 802275a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802275c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8022760:	1423      	asrs	r3, r4, #16
 8022762:	ea4f 4026 	mov.w	r0, r6, asr #16
 8022766:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802276a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802276e:	f100 8139 	bmi.w	80229e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8022772:	f10c 3bff 	add.w	fp, ip, #4294967295
 8022776:	455b      	cmp	r3, fp
 8022778:	f280 8134 	bge.w	80229e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802277c:	2800      	cmp	r0, #0
 802277e:	f2c0 8131 	blt.w	80229e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8022782:	f10e 3bff 	add.w	fp, lr, #4294967295
 8022786:	4558      	cmp	r0, fp
 8022788:	f280 812c 	bge.w	80229e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802278c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802278e:	fb00 3305 	mla	r3, r0, r5, r3
 8022792:	0858      	lsrs	r0, r3, #1
 8022794:	07dd      	lsls	r5, r3, #31
 8022796:	f817 c000 	ldrb.w	ip, [r7, r0]
 802279a:	bf54      	ite	pl
 802279c:	f00c 0c0f 	andpl.w	ip, ip, #15
 80227a0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80227a4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80227a8:	fa5f fc8c 	uxtb.w	ip, ip
 80227ac:	2a00      	cmp	r2, #0
 80227ae:	f000 8108 	beq.w	80229c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80227b2:	1c58      	adds	r0, r3, #1
 80227b4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80227b8:	07c0      	lsls	r0, r0, #31
 80227ba:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80227be:	bf54      	ite	pl
 80227c0:	f00e 0e0f 	andpl.w	lr, lr, #15
 80227c4:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80227c8:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80227cc:	fa5f f08e 	uxtb.w	r0, lr
 80227d0:	9010      	str	r0, [sp, #64]	; 0x40
 80227d2:	b1d1      	cbz	r1, 802280a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 80227d4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80227d6:	4403      	add	r3, r0
 80227d8:	0858      	lsrs	r0, r3, #1
 80227da:	07dd      	lsls	r5, r3, #31
 80227dc:	5c38      	ldrb	r0, [r7, r0]
 80227de:	bf54      	ite	pl
 80227e0:	f000 000f 	andpl.w	r0, r0, #15
 80227e4:	1100      	asrmi	r0, r0, #4
 80227e6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80227ea:	3301      	adds	r3, #1
 80227ec:	b2c0      	uxtb	r0, r0
 80227ee:	900b      	str	r0, [sp, #44]	; 0x2c
 80227f0:	0858      	lsrs	r0, r3, #1
 80227f2:	07dd      	lsls	r5, r3, #31
 80227f4:	f817 e000 	ldrb.w	lr, [r7, r0]
 80227f8:	bf54      	ite	pl
 80227fa:	f00e 030f 	andpl.w	r3, lr, #15
 80227fe:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8022802:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022806:	b2db      	uxtb	r3, r3
 8022808:	9311      	str	r3, [sp, #68]	; 0x44
 802280a:	b292      	uxth	r2, r2
 802280c:	b289      	uxth	r1, r1
 802280e:	fb02 f301 	mul.w	r3, r2, r1
 8022812:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8022816:	0112      	lsls	r2, r2, #4
 8022818:	b289      	uxth	r1, r1
 802281a:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802281e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8022820:	1ad2      	subs	r2, r2, r3
 8022822:	1a40      	subs	r0, r0, r1
 8022824:	b292      	uxth	r2, r2
 8022826:	436a      	muls	r2, r5
 8022828:	b280      	uxth	r0, r0
 802282a:	fb0c 2c00 	mla	ip, ip, r0, r2
 802282e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022830:	fb01 c102 	mla	r1, r1, r2, ip
 8022834:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022836:	fb03 1302 	mla	r3, r3, r2, r1
 802283a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802283e:	2b00      	cmp	r3, #0
 8022840:	d048      	beq.n	80228d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8022842:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022844:	4a78      	ldr	r2, [pc, #480]	; (8022a28 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>)
 8022846:	434b      	muls	r3, r1
 8022848:	1c59      	adds	r1, r3, #1
 802284a:	f8d2 e000 	ldr.w	lr, [r2]
 802284e:	f8b8 2000 	ldrh.w	r2, [r8]
 8022852:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022856:	121b      	asrs	r3, r3, #8
 8022858:	b299      	uxth	r1, r3
 802285a:	ea4f 2c22 	mov.w	ip, r2, asr #8
 802285e:	43db      	mvns	r3, r3
 8022860:	b2db      	uxtb	r3, r3
 8022862:	ea4f 201e 	mov.w	r0, lr, lsr #8
 8022866:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802286a:	fb1c fc03 	smulbb	ip, ip, r3
 802286e:	ea4f 0be2 	mov.w	fp, r2, asr #3
 8022872:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022876:	fb00 c001 	mla	r0, r0, r1, ip
 802287a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 802287e:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 8022882:	fb1b fb03 	smulbb	fp, fp, r3
 8022886:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802288a:	00d2      	lsls	r2, r2, #3
 802288c:	fb0c bc01 	mla	ip, ip, r1, fp
 8022890:	b2d2      	uxtb	r2, r2
 8022892:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022896:	fb12 f303 	smulbb	r3, r2, r3
 802289a:	fa1f fc8c 	uxth.w	ip, ip
 802289e:	fa5f fe8e 	uxtb.w	lr, lr
 80228a2:	b280      	uxth	r0, r0
 80228a4:	fb0e 3101 	mla	r1, lr, r1, r3
 80228a8:	f10c 0201 	add.w	r2, ip, #1
 80228ac:	b289      	uxth	r1, r1
 80228ae:	1c43      	adds	r3, r0, #1
 80228b0:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 80228b4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80228b8:	0952      	lsrs	r2, r2, #5
 80228ba:	1c4b      	adds	r3, r1, #1
 80228bc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80228c0:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80228c4:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80228c8:	4310      	orrs	r0, r2
 80228ca:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80228ce:	4308      	orrs	r0, r1
 80228d0:	f8a8 0000 	strh.w	r0, [r8]
 80228d4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80228d6:	441c      	add	r4, r3
 80228d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80228da:	f108 0802 	add.w	r8, r8, #2
 80228de:	441e      	add	r6, r3
 80228e0:	f109 39ff 	add.w	r9, r9, #4294967295
 80228e4:	e735      	b.n	8022752 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 80228e6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80228e8:	441c      	add	r4, r3
 80228ea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80228ec:	441e      	add	r6, r3
 80228ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80228f0:	3b01      	subs	r3, #1
 80228f2:	9309      	str	r3, [sp, #36]	; 0x24
 80228f4:	f10a 0a02 	add.w	sl, sl, #2
 80228f8:	e708      	b.n	802270c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80228fa:	d023      	beq.n	8022944 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 80228fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80228fe:	982b      	ldr	r0, [sp, #172]	; 0xac
 8022900:	3b01      	subs	r3, #1
 8022902:	fb00 4003 	mla	r0, r0, r3, r4
 8022906:	1400      	asrs	r0, r0, #16
 8022908:	f53f af1d 	bmi.w	8022746 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802290c:	3901      	subs	r1, #1
 802290e:	4288      	cmp	r0, r1
 8022910:	f6bf af19 	bge.w	8022746 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8022914:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8022916:	fb01 6303 	mla	r3, r1, r3, r6
 802291a:	141b      	asrs	r3, r3, #16
 802291c:	f53f af13 	bmi.w	8022746 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8022920:	3a01      	subs	r2, #1
 8022922:	4293      	cmp	r3, r2
 8022924:	f6bf af0f 	bge.w	8022746 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8022928:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 802292c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8022930:	930f      	str	r3, [sp, #60]	; 0x3c
 8022932:	46d1      	mov	r9, sl
 8022934:	f1bb 0f00 	cmp.w	fp, #0
 8022938:	dc78      	bgt.n	8022a2c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 802293a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802293c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8022940:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8022944:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022946:	2b00      	cmp	r3, #0
 8022948:	f340 8142 	ble.w	8022bd0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>
 802294c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022950:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022954:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022958:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802295a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802295e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022962:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022966:	eef0 6a48 	vmov.f32	s13, s16
 802296a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802296e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022972:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022976:	ee16 4a90 	vmov	r4, s13
 802297a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802297e:	eef0 6a68 	vmov.f32	s13, s17
 8022982:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022986:	ee18 2a10 	vmov	r2, s16
 802298a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802298e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022992:	ee18 2a90 	vmov	r2, s17
 8022996:	932b      	str	r3, [sp, #172]	; 0xac
 8022998:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802299a:	fb92 f3f3 	sdiv	r3, r2, r3
 802299e:	932c      	str	r3, [sp, #176]	; 0xb0
 80229a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80229a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80229a4:	3b01      	subs	r3, #1
 80229a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80229aa:	930d      	str	r3, [sp, #52]	; 0x34
 80229ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80229ae:	bf08      	it	eq
 80229b0:	4613      	moveq	r3, r2
 80229b2:	ee16 6a90 	vmov	r6, s13
 80229b6:	9309      	str	r3, [sp, #36]	; 0x24
 80229b8:	eef0 8a67 	vmov.f32	s17, s15
 80229bc:	eeb0 8a47 	vmov.f32	s16, s14
 80229c0:	e695      	b.n	80226ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80229c2:	2900      	cmp	r1, #0
 80229c4:	f43f af21 	beq.w	802280a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 80229c8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80229ca:	4418      	add	r0, r3
 80229cc:	0843      	lsrs	r3, r0, #1
 80229ce:	07c0      	lsls	r0, r0, #31
 80229d0:	5cfb      	ldrb	r3, [r7, r3]
 80229d2:	bf54      	ite	pl
 80229d4:	f003 030f 	andpl.w	r3, r3, #15
 80229d8:	111b      	asrmi	r3, r3, #4
 80229da:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80229de:	b2db      	uxtb	r3, r3
 80229e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80229e2:	e712      	b.n	802280a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 80229e4:	f113 0b01 	adds.w	fp, r3, #1
 80229e8:	f53f af74 	bmi.w	80228d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80229ec:	45dc      	cmp	ip, fp
 80229ee:	f6ff af71 	blt.w	80228d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80229f2:	f110 0b01 	adds.w	fp, r0, #1
 80229f6:	f53f af6d 	bmi.w	80228d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80229fa:	45de      	cmp	lr, fp
 80229fc:	f6ff af6a 	blt.w	80228d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8022a00:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8022a02:	9302      	str	r3, [sp, #8]
 8022a04:	fa0f f38e 	sxth.w	r3, lr
 8022a08:	9301      	str	r3, [sp, #4]
 8022a0a:	fa0f f38c 	sxth.w	r3, ip
 8022a0e:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8022a12:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8022a16:	9300      	str	r3, [sp, #0]
 8022a18:	463a      	mov	r2, r7
 8022a1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022a1c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022a1e:	4641      	mov	r1, r8
 8022a20:	f7ff fd4c 	bl	80224bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8022a24:	e756      	b.n	80228d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8022a26:	bf00      	nop
 8022a28:	2000a044 	.word	0x2000a044
 8022a2c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8022a2e:	1422      	asrs	r2, r4, #16
 8022a30:	1433      	asrs	r3, r6, #16
 8022a32:	fb05 2303 	mla	r3, r5, r3, r2
 8022a36:	085a      	lsrs	r2, r3, #1
 8022a38:	07dd      	lsls	r5, r3, #31
 8022a3a:	5cba      	ldrb	r2, [r7, r2]
 8022a3c:	bf54      	ite	pl
 8022a3e:	f002 020f 	andpl.w	r2, r2, #15
 8022a42:	1112      	asrmi	r2, r2, #4
 8022a44:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022a48:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8022a4c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022a50:	b2d2      	uxtb	r2, r2
 8022a52:	2900      	cmp	r1, #0
 8022a54:	f000 80a8 	beq.w	8022ba8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8022a58:	f103 0e01 	add.w	lr, r3, #1
 8022a5c:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8022a60:	f01e 0f01 	tst.w	lr, #1
 8022a64:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022a68:	bf0c      	ite	eq
 8022a6a:	f00c 0c0f 	andeq.w	ip, ip, #15
 8022a6e:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8022a72:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022a76:	fa5f f58c 	uxtb.w	r5, ip
 8022a7a:	9512      	str	r5, [sp, #72]	; 0x48
 8022a7c:	b300      	cbz	r0, 8022ac0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x430>
 8022a7e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8022a80:	442b      	add	r3, r5
 8022a82:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022a86:	07dd      	lsls	r5, r3, #31
 8022a88:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022a8c:	bf54      	ite	pl
 8022a8e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022a92:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022a96:	3301      	adds	r3, #1
 8022a98:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022a9c:	fa5f f58c 	uxtb.w	r5, ip
 8022aa0:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022aa4:	950c      	str	r5, [sp, #48]	; 0x30
 8022aa6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022aaa:	07dd      	lsls	r5, r3, #31
 8022aac:	bf54      	ite	pl
 8022aae:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022ab2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022ab6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022aba:	fa5f f38c 	uxtb.w	r3, ip
 8022abe:	9313      	str	r3, [sp, #76]	; 0x4c
 8022ac0:	b289      	uxth	r1, r1
 8022ac2:	b280      	uxth	r0, r0
 8022ac4:	fb01 f300 	mul.w	r3, r1, r0
 8022ac8:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8022acc:	0109      	lsls	r1, r1, #4
 8022ace:	b280      	uxth	r0, r0
 8022ad0:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8022ad4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8022ad6:	1ac9      	subs	r1, r1, r3
 8022ad8:	ebac 0c00 	sub.w	ip, ip, r0
 8022adc:	b289      	uxth	r1, r1
 8022ade:	4369      	muls	r1, r5
 8022ae0:	fa1f fc8c 	uxth.w	ip, ip
 8022ae4:	fb02 120c 	mla	r2, r2, ip, r1
 8022ae8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022aea:	fb00 2001 	mla	r0, r0, r1, r2
 8022aee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022af0:	fb03 0302 	mla	r3, r3, r2, r0
 8022af4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022af8:	2b00      	cmp	r3, #0
 8022afa:	d04c      	beq.n	8022b96 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8022afc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022afe:	4a37      	ldr	r2, [pc, #220]	; (8022bdc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>)
 8022b00:	434b      	muls	r3, r1
 8022b02:	1c59      	adds	r1, r3, #1
 8022b04:	f8d2 e000 	ldr.w	lr, [r2]
 8022b08:	f8b9 2000 	ldrh.w	r2, [r9]
 8022b0c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022b10:	121b      	asrs	r3, r3, #8
 8022b12:	b299      	uxth	r1, r3
 8022b14:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8022b18:	43db      	mvns	r3, r3
 8022b1a:	b2db      	uxtb	r3, r3
 8022b1c:	ea4f 201e 	mov.w	r0, lr, lsr #8
 8022b20:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022b24:	fb1c fc03 	smulbb	ip, ip, r3
 8022b28:	ea4f 08e2 	mov.w	r8, r2, asr #3
 8022b2c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022b30:	fb00 c001 	mla	r0, r0, r1, ip
 8022b34:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8022b38:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 8022b3c:	fb18 f803 	smulbb	r8, r8, r3
 8022b40:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8022b44:	00d2      	lsls	r2, r2, #3
 8022b46:	fb0c 8c01 	mla	ip, ip, r1, r8
 8022b4a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022b4e:	b2d2      	uxtb	r2, r2
 8022b50:	fa1f fc8c 	uxth.w	ip, ip
 8022b54:	fa5f fe8e 	uxtb.w	lr, lr
 8022b58:	fb12 f203 	smulbb	r2, r2, r3
 8022b5c:	b280      	uxth	r0, r0
 8022b5e:	fb0e 2201 	mla	r2, lr, r1, r2
 8022b62:	f10c 0801 	add.w	r8, ip, #1
 8022b66:	b292      	uxth	r2, r2
 8022b68:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 8022b6c:	f100 0801 	add.w	r8, r0, #1
 8022b70:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8022b74:	eb08 2010 	add.w	r0, r8, r0, lsr #8
 8022b78:	1c51      	adds	r1, r2, #1
 8022b7a:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022b7e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8022b82:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022b86:	ea4c 0c00 	orr.w	ip, ip, r0
 8022b8a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022b8e:	ea4c 0c02 	orr.w	ip, ip, r2
 8022b92:	f8a9 c000 	strh.w	ip, [r9]
 8022b96:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022b98:	441c      	add	r4, r3
 8022b9a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022b9c:	f109 0902 	add.w	r9, r9, #2
 8022ba0:	441e      	add	r6, r3
 8022ba2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022ba6:	e6c5      	b.n	8022934 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8022ba8:	2800      	cmp	r0, #0
 8022baa:	d089      	beq.n	8022ac0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x430>
 8022bac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8022bae:	442b      	add	r3, r5
 8022bb0:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022bb4:	07db      	lsls	r3, r3, #31
 8022bb6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022bba:	bf54      	ite	pl
 8022bbc:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022bc0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022bc4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022bc8:	fa5f f38c 	uxtb.w	r3, ip
 8022bcc:	930c      	str	r3, [sp, #48]	; 0x30
 8022bce:	e777      	b.n	8022ac0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x430>
 8022bd0:	b017      	add	sp, #92	; 0x5c
 8022bd2:	ecbd 8b08 	vpop	{d8-d11}
 8022bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022bda:	bf00      	nop
 8022bdc:	2000a044 	.word	0x2000a044

08022be0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8022be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022be4:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8022be8:	2c00      	cmp	r4, #0
 8022bea:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8022bee:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8022bf2:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8022bf6:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8022bfa:	fb04 ce03 	mla	lr, r4, r3, ip
 8022bfe:	db60      	blt.n	8022cc2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8022c00:	45a1      	cmp	r9, r4
 8022c02:	dd5e      	ble.n	8022cc2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8022c04:	f1bc 0f00 	cmp.w	ip, #0
 8022c08:	db59      	blt.n	8022cbe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8022c0a:	45e0      	cmp	r8, ip
 8022c0c:	dd57      	ble.n	8022cbe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8022c0e:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8022c12:	f01e 0f01 	tst.w	lr, #1
 8022c16:	5c16      	ldrb	r6, [r2, r0]
 8022c18:	bf0c      	ite	eq
 8022c1a:	f006 060f 	andeq.w	r6, r6, #15
 8022c1e:	1136      	asrne	r6, r6, #4
 8022c20:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022c24:	b2f6      	uxtb	r6, r6
 8022c26:	f11c 0001 	adds.w	r0, ip, #1
 8022c2a:	d44d      	bmi.n	8022cc8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8022c2c:	4580      	cmp	r8, r0
 8022c2e:	dd4b      	ble.n	8022cc8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8022c30:	2d00      	cmp	r5, #0
 8022c32:	d04b      	beq.n	8022ccc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 8022c34:	f10e 0a01 	add.w	sl, lr, #1
 8022c38:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8022c3c:	f01a 0f01 	tst.w	sl, #1
 8022c40:	5c10      	ldrb	r0, [r2, r0]
 8022c42:	bf0c      	ite	eq
 8022c44:	f000 000f 	andeq.w	r0, r0, #15
 8022c48:	1100      	asrne	r0, r0, #4
 8022c4a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022c4e:	b2c0      	uxtb	r0, r0
 8022c50:	3401      	adds	r4, #1
 8022c52:	d43f      	bmi.n	8022cd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8022c54:	45a1      	cmp	r9, r4
 8022c56:	dd3d      	ble.n	8022cd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8022c58:	2f00      	cmp	r7, #0
 8022c5a:	f000 8097 	beq.w	8022d8c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1ac>
 8022c5e:	f1bc 0f00 	cmp.w	ip, #0
 8022c62:	db35      	blt.n	8022cd0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8022c64:	45e0      	cmp	r8, ip
 8022c66:	dd33      	ble.n	8022cd0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8022c68:	eb03 090e 	add.w	r9, r3, lr
 8022c6c:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8022c70:	f019 0f01 	tst.w	r9, #1
 8022c74:	5d14      	ldrb	r4, [r2, r4]
 8022c76:	bf0c      	ite	eq
 8022c78:	f004 040f 	andeq.w	r4, r4, #15
 8022c7c:	1124      	asrne	r4, r4, #4
 8022c7e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022c82:	b2e4      	uxtb	r4, r4
 8022c84:	f11c 0c01 	adds.w	ip, ip, #1
 8022c88:	d427      	bmi.n	8022cda <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 8022c8a:	45e0      	cmp	r8, ip
 8022c8c:	dd25      	ble.n	8022cda <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 8022c8e:	b335      	cbz	r5, 8022cde <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 8022c90:	3301      	adds	r3, #1
 8022c92:	449e      	add	lr, r3
 8022c94:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022c98:	f01e 0f01 	tst.w	lr, #1
 8022c9c:	5cd2      	ldrb	r2, [r2, r3]
 8022c9e:	bf0c      	ite	eq
 8022ca0:	f002 020f 	andeq.w	r2, r2, #15
 8022ca4:	1112      	asrne	r2, r2, #4
 8022ca6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022caa:	b2d3      	uxtb	r3, r2
 8022cac:	2d0f      	cmp	r5, #15
 8022cae:	d917      	bls.n	8022ce0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 8022cb0:	4b39      	ldr	r3, [pc, #228]	; (8022d98 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 8022cb2:	4a3a      	ldr	r2, [pc, #232]	; (8022d9c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 8022cb4:	483a      	ldr	r0, [pc, #232]	; (8022da0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c0>)
 8022cb6:	f240 210d 	movw	r1, #525	; 0x20d
 8022cba:	f000 fd43 	bl	8023744 <__assert_func>
 8022cbe:	2600      	movs	r6, #0
 8022cc0:	e7b1      	b.n	8022c26 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 8022cc2:	2000      	movs	r0, #0
 8022cc4:	4606      	mov	r6, r0
 8022cc6:	e7c3      	b.n	8022c50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8022cc8:	2000      	movs	r0, #0
 8022cca:	e7c1      	b.n	8022c50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8022ccc:	4628      	mov	r0, r5
 8022cce:	e7bf      	b.n	8022c50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8022cd0:	2400      	movs	r4, #0
 8022cd2:	e7d7      	b.n	8022c84 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 8022cd4:	2300      	movs	r3, #0
 8022cd6:	461c      	mov	r4, r3
 8022cd8:	e7e8      	b.n	8022cac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 8022cda:	2300      	movs	r3, #0
 8022cdc:	e7e6      	b.n	8022cac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 8022cde:	462b      	mov	r3, r5
 8022ce0:	2f0f      	cmp	r7, #15
 8022ce2:	d8e5      	bhi.n	8022cb0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8022ce4:	b2ad      	uxth	r5, r5
 8022ce6:	b2bf      	uxth	r7, r7
 8022ce8:	fb05 fc07 	mul.w	ip, r5, r7
 8022cec:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8022cf0:	012d      	lsls	r5, r5, #4
 8022cf2:	b2bf      	uxth	r7, r7
 8022cf4:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8022cf8:	eba5 050c 	sub.w	r5, r5, ip
 8022cfc:	1bd2      	subs	r2, r2, r7
 8022cfe:	b2ad      	uxth	r5, r5
 8022d00:	b292      	uxth	r2, r2
 8022d02:	4368      	muls	r0, r5
 8022d04:	fb06 0002 	mla	r0, r6, r2, r0
 8022d08:	fb07 0404 	mla	r4, r7, r4, r0
 8022d0c:	fb0c 4303 	mla	r3, ip, r3, r4
 8022d10:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022d14:	2b00      	cmp	r3, #0
 8022d16:	d037      	beq.n	8022d88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>
 8022d18:	4a22      	ldr	r2, [pc, #136]	; (8022da4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c4>)
 8022d1a:	6816      	ldr	r6, [r2, #0]
 8022d1c:	880a      	ldrh	r2, [r1, #0]
 8022d1e:	b298      	uxth	r0, r3
 8022d20:	1215      	asrs	r5, r2, #8
 8022d22:	43db      	mvns	r3, r3
 8022d24:	b2db      	uxtb	r3, r3
 8022d26:	0a34      	lsrs	r4, r6, #8
 8022d28:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022d2c:	fb15 f503 	smulbb	r5, r5, r3
 8022d30:	10d7      	asrs	r7, r2, #3
 8022d32:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8022d36:	fb04 5400 	mla	r4, r4, r0, r5
 8022d3a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022d3e:	08f5      	lsrs	r5, r6, #3
 8022d40:	fb17 f703 	smulbb	r7, r7, r3
 8022d44:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022d48:	00d2      	lsls	r2, r2, #3
 8022d4a:	fb05 7500 	mla	r5, r5, r0, r7
 8022d4e:	b2d2      	uxtb	r2, r2
 8022d50:	00f6      	lsls	r6, r6, #3
 8022d52:	fb12 f303 	smulbb	r3, r2, r3
 8022d56:	b2ad      	uxth	r5, r5
 8022d58:	b2f6      	uxtb	r6, r6
 8022d5a:	b2a4      	uxth	r4, r4
 8022d5c:	fb06 3000 	mla	r0, r6, r0, r3
 8022d60:	1c6b      	adds	r3, r5, #1
 8022d62:	b280      	uxth	r0, r0
 8022d64:	1c62      	adds	r2, r4, #1
 8022d66:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8022d6a:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8022d6e:	095b      	lsrs	r3, r3, #5
 8022d70:	1c42      	adds	r2, r0, #1
 8022d72:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022d76:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8022d7a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022d7e:	4323      	orrs	r3, r4
 8022d80:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8022d84:	4303      	orrs	r3, r0
 8022d86:	800b      	strh	r3, [r1, #0]
 8022d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022d8c:	2d0f      	cmp	r5, #15
 8022d8e:	d88f      	bhi.n	8022cb0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8022d90:	463b      	mov	r3, r7
 8022d92:	463c      	mov	r4, r7
 8022d94:	e7a6      	b.n	8022ce4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 8022d96:	bf00      	nop
 8022d98:	0802814e 	.word	0x0802814e
 8022d9c:	08028711 	.word	0x08028711
 8022da0:	08028237 	.word	0x08028237
 8022da4:	2000a044 	.word	0x2000a044

08022da8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022dac:	ed2d 8b08 	vpush	{d8-d11}
 8022db0:	b093      	sub	sp, #76	; 0x4c
 8022db2:	461d      	mov	r5, r3
 8022db4:	920c      	str	r2, [sp, #48]	; 0x30
 8022db6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022db8:	9107      	str	r1, [sp, #28]
 8022dba:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8022dbe:	9011      	str	r0, [sp, #68]	; 0x44
 8022dc0:	6850      	ldr	r0, [r2, #4]
 8022dc2:	6812      	ldr	r2, [r2, #0]
 8022dc4:	fb00 1303 	mla	r3, r0, r3, r1
 8022dc8:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8022dcc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022dce:	689b      	ldr	r3, [r3, #8]
 8022dd0:	3301      	adds	r3, #1
 8022dd2:	f023 0301 	bic.w	r3, r3, #1
 8022dd6:	9306      	str	r3, [sp, #24]
 8022dd8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022dda:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8022dde:	681f      	ldr	r7, [r3, #0]
 8022de0:	eeb0 aa40 	vmov.f32	s20, s0
 8022de4:	eef0 9a60 	vmov.f32	s19, s1
 8022de8:	eeb0 9a41 	vmov.f32	s18, s2
 8022dec:	eeb0 8a62 	vmov.f32	s16, s5
 8022df0:	eef0 8a43 	vmov.f32	s17, s6
 8022df4:	eef0 ba44 	vmov.f32	s23, s8
 8022df8:	eeb0 ba64 	vmov.f32	s22, s9
 8022dfc:	eef0 aa45 	vmov.f32	s21, s10
 8022e00:	9b07      	ldr	r3, [sp, #28]
 8022e02:	2b00      	cmp	r3, #0
 8022e04:	dc03      	bgt.n	8022e0e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022e06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022e08:	2b00      	cmp	r3, #0
 8022e0a:	f340 8261 	ble.w	80232d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8022e0e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022e10:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022e14:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022e18:	1e48      	subs	r0, r1, #1
 8022e1a:	f102 3cff 	add.w	ip, r2, #4294967295
 8022e1e:	2d00      	cmp	r5, #0
 8022e20:	f340 80ef 	ble.w	8023002 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8022e24:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022e28:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022e2c:	d406      	bmi.n	8022e3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022e2e:	4586      	cmp	lr, r0
 8022e30:	da04      	bge.n	8022e3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022e32:	2b00      	cmp	r3, #0
 8022e34:	db02      	blt.n	8022e3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022e36:	4563      	cmp	r3, ip
 8022e38:	f2c0 80e4 	blt.w	8023004 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 8022e3c:	f11e 0e01 	adds.w	lr, lr, #1
 8022e40:	f100 80d7 	bmi.w	8022ff2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8022e44:	4571      	cmp	r1, lr
 8022e46:	f2c0 80d4 	blt.w	8022ff2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8022e4a:	3301      	adds	r3, #1
 8022e4c:	f100 80d1 	bmi.w	8022ff2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8022e50:	429a      	cmp	r2, r3
 8022e52:	f2c0 80ce 	blt.w	8022ff2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8022e56:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8022e5a:	9509      	str	r5, [sp, #36]	; 0x24
 8022e5c:	46c8      	mov	r8, r9
 8022e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e60:	2b00      	cmp	r3, #0
 8022e62:	f340 80ec 	ble.w	802303e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8022e66:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8022e6a:	9308      	str	r3, [sp, #32]
 8022e6c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022e6e:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8022e72:	1423      	asrs	r3, r4, #16
 8022e74:	ea4f 4026 	mov.w	r0, r6, asr #16
 8022e78:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022e7c:	f100 813b 	bmi.w	80230f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8022e80:	f10c 3bff 	add.w	fp, ip, #4294967295
 8022e84:	455b      	cmp	r3, fp
 8022e86:	f280 8136 	bge.w	80230f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8022e8a:	2800      	cmp	r0, #0
 8022e8c:	f2c0 8133 	blt.w	80230f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8022e90:	f10e 3bff 	add.w	fp, lr, #4294967295
 8022e94:	4558      	cmp	r0, fp
 8022e96:	f280 812e 	bge.w	80230f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8022e9a:	9a06      	ldr	r2, [sp, #24]
 8022e9c:	fb00 3302 	mla	r3, r0, r2, r3
 8022ea0:	0858      	lsrs	r0, r3, #1
 8022ea2:	07da      	lsls	r2, r3, #31
 8022ea4:	f817 c000 	ldrb.w	ip, [r7, r0]
 8022ea8:	9a08      	ldr	r2, [sp, #32]
 8022eaa:	bf54      	ite	pl
 8022eac:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022eb0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022eb4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022eb8:	fa5f fc8c 	uxtb.w	ip, ip
 8022ebc:	2a00      	cmp	r2, #0
 8022ebe:	f000 8101 	beq.w	80230c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8022ec2:	1c58      	adds	r0, r3, #1
 8022ec4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8022ec8:	07c0      	lsls	r0, r0, #31
 8022eca:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022ece:	bf54      	ite	pl
 8022ed0:	f00e 0e0f 	andpl.w	lr, lr, #15
 8022ed4:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8022ed8:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8022edc:	fa5f fe8e 	uxtb.w	lr, lr
 8022ee0:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8022ee4:	b1b9      	cbz	r1, 8022f16 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8022ee6:	4453      	add	r3, sl
 8022ee8:	0858      	lsrs	r0, r3, #1
 8022eea:	07da      	lsls	r2, r3, #31
 8022eec:	5c38      	ldrb	r0, [r7, r0]
 8022eee:	bf54      	ite	pl
 8022ef0:	f000 000f 	andpl.w	r0, r0, #15
 8022ef4:	1100      	asrmi	r0, r0, #4
 8022ef6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022efa:	b2c0      	uxtb	r0, r0
 8022efc:	900a      	str	r0, [sp, #40]	; 0x28
 8022efe:	1c58      	adds	r0, r3, #1
 8022f00:	0843      	lsrs	r3, r0, #1
 8022f02:	07c2      	lsls	r2, r0, #31
 8022f04:	5cfb      	ldrb	r3, [r7, r3]
 8022f06:	bf54      	ite	pl
 8022f08:	f003 030f 	andpl.w	r3, r3, #15
 8022f0c:	111b      	asrmi	r3, r3, #4
 8022f0e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022f12:	b2db      	uxtb	r3, r3
 8022f14:	930e      	str	r3, [sp, #56]	; 0x38
 8022f16:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022f1a:	b289      	uxth	r1, r1
 8022f1c:	fb02 f301 	mul.w	r3, r2, r1
 8022f20:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8022f24:	0112      	lsls	r2, r2, #4
 8022f26:	b289      	uxth	r1, r1
 8022f28:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8022f2c:	1a40      	subs	r0, r0, r1
 8022f2e:	fa1f fe80 	uxth.w	lr, r0
 8022f32:	1ad2      	subs	r2, r2, r3
 8022f34:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022f36:	b292      	uxth	r2, r2
 8022f38:	4342      	muls	r2, r0
 8022f3a:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8022f3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022f40:	fb01 c102 	mla	r1, r1, r2, ip
 8022f44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022f46:	fb03 1302 	mla	r3, r3, r2, r1
 8022f4a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022f4e:	2b00      	cmp	r3, #0
 8022f50:	d045      	beq.n	8022fde <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8022f52:	4a79      	ldr	r2, [pc, #484]	; (8023138 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>)
 8022f54:	6811      	ldr	r1, [r2, #0]
 8022f56:	2bff      	cmp	r3, #255	; 0xff
 8022f58:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 8022f5c:	ea4f 02d1 	mov.w	r2, r1, lsr #3
 8022f60:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8022f64:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8022f68:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022f6c:	b2c9      	uxtb	r1, r1
 8022f6e:	f000 80ba 	beq.w	80230e6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022f72:	f8b8 c000 	ldrh.w	ip, [r8]
 8022f76:	fa1f fb83 	uxth.w	fp, r3
 8022f7a:	ea4f 202c 	mov.w	r0, ip, asr #8
 8022f7e:	43db      	mvns	r3, r3
 8022f80:	b2db      	uxtb	r3, r3
 8022f82:	fb1e fe0b 	smulbb	lr, lr, fp
 8022f86:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022f8a:	fb00 e003 	mla	r0, r0, r3, lr
 8022f8e:	ea4f 0eec 	mov.w	lr, ip, asr #3
 8022f92:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8022f96:	fb12 f20b 	smulbb	r2, r2, fp
 8022f9a:	fb0e 2203 	mla	r2, lr, r3, r2
 8022f9e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022fa2:	b292      	uxth	r2, r2
 8022fa4:	fb11 f10b 	smulbb	r1, r1, fp
 8022fa8:	fa5f fc8c 	uxtb.w	ip, ip
 8022fac:	b280      	uxth	r0, r0
 8022fae:	fb0c 1303 	mla	r3, ip, r3, r1
 8022fb2:	f102 0e01 	add.w	lr, r2, #1
 8022fb6:	b29b      	uxth	r3, r3
 8022fb8:	1c41      	adds	r1, r0, #1
 8022fba:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8022fbe:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8022fc2:	0952      	lsrs	r2, r2, #5
 8022fc4:	1c59      	adds	r1, r3, #1
 8022fc6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022fca:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8022fce:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022fd2:	4310      	orrs	r0, r2
 8022fd4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022fd8:	4318      	orrs	r0, r3
 8022fda:	f8a8 0000 	strh.w	r0, [r8]
 8022fde:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022fe0:	441c      	add	r4, r3
 8022fe2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022fe4:	441e      	add	r6, r3
 8022fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022fe8:	3b01      	subs	r3, #1
 8022fea:	f108 0802 	add.w	r8, r8, #2
 8022fee:	9309      	str	r3, [sp, #36]	; 0x24
 8022ff0:	e735      	b.n	8022e5e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8022ff2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022ff4:	441c      	add	r4, r3
 8022ff6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022ff8:	3d01      	subs	r5, #1
 8022ffa:	441e      	add	r6, r3
 8022ffc:	f109 0902 	add.w	r9, r9, #2
 8023000:	e70d      	b.n	8022e1e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8023002:	d020      	beq.n	8023046 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8023004:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8023006:	1e6b      	subs	r3, r5, #1
 8023008:	fb00 4003 	mla	r0, r0, r3, r4
 802300c:	1400      	asrs	r0, r0, #16
 802300e:	f53f af22 	bmi.w	8022e56 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8023012:	3901      	subs	r1, #1
 8023014:	4288      	cmp	r0, r1
 8023016:	f6bf af1e 	bge.w	8022e56 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802301a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802301c:	fb01 6303 	mla	r3, r1, r3, r6
 8023020:	141b      	asrs	r3, r3, #16
 8023022:	f53f af18 	bmi.w	8022e56 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8023026:	3a01      	subs	r2, #1
 8023028:	4293      	cmp	r3, r2
 802302a:	f6bf af14 	bge.w	8022e56 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802302e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8023032:	9308      	str	r3, [sp, #32]
 8023034:	46aa      	mov	sl, r5
 8023036:	46c8      	mov	r8, r9
 8023038:	f1ba 0f00 	cmp.w	sl, #0
 802303c:	dc7e      	bgt.n	802313c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802303e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8023042:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8023046:	9b07      	ldr	r3, [sp, #28]
 8023048:	2b00      	cmp	r3, #0
 802304a:	f340 8141 	ble.w	80232d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 802304e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023052:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023056:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802305a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802305c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023060:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023064:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023068:	eef0 6a48 	vmov.f32	s13, s16
 802306c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023070:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023074:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023078:	ee16 4a90 	vmov	r4, s13
 802307c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023080:	eef0 6a68 	vmov.f32	s13, s17
 8023084:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023088:	ee18 2a10 	vmov	r2, s16
 802308c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023090:	fb92 f3f3 	sdiv	r3, r2, r3
 8023094:	ee18 2a90 	vmov	r2, s17
 8023098:	9327      	str	r3, [sp, #156]	; 0x9c
 802309a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802309c:	fb92 f3f3 	sdiv	r3, r2, r3
 80230a0:	9328      	str	r3, [sp, #160]	; 0xa0
 80230a2:	9b07      	ldr	r3, [sp, #28]
 80230a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80230a6:	3b01      	subs	r3, #1
 80230a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80230ac:	9307      	str	r3, [sp, #28]
 80230ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80230b0:	ee16 6a90 	vmov	r6, s13
 80230b4:	bf14      	ite	ne
 80230b6:	461d      	movne	r5, r3
 80230b8:	4615      	moveq	r5, r2
 80230ba:	eef0 8a67 	vmov.f32	s17, s15
 80230be:	eeb0 8a47 	vmov.f32	s16, s14
 80230c2:	e69d      	b.n	8022e00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80230c4:	2900      	cmp	r1, #0
 80230c6:	f43f af26 	beq.w	8022f16 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 80230ca:	eb0a 0003 	add.w	r0, sl, r3
 80230ce:	0843      	lsrs	r3, r0, #1
 80230d0:	07c0      	lsls	r0, r0, #31
 80230d2:	5cfb      	ldrb	r3, [r7, r3]
 80230d4:	bf54      	ite	pl
 80230d6:	f003 030f 	andpl.w	r3, r3, #15
 80230da:	111b      	asrmi	r3, r3, #4
 80230dc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80230e0:	b2db      	uxtb	r3, r3
 80230e2:	930a      	str	r3, [sp, #40]	; 0x28
 80230e4:	e717      	b.n	8022f16 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 80230e6:	00d2      	lsls	r2, r2, #3
 80230e8:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 80230ec:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 80230f0:	f8a8 1000 	strh.w	r1, [r8]
 80230f4:	e773      	b.n	8022fde <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80230f6:	f113 0b01 	adds.w	fp, r3, #1
 80230fa:	f53f af70 	bmi.w	8022fde <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80230fe:	45dc      	cmp	ip, fp
 8023100:	f6ff af6d 	blt.w	8022fde <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8023104:	f110 0b01 	adds.w	fp, r0, #1
 8023108:	f53f af69 	bmi.w	8022fde <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802310c:	45de      	cmp	lr, fp
 802310e:	f6ff af66 	blt.w	8022fde <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8023112:	9a08      	ldr	r2, [sp, #32]
 8023114:	9302      	str	r3, [sp, #8]
 8023116:	fa0f f38e 	sxth.w	r3, lr
 802311a:	9301      	str	r3, [sp, #4]
 802311c:	fa0f f38c 	sxth.w	r3, ip
 8023120:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8023124:	9105      	str	r1, [sp, #20]
 8023126:	9300      	str	r3, [sp, #0]
 8023128:	463a      	mov	r2, r7
 802312a:	4653      	mov	r3, sl
 802312c:	4641      	mov	r1, r8
 802312e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8023130:	f7ff fd56 	bl	8022be0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8023134:	e753      	b.n	8022fde <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8023136:	bf00      	nop
 8023138:	2000a044 	.word	0x2000a044
 802313c:	9906      	ldr	r1, [sp, #24]
 802313e:	1422      	asrs	r2, r4, #16
 8023140:	1433      	asrs	r3, r6, #16
 8023142:	fb01 2303 	mla	r3, r1, r3, r2
 8023146:	085a      	lsrs	r2, r3, #1
 8023148:	07d9      	lsls	r1, r3, #31
 802314a:	5cba      	ldrb	r2, [r7, r2]
 802314c:	bf54      	ite	pl
 802314e:	f002 020f 	andpl.w	r2, r2, #15
 8023152:	1112      	asrmi	r2, r2, #4
 8023154:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023158:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802315c:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8023160:	b2d2      	uxtb	r2, r2
 8023162:	2800      	cmp	r0, #0
 8023164:	f000 809b 	beq.w	802329e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f6>
 8023168:	f103 0e01 	add.w	lr, r3, #1
 802316c:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8023170:	f01e 0f01 	tst.w	lr, #1
 8023174:	5c79      	ldrb	r1, [r7, r1]
 8023176:	bf0c      	ite	eq
 8023178:	f001 010f 	andeq.w	r1, r1, #15
 802317c:	1109      	asrne	r1, r1, #4
 802317e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023182:	b2c9      	uxtb	r1, r1
 8023184:	910f      	str	r1, [sp, #60]	; 0x3c
 8023186:	f1bc 0f00 	cmp.w	ip, #0
 802318a:	d019      	beq.n	80231c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 802318c:	9908      	ldr	r1, [sp, #32]
 802318e:	440b      	add	r3, r1
 8023190:	0859      	lsrs	r1, r3, #1
 8023192:	f013 0f01 	tst.w	r3, #1
 8023196:	5c79      	ldrb	r1, [r7, r1]
 8023198:	bf0c      	ite	eq
 802319a:	f001 010f 	andeq.w	r1, r1, #15
 802319e:	1109      	asrne	r1, r1, #4
 80231a0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80231a4:	b2c9      	uxtb	r1, r1
 80231a6:	3301      	adds	r3, #1
 80231a8:	910b      	str	r1, [sp, #44]	; 0x2c
 80231aa:	0859      	lsrs	r1, r3, #1
 80231ac:	07db      	lsls	r3, r3, #31
 80231ae:	5c79      	ldrb	r1, [r7, r1]
 80231b0:	bf54      	ite	pl
 80231b2:	f001 010f 	andpl.w	r1, r1, #15
 80231b6:	1109      	asrmi	r1, r1, #4
 80231b8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80231bc:	b2c9      	uxtb	r1, r1
 80231be:	9110      	str	r1, [sp, #64]	; 0x40
 80231c0:	b280      	uxth	r0, r0
 80231c2:	fa1f fc8c 	uxth.w	ip, ip
 80231c6:	fb00 f30c 	mul.w	r3, r0, ip
 80231ca:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 80231ce:	0100      	lsls	r0, r0, #4
 80231d0:	fa1f fc8c 	uxth.w	ip, ip
 80231d4:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80231d8:	eba1 010c 	sub.w	r1, r1, ip
 80231dc:	fa1f fe81 	uxth.w	lr, r1
 80231e0:	1ac0      	subs	r0, r0, r3
 80231e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80231e4:	b280      	uxth	r0, r0
 80231e6:	4348      	muls	r0, r1
 80231e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80231ea:	fb02 020e 	mla	r2, r2, lr, r0
 80231ee:	fb0c 2c01 	mla	ip, ip, r1, r2
 80231f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80231f4:	fb03 c302 	mla	r3, r3, r2, ip
 80231f8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80231fc:	2b00      	cmp	r3, #0
 80231fe:	d045      	beq.n	802328c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023200:	4a36      	ldr	r2, [pc, #216]	; (80232dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>)
 8023202:	6811      	ldr	r1, [r2, #0]
 8023204:	2bff      	cmp	r3, #255	; 0xff
 8023206:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 802320a:	ea4f 02d1 	mov.w	r2, r1, lsr #3
 802320e:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8023212:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8023216:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802321a:	b2c9      	uxtb	r1, r1
 802321c:	d050      	beq.n	80232c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 802321e:	f8b8 c000 	ldrh.w	ip, [r8]
 8023222:	fa1f fb83 	uxth.w	fp, r3
 8023226:	ea4f 202c 	mov.w	r0, ip, asr #8
 802322a:	43db      	mvns	r3, r3
 802322c:	b2db      	uxtb	r3, r3
 802322e:	fb1e fe0b 	smulbb	lr, lr, fp
 8023232:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023236:	fb00 e003 	mla	r0, r0, r3, lr
 802323a:	ea4f 0eec 	mov.w	lr, ip, asr #3
 802323e:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8023242:	fb12 f20b 	smulbb	r2, r2, fp
 8023246:	fb0e 2203 	mla	r2, lr, r3, r2
 802324a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802324e:	b292      	uxth	r2, r2
 8023250:	fa5f fc8c 	uxtb.w	ip, ip
 8023254:	fb11 f10b 	smulbb	r1, r1, fp
 8023258:	b280      	uxth	r0, r0
 802325a:	fb0c 1103 	mla	r1, ip, r3, r1
 802325e:	f102 0e01 	add.w	lr, r2, #1
 8023262:	b289      	uxth	r1, r1
 8023264:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8023268:	f100 0e01 	add.w	lr, r0, #1
 802326c:	0952      	lsrs	r2, r2, #5
 802326e:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8023272:	1c4b      	adds	r3, r1, #1
 8023274:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023278:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802327c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023280:	4302      	orrs	r2, r0
 8023282:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8023286:	430a      	orrs	r2, r1
 8023288:	f8a8 2000 	strh.w	r2, [r8]
 802328c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802328e:	441c      	add	r4, r3
 8023290:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023292:	f108 0802 	add.w	r8, r8, #2
 8023296:	441e      	add	r6, r3
 8023298:	f10a 3aff 	add.w	sl, sl, #4294967295
 802329c:	e6cc      	b.n	8023038 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 802329e:	f1bc 0f00 	cmp.w	ip, #0
 80232a2:	d08d      	beq.n	80231c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 80232a4:	9908      	ldr	r1, [sp, #32]
 80232a6:	440b      	add	r3, r1
 80232a8:	0859      	lsrs	r1, r3, #1
 80232aa:	07db      	lsls	r3, r3, #31
 80232ac:	5c79      	ldrb	r1, [r7, r1]
 80232ae:	bf54      	ite	pl
 80232b0:	f001 010f 	andpl.w	r1, r1, #15
 80232b4:	1109      	asrmi	r1, r1, #4
 80232b6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80232ba:	b2c9      	uxtb	r1, r1
 80232bc:	910b      	str	r1, [sp, #44]	; 0x2c
 80232be:	e77f      	b.n	80231c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 80232c0:	00d2      	lsls	r2, r2, #3
 80232c2:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 80232c6:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 80232ca:	f8a8 1000 	strh.w	r1, [r8]
 80232ce:	e7dd      	b.n	802328c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80232d0:	b013      	add	sp, #76	; 0x4c
 80232d2:	ecbd 8b08 	vpop	{d8-d11}
 80232d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232da:	bf00      	nop
 80232dc:	2000a044 	.word	0x2000a044

080232e0 <CRC_Lock>:
 80232e0:	b530      	push	{r4, r5, lr}
 80232e2:	4a1d      	ldr	r2, [pc, #116]	; (8023358 <CRC_Lock+0x78>)
 80232e4:	6813      	ldr	r3, [r2, #0]
 80232e6:	f023 0301 	bic.w	r3, r3, #1
 80232ea:	6013      	str	r3, [r2, #0]
 80232ec:	4b1b      	ldr	r3, [pc, #108]	; (802335c <CRC_Lock+0x7c>)
 80232ee:	681a      	ldr	r2, [r3, #0]
 80232f0:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80232f4:	4022      	ands	r2, r4
 80232f6:	f24c 2540 	movw	r5, #49728	; 0xc240
 80232fa:	42aa      	cmp	r2, r5
 80232fc:	d005      	beq.n	802330a <CRC_Lock+0x2a>
 80232fe:	681b      	ldr	r3, [r3, #0]
 8023300:	f24c 2270 	movw	r2, #49776	; 0xc270
 8023304:	4023      	ands	r3, r4
 8023306:	4293      	cmp	r3, r2
 8023308:	d11d      	bne.n	8023346 <CRC_Lock+0x66>
 802330a:	4b15      	ldr	r3, [pc, #84]	; (8023360 <CRC_Lock+0x80>)
 802330c:	681b      	ldr	r3, [r3, #0]
 802330e:	b9d3      	cbnz	r3, 8023346 <CRC_Lock+0x66>
 8023310:	4a14      	ldr	r2, [pc, #80]	; (8023364 <CRC_Lock+0x84>)
 8023312:	6813      	ldr	r3, [r2, #0]
 8023314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023318:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 802331c:	d006      	beq.n	802332c <CRC_Lock+0x4c>
 802331e:	6813      	ldr	r3, [r2, #0]
 8023320:	f240 4283 	movw	r2, #1155	; 0x483
 8023324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023328:	4293      	cmp	r3, r2
 802332a:	d10c      	bne.n	8023346 <CRC_Lock+0x66>
 802332c:	4b0e      	ldr	r3, [pc, #56]	; (8023368 <CRC_Lock+0x88>)
 802332e:	2201      	movs	r2, #1
 8023330:	601a      	str	r2, [r3, #0]
 8023332:	681a      	ldr	r2, [r3, #0]
 8023334:	2a00      	cmp	r2, #0
 8023336:	d1fc      	bne.n	8023332 <CRC_Lock+0x52>
 8023338:	4b0c      	ldr	r3, [pc, #48]	; (802336c <CRC_Lock+0x8c>)
 802333a:	6018      	str	r0, [r3, #0]
 802333c:	6818      	ldr	r0, [r3, #0]
 802333e:	1a43      	subs	r3, r0, r1
 8023340:	4258      	negs	r0, r3
 8023342:	4158      	adcs	r0, r3
 8023344:	bd30      	pop	{r4, r5, pc}
 8023346:	4b0a      	ldr	r3, [pc, #40]	; (8023370 <CRC_Lock+0x90>)
 8023348:	2201      	movs	r2, #1
 802334a:	601a      	str	r2, [r3, #0]
 802334c:	681a      	ldr	r2, [r3, #0]
 802334e:	2a00      	cmp	r2, #0
 8023350:	d1fc      	bne.n	802334c <CRC_Lock+0x6c>
 8023352:	4b08      	ldr	r3, [pc, #32]	; (8023374 <CRC_Lock+0x94>)
 8023354:	e7f1      	b.n	802333a <CRC_Lock+0x5a>
 8023356:	bf00      	nop
 8023358:	e0002000 	.word	0xe0002000
 802335c:	e000ed00 	.word	0xe000ed00
 8023360:	e0042000 	.word	0xe0042000
 8023364:	5c001000 	.word	0x5c001000
 8023368:	58024c08 	.word	0x58024c08
 802336c:	58024c00 	.word	0x58024c00
 8023370:	40023008 	.word	0x40023008
 8023374:	40023000 	.word	0x40023000

08023378 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8023378:	6101      	str	r1, [r0, #16]
 802337a:	4770      	bx	lr

0802337c <_ZN8touchgfx8Gestures4tickEv>:
 802337c:	7b83      	ldrb	r3, [r0, #14]
 802337e:	b14b      	cbz	r3, 8023394 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8023380:	8903      	ldrh	r3, [r0, #8]
 8023382:	3301      	adds	r3, #1
 8023384:	b29b      	uxth	r3, r3
 8023386:	2b07      	cmp	r3, #7
 8023388:	8103      	strh	r3, [r0, #8]
 802338a:	bf81      	itttt	hi
 802338c:	2300      	movhi	r3, #0
 802338e:	8143      	strhhi	r3, [r0, #10]
 8023390:	8183      	strhhi	r3, [r0, #12]
 8023392:	7383      	strbhi	r3, [r0, #14]
 8023394:	4770      	bx	lr
	...

08023398 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8023398:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802339c:	4604      	mov	r4, r0
 802339e:	8880      	ldrh	r0, [r0, #4]
 80233a0:	f8ad 0006 	strh.w	r0, [sp, #6]
 80233a4:	4698      	mov	r8, r3
 80233a6:	eba8 0000 	sub.w	r0, r8, r0
 80233aa:	4b1c      	ldr	r3, [pc, #112]	; (802341c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 80233ac:	9300      	str	r3, [sp, #0]
 80233ae:	b280      	uxth	r0, r0
 80233b0:	2300      	movs	r3, #0
 80233b2:	f88d 3004 	strb.w	r3, [sp, #4]
 80233b6:	b203      	sxth	r3, r0
 80233b8:	2b00      	cmp	r3, #0
 80233ba:	bfb8      	it	lt
 80233bc:	4240      	neglt	r0, r0
 80233be:	4617      	mov	r7, r2
 80233c0:	8aa2      	ldrh	r2, [r4, #20]
 80233c2:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80233c6:	f8ad 800a 	strh.w	r8, [sp, #10]
 80233ca:	bfb8      	it	lt
 80233cc:	b203      	sxthlt	r3, r0
 80233ce:	460e      	mov	r6, r1
 80233d0:	4293      	cmp	r3, r2
 80233d2:	88e1      	ldrh	r1, [r4, #6]
 80233d4:	f8ad 1008 	strh.w	r1, [sp, #8]
 80233d8:	f8ad 500c 	strh.w	r5, [sp, #12]
 80233dc:	dc08      	bgt.n	80233f0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 80233de:	1a69      	subs	r1, r5, r1
 80233e0:	b289      	uxth	r1, r1
 80233e2:	b20b      	sxth	r3, r1
 80233e4:	2b00      	cmp	r3, #0
 80233e6:	bfbc      	itt	lt
 80233e8:	4249      	neglt	r1, r1
 80233ea:	b20b      	sxthlt	r3, r1
 80233ec:	429a      	cmp	r2, r3
 80233ee:	da13      	bge.n	8023418 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 80233f0:	6920      	ldr	r0, [r4, #16]
 80233f2:	6803      	ldr	r3, [r0, #0]
 80233f4:	4669      	mov	r1, sp
 80233f6:	685b      	ldr	r3, [r3, #4]
 80233f8:	4798      	blx	r3
 80233fa:	eba8 0606 	sub.w	r6, r8, r6
 80233fe:	2300      	movs	r3, #0
 8023400:	1bef      	subs	r7, r5, r7
 8023402:	2001      	movs	r0, #1
 8023404:	8123      	strh	r3, [r4, #8]
 8023406:	8166      	strh	r6, [r4, #10]
 8023408:	81a7      	strh	r7, [r4, #12]
 802340a:	f8a4 8004 	strh.w	r8, [r4, #4]
 802340e:	80e5      	strh	r5, [r4, #6]
 8023410:	73a0      	strb	r0, [r4, #14]
 8023412:	b004      	add	sp, #16
 8023414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023418:	2000      	movs	r0, #0
 802341a:	e7fa      	b.n	8023412 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 802341c:	080275cc 	.word	0x080275cc

08023420 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8023420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023422:	461e      	mov	r6, r3
 8023424:	1e4b      	subs	r3, r1, #1
 8023426:	2b01      	cmp	r3, #1
 8023428:	b085      	sub	sp, #20
 802342a:	4604      	mov	r4, r0
 802342c:	460d      	mov	r5, r1
 802342e:	4617      	mov	r7, r2
 8023430:	d84b      	bhi.n	80234ca <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8023432:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8023436:	1cd3      	adds	r3, r2, #3
 8023438:	b29b      	uxth	r3, r3
 802343a:	2b06      	cmp	r3, #6
 802343c:	d916      	bls.n	802346c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802343e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80234e0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8023442:	f8cd c004 	str.w	ip, [sp, #4]
 8023446:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802344a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802344e:	6900      	ldr	r0, [r0, #16]
 8023450:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023454:	f04f 0c00 	mov.w	ip, #0
 8023458:	f88d c008 	strb.w	ip, [sp, #8]
 802345c:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023460:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023464:	6803      	ldr	r3, [r0, #0]
 8023466:	a901      	add	r1, sp, #4
 8023468:	689b      	ldr	r3, [r3, #8]
 802346a:	4798      	blx	r3
 802346c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023470:	1cd3      	adds	r3, r2, #3
 8023472:	b29b      	uxth	r3, r3
 8023474:	2b06      	cmp	r3, #6
 8023476:	d916      	bls.n	80234a6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023478:	f8df c064 	ldr.w	ip, [pc, #100]	; 80234e0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802347c:	f8cd c004 	str.w	ip, [sp, #4]
 8023480:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023484:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023488:	6920      	ldr	r0, [r4, #16]
 802348a:	f8ad 100c 	strh.w	r1, [sp, #12]
 802348e:	f04f 0c01 	mov.w	ip, #1
 8023492:	f88d c008 	strb.w	ip, [sp, #8]
 8023496:	f8ad 200a 	strh.w	r2, [sp, #10]
 802349a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802349e:	6803      	ldr	r3, [r0, #0]
 80234a0:	a901      	add	r1, sp, #4
 80234a2:	689b      	ldr	r3, [r3, #8]
 80234a4:	4798      	blx	r3
 80234a6:	4b0d      	ldr	r3, [pc, #52]	; (80234dc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80234a8:	9301      	str	r3, [sp, #4]
 80234aa:	6920      	ldr	r0, [r4, #16]
 80234ac:	f88d 5008 	strb.w	r5, [sp, #8]
 80234b0:	2300      	movs	r3, #0
 80234b2:	f8ad 700a 	strh.w	r7, [sp, #10]
 80234b6:	f8ad 600c 	strh.w	r6, [sp, #12]
 80234ba:	f8ad 300e 	strh.w	r3, [sp, #14]
 80234be:	6803      	ldr	r3, [r0, #0]
 80234c0:	a901      	add	r1, sp, #4
 80234c2:	681b      	ldr	r3, [r3, #0]
 80234c4:	4798      	blx	r3
 80234c6:	b005      	add	sp, #20
 80234c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80234ca:	2900      	cmp	r1, #0
 80234cc:	d1eb      	bne.n	80234a6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80234ce:	80a2      	strh	r2, [r4, #4]
 80234d0:	80c6      	strh	r6, [r0, #6]
 80234d2:	60a1      	str	r1, [r4, #8]
 80234d4:	81a1      	strh	r1, [r4, #12]
 80234d6:	73a1      	strb	r1, [r4, #14]
 80234d8:	e7e5      	b.n	80234a6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80234da:	bf00      	nop
 80234dc:	080275b8 	.word	0x080275b8
 80234e0:	080275e0 	.word	0x080275e0

080234e4 <__aeabi_atexit>:
 80234e4:	460b      	mov	r3, r1
 80234e6:	4601      	mov	r1, r0
 80234e8:	4618      	mov	r0, r3
 80234ea:	f000 b953 	b.w	8023794 <__cxa_atexit>

080234ee <_ZdlPvj>:
 80234ee:	f000 b8f5 	b.w	80236dc <_ZdlPv>

080234f2 <__cxa_guard_acquire>:
 80234f2:	6803      	ldr	r3, [r0, #0]
 80234f4:	07db      	lsls	r3, r3, #31
 80234f6:	d406      	bmi.n	8023506 <__cxa_guard_acquire+0x14>
 80234f8:	7843      	ldrb	r3, [r0, #1]
 80234fa:	b103      	cbz	r3, 80234fe <__cxa_guard_acquire+0xc>
 80234fc:	deff      	udf	#255	; 0xff
 80234fe:	2301      	movs	r3, #1
 8023500:	7043      	strb	r3, [r0, #1]
 8023502:	4618      	mov	r0, r3
 8023504:	4770      	bx	lr
 8023506:	2000      	movs	r0, #0
 8023508:	4770      	bx	lr

0802350a <__cxa_guard_release>:
 802350a:	2301      	movs	r3, #1
 802350c:	6003      	str	r3, [r0, #0]
 802350e:	4770      	bx	lr

08023510 <__cxa_pure_virtual>:
 8023510:	b508      	push	{r3, lr}
 8023512:	f000 f8f1 	bl	80236f8 <_ZSt9terminatev>

08023516 <_ZNSaIcEC1Ev>:
 8023516:	4770      	bx	lr

08023518 <_ZNSaIcED1Ev>:
 8023518:	4770      	bx	lr

0802351a <_ZSt17__throw_bad_allocv>:
 802351a:	b508      	push	{r3, lr}
 802351c:	f000 f90a 	bl	8023734 <abort>

08023520 <_ZSt19__throw_logic_errorPKc>:
 8023520:	b508      	push	{r3, lr}
 8023522:	f000 f907 	bl	8023734 <abort>

08023526 <_ZSt20__throw_length_errorPKc>:
 8023526:	b508      	push	{r3, lr}
 8023528:	f000 f904 	bl	8023734 <abort>

0802352c <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 802352c:	b10a      	cbz	r2, 8023532 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 802352e:	f000 b98b 	b.w	8023848 <memcpy>
 8023532:	4770      	bx	lr

08023534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8023534:	6001      	str	r1, [r0, #0]
 8023536:	4770      	bx	lr

08023538 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 8023538:	6800      	ldr	r0, [r0, #0]
 802353a:	4770      	bx	lr

0802353c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 802353c:	3008      	adds	r0, #8
 802353e:	4770      	bx	lr

08023540 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8023540:	6081      	str	r1, [r0, #8]
 8023542:	4770      	bx	lr

08023544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8023544:	6803      	ldr	r3, [r0, #0]
 8023546:	6041      	str	r1, [r0, #4]
 8023548:	2200      	movs	r2, #0
 802354a:	545a      	strb	r2, [r3, r1]
 802354c:	4770      	bx	lr
	...

08023550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8023550:	b508      	push	{r3, lr}
 8023552:	680b      	ldr	r3, [r1, #0]
 8023554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8023558:	d302      	bcc.n	8023560 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 802355a:	480d      	ldr	r0, [pc, #52]	; (8023590 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 802355c:	f7ff ffe3 	bl	8023526 <_ZSt20__throw_length_errorPKc>
 8023560:	4293      	cmp	r3, r2
 8023562:	d90b      	bls.n	802357c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8023564:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8023568:	ea4f 0042 	mov.w	r0, r2, lsl #1
 802356c:	d206      	bcs.n	802357c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 802356e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8023572:	bf2a      	itet	cs
 8023574:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8023578:	6008      	strcc	r0, [r1, #0]
 802357a:	600b      	strcs	r3, [r1, #0]
 802357c:	6808      	ldr	r0, [r1, #0]
 802357e:	3001      	adds	r0, #1
 8023580:	d501      	bpl.n	8023586 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8023582:	f7ff ffca 	bl	802351a <_ZSt17__throw_bad_allocv>
 8023586:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802358a:	f000 b8ba 	b.w	8023702 <_Znwj>
 802358e:	bf00      	nop
 8023590:	080289ab 	.word	0x080289ab

08023594 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8023594:	f850 3b08 	ldr.w	r3, [r0], #8
 8023598:	4283      	cmp	r3, r0
 802359a:	d002      	beq.n	80235a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 802359c:	4618      	mov	r0, r3
 802359e:	f000 b89d 	b.w	80236dc <_ZdlPv>
 80235a2:	4770      	bx	lr

080235a4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80235a4:	6840      	ldr	r0, [r0, #4]
 80235a6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80235aa:	3901      	subs	r1, #1
 80235ac:	1a09      	subs	r1, r1, r0
 80235ae:	4291      	cmp	r1, r2
 80235b0:	b508      	push	{r3, lr}
 80235b2:	d202      	bcs.n	80235ba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80235b4:	4618      	mov	r0, r3
 80235b6:	f7ff ffb6 	bl	8023526 <_ZSt20__throw_length_errorPKc>
 80235ba:	bd08      	pop	{r3, pc}

080235bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80235bc:	2a01      	cmp	r2, #1
 80235be:	b510      	push	{r4, lr}
 80235c0:	d102      	bne.n	80235c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 80235c2:	780a      	ldrb	r2, [r1, #0]
 80235c4:	7002      	strb	r2, [r0, #0]
 80235c6:	bd10      	pop	{r4, pc}
 80235c8:	f7ff ffb0 	bl	802352c <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80235cc:	e7fb      	b.n	80235c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

080235ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80235ce:	b508      	push	{r3, lr}
 80235d0:	1a52      	subs	r2, r2, r1
 80235d2:	f7ff fff3 	bl	80235bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80235d6:	bd08      	pop	{r3, pc}

080235d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80235d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80235dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80235de:	461f      	mov	r7, r3
 80235e0:	6843      	ldr	r3, [r0, #4]
 80235e2:	eb01 0802 	add.w	r8, r1, r2
 80235e6:	1ab2      	subs	r2, r6, r2
 80235e8:	441a      	add	r2, r3
 80235ea:	eba3 0908 	sub.w	r9, r3, r8
 80235ee:	4603      	mov	r3, r0
 80235f0:	9201      	str	r2, [sp, #4]
 80235f2:	f853 2b08 	ldr.w	r2, [r3], #8
 80235f6:	429a      	cmp	r2, r3
 80235f8:	bf18      	it	ne
 80235fa:	6882      	ldrne	r2, [r0, #8]
 80235fc:	460d      	mov	r5, r1
 80235fe:	bf08      	it	eq
 8023600:	220f      	moveq	r2, #15
 8023602:	a901      	add	r1, sp, #4
 8023604:	4604      	mov	r4, r0
 8023606:	f7ff ffa3 	bl	8023550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 802360a:	4682      	mov	sl, r0
 802360c:	b11d      	cbz	r5, 8023616 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 802360e:	6821      	ldr	r1, [r4, #0]
 8023610:	462a      	mov	r2, r5
 8023612:	f7ff ffd3 	bl	80235bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8023616:	b137      	cbz	r7, 8023626 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8023618:	b12e      	cbz	r6, 8023626 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 802361a:	4632      	mov	r2, r6
 802361c:	4639      	mov	r1, r7
 802361e:	eb0a 0005 	add.w	r0, sl, r5
 8023622:	f7ff ffcb 	bl	80235bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8023626:	f1b9 0f00 	cmp.w	r9, #0
 802362a:	d007      	beq.n	802363c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 802362c:	6821      	ldr	r1, [r4, #0]
 802362e:	4435      	add	r5, r6
 8023630:	464a      	mov	r2, r9
 8023632:	4441      	add	r1, r8
 8023634:	eb0a 0005 	add.w	r0, sl, r5
 8023638:	f7ff ffc0 	bl	80235bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 802363c:	4620      	mov	r0, r4
 802363e:	f7ff ffa9 	bl	8023594 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8023642:	9b01      	ldr	r3, [sp, #4]
 8023644:	f8c4 a000 	str.w	sl, [r4]
 8023648:	60a3      	str	r3, [r4, #8]
 802364a:	b002      	add	sp, #8
 802364c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08023650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8023650:	b510      	push	{r4, lr}
 8023652:	4604      	mov	r4, r0
 8023654:	f7ff ff9e 	bl	8023594 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8023658:	4620      	mov	r0, r4
 802365a:	bd10      	pop	{r4, pc}

0802365c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 802365c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802365e:	4604      	mov	r4, r0
 8023660:	4623      	mov	r3, r4
 8023662:	6840      	ldr	r0, [r0, #4]
 8023664:	f853 6b08 	ldr.w	r6, [r3], #8
 8023668:	429e      	cmp	r6, r3
 802366a:	bf18      	it	ne
 802366c:	68a3      	ldrne	r3, [r4, #8]
 802366e:	eb00 0502 	add.w	r5, r0, r2
 8023672:	bf08      	it	eq
 8023674:	230f      	moveq	r3, #15
 8023676:	429d      	cmp	r5, r3
 8023678:	d80a      	bhi.n	8023690 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 802367a:	b112      	cbz	r2, 8023682 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 802367c:	4430      	add	r0, r6
 802367e:	f7ff ff9d 	bl	80235bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8023682:	6823      	ldr	r3, [r4, #0]
 8023684:	6065      	str	r5, [r4, #4]
 8023686:	2200      	movs	r2, #0
 8023688:	4620      	mov	r0, r4
 802368a:	555a      	strb	r2, [r3, r5]
 802368c:	b002      	add	sp, #8
 802368e:	bd70      	pop	{r4, r5, r6, pc}
 8023690:	9200      	str	r2, [sp, #0]
 8023692:	460b      	mov	r3, r1
 8023694:	2200      	movs	r2, #0
 8023696:	4601      	mov	r1, r0
 8023698:	4620      	mov	r0, r4
 802369a:	f7ff ff9d 	bl	80235d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 802369e:	e7f0      	b.n	8023682 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

080236a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 80236a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80236a2:	4604      	mov	r4, r0
 80236a4:	4608      	mov	r0, r1
 80236a6:	460d      	mov	r5, r1
 80236a8:	f7dc fdf2 	bl	8000290 <strlen>
 80236ac:	4b06      	ldr	r3, [pc, #24]	; (80236c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 80236ae:	9001      	str	r0, [sp, #4]
 80236b0:	4602      	mov	r2, r0
 80236b2:	2100      	movs	r1, #0
 80236b4:	4620      	mov	r0, r4
 80236b6:	f7ff ff75 	bl	80235a4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80236ba:	9a01      	ldr	r2, [sp, #4]
 80236bc:	4629      	mov	r1, r5
 80236be:	4620      	mov	r0, r4
 80236c0:	f7ff ffcc 	bl	802365c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80236c4:	b003      	add	sp, #12
 80236c6:	bd30      	pop	{r4, r5, pc}
 80236c8:	080289c3 	.word	0x080289c3

080236cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>:
 80236cc:	b508      	push	{r3, lr}
 80236ce:	f7ff ffe7 	bl	80236a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 80236d2:	bd08      	pop	{r3, pc}

080236d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80236d4:	6800      	ldr	r0, [r0, #0]
 80236d6:	4770      	bx	lr

080236d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 80236d8:	6001      	str	r1, [r0, #0]
 80236da:	4770      	bx	lr

080236dc <_ZdlPv>:
 80236dc:	f000 b8ac 	b.w	8023838 <free>

080236e0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80236e0:	b508      	push	{r3, lr}
 80236e2:	4780      	blx	r0
 80236e4:	f000 f826 	bl	8023734 <abort>

080236e8 <_ZSt13get_terminatev>:
 80236e8:	4b02      	ldr	r3, [pc, #8]	; (80236f4 <_ZSt13get_terminatev+0xc>)
 80236ea:	6818      	ldr	r0, [r3, #0]
 80236ec:	f3bf 8f5b 	dmb	ish
 80236f0:	4770      	bx	lr
 80236f2:	bf00      	nop
 80236f4:	200000f4 	.word	0x200000f4

080236f8 <_ZSt9terminatev>:
 80236f8:	b508      	push	{r3, lr}
 80236fa:	f7ff fff5 	bl	80236e8 <_ZSt13get_terminatev>
 80236fe:	f7ff ffef 	bl	80236e0 <_ZN10__cxxabiv111__terminateEPFvvE>

08023702 <_Znwj>:
 8023702:	2801      	cmp	r0, #1
 8023704:	bf38      	it	cc
 8023706:	2001      	movcc	r0, #1
 8023708:	b510      	push	{r4, lr}
 802370a:	4604      	mov	r4, r0
 802370c:	4620      	mov	r0, r4
 802370e:	f000 f88b 	bl	8023828 <malloc>
 8023712:	b930      	cbnz	r0, 8023722 <_Znwj+0x20>
 8023714:	f000 f806 	bl	8023724 <_ZSt15get_new_handlerv>
 8023718:	b908      	cbnz	r0, 802371e <_Znwj+0x1c>
 802371a:	f000 f80b 	bl	8023734 <abort>
 802371e:	4780      	blx	r0
 8023720:	e7f4      	b.n	802370c <_Znwj+0xa>
 8023722:	bd10      	pop	{r4, pc}

08023724 <_ZSt15get_new_handlerv>:
 8023724:	4b02      	ldr	r3, [pc, #8]	; (8023730 <_ZSt15get_new_handlerv+0xc>)
 8023726:	6818      	ldr	r0, [r3, #0]
 8023728:	f3bf 8f5b 	dmb	ish
 802372c:	4770      	bx	lr
 802372e:	bf00      	nop
 8023730:	2000a138 	.word	0x2000a138

08023734 <abort>:
 8023734:	b508      	push	{r3, lr}
 8023736:	2006      	movs	r0, #6
 8023738:	f000 fc86 	bl	8024048 <raise>
 802373c:	2001      	movs	r0, #1
 802373e:	f7de fbe5 	bl	8001f0c <_exit>
	...

08023744 <__assert_func>:
 8023744:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023746:	4614      	mov	r4, r2
 8023748:	461a      	mov	r2, r3
 802374a:	4b09      	ldr	r3, [pc, #36]	; (8023770 <__assert_func+0x2c>)
 802374c:	681b      	ldr	r3, [r3, #0]
 802374e:	4605      	mov	r5, r0
 8023750:	68d8      	ldr	r0, [r3, #12]
 8023752:	b14c      	cbz	r4, 8023768 <__assert_func+0x24>
 8023754:	4b07      	ldr	r3, [pc, #28]	; (8023774 <__assert_func+0x30>)
 8023756:	9100      	str	r1, [sp, #0]
 8023758:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802375c:	4906      	ldr	r1, [pc, #24]	; (8023778 <__assert_func+0x34>)
 802375e:	462b      	mov	r3, r5
 8023760:	f000 f82c 	bl	80237bc <fiprintf>
 8023764:	f7ff ffe6 	bl	8023734 <abort>
 8023768:	4b04      	ldr	r3, [pc, #16]	; (802377c <__assert_func+0x38>)
 802376a:	461c      	mov	r4, r3
 802376c:	e7f3      	b.n	8023756 <__assert_func+0x12>
 802376e:	bf00      	nop
 8023770:	200000f8 	.word	0x200000f8
 8023774:	080289d8 	.word	0x080289d8
 8023778:	080289e5 	.word	0x080289e5
 802377c:	08028a13 	.word	0x08028a13

08023780 <atexit>:
 8023780:	2300      	movs	r3, #0
 8023782:	4601      	mov	r1, r0
 8023784:	461a      	mov	r2, r3
 8023786:	4618      	mov	r0, r3
 8023788:	f000 be8c 	b.w	80244a4 <__register_exitproc>

0802378c <atoi>:
 802378c:	220a      	movs	r2, #10
 802378e:	2100      	movs	r1, #0
 8023790:	f000 bd72 	b.w	8024278 <strtol>

08023794 <__cxa_atexit>:
 8023794:	b510      	push	{r4, lr}
 8023796:	4c05      	ldr	r4, [pc, #20]	; (80237ac <__cxa_atexit+0x18>)
 8023798:	4613      	mov	r3, r2
 802379a:	b12c      	cbz	r4, 80237a8 <__cxa_atexit+0x14>
 802379c:	460a      	mov	r2, r1
 802379e:	4601      	mov	r1, r0
 80237a0:	2002      	movs	r0, #2
 80237a2:	f000 fe7f 	bl	80244a4 <__register_exitproc>
 80237a6:	bd10      	pop	{r4, pc}
 80237a8:	4620      	mov	r0, r4
 80237aa:	e7fc      	b.n	80237a6 <__cxa_atexit+0x12>
 80237ac:	080244a5 	.word	0x080244a5

080237b0 <__errno>:
 80237b0:	4b01      	ldr	r3, [pc, #4]	; (80237b8 <__errno+0x8>)
 80237b2:	6818      	ldr	r0, [r3, #0]
 80237b4:	4770      	bx	lr
 80237b6:	bf00      	nop
 80237b8:	200000f8 	.word	0x200000f8

080237bc <fiprintf>:
 80237bc:	b40e      	push	{r1, r2, r3}
 80237be:	b503      	push	{r0, r1, lr}
 80237c0:	4601      	mov	r1, r0
 80237c2:	ab03      	add	r3, sp, #12
 80237c4:	4805      	ldr	r0, [pc, #20]	; (80237dc <fiprintf+0x20>)
 80237c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80237ca:	6800      	ldr	r0, [r0, #0]
 80237cc:	9301      	str	r3, [sp, #4]
 80237ce:	f000 f93f 	bl	8023a50 <_vfiprintf_r>
 80237d2:	b002      	add	sp, #8
 80237d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80237d8:	b003      	add	sp, #12
 80237da:	4770      	bx	lr
 80237dc:	200000f8 	.word	0x200000f8

080237e0 <__libc_init_array>:
 80237e0:	b570      	push	{r4, r5, r6, lr}
 80237e2:	4d0d      	ldr	r5, [pc, #52]	; (8023818 <__libc_init_array+0x38>)
 80237e4:	4c0d      	ldr	r4, [pc, #52]	; (802381c <__libc_init_array+0x3c>)
 80237e6:	1b64      	subs	r4, r4, r5
 80237e8:	10a4      	asrs	r4, r4, #2
 80237ea:	2600      	movs	r6, #0
 80237ec:	42a6      	cmp	r6, r4
 80237ee:	d109      	bne.n	8023804 <__libc_init_array+0x24>
 80237f0:	4d0b      	ldr	r5, [pc, #44]	; (8023820 <__libc_init_array+0x40>)
 80237f2:	4c0c      	ldr	r4, [pc, #48]	; (8023824 <__libc_init_array+0x44>)
 80237f4:	f001 fac4 	bl	8024d80 <_init>
 80237f8:	1b64      	subs	r4, r4, r5
 80237fa:	10a4      	asrs	r4, r4, #2
 80237fc:	2600      	movs	r6, #0
 80237fe:	42a6      	cmp	r6, r4
 8023800:	d105      	bne.n	802380e <__libc_init_array+0x2e>
 8023802:	bd70      	pop	{r4, r5, r6, pc}
 8023804:	f855 3b04 	ldr.w	r3, [r5], #4
 8023808:	4798      	blx	r3
 802380a:	3601      	adds	r6, #1
 802380c:	e7ee      	b.n	80237ec <__libc_init_array+0xc>
 802380e:	f855 3b04 	ldr.w	r3, [r5], #4
 8023812:	4798      	blx	r3
 8023814:	3601      	adds	r6, #1
 8023816:	e7f2      	b.n	80237fe <__libc_init_array+0x1e>
 8023818:	08061abc 	.word	0x08061abc
 802381c:	08061abc 	.word	0x08061abc
 8023820:	08061abc 	.word	0x08061abc
 8023824:	08061ad0 	.word	0x08061ad0

08023828 <malloc>:
 8023828:	4b02      	ldr	r3, [pc, #8]	; (8023834 <malloc+0xc>)
 802382a:	4601      	mov	r1, r0
 802382c:	6818      	ldr	r0, [r3, #0]
 802382e:	f000 b88b 	b.w	8023948 <_malloc_r>
 8023832:	bf00      	nop
 8023834:	200000f8 	.word	0x200000f8

08023838 <free>:
 8023838:	4b02      	ldr	r3, [pc, #8]	; (8023844 <free+0xc>)
 802383a:	4601      	mov	r1, r0
 802383c:	6818      	ldr	r0, [r3, #0]
 802383e:	f000 b833 	b.w	80238a8 <_free_r>
 8023842:	bf00      	nop
 8023844:	200000f8 	.word	0x200000f8

08023848 <memcpy>:
 8023848:	440a      	add	r2, r1
 802384a:	4291      	cmp	r1, r2
 802384c:	f100 33ff 	add.w	r3, r0, #4294967295
 8023850:	d100      	bne.n	8023854 <memcpy+0xc>
 8023852:	4770      	bx	lr
 8023854:	b510      	push	{r4, lr}
 8023856:	f811 4b01 	ldrb.w	r4, [r1], #1
 802385a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802385e:	4291      	cmp	r1, r2
 8023860:	d1f9      	bne.n	8023856 <memcpy+0xe>
 8023862:	bd10      	pop	{r4, pc}

08023864 <memmove>:
 8023864:	4288      	cmp	r0, r1
 8023866:	b510      	push	{r4, lr}
 8023868:	eb01 0402 	add.w	r4, r1, r2
 802386c:	d902      	bls.n	8023874 <memmove+0x10>
 802386e:	4284      	cmp	r4, r0
 8023870:	4623      	mov	r3, r4
 8023872:	d807      	bhi.n	8023884 <memmove+0x20>
 8023874:	1e43      	subs	r3, r0, #1
 8023876:	42a1      	cmp	r1, r4
 8023878:	d008      	beq.n	802388c <memmove+0x28>
 802387a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802387e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8023882:	e7f8      	b.n	8023876 <memmove+0x12>
 8023884:	4402      	add	r2, r0
 8023886:	4601      	mov	r1, r0
 8023888:	428a      	cmp	r2, r1
 802388a:	d100      	bne.n	802388e <memmove+0x2a>
 802388c:	bd10      	pop	{r4, pc}
 802388e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8023892:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8023896:	e7f7      	b.n	8023888 <memmove+0x24>

08023898 <memset>:
 8023898:	4402      	add	r2, r0
 802389a:	4603      	mov	r3, r0
 802389c:	4293      	cmp	r3, r2
 802389e:	d100      	bne.n	80238a2 <memset+0xa>
 80238a0:	4770      	bx	lr
 80238a2:	f803 1b01 	strb.w	r1, [r3], #1
 80238a6:	e7f9      	b.n	802389c <memset+0x4>

080238a8 <_free_r>:
 80238a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80238aa:	2900      	cmp	r1, #0
 80238ac:	d048      	beq.n	8023940 <_free_r+0x98>
 80238ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80238b2:	9001      	str	r0, [sp, #4]
 80238b4:	2b00      	cmp	r3, #0
 80238b6:	f1a1 0404 	sub.w	r4, r1, #4
 80238ba:	bfb8      	it	lt
 80238bc:	18e4      	addlt	r4, r4, r3
 80238be:	f001 f895 	bl	80249ec <__malloc_lock>
 80238c2:	4a20      	ldr	r2, [pc, #128]	; (8023944 <_free_r+0x9c>)
 80238c4:	9801      	ldr	r0, [sp, #4]
 80238c6:	6813      	ldr	r3, [r2, #0]
 80238c8:	4615      	mov	r5, r2
 80238ca:	b933      	cbnz	r3, 80238da <_free_r+0x32>
 80238cc:	6063      	str	r3, [r4, #4]
 80238ce:	6014      	str	r4, [r2, #0]
 80238d0:	b003      	add	sp, #12
 80238d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80238d6:	f001 b88f 	b.w	80249f8 <__malloc_unlock>
 80238da:	42a3      	cmp	r3, r4
 80238dc:	d90b      	bls.n	80238f6 <_free_r+0x4e>
 80238de:	6821      	ldr	r1, [r4, #0]
 80238e0:	1862      	adds	r2, r4, r1
 80238e2:	4293      	cmp	r3, r2
 80238e4:	bf04      	itt	eq
 80238e6:	681a      	ldreq	r2, [r3, #0]
 80238e8:	685b      	ldreq	r3, [r3, #4]
 80238ea:	6063      	str	r3, [r4, #4]
 80238ec:	bf04      	itt	eq
 80238ee:	1852      	addeq	r2, r2, r1
 80238f0:	6022      	streq	r2, [r4, #0]
 80238f2:	602c      	str	r4, [r5, #0]
 80238f4:	e7ec      	b.n	80238d0 <_free_r+0x28>
 80238f6:	461a      	mov	r2, r3
 80238f8:	685b      	ldr	r3, [r3, #4]
 80238fa:	b10b      	cbz	r3, 8023900 <_free_r+0x58>
 80238fc:	42a3      	cmp	r3, r4
 80238fe:	d9fa      	bls.n	80238f6 <_free_r+0x4e>
 8023900:	6811      	ldr	r1, [r2, #0]
 8023902:	1855      	adds	r5, r2, r1
 8023904:	42a5      	cmp	r5, r4
 8023906:	d10b      	bne.n	8023920 <_free_r+0x78>
 8023908:	6824      	ldr	r4, [r4, #0]
 802390a:	4421      	add	r1, r4
 802390c:	1854      	adds	r4, r2, r1
 802390e:	42a3      	cmp	r3, r4
 8023910:	6011      	str	r1, [r2, #0]
 8023912:	d1dd      	bne.n	80238d0 <_free_r+0x28>
 8023914:	681c      	ldr	r4, [r3, #0]
 8023916:	685b      	ldr	r3, [r3, #4]
 8023918:	6053      	str	r3, [r2, #4]
 802391a:	4421      	add	r1, r4
 802391c:	6011      	str	r1, [r2, #0]
 802391e:	e7d7      	b.n	80238d0 <_free_r+0x28>
 8023920:	d902      	bls.n	8023928 <_free_r+0x80>
 8023922:	230c      	movs	r3, #12
 8023924:	6003      	str	r3, [r0, #0]
 8023926:	e7d3      	b.n	80238d0 <_free_r+0x28>
 8023928:	6825      	ldr	r5, [r4, #0]
 802392a:	1961      	adds	r1, r4, r5
 802392c:	428b      	cmp	r3, r1
 802392e:	bf04      	itt	eq
 8023930:	6819      	ldreq	r1, [r3, #0]
 8023932:	685b      	ldreq	r3, [r3, #4]
 8023934:	6063      	str	r3, [r4, #4]
 8023936:	bf04      	itt	eq
 8023938:	1949      	addeq	r1, r1, r5
 802393a:	6021      	streq	r1, [r4, #0]
 802393c:	6054      	str	r4, [r2, #4]
 802393e:	e7c7      	b.n	80238d0 <_free_r+0x28>
 8023940:	b003      	add	sp, #12
 8023942:	bd30      	pop	{r4, r5, pc}
 8023944:	2000a13c 	.word	0x2000a13c

08023948 <_malloc_r>:
 8023948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802394a:	1ccd      	adds	r5, r1, #3
 802394c:	f025 0503 	bic.w	r5, r5, #3
 8023950:	3508      	adds	r5, #8
 8023952:	2d0c      	cmp	r5, #12
 8023954:	bf38      	it	cc
 8023956:	250c      	movcc	r5, #12
 8023958:	2d00      	cmp	r5, #0
 802395a:	4606      	mov	r6, r0
 802395c:	db01      	blt.n	8023962 <_malloc_r+0x1a>
 802395e:	42a9      	cmp	r1, r5
 8023960:	d903      	bls.n	802396a <_malloc_r+0x22>
 8023962:	230c      	movs	r3, #12
 8023964:	6033      	str	r3, [r6, #0]
 8023966:	2000      	movs	r0, #0
 8023968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802396a:	f001 f83f 	bl	80249ec <__malloc_lock>
 802396e:	4921      	ldr	r1, [pc, #132]	; (80239f4 <_malloc_r+0xac>)
 8023970:	680a      	ldr	r2, [r1, #0]
 8023972:	4614      	mov	r4, r2
 8023974:	b99c      	cbnz	r4, 802399e <_malloc_r+0x56>
 8023976:	4f20      	ldr	r7, [pc, #128]	; (80239f8 <_malloc_r+0xb0>)
 8023978:	683b      	ldr	r3, [r7, #0]
 802397a:	b923      	cbnz	r3, 8023986 <_malloc_r+0x3e>
 802397c:	4621      	mov	r1, r4
 802397e:	4630      	mov	r0, r6
 8023980:	f000 fb2a 	bl	8023fd8 <_sbrk_r>
 8023984:	6038      	str	r0, [r7, #0]
 8023986:	4629      	mov	r1, r5
 8023988:	4630      	mov	r0, r6
 802398a:	f000 fb25 	bl	8023fd8 <_sbrk_r>
 802398e:	1c43      	adds	r3, r0, #1
 8023990:	d123      	bne.n	80239da <_malloc_r+0x92>
 8023992:	230c      	movs	r3, #12
 8023994:	6033      	str	r3, [r6, #0]
 8023996:	4630      	mov	r0, r6
 8023998:	f001 f82e 	bl	80249f8 <__malloc_unlock>
 802399c:	e7e3      	b.n	8023966 <_malloc_r+0x1e>
 802399e:	6823      	ldr	r3, [r4, #0]
 80239a0:	1b5b      	subs	r3, r3, r5
 80239a2:	d417      	bmi.n	80239d4 <_malloc_r+0x8c>
 80239a4:	2b0b      	cmp	r3, #11
 80239a6:	d903      	bls.n	80239b0 <_malloc_r+0x68>
 80239a8:	6023      	str	r3, [r4, #0]
 80239aa:	441c      	add	r4, r3
 80239ac:	6025      	str	r5, [r4, #0]
 80239ae:	e004      	b.n	80239ba <_malloc_r+0x72>
 80239b0:	6863      	ldr	r3, [r4, #4]
 80239b2:	42a2      	cmp	r2, r4
 80239b4:	bf0c      	ite	eq
 80239b6:	600b      	streq	r3, [r1, #0]
 80239b8:	6053      	strne	r3, [r2, #4]
 80239ba:	4630      	mov	r0, r6
 80239bc:	f001 f81c 	bl	80249f8 <__malloc_unlock>
 80239c0:	f104 000b 	add.w	r0, r4, #11
 80239c4:	1d23      	adds	r3, r4, #4
 80239c6:	f020 0007 	bic.w	r0, r0, #7
 80239ca:	1ac2      	subs	r2, r0, r3
 80239cc:	d0cc      	beq.n	8023968 <_malloc_r+0x20>
 80239ce:	1a1b      	subs	r3, r3, r0
 80239d0:	50a3      	str	r3, [r4, r2]
 80239d2:	e7c9      	b.n	8023968 <_malloc_r+0x20>
 80239d4:	4622      	mov	r2, r4
 80239d6:	6864      	ldr	r4, [r4, #4]
 80239d8:	e7cc      	b.n	8023974 <_malloc_r+0x2c>
 80239da:	1cc4      	adds	r4, r0, #3
 80239dc:	f024 0403 	bic.w	r4, r4, #3
 80239e0:	42a0      	cmp	r0, r4
 80239e2:	d0e3      	beq.n	80239ac <_malloc_r+0x64>
 80239e4:	1a21      	subs	r1, r4, r0
 80239e6:	4630      	mov	r0, r6
 80239e8:	f000 faf6 	bl	8023fd8 <_sbrk_r>
 80239ec:	3001      	adds	r0, #1
 80239ee:	d1dd      	bne.n	80239ac <_malloc_r+0x64>
 80239f0:	e7cf      	b.n	8023992 <_malloc_r+0x4a>
 80239f2:	bf00      	nop
 80239f4:	2000a13c 	.word	0x2000a13c
 80239f8:	2000a140 	.word	0x2000a140

080239fc <__sfputc_r>:
 80239fc:	6893      	ldr	r3, [r2, #8]
 80239fe:	3b01      	subs	r3, #1
 8023a00:	2b00      	cmp	r3, #0
 8023a02:	b410      	push	{r4}
 8023a04:	6093      	str	r3, [r2, #8]
 8023a06:	da08      	bge.n	8023a1a <__sfputc_r+0x1e>
 8023a08:	6994      	ldr	r4, [r2, #24]
 8023a0a:	42a3      	cmp	r3, r4
 8023a0c:	db01      	blt.n	8023a12 <__sfputc_r+0x16>
 8023a0e:	290a      	cmp	r1, #10
 8023a10:	d103      	bne.n	8023a1a <__sfputc_r+0x1e>
 8023a12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023a16:	f000 bc73 	b.w	8024300 <__swbuf_r>
 8023a1a:	6813      	ldr	r3, [r2, #0]
 8023a1c:	1c58      	adds	r0, r3, #1
 8023a1e:	6010      	str	r0, [r2, #0]
 8023a20:	7019      	strb	r1, [r3, #0]
 8023a22:	4608      	mov	r0, r1
 8023a24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023a28:	4770      	bx	lr

08023a2a <__sfputs_r>:
 8023a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023a2c:	4606      	mov	r6, r0
 8023a2e:	460f      	mov	r7, r1
 8023a30:	4614      	mov	r4, r2
 8023a32:	18d5      	adds	r5, r2, r3
 8023a34:	42ac      	cmp	r4, r5
 8023a36:	d101      	bne.n	8023a3c <__sfputs_r+0x12>
 8023a38:	2000      	movs	r0, #0
 8023a3a:	e007      	b.n	8023a4c <__sfputs_r+0x22>
 8023a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023a40:	463a      	mov	r2, r7
 8023a42:	4630      	mov	r0, r6
 8023a44:	f7ff ffda 	bl	80239fc <__sfputc_r>
 8023a48:	1c43      	adds	r3, r0, #1
 8023a4a:	d1f3      	bne.n	8023a34 <__sfputs_r+0xa>
 8023a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023a50 <_vfiprintf_r>:
 8023a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a54:	460d      	mov	r5, r1
 8023a56:	b09d      	sub	sp, #116	; 0x74
 8023a58:	4614      	mov	r4, r2
 8023a5a:	4698      	mov	r8, r3
 8023a5c:	4606      	mov	r6, r0
 8023a5e:	b118      	cbz	r0, 8023a68 <_vfiprintf_r+0x18>
 8023a60:	6983      	ldr	r3, [r0, #24]
 8023a62:	b90b      	cbnz	r3, 8023a68 <_vfiprintf_r+0x18>
 8023a64:	f000 feaa 	bl	80247bc <__sinit>
 8023a68:	4b89      	ldr	r3, [pc, #548]	; (8023c90 <_vfiprintf_r+0x240>)
 8023a6a:	429d      	cmp	r5, r3
 8023a6c:	d11b      	bne.n	8023aa6 <_vfiprintf_r+0x56>
 8023a6e:	6875      	ldr	r5, [r6, #4]
 8023a70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023a72:	07d9      	lsls	r1, r3, #31
 8023a74:	d405      	bmi.n	8023a82 <_vfiprintf_r+0x32>
 8023a76:	89ab      	ldrh	r3, [r5, #12]
 8023a78:	059a      	lsls	r2, r3, #22
 8023a7a:	d402      	bmi.n	8023a82 <_vfiprintf_r+0x32>
 8023a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023a7e:	f000 ff3b 	bl	80248f8 <__retarget_lock_acquire_recursive>
 8023a82:	89ab      	ldrh	r3, [r5, #12]
 8023a84:	071b      	lsls	r3, r3, #28
 8023a86:	d501      	bpl.n	8023a8c <_vfiprintf_r+0x3c>
 8023a88:	692b      	ldr	r3, [r5, #16]
 8023a8a:	b9eb      	cbnz	r3, 8023ac8 <_vfiprintf_r+0x78>
 8023a8c:	4629      	mov	r1, r5
 8023a8e:	4630      	mov	r0, r6
 8023a90:	f000 fc9a 	bl	80243c8 <__swsetup_r>
 8023a94:	b1c0      	cbz	r0, 8023ac8 <_vfiprintf_r+0x78>
 8023a96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023a98:	07dc      	lsls	r4, r3, #31
 8023a9a:	d50e      	bpl.n	8023aba <_vfiprintf_r+0x6a>
 8023a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8023aa0:	b01d      	add	sp, #116	; 0x74
 8023aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023aa6:	4b7b      	ldr	r3, [pc, #492]	; (8023c94 <_vfiprintf_r+0x244>)
 8023aa8:	429d      	cmp	r5, r3
 8023aaa:	d101      	bne.n	8023ab0 <_vfiprintf_r+0x60>
 8023aac:	68b5      	ldr	r5, [r6, #8]
 8023aae:	e7df      	b.n	8023a70 <_vfiprintf_r+0x20>
 8023ab0:	4b79      	ldr	r3, [pc, #484]	; (8023c98 <_vfiprintf_r+0x248>)
 8023ab2:	429d      	cmp	r5, r3
 8023ab4:	bf08      	it	eq
 8023ab6:	68f5      	ldreq	r5, [r6, #12]
 8023ab8:	e7da      	b.n	8023a70 <_vfiprintf_r+0x20>
 8023aba:	89ab      	ldrh	r3, [r5, #12]
 8023abc:	0598      	lsls	r0, r3, #22
 8023abe:	d4ed      	bmi.n	8023a9c <_vfiprintf_r+0x4c>
 8023ac0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023ac2:	f000 ff1b 	bl	80248fc <__retarget_lock_release_recursive>
 8023ac6:	e7e9      	b.n	8023a9c <_vfiprintf_r+0x4c>
 8023ac8:	2300      	movs	r3, #0
 8023aca:	9309      	str	r3, [sp, #36]	; 0x24
 8023acc:	2320      	movs	r3, #32
 8023ace:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023ad2:	f8cd 800c 	str.w	r8, [sp, #12]
 8023ad6:	2330      	movs	r3, #48	; 0x30
 8023ad8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8023c9c <_vfiprintf_r+0x24c>
 8023adc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023ae0:	f04f 0901 	mov.w	r9, #1
 8023ae4:	4623      	mov	r3, r4
 8023ae6:	469a      	mov	sl, r3
 8023ae8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023aec:	b10a      	cbz	r2, 8023af2 <_vfiprintf_r+0xa2>
 8023aee:	2a25      	cmp	r2, #37	; 0x25
 8023af0:	d1f9      	bne.n	8023ae6 <_vfiprintf_r+0x96>
 8023af2:	ebba 0b04 	subs.w	fp, sl, r4
 8023af6:	d00b      	beq.n	8023b10 <_vfiprintf_r+0xc0>
 8023af8:	465b      	mov	r3, fp
 8023afa:	4622      	mov	r2, r4
 8023afc:	4629      	mov	r1, r5
 8023afe:	4630      	mov	r0, r6
 8023b00:	f7ff ff93 	bl	8023a2a <__sfputs_r>
 8023b04:	3001      	adds	r0, #1
 8023b06:	f000 80aa 	beq.w	8023c5e <_vfiprintf_r+0x20e>
 8023b0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023b0c:	445a      	add	r2, fp
 8023b0e:	9209      	str	r2, [sp, #36]	; 0x24
 8023b10:	f89a 3000 	ldrb.w	r3, [sl]
 8023b14:	2b00      	cmp	r3, #0
 8023b16:	f000 80a2 	beq.w	8023c5e <_vfiprintf_r+0x20e>
 8023b1a:	2300      	movs	r3, #0
 8023b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8023b20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023b24:	f10a 0a01 	add.w	sl, sl, #1
 8023b28:	9304      	str	r3, [sp, #16]
 8023b2a:	9307      	str	r3, [sp, #28]
 8023b2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023b30:	931a      	str	r3, [sp, #104]	; 0x68
 8023b32:	4654      	mov	r4, sl
 8023b34:	2205      	movs	r2, #5
 8023b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023b3a:	4858      	ldr	r0, [pc, #352]	; (8023c9c <_vfiprintf_r+0x24c>)
 8023b3c:	f7dc fb58 	bl	80001f0 <memchr>
 8023b40:	9a04      	ldr	r2, [sp, #16]
 8023b42:	b9d8      	cbnz	r0, 8023b7c <_vfiprintf_r+0x12c>
 8023b44:	06d1      	lsls	r1, r2, #27
 8023b46:	bf44      	itt	mi
 8023b48:	2320      	movmi	r3, #32
 8023b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023b4e:	0713      	lsls	r3, r2, #28
 8023b50:	bf44      	itt	mi
 8023b52:	232b      	movmi	r3, #43	; 0x2b
 8023b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023b58:	f89a 3000 	ldrb.w	r3, [sl]
 8023b5c:	2b2a      	cmp	r3, #42	; 0x2a
 8023b5e:	d015      	beq.n	8023b8c <_vfiprintf_r+0x13c>
 8023b60:	9a07      	ldr	r2, [sp, #28]
 8023b62:	4654      	mov	r4, sl
 8023b64:	2000      	movs	r0, #0
 8023b66:	f04f 0c0a 	mov.w	ip, #10
 8023b6a:	4621      	mov	r1, r4
 8023b6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023b70:	3b30      	subs	r3, #48	; 0x30
 8023b72:	2b09      	cmp	r3, #9
 8023b74:	d94e      	bls.n	8023c14 <_vfiprintf_r+0x1c4>
 8023b76:	b1b0      	cbz	r0, 8023ba6 <_vfiprintf_r+0x156>
 8023b78:	9207      	str	r2, [sp, #28]
 8023b7a:	e014      	b.n	8023ba6 <_vfiprintf_r+0x156>
 8023b7c:	eba0 0308 	sub.w	r3, r0, r8
 8023b80:	fa09 f303 	lsl.w	r3, r9, r3
 8023b84:	4313      	orrs	r3, r2
 8023b86:	9304      	str	r3, [sp, #16]
 8023b88:	46a2      	mov	sl, r4
 8023b8a:	e7d2      	b.n	8023b32 <_vfiprintf_r+0xe2>
 8023b8c:	9b03      	ldr	r3, [sp, #12]
 8023b8e:	1d19      	adds	r1, r3, #4
 8023b90:	681b      	ldr	r3, [r3, #0]
 8023b92:	9103      	str	r1, [sp, #12]
 8023b94:	2b00      	cmp	r3, #0
 8023b96:	bfbb      	ittet	lt
 8023b98:	425b      	neglt	r3, r3
 8023b9a:	f042 0202 	orrlt.w	r2, r2, #2
 8023b9e:	9307      	strge	r3, [sp, #28]
 8023ba0:	9307      	strlt	r3, [sp, #28]
 8023ba2:	bfb8      	it	lt
 8023ba4:	9204      	strlt	r2, [sp, #16]
 8023ba6:	7823      	ldrb	r3, [r4, #0]
 8023ba8:	2b2e      	cmp	r3, #46	; 0x2e
 8023baa:	d10c      	bne.n	8023bc6 <_vfiprintf_r+0x176>
 8023bac:	7863      	ldrb	r3, [r4, #1]
 8023bae:	2b2a      	cmp	r3, #42	; 0x2a
 8023bb0:	d135      	bne.n	8023c1e <_vfiprintf_r+0x1ce>
 8023bb2:	9b03      	ldr	r3, [sp, #12]
 8023bb4:	1d1a      	adds	r2, r3, #4
 8023bb6:	681b      	ldr	r3, [r3, #0]
 8023bb8:	9203      	str	r2, [sp, #12]
 8023bba:	2b00      	cmp	r3, #0
 8023bbc:	bfb8      	it	lt
 8023bbe:	f04f 33ff 	movlt.w	r3, #4294967295
 8023bc2:	3402      	adds	r4, #2
 8023bc4:	9305      	str	r3, [sp, #20]
 8023bc6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8023cac <_vfiprintf_r+0x25c>
 8023bca:	7821      	ldrb	r1, [r4, #0]
 8023bcc:	2203      	movs	r2, #3
 8023bce:	4650      	mov	r0, sl
 8023bd0:	f7dc fb0e 	bl	80001f0 <memchr>
 8023bd4:	b140      	cbz	r0, 8023be8 <_vfiprintf_r+0x198>
 8023bd6:	2340      	movs	r3, #64	; 0x40
 8023bd8:	eba0 000a 	sub.w	r0, r0, sl
 8023bdc:	fa03 f000 	lsl.w	r0, r3, r0
 8023be0:	9b04      	ldr	r3, [sp, #16]
 8023be2:	4303      	orrs	r3, r0
 8023be4:	3401      	adds	r4, #1
 8023be6:	9304      	str	r3, [sp, #16]
 8023be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023bec:	482c      	ldr	r0, [pc, #176]	; (8023ca0 <_vfiprintf_r+0x250>)
 8023bee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023bf2:	2206      	movs	r2, #6
 8023bf4:	f7dc fafc 	bl	80001f0 <memchr>
 8023bf8:	2800      	cmp	r0, #0
 8023bfa:	d03f      	beq.n	8023c7c <_vfiprintf_r+0x22c>
 8023bfc:	4b29      	ldr	r3, [pc, #164]	; (8023ca4 <_vfiprintf_r+0x254>)
 8023bfe:	bb1b      	cbnz	r3, 8023c48 <_vfiprintf_r+0x1f8>
 8023c00:	9b03      	ldr	r3, [sp, #12]
 8023c02:	3307      	adds	r3, #7
 8023c04:	f023 0307 	bic.w	r3, r3, #7
 8023c08:	3308      	adds	r3, #8
 8023c0a:	9303      	str	r3, [sp, #12]
 8023c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023c0e:	443b      	add	r3, r7
 8023c10:	9309      	str	r3, [sp, #36]	; 0x24
 8023c12:	e767      	b.n	8023ae4 <_vfiprintf_r+0x94>
 8023c14:	fb0c 3202 	mla	r2, ip, r2, r3
 8023c18:	460c      	mov	r4, r1
 8023c1a:	2001      	movs	r0, #1
 8023c1c:	e7a5      	b.n	8023b6a <_vfiprintf_r+0x11a>
 8023c1e:	2300      	movs	r3, #0
 8023c20:	3401      	adds	r4, #1
 8023c22:	9305      	str	r3, [sp, #20]
 8023c24:	4619      	mov	r1, r3
 8023c26:	f04f 0c0a 	mov.w	ip, #10
 8023c2a:	4620      	mov	r0, r4
 8023c2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023c30:	3a30      	subs	r2, #48	; 0x30
 8023c32:	2a09      	cmp	r2, #9
 8023c34:	d903      	bls.n	8023c3e <_vfiprintf_r+0x1ee>
 8023c36:	2b00      	cmp	r3, #0
 8023c38:	d0c5      	beq.n	8023bc6 <_vfiprintf_r+0x176>
 8023c3a:	9105      	str	r1, [sp, #20]
 8023c3c:	e7c3      	b.n	8023bc6 <_vfiprintf_r+0x176>
 8023c3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8023c42:	4604      	mov	r4, r0
 8023c44:	2301      	movs	r3, #1
 8023c46:	e7f0      	b.n	8023c2a <_vfiprintf_r+0x1da>
 8023c48:	ab03      	add	r3, sp, #12
 8023c4a:	9300      	str	r3, [sp, #0]
 8023c4c:	462a      	mov	r2, r5
 8023c4e:	4b16      	ldr	r3, [pc, #88]	; (8023ca8 <_vfiprintf_r+0x258>)
 8023c50:	a904      	add	r1, sp, #16
 8023c52:	4630      	mov	r0, r6
 8023c54:	f3af 8000 	nop.w
 8023c58:	4607      	mov	r7, r0
 8023c5a:	1c78      	adds	r0, r7, #1
 8023c5c:	d1d6      	bne.n	8023c0c <_vfiprintf_r+0x1bc>
 8023c5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023c60:	07d9      	lsls	r1, r3, #31
 8023c62:	d405      	bmi.n	8023c70 <_vfiprintf_r+0x220>
 8023c64:	89ab      	ldrh	r3, [r5, #12]
 8023c66:	059a      	lsls	r2, r3, #22
 8023c68:	d402      	bmi.n	8023c70 <_vfiprintf_r+0x220>
 8023c6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023c6c:	f000 fe46 	bl	80248fc <__retarget_lock_release_recursive>
 8023c70:	89ab      	ldrh	r3, [r5, #12]
 8023c72:	065b      	lsls	r3, r3, #25
 8023c74:	f53f af12 	bmi.w	8023a9c <_vfiprintf_r+0x4c>
 8023c78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023c7a:	e711      	b.n	8023aa0 <_vfiprintf_r+0x50>
 8023c7c:	ab03      	add	r3, sp, #12
 8023c7e:	9300      	str	r3, [sp, #0]
 8023c80:	462a      	mov	r2, r5
 8023c82:	4b09      	ldr	r3, [pc, #36]	; (8023ca8 <_vfiprintf_r+0x258>)
 8023c84:	a904      	add	r1, sp, #16
 8023c86:	4630      	mov	r0, r6
 8023c88:	f000 f880 	bl	8023d8c <_printf_i>
 8023c8c:	e7e4      	b.n	8023c58 <_vfiprintf_r+0x208>
 8023c8e:	bf00      	nop
 8023c90:	08028b74 	.word	0x08028b74
 8023c94:	08028b94 	.word	0x08028b94
 8023c98:	08028b54 	.word	0x08028b54
 8023c9c:	08028a18 	.word	0x08028a18
 8023ca0:	08028a22 	.word	0x08028a22
 8023ca4:	00000000 	.word	0x00000000
 8023ca8:	08023a2b 	.word	0x08023a2b
 8023cac:	08028a1e 	.word	0x08028a1e

08023cb0 <_printf_common>:
 8023cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023cb4:	4616      	mov	r6, r2
 8023cb6:	4699      	mov	r9, r3
 8023cb8:	688a      	ldr	r2, [r1, #8]
 8023cba:	690b      	ldr	r3, [r1, #16]
 8023cbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023cc0:	4293      	cmp	r3, r2
 8023cc2:	bfb8      	it	lt
 8023cc4:	4613      	movlt	r3, r2
 8023cc6:	6033      	str	r3, [r6, #0]
 8023cc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8023ccc:	4607      	mov	r7, r0
 8023cce:	460c      	mov	r4, r1
 8023cd0:	b10a      	cbz	r2, 8023cd6 <_printf_common+0x26>
 8023cd2:	3301      	adds	r3, #1
 8023cd4:	6033      	str	r3, [r6, #0]
 8023cd6:	6823      	ldr	r3, [r4, #0]
 8023cd8:	0699      	lsls	r1, r3, #26
 8023cda:	bf42      	ittt	mi
 8023cdc:	6833      	ldrmi	r3, [r6, #0]
 8023cde:	3302      	addmi	r3, #2
 8023ce0:	6033      	strmi	r3, [r6, #0]
 8023ce2:	6825      	ldr	r5, [r4, #0]
 8023ce4:	f015 0506 	ands.w	r5, r5, #6
 8023ce8:	d106      	bne.n	8023cf8 <_printf_common+0x48>
 8023cea:	f104 0a19 	add.w	sl, r4, #25
 8023cee:	68e3      	ldr	r3, [r4, #12]
 8023cf0:	6832      	ldr	r2, [r6, #0]
 8023cf2:	1a9b      	subs	r3, r3, r2
 8023cf4:	42ab      	cmp	r3, r5
 8023cf6:	dc26      	bgt.n	8023d46 <_printf_common+0x96>
 8023cf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8023cfc:	1e13      	subs	r3, r2, #0
 8023cfe:	6822      	ldr	r2, [r4, #0]
 8023d00:	bf18      	it	ne
 8023d02:	2301      	movne	r3, #1
 8023d04:	0692      	lsls	r2, r2, #26
 8023d06:	d42b      	bmi.n	8023d60 <_printf_common+0xb0>
 8023d08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023d0c:	4649      	mov	r1, r9
 8023d0e:	4638      	mov	r0, r7
 8023d10:	47c0      	blx	r8
 8023d12:	3001      	adds	r0, #1
 8023d14:	d01e      	beq.n	8023d54 <_printf_common+0xa4>
 8023d16:	6823      	ldr	r3, [r4, #0]
 8023d18:	68e5      	ldr	r5, [r4, #12]
 8023d1a:	6832      	ldr	r2, [r6, #0]
 8023d1c:	f003 0306 	and.w	r3, r3, #6
 8023d20:	2b04      	cmp	r3, #4
 8023d22:	bf08      	it	eq
 8023d24:	1aad      	subeq	r5, r5, r2
 8023d26:	68a3      	ldr	r3, [r4, #8]
 8023d28:	6922      	ldr	r2, [r4, #16]
 8023d2a:	bf0c      	ite	eq
 8023d2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023d30:	2500      	movne	r5, #0
 8023d32:	4293      	cmp	r3, r2
 8023d34:	bfc4      	itt	gt
 8023d36:	1a9b      	subgt	r3, r3, r2
 8023d38:	18ed      	addgt	r5, r5, r3
 8023d3a:	2600      	movs	r6, #0
 8023d3c:	341a      	adds	r4, #26
 8023d3e:	42b5      	cmp	r5, r6
 8023d40:	d11a      	bne.n	8023d78 <_printf_common+0xc8>
 8023d42:	2000      	movs	r0, #0
 8023d44:	e008      	b.n	8023d58 <_printf_common+0xa8>
 8023d46:	2301      	movs	r3, #1
 8023d48:	4652      	mov	r2, sl
 8023d4a:	4649      	mov	r1, r9
 8023d4c:	4638      	mov	r0, r7
 8023d4e:	47c0      	blx	r8
 8023d50:	3001      	adds	r0, #1
 8023d52:	d103      	bne.n	8023d5c <_printf_common+0xac>
 8023d54:	f04f 30ff 	mov.w	r0, #4294967295
 8023d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023d5c:	3501      	adds	r5, #1
 8023d5e:	e7c6      	b.n	8023cee <_printf_common+0x3e>
 8023d60:	18e1      	adds	r1, r4, r3
 8023d62:	1c5a      	adds	r2, r3, #1
 8023d64:	2030      	movs	r0, #48	; 0x30
 8023d66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8023d6a:	4422      	add	r2, r4
 8023d6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8023d70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8023d74:	3302      	adds	r3, #2
 8023d76:	e7c7      	b.n	8023d08 <_printf_common+0x58>
 8023d78:	2301      	movs	r3, #1
 8023d7a:	4622      	mov	r2, r4
 8023d7c:	4649      	mov	r1, r9
 8023d7e:	4638      	mov	r0, r7
 8023d80:	47c0      	blx	r8
 8023d82:	3001      	adds	r0, #1
 8023d84:	d0e6      	beq.n	8023d54 <_printf_common+0xa4>
 8023d86:	3601      	adds	r6, #1
 8023d88:	e7d9      	b.n	8023d3e <_printf_common+0x8e>
	...

08023d8c <_printf_i>:
 8023d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023d90:	460c      	mov	r4, r1
 8023d92:	4691      	mov	r9, r2
 8023d94:	7e27      	ldrb	r7, [r4, #24]
 8023d96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023d98:	2f78      	cmp	r7, #120	; 0x78
 8023d9a:	4680      	mov	r8, r0
 8023d9c:	469a      	mov	sl, r3
 8023d9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023da2:	d807      	bhi.n	8023db4 <_printf_i+0x28>
 8023da4:	2f62      	cmp	r7, #98	; 0x62
 8023da6:	d80a      	bhi.n	8023dbe <_printf_i+0x32>
 8023da8:	2f00      	cmp	r7, #0
 8023daa:	f000 80d8 	beq.w	8023f5e <_printf_i+0x1d2>
 8023dae:	2f58      	cmp	r7, #88	; 0x58
 8023db0:	f000 80a3 	beq.w	8023efa <_printf_i+0x16e>
 8023db4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8023db8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8023dbc:	e03a      	b.n	8023e34 <_printf_i+0xa8>
 8023dbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8023dc2:	2b15      	cmp	r3, #21
 8023dc4:	d8f6      	bhi.n	8023db4 <_printf_i+0x28>
 8023dc6:	a001      	add	r0, pc, #4	; (adr r0, 8023dcc <_printf_i+0x40>)
 8023dc8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8023dcc:	08023e25 	.word	0x08023e25
 8023dd0:	08023e39 	.word	0x08023e39
 8023dd4:	08023db5 	.word	0x08023db5
 8023dd8:	08023db5 	.word	0x08023db5
 8023ddc:	08023db5 	.word	0x08023db5
 8023de0:	08023db5 	.word	0x08023db5
 8023de4:	08023e39 	.word	0x08023e39
 8023de8:	08023db5 	.word	0x08023db5
 8023dec:	08023db5 	.word	0x08023db5
 8023df0:	08023db5 	.word	0x08023db5
 8023df4:	08023db5 	.word	0x08023db5
 8023df8:	08023f45 	.word	0x08023f45
 8023dfc:	08023e69 	.word	0x08023e69
 8023e00:	08023f27 	.word	0x08023f27
 8023e04:	08023db5 	.word	0x08023db5
 8023e08:	08023db5 	.word	0x08023db5
 8023e0c:	08023f67 	.word	0x08023f67
 8023e10:	08023db5 	.word	0x08023db5
 8023e14:	08023e69 	.word	0x08023e69
 8023e18:	08023db5 	.word	0x08023db5
 8023e1c:	08023db5 	.word	0x08023db5
 8023e20:	08023f2f 	.word	0x08023f2f
 8023e24:	680b      	ldr	r3, [r1, #0]
 8023e26:	1d1a      	adds	r2, r3, #4
 8023e28:	681b      	ldr	r3, [r3, #0]
 8023e2a:	600a      	str	r2, [r1, #0]
 8023e2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8023e30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023e34:	2301      	movs	r3, #1
 8023e36:	e0a3      	b.n	8023f80 <_printf_i+0x1f4>
 8023e38:	6825      	ldr	r5, [r4, #0]
 8023e3a:	6808      	ldr	r0, [r1, #0]
 8023e3c:	062e      	lsls	r6, r5, #24
 8023e3e:	f100 0304 	add.w	r3, r0, #4
 8023e42:	d50a      	bpl.n	8023e5a <_printf_i+0xce>
 8023e44:	6805      	ldr	r5, [r0, #0]
 8023e46:	600b      	str	r3, [r1, #0]
 8023e48:	2d00      	cmp	r5, #0
 8023e4a:	da03      	bge.n	8023e54 <_printf_i+0xc8>
 8023e4c:	232d      	movs	r3, #45	; 0x2d
 8023e4e:	426d      	negs	r5, r5
 8023e50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023e54:	485e      	ldr	r0, [pc, #376]	; (8023fd0 <_printf_i+0x244>)
 8023e56:	230a      	movs	r3, #10
 8023e58:	e019      	b.n	8023e8e <_printf_i+0x102>
 8023e5a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8023e5e:	6805      	ldr	r5, [r0, #0]
 8023e60:	600b      	str	r3, [r1, #0]
 8023e62:	bf18      	it	ne
 8023e64:	b22d      	sxthne	r5, r5
 8023e66:	e7ef      	b.n	8023e48 <_printf_i+0xbc>
 8023e68:	680b      	ldr	r3, [r1, #0]
 8023e6a:	6825      	ldr	r5, [r4, #0]
 8023e6c:	1d18      	adds	r0, r3, #4
 8023e6e:	6008      	str	r0, [r1, #0]
 8023e70:	0628      	lsls	r0, r5, #24
 8023e72:	d501      	bpl.n	8023e78 <_printf_i+0xec>
 8023e74:	681d      	ldr	r5, [r3, #0]
 8023e76:	e002      	b.n	8023e7e <_printf_i+0xf2>
 8023e78:	0669      	lsls	r1, r5, #25
 8023e7a:	d5fb      	bpl.n	8023e74 <_printf_i+0xe8>
 8023e7c:	881d      	ldrh	r5, [r3, #0]
 8023e7e:	4854      	ldr	r0, [pc, #336]	; (8023fd0 <_printf_i+0x244>)
 8023e80:	2f6f      	cmp	r7, #111	; 0x6f
 8023e82:	bf0c      	ite	eq
 8023e84:	2308      	moveq	r3, #8
 8023e86:	230a      	movne	r3, #10
 8023e88:	2100      	movs	r1, #0
 8023e8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8023e8e:	6866      	ldr	r6, [r4, #4]
 8023e90:	60a6      	str	r6, [r4, #8]
 8023e92:	2e00      	cmp	r6, #0
 8023e94:	bfa2      	ittt	ge
 8023e96:	6821      	ldrge	r1, [r4, #0]
 8023e98:	f021 0104 	bicge.w	r1, r1, #4
 8023e9c:	6021      	strge	r1, [r4, #0]
 8023e9e:	b90d      	cbnz	r5, 8023ea4 <_printf_i+0x118>
 8023ea0:	2e00      	cmp	r6, #0
 8023ea2:	d04d      	beq.n	8023f40 <_printf_i+0x1b4>
 8023ea4:	4616      	mov	r6, r2
 8023ea6:	fbb5 f1f3 	udiv	r1, r5, r3
 8023eaa:	fb03 5711 	mls	r7, r3, r1, r5
 8023eae:	5dc7      	ldrb	r7, [r0, r7]
 8023eb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8023eb4:	462f      	mov	r7, r5
 8023eb6:	42bb      	cmp	r3, r7
 8023eb8:	460d      	mov	r5, r1
 8023eba:	d9f4      	bls.n	8023ea6 <_printf_i+0x11a>
 8023ebc:	2b08      	cmp	r3, #8
 8023ebe:	d10b      	bne.n	8023ed8 <_printf_i+0x14c>
 8023ec0:	6823      	ldr	r3, [r4, #0]
 8023ec2:	07df      	lsls	r7, r3, #31
 8023ec4:	d508      	bpl.n	8023ed8 <_printf_i+0x14c>
 8023ec6:	6923      	ldr	r3, [r4, #16]
 8023ec8:	6861      	ldr	r1, [r4, #4]
 8023eca:	4299      	cmp	r1, r3
 8023ecc:	bfde      	ittt	le
 8023ece:	2330      	movle	r3, #48	; 0x30
 8023ed0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023ed4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8023ed8:	1b92      	subs	r2, r2, r6
 8023eda:	6122      	str	r2, [r4, #16]
 8023edc:	f8cd a000 	str.w	sl, [sp]
 8023ee0:	464b      	mov	r3, r9
 8023ee2:	aa03      	add	r2, sp, #12
 8023ee4:	4621      	mov	r1, r4
 8023ee6:	4640      	mov	r0, r8
 8023ee8:	f7ff fee2 	bl	8023cb0 <_printf_common>
 8023eec:	3001      	adds	r0, #1
 8023eee:	d14c      	bne.n	8023f8a <_printf_i+0x1fe>
 8023ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8023ef4:	b004      	add	sp, #16
 8023ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023efa:	4835      	ldr	r0, [pc, #212]	; (8023fd0 <_printf_i+0x244>)
 8023efc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8023f00:	6823      	ldr	r3, [r4, #0]
 8023f02:	680e      	ldr	r6, [r1, #0]
 8023f04:	061f      	lsls	r7, r3, #24
 8023f06:	f856 5b04 	ldr.w	r5, [r6], #4
 8023f0a:	600e      	str	r6, [r1, #0]
 8023f0c:	d514      	bpl.n	8023f38 <_printf_i+0x1ac>
 8023f0e:	07d9      	lsls	r1, r3, #31
 8023f10:	bf44      	itt	mi
 8023f12:	f043 0320 	orrmi.w	r3, r3, #32
 8023f16:	6023      	strmi	r3, [r4, #0]
 8023f18:	b91d      	cbnz	r5, 8023f22 <_printf_i+0x196>
 8023f1a:	6823      	ldr	r3, [r4, #0]
 8023f1c:	f023 0320 	bic.w	r3, r3, #32
 8023f20:	6023      	str	r3, [r4, #0]
 8023f22:	2310      	movs	r3, #16
 8023f24:	e7b0      	b.n	8023e88 <_printf_i+0xfc>
 8023f26:	6823      	ldr	r3, [r4, #0]
 8023f28:	f043 0320 	orr.w	r3, r3, #32
 8023f2c:	6023      	str	r3, [r4, #0]
 8023f2e:	2378      	movs	r3, #120	; 0x78
 8023f30:	4828      	ldr	r0, [pc, #160]	; (8023fd4 <_printf_i+0x248>)
 8023f32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8023f36:	e7e3      	b.n	8023f00 <_printf_i+0x174>
 8023f38:	065e      	lsls	r6, r3, #25
 8023f3a:	bf48      	it	mi
 8023f3c:	b2ad      	uxthmi	r5, r5
 8023f3e:	e7e6      	b.n	8023f0e <_printf_i+0x182>
 8023f40:	4616      	mov	r6, r2
 8023f42:	e7bb      	b.n	8023ebc <_printf_i+0x130>
 8023f44:	680b      	ldr	r3, [r1, #0]
 8023f46:	6826      	ldr	r6, [r4, #0]
 8023f48:	6960      	ldr	r0, [r4, #20]
 8023f4a:	1d1d      	adds	r5, r3, #4
 8023f4c:	600d      	str	r5, [r1, #0]
 8023f4e:	0635      	lsls	r5, r6, #24
 8023f50:	681b      	ldr	r3, [r3, #0]
 8023f52:	d501      	bpl.n	8023f58 <_printf_i+0x1cc>
 8023f54:	6018      	str	r0, [r3, #0]
 8023f56:	e002      	b.n	8023f5e <_printf_i+0x1d2>
 8023f58:	0671      	lsls	r1, r6, #25
 8023f5a:	d5fb      	bpl.n	8023f54 <_printf_i+0x1c8>
 8023f5c:	8018      	strh	r0, [r3, #0]
 8023f5e:	2300      	movs	r3, #0
 8023f60:	6123      	str	r3, [r4, #16]
 8023f62:	4616      	mov	r6, r2
 8023f64:	e7ba      	b.n	8023edc <_printf_i+0x150>
 8023f66:	680b      	ldr	r3, [r1, #0]
 8023f68:	1d1a      	adds	r2, r3, #4
 8023f6a:	600a      	str	r2, [r1, #0]
 8023f6c:	681e      	ldr	r6, [r3, #0]
 8023f6e:	6862      	ldr	r2, [r4, #4]
 8023f70:	2100      	movs	r1, #0
 8023f72:	4630      	mov	r0, r6
 8023f74:	f7dc f93c 	bl	80001f0 <memchr>
 8023f78:	b108      	cbz	r0, 8023f7e <_printf_i+0x1f2>
 8023f7a:	1b80      	subs	r0, r0, r6
 8023f7c:	6060      	str	r0, [r4, #4]
 8023f7e:	6863      	ldr	r3, [r4, #4]
 8023f80:	6123      	str	r3, [r4, #16]
 8023f82:	2300      	movs	r3, #0
 8023f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023f88:	e7a8      	b.n	8023edc <_printf_i+0x150>
 8023f8a:	6923      	ldr	r3, [r4, #16]
 8023f8c:	4632      	mov	r2, r6
 8023f8e:	4649      	mov	r1, r9
 8023f90:	4640      	mov	r0, r8
 8023f92:	47d0      	blx	sl
 8023f94:	3001      	adds	r0, #1
 8023f96:	d0ab      	beq.n	8023ef0 <_printf_i+0x164>
 8023f98:	6823      	ldr	r3, [r4, #0]
 8023f9a:	079b      	lsls	r3, r3, #30
 8023f9c:	d413      	bmi.n	8023fc6 <_printf_i+0x23a>
 8023f9e:	68e0      	ldr	r0, [r4, #12]
 8023fa0:	9b03      	ldr	r3, [sp, #12]
 8023fa2:	4298      	cmp	r0, r3
 8023fa4:	bfb8      	it	lt
 8023fa6:	4618      	movlt	r0, r3
 8023fa8:	e7a4      	b.n	8023ef4 <_printf_i+0x168>
 8023faa:	2301      	movs	r3, #1
 8023fac:	4632      	mov	r2, r6
 8023fae:	4649      	mov	r1, r9
 8023fb0:	4640      	mov	r0, r8
 8023fb2:	47d0      	blx	sl
 8023fb4:	3001      	adds	r0, #1
 8023fb6:	d09b      	beq.n	8023ef0 <_printf_i+0x164>
 8023fb8:	3501      	adds	r5, #1
 8023fba:	68e3      	ldr	r3, [r4, #12]
 8023fbc:	9903      	ldr	r1, [sp, #12]
 8023fbe:	1a5b      	subs	r3, r3, r1
 8023fc0:	42ab      	cmp	r3, r5
 8023fc2:	dcf2      	bgt.n	8023faa <_printf_i+0x21e>
 8023fc4:	e7eb      	b.n	8023f9e <_printf_i+0x212>
 8023fc6:	2500      	movs	r5, #0
 8023fc8:	f104 0619 	add.w	r6, r4, #25
 8023fcc:	e7f5      	b.n	8023fba <_printf_i+0x22e>
 8023fce:	bf00      	nop
 8023fd0:	08028a29 	.word	0x08028a29
 8023fd4:	08028a3a 	.word	0x08028a3a

08023fd8 <_sbrk_r>:
 8023fd8:	b538      	push	{r3, r4, r5, lr}
 8023fda:	4d06      	ldr	r5, [pc, #24]	; (8023ff4 <_sbrk_r+0x1c>)
 8023fdc:	2300      	movs	r3, #0
 8023fde:	4604      	mov	r4, r0
 8023fe0:	4608      	mov	r0, r1
 8023fe2:	602b      	str	r3, [r5, #0]
 8023fe4:	f7de f80a 	bl	8001ffc <_sbrk>
 8023fe8:	1c43      	adds	r3, r0, #1
 8023fea:	d102      	bne.n	8023ff2 <_sbrk_r+0x1a>
 8023fec:	682b      	ldr	r3, [r5, #0]
 8023fee:	b103      	cbz	r3, 8023ff2 <_sbrk_r+0x1a>
 8023ff0:	6023      	str	r3, [r4, #0]
 8023ff2:	bd38      	pop	{r3, r4, r5, pc}
 8023ff4:	2000afb8 	.word	0x2000afb8

08023ff8 <_raise_r>:
 8023ff8:	291f      	cmp	r1, #31
 8023ffa:	b538      	push	{r3, r4, r5, lr}
 8023ffc:	4604      	mov	r4, r0
 8023ffe:	460d      	mov	r5, r1
 8024000:	d904      	bls.n	802400c <_raise_r+0x14>
 8024002:	2316      	movs	r3, #22
 8024004:	6003      	str	r3, [r0, #0]
 8024006:	f04f 30ff 	mov.w	r0, #4294967295
 802400a:	bd38      	pop	{r3, r4, r5, pc}
 802400c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802400e:	b112      	cbz	r2, 8024016 <_raise_r+0x1e>
 8024010:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024014:	b94b      	cbnz	r3, 802402a <_raise_r+0x32>
 8024016:	4620      	mov	r0, r4
 8024018:	f000 f830 	bl	802407c <_getpid_r>
 802401c:	462a      	mov	r2, r5
 802401e:	4601      	mov	r1, r0
 8024020:	4620      	mov	r0, r4
 8024022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024026:	f000 b817 	b.w	8024058 <_kill_r>
 802402a:	2b01      	cmp	r3, #1
 802402c:	d00a      	beq.n	8024044 <_raise_r+0x4c>
 802402e:	1c59      	adds	r1, r3, #1
 8024030:	d103      	bne.n	802403a <_raise_r+0x42>
 8024032:	2316      	movs	r3, #22
 8024034:	6003      	str	r3, [r0, #0]
 8024036:	2001      	movs	r0, #1
 8024038:	e7e7      	b.n	802400a <_raise_r+0x12>
 802403a:	2400      	movs	r4, #0
 802403c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8024040:	4628      	mov	r0, r5
 8024042:	4798      	blx	r3
 8024044:	2000      	movs	r0, #0
 8024046:	e7e0      	b.n	802400a <_raise_r+0x12>

08024048 <raise>:
 8024048:	4b02      	ldr	r3, [pc, #8]	; (8024054 <raise+0xc>)
 802404a:	4601      	mov	r1, r0
 802404c:	6818      	ldr	r0, [r3, #0]
 802404e:	f7ff bfd3 	b.w	8023ff8 <_raise_r>
 8024052:	bf00      	nop
 8024054:	200000f8 	.word	0x200000f8

08024058 <_kill_r>:
 8024058:	b538      	push	{r3, r4, r5, lr}
 802405a:	4d07      	ldr	r5, [pc, #28]	; (8024078 <_kill_r+0x20>)
 802405c:	2300      	movs	r3, #0
 802405e:	4604      	mov	r4, r0
 8024060:	4608      	mov	r0, r1
 8024062:	4611      	mov	r1, r2
 8024064:	602b      	str	r3, [r5, #0]
 8024066:	f7dd ff41 	bl	8001eec <_kill>
 802406a:	1c43      	adds	r3, r0, #1
 802406c:	d102      	bne.n	8024074 <_kill_r+0x1c>
 802406e:	682b      	ldr	r3, [r5, #0]
 8024070:	b103      	cbz	r3, 8024074 <_kill_r+0x1c>
 8024072:	6023      	str	r3, [r4, #0]
 8024074:	bd38      	pop	{r3, r4, r5, pc}
 8024076:	bf00      	nop
 8024078:	2000afb8 	.word	0x2000afb8

0802407c <_getpid_r>:
 802407c:	f7dd bf2e 	b.w	8001edc <_getpid>

08024080 <sniprintf>:
 8024080:	b40c      	push	{r2, r3}
 8024082:	b530      	push	{r4, r5, lr}
 8024084:	4b17      	ldr	r3, [pc, #92]	; (80240e4 <sniprintf+0x64>)
 8024086:	1e0c      	subs	r4, r1, #0
 8024088:	681d      	ldr	r5, [r3, #0]
 802408a:	b09d      	sub	sp, #116	; 0x74
 802408c:	da08      	bge.n	80240a0 <sniprintf+0x20>
 802408e:	238b      	movs	r3, #139	; 0x8b
 8024090:	602b      	str	r3, [r5, #0]
 8024092:	f04f 30ff 	mov.w	r0, #4294967295
 8024096:	b01d      	add	sp, #116	; 0x74
 8024098:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802409c:	b002      	add	sp, #8
 802409e:	4770      	bx	lr
 80240a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80240a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80240a8:	bf14      	ite	ne
 80240aa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80240ae:	4623      	moveq	r3, r4
 80240b0:	9304      	str	r3, [sp, #16]
 80240b2:	9307      	str	r3, [sp, #28]
 80240b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80240b8:	9002      	str	r0, [sp, #8]
 80240ba:	9006      	str	r0, [sp, #24]
 80240bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80240c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80240c2:	ab21      	add	r3, sp, #132	; 0x84
 80240c4:	a902      	add	r1, sp, #8
 80240c6:	4628      	mov	r0, r5
 80240c8:	9301      	str	r3, [sp, #4]
 80240ca:	f000 fd1d 	bl	8024b08 <_svfiprintf_r>
 80240ce:	1c43      	adds	r3, r0, #1
 80240d0:	bfbc      	itt	lt
 80240d2:	238b      	movlt	r3, #139	; 0x8b
 80240d4:	602b      	strlt	r3, [r5, #0]
 80240d6:	2c00      	cmp	r4, #0
 80240d8:	d0dd      	beq.n	8024096 <sniprintf+0x16>
 80240da:	9b02      	ldr	r3, [sp, #8]
 80240dc:	2200      	movs	r2, #0
 80240de:	701a      	strb	r2, [r3, #0]
 80240e0:	e7d9      	b.n	8024096 <sniprintf+0x16>
 80240e2:	bf00      	nop
 80240e4:	200000f8 	.word	0x200000f8

080240e8 <__sread>:
 80240e8:	b510      	push	{r4, lr}
 80240ea:	460c      	mov	r4, r1
 80240ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80240f0:	f000 fe0a 	bl	8024d08 <_read_r>
 80240f4:	2800      	cmp	r0, #0
 80240f6:	bfab      	itete	ge
 80240f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80240fa:	89a3      	ldrhlt	r3, [r4, #12]
 80240fc:	181b      	addge	r3, r3, r0
 80240fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8024102:	bfac      	ite	ge
 8024104:	6563      	strge	r3, [r4, #84]	; 0x54
 8024106:	81a3      	strhlt	r3, [r4, #12]
 8024108:	bd10      	pop	{r4, pc}

0802410a <__swrite>:
 802410a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802410e:	461f      	mov	r7, r3
 8024110:	898b      	ldrh	r3, [r1, #12]
 8024112:	05db      	lsls	r3, r3, #23
 8024114:	4605      	mov	r5, r0
 8024116:	460c      	mov	r4, r1
 8024118:	4616      	mov	r6, r2
 802411a:	d505      	bpl.n	8024128 <__swrite+0x1e>
 802411c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024120:	2302      	movs	r3, #2
 8024122:	2200      	movs	r2, #0
 8024124:	f000 fbec 	bl	8024900 <_lseek_r>
 8024128:	89a3      	ldrh	r3, [r4, #12]
 802412a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802412e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024132:	81a3      	strh	r3, [r4, #12]
 8024134:	4632      	mov	r2, r6
 8024136:	463b      	mov	r3, r7
 8024138:	4628      	mov	r0, r5
 802413a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802413e:	f000 b931 	b.w	80243a4 <_write_r>

08024142 <__sseek>:
 8024142:	b510      	push	{r4, lr}
 8024144:	460c      	mov	r4, r1
 8024146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802414a:	f000 fbd9 	bl	8024900 <_lseek_r>
 802414e:	1c43      	adds	r3, r0, #1
 8024150:	89a3      	ldrh	r3, [r4, #12]
 8024152:	bf15      	itete	ne
 8024154:	6560      	strne	r0, [r4, #84]	; 0x54
 8024156:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802415a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802415e:	81a3      	strheq	r3, [r4, #12]
 8024160:	bf18      	it	ne
 8024162:	81a3      	strhne	r3, [r4, #12]
 8024164:	bd10      	pop	{r4, pc}

08024166 <__sclose>:
 8024166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802416a:	f000 b9fd 	b.w	8024568 <_close_r>
	...

08024170 <_strtol_l.isra.0>:
 8024170:	2b01      	cmp	r3, #1
 8024172:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024176:	d001      	beq.n	802417c <_strtol_l.isra.0+0xc>
 8024178:	2b24      	cmp	r3, #36	; 0x24
 802417a:	d906      	bls.n	802418a <_strtol_l.isra.0+0x1a>
 802417c:	f7ff fb18 	bl	80237b0 <__errno>
 8024180:	2316      	movs	r3, #22
 8024182:	6003      	str	r3, [r0, #0]
 8024184:	2000      	movs	r0, #0
 8024186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802418a:	4f3a      	ldr	r7, [pc, #232]	; (8024274 <_strtol_l.isra.0+0x104>)
 802418c:	468e      	mov	lr, r1
 802418e:	4676      	mov	r6, lr
 8024190:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8024194:	5de5      	ldrb	r5, [r4, r7]
 8024196:	f015 0508 	ands.w	r5, r5, #8
 802419a:	d1f8      	bne.n	802418e <_strtol_l.isra.0+0x1e>
 802419c:	2c2d      	cmp	r4, #45	; 0x2d
 802419e:	d134      	bne.n	802420a <_strtol_l.isra.0+0x9a>
 80241a0:	f89e 4000 	ldrb.w	r4, [lr]
 80241a4:	f04f 0801 	mov.w	r8, #1
 80241a8:	f106 0e02 	add.w	lr, r6, #2
 80241ac:	2b00      	cmp	r3, #0
 80241ae:	d05c      	beq.n	802426a <_strtol_l.isra.0+0xfa>
 80241b0:	2b10      	cmp	r3, #16
 80241b2:	d10c      	bne.n	80241ce <_strtol_l.isra.0+0x5e>
 80241b4:	2c30      	cmp	r4, #48	; 0x30
 80241b6:	d10a      	bne.n	80241ce <_strtol_l.isra.0+0x5e>
 80241b8:	f89e 4000 	ldrb.w	r4, [lr]
 80241bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80241c0:	2c58      	cmp	r4, #88	; 0x58
 80241c2:	d14d      	bne.n	8024260 <_strtol_l.isra.0+0xf0>
 80241c4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80241c8:	2310      	movs	r3, #16
 80241ca:	f10e 0e02 	add.w	lr, lr, #2
 80241ce:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80241d2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80241d6:	2600      	movs	r6, #0
 80241d8:	fbbc f9f3 	udiv	r9, ip, r3
 80241dc:	4635      	mov	r5, r6
 80241de:	fb03 ca19 	mls	sl, r3, r9, ip
 80241e2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80241e6:	2f09      	cmp	r7, #9
 80241e8:	d818      	bhi.n	802421c <_strtol_l.isra.0+0xac>
 80241ea:	463c      	mov	r4, r7
 80241ec:	42a3      	cmp	r3, r4
 80241ee:	dd24      	ble.n	802423a <_strtol_l.isra.0+0xca>
 80241f0:	2e00      	cmp	r6, #0
 80241f2:	db1f      	blt.n	8024234 <_strtol_l.isra.0+0xc4>
 80241f4:	45a9      	cmp	r9, r5
 80241f6:	d31d      	bcc.n	8024234 <_strtol_l.isra.0+0xc4>
 80241f8:	d101      	bne.n	80241fe <_strtol_l.isra.0+0x8e>
 80241fa:	45a2      	cmp	sl, r4
 80241fc:	db1a      	blt.n	8024234 <_strtol_l.isra.0+0xc4>
 80241fe:	fb05 4503 	mla	r5, r5, r3, r4
 8024202:	2601      	movs	r6, #1
 8024204:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8024208:	e7eb      	b.n	80241e2 <_strtol_l.isra.0+0x72>
 802420a:	2c2b      	cmp	r4, #43	; 0x2b
 802420c:	bf08      	it	eq
 802420e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8024212:	46a8      	mov	r8, r5
 8024214:	bf08      	it	eq
 8024216:	f106 0e02 	addeq.w	lr, r6, #2
 802421a:	e7c7      	b.n	80241ac <_strtol_l.isra.0+0x3c>
 802421c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8024220:	2f19      	cmp	r7, #25
 8024222:	d801      	bhi.n	8024228 <_strtol_l.isra.0+0xb8>
 8024224:	3c37      	subs	r4, #55	; 0x37
 8024226:	e7e1      	b.n	80241ec <_strtol_l.isra.0+0x7c>
 8024228:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 802422c:	2f19      	cmp	r7, #25
 802422e:	d804      	bhi.n	802423a <_strtol_l.isra.0+0xca>
 8024230:	3c57      	subs	r4, #87	; 0x57
 8024232:	e7db      	b.n	80241ec <_strtol_l.isra.0+0x7c>
 8024234:	f04f 36ff 	mov.w	r6, #4294967295
 8024238:	e7e4      	b.n	8024204 <_strtol_l.isra.0+0x94>
 802423a:	2e00      	cmp	r6, #0
 802423c:	da05      	bge.n	802424a <_strtol_l.isra.0+0xda>
 802423e:	2322      	movs	r3, #34	; 0x22
 8024240:	6003      	str	r3, [r0, #0]
 8024242:	4665      	mov	r5, ip
 8024244:	b942      	cbnz	r2, 8024258 <_strtol_l.isra.0+0xe8>
 8024246:	4628      	mov	r0, r5
 8024248:	e79d      	b.n	8024186 <_strtol_l.isra.0+0x16>
 802424a:	f1b8 0f00 	cmp.w	r8, #0
 802424e:	d000      	beq.n	8024252 <_strtol_l.isra.0+0xe2>
 8024250:	426d      	negs	r5, r5
 8024252:	2a00      	cmp	r2, #0
 8024254:	d0f7      	beq.n	8024246 <_strtol_l.isra.0+0xd6>
 8024256:	b10e      	cbz	r6, 802425c <_strtol_l.isra.0+0xec>
 8024258:	f10e 31ff 	add.w	r1, lr, #4294967295
 802425c:	6011      	str	r1, [r2, #0]
 802425e:	e7f2      	b.n	8024246 <_strtol_l.isra.0+0xd6>
 8024260:	2430      	movs	r4, #48	; 0x30
 8024262:	2b00      	cmp	r3, #0
 8024264:	d1b3      	bne.n	80241ce <_strtol_l.isra.0+0x5e>
 8024266:	2308      	movs	r3, #8
 8024268:	e7b1      	b.n	80241ce <_strtol_l.isra.0+0x5e>
 802426a:	2c30      	cmp	r4, #48	; 0x30
 802426c:	d0a4      	beq.n	80241b8 <_strtol_l.isra.0+0x48>
 802426e:	230a      	movs	r3, #10
 8024270:	e7ad      	b.n	80241ce <_strtol_l.isra.0+0x5e>
 8024272:	bf00      	nop
 8024274:	08028a51 	.word	0x08028a51

08024278 <strtol>:
 8024278:	4613      	mov	r3, r2
 802427a:	460a      	mov	r2, r1
 802427c:	4601      	mov	r1, r0
 802427e:	4802      	ldr	r0, [pc, #8]	; (8024288 <strtol+0x10>)
 8024280:	6800      	ldr	r0, [r0, #0]
 8024282:	f7ff bf75 	b.w	8024170 <_strtol_l.isra.0>
 8024286:	bf00      	nop
 8024288:	200000f8 	.word	0x200000f8

0802428c <_vsniprintf_r>:
 802428c:	b530      	push	{r4, r5, lr}
 802428e:	1e14      	subs	r4, r2, #0
 8024290:	4605      	mov	r5, r0
 8024292:	b09b      	sub	sp, #108	; 0x6c
 8024294:	4618      	mov	r0, r3
 8024296:	da05      	bge.n	80242a4 <_vsniprintf_r+0x18>
 8024298:	238b      	movs	r3, #139	; 0x8b
 802429a:	602b      	str	r3, [r5, #0]
 802429c:	f04f 30ff 	mov.w	r0, #4294967295
 80242a0:	b01b      	add	sp, #108	; 0x6c
 80242a2:	bd30      	pop	{r4, r5, pc}
 80242a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80242a8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80242ac:	bf14      	ite	ne
 80242ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80242b2:	4623      	moveq	r3, r4
 80242b4:	9302      	str	r3, [sp, #8]
 80242b6:	9305      	str	r3, [sp, #20]
 80242b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80242bc:	9100      	str	r1, [sp, #0]
 80242be:	9104      	str	r1, [sp, #16]
 80242c0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80242c4:	4602      	mov	r2, r0
 80242c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80242c8:	4669      	mov	r1, sp
 80242ca:	4628      	mov	r0, r5
 80242cc:	f000 fc1c 	bl	8024b08 <_svfiprintf_r>
 80242d0:	1c43      	adds	r3, r0, #1
 80242d2:	bfbc      	itt	lt
 80242d4:	238b      	movlt	r3, #139	; 0x8b
 80242d6:	602b      	strlt	r3, [r5, #0]
 80242d8:	2c00      	cmp	r4, #0
 80242da:	d0e1      	beq.n	80242a0 <_vsniprintf_r+0x14>
 80242dc:	9b00      	ldr	r3, [sp, #0]
 80242de:	2200      	movs	r2, #0
 80242e0:	701a      	strb	r2, [r3, #0]
 80242e2:	e7dd      	b.n	80242a0 <_vsniprintf_r+0x14>

080242e4 <vsniprintf>:
 80242e4:	b507      	push	{r0, r1, r2, lr}
 80242e6:	9300      	str	r3, [sp, #0]
 80242e8:	4613      	mov	r3, r2
 80242ea:	460a      	mov	r2, r1
 80242ec:	4601      	mov	r1, r0
 80242ee:	4803      	ldr	r0, [pc, #12]	; (80242fc <vsniprintf+0x18>)
 80242f0:	6800      	ldr	r0, [r0, #0]
 80242f2:	f7ff ffcb 	bl	802428c <_vsniprintf_r>
 80242f6:	b003      	add	sp, #12
 80242f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80242fc:	200000f8 	.word	0x200000f8

08024300 <__swbuf_r>:
 8024300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024302:	460e      	mov	r6, r1
 8024304:	4614      	mov	r4, r2
 8024306:	4605      	mov	r5, r0
 8024308:	b118      	cbz	r0, 8024312 <__swbuf_r+0x12>
 802430a:	6983      	ldr	r3, [r0, #24]
 802430c:	b90b      	cbnz	r3, 8024312 <__swbuf_r+0x12>
 802430e:	f000 fa55 	bl	80247bc <__sinit>
 8024312:	4b21      	ldr	r3, [pc, #132]	; (8024398 <__swbuf_r+0x98>)
 8024314:	429c      	cmp	r4, r3
 8024316:	d12b      	bne.n	8024370 <__swbuf_r+0x70>
 8024318:	686c      	ldr	r4, [r5, #4]
 802431a:	69a3      	ldr	r3, [r4, #24]
 802431c:	60a3      	str	r3, [r4, #8]
 802431e:	89a3      	ldrh	r3, [r4, #12]
 8024320:	071a      	lsls	r2, r3, #28
 8024322:	d52f      	bpl.n	8024384 <__swbuf_r+0x84>
 8024324:	6923      	ldr	r3, [r4, #16]
 8024326:	b36b      	cbz	r3, 8024384 <__swbuf_r+0x84>
 8024328:	6923      	ldr	r3, [r4, #16]
 802432a:	6820      	ldr	r0, [r4, #0]
 802432c:	1ac0      	subs	r0, r0, r3
 802432e:	6963      	ldr	r3, [r4, #20]
 8024330:	b2f6      	uxtb	r6, r6
 8024332:	4283      	cmp	r3, r0
 8024334:	4637      	mov	r7, r6
 8024336:	dc04      	bgt.n	8024342 <__swbuf_r+0x42>
 8024338:	4621      	mov	r1, r4
 802433a:	4628      	mov	r0, r5
 802433c:	f000 f9aa 	bl	8024694 <_fflush_r>
 8024340:	bb30      	cbnz	r0, 8024390 <__swbuf_r+0x90>
 8024342:	68a3      	ldr	r3, [r4, #8]
 8024344:	3b01      	subs	r3, #1
 8024346:	60a3      	str	r3, [r4, #8]
 8024348:	6823      	ldr	r3, [r4, #0]
 802434a:	1c5a      	adds	r2, r3, #1
 802434c:	6022      	str	r2, [r4, #0]
 802434e:	701e      	strb	r6, [r3, #0]
 8024350:	6963      	ldr	r3, [r4, #20]
 8024352:	3001      	adds	r0, #1
 8024354:	4283      	cmp	r3, r0
 8024356:	d004      	beq.n	8024362 <__swbuf_r+0x62>
 8024358:	89a3      	ldrh	r3, [r4, #12]
 802435a:	07db      	lsls	r3, r3, #31
 802435c:	d506      	bpl.n	802436c <__swbuf_r+0x6c>
 802435e:	2e0a      	cmp	r6, #10
 8024360:	d104      	bne.n	802436c <__swbuf_r+0x6c>
 8024362:	4621      	mov	r1, r4
 8024364:	4628      	mov	r0, r5
 8024366:	f000 f995 	bl	8024694 <_fflush_r>
 802436a:	b988      	cbnz	r0, 8024390 <__swbuf_r+0x90>
 802436c:	4638      	mov	r0, r7
 802436e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024370:	4b0a      	ldr	r3, [pc, #40]	; (802439c <__swbuf_r+0x9c>)
 8024372:	429c      	cmp	r4, r3
 8024374:	d101      	bne.n	802437a <__swbuf_r+0x7a>
 8024376:	68ac      	ldr	r4, [r5, #8]
 8024378:	e7cf      	b.n	802431a <__swbuf_r+0x1a>
 802437a:	4b09      	ldr	r3, [pc, #36]	; (80243a0 <__swbuf_r+0xa0>)
 802437c:	429c      	cmp	r4, r3
 802437e:	bf08      	it	eq
 8024380:	68ec      	ldreq	r4, [r5, #12]
 8024382:	e7ca      	b.n	802431a <__swbuf_r+0x1a>
 8024384:	4621      	mov	r1, r4
 8024386:	4628      	mov	r0, r5
 8024388:	f000 f81e 	bl	80243c8 <__swsetup_r>
 802438c:	2800      	cmp	r0, #0
 802438e:	d0cb      	beq.n	8024328 <__swbuf_r+0x28>
 8024390:	f04f 37ff 	mov.w	r7, #4294967295
 8024394:	e7ea      	b.n	802436c <__swbuf_r+0x6c>
 8024396:	bf00      	nop
 8024398:	08028b74 	.word	0x08028b74
 802439c:	08028b94 	.word	0x08028b94
 80243a0:	08028b54 	.word	0x08028b54

080243a4 <_write_r>:
 80243a4:	b538      	push	{r3, r4, r5, lr}
 80243a6:	4d07      	ldr	r5, [pc, #28]	; (80243c4 <_write_r+0x20>)
 80243a8:	4604      	mov	r4, r0
 80243aa:	4608      	mov	r0, r1
 80243ac:	4611      	mov	r1, r2
 80243ae:	2200      	movs	r2, #0
 80243b0:	602a      	str	r2, [r5, #0]
 80243b2:	461a      	mov	r2, r3
 80243b4:	f7dd fdd1 	bl	8001f5a <_write>
 80243b8:	1c43      	adds	r3, r0, #1
 80243ba:	d102      	bne.n	80243c2 <_write_r+0x1e>
 80243bc:	682b      	ldr	r3, [r5, #0]
 80243be:	b103      	cbz	r3, 80243c2 <_write_r+0x1e>
 80243c0:	6023      	str	r3, [r4, #0]
 80243c2:	bd38      	pop	{r3, r4, r5, pc}
 80243c4:	2000afb8 	.word	0x2000afb8

080243c8 <__swsetup_r>:
 80243c8:	4b32      	ldr	r3, [pc, #200]	; (8024494 <__swsetup_r+0xcc>)
 80243ca:	b570      	push	{r4, r5, r6, lr}
 80243cc:	681d      	ldr	r5, [r3, #0]
 80243ce:	4606      	mov	r6, r0
 80243d0:	460c      	mov	r4, r1
 80243d2:	b125      	cbz	r5, 80243de <__swsetup_r+0x16>
 80243d4:	69ab      	ldr	r3, [r5, #24]
 80243d6:	b913      	cbnz	r3, 80243de <__swsetup_r+0x16>
 80243d8:	4628      	mov	r0, r5
 80243da:	f000 f9ef 	bl	80247bc <__sinit>
 80243de:	4b2e      	ldr	r3, [pc, #184]	; (8024498 <__swsetup_r+0xd0>)
 80243e0:	429c      	cmp	r4, r3
 80243e2:	d10f      	bne.n	8024404 <__swsetup_r+0x3c>
 80243e4:	686c      	ldr	r4, [r5, #4]
 80243e6:	89a3      	ldrh	r3, [r4, #12]
 80243e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80243ec:	0719      	lsls	r1, r3, #28
 80243ee:	d42c      	bmi.n	802444a <__swsetup_r+0x82>
 80243f0:	06dd      	lsls	r5, r3, #27
 80243f2:	d411      	bmi.n	8024418 <__swsetup_r+0x50>
 80243f4:	2309      	movs	r3, #9
 80243f6:	6033      	str	r3, [r6, #0]
 80243f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80243fc:	81a3      	strh	r3, [r4, #12]
 80243fe:	f04f 30ff 	mov.w	r0, #4294967295
 8024402:	e03e      	b.n	8024482 <__swsetup_r+0xba>
 8024404:	4b25      	ldr	r3, [pc, #148]	; (802449c <__swsetup_r+0xd4>)
 8024406:	429c      	cmp	r4, r3
 8024408:	d101      	bne.n	802440e <__swsetup_r+0x46>
 802440a:	68ac      	ldr	r4, [r5, #8]
 802440c:	e7eb      	b.n	80243e6 <__swsetup_r+0x1e>
 802440e:	4b24      	ldr	r3, [pc, #144]	; (80244a0 <__swsetup_r+0xd8>)
 8024410:	429c      	cmp	r4, r3
 8024412:	bf08      	it	eq
 8024414:	68ec      	ldreq	r4, [r5, #12]
 8024416:	e7e6      	b.n	80243e6 <__swsetup_r+0x1e>
 8024418:	0758      	lsls	r0, r3, #29
 802441a:	d512      	bpl.n	8024442 <__swsetup_r+0x7a>
 802441c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802441e:	b141      	cbz	r1, 8024432 <__swsetup_r+0x6a>
 8024420:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024424:	4299      	cmp	r1, r3
 8024426:	d002      	beq.n	802442e <__swsetup_r+0x66>
 8024428:	4630      	mov	r0, r6
 802442a:	f7ff fa3d 	bl	80238a8 <_free_r>
 802442e:	2300      	movs	r3, #0
 8024430:	6363      	str	r3, [r4, #52]	; 0x34
 8024432:	89a3      	ldrh	r3, [r4, #12]
 8024434:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8024438:	81a3      	strh	r3, [r4, #12]
 802443a:	2300      	movs	r3, #0
 802443c:	6063      	str	r3, [r4, #4]
 802443e:	6923      	ldr	r3, [r4, #16]
 8024440:	6023      	str	r3, [r4, #0]
 8024442:	89a3      	ldrh	r3, [r4, #12]
 8024444:	f043 0308 	orr.w	r3, r3, #8
 8024448:	81a3      	strh	r3, [r4, #12]
 802444a:	6923      	ldr	r3, [r4, #16]
 802444c:	b94b      	cbnz	r3, 8024462 <__swsetup_r+0x9a>
 802444e:	89a3      	ldrh	r3, [r4, #12]
 8024450:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8024454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024458:	d003      	beq.n	8024462 <__swsetup_r+0x9a>
 802445a:	4621      	mov	r1, r4
 802445c:	4630      	mov	r0, r6
 802445e:	f000 fa85 	bl	802496c <__smakebuf_r>
 8024462:	89a0      	ldrh	r0, [r4, #12]
 8024464:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024468:	f010 0301 	ands.w	r3, r0, #1
 802446c:	d00a      	beq.n	8024484 <__swsetup_r+0xbc>
 802446e:	2300      	movs	r3, #0
 8024470:	60a3      	str	r3, [r4, #8]
 8024472:	6963      	ldr	r3, [r4, #20]
 8024474:	425b      	negs	r3, r3
 8024476:	61a3      	str	r3, [r4, #24]
 8024478:	6923      	ldr	r3, [r4, #16]
 802447a:	b943      	cbnz	r3, 802448e <__swsetup_r+0xc6>
 802447c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8024480:	d1ba      	bne.n	80243f8 <__swsetup_r+0x30>
 8024482:	bd70      	pop	{r4, r5, r6, pc}
 8024484:	0781      	lsls	r1, r0, #30
 8024486:	bf58      	it	pl
 8024488:	6963      	ldrpl	r3, [r4, #20]
 802448a:	60a3      	str	r3, [r4, #8]
 802448c:	e7f4      	b.n	8024478 <__swsetup_r+0xb0>
 802448e:	2000      	movs	r0, #0
 8024490:	e7f7      	b.n	8024482 <__swsetup_r+0xba>
 8024492:	bf00      	nop
 8024494:	200000f8 	.word	0x200000f8
 8024498:	08028b74 	.word	0x08028b74
 802449c:	08028b94 	.word	0x08028b94
 80244a0:	08028b54 	.word	0x08028b54

080244a4 <__register_exitproc>:
 80244a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80244a8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8024564 <__register_exitproc+0xc0>
 80244ac:	4606      	mov	r6, r0
 80244ae:	f8d8 0000 	ldr.w	r0, [r8]
 80244b2:	461f      	mov	r7, r3
 80244b4:	460d      	mov	r5, r1
 80244b6:	4691      	mov	r9, r2
 80244b8:	f000 fa1e 	bl	80248f8 <__retarget_lock_acquire_recursive>
 80244bc:	4b25      	ldr	r3, [pc, #148]	; (8024554 <__register_exitproc+0xb0>)
 80244be:	681c      	ldr	r4, [r3, #0]
 80244c0:	b934      	cbnz	r4, 80244d0 <__register_exitproc+0x2c>
 80244c2:	4c25      	ldr	r4, [pc, #148]	; (8024558 <__register_exitproc+0xb4>)
 80244c4:	601c      	str	r4, [r3, #0]
 80244c6:	4b25      	ldr	r3, [pc, #148]	; (802455c <__register_exitproc+0xb8>)
 80244c8:	b113      	cbz	r3, 80244d0 <__register_exitproc+0x2c>
 80244ca:	681b      	ldr	r3, [r3, #0]
 80244cc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80244d0:	6863      	ldr	r3, [r4, #4]
 80244d2:	2b1f      	cmp	r3, #31
 80244d4:	dd07      	ble.n	80244e6 <__register_exitproc+0x42>
 80244d6:	f8d8 0000 	ldr.w	r0, [r8]
 80244da:	f000 fa0f 	bl	80248fc <__retarget_lock_release_recursive>
 80244de:	f04f 30ff 	mov.w	r0, #4294967295
 80244e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80244e6:	b34e      	cbz	r6, 802453c <__register_exitproc+0x98>
 80244e8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80244ec:	b988      	cbnz	r0, 8024512 <__register_exitproc+0x6e>
 80244ee:	4b1c      	ldr	r3, [pc, #112]	; (8024560 <__register_exitproc+0xbc>)
 80244f0:	b923      	cbnz	r3, 80244fc <__register_exitproc+0x58>
 80244f2:	f8d8 0000 	ldr.w	r0, [r8]
 80244f6:	f000 fa00 	bl	80248fa <__retarget_lock_release>
 80244fa:	e7f0      	b.n	80244de <__register_exitproc+0x3a>
 80244fc:	f44f 7084 	mov.w	r0, #264	; 0x108
 8024500:	f7ff f992 	bl	8023828 <malloc>
 8024504:	2800      	cmp	r0, #0
 8024506:	d0f4      	beq.n	80244f2 <__register_exitproc+0x4e>
 8024508:	2300      	movs	r3, #0
 802450a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802450e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8024512:	6863      	ldr	r3, [r4, #4]
 8024514:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8024518:	2201      	movs	r2, #1
 802451a:	409a      	lsls	r2, r3
 802451c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8024520:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8024524:	4313      	orrs	r3, r2
 8024526:	2e02      	cmp	r6, #2
 8024528:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802452c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8024530:	bf02      	ittt	eq
 8024532:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8024536:	431a      	orreq	r2, r3
 8024538:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 802453c:	6863      	ldr	r3, [r4, #4]
 802453e:	f8d8 0000 	ldr.w	r0, [r8]
 8024542:	1c5a      	adds	r2, r3, #1
 8024544:	3302      	adds	r3, #2
 8024546:	6062      	str	r2, [r4, #4]
 8024548:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802454c:	f000 f9d6 	bl	80248fc <__retarget_lock_release_recursive>
 8024550:	2000      	movs	r0, #0
 8024552:	e7c6      	b.n	80244e2 <__register_exitproc+0x3e>
 8024554:	2000a2d8 	.word	0x2000a2d8
 8024558:	2000a24c 	.word	0x2000a24c
 802455c:	08028a4c 	.word	0x08028a4c
 8024560:	08023829 	.word	0x08023829
 8024564:	2000015c 	.word	0x2000015c

08024568 <_close_r>:
 8024568:	b538      	push	{r3, r4, r5, lr}
 802456a:	4d06      	ldr	r5, [pc, #24]	; (8024584 <_close_r+0x1c>)
 802456c:	2300      	movs	r3, #0
 802456e:	4604      	mov	r4, r0
 8024570:	4608      	mov	r0, r1
 8024572:	602b      	str	r3, [r5, #0]
 8024574:	f7dd fd0d 	bl	8001f92 <_close>
 8024578:	1c43      	adds	r3, r0, #1
 802457a:	d102      	bne.n	8024582 <_close_r+0x1a>
 802457c:	682b      	ldr	r3, [r5, #0]
 802457e:	b103      	cbz	r3, 8024582 <_close_r+0x1a>
 8024580:	6023      	str	r3, [r4, #0]
 8024582:	bd38      	pop	{r3, r4, r5, pc}
 8024584:	2000afb8 	.word	0x2000afb8

08024588 <__sflush_r>:
 8024588:	898a      	ldrh	r2, [r1, #12]
 802458a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802458e:	4605      	mov	r5, r0
 8024590:	0710      	lsls	r0, r2, #28
 8024592:	460c      	mov	r4, r1
 8024594:	d458      	bmi.n	8024648 <__sflush_r+0xc0>
 8024596:	684b      	ldr	r3, [r1, #4]
 8024598:	2b00      	cmp	r3, #0
 802459a:	dc05      	bgt.n	80245a8 <__sflush_r+0x20>
 802459c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802459e:	2b00      	cmp	r3, #0
 80245a0:	dc02      	bgt.n	80245a8 <__sflush_r+0x20>
 80245a2:	2000      	movs	r0, #0
 80245a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80245a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80245aa:	2e00      	cmp	r6, #0
 80245ac:	d0f9      	beq.n	80245a2 <__sflush_r+0x1a>
 80245ae:	2300      	movs	r3, #0
 80245b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80245b4:	682f      	ldr	r7, [r5, #0]
 80245b6:	602b      	str	r3, [r5, #0]
 80245b8:	d032      	beq.n	8024620 <__sflush_r+0x98>
 80245ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80245bc:	89a3      	ldrh	r3, [r4, #12]
 80245be:	075a      	lsls	r2, r3, #29
 80245c0:	d505      	bpl.n	80245ce <__sflush_r+0x46>
 80245c2:	6863      	ldr	r3, [r4, #4]
 80245c4:	1ac0      	subs	r0, r0, r3
 80245c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80245c8:	b10b      	cbz	r3, 80245ce <__sflush_r+0x46>
 80245ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80245cc:	1ac0      	subs	r0, r0, r3
 80245ce:	2300      	movs	r3, #0
 80245d0:	4602      	mov	r2, r0
 80245d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80245d4:	6a21      	ldr	r1, [r4, #32]
 80245d6:	4628      	mov	r0, r5
 80245d8:	47b0      	blx	r6
 80245da:	1c43      	adds	r3, r0, #1
 80245dc:	89a3      	ldrh	r3, [r4, #12]
 80245de:	d106      	bne.n	80245ee <__sflush_r+0x66>
 80245e0:	6829      	ldr	r1, [r5, #0]
 80245e2:	291d      	cmp	r1, #29
 80245e4:	d82c      	bhi.n	8024640 <__sflush_r+0xb8>
 80245e6:	4a2a      	ldr	r2, [pc, #168]	; (8024690 <__sflush_r+0x108>)
 80245e8:	40ca      	lsrs	r2, r1
 80245ea:	07d6      	lsls	r6, r2, #31
 80245ec:	d528      	bpl.n	8024640 <__sflush_r+0xb8>
 80245ee:	2200      	movs	r2, #0
 80245f0:	6062      	str	r2, [r4, #4]
 80245f2:	04d9      	lsls	r1, r3, #19
 80245f4:	6922      	ldr	r2, [r4, #16]
 80245f6:	6022      	str	r2, [r4, #0]
 80245f8:	d504      	bpl.n	8024604 <__sflush_r+0x7c>
 80245fa:	1c42      	adds	r2, r0, #1
 80245fc:	d101      	bne.n	8024602 <__sflush_r+0x7a>
 80245fe:	682b      	ldr	r3, [r5, #0]
 8024600:	b903      	cbnz	r3, 8024604 <__sflush_r+0x7c>
 8024602:	6560      	str	r0, [r4, #84]	; 0x54
 8024604:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024606:	602f      	str	r7, [r5, #0]
 8024608:	2900      	cmp	r1, #0
 802460a:	d0ca      	beq.n	80245a2 <__sflush_r+0x1a>
 802460c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024610:	4299      	cmp	r1, r3
 8024612:	d002      	beq.n	802461a <__sflush_r+0x92>
 8024614:	4628      	mov	r0, r5
 8024616:	f7ff f947 	bl	80238a8 <_free_r>
 802461a:	2000      	movs	r0, #0
 802461c:	6360      	str	r0, [r4, #52]	; 0x34
 802461e:	e7c1      	b.n	80245a4 <__sflush_r+0x1c>
 8024620:	6a21      	ldr	r1, [r4, #32]
 8024622:	2301      	movs	r3, #1
 8024624:	4628      	mov	r0, r5
 8024626:	47b0      	blx	r6
 8024628:	1c41      	adds	r1, r0, #1
 802462a:	d1c7      	bne.n	80245bc <__sflush_r+0x34>
 802462c:	682b      	ldr	r3, [r5, #0]
 802462e:	2b00      	cmp	r3, #0
 8024630:	d0c4      	beq.n	80245bc <__sflush_r+0x34>
 8024632:	2b1d      	cmp	r3, #29
 8024634:	d001      	beq.n	802463a <__sflush_r+0xb2>
 8024636:	2b16      	cmp	r3, #22
 8024638:	d101      	bne.n	802463e <__sflush_r+0xb6>
 802463a:	602f      	str	r7, [r5, #0]
 802463c:	e7b1      	b.n	80245a2 <__sflush_r+0x1a>
 802463e:	89a3      	ldrh	r3, [r4, #12]
 8024640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024644:	81a3      	strh	r3, [r4, #12]
 8024646:	e7ad      	b.n	80245a4 <__sflush_r+0x1c>
 8024648:	690f      	ldr	r7, [r1, #16]
 802464a:	2f00      	cmp	r7, #0
 802464c:	d0a9      	beq.n	80245a2 <__sflush_r+0x1a>
 802464e:	0793      	lsls	r3, r2, #30
 8024650:	680e      	ldr	r6, [r1, #0]
 8024652:	bf08      	it	eq
 8024654:	694b      	ldreq	r3, [r1, #20]
 8024656:	600f      	str	r7, [r1, #0]
 8024658:	bf18      	it	ne
 802465a:	2300      	movne	r3, #0
 802465c:	eba6 0807 	sub.w	r8, r6, r7
 8024660:	608b      	str	r3, [r1, #8]
 8024662:	f1b8 0f00 	cmp.w	r8, #0
 8024666:	dd9c      	ble.n	80245a2 <__sflush_r+0x1a>
 8024668:	6a21      	ldr	r1, [r4, #32]
 802466a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802466c:	4643      	mov	r3, r8
 802466e:	463a      	mov	r2, r7
 8024670:	4628      	mov	r0, r5
 8024672:	47b0      	blx	r6
 8024674:	2800      	cmp	r0, #0
 8024676:	dc06      	bgt.n	8024686 <__sflush_r+0xfe>
 8024678:	89a3      	ldrh	r3, [r4, #12]
 802467a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802467e:	81a3      	strh	r3, [r4, #12]
 8024680:	f04f 30ff 	mov.w	r0, #4294967295
 8024684:	e78e      	b.n	80245a4 <__sflush_r+0x1c>
 8024686:	4407      	add	r7, r0
 8024688:	eba8 0800 	sub.w	r8, r8, r0
 802468c:	e7e9      	b.n	8024662 <__sflush_r+0xda>
 802468e:	bf00      	nop
 8024690:	20400001 	.word	0x20400001

08024694 <_fflush_r>:
 8024694:	b538      	push	{r3, r4, r5, lr}
 8024696:	690b      	ldr	r3, [r1, #16]
 8024698:	4605      	mov	r5, r0
 802469a:	460c      	mov	r4, r1
 802469c:	b913      	cbnz	r3, 80246a4 <_fflush_r+0x10>
 802469e:	2500      	movs	r5, #0
 80246a0:	4628      	mov	r0, r5
 80246a2:	bd38      	pop	{r3, r4, r5, pc}
 80246a4:	b118      	cbz	r0, 80246ae <_fflush_r+0x1a>
 80246a6:	6983      	ldr	r3, [r0, #24]
 80246a8:	b90b      	cbnz	r3, 80246ae <_fflush_r+0x1a>
 80246aa:	f000 f887 	bl	80247bc <__sinit>
 80246ae:	4b14      	ldr	r3, [pc, #80]	; (8024700 <_fflush_r+0x6c>)
 80246b0:	429c      	cmp	r4, r3
 80246b2:	d11b      	bne.n	80246ec <_fflush_r+0x58>
 80246b4:	686c      	ldr	r4, [r5, #4]
 80246b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80246ba:	2b00      	cmp	r3, #0
 80246bc:	d0ef      	beq.n	802469e <_fflush_r+0xa>
 80246be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80246c0:	07d0      	lsls	r0, r2, #31
 80246c2:	d404      	bmi.n	80246ce <_fflush_r+0x3a>
 80246c4:	0599      	lsls	r1, r3, #22
 80246c6:	d402      	bmi.n	80246ce <_fflush_r+0x3a>
 80246c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80246ca:	f000 f915 	bl	80248f8 <__retarget_lock_acquire_recursive>
 80246ce:	4628      	mov	r0, r5
 80246d0:	4621      	mov	r1, r4
 80246d2:	f7ff ff59 	bl	8024588 <__sflush_r>
 80246d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80246d8:	07da      	lsls	r2, r3, #31
 80246da:	4605      	mov	r5, r0
 80246dc:	d4e0      	bmi.n	80246a0 <_fflush_r+0xc>
 80246de:	89a3      	ldrh	r3, [r4, #12]
 80246e0:	059b      	lsls	r3, r3, #22
 80246e2:	d4dd      	bmi.n	80246a0 <_fflush_r+0xc>
 80246e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80246e6:	f000 f909 	bl	80248fc <__retarget_lock_release_recursive>
 80246ea:	e7d9      	b.n	80246a0 <_fflush_r+0xc>
 80246ec:	4b05      	ldr	r3, [pc, #20]	; (8024704 <_fflush_r+0x70>)
 80246ee:	429c      	cmp	r4, r3
 80246f0:	d101      	bne.n	80246f6 <_fflush_r+0x62>
 80246f2:	68ac      	ldr	r4, [r5, #8]
 80246f4:	e7df      	b.n	80246b6 <_fflush_r+0x22>
 80246f6:	4b04      	ldr	r3, [pc, #16]	; (8024708 <_fflush_r+0x74>)
 80246f8:	429c      	cmp	r4, r3
 80246fa:	bf08      	it	eq
 80246fc:	68ec      	ldreq	r4, [r5, #12]
 80246fe:	e7da      	b.n	80246b6 <_fflush_r+0x22>
 8024700:	08028b74 	.word	0x08028b74
 8024704:	08028b94 	.word	0x08028b94
 8024708:	08028b54 	.word	0x08028b54

0802470c <std>:
 802470c:	2300      	movs	r3, #0
 802470e:	b510      	push	{r4, lr}
 8024710:	4604      	mov	r4, r0
 8024712:	e9c0 3300 	strd	r3, r3, [r0]
 8024716:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802471a:	6083      	str	r3, [r0, #8]
 802471c:	8181      	strh	r1, [r0, #12]
 802471e:	6643      	str	r3, [r0, #100]	; 0x64
 8024720:	81c2      	strh	r2, [r0, #14]
 8024722:	6183      	str	r3, [r0, #24]
 8024724:	4619      	mov	r1, r3
 8024726:	2208      	movs	r2, #8
 8024728:	305c      	adds	r0, #92	; 0x5c
 802472a:	f7ff f8b5 	bl	8023898 <memset>
 802472e:	4b05      	ldr	r3, [pc, #20]	; (8024744 <std+0x38>)
 8024730:	6263      	str	r3, [r4, #36]	; 0x24
 8024732:	4b05      	ldr	r3, [pc, #20]	; (8024748 <std+0x3c>)
 8024734:	62a3      	str	r3, [r4, #40]	; 0x28
 8024736:	4b05      	ldr	r3, [pc, #20]	; (802474c <std+0x40>)
 8024738:	62e3      	str	r3, [r4, #44]	; 0x2c
 802473a:	4b05      	ldr	r3, [pc, #20]	; (8024750 <std+0x44>)
 802473c:	6224      	str	r4, [r4, #32]
 802473e:	6323      	str	r3, [r4, #48]	; 0x30
 8024740:	bd10      	pop	{r4, pc}
 8024742:	bf00      	nop
 8024744:	080240e9 	.word	0x080240e9
 8024748:	0802410b 	.word	0x0802410b
 802474c:	08024143 	.word	0x08024143
 8024750:	08024167 	.word	0x08024167

08024754 <_cleanup_r>:
 8024754:	4901      	ldr	r1, [pc, #4]	; (802475c <_cleanup_r+0x8>)
 8024756:	f000 b8af 	b.w	80248b8 <_fwalk_reent>
 802475a:	bf00      	nop
 802475c:	08024695 	.word	0x08024695

08024760 <__sfmoreglue>:
 8024760:	b570      	push	{r4, r5, r6, lr}
 8024762:	1e4a      	subs	r2, r1, #1
 8024764:	2568      	movs	r5, #104	; 0x68
 8024766:	4355      	muls	r5, r2
 8024768:	460e      	mov	r6, r1
 802476a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802476e:	f7ff f8eb 	bl	8023948 <_malloc_r>
 8024772:	4604      	mov	r4, r0
 8024774:	b140      	cbz	r0, 8024788 <__sfmoreglue+0x28>
 8024776:	2100      	movs	r1, #0
 8024778:	e9c0 1600 	strd	r1, r6, [r0]
 802477c:	300c      	adds	r0, #12
 802477e:	60a0      	str	r0, [r4, #8]
 8024780:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8024784:	f7ff f888 	bl	8023898 <memset>
 8024788:	4620      	mov	r0, r4
 802478a:	bd70      	pop	{r4, r5, r6, pc}

0802478c <__sfp_lock_acquire>:
 802478c:	4801      	ldr	r0, [pc, #4]	; (8024794 <__sfp_lock_acquire+0x8>)
 802478e:	f000 b8b3 	b.w	80248f8 <__retarget_lock_acquire_recursive>
 8024792:	bf00      	nop
 8024794:	2000afb0 	.word	0x2000afb0

08024798 <__sfp_lock_release>:
 8024798:	4801      	ldr	r0, [pc, #4]	; (80247a0 <__sfp_lock_release+0x8>)
 802479a:	f000 b8af 	b.w	80248fc <__retarget_lock_release_recursive>
 802479e:	bf00      	nop
 80247a0:	2000afb0 	.word	0x2000afb0

080247a4 <__sinit_lock_acquire>:
 80247a4:	4801      	ldr	r0, [pc, #4]	; (80247ac <__sinit_lock_acquire+0x8>)
 80247a6:	f000 b8a7 	b.w	80248f8 <__retarget_lock_acquire_recursive>
 80247aa:	bf00      	nop
 80247ac:	2000afaf 	.word	0x2000afaf

080247b0 <__sinit_lock_release>:
 80247b0:	4801      	ldr	r0, [pc, #4]	; (80247b8 <__sinit_lock_release+0x8>)
 80247b2:	f000 b8a3 	b.w	80248fc <__retarget_lock_release_recursive>
 80247b6:	bf00      	nop
 80247b8:	2000afaf 	.word	0x2000afaf

080247bc <__sinit>:
 80247bc:	b510      	push	{r4, lr}
 80247be:	4604      	mov	r4, r0
 80247c0:	f7ff fff0 	bl	80247a4 <__sinit_lock_acquire>
 80247c4:	69a3      	ldr	r3, [r4, #24]
 80247c6:	b11b      	cbz	r3, 80247d0 <__sinit+0x14>
 80247c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80247cc:	f7ff bff0 	b.w	80247b0 <__sinit_lock_release>
 80247d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80247d4:	6523      	str	r3, [r4, #80]	; 0x50
 80247d6:	4b13      	ldr	r3, [pc, #76]	; (8024824 <__sinit+0x68>)
 80247d8:	4a13      	ldr	r2, [pc, #76]	; (8024828 <__sinit+0x6c>)
 80247da:	681b      	ldr	r3, [r3, #0]
 80247dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80247de:	42a3      	cmp	r3, r4
 80247e0:	bf04      	itt	eq
 80247e2:	2301      	moveq	r3, #1
 80247e4:	61a3      	streq	r3, [r4, #24]
 80247e6:	4620      	mov	r0, r4
 80247e8:	f000 f820 	bl	802482c <__sfp>
 80247ec:	6060      	str	r0, [r4, #4]
 80247ee:	4620      	mov	r0, r4
 80247f0:	f000 f81c 	bl	802482c <__sfp>
 80247f4:	60a0      	str	r0, [r4, #8]
 80247f6:	4620      	mov	r0, r4
 80247f8:	f000 f818 	bl	802482c <__sfp>
 80247fc:	2200      	movs	r2, #0
 80247fe:	60e0      	str	r0, [r4, #12]
 8024800:	2104      	movs	r1, #4
 8024802:	6860      	ldr	r0, [r4, #4]
 8024804:	f7ff ff82 	bl	802470c <std>
 8024808:	68a0      	ldr	r0, [r4, #8]
 802480a:	2201      	movs	r2, #1
 802480c:	2109      	movs	r1, #9
 802480e:	f7ff ff7d 	bl	802470c <std>
 8024812:	68e0      	ldr	r0, [r4, #12]
 8024814:	2202      	movs	r2, #2
 8024816:	2112      	movs	r1, #18
 8024818:	f7ff ff78 	bl	802470c <std>
 802481c:	2301      	movs	r3, #1
 802481e:	61a3      	str	r3, [r4, #24]
 8024820:	e7d2      	b.n	80247c8 <__sinit+0xc>
 8024822:	bf00      	nop
 8024824:	08028a14 	.word	0x08028a14
 8024828:	08024755 	.word	0x08024755

0802482c <__sfp>:
 802482c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802482e:	4607      	mov	r7, r0
 8024830:	f7ff ffac 	bl	802478c <__sfp_lock_acquire>
 8024834:	4b1e      	ldr	r3, [pc, #120]	; (80248b0 <__sfp+0x84>)
 8024836:	681e      	ldr	r6, [r3, #0]
 8024838:	69b3      	ldr	r3, [r6, #24]
 802483a:	b913      	cbnz	r3, 8024842 <__sfp+0x16>
 802483c:	4630      	mov	r0, r6
 802483e:	f7ff ffbd 	bl	80247bc <__sinit>
 8024842:	3648      	adds	r6, #72	; 0x48
 8024844:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8024848:	3b01      	subs	r3, #1
 802484a:	d503      	bpl.n	8024854 <__sfp+0x28>
 802484c:	6833      	ldr	r3, [r6, #0]
 802484e:	b30b      	cbz	r3, 8024894 <__sfp+0x68>
 8024850:	6836      	ldr	r6, [r6, #0]
 8024852:	e7f7      	b.n	8024844 <__sfp+0x18>
 8024854:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8024858:	b9d5      	cbnz	r5, 8024890 <__sfp+0x64>
 802485a:	4b16      	ldr	r3, [pc, #88]	; (80248b4 <__sfp+0x88>)
 802485c:	60e3      	str	r3, [r4, #12]
 802485e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8024862:	6665      	str	r5, [r4, #100]	; 0x64
 8024864:	f000 f847 	bl	80248f6 <__retarget_lock_init_recursive>
 8024868:	f7ff ff96 	bl	8024798 <__sfp_lock_release>
 802486c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8024870:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8024874:	6025      	str	r5, [r4, #0]
 8024876:	61a5      	str	r5, [r4, #24]
 8024878:	2208      	movs	r2, #8
 802487a:	4629      	mov	r1, r5
 802487c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8024880:	f7ff f80a 	bl	8023898 <memset>
 8024884:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8024888:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802488c:	4620      	mov	r0, r4
 802488e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024890:	3468      	adds	r4, #104	; 0x68
 8024892:	e7d9      	b.n	8024848 <__sfp+0x1c>
 8024894:	2104      	movs	r1, #4
 8024896:	4638      	mov	r0, r7
 8024898:	f7ff ff62 	bl	8024760 <__sfmoreglue>
 802489c:	4604      	mov	r4, r0
 802489e:	6030      	str	r0, [r6, #0]
 80248a0:	2800      	cmp	r0, #0
 80248a2:	d1d5      	bne.n	8024850 <__sfp+0x24>
 80248a4:	f7ff ff78 	bl	8024798 <__sfp_lock_release>
 80248a8:	230c      	movs	r3, #12
 80248aa:	603b      	str	r3, [r7, #0]
 80248ac:	e7ee      	b.n	802488c <__sfp+0x60>
 80248ae:	bf00      	nop
 80248b0:	08028a14 	.word	0x08028a14
 80248b4:	ffff0001 	.word	0xffff0001

080248b8 <_fwalk_reent>:
 80248b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80248bc:	4606      	mov	r6, r0
 80248be:	4688      	mov	r8, r1
 80248c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80248c4:	2700      	movs	r7, #0
 80248c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80248ca:	f1b9 0901 	subs.w	r9, r9, #1
 80248ce:	d505      	bpl.n	80248dc <_fwalk_reent+0x24>
 80248d0:	6824      	ldr	r4, [r4, #0]
 80248d2:	2c00      	cmp	r4, #0
 80248d4:	d1f7      	bne.n	80248c6 <_fwalk_reent+0xe>
 80248d6:	4638      	mov	r0, r7
 80248d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80248dc:	89ab      	ldrh	r3, [r5, #12]
 80248de:	2b01      	cmp	r3, #1
 80248e0:	d907      	bls.n	80248f2 <_fwalk_reent+0x3a>
 80248e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80248e6:	3301      	adds	r3, #1
 80248e8:	d003      	beq.n	80248f2 <_fwalk_reent+0x3a>
 80248ea:	4629      	mov	r1, r5
 80248ec:	4630      	mov	r0, r6
 80248ee:	47c0      	blx	r8
 80248f0:	4307      	orrs	r7, r0
 80248f2:	3568      	adds	r5, #104	; 0x68
 80248f4:	e7e9      	b.n	80248ca <_fwalk_reent+0x12>

080248f6 <__retarget_lock_init_recursive>:
 80248f6:	4770      	bx	lr

080248f8 <__retarget_lock_acquire_recursive>:
 80248f8:	4770      	bx	lr

080248fa <__retarget_lock_release>:
 80248fa:	4770      	bx	lr

080248fc <__retarget_lock_release_recursive>:
 80248fc:	4770      	bx	lr
	...

08024900 <_lseek_r>:
 8024900:	b538      	push	{r3, r4, r5, lr}
 8024902:	4d07      	ldr	r5, [pc, #28]	; (8024920 <_lseek_r+0x20>)
 8024904:	4604      	mov	r4, r0
 8024906:	4608      	mov	r0, r1
 8024908:	4611      	mov	r1, r2
 802490a:	2200      	movs	r2, #0
 802490c:	602a      	str	r2, [r5, #0]
 802490e:	461a      	mov	r2, r3
 8024910:	f7dd fb66 	bl	8001fe0 <_lseek>
 8024914:	1c43      	adds	r3, r0, #1
 8024916:	d102      	bne.n	802491e <_lseek_r+0x1e>
 8024918:	682b      	ldr	r3, [r5, #0]
 802491a:	b103      	cbz	r3, 802491e <_lseek_r+0x1e>
 802491c:	6023      	str	r3, [r4, #0]
 802491e:	bd38      	pop	{r3, r4, r5, pc}
 8024920:	2000afb8 	.word	0x2000afb8

08024924 <__swhatbuf_r>:
 8024924:	b570      	push	{r4, r5, r6, lr}
 8024926:	460e      	mov	r6, r1
 8024928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802492c:	2900      	cmp	r1, #0
 802492e:	b096      	sub	sp, #88	; 0x58
 8024930:	4614      	mov	r4, r2
 8024932:	461d      	mov	r5, r3
 8024934:	da07      	bge.n	8024946 <__swhatbuf_r+0x22>
 8024936:	2300      	movs	r3, #0
 8024938:	602b      	str	r3, [r5, #0]
 802493a:	89b3      	ldrh	r3, [r6, #12]
 802493c:	061a      	lsls	r2, r3, #24
 802493e:	d410      	bmi.n	8024962 <__swhatbuf_r+0x3e>
 8024940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024944:	e00e      	b.n	8024964 <__swhatbuf_r+0x40>
 8024946:	466a      	mov	r2, sp
 8024948:	f000 f9f0 	bl	8024d2c <_fstat_r>
 802494c:	2800      	cmp	r0, #0
 802494e:	dbf2      	blt.n	8024936 <__swhatbuf_r+0x12>
 8024950:	9a01      	ldr	r2, [sp, #4]
 8024952:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8024956:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802495a:	425a      	negs	r2, r3
 802495c:	415a      	adcs	r2, r3
 802495e:	602a      	str	r2, [r5, #0]
 8024960:	e7ee      	b.n	8024940 <__swhatbuf_r+0x1c>
 8024962:	2340      	movs	r3, #64	; 0x40
 8024964:	2000      	movs	r0, #0
 8024966:	6023      	str	r3, [r4, #0]
 8024968:	b016      	add	sp, #88	; 0x58
 802496a:	bd70      	pop	{r4, r5, r6, pc}

0802496c <__smakebuf_r>:
 802496c:	898b      	ldrh	r3, [r1, #12]
 802496e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024970:	079d      	lsls	r5, r3, #30
 8024972:	4606      	mov	r6, r0
 8024974:	460c      	mov	r4, r1
 8024976:	d507      	bpl.n	8024988 <__smakebuf_r+0x1c>
 8024978:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802497c:	6023      	str	r3, [r4, #0]
 802497e:	6123      	str	r3, [r4, #16]
 8024980:	2301      	movs	r3, #1
 8024982:	6163      	str	r3, [r4, #20]
 8024984:	b002      	add	sp, #8
 8024986:	bd70      	pop	{r4, r5, r6, pc}
 8024988:	ab01      	add	r3, sp, #4
 802498a:	466a      	mov	r2, sp
 802498c:	f7ff ffca 	bl	8024924 <__swhatbuf_r>
 8024990:	9900      	ldr	r1, [sp, #0]
 8024992:	4605      	mov	r5, r0
 8024994:	4630      	mov	r0, r6
 8024996:	f7fe ffd7 	bl	8023948 <_malloc_r>
 802499a:	b948      	cbnz	r0, 80249b0 <__smakebuf_r+0x44>
 802499c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80249a0:	059a      	lsls	r2, r3, #22
 80249a2:	d4ef      	bmi.n	8024984 <__smakebuf_r+0x18>
 80249a4:	f023 0303 	bic.w	r3, r3, #3
 80249a8:	f043 0302 	orr.w	r3, r3, #2
 80249ac:	81a3      	strh	r3, [r4, #12]
 80249ae:	e7e3      	b.n	8024978 <__smakebuf_r+0xc>
 80249b0:	4b0d      	ldr	r3, [pc, #52]	; (80249e8 <__smakebuf_r+0x7c>)
 80249b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80249b4:	89a3      	ldrh	r3, [r4, #12]
 80249b6:	6020      	str	r0, [r4, #0]
 80249b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80249bc:	81a3      	strh	r3, [r4, #12]
 80249be:	9b00      	ldr	r3, [sp, #0]
 80249c0:	6163      	str	r3, [r4, #20]
 80249c2:	9b01      	ldr	r3, [sp, #4]
 80249c4:	6120      	str	r0, [r4, #16]
 80249c6:	b15b      	cbz	r3, 80249e0 <__smakebuf_r+0x74>
 80249c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80249cc:	4630      	mov	r0, r6
 80249ce:	f000 f9bf 	bl	8024d50 <_isatty_r>
 80249d2:	b128      	cbz	r0, 80249e0 <__smakebuf_r+0x74>
 80249d4:	89a3      	ldrh	r3, [r4, #12]
 80249d6:	f023 0303 	bic.w	r3, r3, #3
 80249da:	f043 0301 	orr.w	r3, r3, #1
 80249de:	81a3      	strh	r3, [r4, #12]
 80249e0:	89a0      	ldrh	r0, [r4, #12]
 80249e2:	4305      	orrs	r5, r0
 80249e4:	81a5      	strh	r5, [r4, #12]
 80249e6:	e7cd      	b.n	8024984 <__smakebuf_r+0x18>
 80249e8:	08024755 	.word	0x08024755

080249ec <__malloc_lock>:
 80249ec:	4801      	ldr	r0, [pc, #4]	; (80249f4 <__malloc_lock+0x8>)
 80249ee:	f7ff bf83 	b.w	80248f8 <__retarget_lock_acquire_recursive>
 80249f2:	bf00      	nop
 80249f4:	2000afac 	.word	0x2000afac

080249f8 <__malloc_unlock>:
 80249f8:	4801      	ldr	r0, [pc, #4]	; (8024a00 <__malloc_unlock+0x8>)
 80249fa:	f7ff bf7f 	b.w	80248fc <__retarget_lock_release_recursive>
 80249fe:	bf00      	nop
 8024a00:	2000afac 	.word	0x2000afac

08024a04 <_realloc_r>:
 8024a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024a06:	4607      	mov	r7, r0
 8024a08:	4614      	mov	r4, r2
 8024a0a:	460e      	mov	r6, r1
 8024a0c:	b921      	cbnz	r1, 8024a18 <_realloc_r+0x14>
 8024a0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8024a12:	4611      	mov	r1, r2
 8024a14:	f7fe bf98 	b.w	8023948 <_malloc_r>
 8024a18:	b922      	cbnz	r2, 8024a24 <_realloc_r+0x20>
 8024a1a:	f7fe ff45 	bl	80238a8 <_free_r>
 8024a1e:	4625      	mov	r5, r4
 8024a20:	4628      	mov	r0, r5
 8024a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024a24:	f000 f9a4 	bl	8024d70 <_malloc_usable_size_r>
 8024a28:	42a0      	cmp	r0, r4
 8024a2a:	d20f      	bcs.n	8024a4c <_realloc_r+0x48>
 8024a2c:	4621      	mov	r1, r4
 8024a2e:	4638      	mov	r0, r7
 8024a30:	f7fe ff8a 	bl	8023948 <_malloc_r>
 8024a34:	4605      	mov	r5, r0
 8024a36:	2800      	cmp	r0, #0
 8024a38:	d0f2      	beq.n	8024a20 <_realloc_r+0x1c>
 8024a3a:	4631      	mov	r1, r6
 8024a3c:	4622      	mov	r2, r4
 8024a3e:	f7fe ff03 	bl	8023848 <memcpy>
 8024a42:	4631      	mov	r1, r6
 8024a44:	4638      	mov	r0, r7
 8024a46:	f7fe ff2f 	bl	80238a8 <_free_r>
 8024a4a:	e7e9      	b.n	8024a20 <_realloc_r+0x1c>
 8024a4c:	4635      	mov	r5, r6
 8024a4e:	e7e7      	b.n	8024a20 <_realloc_r+0x1c>

08024a50 <__ssputs_r>:
 8024a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024a54:	688e      	ldr	r6, [r1, #8]
 8024a56:	429e      	cmp	r6, r3
 8024a58:	4682      	mov	sl, r0
 8024a5a:	460c      	mov	r4, r1
 8024a5c:	4690      	mov	r8, r2
 8024a5e:	461f      	mov	r7, r3
 8024a60:	d838      	bhi.n	8024ad4 <__ssputs_r+0x84>
 8024a62:	898a      	ldrh	r2, [r1, #12]
 8024a64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8024a68:	d032      	beq.n	8024ad0 <__ssputs_r+0x80>
 8024a6a:	6825      	ldr	r5, [r4, #0]
 8024a6c:	6909      	ldr	r1, [r1, #16]
 8024a6e:	eba5 0901 	sub.w	r9, r5, r1
 8024a72:	6965      	ldr	r5, [r4, #20]
 8024a74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024a78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8024a7c:	3301      	adds	r3, #1
 8024a7e:	444b      	add	r3, r9
 8024a80:	106d      	asrs	r5, r5, #1
 8024a82:	429d      	cmp	r5, r3
 8024a84:	bf38      	it	cc
 8024a86:	461d      	movcc	r5, r3
 8024a88:	0553      	lsls	r3, r2, #21
 8024a8a:	d531      	bpl.n	8024af0 <__ssputs_r+0xa0>
 8024a8c:	4629      	mov	r1, r5
 8024a8e:	f7fe ff5b 	bl	8023948 <_malloc_r>
 8024a92:	4606      	mov	r6, r0
 8024a94:	b950      	cbnz	r0, 8024aac <__ssputs_r+0x5c>
 8024a96:	230c      	movs	r3, #12
 8024a98:	f8ca 3000 	str.w	r3, [sl]
 8024a9c:	89a3      	ldrh	r3, [r4, #12]
 8024a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024aa2:	81a3      	strh	r3, [r4, #12]
 8024aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8024aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024aac:	6921      	ldr	r1, [r4, #16]
 8024aae:	464a      	mov	r2, r9
 8024ab0:	f7fe feca 	bl	8023848 <memcpy>
 8024ab4:	89a3      	ldrh	r3, [r4, #12]
 8024ab6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8024aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024abe:	81a3      	strh	r3, [r4, #12]
 8024ac0:	6126      	str	r6, [r4, #16]
 8024ac2:	6165      	str	r5, [r4, #20]
 8024ac4:	444e      	add	r6, r9
 8024ac6:	eba5 0509 	sub.w	r5, r5, r9
 8024aca:	6026      	str	r6, [r4, #0]
 8024acc:	60a5      	str	r5, [r4, #8]
 8024ace:	463e      	mov	r6, r7
 8024ad0:	42be      	cmp	r6, r7
 8024ad2:	d900      	bls.n	8024ad6 <__ssputs_r+0x86>
 8024ad4:	463e      	mov	r6, r7
 8024ad6:	4632      	mov	r2, r6
 8024ad8:	6820      	ldr	r0, [r4, #0]
 8024ada:	4641      	mov	r1, r8
 8024adc:	f7fe fec2 	bl	8023864 <memmove>
 8024ae0:	68a3      	ldr	r3, [r4, #8]
 8024ae2:	6822      	ldr	r2, [r4, #0]
 8024ae4:	1b9b      	subs	r3, r3, r6
 8024ae6:	4432      	add	r2, r6
 8024ae8:	60a3      	str	r3, [r4, #8]
 8024aea:	6022      	str	r2, [r4, #0]
 8024aec:	2000      	movs	r0, #0
 8024aee:	e7db      	b.n	8024aa8 <__ssputs_r+0x58>
 8024af0:	462a      	mov	r2, r5
 8024af2:	f7ff ff87 	bl	8024a04 <_realloc_r>
 8024af6:	4606      	mov	r6, r0
 8024af8:	2800      	cmp	r0, #0
 8024afa:	d1e1      	bne.n	8024ac0 <__ssputs_r+0x70>
 8024afc:	6921      	ldr	r1, [r4, #16]
 8024afe:	4650      	mov	r0, sl
 8024b00:	f7fe fed2 	bl	80238a8 <_free_r>
 8024b04:	e7c7      	b.n	8024a96 <__ssputs_r+0x46>
	...

08024b08 <_svfiprintf_r>:
 8024b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b0c:	4698      	mov	r8, r3
 8024b0e:	898b      	ldrh	r3, [r1, #12]
 8024b10:	061b      	lsls	r3, r3, #24
 8024b12:	b09d      	sub	sp, #116	; 0x74
 8024b14:	4607      	mov	r7, r0
 8024b16:	460d      	mov	r5, r1
 8024b18:	4614      	mov	r4, r2
 8024b1a:	d50e      	bpl.n	8024b3a <_svfiprintf_r+0x32>
 8024b1c:	690b      	ldr	r3, [r1, #16]
 8024b1e:	b963      	cbnz	r3, 8024b3a <_svfiprintf_r+0x32>
 8024b20:	2140      	movs	r1, #64	; 0x40
 8024b22:	f7fe ff11 	bl	8023948 <_malloc_r>
 8024b26:	6028      	str	r0, [r5, #0]
 8024b28:	6128      	str	r0, [r5, #16]
 8024b2a:	b920      	cbnz	r0, 8024b36 <_svfiprintf_r+0x2e>
 8024b2c:	230c      	movs	r3, #12
 8024b2e:	603b      	str	r3, [r7, #0]
 8024b30:	f04f 30ff 	mov.w	r0, #4294967295
 8024b34:	e0d1      	b.n	8024cda <_svfiprintf_r+0x1d2>
 8024b36:	2340      	movs	r3, #64	; 0x40
 8024b38:	616b      	str	r3, [r5, #20]
 8024b3a:	2300      	movs	r3, #0
 8024b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8024b3e:	2320      	movs	r3, #32
 8024b40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024b44:	f8cd 800c 	str.w	r8, [sp, #12]
 8024b48:	2330      	movs	r3, #48	; 0x30
 8024b4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8024cf4 <_svfiprintf_r+0x1ec>
 8024b4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024b52:	f04f 0901 	mov.w	r9, #1
 8024b56:	4623      	mov	r3, r4
 8024b58:	469a      	mov	sl, r3
 8024b5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024b5e:	b10a      	cbz	r2, 8024b64 <_svfiprintf_r+0x5c>
 8024b60:	2a25      	cmp	r2, #37	; 0x25
 8024b62:	d1f9      	bne.n	8024b58 <_svfiprintf_r+0x50>
 8024b64:	ebba 0b04 	subs.w	fp, sl, r4
 8024b68:	d00b      	beq.n	8024b82 <_svfiprintf_r+0x7a>
 8024b6a:	465b      	mov	r3, fp
 8024b6c:	4622      	mov	r2, r4
 8024b6e:	4629      	mov	r1, r5
 8024b70:	4638      	mov	r0, r7
 8024b72:	f7ff ff6d 	bl	8024a50 <__ssputs_r>
 8024b76:	3001      	adds	r0, #1
 8024b78:	f000 80aa 	beq.w	8024cd0 <_svfiprintf_r+0x1c8>
 8024b7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024b7e:	445a      	add	r2, fp
 8024b80:	9209      	str	r2, [sp, #36]	; 0x24
 8024b82:	f89a 3000 	ldrb.w	r3, [sl]
 8024b86:	2b00      	cmp	r3, #0
 8024b88:	f000 80a2 	beq.w	8024cd0 <_svfiprintf_r+0x1c8>
 8024b8c:	2300      	movs	r3, #0
 8024b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8024b92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024b96:	f10a 0a01 	add.w	sl, sl, #1
 8024b9a:	9304      	str	r3, [sp, #16]
 8024b9c:	9307      	str	r3, [sp, #28]
 8024b9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024ba2:	931a      	str	r3, [sp, #104]	; 0x68
 8024ba4:	4654      	mov	r4, sl
 8024ba6:	2205      	movs	r2, #5
 8024ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024bac:	4851      	ldr	r0, [pc, #324]	; (8024cf4 <_svfiprintf_r+0x1ec>)
 8024bae:	f7db fb1f 	bl	80001f0 <memchr>
 8024bb2:	9a04      	ldr	r2, [sp, #16]
 8024bb4:	b9d8      	cbnz	r0, 8024bee <_svfiprintf_r+0xe6>
 8024bb6:	06d0      	lsls	r0, r2, #27
 8024bb8:	bf44      	itt	mi
 8024bba:	2320      	movmi	r3, #32
 8024bbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024bc0:	0711      	lsls	r1, r2, #28
 8024bc2:	bf44      	itt	mi
 8024bc4:	232b      	movmi	r3, #43	; 0x2b
 8024bc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024bca:	f89a 3000 	ldrb.w	r3, [sl]
 8024bce:	2b2a      	cmp	r3, #42	; 0x2a
 8024bd0:	d015      	beq.n	8024bfe <_svfiprintf_r+0xf6>
 8024bd2:	9a07      	ldr	r2, [sp, #28]
 8024bd4:	4654      	mov	r4, sl
 8024bd6:	2000      	movs	r0, #0
 8024bd8:	f04f 0c0a 	mov.w	ip, #10
 8024bdc:	4621      	mov	r1, r4
 8024bde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024be2:	3b30      	subs	r3, #48	; 0x30
 8024be4:	2b09      	cmp	r3, #9
 8024be6:	d94e      	bls.n	8024c86 <_svfiprintf_r+0x17e>
 8024be8:	b1b0      	cbz	r0, 8024c18 <_svfiprintf_r+0x110>
 8024bea:	9207      	str	r2, [sp, #28]
 8024bec:	e014      	b.n	8024c18 <_svfiprintf_r+0x110>
 8024bee:	eba0 0308 	sub.w	r3, r0, r8
 8024bf2:	fa09 f303 	lsl.w	r3, r9, r3
 8024bf6:	4313      	orrs	r3, r2
 8024bf8:	9304      	str	r3, [sp, #16]
 8024bfa:	46a2      	mov	sl, r4
 8024bfc:	e7d2      	b.n	8024ba4 <_svfiprintf_r+0x9c>
 8024bfe:	9b03      	ldr	r3, [sp, #12]
 8024c00:	1d19      	adds	r1, r3, #4
 8024c02:	681b      	ldr	r3, [r3, #0]
 8024c04:	9103      	str	r1, [sp, #12]
 8024c06:	2b00      	cmp	r3, #0
 8024c08:	bfbb      	ittet	lt
 8024c0a:	425b      	neglt	r3, r3
 8024c0c:	f042 0202 	orrlt.w	r2, r2, #2
 8024c10:	9307      	strge	r3, [sp, #28]
 8024c12:	9307      	strlt	r3, [sp, #28]
 8024c14:	bfb8      	it	lt
 8024c16:	9204      	strlt	r2, [sp, #16]
 8024c18:	7823      	ldrb	r3, [r4, #0]
 8024c1a:	2b2e      	cmp	r3, #46	; 0x2e
 8024c1c:	d10c      	bne.n	8024c38 <_svfiprintf_r+0x130>
 8024c1e:	7863      	ldrb	r3, [r4, #1]
 8024c20:	2b2a      	cmp	r3, #42	; 0x2a
 8024c22:	d135      	bne.n	8024c90 <_svfiprintf_r+0x188>
 8024c24:	9b03      	ldr	r3, [sp, #12]
 8024c26:	1d1a      	adds	r2, r3, #4
 8024c28:	681b      	ldr	r3, [r3, #0]
 8024c2a:	9203      	str	r2, [sp, #12]
 8024c2c:	2b00      	cmp	r3, #0
 8024c2e:	bfb8      	it	lt
 8024c30:	f04f 33ff 	movlt.w	r3, #4294967295
 8024c34:	3402      	adds	r4, #2
 8024c36:	9305      	str	r3, [sp, #20]
 8024c38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8024d04 <_svfiprintf_r+0x1fc>
 8024c3c:	7821      	ldrb	r1, [r4, #0]
 8024c3e:	2203      	movs	r2, #3
 8024c40:	4650      	mov	r0, sl
 8024c42:	f7db fad5 	bl	80001f0 <memchr>
 8024c46:	b140      	cbz	r0, 8024c5a <_svfiprintf_r+0x152>
 8024c48:	2340      	movs	r3, #64	; 0x40
 8024c4a:	eba0 000a 	sub.w	r0, r0, sl
 8024c4e:	fa03 f000 	lsl.w	r0, r3, r0
 8024c52:	9b04      	ldr	r3, [sp, #16]
 8024c54:	4303      	orrs	r3, r0
 8024c56:	3401      	adds	r4, #1
 8024c58:	9304      	str	r3, [sp, #16]
 8024c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024c5e:	4826      	ldr	r0, [pc, #152]	; (8024cf8 <_svfiprintf_r+0x1f0>)
 8024c60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024c64:	2206      	movs	r2, #6
 8024c66:	f7db fac3 	bl	80001f0 <memchr>
 8024c6a:	2800      	cmp	r0, #0
 8024c6c:	d038      	beq.n	8024ce0 <_svfiprintf_r+0x1d8>
 8024c6e:	4b23      	ldr	r3, [pc, #140]	; (8024cfc <_svfiprintf_r+0x1f4>)
 8024c70:	bb1b      	cbnz	r3, 8024cba <_svfiprintf_r+0x1b2>
 8024c72:	9b03      	ldr	r3, [sp, #12]
 8024c74:	3307      	adds	r3, #7
 8024c76:	f023 0307 	bic.w	r3, r3, #7
 8024c7a:	3308      	adds	r3, #8
 8024c7c:	9303      	str	r3, [sp, #12]
 8024c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024c80:	4433      	add	r3, r6
 8024c82:	9309      	str	r3, [sp, #36]	; 0x24
 8024c84:	e767      	b.n	8024b56 <_svfiprintf_r+0x4e>
 8024c86:	fb0c 3202 	mla	r2, ip, r2, r3
 8024c8a:	460c      	mov	r4, r1
 8024c8c:	2001      	movs	r0, #1
 8024c8e:	e7a5      	b.n	8024bdc <_svfiprintf_r+0xd4>
 8024c90:	2300      	movs	r3, #0
 8024c92:	3401      	adds	r4, #1
 8024c94:	9305      	str	r3, [sp, #20]
 8024c96:	4619      	mov	r1, r3
 8024c98:	f04f 0c0a 	mov.w	ip, #10
 8024c9c:	4620      	mov	r0, r4
 8024c9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024ca2:	3a30      	subs	r2, #48	; 0x30
 8024ca4:	2a09      	cmp	r2, #9
 8024ca6:	d903      	bls.n	8024cb0 <_svfiprintf_r+0x1a8>
 8024ca8:	2b00      	cmp	r3, #0
 8024caa:	d0c5      	beq.n	8024c38 <_svfiprintf_r+0x130>
 8024cac:	9105      	str	r1, [sp, #20]
 8024cae:	e7c3      	b.n	8024c38 <_svfiprintf_r+0x130>
 8024cb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8024cb4:	4604      	mov	r4, r0
 8024cb6:	2301      	movs	r3, #1
 8024cb8:	e7f0      	b.n	8024c9c <_svfiprintf_r+0x194>
 8024cba:	ab03      	add	r3, sp, #12
 8024cbc:	9300      	str	r3, [sp, #0]
 8024cbe:	462a      	mov	r2, r5
 8024cc0:	4b0f      	ldr	r3, [pc, #60]	; (8024d00 <_svfiprintf_r+0x1f8>)
 8024cc2:	a904      	add	r1, sp, #16
 8024cc4:	4638      	mov	r0, r7
 8024cc6:	f3af 8000 	nop.w
 8024cca:	1c42      	adds	r2, r0, #1
 8024ccc:	4606      	mov	r6, r0
 8024cce:	d1d6      	bne.n	8024c7e <_svfiprintf_r+0x176>
 8024cd0:	89ab      	ldrh	r3, [r5, #12]
 8024cd2:	065b      	lsls	r3, r3, #25
 8024cd4:	f53f af2c 	bmi.w	8024b30 <_svfiprintf_r+0x28>
 8024cd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024cda:	b01d      	add	sp, #116	; 0x74
 8024cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024ce0:	ab03      	add	r3, sp, #12
 8024ce2:	9300      	str	r3, [sp, #0]
 8024ce4:	462a      	mov	r2, r5
 8024ce6:	4b06      	ldr	r3, [pc, #24]	; (8024d00 <_svfiprintf_r+0x1f8>)
 8024ce8:	a904      	add	r1, sp, #16
 8024cea:	4638      	mov	r0, r7
 8024cec:	f7ff f84e 	bl	8023d8c <_printf_i>
 8024cf0:	e7eb      	b.n	8024cca <_svfiprintf_r+0x1c2>
 8024cf2:	bf00      	nop
 8024cf4:	08028a18 	.word	0x08028a18
 8024cf8:	08028a22 	.word	0x08028a22
 8024cfc:	00000000 	.word	0x00000000
 8024d00:	08024a51 	.word	0x08024a51
 8024d04:	08028a1e 	.word	0x08028a1e

08024d08 <_read_r>:
 8024d08:	b538      	push	{r3, r4, r5, lr}
 8024d0a:	4d07      	ldr	r5, [pc, #28]	; (8024d28 <_read_r+0x20>)
 8024d0c:	4604      	mov	r4, r0
 8024d0e:	4608      	mov	r0, r1
 8024d10:	4611      	mov	r1, r2
 8024d12:	2200      	movs	r2, #0
 8024d14:	602a      	str	r2, [r5, #0]
 8024d16:	461a      	mov	r2, r3
 8024d18:	f7dd f902 	bl	8001f20 <_read>
 8024d1c:	1c43      	adds	r3, r0, #1
 8024d1e:	d102      	bne.n	8024d26 <_read_r+0x1e>
 8024d20:	682b      	ldr	r3, [r5, #0]
 8024d22:	b103      	cbz	r3, 8024d26 <_read_r+0x1e>
 8024d24:	6023      	str	r3, [r4, #0]
 8024d26:	bd38      	pop	{r3, r4, r5, pc}
 8024d28:	2000afb8 	.word	0x2000afb8

08024d2c <_fstat_r>:
 8024d2c:	b538      	push	{r3, r4, r5, lr}
 8024d2e:	4d07      	ldr	r5, [pc, #28]	; (8024d4c <_fstat_r+0x20>)
 8024d30:	2300      	movs	r3, #0
 8024d32:	4604      	mov	r4, r0
 8024d34:	4608      	mov	r0, r1
 8024d36:	4611      	mov	r1, r2
 8024d38:	602b      	str	r3, [r5, #0]
 8024d3a:	f7dd f936 	bl	8001faa <_fstat>
 8024d3e:	1c43      	adds	r3, r0, #1
 8024d40:	d102      	bne.n	8024d48 <_fstat_r+0x1c>
 8024d42:	682b      	ldr	r3, [r5, #0]
 8024d44:	b103      	cbz	r3, 8024d48 <_fstat_r+0x1c>
 8024d46:	6023      	str	r3, [r4, #0]
 8024d48:	bd38      	pop	{r3, r4, r5, pc}
 8024d4a:	bf00      	nop
 8024d4c:	2000afb8 	.word	0x2000afb8

08024d50 <_isatty_r>:
 8024d50:	b538      	push	{r3, r4, r5, lr}
 8024d52:	4d06      	ldr	r5, [pc, #24]	; (8024d6c <_isatty_r+0x1c>)
 8024d54:	2300      	movs	r3, #0
 8024d56:	4604      	mov	r4, r0
 8024d58:	4608      	mov	r0, r1
 8024d5a:	602b      	str	r3, [r5, #0]
 8024d5c:	f7dd f935 	bl	8001fca <_isatty>
 8024d60:	1c43      	adds	r3, r0, #1
 8024d62:	d102      	bne.n	8024d6a <_isatty_r+0x1a>
 8024d64:	682b      	ldr	r3, [r5, #0]
 8024d66:	b103      	cbz	r3, 8024d6a <_isatty_r+0x1a>
 8024d68:	6023      	str	r3, [r4, #0]
 8024d6a:	bd38      	pop	{r3, r4, r5, pc}
 8024d6c:	2000afb8 	.word	0x2000afb8

08024d70 <_malloc_usable_size_r>:
 8024d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024d74:	1f18      	subs	r0, r3, #4
 8024d76:	2b00      	cmp	r3, #0
 8024d78:	bfbc      	itt	lt
 8024d7a:	580b      	ldrlt	r3, [r1, r0]
 8024d7c:	18c0      	addlt	r0, r0, r3
 8024d7e:	4770      	bx	lr

08024d80 <_init>:
 8024d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024d82:	bf00      	nop
 8024d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024d86:	bc08      	pop	{r3}
 8024d88:	469e      	mov	lr, r3
 8024d8a:	4770      	bx	lr

08024d8c <_fini>:
 8024d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024d8e:	bf00      	nop
 8024d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024d92:	bc08      	pop	{r3}
 8024d94:	469e      	mov	lr, r3
 8024d96:	4770      	bx	lr
