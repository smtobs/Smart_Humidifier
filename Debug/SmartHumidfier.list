
SmartHumidfier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00028a8c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000046e8  08028c3c  08028c3c  00038c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00001956  0802d324  0802d324  0003d324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 0000000c  0802ec7c  0802ec7c  0003ec7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00037580  0802ec88  0802ec88  0003ec88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000001c  08066208  08066208  00076208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08066224  08066224  0008020c  2**0
                  CONTENTS
  8 .ARM          00000008  08066224  08066224  00076224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0806622c  0806622c  0008020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  0806622c  0806622c  0007622c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  08066240  08066240  00076240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000020c  20000000  08066248  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0000af3c  2000020c  08066454  0008020c  2**2
                  ALLOC
 14 ._user_heap_stack 00000600  2000b148  08066454  0008b148  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  0008020c  2**0
                  CONTENTS, READONLY
 16 .debug_info   000b65f9  00000000  00000000  0008023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00014463  00000000  00000000  00136835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00004160  00000000  00000000  0014ac98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00003bb0  00000000  00000000  0014edf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00039ed2  00000000  00000000  001529a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00050ab6  00000000  00000000  0018c87a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001174a3  00000000  00000000  001dd330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  002f47d3  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00012f4c  00000000  00000000  002f48a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08028c24 	.word	0x08028c24

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000210 	.word	0x20000210
 80001ec:	08028c24 	.word	0x08028c24

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strcmp>:
 8000290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000298:	2a01      	cmp	r2, #1
 800029a:	bf28      	it	cs
 800029c:	429a      	cmpcs	r2, r3
 800029e:	d0f7      	beq.n	8000290 <strcmp>
 80002a0:	1ad0      	subs	r0, r2, r3
 80002a2:	4770      	bx	lr

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	; 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__gedf2>:
 8000a50:	f04f 3cff 	mov.w	ip, #4294967295
 8000a54:	e006      	b.n	8000a64 <__cmpdf2+0x4>
 8000a56:	bf00      	nop

08000a58 <__ledf2>:
 8000a58:	f04f 0c01 	mov.w	ip, #1
 8000a5c:	e002      	b.n	8000a64 <__cmpdf2+0x4>
 8000a5e:	bf00      	nop

08000a60 <__cmpdf2>:
 8000a60:	f04f 0c01 	mov.w	ip, #1
 8000a64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a74:	bf18      	it	ne
 8000a76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7a:	d01b      	beq.n	8000ab4 <__cmpdf2+0x54>
 8000a7c:	b001      	add	sp, #4
 8000a7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a82:	bf0c      	ite	eq
 8000a84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a88:	ea91 0f03 	teqne	r1, r3
 8000a8c:	bf02      	ittt	eq
 8000a8e:	ea90 0f02 	teqeq	r0, r2
 8000a92:	2000      	moveq	r0, #0
 8000a94:	4770      	bxeq	lr
 8000a96:	f110 0f00 	cmn.w	r0, #0
 8000a9a:	ea91 0f03 	teq	r1, r3
 8000a9e:	bf58      	it	pl
 8000aa0:	4299      	cmppl	r1, r3
 8000aa2:	bf08      	it	eq
 8000aa4:	4290      	cmpeq	r0, r2
 8000aa6:	bf2c      	ite	cs
 8000aa8:	17d8      	asrcs	r0, r3, #31
 8000aaa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aae:	f040 0001 	orr.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__cmpdf2+0x64>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d107      	bne.n	8000ad4 <__cmpdf2+0x74>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d1d6      	bne.n	8000a7c <__cmpdf2+0x1c>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d0d3      	beq.n	8000a7c <__cmpdf2+0x1c>
 8000ad4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_cdrcmple>:
 8000adc:	4684      	mov	ip, r0
 8000ade:	4610      	mov	r0, r2
 8000ae0:	4662      	mov	r2, ip
 8000ae2:	468c      	mov	ip, r1
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4663      	mov	r3, ip
 8000ae8:	e000      	b.n	8000aec <__aeabi_cdcmpeq>
 8000aea:	bf00      	nop

08000aec <__aeabi_cdcmpeq>:
 8000aec:	b501      	push	{r0, lr}
 8000aee:	f7ff ffb7 	bl	8000a60 <__cmpdf2>
 8000af2:	2800      	cmp	r0, #0
 8000af4:	bf48      	it	mi
 8000af6:	f110 0f00 	cmnmi.w	r0, #0
 8000afa:	bd01      	pop	{r0, pc}

08000afc <__aeabi_dcmpeq>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff fff4 	bl	8000aec <__aeabi_cdcmpeq>
 8000b04:	bf0c      	ite	eq
 8000b06:	2001      	moveq	r0, #1
 8000b08:	2000      	movne	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmplt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffea 	bl	8000aec <__aeabi_cdcmpeq>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmple>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffe0 	bl	8000aec <__aeabi_cdcmpeq>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpge>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffce 	bl	8000adc <__aeabi_cdrcmple>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpgt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffc4 	bl	8000adc <__aeabi_cdrcmple>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpun>:
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__aeabi_dcmpun+0x10>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d10a      	bne.n	8000b86 <__aeabi_dcmpun+0x26>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__aeabi_dcmpun+0x20>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_dcmpun+0x26>
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0001 	mov.w	r0, #1
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b96e 	b.w	8000e80 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9d08      	ldr	r5, [sp, #32]
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	468c      	mov	ip, r1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8083 	bne.w	8000cd2 <__udivmoddi4+0x116>
 8000bcc:	428a      	cmp	r2, r1
 8000bce:	4617      	mov	r7, r2
 8000bd0:	d947      	bls.n	8000c62 <__udivmoddi4+0xa6>
 8000bd2:	fab2 f282 	clz	r2, r2
 8000bd6:	b142      	cbz	r2, 8000bea <__udivmoddi4+0x2e>
 8000bd8:	f1c2 0020 	rsb	r0, r2, #32
 8000bdc:	fa24 f000 	lsr.w	r0, r4, r0
 8000be0:	4091      	lsls	r1, r2
 8000be2:	4097      	lsls	r7, r2
 8000be4:	ea40 0c01 	orr.w	ip, r0, r1
 8000be8:	4094      	lsls	r4, r2
 8000bea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bee:	0c23      	lsrs	r3, r4, #16
 8000bf0:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf4:	fa1f fe87 	uxth.w	lr, r7
 8000bf8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c00:	fb06 f10e 	mul.w	r1, r6, lr
 8000c04:	4299      	cmp	r1, r3
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x60>
 8000c08:	18fb      	adds	r3, r7, r3
 8000c0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c0e:	f080 8119 	bcs.w	8000e44 <__udivmoddi4+0x288>
 8000c12:	4299      	cmp	r1, r3
 8000c14:	f240 8116 	bls.w	8000e44 <__udivmoddi4+0x288>
 8000c18:	3e02      	subs	r6, #2
 8000c1a:	443b      	add	r3, r7
 8000c1c:	1a5b      	subs	r3, r3, r1
 8000c1e:	b2a4      	uxth	r4, r4
 8000c20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c24:	fb08 3310 	mls	r3, r8, r0, r3
 8000c28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c30:	45a6      	cmp	lr, r4
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x8c>
 8000c34:	193c      	adds	r4, r7, r4
 8000c36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3a:	f080 8105 	bcs.w	8000e48 <__udivmoddi4+0x28c>
 8000c3e:	45a6      	cmp	lr, r4
 8000c40:	f240 8102 	bls.w	8000e48 <__udivmoddi4+0x28c>
 8000c44:	3802      	subs	r0, #2
 8000c46:	443c      	add	r4, r7
 8000c48:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c4c:	eba4 040e 	sub.w	r4, r4, lr
 8000c50:	2600      	movs	r6, #0
 8000c52:	b11d      	cbz	r5, 8000c5c <__udivmoddi4+0xa0>
 8000c54:	40d4      	lsrs	r4, r2
 8000c56:	2300      	movs	r3, #0
 8000c58:	e9c5 4300 	strd	r4, r3, [r5]
 8000c5c:	4631      	mov	r1, r6
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	b902      	cbnz	r2, 8000c66 <__udivmoddi4+0xaa>
 8000c64:	deff      	udf	#255	; 0xff
 8000c66:	fab2 f282 	clz	r2, r2
 8000c6a:	2a00      	cmp	r2, #0
 8000c6c:	d150      	bne.n	8000d10 <__udivmoddi4+0x154>
 8000c6e:	1bcb      	subs	r3, r1, r7
 8000c70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c74:	fa1f f887 	uxth.w	r8, r7
 8000c78:	2601      	movs	r6, #1
 8000c7a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c7e:	0c21      	lsrs	r1, r4, #16
 8000c80:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c88:	fb08 f30c 	mul.w	r3, r8, ip
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0xe4>
 8000c90:	1879      	adds	r1, r7, r1
 8000c92:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0xe2>
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	f200 80e9 	bhi.w	8000e70 <__udivmoddi4+0x2b4>
 8000c9e:	4684      	mov	ip, r0
 8000ca0:	1ac9      	subs	r1, r1, r3
 8000ca2:	b2a3      	uxth	r3, r4
 8000ca4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ca8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb0:	fb08 f800 	mul.w	r8, r8, r0
 8000cb4:	45a0      	cmp	r8, r4
 8000cb6:	d907      	bls.n	8000cc8 <__udivmoddi4+0x10c>
 8000cb8:	193c      	adds	r4, r7, r4
 8000cba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x10a>
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	f200 80d9 	bhi.w	8000e78 <__udivmoddi4+0x2bc>
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	eba4 0408 	sub.w	r4, r4, r8
 8000ccc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd0:	e7bf      	b.n	8000c52 <__udivmoddi4+0x96>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x12e>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80b1 	beq.w	8000e3e <__udivmoddi4+0x282>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x1cc>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0x140>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80b8 	bhi.w	8000e6c <__udivmoddi4+0x2b0>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0103 	sbc.w	r1, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	468c      	mov	ip, r1
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0a8      	beq.n	8000c5c <__udivmoddi4+0xa0>
 8000d0a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d0e:	e7a5      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000d10:	f1c2 0320 	rsb	r3, r2, #32
 8000d14:	fa20 f603 	lsr.w	r6, r0, r3
 8000d18:	4097      	lsls	r7, r2
 8000d1a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d22:	40d9      	lsrs	r1, r3
 8000d24:	4330      	orrs	r0, r6
 8000d26:	0c03      	lsrs	r3, r0, #16
 8000d28:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d2c:	fa1f f887 	uxth.w	r8, r7
 8000d30:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d38:	fb06 f108 	mul.w	r1, r6, r8
 8000d3c:	4299      	cmp	r1, r3
 8000d3e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x19c>
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d4a:	f080 808d 	bcs.w	8000e68 <__udivmoddi4+0x2ac>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 808a 	bls.w	8000e68 <__udivmoddi4+0x2ac>
 8000d54:	3e02      	subs	r6, #2
 8000d56:	443b      	add	r3, r7
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b281      	uxth	r1, r0
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d68:	fb00 f308 	mul.w	r3, r0, r8
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d907      	bls.n	8000d80 <__udivmoddi4+0x1c4>
 8000d70:	1879      	adds	r1, r7, r1
 8000d72:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d76:	d273      	bcs.n	8000e60 <__udivmoddi4+0x2a4>
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d971      	bls.n	8000e60 <__udivmoddi4+0x2a4>
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	4439      	add	r1, r7
 8000d80:	1acb      	subs	r3, r1, r3
 8000d82:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d86:	e778      	b.n	8000c7a <__udivmoddi4+0xbe>
 8000d88:	f1c6 0c20 	rsb	ip, r6, #32
 8000d8c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d90:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d94:	431c      	orrs	r4, r3
 8000d96:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000da2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000da6:	431f      	orrs	r7, r3
 8000da8:	0c3b      	lsrs	r3, r7, #16
 8000daa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dae:	fa1f f884 	uxth.w	r8, r4
 8000db2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000db6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dba:	fb09 fa08 	mul.w	sl, r9, r8
 8000dbe:	458a      	cmp	sl, r1
 8000dc0:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc4:	fa00 f306 	lsl.w	r3, r0, r6
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x220>
 8000dca:	1861      	adds	r1, r4, r1
 8000dcc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd0:	d248      	bcs.n	8000e64 <__udivmoddi4+0x2a8>
 8000dd2:	458a      	cmp	sl, r1
 8000dd4:	d946      	bls.n	8000e64 <__udivmoddi4+0x2a8>
 8000dd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dda:	4421      	add	r1, r4
 8000ddc:	eba1 010a 	sub.w	r1, r1, sl
 8000de0:	b2bf      	uxth	r7, r7
 8000de2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dee:	fb00 f808 	mul.w	r8, r0, r8
 8000df2:	45b8      	cmp	r8, r7
 8000df4:	d907      	bls.n	8000e06 <__udivmoddi4+0x24a>
 8000df6:	19e7      	adds	r7, r4, r7
 8000df8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfc:	d22e      	bcs.n	8000e5c <__udivmoddi4+0x2a0>
 8000dfe:	45b8      	cmp	r8, r7
 8000e00:	d92c      	bls.n	8000e5c <__udivmoddi4+0x2a0>
 8000e02:	3802      	subs	r0, #2
 8000e04:	4427      	add	r7, r4
 8000e06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0a:	eba7 0708 	sub.w	r7, r7, r8
 8000e0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e12:	454f      	cmp	r7, r9
 8000e14:	46c6      	mov	lr, r8
 8000e16:	4649      	mov	r1, r9
 8000e18:	d31a      	bcc.n	8000e50 <__udivmoddi4+0x294>
 8000e1a:	d017      	beq.n	8000e4c <__udivmoddi4+0x290>
 8000e1c:	b15d      	cbz	r5, 8000e36 <__udivmoddi4+0x27a>
 8000e1e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e22:	eb67 0701 	sbc.w	r7, r7, r1
 8000e26:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e2a:	40f2      	lsrs	r2, r6
 8000e2c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e30:	40f7      	lsrs	r7, r6
 8000e32:	e9c5 2700 	strd	r2, r7, [r5]
 8000e36:	2600      	movs	r6, #0
 8000e38:	4631      	mov	r1, r6
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	462e      	mov	r6, r5
 8000e40:	4628      	mov	r0, r5
 8000e42:	e70b      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000e44:	4606      	mov	r6, r0
 8000e46:	e6e9      	b.n	8000c1c <__udivmoddi4+0x60>
 8000e48:	4618      	mov	r0, r3
 8000e4a:	e6fd      	b.n	8000c48 <__udivmoddi4+0x8c>
 8000e4c:	4543      	cmp	r3, r8
 8000e4e:	d2e5      	bcs.n	8000e1c <__udivmoddi4+0x260>
 8000e50:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e54:	eb69 0104 	sbc.w	r1, r9, r4
 8000e58:	3801      	subs	r0, #1
 8000e5a:	e7df      	b.n	8000e1c <__udivmoddi4+0x260>
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	e7d2      	b.n	8000e06 <__udivmoddi4+0x24a>
 8000e60:	4660      	mov	r0, ip
 8000e62:	e78d      	b.n	8000d80 <__udivmoddi4+0x1c4>
 8000e64:	4681      	mov	r9, r0
 8000e66:	e7b9      	b.n	8000ddc <__udivmoddi4+0x220>
 8000e68:	4666      	mov	r6, ip
 8000e6a:	e775      	b.n	8000d58 <__udivmoddi4+0x19c>
 8000e6c:	4630      	mov	r0, r6
 8000e6e:	e74a      	b.n	8000d06 <__udivmoddi4+0x14a>
 8000e70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e74:	4439      	add	r1, r7
 8000e76:	e713      	b.n	8000ca0 <__udivmoddi4+0xe4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	443c      	add	r4, r7
 8000e7c:	e724      	b.n	8000cc8 <__udivmoddi4+0x10c>
 8000e7e:	bf00      	nop

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d101      	bne.n	8000ea0 <cJSON_strdup+0x1c>
    {
        return NULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	e015      	b.n	8000ecc <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff f9ff 	bl	80002a4 <strlen>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	68f8      	ldr	r0, [r7, #12]
 8000eb2:	4798      	blx	r3
 8000eb4:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d101      	bne.n	8000ec0 <cJSON_strdup+0x3c>
    {
        return NULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	e005      	b.n	8000ecc <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8000ec0:	68fa      	ldr	r2, [r7, #12]
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	68b8      	ldr	r0, [r7, #8]
 8000ec6:	f025 ff2f 	bl	8026d28 <memcpy>

    return copy;
 8000eca:	68bb      	ldr	r3, [r7, #8]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2028      	movs	r0, #40	; 0x28
 8000ee2:	4798      	blx	r3
 8000ee4:	60f8      	str	r0, [r7, #12]
    if (node)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d004      	beq.n	8000ef6 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8000eec:	2228      	movs	r2, #40	; 0x28
 8000eee:	2100      	movs	r1, #0
 8000ef0:	68f8      	ldr	r0, [r7, #12]
 8000ef2:	f025 ff41 	bl	8026d78 <memset>
    }

    return node;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8000f0c:	e037      	b.n	8000f7e <cJSON_Delete+0x7e>
    {
        next = item->next;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d108      	bne.n	8000f32 <cJSON_Delete+0x32>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d004      	beq.n	8000f32 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ffe7 	bl	8000f00 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d109      	bne.n	8000f52 <cJSON_Delete+0x52>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d005      	beq.n	8000f52 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8000f46:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <cJSON_Delete+0x90>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	6912      	ldr	r2, [r2, #16]
 8000f4e:	4610      	mov	r0, r2
 8000f50:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d109      	bne.n	8000f72 <cJSON_Delete+0x72>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6a1b      	ldr	r3, [r3, #32]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d005      	beq.n	8000f72 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <cJSON_Delete+0x90>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	6a12      	ldr	r2, [r2, #32]
 8000f6e:	4610      	mov	r0, r2
 8000f70:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <cJSON_Delete+0x90>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	4798      	blx	r3
        item = next;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1c4      	bne.n	8000f0e <cJSON_Delete+0xe>
    }
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000004 	.word	0x20000004

08000f94 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8000f98:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <ensure+0x20>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d101      	bne.n	8000fc8 <ensure+0x24>
    {
        return NULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	e083      	b.n	80010d0 <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d007      	beq.n	8000fe0 <ensure+0x3c>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d301      	bcc.n	8000fe0 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	e077      	b.n	80010d0 <ensure+0x12c>
    }

    if (needed > INT_MAX)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	da01      	bge.n	8000fea <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e072      	b.n	80010d0 <ensure+0x12c>
    }

    needed += p->offset + 1;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	683a      	ldr	r2, [r7, #0]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d805      	bhi.n	800100c <ensure+0x68>
    {
        return p->buffer + p->offset;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	4413      	add	r3, r2
 800100a:	e061      	b.n	80010d0 <ensure+0x12c>
    }

    if (p->noalloc) {
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <ensure+0x74>
        return NULL;
 8001014:	2300      	movs	r3, #0
 8001016:	e05b      	b.n	80010d0 <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800101e:	d308      	bcc.n	8001032 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	db03      	blt.n	800102e <ensure+0x8a>
        {
            newsize = INT_MAX;
 8001026:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	e004      	b.n	8001038 <ensure+0x94>
        }
        else
        {
            return NULL;
 800102e:	2300      	movs	r3, #0
 8001030:	e04e      	b.n	80010d0 <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a1b      	ldr	r3, [r3, #32]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d018      	beq.n	8001072 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a1b      	ldr	r3, [r3, #32]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	6812      	ldr	r2, [r2, #0]
 8001048:	68b9      	ldr	r1, [r7, #8]
 800104a:	4610      	mov	r0, r2
 800104c:	4798      	blx	r3
 800104e:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d132      	bne.n	80010bc <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	6812      	ldr	r2, [r2, #0]
 800105e:	4610      	mov	r0, r2
 8001060:	4798      	blx	r3
            p->length = 0;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]

            return NULL;
 800106e:	2300      	movs	r3, #0
 8001070:	e02e      	b.n	80010d0 <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	68b8      	ldr	r0, [r7, #8]
 8001078:	4798      	blx	r3
 800107a:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d10d      	bne.n	800109e <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	6812      	ldr	r2, [r2, #0]
 800108a:	4610      	mov	r0, r2
 800108c:	4798      	blx	r3
            p->length = 0;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]

            return NULL;
 800109a:	2300      	movs	r3, #0
 800109c:	e018      	b.n	80010d0 <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6819      	ldr	r1, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	3301      	adds	r3, #1
 80010a8:	461a      	mov	r2, r3
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f025 fe3c 	bl	8026d28 <memcpy>
        p->hooks.deallocate(p->buffer);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	69db      	ldr	r3, [r3, #28]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	6812      	ldr	r2, [r2, #0]
 80010b8:	4610      	mov	r0, r2
 80010ba:	4798      	blx	r3
    }
    p->length = newsize;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	4413      	add	r3, r2
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 80010d8:	b590      	push	{r4, r7, lr}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d013      	beq.n	8001112 <update_offset+0x3a>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d00f      	beq.n	8001112 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	4413      	add	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689c      	ldr	r4, [r3, #8]
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f7ff f8ce 	bl	80002a4 <strlen>
 8001108:	4603      	mov	r3, r0
 800110a:	18e2      	adds	r2, r4, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	e000      	b.n	8001114 <update_offset+0x3c>
        return;
 8001112:	bf00      	nop
}
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	bd90      	pop	{r4, r7, pc}
	...

0800111c <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 800111c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001120:	b087      	sub	sp, #28
 8001122:	af00      	add	r7, sp, #0
 8001124:	ed87 0b02 	vstr	d0, [r7, #8]
 8001128:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 800112c:	68b8      	ldr	r0, [r7, #8]
 800112e:	68fe      	ldr	r6, [r7, #12]
 8001130:	f026 4100 	bic.w	r1, r6, #2147483648	; 0x80000000
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	687e      	ldr	r6, [r7, #4]
 8001138:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800113c:	f7ff fd06 	bl	8000b4c <__aeabi_dcmpgt>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d004      	beq.n	8001150 <compare_double+0x34>
 8001146:	68bc      	ldr	r4, [r7, #8]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800114e:	e003      	b.n	8001158 <compare_double+0x3c>
 8001150:	683c      	ldr	r4, [r7, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001158:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 800115c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001160:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001164:	f7ff f8aa 	bl	80002bc <__aeabi_dsub>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4690      	mov	r8, r2
 800116e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <compare_double+0x8c>)
 8001178:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800117c:	f7ff fa56 	bl	800062c <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	2101      	movs	r1, #1
 8001186:	460c      	mov	r4, r1
 8001188:	4640      	mov	r0, r8
 800118a:	4649      	mov	r1, r9
 800118c:	f7ff fcca 	bl	8000b24 <__aeabi_dcmple>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <compare_double+0x7e>
 8001196:	2300      	movs	r3, #0
 8001198:	461c      	mov	r4, r3
 800119a:	b2e3      	uxtb	r3, r4
}
 800119c:	4618      	mov	r0, r3
 800119e:	371c      	adds	r7, #28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011a6:	bf00      	nop
 80011a8:	3cb00000 	.word	0x3cb00000

080011ac <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 80011ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ae:	b093      	sub	sp, #76	; 0x4c
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80011c0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int length = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	f107 0318 	add.w	r3, r7, #24
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
 80011e0:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 80011e2:	f7ff fed7 	bl	8000f94 <get_decimal_point>
 80011e6:	4603      	mov	r3, r0
 80011e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double test = 0.0;
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	f04f 0300 	mov.w	r3, #0
 80011f4:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <print_number+0x56>
    {
        return false;
 80011fe:	2300      	movs	r3, #0
 8001200:	e0b4      	b.n	800136c <print_number+0x1c0>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 8001202:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001206:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800120a:	f7ff fca9 	bl	8000b60 <__aeabi_dcmpun>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d121      	bne.n	8001258 <print_number+0xac>
 8001214:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8001216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001218:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800121c:	2301      	movs	r3, #1
 800121e:	461e      	mov	r6, r3
 8001220:	f04f 32ff 	mov.w	r2, #4294967295
 8001224:	4b53      	ldr	r3, [pc, #332]	; (8001374 <print_number+0x1c8>)
 8001226:	4620      	mov	r0, r4
 8001228:	4629      	mov	r1, r5
 800122a:	f7ff fc99 	bl	8000b60 <__aeabi_dcmpun>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d10b      	bne.n	800124c <print_number+0xa0>
 8001234:	f04f 32ff 	mov.w	r2, #4294967295
 8001238:	4b4e      	ldr	r3, [pc, #312]	; (8001374 <print_number+0x1c8>)
 800123a:	4620      	mov	r0, r4
 800123c:	4629      	mov	r1, r5
 800123e:	f7ff fc71 	bl	8000b24 <__aeabi_dcmple>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d101      	bne.n	800124c <print_number+0xa0>
 8001248:	2300      	movs	r3, #0
 800124a:	461e      	mov	r6, r3
 800124c:	b2f3      	uxtb	r3, r6
 800124e:	f083 0301 	eor.w	r3, r3, #1
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d007      	beq.n	8001268 <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4946      	ldr	r1, [pc, #280]	; (8001378 <print_number+0x1cc>)
 800125e:	4618      	mov	r0, r3
 8001260:	f026 f9ba 	bl	80275d8 <siprintf>
 8001264:	6478      	str	r0, [r7, #68]	; 0x44
 8001266:	e03f      	b.n	80012e8 <print_number+0x13c>
    }
	else if(d == (double)item->valueint)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff f973 	bl	8000558 <__aeabi_i2d>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800127a:	f7ff fc3f 	bl	8000afc <__aeabi_dcmpeq>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d009      	beq.n	8001298 <print_number+0xec>
	{
		length = sprintf((char*)number_buffer, "%d", item->valueint);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	695a      	ldr	r2, [r3, #20]
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	493b      	ldr	r1, [pc, #236]	; (800137c <print_number+0x1d0>)
 800128e:	4618      	mov	r0, r3
 8001290:	f026 f9a2 	bl	80275d8 <siprintf>
 8001294:	6478      	str	r0, [r7, #68]	; 0x44
 8001296:	e027      	b.n	80012e8 <print_number+0x13c>
	}
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8001298:	f107 0014 	add.w	r0, r7, #20
 800129c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80012a0:	4937      	ldr	r1, [pc, #220]	; (8001380 <print_number+0x1d4>)
 80012a2:	f026 f999 	bl	80275d8 <siprintf>
 80012a6:	6478      	str	r0, [r7, #68]	; 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 80012a8:	f107 0208 	add.w	r2, r7, #8
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4934      	ldr	r1, [pc, #208]	; (8001384 <print_number+0x1d8>)
 80012b2:	4618      	mov	r0, r3
 80012b4:	f026 f9b0 	bl	8027618 <siscanf>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d10c      	bne.n	80012d8 <print_number+0x12c>
 80012be:	ed97 7b02 	vldr	d7, [r7, #8]
 80012c2:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 80012c6:	eeb0 0a47 	vmov.f32	s0, s14
 80012ca:	eef0 0a67 	vmov.f32	s1, s15
 80012ce:	f7ff ff25 	bl	800111c <compare_double>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d107      	bne.n	80012e8 <print_number+0x13c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 80012d8:	f107 0014 	add.w	r0, r7, #20
 80012dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80012e0:	4929      	ldr	r1, [pc, #164]	; (8001388 <print_number+0x1dc>)
 80012e2:	f026 f979 	bl	80275d8 <siprintf>
 80012e6:	6478      	str	r0, [r7, #68]	; 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 80012e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	db02      	blt.n	80012f4 <print_number+0x148>
 80012ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012f0:	2b19      	cmp	r3, #25
 80012f2:	dd01      	ble.n	80012f8 <print_number+0x14c>
    {
        return false;
 80012f4:	2300      	movs	r3, #0
 80012f6:	e039      	b.n	800136c <print_number+0x1c0>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 80012f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012fa:	3301      	adds	r3, #1
 80012fc:	4619      	mov	r1, r3
 80012fe:	6838      	ldr	r0, [r7, #0]
 8001300:	f7ff fe50 	bl	8000fa4 <ensure>
 8001304:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 8001306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <print_number+0x164>
    {
        return false;
 800130c:	2300      	movs	r3, #0
 800130e:	e02d      	b.n	800136c <print_number+0x1c0>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8001310:	2300      	movs	r3, #0
 8001312:	643b      	str	r3, [r7, #64]	; 0x40
 8001314:	e01a      	b.n	800134c <print_number+0x1a0>
    {
        if (number_buffer[i] == decimal_point)
 8001316:	f107 0214 	add.w	r2, r7, #20
 800131a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800131c:	4413      	add	r3, r2
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001324:	429a      	cmp	r2, r3
 8001326:	d105      	bne.n	8001334 <print_number+0x188>
        {
            output_pointer[i] = '.';
 8001328:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800132a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800132c:	4413      	add	r3, r2
 800132e:	222e      	movs	r2, #46	; 0x2e
 8001330:	701a      	strb	r2, [r3, #0]
            continue;
 8001332:	e008      	b.n	8001346 <print_number+0x19a>
        }

        output_pointer[i] = number_buffer[i];
 8001334:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001338:	4413      	add	r3, r2
 800133a:	f107 0114 	add.w	r1, r7, #20
 800133e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001340:	440a      	add	r2, r1
 8001342:	7812      	ldrb	r2, [r2, #0]
 8001344:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8001346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001348:	3301      	adds	r3, #1
 800134a:	643b      	str	r3, [r7, #64]	; 0x40
 800134c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800134e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001350:	429a      	cmp	r2, r3
 8001352:	d3e0      	bcc.n	8001316 <print_number+0x16a>
    }
    output_pointer[i] = '\0';
 8001354:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001358:	4413      	add	r3, r2
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001364:	441a      	add	r2, r3
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	609a      	str	r2, [r3, #8]

    return true;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	374c      	adds	r7, #76	; 0x4c
 8001370:	46bd      	mov	sp, r7
 8001372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001374:	7fefffff 	.word	0x7fefffff
 8001378:	08028c48 	.word	0x08028c48
 800137c:	08028c50 	.word	0x08028c50
 8001380:	08028c54 	.word	0x08028c54
 8001384:	08028c5c 	.word	0x08028c5c
 8001388:	08028c60 	.word	0x08028c60

0800138c <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <print_string_ptr+0x28>
    {
        return false;
 80013b0:	2300      	movs	r3, #0
 80013b2:	e110      	b.n	80015d6 <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d111      	bne.n	80013de <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 80013ba:	2103      	movs	r1, #3
 80013bc:	6838      	ldr	r0, [r7, #0]
 80013be:	f7ff fdf1 	bl	8000fa4 <ensure>
 80013c2:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <print_string_ptr+0x42>
        {
            return false;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e103      	b.n	80015d6 <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4a83      	ldr	r2, [pc, #524]	; (80015e0 <print_string_ptr+0x254>)
 80013d2:	8811      	ldrh	r1, [r2, #0]
 80013d4:	7892      	ldrb	r2, [r2, #2]
 80013d6:	8019      	strh	r1, [r3, #0]
 80013d8:	709a      	strb	r2, [r3, #2]

        return true;
 80013da:	2301      	movs	r3, #1
 80013dc:	e0fb      	b.n	80015d6 <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	61fb      	str	r3, [r7, #28]
 80013e2:	e023      	b.n	800142c <print_string_ptr+0xa0>
    {
        switch (*input_pointer)
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b22      	cmp	r3, #34	; 0x22
 80013ea:	dc0e      	bgt.n	800140a <print_string_ptr+0x7e>
 80013ec:	2b08      	cmp	r3, #8
 80013ee:	db12      	blt.n	8001416 <print_string_ptr+0x8a>
 80013f0:	3b08      	subs	r3, #8
 80013f2:	2201      	movs	r2, #1
 80013f4:	409a      	lsls	r2, r3
 80013f6:	4b7b      	ldr	r3, [pc, #492]	; (80015e4 <print_string_ptr+0x258>)
 80013f8:	4013      	ands	r3, r2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	bf14      	ite	ne
 80013fe:	2301      	movne	r3, #1
 8001400:	2300      	moveq	r3, #0
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b00      	cmp	r3, #0
 8001406:	d102      	bne.n	800140e <print_string_ptr+0x82>
 8001408:	e005      	b.n	8001416 <print_string_ptr+0x8a>
 800140a:	2b5c      	cmp	r3, #92	; 0x5c
 800140c:	d103      	bne.n	8001416 <print_string_ptr+0x8a>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	3301      	adds	r3, #1
 8001412:	617b      	str	r3, [r7, #20]
                break;
 8001414:	e007      	b.n	8001426 <print_string_ptr+0x9a>
            default:
                if (*input_pointer < 32)
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b1f      	cmp	r3, #31
 800141c:	d802      	bhi.n	8001424 <print_string_ptr+0x98>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	3305      	adds	r3, #5
 8001422:	617b      	str	r3, [r7, #20]
                }
                break;
 8001424:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3301      	adds	r3, #1
 800142a:	61fb      	str	r3, [r7, #28]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1d7      	bne.n	80013e4 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	461a      	mov	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	4413      	add	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	3303      	adds	r3, #3
 8001446:	4619      	mov	r1, r3
 8001448:	6838      	ldr	r0, [r7, #0]
 800144a:	f7ff fdab 	bl	8000fa4 <ensure>
 800144e:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <print_string_ptr+0xce>
    {
        return false;
 8001456:	2300      	movs	r3, #0
 8001458:	e0bd      	b.n	80015d6 <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d117      	bne.n	8001490 <print_string_ptr+0x104>
    {
        output[0] = '\"';
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	2222      	movs	r2, #34	; 0x22
 8001464:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	3301      	adds	r3, #1
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	4618      	mov	r0, r3
 8001470:	f025 fc5a 	bl	8026d28 <memcpy>
        output[output_length + 1] = '\"';
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	3301      	adds	r3, #1
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4413      	add	r3, r2
 800147c:	2222      	movs	r2, #34	; 0x22
 800147e:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	3302      	adds	r3, #2
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4413      	add	r3, r2
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]

        return true;
 800148c:	2301      	movs	r3, #1
 800148e:	e0a2      	b.n	80015d6 <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	2222      	movs	r2, #34	; 0x22
 8001494:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	3301      	adds	r3, #1
 800149a:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	61fb      	str	r3, [r7, #28]
 80014a0:	e087      	b.n	80015b2 <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b1f      	cmp	r3, #31
 80014a8:	d90c      	bls.n	80014c4 <print_string_ptr+0x138>
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b22      	cmp	r3, #34	; 0x22
 80014b0:	d008      	beq.n	80014c4 <print_string_ptr+0x138>
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b5c      	cmp	r3, #92	; 0x5c
 80014b8:	d004      	beq.n	80014c4 <print_string_ptr+0x138>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	781a      	ldrb	r2, [r3, #0]
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	701a      	strb	r2, [r3, #0]
 80014c2:	e070      	b.n	80015a6 <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	61ba      	str	r2, [r7, #24]
 80014ca:	225c      	movs	r2, #92	; 0x5c
 80014cc:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b22      	cmp	r3, #34	; 0x22
 80014d4:	dc3e      	bgt.n	8001554 <print_string_ptr+0x1c8>
 80014d6:	2b08      	cmp	r3, #8
 80014d8:	db5a      	blt.n	8001590 <print_string_ptr+0x204>
 80014da:	3b08      	subs	r3, #8
 80014dc:	2b1a      	cmp	r3, #26
 80014de:	d857      	bhi.n	8001590 <print_string_ptr+0x204>
 80014e0:	a201      	add	r2, pc, #4	; (adr r2, 80014e8 <print_string_ptr+0x15c>)
 80014e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e6:	bf00      	nop
 80014e8:	08001569 	.word	0x08001569
 80014ec:	08001589 	.word	0x08001589
 80014f0:	08001579 	.word	0x08001579
 80014f4:	08001591 	.word	0x08001591
 80014f8:	08001571 	.word	0x08001571
 80014fc:	08001581 	.word	0x08001581
 8001500:	08001591 	.word	0x08001591
 8001504:	08001591 	.word	0x08001591
 8001508:	08001591 	.word	0x08001591
 800150c:	08001591 	.word	0x08001591
 8001510:	08001591 	.word	0x08001591
 8001514:	08001591 	.word	0x08001591
 8001518:	08001591 	.word	0x08001591
 800151c:	08001591 	.word	0x08001591
 8001520:	08001591 	.word	0x08001591
 8001524:	08001591 	.word	0x08001591
 8001528:	08001591 	.word	0x08001591
 800152c:	08001591 	.word	0x08001591
 8001530:	08001591 	.word	0x08001591
 8001534:	08001591 	.word	0x08001591
 8001538:	08001591 	.word	0x08001591
 800153c:	08001591 	.word	0x08001591
 8001540:	08001591 	.word	0x08001591
 8001544:	08001591 	.word	0x08001591
 8001548:	08001591 	.word	0x08001591
 800154c:	08001591 	.word	0x08001591
 8001550:	08001561 	.word	0x08001561
 8001554:	2b5c      	cmp	r3, #92	; 0x5c
 8001556:	d11b      	bne.n	8001590 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	225c      	movs	r2, #92	; 0x5c
 800155c:	701a      	strb	r2, [r3, #0]
                    break;
 800155e:	e022      	b.n	80015a6 <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	2222      	movs	r2, #34	; 0x22
 8001564:	701a      	strb	r2, [r3, #0]
                    break;
 8001566:	e01e      	b.n	80015a6 <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	2262      	movs	r2, #98	; 0x62
 800156c:	701a      	strb	r2, [r3, #0]
                    break;
 800156e:	e01a      	b.n	80015a6 <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	2266      	movs	r2, #102	; 0x66
 8001574:	701a      	strb	r2, [r3, #0]
                    break;
 8001576:	e016      	b.n	80015a6 <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	226e      	movs	r2, #110	; 0x6e
 800157c:	701a      	strb	r2, [r3, #0]
                    break;
 800157e:	e012      	b.n	80015a6 <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2272      	movs	r2, #114	; 0x72
 8001584:	701a      	strb	r2, [r3, #0]
                    break;
 8001586:	e00e      	b.n	80015a6 <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	2274      	movs	r2, #116	; 0x74
 800158c:	701a      	strb	r2, [r3, #0]
                    break;
 800158e:	e00a      	b.n	80015a6 <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	4914      	ldr	r1, [pc, #80]	; (80015e8 <print_string_ptr+0x25c>)
 8001598:	69b8      	ldr	r0, [r7, #24]
 800159a:	f026 f81d 	bl	80275d8 <siprintf>
                    output_pointer += 4;
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	3304      	adds	r3, #4
 80015a2:	61bb      	str	r3, [r7, #24]
                    break;
 80015a4:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3301      	adds	r3, #1
 80015aa:	61fb      	str	r3, [r7, #28]
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	3301      	adds	r3, #1
 80015b0:	61bb      	str	r3, [r7, #24]
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f47f af73 	bne.w	80014a2 <print_string_ptr+0x116>
            }
        }
    }
    output[output_length + 1] = '\"';
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	3301      	adds	r3, #1
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4413      	add	r3, r2
 80015c4:	2222      	movs	r2, #34	; 0x22
 80015c6:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	3302      	adds	r3, #2
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4413      	add	r3, r2
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]

    return true;
 80015d4:	2301      	movs	r3, #1
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3720      	adds	r7, #32
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	08028c68 	.word	0x08028c68
 80015e4:	04000037 	.word	0x04000037
 80015e8:	08028c6c 	.word	0x08028c6c

080015ec <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	6839      	ldr	r1, [r7, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fec5 	bl	800138c <print_string_ptr>
 8001602:	4603      	mov	r3, r0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08e      	sub	sp, #56	; 0x38
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8001618:	2300      	movs	r3, #0
 800161a:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 800161c:	f107 0310 	add.w	r3, r7, #16
 8001620:	2224      	movs	r2, #36	; 0x24
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f025 fba7 	bl	8026d78 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a38      	ldr	r2, [pc, #224]	; (8001710 <print+0x104>)
 8001630:	6812      	ldr	r2, [r2, #0]
 8001632:	4610      	mov	r0, r2
 8001634:	4798      	blx	r3
 8001636:	4603      	mov	r3, r0
 8001638:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 800163a:	4b35      	ldr	r3, [pc, #212]	; (8001710 <print+0x104>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
    buffer->hooks = *hooks;
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800164a:	ca07      	ldmia	r2, {r0, r1, r2}
 800164c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d040      	beq.n	80016d8 <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8001656:	f107 0310 	add.w	r3, r7, #16
 800165a:	4619      	mov	r1, r3
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f000 f869 	bl	8001734 <print_value>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d039      	beq.n	80016dc <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fd33 	bl	80010d8 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00d      	beq.n	8001696 <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	6938      	ldr	r0, [r7, #16]
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	3201      	adds	r2, #1
 8001684:	4611      	mov	r1, r2
 8001686:	4798      	blx	r3
 8001688:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL) {
 800168a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800168c:	2b00      	cmp	r3, #0
 800168e:	d027      	beq.n	80016e0 <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 8001690:	2300      	movs	r3, #0
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	e01e      	b.n	80016d4 <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	3201      	adds	r2, #1
 800169e:	4610      	mov	r0, r2
 80016a0:	4798      	blx	r3
 80016a2:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL)
 80016a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d01c      	beq.n	80016e4 <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 80016aa:	6939      	ldr	r1, [r7, #16]
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	4293      	cmp	r3, r2
 80016b4:	bf28      	it	cs
 80016b6:	4613      	movcs	r3, r2
 80016b8:	461a      	mov	r2, r3
 80016ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80016bc:	f025 fb34 	bl	8026d28 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016c4:	4413      	add	r3, r2
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4610      	mov	r0, r2
 80016d2:	4798      	blx	r3
    }

    return printed;
 80016d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d6:	e016      	b.n	8001706 <print+0xfa>
        goto fail;
 80016d8:	bf00      	nop
 80016da:	e004      	b.n	80016e6 <print+0xda>
        goto fail;
 80016dc:	bf00      	nop
 80016de:	e002      	b.n	80016e6 <print+0xda>
            goto fail;
 80016e0:	bf00      	nop
 80016e2:	e000      	b.n	80016e6 <print+0xda>
            goto fail;
 80016e4:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d004      	beq.n	80016f6 <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4610      	mov	r0, r2
 80016f4:	4798      	blx	r3
    }

    if (printed != NULL)
 80016f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <print+0xf8>
    {
        hooks->deallocate(printed);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001702:	4798      	blx	r3
    }

    return NULL;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3738      	adds	r7, #56	; 0x38
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	0802a008 	.word	0x0802a008

08001714 <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <cJSON_Print+0x1c>)
 800171e:	2101      	movs	r1, #1
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff ff73 	bl	800160c <print>
 8001726:	4603      	mov	r3, r0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000004 	.word	0x20000004

08001734 <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d002      	beq.n	800174e <print_value+0x1a>
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <print_value+0x1e>
    {
        return false;
 800174e:	2300      	movs	r3, #0
 8001750:	e0c9      	b.n	80018e6 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b80      	cmp	r3, #128	; 0x80
 800175a:	f000 808e 	beq.w	800187a <print_value+0x146>
 800175e:	2b80      	cmp	r3, #128	; 0x80
 8001760:	f300 80c0 	bgt.w	80018e4 <print_value+0x1b0>
 8001764:	2b20      	cmp	r3, #32
 8001766:	dc49      	bgt.n	80017fc <print_value+0xc8>
 8001768:	2b00      	cmp	r3, #0
 800176a:	f340 80bb 	ble.w	80018e4 <print_value+0x1b0>
 800176e:	3b01      	subs	r3, #1
 8001770:	2b1f      	cmp	r3, #31
 8001772:	f200 80b7 	bhi.w	80018e4 <print_value+0x1b0>
 8001776:	a201      	add	r2, pc, #4	; (adr r2, 800177c <print_value+0x48>)
 8001778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177c:	08001827 	.word	0x08001827
 8001780:	0800184b 	.word	0x0800184b
 8001784:	080018e5 	.word	0x080018e5
 8001788:	08001803 	.word	0x08001803
 800178c:	080018e5 	.word	0x080018e5
 8001790:	080018e5 	.word	0x080018e5
 8001794:	080018e5 	.word	0x080018e5
 8001798:	0800186f 	.word	0x0800186f
 800179c:	080018e5 	.word	0x080018e5
 80017a0:	080018e5 	.word	0x080018e5
 80017a4:	080018e5 	.word	0x080018e5
 80017a8:	080018e5 	.word	0x080018e5
 80017ac:	080018e5 	.word	0x080018e5
 80017b0:	080018e5 	.word	0x080018e5
 80017b4:	080018e5 	.word	0x080018e5
 80017b8:	080018c1 	.word	0x080018c1
 80017bc:	080018e5 	.word	0x080018e5
 80017c0:	080018e5 	.word	0x080018e5
 80017c4:	080018e5 	.word	0x080018e5
 80017c8:	080018e5 	.word	0x080018e5
 80017cc:	080018e5 	.word	0x080018e5
 80017d0:	080018e5 	.word	0x080018e5
 80017d4:	080018e5 	.word	0x080018e5
 80017d8:	080018e5 	.word	0x080018e5
 80017dc:	080018e5 	.word	0x080018e5
 80017e0:	080018e5 	.word	0x080018e5
 80017e4:	080018e5 	.word	0x080018e5
 80017e8:	080018e5 	.word	0x080018e5
 80017ec:	080018e5 	.word	0x080018e5
 80017f0:	080018e5 	.word	0x080018e5
 80017f4:	080018e5 	.word	0x080018e5
 80017f8:	080018cd 	.word	0x080018cd
 80017fc:	2b40      	cmp	r3, #64	; 0x40
 80017fe:	d06b      	beq.n	80018d8 <print_value+0x1a4>
 8001800:	e070      	b.n	80018e4 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 8001802:	2105      	movs	r1, #5
 8001804:	6838      	ldr	r0, [r7, #0]
 8001806:	f7ff fbcd 	bl	8000fa4 <ensure>
 800180a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <print_value+0xe2>
            {
                return false;
 8001812:	2300      	movs	r3, #0
 8001814:	e067      	b.n	80018e6 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4a35      	ldr	r2, [pc, #212]	; (80018f0 <print_value+0x1bc>)
 800181a:	6810      	ldr	r0, [r2, #0]
 800181c:	6018      	str	r0, [r3, #0]
 800181e:	7912      	ldrb	r2, [r2, #4]
 8001820:	711a      	strb	r2, [r3, #4]
            return true;
 8001822:	2301      	movs	r3, #1
 8001824:	e05f      	b.n	80018e6 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8001826:	2106      	movs	r1, #6
 8001828:	6838      	ldr	r0, [r7, #0]
 800182a:	f7ff fbbb 	bl	8000fa4 <ensure>
 800182e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <print_value+0x106>
            {
                return false;
 8001836:	2300      	movs	r3, #0
 8001838:	e055      	b.n	80018e6 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4a2d      	ldr	r2, [pc, #180]	; (80018f4 <print_value+0x1c0>)
 800183e:	6810      	ldr	r0, [r2, #0]
 8001840:	6018      	str	r0, [r3, #0]
 8001842:	8892      	ldrh	r2, [r2, #4]
 8001844:	809a      	strh	r2, [r3, #4]
            return true;
 8001846:	2301      	movs	r3, #1
 8001848:	e04d      	b.n	80018e6 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 800184a:	2105      	movs	r1, #5
 800184c:	6838      	ldr	r0, [r7, #0]
 800184e:	f7ff fba9 	bl	8000fa4 <ensure>
 8001852:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <print_value+0x12a>
            {
                return false;
 800185a:	2300      	movs	r3, #0
 800185c:	e043      	b.n	80018e6 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4a25      	ldr	r2, [pc, #148]	; (80018f8 <print_value+0x1c4>)
 8001862:	6810      	ldr	r0, [r2, #0]
 8001864:	6018      	str	r0, [r3, #0]
 8001866:	7912      	ldrb	r2, [r2, #4]
 8001868:	711a      	strb	r2, [r3, #4]
            return true;
 800186a:	2301      	movs	r3, #1
 800186c:	e03b      	b.n	80018e6 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 800186e:	6839      	ldr	r1, [r7, #0]
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff fc9b 	bl	80011ac <print_number>
 8001876:	4603      	mov	r3, r0
 8001878:	e035      	b.n	80018e6 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <print_value+0x156>
            {
                return false;
 8001886:	2300      	movs	r3, #0
 8001888:	e02d      	b.n	80018e6 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fd08 	bl	80002a4 <strlen>
 8001894:	4603      	mov	r3, r0
 8001896:	3301      	adds	r3, #1
 8001898:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 800189a:	68b9      	ldr	r1, [r7, #8]
 800189c:	6838      	ldr	r0, [r7, #0]
 800189e:	f7ff fb81 	bl	8000fa4 <ensure>
 80018a2:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <print_value+0x17a>
            {
                return false;
 80018aa:	2300      	movs	r3, #0
 80018ac:	e01b      	b.n	80018e6 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	4619      	mov	r1, r3
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f025 fa36 	bl	8026d28 <memcpy>
            return true;
 80018bc:	2301      	movs	r3, #1
 80018be:	e012      	b.n	80018e6 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 80018c0:	6839      	ldr	r1, [r7, #0]
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff fe92 	bl	80015ec <print_string>
 80018c8:	4603      	mov	r3, r0
 80018ca:	e00c      	b.n	80018e6 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 80018cc:	6839      	ldr	r1, [r7, #0]
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f814 	bl	80018fc <print_array>
 80018d4:	4603      	mov	r3, r0
 80018d6:	e006      	b.n	80018e6 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 80018d8:	6839      	ldr	r1, [r7, #0]
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f894 	bl	8001a08 <print_object>
 80018e0:	4603      	mov	r3, r0
 80018e2:	e000      	b.n	80018e6 <print_value+0x1b2>

        default:
            return false;
 80018e4:	2300      	movs	r3, #0
    }
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	08028c48 	.word	0x08028c48
 80018f4:	08028c78 	.word	0x08028c78
 80018f8:	08028c80 	.word	0x08028c80

080018fc <print_array>:
    return false;
}

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <print_array+0x22>
    {
        return false;
 800191a:	2300      	movs	r3, #0
 800191c:	e070      	b.n	8001a00 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800191e:	2101      	movs	r1, #1
 8001920:	6838      	ldr	r0, [r7, #0]
 8001922:	f7ff fb3f 	bl	8000fa4 <ensure>
 8001926:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <print_array+0x36>
    {
        return false;
 800192e:	2300      	movs	r3, #0
 8001930:	e066      	b.n	8001a00 <print_array+0x104>
    }

    *output_pointer = '[';
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	225b      	movs	r2, #91	; 0x5b
 8001936:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 800194c:	e03d      	b.n	80019ca <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 800194e:	6839      	ldr	r1, [r7, #0]
 8001950:	6938      	ldr	r0, [r7, #16]
 8001952:	f7ff feef 	bl	8001734 <print_value>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <print_array+0x64>
        {
            return false;
 800195c:	2300      	movs	r3, #0
 800195e:	e04f      	b.n	8001a00 <print_array+0x104>
        }
        update_offset(output_buffer);
 8001960:	6838      	ldr	r0, [r7, #0]
 8001962:	f7ff fbb9 	bl	80010d8 <update_offset>
        if (current_element->next)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d02a      	beq.n	80019c4 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <print_array+0x7e>
 8001976:	2302      	movs	r3, #2
 8001978:	e000      	b.n	800197c <print_array+0x80>
 800197a:	2301      	movs	r3, #1
 800197c:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	3301      	adds	r3, #1
 8001982:	4619      	mov	r1, r3
 8001984:	6838      	ldr	r0, [r7, #0]
 8001986:	f7ff fb0d 	bl	8000fa4 <ensure>
 800198a:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <print_array+0x9a>
            {
                return false;
 8001992:	2300      	movs	r3, #0
 8001994:	e034      	b.n	8001a00 <print_array+0x104>
            }
            *output_pointer++ = ',';
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	617a      	str	r2, [r7, #20]
 800199c:	222c      	movs	r2, #44	; 0x2c
 800199e:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d004      	beq.n	80019b2 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	617a      	str	r2, [r7, #20]
 80019ae:	2220      	movs	r2, #32
 80019b0:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	441a      	add	r2, r3
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1be      	bne.n	800194e <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 80019d0:	2102      	movs	r1, #2
 80019d2:	6838      	ldr	r0, [r7, #0]
 80019d4:	f7ff fae6 	bl	8000fa4 <ensure>
 80019d8:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <print_array+0xe8>
    {
        return false;
 80019e0:	2300      	movs	r3, #0
 80019e2:	e00d      	b.n	8001a00 <print_array+0x104>
    }
    *output_pointer++ = ']';
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	617a      	str	r2, [r7, #20]
 80019ea:	225d      	movs	r2, #93	; 0x5d
 80019ec:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	1e5a      	subs	r2, r3, #1
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	60da      	str	r2, [r3, #12]

    return true;
 80019fe:	2301      	movs	r3, #1
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <print_object>:
    return false;
}

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <print_object+0x22>
    {
        return false;
 8001a26:	2300      	movs	r3, #0
 8001a28:	e108      	b.n	8001c3c <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <print_object+0x2e>
 8001a32:	2302      	movs	r3, #2
 8001a34:	e000      	b.n	8001a38 <print_object+0x30>
 8001a36:	2301      	movs	r3, #1
 8001a38:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	4619      	mov	r1, r3
 8001a40:	6838      	ldr	r0, [r7, #0]
 8001a42:	f7ff faaf 	bl	8000fa4 <ensure>
 8001a46:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <print_object+0x4a>
    {
        return false;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	e0f4      	b.n	8001c3c <print_object+0x234>
    }

    *output_pointer++ = '{';
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	61fa      	str	r2, [r7, #28]
 8001a58:	227b      	movs	r2, #123	; 0x7b
 8001a5a:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	1c5a      	adds	r2, r3, #1
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d004      	beq.n	8001a78 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	61fa      	str	r2, [r7, #28]
 8001a74:	220a      	movs	r2, #10
 8001a76:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	441a      	add	r2, r3
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	609a      	str	r2, [r3, #8]

    while (current_item)
 8001a84:	e0a0      	b.n	8001bc8 <print_object+0x1c0>
    {
        if (output_buffer->format)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d022      	beq.n	8001ad4 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	4619      	mov	r1, r3
 8001a94:	6838      	ldr	r0, [r7, #0]
 8001a96:	f7ff fa85 	bl	8000fa4 <ensure>
 8001a9a:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <print_object+0x9e>
            {
                return false;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	e0ca      	b.n	8001c3c <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	e007      	b.n	8001abc <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	61fa      	str	r2, [r7, #28]
 8001ab2:	2209      	movs	r2, #9
 8001ab4:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d3f2      	bcc.n	8001aac <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	441a      	add	r2, r3
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	6839      	ldr	r1, [r7, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fc56 	bl	800138c <print_string_ptr>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <print_object+0xe2>
        {
            return false;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	e0a8      	b.n	8001c3c <print_object+0x234>
        }
        update_offset(output_buffer);
 8001aea:	6838      	ldr	r0, [r7, #0]
 8001aec:	f7ff faf4 	bl	80010d8 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <print_object+0xf4>
 8001af8:	2302      	movs	r3, #2
 8001afa:	e000      	b.n	8001afe <print_object+0xf6>
 8001afc:	2301      	movs	r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8001b00:	68f9      	ldr	r1, [r7, #12]
 8001b02:	6838      	ldr	r0, [r7, #0]
 8001b04:	f7ff fa4e 	bl	8000fa4 <ensure>
 8001b08:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <print_object+0x10c>
        {
            return false;
 8001b10:	2300      	movs	r3, #0
 8001b12:	e093      	b.n	8001c3c <print_object+0x234>
        }
        *output_pointer++ = ':';
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	61fa      	str	r2, [r7, #28]
 8001b1a:	223a      	movs	r2, #58	; 0x3a
 8001b1c:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d004      	beq.n	8001b30 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	61fa      	str	r2, [r7, #28]
 8001b2c:	2209      	movs	r2, #9
 8001b2e:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	441a      	add	r2, r3
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8001b3c:	6839      	ldr	r1, [r7, #0]
 8001b3e:	69b8      	ldr	r0, [r7, #24]
 8001b40:	f7ff fdf8 	bl	8001734 <print_value>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <print_object+0x146>
        {
            return false;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	e076      	b.n	8001c3c <print_object+0x234>
        }
        update_offset(output_buffer);
 8001b4e:	6838      	ldr	r0, [r7, #0]
 8001b50:	f7ff fac2 	bl	80010d8 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <print_object+0x158>
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	e000      	b.n	8001b62 <print_object+0x15a>
 8001b60:	2200      	movs	r2, #0
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <print_object+0x166>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <print_object+0x168>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	4413      	add	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	3301      	adds	r3, #1
 8001b78:	4619      	mov	r1, r3
 8001b7a:	6838      	ldr	r0, [r7, #0]
 8001b7c:	f7ff fa12 	bl	8000fa4 <ensure>
 8001b80:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <print_object+0x184>
        {
            return false;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	e057      	b.n	8001c3c <print_object+0x234>
        }
        if (current_item->next)
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d004      	beq.n	8001b9e <print_object+0x196>
        {
            *output_pointer++ = ',';
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	61fa      	str	r2, [r7, #28]
 8001b9a:	222c      	movs	r2, #44	; 0x2c
 8001b9c:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d004      	beq.n	8001bb0 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	61fa      	str	r2, [r7, #28]
 8001bac:	220a      	movs	r2, #10
 8001bae:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	441a      	add	r2, r3
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f47f af5b 	bne.w	8001a86 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <print_object+0x1d8>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	e000      	b.n	8001be2 <print_object+0x1da>
 8001be0:	2302      	movs	r3, #2
 8001be2:	4619      	mov	r1, r3
 8001be4:	6838      	ldr	r0, [r7, #0]
 8001be6:	f7ff f9dd 	bl	8000fa4 <ensure>
 8001bea:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <print_object+0x1ee>
    {
        return false;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e022      	b.n	8001c3c <print_object+0x234>
    }
    if (output_buffer->format)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d010      	beq.n	8001c20 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	e007      	b.n	8001c14 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	61fa      	str	r2, [r7, #28]
 8001c0a:	2209      	movs	r2, #9
 8001c0c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	3301      	adds	r3, #1
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d3f1      	bcc.n	8001c04 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	61fa      	str	r2, [r7, #28]
 8001c26:	227d      	movs	r2, #125	; 0x7d
 8001c28:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	1e5a      	subs	r2, r3, #1
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	60da      	str	r2, [r3, #12]

    return true;
 8001c3a:	2301      	movs	r3, #1
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3720      	adds	r7, #32
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	605a      	str	r2, [r3, #4]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b084      	sub	sp, #16
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d006      	beq.n	8001c88 <add_item_to_array+0x22>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <add_item_to_array+0x22>
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d101      	bne.n	8001c8c <add_item_to_array+0x26>
    {
        return false;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	e01e      	b.n	8001cca <add_item_to_array+0x64>
    }

    child = array->child;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d109      	bne.n	8001cac <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	e00d      	b.n	8001cc8 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d009      	beq.n	8001cc8 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	6839      	ldr	r1, [r7, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff ffc2 	bl	8001c44 <suffix_object>
            array->child->prev = item;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8001cc8:	2301      	movs	r3, #1
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8001cda:	687b      	ldr	r3, [r7, #4]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d009      	beq.n	8001d18 <add_item_to_object+0x30>
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d006      	beq.n	8001d18 <add_item_to_object+0x30>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <add_item_to_object+0x30>
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d101      	bne.n	8001d1c <add_item_to_object+0x34>
    {
        return false;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	e036      	b.n	8001d8a <add_item_to_object+0xa2>
    }

    if (constant_key)
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d009      	beq.n	8001d36 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 8001d22:	68b8      	ldr	r0, [r7, #8]
 8001d24:	f7ff ffd5 	bl	8001cd2 <cast_away_const>
 8001d28:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	e00e      	b.n	8001d54 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8001d36:	6839      	ldr	r1, [r7, #0]
 8001d38:	68b8      	ldr	r0, [r7, #8]
 8001d3a:	f7ff f8a3 	bl	8000e84 <cJSON_strdup>
 8001d3e:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <add_item_to_object+0x62>
        {
            return false;
 8001d46:	2300      	movs	r3, #0
 8001d48:	e01f      	b.n	8001d8a <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d52:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d109      	bne.n	8001d74 <add_item_to_object+0x8c>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d005      	beq.n	8001d74 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6a12      	ldr	r2, [r2, #32]
 8001d70:	4610      	mov	r0, r2
 8001d72:	4798      	blx	r3
    }

    item->string = new_key;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f7ff ff6f 	bl	8001c66 <add_item_to_array>
 8001d88:	4603      	mov	r3, r0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <cJSON_AddItemToObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af02      	add	r7, sp, #8
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
    return add_item_to_object(object, string, item, &global_hooks, false);
 8001da0:	2300      	movs	r3, #0
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <cJSON_AddItemToObject+0x28>)
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f7ff ff9c 	bl	8001ce8 <add_item_to_object>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000004 	.word	0x20000004

08001dc0 <cJSON_CreateString>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8001dc8:	480f      	ldr	r0, [pc, #60]	; (8001e08 <cJSON_CreateString+0x48>)
 8001dca:	f7ff f883 	bl	8000ed4 <cJSON_New_Item>
 8001dce:	60f8      	str	r0, [r7, #12]
    if(item)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d012      	beq.n	8001dfc <cJSON_CreateString+0x3c>
    {
        item->type = cJSON_String;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2210      	movs	r2, #16
 8001dda:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 8001ddc:	490a      	ldr	r1, [pc, #40]	; (8001e08 <cJSON_CreateString+0x48>)
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff f850 	bl	8000e84 <cJSON_strdup>
 8001de4:	4602      	mov	r2, r0
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d104      	bne.n	8001dfc <cJSON_CreateString+0x3c>
        {
            cJSON_Delete(item);
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f7ff f884 	bl	8000f00 <cJSON_Delete>
            return NULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	e000      	b.n	8001dfe <cJSON_CreateString+0x3e>
        }
    }

    return item;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000004 	.word	0x20000004

08001e0c <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8001e12:	4807      	ldr	r0, [pc, #28]	; (8001e30 <cJSON_CreateObject+0x24>)
 8001e14:	f7ff f85e 	bl	8000ed4 <cJSON_New_Item>
 8001e18:	6078      	str	r0, [r7, #4]
    if (item)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d002      	beq.n	8001e26 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2240      	movs	r2, #64	; 0x40
 8001e24:	60da      	str	r2, [r3, #12]
    }

    return item;
 8001e26:	687b      	ldr	r3, [r7, #4]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000004 	.word	0x20000004

08001e34 <eventLoopTask>:

#include "event_loop.h"
#include "dht11.h"

void eventLoopTask(void const * argument)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	osEvent evt;
	int32_t i;
	DEBUG_PRINT("eventLoopTask..");
 8001e3c:	2310      	movs	r3, #16
 8001e3e:	4a33      	ldr	r2, [pc, #204]	; (8001f0c <eventLoopTask+0xd8>)
 8001e40:	4933      	ldr	r1, [pc, #204]	; (8001f10 <eventLoopTask+0xdc>)
 8001e42:	4834      	ldr	r0, [pc, #208]	; (8001f14 <eventLoopTask+0xe0>)
 8001e44:	f003 f842 	bl	8004ecc <_debugPrint>
  /* Infinite loop */
  for (;;)
  {
		evt = osSignalWait(0x00FF, 50);
 8001e48:	f107 0308 	add.w	r3, r7, #8
 8001e4c:	2232      	movs	r2, #50	; 0x32
 8001e4e:	21ff      	movs	r1, #255	; 0xff
 8001e50:	4618      	mov	r0, r3
 8001e52:	f00a fd09 	bl	800c868 <osSignalWait>
		if (evt.status == osEventSignal)
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d152      	bne.n	8001f02 <eventLoopTask+0xce>
		{
			for (i=0; i<=5; i++)
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	e04c      	b.n	8001efc <eventLoopTask+0xc8>
			{
				switch ((evt.value.signals) & (1U << i))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4619      	mov	r1, r3
 8001e66:	2201      	movs	r2, #1
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	400b      	ands	r3, r1
 8001e70:	3b01      	subs	r3, #1
 8001e72:	2b0f      	cmp	r3, #15
 8001e74:	d83e      	bhi.n	8001ef4 <eventLoopTask+0xc0>
 8001e76:	a201      	add	r2, pc, #4	; (adr r2, 8001e7c <eventLoopTask+0x48>)
 8001e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e7c:	08001ed9 	.word	0x08001ed9
 8001e80:	08001ed9 	.word	0x08001ed9
 8001e84:	08001ef5 	.word	0x08001ef5
 8001e88:	08001ed9 	.word	0x08001ed9
 8001e8c:	08001ef5 	.word	0x08001ef5
 8001e90:	08001ef5 	.word	0x08001ef5
 8001e94:	08001ef5 	.word	0x08001ef5
 8001e98:	08001ed9 	.word	0x08001ed9
 8001e9c:	08001ef5 	.word	0x08001ef5
 8001ea0:	08001ef5 	.word	0x08001ef5
 8001ea4:	08001ef5 	.word	0x08001ef5
 8001ea8:	08001ef5 	.word	0x08001ef5
 8001eac:	08001ef5 	.word	0x08001ef5
 8001eb0:	08001ef5 	.word	0x08001ef5
 8001eb4:	08001ef5 	.word	0x08001ef5
 8001eb8:	08001ebd 	.word	0x08001ebd
				{
					case UPDATE_SENSOR_VALUE:
						ring_buffer_queue(&ring_buffer, (char)(evt.value.signals) & (1U << i));
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	4013      	ands	r3, r2
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4811      	ldr	r0, [pc, #68]	; (8001f18 <eventLoopTask+0xe4>)
 8001ed2:	f000 fd13 	bl	80028fc <ring_buffer_queue>
						break;
 8001ed6:	e00e      	b.n	8001ef6 <eventLoopTask+0xc2>
					case BUZZER_ON:
					case BUZZER_OFF:
					case HUM_ON:
					case HUM_OFF:

						ring_buffer_queue(&ring_buffer, (char)(evt.value.signals) & (1U << i));
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	2101      	movs	r1, #1
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	4619      	mov	r1, r3
 8001eec:	480a      	ldr	r0, [pc, #40]	; (8001f18 <eventLoopTask+0xe4>)
 8001eee:	f000 fd05 	bl	80028fc <ring_buffer_queue>
						break;
 8001ef2:	e000      	b.n	8001ef6 <eventLoopTask+0xc2>

					default:
						break;
 8001ef4:	bf00      	nop
			for (i=0; i<=5; i++)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	2b05      	cmp	r3, #5
 8001f00:	ddaf      	ble.n	8001e62 <eventLoopTask+0x2e>
				}
			}
		}
		osDelay(1);
 8001f02:	2001      	movs	r0, #1
 8001f04:	f00a fc5b 	bl	800c7be <osDelay>
		evt = osSignalWait(0x00FF, 50);
 8001f08:	e79e      	b.n	8001e48 <eventLoopTask+0x14>
 8001f0a:	bf00      	nop
 8001f0c:	0802a00c 	.word	0x0802a00c
 8001f10:	08028c88 	.word	0x08028c88
 8001f14:	08028ca8 	.word	0x08028ca8
 8001f18:	2000a3c0 	.word	0x2000a3c0

08001f1c <eventLoopInit>:
  }
  /* USER CODE END StartDefaultTask */
}

void eventLoopInit(osPriority Priority)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08c      	sub	sp, #48	; 0x30
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	80fb      	strh	r3, [r7, #6]
	osSemaphoreDef(eventLoopHandle);
 8001f26:	2300      	movs	r3, #0
 8001f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	eventLoopHandle = osSemaphoreCreate(osSemaphore(eventLoopHandle), 1);
 8001f2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f32:	2101      	movs	r1, #1
 8001f34:	4618      	mov	r0, r3
 8001f36:	f00a fce3 	bl	800c900 <osSemaphoreCreate>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	4a0e      	ldr	r2, [pc, #56]	; (8001f78 <eventLoopInit+0x5c>)
 8001f3e:	6013      	str	r3, [r2, #0]
	osThreadDef(eventLoopTaskName, eventLoopTask, Priority, 0, _EVENT_LOOP_TASK_SIZE);
 8001f40:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <eventLoopInit+0x60>)
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <eventLoopInit+0x64>)
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	82bb      	strh	r3, [r7, #20]
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61bb      	str	r3, [r7, #24]
 8001f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f54:	61fb      	str	r3, [r7, #28]
 8001f56:	2300      	movs	r3, #0
 8001f58:	623b      	str	r3, [r7, #32]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
	eventLoopTaskHandle = osThreadCreate(osThread(eventLoopTaskName), NULL);
 8001f5e:	f107 030c 	add.w	r3, r7, #12
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f00a fbde 	bl	800c726 <osThreadCreate>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	4a05      	ldr	r2, [pc, #20]	; (8001f84 <eventLoopInit+0x68>)
 8001f6e:	6013      	str	r3, [r2, #0]
}
 8001f70:	bf00      	nop
 8001f72:	3730      	adds	r7, #48	; 0x30
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	2000a39c 	.word	0x2000a39c
 8001f7c:	08028cb8 	.word	0x08028cb8
 8001f80:	08001e35 	.word	0x08001e35
 8001f84:	2000a390 	.word	0x2000a390

08001f88 <createJsonMessage>:
//osThreadId 		WifiTaskHandle;
extern osSemaphoreId 	WifiSemHandle;
PRODUCT_STATUS          productStatus;

static char *createJsonMessage()
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
	char value[8] = {0,};
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
	char *string = NULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
	cJSON *name  = NULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
	cJSON *monitor = cJSON_CreateObject();
 8001f9e:	f7ff ff35 	bl	8001e0c <cJSON_CreateObject>
 8001fa2:	60f8      	str	r0, [r7, #12]

    if (monitor == NULL)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d055      	beq.n	8002056 <createJsonMessage+0xce>
    {
        goto end;
    }

    /* Temp */
    snprintf(value, sizeof(value), "%u", dht11Dev.temparature);
 8001faa:	4b33      	ldr	r3, [pc, #204]	; (8002078 <createJsonMessage+0xf0>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	1d38      	adds	r0, r7, #4
 8001fb0:	4a32      	ldr	r2, [pc, #200]	; (800207c <createJsonMessage+0xf4>)
 8001fb2:	2108      	movs	r1, #8
 8001fb4:	f025 fadc 	bl	8027570 <sniprintf>
    name = cJSON_CreateString(value);
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff ff00 	bl	8001dc0 <cJSON_CreateString>
 8001fc0:	6138      	str	r0, [r7, #16]
    if (name == NULL)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d048      	beq.n	800205a <createJsonMessage+0xd2>
    {
        goto end;
    }
    cJSON_AddItemToObject(monitor, "temp", name);
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	492d      	ldr	r1, [pc, #180]	; (8002080 <createJsonMessage+0xf8>)
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f7ff fee1 	bl	8001d94 <cJSON_AddItemToObject>


    memset(value, 0x0, sizeof(value));
 8001fd2:	1d3b      	adds	r3, r7, #4
 8001fd4:	2208      	movs	r2, #8
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f024 fecd 	bl	8026d78 <memset>
    /* Humidity */
    snprintf(value, sizeof(value), "%u", dht11Dev.humidity);
 8001fde:	4b26      	ldr	r3, [pc, #152]	; (8002078 <createJsonMessage+0xf0>)
 8001fe0:	785b      	ldrb	r3, [r3, #1]
 8001fe2:	1d38      	adds	r0, r7, #4
 8001fe4:	4a25      	ldr	r2, [pc, #148]	; (800207c <createJsonMessage+0xf4>)
 8001fe6:	2108      	movs	r1, #8
 8001fe8:	f025 fac2 	bl	8027570 <sniprintf>
    name = cJSON_CreateString(value);
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fee6 	bl	8001dc0 <cJSON_CreateString>
 8001ff4:	6138      	str	r0, [r7, #16]
    if (name == NULL)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d030      	beq.n	800205e <createJsonMessage+0xd6>
    {
        goto end;
    }
    cJSON_AddItemToObject(monitor, "humidity", name);
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4921      	ldr	r1, [pc, #132]	; (8002084 <createJsonMessage+0xfc>)
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f7ff fec7 	bl	8001d94 <cJSON_AddItemToObject>

    memset(value, 0x0, sizeof(value));
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	2208      	movs	r2, #8
 800200a:	2100      	movs	r1, #0
 800200c:	4618      	mov	r0, r3
 800200e:	f024 feb3 	bl	8026d78 <memset>
    /* Humidity */
    snprintf(value, sizeof(value), "%d", productStatus);
 8002012:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <createJsonMessage+0x100>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	1d38      	adds	r0, r7, #4
 8002018:	4a1c      	ldr	r2, [pc, #112]	; (800208c <createJsonMessage+0x104>)
 800201a:	2108      	movs	r1, #8
 800201c:	f025 faa8 	bl	8027570 <sniprintf>
    name = cJSON_CreateString(value);
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff fecc 	bl	8001dc0 <cJSON_CreateString>
 8002028:	6138      	str	r0, [r7, #16]
    if (name == NULL)
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d018      	beq.n	8002062 <createJsonMessage+0xda>
    {
        goto end;
    }
    cJSON_AddItemToObject(monitor, "status", name);
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4917      	ldr	r1, [pc, #92]	; (8002090 <createJsonMessage+0x108>)
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f7ff fead 	bl	8001d94 <cJSON_AddItemToObject>


    string = cJSON_Print(monitor);
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f7ff fb6a 	bl	8001714 <cJSON_Print>
 8002040:	6178      	str	r0, [r7, #20]
    if (string == NULL)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10e      	bne.n	8002066 <createJsonMessage+0xde>
    {
        DEBUG_PRINT("Failed to print monitor.");
 8002048:	2344      	movs	r3, #68	; 0x44
 800204a:	4a12      	ldr	r2, [pc, #72]	; (8002094 <createJsonMessage+0x10c>)
 800204c:	4912      	ldr	r1, [pc, #72]	; (8002098 <createJsonMessage+0x110>)
 800204e:	4813      	ldr	r0, [pc, #76]	; (800209c <createJsonMessage+0x114>)
 8002050:	f002 ff3c 	bl	8004ecc <_debugPrint>
 8002054:	e008      	b.n	8002068 <createJsonMessage+0xe0>
        goto end;
 8002056:	bf00      	nop
 8002058:	e006      	b.n	8002068 <createJsonMessage+0xe0>
        goto end;
 800205a:	bf00      	nop
 800205c:	e004      	b.n	8002068 <createJsonMessage+0xe0>
        goto end;
 800205e:	bf00      	nop
 8002060:	e002      	b.n	8002068 <createJsonMessage+0xe0>
        goto end;
 8002062:	bf00      	nop
 8002064:	e000      	b.n	8002068 <createJsonMessage+0xe0>
    }

    end:
 8002066:	bf00      	nop
        cJSON_Delete(monitor);
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f7fe ff49 	bl	8000f00 <cJSON_Delete>
        return string;
 800206e:	697b      	ldr	r3, [r7, #20]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	2000a3a4 	.word	0x2000a3a4
 800207c:	08028ccc 	.word	0x08028ccc
 8002080:	08028cd0 	.word	0x08028cd0
 8002084:	08028cd8 	.word	0x08028cd8
 8002088:	2000a3b8 	.word	0x2000a3b8
 800208c:	08028ce4 	.word	0x08028ce4
 8002090:	08028ce8 	.word	0x08028ce8
 8002094:	0802a01c 	.word	0x0802a01c
 8002098:	08028cf0 	.word	0x08028cf0
 800209c:	08028d10 	.word	0x08028d10

080020a0 <messageForwardServer>:

static void messageForwardServer()
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
	char *message = NULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	607b      	str	r3, [r7, #4]

	message = createJsonMessage();
 80020aa:	f7ff ff6d 	bl	8001f88 <createJsonMessage>
 80020ae:	6078      	str	r0, [r7, #4]
	ayncPublish(message);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 fb6f 	bl	8002794 <ayncPublish>

	if (message)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <messageForwardServer+0x22>
	{
		free(message);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f024 fe2b 	bl	8026d18 <free>
	}

}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <messageForwardLcdTask>:

osStatus messageForwardLcdTask(ENV_MSG *envData)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	return osMessagePut(envQueueHandle, (uint32_t)envData, 10);
 80020d4:	4b05      	ldr	r3, [pc, #20]	; (80020ec <messageForwardLcdTask+0x20>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	220a      	movs	r2, #10
 80020dc:	4618      	mov	r0, r3
 80020de:	f00a fcfb 	bl	800cad8 <osMessagePut>
 80020e2:	4603      	mov	r3, r0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	2000ae20 	.word	0x2000ae20

080020f0 <sensorEventHandling>:

void sensorEventHandling()
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
	ENV_MSG envData;

	if (osSemaphoreWait(sensorSemHandle, 1) == osOK)
 80020f6:	4b10      	ldr	r3, [pc, #64]	; (8002138 <sensorEventHandling+0x48>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2101      	movs	r1, #1
 80020fc:	4618      	mov	r0, r3
 80020fe:	f00a fc3f 	bl	800c980 <osSemaphoreWait>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d113      	bne.n	8002130 <sensorEventHandling+0x40>
	{
		envData.humid    = (int)dht11Dev.humidity;
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <sensorEventHandling+0x4c>)
 800210a:	785b      	ldrb	r3, [r3, #1]
 800210c:	607b      	str	r3, [r7, #4]
		envData.temp     = (int)dht11Dev.temparature;
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <sensorEventHandling+0x4c>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	603b      	str	r3, [r7, #0]

		if ( (messageForwardLcdTask(&envData) == osOK) && (isConnectBroker == true) )
 8002114:	463b      	mov	r3, r7
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff ffd8 	bl	80020cc <messageForwardLcdTask>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d106      	bne.n	8002130 <sensorEventHandling+0x40>
 8002122:	4b07      	ldr	r3, [pc, #28]	; (8002140 <sensorEventHandling+0x50>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d002      	beq.n	8002130 <sensorEventHandling+0x40>
		{
			messageForwardServer(&dht11Dev);
 800212a:	4804      	ldr	r0, [pc, #16]	; (800213c <sensorEventHandling+0x4c>)
 800212c:	f7ff ffb8 	bl	80020a0 <messageForwardServer>
		}
	}
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	2000ae14 	.word	0x2000ae14
 800213c:	2000a3a4 	.word	0x2000a3a4
 8002140:	2000a442 	.word	0x2000a442

08002144 <_workTask>:

void _workTask(void const * argument)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08e      	sub	sp, #56	; 0x38
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
	//ENV_MSG envData;
	char buf;
	int cnt;
	char debug[32] = {0,};
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	f107 0310 	add.w	r3, r7, #16
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
 8002160:	615a      	str	r2, [r3, #20]
 8002162:	619a      	str	r2, [r3, #24]

	ring_buffer_init(&ring_buffer);
 8002164:	4833      	ldr	r0, [pc, #204]	; (8002234 <_workTask+0xf0>)
 8002166:	f000 fbb7 	bl	80028d8 <ring_buffer_init>

	DEBUG_PRINT("_workTask... init !!!!");
 800216a:	2378      	movs	r3, #120	; 0x78
 800216c:	4a32      	ldr	r2, [pc, #200]	; (8002238 <_workTask+0xf4>)
 800216e:	4933      	ldr	r1, [pc, #204]	; (800223c <_workTask+0xf8>)
 8002170:	4833      	ldr	r0, [pc, #204]	; (8002240 <_workTask+0xfc>)
 8002172:	f002 feab 	bl	8004ecc <_debugPrint>

	for (;;)
	{
		for (cnt = 0; ring_buffer_dequeue(&ring_buffer, &buf) > 0; cnt++)
 8002176:	2300      	movs	r3, #0
 8002178:	637b      	str	r3, [r7, #52]	; 0x34
 800217a:	e04e      	b.n	800221a <_workTask+0xd6>
		{
			/* Do something with buf... */
			int32_t evn=0;
 800217c:	2300      	movs	r3, #0
 800217e:	633b      	str	r3, [r7, #48]	; 0x30
			evn = (int32_t)buf;
 8002180:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002184:	633b      	str	r3, [r7, #48]	; 0x30
			snprintf(debug, sizeof(debug), "dev:[%lu]\r\n", evn);
 8002186:	f107 000c 	add.w	r0, r7, #12
 800218a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218c:	4a2d      	ldr	r2, [pc, #180]	; (8002244 <_workTask+0x100>)
 800218e:	2120      	movs	r1, #32
 8002190:	f025 f9ee 	bl	8027570 <sniprintf>
 8002194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002196:	3b01      	subs	r3, #1
 8002198:	2b0f      	cmp	r3, #15
 800219a:	d83a      	bhi.n	8002212 <_workTask+0xce>
 800219c:	a201      	add	r2, pc, #4	; (adr r2, 80021a4 <_workTask+0x60>)
 800219e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a2:	bf00      	nop
 80021a4:	08002213 	.word	0x08002213
 80021a8:	08002213 	.word	0x08002213
 80021ac:	08002213 	.word	0x08002213
 80021b0:	080021eb 	.word	0x080021eb
 80021b4:	08002213 	.word	0x08002213
 80021b8:	08002213 	.word	0x08002213
 80021bc:	08002213 	.word	0x08002213
 80021c0:	080021ff 	.word	0x080021ff
 80021c4:	08002213 	.word	0x08002213
 80021c8:	08002213 	.word	0x08002213
 80021cc:	08002213 	.word	0x08002213
 80021d0:	08002213 	.word	0x08002213
 80021d4:	08002213 	.word	0x08002213
 80021d8:	08002213 	.word	0x08002213
 80021dc:	08002213 	.word	0x08002213
 80021e0:	080021e5 	.word	0x080021e5

			switch (evn)
			{
				case UPDATE_SENSOR_VALUE:
					sensorEventHandling();
 80021e4:	f7ff ff84 	bl	80020f0 <sensorEventHandling>
					break;
 80021e8:	e014      	b.n	8002214 <_workTask+0xd0>
				case BUZZER_ON:
				case BUZZER_OFF:
					/* ToDo */
					break;
				case HUM_ON:
					productStatus = ON;
 80021ea:	4b17      	ldr	r3, [pc, #92]	; (8002248 <_workTask+0x104>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, SET);
 80021f0:	2201      	movs	r2, #1
 80021f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021f6:	4815      	ldr	r0, [pc, #84]	; (800224c <_workTask+0x108>)
 80021f8:	f004 fdee 	bl	8006dd8 <HAL_GPIO_WritePin>
					break;
 80021fc:	e00a      	b.n	8002214 <_workTask+0xd0>
				case HUM_OFF:
					HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, RESET);
 80021fe:	2200      	movs	r2, #0
 8002200:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002204:	4811      	ldr	r0, [pc, #68]	; (800224c <_workTask+0x108>)
 8002206:	f004 fde7 	bl	8006dd8 <HAL_GPIO_WritePin>
					productStatus = OFF;
 800220a:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <_workTask+0x104>)
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
					break;
 8002210:	e000      	b.n	8002214 <_workTask+0xd0>

				default:
					break;
 8002212:	bf00      	nop
		for (cnt = 0; ring_buffer_dequeue(&ring_buffer, &buf) > 0; cnt++)
 8002214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002216:	3301      	adds	r3, #1
 8002218:	637b      	str	r3, [r7, #52]	; 0x34
 800221a:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800221e:	4619      	mov	r1, r3
 8002220:	4804      	ldr	r0, [pc, #16]	; (8002234 <_workTask+0xf0>)
 8002222:	f000 fb98 	bl	8002956 <ring_buffer_dequeue>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1a7      	bne.n	800217c <_workTask+0x38>
			}
		}
	    osDelay(1);
 800222c:	2001      	movs	r0, #1
 800222e:	f00a fac6 	bl	800c7be <osDelay>
		for (cnt = 0; ring_buffer_dequeue(&ring_buffer, &buf) > 0; cnt++)
 8002232:	e7a0      	b.n	8002176 <_workTask+0x32>
 8002234:	2000a3c0 	.word	0x2000a3c0
 8002238:	0802a030 	.word	0x0802a030
 800223c:	08028cf0 	.word	0x08028cf0
 8002240:	08028d2c 	.word	0x08028d2c
 8002244:	08028d44 	.word	0x08028d44
 8002248:	2000a3b8 	.word	0x2000a3b8
 800224c:	40021800 	.word	0x40021800

08002250 <workTaskInit>:
	}
}

void workTaskInit(osPriority Priority)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08c      	sub	sp, #48	; 0x30
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	80fb      	strh	r3, [r7, #6]
	osSemaphoreDef(workHandle);
 800225a:	2300      	movs	r3, #0
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
 800225e:	2300      	movs	r3, #0
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c
	workHandle = osSemaphoreCreate(osSemaphore(workHandle), 1);
 8002262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002266:	2101      	movs	r1, #1
 8002268:	4618      	mov	r0, r3
 800226a:	f00a fb49 	bl	800c900 <osSemaphoreCreate>
 800226e:	4603      	mov	r3, r0
 8002270:	4a0e      	ldr	r2, [pc, #56]	; (80022ac <workTaskInit+0x5c>)
 8002272:	6013      	str	r3, [r2, #0]
	osThreadDef(workTaskName, _workTask, Priority, 0, _WORK_TASK_SIZE);
 8002274:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <workTaskInit+0x60>)
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <workTaskInit+0x64>)
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	88fb      	ldrh	r3, [r7, #6]
 800227e:	82bb      	strh	r3, [r7, #20]
 8002280:	2300      	movs	r3, #0
 8002282:	61bb      	str	r3, [r7, #24]
 8002284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002288:	61fb      	str	r3, [r7, #28]
 800228a:	2300      	movs	r3, #0
 800228c:	623b      	str	r3, [r7, #32]
 800228e:	2300      	movs	r3, #0
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
	workTaskHandle = osThreadCreate(osThread(workTaskName), NULL);
 8002292:	f107 030c 	add.w	r3, r7, #12
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f00a fa44 	bl	800c726 <osThreadCreate>
 800229e:	4603      	mov	r3, r0
 80022a0:	4a05      	ldr	r2, [pc, #20]	; (80022b8 <workTaskInit+0x68>)
 80022a2:	6013      	str	r3, [r2, #0]
}
 80022a4:	bf00      	nop
 80022a6:	3730      	adds	r7, #48	; 0x30
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	2000a3bc 	.word	0x2000a3bc
 80022b0:	08028d50 	.word	0x08028d50
 80022b4:	08002145 	.word	0x08002145
 80022b8:	2000a444 	.word	0x2000a444

080022bc <transport_getdata>:
extern ring_buffer_t         wifi_ring_buffer;
extern osSemaphoreId 	     workHandle;
extern osThreadId 		     eventLoopTaskHandle;

int transport_getdata(uint8_t *buf, int buflen)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
	int i;

	for (i=0; i<buflen && (!ring_buffer_is_empty(&wifi_ring_buffer)); i++)
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	e009      	b.n	80022e0 <transport_getdata+0x24>
	{
		ring_buffer_dequeue(&wifi_ring_buffer, (char *)(&buf[i]));
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	4413      	add	r3, r2
 80022d2:	4619      	mov	r1, r3
 80022d4:	480a      	ldr	r0, [pc, #40]	; (8002300 <transport_getdata+0x44>)
 80022d6:	f000 fb3e 	bl	8002956 <ring_buffer_dequeue>
	for (i=0; i<buflen && (!ring_buffer_is_empty(&wifi_ring_buffer)); i++)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	3301      	adds	r3, #1
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	da05      	bge.n	80022f4 <transport_getdata+0x38>
 80022e8:	4805      	ldr	r0, [pc, #20]	; (8002300 <transport_getdata+0x44>)
 80022ea:	f000 fac7 	bl	800287c <ring_buffer_is_empty>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0eb      	beq.n	80022cc <transport_getdata+0x10>
	}

	return buflen;
 80022f4:	683b      	ldr	r3, [r7, #0]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	2000a45c 	.word	0x2000a45c

08002304 <Connect_Broker>:

int Connect_Broker()
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b0fa      	sub	sp, #488	; 0x1e8
 8002308:	af00      	add	r7, sp, #0
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
 800230a:	4a57      	ldr	r2, [pc, #348]	; (8002468 <Connect_Broker+0x164>)
 800230c:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8002310:	4611      	mov	r1, r2
 8002312:	2258      	movs	r2, #88	; 0x58
 8002314:	4618      	mov	r0, r3
 8002316:	f024 fd07 	bl	8026d28 <memcpy>
	unsigned char buffer[128];
	int buflen = sizeof(buffer);
 800231a:	2380      	movs	r3, #128	; 0x80
 800231c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
	char tx_buffer[256] = {0,};
 8002320:	1d3b      	adds	r3, r7, #4
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	3304      	adds	r3, #4
 8002328:	22fc      	movs	r2, #252	; 0xfc
 800232a:	2100      	movs	r1, #0
 800232c:	4618      	mov	r0, r3
 800232e:	f024 fd23 	bl	8026d78 <memset>
	int length;

	uint8_t responMsg = 0xff;
 8002332:	23ff      	movs	r3, #255	; 0xff
 8002334:	f887 31e3 	strb.w	r3, [r7, #483]	; 0x1e3
	uint8_t sessionPresent = 0;
 8002338:	1cfb      	adds	r3, r7, #3
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]
	uint8_t connack_rc = 0;
 800233e:	1cbb      	adds	r3, r7, #2
 8002340:	2200      	movs	r2, #0
 8002342:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)"AT+CIPCLOSE\r\n",strlen("AT+CIPCLOSE\r\n"),1000);
 8002344:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002348:	220d      	movs	r2, #13
 800234a:	4948      	ldr	r1, [pc, #288]	; (800246c <Connect_Broker+0x168>)
 800234c:	4848      	ldr	r0, [pc, #288]	; (8002470 <Connect_Broker+0x16c>)
 800234e:	f008 fb2a 	bl	800a9a6 <HAL_UART_Transmit>
	HAL_Delay(100);
 8002352:	2064      	movs	r0, #100	; 0x64
 8002354:	f003 fee8 	bl	8006128 <HAL_Delay>
	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"),1000);
 8002358:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800235c:	220d      	movs	r2, #13
 800235e:	4945      	ldr	r1, [pc, #276]	; (8002474 <Connect_Broker+0x170>)
 8002360:	4843      	ldr	r0, [pc, #268]	; (8002470 <Connect_Broker+0x16c>)
 8002362:	f008 fb20 	bl	800a9a6 <HAL_UART_Transmit>
	HAL_Delay(100);
 8002366:	2064      	movs	r0, #100	; 0x64
 8002368:	f003 fede 	bl	8006128 <HAL_Delay>
	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)"AT+CIFSR\r\n",strlen("AT+CIFSR\r\n"),1000);
 800236c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002370:	220a      	movs	r2, #10
 8002372:	4941      	ldr	r1, [pc, #260]	; (8002478 <Connect_Broker+0x174>)
 8002374:	483e      	ldr	r0, [pc, #248]	; (8002470 <Connect_Broker+0x16c>)
 8002376:	f008 fb16 	bl	800a9a6 <HAL_UART_Transmit>
	HAL_Delay(100);
 800237a:	2064      	movs	r0, #100	; 0x64
 800237c:	f003 fed4 	bl	8006128 <HAL_Delay>
	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)tx_buffer,sprintf(tx_buffer,"AT+CIPSTART=\"TCP\",\"%s\",%s\r\n", HOST_IP, HOST_PORT),5000);
 8002380:	1d38      	adds	r0, r7, #4
 8002382:	4b3e      	ldr	r3, [pc, #248]	; (800247c <Connect_Broker+0x178>)
 8002384:	4a3e      	ldr	r2, [pc, #248]	; (8002480 <Connect_Broker+0x17c>)
 8002386:	493f      	ldr	r1, [pc, #252]	; (8002484 <Connect_Broker+0x180>)
 8002388:	f025 f926 	bl	80275d8 <siprintf>
 800238c:	4603      	mov	r3, r0
 800238e:	b29a      	uxth	r2, r3
 8002390:	1d39      	adds	r1, r7, #4
 8002392:	f241 3388 	movw	r3, #5000	; 0x1388
 8002396:	4836      	ldr	r0, [pc, #216]	; (8002470 <Connect_Broker+0x16c>)
 8002398:	f008 fb05 	bl	800a9a6 <HAL_UART_Transmit>
	HAL_Delay(2000);
 800239c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80023a0:	f003 fec2 	bl	8006128 <HAL_Delay>

	connectData.MQTTVersion = 3;
 80023a4:	2303      	movs	r3, #3
 80023a6:	f887 318c 	strb.w	r3, [r7, #396]	; 0x18c
	connectData.clientID.cstring = clientID1;
 80023aa:	4b37      	ldr	r3, [pc, #220]	; (8002488 <Connect_Broker+0x184>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	connectData.keepAliveInterval = 60 * 2;
 80023b2:	2378      	movs	r3, #120	; 0x78
 80023b4:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c

	length = MQTTSerialize_connect(buffer, buflen, &connectData);
 80023b8:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 80023bc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80023c0:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 80023c4:	4618      	mov	r0, r3
 80023c6:	f009 fc0b 	bl	800bbe0 <MQTTSerialize_connect>
 80023ca:	f8c7 01dc 	str.w	r0, [r7, #476]	; 0x1dc

	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)tx_buffer,sprintf(tx_buffer,"AT+CIPSEND=%d\r\n",length),1000);
 80023ce:	1d3b      	adds	r3, r7, #4
 80023d0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80023d4:	492d      	ldr	r1, [pc, #180]	; (800248c <Connect_Broker+0x188>)
 80023d6:	4618      	mov	r0, r3
 80023d8:	f025 f8fe 	bl	80275d8 <siprintf>
 80023dc:	4603      	mov	r3, r0
 80023de:	b29a      	uxth	r2, r3
 80023e0:	1d39      	adds	r1, r7, #4
 80023e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023e6:	4822      	ldr	r0, [pc, #136]	; (8002470 <Connect_Broker+0x16c>)
 80023e8:	f008 fadd 	bl	800a9a6 <HAL_UART_Transmit>
	HAL_Delay(100);
 80023ec:	2064      	movs	r0, #100	; 0x64
 80023ee:	f003 fe9b 	bl	8006128 <HAL_Delay>

	Wifi_RxClear();
 80023f2:	f000 fcc5 	bl	8002d80 <Wifi_RxClear>
	HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)buffer, length, 1000);
 80023f6:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8002400:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002404:	481a      	ldr	r0, [pc, #104]	; (8002470 <Connect_Broker+0x16c>)
 8002406:	f008 face 	bl	800a9a6 <HAL_UART_Transmit>
	HAL_Delay(100);
 800240a:	2064      	movs	r0, #100	; 0x64
 800240c:	f003 fe8c 	bl	8006128 <HAL_Delay>

	responMsg = MQTTPacket_read(buffer, length, transport_getdata);
 8002410:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002414:	4a1e      	ldr	r2, [pc, #120]	; (8002490 <Connect_Broker+0x18c>)
 8002416:	f8d7 11dc 	ldr.w	r1, [r7, #476]	; 0x1dc
 800241a:	4618      	mov	r0, r3
 800241c:	f009 ff62 	bl	800c2e4 <MQTTPacket_read>
 8002420:	4603      	mov	r3, r0
 8002422:	f887 31e3 	strb.w	r3, [r7, #483]	; 0x1e3
	if ((responMsg != CONNACK) || (MQTTDeserialize_connack(&sessionPresent, &connack_rc, buffer, length) != 1 || connack_rc != 0))
 8002426:	f897 31e3 	ldrb.w	r3, [r7, #483]	; 0x1e3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d10e      	bne.n	800244c <Connect_Broker+0x148>
 800242e:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8002432:	1cb9      	adds	r1, r7, #2
 8002434:	1cf8      	adds	r0, r7, #3
 8002436:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800243a:	f009 fcbd 	bl	800bdb8 <MQTTDeserialize_connack>
 800243e:	4603      	mov	r3, r0
 8002440:	2b01      	cmp	r3, #1
 8002442:	d103      	bne.n	800244c <Connect_Broker+0x148>
 8002444:	1cbb      	adds	r3, r7, #2
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d004      	beq.n	8002456 <Connect_Broker+0x152>
	{
		isConnectBroker = false;
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <Connect_Broker+0x190>)
 800244e:	2200      	movs	r2, #0
 8002450:	701a      	strb	r2, [r3, #0]

		return CONNECT_FAIL;
 8002452:	2300      	movs	r3, #0
 8002454:	e003      	b.n	800245e <Connect_Broker+0x15a>
	}
	isConnectBroker = true;
 8002456:	4b0f      	ldr	r3, [pc, #60]	; (8002494 <Connect_Broker+0x190>)
 8002458:	2201      	movs	r2, #1
 800245a:	701a      	strb	r2, [r3, #0]
	return CONNECT_SUCCESS;
 800245c:	2301      	movs	r3, #1
}
 800245e:	4618      	mov	r0, r3
 8002460:	f507 77f4 	add.w	r7, r7, #488	; 0x1e8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	08028e08 	.word	0x08028e08
 800246c:	08028d98 	.word	0x08028d98
 8002470:	2000b09c 	.word	0x2000b09c
 8002474:	08028da8 	.word	0x08028da8
 8002478:	08028db8 	.word	0x08028db8
 800247c:	08028dc4 	.word	0x08028dc4
 8002480:	08028dcc 	.word	0x08028dcc
 8002484:	08028ddc 	.word	0x08028ddc
 8002488:	20000010 	.word	0x20000010
 800248c:	08028df8 	.word	0x08028df8
 8002490:	080022bd 	.word	0x080022bd
 8002494:	2000a442 	.word	0x2000a442

08002498 <mqttMessageHandling>:

void mqttMessageHandling(const unsigned char *payLoad, const int payloadLen)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b0a4      	sub	sp, #144	; 0x90
 800249c:	af02      	add	r7, sp, #8
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
	char message[128]={0,};
 80024a2:	2300      	movs	r3, #0
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	f107 030c 	add.w	r3, r7, #12
 80024aa:	227c      	movs	r2, #124	; 0x7c
 80024ac:	2100      	movs	r1, #0
 80024ae:	4618      	mov	r0, r3
 80024b0:	f024 fc62 	bl	8026d78 <memset>

	snprintf(message, sizeof(message), "%.*s", payloadLen, payLoad);
 80024b4:	f107 0008 	add.w	r0, r7, #8
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	4a1d      	ldr	r2, [pc, #116]	; (8002534 <mqttMessageHandling+0x9c>)
 80024c0:	2180      	movs	r1, #128	; 0x80
 80024c2:	f025 f855 	bl	8027570 <sniprintf>

	if (!strncmp(message, "RUN", sizeof("RUN")))
 80024c6:	f107 0308 	add.w	r3, r7, #8
 80024ca:	491b      	ldr	r1, [pc, #108]	; (8002538 <mqttMessageHandling+0xa0>)
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fd fedf 	bl	8000290 <strcmp>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10c      	bne.n	80024f2 <mqttMessageHandling+0x5a>
	{
		DEBUG_PRINT("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
 80024d8:	2358      	movs	r3, #88	; 0x58
 80024da:	4a18      	ldr	r2, [pc, #96]	; (800253c <mqttMessageHandling+0xa4>)
 80024dc:	4918      	ldr	r1, [pc, #96]	; (8002540 <mqttMessageHandling+0xa8>)
 80024de:	4819      	ldr	r0, [pc, #100]	; (8002544 <mqttMessageHandling+0xac>)
 80024e0:	f002 fcf4 	bl	8004ecc <_debugPrint>
		osSignalSet(eventLoopTaskHandle, BUZZER_ON | HUM_ON);
 80024e4:	4b18      	ldr	r3, [pc, #96]	; (8002548 <mqttMessageHandling+0xb0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2105      	movs	r1, #5
 80024ea:	4618      	mov	r0, r3
 80024ec:	f00a f97c 	bl	800c7e8 <osSignalSet>
 80024f0:	e014      	b.n	800251c <mqttMessageHandling+0x84>
	}
	else if (!strncmp(message, "STOP", sizeof("STOP")))
 80024f2:	f107 0308 	add.w	r3, r7, #8
 80024f6:	4915      	ldr	r1, [pc, #84]	; (800254c <mqttMessageHandling+0xb4>)
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fd fec9 	bl	8000290 <strcmp>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10b      	bne.n	800251c <mqttMessageHandling+0x84>
	{
		DEBUG_PRINT("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
 8002504:	235d      	movs	r3, #93	; 0x5d
 8002506:	4a0d      	ldr	r2, [pc, #52]	; (800253c <mqttMessageHandling+0xa4>)
 8002508:	490d      	ldr	r1, [pc, #52]	; (8002540 <mqttMessageHandling+0xa8>)
 800250a:	4811      	ldr	r0, [pc, #68]	; (8002550 <mqttMessageHandling+0xb8>)
 800250c:	f002 fcde 	bl	8004ecc <_debugPrint>
		osSignalSet(eventLoopTaskHandle, BUZZER_OFF | HUM_OFF);
 8002510:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <mqttMessageHandling+0xb0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	210a      	movs	r1, #10
 8002516:	4618      	mov	r0, r3
 8002518:	f00a f966 	bl	800c7e8 <osSignalSet>
	}
	DEBUG_PRINT(message);
 800251c:	f107 0008 	add.w	r0, r7, #8
 8002520:	2360      	movs	r3, #96	; 0x60
 8002522:	4a06      	ldr	r2, [pc, #24]	; (800253c <mqttMessageHandling+0xa4>)
 8002524:	4906      	ldr	r1, [pc, #24]	; (8002540 <mqttMessageHandling+0xa8>)
 8002526:	f002 fcd1 	bl	8004ecc <_debugPrint>
}
 800252a:	bf00      	nop
 800252c:	3788      	adds	r7, #136	; 0x88
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	08028e60 	.word	0x08028e60
 8002538:	08028e68 	.word	0x08028e68
 800253c:	0802a03c 	.word	0x0802a03c
 8002540:	08028e6c 	.word	0x08028e6c
 8002544:	08028e84 	.word	0x08028e84
 8002548:	2000a390 	.word	0x2000a390
 800254c:	08028eb8 	.word	0x08028eb8
 8002550:	08028ec0 	.word	0x08028ec0

08002554 <PacketProcessing>:

void PacketProcessing()
{
 8002554:	b590      	push	{r4, r7, lr}
 8002556:	b0b3      	sub	sp, #204	; 0xcc
 8002558:	af06      	add	r7, sp, #24
	unsigned char buffer[128];
	int buflen = sizeof(buffer);
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		unsigned char* payload_in;
		unsigned short msgid, submsgid;
		int payloadlen_in, qos, subcount;
		MQTTString receivedTopic;

		messageType = MQTTPacket_read(buffer, buflen, transport_getdata);
 8002560:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002564:	4a2c      	ldr	r2, [pc, #176]	; (8002618 <PacketProcessing+0xc4>)
 8002566:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800256a:	4618      	mov	r0, r3
 800256c:	f009 feba 	bl	800c2e4 <MQTTPacket_read>
 8002570:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
		switch (messageType)
 8002574:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002578:	2b03      	cmp	r3, #3
 800257a:	d016      	beq.n	80025aa <PacketProcessing+0x56>
 800257c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002580:	2b09      	cmp	r3, #9
 8002582:	d137      	bne.n	80025f4 <PacketProcessing+0xa0>
		{
			case SUBACK:
				MQTTDeserialize_suback(&submsgid, 1, &subcount, &qos, buffer, buflen);
 8002584:	f107 0114 	add.w	r1, r7, #20
 8002588:	f107 0210 	add.w	r2, r7, #16
 800258c:	f107 001c 	add.w	r0, r7, #28
 8002590:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	460b      	mov	r3, r1
 800259e:	2101      	movs	r1, #1
 80025a0:	f00a f829 	bl	800c5f6 <MQTTDeserialize_suback>
				Wifi_RxClear();
 80025a4:	f000 fbec 	bl	8002d80 <Wifi_RxClear>
				break;
 80025a8:	e027      	b.n	80025fa <PacketProcessing+0xa6>

			case PUBLISH:
				if (MQTTDeserialize_publish(&dup, &qos, &retained, &msgid, &receivedTopic,
 80025aa:	f107 041e 	add.w	r4, r7, #30
 80025ae:	f107 0227 	add.w	r2, r7, #39	; 0x27
 80025b2:	f107 0114 	add.w	r1, r7, #20
 80025b6:	f107 0026 	add.w	r0, r7, #38	; 0x26
 80025ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025be:	9304      	str	r3, [sp, #16]
 80025c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025c4:	9303      	str	r3, [sp, #12]
 80025c6:	f107 0318 	add.w	r3, r7, #24
 80025ca:	9302      	str	r3, [sp, #8]
 80025cc:	f107 0320 	add.w	r3, r7, #32
 80025d0:	9301      	str	r3, [sp, #4]
 80025d2:	1d3b      	adds	r3, r7, #4
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	4623      	mov	r3, r4
 80025d8:	f009 fc43 	bl	800be62 <MQTTDeserialize_publish>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d115      	bne.n	800260e <PacketProcessing+0xba>
						&payload_in, &payloadlen_in, buffer, buflen) == 1)
				{
					mqttMessageHandling(payload_in, payloadlen_in);
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff ff55 	bl	8002498 <mqttMessageHandling>
					Wifi_RxClear();
 80025ee:	f000 fbc7 	bl	8002d80 <Wifi_RxClear>
				}
				return;
 80025f2:	e00c      	b.n	800260e <PacketProcessing+0xba>

			default :
				Wifi_RxClear();
 80025f4:	f000 fbc4 	bl	8002d80 <Wifi_RxClear>
				return;
 80025f8:	e00a      	b.n	8002610 <PacketProcessing+0xbc>
		}
		osSemaphoreRelease(workHandle);
 80025fa:	4b08      	ldr	r3, [pc, #32]	; (800261c <PacketProcessing+0xc8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f00a fa0c 	bl	800ca1c <osSemaphoreRelease>
		osDelay(1000);
 8002604:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002608:	f00a f8d9 	bl	800c7be <osDelay>
	{
 800260c:	e7a8      	b.n	8002560 <PacketProcessing+0xc>
				return;
 800260e:	bf00      	nop
	}
}
 8002610:	37b4      	adds	r7, #180	; 0xb4
 8002612:	46bd      	mov	sp, r7
 8002614:	bd90      	pop	{r4, r7, pc}
 8002616:	bf00      	nop
 8002618:	080022bd 	.word	0x080022bd
 800261c:	2000a3bc 	.word	0x2000a3bc

08002620 <awaitSubscribes>:

int awaitSubscribes()
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b0ec      	sub	sp, #432	; 0x1b0
 8002624:	af04      	add	r7, sp, #16
	char tx_buffer[256] = {0,};
 8002626:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	3304      	adds	r3, #4
 8002630:	22fc      	movs	r2, #252	; 0xfc
 8002632:	2100      	movs	r1, #0
 8002634:	4618      	mov	r0, r3
 8002636:	f024 fb9f 	bl	8026d78 <memset>
	int req_qos = 0, len;
 800263a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
	unsigned char buffer[128];
	uint32_t waitTime = 500;
 8002642:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002646:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	uint8_t atCommandResult;

	MQTTString topic = MQTTString_initializer;
 800264a:	1d3b      	adds	r3, r7, #4
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	1d3b      	adds	r3, r7, #4
 8002652:	2200      	movs	r2, #0
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	1d3b      	adds	r3, r7, #4
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
	topic.cstring = mqtt.subTopic;
 800265c:	4b43      	ldr	r3, [pc, #268]	; (800276c <awaitSubscribes+0x14c>)
 800265e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002662:	1d3b      	adds	r3, r7, #4
 8002664:	601a      	str	r2, [r3, #0]

	do
	{
		osDelay(1);
 8002666:	2001      	movs	r0, #1
 8002668:	f00a f8a9 	bl	800c7be <osDelay>
	}while (mqtt.status != 0);
 800266c:	4b3f      	ldr	r3, [pc, #252]	; (800276c <awaitSubscribes+0x14c>)
 800266e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f7      	bne.n	8002666 <awaitSubscribes+0x46>

	len = MQTTSerialize_subscribe(buffer, sizeof(buffer), 0, 1, 1, &topic, &req_qos);
 8002676:	f107 0014 	add.w	r0, r7, #20
 800267a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800267e:	9302      	str	r3, [sp, #8]
 8002680:	1d3b      	adds	r3, r7, #4
 8002682:	9301      	str	r3, [sp, #4]
 8002684:	2301      	movs	r3, #1
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	2301      	movs	r3, #1
 800268a:	2200      	movs	r2, #0
 800268c:	2180      	movs	r1, #128	; 0x80
 800268e:	f009 ff36 	bl	800c4fe <MQTTSerialize_subscribe>
 8002692:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
	if (len <= 0)
 8002696:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800269a:	2b00      	cmp	r3, #0
 800269c:	dc06      	bgt.n	80026ac <awaitSubscribes+0x8c>
	{
		DEBUG_PRINT("len <= 0");
 800269e:	239e      	movs	r3, #158	; 0x9e
 80026a0:	4a33      	ldr	r2, [pc, #204]	; (8002770 <awaitSubscribes+0x150>)
 80026a2:	4934      	ldr	r1, [pc, #208]	; (8002774 <awaitSubscribes+0x154>)
 80026a4:	4834      	ldr	r0, [pc, #208]	; (8002778 <awaitSubscribes+0x158>)
 80026a6:	f002 fc11 	bl	8004ecc <_debugPrint>
		goto end;
 80026aa:	e04f      	b.n	800274c <awaitSubscribes+0x12c>
	}

	Wifi_RxClear();
 80026ac:	f000 fb68 	bl	8002d80 <Wifi_RxClear>
	HAL_UART_Transmit(&_WIFI_USART, (uint8_t *)tx_buffer, sprintf(tx_buffer,"AT+CIPSEND=%d\r\n", len), 100);
 80026b0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80026b4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80026b8:	4930      	ldr	r1, [pc, #192]	; (800277c <awaitSubscribes+0x15c>)
 80026ba:	4618      	mov	r0, r3
 80026bc:	f024 ff8c 	bl	80275d8 <siprintf>
 80026c0:	4603      	mov	r3, r0
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80026c8:	2364      	movs	r3, #100	; 0x64
 80026ca:	482d      	ldr	r0, [pc, #180]	; (8002780 <awaitSubscribes+0x160>)
 80026cc:	f008 f96b 	bl	800a9a6 <HAL_UART_Transmit>

	if (Wifi_WaitForString(waitTime, &atCommandResult, 2, "OK", "ERROR") == false)
 80026d0:	f107 0113 	add.w	r1, r7, #19
 80026d4:	4b2b      	ldr	r3, [pc, #172]	; (8002784 <awaitSubscribes+0x164>)
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	4b2b      	ldr	r3, [pc, #172]	; (8002788 <awaitSubscribes+0x168>)
 80026da:	2202      	movs	r2, #2
 80026dc:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 80026e0:	f000 fa62 	bl	8002ba8 <Wifi_WaitForString>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f083 0301 	eor.w	r3, r3, #1
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d006      	beq.n	80026fe <awaitSubscribes+0xde>
	{
		DEBUG_PRINT("Time Out !");
 80026f0:	23a7      	movs	r3, #167	; 0xa7
 80026f2:	4a1f      	ldr	r2, [pc, #124]	; (8002770 <awaitSubscribes+0x150>)
 80026f4:	491f      	ldr	r1, [pc, #124]	; (8002774 <awaitSubscribes+0x154>)
 80026f6:	4825      	ldr	r0, [pc, #148]	; (800278c <awaitSubscribes+0x16c>)
 80026f8:	f002 fbe8 	bl	8004ecc <_debugPrint>
		goto end;
 80026fc:	e026      	b.n	800274c <awaitSubscribes+0x12c>
	}

	Wifi_RxClear();
 80026fe:	f000 fb3f 	bl	8002d80 <Wifi_RxClear>
	HAL_UART_Transmit(&_WIFI_USART, (uint8_t *)buffer, len, 100);
 8002702:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002706:	b29a      	uxth	r2, r3
 8002708:	f107 0114 	add.w	r1, r7, #20
 800270c:	2364      	movs	r3, #100	; 0x64
 800270e:	481c      	ldr	r0, [pc, #112]	; (8002780 <awaitSubscribes+0x160>)
 8002710:	f008 f949 	bl	800a9a6 <HAL_UART_Transmit>

	if (Wifi_WaitForString(waitTime, &atCommandResult, 2, "OK", "ERROR") == false)
 8002714:	f107 0113 	add.w	r1, r7, #19
 8002718:	4b1a      	ldr	r3, [pc, #104]	; (8002784 <awaitSubscribes+0x164>)
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <awaitSubscribes+0x168>)
 800271e:	2202      	movs	r2, #2
 8002720:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 8002724:	f000 fa40 	bl	8002ba8 <Wifi_WaitForString>
 8002728:	4603      	mov	r3, r0
 800272a:	f083 0301 	eor.w	r3, r3, #1
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d006      	beq.n	8002742 <awaitSubscribes+0x122>
	{
		DEBUG_PRINT("Time Out !");
 8002734:	23b0      	movs	r3, #176	; 0xb0
 8002736:	4a0e      	ldr	r2, [pc, #56]	; (8002770 <awaitSubscribes+0x150>)
 8002738:	490e      	ldr	r1, [pc, #56]	; (8002774 <awaitSubscribes+0x154>)
 800273a:	4814      	ldr	r0, [pc, #80]	; (800278c <awaitSubscribes+0x16c>)
 800273c:	f002 fbc6 	bl	8004ecc <_debugPrint>
		goto end;
 8002740:	e004      	b.n	800274c <awaitSubscribes+0x12c>
	}
	osDelay(100);
 8002742:	2064      	movs	r0, #100	; 0x64
 8002744:	f00a f83b 	bl	800c7be <osDelay>

	PacketProcessing();
 8002748:	f7ff ff04 	bl	8002554 <PacketProcessing>

	end :
	osSemaphoreRelease(workHandle);
 800274c:	4b10      	ldr	r3, [pc, #64]	; (8002790 <awaitSubscribes+0x170>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f00a f963 	bl	800ca1c <osSemaphoreRelease>
	osDelay(1000);
 8002756:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800275a:	f00a f830 	bl	800c7be <osDelay>
	return 0;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000014 	.word	0x20000014
 8002770:	0802a050 	.word	0x0802a050
 8002774:	08028e6c 	.word	0x08028e6c
 8002778:	08028eec 	.word	0x08028eec
 800277c:	08028df8 	.word	0x08028df8
 8002780:	2000b09c 	.word	0x2000b09c
 8002784:	08028efc 	.word	0x08028efc
 8002788:	08028ef8 	.word	0x08028ef8
 800278c:	08028f04 	.word	0x08028f04
 8002790:	2000a3bc 	.word	0x2000a3bc

08002794 <ayncPublish>:

void ayncPublish(char *message)
{
 8002794:	b590      	push	{r4, r7, lr}
 8002796:	b0ab      	sub	sp, #172	; 0xac
 8002798:	af08      	add	r7, sp, #32
 800279a:	6078      	str	r0, [r7, #4]
	if (mqtt.status == 0)
 800279c:	4b32      	ldr	r3, [pc, #200]	; (8002868 <ayncPublish+0xd4>)
 800279e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d15a      	bne.n	800285c <ayncPublish+0xc8>
	{
		char tx_buffer[128] = {0,};
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	f107 030c 	add.w	r3, r7, #12
 80027ae:	227c      	movs	r2, #124	; 0x7c
 80027b0:	2100      	movs	r1, #0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f024 fae0 	bl	8026d78 <memset>

		if (!message || !(*message))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d050      	beq.n	8002860 <ayncPublish+0xcc>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d04c      	beq.n	8002860 <ayncPublish+0xcc>
		{
			return;
		}
		memset(mqtt.msg, 0x0, sizeof(mqtt.msg));
 80027c6:	2280      	movs	r2, #128	; 0x80
 80027c8:	2100      	movs	r1, #0
 80027ca:	4827      	ldr	r0, [pc, #156]	; (8002868 <ayncPublish+0xd4>)
 80027cc:	f024 fad4 	bl	8026d78 <memset>

		mqtt.topicString.cstring = mqtt.pubTopic;
 80027d0:	4b25      	ldr	r3, [pc, #148]	; (8002868 <ayncPublish+0xd4>)
 80027d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027d6:	4a24      	ldr	r2, [pc, #144]	; (8002868 <ayncPublish+0xd4>)
 80027d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		mqtt.length = MQTTSerialize_publish(mqtt.msg, sizeof(mqtt.msg), 0, 0, 0, 0,
				mqtt.topicString, (unsigned char *)message, strlen(message));
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7fd fd61 	bl	80002a4 <strlen>
 80027e2:	4603      	mov	r3, r0
		mqtt.length = MQTTSerialize_publish(mqtt.msg, sizeof(mqtt.msg), 0, 0, 0, 0,
 80027e4:	9306      	str	r3, [sp, #24]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	9305      	str	r3, [sp, #20]
 80027ea:	4b1f      	ldr	r3, [pc, #124]	; (8002868 <ayncPublish+0xd4>)
 80027ec:	ac02      	add	r4, sp, #8
 80027ee:	3388      	adds	r3, #136	; 0x88
 80027f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80027f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80027f8:	2300      	movs	r3, #0
 80027fa:	9301      	str	r3, [sp, #4]
 80027fc:	2300      	movs	r3, #0
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	2300      	movs	r3, #0
 8002802:	2200      	movs	r2, #0
 8002804:	2180      	movs	r1, #128	; 0x80
 8002806:	4818      	ldr	r0, [pc, #96]	; (8002868 <ayncPublish+0xd4>)
 8002808:	f009 fddc 	bl	800c3c4 <MQTTSerialize_publish>
 800280c:	4603      	mov	r3, r0
 800280e:	4a16      	ldr	r2, [pc, #88]	; (8002868 <ayncPublish+0xd4>)
 8002810:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

		if (osSemaphoreWait(workHandle, osWaitForever) == osOK)
 8002814:	4b15      	ldr	r3, [pc, #84]	; (800286c <ayncPublish+0xd8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f04f 31ff 	mov.w	r1, #4294967295
 800281c:	4618      	mov	r0, r3
 800281e:	f00a f8af 	bl	800c980 <osSemaphoreWait>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d119      	bne.n	800285c <ayncPublish+0xc8>
		{
			mqtt.status = 1;
 8002828:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <ayncPublish+0xd4>)
 800282a:	2201      	movs	r2, #1
 800282c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

			Wifi_RxClear();
 8002830:	f000 faa6 	bl	8002d80 <Wifi_RxClear>
			HAL_UART_Transmit(&_WIFI_USART, (uint8_t *)tx_buffer, sprintf(tx_buffer,"AT+CIPSEND=%d\r\n", mqtt.length), 100);
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <ayncPublish+0xd4>)
 8002836:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800283a:	f107 0308 	add.w	r3, r7, #8
 800283e:	490c      	ldr	r1, [pc, #48]	; (8002870 <ayncPublish+0xdc>)
 8002840:	4618      	mov	r0, r3
 8002842:	f024 fec9 	bl	80275d8 <siprintf>
 8002846:	4603      	mov	r3, r0
 8002848:	b29a      	uxth	r2, r3
 800284a:	f107 0108 	add.w	r1, r7, #8
 800284e:	2364      	movs	r3, #100	; 0x64
 8002850:	4808      	ldr	r0, [pc, #32]	; (8002874 <ayncPublish+0xe0>)
 8002852:	f008 f8a8 	bl	800a9a6 <HAL_UART_Transmit>
			HAL_TIM_Base_Start_IT(&htim7);
 8002856:	4808      	ldr	r0, [pc, #32]	; (8002878 <ayncPublish+0xe4>)
 8002858:	f007 fbf8 	bl	800a04c <HAL_TIM_Base_Start_IT>
		}
	}
	return;
 800285c:	bf00      	nop
 800285e:	e000      	b.n	8002862 <ayncPublish+0xce>
			return;
 8002860:	bf00      	nop
}
 8002862:	378c      	adds	r7, #140	; 0x8c
 8002864:	46bd      	mov	sp, r7
 8002866:	bd90      	pop	{r4, r7, pc}
 8002868:	20000014 	.word	0x20000014
 800286c:	2000a3bc 	.word	0x2000a3bc
 8002870:	08028df8 	.word	0x08028df8
 8002874:	2000b09c 	.word	0x2000b09c
 8002878:	2000b010 	.word	0x2000b010

0800287c <ring_buffer_is_empty>:
/**
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  return (buffer->head_index == buffer->tail_index);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002890:	429a      	cmp	r2, r3
 8002892:	bf0c      	ite	eq
 8002894:	2301      	moveq	r3, #1
 8002896:	2300      	movne	r3, #0
 8002898:	b2db      	uxtb	r3, r3
}
 800289a:	4618      	mov	r0, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <ring_buffer_is_full>:
/**
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028c2:	2b7f      	cmp	r3, #127	; 0x7f
 80028c4:	bf0c      	ite	eq
 80028c6:	2301      	moveq	r3, #1
 80028c8:	2300      	movne	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <ring_buffer_init>:
/**
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer) {
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  buffer->tail_index = 0;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  buffer->head_index = 0;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <ring_buffer_queue>:

void ring_buffer_queue(ring_buffer_t *buffer, char data) {
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	70fb      	strb	r3, [r7, #3]
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff ffcc 	bl	80028a6 <ring_buffer_is_full>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00a      	beq.n	800292a <ring_buffer_queue+0x2e>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800291a:	3301      	adds	r3, #1
 800291c:	b2db      	uxtb	r3, r3
 800291e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002922:	b2da      	uxtb	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002930:	4619      	mov	r1, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	78fa      	ldrb	r2, [r7, #3]
 8002936:	545a      	strb	r2, [r3, r1]
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800293e:	3301      	adds	r3, #1
 8002940:	b2db      	uxtb	r3, r3
 8002942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002946:	b2da      	uxtb	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <ring_buffer_dequeue>:
  for(i = 0; i < size; i++) {
    ring_buffer_queue(buffer, data[i]);
  }
}

uint8_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data) {
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	6039      	str	r1, [r7, #0]
  if(ring_buffer_is_empty(buffer)) {
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff ff8b 	bl	800287c <ring_buffer_is_empty>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <ring_buffer_dequeue+0x1a>
    /* No items */
    return 0;
 800296c:	2300      	movs	r3, #0
 800296e:	e013      	b.n	8002998 <ring_buffer_dequeue+0x42>
  }
  
  *data = buffer->buffer[buffer->tail_index];
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002976:	461a      	mov	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	5c9a      	ldrb	r2, [r3, r2]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	701a      	strb	r2, [r3, #0]
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002986:	3301      	adds	r3, #1
 8002988:	b2db      	uxtb	r3, r3
 800298a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800298e:	b2da      	uxtb	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return 1;
 8002996:	2301      	movs	r3, #1
}
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <dht11Init>:
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
}

/*********************************** DHT11 FUNCTIONS ********************************************/
void dht11Init(DHT11_Dev *dev)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
	dev->port = DHT11_GPIO_Port;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a05      	ldr	r2, [pc, #20]	; (80029c0 <dht11Init+0x20>)
 80029ac:	605a      	str	r2, [r3, #4]
	dev->pin = DHT11_Pin;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2208      	movs	r2, #8
 80029b2:	609a      	str	r2, [r3, #8]
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	40021000 	.word	0x40021000

080029c4 <sensorTask>:
extern osThreadId eventLoopTaskHandle;

#define TEST

void sensorTask(void const * argument)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
	  uint8_t status = 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	73fb      	strb	r3, [r7, #15]

	  dht11Init(&dht11Dev);
 80029d0:	4813      	ldr	r0, [pc, #76]	; (8002a20 <sensorTask+0x5c>)
 80029d2:	f7ff ffe5 	bl	80029a0 <dht11Init>
	  DEBUG_PRINT("sensorTask init...");
 80029d6:	2316      	movs	r3, #22
 80029d8:	4a12      	ldr	r2, [pc, #72]	; (8002a24 <sensorTask+0x60>)
 80029da:	4913      	ldr	r1, [pc, #76]	; (8002a28 <sensorTask+0x64>)
 80029dc:	4813      	ldr	r0, [pc, #76]	; (8002a2c <sensorTask+0x68>)
 80029de:	f002 fa75 	bl	8004ecc <_debugPrint>
				Rh_byte2 = dht11Read(&dht11Dev);
				Temp_byte1 = dht11Read(&dht11Dev);
				Temp_byte2 = dht11Read(&dht11Dev);
				SUM = dht11Read(&dht11Dev);
#else
				Rh_byte1 = (uint8_t)72;
 80029e2:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <sensorTask+0x6c>)
 80029e4:	2248      	movs	r2, #72	; 0x48
 80029e6:	701a      	strb	r2, [r3, #0]
				Temp_byte1 = (uint8_t)26;
 80029e8:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <sensorTask+0x70>)
 80029ea:	221a      	movs	r2, #26
 80029ec:	701a      	strb	r2, [r3, #0]
#endif
				dht11Dev.temparature = Temp_byte1;
 80029ee:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <sensorTask+0x70>)
 80029f0:	781a      	ldrb	r2, [r3, #0]
 80029f2:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <sensorTask+0x5c>)
 80029f4:	701a      	strb	r2, [r3, #0]
				dht11Dev.humidity    = Rh_byte1;
 80029f6:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <sensorTask+0x6c>)
 80029f8:	781a      	ldrb	r2, [r3, #0]
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <sensorTask+0x5c>)
 80029fc:	705a      	strb	r2, [r3, #1]

				osSemaphoreRelease(sensorSemHandle);
 80029fe:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <sensorTask+0x74>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f00a f80a 	bl	800ca1c <osSemaphoreRelease>
				osSignalSet(eventLoopTaskHandle, UPDATE_SENSOR_VALUE);
 8002a08:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <sensorTask+0x78>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2110      	movs	r1, #16
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f009 feea 	bl	800c7e8 <osSignalSet>
				osDelay(1000);
 8002a14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a18:	f009 fed1 	bl	800c7be <osDelay>
				Rh_byte1 = (uint8_t)72;
 8002a1c:	e7e1      	b.n	80029e2 <sensorTask+0x1e>
 8002a1e:	bf00      	nop
 8002a20:	2000a3a4 	.word	0x2000a3a4
 8002a24:	0802a060 	.word	0x0802a060
 8002a28:	08028f10 	.word	0x08028f10
 8002a2c:	08028f2c 	.word	0x08028f2c
 8002a30:	2000a3b0 	.word	0x2000a3b0
 8002a34:	2000a395 	.word	0x2000a395
 8002a38:	2000ae14 	.word	0x2000ae14
 8002a3c:	2000a390 	.word	0x2000a390

08002a40 <sensorInit>:
		  }
	  }
}

void sensorInit(osPriority Priority)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08c      	sub	sp, #48	; 0x30
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	80fb      	strh	r3, [r7, #6]
	osSemaphoreDef(sensorHandle);
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a4e:	2300      	movs	r3, #0
 8002a50:	62fb      	str	r3, [r7, #44]	; 0x2c
	sensorHandle = osSemaphoreCreate(osSemaphore(sensorHandle), 1);
 8002a52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a56:	2101      	movs	r1, #1
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f009 ff51 	bl	800c900 <osSemaphoreCreate>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	4a0e      	ldr	r2, [pc, #56]	; (8002a9c <sensorInit+0x5c>)
 8002a62:	6013      	str	r3, [r2, #0]
	osThreadDef(sensorTaskName, sensorTask, Priority, 0, _SENSOR_TASK_SIZE);
 8002a64:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <sensorInit+0x60>)
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <sensorInit+0x64>)
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	88fb      	ldrh	r3, [r7, #6]
 8002a6e:	82bb      	strh	r3, [r7, #20]
 8002a70:	2300      	movs	r3, #0
 8002a72:	61bb      	str	r3, [r7, #24]
 8002a74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	623b      	str	r3, [r7, #32]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
	sensorTaskHandle = osThreadCreate(osThread(sensorTaskName), NULL);
 8002a82:	f107 030c 	add.w	r3, r7, #12
 8002a86:	2100      	movs	r1, #0
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f009 fe4c 	bl	800c726 <osThreadCreate>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	4a05      	ldr	r2, [pc, #20]	; (8002aa8 <sensorInit+0x68>)
 8002a92:	6013      	str	r3, [r2, #0]
}
 8002a94:	bf00      	nop
 8002a96:	3730      	adds	r7, #48	; 0x30
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	2000a44c 	.word	0x2000a44c
 8002aa0:	08028f40 	.word	0x08028f40
 8002aa4:	080029c5 	.word	0x080029c5
 8002aa8:	2000a450 	.word	0x2000a450

08002aac <tftLcdInit>:
extern void TouchGFX_Task(void const * argument);

static LCD_DrvTypeDef* LcdDrv;

void tftLcdInit(osPriority	Priority)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08c      	sub	sp, #48	; 0x30
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	80fb      	strh	r3, [r7, #6]
	LcdDrv = &ili9341_drv;
 8002ab6:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <tftLcdInit+0x74>)
 8002ab8:	4a1a      	ldr	r2, [pc, #104]	; (8002b24 <tftLcdInit+0x78>)
 8002aba:	601a      	str	r2, [r3, #0]
	LcdDrv->Init();
 8002abc:	4b18      	ldr	r3, [pc, #96]	; (8002b20 <tftLcdInit+0x74>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4798      	blx	r3
	LcdDrv->DisplayOff();
 8002ac4:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <tftLcdInit+0x74>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	4798      	blx	r3

	osSemaphoreDef(lcdHandle);
 8002acc:	2300      	movs	r3, #0
 8002ace:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
	lcdHandle = osSemaphoreCreate(osSemaphore(lcdHandle), 1);
 8002ad4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ad8:	2101      	movs	r1, #1
 8002ada:	4618      	mov	r0, r3
 8002adc:	f009 ff10 	bl	800c900 <osSemaphoreCreate>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4a11      	ldr	r2, [pc, #68]	; (8002b28 <tftLcdInit+0x7c>)
 8002ae4:	6013      	str	r3, [r2, #0]
	osThreadDef(lcdTaskName, TouchGFX_Task, Priority, 0, _LCD_TASK_SIZE);
 8002ae6:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <tftLcdInit+0x80>)
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <tftLcdInit+0x84>)
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	88fb      	ldrh	r3, [r7, #6]
 8002af0:	82bb      	strh	r3, [r7, #20]
 8002af2:	2300      	movs	r3, #0
 8002af4:	61bb      	str	r3, [r7, #24]
 8002af6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002afa:	61fb      	str	r3, [r7, #28]
 8002afc:	2300      	movs	r3, #0
 8002afe:	623b      	str	r3, [r7, #32]
 8002b00:	2300      	movs	r3, #0
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
	lcdTaskHandle = osThreadCreate(osThread(lcdTaskName), NULL);
 8002b04:	f107 030c 	add.w	r3, r7, #12
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f009 fe0b 	bl	800c726 <osThreadCreate>
 8002b10:	4603      	mov	r3, r0
 8002b12:	4a08      	ldr	r2, [pc, #32]	; (8002b34 <tftLcdInit+0x88>)
 8002b14:	6013      	str	r3, [r2, #0]
}
 8002b16:	bf00      	nop
 8002b18:	3730      	adds	r7, #48	; 0x30
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000228 	.word	0x20000228
 8002b24:	200000b4 	.word	0x200000b4
 8002b28:	2000a458 	.word	0x2000a458
 8002b2c:	08028f50 	.word	0x08028f50
 8002b30:	0800f8f1 	.word	0x0800f8f1
 8002b34:	2000a454 	.word	0x2000a454

08002b38 <Wifi_SendRaw>:

Wifi_t	Wifi;

//#########################################################################################################
bool Wifi_SendRaw(uint8_t *data,uint16_t len)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	807b      	strh	r3, [r7, #2]
	if(len <= _WIFI_TX_SIZE)
 8002b44:	887b      	ldrh	r3, [r7, #2]
 8002b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b4a:	d812      	bhi.n	8002b72 <Wifi_SendRaw+0x3a>
	{
		memcpy(Wifi.TxBuffer,data,len);
 8002b4c:	887b      	ldrh	r3, [r7, #2]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	480a      	ldr	r0, [pc, #40]	; (8002b7c <Wifi_SendRaw+0x44>)
 8002b54:	f024 f8e8 	bl	8026d28 <memcpy>
		if(HAL_UART_Transmit(&_WIFI_USART,data,len,100) == HAL_OK)
 8002b58:	887a      	ldrh	r2, [r7, #2]
 8002b5a:	2364      	movs	r3, #100	; 0x64
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4808      	ldr	r0, [pc, #32]	; (8002b80 <Wifi_SendRaw+0x48>)
 8002b60:	f007 ff21 	bl	800a9a6 <HAL_UART_Transmit>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <Wifi_SendRaw+0x36>
			return true;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e002      	b.n	8002b74 <Wifi_SendRaw+0x3c>
		else
			return false;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	e000      	b.n	8002b74 <Wifi_SendRaw+0x3c>
	}
	else
		return false;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	2000a6e1 	.word	0x2000a6e1
 8002b80:	2000b09c 	.word	0x2000b09c

08002b84 <Wifi_SendString>:

bool Wifi_SendString(char *data)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
	return Wifi_SendRaw((uint8_t*)data,strlen(data));
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7fd fb89 	bl	80002a4 <strlen>
 8002b92:	4603      	mov	r3, r0
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	4619      	mov	r1, r3
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7ff ffcd 	bl	8002b38 <Wifi_SendRaw>
 8002b9e:	4603      	mov	r3, r0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <Wifi_WaitForString>:
	osDelay(DelayMs);
	return true;
}

bool Wifi_WaitForString(uint32_t TimeOut_ms,uint8_t *result,uint8_t CountOfParameter,...)
{
 8002ba8:	b40c      	push	{r2, r3}
 8002baa:	b5b0      	push	{r4, r5, r7, lr}
 8002bac:	b088      	sub	sp, #32
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	6039      	str	r1, [r7, #0]
 8002bb4:	466b      	mov	r3, sp
 8002bb6:	461d      	mov	r5, r3
	
	if(result == NULL)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <Wifi_WaitForString+0x1a>
		return false;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	e070      	b.n	8002ca4 <Wifi_WaitForString+0xfc>
	if(CountOfParameter == 0)
 8002bc2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <Wifi_WaitForString+0x26>
		return false;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	e06a      	b.n	8002ca4 <Wifi_WaitForString+0xfc>

	*result=0;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	701a      	strb	r2, [r3, #0]

  va_list tag;
	va_start (tag,CountOfParameter);
 8002bd4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bd8:	60bb      	str	r3, [r7, #8]
	char *arg[CountOfParameter];
 8002bda:	f897 4030 	ldrb.w	r4, [r7, #48]	; 0x30
 8002bde:	4623      	mov	r3, r4
 8002be0:	3b01      	subs	r3, #1
 8002be2:	613b      	str	r3, [r7, #16]
 8002be4:	b2e0      	uxtb	r0, r4
 8002be6:	f04f 0100 	mov.w	r1, #0
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	f04f 0300 	mov.w	r3, #0
 8002bf2:	014b      	lsls	r3, r1, #5
 8002bf4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002bf8:	0142      	lsls	r2, r0, #5
 8002bfa:	b2e0      	uxtb	r0, r4
 8002bfc:	f04f 0100 	mov.w	r1, #0
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	014b      	lsls	r3, r1, #5
 8002c0a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c0e:	0142      	lsls	r2, r0, #5
 8002c10:	4623      	mov	r3, r4
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	3307      	adds	r3, #7
 8002c16:	08db      	lsrs	r3, r3, #3
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	ebad 0d03 	sub.w	sp, sp, r3
 8002c1e:	466b      	mov	r3, sp
 8002c20:	3303      	adds	r3, #3
 8002c22:	089b      	lsrs	r3, r3, #2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	60fb      	str	r3, [r7, #12]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 8002c28:	2300      	movs	r3, #0
 8002c2a:	75fb      	strb	r3, [r7, #23]
 8002c2c:	e00a      	b.n	8002c44 <Wifi_WaitForString+0x9c>
		arg[i] = va_arg (tag, char *);	
 8002c2e:	7dfa      	ldrb	r2, [r7, #23]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	1d19      	adds	r1, r3, #4
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	6819      	ldr	r1, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i=0; i<CountOfParameter ; i++)
 8002c3e:	7dfb      	ldrb	r3, [r7, #23]
 8002c40:	3301      	adds	r3, #1
 8002c42:	75fb      	strb	r3, [r7, #23]
 8002c44:	7dfa      	ldrb	r2, [r7, #23]
 8002c46:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d3ef      	bcc.n	8002c2e <Wifi_WaitForString+0x86>
  va_end (tag);
	
		
	//////////////////////////////////	
	for(uint32_t t=0 ; t<TimeOut_ms ; t+=1)
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	e022      	b.n	8002c9a <Wifi_WaitForString+0xf2>
	{
		osDelay(1);
 8002c54:	2001      	movs	r0, #1
 8002c56:	f009 fdb2 	bl	800c7be <osDelay>
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	77fb      	strb	r3, [r7, #31]
 8002c5e:	e014      	b.n	8002c8a <Wifi_WaitForString+0xe2>
		{
			if(strstr((char*)Wifi.RxBuffer, arg[mx])!=NULL)
 8002c60:	7ffa      	ldrb	r2, [r7, #31]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4812      	ldr	r0, [pc, #72]	; (8002cb4 <Wifi_WaitForString+0x10c>)
 8002c6c:	f024 fd4d 	bl	802770a <strstr>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d006      	beq.n	8002c84 <Wifi_WaitForString+0xdc>
			{
				*result = mx+1;
 8002c76:	7ffb      	ldrb	r3, [r7, #31]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	701a      	strb	r2, [r3, #0]
				return true;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e00f      	b.n	8002ca4 <Wifi_WaitForString+0xfc>
		for(uint8_t	mx=0 ; mx<CountOfParameter ; mx++)
 8002c84:	7ffb      	ldrb	r3, [r7, #31]
 8002c86:	3301      	adds	r3, #1
 8002c88:	77fb      	strb	r3, [r7, #31]
 8002c8a:	7ffa      	ldrb	r2, [r7, #31]
 8002c8c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d3e5      	bcc.n	8002c60 <Wifi_WaitForString+0xb8>
	for(uint32_t t=0 ; t<TimeOut_ms ; t+=1)
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	3301      	adds	r3, #1
 8002c98:	61bb      	str	r3, [r7, #24]
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d3d8      	bcc.n	8002c54 <Wifi_WaitForString+0xac>
			}				
		}				
	}
	// timeout
	return false;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	46ad      	mov	sp, r5
	
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3720      	adds	r7, #32
 8002caa:	46bd      	mov	sp, r7
 8002cac:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002cb0:	b002      	add	sp, #8
 8002cb2:	4770      	bx	lr
 8002cb4:	2000a4e1 	.word	0x2000a4e1

08002cb8 <Wifi_ReturnString>:
//#########################################################################################################
bool Wifi_ReturnString(char *result,uint8_t WantWhichOne,char *SplitterChars)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	72fb      	strb	r3, [r7, #11]
	if(result == NULL) 
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <Wifi_ReturnString+0x18>
		return false;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	e02e      	b.n	8002d2e <Wifi_ReturnString+0x76>
	if(WantWhichOne==0)
 8002cd0:	7afb      	ldrb	r3, [r7, #11]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <Wifi_ReturnString+0x22>
		return false;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e029      	b.n	8002d2e <Wifi_ReturnString+0x76>

	char *str = (char*)Wifi.RxBuffer;
 8002cda:	4b17      	ldr	r3, [pc, #92]	; (8002d38 <Wifi_ReturnString+0x80>)
 8002cdc:	617b      	str	r3, [r7, #20]
	

	str = strtok (str,SplitterChars);
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	6978      	ldr	r0, [r7, #20]
 8002ce2:	f024 fd29 	bl	8027738 <strtok>
 8002ce6:	6178      	str	r0, [r7, #20]
	if(str == NULL)
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d118      	bne.n	8002d20 <Wifi_ReturnString+0x68>
	{
		strcpy(result,"");
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	701a      	strb	r2, [r3, #0]
		return false;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	e01a      	b.n	8002d2e <Wifi_ReturnString+0x76>
	}
	while (str != NULL)
  {
    str = strtok (NULL,SplitterChars);
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	f024 fd1c 	bl	8027738 <strtok>
 8002d00:	6178      	str	r0, [r7, #20]
		if(str != NULL)
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <Wifi_ReturnString+0x56>
			WantWhichOne--;
 8002d08:	7afb      	ldrb	r3, [r7, #11]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	72fb      	strb	r3, [r7, #11]
		if(WantWhichOne==0)
 8002d0e:	7afb      	ldrb	r3, [r7, #11]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d105      	bne.n	8002d20 <Wifi_ReturnString+0x68>
		{
			strcpy(result,str);
 8002d14:	6979      	ldr	r1, [r7, #20]
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f024 fcef 	bl	80276fa <strcpy>
			return true;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e006      	b.n	8002d2e <Wifi_ReturnString+0x76>
	while (str != NULL)
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1e8      	bne.n	8002cf8 <Wifi_ReturnString+0x40>
		}
  }
	strcpy(result,"");
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]
	return false;	
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	2000a4e1 	.word	0x2000a4e1

08002d3c <Wifi_ReturnInteger>:
	return false;	
	
}
//#########################################################################################################
bool	Wifi_ReturnInteger(int32_t	*result,uint8_t WantWhichOne,char *SplitterChars)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	460b      	mov	r3, r1
 8002d46:	607a      	str	r2, [r7, #4]
 8002d48:	72fb      	strb	r3, [r7, #11]
	if((char*)Wifi.RxBuffer == NULL)
		return false;
	if(Wifi_ReturnString((char*)Wifi.RxBuffer,WantWhichOne,SplitterChars)==false)
 8002d4a:	7afb      	ldrb	r3, [r7, #11]
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	4619      	mov	r1, r3
 8002d50:	480a      	ldr	r0, [pc, #40]	; (8002d7c <Wifi_ReturnInteger+0x40>)
 8002d52:	f7ff ffb1 	bl	8002cb8 <Wifi_ReturnString>
 8002d56:	4603      	mov	r3, r0
 8002d58:	f083 0301 	eor.w	r3, r3, #1
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <Wifi_ReturnInteger+0x2a>
		return false;
 8002d62:	2300      	movs	r3, #0
 8002d64:	e006      	b.n	8002d74 <Wifi_ReturnInteger+0x38>
	*result = atoi((char*)Wifi.RxBuffer);
 8002d66:	4805      	ldr	r0, [pc, #20]	; (8002d7c <Wifi_ReturnInteger+0x40>)
 8002d68:	f023 ff80 	bl	8026c6c <atoi>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	601a      	str	r2, [r3, #0]
	return true;
 8002d72:	2301      	movs	r3, #1
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	2000a4e1 	.word	0x2000a4e1

08002d80 <Wifi_RxClear>:
	}
	*dst = '\0';
}
//#########################################################################################################
void Wifi_RxClear(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
	memset(Wifi.RxBuffer,0,_WIFI_RX_SIZE);
 8002d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d88:	2100      	movs	r1, #0
 8002d8a:	4808      	ldr	r0, [pc, #32]	; (8002dac <Wifi_RxClear+0x2c>)
 8002d8c:	f023 fff4 	bl	8026d78 <memset>
	Wifi.RxIndex=0;	
 8002d90:	4b07      	ldr	r3, [pc, #28]	; (8002db0 <Wifi_RxClear+0x30>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302

	ring_buffer_init(&wifi_ring_buffer);
 8002d98:	4806      	ldr	r0, [pc, #24]	; (8002db4 <Wifi_RxClear+0x34>)
 8002d9a:	f7ff fd9d 	bl	80028d8 <ring_buffer_init>
  HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 8002d9e:	2201      	movs	r2, #1
 8002da0:	4903      	ldr	r1, [pc, #12]	; (8002db0 <Wifi_RxClear+0x30>)
 8002da2:	4805      	ldr	r0, [pc, #20]	; (8002db8 <Wifi_RxClear+0x38>)
 8002da4:	f007 fe91 	bl	800aaca <HAL_UART_Receive_IT>
}
 8002da8:	bf00      	nop
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	2000a4e1 	.word	0x2000a4e1
 8002db0:	2000a4e0 	.word	0x2000a4e0
 8002db4:	2000a45c 	.word	0x2000a45c
 8002db8:	2000b09c 	.word	0x2000b09c

08002dbc <Wifi_TxClear>:
//#########################################################################################################
void Wifi_TxClear(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
	memset(Wifi.TxBuffer,0,_WIFI_TX_SIZE);
 8002dc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4802      	ldr	r0, [pc, #8]	; (8002dd0 <Wifi_TxClear+0x14>)
 8002dc8:	f023 ffd6 	bl	8026d78 <memset>
}
 8002dcc:	bf00      	nop
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	2000a6e1 	.word	0x2000a6e1

08002dd4 <Wifi_RxCallBack>:
//#########################################################################################################
void Wifi_RxCallBack(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  //+++ at command buffer
  if(Wifi.RxIsData==false)                                              
 8002dd8:	4b98      	ldr	r3, [pc, #608]	; (800303c <Wifi_RxCallBack+0x268>)
 8002dda:	f893 3718 	ldrb.w	r3, [r3, #1816]	; 0x718
 8002dde:	f083 0301 	eor.w	r3, r3, #1
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d018      	beq.n	8002e1a <Wifi_RxCallBack+0x46>
  {
    Wifi.RxBuffer[Wifi.RxIndex] = Wifi.usartBuff;
 8002de8:	4b94      	ldr	r3, [pc, #592]	; (800303c <Wifi_RxCallBack+0x268>)
 8002dea:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8002dee:	4619      	mov	r1, r3
 8002df0:	4b92      	ldr	r3, [pc, #584]	; (800303c <Wifi_RxCallBack+0x268>)
 8002df2:	781a      	ldrb	r2, [r3, #0]
 8002df4:	4b91      	ldr	r3, [pc, #580]	; (800303c <Wifi_RxCallBack+0x268>)
 8002df6:	440b      	add	r3, r1
 8002df8:	705a      	strb	r2, [r3, #1]
    if(Wifi.RxIndex < _WIFI_RX_SIZE)
 8002dfa:	4b90      	ldr	r3, [pc, #576]	; (800303c <Wifi_RxCallBack+0x268>)
 8002dfc:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8002e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e04:	f080 80a7 	bcs.w	8002f56 <Wifi_RxCallBack+0x182>
      Wifi.RxIndex++;
 8002e08:	4b8c      	ldr	r3, [pc, #560]	; (800303c <Wifi_RxCallBack+0x268>)
 8002e0a:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8002e0e:	3301      	adds	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	4b8a      	ldr	r3, [pc, #552]	; (800303c <Wifi_RxCallBack+0x268>)
 8002e14:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
 8002e18:	e09d      	b.n	8002f56 <Wifi_RxCallBack+0x182>
  //--- at command buffer
  //+++  data buffer
#if (1)
  else                                                                  
  {
    if( HAL_GetTick()-Wifi.RxDataLastTime > 50)
 8002e1a:	f003 f979 	bl	8006110 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	4b86      	ldr	r3, [pc, #536]	; (800303c <Wifi_RxCallBack+0x268>)
 8002e22:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b32      	cmp	r3, #50	; 0x32
 8002e2a:	d903      	bls.n	8002e34 <Wifi_RxCallBack+0x60>
      Wifi.RxIsData=false;
 8002e2c:	4b83      	ldr	r3, [pc, #524]	; (800303c <Wifi_RxCallBack+0x268>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
    //+++ Calculate Data len after +IPD
    if(Wifi.RxDataLen==0)
 8002e34:	4b81      	ldr	r3, [pc, #516]	; (800303c <Wifi_RxCallBack+0x268>)
 8002e36:	f8b3 3710 	ldrh.w	r3, [r3, #1808]	; 0x710
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d167      	bne.n	8002f0e <Wifi_RxCallBack+0x13a>
    {
      //+++ Calculate Data len after +IPD ++++++ Multi Connection OFF
      if (Wifi.TcpIpMultiConnection==false)
 8002e3e:	4b7f      	ldr	r3, [pc, #508]	; (800303c <Wifi_RxCallBack+0x268>)
 8002e40:	f893 3819 	ldrb.w	r3, [r3, #2073]	; 0x819
 8002e44:	f083 0301 	eor.w	r3, r3, #1
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d028      	beq.n	8002ea0 <Wifi_RxCallBack+0xcc>
      {
        Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp] = Wifi.usartBuff;
 8002e4e:	4b7b      	ldr	r3, [pc, #492]	; (800303c <Wifi_RxCallBack+0x268>)
 8002e50:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8002e54:	4619      	mov	r1, r3
 8002e56:	4b79      	ldr	r3, [pc, #484]	; (800303c <Wifi_RxCallBack+0x268>)
 8002e58:	781a      	ldrb	r2, [r3, #0]
 8002e5a:	4b78      	ldr	r3, [pc, #480]	; (800303c <Wifi_RxCallBack+0x268>)
 8002e5c:	440b      	add	r3, r1
 8002e5e:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
        Wifi.RxIndexForDataTmp++;
 8002e62:	4b76      	ldr	r3, [pc, #472]	; (800303c <Wifi_RxCallBack+0x268>)
 8002e64:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8002e68:	3301      	adds	r3, #1
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	4b73      	ldr	r3, [pc, #460]	; (800303c <Wifi_RxCallBack+0x268>)
 8002e6e:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
        if(Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp-1]==':')
 8002e72:	4b72      	ldr	r3, [pc, #456]	; (800303c <Wifi_RxCallBack+0x268>)
 8002e74:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	4a70      	ldr	r2, [pc, #448]	; (800303c <Wifi_RxCallBack+0x268>)
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f893 3704 	ldrb.w	r3, [r3, #1796]	; 0x704
 8002e82:	2b3a      	cmp	r3, #58	; 0x3a
 8002e84:	d167      	bne.n	8002f56 <Wifi_RxCallBack+0x182>
        {
          Wifi.RxDataConnectionNumber=0;
 8002e86:	4b6d      	ldr	r3, [pc, #436]	; (800303c <Wifi_RxCallBack+0x268>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2712 	strb.w	r2, [r3, #1810]	; 0x712
          Wifi.RxDataLen=atoi((char*)&Wifi.RxBufferForDataTmp[1]);
 8002e8e:	486c      	ldr	r0, [pc, #432]	; (8003040 <Wifi_RxCallBack+0x26c>)
 8002e90:	f023 feec 	bl	8026c6c <atoi>
 8002e94:	4603      	mov	r3, r0
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	4b68      	ldr	r3, [pc, #416]	; (800303c <Wifi_RxCallBack+0x268>)
 8002e9a:	f8a3 2710 	strh.w	r2, [r3, #1808]	; 0x710
 8002e9e:	e05a      	b.n	8002f56 <Wifi_RxCallBack+0x182>
      }
      //--- Calculate Data len after +IPD ++++++ Multi Connection OFF
      //+++ Calculate Data len after +IPD ++++++ Multi Connection ON
      else
      {
        Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp] = Wifi.usartBuff;
 8002ea0:	4b66      	ldr	r3, [pc, #408]	; (800303c <Wifi_RxCallBack+0x268>)
 8002ea2:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4b64      	ldr	r3, [pc, #400]	; (800303c <Wifi_RxCallBack+0x268>)
 8002eaa:	781a      	ldrb	r2, [r3, #0]
 8002eac:	4b63      	ldr	r3, [pc, #396]	; (800303c <Wifi_RxCallBack+0x268>)
 8002eae:	440b      	add	r3, r1
 8002eb0:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
        Wifi.RxIndexForDataTmp++;
 8002eb4:	4b61      	ldr	r3, [pc, #388]	; (800303c <Wifi_RxCallBack+0x268>)
 8002eb6:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8002eba:	3301      	adds	r3, #1
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	4b5f      	ldr	r3, [pc, #380]	; (800303c <Wifi_RxCallBack+0x268>)
 8002ec0:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
        if(Wifi.RxBufferForDataTmp[2]==',')
 8002ec4:	4b5d      	ldr	r3, [pc, #372]	; (800303c <Wifi_RxCallBack+0x268>)
 8002ec6:	f893 3706 	ldrb.w	r3, [r3, #1798]	; 0x706
 8002eca:	2b2c      	cmp	r3, #44	; 0x2c
 8002ecc:	d107      	bne.n	8002ede <Wifi_RxCallBack+0x10a>
        {
          Wifi.RxDataConnectionNumber=Wifi.RxBufferForDataTmp[1]-48;
 8002ece:	4b5b      	ldr	r3, [pc, #364]	; (800303c <Wifi_RxCallBack+0x268>)
 8002ed0:	f893 3705 	ldrb.w	r3, [r3, #1797]	; 0x705
 8002ed4:	3b30      	subs	r3, #48	; 0x30
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	4b58      	ldr	r3, [pc, #352]	; (800303c <Wifi_RxCallBack+0x268>)
 8002eda:	f883 2712 	strb.w	r2, [r3, #1810]	; 0x712
        }
        if((Wifi.RxIndexForDataTmp>3) && (Wifi.RxBufferForDataTmp[Wifi.RxIndexForDataTmp-1]==':'))
 8002ede:	4b57      	ldr	r3, [pc, #348]	; (800303c <Wifi_RxCallBack+0x268>)
 8002ee0:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d936      	bls.n	8002f56 <Wifi_RxCallBack+0x182>
 8002ee8:	4b54      	ldr	r3, [pc, #336]	; (800303c <Wifi_RxCallBack+0x268>)
 8002eea:	f893 370c 	ldrb.w	r3, [r3, #1804]	; 0x70c
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	4a52      	ldr	r2, [pc, #328]	; (800303c <Wifi_RxCallBack+0x268>)
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f893 3704 	ldrb.w	r3, [r3, #1796]	; 0x704
 8002ef8:	2b3a      	cmp	r3, #58	; 0x3a
 8002efa:	d12c      	bne.n	8002f56 <Wifi_RxCallBack+0x182>
          Wifi.RxDataLen=atoi((char*)&Wifi.RxBufferForDataTmp[3]);
 8002efc:	4851      	ldr	r0, [pc, #324]	; (8003044 <Wifi_RxCallBack+0x270>)
 8002efe:	f023 feb5 	bl	8026c6c <atoi>
 8002f02:	4603      	mov	r3, r0
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	4b4d      	ldr	r3, [pc, #308]	; (800303c <Wifi_RxCallBack+0x268>)
 8002f08:	f8a3 2710 	strh.w	r2, [r3, #1808]	; 0x710
 8002f0c:	e023      	b.n	8002f56 <Wifi_RxCallBack+0x182>
    }
    //--- Calculate Data len after +IPD
    //+++ Fill Data Buffer
    else  
    {      
    	ring_buffer_queue(&wifi_ring_buffer, (char)(Wifi.usartBuff));
 8002f0e:	4b4b      	ldr	r3, [pc, #300]	; (800303c <Wifi_RxCallBack+0x268>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	4619      	mov	r1, r3
 8002f14:	484c      	ldr	r0, [pc, #304]	; (8003048 <Wifi_RxCallBack+0x274>)
 8002f16:	f7ff fcf1 	bl	80028fc <ring_buffer_queue>

        if(Wifi.RxIndexForData < _WIFI_RX_FOR_DATA_SIZE)
 8002f1a:	4b48      	ldr	r3, [pc, #288]	; (800303c <Wifi_RxCallBack+0x268>)
 8002f1c:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	; 0x70e
 8002f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f24:	d207      	bcs.n	8002f36 <Wifi_RxCallBack+0x162>
          Wifi.RxIndexForData++;
 8002f26:	4b45      	ldr	r3, [pc, #276]	; (800303c <Wifi_RxCallBack+0x268>)
 8002f28:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	; 0x70e
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	4b42      	ldr	r3, [pc, #264]	; (800303c <Wifi_RxCallBack+0x268>)
 8002f32:	f8a3 270e 	strh.w	r2, [r3, #1806]	; 0x70e
        if( Wifi.RxIndexForData>= Wifi.RxDataLen)
 8002f36:	4b41      	ldr	r3, [pc, #260]	; (800303c <Wifi_RxCallBack+0x268>)
 8002f38:	f8b3 270e 	ldrh.w	r2, [r3, #1806]	; 0x70e
 8002f3c:	4b3f      	ldr	r3, [pc, #252]	; (800303c <Wifi_RxCallBack+0x268>)
 8002f3e:	f8b3 3710 	ldrh.w	r3, [r3, #1808]	; 0x710
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d307      	bcc.n	8002f56 <Wifi_RxCallBack+0x182>
        {
          Wifi.RxIsData=false;
 8002f46:	4b3d      	ldr	r3, [pc, #244]	; (800303c <Wifi_RxCallBack+0x268>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
          Wifi.GotNewData=true;
 8002f4e:	4b3b      	ldr	r3, [pc, #236]	; (800303c <Wifi_RxCallBack+0x268>)
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2719 	strb.w	r2, [r3, #1817]	; 0x719
        }
    }
    //--- Fill Data Buffer    
  }           
  //--- data buffer
	HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 8002f56:	2201      	movs	r2, #1
 8002f58:	4938      	ldr	r1, [pc, #224]	; (800303c <Wifi_RxCallBack+0x268>)
 8002f5a:	483c      	ldr	r0, [pc, #240]	; (800304c <Wifi_RxCallBack+0x278>)
 8002f5c:	f007 fdb5 	bl	800aaca <HAL_UART_Receive_IT>
  //+++ check +IPD in At command buffer
  if(Wifi.RxIndex>4)
 8002f60:	4b36      	ldr	r3, [pc, #216]	; (800303c <Wifi_RxCallBack+0x268>)
 8002f62:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d966      	bls.n	8003038 <Wifi_RxCallBack+0x264>
  {
    if( (Wifi.RxBuffer[Wifi.RxIndex-4]=='+') && (Wifi.RxBuffer[Wifi.RxIndex-3]=='I') && (Wifi.RxBuffer[Wifi.RxIndex-2]=='P') && (Wifi.RxBuffer[Wifi.RxIndex-1]=='D'))
 8002f6a:	4b34      	ldr	r3, [pc, #208]	; (800303c <Wifi_RxCallBack+0x268>)
 8002f6c:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8002f70:	3b04      	subs	r3, #4
 8002f72:	4a32      	ldr	r2, [pc, #200]	; (800303c <Wifi_RxCallBack+0x268>)
 8002f74:	4413      	add	r3, r2
 8002f76:	785b      	ldrb	r3, [r3, #1]
 8002f78:	2b2b      	cmp	r3, #43	; 0x2b
 8002f7a:	d15d      	bne.n	8003038 <Wifi_RxCallBack+0x264>
 8002f7c:	4b2f      	ldr	r3, [pc, #188]	; (800303c <Wifi_RxCallBack+0x268>)
 8002f7e:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8002f82:	3b03      	subs	r3, #3
 8002f84:	4a2d      	ldr	r2, [pc, #180]	; (800303c <Wifi_RxCallBack+0x268>)
 8002f86:	4413      	add	r3, r2
 8002f88:	785b      	ldrb	r3, [r3, #1]
 8002f8a:	2b49      	cmp	r3, #73	; 0x49
 8002f8c:	d154      	bne.n	8003038 <Wifi_RxCallBack+0x264>
 8002f8e:	4b2b      	ldr	r3, [pc, #172]	; (800303c <Wifi_RxCallBack+0x268>)
 8002f90:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8002f94:	3b02      	subs	r3, #2
 8002f96:	4a29      	ldr	r2, [pc, #164]	; (800303c <Wifi_RxCallBack+0x268>)
 8002f98:	4413      	add	r3, r2
 8002f9a:	785b      	ldrb	r3, [r3, #1]
 8002f9c:	2b50      	cmp	r3, #80	; 0x50
 8002f9e:	d14b      	bne.n	8003038 <Wifi_RxCallBack+0x264>
 8002fa0:	4b26      	ldr	r3, [pc, #152]	; (800303c <Wifi_RxCallBack+0x268>)
 8002fa2:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	4a24      	ldr	r2, [pc, #144]	; (800303c <Wifi_RxCallBack+0x268>)
 8002faa:	4413      	add	r3, r2
 8002fac:	785b      	ldrb	r3, [r3, #1]
 8002fae:	2b44      	cmp	r3, #68	; 0x44
 8002fb0:	d142      	bne.n	8003038 <Wifi_RxCallBack+0x264>
    {
      memset(Wifi.RxBufferForDataTmp,0,sizeof(Wifi.RxBufferForDataTmp));
 8002fb2:	2208      	movs	r2, #8
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	4826      	ldr	r0, [pc, #152]	; (8003050 <Wifi_RxCallBack+0x27c>)
 8002fb8:	f023 fede 	bl	8026d78 <memset>
      Wifi.RxBuffer[Wifi.RxIndex-4]=0;
 8002fbc:	4b1f      	ldr	r3, [pc, #124]	; (800303c <Wifi_RxCallBack+0x268>)
 8002fbe:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8002fc2:	3b04      	subs	r3, #4
 8002fc4:	4a1d      	ldr	r2, [pc, #116]	; (800303c <Wifi_RxCallBack+0x268>)
 8002fc6:	4413      	add	r3, r2
 8002fc8:	2200      	movs	r2, #0
 8002fca:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-3]=0;
 8002fcc:	4b1b      	ldr	r3, [pc, #108]	; (800303c <Wifi_RxCallBack+0x268>)
 8002fce:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8002fd2:	3b03      	subs	r3, #3
 8002fd4:	4a19      	ldr	r2, [pc, #100]	; (800303c <Wifi_RxCallBack+0x268>)
 8002fd6:	4413      	add	r3, r2
 8002fd8:	2200      	movs	r2, #0
 8002fda:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-2]=0;
 8002fdc:	4b17      	ldr	r3, [pc, #92]	; (800303c <Wifi_RxCallBack+0x268>)
 8002fde:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8002fe2:	3b02      	subs	r3, #2
 8002fe4:	4a15      	ldr	r2, [pc, #84]	; (800303c <Wifi_RxCallBack+0x268>)
 8002fe6:	4413      	add	r3, r2
 8002fe8:	2200      	movs	r2, #0
 8002fea:	705a      	strb	r2, [r3, #1]
      Wifi.RxBuffer[Wifi.RxIndex-1]=0;
 8002fec:	4b13      	ldr	r3, [pc, #76]	; (800303c <Wifi_RxCallBack+0x268>)
 8002fee:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	4a11      	ldr	r2, [pc, #68]	; (800303c <Wifi_RxCallBack+0x268>)
 8002ff6:	4413      	add	r3, r2
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	705a      	strb	r2, [r3, #1]
      Wifi.RxIndex-=4;
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	; (800303c <Wifi_RxCallBack+0x268>)
 8002ffe:	f8b3 3302 	ldrh.w	r3, [r3, #770]	; 0x302
 8003002:	3b04      	subs	r3, #4
 8003004:	b29a      	uxth	r2, r3
 8003006:	4b0d      	ldr	r3, [pc, #52]	; (800303c <Wifi_RxCallBack+0x268>)
 8003008:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
      Wifi.RxIndexForData=0;
 800300c:	4b0b      	ldr	r3, [pc, #44]	; (800303c <Wifi_RxCallBack+0x268>)
 800300e:	2200      	movs	r2, #0
 8003010:	f8a3 270e 	strh.w	r2, [r3, #1806]	; 0x70e
      Wifi.RxIndexForDataTmp=0;
 8003014:	4b09      	ldr	r3, [pc, #36]	; (800303c <Wifi_RxCallBack+0x268>)
 8003016:	2200      	movs	r2, #0
 8003018:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
      Wifi.RxIsData=true;
 800301c:	4b07      	ldr	r3, [pc, #28]	; (800303c <Wifi_RxCallBack+0x268>)
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
      Wifi.RxDataLen=0;  
 8003024:	4b05      	ldr	r3, [pc, #20]	; (800303c <Wifi_RxCallBack+0x268>)
 8003026:	2200      	movs	r2, #0
 8003028:	f8a3 2710 	strh.w	r2, [r3, #1808]	; 0x710
      Wifi.RxDataLastTime = HAL_GetTick();      
 800302c:	f003 f870 	bl	8006110 <HAL_GetTick>
 8003030:	4603      	mov	r3, r0
 8003032:	4a02      	ldr	r2, [pc, #8]	; (800303c <Wifi_RxCallBack+0x268>)
 8003034:	f8c2 3714 	str.w	r3, [r2, #1812]	; 0x714
    }
  }
#endif
  //--- check +IPD in At command buffer  
}
 8003038:	bf00      	nop
 800303a:	bd80      	pop	{r7, pc}
 800303c:	2000a4e0 	.word	0x2000a4e0
 8003040:	2000abe5 	.word	0x2000abe5
 8003044:	2000abe7 	.word	0x2000abe7
 8003048:	2000a45c 	.word	0x2000a45c
 800304c:	2000b09c 	.word	0x2000b09c
 8003050:	2000abe4 	.word	0x2000abe4

08003054 <WifiTask>:
//#########################################################################################################
//#########################################################################################################
extern int32_t MQTT_Socket;

void WifiTask(void const * argument)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
	DEBUG_PRINT("Start WiFi Task !");
 800305c:	f44f 738d 	mov.w	r3, #282	; 0x11a
 8003060:	4a2b      	ldr	r2, [pc, #172]	; (8003110 <WifiTask+0xbc>)
 8003062:	492c      	ldr	r1, [pc, #176]	; (8003114 <WifiTask+0xc0>)
 8003064:	482c      	ldr	r0, [pc, #176]	; (8003118 <WifiTask+0xc4>)
 8003066:	f001 ff31 	bl	8004ecc <_debugPrint>

	osDelay(1000);
 800306a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800306e:	f009 fba6 	bl	800c7be <osDelay>
	Wifi_SendString("AT\r\n");
 8003072:	482a      	ldr	r0, [pc, #168]	; (800311c <WifiTask+0xc8>)
 8003074:	f7ff fd86 	bl	8002b84 <Wifi_SendString>
 	Wifi_SetRfPower(82);
 8003078:	2052      	movs	r0, #82	; 0x52
 800307a:	f000 f8a3 	bl	80031c4 <Wifi_SetRfPower>

    Wifi_TcpIp_GetMultiConnection();
 800307e:	f000 faf9 	bl	8003674 <Wifi_TcpIp_GetMultiConnection>
    Wifi_TcpIp_Close(0);
 8003082:	2000      	movs	r0, #0
 8003084:	f000 fb5a 	bl	800373c <Wifi_TcpIp_Close>
    Wifi_TcpIp_Close(1);
 8003088:	2001      	movs	r0, #1
 800308a:	f000 fb57 	bl	800373c <Wifi_TcpIp_Close>
    Wifi_TcpIp_Close(2);
 800308e:	2002      	movs	r0, #2
 8003090:	f000 fb54 	bl	800373c <Wifi_TcpIp_Close>
    Wifi_TcpIp_Close(3);
 8003094:	2003      	movs	r0, #3
 8003096:	f000 fb51 	bl	800373c <Wifi_TcpIp_Close>
    Wifi_TcpIp_Close(4);
 800309a:	2004      	movs	r0, #4
 800309c:	f000 fb4e 	bl	800373c <Wifi_TcpIp_Close>
    Wifi_TcpIp_SetMultiConnection(false);
 80030a0:	2000      	movs	r0, #0
 80030a2:	f000 fa93 	bl	80035cc <Wifi_TcpIp_SetMultiConnection>
    DEBUG_PRINT("MultiConnection false !");
 80030a6:	f240 1327 	movw	r3, #295	; 0x127
 80030aa:	4a19      	ldr	r2, [pc, #100]	; (8003110 <WifiTask+0xbc>)
 80030ac:	4919      	ldr	r1, [pc, #100]	; (8003114 <WifiTask+0xc0>)
 80030ae:	481c      	ldr	r0, [pc, #112]	; (8003120 <WifiTask+0xcc>)
 80030b0:	f001 ff0c 	bl	8004ecc <_debugPrint>

	Wifi_GetMode();
 80030b4:	f000 f928 	bl	8003308 <Wifi_GetMode>
	DEBUG_PRINT("Get WiFi..");
 80030b8:	f44f 7395 	mov.w	r3, #298	; 0x12a
 80030bc:	4a14      	ldr	r2, [pc, #80]	; (8003110 <WifiTask+0xbc>)
 80030be:	4915      	ldr	r1, [pc, #84]	; (8003114 <WifiTask+0xc0>)
 80030c0:	4818      	ldr	r0, [pc, #96]	; (8003124 <WifiTask+0xd0>)
 80030c2:	f001 ff03 	bl	8004ecc <_debugPrint>

	Wifi_Station_DhcpIsEnable();
 80030c6:	f000 f9f3 	bl	80034b0 <Wifi_Station_DhcpIsEnable>
	DEBUG_PRINT("DhcpIsEnable..");
 80030ca:	f240 132d 	movw	r3, #301	; 0x12d
 80030ce:	4a10      	ldr	r2, [pc, #64]	; (8003110 <WifiTask+0xbc>)
 80030d0:	4910      	ldr	r1, [pc, #64]	; (8003114 <WifiTask+0xc0>)
 80030d2:	4815      	ldr	r0, [pc, #84]	; (8003128 <WifiTask+0xd4>)
 80030d4:	f001 fefa 	bl	8004ecc <_debugPrint>

	Wifi_UserInit();
 80030d8:	f000 fba2 	bl	8003820 <Wifi_UserInit>
	DEBUG_PRINT("Wi-Fi Connect");
 80030dc:	f44f 7398 	mov.w	r3, #304	; 0x130
 80030e0:	4a0b      	ldr	r2, [pc, #44]	; (8003110 <WifiTask+0xbc>)
 80030e2:	490c      	ldr	r1, [pc, #48]	; (8003114 <WifiTask+0xc0>)
 80030e4:	4811      	ldr	r0, [pc, #68]	; (800312c <WifiTask+0xd8>)
 80030e6:	f001 fef1 	bl	8004ecc <_debugPrint>

	do
	{

	}while (Connect_Broker() == CONNECT_FAIL);
 80030ea:	f7ff f90b 	bl	8002304 <Connect_Broker>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0fa      	beq.n	80030ea <WifiTask+0x96>

	DEBUG_PRINT("Connect Broker !");
 80030f4:	f240 1337 	movw	r3, #311	; 0x137
 80030f8:	4a05      	ldr	r2, [pc, #20]	; (8003110 <WifiTask+0xbc>)
 80030fa:	4906      	ldr	r1, [pc, #24]	; (8003114 <WifiTask+0xc0>)
 80030fc:	480c      	ldr	r0, [pc, #48]	; (8003130 <WifiTask+0xdc>)
 80030fe:	f001 fee5 	bl	8004ecc <_debugPrint>

	while (1)
	{
		awaitSubscribes();
 8003102:	f7ff fa8d 	bl	8002620 <awaitSubscribes>
		osDelay(1);
 8003106:	2001      	movs	r0, #1
 8003108:	f009 fb59 	bl	800c7be <osDelay>
		awaitSubscribes();
 800310c:	e7f9      	b.n	8003102 <WifiTask+0xae>
 800310e:	bf00      	nop
 8003110:	0802a06c 	.word	0x0802a06c
 8003114:	08028f5c 	.word	0x08028f5c
 8003118:	08028f74 	.word	0x08028f74
 800311c:	08028f88 	.word	0x08028f88
 8003120:	08028f90 	.word	0x08028f90
 8003124:	08028fa8 	.word	0x08028fa8
 8003128:	08028fb4 	.word	0x08028fb4
 800312c:	08028fc4 	.word	0x08028fc4
 8003130:	08028fd4 	.word	0x08028fd4

08003134 <WifiInit>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
void WifiInit(osPriority	Priority)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08c      	sub	sp, #48	; 0x30
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Receive_IT(&_WIFI_USART,&Wifi.usartBuff,1);
 800313e:	2201      	movs	r2, #1
 8003140:	4919      	ldr	r1, [pc, #100]	; (80031a8 <WifiInit+0x74>)
 8003142:	481a      	ldr	r0, [pc, #104]	; (80031ac <WifiInit+0x78>)
 8003144:	f007 fcc1 	bl	800aaca <HAL_UART_Receive_IT>

	ring_buffer_init(&wifi_ring_buffer);
 8003148:	4819      	ldr	r0, [pc, #100]	; (80031b0 <WifiInit+0x7c>)
 800314a:	f7ff fbc5 	bl	80028d8 <ring_buffer_init>


	Wifi_RxClear();
 800314e:	f7ff fe17 	bl	8002d80 <Wifi_RxClear>
	Wifi_TxClear();
 8003152:	f7ff fe33 	bl	8002dbc <Wifi_TxClear>
	osSemaphoreDef(WifiSemHandle);
 8003156:	2300      	movs	r3, #0
 8003158:	62bb      	str	r3, [r7, #40]	; 0x28
 800315a:	2300      	movs	r3, #0
 800315c:	62fb      	str	r3, [r7, #44]	; 0x2c
	WifiSemHandle = osSemaphoreCreate(osSemaphore(WifiSemHandle), 1);
 800315e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003162:	2101      	movs	r1, #1
 8003164:	4618      	mov	r0, r3
 8003166:	f009 fbcb 	bl	800c900 <osSemaphoreCreate>
 800316a:	4603      	mov	r3, r0
 800316c:	4a11      	ldr	r2, [pc, #68]	; (80031b4 <WifiInit+0x80>)
 800316e:	6013      	str	r3, [r2, #0]
	osThreadDef(WifiTaskName, WifiTask, Priority, 0, _WIFI_TASK_SIZE);
 8003170:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <WifiInit+0x84>)
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	4b11      	ldr	r3, [pc, #68]	; (80031bc <WifiInit+0x88>)
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	88fb      	ldrh	r3, [r7, #6]
 800317a:	82bb      	strh	r3, [r7, #20]
 800317c:	2300      	movs	r3, #0
 800317e:	61bb      	str	r3, [r7, #24]
 8003180:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003184:	61fb      	str	r3, [r7, #28]
 8003186:	2300      	movs	r3, #0
 8003188:	623b      	str	r3, [r7, #32]
 800318a:	2300      	movs	r3, #0
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
	WifiTaskHandle = osThreadCreate(osThread(WifiTaskName), NULL);	
 800318e:	f107 030c 	add.w	r3, r7, #12
 8003192:	2100      	movs	r1, #0
 8003194:	4618      	mov	r0, r3
 8003196:	f009 fac6 	bl	800c726 <osThreadCreate>
 800319a:	4603      	mov	r3, r0
 800319c:	4a08      	ldr	r2, [pc, #32]	; (80031c0 <WifiInit+0x8c>)
 800319e:	6013      	str	r3, [r2, #0]
}
 80031a0:	bf00      	nop
 80031a2:	3730      	adds	r7, #48	; 0x30
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	2000a4e0 	.word	0x2000a4e0
 80031ac:	2000b09c 	.word	0x2000b09c
 80031b0:	2000a45c 	.word	0x2000a45c
 80031b4:	2000a448 	.word	0x2000a448
 80031b8:	08028fe8 	.word	0x08028fe8
 80031bc:	08003055 	.word	0x08003055
 80031c0:	2000a3b4 	.word	0x2000a3b4

080031c4 <Wifi_SetRfPower>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;			
}
//#########################################################################################################
bool	Wifi_SetRfPower(uint8_t Power_0_to_82)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	4603      	mov	r3, r0
 80031cc:	71fb      	strb	r3, [r7, #7]
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 80031ce:	4b1f      	ldr	r3, [pc, #124]	; (800324c <Wifi_SetRfPower+0x88>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f04f 31ff 	mov.w	r1, #4294967295
 80031d6:	4618      	mov	r0, r3
 80031d8:	f009 fbd2 	bl	800c980 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 80031dc:	2300      	movs	r3, #0
 80031de:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 80031e0:	f7ff fdce 	bl	8002d80 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+RFPOWER=%d\r\n",Power_0_to_82);
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	461a      	mov	r2, r3
 80031e8:	4919      	ldr	r1, [pc, #100]	; (8003250 <Wifi_SetRfPower+0x8c>)
 80031ea:	481a      	ldr	r0, [pc, #104]	; (8003254 <Wifi_SetRfPower+0x90>)
 80031ec:	f024 f9f4 	bl	80275d8 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80031f0:	4818      	ldr	r0, [pc, #96]	; (8003254 <Wifi_SetRfPower+0x90>)
 80031f2:	f7ff fcc7 	bl	8002b84 <Wifi_SendString>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f083 0301 	eor.w	r3, r3, #1
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d115      	bne.n	800322e <Wifi_SetRfPower+0x6a>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8003202:	f107 010e 	add.w	r1, r7, #14
 8003206:	4b14      	ldr	r3, [pc, #80]	; (8003258 <Wifi_SetRfPower+0x94>)
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	4b14      	ldr	r3, [pc, #80]	; (800325c <Wifi_SetRfPower+0x98>)
 800320c:	2202      	movs	r2, #2
 800320e:	f241 3088 	movw	r0, #5000	; 0x1388
 8003212:	f7ff fcc9 	bl	8002ba8 <Wifi_WaitForString>
 8003216:	4603      	mov	r3, r0
 8003218:	f083 0301 	eor.w	r3, r3, #1
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d107      	bne.n	8003232 <Wifi_SetRfPower+0x6e>
			break;
		if(result == 2)
 8003222:	7bbb      	ldrb	r3, [r7, #14]
 8003224:	2b02      	cmp	r3, #2
 8003226:	d006      	beq.n	8003236 <Wifi_SetRfPower+0x72>
			break;			
		returnVal=true;	
 8003228:	2301      	movs	r3, #1
 800322a:	73fb      	strb	r3, [r7, #15]
 800322c:	e004      	b.n	8003238 <Wifi_SetRfPower+0x74>
			break;
 800322e:	bf00      	nop
 8003230:	e002      	b.n	8003238 <Wifi_SetRfPower+0x74>
			break;
 8003232:	bf00      	nop
 8003234:	e000      	b.n	8003238 <Wifi_SetRfPower+0x74>
			break;			
 8003236:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8003238:	4b04      	ldr	r3, [pc, #16]	; (800324c <Wifi_SetRfPower+0x88>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f009 fbed 	bl	800ca1c <osSemaphoreRelease>
	return returnVal;		
 8003242:	7bfb      	ldrb	r3, [r7, #15]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	2000a448 	.word	0x2000a448
 8003250:	08029040 	.word	0x08029040
 8003254:	2000a6e1 	.word	0x2000a6e1
 8003258:	08029008 	.word	0x08029008
 800325c:	08029004 	.word	0x08029004

08003260 <Wifi_SetMode>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool Wifi_SetMode(WifiMode_t	WifiMode_)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af02      	add	r7, sp, #8
 8003266:	4603      	mov	r3, r0
 8003268:	71fb      	strb	r3, [r7, #7]
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 800326a:	4b21      	ldr	r3, [pc, #132]	; (80032f0 <Wifi_SetMode+0x90>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f04f 31ff 	mov.w	r1, #4294967295
 8003272:	4618      	mov	r0, r3
 8003274:	f009 fb84 	bl	800c980 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8003278:	2300      	movs	r3, #0
 800327a:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 800327c:	f7ff fd80 	bl	8002d80 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWMODE_CUR=%d\r\n",WifiMode_);
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	461a      	mov	r2, r3
 8003284:	491b      	ldr	r1, [pc, #108]	; (80032f4 <Wifi_SetMode+0x94>)
 8003286:	481c      	ldr	r0, [pc, #112]	; (80032f8 <Wifi_SetMode+0x98>)
 8003288:	f024 f9a6 	bl	80275d8 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800328c:	481a      	ldr	r0, [pc, #104]	; (80032f8 <Wifi_SetMode+0x98>)
 800328e:	f7ff fc79 	bl	8002b84 <Wifi_SendString>
 8003292:	4603      	mov	r3, r0
 8003294:	f083 0301 	eor.w	r3, r3, #1
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d119      	bne.n	80032d2 <Wifi_SetMode+0x72>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800329e:	f107 010e 	add.w	r1, r7, #14
 80032a2:	4b16      	ldr	r3, [pc, #88]	; (80032fc <Wifi_SetMode+0x9c>)
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	4b16      	ldr	r3, [pc, #88]	; (8003300 <Wifi_SetMode+0xa0>)
 80032a8:	2202      	movs	r2, #2
 80032aa:	f241 3088 	movw	r0, #5000	; 0x1388
 80032ae:	f7ff fc7b 	bl	8002ba8 <Wifi_WaitForString>
 80032b2:	4603      	mov	r3, r0
 80032b4:	f083 0301 	eor.w	r3, r3, #1
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10b      	bne.n	80032d6 <Wifi_SetMode+0x76>
			break;
		if(result == 2)
 80032be:	7bbb      	ldrb	r3, [r7, #14]
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d00a      	beq.n	80032da <Wifi_SetMode+0x7a>
			break;			
		Wifi.Mode = WifiMode_;
 80032c4:	4a0f      	ldr	r2, [pc, #60]	; (8003304 <Wifi_SetMode+0xa4>)
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	f882 371a 	strb.w	r3, [r2, #1818]	; 0x71a
		returnVal=true;	
 80032cc:	2301      	movs	r3, #1
 80032ce:	73fb      	strb	r3, [r7, #15]
 80032d0:	e004      	b.n	80032dc <Wifi_SetMode+0x7c>
			break;
 80032d2:	bf00      	nop
 80032d4:	e002      	b.n	80032dc <Wifi_SetMode+0x7c>
			break;
 80032d6:	bf00      	nop
 80032d8:	e000      	b.n	80032dc <Wifi_SetMode+0x7c>
			break;			
 80032da:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 80032dc:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <Wifi_SetMode+0x90>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f009 fb9b 	bl	800ca1c <osSemaphoreRelease>
	return returnVal;		
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	2000a448 	.word	0x2000a448
 80032f4:	08029050 	.word	0x08029050
 80032f8:	2000a6e1 	.word	0x2000a6e1
 80032fc:	08029008 	.word	0x08029008
 8003300:	08029004 	.word	0x08029004
 8003304:	2000a4e0 	.word	0x2000a4e0

08003308 <Wifi_GetMode>:
//#########################################################################################################
bool Wifi_GetMode(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af02      	add	r7, sp, #8
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 800330e:	4b27      	ldr	r3, [pc, #156]	; (80033ac <Wifi_GetMode+0xa4>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f04f 31ff 	mov.w	r1, #4294967295
 8003316:	4618      	mov	r0, r3
 8003318:	f009 fb32 	bl	800c980 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 800331c:	2300      	movs	r3, #0
 800331e:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 8003320:	f7ff fd2e 	bl	8002d80 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWMODE_CUR?\r\n");
 8003324:	4922      	ldr	r1, [pc, #136]	; (80033b0 <Wifi_GetMode+0xa8>)
 8003326:	4823      	ldr	r0, [pc, #140]	; (80033b4 <Wifi_GetMode+0xac>)
 8003328:	f024 f956 	bl	80275d8 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800332c:	4821      	ldr	r0, [pc, #132]	; (80033b4 <Wifi_GetMode+0xac>)
 800332e:	f7ff fc29 	bl	8002b84 <Wifi_SendString>
 8003332:	4603      	mov	r3, r0
 8003334:	f083 0301 	eor.w	r3, r3, #1
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d126      	bne.n	800338c <Wifi_GetMode+0x84>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800333e:	1db9      	adds	r1, r7, #6
 8003340:	4b1d      	ldr	r3, [pc, #116]	; (80033b8 <Wifi_GetMode+0xb0>)
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	4b1d      	ldr	r3, [pc, #116]	; (80033bc <Wifi_GetMode+0xb4>)
 8003346:	2202      	movs	r2, #2
 8003348:	f241 3088 	movw	r0, #5000	; 0x1388
 800334c:	f7ff fc2c 	bl	8002ba8 <Wifi_WaitForString>
 8003350:	4603      	mov	r3, r0
 8003352:	f083 0301 	eor.w	r3, r3, #1
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d119      	bne.n	8003390 <Wifi_GetMode+0x88>
			break;
		if(result == 2)
 800335c:	79bb      	ldrb	r3, [r7, #6]
 800335e:	2b02      	cmp	r3, #2
 8003360:	d018      	beq.n	8003394 <Wifi_GetMode+0x8c>
			break;			
		if(Wifi_ReturnInteger((int32_t*)&result,1,":"))
 8003362:	1dbb      	adds	r3, r7, #6
 8003364:	4a16      	ldr	r2, [pc, #88]	; (80033c0 <Wifi_GetMode+0xb8>)
 8003366:	2101      	movs	r1, #1
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff fce7 	bl	8002d3c <Wifi_ReturnInteger>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d004      	beq.n	800337e <Wifi_GetMode+0x76>
			Wifi.Mode = (WifiMode_t)result ;
 8003374:	79ba      	ldrb	r2, [r7, #6]
 8003376:	4b13      	ldr	r3, [pc, #76]	; (80033c4 <Wifi_GetMode+0xbc>)
 8003378:	f883 271a 	strb.w	r2, [r3, #1818]	; 0x71a
 800337c:	e003      	b.n	8003386 <Wifi_GetMode+0x7e>
		else
			Wifi.Mode = WifiMode_Error;
 800337e:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <Wifi_GetMode+0xbc>)
 8003380:	2200      	movs	r2, #0
 8003382:	f883 271a 	strb.w	r2, [r3, #1818]	; 0x71a
		returnVal=true;	
 8003386:	2301      	movs	r3, #1
 8003388:	71fb      	strb	r3, [r7, #7]
 800338a:	e004      	b.n	8003396 <Wifi_GetMode+0x8e>
			break;
 800338c:	bf00      	nop
 800338e:	e002      	b.n	8003396 <Wifi_GetMode+0x8e>
			break;
 8003390:	bf00      	nop
 8003392:	e000      	b.n	8003396 <Wifi_GetMode+0x8e>
			break;			
 8003394:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8003396:	4b05      	ldr	r3, [pc, #20]	; (80033ac <Wifi_GetMode+0xa4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f009 fb3e 	bl	800ca1c <osSemaphoreRelease>
	return returnVal;
 80033a0:	79fb      	ldrb	r3, [r7, #7]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	2000a448 	.word	0x2000a448
 80033b0:	08029064 	.word	0x08029064
 80033b4:	2000a6e1 	.word	0x2000a6e1
 80033b8:	08029008 	.word	0x08029008
 80033bc:	08029004 	.word	0x08029004
 80033c0:	08029078 	.word	0x08029078
 80033c4:	2000a4e0 	.word	0x2000a4e0

080033c8 <Wifi_Station_ConnectToAp>:
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
//#########################################################################################################
bool	Wifi_Station_ConnectToAp(char *SSID,char *Pass,char *MAC)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af02      	add	r7, sp, #8
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 80033d4:	4b2c      	ldr	r3, [pc, #176]	; (8003488 <Wifi_Station_ConnectToAp+0xc0>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f04f 31ff 	mov.w	r1, #4294967295
 80033dc:	4618      	mov	r0, r3
 80033de:	f009 facf 	bl	800c980 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 80033e2:	2300      	movs	r3, #0
 80033e4:	75fb      	strb	r3, [r7, #23]
	do
	{
		Wifi_RxClear();
 80033e6:	f7ff fccb 	bl	8002d80 <Wifi_RxClear>
		if(MAC==NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d106      	bne.n	80033fe <Wifi_Station_ConnectToAp+0x36>
		{
			sprintf((char*)Wifi.TxBuffer,"AT+CWJAP_CUR=\"%s\",\"%s\"\r\n",SSID,Pass);
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4925      	ldr	r1, [pc, #148]	; (800348c <Wifi_Station_ConnectToAp+0xc4>)
 80033f6:	4826      	ldr	r0, [pc, #152]	; (8003490 <Wifi_Station_ConnectToAp+0xc8>)
 80033f8:	f024 f8ee 	bl	80275d8 <siprintf>
 80033fc:	e007      	b.n	800340e <Wifi_Station_ConnectToAp+0x46>
			//sprintf((char*)Wifi.TxBuffer,"AT+CWJAP=\"%s\",\"%s\"\r\n",SSID,Pass);
		}
		else
		{
			sprintf((char*)Wifi.TxBuffer,"AT+CWJAP_CUR=\"%s\",\"%s\",\"%s\"\r\n",SSID,Pass,MAC);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4923      	ldr	r1, [pc, #140]	; (8003494 <Wifi_Station_ConnectToAp+0xcc>)
 8003408:	4821      	ldr	r0, [pc, #132]	; (8003490 <Wifi_Station_ConnectToAp+0xc8>)
 800340a:	f024 f8e5 	bl	80275d8 <siprintf>
			//sprintf((char*)Wifi.TxBuffer,"AT+CWJAP=\"%s\",\"%s\",\"%s\"\r\n",SSID,Pass,MAC);
		}
		if (Wifi_SendString((char*)Wifi.TxBuffer)==false)
 800340e:	4820      	ldr	r0, [pc, #128]	; (8003490 <Wifi_Station_ConnectToAp+0xc8>)
 8003410:	f7ff fbb8 	bl	8002b84 <Wifi_SendString>
 8003414:	4603      	mov	r3, r0
 8003416:	f083 0301 	eor.w	r3, r3, #1
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	d007      	beq.n	8003430 <Wifi_Station_ConnectToAp+0x68>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)"111\r\n", (uint16_t)strlen("111\r\n"), 1000);
 8003420:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003424:	2205      	movs	r2, #5
 8003426:	491c      	ldr	r1, [pc, #112]	; (8003498 <Wifi_Station_ConnectToAp+0xd0>)
 8003428:	481c      	ldr	r0, [pc, #112]	; (800349c <Wifi_Station_ConnectToAp+0xd4>)
 800342a:	f007 fabc 	bl	800a9a6 <HAL_UART_Transmit>
			break;
 800342e:	e020      	b.n	8003472 <Wifi_Station_ConnectToAp+0xaa>
		}
		if (Wifi_WaitForString(_WIFI_WAIT_TIME_VERYHIGH,&result,3,"\r\nOK\r\n","\r\nERROR\r\n","\r\nFAIL\r\n")==false)
 8003430:	f107 0116 	add.w	r1, r7, #22
 8003434:	4b1a      	ldr	r3, [pc, #104]	; (80034a0 <Wifi_Station_ConnectToAp+0xd8>)
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	4b1a      	ldr	r3, [pc, #104]	; (80034a4 <Wifi_Station_ConnectToAp+0xdc>)
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <Wifi_Station_ConnectToAp+0xe0>)
 800343e:	2203      	movs	r2, #3
 8003440:	f64e 2060 	movw	r0, #60000	; 0xea60
 8003444:	f7ff fbb0 	bl	8002ba8 <Wifi_WaitForString>
 8003448:	4603      	mov	r3, r0
 800344a:	f083 0301 	eor.w	r3, r3, #1
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d007      	beq.n	8003464 <Wifi_Station_ConnectToAp+0x9c>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)"ERROR!!!!!!!!!!!!!\r\n", (uint16_t)strlen("ERROR!!!!!!!!!!!!!\r\n"), 1000);
 8003454:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003458:	2214      	movs	r2, #20
 800345a:	4914      	ldr	r1, [pc, #80]	; (80034ac <Wifi_Station_ConnectToAp+0xe4>)
 800345c:	480f      	ldr	r0, [pc, #60]	; (800349c <Wifi_Station_ConnectToAp+0xd4>)
 800345e:	f007 faa2 	bl	800a9a6 <HAL_UART_Transmit>
			break;
 8003462:	e006      	b.n	8003472 <Wifi_Station_ConnectToAp+0xaa>
		}

		if( result > 1)
 8003464:	7dbb      	ldrb	r3, [r7, #22]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d802      	bhi.n	8003470 <Wifi_Station_ConnectToAp+0xa8>
		{
			break;
		}
		returnVal=true;	
 800346a:	2301      	movs	r3, #1
 800346c:	75fb      	strb	r3, [r7, #23]
 800346e:	e000      	b.n	8003472 <Wifi_Station_ConnectToAp+0xaa>
			break;
 8003470:	bf00      	nop
	}while(0);

	osSemaphoreRelease(WifiSemHandle);
 8003472:	4b05      	ldr	r3, [pc, #20]	; (8003488 <Wifi_Station_ConnectToAp+0xc0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f009 fad0 	bl	800ca1c <osSemaphoreRelease>
	return returnVal;		
 800347c:	7dfb      	ldrb	r3, [r7, #23]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3718      	adds	r7, #24
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	2000a448 	.word	0x2000a448
 800348c:	080290e8 	.word	0x080290e8
 8003490:	2000a6e1 	.word	0x2000a6e1
 8003494:	08029104 	.word	0x08029104
 8003498:	08029124 	.word	0x08029124
 800349c:	2000b058 	.word	0x2000b058
 80034a0:	08029134 	.word	0x08029134
 80034a4:	08029140 	.word	0x08029140
 80034a8:	0802912c 	.word	0x0802912c
 80034ac:	0802914c 	.word	0x0802914c

080034b0 <Wifi_Station_DhcpIsEnable>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;		
}
//#########################################################################################################
bool	Wifi_Station_DhcpIsEnable(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af02      	add	r7, sp, #8
	osSemaphoreWait(WifiSemHandle,osWaitForever);
 80034b6:	4b3e      	ldr	r3, [pc, #248]	; (80035b0 <Wifi_Station_DhcpIsEnable+0x100>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f04f 31ff 	mov.w	r1, #4294967295
 80034be:	4618      	mov	r0, r3
 80034c0:	f009 fa5e 	bl	800c980 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 80034c4:	2300      	movs	r3, #0
 80034c6:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 80034c8:	f7ff fc5a 	bl	8002d80 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CWDHCP_CUR?\r\n");
 80034cc:	4939      	ldr	r1, [pc, #228]	; (80035b4 <Wifi_Station_DhcpIsEnable+0x104>)
 80034ce:	483a      	ldr	r0, [pc, #232]	; (80035b8 <Wifi_Station_DhcpIsEnable+0x108>)
 80034d0:	f024 f882 	bl	80275d8 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80034d4:	4838      	ldr	r0, [pc, #224]	; (80035b8 <Wifi_Station_DhcpIsEnable+0x108>)
 80034d6:	f7ff fb55 	bl	8002b84 <Wifi_SendString>
 80034da:	4603      	mov	r3, r0
 80034dc:	f083 0301 	eor.w	r3, r3, #1
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d153      	bne.n	800358e <Wifi_Station_DhcpIsEnable+0xde>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 80034e6:	1db9      	adds	r1, r7, #6
 80034e8:	4b34      	ldr	r3, [pc, #208]	; (80035bc <Wifi_Station_DhcpIsEnable+0x10c>)
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	4b34      	ldr	r3, [pc, #208]	; (80035c0 <Wifi_Station_DhcpIsEnable+0x110>)
 80034ee:	2202      	movs	r2, #2
 80034f0:	f241 3088 	movw	r0, #5000	; 0x1388
 80034f4:	f7ff fb58 	bl	8002ba8 <Wifi_WaitForString>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f083 0301 	eor.w	r3, r3, #1
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d146      	bne.n	8003592 <Wifi_Station_DhcpIsEnable+0xe2>
			break;
		if(result == 2)
 8003504:	79bb      	ldrb	r3, [r7, #6]
 8003506:	2b02      	cmp	r3, #2
 8003508:	d045      	beq.n	8003596 <Wifi_Station_DhcpIsEnable+0xe6>
			break;		
		if(Wifi_ReturnInteger((int32_t*)&result,1,":")==false)
 800350a:	1dbb      	adds	r3, r7, #6
 800350c:	4a2d      	ldr	r2, [pc, #180]	; (80035c4 <Wifi_Station_DhcpIsEnable+0x114>)
 800350e:	2101      	movs	r1, #1
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff fc13 	bl	8002d3c <Wifi_ReturnInteger>
 8003516:	4603      	mov	r3, r0
 8003518:	f083 0301 	eor.w	r3, r3, #1
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d13b      	bne.n	800359a <Wifi_Station_DhcpIsEnable+0xea>
			break;
		switch(result)
 8003522:	79bb      	ldrb	r3, [r7, #6]
 8003524:	2b03      	cmp	r3, #3
 8003526:	d82f      	bhi.n	8003588 <Wifi_Station_DhcpIsEnable+0xd8>
 8003528:	a201      	add	r2, pc, #4	; (adr r2, 8003530 <Wifi_Station_DhcpIsEnable+0x80>)
 800352a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352e:	bf00      	nop
 8003530:	08003541 	.word	0x08003541
 8003534:	08003553 	.word	0x08003553
 8003538:	08003565 	.word	0x08003565
 800353c:	08003577 	.word	0x08003577
		{
			case 0:
				Wifi.StationDhcp=false;
 8003540:	4b21      	ldr	r3, [pc, #132]	; (80035c8 <Wifi_Station_DhcpIsEnable+0x118>)
 8003542:	2200      	movs	r2, #0
 8003544:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
				Wifi.SoftApDhcp=false;				
 8003548:	4b1f      	ldr	r3, [pc, #124]	; (80035c8 <Wifi_Station_DhcpIsEnable+0x118>)
 800354a:	2200      	movs	r2, #0
 800354c:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
			break;
 8003550:	e01a      	b.n	8003588 <Wifi_Station_DhcpIsEnable+0xd8>
			case 1:
				Wifi.StationDhcp=false;
 8003552:	4b1d      	ldr	r3, [pc, #116]	; (80035c8 <Wifi_Station_DhcpIsEnable+0x118>)
 8003554:	2200      	movs	r2, #0
 8003556:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
				Wifi.SoftApDhcp=true;				
 800355a:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <Wifi_Station_DhcpIsEnable+0x118>)
 800355c:	2201      	movs	r2, #1
 800355e:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
			break;
 8003562:	e011      	b.n	8003588 <Wifi_Station_DhcpIsEnable+0xd8>
			case 2:
				Wifi.StationDhcp=true;
 8003564:	4b18      	ldr	r3, [pc, #96]	; (80035c8 <Wifi_Station_DhcpIsEnable+0x118>)
 8003566:	2201      	movs	r2, #1
 8003568:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
				Wifi.SoftApDhcp=false;				
 800356c:	4b16      	ldr	r3, [pc, #88]	; (80035c8 <Wifi_Station_DhcpIsEnable+0x118>)
 800356e:	2200      	movs	r2, #0
 8003570:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
			break;
 8003574:	e008      	b.n	8003588 <Wifi_Station_DhcpIsEnable+0xd8>
			case 3:
				Wifi.StationDhcp=true;
 8003576:	4b14      	ldr	r3, [pc, #80]	; (80035c8 <Wifi_Station_DhcpIsEnable+0x118>)
 8003578:	2201      	movs	r2, #1
 800357a:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
				Wifi.SoftApDhcp=true;				
 800357e:	4b12      	ldr	r3, [pc, #72]	; (80035c8 <Wifi_Station_DhcpIsEnable+0x118>)
 8003580:	2201      	movs	r2, #1
 8003582:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
			break;			
 8003586:	bf00      	nop
		}
		returnVal=true;	
 8003588:	2301      	movs	r3, #1
 800358a:	71fb      	strb	r3, [r7, #7]
 800358c:	e006      	b.n	800359c <Wifi_Station_DhcpIsEnable+0xec>
			break;
 800358e:	bf00      	nop
 8003590:	e004      	b.n	800359c <Wifi_Station_DhcpIsEnable+0xec>
			break;
 8003592:	bf00      	nop
 8003594:	e002      	b.n	800359c <Wifi_Station_DhcpIsEnable+0xec>
			break;		
 8003596:	bf00      	nop
 8003598:	e000      	b.n	800359c <Wifi_Station_DhcpIsEnable+0xec>
			break;
 800359a:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 800359c:	4b04      	ldr	r3, [pc, #16]	; (80035b0 <Wifi_Station_DhcpIsEnable+0x100>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f009 fa3b 	bl	800ca1c <osSemaphoreRelease>
	return returnVal;		
 80035a6:	79fb      	ldrb	r3, [r7, #7]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	2000a448 	.word	0x2000a448
 80035b4:	08029188 	.word	0x08029188
 80035b8:	2000a6e1 	.word	0x2000a6e1
 80035bc:	08029008 	.word	0x08029008
 80035c0:	08029004 	.word	0x08029004
 80035c4:	08029078 	.word	0x08029078
 80035c8:	2000a4e0 	.word	0x2000a4e0

080035cc <Wifi_TcpIp_SetMultiConnection>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;		
}
//#########################################################################################################
bool  Wifi_TcpIp_SetMultiConnection(bool EnableMultiConnections)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af02      	add	r7, sp, #8
 80035d2:	4603      	mov	r3, r0
 80035d4:	71fb      	strb	r3, [r7, #7]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 80035d6:	4b21      	ldr	r3, [pc, #132]	; (800365c <Wifi_TcpIp_SetMultiConnection+0x90>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f04f 31ff 	mov.w	r1, #4294967295
 80035de:	4618      	mov	r0, r3
 80035e0:	f009 f9ce 	bl	800c980 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 80035e4:	2300      	movs	r3, #0
 80035e6:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 80035e8:	f7ff fbca 	bl	8002d80 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPMUX=%d\r\n",EnableMultiConnections);
 80035ec:	79fb      	ldrb	r3, [r7, #7]
 80035ee:	461a      	mov	r2, r3
 80035f0:	491b      	ldr	r1, [pc, #108]	; (8003660 <Wifi_TcpIp_SetMultiConnection+0x94>)
 80035f2:	481c      	ldr	r0, [pc, #112]	; (8003664 <Wifi_TcpIp_SetMultiConnection+0x98>)
 80035f4:	f023 fff0 	bl	80275d8 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 80035f8:	481a      	ldr	r0, [pc, #104]	; (8003664 <Wifi_TcpIp_SetMultiConnection+0x98>)
 80035fa:	f7ff fac3 	bl	8002b84 <Wifi_SendString>
 80035fe:	4603      	mov	r3, r0
 8003600:	f083 0301 	eor.w	r3, r3, #1
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d119      	bne.n	800363e <Wifi_TcpIp_SetMultiConnection+0x72>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 800360a:	f107 010e 	add.w	r1, r7, #14
 800360e:	4b16      	ldr	r3, [pc, #88]	; (8003668 <Wifi_TcpIp_SetMultiConnection+0x9c>)
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	4b16      	ldr	r3, [pc, #88]	; (800366c <Wifi_TcpIp_SetMultiConnection+0xa0>)
 8003614:	2202      	movs	r2, #2
 8003616:	f241 3088 	movw	r0, #5000	; 0x1388
 800361a:	f7ff fac5 	bl	8002ba8 <Wifi_WaitForString>
 800361e:	4603      	mov	r3, r0
 8003620:	f083 0301 	eor.w	r3, r3, #1
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10b      	bne.n	8003642 <Wifi_TcpIp_SetMultiConnection+0x76>
			break;
		if(result == 2)
 800362a:	7bbb      	ldrb	r3, [r7, #14]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d00a      	beq.n	8003646 <Wifi_TcpIp_SetMultiConnection+0x7a>
			break;				
    Wifi.TcpIpMultiConnection=EnableMultiConnections;		
 8003630:	4a0f      	ldr	r2, [pc, #60]	; (8003670 <Wifi_TcpIp_SetMultiConnection+0xa4>)
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	f882 3819 	strb.w	r3, [r2, #2073]	; 0x819
		returnVal=true;	
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
 800363c:	e004      	b.n	8003648 <Wifi_TcpIp_SetMultiConnection+0x7c>
			break;
 800363e:	bf00      	nop
 8003640:	e002      	b.n	8003648 <Wifi_TcpIp_SetMultiConnection+0x7c>
			break;
 8003642:	bf00      	nop
 8003644:	e000      	b.n	8003648 <Wifi_TcpIp_SetMultiConnection+0x7c>
			break;				
 8003646:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 8003648:	4b04      	ldr	r3, [pc, #16]	; (800365c <Wifi_TcpIp_SetMultiConnection+0x90>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f009 f9e5 	bl	800ca1c <osSemaphoreRelease>
	return returnVal;			
 8003652:	7bfb      	ldrb	r3, [r7, #15]
}
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	2000a448 	.word	0x2000a448
 8003660:	08029254 	.word	0x08029254
 8003664:	2000a6e1 	.word	0x2000a6e1
 8003668:	08029008 	.word	0x08029008
 800366c:	08029004 	.word	0x08029004
 8003670:	2000a4e0 	.word	0x2000a4e0

08003674 <Wifi_TcpIp_GetMultiConnection>:
//#########################################################################################################
bool  Wifi_TcpIp_GetMultiConnection(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af02      	add	r7, sp, #8
  
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 800367a:	4b29      	ldr	r3, [pc, #164]	; (8003720 <Wifi_TcpIp_GetMultiConnection+0xac>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f04f 31ff 	mov.w	r1, #4294967295
 8003682:	4618      	mov	r0, r3
 8003684:	f009 f97c 	bl	800c980 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8003688:	2300      	movs	r3, #0
 800368a:	71fb      	strb	r3, [r7, #7]
	do
	{
		Wifi_RxClear();
 800368c:	f7ff fb78 	bl	8002d80 <Wifi_RxClear>
		sprintf((char*)Wifi.TxBuffer,"AT+CIPMUX?\r\n");
 8003690:	4924      	ldr	r1, [pc, #144]	; (8003724 <Wifi_TcpIp_GetMultiConnection+0xb0>)
 8003692:	4825      	ldr	r0, [pc, #148]	; (8003728 <Wifi_TcpIp_GetMultiConnection+0xb4>)
 8003694:	f023 ffa0 	bl	80275d8 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8003698:	4823      	ldr	r0, [pc, #140]	; (8003728 <Wifi_TcpIp_GetMultiConnection+0xb4>)
 800369a:	f7ff fa73 	bl	8002b84 <Wifi_SendString>
 800369e:	4603      	mov	r3, r0
 80036a0:	f083 0301 	eor.w	r3, r3, #1
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d129      	bne.n	80036fe <Wifi_TcpIp_GetMultiConnection+0x8a>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 80036aa:	1db9      	adds	r1, r7, #6
 80036ac:	4b1f      	ldr	r3, [pc, #124]	; (800372c <Wifi_TcpIp_GetMultiConnection+0xb8>)
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	4b1f      	ldr	r3, [pc, #124]	; (8003730 <Wifi_TcpIp_GetMultiConnection+0xbc>)
 80036b2:	2202      	movs	r2, #2
 80036b4:	f241 3088 	movw	r0, #5000	; 0x1388
 80036b8:	f7ff fa76 	bl	8002ba8 <Wifi_WaitForString>
 80036bc:	4603      	mov	r3, r0
 80036be:	f083 0301 	eor.w	r3, r3, #1
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d11c      	bne.n	8003702 <Wifi_TcpIp_GetMultiConnection+0x8e>
			break;
		if(result == 2)
 80036c8:	79bb      	ldrb	r3, [r7, #6]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d01b      	beq.n	8003706 <Wifi_TcpIp_GetMultiConnection+0x92>
			break;				
    if(Wifi_ReturnInteger((int32_t*)&result,1,":")==false)
 80036ce:	1dbb      	adds	r3, r7, #6
 80036d0:	4a18      	ldr	r2, [pc, #96]	; (8003734 <Wifi_TcpIp_GetMultiConnection+0xc0>)
 80036d2:	2101      	movs	r1, #1
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff fb31 	bl	8002d3c <Wifi_ReturnInteger>
 80036da:	4603      	mov	r3, r0
 80036dc:	f083 0301 	eor.w	r3, r3, #1
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d111      	bne.n	800370a <Wifi_TcpIp_GetMultiConnection+0x96>
      break;
    Wifi.TcpIpMultiConnection=(bool)result;		
 80036e6:	79bb      	ldrb	r3, [r7, #6]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bf14      	ite	ne
 80036ec:	2301      	movne	r3, #1
 80036ee:	2300      	moveq	r3, #0
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	4b11      	ldr	r3, [pc, #68]	; (8003738 <Wifi_TcpIp_GetMultiConnection+0xc4>)
 80036f4:	f883 2819 	strb.w	r2, [r3, #2073]	; 0x819
		returnVal=true;	
 80036f8:	2301      	movs	r3, #1
 80036fa:	71fb      	strb	r3, [r7, #7]
 80036fc:	e006      	b.n	800370c <Wifi_TcpIp_GetMultiConnection+0x98>
			break;
 80036fe:	bf00      	nop
 8003700:	e004      	b.n	800370c <Wifi_TcpIp_GetMultiConnection+0x98>
			break;
 8003702:	bf00      	nop
 8003704:	e002      	b.n	800370c <Wifi_TcpIp_GetMultiConnection+0x98>
			break;				
 8003706:	bf00      	nop
 8003708:	e000      	b.n	800370c <Wifi_TcpIp_GetMultiConnection+0x98>
      break;
 800370a:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 800370c:	4b04      	ldr	r3, [pc, #16]	; (8003720 <Wifi_TcpIp_GetMultiConnection+0xac>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f009 f983 	bl	800ca1c <osSemaphoreRelease>
	return returnVal;			
 8003716:	79fb      	ldrb	r3, [r7, #7]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	2000a448 	.word	0x2000a448
 8003724:	08029264 	.word	0x08029264
 8003728:	2000a6e1 	.word	0x2000a6e1
 800372c:	08029008 	.word	0x08029008
 8003730:	08029004 	.word	0x08029004
 8003734:	08029078 	.word	0x08029078
 8003738:	2000a4e0 	.word	0x2000a4e0

0800373c <Wifi_TcpIp_Close>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;		
}
//#########################################################################################################
bool  Wifi_TcpIp_Close(uint8_t LinkId)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af02      	add	r7, sp, #8
 8003742:	4603      	mov	r3, r0
 8003744:	71fb      	strb	r3, [r7, #7]
  osSemaphoreWait(WifiSemHandle,osWaitForever);
 8003746:	4b26      	ldr	r3, [pc, #152]	; (80037e0 <Wifi_TcpIp_Close+0xa4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f04f 31ff 	mov.w	r1, #4294967295
 800374e:	4618      	mov	r0, r3
 8003750:	f009 f916 	bl	800c980 <osSemaphoreWait>
	uint8_t result;
	bool		returnVal=false;
 8003754:	2300      	movs	r3, #0
 8003756:	73fb      	strb	r3, [r7, #15]
	do
	{
		Wifi_RxClear();
 8003758:	f7ff fb12 	bl	8002d80 <Wifi_RxClear>
    if(Wifi.TcpIpMultiConnection==false)
 800375c:	4b21      	ldr	r3, [pc, #132]	; (80037e4 <Wifi_TcpIp_Close+0xa8>)
 800375e:	f893 3819 	ldrb.w	r3, [r3, #2073]	; 0x819
 8003762:	f083 0301 	eor.w	r3, r3, #1
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d004      	beq.n	8003776 <Wifi_TcpIp_Close+0x3a>
      sprintf((char*)Wifi.TxBuffer,"AT+CIPCLOSE\r\n");
 800376c:	491e      	ldr	r1, [pc, #120]	; (80037e8 <Wifi_TcpIp_Close+0xac>)
 800376e:	481f      	ldr	r0, [pc, #124]	; (80037ec <Wifi_TcpIp_Close+0xb0>)
 8003770:	f023 ff32 	bl	80275d8 <siprintf>
 8003774:	e005      	b.n	8003782 <Wifi_TcpIp_Close+0x46>
    else
      sprintf((char*)Wifi.TxBuffer,"AT+CIPCLOSE=%d\r\n",LinkId);
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	461a      	mov	r2, r3
 800377a:	491d      	ldr	r1, [pc, #116]	; (80037f0 <Wifi_TcpIp_Close+0xb4>)
 800377c:	481b      	ldr	r0, [pc, #108]	; (80037ec <Wifi_TcpIp_Close+0xb0>)
 800377e:	f023 ff2b 	bl	80275d8 <siprintf>
		if(Wifi_SendString((char*)Wifi.TxBuffer)==false)
 8003782:	481a      	ldr	r0, [pc, #104]	; (80037ec <Wifi_TcpIp_Close+0xb0>)
 8003784:	f7ff f9fe 	bl	8002b84 <Wifi_SendString>
 8003788:	4603      	mov	r3, r0
 800378a:	f083 0301 	eor.w	r3, r3, #1
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d115      	bne.n	80037c0 <Wifi_TcpIp_Close+0x84>
			break;
		if(Wifi_WaitForString(_WIFI_WAIT_TIME_LOW,&result,2,"OK","ERROR")==false)
 8003794:	f107 010e 	add.w	r1, r7, #14
 8003798:	4b16      	ldr	r3, [pc, #88]	; (80037f4 <Wifi_TcpIp_Close+0xb8>)
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	4b16      	ldr	r3, [pc, #88]	; (80037f8 <Wifi_TcpIp_Close+0xbc>)
 800379e:	2202      	movs	r2, #2
 80037a0:	f241 3088 	movw	r0, #5000	; 0x1388
 80037a4:	f7ff fa00 	bl	8002ba8 <Wifi_WaitForString>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f083 0301 	eor.w	r3, r3, #1
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d107      	bne.n	80037c4 <Wifi_TcpIp_Close+0x88>
			break;
		if(result == 2)
 80037b4:	7bbb      	ldrb	r3, [r7, #14]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d006      	beq.n	80037c8 <Wifi_TcpIp_Close+0x8c>
			break;		
		returnVal=true;	
 80037ba:	2301      	movs	r3, #1
 80037bc:	73fb      	strb	r3, [r7, #15]
 80037be:	e004      	b.n	80037ca <Wifi_TcpIp_Close+0x8e>
			break;
 80037c0:	bf00      	nop
 80037c2:	e002      	b.n	80037ca <Wifi_TcpIp_Close+0x8e>
			break;
 80037c4:	bf00      	nop
 80037c6:	e000      	b.n	80037ca <Wifi_TcpIp_Close+0x8e>
			break;		
 80037c8:	bf00      	nop
	}while(0);
	osSemaphoreRelease(WifiSemHandle);
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <Wifi_TcpIp_Close+0xa4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f009 f924 	bl	800ca1c <osSemaphoreRelease>
	return returnVal;		
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	2000a448 	.word	0x2000a448
 80037e4:	2000a4e0 	.word	0x2000a4e0
 80037e8:	08029320 	.word	0x08029320
 80037ec:	2000a6e1 	.word	0x2000a6e1
 80037f0:	08029330 	.word	0x08029330
 80037f4:	08029008 	.word	0x08029008
 80037f8:	08029004 	.word	0x08029004

080037fc <HAL_UART_RxCpltCallback>:
	osSemaphoreRelease(WifiSemHandle);
	return returnVal;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
    if (huart->Instance == huart5.Instance)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	4b04      	ldr	r3, [pc, #16]	; (800381c <HAL_UART_RxCpltCallback+0x20>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d101      	bne.n	8003814 <HAL_UART_RxCpltCallback+0x18>
    {
    	Wifi_RxCallBack();
 8003810:	f7ff fae0 	bl	8002dd4 <Wifi_RxCallBack>
    }
}
 8003814:	bf00      	nop
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	2000b09c 	.word	0x2000b09c

08003820 <Wifi_UserInit>:

#include "Wifi.h"

//#######################################################################################
void Wifi_UserInit(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
	Wifi_SetMode(WifiMode_Station);
 8003824:	2001      	movs	r0, #1
 8003826:	f7ff fd1b 	bl	8003260 <Wifi_SetMode>
  //Wifi_SetMode(WifiMode_SoftAp); 

	while (Wifi_Station_ConnectToAp("U+NetC568","P91352@4BB",NULL) == false);
 800382a:	bf00      	nop
 800382c:	2200      	movs	r2, #0
 800382e:	4906      	ldr	r1, [pc, #24]	; (8003848 <Wifi_UserInit+0x28>)
 8003830:	4806      	ldr	r0, [pc, #24]	; (800384c <Wifi_UserInit+0x2c>)
 8003832:	f7ff fdc9 	bl	80033c8 <Wifi_Station_ConnectToAp>
 8003836:	4603      	mov	r3, r0
 8003838:	f083 0301 	eor.w	r3, r3, #1
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f4      	bne.n	800382c <Wifi_UserInit+0xc>
	//while (Wifi_Station_ConnectToAp("bsoh123","123456789as",NULL) == false);
 
    
}
 8003842:	bf00      	nop
 8003844:	bf00      	nop
 8003846:	bd80      	pop	{r7, pc}
 8003848:	08029434 	.word	0x08029434
 800384c:	08029440 	.word	0x08029440

08003850 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003854:	4b06      	ldr	r3, [pc, #24]	; (8003870 <MX_CRC_Init+0x20>)
 8003856:	4a07      	ldr	r2, [pc, #28]	; (8003874 <MX_CRC_Init+0x24>)
 8003858:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800385a:	4805      	ldr	r0, [pc, #20]	; (8003870 <MX_CRC_Init+0x20>)
 800385c:	f002 fd6a 	bl	8006334 <HAL_CRC_Init>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8003866:	f000 ff29 	bl	80046bc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800386a:	bf00      	nop
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	2000ad94 	.word	0x2000ad94
 8003874:	40023000 	.word	0x40023000

08003878 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a0b      	ldr	r2, [pc, #44]	; (80038b4 <HAL_CRC_MspInit+0x3c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d10d      	bne.n	80038a6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <HAL_CRC_MspInit+0x40>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	4a09      	ldr	r2, [pc, #36]	; (80038b8 <HAL_CRC_MspInit+0x40>)
 8003894:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003898:	6313      	str	r3, [r2, #48]	; 0x30
 800389a:	4b07      	ldr	r3, [pc, #28]	; (80038b8 <HAL_CRC_MspInit+0x40>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80038a6:	bf00      	nop
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	40023000 	.word	0x40023000
 80038b8:	40023800 	.word	0x40023800

080038bc <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80038c0:	4b15      	ldr	r3, [pc, #84]	; (8003918 <MX_DMA2D_Init+0x5c>)
 80038c2:	4a16      	ldr	r2, [pc, #88]	; (800391c <MX_DMA2D_Init+0x60>)
 80038c4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80038c6:	4b14      	ldr	r3, [pc, #80]	; (8003918 <MX_DMA2D_Init+0x5c>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80038cc:	4b12      	ldr	r3, [pc, #72]	; (8003918 <MX_DMA2D_Init+0x5c>)
 80038ce:	2202      	movs	r2, #2
 80038d0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80038d2:	4b11      	ldr	r3, [pc, #68]	; (8003918 <MX_DMA2D_Init+0x5c>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80038d8:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <MX_DMA2D_Init+0x5c>)
 80038da:	2200      	movs	r2, #0
 80038dc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80038de:	4b0e      	ldr	r3, [pc, #56]	; (8003918 <MX_DMA2D_Init+0x5c>)
 80038e0:	2202      	movs	r2, #2
 80038e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80038e4:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <MX_DMA2D_Init+0x5c>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80038ea:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <MX_DMA2D_Init+0x5c>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80038f0:	4809      	ldr	r0, [pc, #36]	; (8003918 <MX_DMA2D_Init+0x5c>)
 80038f2:	f002 fdcd 	bl	8006490 <HAL_DMA2D_Init>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80038fc:	f000 fede 	bl	80046bc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8003900:	2101      	movs	r1, #1
 8003902:	4805      	ldr	r0, [pc, #20]	; (8003918 <MX_DMA2D_Init+0x5c>)
 8003904:	f002 ff1e 	bl	8006744 <HAL_DMA2D_ConfigLayer>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800390e:	f000 fed5 	bl	80046bc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	2000ad9c 	.word	0x2000ad9c
 800391c:	4002b000 	.word	0x4002b000

08003920 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a0e      	ldr	r2, [pc, #56]	; (8003968 <HAL_DMA2D_MspInit+0x48>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d115      	bne.n	800395e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	4b0d      	ldr	r3, [pc, #52]	; (800396c <HAL_DMA2D_MspInit+0x4c>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	4a0c      	ldr	r2, [pc, #48]	; (800396c <HAL_DMA2D_MspInit+0x4c>)
 800393c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003940:	6313      	str	r3, [r2, #48]	; 0x30
 8003942:	4b0a      	ldr	r3, [pc, #40]	; (800396c <HAL_DMA2D_MspInit+0x4c>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800394e:	2200      	movs	r2, #0
 8003950:	2105      	movs	r1, #5
 8003952:	205a      	movs	r0, #90	; 0x5a
 8003954:	f002 fcc4 	bl	80062e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003958:	205a      	movs	r0, #90	; 0x5a
 800395a:	f002 fcdd 	bl	8006318 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800395e:	bf00      	nop
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	4002b000 	.word	0x4002b000
 800396c:	40023800 	.word	0x40023800

08003970 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08c      	sub	sp, #48	; 0x30
 8003974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8003976:	f107 0314 	add.w	r3, r7, #20
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	605a      	str	r2, [r3, #4]
 8003980:	609a      	str	r2, [r3, #8]
 8003982:	60da      	str	r2, [r3, #12]
 8003984:	611a      	str	r2, [r3, #16]
 8003986:	615a      	str	r2, [r3, #20]
 8003988:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800398a:	4b45      	ldr	r3, [pc, #276]	; (8003aa0 <MX_FMC_Init+0x130>)
 800398c:	4a45      	ldr	r2, [pc, #276]	; (8003aa4 <MX_FMC_Init+0x134>)
 800398e:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8003990:	4b43      	ldr	r3, [pc, #268]	; (8003aa0 <MX_FMC_Init+0x130>)
 8003992:	2201      	movs	r2, #1
 8003994:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003996:	4b42      	ldr	r3, [pc, #264]	; (8003aa0 <MX_FMC_Init+0x130>)
 8003998:	2200      	movs	r2, #0
 800399a:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800399c:	4b40      	ldr	r3, [pc, #256]	; (8003aa0 <MX_FMC_Init+0x130>)
 800399e:	2204      	movs	r2, #4
 80039a0:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80039a2:	4b3f      	ldr	r3, [pc, #252]	; (8003aa0 <MX_FMC_Init+0x130>)
 80039a4:	2210      	movs	r2, #16
 80039a6:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80039a8:	4b3d      	ldr	r3, [pc, #244]	; (8003aa0 <MX_FMC_Init+0x130>)
 80039aa:	2240      	movs	r2, #64	; 0x40
 80039ac:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80039ae:	4b3c      	ldr	r3, [pc, #240]	; (8003aa0 <MX_FMC_Init+0x130>)
 80039b0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80039b4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80039b6:	4b3a      	ldr	r3, [pc, #232]	; (8003aa0 <MX_FMC_Init+0x130>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80039bc:	4b38      	ldr	r3, [pc, #224]	; (8003aa0 <MX_FMC_Init+0x130>)
 80039be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039c2:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80039c4:	4b36      	ldr	r3, [pc, #216]	; (8003aa0 <MX_FMC_Init+0x130>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80039ca:	4b35      	ldr	r3, [pc, #212]	; (8003aa0 <MX_FMC_Init+0x130>)
 80039cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039d0:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80039d2:	2302      	movs	r3, #2
 80039d4:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80039d6:	2307      	movs	r3, #7
 80039d8:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 4;
 80039da:	2304      	movs	r3, #4
 80039dc:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 7;
 80039de:	2307      	movs	r3, #7
 80039e0:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 3;
 80039e2:	2303      	movs	r3, #3
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 80039e6:	2302      	movs	r3, #2
 80039e8:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 80039ea:	2302      	movs	r3, #2
 80039ec:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80039ee:	f107 0314 	add.w	r3, r7, #20
 80039f2:	4619      	mov	r1, r3
 80039f4:	482a      	ldr	r0, [pc, #168]	; (8003aa0 <MX_FMC_Init+0x130>)
 80039f6:	f005 fc7b 	bl	80092f0 <HAL_SDRAM_Init>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <MX_FMC_Init+0x96>
  {
    Error_Handler( );
 8003a00:	f000 fe5c 	bl	80046bc <Error_Handler>
       *
       */
      HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1386);
  }
  /* USER CODE END FMC_Init 2 */
}
 8003a04:	e048      	b.n	8003a98 <MX_FMC_Init+0x128>
      __IO uint32_t tmpmrd =0;
 8003a06:	2300      	movs	r3, #0
 8003a08:	613b      	str	r3, [r7, #16]
      Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	603b      	str	r3, [r7, #0]
      Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003a0e:	2308      	movs	r3, #8
 8003a10:	607b      	str	r3, [r7, #4]
      Command.AutoRefreshNumber       = 1;
 8003a12:	2301      	movs	r3, #1
 8003a14:	60bb      	str	r3, [r7, #8]
      Command.ModeRegisterDefinition  = 0;
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
      HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8003a1a:	463b      	mov	r3, r7
 8003a1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a20:	4619      	mov	r1, r3
 8003a22:	481f      	ldr	r0, [pc, #124]	; (8003aa0 <MX_FMC_Init+0x130>)
 8003a24:	f005 fc98 	bl	8009358 <HAL_SDRAM_SendCommand>
      HAL_Delay(100);
 8003a28:	2064      	movs	r0, #100	; 0x64
 8003a2a:	f002 fb7d 	bl	8006128 <HAL_Delay>
      Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	603b      	str	r3, [r7, #0]
      Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003a32:	2308      	movs	r3, #8
 8003a34:	607b      	str	r3, [r7, #4]
      Command.AutoRefreshNumber       = 1;
 8003a36:	2301      	movs	r3, #1
 8003a38:	60bb      	str	r3, [r7, #8]
      Command.ModeRegisterDefinition  = 0;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60fb      	str	r3, [r7, #12]
      HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8003a3e:	463b      	mov	r3, r7
 8003a40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a44:	4619      	mov	r1, r3
 8003a46:	4816      	ldr	r0, [pc, #88]	; (8003aa0 <MX_FMC_Init+0x130>)
 8003a48:	f005 fc86 	bl	8009358 <HAL_SDRAM_SendCommand>
      Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	603b      	str	r3, [r7, #0]
      Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003a50:	2308      	movs	r3, #8
 8003a52:	607b      	str	r3, [r7, #4]
      Command.AutoRefreshNumber       = 4;
 8003a54:	2304      	movs	r3, #4
 8003a56:	60bb      	str	r3, [r7, #8]
      Command.ModeRegisterDefinition  = 0;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60fb      	str	r3, [r7, #12]
      HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8003a5c:	463b      	mov	r3, r7
 8003a5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a62:	4619      	mov	r1, r3
 8003a64:	480e      	ldr	r0, [pc, #56]	; (8003aa0 <MX_FMC_Init+0x130>)
 8003a66:	f005 fc77 	bl	8009358 <HAL_SDRAM_SendCommand>
      tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003a6a:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003a6e:	613b      	str	r3, [r7, #16]
      Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003a70:	2304      	movs	r3, #4
 8003a72:	603b      	str	r3, [r7, #0]
      Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003a74:	2308      	movs	r3, #8
 8003a76:	607b      	str	r3, [r7, #4]
      Command.AutoRefreshNumber       = 1;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	60bb      	str	r3, [r7, #8]
      Command.ModeRegisterDefinition  = tmpmrd;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	60fb      	str	r3, [r7, #12]
      HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8003a80:	463b      	mov	r3, r7
 8003a82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a86:	4619      	mov	r1, r3
 8003a88:	4805      	ldr	r0, [pc, #20]	; (8003aa0 <MX_FMC_Init+0x130>)
 8003a8a:	f005 fc65 	bl	8009358 <HAL_SDRAM_SendCommand>
      HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1386);
 8003a8e:	f240 516a 	movw	r1, #1386	; 0x56a
 8003a92:	4803      	ldr	r0, [pc, #12]	; (8003aa0 <MX_FMC_Init+0x130>)
 8003a94:	f005 fc8b 	bl	80093ae <HAL_SDRAM_ProgramRefreshRate>
}
 8003a98:	bf00      	nop
 8003a9a:	3730      	adds	r7, #48	; 0x30
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	2000addc 	.word	0x2000addc
 8003aa4:	a0000140 	.word	0xa0000140

08003aa8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aae:	1d3b      	adds	r3, r7, #4
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	605a      	str	r2, [r3, #4]
 8003ab6:	609a      	str	r2, [r3, #8]
 8003ab8:	60da      	str	r2, [r3, #12]
 8003aba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003abc:	4b3b      	ldr	r3, [pc, #236]	; (8003bac <HAL_FMC_MspInit+0x104>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d16f      	bne.n	8003ba4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8003ac4:	4b39      	ldr	r3, [pc, #228]	; (8003bac <HAL_FMC_MspInit+0x104>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003aca:	2300      	movs	r3, #0
 8003acc:	603b      	str	r3, [r7, #0]
 8003ace:	4b38      	ldr	r3, [pc, #224]	; (8003bb0 <HAL_FMC_MspInit+0x108>)
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad2:	4a37      	ldr	r2, [pc, #220]	; (8003bb0 <HAL_FMC_MspInit+0x108>)
 8003ad4:	f043 0301 	orr.w	r3, r3, #1
 8003ad8:	6393      	str	r3, [r2, #56]	; 0x38
 8003ada:	4b35      	ldr	r3, [pc, #212]	; (8003bb0 <HAL_FMC_MspInit+0x108>)
 8003adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8003ae6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003aea:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aec:	2302      	movs	r3, #2
 8003aee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af4:	2303      	movs	r3, #3
 8003af6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003af8:	230c      	movs	r3, #12
 8003afa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003afc:	1d3b      	adds	r3, r7, #4
 8003afe:	4619      	mov	r1, r3
 8003b00:	482c      	ldr	r0, [pc, #176]	; (8003bb4 <HAL_FMC_MspInit+0x10c>)
 8003b02:	f002 feb1 	bl	8006868 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8003b06:	2301      	movs	r3, #1
 8003b08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b12:	2303      	movs	r3, #3
 8003b14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b16:	230c      	movs	r3, #12
 8003b18:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8003b1a:	1d3b      	adds	r3, r7, #4
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4826      	ldr	r0, [pc, #152]	; (8003bb8 <HAL_FMC_MspInit+0x110>)
 8003b20:	f002 fea2 	bl	8006868 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8003b24:	f248 1333 	movw	r3, #33075	; 0x8133
 8003b28:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b32:	2303      	movs	r3, #3
 8003b34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b36:	230c      	movs	r3, #12
 8003b38:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b3a:	1d3b      	adds	r3, r7, #4
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	481f      	ldr	r0, [pc, #124]	; (8003bbc <HAL_FMC_MspInit+0x114>)
 8003b40:	f002 fe92 	bl	8006868 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8003b44:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003b48:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b52:	2303      	movs	r3, #3
 8003b54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b56:	230c      	movs	r3, #12
 8003b58:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b5a:	1d3b      	adds	r3, r7, #4
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4818      	ldr	r0, [pc, #96]	; (8003bc0 <HAL_FMC_MspInit+0x118>)
 8003b60:	f002 fe82 	bl	8006868 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8003b64:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003b68:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b72:	2303      	movs	r3, #3
 8003b74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b76:	230c      	movs	r3, #12
 8003b78:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b7a:	1d3b      	adds	r3, r7, #4
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4811      	ldr	r0, [pc, #68]	; (8003bc4 <HAL_FMC_MspInit+0x11c>)
 8003b80:	f002 fe72 	bl	8006868 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8003b84:	2360      	movs	r3, #96	; 0x60
 8003b86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b90:	2303      	movs	r3, #3
 8003b92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b94:	230c      	movs	r3, #12
 8003b96:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b98:	1d3b      	adds	r3, r7, #4
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	480a      	ldr	r0, [pc, #40]	; (8003bc8 <HAL_FMC_MspInit+0x120>)
 8003b9e:	f002 fe63 	bl	8006868 <HAL_GPIO_Init>
 8003ba2:	e000      	b.n	8003ba6 <HAL_FMC_MspInit+0xfe>
    return;
 8003ba4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	2000022c 	.word	0x2000022c
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	40021400 	.word	0x40021400
 8003bb8:	40020800 	.word	0x40020800
 8003bbc:	40021800 	.word	0x40021800
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	40020c00 	.word	0x40020c00
 8003bc8:	40020400 	.word	0x40020400

08003bcc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003bd4:	f7ff ff68 	bl	8003aa8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003bd8:	bf00      	nop
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8003be4:	bf00      	nop
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8003c08:	bf00      	nop
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4a07      	ldr	r2, [pc, #28]	; (8003c40 <vApplicationGetIdleTaskMemory+0x2c>)
 8003c24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	4a06      	ldr	r2, [pc, #24]	; (8003c44 <vApplicationGetIdleTaskMemory+0x30>)
 8003c2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2280      	movs	r2, #128	; 0x80
 8003c30:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003c32:	bf00      	nop
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	20000230 	.word	0x20000230
 8003c44:	20000288 	.word	0x20000288

08003c48 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003c48:	b5b0      	push	{r4, r5, r7, lr}
 8003c4a:	b08e      	sub	sp, #56	; 0x38
 8003c4c:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of sensorSem */
  osSemaphoreDef(sensorSem);
 8003c4e:	2300      	movs	r3, #0
 8003c50:	633b      	str	r3, [r7, #48]	; 0x30
 8003c52:	2300      	movs	r3, #0
 8003c54:	637b      	str	r3, [r7, #52]	; 0x34
  sensorSemHandle = osSemaphoreCreate(osSemaphore(sensorSem), 1);
 8003c56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f008 fe4f 	bl	800c900 <osSemaphoreCreate>
 8003c62:	4603      	mov	r3, r0
 8003c64:	4a12      	ldr	r2, [pc, #72]	; (8003cb0 <MX_FREERTOS_Init+0x68>)
 8003c66:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of envQueue */
  osMessageQDef(envQueue, 16, ENV_MSG);
 8003c68:	4b12      	ldr	r3, [pc, #72]	; (8003cb4 <MX_FREERTOS_Init+0x6c>)
 8003c6a:	f107 0420 	add.w	r4, r7, #32
 8003c6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  envQueueHandle = osMessageCreate(osMessageQ(envQueue), NULL);
 8003c74:	f107 0320 	add.w	r3, r7, #32
 8003c78:	2100      	movs	r1, #0
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f008 ff04 	bl	800ca88 <osMessageCreate>
 8003c80:	4603      	mov	r3, r0
 8003c82:	4a0d      	ldr	r2, [pc, #52]	; (8003cb8 <MX_FREERTOS_Init+0x70>)
 8003c84:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8003c86:	4b0d      	ldr	r3, [pc, #52]	; (8003cbc <MX_FREERTOS_Init+0x74>)
 8003c88:	1d3c      	adds	r4, r7, #4
 8003c8a:	461d      	mov	r5, r3
 8003c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003c98:	1d3b      	adds	r3, r7, #4
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f008 fd42 	bl	800c726 <osThreadCreate>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	4a06      	ldr	r2, [pc, #24]	; (8003cc0 <MX_FREERTOS_Init+0x78>)
 8003ca6:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  //osThreadDef(touchTask, TouchGFX_Task, osPriorityNormal, 0, 4086);
  //touchGFXTaskHandle = osThreadCreate(osThread(touchTask), NULL);
  /* USER CODE END RTOS_THREADS */

}
 8003ca8:	bf00      	nop
 8003caa:	3738      	adds	r7, #56	; 0x38
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bdb0      	pop	{r4, r5, r7, pc}
 8003cb0:	2000ae14 	.word	0x2000ae14
 8003cb4:	08029464 	.word	0x08029464
 8003cb8:	2000ae20 	.word	0x2000ae20
 8003cbc:	08029474 	.word	0x08029474
 8003cc0:	2000ae24 	.word	0x2000ae24

08003cc4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for (;;)
  {
	  osDelay(1);
 8003ccc:	2001      	movs	r0, #1
 8003cce:	f008 fd76 	bl	800c7be <osDelay>
 8003cd2:	e7fb      	b.n	8003ccc <StartDefaultTask+0x8>

08003cd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08e      	sub	sp, #56	; 0x38
 8003cd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	605a      	str	r2, [r3, #4]
 8003ce4:	609a      	str	r2, [r3, #8]
 8003ce6:	60da      	str	r2, [r3, #12]
 8003ce8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003cea:	2300      	movs	r3, #0
 8003cec:	623b      	str	r3, [r7, #32]
 8003cee:	4b84      	ldr	r3, [pc, #528]	; (8003f00 <MX_GPIO_Init+0x22c>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	4a83      	ldr	r2, [pc, #524]	; (8003f00 <MX_GPIO_Init+0x22c>)
 8003cf4:	f043 0310 	orr.w	r3, r3, #16
 8003cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cfa:	4b81      	ldr	r3, [pc, #516]	; (8003f00 <MX_GPIO_Init+0x22c>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	f003 0310 	and.w	r3, r3, #16
 8003d02:	623b      	str	r3, [r7, #32]
 8003d04:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d06:	2300      	movs	r3, #0
 8003d08:	61fb      	str	r3, [r7, #28]
 8003d0a:	4b7d      	ldr	r3, [pc, #500]	; (8003f00 <MX_GPIO_Init+0x22c>)
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	4a7c      	ldr	r2, [pc, #496]	; (8003f00 <MX_GPIO_Init+0x22c>)
 8003d10:	f043 0304 	orr.w	r3, r3, #4
 8003d14:	6313      	str	r3, [r2, #48]	; 0x30
 8003d16:	4b7a      	ldr	r3, [pc, #488]	; (8003f00 <MX_GPIO_Init+0x22c>)
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	61fb      	str	r3, [r7, #28]
 8003d20:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d22:	2300      	movs	r3, #0
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	4b76      	ldr	r3, [pc, #472]	; (8003f00 <MX_GPIO_Init+0x22c>)
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	4a75      	ldr	r2, [pc, #468]	; (8003f00 <MX_GPIO_Init+0x22c>)
 8003d2c:	f043 0320 	orr.w	r3, r3, #32
 8003d30:	6313      	str	r3, [r2, #48]	; 0x30
 8003d32:	4b73      	ldr	r3, [pc, #460]	; (8003f00 <MX_GPIO_Init+0x22c>)
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	61bb      	str	r3, [r7, #24]
 8003d3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	4b6f      	ldr	r3, [pc, #444]	; (8003f00 <MX_GPIO_Init+0x22c>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	4a6e      	ldr	r2, [pc, #440]	; (8003f00 <MX_GPIO_Init+0x22c>)
 8003d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d4e:	4b6c      	ldr	r3, [pc, #432]	; (8003f00 <MX_GPIO_Init+0x22c>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	613b      	str	r3, [r7, #16]
 8003d5e:	4b68      	ldr	r3, [pc, #416]	; (8003f00 <MX_GPIO_Init+0x22c>)
 8003d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d62:	4a67      	ldr	r2, [pc, #412]	; (8003f00 <MX_GPIO_Init+0x22c>)
 8003d64:	f043 0301 	orr.w	r3, r3, #1
 8003d68:	6313      	str	r3, [r2, #48]	; 0x30
 8003d6a:	4b65      	ldr	r3, [pc, #404]	; (8003f00 <MX_GPIO_Init+0x22c>)
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	613b      	str	r3, [r7, #16]
 8003d74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d76:	2300      	movs	r3, #0
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	4b61      	ldr	r3, [pc, #388]	; (8003f00 <MX_GPIO_Init+0x22c>)
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	4a60      	ldr	r2, [pc, #384]	; (8003f00 <MX_GPIO_Init+0x22c>)
 8003d80:	f043 0302 	orr.w	r3, r3, #2
 8003d84:	6313      	str	r3, [r2, #48]	; 0x30
 8003d86:	4b5e      	ldr	r3, [pc, #376]	; (8003f00 <MX_GPIO_Init+0x22c>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d92:	2300      	movs	r3, #0
 8003d94:	60bb      	str	r3, [r7, #8]
 8003d96:	4b5a      	ldr	r3, [pc, #360]	; (8003f00 <MX_GPIO_Init+0x22c>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	4a59      	ldr	r2, [pc, #356]	; (8003f00 <MX_GPIO_Init+0x22c>)
 8003d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003da0:	6313      	str	r3, [r2, #48]	; 0x30
 8003da2:	4b57      	ldr	r3, [pc, #348]	; (8003f00 <MX_GPIO_Init+0x22c>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003daa:	60bb      	str	r3, [r7, #8]
 8003dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dae:	2300      	movs	r3, #0
 8003db0:	607b      	str	r3, [r7, #4]
 8003db2:	4b53      	ldr	r3, [pc, #332]	; (8003f00 <MX_GPIO_Init+0x22c>)
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	4a52      	ldr	r2, [pc, #328]	; (8003f00 <MX_GPIO_Init+0x22c>)
 8003db8:	f043 0308 	orr.w	r3, r3, #8
 8003dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003dbe:	4b50      	ldr	r3, [pc, #320]	; (8003f00 <MX_GPIO_Init+0x22c>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	607b      	str	r3, [r7, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, HUMIDIFIER_SW_PIN_Pin|DHT11_Pin, GPIO_PIN_RESET);
 8003dca:	2200      	movs	r2, #0
 8003dcc:	210c      	movs	r1, #12
 8003dce:	484d      	ldr	r0, [pc, #308]	; (8003f04 <MX_GPIO_Init+0x230>)
 8003dd0:	f003 f802 	bl	8006dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2116      	movs	r1, #22
 8003dd8:	484b      	ldr	r0, [pc, #300]	; (8003f08 <MX_GPIO_Init+0x234>)
 8003dda:	f002 fffd 	bl	8006dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8003dde:	2200      	movs	r2, #0
 8003de0:	2180      	movs	r1, #128	; 0x80
 8003de2:	484a      	ldr	r0, [pc, #296]	; (8003f0c <MX_GPIO_Init+0x238>)
 8003de4:	f002 fff8 	bl	8006dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8003de8:	2200      	movs	r2, #0
 8003dea:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003dee:	4848      	ldr	r0, [pc, #288]	; (8003f10 <MX_GPIO_Init+0x23c>)
 8003df0:	f002 fff2 	bl	8006dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8003df4:	2200      	movs	r2, #0
 8003df6:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8003dfa:	4846      	ldr	r0, [pc, #280]	; (8003f14 <MX_GPIO_Init+0x240>)
 8003dfc:	f002 ffec 	bl	8006dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = HUMIDIFIER_SW_PIN_Pin|DHT11_Pin;
 8003e00:	230c      	movs	r3, #12
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e04:	2301      	movs	r3, #1
 8003e06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e14:	4619      	mov	r1, r3
 8003e16:	483b      	ldr	r0, [pc, #236]	; (8003f04 <MX_GPIO_Init+0x230>)
 8003e18:	f002 fd26 	bl	8006868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8003e1c:	2316      	movs	r3, #22
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e20:	2301      	movs	r3, #1
 8003e22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e24:	2300      	movs	r3, #0
 8003e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e30:	4619      	mov	r1, r3
 8003e32:	4835      	ldr	r0, [pc, #212]	; (8003f08 <MX_GPIO_Init+0x234>)
 8003e34:	f002 fd18 	bl	8006868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8003e38:	f248 0307 	movw	r3, #32775	; 0x8007
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003e3e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003e42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e44:	2300      	movs	r3, #0
 8003e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	482f      	ldr	r0, [pc, #188]	; (8003f0c <MX_GPIO_Init+0x238>)
 8003e50:	f002 fd0a 	bl	8006868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8003e54:	2380      	movs	r3, #128	; 0x80
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e60:	2300      	movs	r3, #0
 8003e62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8003e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4828      	ldr	r0, [pc, #160]	; (8003f0c <MX_GPIO_Init+0x238>)
 8003e6c:	f002 fcfc 	bl	8006868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8003e70:	2320      	movs	r3, #32
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003e74:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003e78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8003e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e82:	4619      	mov	r1, r3
 8003e84:	4820      	ldr	r0, [pc, #128]	; (8003f08 <MX_GPIO_Init+0x234>)
 8003e86:	f002 fcef 	bl	8006868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003e8a:	2304      	movs	r3, #4
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	481e      	ldr	r0, [pc, #120]	; (8003f18 <MX_GPIO_Init+0x244>)
 8003e9e:	f002 fce3 	bl	8006868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8003ea2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eac:	2300      	movs	r3, #0
 8003eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8003eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4816      	ldr	r0, [pc, #88]	; (8003f10 <MX_GPIO_Init+0x23c>)
 8003eb8:	f002 fcd6 	bl	8006868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8003ebc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	480e      	ldr	r0, [pc, #56]	; (8003f10 <MX_GPIO_Init+0x23c>)
 8003ed6:	f002 fcc7 	bl	8006868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8003eda:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4808      	ldr	r0, [pc, #32]	; (8003f14 <MX_GPIO_Init+0x240>)
 8003ef4:	f002 fcb8 	bl	8006868 <HAL_GPIO_Init>

}
 8003ef8:	bf00      	nop
 8003efa:	3738      	adds	r7, #56	; 0x38
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40023800 	.word	0x40023800
 8003f04:	40021000 	.word	0x40021000
 8003f08:	40020800 	.word	0x40020800
 8003f0c:	40020000 	.word	0x40020000
 8003f10:	40020c00 	.word	0x40020c00
 8003f14:	40021800 	.word	0x40021800
 8003f18:	40020400 	.word	0x40020400

08003f1c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003f20:	4b1b      	ldr	r3, [pc, #108]	; (8003f90 <MX_I2C3_Init+0x74>)
 8003f22:	4a1c      	ldr	r2, [pc, #112]	; (8003f94 <MX_I2C3_Init+0x78>)
 8003f24:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003f26:	4b1a      	ldr	r3, [pc, #104]	; (8003f90 <MX_I2C3_Init+0x74>)
 8003f28:	4a1b      	ldr	r2, [pc, #108]	; (8003f98 <MX_I2C3_Init+0x7c>)
 8003f2a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003f2c:	4b18      	ldr	r3, [pc, #96]	; (8003f90 <MX_I2C3_Init+0x74>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003f32:	4b17      	ldr	r3, [pc, #92]	; (8003f90 <MX_I2C3_Init+0x74>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f38:	4b15      	ldr	r3, [pc, #84]	; (8003f90 <MX_I2C3_Init+0x74>)
 8003f3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f3e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f40:	4b13      	ldr	r3, [pc, #76]	; (8003f90 <MX_I2C3_Init+0x74>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003f46:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <MX_I2C3_Init+0x74>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f4c:	4b10      	ldr	r3, [pc, #64]	; (8003f90 <MX_I2C3_Init+0x74>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f52:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <MX_I2C3_Init+0x74>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003f58:	480d      	ldr	r0, [pc, #52]	; (8003f90 <MX_I2C3_Init+0x74>)
 8003f5a:	f002 ff57 	bl	8006e0c <HAL_I2C_Init>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003f64:	f000 fbaa 	bl	80046bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003f68:	2100      	movs	r1, #0
 8003f6a:	4809      	ldr	r0, [pc, #36]	; (8003f90 <MX_I2C3_Init+0x74>)
 8003f6c:	f003 ff4b 	bl	8007e06 <HAL_I2CEx_ConfigAnalogFilter>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8003f76:	f000 fba1 	bl	80046bc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	4804      	ldr	r0, [pc, #16]	; (8003f90 <MX_I2C3_Init+0x74>)
 8003f7e:	f003 ff7e 	bl	8007e7e <HAL_I2CEx_ConfigDigitalFilter>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8003f88:	f000 fb98 	bl	80046bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003f8c:	bf00      	nop
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	2000ae2c 	.word	0x2000ae2c
 8003f94:	40005c00 	.word	0x40005c00
 8003f98:	000186a0 	.word	0x000186a0

08003f9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08a      	sub	sp, #40	; 0x28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa4:	f107 0314 	add.w	r3, r7, #20
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	605a      	str	r2, [r3, #4]
 8003fae:	609a      	str	r2, [r3, #8]
 8003fb0:	60da      	str	r2, [r3, #12]
 8003fb2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a29      	ldr	r2, [pc, #164]	; (8004060 <HAL_I2C_MspInit+0xc4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d14b      	bne.n	8004056 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	613b      	str	r3, [r7, #16]
 8003fc2:	4b28      	ldr	r3, [pc, #160]	; (8004064 <HAL_I2C_MspInit+0xc8>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	4a27      	ldr	r2, [pc, #156]	; (8004064 <HAL_I2C_MspInit+0xc8>)
 8003fc8:	f043 0304 	orr.w	r3, r3, #4
 8003fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8003fce:	4b25      	ldr	r3, [pc, #148]	; (8004064 <HAL_I2C_MspInit+0xc8>)
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd2:	f003 0304 	and.w	r3, r3, #4
 8003fd6:	613b      	str	r3, [r7, #16]
 8003fd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	4b21      	ldr	r3, [pc, #132]	; (8004064 <HAL_I2C_MspInit+0xc8>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe2:	4a20      	ldr	r2, [pc, #128]	; (8004064 <HAL_I2C_MspInit+0xc8>)
 8003fe4:	f043 0301 	orr.w	r3, r3, #1
 8003fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8003fea:	4b1e      	ldr	r3, [pc, #120]	; (8004064 <HAL_I2C_MspInit+0xc8>)
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003ff6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ffc:	2312      	movs	r3, #18
 8003ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004000:	2301      	movs	r3, #1
 8004002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004004:	2300      	movs	r3, #0
 8004006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004008:	2304      	movs	r3, #4
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800400c:	f107 0314 	add.w	r3, r7, #20
 8004010:	4619      	mov	r1, r3
 8004012:	4815      	ldr	r0, [pc, #84]	; (8004068 <HAL_I2C_MspInit+0xcc>)
 8004014:	f002 fc28 	bl	8006868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8004018:	f44f 7380 	mov.w	r3, #256	; 0x100
 800401c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800401e:	2312      	movs	r3, #18
 8004020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004022:	2301      	movs	r3, #1
 8004024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004026:	2300      	movs	r3, #0
 8004028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800402a:	2304      	movs	r3, #4
 800402c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800402e:	f107 0314 	add.w	r3, r7, #20
 8004032:	4619      	mov	r1, r3
 8004034:	480d      	ldr	r0, [pc, #52]	; (800406c <HAL_I2C_MspInit+0xd0>)
 8004036:	f002 fc17 	bl	8006868 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	60bb      	str	r3, [r7, #8]
 800403e:	4b09      	ldr	r3, [pc, #36]	; (8004064 <HAL_I2C_MspInit+0xc8>)
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	4a08      	ldr	r2, [pc, #32]	; (8004064 <HAL_I2C_MspInit+0xc8>)
 8004044:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004048:	6413      	str	r3, [r2, #64]	; 0x40
 800404a:	4b06      	ldr	r3, [pc, #24]	; (8004064 <HAL_I2C_MspInit+0xc8>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004052:	60bb      	str	r3, [r7, #8]
 8004054:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8004056:	bf00      	nop
 8004058:	3728      	adds	r7, #40	; 0x28
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40005c00 	.word	0x40005c00
 8004064:	40023800 	.word	0x40023800
 8004068:	40020800 	.word	0x40020800
 800406c:	40020000 	.word	0x40020000

08004070 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a0b      	ldr	r2, [pc, #44]	; (80040ac <HAL_I2C_MspDeInit+0x3c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d10f      	bne.n	80040a2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8004082:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <HAL_I2C_MspDeInit+0x40>)
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	4a0a      	ldr	r2, [pc, #40]	; (80040b0 <HAL_I2C_MspDeInit+0x40>)
 8004088:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800408c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 800408e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004092:	4808      	ldr	r0, [pc, #32]	; (80040b4 <HAL_I2C_MspDeInit+0x44>)
 8004094:	f002 fd94 	bl	8006bc0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8004098:	f44f 7180 	mov.w	r1, #256	; 0x100
 800409c:	4806      	ldr	r0, [pc, #24]	; (80040b8 <HAL_I2C_MspDeInit+0x48>)
 800409e:	f002 fd8f 	bl	8006bc0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 80040a2:	bf00      	nop
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40005c00 	.word	0x40005c00
 80040b0:	40023800 	.word	0x40023800
 80040b4:	40020800 	.word	0x40020800
 80040b8:	40020000 	.word	0x40020000

080040bc <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08e      	sub	sp, #56	; 0x38
 80040c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80040c2:	1d3b      	adds	r3, r7, #4
 80040c4:	2234      	movs	r2, #52	; 0x34
 80040c6:	2100      	movs	r1, #0
 80040c8:	4618      	mov	r0, r3
 80040ca:	f022 fe55 	bl	8026d78 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80040ce:	4b39      	ldr	r3, [pc, #228]	; (80041b4 <MX_LTDC_Init+0xf8>)
 80040d0:	4a39      	ldr	r2, [pc, #228]	; (80041b8 <MX_LTDC_Init+0xfc>)
 80040d2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80040d4:	4b37      	ldr	r3, [pc, #220]	; (80041b4 <MX_LTDC_Init+0xf8>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80040da:	4b36      	ldr	r3, [pc, #216]	; (80041b4 <MX_LTDC_Init+0xf8>)
 80040dc:	2200      	movs	r2, #0
 80040de:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80040e0:	4b34      	ldr	r3, [pc, #208]	; (80041b4 <MX_LTDC_Init+0xf8>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80040e6:	4b33      	ldr	r3, [pc, #204]	; (80041b4 <MX_LTDC_Init+0xf8>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80040ec:	4b31      	ldr	r3, [pc, #196]	; (80041b4 <MX_LTDC_Init+0xf8>)
 80040ee:	2209      	movs	r2, #9
 80040f0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80040f2:	4b30      	ldr	r3, [pc, #192]	; (80041b4 <MX_LTDC_Init+0xf8>)
 80040f4:	2201      	movs	r2, #1
 80040f6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80040f8:	4b2e      	ldr	r3, [pc, #184]	; (80041b4 <MX_LTDC_Init+0xf8>)
 80040fa:	221d      	movs	r2, #29
 80040fc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80040fe:	4b2d      	ldr	r3, [pc, #180]	; (80041b4 <MX_LTDC_Init+0xf8>)
 8004100:	2203      	movs	r2, #3
 8004102:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8004104:	4b2b      	ldr	r3, [pc, #172]	; (80041b4 <MX_LTDC_Init+0xf8>)
 8004106:	f240 120d 	movw	r2, #269	; 0x10d
 800410a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800410c:	4b29      	ldr	r3, [pc, #164]	; (80041b4 <MX_LTDC_Init+0xf8>)
 800410e:	f240 1243 	movw	r2, #323	; 0x143
 8004112:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8004114:	4b27      	ldr	r3, [pc, #156]	; (80041b4 <MX_LTDC_Init+0xf8>)
 8004116:	f240 1217 	movw	r2, #279	; 0x117
 800411a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 800411c:	4b25      	ldr	r3, [pc, #148]	; (80041b4 <MX_LTDC_Init+0xf8>)
 800411e:	f240 1247 	movw	r2, #327	; 0x147
 8004122:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8004124:	4b23      	ldr	r3, [pc, #140]	; (80041b4 <MX_LTDC_Init+0xf8>)
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800412c:	4b21      	ldr	r3, [pc, #132]	; (80041b4 <MX_LTDC_Init+0xf8>)
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8004134:	4b1f      	ldr	r3, [pc, #124]	; (80041b4 <MX_LTDC_Init+0xf8>)
 8004136:	2200      	movs	r2, #0
 8004138:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800413c:	481d      	ldr	r0, [pc, #116]	; (80041b4 <MX_LTDC_Init+0xf8>)
 800413e:	f003 fedd 	bl	8007efc <HAL_LTDC_Init>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8004148:	f000 fab8 	bl	80046bc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800414c:	2300      	movs	r3, #0
 800414e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8004150:	23f0      	movs	r3, #240	; 0xf0
 8004152:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8004154:	2300      	movs	r3, #0
 8004156:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8004158:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800415c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800415e:	2302      	movs	r3, #2
 8004160:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8004162:	23ff      	movs	r3, #255	; 0xff
 8004164:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8004166:	2300      	movs	r3, #0
 8004168:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800416a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800416e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8004170:	2305      	movs	r3, #5
 8004172:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8004174:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8004178:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800417a:	23f0      	movs	r3, #240	; 0xf0
 800417c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800417e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004182:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8004184:	2300      	movs	r3, #0
 8004186:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800418a:	2300      	movs	r3, #0
 800418c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8004190:	2300      	movs	r3, #0
 8004192:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8004196:	1d3b      	adds	r3, r7, #4
 8004198:	2200      	movs	r2, #0
 800419a:	4619      	mov	r1, r3
 800419c:	4805      	ldr	r0, [pc, #20]	; (80041b4 <MX_LTDC_Init+0xf8>)
 800419e:	f004 f835 	bl	800820c <HAL_LTDC_ConfigLayer>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80041a8:	f000 fa88 	bl	80046bc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80041ac:	bf00      	nop
 80041ae:	3738      	adds	r7, #56	; 0x38
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	2000ae80 	.word	0x2000ae80
 80041b8:	40016800 	.word	0x40016800

080041bc <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08e      	sub	sp, #56	; 0x38
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	605a      	str	r2, [r3, #4]
 80041ce:	609a      	str	r2, [r3, #8]
 80041d0:	60da      	str	r2, [r3, #12]
 80041d2:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a7b      	ldr	r2, [pc, #492]	; (80043c8 <HAL_LTDC_MspInit+0x20c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	f040 80ef 	bne.w	80043be <HAL_LTDC_MspInit+0x202>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80041e0:	2300      	movs	r3, #0
 80041e2:	623b      	str	r3, [r7, #32]
 80041e4:	4b79      	ldr	r3, [pc, #484]	; (80043cc <HAL_LTDC_MspInit+0x210>)
 80041e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e8:	4a78      	ldr	r2, [pc, #480]	; (80043cc <HAL_LTDC_MspInit+0x210>)
 80041ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041ee:	6453      	str	r3, [r2, #68]	; 0x44
 80041f0:	4b76      	ldr	r3, [pc, #472]	; (80043cc <HAL_LTDC_MspInit+0x210>)
 80041f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041f8:	623b      	str	r3, [r7, #32]
 80041fa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80041fc:	2300      	movs	r3, #0
 80041fe:	61fb      	str	r3, [r7, #28]
 8004200:	4b72      	ldr	r3, [pc, #456]	; (80043cc <HAL_LTDC_MspInit+0x210>)
 8004202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004204:	4a71      	ldr	r2, [pc, #452]	; (80043cc <HAL_LTDC_MspInit+0x210>)
 8004206:	f043 0320 	orr.w	r3, r3, #32
 800420a:	6313      	str	r3, [r2, #48]	; 0x30
 800420c:	4b6f      	ldr	r3, [pc, #444]	; (80043cc <HAL_LTDC_MspInit+0x210>)
 800420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	61fb      	str	r3, [r7, #28]
 8004216:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004218:	2300      	movs	r3, #0
 800421a:	61bb      	str	r3, [r7, #24]
 800421c:	4b6b      	ldr	r3, [pc, #428]	; (80043cc <HAL_LTDC_MspInit+0x210>)
 800421e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004220:	4a6a      	ldr	r2, [pc, #424]	; (80043cc <HAL_LTDC_MspInit+0x210>)
 8004222:	f043 0301 	orr.w	r3, r3, #1
 8004226:	6313      	str	r3, [r2, #48]	; 0x30
 8004228:	4b68      	ldr	r3, [pc, #416]	; (80043cc <HAL_LTDC_MspInit+0x210>)
 800422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	61bb      	str	r3, [r7, #24]
 8004232:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	4b64      	ldr	r3, [pc, #400]	; (80043cc <HAL_LTDC_MspInit+0x210>)
 800423a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423c:	4a63      	ldr	r2, [pc, #396]	; (80043cc <HAL_LTDC_MspInit+0x210>)
 800423e:	f043 0302 	orr.w	r3, r3, #2
 8004242:	6313      	str	r3, [r2, #48]	; 0x30
 8004244:	4b61      	ldr	r3, [pc, #388]	; (80043cc <HAL_LTDC_MspInit+0x210>)
 8004246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004250:	2300      	movs	r3, #0
 8004252:	613b      	str	r3, [r7, #16]
 8004254:	4b5d      	ldr	r3, [pc, #372]	; (80043cc <HAL_LTDC_MspInit+0x210>)
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	4a5c      	ldr	r2, [pc, #368]	; (80043cc <HAL_LTDC_MspInit+0x210>)
 800425a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800425e:	6313      	str	r3, [r2, #48]	; 0x30
 8004260:	4b5a      	ldr	r3, [pc, #360]	; (80043cc <HAL_LTDC_MspInit+0x210>)
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004268:	613b      	str	r3, [r7, #16]
 800426a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800426c:	2300      	movs	r3, #0
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	4b56      	ldr	r3, [pc, #344]	; (80043cc <HAL_LTDC_MspInit+0x210>)
 8004272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004274:	4a55      	ldr	r2, [pc, #340]	; (80043cc <HAL_LTDC_MspInit+0x210>)
 8004276:	f043 0304 	orr.w	r3, r3, #4
 800427a:	6313      	str	r3, [r2, #48]	; 0x30
 800427c:	4b53      	ldr	r3, [pc, #332]	; (80043cc <HAL_LTDC_MspInit+0x210>)
 800427e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004288:	2300      	movs	r3, #0
 800428a:	60bb      	str	r3, [r7, #8]
 800428c:	4b4f      	ldr	r3, [pc, #316]	; (80043cc <HAL_LTDC_MspInit+0x210>)
 800428e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004290:	4a4e      	ldr	r2, [pc, #312]	; (80043cc <HAL_LTDC_MspInit+0x210>)
 8004292:	f043 0308 	orr.w	r3, r3, #8
 8004296:	6313      	str	r3, [r2, #48]	; 0x30
 8004298:	4b4c      	ldr	r3, [pc, #304]	; (80043cc <HAL_LTDC_MspInit+0x210>)
 800429a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	60bb      	str	r3, [r7, #8]
 80042a2:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80042a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042aa:	2302      	movs	r3, #2
 80042ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ae:	2300      	movs	r3, #0
 80042b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042b2:	2300      	movs	r3, #0
 80042b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80042b6:	230e      	movs	r3, #14
 80042b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80042ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042be:	4619      	mov	r1, r3
 80042c0:	4843      	ldr	r0, [pc, #268]	; (80043d0 <HAL_LTDC_MspInit+0x214>)
 80042c2:	f002 fad1 	bl	8006868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80042c6:	f641 0358 	movw	r3, #6232	; 0x1858
 80042ca:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042cc:	2302      	movs	r3, #2
 80042ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d0:	2300      	movs	r3, #0
 80042d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042d4:	2300      	movs	r3, #0
 80042d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80042d8:	230e      	movs	r3, #14
 80042da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042e0:	4619      	mov	r1, r3
 80042e2:	483c      	ldr	r0, [pc, #240]	; (80043d4 <HAL_LTDC_MspInit+0x218>)
 80042e4:	f002 fac0 	bl	8006868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80042e8:	2303      	movs	r3, #3
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ec:	2302      	movs	r3, #2
 80042ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042f4:	2300      	movs	r3, #0
 80042f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80042f8:	2309      	movs	r3, #9
 80042fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004300:	4619      	mov	r1, r3
 8004302:	4835      	ldr	r0, [pc, #212]	; (80043d8 <HAL_LTDC_MspInit+0x21c>)
 8004304:	f002 fab0 	bl	8006868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8004308:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800430c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430e:	2302      	movs	r3, #2
 8004310:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004312:	2300      	movs	r3, #0
 8004314:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004316:	2300      	movs	r3, #0
 8004318:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800431a:	230e      	movs	r3, #14
 800431c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800431e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004322:	4619      	mov	r1, r3
 8004324:	482c      	ldr	r0, [pc, #176]	; (80043d8 <HAL_LTDC_MspInit+0x21c>)
 8004326:	f002 fa9f 	bl	8006868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800432a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800432e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004330:	2302      	movs	r3, #2
 8004332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004334:	2300      	movs	r3, #0
 8004336:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004338:	2300      	movs	r3, #0
 800433a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800433c:	230e      	movs	r3, #14
 800433e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004344:	4619      	mov	r1, r3
 8004346:	4825      	ldr	r0, [pc, #148]	; (80043dc <HAL_LTDC_MspInit+0x220>)
 8004348:	f002 fa8e 	bl	8006868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin;
 800434c:	23c0      	movs	r3, #192	; 0xc0
 800434e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004350:	2302      	movs	r3, #2
 8004352:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004354:	2300      	movs	r3, #0
 8004356:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004358:	2300      	movs	r3, #0
 800435a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800435c:	230e      	movs	r3, #14
 800435e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004364:	4619      	mov	r1, r3
 8004366:	481e      	ldr	r0, [pc, #120]	; (80043e0 <HAL_LTDC_MspInit+0x224>)
 8004368:	f002 fa7e 	bl	8006868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin;
 800436c:	2308      	movs	r3, #8
 800436e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004370:	2302      	movs	r3, #2
 8004372:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004374:	2300      	movs	r3, #0
 8004376:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004378:	2300      	movs	r3, #0
 800437a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800437c:	230e      	movs	r3, #14
 800437e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 8004380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004384:	4619      	mov	r1, r3
 8004386:	4817      	ldr	r0, [pc, #92]	; (80043e4 <HAL_LTDC_MspInit+0x228>)
 8004388:	f002 fa6e 	bl	8006868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800438c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004390:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004392:	2302      	movs	r3, #2
 8004394:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004396:	2300      	movs	r3, #0
 8004398:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800439a:	2300      	movs	r3, #0
 800439c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800439e:	2309      	movs	r3, #9
 80043a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80043a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043a6:	4619      	mov	r1, r3
 80043a8:	480c      	ldr	r0, [pc, #48]	; (80043dc <HAL_LTDC_MspInit+0x220>)
 80043aa:	f002 fa5d 	bl	8006868 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80043ae:	2200      	movs	r2, #0
 80043b0:	2105      	movs	r1, #5
 80043b2:	2058      	movs	r0, #88	; 0x58
 80043b4:	f001 ff94 	bl	80062e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80043b8:	2058      	movs	r0, #88	; 0x58
 80043ba:	f001 ffad 	bl	8006318 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80043be:	bf00      	nop
 80043c0:	3738      	adds	r7, #56	; 0x38
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	40016800 	.word	0x40016800
 80043cc:	40023800 	.word	0x40023800
 80043d0:	40021400 	.word	0x40021400
 80043d4:	40020000 	.word	0x40020000
 80043d8:	40020400 	.word	0x40020400
 80043dc:	40021800 	.word	0x40021800
 80043e0:	40020800 	.word	0x40020800
 80043e4:	40020c00 	.word	0x40020c00

080043e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80043ec:	f001 fe5a 	bl	80060a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80043f0:	f000 f82e 	bl	8004450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80043f4:	f7ff fc6e 	bl	8003cd4 <MX_GPIO_Init>
  MX_CRC_Init();
 80043f8:	f7ff fa2a 	bl	8003850 <MX_CRC_Init>
  MX_DMA2D_Init();
 80043fc:	f7ff fa5e 	bl	80038bc <MX_DMA2D_Init>
  MX_FMC_Init();
 8004400:	f7ff fab6 	bl	8003970 <MX_FMC_Init>
  MX_LTDC_Init();
 8004404:	f7ff fe5a 	bl	80040bc <MX_LTDC_Init>
  MX_SPI5_Init();
 8004408:	f000 f95e 	bl	80046c8 <MX_SPI5_Init>
  MX_TIM1_Init();
 800440c:	f000 fb9e 	bl	8004b4c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8004410:	f000 fc8a 	bl	8004d28 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8004414:	f000 fbea 	bl	8004bec <MX_TIM7_Init>
  MX_I2C3_Init();
 8004418:	f7ff fd80 	bl	8003f1c <MX_I2C3_Init>
  MX_UART5_Init();
 800441c:	f000 fc5a 	bl	8004cd4 <MX_UART5_Init>
  MX_TouchGFX_Init();
 8004420:	f00b fa60 	bl	800f8e4 <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */
  sensorInit(osPriorityRealtime);
 8004424:	2003      	movs	r0, #3
 8004426:	f7fe fb0b 	bl	8002a40 <sensorInit>
  tftLcdInit(osPriorityHigh);
 800442a:	2002      	movs	r0, #2
 800442c:	f7fe fb3e 	bl	8002aac <tftLcdInit>
  workTaskInit(osPriorityAboveNormal);
 8004430:	2001      	movs	r0, #1
 8004432:	f7fd ff0d 	bl	8002250 <workTaskInit>
  eventLoopInit(osPriorityNormal);
 8004436:	2000      	movs	r0, #0
 8004438:	f7fd fd70 	bl	8001f1c <eventLoopInit>
  WifiInit(osPriorityLow);
 800443c:	f06f 0001 	mvn.w	r0, #1
 8004440:	f7fe fe78 	bl	8003134 <WifiInit>
  //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8004444:	f7ff fc00 	bl	8003c48 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8004448:	f008 f966 	bl	800c718 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800444c:	e7fe      	b.n	800444c <main+0x64>
	...

08004450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b0a0      	sub	sp, #128	; 0x80
 8004454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004456:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800445a:	2230      	movs	r2, #48	; 0x30
 800445c:	2100      	movs	r1, #0
 800445e:	4618      	mov	r0, r3
 8004460:	f022 fc8a 	bl	8026d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004464:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	605a      	str	r2, [r3, #4]
 800446e:	609a      	str	r2, [r3, #8]
 8004470:	60da      	str	r2, [r3, #12]
 8004472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004474:	f107 030c 	add.w	r3, r7, #12
 8004478:	2230      	movs	r2, #48	; 0x30
 800447a:	2100      	movs	r1, #0
 800447c:	4618      	mov	r0, r3
 800447e:	f022 fc7b 	bl	8026d78 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004482:	2300      	movs	r3, #0
 8004484:	60bb      	str	r3, [r7, #8]
 8004486:	4b32      	ldr	r3, [pc, #200]	; (8004550 <SystemClock_Config+0x100>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	4a31      	ldr	r2, [pc, #196]	; (8004550 <SystemClock_Config+0x100>)
 800448c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004490:	6413      	str	r3, [r2, #64]	; 0x40
 8004492:	4b2f      	ldr	r3, [pc, #188]	; (8004550 <SystemClock_Config+0x100>)
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800449a:	60bb      	str	r3, [r7, #8]
 800449c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800449e:	2300      	movs	r3, #0
 80044a0:	607b      	str	r3, [r7, #4]
 80044a2:	4b2c      	ldr	r3, [pc, #176]	; (8004554 <SystemClock_Config+0x104>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80044aa:	4a2a      	ldr	r2, [pc, #168]	; (8004554 <SystemClock_Config+0x104>)
 80044ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	4b28      	ldr	r3, [pc, #160]	; (8004554 <SystemClock_Config+0x104>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80044ba:	607b      	str	r3, [r7, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80044be:	2301      	movs	r3, #1
 80044c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80044c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044c6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044c8:	2302      	movs	r3, #2
 80044ca:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80044cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80044d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80044d2:	2304      	movs	r3, #4
 80044d4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 80044d6:	2348      	movs	r3, #72	; 0x48
 80044d8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80044da:	2302      	movs	r3, #2
 80044dc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80044de:	2303      	movs	r3, #3
 80044e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80044e6:	4618      	mov	r0, r3
 80044e8:	f004 f89e 	bl	8008628 <HAL_RCC_OscConfig>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80044f2:	f000 f8e3 	bl	80046bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80044f6:	230f      	movs	r3, #15
 80044f8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80044fa:	2302      	movs	r3, #2
 80044fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80044fe:	2300      	movs	r3, #0
 8004500:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004506:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004508:	2300      	movs	r3, #0
 800450a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800450c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004510:	2102      	movs	r1, #2
 8004512:	4618      	mov	r0, r3
 8004514:	f004 fb00 	bl	8008b18 <HAL_RCC_ClockConfig>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800451e:	f000 f8cd 	bl	80046bc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004522:	2308      	movs	r3, #8
 8004524:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 8004526:	233c      	movs	r3, #60	; 0x3c
 8004528:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800452a:	2305      	movs	r3, #5
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800452e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004532:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004534:	f107 030c 	add.w	r3, r7, #12
 8004538:	4618      	mov	r0, r3
 800453a:	f004 fd1b 	bl	8008f74 <HAL_RCCEx_PeriphCLKConfig>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8004544:	f000 f8ba 	bl	80046bc <Error_Handler>
  }
}
 8004548:	bf00      	nop
 800454a:	3780      	adds	r7, #128	; 0x80
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40023800 	.word	0x40023800
 8004554:	40007000 	.word	0x40007000

08004558 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b0c2      	sub	sp, #264	; 0x108
 800455c:	af00      	add	r7, sp, #0
 800455e:	1d3b      	adds	r3, r7, #4
 8004560:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Callback 0 */
  static int32_t timeOut = 0;

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004562:	1d3b      	adds	r3, r7, #4
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a48      	ldr	r2, [pc, #288]	; (800468c <HAL_TIM_PeriodElapsedCallback+0x134>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d101      	bne.n	8004572 <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_IncTick();
 800456e:	f001 fdbb 	bl	80060e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM7) {
 8004572:	1d3b      	adds	r3, r7, #4
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a45      	ldr	r2, [pc, #276]	; (8004690 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d17f      	bne.n	800467e <HAL_TIM_PeriodElapsedCallback+0x126>
	switch (mqtt.status)
 800457e:	4b45      	ldr	r3, [pc, #276]	; (8004694 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004584:	2b01      	cmp	r3, #1
 8004586:	d002      	beq.n	800458e <HAL_TIM_PeriodElapsedCallback+0x36>
 8004588:	2b02      	cmp	r3, #2
 800458a:	d03f      	beq.n	800460c <HAL_TIM_PeriodElapsedCallback+0xb4>
 800458c:	e06f      	b.n	800466e <HAL_TIM_PeriodElapsedCallback+0x116>
	{
		case 1:
			if (timeOut >= 100)
 800458e:	4b42      	ldr	r3, [pc, #264]	; (8004698 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b63      	cmp	r3, #99	; 0x63
 8004594:	dd07      	ble.n	80045a6 <HAL_TIM_PeriodElapsedCallback+0x4e>
			{
				mqtt.status = 0;
 8004596:	4b3f      	ldr	r3, [pc, #252]	; (8004694 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004598:	2200      	movs	r2, #0
 800459a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				timeOut = 0;
 800459e:	4b3e      	ldr	r3, [pc, #248]	; (8004698 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]
			}
			else
			{
				timeOut++;
			}
			break;
 80045a4:	e06c      	b.n	8004680 <HAL_TIM_PeriodElapsedCallback+0x128>
			else if ((strstr((char *)Wifi.RxBuffer, "ERROR")) ||
 80045a6:	493d      	ldr	r1, [pc, #244]	; (800469c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80045a8:	483d      	ldr	r0, [pc, #244]	; (80046a0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80045aa:	f023 f8ae 	bl	802770a <strstr>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d106      	bne.n	80045c2 <HAL_TIM_PeriodElapsedCallback+0x6a>
					 (strstr((char *)Wifi.RxBuffer, "OK")))
 80045b4:	493b      	ldr	r1, [pc, #236]	; (80046a4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80045b6:	483a      	ldr	r0, [pc, #232]	; (80046a0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80045b8:	f023 f8a7 	bl	802770a <strstr>
 80045bc:	4603      	mov	r3, r0
			else if ((strstr((char *)Wifi.RxBuffer, "ERROR")) ||
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d01e      	beq.n	8004600 <HAL_TIM_PeriodElapsedCallback+0xa8>
				char tx_buffer[256] = {0,};
 80045c2:	f107 0308 	add.w	r3, r7, #8
 80045c6:	2200      	movs	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	3304      	adds	r3, #4
 80045cc:	22fc      	movs	r2, #252	; 0xfc
 80045ce:	2100      	movs	r1, #0
 80045d0:	4618      	mov	r0, r3
 80045d2:	f022 fbd1 	bl	8026d78 <memset>
				mqtt.status = 2;
 80045d6:	4b2f      	ldr	r3, [pc, #188]	; (8004694 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80045d8:	2202      	movs	r2, #2
 80045da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				timeOut=0;
 80045de:	4b2e      	ldr	r3, [pc, #184]	; (8004698 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
				Wifi_RxClear();
 80045e4:	f7fe fbcc 	bl	8002d80 <Wifi_RxClear>
				HAL_UART_Transmit(&_WIFI_USART,(uint8_t *)mqtt.msg, mqtt.length, 1000);
 80045e8:	4b2a      	ldr	r3, [pc, #168]	; (8004694 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80045ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045f4:	4927      	ldr	r1, [pc, #156]	; (8004694 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80045f6:	482c      	ldr	r0, [pc, #176]	; (80046a8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80045f8:	f006 f9d5 	bl	800a9a6 <HAL_UART_Transmit>
			{
 80045fc:	bf00      	nop
			break;
 80045fe:	e03f      	b.n	8004680 <HAL_TIM_PeriodElapsedCallback+0x128>
				timeOut++;
 8004600:	4b25      	ldr	r3, [pc, #148]	; (8004698 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	3301      	adds	r3, #1
 8004606:	4a24      	ldr	r2, [pc, #144]	; (8004698 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004608:	6013      	str	r3, [r2, #0]
			break;
 800460a:	e039      	b.n	8004680 <HAL_TIM_PeriodElapsedCallback+0x128>

		case 2:
			if (timeOut >= 100)
 800460c:	4b22      	ldr	r3, [pc, #136]	; (8004698 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b63      	cmp	r3, #99	; 0x63
 8004612:	dd07      	ble.n	8004624 <HAL_TIM_PeriodElapsedCallback+0xcc>
			{
				mqtt.status = 0;
 8004614:	4b1f      	ldr	r3, [pc, #124]	; (8004694 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004616:	2200      	movs	r2, #0
 8004618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				timeOut = 0;
 800461c:	4b1e      	ldr	r3, [pc, #120]	; (8004698 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]
			}
			else
			{
				timeOut++;
			}
			break;
 8004622:	e02d      	b.n	8004680 <HAL_TIM_PeriodElapsedCallback+0x128>
			else if ((strstr((char *)Wifi.RxBuffer, "ERROR")) ||
 8004624:	491d      	ldr	r1, [pc, #116]	; (800469c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004626:	481e      	ldr	r0, [pc, #120]	; (80046a0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8004628:	f023 f86f 	bl	802770a <strstr>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d106      	bne.n	8004640 <HAL_TIM_PeriodElapsedCallback+0xe8>
					 (strstr((char *)Wifi.RxBuffer, "OK")))
 8004632:	491c      	ldr	r1, [pc, #112]	; (80046a4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004634:	481a      	ldr	r0, [pc, #104]	; (80046a0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8004636:	f023 f868 	bl	802770a <strstr>
 800463a:	4603      	mov	r3, r0
			else if ((strstr((char *)Wifi.RxBuffer, "ERROR")) ||
 800463c:	2b00      	cmp	r3, #0
 800463e:	d010      	beq.n	8004662 <HAL_TIM_PeriodElapsedCallback+0x10a>
				DEBUG_PRINT("OK!");
 8004640:	23fa      	movs	r3, #250	; 0xfa
 8004642:	4a1a      	ldr	r2, [pc, #104]	; (80046ac <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004644:	491a      	ldr	r1, [pc, #104]	; (80046b0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004646:	481b      	ldr	r0, [pc, #108]	; (80046b4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8004648:	f000 fc40 	bl	8004ecc <_debugPrint>
				mqtt.status = 0;
 800464c:	4b11      	ldr	r3, [pc, #68]	; (8004694 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800464e:	2200      	movs	r2, #0
 8004650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				timeOut=0;
 8004654:	4b10      	ldr	r3, [pc, #64]	; (8004698 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim7);
 800465a:	4817      	ldr	r0, [pc, #92]	; (80046b8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800465c:	f005 fd66 	bl	800a12c <HAL_TIM_Base_Stop_IT>
			break;
 8004660:	e00e      	b.n	8004680 <HAL_TIM_PeriodElapsedCallback+0x128>
				timeOut++;
 8004662:	4b0d      	ldr	r3, [pc, #52]	; (8004698 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	3301      	adds	r3, #1
 8004668:	4a0b      	ldr	r2, [pc, #44]	; (8004698 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800466a:	6013      	str	r3, [r2, #0]
			break;
 800466c:	e008      	b.n	8004680 <HAL_TIM_PeriodElapsedCallback+0x128>

		default:
			mqtt.status = 0;
 800466e:	4b09      	ldr	r3, [pc, #36]	; (8004694 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004670:	2200      	movs	r2, #0
 8004672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			timeOut = 0;
 8004676:	4b08      	ldr	r3, [pc, #32]	; (8004698 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
			break;
 800467c:	e000      	b.n	8004680 <HAL_TIM_PeriodElapsedCallback+0x128>
	}
  }
 800467e:	bf00      	nop
  /* USER CODE END Callback 1 */
}
 8004680:	bf00      	nop
 8004682:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	40001000 	.word	0x40001000
 8004690:	40001400 	.word	0x40001400
 8004694:	20000014 	.word	0x20000014
 8004698:	20000488 	.word	0x20000488
 800469c:	08029490 	.word	0x08029490
 80046a0:	2000a4e1 	.word	0x2000a4e1
 80046a4:	08029498 	.word	0x08029498
 80046a8:	2000b09c 	.word	0x2000b09c
 80046ac:	0802a078 	.word	0x0802a078
 80046b0:	0802949c 	.word	0x0802949c
 80046b4:	080294b0 	.word	0x080294b0
 80046b8:	2000b010 	.word	0x2000b010

080046bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046c0:	b672      	cpsid	i
}
 80046c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80046c4:	e7fe      	b.n	80046c4 <Error_Handler+0x8>
	...

080046c8 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80046cc:	4b17      	ldr	r3, [pc, #92]	; (800472c <MX_SPI5_Init+0x64>)
 80046ce:	4a18      	ldr	r2, [pc, #96]	; (8004730 <MX_SPI5_Init+0x68>)
 80046d0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80046d2:	4b16      	ldr	r3, [pc, #88]	; (800472c <MX_SPI5_Init+0x64>)
 80046d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80046d8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80046da:	4b14      	ldr	r3, [pc, #80]	; (800472c <MX_SPI5_Init+0x64>)
 80046dc:	2200      	movs	r2, #0
 80046de:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80046e0:	4b12      	ldr	r3, [pc, #72]	; (800472c <MX_SPI5_Init+0x64>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80046e6:	4b11      	ldr	r3, [pc, #68]	; (800472c <MX_SPI5_Init+0x64>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80046ec:	4b0f      	ldr	r3, [pc, #60]	; (800472c <MX_SPI5_Init+0x64>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80046f2:	4b0e      	ldr	r3, [pc, #56]	; (800472c <MX_SPI5_Init+0x64>)
 80046f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046f8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80046fa:	4b0c      	ldr	r3, [pc, #48]	; (800472c <MX_SPI5_Init+0x64>)
 80046fc:	2218      	movs	r2, #24
 80046fe:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004700:	4b0a      	ldr	r3, [pc, #40]	; (800472c <MX_SPI5_Init+0x64>)
 8004702:	2200      	movs	r2, #0
 8004704:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8004706:	4b09      	ldr	r3, [pc, #36]	; (800472c <MX_SPI5_Init+0x64>)
 8004708:	2200      	movs	r2, #0
 800470a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800470c:	4b07      	ldr	r3, [pc, #28]	; (800472c <MX_SPI5_Init+0x64>)
 800470e:	2200      	movs	r2, #0
 8004710:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8004712:	4b06      	ldr	r3, [pc, #24]	; (800472c <MX_SPI5_Init+0x64>)
 8004714:	220a      	movs	r2, #10
 8004716:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8004718:	4804      	ldr	r0, [pc, #16]	; (800472c <MX_SPI5_Init+0x64>)
 800471a:	f004 fe68 	bl	80093ee <HAL_SPI_Init>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8004724:	f7ff ffca 	bl	80046bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8004728:	bf00      	nop
 800472a:	bd80      	pop	{r7, pc}
 800472c:	2000af28 	.word	0x2000af28
 8004730:	40015000 	.word	0x40015000

08004734 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b08a      	sub	sp, #40	; 0x28
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800473c:	f107 0314 	add.w	r3, r7, #20
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	605a      	str	r2, [r3, #4]
 8004746:	609a      	str	r2, [r3, #8]
 8004748:	60da      	str	r2, [r3, #12]
 800474a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a19      	ldr	r2, [pc, #100]	; (80047b8 <HAL_SPI_MspInit+0x84>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d12c      	bne.n	80047b0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004756:	2300      	movs	r3, #0
 8004758:	613b      	str	r3, [r7, #16]
 800475a:	4b18      	ldr	r3, [pc, #96]	; (80047bc <HAL_SPI_MspInit+0x88>)
 800475c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475e:	4a17      	ldr	r2, [pc, #92]	; (80047bc <HAL_SPI_MspInit+0x88>)
 8004760:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004764:	6453      	str	r3, [r2, #68]	; 0x44
 8004766:	4b15      	ldr	r3, [pc, #84]	; (80047bc <HAL_SPI_MspInit+0x88>)
 8004768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800476e:	613b      	str	r3, [r7, #16]
 8004770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004772:	2300      	movs	r3, #0
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	4b11      	ldr	r3, [pc, #68]	; (80047bc <HAL_SPI_MspInit+0x88>)
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	4a10      	ldr	r2, [pc, #64]	; (80047bc <HAL_SPI_MspInit+0x88>)
 800477c:	f043 0320 	orr.w	r3, r3, #32
 8004780:	6313      	str	r3, [r2, #48]	; 0x30
 8004782:	4b0e      	ldr	r3, [pc, #56]	; (80047bc <HAL_SPI_MspInit+0x88>)
 8004784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800478e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8004792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004794:	2302      	movs	r3, #2
 8004796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004798:	2300      	movs	r3, #0
 800479a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800479c:	2300      	movs	r3, #0
 800479e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80047a0:	2305      	movs	r3, #5
 80047a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80047a4:	f107 0314 	add.w	r3, r7, #20
 80047a8:	4619      	mov	r1, r3
 80047aa:	4805      	ldr	r0, [pc, #20]	; (80047c0 <HAL_SPI_MspInit+0x8c>)
 80047ac:	f002 f85c 	bl	8006868 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80047b0:	bf00      	nop
 80047b2:	3728      	adds	r7, #40	; 0x28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	40015000 	.word	0x40015000
 80047bc:	40023800 	.word	0x40023800
 80047c0:	40021400 	.word	0x40021400

080047c4 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a08      	ldr	r2, [pc, #32]	; (80047f4 <HAL_SPI_MspDeInit+0x30>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d10a      	bne.n	80047ec <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80047d6:	4b08      	ldr	r3, [pc, #32]	; (80047f8 <HAL_SPI_MspDeInit+0x34>)
 80047d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047da:	4a07      	ldr	r2, [pc, #28]	; (80047f8 <HAL_SPI_MspDeInit+0x34>)
 80047dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80047e0:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80047e2:	f44f 7160 	mov.w	r1, #896	; 0x380
 80047e6:	4805      	ldr	r0, [pc, #20]	; (80047fc <HAL_SPI_MspDeInit+0x38>)
 80047e8:	f002 f9ea 	bl	8006bc0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 80047ec:	bf00      	nop
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	40015000 	.word	0x40015000
 80047f8:	40023800 	.word	0x40023800
 80047fc:	40021400 	.word	0x40021400

08004800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004806:	2300      	movs	r3, #0
 8004808:	607b      	str	r3, [r7, #4]
 800480a:	4b12      	ldr	r3, [pc, #72]	; (8004854 <HAL_MspInit+0x54>)
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	4a11      	ldr	r2, [pc, #68]	; (8004854 <HAL_MspInit+0x54>)
 8004810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004814:	6453      	str	r3, [r2, #68]	; 0x44
 8004816:	4b0f      	ldr	r3, [pc, #60]	; (8004854 <HAL_MspInit+0x54>)
 8004818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800481e:	607b      	str	r3, [r7, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004822:	2300      	movs	r3, #0
 8004824:	603b      	str	r3, [r7, #0]
 8004826:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <HAL_MspInit+0x54>)
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	4a0a      	ldr	r2, [pc, #40]	; (8004854 <HAL_MspInit+0x54>)
 800482c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004830:	6413      	str	r3, [r2, #64]	; 0x40
 8004832:	4b08      	ldr	r3, [pc, #32]	; (8004854 <HAL_MspInit+0x54>)
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800483e:	2200      	movs	r2, #0
 8004840:	210f      	movs	r1, #15
 8004842:	f06f 0001 	mvn.w	r0, #1
 8004846:	f001 fd4b 	bl	80062e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800484a:	bf00      	nop
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	40023800 	.word	0x40023800

08004858 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08c      	sub	sp, #48	; 0x30
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004860:	2300      	movs	r3, #0
 8004862:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004864:	2300      	movs	r3, #0
 8004866:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004868:	2200      	movs	r2, #0
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	2036      	movs	r0, #54	; 0x36
 800486e:	f001 fd37 	bl	80062e0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004872:	2036      	movs	r0, #54	; 0x36
 8004874:	f001 fd50 	bl	8006318 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004878:	2300      	movs	r3, #0
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	4b1f      	ldr	r3, [pc, #124]	; (80048fc <HAL_InitTick+0xa4>)
 800487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004880:	4a1e      	ldr	r2, [pc, #120]	; (80048fc <HAL_InitTick+0xa4>)
 8004882:	f043 0310 	orr.w	r3, r3, #16
 8004886:	6413      	str	r3, [r2, #64]	; 0x40
 8004888:	4b1c      	ldr	r3, [pc, #112]	; (80048fc <HAL_InitTick+0xa4>)
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	f003 0310 	and.w	r3, r3, #16
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004894:	f107 0210 	add.w	r2, r7, #16
 8004898:	f107 0314 	add.w	r3, r7, #20
 800489c:	4611      	mov	r1, r2
 800489e:	4618      	mov	r0, r3
 80048a0:	f004 fb36 	bl	8008f10 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80048a4:	f004 fb0c 	bl	8008ec0 <HAL_RCC_GetPCLK1Freq>
 80048a8:	4603      	mov	r3, r0
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80048ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b0:	4a13      	ldr	r2, [pc, #76]	; (8004900 <HAL_InitTick+0xa8>)
 80048b2:	fba2 2303 	umull	r2, r3, r2, r3
 80048b6:	0c9b      	lsrs	r3, r3, #18
 80048b8:	3b01      	subs	r3, #1
 80048ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80048bc:	4b11      	ldr	r3, [pc, #68]	; (8004904 <HAL_InitTick+0xac>)
 80048be:	4a12      	ldr	r2, [pc, #72]	; (8004908 <HAL_InitTick+0xb0>)
 80048c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80048c2:	4b10      	ldr	r3, [pc, #64]	; (8004904 <HAL_InitTick+0xac>)
 80048c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80048c8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80048ca:	4a0e      	ldr	r2, [pc, #56]	; (8004904 <HAL_InitTick+0xac>)
 80048cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ce:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80048d0:	4b0c      	ldr	r3, [pc, #48]	; (8004904 <HAL_InitTick+0xac>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048d6:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <HAL_InitTick+0xac>)
 80048d8:	2200      	movs	r2, #0
 80048da:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80048dc:	4809      	ldr	r0, [pc, #36]	; (8004904 <HAL_InitTick+0xac>)
 80048de:	f005 fb65 	bl	8009fac <HAL_TIM_Base_Init>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d104      	bne.n	80048f2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80048e8:	4806      	ldr	r0, [pc, #24]	; (8004904 <HAL_InitTick+0xac>)
 80048ea:	f005 fbaf 	bl	800a04c <HAL_TIM_Base_Start_IT>
 80048ee:	4603      	mov	r3, r0
 80048f0:	e000      	b.n	80048f4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3730      	adds	r7, #48	; 0x30
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40023800 	.word	0x40023800
 8004900:	431bde83 	.word	0x431bde83
 8004904:	2000af80 	.word	0x2000af80
 8004908:	40001000 	.word	0x40001000

0800490c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004910:	e7fe      	b.n	8004910 <NMI_Handler+0x4>

08004912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004912:	b480      	push	{r7}
 8004914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004916:	e7fe      	b.n	8004916 <HardFault_Handler+0x4>

08004918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800491c:	e7fe      	b.n	800491c <MemManage_Handler+0x4>

0800491e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800491e:	b480      	push	{r7}
 8004920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004922:	e7fe      	b.n	8004922 <BusFault_Handler+0x4>

08004924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004928:	e7fe      	b.n	8004928 <UsageFault_Handler+0x4>

0800492a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800492a:	b480      	push	{r7}
 800492c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800492e:	bf00      	nop
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800493c:	4802      	ldr	r0, [pc, #8]	; (8004948 <UART5_IRQHandler+0x10>)
 800493e:	f006 f8f5 	bl	800ab2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004942:	bf00      	nop
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	2000b09c 	.word	0x2000b09c

0800494c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004950:	4802      	ldr	r0, [pc, #8]	; (800495c <TIM6_DAC_IRQHandler+0x10>)
 8004952:	f005 fc1a 	bl	800a18a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004956:	bf00      	nop
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	2000af80 	.word	0x2000af80

08004960 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004964:	4802      	ldr	r0, [pc, #8]	; (8004970 <TIM7_IRQHandler+0x10>)
 8004966:	f005 fc10 	bl	800a18a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800496a:	bf00      	nop
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	2000b010 	.word	0x2000b010

08004974 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004978:	4802      	ldr	r0, [pc, #8]	; (8004984 <LTDC_IRQHandler+0x10>)
 800497a:	f003 fb8f 	bl	800809c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800497e:	bf00      	nop
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	2000ae80 	.word	0x2000ae80

08004988 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800498c:	4802      	ldr	r0, [pc, #8]	; (8004998 <DMA2D_IRQHandler+0x10>)
 800498e:	f001 fdc8 	bl	8006522 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004992:	bf00      	nop
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	2000ad9c 	.word	0x2000ad9c

0800499c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
	return 1;
 80049a0:	2301      	movs	r3, #1
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <_kill>:

int _kill(int pid, int sig)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80049b6:	f022 f96b 	bl	8026c90 <__errno>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2216      	movs	r2, #22
 80049be:	601a      	str	r2, [r3, #0]
	return -1;
 80049c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3708      	adds	r7, #8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <_exit>:

void _exit (int status)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80049d4:	f04f 31ff 	mov.w	r1, #4294967295
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7ff ffe7 	bl	80049ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80049de:	e7fe      	b.n	80049de <_exit+0x12>

080049e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049ec:	2300      	movs	r3, #0
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	e00a      	b.n	8004a08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80049f2:	f3af 8000 	nop.w
 80049f6:	4601      	mov	r1, r0
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	60ba      	str	r2, [r7, #8]
 80049fe:	b2ca      	uxtb	r2, r1
 8004a00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	3301      	adds	r3, #1
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	dbf0      	blt.n	80049f2 <_read+0x12>
	}

return len;
 8004a10:	687b      	ldr	r3, [r7, #4]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b086      	sub	sp, #24
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a26:	2300      	movs	r3, #0
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	e009      	b.n	8004a40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	60ba      	str	r2, [r7, #8]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	dbf1      	blt.n	8004a2c <_write+0x12>
	}
	return len;
 8004a48:	687b      	ldr	r3, [r7, #4]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <_close>:

int _close(int file)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
	return -1;
 8004a5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a7a:	605a      	str	r2, [r3, #4]
	return 0;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <_isatty>:

int _isatty(int file)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
	return 1;
 8004a92:	2301      	movs	r3, #1
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
	return 0;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
	...

08004abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ac4:	4a14      	ldr	r2, [pc, #80]	; (8004b18 <_sbrk+0x5c>)
 8004ac6:	4b15      	ldr	r3, [pc, #84]	; (8004b1c <_sbrk+0x60>)
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ad0:	4b13      	ldr	r3, [pc, #76]	; (8004b20 <_sbrk+0x64>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d102      	bne.n	8004ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ad8:	4b11      	ldr	r3, [pc, #68]	; (8004b20 <_sbrk+0x64>)
 8004ada:	4a12      	ldr	r2, [pc, #72]	; (8004b24 <_sbrk+0x68>)
 8004adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ade:	4b10      	ldr	r3, [pc, #64]	; (8004b20 <_sbrk+0x64>)
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d207      	bcs.n	8004afc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004aec:	f022 f8d0 	bl	8026c90 <__errno>
 8004af0:	4603      	mov	r3, r0
 8004af2:	220c      	movs	r2, #12
 8004af4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004af6:	f04f 33ff 	mov.w	r3, #4294967295
 8004afa:	e009      	b.n	8004b10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004afc:	4b08      	ldr	r3, [pc, #32]	; (8004b20 <_sbrk+0x64>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b02:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <_sbrk+0x64>)
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4413      	add	r3, r2
 8004b0a:	4a05      	ldr	r2, [pc, #20]	; (8004b20 <_sbrk+0x64>)
 8004b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	20030000 	.word	0x20030000
 8004b1c:	00000400 	.word	0x00000400
 8004b20:	2000048c 	.word	0x2000048c
 8004b24:	2000b148 	.word	0x2000b148

08004b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b2c:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <SystemInit+0x20>)
 8004b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b32:	4a05      	ldr	r2, [pc, #20]	; (8004b48 <SystemInit+0x20>)
 8004b34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b3c:	bf00      	nop
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	e000ed00 	.word	0xe000ed00

08004b4c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b52:	f107 0308 	add.w	r3, r7, #8
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	605a      	str	r2, [r3, #4]
 8004b5c:	609a      	str	r2, [r3, #8]
 8004b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b60:	463b      	mov	r3, r7
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004b68:	4b1e      	ldr	r3, [pc, #120]	; (8004be4 <MX_TIM1_Init+0x98>)
 8004b6a:	4a1f      	ldr	r2, [pc, #124]	; (8004be8 <MX_TIM1_Init+0x9c>)
 8004b6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004b6e:	4b1d      	ldr	r3, [pc, #116]	; (8004be4 <MX_TIM1_Init+0x98>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b74:	4b1b      	ldr	r3, [pc, #108]	; (8004be4 <MX_TIM1_Init+0x98>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004b7a:	4b1a      	ldr	r3, [pc, #104]	; (8004be4 <MX_TIM1_Init+0x98>)
 8004b7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b82:	4b18      	ldr	r3, [pc, #96]	; (8004be4 <MX_TIM1_Init+0x98>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004b88:	4b16      	ldr	r3, [pc, #88]	; (8004be4 <MX_TIM1_Init+0x98>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b8e:	4b15      	ldr	r3, [pc, #84]	; (8004be4 <MX_TIM1_Init+0x98>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004b94:	4813      	ldr	r0, [pc, #76]	; (8004be4 <MX_TIM1_Init+0x98>)
 8004b96:	f005 fa09 	bl	8009fac <HAL_TIM_Base_Init>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8004ba0:	f7ff fd8c 	bl	80046bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ba8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004baa:	f107 0308 	add.w	r3, r7, #8
 8004bae:	4619      	mov	r1, r3
 8004bb0:	480c      	ldr	r0, [pc, #48]	; (8004be4 <MX_TIM1_Init+0x98>)
 8004bb2:	f005 fbf2 	bl	800a39a <HAL_TIM_ConfigClockSource>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8004bbc:	f7ff fd7e 	bl	80046bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004bc8:	463b      	mov	r3, r7
 8004bca:	4619      	mov	r1, r3
 8004bcc:	4805      	ldr	r0, [pc, #20]	; (8004be4 <MX_TIM1_Init+0x98>)
 8004bce:	f005 fe0d 	bl	800a7ec <HAL_TIMEx_MasterConfigSynchronization>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004bd8:	f7ff fd70 	bl	80046bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004bdc:	bf00      	nop
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	2000afc8 	.word	0x2000afc8
 8004be8:	40010000 	.word	0x40010000

08004bec <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bf2:	463b      	mov	r3, r7
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004bfa:	4b15      	ldr	r3, [pc, #84]	; (8004c50 <MX_TIM7_Init+0x64>)
 8004bfc:	4a15      	ldr	r2, [pc, #84]	; (8004c54 <MX_TIM7_Init+0x68>)
 8004bfe:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 360;
 8004c00:	4b13      	ldr	r3, [pc, #76]	; (8004c50 <MX_TIM7_Init+0x64>)
 8004c02:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8004c06:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c08:	4b11      	ldr	r3, [pc, #68]	; (8004c50 <MX_TIM7_Init+0x64>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2000;
 8004c0e:	4b10      	ldr	r3, [pc, #64]	; (8004c50 <MX_TIM7_Init+0x64>)
 8004c10:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004c14:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c16:	4b0e      	ldr	r3, [pc, #56]	; (8004c50 <MX_TIM7_Init+0x64>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004c1c:	480c      	ldr	r0, [pc, #48]	; (8004c50 <MX_TIM7_Init+0x64>)
 8004c1e:	f005 f9c5 	bl	8009fac <HAL_TIM_Base_Init>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004c28:	f7ff fd48 	bl	80046bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c30:	2300      	movs	r3, #0
 8004c32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004c34:	463b      	mov	r3, r7
 8004c36:	4619      	mov	r1, r3
 8004c38:	4805      	ldr	r0, [pc, #20]	; (8004c50 <MX_TIM7_Init+0x64>)
 8004c3a:	f005 fdd7 	bl	800a7ec <HAL_TIMEx_MasterConfigSynchronization>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8004c44:	f7ff fd3a 	bl	80046bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004c48:	bf00      	nop
 8004c4a:	3708      	adds	r7, #8
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	2000b010 	.word	0x2000b010
 8004c54:	40001400 	.word	0x40001400

08004c58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a18      	ldr	r2, [pc, #96]	; (8004cc8 <HAL_TIM_Base_MspInit+0x70>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d10e      	bne.n	8004c88 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	4b17      	ldr	r3, [pc, #92]	; (8004ccc <HAL_TIM_Base_MspInit+0x74>)
 8004c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c72:	4a16      	ldr	r2, [pc, #88]	; (8004ccc <HAL_TIM_Base_MspInit+0x74>)
 8004c74:	f043 0301 	orr.w	r3, r3, #1
 8004c78:	6453      	str	r3, [r2, #68]	; 0x44
 8004c7a:	4b14      	ldr	r3, [pc, #80]	; (8004ccc <HAL_TIM_Base_MspInit+0x74>)
 8004c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8004c86:	e01a      	b.n	8004cbe <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a10      	ldr	r2, [pc, #64]	; (8004cd0 <HAL_TIM_Base_MspInit+0x78>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d115      	bne.n	8004cbe <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004c92:	2300      	movs	r3, #0
 8004c94:	60bb      	str	r3, [r7, #8]
 8004c96:	4b0d      	ldr	r3, [pc, #52]	; (8004ccc <HAL_TIM_Base_MspInit+0x74>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	4a0c      	ldr	r2, [pc, #48]	; (8004ccc <HAL_TIM_Base_MspInit+0x74>)
 8004c9c:	f043 0320 	orr.w	r3, r3, #32
 8004ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ca2:	4b0a      	ldr	r3, [pc, #40]	; (8004ccc <HAL_TIM_Base_MspInit+0x74>)
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	f003 0320 	and.w	r3, r3, #32
 8004caa:	60bb      	str	r3, [r7, #8]
 8004cac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2105      	movs	r1, #5
 8004cb2:	2037      	movs	r0, #55	; 0x37
 8004cb4:	f001 fb14 	bl	80062e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004cb8:	2037      	movs	r0, #55	; 0x37
 8004cba:	f001 fb2d 	bl	8006318 <HAL_NVIC_EnableIRQ>
}
 8004cbe:	bf00      	nop
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40010000 	.word	0x40010000
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	40001400 	.word	0x40001400

08004cd4 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004cd8:	4b11      	ldr	r3, [pc, #68]	; (8004d20 <MX_UART5_Init+0x4c>)
 8004cda:	4a12      	ldr	r2, [pc, #72]	; (8004d24 <MX_UART5_Init+0x50>)
 8004cdc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8004cde:	4b10      	ldr	r3, [pc, #64]	; (8004d20 <MX_UART5_Init+0x4c>)
 8004ce0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004ce4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004ce6:	4b0e      	ldr	r3, [pc, #56]	; (8004d20 <MX_UART5_Init+0x4c>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004cec:	4b0c      	ldr	r3, [pc, #48]	; (8004d20 <MX_UART5_Init+0x4c>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004cf2:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <MX_UART5_Init+0x4c>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004cf8:	4b09      	ldr	r3, [pc, #36]	; (8004d20 <MX_UART5_Init+0x4c>)
 8004cfa:	220c      	movs	r2, #12
 8004cfc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004cfe:	4b08      	ldr	r3, [pc, #32]	; (8004d20 <MX_UART5_Init+0x4c>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d04:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <MX_UART5_Init+0x4c>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004d0a:	4805      	ldr	r0, [pc, #20]	; (8004d20 <MX_UART5_Init+0x4c>)
 8004d0c:	f005 fdfe 	bl	800a90c <HAL_UART_Init>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8004d16:	f7ff fcd1 	bl	80046bc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004d1a:	bf00      	nop
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	2000b09c 	.word	0x2000b09c
 8004d24:	40005000 	.word	0x40005000

08004d28 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004d2c:	4b11      	ldr	r3, [pc, #68]	; (8004d74 <MX_USART1_UART_Init+0x4c>)
 8004d2e:	4a12      	ldr	r2, [pc, #72]	; (8004d78 <MX_USART1_UART_Init+0x50>)
 8004d30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004d32:	4b10      	ldr	r3, [pc, #64]	; (8004d74 <MX_USART1_UART_Init+0x4c>)
 8004d34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004d3a:	4b0e      	ldr	r3, [pc, #56]	; (8004d74 <MX_USART1_UART_Init+0x4c>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004d40:	4b0c      	ldr	r3, [pc, #48]	; (8004d74 <MX_USART1_UART_Init+0x4c>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004d46:	4b0b      	ldr	r3, [pc, #44]	; (8004d74 <MX_USART1_UART_Init+0x4c>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004d4c:	4b09      	ldr	r3, [pc, #36]	; (8004d74 <MX_USART1_UART_Init+0x4c>)
 8004d4e:	220c      	movs	r2, #12
 8004d50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d52:	4b08      	ldr	r3, [pc, #32]	; (8004d74 <MX_USART1_UART_Init+0x4c>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d58:	4b06      	ldr	r3, [pc, #24]	; (8004d74 <MX_USART1_UART_Init+0x4c>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004d5e:	4805      	ldr	r0, [pc, #20]	; (8004d74 <MX_USART1_UART_Init+0x4c>)
 8004d60:	f005 fdd4 	bl	800a90c <HAL_UART_Init>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004d6a:	f7ff fca7 	bl	80046bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004d6e:	bf00      	nop
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	2000b058 	.word	0x2000b058
 8004d78:	40011000 	.word	0x40011000

08004d7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08c      	sub	sp, #48	; 0x30
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d84:	f107 031c 	add.w	r3, r7, #28
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	605a      	str	r2, [r3, #4]
 8004d8e:	609a      	str	r2, [r3, #8]
 8004d90:	60da      	str	r2, [r3, #12]
 8004d92:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a46      	ldr	r2, [pc, #280]	; (8004eb4 <HAL_UART_MspInit+0x138>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d153      	bne.n	8004e46 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8004d9e:	2300      	movs	r3, #0
 8004da0:	61bb      	str	r3, [r7, #24]
 8004da2:	4b45      	ldr	r3, [pc, #276]	; (8004eb8 <HAL_UART_MspInit+0x13c>)
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	4a44      	ldr	r2, [pc, #272]	; (8004eb8 <HAL_UART_MspInit+0x13c>)
 8004da8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dac:	6413      	str	r3, [r2, #64]	; 0x40
 8004dae:	4b42      	ldr	r3, [pc, #264]	; (8004eb8 <HAL_UART_MspInit+0x13c>)
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004db6:	61bb      	str	r3, [r7, #24]
 8004db8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dba:	2300      	movs	r3, #0
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	4b3e      	ldr	r3, [pc, #248]	; (8004eb8 <HAL_UART_MspInit+0x13c>)
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	4a3d      	ldr	r2, [pc, #244]	; (8004eb8 <HAL_UART_MspInit+0x13c>)
 8004dc4:	f043 0304 	orr.w	r3, r3, #4
 8004dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8004dca:	4b3b      	ldr	r3, [pc, #236]	; (8004eb8 <HAL_UART_MspInit+0x13c>)
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	f003 0304 	and.w	r3, r3, #4
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	613b      	str	r3, [r7, #16]
 8004dda:	4b37      	ldr	r3, [pc, #220]	; (8004eb8 <HAL_UART_MspInit+0x13c>)
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dde:	4a36      	ldr	r2, [pc, #216]	; (8004eb8 <HAL_UART_MspInit+0x13c>)
 8004de0:	f043 0308 	orr.w	r3, r3, #8
 8004de4:	6313      	str	r3, [r2, #48]	; 0x30
 8004de6:	4b34      	ldr	r3, [pc, #208]	; (8004eb8 <HAL_UART_MspInit+0x13c>)
 8004de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004df2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004df8:	2302      	movs	r3, #2
 8004dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e00:	2303      	movs	r3, #3
 8004e02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004e04:	2308      	movs	r3, #8
 8004e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e08:	f107 031c 	add.w	r3, r7, #28
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	482b      	ldr	r0, [pc, #172]	; (8004ebc <HAL_UART_MspInit+0x140>)
 8004e10:	f001 fd2a 	bl	8006868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004e14:	2304      	movs	r3, #4
 8004e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e18:	2302      	movs	r3, #2
 8004e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e20:	2303      	movs	r3, #3
 8004e22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004e24:	2308      	movs	r3, #8
 8004e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e28:	f107 031c 	add.w	r3, r7, #28
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4824      	ldr	r0, [pc, #144]	; (8004ec0 <HAL_UART_MspInit+0x144>)
 8004e30:	f001 fd1a 	bl	8006868 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8004e34:	2200      	movs	r2, #0
 8004e36:	2105      	movs	r1, #5
 8004e38:	2035      	movs	r0, #53	; 0x35
 8004e3a:	f001 fa51 	bl	80062e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004e3e:	2035      	movs	r0, #53	; 0x35
 8004e40:	f001 fa6a 	bl	8006318 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004e44:	e031      	b.n	8004eaa <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART1)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a1e      	ldr	r2, [pc, #120]	; (8004ec4 <HAL_UART_MspInit+0x148>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d12c      	bne.n	8004eaa <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004e50:	2300      	movs	r3, #0
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	4b18      	ldr	r3, [pc, #96]	; (8004eb8 <HAL_UART_MspInit+0x13c>)
 8004e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e58:	4a17      	ldr	r2, [pc, #92]	; (8004eb8 <HAL_UART_MspInit+0x13c>)
 8004e5a:	f043 0310 	orr.w	r3, r3, #16
 8004e5e:	6453      	str	r3, [r2, #68]	; 0x44
 8004e60:	4b15      	ldr	r3, [pc, #84]	; (8004eb8 <HAL_UART_MspInit+0x13c>)
 8004e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e64:	f003 0310 	and.w	r3, r3, #16
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60bb      	str	r3, [r7, #8]
 8004e70:	4b11      	ldr	r3, [pc, #68]	; (8004eb8 <HAL_UART_MspInit+0x13c>)
 8004e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e74:	4a10      	ldr	r2, [pc, #64]	; (8004eb8 <HAL_UART_MspInit+0x13c>)
 8004e76:	f043 0301 	orr.w	r3, r3, #1
 8004e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8004e7c:	4b0e      	ldr	r3, [pc, #56]	; (8004eb8 <HAL_UART_MspInit+0x13c>)
 8004e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	60bb      	str	r3, [r7, #8]
 8004e86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8004e88:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e8e:	2302      	movs	r3, #2
 8004e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e96:	2303      	movs	r3, #3
 8004e98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004e9a:	2307      	movs	r3, #7
 8004e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e9e:	f107 031c 	add.w	r3, r7, #28
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	4808      	ldr	r0, [pc, #32]	; (8004ec8 <HAL_UART_MspInit+0x14c>)
 8004ea6:	f001 fcdf 	bl	8006868 <HAL_GPIO_Init>
}
 8004eaa:	bf00      	nop
 8004eac:	3730      	adds	r7, #48	; 0x30
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40005000 	.word	0x40005000
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	40020800 	.word	0x40020800
 8004ec0:	40020c00 	.word	0x40020c00
 8004ec4:	40011000 	.word	0x40011000
 8004ec8:	40020000 	.word	0x40020000

08004ecc <_debugPrint>:
#include "util.h"

char debugBuff[MAX_DEBUG_BUFF] = {0,};

void _debugPrint(char *debugMsg, char *file, const char *func, int line)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08a      	sub	sp, #40	; 0x28
 8004ed0:	af04      	add	r7, sp, #16
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	603b      	str	r3, [r7, #0]
	int n;

	n = snprintf(debugBuff, MAX_DEBUG_BUFF,
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	9302      	str	r3, [sp, #8]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	9301      	str	r3, [sp, #4]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	4a12      	ldr	r2, [pc, #72]	; (8004f34 <_debugPrint+0x68>)
 8004eea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004eee:	4812      	ldr	r0, [pc, #72]	; (8004f38 <_debugPrint+0x6c>)
 8004ef0:	f022 fb3e 	bl	8027570 <sniprintf>
 8004ef4:	6178      	str	r0, [r7, #20]
				"File : %s \r\nFunction : %s \r\nLine : %d \r\nDebug : %s\r\n\r\n", file, func, line, debugMsg);
	if ( n < 0 || n >= MAX_DEBUG_BUFF )
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	db03      	blt.n	8004f04 <_debugPrint+0x38>
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f02:	db06      	blt.n	8004f12 <_debugPrint+0x46>

	{
		HAL_UART_Transmit(&DEBUG_UART, (uint8_t *)"debugPrint Error!!!\r\n", strlen("debugPrint Error!!!r\n"), 100);
 8004f04:	2364      	movs	r3, #100	; 0x64
 8004f06:	2215      	movs	r2, #21
 8004f08:	490c      	ldr	r1, [pc, #48]	; (8004f3c <_debugPrint+0x70>)
 8004f0a:	480d      	ldr	r0, [pc, #52]	; (8004f40 <_debugPrint+0x74>)
 8004f0c:	f005 fd4b 	bl	800a9a6 <HAL_UART_Transmit>
 8004f10:	e006      	b.n	8004f20 <_debugPrint+0x54>
	}
	else
	{
		HAL_UART_Transmit(&DEBUG_UART, (uint8_t *)debugBuff, n, 100);
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	2364      	movs	r3, #100	; 0x64
 8004f18:	4907      	ldr	r1, [pc, #28]	; (8004f38 <_debugPrint+0x6c>)
 8004f1a:	4809      	ldr	r0, [pc, #36]	; (8004f40 <_debugPrint+0x74>)
 8004f1c:	f005 fd43 	bl	800a9a6 <HAL_UART_Transmit>
	}
	memset(debugBuff, 0x0, MAX_DEBUG_BUFF);
 8004f20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f24:	2100      	movs	r1, #0
 8004f26:	4804      	ldr	r0, [pc, #16]	; (8004f38 <_debugPrint+0x6c>)
 8004f28:	f021 ff26 	bl	8026d78 <memset>
}
 8004f2c:	bf00      	nop
 8004f2e:	3718      	adds	r7, #24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	080294b4 	.word	0x080294b4
 8004f38:	20000490 	.word	0x20000490
 8004f3c:	080294ec 	.word	0x080294ec
 8004f40:	2000b058 	.word	0x2000b058

08004f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f7c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004f48:	480d      	ldr	r0, [pc, #52]	; (8004f80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004f4a:	490e      	ldr	r1, [pc, #56]	; (8004f84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004f4c:	4a0e      	ldr	r2, [pc, #56]	; (8004f88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f50:	e002      	b.n	8004f58 <LoopCopyDataInit>

08004f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f56:	3304      	adds	r3, #4

08004f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f5c:	d3f9      	bcc.n	8004f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f5e:	4a0b      	ldr	r2, [pc, #44]	; (8004f8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004f60:	4c0b      	ldr	r4, [pc, #44]	; (8004f90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f64:	e001      	b.n	8004f6a <LoopFillZerobss>

08004f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f68:	3204      	adds	r2, #4

08004f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f6c:	d3fb      	bcc.n	8004f66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004f6e:	f7ff fddb 	bl	8004b28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f72:	f021 fea5 	bl	8026cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f76:	f7ff fa37 	bl	80043e8 <main>
  bx  lr    
 8004f7a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004f7c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f84:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8004f88:	08066248 	.word	0x08066248
  ldr r2, =_sbss
 8004f8c:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8004f90:	2000b148 	.word	0x2000b148

08004f94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f94:	e7fe      	b.n	8004f94 <ADC_IRQHandler>

08004f96 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8004f9a:	f000 fe49 	bl	8005c30 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8004f9e:	20ca      	movs	r0, #202	; 0xca
 8004fa0:	f000 f95d 	bl	800525e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8004fa4:	20c3      	movs	r0, #195	; 0xc3
 8004fa6:	f000 f967 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8004faa:	2008      	movs	r0, #8
 8004fac:	f000 f964 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8004fb0:	2050      	movs	r0, #80	; 0x50
 8004fb2:	f000 f961 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8004fb6:	20cf      	movs	r0, #207	; 0xcf
 8004fb8:	f000 f951 	bl	800525e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	f000 f95b 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8004fc2:	20c1      	movs	r0, #193	; 0xc1
 8004fc4:	f000 f958 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8004fc8:	2030      	movs	r0, #48	; 0x30
 8004fca:	f000 f955 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8004fce:	20ed      	movs	r0, #237	; 0xed
 8004fd0:	f000 f945 	bl	800525e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8004fd4:	2064      	movs	r0, #100	; 0x64
 8004fd6:	f000 f94f 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8004fda:	2003      	movs	r0, #3
 8004fdc:	f000 f94c 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8004fe0:	2012      	movs	r0, #18
 8004fe2:	f000 f949 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8004fe6:	2081      	movs	r0, #129	; 0x81
 8004fe8:	f000 f946 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8004fec:	20e8      	movs	r0, #232	; 0xe8
 8004fee:	f000 f936 	bl	800525e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8004ff2:	2085      	movs	r0, #133	; 0x85
 8004ff4:	f000 f940 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8004ff8:	2000      	movs	r0, #0
 8004ffa:	f000 f93d 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8004ffe:	2078      	movs	r0, #120	; 0x78
 8005000:	f000 f93a 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8005004:	20cb      	movs	r0, #203	; 0xcb
 8005006:	f000 f92a 	bl	800525e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800500a:	2039      	movs	r0, #57	; 0x39
 800500c:	f000 f934 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8005010:	202c      	movs	r0, #44	; 0x2c
 8005012:	f000 f931 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8005016:	2000      	movs	r0, #0
 8005018:	f000 f92e 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800501c:	2034      	movs	r0, #52	; 0x34
 800501e:	f000 f92b 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8005022:	2002      	movs	r0, #2
 8005024:	f000 f928 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8005028:	20f7      	movs	r0, #247	; 0xf7
 800502a:	f000 f918 	bl	800525e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800502e:	2020      	movs	r0, #32
 8005030:	f000 f922 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8005034:	20ea      	movs	r0, #234	; 0xea
 8005036:	f000 f912 	bl	800525e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800503a:	2000      	movs	r0, #0
 800503c:	f000 f91c 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8005040:	2000      	movs	r0, #0
 8005042:	f000 f919 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8005046:	20b1      	movs	r0, #177	; 0xb1
 8005048:	f000 f909 	bl	800525e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800504c:	2000      	movs	r0, #0
 800504e:	f000 f913 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8005052:	201b      	movs	r0, #27
 8005054:	f000 f910 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8005058:	20b6      	movs	r0, #182	; 0xb6
 800505a:	f000 f900 	bl	800525e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800505e:	200a      	movs	r0, #10
 8005060:	f000 f90a 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8005064:	20a2      	movs	r0, #162	; 0xa2
 8005066:	f000 f907 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800506a:	20c0      	movs	r0, #192	; 0xc0
 800506c:	f000 f8f7 	bl	800525e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8005070:	2010      	movs	r0, #16
 8005072:	f000 f901 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8005076:	20c1      	movs	r0, #193	; 0xc1
 8005078:	f000 f8f1 	bl	800525e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800507c:	2010      	movs	r0, #16
 800507e:	f000 f8fb 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8005082:	20c5      	movs	r0, #197	; 0xc5
 8005084:	f000 f8eb 	bl	800525e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8005088:	2045      	movs	r0, #69	; 0x45
 800508a:	f000 f8f5 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800508e:	2015      	movs	r0, #21
 8005090:	f000 f8f2 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8005094:	20c7      	movs	r0, #199	; 0xc7
 8005096:	f000 f8e2 	bl	800525e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800509a:	2090      	movs	r0, #144	; 0x90
 800509c:	f000 f8ec 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80050a0:	2036      	movs	r0, #54	; 0x36
 80050a2:	f000 f8dc 	bl	800525e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80050a6:	20c8      	movs	r0, #200	; 0xc8
 80050a8:	f000 f8e6 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80050ac:	20f2      	movs	r0, #242	; 0xf2
 80050ae:	f000 f8d6 	bl	800525e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80050b2:	2000      	movs	r0, #0
 80050b4:	f000 f8e0 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80050b8:	20b0      	movs	r0, #176	; 0xb0
 80050ba:	f000 f8d0 	bl	800525e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80050be:	20c2      	movs	r0, #194	; 0xc2
 80050c0:	f000 f8da 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80050c4:	20b6      	movs	r0, #182	; 0xb6
 80050c6:	f000 f8ca 	bl	800525e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80050ca:	200a      	movs	r0, #10
 80050cc:	f000 f8d4 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80050d0:	20a7      	movs	r0, #167	; 0xa7
 80050d2:	f000 f8d1 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80050d6:	2027      	movs	r0, #39	; 0x27
 80050d8:	f000 f8ce 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80050dc:	2004      	movs	r0, #4
 80050de:	f000 f8cb 	bl	8005278 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80050e2:	202a      	movs	r0, #42	; 0x2a
 80050e4:	f000 f8bb 	bl	800525e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80050e8:	2000      	movs	r0, #0
 80050ea:	f000 f8c5 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80050ee:	2000      	movs	r0, #0
 80050f0:	f000 f8c2 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80050f4:	2000      	movs	r0, #0
 80050f6:	f000 f8bf 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80050fa:	20ef      	movs	r0, #239	; 0xef
 80050fc:	f000 f8bc 	bl	8005278 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8005100:	202b      	movs	r0, #43	; 0x2b
 8005102:	f000 f8ac 	bl	800525e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8005106:	2000      	movs	r0, #0
 8005108:	f000 f8b6 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800510c:	2000      	movs	r0, #0
 800510e:	f000 f8b3 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8005112:	2001      	movs	r0, #1
 8005114:	f000 f8b0 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8005118:	203f      	movs	r0, #63	; 0x3f
 800511a:	f000 f8ad 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800511e:	20f6      	movs	r0, #246	; 0xf6
 8005120:	f000 f89d 	bl	800525e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8005124:	2001      	movs	r0, #1
 8005126:	f000 f8a7 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800512a:	2000      	movs	r0, #0
 800512c:	f000 f8a4 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8005130:	2006      	movs	r0, #6
 8005132:	f000 f8a1 	bl	8005278 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8005136:	202c      	movs	r0, #44	; 0x2c
 8005138:	f000 f891 	bl	800525e <ili9341_WriteReg>
  LCD_Delay(200);
 800513c:	20c8      	movs	r0, #200	; 0xc8
 800513e:	f000 fe65 	bl	8005e0c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8005142:	2026      	movs	r0, #38	; 0x26
 8005144:	f000 f88b 	bl	800525e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8005148:	2001      	movs	r0, #1
 800514a:	f000 f895 	bl	8005278 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800514e:	20e0      	movs	r0, #224	; 0xe0
 8005150:	f000 f885 	bl	800525e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8005154:	200f      	movs	r0, #15
 8005156:	f000 f88f 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800515a:	2029      	movs	r0, #41	; 0x29
 800515c:	f000 f88c 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8005160:	2024      	movs	r0, #36	; 0x24
 8005162:	f000 f889 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8005166:	200c      	movs	r0, #12
 8005168:	f000 f886 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800516c:	200e      	movs	r0, #14
 800516e:	f000 f883 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8005172:	2009      	movs	r0, #9
 8005174:	f000 f880 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8005178:	204e      	movs	r0, #78	; 0x4e
 800517a:	f000 f87d 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800517e:	2078      	movs	r0, #120	; 0x78
 8005180:	f000 f87a 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8005184:	203c      	movs	r0, #60	; 0x3c
 8005186:	f000 f877 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800518a:	2009      	movs	r0, #9
 800518c:	f000 f874 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8005190:	2013      	movs	r0, #19
 8005192:	f000 f871 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8005196:	2005      	movs	r0, #5
 8005198:	f000 f86e 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800519c:	2017      	movs	r0, #23
 800519e:	f000 f86b 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80051a2:	2011      	movs	r0, #17
 80051a4:	f000 f868 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80051a8:	2000      	movs	r0, #0
 80051aa:	f000 f865 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80051ae:	20e1      	movs	r0, #225	; 0xe1
 80051b0:	f000 f855 	bl	800525e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80051b4:	2000      	movs	r0, #0
 80051b6:	f000 f85f 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80051ba:	2016      	movs	r0, #22
 80051bc:	f000 f85c 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80051c0:	201b      	movs	r0, #27
 80051c2:	f000 f859 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80051c6:	2004      	movs	r0, #4
 80051c8:	f000 f856 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80051cc:	2011      	movs	r0, #17
 80051ce:	f000 f853 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80051d2:	2007      	movs	r0, #7
 80051d4:	f000 f850 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80051d8:	2031      	movs	r0, #49	; 0x31
 80051da:	f000 f84d 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80051de:	2033      	movs	r0, #51	; 0x33
 80051e0:	f000 f84a 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80051e4:	2042      	movs	r0, #66	; 0x42
 80051e6:	f000 f847 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80051ea:	2005      	movs	r0, #5
 80051ec:	f000 f844 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80051f0:	200c      	movs	r0, #12
 80051f2:	f000 f841 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80051f6:	200a      	movs	r0, #10
 80051f8:	f000 f83e 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80051fc:	2028      	movs	r0, #40	; 0x28
 80051fe:	f000 f83b 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8005202:	202f      	movs	r0, #47	; 0x2f
 8005204:	f000 f838 	bl	8005278 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8005208:	200f      	movs	r0, #15
 800520a:	f000 f835 	bl	8005278 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800520e:	2011      	movs	r0, #17
 8005210:	f000 f825 	bl	800525e <ili9341_WriteReg>
  LCD_Delay(200);
 8005214:	20c8      	movs	r0, #200	; 0xc8
 8005216:	f000 fdf9 	bl	8005e0c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800521a:	2029      	movs	r0, #41	; 0x29
 800521c:	f000 f81f 	bl	800525e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8005220:	202c      	movs	r0, #44	; 0x2c
 8005222:	f000 f81c 	bl	800525e <ili9341_WriteReg>
}
 8005226:	bf00      	nop
 8005228:	bd80      	pop	{r7, pc}

0800522a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800522e:	f000 fcff 	bl	8005c30 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8005232:	2103      	movs	r1, #3
 8005234:	20d3      	movs	r0, #211	; 0xd3
 8005236:	f000 f82c 	bl	8005292 <ili9341_ReadData>
 800523a:	4603      	mov	r3, r0
 800523c:	b29b      	uxth	r3, r3
}
 800523e:	4618      	mov	r0, r3
 8005240:	bd80      	pop	{r7, pc}

08005242 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8005246:	2029      	movs	r0, #41	; 0x29
 8005248:	f000 f809 	bl	800525e <ili9341_WriteReg>
}
 800524c:	bf00      	nop
 800524e:	bd80      	pop	{r7, pc}

08005250 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8005254:	2028      	movs	r0, #40	; 0x28
 8005256:	f000 f802 	bl	800525e <ili9341_WriteReg>
}
 800525a:	bf00      	nop
 800525c:	bd80      	pop	{r7, pc}

0800525e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b082      	sub	sp, #8
 8005262:	af00      	add	r7, sp, #0
 8005264:	4603      	mov	r3, r0
 8005266:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8005268:	79fb      	ldrb	r3, [r7, #7]
 800526a:	4618      	mov	r0, r3
 800526c:	f000 fd7a 	bl	8005d64 <LCD_IO_WriteReg>
}
 8005270:	bf00      	nop
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	4603      	mov	r3, r0
 8005280:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8005282:	88fb      	ldrh	r3, [r7, #6]
 8005284:	4618      	mov	r0, r3
 8005286:	f000 fd4b 	bl	8005d20 <LCD_IO_WriteData>
}
 800528a:	bf00      	nop
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b082      	sub	sp, #8
 8005296:	af00      	add	r7, sp, #0
 8005298:	4603      	mov	r3, r0
 800529a:	460a      	mov	r2, r1
 800529c:	80fb      	strh	r3, [r7, #6]
 800529e:	4613      	mov	r3, r2
 80052a0:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80052a2:	797a      	ldrb	r2, [r7, #5]
 80052a4:	88fb      	ldrh	r3, [r7, #6]
 80052a6:	4611      	mov	r1, r2
 80052a8:	4618      	mov	r0, r3
 80052aa:	f000 fd7d 	bl	8005da8 <LCD_IO_ReadData>
 80052ae:	4603      	mov	r3, r0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80052bc:	23f0      	movs	r3, #240	; 0xf0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80052cc:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
	...

080052dc <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	4603      	mov	r3, r0
 80052e4:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 fa59 	bl	80057a0 <stmpe811_GetInstance>
 80052ee:	4603      	mov	r3, r0
 80052f0:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
 80052f4:	2bff      	cmp	r3, #255	; 0xff
 80052f6:	d112      	bne.n	800531e <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 80052f8:	2000      	movs	r0, #0
 80052fa:	f000 fa51 	bl	80057a0 <stmpe811_GetInstance>
 80052fe:	4603      	mov	r3, r0
 8005300:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8005302:	7bbb      	ldrb	r3, [r7, #14]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d80a      	bhi.n	800531e <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8005308:	7bbb      	ldrb	r3, [r7, #14]
 800530a:	88fa      	ldrh	r2, [r7, #6]
 800530c:	b2d1      	uxtb	r1, r2
 800530e:	4a06      	ldr	r2, [pc, #24]	; (8005328 <stmpe811_Init+0x4c>)
 8005310:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8005312:	f000 fd86 	bl	8005e22 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8005316:	88fb      	ldrh	r3, [r7, #6]
 8005318:	4618      	mov	r0, r3
 800531a:	f000 f807 	bl	800532c <stmpe811_Reset>
    }
  }
}
 800531e:	bf00      	nop
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	20000c90 	.word	0x20000c90

0800532c <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	4603      	mov	r3, r0
 8005334:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8005336:	88fb      	ldrh	r3, [r7, #6]
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2202      	movs	r2, #2
 800533c:	2103      	movs	r1, #3
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fd7b 	bl	8005e3a <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8005344:	200a      	movs	r0, #10
 8005346:	f000 fdb5 	bl	8005eb4 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 800534a:	88fb      	ldrh	r3, [r7, #6]
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2200      	movs	r2, #0
 8005350:	2103      	movs	r1, #3
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fd71 	bl	8005e3a <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8005358:	2002      	movs	r0, #2
 800535a:	f000 fdab 	bl	8005eb4 <IOE_Delay>
}
 800535e:	bf00      	nop
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8005366:	b590      	push	{r4, r7, lr}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	4603      	mov	r3, r0
 800536e:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8005370:	f000 fd57 	bl	8005e22 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8005374:	88fb      	ldrh	r3, [r7, #6]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2100      	movs	r1, #0
 800537a:	4618      	mov	r0, r3
 800537c:	f000 fd70 	bl	8005e60 <IOE_Read>
 8005380:	4603      	mov	r3, r0
 8005382:	021b      	lsls	r3, r3, #8
 8005384:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8005386:	88fb      	ldrh	r3, [r7, #6]
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2101      	movs	r1, #1
 800538c:	4618      	mov	r0, r3
 800538e:	f000 fd67 	bl	8005e60 <IOE_Read>
 8005392:	4603      	mov	r3, r0
 8005394:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8005396:	4323      	orrs	r3, r4
 8005398:	b21b      	sxth	r3, r3
 800539a:	b29b      	uxth	r3, r3
}
 800539c:	4618      	mov	r0, r3
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd90      	pop	{r4, r7, pc}

080053a4 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	4603      	mov	r3, r0
 80053ac:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80053ae:	2300      	movs	r3, #0
 80053b0:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2109      	movs	r1, #9
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fd51 	bl	8005e60 <IOE_Read>
 80053be:	4603      	mov	r3, r0
 80053c0:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
 80053c4:	f043 0301 	orr.w	r3, r3, #1
 80053c8:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80053ca:	88fb      	ldrh	r3, [r7, #6]
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	7bfa      	ldrb	r2, [r7, #15]
 80053d0:	2109      	movs	r1, #9
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 fd31 	bl	8005e3a <IOE_Write>
}
 80053d8:	bf00      	nop
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	4603      	mov	r3, r0
 80053e8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80053ea:	2300      	movs	r3, #0
 80053ec:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80053ee:	88fb      	ldrh	r3, [r7, #6]
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2109      	movs	r1, #9
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 fd33 	bl	8005e60 <IOE_Read>
 80053fa:	4603      	mov	r3, r0
 80053fc:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 80053fe:	7bfb      	ldrb	r3, [r7, #15]
 8005400:	f023 0301 	bic.w	r3, r3, #1
 8005404:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8005406:	88fb      	ldrh	r3, [r7, #6]
 8005408:	b2db      	uxtb	r3, r3
 800540a:	7bfa      	ldrb	r2, [r7, #15]
 800540c:	2109      	movs	r1, #9
 800540e:	4618      	mov	r0, r3
 8005410:	f000 fd13 	bl	8005e3a <IOE_Write>
    
}
 8005414:	bf00      	nop
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	4603      	mov	r3, r0
 8005424:	460a      	mov	r2, r1
 8005426:	80fb      	strh	r3, [r7, #6]
 8005428:	4613      	mov	r3, r2
 800542a:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800542c:	2300      	movs	r3, #0
 800542e:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8005430:	88fb      	ldrh	r3, [r7, #6]
 8005432:	b2db      	uxtb	r3, r3
 8005434:	210a      	movs	r1, #10
 8005436:	4618      	mov	r0, r3
 8005438:	f000 fd12 	bl	8005e60 <IOE_Read>
 800543c:	4603      	mov	r3, r0
 800543e:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8005440:	7bfa      	ldrb	r2, [r7, #15]
 8005442:	797b      	ldrb	r3, [r7, #5]
 8005444:	4313      	orrs	r3, r2
 8005446:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8005448:	88fb      	ldrh	r3, [r7, #6]
 800544a:	b2db      	uxtb	r3, r3
 800544c:	7bfa      	ldrb	r2, [r7, #15]
 800544e:	210a      	movs	r1, #10
 8005450:	4618      	mov	r0, r3
 8005452:	f000 fcf2 	bl	8005e3a <IOE_Write>
}
 8005456:	bf00      	nop
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b084      	sub	sp, #16
 8005462:	af00      	add	r7, sp, #0
 8005464:	4603      	mov	r3, r0
 8005466:	460a      	mov	r2, r1
 8005468:	80fb      	strh	r3, [r7, #6]
 800546a:	4613      	mov	r3, r2
 800546c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800546e:	2300      	movs	r3, #0
 8005470:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8005472:	88fb      	ldrh	r3, [r7, #6]
 8005474:	b2db      	uxtb	r3, r3
 8005476:	210a      	movs	r1, #10
 8005478:	4618      	mov	r0, r3
 800547a:	f000 fcf1 	bl	8005e60 <IOE_Read>
 800547e:	4603      	mov	r3, r0
 8005480:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8005482:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005486:	43db      	mvns	r3, r3
 8005488:	b25a      	sxtb	r2, r3
 800548a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800548e:	4013      	ands	r3, r2
 8005490:	b25b      	sxtb	r3, r3
 8005492:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8005494:	88fb      	ldrh	r3, [r7, #6]
 8005496:	b2db      	uxtb	r3, r3
 8005498:	7bfa      	ldrb	r2, [r7, #15]
 800549a:	210a      	movs	r1, #10
 800549c:	4618      	mov	r0, r3
 800549e:	f000 fccc 	bl	8005e3a <IOE_Write>
}
 80054a2:	bf00      	nop
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b082      	sub	sp, #8
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	4603      	mov	r3, r0
 80054b2:	460a      	mov	r2, r1
 80054b4:	80fb      	strh	r3, [r7, #6]
 80054b6:	4613      	mov	r3, r2
 80054b8:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80054ba:	88fb      	ldrh	r3, [r7, #6]
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	210b      	movs	r1, #11
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 fccd 	bl	8005e60 <IOE_Read>
 80054c6:	4603      	mov	r3, r0
 80054c8:	461a      	mov	r2, r3
 80054ca:	797b      	ldrb	r3, [r7, #5]
 80054cc:	4013      	ands	r3, r2
 80054ce:	b2db      	uxtb	r3, r3
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	4603      	mov	r3, r0
 80054e0:	460a      	mov	r2, r1
 80054e2:	80fb      	strh	r3, [r7, #6]
 80054e4:	4613      	mov	r3, r2
 80054e6:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 80054e8:	88fb      	ldrh	r3, [r7, #6]
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	797a      	ldrb	r2, [r7, #5]
 80054ee:	210b      	movs	r1, #11
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 fca2 	bl	8005e3a <IOE_Write>
}
 80054f6:	bf00      	nop
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	4603      	mov	r3, r0
 8005506:	6039      	str	r1, [r7, #0]
 8005508:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800550a:	2300      	movs	r3, #0
 800550c:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 800550e:	88fb      	ldrh	r3, [r7, #6]
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2117      	movs	r1, #23
 8005514:	4618      	mov	r0, r3
 8005516:	f000 fca3 	bl	8005e60 <IOE_Read>
 800551a:	4603      	mov	r3, r0
 800551c:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	b25b      	sxtb	r3, r3
 8005522:	43db      	mvns	r3, r3
 8005524:	b25a      	sxtb	r2, r3
 8005526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800552a:	4013      	ands	r3, r2
 800552c:	b25b      	sxtb	r3, r3
 800552e:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8005530:	88fb      	ldrh	r3, [r7, #6]
 8005532:	b2db      	uxtb	r3, r3
 8005534:	7bfa      	ldrb	r2, [r7, #15]
 8005536:	2117      	movs	r1, #23
 8005538:	4618      	mov	r0, r3
 800553a:	f000 fc7e 	bl	8005e3a <IOE_Write>
}
 800553e:	bf00      	nop
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b084      	sub	sp, #16
 800554a:	af00      	add	r7, sp, #0
 800554c:	4603      	mov	r3, r0
 800554e:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8005550:	88fb      	ldrh	r3, [r7, #6]
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2104      	movs	r1, #4
 8005556:	4618      	mov	r0, r3
 8005558:	f000 fc82 	bl	8005e60 <IOE_Read>
 800555c:	4603      	mov	r3, r0
 800555e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	f023 0304 	bic.w	r3, r3, #4
 8005566:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8005568:	88fb      	ldrh	r3, [r7, #6]
 800556a:	b2db      	uxtb	r3, r3
 800556c:	7bfa      	ldrb	r2, [r7, #15]
 800556e:	2104      	movs	r1, #4
 8005570:	4618      	mov	r0, r3
 8005572:	f000 fc62 	bl	8005e3a <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8005576:	88fb      	ldrh	r3, [r7, #6]
 8005578:	21f0      	movs	r1, #240	; 0xf0
 800557a:	4618      	mov	r0, r3
 800557c:	f7ff ffbf 	bl	80054fe <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8005580:	7bfb      	ldrb	r3, [r7, #15]
 8005582:	f023 0303 	bic.w	r3, r3, #3
 8005586:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8005588:	88fb      	ldrh	r3, [r7, #6]
 800558a:	b2db      	uxtb	r3, r3
 800558c:	7bfa      	ldrb	r2, [r7, #15]
 800558e:	2104      	movs	r1, #4
 8005590:	4618      	mov	r0, r3
 8005592:	f000 fc52 	bl	8005e3a <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8005596:	88fb      	ldrh	r3, [r7, #6]
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2249      	movs	r2, #73	; 0x49
 800559c:	2120      	movs	r1, #32
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 fc4b 	bl	8005e3a <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 80055a4:	2002      	movs	r0, #2
 80055a6:	f000 fc85 	bl	8005eb4 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 80055aa:	88fb      	ldrh	r3, [r7, #6]
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2201      	movs	r2, #1
 80055b0:	2121      	movs	r1, #33	; 0x21
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fc41 	bl	8005e3a <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 80055b8:	88fb      	ldrh	r3, [r7, #6]
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	229a      	movs	r2, #154	; 0x9a
 80055be:	2141      	movs	r1, #65	; 0x41
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 fc3a 	bl	8005e3a <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 80055c6:	88fb      	ldrh	r3, [r7, #6]
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2201      	movs	r2, #1
 80055cc:	214a      	movs	r1, #74	; 0x4a
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 fc33 	bl	8005e3a <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80055d4:	88fb      	ldrh	r3, [r7, #6]
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2201      	movs	r2, #1
 80055da:	214b      	movs	r1, #75	; 0x4b
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fc2c 	bl	8005e3a <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80055e2:	88fb      	ldrh	r3, [r7, #6]
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2200      	movs	r2, #0
 80055e8:	214b      	movs	r1, #75	; 0x4b
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 fc25 	bl	8005e3a <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 80055f0:	88fb      	ldrh	r3, [r7, #6]
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2201      	movs	r2, #1
 80055f6:	2156      	movs	r1, #86	; 0x56
 80055f8:	4618      	mov	r0, r3
 80055fa:	f000 fc1e 	bl	8005e3a <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 80055fe:	88fb      	ldrh	r3, [r7, #6]
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2201      	movs	r2, #1
 8005604:	2158      	movs	r1, #88	; 0x58
 8005606:	4618      	mov	r0, r3
 8005608:	f000 fc17 	bl	8005e3a <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 800560c:	88fb      	ldrh	r3, [r7, #6]
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2201      	movs	r2, #1
 8005612:	2140      	movs	r1, #64	; 0x40
 8005614:	4618      	mov	r0, r3
 8005616:	f000 fc10 	bl	8005e3a <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 800561a:	88fb      	ldrh	r3, [r7, #6]
 800561c:	b2db      	uxtb	r3, r3
 800561e:	22ff      	movs	r2, #255	; 0xff
 8005620:	210b      	movs	r1, #11
 8005622:	4618      	mov	r0, r3
 8005624:	f000 fc09 	bl	8005e3a <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8005628:	2002      	movs	r0, #2
 800562a:	f000 fc43 	bl	8005eb4 <IOE_Delay>
}
 800562e:	bf00      	nop
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b084      	sub	sp, #16
 800563a:	af00      	add	r7, sp, #0
 800563c:	4603      	mov	r3, r0
 800563e:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8005640:	2300      	movs	r3, #0
 8005642:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8005644:	88fb      	ldrh	r3, [r7, #6]
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2140      	movs	r1, #64	; 0x40
 800564a:	4618      	mov	r0, r3
 800564c:	f000 fc08 	bl	8005e60 <IOE_Read>
 8005650:	4603      	mov	r3, r0
 8005652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005656:	2b80      	cmp	r3, #128	; 0x80
 8005658:	bf0c      	ite	eq
 800565a:	2301      	moveq	r3, #1
 800565c:	2300      	movne	r3, #0
 800565e:	b2db      	uxtb	r3, r3
 8005660:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8005662:	7bbb      	ldrb	r3, [r7, #14]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00b      	beq.n	8005680 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8005668:	88fb      	ldrh	r3, [r7, #6]
 800566a:	b2db      	uxtb	r3, r3
 800566c:	214c      	movs	r1, #76	; 0x4c
 800566e:	4618      	mov	r0, r3
 8005670:	f000 fbf6 	bl	8005e60 <IOE_Read>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d010      	beq.n	800569c <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 800567a:	2301      	movs	r3, #1
 800567c:	73fb      	strb	r3, [r7, #15]
 800567e:	e00d      	b.n	800569c <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8005680:	88fb      	ldrh	r3, [r7, #6]
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2201      	movs	r2, #1
 8005686:	214b      	movs	r1, #75	; 0x4b
 8005688:	4618      	mov	r0, r3
 800568a:	f000 fbd6 	bl	8005e3a <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800568e:	88fb      	ldrh	r3, [r7, #6]
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2200      	movs	r2, #0
 8005694:	214b      	movs	r1, #75	; 0x4b
 8005696:	4618      	mov	r0, r3
 8005698:	f000 fbcf 	bl	8005e3a <IOE_Write>
  }
  
  return ret;
 800569c:	7bfb      	ldrb	r3, [r7, #15]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b086      	sub	sp, #24
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	4603      	mov	r3, r0
 80056ae:	60b9      	str	r1, [r7, #8]
 80056b0:	607a      	str	r2, [r7, #4]
 80056b2:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80056b4:	89fb      	ldrh	r3, [r7, #14]
 80056b6:	b2d8      	uxtb	r0, r3
 80056b8:	f107 0210 	add.w	r2, r7, #16
 80056bc:	2304      	movs	r3, #4
 80056be:	21d7      	movs	r1, #215	; 0xd7
 80056c0:	f000 fbe1 	bl	8005e86 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 80056c4:	7c3b      	ldrb	r3, [r7, #16]
 80056c6:	061a      	lsls	r2, r3, #24
 80056c8:	7c7b      	ldrb	r3, [r7, #17]
 80056ca:	041b      	lsls	r3, r3, #16
 80056cc:	431a      	orrs	r2, r3
 80056ce:	7cbb      	ldrb	r3, [r7, #18]
 80056d0:	021b      	lsls	r3, r3, #8
 80056d2:	4313      	orrs	r3, r2
 80056d4:	7cfa      	ldrb	r2, [r7, #19]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	0d1b      	lsrs	r3, r3, #20
 80056de:	b29a      	uxth	r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	0a1b      	lsrs	r3, r3, #8
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80056f4:	89fb      	ldrh	r3, [r7, #14]
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2201      	movs	r2, #1
 80056fa:	214b      	movs	r1, #75	; 0x4b
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 fb9c 	bl	8005e3a <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8005702:	89fb      	ldrh	r3, [r7, #14]
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2200      	movs	r2, #0
 8005708:	214b      	movs	r1, #75	; 0x4b
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fb95 	bl	8005e3a <IOE_Write>
}
 8005710:	bf00      	nop
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	4603      	mov	r3, r0
 8005720:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8005722:	f000 fb84 	bl	8005e2e <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8005726:	88fb      	ldrh	r3, [r7, #6]
 8005728:	211f      	movs	r1, #31
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff fe76 	bl	800541c <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8005730:	88fb      	ldrh	r3, [r7, #6]
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff fe36 	bl	80053a4 <stmpe811_EnableGlobalIT>
}
 8005738:	bf00      	nop
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	4603      	mov	r3, r0
 8005748:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 800574a:	88fb      	ldrh	r3, [r7, #6]
 800574c:	4618      	mov	r0, r3
 800574e:	f7ff fe47 	bl	80053e0 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8005752:	88fb      	ldrh	r3, [r7, #6]
 8005754:	211f      	movs	r1, #31
 8005756:	4618      	mov	r0, r3
 8005758:	f7ff fe81 	bl	800545e <stmpe811_DisableITSource>
}
 800575c:	bf00      	nop
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	4603      	mov	r3, r0
 800576c:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 800576e:	88fb      	ldrh	r3, [r7, #6]
 8005770:	211f      	movs	r1, #31
 8005772:	4618      	mov	r0, r3
 8005774:	f7ff fe99 	bl	80054aa <stmpe811_ReadGITStatus>
 8005778:	4603      	mov	r3, r0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b082      	sub	sp, #8
 8005786:	af00      	add	r7, sp, #0
 8005788:	4603      	mov	r3, r0
 800578a:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 800578c:	88fb      	ldrh	r3, [r7, #6]
 800578e:	211f      	movs	r1, #31
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff fea1 	bl	80054d8 <stmpe811_ClearGlobalIT>
}
 8005796:	bf00      	nop
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
	...

080057a0 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	4603      	mov	r3, r0
 80057a8:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80057aa:	2300      	movs	r3, #0
 80057ac:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80057ae:	2300      	movs	r3, #0
 80057b0:	73fb      	strb	r3, [r7, #15]
 80057b2:	e00b      	b.n	80057cc <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 80057b4:	7bfb      	ldrb	r3, [r7, #15]
 80057b6:	4a0a      	ldr	r2, [pc, #40]	; (80057e0 <stmpe811_GetInstance+0x40>)
 80057b8:	5cd3      	ldrb	r3, [r2, r3]
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	88fa      	ldrh	r2, [r7, #6]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d101      	bne.n	80057c6 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
 80057c4:	e006      	b.n	80057d4 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80057c6:	7bfb      	ldrb	r3, [r7, #15]
 80057c8:	3301      	adds	r3, #1
 80057ca:	73fb      	strb	r3, [r7, #15]
 80057cc:	7bfb      	ldrb	r3, [r7, #15]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d9f0      	bls.n	80057b4 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 80057d2:	23ff      	movs	r3, #255	; 0xff
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	20000c90 	.word	0x20000c90

080057e4 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b08a      	sub	sp, #40	; 0x28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a33      	ldr	r2, [pc, #204]	; (80058c0 <I2Cx_MspInit+0xdc>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d15f      	bne.n	80058b6 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80057f6:	2300      	movs	r3, #0
 80057f8:	613b      	str	r3, [r7, #16]
 80057fa:	4b32      	ldr	r3, [pc, #200]	; (80058c4 <I2Cx_MspInit+0xe0>)
 80057fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fe:	4a31      	ldr	r2, [pc, #196]	; (80058c4 <I2Cx_MspInit+0xe0>)
 8005800:	f043 0304 	orr.w	r3, r3, #4
 8005804:	6313      	str	r3, [r2, #48]	; 0x30
 8005806:	4b2f      	ldr	r3, [pc, #188]	; (80058c4 <I2Cx_MspInit+0xe0>)
 8005808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580a:	f003 0304 	and.w	r3, r3, #4
 800580e:	613b      	str	r3, [r7, #16]
 8005810:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	4b2b      	ldr	r3, [pc, #172]	; (80058c4 <I2Cx_MspInit+0xe0>)
 8005818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581a:	4a2a      	ldr	r2, [pc, #168]	; (80058c4 <I2Cx_MspInit+0xe0>)
 800581c:	f043 0301 	orr.w	r3, r3, #1
 8005820:	6313      	str	r3, [r2, #48]	; 0x30
 8005822:	4b28      	ldr	r3, [pc, #160]	; (80058c4 <I2Cx_MspInit+0xe0>)
 8005824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 800582e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8005834:	2312      	movs	r3, #18
 8005836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8005838:	2300      	movs	r3, #0
 800583a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 800583c:	2302      	movs	r3, #2
 800583e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8005840:	2304      	movs	r3, #4
 8005842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8005844:	f107 0314 	add.w	r3, r7, #20
 8005848:	4619      	mov	r1, r3
 800584a:	481f      	ldr	r0, [pc, #124]	; (80058c8 <I2Cx_MspInit+0xe4>)
 800584c:	f001 f80c 	bl	8006868 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8005850:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005854:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8005856:	f107 0314 	add.w	r3, r7, #20
 800585a:	4619      	mov	r1, r3
 800585c:	481b      	ldr	r0, [pc, #108]	; (80058cc <I2Cx_MspInit+0xe8>)
 800585e:	f001 f803 	bl	8006868 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8005862:	2300      	movs	r3, #0
 8005864:	60bb      	str	r3, [r7, #8]
 8005866:	4b17      	ldr	r3, [pc, #92]	; (80058c4 <I2Cx_MspInit+0xe0>)
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	4a16      	ldr	r2, [pc, #88]	; (80058c4 <I2Cx_MspInit+0xe0>)
 800586c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005870:	6413      	str	r3, [r2, #64]	; 0x40
 8005872:	4b14      	ldr	r3, [pc, #80]	; (80058c4 <I2Cx_MspInit+0xe0>)
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800587a:	60bb      	str	r3, [r7, #8]
 800587c:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 800587e:	4b11      	ldr	r3, [pc, #68]	; (80058c4 <I2Cx_MspInit+0xe0>)
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	4a10      	ldr	r2, [pc, #64]	; (80058c4 <I2Cx_MspInit+0xe0>)
 8005884:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005888:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 800588a:	4b0e      	ldr	r3, [pc, #56]	; (80058c4 <I2Cx_MspInit+0xe0>)
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	4a0d      	ldr	r2, [pc, #52]	; (80058c4 <I2Cx_MspInit+0xe0>)
 8005890:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005894:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8005896:	2200      	movs	r2, #0
 8005898:	210f      	movs	r1, #15
 800589a:	2048      	movs	r0, #72	; 0x48
 800589c:	f000 fd20 	bl	80062e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80058a0:	2048      	movs	r0, #72	; 0x48
 80058a2:	f000 fd39 	bl	8006318 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80058a6:	2200      	movs	r2, #0
 80058a8:	210f      	movs	r1, #15
 80058aa:	2049      	movs	r0, #73	; 0x49
 80058ac:	f000 fd18 	bl	80062e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 80058b0:	2049      	movs	r0, #73	; 0x49
 80058b2:	f000 fd31 	bl	8006318 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 80058b6:	bf00      	nop
 80058b8:	3728      	adds	r7, #40	; 0x28
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	40005c00 	.word	0x40005c00
 80058c4:	40023800 	.word	0x40023800
 80058c8:	40020000 	.word	0x40020000
 80058cc:	40020800 	.word	0x40020800

080058d0 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80058d4:	4814      	ldr	r0, [pc, #80]	; (8005928 <I2Cx_Init+0x58>)
 80058d6:	f001 ff2d 	bl	8007734 <HAL_I2C_GetState>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d121      	bne.n	8005924 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 80058e0:	4b11      	ldr	r3, [pc, #68]	; (8005928 <I2Cx_Init+0x58>)
 80058e2:	4a12      	ldr	r2, [pc, #72]	; (800592c <I2Cx_Init+0x5c>)
 80058e4:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 80058e6:	4b10      	ldr	r3, [pc, #64]	; (8005928 <I2Cx_Init+0x58>)
 80058e8:	4a11      	ldr	r2, [pc, #68]	; (8005930 <I2Cx_Init+0x60>)
 80058ea:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 80058ec:	4b0e      	ldr	r3, [pc, #56]	; (8005928 <I2Cx_Init+0x58>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 80058f2:	4b0d      	ldr	r3, [pc, #52]	; (8005928 <I2Cx_Init+0x58>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80058f8:	4b0b      	ldr	r3, [pc, #44]	; (8005928 <I2Cx_Init+0x58>)
 80058fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80058fe:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8005900:	4b09      	ldr	r3, [pc, #36]	; (8005928 <I2Cx_Init+0x58>)
 8005902:	2200      	movs	r2, #0
 8005904:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8005906:	4b08      	ldr	r3, [pc, #32]	; (8005928 <I2Cx_Init+0x58>)
 8005908:	2200      	movs	r2, #0
 800590a:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 800590c:	4b06      	ldr	r3, [pc, #24]	; (8005928 <I2Cx_Init+0x58>)
 800590e:	2200      	movs	r2, #0
 8005910:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8005912:	4b05      	ldr	r3, [pc, #20]	; (8005928 <I2Cx_Init+0x58>)
 8005914:	2200      	movs	r2, #0
 8005916:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8005918:	4803      	ldr	r0, [pc, #12]	; (8005928 <I2Cx_Init+0x58>)
 800591a:	f7ff ff63 	bl	80057e4 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800591e:	4802      	ldr	r0, [pc, #8]	; (8005928 <I2Cx_Init+0x58>)
 8005920:	f001 fa74 	bl	8006e0c <HAL_I2C_Init>
  }
}
 8005924:	bf00      	nop
 8005926:	bd80      	pop	{r7, pc}
 8005928:	2000b0e0 	.word	0x2000b0e0
 800592c:	40005c00 	.word	0x40005c00
 8005930:	000186a0 	.word	0x000186a0

08005934 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 800593a:	2300      	movs	r3, #0
 800593c:	603b      	str	r3, [r7, #0]
 800593e:	4b13      	ldr	r3, [pc, #76]	; (800598c <I2Cx_ITConfig+0x58>)
 8005940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005942:	4a12      	ldr	r2, [pc, #72]	; (800598c <I2Cx_ITConfig+0x58>)
 8005944:	f043 0301 	orr.w	r3, r3, #1
 8005948:	6313      	str	r3, [r2, #48]	; 0x30
 800594a:	4b10      	ldr	r3, [pc, #64]	; (800598c <I2Cx_ITConfig+0x58>)
 800594c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	603b      	str	r3, [r7, #0]
 8005954:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8005956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800595a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800595c:	2301      	movs	r3, #1
 800595e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8005960:	2300      	movs	r3, #0
 8005962:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8005964:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005968:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 800596a:	1d3b      	adds	r3, r7, #4
 800596c:	4619      	mov	r1, r3
 800596e:	4808      	ldr	r0, [pc, #32]	; (8005990 <I2Cx_ITConfig+0x5c>)
 8005970:	f000 ff7a 	bl	8006868 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8005974:	2200      	movs	r2, #0
 8005976:	210f      	movs	r1, #15
 8005978:	2028      	movs	r0, #40	; 0x28
 800597a:	f000 fcb1 	bl	80062e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 800597e:	2028      	movs	r0, #40	; 0x28
 8005980:	f000 fcca 	bl	8006318 <HAL_NVIC_EnableIRQ>
}
 8005984:	bf00      	nop
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	40023800 	.word	0x40023800
 8005990:	40020000 	.word	0x40020000

08005994 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8005994:	b580      	push	{r7, lr}
 8005996:	b088      	sub	sp, #32
 8005998:	af04      	add	r7, sp, #16
 800599a:	4603      	mov	r3, r0
 800599c:	71fb      	strb	r3, [r7, #7]
 800599e:	460b      	mov	r3, r1
 80059a0:	71bb      	strb	r3, [r7, #6]
 80059a2:	4613      	mov	r3, r2
 80059a4:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80059a6:	2300      	movs	r3, #0
 80059a8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 80059aa:	79fb      	ldrb	r3, [r7, #7]
 80059ac:	b299      	uxth	r1, r3
 80059ae:	79bb      	ldrb	r3, [r7, #6]
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	4b0b      	ldr	r3, [pc, #44]	; (80059e0 <I2Cx_WriteData+0x4c>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	9302      	str	r3, [sp, #8]
 80059b8:	2301      	movs	r3, #1
 80059ba:	9301      	str	r3, [sp, #4]
 80059bc:	1d7b      	adds	r3, r7, #5
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	2301      	movs	r3, #1
 80059c2:	4808      	ldr	r0, [pc, #32]	; (80059e4 <I2Cx_WriteData+0x50>)
 80059c4:	f001 fb96 	bl	80070f4 <HAL_I2C_Mem_Write>
 80059c8:	4603      	mov	r3, r0
 80059ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80059d2:	f000 f863 	bl	8005a9c <I2Cx_Error>
  }        
}
 80059d6:	bf00      	nop
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	20000114 	.word	0x20000114
 80059e4:	2000b0e0 	.word	0x2000b0e0

080059e8 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b088      	sub	sp, #32
 80059ec:	af04      	add	r7, sp, #16
 80059ee:	4603      	mov	r3, r0
 80059f0:	460a      	mov	r2, r1
 80059f2:	71fb      	strb	r3, [r7, #7]
 80059f4:	4613      	mov	r3, r2
 80059f6:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80059f8:	2300      	movs	r3, #0
 80059fa:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80059fc:	2300      	movs	r3, #0
 80059fe:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8005a00:	79fb      	ldrb	r3, [r7, #7]
 8005a02:	b299      	uxth	r1, r3
 8005a04:	79bb      	ldrb	r3, [r7, #6]
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	4b0b      	ldr	r3, [pc, #44]	; (8005a38 <I2Cx_ReadData+0x50>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	9302      	str	r3, [sp, #8]
 8005a0e:	2301      	movs	r3, #1
 8005a10:	9301      	str	r3, [sp, #4]
 8005a12:	f107 030e 	add.w	r3, r7, #14
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	2301      	movs	r3, #1
 8005a1a:	4808      	ldr	r0, [pc, #32]	; (8005a3c <I2Cx_ReadData+0x54>)
 8005a1c:	f001 fc64 	bl	80072e8 <HAL_I2C_Mem_Read>
 8005a20:	4603      	mov	r3, r0
 8005a22:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8005a2a:	f000 f837 	bl	8005a9c <I2Cx_Error>
  
  }
  return value;
 8005a2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	20000114 	.word	0x20000114
 8005a3c:	2000b0e0 	.word	0x2000b0e0

08005a40 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b088      	sub	sp, #32
 8005a44:	af04      	add	r7, sp, #16
 8005a46:	603a      	str	r2, [r7, #0]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	71fb      	strb	r3, [r7, #7]
 8005a4e:	460b      	mov	r3, r1
 8005a50:	71bb      	strb	r3, [r7, #6]
 8005a52:	4613      	mov	r3, r2
 8005a54:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8005a5a:	79fb      	ldrb	r3, [r7, #7]
 8005a5c:	b299      	uxth	r1, r3
 8005a5e:	79bb      	ldrb	r3, [r7, #6]
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	4b0c      	ldr	r3, [pc, #48]	; (8005a94 <I2Cx_ReadBuffer+0x54>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	9302      	str	r3, [sp, #8]
 8005a68:	88bb      	ldrh	r3, [r7, #4]
 8005a6a:	9301      	str	r3, [sp, #4]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	2301      	movs	r3, #1
 8005a72:	4809      	ldr	r0, [pc, #36]	; (8005a98 <I2Cx_ReadBuffer+0x58>)
 8005a74:	f001 fc38 	bl	80072e8 <HAL_I2C_Mem_Read>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8005a82:	2300      	movs	r3, #0
 8005a84:	e002      	b.n	8005a8c <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8005a86:	f000 f809 	bl	8005a9c <I2Cx_Error>

    return 1;
 8005a8a:	2301      	movs	r3, #1
  }
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	20000114 	.word	0x20000114
 8005a98:	2000b0e0 	.word	0x2000b0e0

08005a9c <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8005aa0:	4803      	ldr	r0, [pc, #12]	; (8005ab0 <I2Cx_Error+0x14>)
 8005aa2:	f001 faf7 	bl	8007094 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8005aa6:	f7ff ff13 	bl	80058d0 <I2Cx_Init>
}
 8005aaa:	bf00      	nop
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	2000b0e0 	.word	0x2000b0e0

08005ab4 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8005ab8:	4819      	ldr	r0, [pc, #100]	; (8005b20 <SPIx_Init+0x6c>)
 8005aba:	f004 f938 	bl	8009d2e <HAL_SPI_GetState>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d12b      	bne.n	8005b1c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8005ac4:	4b16      	ldr	r3, [pc, #88]	; (8005b20 <SPIx_Init+0x6c>)
 8005ac6:	4a17      	ldr	r2, [pc, #92]	; (8005b24 <SPIx_Init+0x70>)
 8005ac8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8005aca:	4b15      	ldr	r3, [pc, #84]	; (8005b20 <SPIx_Init+0x6c>)
 8005acc:	2218      	movs	r2, #24
 8005ace:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8005ad0:	4b13      	ldr	r3, [pc, #76]	; (8005b20 <SPIx_Init+0x6c>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8005ad6:	4b12      	ldr	r3, [pc, #72]	; (8005b20 <SPIx_Init+0x6c>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8005adc:	4b10      	ldr	r3, [pc, #64]	; (8005b20 <SPIx_Init+0x6c>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8005ae2:	4b0f      	ldr	r3, [pc, #60]	; (8005b20 <SPIx_Init+0x6c>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8005ae8:	4b0d      	ldr	r3, [pc, #52]	; (8005b20 <SPIx_Init+0x6c>)
 8005aea:	2207      	movs	r2, #7
 8005aec:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8005aee:	4b0c      	ldr	r3, [pc, #48]	; (8005b20 <SPIx_Init+0x6c>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8005af4:	4b0a      	ldr	r3, [pc, #40]	; (8005b20 <SPIx_Init+0x6c>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8005afa:	4b09      	ldr	r3, [pc, #36]	; (8005b20 <SPIx_Init+0x6c>)
 8005afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b00:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8005b02:	4b07      	ldr	r3, [pc, #28]	; (8005b20 <SPIx_Init+0x6c>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8005b08:	4b05      	ldr	r3, [pc, #20]	; (8005b20 <SPIx_Init+0x6c>)
 8005b0a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005b0e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8005b10:	4803      	ldr	r0, [pc, #12]	; (8005b20 <SPIx_Init+0x6c>)
 8005b12:	f000 f853 	bl	8005bbc <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8005b16:	4802      	ldr	r0, [pc, #8]	; (8005b20 <SPIx_Init+0x6c>)
 8005b18:	f003 fc69 	bl	80093ee <HAL_SPI_Init>
  } 
}
 8005b1c:	bf00      	nop
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	20000c94 	.word	0x20000c94
 8005b24:	40015000 	.word	0x40015000

08005b28 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	4603      	mov	r3, r0
 8005b30:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8005b36:	79fb      	ldrb	r3, [r7, #7]
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	4b09      	ldr	r3, [pc, #36]	; (8005b60 <SPIx_Read+0x38>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f107 0108 	add.w	r1, r7, #8
 8005b42:	4808      	ldr	r0, [pc, #32]	; (8005b64 <SPIx_Read+0x3c>)
 8005b44:	f003 fe40 	bl	80097c8 <HAL_SPI_Receive>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8005b52:	f000 f827 	bl	8005ba4 <SPIx_Error>
  }
  
  return readvalue;
 8005b56:	68bb      	ldr	r3, [r7, #8]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	20000118 	.word	0x20000118
 8005b64:	20000c94 	.word	0x20000c94

08005b68 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	4603      	mov	r3, r0
 8005b70:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8005b76:	4b09      	ldr	r3, [pc, #36]	; (8005b9c <SPIx_Write+0x34>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	1db9      	adds	r1, r7, #6
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	4808      	ldr	r0, [pc, #32]	; (8005ba0 <SPIx_Write+0x38>)
 8005b80:	f003 fce6 	bl	8009550 <HAL_SPI_Transmit>
 8005b84:	4603      	mov	r3, r0
 8005b86:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8005b8e:	f000 f809 	bl	8005ba4 <SPIx_Error>
  }
}
 8005b92:	bf00      	nop
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20000118 	.word	0x20000118
 8005ba0:	20000c94 	.word	0x20000c94

08005ba4 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8005ba8:	4803      	ldr	r0, [pc, #12]	; (8005bb8 <SPIx_Error+0x14>)
 8005baa:	f003 fca9 	bl	8009500 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8005bae:	f7ff ff81 	bl	8005ab4 <SPIx_Init>
}
 8005bb2:	bf00      	nop
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20000c94 	.word	0x20000c94

08005bbc <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b08a      	sub	sp, #40	; 0x28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	613b      	str	r3, [r7, #16]
 8005bc8:	4b17      	ldr	r3, [pc, #92]	; (8005c28 <SPIx_MspInit+0x6c>)
 8005bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bcc:	4a16      	ldr	r2, [pc, #88]	; (8005c28 <SPIx_MspInit+0x6c>)
 8005bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bd2:	6453      	str	r3, [r2, #68]	; 0x44
 8005bd4:	4b14      	ldr	r3, [pc, #80]	; (8005c28 <SPIx_MspInit+0x6c>)
 8005bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bdc:	613b      	str	r3, [r7, #16]
 8005bde:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8005be0:	2300      	movs	r3, #0
 8005be2:	60fb      	str	r3, [r7, #12]
 8005be4:	4b10      	ldr	r3, [pc, #64]	; (8005c28 <SPIx_MspInit+0x6c>)
 8005be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be8:	4a0f      	ldr	r2, [pc, #60]	; (8005c28 <SPIx_MspInit+0x6c>)
 8005bea:	f043 0320 	orr.w	r3, r3, #32
 8005bee:	6313      	str	r3, [r2, #48]	; 0x30
 8005bf0:	4b0d      	ldr	r3, [pc, #52]	; (8005c28 <SPIx_MspInit+0x6c>)
 8005bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf4:	f003 0320 	and.w	r3, r3, #32
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8005bfc:	f44f 7360 	mov.w	r3, #896	; 0x380
 8005c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8005c02:	2302      	movs	r3, #2
 8005c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8005c06:	2302      	movs	r3, #2
 8005c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8005c0e:	2305      	movs	r3, #5
 8005c10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8005c12:	f107 0314 	add.w	r3, r7, #20
 8005c16:	4619      	mov	r1, r3
 8005c18:	4804      	ldr	r0, [pc, #16]	; (8005c2c <SPIx_MspInit+0x70>)
 8005c1a:	f000 fe25 	bl	8006868 <HAL_GPIO_Init>
}
 8005c1e:	bf00      	nop
 8005c20:	3728      	adds	r7, #40	; 0x28
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	40023800 	.word	0x40023800
 8005c2c:	40021400 	.word	0x40021400

08005c30 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8005c36:	4b36      	ldr	r3, [pc, #216]	; (8005d10 <LCD_IO_Init+0xe0>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d164      	bne.n	8005d08 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8005c3e:	4b34      	ldr	r3, [pc, #208]	; (8005d10 <LCD_IO_Init+0xe0>)
 8005c40:	2201      	movs	r2, #1
 8005c42:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8005c44:	2300      	movs	r3, #0
 8005c46:	60bb      	str	r3, [r7, #8]
 8005c48:	4b32      	ldr	r3, [pc, #200]	; (8005d14 <LCD_IO_Init+0xe4>)
 8005c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4c:	4a31      	ldr	r2, [pc, #196]	; (8005d14 <LCD_IO_Init+0xe4>)
 8005c4e:	f043 0308 	orr.w	r3, r3, #8
 8005c52:	6313      	str	r3, [r2, #48]	; 0x30
 8005c54:	4b2f      	ldr	r3, [pc, #188]	; (8005d14 <LCD_IO_Init+0xe4>)
 8005c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c58:	f003 0308 	and.w	r3, r3, #8
 8005c5c:	60bb      	str	r3, [r7, #8]
 8005c5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8005c60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8005c66:	2301      	movs	r3, #1
 8005c68:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8005c6e:	2302      	movs	r3, #2
 8005c70:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8005c72:	f107 030c 	add.w	r3, r7, #12
 8005c76:	4619      	mov	r1, r3
 8005c78:	4827      	ldr	r0, [pc, #156]	; (8005d18 <LCD_IO_Init+0xe8>)
 8005c7a:	f000 fdf5 	bl	8006868 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8005c7e:	2300      	movs	r3, #0
 8005c80:	607b      	str	r3, [r7, #4]
 8005c82:	4b24      	ldr	r3, [pc, #144]	; (8005d14 <LCD_IO_Init+0xe4>)
 8005c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c86:	4a23      	ldr	r2, [pc, #140]	; (8005d14 <LCD_IO_Init+0xe4>)
 8005c88:	f043 0308 	orr.w	r3, r3, #8
 8005c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8005c8e:	4b21      	ldr	r3, [pc, #132]	; (8005d14 <LCD_IO_Init+0xe4>)
 8005c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c92:	f003 0308 	and.w	r3, r3, #8
 8005c96:	607b      	str	r3, [r7, #4]
 8005c98:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8005c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8005ca8:	2302      	movs	r3, #2
 8005caa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8005cac:	f107 030c 	add.w	r3, r7, #12
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	4819      	ldr	r0, [pc, #100]	; (8005d18 <LCD_IO_Init+0xe8>)
 8005cb4:	f000 fdd8 	bl	8006868 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8005cb8:	2300      	movs	r3, #0
 8005cba:	603b      	str	r3, [r7, #0]
 8005cbc:	4b15      	ldr	r3, [pc, #84]	; (8005d14 <LCD_IO_Init+0xe4>)
 8005cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc0:	4a14      	ldr	r2, [pc, #80]	; (8005d14 <LCD_IO_Init+0xe4>)
 8005cc2:	f043 0304 	orr.w	r3, r3, #4
 8005cc6:	6313      	str	r3, [r2, #48]	; 0x30
 8005cc8:	4b12      	ldr	r3, [pc, #72]	; (8005d14 <LCD_IO_Init+0xe4>)
 8005cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ccc:	f003 0304 	and.w	r3, r3, #4
 8005cd0:	603b      	str	r3, [r7, #0]
 8005cd2:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8005cd4:	2304      	movs	r3, #4
 8005cd6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8005ce4:	f107 030c 	add.w	r3, r7, #12
 8005ce8:	4619      	mov	r1, r3
 8005cea:	480c      	ldr	r0, [pc, #48]	; (8005d1c <LCD_IO_Init+0xec>)
 8005cec:	f000 fdbc 	bl	8006868 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	2104      	movs	r1, #4
 8005cf4:	4809      	ldr	r0, [pc, #36]	; (8005d1c <LCD_IO_Init+0xec>)
 8005cf6:	f001 f86f 	bl	8006dd8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	2104      	movs	r1, #4
 8005cfe:	4807      	ldr	r0, [pc, #28]	; (8005d1c <LCD_IO_Init+0xec>)
 8005d00:	f001 f86a 	bl	8006dd8 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8005d04:	f7ff fed6 	bl	8005ab4 <SPIx_Init>
  }
}
 8005d08:	bf00      	nop
 8005d0a:	3720      	adds	r7, #32
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	20000cec 	.word	0x20000cec
 8005d14:	40023800 	.word	0x40023800
 8005d18:	40020c00 	.word	0x40020c00
 8005d1c:	40020800 	.word	0x40020800

08005d20 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	4603      	mov	r3, r0
 8005d28:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d30:	480a      	ldr	r0, [pc, #40]	; (8005d5c <LCD_IO_WriteData+0x3c>)
 8005d32:	f001 f851 	bl	8006dd8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8005d36:	2200      	movs	r2, #0
 8005d38:	2104      	movs	r1, #4
 8005d3a:	4809      	ldr	r0, [pc, #36]	; (8005d60 <LCD_IO_WriteData+0x40>)
 8005d3c:	f001 f84c 	bl	8006dd8 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8005d40:	88fb      	ldrh	r3, [r7, #6]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7ff ff10 	bl	8005b68 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8005d48:	2201      	movs	r2, #1
 8005d4a:	2104      	movs	r1, #4
 8005d4c:	4804      	ldr	r0, [pc, #16]	; (8005d60 <LCD_IO_WriteData+0x40>)
 8005d4e:	f001 f843 	bl	8006dd8 <HAL_GPIO_WritePin>
}
 8005d52:	bf00      	nop
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	40020c00 	.word	0x40020c00
 8005d60:	40020800 	.word	0x40020800

08005d64 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d74:	480a      	ldr	r0, [pc, #40]	; (8005da0 <LCD_IO_WriteReg+0x3c>)
 8005d76:	f001 f82f 	bl	8006dd8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	2104      	movs	r1, #4
 8005d7e:	4809      	ldr	r0, [pc, #36]	; (8005da4 <LCD_IO_WriteReg+0x40>)
 8005d80:	f001 f82a 	bl	8006dd8 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8005d84:	79fb      	ldrb	r3, [r7, #7]
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7ff feed 	bl	8005b68 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8005d8e:	2201      	movs	r2, #1
 8005d90:	2104      	movs	r1, #4
 8005d92:	4804      	ldr	r0, [pc, #16]	; (8005da4 <LCD_IO_WriteReg+0x40>)
 8005d94:	f001 f820 	bl	8006dd8 <HAL_GPIO_WritePin>
}
 8005d98:	bf00      	nop
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	40020c00 	.word	0x40020c00
 8005da4:	40020800 	.word	0x40020800

08005da8 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	4603      	mov	r3, r0
 8005db0:	460a      	mov	r2, r1
 8005db2:	80fb      	strh	r3, [r7, #6]
 8005db4:	4613      	mov	r3, r2
 8005db6:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8005db8:	2300      	movs	r3, #0
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2104      	movs	r1, #4
 8005dc0:	4810      	ldr	r0, [pc, #64]	; (8005e04 <LCD_IO_ReadData+0x5c>)
 8005dc2:	f001 f809 	bl	8006dd8 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005dcc:	480e      	ldr	r0, [pc, #56]	; (8005e08 <LCD_IO_ReadData+0x60>)
 8005dce:	f001 f803 	bl	8006dd8 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8005dd2:	88fb      	ldrh	r3, [r7, #6]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7ff fec7 	bl	8005b68 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8005dda:	797b      	ldrb	r3, [r7, #5]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7ff fea3 	bl	8005b28 <SPIx_Read>
 8005de2:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8005de4:	2201      	movs	r2, #1
 8005de6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005dea:	4807      	ldr	r0, [pc, #28]	; (8005e08 <LCD_IO_ReadData+0x60>)
 8005dec:	f000 fff4 	bl	8006dd8 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8005df0:	2201      	movs	r2, #1
 8005df2:	2104      	movs	r1, #4
 8005df4:	4803      	ldr	r0, [pc, #12]	; (8005e04 <LCD_IO_ReadData+0x5c>)
 8005df6:	f000 ffef 	bl	8006dd8 <HAL_GPIO_WritePin>
  
  return readvalue;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	40020800 	.word	0x40020800
 8005e08:	40020c00 	.word	0x40020c00

08005e0c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f987 	bl	8006128 <HAL_Delay>
}
 8005e1a:	bf00      	nop
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8005e26:	f7ff fd53 	bl	80058d0 <I2Cx_Init>
}
 8005e2a:	bf00      	nop
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8005e32:	f7ff fd7f 	bl	8005934 <I2Cx_ITConfig>
}
 8005e36:	bf00      	nop
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b082      	sub	sp, #8
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	4603      	mov	r3, r0
 8005e42:	71fb      	strb	r3, [r7, #7]
 8005e44:	460b      	mov	r3, r1
 8005e46:	71bb      	strb	r3, [r7, #6]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8005e4c:	797a      	ldrb	r2, [r7, #5]
 8005e4e:	79b9      	ldrb	r1, [r7, #6]
 8005e50:	79fb      	ldrb	r3, [r7, #7]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7ff fd9e 	bl	8005994 <I2Cx_WriteData>
}
 8005e58:	bf00      	nop
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	4603      	mov	r3, r0
 8005e68:	460a      	mov	r2, r1
 8005e6a:	71fb      	strb	r3, [r7, #7]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8005e70:	79ba      	ldrb	r2, [r7, #6]
 8005e72:	79fb      	ldrb	r3, [r7, #7]
 8005e74:	4611      	mov	r1, r2
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7ff fdb6 	bl	80059e8 <I2Cx_ReadData>
 8005e7c:	4603      	mov	r3, r0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b082      	sub	sp, #8
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	603a      	str	r2, [r7, #0]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	4603      	mov	r3, r0
 8005e92:	71fb      	strb	r3, [r7, #7]
 8005e94:	460b      	mov	r3, r1
 8005e96:	71bb      	strb	r3, [r7, #6]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8005e9c:	88bb      	ldrh	r3, [r7, #4]
 8005e9e:	79b9      	ldrb	r1, [r7, #6]
 8005ea0:	79f8      	ldrb	r0, [r7, #7]
 8005ea2:	683a      	ldr	r2, [r7, #0]
 8005ea4:	f7ff fdcc 	bl	8005a40 <I2Cx_ReadBuffer>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	b29b      	uxth	r3, r3
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f933 	bl	8006128 <HAL_Delay>
}
 8005ec2:	bf00      	nop
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
	...

08005ecc <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	460a      	mov	r2, r1
 8005ed6:	80fb      	strh	r3, [r7, #6]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8005ee0:	4a13      	ldr	r2, [pc, #76]	; (8005f30 <BSP_TS_Init+0x64>)
 8005ee2:	88fb      	ldrh	r3, [r7, #6]
 8005ee4:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8005ee6:	4a13      	ldr	r2, [pc, #76]	; (8005f34 <BSP_TS_Init+0x68>)
 8005ee8:	88bb      	ldrh	r3, [r7, #4]
 8005eea:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8005eec:	4b12      	ldr	r3, [pc, #72]	; (8005f38 <BSP_TS_Init+0x6c>)
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	2082      	movs	r0, #130	; 0x82
 8005ef2:	4798      	blx	r3
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f640 0311 	movw	r3, #2065	; 0x811
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d104      	bne.n	8005f0a <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8005f00:	4b0e      	ldr	r3, [pc, #56]	; (8005f3c <BSP_TS_Init+0x70>)
 8005f02:	4a0d      	ldr	r2, [pc, #52]	; (8005f38 <BSP_TS_Init+0x6c>)
 8005f04:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8005f0a:	7bfb      	ldrb	r3, [r7, #15]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d109      	bne.n	8005f24 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8005f10:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <BSP_TS_Init+0x70>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2082      	movs	r0, #130	; 0x82
 8005f18:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8005f1a:	4b08      	ldr	r3, [pc, #32]	; (8005f3c <BSP_TS_Init+0x70>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	2082      	movs	r0, #130	; 0x82
 8005f22:	4798      	blx	r3
  }

  return ret;
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	20000cf4 	.word	0x20000cf4
 8005f34:	20000cf6 	.word	0x20000cf6
 8005f38:	200000ec 	.word	0x200000ec
 8005f3c:	20000cf0 	.word	0x20000cf0

08005f40 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8005f48:	4b4f      	ldr	r3, [pc, #316]	; (8006088 <BSP_TS_GetState+0x148>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	2082      	movs	r0, #130	; 0x82
 8005f50:	4798      	blx	r3
 8005f52:	4603      	mov	r3, r0
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 808d 	beq.w	800607e <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8005f64:	4b48      	ldr	r3, [pc, #288]	; (8006088 <BSP_TS_GetState+0x148>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	f107 020c 	add.w	r2, r7, #12
 8005f6e:	f107 010e 	add.w	r1, r7, #14
 8005f72:	2082      	movs	r0, #130	; 0x82
 8005f74:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;
 8005f76:	89bb      	ldrh	r3, [r7, #12]
 8005f78:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8005f80:	89bb      	ldrh	r3, [r7, #12]
 8005f82:	4a42      	ldr	r2, [pc, #264]	; (800608c <BSP_TS_GetState+0x14c>)
 8005f84:	fba2 2303 	umull	r2, r3, r2, r3
 8005f88:	08db      	lsrs	r3, r3, #3
 8005f8a:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8005f8c:	8abb      	ldrh	r3, [r7, #20]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d102      	bne.n	8005f98 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8005f92:	2300      	movs	r3, #0
 8005f94:	82bb      	strh	r3, [r7, #20]
 8005f96:	e008      	b.n	8005faa <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8005f98:	4b3d      	ldr	r3, [pc, #244]	; (8006090 <BSP_TS_GetState+0x150>)
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	8aba      	ldrh	r2, [r7, #20]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d903      	bls.n	8005faa <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8005fa2:	4b3b      	ldr	r3, [pc, #236]	; (8006090 <BSP_TS_GetState+0x150>)
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8005faa:	8abb      	ldrh	r3, [r7, #20]
 8005fac:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8005fae:	89fb      	ldrh	r3, [r7, #14]
 8005fb0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d806      	bhi.n	8005fc6 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8005fb8:	89fb      	ldrh	r3, [r7, #14]
 8005fba:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8005fbe:	330e      	adds	r3, #14
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	81fb      	strh	r3, [r7, #14]
 8005fc4:	e005      	b.n	8005fd2 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8005fc6:	89fb      	ldrh	r3, [r7, #14]
 8005fc8:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8005fcc:	3308      	adds	r3, #8
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8005fd2:	89fb      	ldrh	r3, [r7, #14]
 8005fd4:	4a2f      	ldr	r2, [pc, #188]	; (8006094 <BSP_TS_GetState+0x154>)
 8005fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fda:	08db      	lsrs	r3, r3, #3
 8005fdc:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8005fde:	8afb      	ldrh	r3, [r7, #22]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d102      	bne.n	8005fea <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	82fb      	strh	r3, [r7, #22]
 8005fe8:	e008      	b.n	8005ffc <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8005fea:	4b2b      	ldr	r3, [pc, #172]	; (8006098 <BSP_TS_GetState+0x158>)
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	8afa      	ldrh	r2, [r7, #22]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d903      	bls.n	8005ffc <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8005ff4:	4b28      	ldr	r3, [pc, #160]	; (8006098 <BSP_TS_GetState+0x158>)
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8005ffc:	8afb      	ldrh	r3, [r7, #22]
 8005ffe:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8006000:	89fb      	ldrh	r3, [r7, #14]
 8006002:	461a      	mov	r2, r3
 8006004:	4b25      	ldr	r3, [pc, #148]	; (800609c <BSP_TS_GetState+0x15c>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	429a      	cmp	r2, r3
 800600a:	d906      	bls.n	800601a <BSP_TS_GetState+0xda>
 800600c:	89fa      	ldrh	r2, [r7, #14]
 800600e:	4b23      	ldr	r3, [pc, #140]	; (800609c <BSP_TS_GetState+0x15c>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	b29b      	uxth	r3, r3
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	b29b      	uxth	r3, r3
 8006018:	e005      	b.n	8006026 <BSP_TS_GetState+0xe6>
 800601a:	4b20      	ldr	r3, [pc, #128]	; (800609c <BSP_TS_GetState+0x15c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	b29a      	uxth	r2, r3
 8006020:	89fb      	ldrh	r3, [r7, #14]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	b29b      	uxth	r3, r3
 8006026:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8006028:	89bb      	ldrh	r3, [r7, #12]
 800602a:	461a      	mov	r2, r3
 800602c:	4b1c      	ldr	r3, [pc, #112]	; (80060a0 <BSP_TS_GetState+0x160>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	429a      	cmp	r2, r3
 8006032:	d906      	bls.n	8006042 <BSP_TS_GetState+0x102>
 8006034:	89ba      	ldrh	r2, [r7, #12]
 8006036:	4b1a      	ldr	r3, [pc, #104]	; (80060a0 <BSP_TS_GetState+0x160>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	b29b      	uxth	r3, r3
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	b29b      	uxth	r3, r3
 8006040:	e005      	b.n	800604e <BSP_TS_GetState+0x10e>
 8006042:	4b17      	ldr	r3, [pc, #92]	; (80060a0 <BSP_TS_GetState+0x160>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	b29a      	uxth	r2, r3
 8006048:	89bb      	ldrh	r3, [r7, #12]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	b29b      	uxth	r3, r3
 800604e:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8006050:	8a7a      	ldrh	r2, [r7, #18]
 8006052:	8a3b      	ldrh	r3, [r7, #16]
 8006054:	4413      	add	r3, r2
 8006056:	2b05      	cmp	r3, #5
 8006058:	dd07      	ble.n	800606a <BSP_TS_GetState+0x12a>
    {
      _x = x;
 800605a:	89fb      	ldrh	r3, [r7, #14]
 800605c:	461a      	mov	r2, r3
 800605e:	4b0f      	ldr	r3, [pc, #60]	; (800609c <BSP_TS_GetState+0x15c>)
 8006060:	601a      	str	r2, [r3, #0]
      _y = y; 
 8006062:	89bb      	ldrh	r3, [r7, #12]
 8006064:	461a      	mov	r2, r3
 8006066:	4b0e      	ldr	r3, [pc, #56]	; (80060a0 <BSP_TS_GetState+0x160>)
 8006068:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 800606a:	4b0c      	ldr	r3, [pc, #48]	; (800609c <BSP_TS_GetState+0x15c>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	b29a      	uxth	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8006074:	4b0a      	ldr	r3, [pc, #40]	; (80060a0 <BSP_TS_GetState+0x160>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	b29a      	uxth	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	809a      	strh	r2, [r3, #4]
  }
}
 800607e:	bf00      	nop
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	20000cf0 	.word	0x20000cf0
 800608c:	ba2e8ba3 	.word	0xba2e8ba3
 8006090:	20000cf6 	.word	0x20000cf6
 8006094:	88888889 	.word	0x88888889
 8006098:	20000cf4 	.word	0x20000cf4
 800609c:	20000cf8 	.word	0x20000cf8
 80060a0:	20000cfc 	.word	0x20000cfc

080060a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80060a8:	4b0e      	ldr	r3, [pc, #56]	; (80060e4 <HAL_Init+0x40>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a0d      	ldr	r2, [pc, #52]	; (80060e4 <HAL_Init+0x40>)
 80060ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80060b4:	4b0b      	ldr	r3, [pc, #44]	; (80060e4 <HAL_Init+0x40>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a0a      	ldr	r2, [pc, #40]	; (80060e4 <HAL_Init+0x40>)
 80060ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80060c0:	4b08      	ldr	r3, [pc, #32]	; (80060e4 <HAL_Init+0x40>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a07      	ldr	r2, [pc, #28]	; (80060e4 <HAL_Init+0x40>)
 80060c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80060cc:	2003      	movs	r0, #3
 80060ce:	f000 f8fc 	bl	80062ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80060d2:	2000      	movs	r0, #0
 80060d4:	f7fe fbc0 	bl	8004858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80060d8:	f7fe fb92 	bl	8004800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	40023c00 	.word	0x40023c00

080060e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80060e8:	b480      	push	{r7}
 80060ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80060ec:	4b06      	ldr	r3, [pc, #24]	; (8006108 <HAL_IncTick+0x20>)
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	461a      	mov	r2, r3
 80060f2:	4b06      	ldr	r3, [pc, #24]	; (800610c <HAL_IncTick+0x24>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4413      	add	r3, r2
 80060f8:	4a04      	ldr	r2, [pc, #16]	; (800610c <HAL_IncTick+0x24>)
 80060fa:	6013      	str	r3, [r2, #0]
}
 80060fc:	bf00      	nop
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	20000120 	.word	0x20000120
 800610c:	2000b134 	.word	0x2000b134

08006110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006110:	b480      	push	{r7}
 8006112:	af00      	add	r7, sp, #0
  return uwTick;
 8006114:	4b03      	ldr	r3, [pc, #12]	; (8006124 <HAL_GetTick+0x14>)
 8006116:	681b      	ldr	r3, [r3, #0]
}
 8006118:	4618      	mov	r0, r3
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	2000b134 	.word	0x2000b134

08006128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006130:	f7ff ffee 	bl	8006110 <HAL_GetTick>
 8006134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006140:	d005      	beq.n	800614e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006142:	4b0a      	ldr	r3, [pc, #40]	; (800616c <HAL_Delay+0x44>)
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4413      	add	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800614e:	bf00      	nop
 8006150:	f7ff ffde 	bl	8006110 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	429a      	cmp	r2, r3
 800615e:	d8f7      	bhi.n	8006150 <HAL_Delay+0x28>
  {
  }
}
 8006160:	bf00      	nop
 8006162:	bf00      	nop
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	20000120 	.word	0x20000120

08006170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f003 0307 	and.w	r3, r3, #7
 800617e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006180:	4b0c      	ldr	r3, [pc, #48]	; (80061b4 <__NVIC_SetPriorityGrouping+0x44>)
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800618c:	4013      	ands	r3, r2
 800618e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800619c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061a2:	4a04      	ldr	r2, [pc, #16]	; (80061b4 <__NVIC_SetPriorityGrouping+0x44>)
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	60d3      	str	r3, [r2, #12]
}
 80061a8:	bf00      	nop
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	e000ed00 	.word	0xe000ed00

080061b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061b8:	b480      	push	{r7}
 80061ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061bc:	4b04      	ldr	r3, [pc, #16]	; (80061d0 <__NVIC_GetPriorityGrouping+0x18>)
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	0a1b      	lsrs	r3, r3, #8
 80061c2:	f003 0307 	and.w	r3, r3, #7
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	e000ed00 	.word	0xe000ed00

080061d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	4603      	mov	r3, r0
 80061dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	db0b      	blt.n	80061fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061e6:	79fb      	ldrb	r3, [r7, #7]
 80061e8:	f003 021f 	and.w	r2, r3, #31
 80061ec:	4907      	ldr	r1, [pc, #28]	; (800620c <__NVIC_EnableIRQ+0x38>)
 80061ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061f2:	095b      	lsrs	r3, r3, #5
 80061f4:	2001      	movs	r0, #1
 80061f6:	fa00 f202 	lsl.w	r2, r0, r2
 80061fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80061fe:	bf00      	nop
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	e000e100 	.word	0xe000e100

08006210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	4603      	mov	r3, r0
 8006218:	6039      	str	r1, [r7, #0]
 800621a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800621c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006220:	2b00      	cmp	r3, #0
 8006222:	db0a      	blt.n	800623a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	b2da      	uxtb	r2, r3
 8006228:	490c      	ldr	r1, [pc, #48]	; (800625c <__NVIC_SetPriority+0x4c>)
 800622a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800622e:	0112      	lsls	r2, r2, #4
 8006230:	b2d2      	uxtb	r2, r2
 8006232:	440b      	add	r3, r1
 8006234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006238:	e00a      	b.n	8006250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	b2da      	uxtb	r2, r3
 800623e:	4908      	ldr	r1, [pc, #32]	; (8006260 <__NVIC_SetPriority+0x50>)
 8006240:	79fb      	ldrb	r3, [r7, #7]
 8006242:	f003 030f 	and.w	r3, r3, #15
 8006246:	3b04      	subs	r3, #4
 8006248:	0112      	lsls	r2, r2, #4
 800624a:	b2d2      	uxtb	r2, r2
 800624c:	440b      	add	r3, r1
 800624e:	761a      	strb	r2, [r3, #24]
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	e000e100 	.word	0xe000e100
 8006260:	e000ed00 	.word	0xe000ed00

08006264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006264:	b480      	push	{r7}
 8006266:	b089      	sub	sp, #36	; 0x24
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f003 0307 	and.w	r3, r3, #7
 8006276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	f1c3 0307 	rsb	r3, r3, #7
 800627e:	2b04      	cmp	r3, #4
 8006280:	bf28      	it	cs
 8006282:	2304      	movcs	r3, #4
 8006284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	3304      	adds	r3, #4
 800628a:	2b06      	cmp	r3, #6
 800628c:	d902      	bls.n	8006294 <NVIC_EncodePriority+0x30>
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	3b03      	subs	r3, #3
 8006292:	e000      	b.n	8006296 <NVIC_EncodePriority+0x32>
 8006294:	2300      	movs	r3, #0
 8006296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006298:	f04f 32ff 	mov.w	r2, #4294967295
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	fa02 f303 	lsl.w	r3, r2, r3
 80062a2:	43da      	mvns	r2, r3
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	401a      	ands	r2, r3
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062ac:	f04f 31ff 	mov.w	r1, #4294967295
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	fa01 f303 	lsl.w	r3, r1, r3
 80062b6:	43d9      	mvns	r1, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062bc:	4313      	orrs	r3, r2
         );
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3724      	adds	r7, #36	; 0x24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b082      	sub	sp, #8
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7ff ff4c 	bl	8006170 <__NVIC_SetPriorityGrouping>
}
 80062d8:	bf00      	nop
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	4603      	mov	r3, r0
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80062ee:	2300      	movs	r3, #0
 80062f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80062f2:	f7ff ff61 	bl	80061b8 <__NVIC_GetPriorityGrouping>
 80062f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	68b9      	ldr	r1, [r7, #8]
 80062fc:	6978      	ldr	r0, [r7, #20]
 80062fe:	f7ff ffb1 	bl	8006264 <NVIC_EncodePriority>
 8006302:	4602      	mov	r2, r0
 8006304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006308:	4611      	mov	r1, r2
 800630a:	4618      	mov	r0, r3
 800630c:	f7ff ff80 	bl	8006210 <__NVIC_SetPriority>
}
 8006310:	bf00      	nop
 8006312:	3718      	adds	r7, #24
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	4603      	mov	r3, r0
 8006320:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff ff54 	bl	80061d4 <__NVIC_EnableIRQ>
}
 800632c:	bf00      	nop
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e00e      	b.n	8006364 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	795b      	ldrb	r3, [r3, #5]
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d105      	bne.n	800635c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7fd fa8e 	bl	8003878 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006378:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800637a:	f7ff fec9 	bl	8006110 <HAL_GetTick>
 800637e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b02      	cmp	r3, #2
 800638a:	d008      	beq.n	800639e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2280      	movs	r2, #128	; 0x80
 8006390:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e052      	b.n	8006444 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 0216 	bic.w	r2, r2, #22
 80063ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	695a      	ldr	r2, [r3, #20]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d103      	bne.n	80063ce <HAL_DMA_Abort+0x62>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d007      	beq.n	80063de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f022 0208 	bic.w	r2, r2, #8
 80063dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 0201 	bic.w	r2, r2, #1
 80063ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063ee:	e013      	b.n	8006418 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80063f0:	f7ff fe8e 	bl	8006110 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b05      	cmp	r3, #5
 80063fc:	d90c      	bls.n	8006418 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2220      	movs	r2, #32
 8006402:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2203      	movs	r2, #3
 8006408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e015      	b.n	8006444 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1e4      	bne.n	80063f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800642a:	223f      	movs	r2, #63	; 0x3f
 800642c:	409a      	lsls	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b02      	cmp	r3, #2
 800645e:	d004      	beq.n	800646a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2280      	movs	r2, #128	; 0x80
 8006464:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e00c      	b.n	8006484 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2205      	movs	r2, #5
 800646e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0201 	bic.w	r2, r2, #1
 8006480:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e03b      	b.n	800651a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d106      	bne.n	80064bc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7fd fa32 	bl	8003920 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2202      	movs	r2, #2
 80064c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e0:	f023 0107 	bic.w	r1, r3, #7
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80064fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	68d1      	ldr	r1, [r2, #12]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	6812      	ldr	r2, [r2, #0]
 8006506:	430b      	orrs	r3, r1
 8006508:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b084      	sub	sp, #16
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d026      	beq.n	8006592 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654a:	2b00      	cmp	r3, #0
 800654c:	d021      	beq.n	8006592 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800655c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006562:	f043 0201 	orr.w	r2, r3, #1
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2201      	movs	r2, #1
 8006570:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2204      	movs	r2, #4
 8006576:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f003 0320 	and.w	r3, r3, #32
 8006598:	2b00      	cmp	r3, #0
 800659a:	d026      	beq.n	80065ea <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d021      	beq.n	80065ea <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065b4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2220      	movs	r2, #32
 80065bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c2:	f043 0202 	orr.w	r2, r3, #2
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2204      	movs	r2, #4
 80065ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f003 0308 	and.w	r3, r3, #8
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d026      	beq.n	8006642 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d021      	beq.n	8006642 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800660c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2208      	movs	r2, #8
 8006614:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800661a:	f043 0204 	orr.w	r2, r3, #4
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2204      	movs	r2, #4
 8006626:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d003      	beq.n	8006642 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f003 0304 	and.w	r3, r3, #4
 8006648:	2b00      	cmp	r3, #0
 800664a:	d013      	beq.n	8006674 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00e      	beq.n	8006674 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006664:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2204      	movs	r2, #4
 800666c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f853 	bl	800671a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b00      	cmp	r3, #0
 800667c:	d024      	beq.n	80066c8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006684:	2b00      	cmp	r3, #0
 8006686:	d01f      	beq.n	80066c8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006696:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2202      	movs	r2, #2
 800669e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d003      	beq.n	80066c8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f003 0310 	and.w	r3, r3, #16
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d01f      	beq.n	8006712 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d01a      	beq.n	8006712 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80066ea:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2210      	movs	r2, #16
 80066f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 f80e 	bl	800672e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006712:	bf00      	nop
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006722:	bf00      	nop
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800672e:	b480      	push	{r7}
 8006730:	b083      	sub	sp, #12
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006736:	bf00      	nop
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
	...

08006744 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800675c:	2b01      	cmp	r3, #1
 800675e:	d101      	bne.n	8006764 <HAL_DMA2D_ConfigLayer+0x20>
 8006760:	2302      	movs	r3, #2
 8006762:	e079      	b.n	8006858 <HAL_DMA2D_ConfigLayer+0x114>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2202      	movs	r2, #2
 8006770:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	011b      	lsls	r3, r3, #4
 8006778:	3318      	adds	r3, #24
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	4413      	add	r3, r2
 800677e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	041b      	lsls	r3, r3, #16
 800678a:	4313      	orrs	r3, r2
 800678c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800678e:	4b35      	ldr	r3, [pc, #212]	; (8006864 <HAL_DMA2D_ConfigLayer+0x120>)
 8006790:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	2b0a      	cmp	r3, #10
 8006798:	d003      	beq.n	80067a2 <HAL_DMA2D_ConfigLayer+0x5e>
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	2b09      	cmp	r3, #9
 80067a0:	d107      	bne.n	80067b2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	617b      	str	r3, [r7, #20]
 80067b0:	e005      	b.n	80067be <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	061b      	lsls	r3, r3, #24
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d120      	bne.n	8006806 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	43db      	mvns	r3, r3
 80067ce:	ea02 0103 	and.w	r1, r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	430a      	orrs	r2, r1
 80067da:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	6812      	ldr	r2, [r2, #0]
 80067e4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	2b0a      	cmp	r3, #10
 80067ec:	d003      	beq.n	80067f6 <HAL_DMA2D_ConfigLayer+0xb2>
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	2b09      	cmp	r3, #9
 80067f4:	d127      	bne.n	8006846 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	68da      	ldr	r2, [r3, #12]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006802:	629a      	str	r2, [r3, #40]	; 0x28
 8006804:	e01f      	b.n	8006846 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	69da      	ldr	r2, [r3, #28]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	43db      	mvns	r3, r3
 8006810:	ea02 0103 	and.w	r1, r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	430a      	orrs	r2, r1
 800681c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	6812      	ldr	r2, [r2, #0]
 8006826:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	2b0a      	cmp	r3, #10
 800682e:	d003      	beq.n	8006838 <HAL_DMA2D_ConfigLayer+0xf4>
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	2b09      	cmp	r3, #9
 8006836:	d106      	bne.n	8006846 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	68da      	ldr	r2, [r3, #12]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006844:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	371c      	adds	r7, #28
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	ff03000f 	.word	0xff03000f

08006868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006868:	b480      	push	{r7}
 800686a:	b089      	sub	sp, #36	; 0x24
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006872:	2300      	movs	r3, #0
 8006874:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006876:	2300      	movs	r3, #0
 8006878:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800687a:	2300      	movs	r3, #0
 800687c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800687e:	2300      	movs	r3, #0
 8006880:	61fb      	str	r3, [r7, #28]
 8006882:	e177      	b.n	8006b74 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006884:	2201      	movs	r2, #1
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	fa02 f303 	lsl.w	r3, r2, r3
 800688c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	4013      	ands	r3, r2
 8006896:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	429a      	cmp	r2, r3
 800689e:	f040 8166 	bne.w	8006b6e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f003 0303 	and.w	r3, r3, #3
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d005      	beq.n	80068ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d130      	bne.n	800691c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	005b      	lsls	r3, r3, #1
 80068c4:	2203      	movs	r2, #3
 80068c6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ca:	43db      	mvns	r3, r3
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	4013      	ands	r3, r2
 80068d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	68da      	ldr	r2, [r3, #12]
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	005b      	lsls	r3, r3, #1
 80068da:	fa02 f303 	lsl.w	r3, r2, r3
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	69ba      	ldr	r2, [r7, #24]
 80068e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80068f0:	2201      	movs	r2, #1
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	fa02 f303 	lsl.w	r3, r2, r3
 80068f8:	43db      	mvns	r3, r3
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	4013      	ands	r3, r2
 80068fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	091b      	lsrs	r3, r3, #4
 8006906:	f003 0201 	and.w	r2, r3, #1
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	fa02 f303 	lsl.w	r3, r2, r3
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	4313      	orrs	r3, r2
 8006914:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	69ba      	ldr	r2, [r7, #24]
 800691a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f003 0303 	and.w	r3, r3, #3
 8006924:	2b03      	cmp	r3, #3
 8006926:	d017      	beq.n	8006958 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	005b      	lsls	r3, r3, #1
 8006932:	2203      	movs	r2, #3
 8006934:	fa02 f303 	lsl.w	r3, r2, r3
 8006938:	43db      	mvns	r3, r3
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	4013      	ands	r3, r2
 800693e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	689a      	ldr	r2, [r3, #8]
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	005b      	lsls	r3, r3, #1
 8006948:	fa02 f303 	lsl.w	r3, r2, r3
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	4313      	orrs	r3, r2
 8006950:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	69ba      	ldr	r2, [r7, #24]
 8006956:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f003 0303 	and.w	r3, r3, #3
 8006960:	2b02      	cmp	r3, #2
 8006962:	d123      	bne.n	80069ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	08da      	lsrs	r2, r3, #3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	3208      	adds	r2, #8
 800696c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006970:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	f003 0307 	and.w	r3, r3, #7
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	220f      	movs	r2, #15
 800697c:	fa02 f303 	lsl.w	r3, r2, r3
 8006980:	43db      	mvns	r3, r3
 8006982:	69ba      	ldr	r2, [r7, #24]
 8006984:	4013      	ands	r3, r2
 8006986:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	691a      	ldr	r2, [r3, #16]
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	f003 0307 	and.w	r3, r3, #7
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	fa02 f303 	lsl.w	r3, r2, r3
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	4313      	orrs	r3, r2
 800699c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	08da      	lsrs	r2, r3, #3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	3208      	adds	r2, #8
 80069a6:	69b9      	ldr	r1, [r7, #24]
 80069a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	005b      	lsls	r3, r3, #1
 80069b6:	2203      	movs	r2, #3
 80069b8:	fa02 f303 	lsl.w	r3, r2, r3
 80069bc:	43db      	mvns	r3, r3
 80069be:	69ba      	ldr	r2, [r7, #24]
 80069c0:	4013      	ands	r3, r2
 80069c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f003 0203 	and.w	r2, r3, #3
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	005b      	lsls	r3, r3, #1
 80069d0:	fa02 f303 	lsl.w	r3, r2, r3
 80069d4:	69ba      	ldr	r2, [r7, #24]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 80c0 	beq.w	8006b6e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069ee:	2300      	movs	r3, #0
 80069f0:	60fb      	str	r3, [r7, #12]
 80069f2:	4b66      	ldr	r3, [pc, #408]	; (8006b8c <HAL_GPIO_Init+0x324>)
 80069f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f6:	4a65      	ldr	r2, [pc, #404]	; (8006b8c <HAL_GPIO_Init+0x324>)
 80069f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069fc:	6453      	str	r3, [r2, #68]	; 0x44
 80069fe:	4b63      	ldr	r3, [pc, #396]	; (8006b8c <HAL_GPIO_Init+0x324>)
 8006a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a0a:	4a61      	ldr	r2, [pc, #388]	; (8006b90 <HAL_GPIO_Init+0x328>)
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	089b      	lsrs	r3, r3, #2
 8006a10:	3302      	adds	r3, #2
 8006a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	f003 0303 	and.w	r3, r3, #3
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	220f      	movs	r2, #15
 8006a22:	fa02 f303 	lsl.w	r3, r2, r3
 8006a26:	43db      	mvns	r3, r3
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a58      	ldr	r2, [pc, #352]	; (8006b94 <HAL_GPIO_Init+0x32c>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d037      	beq.n	8006aa6 <HAL_GPIO_Init+0x23e>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a57      	ldr	r2, [pc, #348]	; (8006b98 <HAL_GPIO_Init+0x330>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d031      	beq.n	8006aa2 <HAL_GPIO_Init+0x23a>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a56      	ldr	r2, [pc, #344]	; (8006b9c <HAL_GPIO_Init+0x334>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d02b      	beq.n	8006a9e <HAL_GPIO_Init+0x236>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a55      	ldr	r2, [pc, #340]	; (8006ba0 <HAL_GPIO_Init+0x338>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d025      	beq.n	8006a9a <HAL_GPIO_Init+0x232>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a54      	ldr	r2, [pc, #336]	; (8006ba4 <HAL_GPIO_Init+0x33c>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d01f      	beq.n	8006a96 <HAL_GPIO_Init+0x22e>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a53      	ldr	r2, [pc, #332]	; (8006ba8 <HAL_GPIO_Init+0x340>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d019      	beq.n	8006a92 <HAL_GPIO_Init+0x22a>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a52      	ldr	r2, [pc, #328]	; (8006bac <HAL_GPIO_Init+0x344>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d013      	beq.n	8006a8e <HAL_GPIO_Init+0x226>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a51      	ldr	r2, [pc, #324]	; (8006bb0 <HAL_GPIO_Init+0x348>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d00d      	beq.n	8006a8a <HAL_GPIO_Init+0x222>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a50      	ldr	r2, [pc, #320]	; (8006bb4 <HAL_GPIO_Init+0x34c>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d007      	beq.n	8006a86 <HAL_GPIO_Init+0x21e>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a4f      	ldr	r2, [pc, #316]	; (8006bb8 <HAL_GPIO_Init+0x350>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d101      	bne.n	8006a82 <HAL_GPIO_Init+0x21a>
 8006a7e:	2309      	movs	r3, #9
 8006a80:	e012      	b.n	8006aa8 <HAL_GPIO_Init+0x240>
 8006a82:	230a      	movs	r3, #10
 8006a84:	e010      	b.n	8006aa8 <HAL_GPIO_Init+0x240>
 8006a86:	2308      	movs	r3, #8
 8006a88:	e00e      	b.n	8006aa8 <HAL_GPIO_Init+0x240>
 8006a8a:	2307      	movs	r3, #7
 8006a8c:	e00c      	b.n	8006aa8 <HAL_GPIO_Init+0x240>
 8006a8e:	2306      	movs	r3, #6
 8006a90:	e00a      	b.n	8006aa8 <HAL_GPIO_Init+0x240>
 8006a92:	2305      	movs	r3, #5
 8006a94:	e008      	b.n	8006aa8 <HAL_GPIO_Init+0x240>
 8006a96:	2304      	movs	r3, #4
 8006a98:	e006      	b.n	8006aa8 <HAL_GPIO_Init+0x240>
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e004      	b.n	8006aa8 <HAL_GPIO_Init+0x240>
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	e002      	b.n	8006aa8 <HAL_GPIO_Init+0x240>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e000      	b.n	8006aa8 <HAL_GPIO_Init+0x240>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	69fa      	ldr	r2, [r7, #28]
 8006aaa:	f002 0203 	and.w	r2, r2, #3
 8006aae:	0092      	lsls	r2, r2, #2
 8006ab0:	4093      	lsls	r3, r2
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ab8:	4935      	ldr	r1, [pc, #212]	; (8006b90 <HAL_GPIO_Init+0x328>)
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	089b      	lsrs	r3, r3, #2
 8006abe:	3302      	adds	r3, #2
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006ac6:	4b3d      	ldr	r3, [pc, #244]	; (8006bbc <HAL_GPIO_Init+0x354>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	43db      	mvns	r3, r3
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d003      	beq.n	8006aea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006ae2:	69ba      	ldr	r2, [r7, #24]
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006aea:	4a34      	ldr	r2, [pc, #208]	; (8006bbc <HAL_GPIO_Init+0x354>)
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006af0:	4b32      	ldr	r3, [pc, #200]	; (8006bbc <HAL_GPIO_Init+0x354>)
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	43db      	mvns	r3, r3
 8006afa:	69ba      	ldr	r2, [r7, #24]
 8006afc:	4013      	ands	r3, r2
 8006afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d003      	beq.n	8006b14 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006b0c:	69ba      	ldr	r2, [r7, #24]
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006b14:	4a29      	ldr	r2, [pc, #164]	; (8006bbc <HAL_GPIO_Init+0x354>)
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006b1a:	4b28      	ldr	r3, [pc, #160]	; (8006bbc <HAL_GPIO_Init+0x354>)
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	43db      	mvns	r3, r3
 8006b24:	69ba      	ldr	r2, [r7, #24]
 8006b26:	4013      	ands	r3, r2
 8006b28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006b36:	69ba      	ldr	r2, [r7, #24]
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006b3e:	4a1f      	ldr	r2, [pc, #124]	; (8006bbc <HAL_GPIO_Init+0x354>)
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006b44:	4b1d      	ldr	r3, [pc, #116]	; (8006bbc <HAL_GPIO_Init+0x354>)
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	43db      	mvns	r3, r3
 8006b4e:	69ba      	ldr	r2, [r7, #24]
 8006b50:	4013      	ands	r3, r2
 8006b52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d003      	beq.n	8006b68 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006b68:	4a14      	ldr	r2, [pc, #80]	; (8006bbc <HAL_GPIO_Init+0x354>)
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	3301      	adds	r3, #1
 8006b72:	61fb      	str	r3, [r7, #28]
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	2b0f      	cmp	r3, #15
 8006b78:	f67f ae84 	bls.w	8006884 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006b7c:	bf00      	nop
 8006b7e:	bf00      	nop
 8006b80:	3724      	adds	r7, #36	; 0x24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	40023800 	.word	0x40023800
 8006b90:	40013800 	.word	0x40013800
 8006b94:	40020000 	.word	0x40020000
 8006b98:	40020400 	.word	0x40020400
 8006b9c:	40020800 	.word	0x40020800
 8006ba0:	40020c00 	.word	0x40020c00
 8006ba4:	40021000 	.word	0x40021000
 8006ba8:	40021400 	.word	0x40021400
 8006bac:	40021800 	.word	0x40021800
 8006bb0:	40021c00 	.word	0x40021c00
 8006bb4:	40022000 	.word	0x40022000
 8006bb8:	40022400 	.word	0x40022400
 8006bbc:	40013c00 	.word	0x40013c00

08006bc0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	617b      	str	r3, [r7, #20]
 8006bda:	e0d9      	b.n	8006d90 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006bdc:	2201      	movs	r2, #1
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	fa02 f303 	lsl.w	r3, r2, r3
 8006be4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	4013      	ands	r3, r2
 8006bec:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	f040 80c9 	bne.w	8006d8a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006bf8:	4a6b      	ldr	r2, [pc, #428]	; (8006da8 <HAL_GPIO_DeInit+0x1e8>)
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	089b      	lsrs	r3, r3, #2
 8006bfe:	3302      	adds	r3, #2
 8006c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c04:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f003 0303 	and.w	r3, r3, #3
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	220f      	movs	r2, #15
 8006c10:	fa02 f303 	lsl.w	r3, r2, r3
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	4013      	ands	r3, r2
 8006c18:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a63      	ldr	r2, [pc, #396]	; (8006dac <HAL_GPIO_DeInit+0x1ec>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d037      	beq.n	8006c92 <HAL_GPIO_DeInit+0xd2>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a62      	ldr	r2, [pc, #392]	; (8006db0 <HAL_GPIO_DeInit+0x1f0>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d031      	beq.n	8006c8e <HAL_GPIO_DeInit+0xce>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a61      	ldr	r2, [pc, #388]	; (8006db4 <HAL_GPIO_DeInit+0x1f4>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d02b      	beq.n	8006c8a <HAL_GPIO_DeInit+0xca>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a60      	ldr	r2, [pc, #384]	; (8006db8 <HAL_GPIO_DeInit+0x1f8>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d025      	beq.n	8006c86 <HAL_GPIO_DeInit+0xc6>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a5f      	ldr	r2, [pc, #380]	; (8006dbc <HAL_GPIO_DeInit+0x1fc>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d01f      	beq.n	8006c82 <HAL_GPIO_DeInit+0xc2>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a5e      	ldr	r2, [pc, #376]	; (8006dc0 <HAL_GPIO_DeInit+0x200>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d019      	beq.n	8006c7e <HAL_GPIO_DeInit+0xbe>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a5d      	ldr	r2, [pc, #372]	; (8006dc4 <HAL_GPIO_DeInit+0x204>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d013      	beq.n	8006c7a <HAL_GPIO_DeInit+0xba>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a5c      	ldr	r2, [pc, #368]	; (8006dc8 <HAL_GPIO_DeInit+0x208>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d00d      	beq.n	8006c76 <HAL_GPIO_DeInit+0xb6>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a5b      	ldr	r2, [pc, #364]	; (8006dcc <HAL_GPIO_DeInit+0x20c>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d007      	beq.n	8006c72 <HAL_GPIO_DeInit+0xb2>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a5a      	ldr	r2, [pc, #360]	; (8006dd0 <HAL_GPIO_DeInit+0x210>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d101      	bne.n	8006c6e <HAL_GPIO_DeInit+0xae>
 8006c6a:	2309      	movs	r3, #9
 8006c6c:	e012      	b.n	8006c94 <HAL_GPIO_DeInit+0xd4>
 8006c6e:	230a      	movs	r3, #10
 8006c70:	e010      	b.n	8006c94 <HAL_GPIO_DeInit+0xd4>
 8006c72:	2308      	movs	r3, #8
 8006c74:	e00e      	b.n	8006c94 <HAL_GPIO_DeInit+0xd4>
 8006c76:	2307      	movs	r3, #7
 8006c78:	e00c      	b.n	8006c94 <HAL_GPIO_DeInit+0xd4>
 8006c7a:	2306      	movs	r3, #6
 8006c7c:	e00a      	b.n	8006c94 <HAL_GPIO_DeInit+0xd4>
 8006c7e:	2305      	movs	r3, #5
 8006c80:	e008      	b.n	8006c94 <HAL_GPIO_DeInit+0xd4>
 8006c82:	2304      	movs	r3, #4
 8006c84:	e006      	b.n	8006c94 <HAL_GPIO_DeInit+0xd4>
 8006c86:	2303      	movs	r3, #3
 8006c88:	e004      	b.n	8006c94 <HAL_GPIO_DeInit+0xd4>
 8006c8a:	2302      	movs	r3, #2
 8006c8c:	e002      	b.n	8006c94 <HAL_GPIO_DeInit+0xd4>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e000      	b.n	8006c94 <HAL_GPIO_DeInit+0xd4>
 8006c92:	2300      	movs	r3, #0
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	f002 0203 	and.w	r2, r2, #3
 8006c9a:	0092      	lsls	r2, r2, #2
 8006c9c:	4093      	lsls	r3, r2
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d132      	bne.n	8006d0a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006ca4:	4b4b      	ldr	r3, [pc, #300]	; (8006dd4 <HAL_GPIO_DeInit+0x214>)
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	43db      	mvns	r3, r3
 8006cac:	4949      	ldr	r1, [pc, #292]	; (8006dd4 <HAL_GPIO_DeInit+0x214>)
 8006cae:	4013      	ands	r3, r2
 8006cb0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006cb2:	4b48      	ldr	r3, [pc, #288]	; (8006dd4 <HAL_GPIO_DeInit+0x214>)
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	43db      	mvns	r3, r3
 8006cba:	4946      	ldr	r1, [pc, #280]	; (8006dd4 <HAL_GPIO_DeInit+0x214>)
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006cc0:	4b44      	ldr	r3, [pc, #272]	; (8006dd4 <HAL_GPIO_DeInit+0x214>)
 8006cc2:	689a      	ldr	r2, [r3, #8]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	43db      	mvns	r3, r3
 8006cc8:	4942      	ldr	r1, [pc, #264]	; (8006dd4 <HAL_GPIO_DeInit+0x214>)
 8006cca:	4013      	ands	r3, r2
 8006ccc:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006cce:	4b41      	ldr	r3, [pc, #260]	; (8006dd4 <HAL_GPIO_DeInit+0x214>)
 8006cd0:	68da      	ldr	r2, [r3, #12]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	43db      	mvns	r3, r3
 8006cd6:	493f      	ldr	r1, [pc, #252]	; (8006dd4 <HAL_GPIO_DeInit+0x214>)
 8006cd8:	4013      	ands	r3, r2
 8006cda:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	f003 0303 	and.w	r3, r3, #3
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	220f      	movs	r2, #15
 8006ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cea:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006cec:	4a2e      	ldr	r2, [pc, #184]	; (8006da8 <HAL_GPIO_DeInit+0x1e8>)
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	089b      	lsrs	r3, r3, #2
 8006cf2:	3302      	adds	r3, #2
 8006cf4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	43da      	mvns	r2, r3
 8006cfc:	482a      	ldr	r0, [pc, #168]	; (8006da8 <HAL_GPIO_DeInit+0x1e8>)
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	089b      	lsrs	r3, r3, #2
 8006d02:	400a      	ands	r2, r1
 8006d04:	3302      	adds	r3, #2
 8006d06:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	2103      	movs	r1, #3
 8006d14:	fa01 f303 	lsl.w	r3, r1, r3
 8006d18:	43db      	mvns	r3, r3
 8006d1a:	401a      	ands	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	08da      	lsrs	r2, r3, #3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	3208      	adds	r2, #8
 8006d28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	220f      	movs	r2, #15
 8006d36:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3a:	43db      	mvns	r3, r3
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	08d2      	lsrs	r2, r2, #3
 8006d40:	4019      	ands	r1, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	3208      	adds	r2, #8
 8006d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68da      	ldr	r2, [r3, #12]
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	005b      	lsls	r3, r3, #1
 8006d52:	2103      	movs	r1, #3
 8006d54:	fa01 f303 	lsl.w	r3, r1, r3
 8006d58:	43db      	mvns	r3, r3
 8006d5a:	401a      	ands	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685a      	ldr	r2, [r3, #4]
 8006d64:	2101      	movs	r1, #1
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	fa01 f303 	lsl.w	r3, r1, r3
 8006d6c:	43db      	mvns	r3, r3
 8006d6e:	401a      	ands	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	689a      	ldr	r2, [r3, #8]
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	005b      	lsls	r3, r3, #1
 8006d7c:	2103      	movs	r1, #3
 8006d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d82:	43db      	mvns	r3, r3
 8006d84:	401a      	ands	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	617b      	str	r3, [r7, #20]
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	2b0f      	cmp	r3, #15
 8006d94:	f67f af22 	bls.w	8006bdc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006d98:	bf00      	nop
 8006d9a:	bf00      	nop
 8006d9c:	371c      	adds	r7, #28
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	40013800 	.word	0x40013800
 8006dac:	40020000 	.word	0x40020000
 8006db0:	40020400 	.word	0x40020400
 8006db4:	40020800 	.word	0x40020800
 8006db8:	40020c00 	.word	0x40020c00
 8006dbc:	40021000 	.word	0x40021000
 8006dc0:	40021400 	.word	0x40021400
 8006dc4:	40021800 	.word	0x40021800
 8006dc8:	40021c00 	.word	0x40021c00
 8006dcc:	40022000 	.word	0x40022000
 8006dd0:	40022400 	.word	0x40022400
 8006dd4:	40013c00 	.word	0x40013c00

08006dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	460b      	mov	r3, r1
 8006de2:	807b      	strh	r3, [r7, #2]
 8006de4:	4613      	mov	r3, r2
 8006de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006de8:	787b      	ldrb	r3, [r7, #1]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006dee:	887a      	ldrh	r2, [r7, #2]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006df4:	e003      	b.n	8006dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006df6:	887b      	ldrh	r3, [r7, #2]
 8006df8:	041a      	lsls	r2, r3, #16
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	619a      	str	r2, [r3, #24]
}
 8006dfe:	bf00      	nop
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
	...

08006e0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e12b      	b.n	8007076 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d106      	bne.n	8006e38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7fd f8b2 	bl	8003f9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2224      	movs	r2, #36	; 0x24
 8006e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f022 0201 	bic.w	r2, r2, #1
 8006e4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006e70:	f002 f826 	bl	8008ec0 <HAL_RCC_GetPCLK1Freq>
 8006e74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	4a81      	ldr	r2, [pc, #516]	; (8007080 <HAL_I2C_Init+0x274>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d807      	bhi.n	8006e90 <HAL_I2C_Init+0x84>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	4a80      	ldr	r2, [pc, #512]	; (8007084 <HAL_I2C_Init+0x278>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	bf94      	ite	ls
 8006e88:	2301      	movls	r3, #1
 8006e8a:	2300      	movhi	r3, #0
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	e006      	b.n	8006e9e <HAL_I2C_Init+0x92>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	4a7d      	ldr	r2, [pc, #500]	; (8007088 <HAL_I2C_Init+0x27c>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	bf94      	ite	ls
 8006e98:	2301      	movls	r3, #1
 8006e9a:	2300      	movhi	r3, #0
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d001      	beq.n	8006ea6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e0e7      	b.n	8007076 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	4a78      	ldr	r2, [pc, #480]	; (800708c <HAL_I2C_Init+0x280>)
 8006eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8006eae:	0c9b      	lsrs	r3, r3, #18
 8006eb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	4a6a      	ldr	r2, [pc, #424]	; (8007080 <HAL_I2C_Init+0x274>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d802      	bhi.n	8006ee0 <HAL_I2C_Init+0xd4>
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	3301      	adds	r3, #1
 8006ede:	e009      	b.n	8006ef4 <HAL_I2C_Init+0xe8>
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006ee6:	fb02 f303 	mul.w	r3, r2, r3
 8006eea:	4a69      	ldr	r2, [pc, #420]	; (8007090 <HAL_I2C_Init+0x284>)
 8006eec:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef0:	099b      	lsrs	r3, r3, #6
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	6812      	ldr	r2, [r2, #0]
 8006ef8:	430b      	orrs	r3, r1
 8006efa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	69db      	ldr	r3, [r3, #28]
 8006f02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006f06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	495c      	ldr	r1, [pc, #368]	; (8007080 <HAL_I2C_Init+0x274>)
 8006f10:	428b      	cmp	r3, r1
 8006f12:	d819      	bhi.n	8006f48 <HAL_I2C_Init+0x13c>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	1e59      	subs	r1, r3, #1
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	005b      	lsls	r3, r3, #1
 8006f1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f22:	1c59      	adds	r1, r3, #1
 8006f24:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006f28:	400b      	ands	r3, r1
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00a      	beq.n	8006f44 <HAL_I2C_Init+0x138>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	1e59      	subs	r1, r3, #1
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	005b      	lsls	r3, r3, #1
 8006f38:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f42:	e051      	b.n	8006fe8 <HAL_I2C_Init+0x1dc>
 8006f44:	2304      	movs	r3, #4
 8006f46:	e04f      	b.n	8006fe8 <HAL_I2C_Init+0x1dc>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d111      	bne.n	8006f74 <HAL_I2C_Init+0x168>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	1e58      	subs	r0, r3, #1
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6859      	ldr	r1, [r3, #4]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	005b      	lsls	r3, r3, #1
 8006f5c:	440b      	add	r3, r1
 8006f5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f62:	3301      	adds	r3, #1
 8006f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	bf0c      	ite	eq
 8006f6c:	2301      	moveq	r3, #1
 8006f6e:	2300      	movne	r3, #0
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	e012      	b.n	8006f9a <HAL_I2C_Init+0x18e>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	1e58      	subs	r0, r3, #1
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6859      	ldr	r1, [r3, #4]
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	440b      	add	r3, r1
 8006f82:	0099      	lsls	r1, r3, #2
 8006f84:	440b      	add	r3, r1
 8006f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	bf0c      	ite	eq
 8006f94:	2301      	moveq	r3, #1
 8006f96:	2300      	movne	r3, #0
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <HAL_I2C_Init+0x196>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e022      	b.n	8006fe8 <HAL_I2C_Init+0x1dc>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10e      	bne.n	8006fc8 <HAL_I2C_Init+0x1bc>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	1e58      	subs	r0, r3, #1
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6859      	ldr	r1, [r3, #4]
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	005b      	lsls	r3, r3, #1
 8006fb6:	440b      	add	r3, r1
 8006fb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fc6:	e00f      	b.n	8006fe8 <HAL_I2C_Init+0x1dc>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	1e58      	subs	r0, r3, #1
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6859      	ldr	r1, [r3, #4]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	440b      	add	r3, r1
 8006fd6:	0099      	lsls	r1, r3, #2
 8006fd8:	440b      	add	r3, r1
 8006fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fde:	3301      	adds	r3, #1
 8006fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fe4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fe8:	6879      	ldr	r1, [r7, #4]
 8006fea:	6809      	ldr	r1, [r1, #0]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	69da      	ldr	r2, [r3, #28]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	431a      	orrs	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	430a      	orrs	r2, r1
 800700a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007016:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	6911      	ldr	r1, [r2, #16]
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	68d2      	ldr	r2, [r2, #12]
 8007022:	4311      	orrs	r1, r2
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	6812      	ldr	r2, [r2, #0]
 8007028:	430b      	orrs	r3, r1
 800702a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	695a      	ldr	r2, [r3, #20]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	431a      	orrs	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	430a      	orrs	r2, r1
 8007046:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f042 0201 	orr.w	r2, r2, #1
 8007056:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2220      	movs	r2, #32
 8007062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	000186a0 	.word	0x000186a0
 8007084:	001e847f 	.word	0x001e847f
 8007088:	003d08ff 	.word	0x003d08ff
 800708c:	431bde83 	.word	0x431bde83
 8007090:	10624dd3 	.word	0x10624dd3

08007094 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e021      	b.n	80070ea <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2224      	movs	r2, #36	; 0x24
 80070aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 0201 	bic.w	r2, r2, #1
 80070bc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7fc ffd6 	bl	8004070 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
	...

080070f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b088      	sub	sp, #32
 80070f8:	af02      	add	r7, sp, #8
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	4608      	mov	r0, r1
 80070fe:	4611      	mov	r1, r2
 8007100:	461a      	mov	r2, r3
 8007102:	4603      	mov	r3, r0
 8007104:	817b      	strh	r3, [r7, #10]
 8007106:	460b      	mov	r3, r1
 8007108:	813b      	strh	r3, [r7, #8]
 800710a:	4613      	mov	r3, r2
 800710c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800710e:	f7fe ffff 	bl	8006110 <HAL_GetTick>
 8007112:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2b20      	cmp	r3, #32
 800711e:	f040 80d9 	bne.w	80072d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	2319      	movs	r3, #25
 8007128:	2201      	movs	r2, #1
 800712a:	496d      	ldr	r1, [pc, #436]	; (80072e0 <HAL_I2C_Mem_Write+0x1ec>)
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f000 fc8d 	bl	8007a4c <I2C_WaitOnFlagUntilTimeout>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d001      	beq.n	800713c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007138:	2302      	movs	r3, #2
 800713a:	e0cc      	b.n	80072d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007142:	2b01      	cmp	r3, #1
 8007144:	d101      	bne.n	800714a <HAL_I2C_Mem_Write+0x56>
 8007146:	2302      	movs	r3, #2
 8007148:	e0c5      	b.n	80072d6 <HAL_I2C_Mem_Write+0x1e2>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0301 	and.w	r3, r3, #1
 800715c:	2b01      	cmp	r3, #1
 800715e:	d007      	beq.n	8007170 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f042 0201 	orr.w	r2, r2, #1
 800716e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800717e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2221      	movs	r2, #33	; 0x21
 8007184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2240      	movs	r2, #64	; 0x40
 800718c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6a3a      	ldr	r2, [r7, #32]
 800719a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80071a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	4a4d      	ldr	r2, [pc, #308]	; (80072e4 <HAL_I2C_Mem_Write+0x1f0>)
 80071b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80071b2:	88f8      	ldrh	r0, [r7, #6]
 80071b4:	893a      	ldrh	r2, [r7, #8]
 80071b6:	8979      	ldrh	r1, [r7, #10]
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	9301      	str	r3, [sp, #4]
 80071bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	4603      	mov	r3, r0
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f000 fac4 	bl	8007750 <I2C_RequestMemoryWrite>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d052      	beq.n	8007274 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e081      	b.n	80072d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f000 fd0e 	bl	8007bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00d      	beq.n	80071fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	2b04      	cmp	r3, #4
 80071e8:	d107      	bne.n	80071fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e06b      	b.n	80072d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007202:	781a      	ldrb	r2, [r3, #0]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720e:	1c5a      	adds	r2, r3, #1
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007218:	3b01      	subs	r3, #1
 800721a:	b29a      	uxth	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007224:	b29b      	uxth	r3, r3
 8007226:	3b01      	subs	r3, #1
 8007228:	b29a      	uxth	r2, r3
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	f003 0304 	and.w	r3, r3, #4
 8007238:	2b04      	cmp	r3, #4
 800723a:	d11b      	bne.n	8007274 <HAL_I2C_Mem_Write+0x180>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007240:	2b00      	cmp	r3, #0
 8007242:	d017      	beq.n	8007274 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007248:	781a      	ldrb	r2, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007254:	1c5a      	adds	r2, r3, #1
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800725e:	3b01      	subs	r3, #1
 8007260:	b29a      	uxth	r2, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800726a:	b29b      	uxth	r3, r3
 800726c:	3b01      	subs	r3, #1
 800726e:	b29a      	uxth	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1aa      	bne.n	80071d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f000 fcfa 	bl	8007c7a <I2C_WaitOnBTFFlagUntilTimeout>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00d      	beq.n	80072a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007290:	2b04      	cmp	r3, #4
 8007292:	d107      	bne.n	80072a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e016      	b.n	80072d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2220      	movs	r2, #32
 80072bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	e000      	b.n	80072d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80072d4:	2302      	movs	r3, #2
  }
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3718      	adds	r7, #24
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	00100002 	.word	0x00100002
 80072e4:	ffff0000 	.word	0xffff0000

080072e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b08c      	sub	sp, #48	; 0x30
 80072ec:	af02      	add	r7, sp, #8
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	4608      	mov	r0, r1
 80072f2:	4611      	mov	r1, r2
 80072f4:	461a      	mov	r2, r3
 80072f6:	4603      	mov	r3, r0
 80072f8:	817b      	strh	r3, [r7, #10]
 80072fa:	460b      	mov	r3, r1
 80072fc:	813b      	strh	r3, [r7, #8]
 80072fe:	4613      	mov	r3, r2
 8007300:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007302:	f7fe ff05 	bl	8006110 <HAL_GetTick>
 8007306:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800730e:	b2db      	uxtb	r3, r3
 8007310:	2b20      	cmp	r3, #32
 8007312:	f040 8208 	bne.w	8007726 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	2319      	movs	r3, #25
 800731c:	2201      	movs	r2, #1
 800731e:	497b      	ldr	r1, [pc, #492]	; (800750c <HAL_I2C_Mem_Read+0x224>)
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f000 fb93 	bl	8007a4c <I2C_WaitOnFlagUntilTimeout>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d001      	beq.n	8007330 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800732c:	2302      	movs	r3, #2
 800732e:	e1fb      	b.n	8007728 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007336:	2b01      	cmp	r3, #1
 8007338:	d101      	bne.n	800733e <HAL_I2C_Mem_Read+0x56>
 800733a:	2302      	movs	r3, #2
 800733c:	e1f4      	b.n	8007728 <HAL_I2C_Mem_Read+0x440>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0301 	and.w	r3, r3, #1
 8007350:	2b01      	cmp	r3, #1
 8007352:	d007      	beq.n	8007364 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0201 	orr.w	r2, r2, #1
 8007362:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007372:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2222      	movs	r2, #34	; 0x22
 8007378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2240      	movs	r2, #64	; 0x40
 8007380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2200      	movs	r2, #0
 8007388:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800738e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007394:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800739a:	b29a      	uxth	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	4a5b      	ldr	r2, [pc, #364]	; (8007510 <HAL_I2C_Mem_Read+0x228>)
 80073a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80073a6:	88f8      	ldrh	r0, [r7, #6]
 80073a8:	893a      	ldrh	r2, [r7, #8]
 80073aa:	8979      	ldrh	r1, [r7, #10]
 80073ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ae:	9301      	str	r3, [sp, #4]
 80073b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	4603      	mov	r3, r0
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f000 fa60 	bl	800787c <I2C_RequestMemoryRead>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d001      	beq.n	80073c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e1b0      	b.n	8007728 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d113      	bne.n	80073f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073ce:	2300      	movs	r3, #0
 80073d0:	623b      	str	r3, [r7, #32]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	623b      	str	r3, [r7, #32]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	623b      	str	r3, [r7, #32]
 80073e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	e184      	b.n	8007700 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d11b      	bne.n	8007436 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800740c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800740e:	2300      	movs	r3, #0
 8007410:	61fb      	str	r3, [r7, #28]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	695b      	ldr	r3, [r3, #20]
 8007418:	61fb      	str	r3, [r7, #28]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	61fb      	str	r3, [r7, #28]
 8007422:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007432:	601a      	str	r2, [r3, #0]
 8007434:	e164      	b.n	8007700 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800743a:	2b02      	cmp	r3, #2
 800743c:	d11b      	bne.n	8007476 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800744c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800745c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800745e:	2300      	movs	r3, #0
 8007460:	61bb      	str	r3, [r7, #24]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	61bb      	str	r3, [r7, #24]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	61bb      	str	r3, [r7, #24]
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	e144      	b.n	8007700 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007476:	2300      	movs	r3, #0
 8007478:	617b      	str	r3, [r7, #20]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	695b      	ldr	r3, [r3, #20]
 8007480:	617b      	str	r3, [r7, #20]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	617b      	str	r3, [r7, #20]
 800748a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800748c:	e138      	b.n	8007700 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007492:	2b03      	cmp	r3, #3
 8007494:	f200 80f1 	bhi.w	800767a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800749c:	2b01      	cmp	r3, #1
 800749e:	d123      	bne.n	80074e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f000 fc29 	bl	8007cfc <I2C_WaitOnRXNEFlagUntilTimeout>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d001      	beq.n	80074b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e139      	b.n	8007728 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	691a      	ldr	r2, [r3, #16]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074be:	b2d2      	uxtb	r2, r2
 80074c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c6:	1c5a      	adds	r2, r3, #1
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074d0:	3b01      	subs	r3, #1
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074dc:	b29b      	uxth	r3, r3
 80074de:	3b01      	subs	r3, #1
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074e6:	e10b      	b.n	8007700 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d14e      	bne.n	800758e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f6:	2200      	movs	r2, #0
 80074f8:	4906      	ldr	r1, [pc, #24]	; (8007514 <HAL_I2C_Mem_Read+0x22c>)
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f000 faa6 	bl	8007a4c <I2C_WaitOnFlagUntilTimeout>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d008      	beq.n	8007518 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e10e      	b.n	8007728 <HAL_I2C_Mem_Read+0x440>
 800750a:	bf00      	nop
 800750c:	00100002 	.word	0x00100002
 8007510:	ffff0000 	.word	0xffff0000
 8007514:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007526:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	691a      	ldr	r2, [r3, #16]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007532:	b2d2      	uxtb	r2, r2
 8007534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753a:	1c5a      	adds	r2, r3, #1
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007544:	3b01      	subs	r3, #1
 8007546:	b29a      	uxth	r2, r3
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007550:	b29b      	uxth	r3, r3
 8007552:	3b01      	subs	r3, #1
 8007554:	b29a      	uxth	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	691a      	ldr	r2, [r3, #16]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	b2d2      	uxtb	r2, r2
 8007566:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756c:	1c5a      	adds	r2, r3, #1
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007576:	3b01      	subs	r3, #1
 8007578:	b29a      	uxth	r2, r3
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007582:	b29b      	uxth	r3, r3
 8007584:	3b01      	subs	r3, #1
 8007586:	b29a      	uxth	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800758c:	e0b8      	b.n	8007700 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007594:	2200      	movs	r2, #0
 8007596:	4966      	ldr	r1, [pc, #408]	; (8007730 <HAL_I2C_Mem_Read+0x448>)
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f000 fa57 	bl	8007a4c <I2C_WaitOnFlagUntilTimeout>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e0bf      	b.n	8007728 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	691a      	ldr	r2, [r3, #16]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c2:	b2d2      	uxtb	r2, r2
 80075c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ca:	1c5a      	adds	r2, r3, #1
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075d4:	3b01      	subs	r3, #1
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	3b01      	subs	r3, #1
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f0:	2200      	movs	r2, #0
 80075f2:	494f      	ldr	r1, [pc, #316]	; (8007730 <HAL_I2C_Mem_Read+0x448>)
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 fa29 	bl	8007a4c <I2C_WaitOnFlagUntilTimeout>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d001      	beq.n	8007604 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e091      	b.n	8007728 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007612:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	691a      	ldr	r2, [r3, #16]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761e:	b2d2      	uxtb	r2, r2
 8007620:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007626:	1c5a      	adds	r2, r3, #1
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007630:	3b01      	subs	r3, #1
 8007632:	b29a      	uxth	r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800763c:	b29b      	uxth	r3, r3
 800763e:	3b01      	subs	r3, #1
 8007640:	b29a      	uxth	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	691a      	ldr	r2, [r3, #16]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007650:	b2d2      	uxtb	r2, r2
 8007652:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007658:	1c5a      	adds	r2, r3, #1
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007662:	3b01      	subs	r3, #1
 8007664:	b29a      	uxth	r2, r3
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800766e:	b29b      	uxth	r3, r3
 8007670:	3b01      	subs	r3, #1
 8007672:	b29a      	uxth	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007678:	e042      	b.n	8007700 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800767a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800767c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f000 fb3c 	bl	8007cfc <I2C_WaitOnRXNEFlagUntilTimeout>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e04c      	b.n	8007728 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	691a      	ldr	r2, [r3, #16]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007698:	b2d2      	uxtb	r2, r2
 800769a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a0:	1c5a      	adds	r2, r3, #1
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076aa:	3b01      	subs	r3, #1
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	3b01      	subs	r3, #1
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	f003 0304 	and.w	r3, r3, #4
 80076ca:	2b04      	cmp	r3, #4
 80076cc:	d118      	bne.n	8007700 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	691a      	ldr	r2, [r3, #16]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d8:	b2d2      	uxtb	r2, r2
 80076da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e0:	1c5a      	adds	r2, r3, #1
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ea:	3b01      	subs	r3, #1
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	3b01      	subs	r3, #1
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007704:	2b00      	cmp	r3, #0
 8007706:	f47f aec2 	bne.w	800748e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2220      	movs	r2, #32
 800770e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	e000      	b.n	8007728 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007726:	2302      	movs	r3, #2
  }
}
 8007728:	4618      	mov	r0, r3
 800772a:	3728      	adds	r7, #40	; 0x28
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	00010004 	.word	0x00010004

08007734 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007742:	b2db      	uxtb	r3, r3
}
 8007744:	4618      	mov	r0, r3
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b088      	sub	sp, #32
 8007754:	af02      	add	r7, sp, #8
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	4608      	mov	r0, r1
 800775a:	4611      	mov	r1, r2
 800775c:	461a      	mov	r2, r3
 800775e:	4603      	mov	r3, r0
 8007760:	817b      	strh	r3, [r7, #10]
 8007762:	460b      	mov	r3, r1
 8007764:	813b      	strh	r3, [r7, #8]
 8007766:	4613      	mov	r3, r2
 8007768:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007778:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	6a3b      	ldr	r3, [r7, #32]
 8007780:	2200      	movs	r2, #0
 8007782:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f000 f960 	bl	8007a4c <I2C_WaitOnFlagUntilTimeout>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00d      	beq.n	80077ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800779c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077a0:	d103      	bne.n	80077aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e05f      	b.n	800786e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80077ae:	897b      	ldrh	r3, [r7, #10]
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	461a      	mov	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80077bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c0:	6a3a      	ldr	r2, [r7, #32]
 80077c2:	492d      	ldr	r1, [pc, #180]	; (8007878 <I2C_RequestMemoryWrite+0x128>)
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f000 f998 	bl	8007afa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d001      	beq.n	80077d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e04c      	b.n	800786e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077d4:	2300      	movs	r3, #0
 80077d6:	617b      	str	r3, [r7, #20]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	695b      	ldr	r3, [r3, #20]
 80077de:	617b      	str	r3, [r7, #20]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	617b      	str	r3, [r7, #20]
 80077e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ec:	6a39      	ldr	r1, [r7, #32]
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f000 fa02 	bl	8007bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00d      	beq.n	8007816 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fe:	2b04      	cmp	r3, #4
 8007800:	d107      	bne.n	8007812 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007810:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e02b      	b.n	800786e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007816:	88fb      	ldrh	r3, [r7, #6]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d105      	bne.n	8007828 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800781c:	893b      	ldrh	r3, [r7, #8]
 800781e:	b2da      	uxtb	r2, r3
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	611a      	str	r2, [r3, #16]
 8007826:	e021      	b.n	800786c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007828:	893b      	ldrh	r3, [r7, #8]
 800782a:	0a1b      	lsrs	r3, r3, #8
 800782c:	b29b      	uxth	r3, r3
 800782e:	b2da      	uxtb	r2, r3
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007838:	6a39      	ldr	r1, [r7, #32]
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f000 f9dc 	bl	8007bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00d      	beq.n	8007862 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784a:	2b04      	cmp	r3, #4
 800784c:	d107      	bne.n	800785e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800785c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e005      	b.n	800786e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007862:	893b      	ldrh	r3, [r7, #8]
 8007864:	b2da      	uxtb	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3718      	adds	r7, #24
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	00010002 	.word	0x00010002

0800787c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b088      	sub	sp, #32
 8007880:	af02      	add	r7, sp, #8
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	4608      	mov	r0, r1
 8007886:	4611      	mov	r1, r2
 8007888:	461a      	mov	r2, r3
 800788a:	4603      	mov	r3, r0
 800788c:	817b      	strh	r3, [r7, #10]
 800788e:	460b      	mov	r3, r1
 8007890:	813b      	strh	r3, [r7, #8]
 8007892:	4613      	mov	r3, r2
 8007894:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	6a3b      	ldr	r3, [r7, #32]
 80078bc:	2200      	movs	r2, #0
 80078be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f000 f8c2 	bl	8007a4c <I2C_WaitOnFlagUntilTimeout>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00d      	beq.n	80078ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078dc:	d103      	bne.n	80078e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	e0aa      	b.n	8007a40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80078ea:	897b      	ldrh	r3, [r7, #10]
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	461a      	mov	r2, r3
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80078f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fc:	6a3a      	ldr	r2, [r7, #32]
 80078fe:	4952      	ldr	r1, [pc, #328]	; (8007a48 <I2C_RequestMemoryRead+0x1cc>)
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 f8fa 	bl	8007afa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d001      	beq.n	8007910 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e097      	b.n	8007a40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007910:	2300      	movs	r3, #0
 8007912:	617b      	str	r3, [r7, #20]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	617b      	str	r3, [r7, #20]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	617b      	str	r3, [r7, #20]
 8007924:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007928:	6a39      	ldr	r1, [r7, #32]
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f000 f964 	bl	8007bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00d      	beq.n	8007952 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793a:	2b04      	cmp	r3, #4
 800793c:	d107      	bne.n	800794e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800794c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e076      	b.n	8007a40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007952:	88fb      	ldrh	r3, [r7, #6]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d105      	bne.n	8007964 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007958:	893b      	ldrh	r3, [r7, #8]
 800795a:	b2da      	uxtb	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	611a      	str	r2, [r3, #16]
 8007962:	e021      	b.n	80079a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007964:	893b      	ldrh	r3, [r7, #8]
 8007966:	0a1b      	lsrs	r3, r3, #8
 8007968:	b29b      	uxth	r3, r3
 800796a:	b2da      	uxtb	r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007974:	6a39      	ldr	r1, [r7, #32]
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f000 f93e 	bl	8007bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00d      	beq.n	800799e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007986:	2b04      	cmp	r3, #4
 8007988:	d107      	bne.n	800799a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007998:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e050      	b.n	8007a40 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800799e:	893b      	ldrh	r3, [r7, #8]
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079aa:	6a39      	ldr	r1, [r7, #32]
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 f923 	bl	8007bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00d      	beq.n	80079d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079bc:	2b04      	cmp	r3, #4
 80079be:	d107      	bne.n	80079d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e035      	b.n	8007a40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80079e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	6a3b      	ldr	r3, [r7, #32]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f000 f82b 	bl	8007a4c <I2C_WaitOnFlagUntilTimeout>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00d      	beq.n	8007a18 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a0a:	d103      	bne.n	8007a14 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007a14:	2303      	movs	r3, #3
 8007a16:	e013      	b.n	8007a40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007a18:	897b      	ldrh	r3, [r7, #10]
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	f043 0301 	orr.w	r3, r3, #1
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2a:	6a3a      	ldr	r2, [r7, #32]
 8007a2c:	4906      	ldr	r1, [pc, #24]	; (8007a48 <I2C_RequestMemoryRead+0x1cc>)
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f000 f863 	bl	8007afa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e000      	b.n	8007a40 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3718      	adds	r7, #24
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	00010002 	.word	0x00010002

08007a4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	603b      	str	r3, [r7, #0]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a5c:	e025      	b.n	8007aaa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a64:	d021      	beq.n	8007aaa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a66:	f7fe fb53 	bl	8006110 <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	683a      	ldr	r2, [r7, #0]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d302      	bcc.n	8007a7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d116      	bne.n	8007aaa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2220      	movs	r2, #32
 8007a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a96:	f043 0220 	orr.w	r2, r3, #32
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e023      	b.n	8007af2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	0c1b      	lsrs	r3, r3, #16
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d10d      	bne.n	8007ad0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	695b      	ldr	r3, [r3, #20]
 8007aba:	43da      	mvns	r2, r3
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	4013      	ands	r3, r2
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	bf0c      	ite	eq
 8007ac6:	2301      	moveq	r3, #1
 8007ac8:	2300      	movne	r3, #0
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	461a      	mov	r2, r3
 8007ace:	e00c      	b.n	8007aea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	43da      	mvns	r2, r3
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	4013      	ands	r3, r2
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	bf0c      	ite	eq
 8007ae2:	2301      	moveq	r3, #1
 8007ae4:	2300      	movne	r3, #0
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	461a      	mov	r2, r3
 8007aea:	79fb      	ldrb	r3, [r7, #7]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d0b6      	beq.n	8007a5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b084      	sub	sp, #16
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	60f8      	str	r0, [r7, #12]
 8007b02:	60b9      	str	r1, [r7, #8]
 8007b04:	607a      	str	r2, [r7, #4]
 8007b06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b08:	e051      	b.n	8007bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	695b      	ldr	r3, [r3, #20]
 8007b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b18:	d123      	bne.n	8007b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2220      	movs	r2, #32
 8007b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4e:	f043 0204 	orr.w	r2, r3, #4
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e046      	b.n	8007bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b68:	d021      	beq.n	8007bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b6a:	f7fe fad1 	bl	8006110 <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d302      	bcc.n	8007b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d116      	bne.n	8007bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9a:	f043 0220 	orr.w	r2, r3, #32
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e020      	b.n	8007bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	0c1b      	lsrs	r3, r3, #16
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d10c      	bne.n	8007bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	43da      	mvns	r2, r3
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	bf14      	ite	ne
 8007bca:	2301      	movne	r3, #1
 8007bcc:	2300      	moveq	r3, #0
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	e00b      	b.n	8007bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	43da      	mvns	r2, r3
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	4013      	ands	r3, r2
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	bf14      	ite	ne
 8007be4:	2301      	movne	r3, #1
 8007be6:	2300      	moveq	r3, #0
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d18d      	bne.n	8007b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c04:	e02d      	b.n	8007c62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f000 f8ce 	bl	8007da8 <I2C_IsAcknowledgeFailed>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e02d      	b.n	8007c72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c1c:	d021      	beq.n	8007c62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c1e:	f7fe fa77 	bl	8006110 <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d302      	bcc.n	8007c34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d116      	bne.n	8007c62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2220      	movs	r2, #32
 8007c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4e:	f043 0220 	orr.w	r2, r3, #32
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e007      	b.n	8007c72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	695b      	ldr	r3, [r3, #20]
 8007c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c6c:	2b80      	cmp	r3, #128	; 0x80
 8007c6e:	d1ca      	bne.n	8007c06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b084      	sub	sp, #16
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	60f8      	str	r0, [r7, #12]
 8007c82:	60b9      	str	r1, [r7, #8]
 8007c84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c86:	e02d      	b.n	8007ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f000 f88d 	bl	8007da8 <I2C_IsAcknowledgeFailed>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d001      	beq.n	8007c98 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e02d      	b.n	8007cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c9e:	d021      	beq.n	8007ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ca0:	f7fe fa36 	bl	8006110 <HAL_GetTick>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	68ba      	ldr	r2, [r7, #8]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d302      	bcc.n	8007cb6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d116      	bne.n	8007ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2220      	movs	r2, #32
 8007cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd0:	f043 0220 	orr.w	r2, r3, #32
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e007      	b.n	8007cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	695b      	ldr	r3, [r3, #20]
 8007cea:	f003 0304 	and.w	r3, r3, #4
 8007cee:	2b04      	cmp	r3, #4
 8007cf0:	d1ca      	bne.n	8007c88 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d08:	e042      	b.n	8007d90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	695b      	ldr	r3, [r3, #20]
 8007d10:	f003 0310 	and.w	r3, r3, #16
 8007d14:	2b10      	cmp	r3, #16
 8007d16:	d119      	bne.n	8007d4c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f06f 0210 	mvn.w	r2, #16
 8007d20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2220      	movs	r2, #32
 8007d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e029      	b.n	8007da0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d4c:	f7fe f9e0 	bl	8006110 <HAL_GetTick>
 8007d50:	4602      	mov	r2, r0
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d302      	bcc.n	8007d62 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d116      	bne.n	8007d90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2220      	movs	r2, #32
 8007d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7c:	f043 0220 	orr.w	r2, r3, #32
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e007      	b.n	8007da0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d9a:	2b40      	cmp	r3, #64	; 0x40
 8007d9c:	d1b5      	bne.n	8007d0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dbe:	d11b      	bne.n	8007df8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007dc8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2220      	movs	r2, #32
 8007dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de4:	f043 0204 	orr.w	r2, r3, #4
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e000      	b.n	8007dfa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b083      	sub	sp, #12
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b20      	cmp	r3, #32
 8007e1a:	d129      	bne.n	8007e70 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2224      	movs	r2, #36	; 0x24
 8007e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f022 0201 	bic.w	r2, r2, #1
 8007e32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f022 0210 	bic.w	r2, r2, #16
 8007e42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	683a      	ldr	r2, [r7, #0]
 8007e50:	430a      	orrs	r2, r1
 8007e52:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f042 0201 	orr.w	r2, r2, #1
 8007e62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2220      	movs	r2, #32
 8007e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	e000      	b.n	8007e72 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007e70:	2302      	movs	r3, #2
  }
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b085      	sub	sp, #20
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b20      	cmp	r3, #32
 8007e96:	d12a      	bne.n	8007eee <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2224      	movs	r2, #36	; 0x24
 8007e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f022 0201 	bic.w	r2, r2, #1
 8007eae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007eb8:	89fb      	ldrh	r3, [r7, #14]
 8007eba:	f023 030f 	bic.w	r3, r3, #15
 8007ebe:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	89fb      	ldrh	r3, [r7, #14]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	89fa      	ldrh	r2, [r7, #14]
 8007ed0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f042 0201 	orr.w	r2, r2, #1
 8007ee0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	e000      	b.n	8007ef0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007eee:	2302      	movs	r3, #2
  }
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d101      	bne.n	8007f0e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e0bf      	b.n	800808e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d106      	bne.n	8007f28 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f7fc f94a 	bl	80041bc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2202      	movs	r2, #2
 8007f2c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	699a      	ldr	r2, [r3, #24]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007f3e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	6999      	ldr	r1, [r3, #24]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	685a      	ldr	r2, [r3, #4]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007f54:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	430a      	orrs	r2, r1
 8007f62:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6899      	ldr	r1, [r3, #8]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	4b4a      	ldr	r3, [pc, #296]	; (8008098 <HAL_LTDC_Init+0x19c>)
 8007f70:	400b      	ands	r3, r1
 8007f72:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	695b      	ldr	r3, [r3, #20]
 8007f78:	041b      	lsls	r3, r3, #16
 8007f7a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6899      	ldr	r1, [r3, #8]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	699a      	ldr	r2, [r3, #24]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68d9      	ldr	r1, [r3, #12]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	4b3e      	ldr	r3, [pc, #248]	; (8008098 <HAL_LTDC_Init+0x19c>)
 8007f9e:	400b      	ands	r3, r1
 8007fa0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	69db      	ldr	r3, [r3, #28]
 8007fa6:	041b      	lsls	r3, r3, #16
 8007fa8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68d9      	ldr	r1, [r3, #12]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a1a      	ldr	r2, [r3, #32]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	431a      	orrs	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	430a      	orrs	r2, r1
 8007fbe:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6919      	ldr	r1, [r3, #16]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	4b33      	ldr	r3, [pc, #204]	; (8008098 <HAL_LTDC_Init+0x19c>)
 8007fcc:	400b      	ands	r3, r1
 8007fce:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd4:	041b      	lsls	r3, r3, #16
 8007fd6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	6919      	ldr	r1, [r3, #16]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	431a      	orrs	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	430a      	orrs	r2, r1
 8007fec:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	6959      	ldr	r1, [r3, #20]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	4b27      	ldr	r3, [pc, #156]	; (8008098 <HAL_LTDC_Init+0x19c>)
 8007ffa:	400b      	ands	r3, r1
 8007ffc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008002:	041b      	lsls	r3, r3, #16
 8008004:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	6959      	ldr	r1, [r3, #20]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	431a      	orrs	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	430a      	orrs	r2, r1
 800801a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008022:	021b      	lsls	r3, r3, #8
 8008024:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800802c:	041b      	lsls	r3, r3, #16
 800802e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800803e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008046:	68ba      	ldr	r2, [r7, #8]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	4313      	orrs	r3, r2
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8008052:	431a      	orrs	r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	430a      	orrs	r2, r1
 800805a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f042 0206 	orr.w	r2, r2, #6
 800806a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	699a      	ldr	r2, [r3, #24]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f042 0201 	orr.w	r2, r2, #1
 800807a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	f000f800 	.word	0xf000f800

0800809c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080aa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f003 0304 	and.w	r3, r3, #4
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d023      	beq.n	8008106 <HAL_LTDC_IRQHandler+0x6a>
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	f003 0304 	and.w	r3, r3, #4
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d01e      	beq.n	8008106 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f022 0204 	bic.w	r2, r2, #4
 80080d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2204      	movs	r2, #4
 80080de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80080e6:	f043 0201 	orr.w	r2, r3, #1
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2204      	movs	r2, #4
 80080f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f86f 	bl	80081e4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f003 0302 	and.w	r3, r3, #2
 800810c:	2b00      	cmp	r3, #0
 800810e:	d023      	beq.n	8008158 <HAL_LTDC_IRQHandler+0xbc>
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	f003 0302 	and.w	r3, r3, #2
 8008116:	2b00      	cmp	r3, #0
 8008118:	d01e      	beq.n	8008158 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f022 0202 	bic.w	r2, r2, #2
 8008128:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2202      	movs	r2, #2
 8008130:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008138:	f043 0202 	orr.w	r2, r3, #2
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2204      	movs	r2, #4
 8008146:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f846 	bl	80081e4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	2b00      	cmp	r3, #0
 8008160:	d01b      	beq.n	800819a <HAL_LTDC_IRQHandler+0xfe>
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	f003 0301 	and.w	r3, r3, #1
 8008168:	2b00      	cmp	r3, #0
 800816a:	d016      	beq.n	800819a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 0201 	bic.w	r2, r2, #1
 800817a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2201      	movs	r2, #1
 8008182:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f00c fa11 	bl	80145bc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f003 0308 	and.w	r3, r3, #8
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d01b      	beq.n	80081dc <HAL_LTDC_IRQHandler+0x140>
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	f003 0308 	and.w	r3, r3, #8
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d016      	beq.n	80081dc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f022 0208 	bic.w	r2, r2, #8
 80081bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2208      	movs	r2, #8
 80081c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2201      	movs	r2, #1
 80081ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 f80e 	bl	80081f8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80081dc:	bf00      	nop
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80081ec:	bf00      	nop
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800820c:	b5b0      	push	{r4, r5, r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800821e:	2b01      	cmp	r3, #1
 8008220:	d101      	bne.n	8008226 <HAL_LTDC_ConfigLayer+0x1a>
 8008222:	2302      	movs	r3, #2
 8008224:	e02c      	b.n	8008280 <HAL_LTDC_ConfigLayer+0x74>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2201      	movs	r2, #1
 800822a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2202      	movs	r2, #2
 8008232:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2134      	movs	r1, #52	; 0x34
 800823c:	fb01 f303 	mul.w	r3, r1, r3
 8008240:	4413      	add	r3, r2
 8008242:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	4614      	mov	r4, r2
 800824a:	461d      	mov	r5, r3
 800824c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800824e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008258:	682b      	ldr	r3, [r5, #0]
 800825a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	68b9      	ldr	r1, [r7, #8]
 8008260:	68f8      	ldr	r0, [r7, #12]
 8008262:	f000 f849 	bl	80082f8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2201      	movs	r2, #1
 800826c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bdb0      	pop	{r4, r5, r7, pc}

08008288 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008298:	2b01      	cmp	r3, #1
 800829a:	d101      	bne.n	80082a0 <HAL_LTDC_ProgramLineEvent+0x18>
 800829c:	2302      	movs	r3, #2
 800829e:	e023      	b.n	80082e8 <HAL_LTDC_ProgramLineEvent+0x60>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2202      	movs	r2, #2
 80082ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f022 0201 	bic.w	r2, r2, #1
 80082be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80082c0:	4a0c      	ldr	r2, [pc, #48]	; (80082f4 <HAL_LTDC_ProgramLineEvent+0x6c>)
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f042 0201 	orr.w	r2, r2, #1
 80082d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr
 80082f4:	40016800 	.word	0x40016800

080082f8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b089      	sub	sp, #36	; 0x24
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	685a      	ldr	r2, [r3, #4]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	0c1b      	lsrs	r3, r3, #16
 8008310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008314:	4413      	add	r3, r2
 8008316:	041b      	lsls	r3, r3, #16
 8008318:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	461a      	mov	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	01db      	lsls	r3, r3, #7
 8008324:	4413      	add	r3, r2
 8008326:	3384      	adds	r3, #132	; 0x84
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	6812      	ldr	r2, [r2, #0]
 800832e:	4611      	mov	r1, r2
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	01d2      	lsls	r2, r2, #7
 8008334:	440a      	add	r2, r1
 8008336:	3284      	adds	r2, #132	; 0x84
 8008338:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800833c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	0c1b      	lsrs	r3, r3, #16
 800834a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800834e:	4413      	add	r3, r2
 8008350:	1c5a      	adds	r2, r3, #1
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4619      	mov	r1, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	01db      	lsls	r3, r3, #7
 800835c:	440b      	add	r3, r1
 800835e:	3384      	adds	r3, #132	; 0x84
 8008360:	4619      	mov	r1, r3
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	4313      	orrs	r3, r2
 8008366:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	68da      	ldr	r2, [r3, #12]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008376:	4413      	add	r3, r2
 8008378:	041b      	lsls	r3, r3, #16
 800837a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	461a      	mov	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	01db      	lsls	r3, r3, #7
 8008386:	4413      	add	r3, r2
 8008388:	3384      	adds	r3, #132	; 0x84
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	6812      	ldr	r2, [r2, #0]
 8008390:	4611      	mov	r1, r2
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	01d2      	lsls	r2, r2, #7
 8008396:	440a      	add	r2, r1
 8008398:	3284      	adds	r2, #132	; 0x84
 800839a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800839e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	689a      	ldr	r2, [r3, #8]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80083ae:	4413      	add	r3, r2
 80083b0:	1c5a      	adds	r2, r3, #1
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4619      	mov	r1, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	01db      	lsls	r3, r3, #7
 80083bc:	440b      	add	r3, r1
 80083be:	3384      	adds	r3, #132	; 0x84
 80083c0:	4619      	mov	r1, r3
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	461a      	mov	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	01db      	lsls	r3, r3, #7
 80083d2:	4413      	add	r3, r2
 80083d4:	3384      	adds	r3, #132	; 0x84
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	6812      	ldr	r2, [r2, #0]
 80083dc:	4611      	mov	r1, r2
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	01d2      	lsls	r2, r2, #7
 80083e2:	440a      	add	r2, r1
 80083e4:	3284      	adds	r2, #132	; 0x84
 80083e6:	f023 0307 	bic.w	r3, r3, #7
 80083ea:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	461a      	mov	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	01db      	lsls	r3, r3, #7
 80083f6:	4413      	add	r3, r2
 80083f8:	3384      	adds	r3, #132	; 0x84
 80083fa:	461a      	mov	r2, r3
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008408:	021b      	lsls	r3, r3, #8
 800840a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008412:	041b      	lsls	r3, r3, #16
 8008414:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	699b      	ldr	r3, [r3, #24]
 800841a:	061b      	lsls	r3, r3, #24
 800841c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	01db      	lsls	r3, r3, #7
 8008428:	4413      	add	r3, r2
 800842a:	3384      	adds	r3, #132	; 0x84
 800842c:	699b      	ldr	r3, [r3, #24]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	461a      	mov	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	01db      	lsls	r3, r3, #7
 8008438:	4413      	add	r3, r2
 800843a:	3384      	adds	r3, #132	; 0x84
 800843c:	461a      	mov	r2, r3
 800843e:	2300      	movs	r3, #0
 8008440:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008448:	461a      	mov	r2, r3
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	431a      	orrs	r2, r3
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	431a      	orrs	r2, r3
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4619      	mov	r1, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	01db      	lsls	r3, r3, #7
 800845c:	440b      	add	r3, r1
 800845e:	3384      	adds	r3, #132	; 0x84
 8008460:	4619      	mov	r1, r3
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	4313      	orrs	r3, r2
 8008466:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	461a      	mov	r2, r3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	01db      	lsls	r3, r3, #7
 8008472:	4413      	add	r3, r2
 8008474:	3384      	adds	r3, #132	; 0x84
 8008476:	695b      	ldr	r3, [r3, #20]
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	6812      	ldr	r2, [r2, #0]
 800847c:	4611      	mov	r1, r2
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	01d2      	lsls	r2, r2, #7
 8008482:	440a      	add	r2, r1
 8008484:	3284      	adds	r2, #132	; 0x84
 8008486:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800848a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	461a      	mov	r2, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	01db      	lsls	r3, r3, #7
 8008496:	4413      	add	r3, r2
 8008498:	3384      	adds	r3, #132	; 0x84
 800849a:	461a      	mov	r2, r3
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	695b      	ldr	r3, [r3, #20]
 80084a0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	461a      	mov	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	01db      	lsls	r3, r3, #7
 80084ac:	4413      	add	r3, r2
 80084ae:	3384      	adds	r3, #132	; 0x84
 80084b0:	69db      	ldr	r3, [r3, #28]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	6812      	ldr	r2, [r2, #0]
 80084b6:	4611      	mov	r1, r2
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	01d2      	lsls	r2, r2, #7
 80084bc:	440a      	add	r2, r1
 80084be:	3284      	adds	r2, #132	; 0x84
 80084c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80084c4:	f023 0307 	bic.w	r3, r3, #7
 80084c8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	69da      	ldr	r2, [r3, #28]
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	68f9      	ldr	r1, [r7, #12]
 80084d4:	6809      	ldr	r1, [r1, #0]
 80084d6:	4608      	mov	r0, r1
 80084d8:	6879      	ldr	r1, [r7, #4]
 80084da:	01c9      	lsls	r1, r1, #7
 80084dc:	4401      	add	r1, r0
 80084de:	3184      	adds	r1, #132	; 0x84
 80084e0:	4313      	orrs	r3, r2
 80084e2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	461a      	mov	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	01db      	lsls	r3, r3, #7
 80084ee:	4413      	add	r3, r2
 80084f0:	3384      	adds	r3, #132	; 0x84
 80084f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	461a      	mov	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	01db      	lsls	r3, r3, #7
 80084fe:	4413      	add	r3, r2
 8008500:	3384      	adds	r3, #132	; 0x84
 8008502:	461a      	mov	r2, r3
 8008504:	2300      	movs	r3, #0
 8008506:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	461a      	mov	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	01db      	lsls	r3, r3, #7
 8008512:	4413      	add	r3, r2
 8008514:	3384      	adds	r3, #132	; 0x84
 8008516:	461a      	mov	r2, r3
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d102      	bne.n	800852c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8008526:	2304      	movs	r3, #4
 8008528:	61fb      	str	r3, [r7, #28]
 800852a:	e01b      	b.n	8008564 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d102      	bne.n	800853a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8008534:	2303      	movs	r3, #3
 8008536:	61fb      	str	r3, [r7, #28]
 8008538:	e014      	b.n	8008564 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	2b04      	cmp	r3, #4
 8008540:	d00b      	beq.n	800855a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008546:	2b02      	cmp	r3, #2
 8008548:	d007      	beq.n	800855a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800854e:	2b03      	cmp	r3, #3
 8008550:	d003      	beq.n	800855a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008556:	2b07      	cmp	r3, #7
 8008558:	d102      	bne.n	8008560 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800855a:	2302      	movs	r3, #2
 800855c:	61fb      	str	r3, [r7, #28]
 800855e:	e001      	b.n	8008564 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8008560:	2301      	movs	r3, #1
 8008562:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	461a      	mov	r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	01db      	lsls	r3, r3, #7
 800856e:	4413      	add	r3, r2
 8008570:	3384      	adds	r3, #132	; 0x84
 8008572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	6812      	ldr	r2, [r2, #0]
 8008578:	4611      	mov	r1, r2
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	01d2      	lsls	r2, r2, #7
 800857e:	440a      	add	r2, r1
 8008580:	3284      	adds	r2, #132	; 0x84
 8008582:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008586:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800858c:	69fa      	ldr	r2, [r7, #28]
 800858e:	fb02 f303 	mul.w	r3, r2, r3
 8008592:	041a      	lsls	r2, r3, #16
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	6859      	ldr	r1, [r3, #4]
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	1acb      	subs	r3, r1, r3
 800859e:	69f9      	ldr	r1, [r7, #28]
 80085a0:	fb01 f303 	mul.w	r3, r1, r3
 80085a4:	3303      	adds	r3, #3
 80085a6:	68f9      	ldr	r1, [r7, #12]
 80085a8:	6809      	ldr	r1, [r1, #0]
 80085aa:	4608      	mov	r0, r1
 80085ac:	6879      	ldr	r1, [r7, #4]
 80085ae:	01c9      	lsls	r1, r1, #7
 80085b0:	4401      	add	r1, r0
 80085b2:	3184      	adds	r1, #132	; 0x84
 80085b4:	4313      	orrs	r3, r2
 80085b6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	461a      	mov	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	01db      	lsls	r3, r3, #7
 80085c2:	4413      	add	r3, r2
 80085c4:	3384      	adds	r3, #132	; 0x84
 80085c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	6812      	ldr	r2, [r2, #0]
 80085cc:	4611      	mov	r1, r2
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	01d2      	lsls	r2, r2, #7
 80085d2:	440a      	add	r2, r1
 80085d4:	3284      	adds	r2, #132	; 0x84
 80085d6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80085da:	f023 0307 	bic.w	r3, r3, #7
 80085de:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	461a      	mov	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	01db      	lsls	r3, r3, #7
 80085ea:	4413      	add	r3, r2
 80085ec:	3384      	adds	r3, #132	; 0x84
 80085ee:	461a      	mov	r2, r3
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	461a      	mov	r2, r3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	01db      	lsls	r3, r3, #7
 8008600:	4413      	add	r3, r2
 8008602:	3384      	adds	r3, #132	; 0x84
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	6812      	ldr	r2, [r2, #0]
 800860a:	4611      	mov	r1, r2
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	01d2      	lsls	r2, r2, #7
 8008610:	440a      	add	r2, r1
 8008612:	3284      	adds	r2, #132	; 0x84
 8008614:	f043 0301 	orr.w	r3, r3, #1
 8008618:	6013      	str	r3, [r2, #0]
}
 800861a:	bf00      	nop
 800861c:	3724      	adds	r7, #36	; 0x24
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
	...

08008628 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d101      	bne.n	800863a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e264      	b.n	8008b04 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 0301 	and.w	r3, r3, #1
 8008642:	2b00      	cmp	r3, #0
 8008644:	d075      	beq.n	8008732 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008646:	4ba3      	ldr	r3, [pc, #652]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f003 030c 	and.w	r3, r3, #12
 800864e:	2b04      	cmp	r3, #4
 8008650:	d00c      	beq.n	800866c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008652:	4ba0      	ldr	r3, [pc, #640]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800865a:	2b08      	cmp	r3, #8
 800865c:	d112      	bne.n	8008684 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800865e:	4b9d      	ldr	r3, [pc, #628]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008666:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800866a:	d10b      	bne.n	8008684 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800866c:	4b99      	ldr	r3, [pc, #612]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008674:	2b00      	cmp	r3, #0
 8008676:	d05b      	beq.n	8008730 <HAL_RCC_OscConfig+0x108>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d157      	bne.n	8008730 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e23f      	b.n	8008b04 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800868c:	d106      	bne.n	800869c <HAL_RCC_OscConfig+0x74>
 800868e:	4b91      	ldr	r3, [pc, #580]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a90      	ldr	r2, [pc, #576]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 8008694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008698:	6013      	str	r3, [r2, #0]
 800869a:	e01d      	b.n	80086d8 <HAL_RCC_OscConfig+0xb0>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086a4:	d10c      	bne.n	80086c0 <HAL_RCC_OscConfig+0x98>
 80086a6:	4b8b      	ldr	r3, [pc, #556]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a8a      	ldr	r2, [pc, #552]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 80086ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086b0:	6013      	str	r3, [r2, #0]
 80086b2:	4b88      	ldr	r3, [pc, #544]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a87      	ldr	r2, [pc, #540]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 80086b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086bc:	6013      	str	r3, [r2, #0]
 80086be:	e00b      	b.n	80086d8 <HAL_RCC_OscConfig+0xb0>
 80086c0:	4b84      	ldr	r3, [pc, #528]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a83      	ldr	r2, [pc, #524]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 80086c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086ca:	6013      	str	r3, [r2, #0]
 80086cc:	4b81      	ldr	r3, [pc, #516]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a80      	ldr	r2, [pc, #512]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 80086d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d013      	beq.n	8008708 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086e0:	f7fd fd16 	bl	8006110 <HAL_GetTick>
 80086e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086e6:	e008      	b.n	80086fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086e8:	f7fd fd12 	bl	8006110 <HAL_GetTick>
 80086ec:	4602      	mov	r2, r0
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	1ad3      	subs	r3, r2, r3
 80086f2:	2b64      	cmp	r3, #100	; 0x64
 80086f4:	d901      	bls.n	80086fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80086f6:	2303      	movs	r3, #3
 80086f8:	e204      	b.n	8008b04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086fa:	4b76      	ldr	r3, [pc, #472]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d0f0      	beq.n	80086e8 <HAL_RCC_OscConfig+0xc0>
 8008706:	e014      	b.n	8008732 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008708:	f7fd fd02 	bl	8006110 <HAL_GetTick>
 800870c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800870e:	e008      	b.n	8008722 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008710:	f7fd fcfe 	bl	8006110 <HAL_GetTick>
 8008714:	4602      	mov	r2, r0
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	2b64      	cmp	r3, #100	; 0x64
 800871c:	d901      	bls.n	8008722 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800871e:	2303      	movs	r3, #3
 8008720:	e1f0      	b.n	8008b04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008722:	4b6c      	ldr	r3, [pc, #432]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1f0      	bne.n	8008710 <HAL_RCC_OscConfig+0xe8>
 800872e:	e000      	b.n	8008732 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0302 	and.w	r3, r3, #2
 800873a:	2b00      	cmp	r3, #0
 800873c:	d063      	beq.n	8008806 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800873e:	4b65      	ldr	r3, [pc, #404]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	f003 030c 	and.w	r3, r3, #12
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00b      	beq.n	8008762 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800874a:	4b62      	ldr	r3, [pc, #392]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008752:	2b08      	cmp	r3, #8
 8008754:	d11c      	bne.n	8008790 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008756:	4b5f      	ldr	r3, [pc, #380]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800875e:	2b00      	cmp	r3, #0
 8008760:	d116      	bne.n	8008790 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008762:	4b5c      	ldr	r3, [pc, #368]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f003 0302 	and.w	r3, r3, #2
 800876a:	2b00      	cmp	r3, #0
 800876c:	d005      	beq.n	800877a <HAL_RCC_OscConfig+0x152>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	2b01      	cmp	r3, #1
 8008774:	d001      	beq.n	800877a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e1c4      	b.n	8008b04 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800877a:	4b56      	ldr	r3, [pc, #344]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	00db      	lsls	r3, r3, #3
 8008788:	4952      	ldr	r1, [pc, #328]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 800878a:	4313      	orrs	r3, r2
 800878c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800878e:	e03a      	b.n	8008806 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d020      	beq.n	80087da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008798:	4b4f      	ldr	r3, [pc, #316]	; (80088d8 <HAL_RCC_OscConfig+0x2b0>)
 800879a:	2201      	movs	r2, #1
 800879c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800879e:	f7fd fcb7 	bl	8006110 <HAL_GetTick>
 80087a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087a4:	e008      	b.n	80087b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087a6:	f7fd fcb3 	bl	8006110 <HAL_GetTick>
 80087aa:	4602      	mov	r2, r0
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	1ad3      	subs	r3, r2, r3
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d901      	bls.n	80087b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e1a5      	b.n	8008b04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087b8:	4b46      	ldr	r3, [pc, #280]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 0302 	and.w	r3, r3, #2
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d0f0      	beq.n	80087a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087c4:	4b43      	ldr	r3, [pc, #268]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	00db      	lsls	r3, r3, #3
 80087d2:	4940      	ldr	r1, [pc, #256]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 80087d4:	4313      	orrs	r3, r2
 80087d6:	600b      	str	r3, [r1, #0]
 80087d8:	e015      	b.n	8008806 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087da:	4b3f      	ldr	r3, [pc, #252]	; (80088d8 <HAL_RCC_OscConfig+0x2b0>)
 80087dc:	2200      	movs	r2, #0
 80087de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087e0:	f7fd fc96 	bl	8006110 <HAL_GetTick>
 80087e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087e6:	e008      	b.n	80087fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087e8:	f7fd fc92 	bl	8006110 <HAL_GetTick>
 80087ec:	4602      	mov	r2, r0
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d901      	bls.n	80087fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e184      	b.n	8008b04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087fa:	4b36      	ldr	r3, [pc, #216]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 0302 	and.w	r3, r3, #2
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1f0      	bne.n	80087e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0308 	and.w	r3, r3, #8
 800880e:	2b00      	cmp	r3, #0
 8008810:	d030      	beq.n	8008874 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	695b      	ldr	r3, [r3, #20]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d016      	beq.n	8008848 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800881a:	4b30      	ldr	r3, [pc, #192]	; (80088dc <HAL_RCC_OscConfig+0x2b4>)
 800881c:	2201      	movs	r2, #1
 800881e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008820:	f7fd fc76 	bl	8006110 <HAL_GetTick>
 8008824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008826:	e008      	b.n	800883a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008828:	f7fd fc72 	bl	8006110 <HAL_GetTick>
 800882c:	4602      	mov	r2, r0
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	2b02      	cmp	r3, #2
 8008834:	d901      	bls.n	800883a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008836:	2303      	movs	r3, #3
 8008838:	e164      	b.n	8008b04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800883a:	4b26      	ldr	r3, [pc, #152]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 800883c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800883e:	f003 0302 	and.w	r3, r3, #2
 8008842:	2b00      	cmp	r3, #0
 8008844:	d0f0      	beq.n	8008828 <HAL_RCC_OscConfig+0x200>
 8008846:	e015      	b.n	8008874 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008848:	4b24      	ldr	r3, [pc, #144]	; (80088dc <HAL_RCC_OscConfig+0x2b4>)
 800884a:	2200      	movs	r2, #0
 800884c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800884e:	f7fd fc5f 	bl	8006110 <HAL_GetTick>
 8008852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008854:	e008      	b.n	8008868 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008856:	f7fd fc5b 	bl	8006110 <HAL_GetTick>
 800885a:	4602      	mov	r2, r0
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	2b02      	cmp	r3, #2
 8008862:	d901      	bls.n	8008868 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008864:	2303      	movs	r3, #3
 8008866:	e14d      	b.n	8008b04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008868:	4b1a      	ldr	r3, [pc, #104]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 800886a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800886c:	f003 0302 	and.w	r3, r3, #2
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1f0      	bne.n	8008856 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 0304 	and.w	r3, r3, #4
 800887c:	2b00      	cmp	r3, #0
 800887e:	f000 80a0 	beq.w	80089c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008882:	2300      	movs	r3, #0
 8008884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008886:	4b13      	ldr	r3, [pc, #76]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 8008888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10f      	bne.n	80088b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008892:	2300      	movs	r3, #0
 8008894:	60bb      	str	r3, [r7, #8]
 8008896:	4b0f      	ldr	r3, [pc, #60]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 8008898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889a:	4a0e      	ldr	r2, [pc, #56]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 800889c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088a0:	6413      	str	r3, [r2, #64]	; 0x40
 80088a2:	4b0c      	ldr	r3, [pc, #48]	; (80088d4 <HAL_RCC_OscConfig+0x2ac>)
 80088a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088aa:	60bb      	str	r3, [r7, #8]
 80088ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80088ae:	2301      	movs	r3, #1
 80088b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088b2:	4b0b      	ldr	r3, [pc, #44]	; (80088e0 <HAL_RCC_OscConfig+0x2b8>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d121      	bne.n	8008902 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80088be:	4b08      	ldr	r3, [pc, #32]	; (80088e0 <HAL_RCC_OscConfig+0x2b8>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a07      	ldr	r2, [pc, #28]	; (80088e0 <HAL_RCC_OscConfig+0x2b8>)
 80088c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088ca:	f7fd fc21 	bl	8006110 <HAL_GetTick>
 80088ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088d0:	e011      	b.n	80088f6 <HAL_RCC_OscConfig+0x2ce>
 80088d2:	bf00      	nop
 80088d4:	40023800 	.word	0x40023800
 80088d8:	42470000 	.word	0x42470000
 80088dc:	42470e80 	.word	0x42470e80
 80088e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088e4:	f7fd fc14 	bl	8006110 <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d901      	bls.n	80088f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e106      	b.n	8008b04 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088f6:	4b85      	ldr	r3, [pc, #532]	; (8008b0c <HAL_RCC_OscConfig+0x4e4>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d0f0      	beq.n	80088e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d106      	bne.n	8008918 <HAL_RCC_OscConfig+0x2f0>
 800890a:	4b81      	ldr	r3, [pc, #516]	; (8008b10 <HAL_RCC_OscConfig+0x4e8>)
 800890c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800890e:	4a80      	ldr	r2, [pc, #512]	; (8008b10 <HAL_RCC_OscConfig+0x4e8>)
 8008910:	f043 0301 	orr.w	r3, r3, #1
 8008914:	6713      	str	r3, [r2, #112]	; 0x70
 8008916:	e01c      	b.n	8008952 <HAL_RCC_OscConfig+0x32a>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	2b05      	cmp	r3, #5
 800891e:	d10c      	bne.n	800893a <HAL_RCC_OscConfig+0x312>
 8008920:	4b7b      	ldr	r3, [pc, #492]	; (8008b10 <HAL_RCC_OscConfig+0x4e8>)
 8008922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008924:	4a7a      	ldr	r2, [pc, #488]	; (8008b10 <HAL_RCC_OscConfig+0x4e8>)
 8008926:	f043 0304 	orr.w	r3, r3, #4
 800892a:	6713      	str	r3, [r2, #112]	; 0x70
 800892c:	4b78      	ldr	r3, [pc, #480]	; (8008b10 <HAL_RCC_OscConfig+0x4e8>)
 800892e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008930:	4a77      	ldr	r2, [pc, #476]	; (8008b10 <HAL_RCC_OscConfig+0x4e8>)
 8008932:	f043 0301 	orr.w	r3, r3, #1
 8008936:	6713      	str	r3, [r2, #112]	; 0x70
 8008938:	e00b      	b.n	8008952 <HAL_RCC_OscConfig+0x32a>
 800893a:	4b75      	ldr	r3, [pc, #468]	; (8008b10 <HAL_RCC_OscConfig+0x4e8>)
 800893c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800893e:	4a74      	ldr	r2, [pc, #464]	; (8008b10 <HAL_RCC_OscConfig+0x4e8>)
 8008940:	f023 0301 	bic.w	r3, r3, #1
 8008944:	6713      	str	r3, [r2, #112]	; 0x70
 8008946:	4b72      	ldr	r3, [pc, #456]	; (8008b10 <HAL_RCC_OscConfig+0x4e8>)
 8008948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800894a:	4a71      	ldr	r2, [pc, #452]	; (8008b10 <HAL_RCC_OscConfig+0x4e8>)
 800894c:	f023 0304 	bic.w	r3, r3, #4
 8008950:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d015      	beq.n	8008986 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800895a:	f7fd fbd9 	bl	8006110 <HAL_GetTick>
 800895e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008960:	e00a      	b.n	8008978 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008962:	f7fd fbd5 	bl	8006110 <HAL_GetTick>
 8008966:	4602      	mov	r2, r0
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	1ad3      	subs	r3, r2, r3
 800896c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008970:	4293      	cmp	r3, r2
 8008972:	d901      	bls.n	8008978 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008974:	2303      	movs	r3, #3
 8008976:	e0c5      	b.n	8008b04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008978:	4b65      	ldr	r3, [pc, #404]	; (8008b10 <HAL_RCC_OscConfig+0x4e8>)
 800897a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800897c:	f003 0302 	and.w	r3, r3, #2
 8008980:	2b00      	cmp	r3, #0
 8008982:	d0ee      	beq.n	8008962 <HAL_RCC_OscConfig+0x33a>
 8008984:	e014      	b.n	80089b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008986:	f7fd fbc3 	bl	8006110 <HAL_GetTick>
 800898a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800898c:	e00a      	b.n	80089a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800898e:	f7fd fbbf 	bl	8006110 <HAL_GetTick>
 8008992:	4602      	mov	r2, r0
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	f241 3288 	movw	r2, #5000	; 0x1388
 800899c:	4293      	cmp	r3, r2
 800899e:	d901      	bls.n	80089a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80089a0:	2303      	movs	r3, #3
 80089a2:	e0af      	b.n	8008b04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80089a4:	4b5a      	ldr	r3, [pc, #360]	; (8008b10 <HAL_RCC_OscConfig+0x4e8>)
 80089a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a8:	f003 0302 	and.w	r3, r3, #2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1ee      	bne.n	800898e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80089b0:	7dfb      	ldrb	r3, [r7, #23]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d105      	bne.n	80089c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089b6:	4b56      	ldr	r3, [pc, #344]	; (8008b10 <HAL_RCC_OscConfig+0x4e8>)
 80089b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ba:	4a55      	ldr	r2, [pc, #340]	; (8008b10 <HAL_RCC_OscConfig+0x4e8>)
 80089bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	f000 809b 	beq.w	8008b02 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80089cc:	4b50      	ldr	r3, [pc, #320]	; (8008b10 <HAL_RCC_OscConfig+0x4e8>)
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	f003 030c 	and.w	r3, r3, #12
 80089d4:	2b08      	cmp	r3, #8
 80089d6:	d05c      	beq.n	8008a92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	699b      	ldr	r3, [r3, #24]
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d141      	bne.n	8008a64 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089e0:	4b4c      	ldr	r3, [pc, #304]	; (8008b14 <HAL_RCC_OscConfig+0x4ec>)
 80089e2:	2200      	movs	r2, #0
 80089e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089e6:	f7fd fb93 	bl	8006110 <HAL_GetTick>
 80089ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089ec:	e008      	b.n	8008a00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089ee:	f7fd fb8f 	bl	8006110 <HAL_GetTick>
 80089f2:	4602      	mov	r2, r0
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d901      	bls.n	8008a00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80089fc:	2303      	movs	r3, #3
 80089fe:	e081      	b.n	8008b04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a00:	4b43      	ldr	r3, [pc, #268]	; (8008b10 <HAL_RCC_OscConfig+0x4e8>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1f0      	bne.n	80089ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	69da      	ldr	r2, [r3, #28]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6a1b      	ldr	r3, [r3, #32]
 8008a14:	431a      	orrs	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1a:	019b      	lsls	r3, r3, #6
 8008a1c:	431a      	orrs	r2, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a22:	085b      	lsrs	r3, r3, #1
 8008a24:	3b01      	subs	r3, #1
 8008a26:	041b      	lsls	r3, r3, #16
 8008a28:	431a      	orrs	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2e:	061b      	lsls	r3, r3, #24
 8008a30:	4937      	ldr	r1, [pc, #220]	; (8008b10 <HAL_RCC_OscConfig+0x4e8>)
 8008a32:	4313      	orrs	r3, r2
 8008a34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a36:	4b37      	ldr	r3, [pc, #220]	; (8008b14 <HAL_RCC_OscConfig+0x4ec>)
 8008a38:	2201      	movs	r2, #1
 8008a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a3c:	f7fd fb68 	bl	8006110 <HAL_GetTick>
 8008a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a42:	e008      	b.n	8008a56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a44:	f7fd fb64 	bl	8006110 <HAL_GetTick>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	1ad3      	subs	r3, r2, r3
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d901      	bls.n	8008a56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008a52:	2303      	movs	r3, #3
 8008a54:	e056      	b.n	8008b04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a56:	4b2e      	ldr	r3, [pc, #184]	; (8008b10 <HAL_RCC_OscConfig+0x4e8>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d0f0      	beq.n	8008a44 <HAL_RCC_OscConfig+0x41c>
 8008a62:	e04e      	b.n	8008b02 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a64:	4b2b      	ldr	r3, [pc, #172]	; (8008b14 <HAL_RCC_OscConfig+0x4ec>)
 8008a66:	2200      	movs	r2, #0
 8008a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a6a:	f7fd fb51 	bl	8006110 <HAL_GetTick>
 8008a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a70:	e008      	b.n	8008a84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a72:	f7fd fb4d 	bl	8006110 <HAL_GetTick>
 8008a76:	4602      	mov	r2, r0
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d901      	bls.n	8008a84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008a80:	2303      	movs	r3, #3
 8008a82:	e03f      	b.n	8008b04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a84:	4b22      	ldr	r3, [pc, #136]	; (8008b10 <HAL_RCC_OscConfig+0x4e8>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1f0      	bne.n	8008a72 <HAL_RCC_OscConfig+0x44a>
 8008a90:	e037      	b.n	8008b02 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d101      	bne.n	8008a9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e032      	b.n	8008b04 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008a9e:	4b1c      	ldr	r3, [pc, #112]	; (8008b10 <HAL_RCC_OscConfig+0x4e8>)
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d028      	beq.n	8008afe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d121      	bne.n	8008afe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d11a      	bne.n	8008afe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008ac8:	68fa      	ldr	r2, [r7, #12]
 8008aca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008ace:	4013      	ands	r3, r2
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008ad4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d111      	bne.n	8008afe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae4:	085b      	lsrs	r3, r3, #1
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d107      	bne.n	8008afe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d001      	beq.n	8008b02 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e000      	b.n	8008b04 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3718      	adds	r7, #24
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	40007000 	.word	0x40007000
 8008b10:	40023800 	.word	0x40023800
 8008b14:	42470060 	.word	0x42470060

08008b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d101      	bne.n	8008b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e0cc      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b2c:	4b68      	ldr	r3, [pc, #416]	; (8008cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 030f 	and.w	r3, r3, #15
 8008b34:	683a      	ldr	r2, [r7, #0]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d90c      	bls.n	8008b54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b3a:	4b65      	ldr	r3, [pc, #404]	; (8008cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b3c:	683a      	ldr	r2, [r7, #0]
 8008b3e:	b2d2      	uxtb	r2, r2
 8008b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b42:	4b63      	ldr	r3, [pc, #396]	; (8008cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 030f 	and.w	r3, r3, #15
 8008b4a:	683a      	ldr	r2, [r7, #0]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d001      	beq.n	8008b54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e0b8      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 0302 	and.w	r3, r3, #2
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d020      	beq.n	8008ba2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 0304 	and.w	r3, r3, #4
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d005      	beq.n	8008b78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b6c:	4b59      	ldr	r3, [pc, #356]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	4a58      	ldr	r2, [pc, #352]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008b76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 0308 	and.w	r3, r3, #8
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d005      	beq.n	8008b90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b84:	4b53      	ldr	r3, [pc, #332]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	4a52      	ldr	r2, [pc, #328]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008b8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b90:	4b50      	ldr	r3, [pc, #320]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	494d      	ldr	r1, [pc, #308]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f003 0301 	and.w	r3, r3, #1
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d044      	beq.n	8008c38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d107      	bne.n	8008bc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bb6:	4b47      	ldr	r3, [pc, #284]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d119      	bne.n	8008bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e07f      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d003      	beq.n	8008bd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008bd2:	2b03      	cmp	r3, #3
 8008bd4:	d107      	bne.n	8008be6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bd6:	4b3f      	ldr	r3, [pc, #252]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d109      	bne.n	8008bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e06f      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008be6:	4b3b      	ldr	r3, [pc, #236]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 0302 	and.w	r3, r3, #2
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d101      	bne.n	8008bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e067      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008bf6:	4b37      	ldr	r3, [pc, #220]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	f023 0203 	bic.w	r2, r3, #3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	4934      	ldr	r1, [pc, #208]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c04:	4313      	orrs	r3, r2
 8008c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c08:	f7fd fa82 	bl	8006110 <HAL_GetTick>
 8008c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c0e:	e00a      	b.n	8008c26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c10:	f7fd fa7e 	bl	8006110 <HAL_GetTick>
 8008c14:	4602      	mov	r2, r0
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d901      	bls.n	8008c26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008c22:	2303      	movs	r3, #3
 8008c24:	e04f      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c26:	4b2b      	ldr	r3, [pc, #172]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	f003 020c 	and.w	r2, r3, #12
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d1eb      	bne.n	8008c10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c38:	4b25      	ldr	r3, [pc, #148]	; (8008cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 030f 	and.w	r3, r3, #15
 8008c40:	683a      	ldr	r2, [r7, #0]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d20c      	bcs.n	8008c60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c46:	4b22      	ldr	r3, [pc, #136]	; (8008cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8008c48:	683a      	ldr	r2, [r7, #0]
 8008c4a:	b2d2      	uxtb	r2, r2
 8008c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c4e:	4b20      	ldr	r3, [pc, #128]	; (8008cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 030f 	and.w	r3, r3, #15
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d001      	beq.n	8008c60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e032      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 0304 	and.w	r3, r3, #4
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d008      	beq.n	8008c7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c6c:	4b19      	ldr	r3, [pc, #100]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	4916      	ldr	r1, [pc, #88]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 0308 	and.w	r3, r3, #8
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d009      	beq.n	8008c9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c8a:	4b12      	ldr	r3, [pc, #72]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	00db      	lsls	r3, r3, #3
 8008c98:	490e      	ldr	r1, [pc, #56]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c9e:	f000 f821 	bl	8008ce4 <HAL_RCC_GetSysClockFreq>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	4b0b      	ldr	r3, [pc, #44]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	091b      	lsrs	r3, r3, #4
 8008caa:	f003 030f 	and.w	r3, r3, #15
 8008cae:	490a      	ldr	r1, [pc, #40]	; (8008cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8008cb0:	5ccb      	ldrb	r3, [r1, r3]
 8008cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8008cb6:	4a09      	ldr	r2, [pc, #36]	; (8008cdc <HAL_RCC_ClockConfig+0x1c4>)
 8008cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008cba:	4b09      	ldr	r3, [pc, #36]	; (8008ce0 <HAL_RCC_ClockConfig+0x1c8>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7fb fdca 	bl	8004858 <HAL_InitTick>

  return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	40023c00 	.word	0x40023c00
 8008cd4:	40023800 	.word	0x40023800
 8008cd8:	0802a098 	.word	0x0802a098
 8008cdc:	200000b0 	.word	0x200000b0
 8008ce0:	2000011c 	.word	0x2000011c

08008ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ce4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008ce8:	b084      	sub	sp, #16
 8008cea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008cec:	2300      	movs	r3, #0
 8008cee:	607b      	str	r3, [r7, #4]
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	60fb      	str	r3, [r7, #12]
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008cfc:	4b67      	ldr	r3, [pc, #412]	; (8008e9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f003 030c 	and.w	r3, r3, #12
 8008d04:	2b08      	cmp	r3, #8
 8008d06:	d00d      	beq.n	8008d24 <HAL_RCC_GetSysClockFreq+0x40>
 8008d08:	2b08      	cmp	r3, #8
 8008d0a:	f200 80bd 	bhi.w	8008e88 <HAL_RCC_GetSysClockFreq+0x1a4>
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d002      	beq.n	8008d18 <HAL_RCC_GetSysClockFreq+0x34>
 8008d12:	2b04      	cmp	r3, #4
 8008d14:	d003      	beq.n	8008d1e <HAL_RCC_GetSysClockFreq+0x3a>
 8008d16:	e0b7      	b.n	8008e88 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008d18:	4b61      	ldr	r3, [pc, #388]	; (8008ea0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008d1a:	60bb      	str	r3, [r7, #8]
       break;
 8008d1c:	e0b7      	b.n	8008e8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008d1e:	4b61      	ldr	r3, [pc, #388]	; (8008ea4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008d20:	60bb      	str	r3, [r7, #8]
      break;
 8008d22:	e0b4      	b.n	8008e8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d24:	4b5d      	ldr	r3, [pc, #372]	; (8008e9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d2c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d2e:	4b5b      	ldr	r3, [pc, #364]	; (8008e9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d04d      	beq.n	8008dd6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d3a:	4b58      	ldr	r3, [pc, #352]	; (8008e9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	099b      	lsrs	r3, r3, #6
 8008d40:	461a      	mov	r2, r3
 8008d42:	f04f 0300 	mov.w	r3, #0
 8008d46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008d4a:	f04f 0100 	mov.w	r1, #0
 8008d4e:	ea02 0800 	and.w	r8, r2, r0
 8008d52:	ea03 0901 	and.w	r9, r3, r1
 8008d56:	4640      	mov	r0, r8
 8008d58:	4649      	mov	r1, r9
 8008d5a:	f04f 0200 	mov.w	r2, #0
 8008d5e:	f04f 0300 	mov.w	r3, #0
 8008d62:	014b      	lsls	r3, r1, #5
 8008d64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008d68:	0142      	lsls	r2, r0, #5
 8008d6a:	4610      	mov	r0, r2
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	ebb0 0008 	subs.w	r0, r0, r8
 8008d72:	eb61 0109 	sbc.w	r1, r1, r9
 8008d76:	f04f 0200 	mov.w	r2, #0
 8008d7a:	f04f 0300 	mov.w	r3, #0
 8008d7e:	018b      	lsls	r3, r1, #6
 8008d80:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008d84:	0182      	lsls	r2, r0, #6
 8008d86:	1a12      	subs	r2, r2, r0
 8008d88:	eb63 0301 	sbc.w	r3, r3, r1
 8008d8c:	f04f 0000 	mov.w	r0, #0
 8008d90:	f04f 0100 	mov.w	r1, #0
 8008d94:	00d9      	lsls	r1, r3, #3
 8008d96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008d9a:	00d0      	lsls	r0, r2, #3
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	460b      	mov	r3, r1
 8008da0:	eb12 0208 	adds.w	r2, r2, r8
 8008da4:	eb43 0309 	adc.w	r3, r3, r9
 8008da8:	f04f 0000 	mov.w	r0, #0
 8008dac:	f04f 0100 	mov.w	r1, #0
 8008db0:	0259      	lsls	r1, r3, #9
 8008db2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008db6:	0250      	lsls	r0, r2, #9
 8008db8:	4602      	mov	r2, r0
 8008dba:	460b      	mov	r3, r1
 8008dbc:	4610      	mov	r0, r2
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	f04f 0300 	mov.w	r3, #0
 8008dc8:	f7f7 fee0 	bl	8000b8c <__aeabi_uldivmod>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	460b      	mov	r3, r1
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	60fb      	str	r3, [r7, #12]
 8008dd4:	e04a      	b.n	8008e6c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008dd6:	4b31      	ldr	r3, [pc, #196]	; (8008e9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	099b      	lsrs	r3, r3, #6
 8008ddc:	461a      	mov	r2, r3
 8008dde:	f04f 0300 	mov.w	r3, #0
 8008de2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008de6:	f04f 0100 	mov.w	r1, #0
 8008dea:	ea02 0400 	and.w	r4, r2, r0
 8008dee:	ea03 0501 	and.w	r5, r3, r1
 8008df2:	4620      	mov	r0, r4
 8008df4:	4629      	mov	r1, r5
 8008df6:	f04f 0200 	mov.w	r2, #0
 8008dfa:	f04f 0300 	mov.w	r3, #0
 8008dfe:	014b      	lsls	r3, r1, #5
 8008e00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008e04:	0142      	lsls	r2, r0, #5
 8008e06:	4610      	mov	r0, r2
 8008e08:	4619      	mov	r1, r3
 8008e0a:	1b00      	subs	r0, r0, r4
 8008e0c:	eb61 0105 	sbc.w	r1, r1, r5
 8008e10:	f04f 0200 	mov.w	r2, #0
 8008e14:	f04f 0300 	mov.w	r3, #0
 8008e18:	018b      	lsls	r3, r1, #6
 8008e1a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008e1e:	0182      	lsls	r2, r0, #6
 8008e20:	1a12      	subs	r2, r2, r0
 8008e22:	eb63 0301 	sbc.w	r3, r3, r1
 8008e26:	f04f 0000 	mov.w	r0, #0
 8008e2a:	f04f 0100 	mov.w	r1, #0
 8008e2e:	00d9      	lsls	r1, r3, #3
 8008e30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008e34:	00d0      	lsls	r0, r2, #3
 8008e36:	4602      	mov	r2, r0
 8008e38:	460b      	mov	r3, r1
 8008e3a:	1912      	adds	r2, r2, r4
 8008e3c:	eb45 0303 	adc.w	r3, r5, r3
 8008e40:	f04f 0000 	mov.w	r0, #0
 8008e44:	f04f 0100 	mov.w	r1, #0
 8008e48:	0299      	lsls	r1, r3, #10
 8008e4a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008e4e:	0290      	lsls	r0, r2, #10
 8008e50:	4602      	mov	r2, r0
 8008e52:	460b      	mov	r3, r1
 8008e54:	4610      	mov	r0, r2
 8008e56:	4619      	mov	r1, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	f04f 0300 	mov.w	r3, #0
 8008e60:	f7f7 fe94 	bl	8000b8c <__aeabi_uldivmod>
 8008e64:	4602      	mov	r2, r0
 8008e66:	460b      	mov	r3, r1
 8008e68:	4613      	mov	r3, r2
 8008e6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008e6c:	4b0b      	ldr	r3, [pc, #44]	; (8008e9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	0c1b      	lsrs	r3, r3, #16
 8008e72:	f003 0303 	and.w	r3, r3, #3
 8008e76:	3301      	adds	r3, #1
 8008e78:	005b      	lsls	r3, r3, #1
 8008e7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e84:	60bb      	str	r3, [r7, #8]
      break;
 8008e86:	e002      	b.n	8008e8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008e88:	4b05      	ldr	r3, [pc, #20]	; (8008ea0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008e8a:	60bb      	str	r3, [r7, #8]
      break;
 8008e8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e8e:	68bb      	ldr	r3, [r7, #8]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008e9a:	bf00      	nop
 8008e9c:	40023800 	.word	0x40023800
 8008ea0:	00f42400 	.word	0x00f42400
 8008ea4:	007a1200 	.word	0x007a1200

08008ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008eac:	4b03      	ldr	r3, [pc, #12]	; (8008ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8008eae:	681b      	ldr	r3, [r3, #0]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	200000b0 	.word	0x200000b0

08008ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008ec4:	f7ff fff0 	bl	8008ea8 <HAL_RCC_GetHCLKFreq>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	4b05      	ldr	r3, [pc, #20]	; (8008ee0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	0a9b      	lsrs	r3, r3, #10
 8008ed0:	f003 0307 	and.w	r3, r3, #7
 8008ed4:	4903      	ldr	r1, [pc, #12]	; (8008ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ed6:	5ccb      	ldrb	r3, [r1, r3]
 8008ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	40023800 	.word	0x40023800
 8008ee4:	0802a0a8 	.word	0x0802a0a8

08008ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008eec:	f7ff ffdc 	bl	8008ea8 <HAL_RCC_GetHCLKFreq>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	4b05      	ldr	r3, [pc, #20]	; (8008f08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	0b5b      	lsrs	r3, r3, #13
 8008ef8:	f003 0307 	and.w	r3, r3, #7
 8008efc:	4903      	ldr	r1, [pc, #12]	; (8008f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008efe:	5ccb      	ldrb	r3, [r1, r3]
 8008f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	40023800 	.word	0x40023800
 8008f0c:	0802a0a8 	.word	0x0802a0a8

08008f10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	220f      	movs	r2, #15
 8008f1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008f20:	4b12      	ldr	r3, [pc, #72]	; (8008f6c <HAL_RCC_GetClockConfig+0x5c>)
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	f003 0203 	and.w	r2, r3, #3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008f2c:	4b0f      	ldr	r3, [pc, #60]	; (8008f6c <HAL_RCC_GetClockConfig+0x5c>)
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008f38:	4b0c      	ldr	r3, [pc, #48]	; (8008f6c <HAL_RCC_GetClockConfig+0x5c>)
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008f44:	4b09      	ldr	r3, [pc, #36]	; (8008f6c <HAL_RCC_GetClockConfig+0x5c>)
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	08db      	lsrs	r3, r3, #3
 8008f4a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008f52:	4b07      	ldr	r3, [pc, #28]	; (8008f70 <HAL_RCC_GetClockConfig+0x60>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 020f 	and.w	r2, r3, #15
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	601a      	str	r2, [r3, #0]
}
 8008f5e:	bf00      	nop
 8008f60:	370c      	adds	r7, #12
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr
 8008f6a:	bf00      	nop
 8008f6c:	40023800 	.word	0x40023800
 8008f70:	40023c00 	.word	0x40023c00

08008f74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b086      	sub	sp, #24
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008f80:	2300      	movs	r3, #0
 8008f82:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 0301 	and.w	r3, r3, #1
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d10b      	bne.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d105      	bne.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d075      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008fa8:	4bad      	ldr	r3, [pc, #692]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8008faa:	2200      	movs	r2, #0
 8008fac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008fae:	f7fd f8af 	bl	8006110 <HAL_GetTick>
 8008fb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008fb4:	e008      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008fb6:	f7fd f8ab 	bl	8006110 <HAL_GetTick>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	1ad3      	subs	r3, r2, r3
 8008fc0:	2b02      	cmp	r3, #2
 8008fc2:	d901      	bls.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008fc4:	2303      	movs	r3, #3
 8008fc6:	e18b      	b.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008fc8:	4ba6      	ldr	r3, [pc, #664]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1f0      	bne.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 0301 	and.w	r3, r3, #1
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d009      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	019a      	lsls	r2, r3, #6
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	071b      	lsls	r3, r3, #28
 8008fec:	499d      	ldr	r1, [pc, #628]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 0302 	and.w	r3, r3, #2
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d01f      	beq.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009000:	4b98      	ldr	r3, [pc, #608]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009006:	0f1b      	lsrs	r3, r3, #28
 8009008:	f003 0307 	and.w	r3, r3, #7
 800900c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	019a      	lsls	r2, r3, #6
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	061b      	lsls	r3, r3, #24
 800901a:	431a      	orrs	r2, r3
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	071b      	lsls	r3, r3, #28
 8009020:	4990      	ldr	r1, [pc, #576]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009022:	4313      	orrs	r3, r2
 8009024:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009028:	4b8e      	ldr	r3, [pc, #568]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800902a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800902e:	f023 021f 	bic.w	r2, r3, #31
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	69db      	ldr	r3, [r3, #28]
 8009036:	3b01      	subs	r3, #1
 8009038:	498a      	ldr	r1, [pc, #552]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800903a:	4313      	orrs	r3, r2
 800903c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00d      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	019a      	lsls	r2, r3, #6
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	061b      	lsls	r3, r3, #24
 8009058:	431a      	orrs	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	071b      	lsls	r3, r3, #28
 8009060:	4980      	ldr	r1, [pc, #512]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009062:	4313      	orrs	r3, r2
 8009064:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009068:	4b7d      	ldr	r3, [pc, #500]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800906a:	2201      	movs	r2, #1
 800906c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800906e:	f7fd f84f 	bl	8006110 <HAL_GetTick>
 8009072:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009074:	e008      	b.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009076:	f7fd f84b 	bl	8006110 <HAL_GetTick>
 800907a:	4602      	mov	r2, r0
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	1ad3      	subs	r3, r2, r3
 8009080:	2b02      	cmp	r3, #2
 8009082:	d901      	bls.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009084:	2303      	movs	r3, #3
 8009086:	e12b      	b.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009088:	4b76      	ldr	r3, [pc, #472]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009090:	2b00      	cmp	r3, #0
 8009092:	d0f0      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 0304 	and.w	r3, r3, #4
 800909c:	2b00      	cmp	r3, #0
 800909e:	d105      	bne.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d079      	beq.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80090ac:	4b6e      	ldr	r3, [pc, #440]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80090ae:	2200      	movs	r2, #0
 80090b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80090b2:	f7fd f82d 	bl	8006110 <HAL_GetTick>
 80090b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80090b8:	e008      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80090ba:	f7fd f829 	bl	8006110 <HAL_GetTick>
 80090be:	4602      	mov	r2, r0
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	2b02      	cmp	r3, #2
 80090c6:	d901      	bls.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80090c8:	2303      	movs	r3, #3
 80090ca:	e109      	b.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80090cc:	4b65      	ldr	r3, [pc, #404]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090d8:	d0ef      	beq.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f003 0304 	and.w	r3, r3, #4
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d020      	beq.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80090e6:	4b5f      	ldr	r3, [pc, #380]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ec:	0f1b      	lsrs	r3, r3, #28
 80090ee:	f003 0307 	and.w	r3, r3, #7
 80090f2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	019a      	lsls	r2, r3, #6
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	695b      	ldr	r3, [r3, #20]
 80090fe:	061b      	lsls	r3, r3, #24
 8009100:	431a      	orrs	r2, r3
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	071b      	lsls	r3, r3, #28
 8009106:	4957      	ldr	r1, [pc, #348]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009108:	4313      	orrs	r3, r2
 800910a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800910e:	4b55      	ldr	r3, [pc, #340]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009114:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6a1b      	ldr	r3, [r3, #32]
 800911c:	3b01      	subs	r3, #1
 800911e:	021b      	lsls	r3, r3, #8
 8009120:	4950      	ldr	r1, [pc, #320]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009122:	4313      	orrs	r3, r2
 8009124:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 0308 	and.w	r3, r3, #8
 8009130:	2b00      	cmp	r3, #0
 8009132:	d01e      	beq.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009134:	4b4b      	ldr	r3, [pc, #300]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800913a:	0e1b      	lsrs	r3, r3, #24
 800913c:	f003 030f 	and.w	r3, r3, #15
 8009140:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	019a      	lsls	r2, r3, #6
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	061b      	lsls	r3, r3, #24
 800914c:	431a      	orrs	r2, r3
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	699b      	ldr	r3, [r3, #24]
 8009152:	071b      	lsls	r3, r3, #28
 8009154:	4943      	ldr	r1, [pc, #268]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009156:	4313      	orrs	r3, r2
 8009158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800915c:	4b41      	ldr	r3, [pc, #260]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800915e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009162:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916a:	493e      	ldr	r1, [pc, #248]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800916c:	4313      	orrs	r3, r2
 800916e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009172:	4b3d      	ldr	r3, [pc, #244]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009174:	2201      	movs	r2, #1
 8009176:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009178:	f7fc ffca 	bl	8006110 <HAL_GetTick>
 800917c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800917e:	e008      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009180:	f7fc ffc6 	bl	8006110 <HAL_GetTick>
 8009184:	4602      	mov	r2, r0
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	2b02      	cmp	r3, #2
 800918c:	d901      	bls.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800918e:	2303      	movs	r3, #3
 8009190:	e0a6      	b.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009192:	4b34      	ldr	r3, [pc, #208]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800919a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800919e:	d1ef      	bne.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f003 0320 	and.w	r3, r3, #32
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f000 808d 	beq.w	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80091ae:	2300      	movs	r3, #0
 80091b0:	60fb      	str	r3, [r7, #12]
 80091b2:	4b2c      	ldr	r3, [pc, #176]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80091b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b6:	4a2b      	ldr	r2, [pc, #172]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80091b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091bc:	6413      	str	r3, [r2, #64]	; 0x40
 80091be:	4b29      	ldr	r3, [pc, #164]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80091c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091c6:	60fb      	str	r3, [r7, #12]
 80091c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80091ca:	4b28      	ldr	r3, [pc, #160]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a27      	ldr	r2, [pc, #156]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80091d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80091d6:	f7fc ff9b 	bl	8006110 <HAL_GetTick>
 80091da:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80091dc:	e008      	b.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80091de:	f7fc ff97 	bl	8006110 <HAL_GetTick>
 80091e2:	4602      	mov	r2, r0
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	1ad3      	subs	r3, r2, r3
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d901      	bls.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80091ec:	2303      	movs	r3, #3
 80091ee:	e077      	b.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80091f0:	4b1e      	ldr	r3, [pc, #120]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d0f0      	beq.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80091fc:	4b19      	ldr	r3, [pc, #100]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80091fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009200:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009204:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d039      	beq.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009210:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009214:	693a      	ldr	r2, [r7, #16]
 8009216:	429a      	cmp	r2, r3
 8009218:	d032      	beq.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800921a:	4b12      	ldr	r3, [pc, #72]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800921c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800921e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009222:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009224:	4b12      	ldr	r3, [pc, #72]	; (8009270 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8009226:	2201      	movs	r2, #1
 8009228:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800922a:	4b11      	ldr	r3, [pc, #68]	; (8009270 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800922c:	2200      	movs	r2, #0
 800922e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009230:	4a0c      	ldr	r2, [pc, #48]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009236:	4b0b      	ldr	r3, [pc, #44]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800923a:	f003 0301 	and.w	r3, r3, #1
 800923e:	2b01      	cmp	r3, #1
 8009240:	d11e      	bne.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009242:	f7fc ff65 	bl	8006110 <HAL_GetTick>
 8009246:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009248:	e014      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800924a:	f7fc ff61 	bl	8006110 <HAL_GetTick>
 800924e:	4602      	mov	r2, r0
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	1ad3      	subs	r3, r2, r3
 8009254:	f241 3288 	movw	r2, #5000	; 0x1388
 8009258:	4293      	cmp	r3, r2
 800925a:	d90b      	bls.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800925c:	2303      	movs	r3, #3
 800925e:	e03f      	b.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8009260:	42470068 	.word	0x42470068
 8009264:	40023800 	.word	0x40023800
 8009268:	42470070 	.word	0x42470070
 800926c:	40007000 	.word	0x40007000
 8009270:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009274:	4b1c      	ldr	r3, [pc, #112]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009278:	f003 0302 	and.w	r3, r3, #2
 800927c:	2b00      	cmp	r3, #0
 800927e:	d0e4      	beq.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009284:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009288:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800928c:	d10d      	bne.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x336>
 800928e:	4b16      	ldr	r3, [pc, #88]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800929a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800929e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092a2:	4911      	ldr	r1, [pc, #68]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80092a4:	4313      	orrs	r3, r2
 80092a6:	608b      	str	r3, [r1, #8]
 80092a8:	e005      	b.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80092aa:	4b0f      	ldr	r3, [pc, #60]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	4a0e      	ldr	r2, [pc, #56]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80092b0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80092b4:	6093      	str	r3, [r2, #8]
 80092b6:	4b0c      	ldr	r3, [pc, #48]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80092b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092c2:	4909      	ldr	r1, [pc, #36]	; (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80092c4:	4313      	orrs	r3, r2
 80092c6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f003 0310 	and.w	r3, r3, #16
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d004      	beq.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80092da:	4b04      	ldr	r3, [pc, #16]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80092dc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3718      	adds	r7, #24
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	40023800 	.word	0x40023800
 80092ec:	424711e0 	.word	0x424711e0

080092f0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d101      	bne.n	8009304 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	e025      	b.n	8009350 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800930a:	b2db      	uxtb	r3, r3
 800930c:	2b00      	cmp	r3, #0
 800930e:	d106      	bne.n	800931e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f7fa fc57 	bl	8003bcc <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2202      	movs	r2, #2
 8009322:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	3304      	adds	r3, #4
 800932e:	4619      	mov	r1, r3
 8009330:	4610      	mov	r0, r2
 8009332:	f002 fab3 	bl	800b89c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6818      	ldr	r0, [r3, #0]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	461a      	mov	r2, r3
 8009340:	6839      	ldr	r1, [r7, #0]
 8009342:	f002 fb1e 	bl	800b982 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2201      	movs	r2, #1
 800934a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800936a:	b2db      	uxtb	r3, r3
 800936c:	2b02      	cmp	r3, #2
 800936e:	d101      	bne.n	8009374 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009370:	2302      	movs	r3, #2
 8009372:	e018      	b.n	80093a6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2202      	movs	r2, #2
 8009378:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	68b9      	ldr	r1, [r7, #8]
 8009384:	4618      	mov	r0, r3
 8009386:	f002 fb7b 	bl	800ba80 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2b02      	cmp	r3, #2
 8009390:	d104      	bne.n	800939c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2205      	movs	r2, #5
 8009396:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800939a:	e003      	b.n	80093a4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b082      	sub	sp, #8
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
 80093b6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	d101      	bne.n	80093c8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80093c4:	2302      	movs	r3, #2
 80093c6:	e00e      	b.n	80093e6 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2202      	movs	r2, #2
 80093cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6839      	ldr	r1, [r7, #0]
 80093d6:	4618      	mov	r0, r3
 80093d8:	f002 fb8e 	bl	800baf8 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2201      	movs	r2, #1
 80093e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3708      	adds	r7, #8
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b082      	sub	sp, #8
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d101      	bne.n	8009400 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e07b      	b.n	80094f8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009404:	2b00      	cmp	r3, #0
 8009406:	d108      	bne.n	800941a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009410:	d009      	beq.n	8009426 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	61da      	str	r2, [r3, #28]
 8009418:	e005      	b.n	8009426 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009432:	b2db      	uxtb	r3, r3
 8009434:	2b00      	cmp	r3, #0
 8009436:	d106      	bne.n	8009446 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f7fb f977 	bl	8004734 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2202      	movs	r2, #2
 800944a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800945c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800946e:	431a      	orrs	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009478:	431a      	orrs	r2, r3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	f003 0302 	and.w	r3, r3, #2
 8009482:	431a      	orrs	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	695b      	ldr	r3, [r3, #20]
 8009488:	f003 0301 	and.w	r3, r3, #1
 800948c:	431a      	orrs	r2, r3
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	699b      	ldr	r3, [r3, #24]
 8009492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009496:	431a      	orrs	r2, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	69db      	ldr	r3, [r3, #28]
 800949c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80094a0:	431a      	orrs	r2, r3
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6a1b      	ldr	r3, [r3, #32]
 80094a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094aa:	ea42 0103 	orr.w	r1, r2, r3
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	430a      	orrs	r2, r1
 80094bc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	699b      	ldr	r3, [r3, #24]
 80094c2:	0c1b      	lsrs	r3, r3, #16
 80094c4:	f003 0104 	and.w	r1, r3, #4
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094cc:	f003 0210 	and.w	r2, r3, #16
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	430a      	orrs	r2, r1
 80094d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	69da      	ldr	r2, [r3, #28]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2201      	movs	r2, #1
 80094f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80094f6:	2300      	movs	r3, #0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d101      	bne.n	8009512 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	e01a      	b.n	8009548 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2202      	movs	r2, #2
 8009516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009528:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f7fb f94a 	bl	80047c4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b088      	sub	sp, #32
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	603b      	str	r3, [r7, #0]
 800955c:	4613      	mov	r3, r2
 800955e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009560:	2300      	movs	r3, #0
 8009562:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800956a:	2b01      	cmp	r3, #1
 800956c:	d101      	bne.n	8009572 <HAL_SPI_Transmit+0x22>
 800956e:	2302      	movs	r3, #2
 8009570:	e126      	b.n	80097c0 <HAL_SPI_Transmit+0x270>
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2201      	movs	r2, #1
 8009576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800957a:	f7fc fdc9 	bl	8006110 <HAL_GetTick>
 800957e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009580:	88fb      	ldrh	r3, [r7, #6]
 8009582:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800958a:	b2db      	uxtb	r3, r3
 800958c:	2b01      	cmp	r3, #1
 800958e:	d002      	beq.n	8009596 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009590:	2302      	movs	r3, #2
 8009592:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009594:	e10b      	b.n	80097ae <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d002      	beq.n	80095a2 <HAL_SPI_Transmit+0x52>
 800959c:	88fb      	ldrh	r3, [r7, #6]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d102      	bne.n	80095a8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80095a6:	e102      	b.n	80097ae <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2203      	movs	r2, #3
 80095ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2200      	movs	r2, #0
 80095b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	68ba      	ldr	r2, [r7, #8]
 80095ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	88fa      	ldrh	r2, [r7, #6]
 80095c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	88fa      	ldrh	r2, [r7, #6]
 80095c6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2200      	movs	r2, #0
 80095d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2200      	movs	r2, #0
 80095d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2200      	movs	r2, #0
 80095de:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2200      	movs	r2, #0
 80095e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095ee:	d10f      	bne.n	8009610 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800960e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800961a:	2b40      	cmp	r3, #64	; 0x40
 800961c:	d007      	beq.n	800962e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800962c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009636:	d14b      	bne.n	80096d0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d002      	beq.n	8009646 <HAL_SPI_Transmit+0xf6>
 8009640:	8afb      	ldrh	r3, [r7, #22]
 8009642:	2b01      	cmp	r3, #1
 8009644:	d13e      	bne.n	80096c4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800964a:	881a      	ldrh	r2, [r3, #0]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009656:	1c9a      	adds	r2, r3, #2
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009660:	b29b      	uxth	r3, r3
 8009662:	3b01      	subs	r3, #1
 8009664:	b29a      	uxth	r2, r3
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800966a:	e02b      	b.n	80096c4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	f003 0302 	and.w	r3, r3, #2
 8009676:	2b02      	cmp	r3, #2
 8009678:	d112      	bne.n	80096a0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800967e:	881a      	ldrh	r2, [r3, #0]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800968a:	1c9a      	adds	r2, r3, #2
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009694:	b29b      	uxth	r3, r3
 8009696:	3b01      	subs	r3, #1
 8009698:	b29a      	uxth	r2, r3
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	86da      	strh	r2, [r3, #54]	; 0x36
 800969e:	e011      	b.n	80096c4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096a0:	f7fc fd36 	bl	8006110 <HAL_GetTick>
 80096a4:	4602      	mov	r2, r0
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	1ad3      	subs	r3, r2, r3
 80096aa:	683a      	ldr	r2, [r7, #0]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d803      	bhi.n	80096b8 <HAL_SPI_Transmit+0x168>
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b6:	d102      	bne.n	80096be <HAL_SPI_Transmit+0x16e>
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d102      	bne.n	80096c4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80096be:	2303      	movs	r3, #3
 80096c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80096c2:	e074      	b.n	80097ae <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d1ce      	bne.n	800966c <HAL_SPI_Transmit+0x11c>
 80096ce:	e04c      	b.n	800976a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d002      	beq.n	80096de <HAL_SPI_Transmit+0x18e>
 80096d8:	8afb      	ldrh	r3, [r7, #22]
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d140      	bne.n	8009760 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	330c      	adds	r3, #12
 80096e8:	7812      	ldrb	r2, [r2, #0]
 80096ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f0:	1c5a      	adds	r2, r3, #1
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	3b01      	subs	r3, #1
 80096fe:	b29a      	uxth	r2, r3
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009704:	e02c      	b.n	8009760 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	f003 0302 	and.w	r3, r3, #2
 8009710:	2b02      	cmp	r3, #2
 8009712:	d113      	bne.n	800973c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	330c      	adds	r3, #12
 800971e:	7812      	ldrb	r2, [r2, #0]
 8009720:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009726:	1c5a      	adds	r2, r3, #1
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009730:	b29b      	uxth	r3, r3
 8009732:	3b01      	subs	r3, #1
 8009734:	b29a      	uxth	r2, r3
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	86da      	strh	r2, [r3, #54]	; 0x36
 800973a:	e011      	b.n	8009760 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800973c:	f7fc fce8 	bl	8006110 <HAL_GetTick>
 8009740:	4602      	mov	r2, r0
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	1ad3      	subs	r3, r2, r3
 8009746:	683a      	ldr	r2, [r7, #0]
 8009748:	429a      	cmp	r2, r3
 800974a:	d803      	bhi.n	8009754 <HAL_SPI_Transmit+0x204>
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009752:	d102      	bne.n	800975a <HAL_SPI_Transmit+0x20a>
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d102      	bne.n	8009760 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800975a:	2303      	movs	r3, #3
 800975c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800975e:	e026      	b.n	80097ae <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009764:	b29b      	uxth	r3, r3
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1cd      	bne.n	8009706 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800976a:	69ba      	ldr	r2, [r7, #24]
 800976c:	6839      	ldr	r1, [r7, #0]
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f000 fbda 	bl	8009f28 <SPI_EndRxTxTransaction>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d002      	beq.n	8009780 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2220      	movs	r2, #32
 800977e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d10a      	bne.n	800979e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009788:	2300      	movs	r3, #0
 800978a:	613b      	str	r3, [r7, #16]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	613b      	str	r3, [r7, #16]
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	613b      	str	r3, [r7, #16]
 800979c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d002      	beq.n	80097ac <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	77fb      	strb	r3, [r7, #31]
 80097aa:	e000      	b.n	80097ae <HAL_SPI_Transmit+0x25e>
  }

error:
 80097ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2201      	movs	r2, #1
 80097b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80097be:	7ffb      	ldrb	r3, [r7, #31]
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3720      	adds	r7, #32
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b088      	sub	sp, #32
 80097cc:	af02      	add	r7, sp, #8
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	603b      	str	r3, [r7, #0]
 80097d4:	4613      	mov	r3, r2
 80097d6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80097d8:	2300      	movs	r3, #0
 80097da:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097e4:	d112      	bne.n	800980c <HAL_SPI_Receive+0x44>
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d10e      	bne.n	800980c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2204      	movs	r2, #4
 80097f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80097f6:	88fa      	ldrh	r2, [r7, #6]
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	4613      	mov	r3, r2
 80097fe:	68ba      	ldr	r2, [r7, #8]
 8009800:	68b9      	ldr	r1, [r7, #8]
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f000 f8f1 	bl	80099ea <HAL_SPI_TransmitReceive>
 8009808:	4603      	mov	r3, r0
 800980a:	e0ea      	b.n	80099e2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009812:	2b01      	cmp	r3, #1
 8009814:	d101      	bne.n	800981a <HAL_SPI_Receive+0x52>
 8009816:	2302      	movs	r3, #2
 8009818:	e0e3      	b.n	80099e2 <HAL_SPI_Receive+0x21a>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009822:	f7fc fc75 	bl	8006110 <HAL_GetTick>
 8009826:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800982e:	b2db      	uxtb	r3, r3
 8009830:	2b01      	cmp	r3, #1
 8009832:	d002      	beq.n	800983a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009834:	2302      	movs	r3, #2
 8009836:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009838:	e0ca      	b.n	80099d0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d002      	beq.n	8009846 <HAL_SPI_Receive+0x7e>
 8009840:	88fb      	ldrh	r3, [r7, #6]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d102      	bne.n	800984c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	75fb      	strb	r3, [r7, #23]
    goto error;
 800984a:	e0c1      	b.n	80099d0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2204      	movs	r2, #4
 8009850:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2200      	movs	r2, #0
 8009858:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	68ba      	ldr	r2, [r7, #8]
 800985e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	88fa      	ldrh	r2, [r7, #6]
 8009864:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	88fa      	ldrh	r2, [r7, #6]
 800986a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2200      	movs	r2, #0
 8009870:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2200      	movs	r2, #0
 8009876:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2200      	movs	r2, #0
 800987c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2200      	movs	r2, #0
 8009882:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2200      	movs	r2, #0
 8009888:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009892:	d10f      	bne.n	80098b4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80098b2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098be:	2b40      	cmp	r3, #64	; 0x40
 80098c0:	d007      	beq.n	80098d2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098d0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d162      	bne.n	80099a0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80098da:	e02e      	b.n	800993a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	f003 0301 	and.w	r3, r3, #1
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d115      	bne.n	8009916 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f103 020c 	add.w	r2, r3, #12
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f6:	7812      	ldrb	r2, [r2, #0]
 80098f8:	b2d2      	uxtb	r2, r2
 80098fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009900:	1c5a      	adds	r2, r3, #1
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800990a:	b29b      	uxth	r3, r3
 800990c:	3b01      	subs	r3, #1
 800990e:	b29a      	uxth	r2, r3
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009914:	e011      	b.n	800993a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009916:	f7fc fbfb 	bl	8006110 <HAL_GetTick>
 800991a:	4602      	mov	r2, r0
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	1ad3      	subs	r3, r2, r3
 8009920:	683a      	ldr	r2, [r7, #0]
 8009922:	429a      	cmp	r2, r3
 8009924:	d803      	bhi.n	800992e <HAL_SPI_Receive+0x166>
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800992c:	d102      	bne.n	8009934 <HAL_SPI_Receive+0x16c>
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d102      	bne.n	800993a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009934:	2303      	movs	r3, #3
 8009936:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009938:	e04a      	b.n	80099d0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800993e:	b29b      	uxth	r3, r3
 8009940:	2b00      	cmp	r3, #0
 8009942:	d1cb      	bne.n	80098dc <HAL_SPI_Receive+0x114>
 8009944:	e031      	b.n	80099aa <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	f003 0301 	and.w	r3, r3, #1
 8009950:	2b01      	cmp	r3, #1
 8009952:	d113      	bne.n	800997c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68da      	ldr	r2, [r3, #12]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800995e:	b292      	uxth	r2, r2
 8009960:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009966:	1c9a      	adds	r2, r3, #2
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009970:	b29b      	uxth	r3, r3
 8009972:	3b01      	subs	r3, #1
 8009974:	b29a      	uxth	r2, r3
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	87da      	strh	r2, [r3, #62]	; 0x3e
 800997a:	e011      	b.n	80099a0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800997c:	f7fc fbc8 	bl	8006110 <HAL_GetTick>
 8009980:	4602      	mov	r2, r0
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	1ad3      	subs	r3, r2, r3
 8009986:	683a      	ldr	r2, [r7, #0]
 8009988:	429a      	cmp	r2, r3
 800998a:	d803      	bhi.n	8009994 <HAL_SPI_Receive+0x1cc>
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009992:	d102      	bne.n	800999a <HAL_SPI_Receive+0x1d2>
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d102      	bne.n	80099a0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800999a:	2303      	movs	r3, #3
 800999c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800999e:	e017      	b.n	80099d0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1cd      	bne.n	8009946 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80099aa:	693a      	ldr	r2, [r7, #16]
 80099ac:	6839      	ldr	r1, [r7, #0]
 80099ae:	68f8      	ldr	r0, [r7, #12]
 80099b0:	f000 fa54 	bl	8009e5c <SPI_EndRxTransaction>
 80099b4:	4603      	mov	r3, r0
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d002      	beq.n	80099c0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2220      	movs	r2, #32
 80099be:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d002      	beq.n	80099ce <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	75fb      	strb	r3, [r7, #23]
 80099cc:	e000      	b.n	80099d0 <HAL_SPI_Receive+0x208>
  }

error :
 80099ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2201      	movs	r2, #1
 80099d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2200      	movs	r2, #0
 80099dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80099e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3718      	adds	r7, #24
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b08c      	sub	sp, #48	; 0x30
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	60f8      	str	r0, [r7, #12]
 80099f2:	60b9      	str	r1, [r7, #8]
 80099f4:	607a      	str	r2, [r7, #4]
 80099f6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80099f8:	2301      	movs	r3, #1
 80099fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80099fc:	2300      	movs	r3, #0
 80099fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d101      	bne.n	8009a10 <HAL_SPI_TransmitReceive+0x26>
 8009a0c:	2302      	movs	r3, #2
 8009a0e:	e18a      	b.n	8009d26 <HAL_SPI_TransmitReceive+0x33c>
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2201      	movs	r2, #1
 8009a14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a18:	f7fc fb7a 	bl	8006110 <HAL_GetTick>
 8009a1c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009a2e:	887b      	ldrh	r3, [r7, #2]
 8009a30:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009a32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d00f      	beq.n	8009a5a <HAL_SPI_TransmitReceive+0x70>
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a40:	d107      	bne.n	8009a52 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d103      	bne.n	8009a52 <HAL_SPI_TransmitReceive+0x68>
 8009a4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a4e:	2b04      	cmp	r3, #4
 8009a50:	d003      	beq.n	8009a5a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009a52:	2302      	movs	r3, #2
 8009a54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009a58:	e15b      	b.n	8009d12 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d005      	beq.n	8009a6c <HAL_SPI_TransmitReceive+0x82>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d002      	beq.n	8009a6c <HAL_SPI_TransmitReceive+0x82>
 8009a66:	887b      	ldrh	r3, [r7, #2]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d103      	bne.n	8009a74 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009a72:	e14e      	b.n	8009d12 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	2b04      	cmp	r3, #4
 8009a7e:	d003      	beq.n	8009a88 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2205      	movs	r2, #5
 8009a84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	887a      	ldrh	r2, [r7, #2]
 8009a98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	887a      	ldrh	r2, [r7, #2]
 8009a9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	68ba      	ldr	r2, [r7, #8]
 8009aa4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	887a      	ldrh	r2, [r7, #2]
 8009aaa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	887a      	ldrh	r2, [r7, #2]
 8009ab0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2200      	movs	r2, #0
 8009abc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ac8:	2b40      	cmp	r3, #64	; 0x40
 8009aca:	d007      	beq.n	8009adc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ada:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ae4:	d178      	bne.n	8009bd8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d002      	beq.n	8009af4 <HAL_SPI_TransmitReceive+0x10a>
 8009aee:	8b7b      	ldrh	r3, [r7, #26]
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d166      	bne.n	8009bc2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af8:	881a      	ldrh	r2, [r3, #0]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b04:	1c9a      	adds	r2, r3, #2
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	3b01      	subs	r3, #1
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b18:	e053      	b.n	8009bc2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	f003 0302 	and.w	r3, r3, #2
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	d11b      	bne.n	8009b60 <HAL_SPI_TransmitReceive+0x176>
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d016      	beq.n	8009b60 <HAL_SPI_TransmitReceive+0x176>
 8009b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d113      	bne.n	8009b60 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b3c:	881a      	ldrh	r2, [r3, #0]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b48:	1c9a      	adds	r2, r3, #2
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	3b01      	subs	r3, #1
 8009b56:	b29a      	uxth	r2, r3
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	689b      	ldr	r3, [r3, #8]
 8009b66:	f003 0301 	and.w	r3, r3, #1
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d119      	bne.n	8009ba2 <HAL_SPI_TransmitReceive+0x1b8>
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d014      	beq.n	8009ba2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	68da      	ldr	r2, [r3, #12]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b82:	b292      	uxth	r2, r2
 8009b84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b8a:	1c9a      	adds	r2, r3, #2
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	3b01      	subs	r3, #1
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009ba2:	f7fc fab5 	bl	8006110 <HAL_GetTick>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009baa:	1ad3      	subs	r3, r2, r3
 8009bac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d807      	bhi.n	8009bc2 <HAL_SPI_TransmitReceive+0x1d8>
 8009bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb8:	d003      	beq.n	8009bc2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009bba:	2303      	movs	r3, #3
 8009bbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009bc0:	e0a7      	b.n	8009d12 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d1a6      	bne.n	8009b1a <HAL_SPI_TransmitReceive+0x130>
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1a1      	bne.n	8009b1a <HAL_SPI_TransmitReceive+0x130>
 8009bd6:	e07c      	b.n	8009cd2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d002      	beq.n	8009be6 <HAL_SPI_TransmitReceive+0x1fc>
 8009be0:	8b7b      	ldrh	r3, [r7, #26]
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d16b      	bne.n	8009cbe <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	330c      	adds	r3, #12
 8009bf0:	7812      	ldrb	r2, [r2, #0]
 8009bf2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf8:	1c5a      	adds	r2, r3, #1
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	3b01      	subs	r3, #1
 8009c06:	b29a      	uxth	r2, r3
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c0c:	e057      	b.n	8009cbe <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	f003 0302 	and.w	r3, r3, #2
 8009c18:	2b02      	cmp	r3, #2
 8009c1a:	d11c      	bne.n	8009c56 <HAL_SPI_TransmitReceive+0x26c>
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d017      	beq.n	8009c56 <HAL_SPI_TransmitReceive+0x26c>
 8009c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d114      	bne.n	8009c56 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	330c      	adds	r3, #12
 8009c36:	7812      	ldrb	r2, [r2, #0]
 8009c38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c3e:	1c5a      	adds	r2, r3, #1
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	3b01      	subs	r3, #1
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009c52:	2300      	movs	r3, #0
 8009c54:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	f003 0301 	and.w	r3, r3, #1
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d119      	bne.n	8009c98 <HAL_SPI_TransmitReceive+0x2ae>
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d014      	beq.n	8009c98 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68da      	ldr	r2, [r3, #12]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c78:	b2d2      	uxtb	r2, r2
 8009c7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c80:	1c5a      	adds	r2, r3, #1
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	3b01      	subs	r3, #1
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009c94:	2301      	movs	r3, #1
 8009c96:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009c98:	f7fc fa3a 	bl	8006110 <HAL_GetTick>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca0:	1ad3      	subs	r3, r2, r3
 8009ca2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d803      	bhi.n	8009cb0 <HAL_SPI_TransmitReceive+0x2c6>
 8009ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cae:	d102      	bne.n	8009cb6 <HAL_SPI_TransmitReceive+0x2cc>
 8009cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d103      	bne.n	8009cbe <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009cb6:	2303      	movs	r3, #3
 8009cb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009cbc:	e029      	b.n	8009d12 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d1a2      	bne.n	8009c0e <HAL_SPI_TransmitReceive+0x224>
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d19d      	bne.n	8009c0e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f000 f926 	bl	8009f28 <SPI_EndRxTxTransaction>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d006      	beq.n	8009cf0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2220      	movs	r2, #32
 8009cec:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009cee:	e010      	b.n	8009d12 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10b      	bne.n	8009d10 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	617b      	str	r3, [r7, #20]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	617b      	str	r3, [r7, #20]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	617b      	str	r3, [r7, #20]
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	e000      	b.n	8009d12 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009d10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2201      	movs	r2, #1
 8009d16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009d22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3730      	adds	r7, #48	; 0x30
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009d2e:	b480      	push	{r7}
 8009d30:	b083      	sub	sp, #12
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d3c:	b2db      	uxtb	r3, r3
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	370c      	adds	r7, #12
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr
	...

08009d4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b088      	sub	sp, #32
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	603b      	str	r3, [r7, #0]
 8009d58:	4613      	mov	r3, r2
 8009d5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009d5c:	f7fc f9d8 	bl	8006110 <HAL_GetTick>
 8009d60:	4602      	mov	r2, r0
 8009d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d64:	1a9b      	subs	r3, r3, r2
 8009d66:	683a      	ldr	r2, [r7, #0]
 8009d68:	4413      	add	r3, r2
 8009d6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009d6c:	f7fc f9d0 	bl	8006110 <HAL_GetTick>
 8009d70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009d72:	4b39      	ldr	r3, [pc, #228]	; (8009e58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	015b      	lsls	r3, r3, #5
 8009d78:	0d1b      	lsrs	r3, r3, #20
 8009d7a:	69fa      	ldr	r2, [r7, #28]
 8009d7c:	fb02 f303 	mul.w	r3, r2, r3
 8009d80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d82:	e054      	b.n	8009e2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d8a:	d050      	beq.n	8009e2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009d8c:	f7fc f9c0 	bl	8006110 <HAL_GetTick>
 8009d90:	4602      	mov	r2, r0
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	1ad3      	subs	r3, r2, r3
 8009d96:	69fa      	ldr	r2, [r7, #28]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d902      	bls.n	8009da2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d13d      	bne.n	8009e1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	685a      	ldr	r2, [r3, #4]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009db0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009dba:	d111      	bne.n	8009de0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009dc4:	d004      	beq.n	8009dd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009dce:	d107      	bne.n	8009de0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009dde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009de8:	d10f      	bne.n	8009e0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009df8:	601a      	str	r2, [r3, #0]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009e08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2200      	movs	r2, #0
 8009e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009e1a:	2303      	movs	r3, #3
 8009e1c:	e017      	b.n	8009e4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d101      	bne.n	8009e28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009e24:	2300      	movs	r3, #0
 8009e26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	689a      	ldr	r2, [r3, #8]
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	4013      	ands	r3, r2
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	bf0c      	ite	eq
 8009e3e:	2301      	moveq	r3, #1
 8009e40:	2300      	movne	r3, #0
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	461a      	mov	r2, r3
 8009e46:	79fb      	ldrb	r3, [r7, #7]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d19b      	bne.n	8009d84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3720      	adds	r7, #32
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	200000b0 	.word	0x200000b0

08009e5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b086      	sub	sp, #24
 8009e60:	af02      	add	r7, sp, #8
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e70:	d111      	bne.n	8009e96 <SPI_EndRxTransaction+0x3a>
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	689b      	ldr	r3, [r3, #8]
 8009e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e7a:	d004      	beq.n	8009e86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e84:	d107      	bne.n	8009e96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e94:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e9e:	d12a      	bne.n	8009ef6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ea8:	d012      	beq.n	8009ed0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	9300      	str	r3, [sp, #0]
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	2180      	movs	r1, #128	; 0x80
 8009eb4:	68f8      	ldr	r0, [r7, #12]
 8009eb6:	f7ff ff49 	bl	8009d4c <SPI_WaitFlagStateUntilTimeout>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d02d      	beq.n	8009f1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ec4:	f043 0220 	orr.w	r2, r3, #32
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009ecc:	2303      	movs	r3, #3
 8009ece:	e026      	b.n	8009f1e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	9300      	str	r3, [sp, #0]
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	2101      	movs	r1, #1
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	f7ff ff36 	bl	8009d4c <SPI_WaitFlagStateUntilTimeout>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d01a      	beq.n	8009f1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eea:	f043 0220 	orr.w	r2, r3, #32
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009ef2:	2303      	movs	r3, #3
 8009ef4:	e013      	b.n	8009f1e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	9300      	str	r3, [sp, #0]
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	2200      	movs	r2, #0
 8009efe:	2101      	movs	r1, #1
 8009f00:	68f8      	ldr	r0, [r7, #12]
 8009f02:	f7ff ff23 	bl	8009d4c <SPI_WaitFlagStateUntilTimeout>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d007      	beq.n	8009f1c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f10:	f043 0220 	orr.w	r2, r3, #32
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009f18:	2303      	movs	r3, #3
 8009f1a:	e000      	b.n	8009f1e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009f1c:	2300      	movs	r3, #0
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3710      	adds	r7, #16
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
	...

08009f28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b088      	sub	sp, #32
 8009f2c:	af02      	add	r7, sp, #8
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009f34:	4b1b      	ldr	r3, [pc, #108]	; (8009fa4 <SPI_EndRxTxTransaction+0x7c>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a1b      	ldr	r2, [pc, #108]	; (8009fa8 <SPI_EndRxTxTransaction+0x80>)
 8009f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f3e:	0d5b      	lsrs	r3, r3, #21
 8009f40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009f44:	fb02 f303 	mul.w	r3, r2, r3
 8009f48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f52:	d112      	bne.n	8009f7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	9300      	str	r3, [sp, #0]
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	2180      	movs	r1, #128	; 0x80
 8009f5e:	68f8      	ldr	r0, [r7, #12]
 8009f60:	f7ff fef4 	bl	8009d4c <SPI_WaitFlagStateUntilTimeout>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d016      	beq.n	8009f98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f6e:	f043 0220 	orr.w	r2, r3, #32
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009f76:	2303      	movs	r3, #3
 8009f78:	e00f      	b.n	8009f9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d00a      	beq.n	8009f96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	3b01      	subs	r3, #1
 8009f84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f90:	2b80      	cmp	r3, #128	; 0x80
 8009f92:	d0f2      	beq.n	8009f7a <SPI_EndRxTxTransaction+0x52>
 8009f94:	e000      	b.n	8009f98 <SPI_EndRxTxTransaction+0x70>
        break;
 8009f96:	bf00      	nop
  }

  return HAL_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3718      	adds	r7, #24
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	200000b0 	.word	0x200000b0
 8009fa8:	165e9f81 	.word	0x165e9f81

08009fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d101      	bne.n	8009fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e041      	b.n	800a042 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d106      	bne.n	8009fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f7fa fe40 	bl	8004c58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2202      	movs	r2, #2
 8009fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	3304      	adds	r3, #4
 8009fe8:	4619      	mov	r1, r3
 8009fea:	4610      	mov	r0, r2
 8009fec:	f000 fac4 	bl	800a578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2201      	movs	r2, #1
 800a004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2201      	movs	r2, #1
 800a014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2201      	movs	r2, #1
 800a01c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2201      	movs	r2, #1
 800a034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2201      	movs	r2, #1
 800a03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
	...

0800a04c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b085      	sub	sp, #20
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d001      	beq.n	800a064 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a060:	2301      	movs	r3, #1
 800a062:	e04e      	b.n	800a102 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2202      	movs	r2, #2
 800a068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	68da      	ldr	r2, [r3, #12]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f042 0201 	orr.w	r2, r2, #1
 800a07a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a23      	ldr	r2, [pc, #140]	; (800a110 <HAL_TIM_Base_Start_IT+0xc4>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d022      	beq.n	800a0cc <HAL_TIM_Base_Start_IT+0x80>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a08e:	d01d      	beq.n	800a0cc <HAL_TIM_Base_Start_IT+0x80>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a1f      	ldr	r2, [pc, #124]	; (800a114 <HAL_TIM_Base_Start_IT+0xc8>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d018      	beq.n	800a0cc <HAL_TIM_Base_Start_IT+0x80>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a1e      	ldr	r2, [pc, #120]	; (800a118 <HAL_TIM_Base_Start_IT+0xcc>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d013      	beq.n	800a0cc <HAL_TIM_Base_Start_IT+0x80>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a1c      	ldr	r2, [pc, #112]	; (800a11c <HAL_TIM_Base_Start_IT+0xd0>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d00e      	beq.n	800a0cc <HAL_TIM_Base_Start_IT+0x80>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a1b      	ldr	r2, [pc, #108]	; (800a120 <HAL_TIM_Base_Start_IT+0xd4>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d009      	beq.n	800a0cc <HAL_TIM_Base_Start_IT+0x80>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a19      	ldr	r2, [pc, #100]	; (800a124 <HAL_TIM_Base_Start_IT+0xd8>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d004      	beq.n	800a0cc <HAL_TIM_Base_Start_IT+0x80>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a18      	ldr	r2, [pc, #96]	; (800a128 <HAL_TIM_Base_Start_IT+0xdc>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d111      	bne.n	800a0f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	f003 0307 	and.w	r3, r3, #7
 800a0d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2b06      	cmp	r3, #6
 800a0dc:	d010      	beq.n	800a100 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f042 0201 	orr.w	r2, r2, #1
 800a0ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0ee:	e007      	b.n	800a100 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f042 0201 	orr.w	r2, r2, #1
 800a0fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3714      	adds	r7, #20
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr
 800a10e:	bf00      	nop
 800a110:	40010000 	.word	0x40010000
 800a114:	40000400 	.word	0x40000400
 800a118:	40000800 	.word	0x40000800
 800a11c:	40000c00 	.word	0x40000c00
 800a120:	40010400 	.word	0x40010400
 800a124:	40014000 	.word	0x40014000
 800a128:	40001800 	.word	0x40001800

0800a12c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	68da      	ldr	r2, [r3, #12]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f022 0201 	bic.w	r2, r2, #1
 800a142:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	6a1a      	ldr	r2, [r3, #32]
 800a14a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a14e:	4013      	ands	r3, r2
 800a150:	2b00      	cmp	r3, #0
 800a152:	d10f      	bne.n	800a174 <HAL_TIM_Base_Stop_IT+0x48>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	6a1a      	ldr	r2, [r3, #32]
 800a15a:	f240 4344 	movw	r3, #1092	; 0x444
 800a15e:	4013      	ands	r3, r2
 800a160:	2b00      	cmp	r3, #0
 800a162:	d107      	bne.n	800a174 <HAL_TIM_Base_Stop_IT+0x48>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f022 0201 	bic.w	r2, r2, #1
 800a172:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	370c      	adds	r7, #12
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr

0800a18a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b082      	sub	sp, #8
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	f003 0302 	and.w	r3, r3, #2
 800a19c:	2b02      	cmp	r3, #2
 800a19e:	d122      	bne.n	800a1e6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	f003 0302 	and.w	r3, r3, #2
 800a1aa:	2b02      	cmp	r3, #2
 800a1ac:	d11b      	bne.n	800a1e6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f06f 0202 	mvn.w	r2, #2
 800a1b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	699b      	ldr	r3, [r3, #24]
 800a1c4:	f003 0303 	and.w	r3, r3, #3
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d003      	beq.n	800a1d4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 f9b5 	bl	800a53c <HAL_TIM_IC_CaptureCallback>
 800a1d2:	e005      	b.n	800a1e0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 f9a7 	bl	800a528 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f000 f9b8 	bl	800a550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	f003 0304 	and.w	r3, r3, #4
 800a1f0:	2b04      	cmp	r3, #4
 800a1f2:	d122      	bne.n	800a23a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	f003 0304 	and.w	r3, r3, #4
 800a1fe:	2b04      	cmp	r3, #4
 800a200:	d11b      	bne.n	800a23a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f06f 0204 	mvn.w	r2, #4
 800a20a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2202      	movs	r2, #2
 800a210:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	699b      	ldr	r3, [r3, #24]
 800a218:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d003      	beq.n	800a228 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 f98b 	bl	800a53c <HAL_TIM_IC_CaptureCallback>
 800a226:	e005      	b.n	800a234 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 f97d 	bl	800a528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 f98e 	bl	800a550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	691b      	ldr	r3, [r3, #16]
 800a240:	f003 0308 	and.w	r3, r3, #8
 800a244:	2b08      	cmp	r3, #8
 800a246:	d122      	bne.n	800a28e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	f003 0308 	and.w	r3, r3, #8
 800a252:	2b08      	cmp	r3, #8
 800a254:	d11b      	bne.n	800a28e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f06f 0208 	mvn.w	r2, #8
 800a25e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2204      	movs	r2, #4
 800a264:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	69db      	ldr	r3, [r3, #28]
 800a26c:	f003 0303 	and.w	r3, r3, #3
 800a270:	2b00      	cmp	r3, #0
 800a272:	d003      	beq.n	800a27c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 f961 	bl	800a53c <HAL_TIM_IC_CaptureCallback>
 800a27a:	e005      	b.n	800a288 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 f953 	bl	800a528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 f964 	bl	800a550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	f003 0310 	and.w	r3, r3, #16
 800a298:	2b10      	cmp	r3, #16
 800a29a:	d122      	bne.n	800a2e2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	f003 0310 	and.w	r3, r3, #16
 800a2a6:	2b10      	cmp	r3, #16
 800a2a8:	d11b      	bne.n	800a2e2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f06f 0210 	mvn.w	r2, #16
 800a2b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2208      	movs	r2, #8
 800a2b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	69db      	ldr	r3, [r3, #28]
 800a2c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d003      	beq.n	800a2d0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 f937 	bl	800a53c <HAL_TIM_IC_CaptureCallback>
 800a2ce:	e005      	b.n	800a2dc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 f929 	bl	800a528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 f93a 	bl	800a550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	f003 0301 	and.w	r3, r3, #1
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d10e      	bne.n	800a30e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	f003 0301 	and.w	r3, r3, #1
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d107      	bne.n	800a30e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f06f 0201 	mvn.w	r2, #1
 800a306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f7fa f925 	bl	8004558 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a318:	2b80      	cmp	r3, #128	; 0x80
 800a31a:	d10e      	bne.n	800a33a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a326:	2b80      	cmp	r3, #128	; 0x80
 800a328:	d107      	bne.n	800a33a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 fadf 	bl	800a8f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	691b      	ldr	r3, [r3, #16]
 800a340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a344:	2b40      	cmp	r3, #64	; 0x40
 800a346:	d10e      	bne.n	800a366 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a352:	2b40      	cmp	r3, #64	; 0x40
 800a354:	d107      	bne.n	800a366 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a35e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 f8ff 	bl	800a564 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	691b      	ldr	r3, [r3, #16]
 800a36c:	f003 0320 	and.w	r3, r3, #32
 800a370:	2b20      	cmp	r3, #32
 800a372:	d10e      	bne.n	800a392 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	f003 0320 	and.w	r3, r3, #32
 800a37e:	2b20      	cmp	r3, #32
 800a380:	d107      	bne.n	800a392 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f06f 0220 	mvn.w	r2, #32
 800a38a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 faa9 	bl	800a8e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a392:	bf00      	nop
 800a394:	3708      	adds	r7, #8
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}

0800a39a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a39a:	b580      	push	{r7, lr}
 800a39c:	b084      	sub	sp, #16
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
 800a3a2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d101      	bne.n	800a3b6 <HAL_TIM_ConfigClockSource+0x1c>
 800a3b2:	2302      	movs	r3, #2
 800a3b4:	e0b4      	b.n	800a520 <HAL_TIM_ConfigClockSource+0x186>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2202      	movs	r2, #2
 800a3c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a3d4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3dc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	68ba      	ldr	r2, [r7, #8]
 800a3e4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3ee:	d03e      	beq.n	800a46e <HAL_TIM_ConfigClockSource+0xd4>
 800a3f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3f4:	f200 8087 	bhi.w	800a506 <HAL_TIM_ConfigClockSource+0x16c>
 800a3f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3fc:	f000 8086 	beq.w	800a50c <HAL_TIM_ConfigClockSource+0x172>
 800a400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a404:	d87f      	bhi.n	800a506 <HAL_TIM_ConfigClockSource+0x16c>
 800a406:	2b70      	cmp	r3, #112	; 0x70
 800a408:	d01a      	beq.n	800a440 <HAL_TIM_ConfigClockSource+0xa6>
 800a40a:	2b70      	cmp	r3, #112	; 0x70
 800a40c:	d87b      	bhi.n	800a506 <HAL_TIM_ConfigClockSource+0x16c>
 800a40e:	2b60      	cmp	r3, #96	; 0x60
 800a410:	d050      	beq.n	800a4b4 <HAL_TIM_ConfigClockSource+0x11a>
 800a412:	2b60      	cmp	r3, #96	; 0x60
 800a414:	d877      	bhi.n	800a506 <HAL_TIM_ConfigClockSource+0x16c>
 800a416:	2b50      	cmp	r3, #80	; 0x50
 800a418:	d03c      	beq.n	800a494 <HAL_TIM_ConfigClockSource+0xfa>
 800a41a:	2b50      	cmp	r3, #80	; 0x50
 800a41c:	d873      	bhi.n	800a506 <HAL_TIM_ConfigClockSource+0x16c>
 800a41e:	2b40      	cmp	r3, #64	; 0x40
 800a420:	d058      	beq.n	800a4d4 <HAL_TIM_ConfigClockSource+0x13a>
 800a422:	2b40      	cmp	r3, #64	; 0x40
 800a424:	d86f      	bhi.n	800a506 <HAL_TIM_ConfigClockSource+0x16c>
 800a426:	2b30      	cmp	r3, #48	; 0x30
 800a428:	d064      	beq.n	800a4f4 <HAL_TIM_ConfigClockSource+0x15a>
 800a42a:	2b30      	cmp	r3, #48	; 0x30
 800a42c:	d86b      	bhi.n	800a506 <HAL_TIM_ConfigClockSource+0x16c>
 800a42e:	2b20      	cmp	r3, #32
 800a430:	d060      	beq.n	800a4f4 <HAL_TIM_ConfigClockSource+0x15a>
 800a432:	2b20      	cmp	r3, #32
 800a434:	d867      	bhi.n	800a506 <HAL_TIM_ConfigClockSource+0x16c>
 800a436:	2b00      	cmp	r3, #0
 800a438:	d05c      	beq.n	800a4f4 <HAL_TIM_ConfigClockSource+0x15a>
 800a43a:	2b10      	cmp	r3, #16
 800a43c:	d05a      	beq.n	800a4f4 <HAL_TIM_ConfigClockSource+0x15a>
 800a43e:	e062      	b.n	800a506 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6818      	ldr	r0, [r3, #0]
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	6899      	ldr	r1, [r3, #8]
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	685a      	ldr	r2, [r3, #4]
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	68db      	ldr	r3, [r3, #12]
 800a450:	f000 f9ac 	bl	800a7ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a462:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	68ba      	ldr	r2, [r7, #8]
 800a46a:	609a      	str	r2, [r3, #8]
      break;
 800a46c:	e04f      	b.n	800a50e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6818      	ldr	r0, [r3, #0]
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	6899      	ldr	r1, [r3, #8]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	685a      	ldr	r2, [r3, #4]
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	f000 f995 	bl	800a7ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	689a      	ldr	r2, [r3, #8]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a490:	609a      	str	r2, [r3, #8]
      break;
 800a492:	e03c      	b.n	800a50e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6818      	ldr	r0, [r3, #0]
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	6859      	ldr	r1, [r3, #4]
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	f000 f909 	bl	800a6b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2150      	movs	r1, #80	; 0x50
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f000 f962 	bl	800a776 <TIM_ITRx_SetConfig>
      break;
 800a4b2:	e02c      	b.n	800a50e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6818      	ldr	r0, [r3, #0]
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	6859      	ldr	r1, [r3, #4]
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	f000 f928 	bl	800a716 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2160      	movs	r1, #96	; 0x60
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f000 f952 	bl	800a776 <TIM_ITRx_SetConfig>
      break;
 800a4d2:	e01c      	b.n	800a50e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6818      	ldr	r0, [r3, #0]
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	6859      	ldr	r1, [r3, #4]
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	f000 f8e9 	bl	800a6b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2140      	movs	r1, #64	; 0x40
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f000 f942 	bl	800a776 <TIM_ITRx_SetConfig>
      break;
 800a4f2:	e00c      	b.n	800a50e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	4610      	mov	r0, r2
 800a500:	f000 f939 	bl	800a776 <TIM_ITRx_SetConfig>
      break;
 800a504:	e003      	b.n	800a50e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a506:	2301      	movs	r3, #1
 800a508:	73fb      	strb	r3, [r7, #15]
      break;
 800a50a:	e000      	b.n	800a50e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a50c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2201      	movs	r2, #1
 800a512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2200      	movs	r2, #0
 800a51a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a51e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a520:	4618      	mov	r0, r3
 800a522:	3710      	adds	r7, #16
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a530:	bf00      	nop
 800a532:	370c      	adds	r7, #12
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a544:	bf00      	nop
 800a546:	370c      	adds	r7, #12
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a558:	bf00      	nop
 800a55a:	370c      	adds	r7, #12
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a56c:	bf00      	nop
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr

0800a578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a578:	b480      	push	{r7}
 800a57a:	b085      	sub	sp, #20
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4a40      	ldr	r2, [pc, #256]	; (800a68c <TIM_Base_SetConfig+0x114>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d013      	beq.n	800a5b8 <TIM_Base_SetConfig+0x40>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a596:	d00f      	beq.n	800a5b8 <TIM_Base_SetConfig+0x40>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4a3d      	ldr	r2, [pc, #244]	; (800a690 <TIM_Base_SetConfig+0x118>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d00b      	beq.n	800a5b8 <TIM_Base_SetConfig+0x40>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	4a3c      	ldr	r2, [pc, #240]	; (800a694 <TIM_Base_SetConfig+0x11c>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d007      	beq.n	800a5b8 <TIM_Base_SetConfig+0x40>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	4a3b      	ldr	r2, [pc, #236]	; (800a698 <TIM_Base_SetConfig+0x120>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d003      	beq.n	800a5b8 <TIM_Base_SetConfig+0x40>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	4a3a      	ldr	r2, [pc, #232]	; (800a69c <TIM_Base_SetConfig+0x124>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d108      	bne.n	800a5ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	68fa      	ldr	r2, [r7, #12]
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	4a2f      	ldr	r2, [pc, #188]	; (800a68c <TIM_Base_SetConfig+0x114>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d02b      	beq.n	800a62a <TIM_Base_SetConfig+0xb2>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5d8:	d027      	beq.n	800a62a <TIM_Base_SetConfig+0xb2>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4a2c      	ldr	r2, [pc, #176]	; (800a690 <TIM_Base_SetConfig+0x118>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d023      	beq.n	800a62a <TIM_Base_SetConfig+0xb2>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	4a2b      	ldr	r2, [pc, #172]	; (800a694 <TIM_Base_SetConfig+0x11c>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d01f      	beq.n	800a62a <TIM_Base_SetConfig+0xb2>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	4a2a      	ldr	r2, [pc, #168]	; (800a698 <TIM_Base_SetConfig+0x120>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d01b      	beq.n	800a62a <TIM_Base_SetConfig+0xb2>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	4a29      	ldr	r2, [pc, #164]	; (800a69c <TIM_Base_SetConfig+0x124>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d017      	beq.n	800a62a <TIM_Base_SetConfig+0xb2>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	4a28      	ldr	r2, [pc, #160]	; (800a6a0 <TIM_Base_SetConfig+0x128>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d013      	beq.n	800a62a <TIM_Base_SetConfig+0xb2>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4a27      	ldr	r2, [pc, #156]	; (800a6a4 <TIM_Base_SetConfig+0x12c>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d00f      	beq.n	800a62a <TIM_Base_SetConfig+0xb2>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4a26      	ldr	r2, [pc, #152]	; (800a6a8 <TIM_Base_SetConfig+0x130>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d00b      	beq.n	800a62a <TIM_Base_SetConfig+0xb2>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	4a25      	ldr	r2, [pc, #148]	; (800a6ac <TIM_Base_SetConfig+0x134>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d007      	beq.n	800a62a <TIM_Base_SetConfig+0xb2>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	4a24      	ldr	r2, [pc, #144]	; (800a6b0 <TIM_Base_SetConfig+0x138>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d003      	beq.n	800a62a <TIM_Base_SetConfig+0xb2>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	4a23      	ldr	r2, [pc, #140]	; (800a6b4 <TIM_Base_SetConfig+0x13c>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d108      	bne.n	800a63c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	68fa      	ldr	r2, [r7, #12]
 800a638:	4313      	orrs	r3, r2
 800a63a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	695b      	ldr	r3, [r3, #20]
 800a646:	4313      	orrs	r3, r2
 800a648:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	68fa      	ldr	r2, [r7, #12]
 800a64e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	689a      	ldr	r2, [r3, #8]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	4a0a      	ldr	r2, [pc, #40]	; (800a68c <TIM_Base_SetConfig+0x114>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d003      	beq.n	800a670 <TIM_Base_SetConfig+0xf8>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	4a0c      	ldr	r2, [pc, #48]	; (800a69c <TIM_Base_SetConfig+0x124>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d103      	bne.n	800a678 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	691a      	ldr	r2, [r3, #16]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2201      	movs	r2, #1
 800a67c:	615a      	str	r2, [r3, #20]
}
 800a67e:	bf00      	nop
 800a680:	3714      	adds	r7, #20
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	40010000 	.word	0x40010000
 800a690:	40000400 	.word	0x40000400
 800a694:	40000800 	.word	0x40000800
 800a698:	40000c00 	.word	0x40000c00
 800a69c:	40010400 	.word	0x40010400
 800a6a0:	40014000 	.word	0x40014000
 800a6a4:	40014400 	.word	0x40014400
 800a6a8:	40014800 	.word	0x40014800
 800a6ac:	40001800 	.word	0x40001800
 800a6b0:	40001c00 	.word	0x40001c00
 800a6b4:	40002000 	.word	0x40002000

0800a6b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b087      	sub	sp, #28
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6a1b      	ldr	r3, [r3, #32]
 800a6c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6a1b      	ldr	r3, [r3, #32]
 800a6ce:	f023 0201 	bic.w	r2, r3, #1
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	699b      	ldr	r3, [r3, #24]
 800a6da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a6e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	011b      	lsls	r3, r3, #4
 800a6e8:	693a      	ldr	r2, [r7, #16]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	f023 030a 	bic.w	r3, r3, #10
 800a6f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a6f6:	697a      	ldr	r2, [r7, #20]
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	693a      	ldr	r2, [r7, #16]
 800a702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	697a      	ldr	r2, [r7, #20]
 800a708:	621a      	str	r2, [r3, #32]
}
 800a70a:	bf00      	nop
 800a70c:	371c      	adds	r7, #28
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr

0800a716 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a716:	b480      	push	{r7}
 800a718:	b087      	sub	sp, #28
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	60f8      	str	r0, [r7, #12]
 800a71e:	60b9      	str	r1, [r7, #8]
 800a720:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	6a1b      	ldr	r3, [r3, #32]
 800a726:	f023 0210 	bic.w	r2, r3, #16
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	699b      	ldr	r3, [r3, #24]
 800a732:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	6a1b      	ldr	r3, [r3, #32]
 800a738:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a740:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	031b      	lsls	r3, r3, #12
 800a746:	697a      	ldr	r2, [r7, #20]
 800a748:	4313      	orrs	r3, r2
 800a74a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a752:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	011b      	lsls	r3, r3, #4
 800a758:	693a      	ldr	r2, [r7, #16]
 800a75a:	4313      	orrs	r3, r2
 800a75c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	697a      	ldr	r2, [r7, #20]
 800a762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	693a      	ldr	r2, [r7, #16]
 800a768:	621a      	str	r2, [r3, #32]
}
 800a76a:	bf00      	nop
 800a76c:	371c      	adds	r7, #28
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr

0800a776 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a776:	b480      	push	{r7}
 800a778:	b085      	sub	sp, #20
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
 800a77e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a78c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a78e:	683a      	ldr	r2, [r7, #0]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	4313      	orrs	r3, r2
 800a794:	f043 0307 	orr.w	r3, r3, #7
 800a798:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	609a      	str	r2, [r3, #8]
}
 800a7a0:	bf00      	nop
 800a7a2:	3714      	adds	r7, #20
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b087      	sub	sp, #28
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
 800a7b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a7c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	021a      	lsls	r2, r3, #8
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	431a      	orrs	r2, r3
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	697a      	ldr	r2, [r7, #20]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	697a      	ldr	r2, [r7, #20]
 800a7de:	609a      	str	r2, [r3, #8]
}
 800a7e0:	bf00      	nop
 800a7e2:	371c      	adds	r7, #28
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b085      	sub	sp, #20
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d101      	bne.n	800a804 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a800:	2302      	movs	r3, #2
 800a802:	e05a      	b.n	800a8ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2202      	movs	r2, #2
 800a810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a82a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68fa      	ldr	r2, [r7, #12]
 800a832:	4313      	orrs	r3, r2
 800a834:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	68fa      	ldr	r2, [r7, #12]
 800a83c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4a21      	ldr	r2, [pc, #132]	; (800a8c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d022      	beq.n	800a88e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a850:	d01d      	beq.n	800a88e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a1d      	ldr	r2, [pc, #116]	; (800a8cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d018      	beq.n	800a88e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a1b      	ldr	r2, [pc, #108]	; (800a8d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d013      	beq.n	800a88e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4a1a      	ldr	r2, [pc, #104]	; (800a8d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d00e      	beq.n	800a88e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a18      	ldr	r2, [pc, #96]	; (800a8d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d009      	beq.n	800a88e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4a17      	ldr	r2, [pc, #92]	; (800a8dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d004      	beq.n	800a88e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4a15      	ldr	r2, [pc, #84]	; (800a8e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d10c      	bne.n	800a8a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a894:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	68ba      	ldr	r2, [r7, #8]
 800a89c:	4313      	orrs	r3, r2
 800a89e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	68ba      	ldr	r2, [r7, #8]
 800a8a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8b8:	2300      	movs	r3, #0
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3714      	adds	r7, #20
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr
 800a8c6:	bf00      	nop
 800a8c8:	40010000 	.word	0x40010000
 800a8cc:	40000400 	.word	0x40000400
 800a8d0:	40000800 	.word	0x40000800
 800a8d4:	40000c00 	.word	0x40000c00
 800a8d8:	40010400 	.word	0x40010400
 800a8dc:	40014000 	.word	0x40014000
 800a8e0:	40001800 	.word	0x40001800

0800a8e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a8ec:	bf00      	nop
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a900:	bf00      	nop
 800a902:	370c      	adds	r7, #12
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr

0800a90c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d101      	bne.n	800a91e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a91a:	2301      	movs	r3, #1
 800a91c:	e03f      	b.n	800a99e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a924:	b2db      	uxtb	r3, r3
 800a926:	2b00      	cmp	r3, #0
 800a928:	d106      	bne.n	800a938 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f7fa fa22 	bl	8004d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2224      	movs	r2, #36	; 0x24
 800a93c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	68da      	ldr	r2, [r3, #12]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a94e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 fddb 	bl	800b50c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	691a      	ldr	r2, [r3, #16]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a964:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	695a      	ldr	r2, [r3, #20]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a974:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	68da      	ldr	r2, [r3, #12]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a984:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2220      	movs	r2, #32
 800a990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2220      	movs	r2, #32
 800a998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b08a      	sub	sp, #40	; 0x28
 800a9aa:	af02      	add	r7, sp, #8
 800a9ac:	60f8      	str	r0, [r7, #12]
 800a9ae:	60b9      	str	r1, [r7, #8]
 800a9b0:	603b      	str	r3, [r7, #0]
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	2b20      	cmp	r3, #32
 800a9c4:	d17c      	bne.n	800aac0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d002      	beq.n	800a9d2 <HAL_UART_Transmit+0x2c>
 800a9cc:	88fb      	ldrh	r3, [r7, #6]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d101      	bne.n	800a9d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	e075      	b.n	800aac2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d101      	bne.n	800a9e4 <HAL_UART_Transmit+0x3e>
 800a9e0:	2302      	movs	r3, #2
 800a9e2:	e06e      	b.n	800aac2 <HAL_UART_Transmit+0x11c>
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2221      	movs	r2, #33	; 0x21
 800a9f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a9fa:	f7fb fb89 	bl	8006110 <HAL_GetTick>
 800a9fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	88fa      	ldrh	r2, [r7, #6]
 800aa04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	88fa      	ldrh	r2, [r7, #6]
 800aa0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa14:	d108      	bne.n	800aa28 <HAL_UART_Transmit+0x82>
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	691b      	ldr	r3, [r3, #16]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d104      	bne.n	800aa28 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	61bb      	str	r3, [r7, #24]
 800aa26:	e003      	b.n	800aa30 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800aa38:	e02a      	b.n	800aa90 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	9300      	str	r3, [sp, #0]
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	2200      	movs	r2, #0
 800aa42:	2180      	movs	r1, #128	; 0x80
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f000 fb1f 	bl	800b088 <UART_WaitOnFlagUntilTimeout>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d001      	beq.n	800aa54 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800aa50:	2303      	movs	r3, #3
 800aa52:	e036      	b.n	800aac2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800aa54:	69fb      	ldr	r3, [r7, #28]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d10b      	bne.n	800aa72 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aa5a:	69bb      	ldr	r3, [r7, #24]
 800aa5c:	881b      	ldrh	r3, [r3, #0]
 800aa5e:	461a      	mov	r2, r3
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800aa6a:	69bb      	ldr	r3, [r7, #24]
 800aa6c:	3302      	adds	r3, #2
 800aa6e:	61bb      	str	r3, [r7, #24]
 800aa70:	e007      	b.n	800aa82 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	781a      	ldrb	r2, [r3, #0]
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800aa7c:	69fb      	ldr	r3, [r7, #28]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	3b01      	subs	r3, #1
 800aa8a:	b29a      	uxth	r2, r3
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aa94:	b29b      	uxth	r3, r3
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d1cf      	bne.n	800aa3a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	9300      	str	r3, [sp, #0]
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	2140      	movs	r1, #64	; 0x40
 800aaa4:	68f8      	ldr	r0, [r7, #12]
 800aaa6:	f000 faef 	bl	800b088 <UART_WaitOnFlagUntilTimeout>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d001      	beq.n	800aab4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800aab0:	2303      	movs	r3, #3
 800aab2:	e006      	b.n	800aac2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2220      	movs	r2, #32
 800aab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800aabc:	2300      	movs	r3, #0
 800aabe:	e000      	b.n	800aac2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800aac0:	2302      	movs	r3, #2
  }
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3720      	adds	r7, #32
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}

0800aaca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aaca:	b580      	push	{r7, lr}
 800aacc:	b084      	sub	sp, #16
 800aace:	af00      	add	r7, sp, #0
 800aad0:	60f8      	str	r0, [r7, #12]
 800aad2:	60b9      	str	r1, [r7, #8]
 800aad4:	4613      	mov	r3, r2
 800aad6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	2b20      	cmp	r3, #32
 800aae2:	d11d      	bne.n	800ab20 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d002      	beq.n	800aaf0 <HAL_UART_Receive_IT+0x26>
 800aaea:	88fb      	ldrh	r3, [r7, #6]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d101      	bne.n	800aaf4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	e016      	b.n	800ab22 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d101      	bne.n	800ab02 <HAL_UART_Receive_IT+0x38>
 800aafe:	2302      	movs	r3, #2
 800ab00:	e00f      	b.n	800ab22 <HAL_UART_Receive_IT+0x58>
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2201      	movs	r2, #1
 800ab06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ab10:	88fb      	ldrh	r3, [r7, #6]
 800ab12:	461a      	mov	r2, r3
 800ab14:	68b9      	ldr	r1, [r7, #8]
 800ab16:	68f8      	ldr	r0, [r7, #12]
 800ab18:	f000 fb24 	bl	800b164 <UART_Start_Receive_IT>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	e000      	b.n	800ab22 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800ab20:	2302      	movs	r3, #2
  }
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3710      	adds	r7, #16
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
	...

0800ab2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b0ba      	sub	sp, #232	; 0xe8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	68db      	ldr	r3, [r3, #12]
 800ab44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	695b      	ldr	r3, [r3, #20]
 800ab4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ab52:	2300      	movs	r3, #0
 800ab54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ab5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab62:	f003 030f 	and.w	r3, r3, #15
 800ab66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ab6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d10f      	bne.n	800ab92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ab72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab76:	f003 0320 	and.w	r3, r3, #32
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d009      	beq.n	800ab92 <HAL_UART_IRQHandler+0x66>
 800ab7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab82:	f003 0320 	and.w	r3, r3, #32
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d003      	beq.n	800ab92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 fc03 	bl	800b396 <UART_Receive_IT>
      return;
 800ab90:	e256      	b.n	800b040 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ab92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	f000 80de 	beq.w	800ad58 <HAL_UART_IRQHandler+0x22c>
 800ab9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aba0:	f003 0301 	and.w	r3, r3, #1
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d106      	bne.n	800abb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800aba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	f000 80d1 	beq.w	800ad58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800abb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abba:	f003 0301 	and.w	r3, r3, #1
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d00b      	beq.n	800abda <HAL_UART_IRQHandler+0xae>
 800abc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d005      	beq.n	800abda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd2:	f043 0201 	orr.w	r2, r3, #1
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800abda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abde:	f003 0304 	and.w	r3, r3, #4
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d00b      	beq.n	800abfe <HAL_UART_IRQHandler+0xd2>
 800abe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abea:	f003 0301 	and.w	r3, r3, #1
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d005      	beq.n	800abfe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf6:	f043 0202 	orr.w	r2, r3, #2
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800abfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac02:	f003 0302 	and.w	r3, r3, #2
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d00b      	beq.n	800ac22 <HAL_UART_IRQHandler+0xf6>
 800ac0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac0e:	f003 0301 	and.w	r3, r3, #1
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d005      	beq.n	800ac22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac1a:	f043 0204 	orr.w	r2, r3, #4
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ac22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac26:	f003 0308 	and.w	r3, r3, #8
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d011      	beq.n	800ac52 <HAL_UART_IRQHandler+0x126>
 800ac2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac32:	f003 0320 	and.w	r3, r3, #32
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d105      	bne.n	800ac46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ac3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac3e:	f003 0301 	and.w	r3, r3, #1
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d005      	beq.n	800ac52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac4a:	f043 0208 	orr.w	r2, r3, #8
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f000 81ed 	beq.w	800b036 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ac5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac60:	f003 0320 	and.w	r3, r3, #32
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d008      	beq.n	800ac7a <HAL_UART_IRQHandler+0x14e>
 800ac68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac6c:	f003 0320 	and.w	r3, r3, #32
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d002      	beq.n	800ac7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 fb8e 	bl	800b396 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	695b      	ldr	r3, [r3, #20]
 800ac80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac84:	2b40      	cmp	r3, #64	; 0x40
 800ac86:	bf0c      	ite	eq
 800ac88:	2301      	moveq	r3, #1
 800ac8a:	2300      	movne	r3, #0
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac96:	f003 0308 	and.w	r3, r3, #8
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d103      	bne.n	800aca6 <HAL_UART_IRQHandler+0x17a>
 800ac9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d04f      	beq.n	800ad46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 fa96 	bl	800b1d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	695b      	ldr	r3, [r3, #20]
 800acb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acb6:	2b40      	cmp	r3, #64	; 0x40
 800acb8:	d141      	bne.n	800ad3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	3314      	adds	r3, #20
 800acc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800acc8:	e853 3f00 	ldrex	r3, [r3]
 800accc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800acd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800acd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	3314      	adds	r3, #20
 800ace2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ace6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800acea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800acf2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800acf6:	e841 2300 	strex	r3, r2, [r1]
 800acfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800acfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d1d9      	bne.n	800acba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d013      	beq.n	800ad36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad12:	4a7d      	ldr	r2, [pc, #500]	; (800af08 <HAL_UART_IRQHandler+0x3dc>)
 800ad14:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7fb fb96 	bl	800644c <HAL_DMA_Abort_IT>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d016      	beq.n	800ad54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ad30:	4610      	mov	r0, r2
 800ad32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad34:	e00e      	b.n	800ad54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 f990 	bl	800b05c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad3c:	e00a      	b.n	800ad54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 f98c 	bl	800b05c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad44:	e006      	b.n	800ad54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 f988 	bl	800b05c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800ad52:	e170      	b.n	800b036 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad54:	bf00      	nop
    return;
 800ad56:	e16e      	b.n	800b036 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	f040 814a 	bne.w	800aff6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ad62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad66:	f003 0310 	and.w	r3, r3, #16
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	f000 8143 	beq.w	800aff6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ad70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad74:	f003 0310 	and.w	r3, r3, #16
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f000 813c 	beq.w	800aff6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ad7e:	2300      	movs	r3, #0
 800ad80:	60bb      	str	r3, [r7, #8]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	60bb      	str	r3, [r7, #8]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	60bb      	str	r3, [r7, #8]
 800ad92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	695b      	ldr	r3, [r3, #20]
 800ad9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad9e:	2b40      	cmp	r3, #64	; 0x40
 800ada0:	f040 80b4 	bne.w	800af0c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800adb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f000 8140 	beq.w	800b03a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800adbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800adc2:	429a      	cmp	r2, r3
 800adc4:	f080 8139 	bcs.w	800b03a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800adce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add4:	69db      	ldr	r3, [r3, #28]
 800add6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adda:	f000 8088 	beq.w	800aeee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	330c      	adds	r3, #12
 800ade4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ade8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800adec:	e853 3f00 	ldrex	r3, [r3]
 800adf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800adf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800adf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800adfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	330c      	adds	r3, #12
 800ae06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ae0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ae0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ae16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ae1a:	e841 2300 	strex	r3, r2, [r1]
 800ae1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ae22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d1d9      	bne.n	800adde <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	3314      	adds	r3, #20
 800ae30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae34:	e853 3f00 	ldrex	r3, [r3]
 800ae38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ae3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae3c:	f023 0301 	bic.w	r3, r3, #1
 800ae40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	3314      	adds	r3, #20
 800ae4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ae4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ae52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ae56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ae5a:	e841 2300 	strex	r3, r2, [r1]
 800ae5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ae60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d1e1      	bne.n	800ae2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	3314      	adds	r3, #20
 800ae6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae70:	e853 3f00 	ldrex	r3, [r3]
 800ae74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ae76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	3314      	adds	r3, #20
 800ae86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ae8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ae8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ae90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ae92:	e841 2300 	strex	r3, r2, [r1]
 800ae96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ae98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d1e3      	bne.n	800ae66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2220      	movs	r2, #32
 800aea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	330c      	adds	r3, #12
 800aeb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aeb6:	e853 3f00 	ldrex	r3, [r3]
 800aeba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aebc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aebe:	f023 0310 	bic.w	r3, r3, #16
 800aec2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	330c      	adds	r3, #12
 800aecc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800aed0:	65ba      	str	r2, [r7, #88]	; 0x58
 800aed2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aed6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aed8:	e841 2300 	strex	r3, r2, [r1]
 800aedc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d1e3      	bne.n	800aeac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7fb fa3f 	bl	800636c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	1ad3      	subs	r3, r2, r3
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	4619      	mov	r1, r3
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 f8b6 	bl	800b070 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800af04:	e099      	b.n	800b03a <HAL_UART_IRQHandler+0x50e>
 800af06:	bf00      	nop
 800af08:	0800b29f 	.word	0x0800b29f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af14:	b29b      	uxth	r3, r3
 800af16:	1ad3      	subs	r3, r2, r3
 800af18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af20:	b29b      	uxth	r3, r3
 800af22:	2b00      	cmp	r3, #0
 800af24:	f000 808b 	beq.w	800b03e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800af28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	f000 8086 	beq.w	800b03e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	330c      	adds	r3, #12
 800af38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af3c:	e853 3f00 	ldrex	r3, [r3]
 800af40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800af42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	330c      	adds	r3, #12
 800af52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800af56:	647a      	str	r2, [r7, #68]	; 0x44
 800af58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800af5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af5e:	e841 2300 	strex	r3, r2, [r1]
 800af62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800af64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af66:	2b00      	cmp	r3, #0
 800af68:	d1e3      	bne.n	800af32 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	3314      	adds	r3, #20
 800af70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af74:	e853 3f00 	ldrex	r3, [r3]
 800af78:	623b      	str	r3, [r7, #32]
   return(result);
 800af7a:	6a3b      	ldr	r3, [r7, #32]
 800af7c:	f023 0301 	bic.w	r3, r3, #1
 800af80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	3314      	adds	r3, #20
 800af8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800af8e:	633a      	str	r2, [r7, #48]	; 0x30
 800af90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af96:	e841 2300 	strex	r3, r2, [r1]
 800af9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d1e3      	bne.n	800af6a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2220      	movs	r2, #32
 800afa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2200      	movs	r2, #0
 800afae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	330c      	adds	r3, #12
 800afb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	e853 3f00 	ldrex	r3, [r3]
 800afbe:	60fb      	str	r3, [r7, #12]
   return(result);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f023 0310 	bic.w	r3, r3, #16
 800afc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	330c      	adds	r3, #12
 800afd0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800afd4:	61fa      	str	r2, [r7, #28]
 800afd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd8:	69b9      	ldr	r1, [r7, #24]
 800afda:	69fa      	ldr	r2, [r7, #28]
 800afdc:	e841 2300 	strex	r3, r2, [r1]
 800afe0:	617b      	str	r3, [r7, #20]
   return(result);
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d1e3      	bne.n	800afb0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800afe8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800afec:	4619      	mov	r1, r3
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 f83e 	bl	800b070 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aff4:	e023      	b.n	800b03e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800affa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800affe:	2b00      	cmp	r3, #0
 800b000:	d009      	beq.n	800b016 <HAL_UART_IRQHandler+0x4ea>
 800b002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d003      	beq.n	800b016 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 f959 	bl	800b2c6 <UART_Transmit_IT>
    return;
 800b014:	e014      	b.n	800b040 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b01a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d00e      	beq.n	800b040 <HAL_UART_IRQHandler+0x514>
 800b022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d008      	beq.n	800b040 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f000 f999 	bl	800b366 <UART_EndTransmit_IT>
    return;
 800b034:	e004      	b.n	800b040 <HAL_UART_IRQHandler+0x514>
    return;
 800b036:	bf00      	nop
 800b038:	e002      	b.n	800b040 <HAL_UART_IRQHandler+0x514>
      return;
 800b03a:	bf00      	nop
 800b03c:	e000      	b.n	800b040 <HAL_UART_IRQHandler+0x514>
      return;
 800b03e:	bf00      	nop
  }
}
 800b040:	37e8      	adds	r7, #232	; 0xe8
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop

0800b048 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b048:	b480      	push	{r7}
 800b04a:	b083      	sub	sp, #12
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b050:	bf00      	nop
 800b052:	370c      	adds	r7, #12
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr

0800b05c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b083      	sub	sp, #12
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b064:	bf00      	nop
 800b066:	370c      	adds	r7, #12
 800b068:	46bd      	mov	sp, r7
 800b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06e:	4770      	bx	lr

0800b070 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	460b      	mov	r3, r1
 800b07a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b07c:	bf00      	nop
 800b07e:	370c      	adds	r7, #12
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr

0800b088 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b090      	sub	sp, #64	; 0x40
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	603b      	str	r3, [r7, #0]
 800b094:	4613      	mov	r3, r2
 800b096:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b098:	e050      	b.n	800b13c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b09a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0a0:	d04c      	beq.n	800b13c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b0a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d007      	beq.n	800b0b8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b0a8:	f7fb f832 	bl	8006110 <HAL_GetTick>
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	1ad3      	subs	r3, r2, r3
 800b0b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d241      	bcs.n	800b13c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	330c      	adds	r3, #12
 800b0be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c2:	e853 3f00 	ldrex	r3, [r3]
 800b0c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	330c      	adds	r3, #12
 800b0d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b0d8:	637a      	str	r2, [r7, #52]	; 0x34
 800b0da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b0de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0e0:	e841 2300 	strex	r3, r2, [r1]
 800b0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d1e5      	bne.n	800b0b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	3314      	adds	r3, #20
 800b0f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	e853 3f00 	ldrex	r3, [r3]
 800b0fa:	613b      	str	r3, [r7, #16]
   return(result);
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	f023 0301 	bic.w	r3, r3, #1
 800b102:	63bb      	str	r3, [r7, #56]	; 0x38
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	3314      	adds	r3, #20
 800b10a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b10c:	623a      	str	r2, [r7, #32]
 800b10e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b110:	69f9      	ldr	r1, [r7, #28]
 800b112:	6a3a      	ldr	r2, [r7, #32]
 800b114:	e841 2300 	strex	r3, r2, [r1]
 800b118:	61bb      	str	r3, [r7, #24]
   return(result);
 800b11a:	69bb      	ldr	r3, [r7, #24]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d1e5      	bne.n	800b0ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2220      	movs	r2, #32
 800b124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2220      	movs	r2, #32
 800b12c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	2200      	movs	r2, #0
 800b134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b138:	2303      	movs	r3, #3
 800b13a:	e00f      	b.n	800b15c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	681a      	ldr	r2, [r3, #0]
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	4013      	ands	r3, r2
 800b146:	68ba      	ldr	r2, [r7, #8]
 800b148:	429a      	cmp	r2, r3
 800b14a:	bf0c      	ite	eq
 800b14c:	2301      	moveq	r3, #1
 800b14e:	2300      	movne	r3, #0
 800b150:	b2db      	uxtb	r3, r3
 800b152:	461a      	mov	r2, r3
 800b154:	79fb      	ldrb	r3, [r7, #7]
 800b156:	429a      	cmp	r2, r3
 800b158:	d09f      	beq.n	800b09a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b15a:	2300      	movs	r3, #0
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3740      	adds	r7, #64	; 0x40
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b164:	b480      	push	{r7}
 800b166:	b085      	sub	sp, #20
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	4613      	mov	r3, r2
 800b170:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	68ba      	ldr	r2, [r7, #8]
 800b176:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	88fa      	ldrh	r2, [r7, #6]
 800b17c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	88fa      	ldrh	r2, [r7, #6]
 800b182:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2200      	movs	r2, #0
 800b188:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2222      	movs	r2, #34	; 0x22
 800b18e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2200      	movs	r2, #0
 800b196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	68da      	ldr	r2, [r3, #12]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b1a8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	695a      	ldr	r2, [r3, #20]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f042 0201 	orr.w	r2, r2, #1
 800b1b8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	68da      	ldr	r2, [r3, #12]
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f042 0220 	orr.w	r2, r2, #32
 800b1c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b1ca:	2300      	movs	r3, #0
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3714      	adds	r7, #20
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b095      	sub	sp, #84	; 0x54
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	330c      	adds	r3, #12
 800b1e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ea:	e853 3f00 	ldrex	r3, [r3]
 800b1ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b1f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	330c      	adds	r3, #12
 800b1fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b200:	643a      	str	r2, [r7, #64]	; 0x40
 800b202:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b204:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b206:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b208:	e841 2300 	strex	r3, r2, [r1]
 800b20c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b210:	2b00      	cmp	r3, #0
 800b212:	d1e5      	bne.n	800b1e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	3314      	adds	r3, #20
 800b21a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b21c:	6a3b      	ldr	r3, [r7, #32]
 800b21e:	e853 3f00 	ldrex	r3, [r3]
 800b222:	61fb      	str	r3, [r7, #28]
   return(result);
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	f023 0301 	bic.w	r3, r3, #1
 800b22a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	3314      	adds	r3, #20
 800b232:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b234:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b236:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b238:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b23a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b23c:	e841 2300 	strex	r3, r2, [r1]
 800b240:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b244:	2b00      	cmp	r3, #0
 800b246:	d1e5      	bne.n	800b214 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d119      	bne.n	800b284 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	330c      	adds	r3, #12
 800b256:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	e853 3f00 	ldrex	r3, [r3]
 800b25e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	f023 0310 	bic.w	r3, r3, #16
 800b266:	647b      	str	r3, [r7, #68]	; 0x44
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	330c      	adds	r3, #12
 800b26e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b270:	61ba      	str	r2, [r7, #24]
 800b272:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b274:	6979      	ldr	r1, [r7, #20]
 800b276:	69ba      	ldr	r2, [r7, #24]
 800b278:	e841 2300 	strex	r3, r2, [r1]
 800b27c:	613b      	str	r3, [r7, #16]
   return(result);
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d1e5      	bne.n	800b250 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2220      	movs	r2, #32
 800b288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2200      	movs	r2, #0
 800b290:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b292:	bf00      	nop
 800b294:	3754      	adds	r7, #84	; 0x54
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr

0800b29e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b29e:	b580      	push	{r7, lr}
 800b2a0:	b084      	sub	sp, #16
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b2b8:	68f8      	ldr	r0, [r7, #12]
 800b2ba:	f7ff fecf 	bl	800b05c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2be:	bf00      	nop
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}

0800b2c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b2c6:	b480      	push	{r7}
 800b2c8:	b085      	sub	sp, #20
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	2b21      	cmp	r3, #33	; 0x21
 800b2d8:	d13e      	bne.n	800b358 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	689b      	ldr	r3, [r3, #8]
 800b2de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2e2:	d114      	bne.n	800b30e <UART_Transmit_IT+0x48>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	691b      	ldr	r3, [r3, #16]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d110      	bne.n	800b30e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6a1b      	ldr	r3, [r3, #32]
 800b2f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	881b      	ldrh	r3, [r3, #0]
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b300:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6a1b      	ldr	r3, [r3, #32]
 800b306:	1c9a      	adds	r2, r3, #2
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	621a      	str	r2, [r3, #32]
 800b30c:	e008      	b.n	800b320 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6a1b      	ldr	r3, [r3, #32]
 800b312:	1c59      	adds	r1, r3, #1
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	6211      	str	r1, [r2, #32]
 800b318:	781a      	ldrb	r2, [r3, #0]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b324:	b29b      	uxth	r3, r3
 800b326:	3b01      	subs	r3, #1
 800b328:	b29b      	uxth	r3, r3
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	4619      	mov	r1, r3
 800b32e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b330:	2b00      	cmp	r3, #0
 800b332:	d10f      	bne.n	800b354 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	68da      	ldr	r2, [r3, #12]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b342:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	68da      	ldr	r2, [r3, #12]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b352:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b354:	2300      	movs	r3, #0
 800b356:	e000      	b.n	800b35a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b358:	2302      	movs	r3, #2
  }
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3714      	adds	r7, #20
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr

0800b366 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b366:	b580      	push	{r7, lr}
 800b368:	b082      	sub	sp, #8
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	68da      	ldr	r2, [r3, #12]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b37c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2220      	movs	r2, #32
 800b382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f7ff fe5e 	bl	800b048 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b38c:	2300      	movs	r3, #0
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3708      	adds	r7, #8
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b08c      	sub	sp, #48	; 0x30
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	2b22      	cmp	r3, #34	; 0x22
 800b3a8:	f040 80ab 	bne.w	800b502 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3b4:	d117      	bne.n	800b3e6 <UART_Receive_IT+0x50>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	691b      	ldr	r3, [r3, #16]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d113      	bne.n	800b3e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3d4:	b29a      	uxth	r2, r3
 800b3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3de:	1c9a      	adds	r2, r3, #2
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	629a      	str	r2, [r3, #40]	; 0x28
 800b3e4:	e026      	b.n	800b434 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3f8:	d007      	beq.n	800b40a <UART_Receive_IT+0x74>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d10a      	bne.n	800b418 <UART_Receive_IT+0x82>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	691b      	ldr	r3, [r3, #16]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d106      	bne.n	800b418 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	b2da      	uxtb	r2, r3
 800b412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b414:	701a      	strb	r2, [r3, #0]
 800b416:	e008      	b.n	800b42a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b424:	b2da      	uxtb	r2, r3
 800b426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b428:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b42e:	1c5a      	adds	r2, r3, #1
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b438:	b29b      	uxth	r3, r3
 800b43a:	3b01      	subs	r3, #1
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	4619      	mov	r1, r3
 800b442:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b444:	2b00      	cmp	r3, #0
 800b446:	d15a      	bne.n	800b4fe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	68da      	ldr	r2, [r3, #12]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f022 0220 	bic.w	r2, r2, #32
 800b456:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	68da      	ldr	r2, [r3, #12]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b466:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	695a      	ldr	r2, [r3, #20]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f022 0201 	bic.w	r2, r2, #1
 800b476:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2220      	movs	r2, #32
 800b47c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b484:	2b01      	cmp	r3, #1
 800b486:	d135      	bne.n	800b4f4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2200      	movs	r2, #0
 800b48c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	330c      	adds	r3, #12
 800b494:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	e853 3f00 	ldrex	r3, [r3]
 800b49c:	613b      	str	r3, [r7, #16]
   return(result);
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	f023 0310 	bic.w	r3, r3, #16
 800b4a4:	627b      	str	r3, [r7, #36]	; 0x24
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	330c      	adds	r3, #12
 800b4ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4ae:	623a      	str	r2, [r7, #32]
 800b4b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b2:	69f9      	ldr	r1, [r7, #28]
 800b4b4:	6a3a      	ldr	r2, [r7, #32]
 800b4b6:	e841 2300 	strex	r3, r2, [r1]
 800b4ba:	61bb      	str	r3, [r7, #24]
   return(result);
 800b4bc:	69bb      	ldr	r3, [r7, #24]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d1e5      	bne.n	800b48e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f003 0310 	and.w	r3, r3, #16
 800b4cc:	2b10      	cmp	r3, #16
 800b4ce:	d10a      	bne.n	800b4e6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	60fb      	str	r3, [r7, #12]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	60fb      	str	r3, [r7, #12]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	60fb      	str	r3, [r7, #12]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f7ff fdbf 	bl	800b070 <HAL_UARTEx_RxEventCallback>
 800b4f2:	e002      	b.n	800b4fa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f7f8 f981 	bl	80037fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	e002      	b.n	800b504 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b4fe:	2300      	movs	r3, #0
 800b500:	e000      	b.n	800b504 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b502:	2302      	movs	r3, #2
  }
}
 800b504:	4618      	mov	r0, r3
 800b506:	3730      	adds	r7, #48	; 0x30
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b510:	b09f      	sub	sp, #124	; 0x7c
 800b512:	af00      	add	r7, sp, #0
 800b514:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	691b      	ldr	r3, [r3, #16]
 800b51c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b522:	68d9      	ldr	r1, [r3, #12]
 800b524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b526:	681a      	ldr	r2, [r3, #0]
 800b528:	ea40 0301 	orr.w	r3, r0, r1
 800b52c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b52e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b530:	689a      	ldr	r2, [r3, #8]
 800b532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b534:	691b      	ldr	r3, [r3, #16]
 800b536:	431a      	orrs	r2, r3
 800b538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b53a:	695b      	ldr	r3, [r3, #20]
 800b53c:	431a      	orrs	r2, r3
 800b53e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b540:	69db      	ldr	r3, [r3, #28]
 800b542:	4313      	orrs	r3, r2
 800b544:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800b546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	68db      	ldr	r3, [r3, #12]
 800b54c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b550:	f021 010c 	bic.w	r1, r1, #12
 800b554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b55a:	430b      	orrs	r3, r1
 800b55c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b55e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	695b      	ldr	r3, [r3, #20]
 800b564:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b56a:	6999      	ldr	r1, [r3, #24]
 800b56c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	ea40 0301 	orr.w	r3, r0, r1
 800b574:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	4bc5      	ldr	r3, [pc, #788]	; (800b890 <UART_SetConfig+0x384>)
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d004      	beq.n	800b58a <UART_SetConfig+0x7e>
 800b580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	4bc3      	ldr	r3, [pc, #780]	; (800b894 <UART_SetConfig+0x388>)
 800b586:	429a      	cmp	r2, r3
 800b588:	d103      	bne.n	800b592 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b58a:	f7fd fcad 	bl	8008ee8 <HAL_RCC_GetPCLK2Freq>
 800b58e:	6778      	str	r0, [r7, #116]	; 0x74
 800b590:	e002      	b.n	800b598 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b592:	f7fd fc95 	bl	8008ec0 <HAL_RCC_GetPCLK1Freq>
 800b596:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b59a:	69db      	ldr	r3, [r3, #28]
 800b59c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5a0:	f040 80b6 	bne.w	800b710 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b5a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b5a6:	461c      	mov	r4, r3
 800b5a8:	f04f 0500 	mov.w	r5, #0
 800b5ac:	4622      	mov	r2, r4
 800b5ae:	462b      	mov	r3, r5
 800b5b0:	1891      	adds	r1, r2, r2
 800b5b2:	6439      	str	r1, [r7, #64]	; 0x40
 800b5b4:	415b      	adcs	r3, r3
 800b5b6:	647b      	str	r3, [r7, #68]	; 0x44
 800b5b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b5bc:	1912      	adds	r2, r2, r4
 800b5be:	eb45 0303 	adc.w	r3, r5, r3
 800b5c2:	f04f 0000 	mov.w	r0, #0
 800b5c6:	f04f 0100 	mov.w	r1, #0
 800b5ca:	00d9      	lsls	r1, r3, #3
 800b5cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b5d0:	00d0      	lsls	r0, r2, #3
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	1911      	adds	r1, r2, r4
 800b5d8:	6639      	str	r1, [r7, #96]	; 0x60
 800b5da:	416b      	adcs	r3, r5
 800b5dc:	667b      	str	r3, [r7, #100]	; 0x64
 800b5de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	f04f 0300 	mov.w	r3, #0
 800b5e8:	1891      	adds	r1, r2, r2
 800b5ea:	63b9      	str	r1, [r7, #56]	; 0x38
 800b5ec:	415b      	adcs	r3, r3
 800b5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b5f4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800b5f8:	f7f5 fac8 	bl	8000b8c <__aeabi_uldivmod>
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	460b      	mov	r3, r1
 800b600:	4ba5      	ldr	r3, [pc, #660]	; (800b898 <UART_SetConfig+0x38c>)
 800b602:	fba3 2302 	umull	r2, r3, r3, r2
 800b606:	095b      	lsrs	r3, r3, #5
 800b608:	011e      	lsls	r6, r3, #4
 800b60a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b60c:	461c      	mov	r4, r3
 800b60e:	f04f 0500 	mov.w	r5, #0
 800b612:	4622      	mov	r2, r4
 800b614:	462b      	mov	r3, r5
 800b616:	1891      	adds	r1, r2, r2
 800b618:	6339      	str	r1, [r7, #48]	; 0x30
 800b61a:	415b      	adcs	r3, r3
 800b61c:	637b      	str	r3, [r7, #52]	; 0x34
 800b61e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b622:	1912      	adds	r2, r2, r4
 800b624:	eb45 0303 	adc.w	r3, r5, r3
 800b628:	f04f 0000 	mov.w	r0, #0
 800b62c:	f04f 0100 	mov.w	r1, #0
 800b630:	00d9      	lsls	r1, r3, #3
 800b632:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b636:	00d0      	lsls	r0, r2, #3
 800b638:	4602      	mov	r2, r0
 800b63a:	460b      	mov	r3, r1
 800b63c:	1911      	adds	r1, r2, r4
 800b63e:	65b9      	str	r1, [r7, #88]	; 0x58
 800b640:	416b      	adcs	r3, r5
 800b642:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	461a      	mov	r2, r3
 800b64a:	f04f 0300 	mov.w	r3, #0
 800b64e:	1891      	adds	r1, r2, r2
 800b650:	62b9      	str	r1, [r7, #40]	; 0x28
 800b652:	415b      	adcs	r3, r3
 800b654:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b656:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b65a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b65e:	f7f5 fa95 	bl	8000b8c <__aeabi_uldivmod>
 800b662:	4602      	mov	r2, r0
 800b664:	460b      	mov	r3, r1
 800b666:	4b8c      	ldr	r3, [pc, #560]	; (800b898 <UART_SetConfig+0x38c>)
 800b668:	fba3 1302 	umull	r1, r3, r3, r2
 800b66c:	095b      	lsrs	r3, r3, #5
 800b66e:	2164      	movs	r1, #100	; 0x64
 800b670:	fb01 f303 	mul.w	r3, r1, r3
 800b674:	1ad3      	subs	r3, r2, r3
 800b676:	00db      	lsls	r3, r3, #3
 800b678:	3332      	adds	r3, #50	; 0x32
 800b67a:	4a87      	ldr	r2, [pc, #540]	; (800b898 <UART_SetConfig+0x38c>)
 800b67c:	fba2 2303 	umull	r2, r3, r2, r3
 800b680:	095b      	lsrs	r3, r3, #5
 800b682:	005b      	lsls	r3, r3, #1
 800b684:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b688:	441e      	add	r6, r3
 800b68a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b68c:	4618      	mov	r0, r3
 800b68e:	f04f 0100 	mov.w	r1, #0
 800b692:	4602      	mov	r2, r0
 800b694:	460b      	mov	r3, r1
 800b696:	1894      	adds	r4, r2, r2
 800b698:	623c      	str	r4, [r7, #32]
 800b69a:	415b      	adcs	r3, r3
 800b69c:	627b      	str	r3, [r7, #36]	; 0x24
 800b69e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b6a2:	1812      	adds	r2, r2, r0
 800b6a4:	eb41 0303 	adc.w	r3, r1, r3
 800b6a8:	f04f 0400 	mov.w	r4, #0
 800b6ac:	f04f 0500 	mov.w	r5, #0
 800b6b0:	00dd      	lsls	r5, r3, #3
 800b6b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b6b6:	00d4      	lsls	r4, r2, #3
 800b6b8:	4622      	mov	r2, r4
 800b6ba:	462b      	mov	r3, r5
 800b6bc:	1814      	adds	r4, r2, r0
 800b6be:	653c      	str	r4, [r7, #80]	; 0x50
 800b6c0:	414b      	adcs	r3, r1
 800b6c2:	657b      	str	r3, [r7, #84]	; 0x54
 800b6c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	f04f 0300 	mov.w	r3, #0
 800b6ce:	1891      	adds	r1, r2, r2
 800b6d0:	61b9      	str	r1, [r7, #24]
 800b6d2:	415b      	adcs	r3, r3
 800b6d4:	61fb      	str	r3, [r7, #28]
 800b6d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b6da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b6de:	f7f5 fa55 	bl	8000b8c <__aeabi_uldivmod>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	4b6c      	ldr	r3, [pc, #432]	; (800b898 <UART_SetConfig+0x38c>)
 800b6e8:	fba3 1302 	umull	r1, r3, r3, r2
 800b6ec:	095b      	lsrs	r3, r3, #5
 800b6ee:	2164      	movs	r1, #100	; 0x64
 800b6f0:	fb01 f303 	mul.w	r3, r1, r3
 800b6f4:	1ad3      	subs	r3, r2, r3
 800b6f6:	00db      	lsls	r3, r3, #3
 800b6f8:	3332      	adds	r3, #50	; 0x32
 800b6fa:	4a67      	ldr	r2, [pc, #412]	; (800b898 <UART_SetConfig+0x38c>)
 800b6fc:	fba2 2303 	umull	r2, r3, r2, r3
 800b700:	095b      	lsrs	r3, r3, #5
 800b702:	f003 0207 	and.w	r2, r3, #7
 800b706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4432      	add	r2, r6
 800b70c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b70e:	e0b9      	b.n	800b884 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b710:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b712:	461c      	mov	r4, r3
 800b714:	f04f 0500 	mov.w	r5, #0
 800b718:	4622      	mov	r2, r4
 800b71a:	462b      	mov	r3, r5
 800b71c:	1891      	adds	r1, r2, r2
 800b71e:	6139      	str	r1, [r7, #16]
 800b720:	415b      	adcs	r3, r3
 800b722:	617b      	str	r3, [r7, #20]
 800b724:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b728:	1912      	adds	r2, r2, r4
 800b72a:	eb45 0303 	adc.w	r3, r5, r3
 800b72e:	f04f 0000 	mov.w	r0, #0
 800b732:	f04f 0100 	mov.w	r1, #0
 800b736:	00d9      	lsls	r1, r3, #3
 800b738:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b73c:	00d0      	lsls	r0, r2, #3
 800b73e:	4602      	mov	r2, r0
 800b740:	460b      	mov	r3, r1
 800b742:	eb12 0804 	adds.w	r8, r2, r4
 800b746:	eb43 0905 	adc.w	r9, r3, r5
 800b74a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	4618      	mov	r0, r3
 800b750:	f04f 0100 	mov.w	r1, #0
 800b754:	f04f 0200 	mov.w	r2, #0
 800b758:	f04f 0300 	mov.w	r3, #0
 800b75c:	008b      	lsls	r3, r1, #2
 800b75e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b762:	0082      	lsls	r2, r0, #2
 800b764:	4640      	mov	r0, r8
 800b766:	4649      	mov	r1, r9
 800b768:	f7f5 fa10 	bl	8000b8c <__aeabi_uldivmod>
 800b76c:	4602      	mov	r2, r0
 800b76e:	460b      	mov	r3, r1
 800b770:	4b49      	ldr	r3, [pc, #292]	; (800b898 <UART_SetConfig+0x38c>)
 800b772:	fba3 2302 	umull	r2, r3, r3, r2
 800b776:	095b      	lsrs	r3, r3, #5
 800b778:	011e      	lsls	r6, r3, #4
 800b77a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b77c:	4618      	mov	r0, r3
 800b77e:	f04f 0100 	mov.w	r1, #0
 800b782:	4602      	mov	r2, r0
 800b784:	460b      	mov	r3, r1
 800b786:	1894      	adds	r4, r2, r2
 800b788:	60bc      	str	r4, [r7, #8]
 800b78a:	415b      	adcs	r3, r3
 800b78c:	60fb      	str	r3, [r7, #12]
 800b78e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b792:	1812      	adds	r2, r2, r0
 800b794:	eb41 0303 	adc.w	r3, r1, r3
 800b798:	f04f 0400 	mov.w	r4, #0
 800b79c:	f04f 0500 	mov.w	r5, #0
 800b7a0:	00dd      	lsls	r5, r3, #3
 800b7a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b7a6:	00d4      	lsls	r4, r2, #3
 800b7a8:	4622      	mov	r2, r4
 800b7aa:	462b      	mov	r3, r5
 800b7ac:	1814      	adds	r4, r2, r0
 800b7ae:	64bc      	str	r4, [r7, #72]	; 0x48
 800b7b0:	414b      	adcs	r3, r1
 800b7b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f04f 0100 	mov.w	r1, #0
 800b7be:	f04f 0200 	mov.w	r2, #0
 800b7c2:	f04f 0300 	mov.w	r3, #0
 800b7c6:	008b      	lsls	r3, r1, #2
 800b7c8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b7cc:	0082      	lsls	r2, r0, #2
 800b7ce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b7d2:	f7f5 f9db 	bl	8000b8c <__aeabi_uldivmod>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	460b      	mov	r3, r1
 800b7da:	4b2f      	ldr	r3, [pc, #188]	; (800b898 <UART_SetConfig+0x38c>)
 800b7dc:	fba3 1302 	umull	r1, r3, r3, r2
 800b7e0:	095b      	lsrs	r3, r3, #5
 800b7e2:	2164      	movs	r1, #100	; 0x64
 800b7e4:	fb01 f303 	mul.w	r3, r1, r3
 800b7e8:	1ad3      	subs	r3, r2, r3
 800b7ea:	011b      	lsls	r3, r3, #4
 800b7ec:	3332      	adds	r3, #50	; 0x32
 800b7ee:	4a2a      	ldr	r2, [pc, #168]	; (800b898 <UART_SetConfig+0x38c>)
 800b7f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b7f4:	095b      	lsrs	r3, r3, #5
 800b7f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7fa:	441e      	add	r6, r3
 800b7fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7fe:	4618      	mov	r0, r3
 800b800:	f04f 0100 	mov.w	r1, #0
 800b804:	4602      	mov	r2, r0
 800b806:	460b      	mov	r3, r1
 800b808:	1894      	adds	r4, r2, r2
 800b80a:	603c      	str	r4, [r7, #0]
 800b80c:	415b      	adcs	r3, r3
 800b80e:	607b      	str	r3, [r7, #4]
 800b810:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b814:	1812      	adds	r2, r2, r0
 800b816:	eb41 0303 	adc.w	r3, r1, r3
 800b81a:	f04f 0400 	mov.w	r4, #0
 800b81e:	f04f 0500 	mov.w	r5, #0
 800b822:	00dd      	lsls	r5, r3, #3
 800b824:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b828:	00d4      	lsls	r4, r2, #3
 800b82a:	4622      	mov	r2, r4
 800b82c:	462b      	mov	r3, r5
 800b82e:	eb12 0a00 	adds.w	sl, r2, r0
 800b832:	eb43 0b01 	adc.w	fp, r3, r1
 800b836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	4618      	mov	r0, r3
 800b83c:	f04f 0100 	mov.w	r1, #0
 800b840:	f04f 0200 	mov.w	r2, #0
 800b844:	f04f 0300 	mov.w	r3, #0
 800b848:	008b      	lsls	r3, r1, #2
 800b84a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b84e:	0082      	lsls	r2, r0, #2
 800b850:	4650      	mov	r0, sl
 800b852:	4659      	mov	r1, fp
 800b854:	f7f5 f99a 	bl	8000b8c <__aeabi_uldivmod>
 800b858:	4602      	mov	r2, r0
 800b85a:	460b      	mov	r3, r1
 800b85c:	4b0e      	ldr	r3, [pc, #56]	; (800b898 <UART_SetConfig+0x38c>)
 800b85e:	fba3 1302 	umull	r1, r3, r3, r2
 800b862:	095b      	lsrs	r3, r3, #5
 800b864:	2164      	movs	r1, #100	; 0x64
 800b866:	fb01 f303 	mul.w	r3, r1, r3
 800b86a:	1ad3      	subs	r3, r2, r3
 800b86c:	011b      	lsls	r3, r3, #4
 800b86e:	3332      	adds	r3, #50	; 0x32
 800b870:	4a09      	ldr	r2, [pc, #36]	; (800b898 <UART_SetConfig+0x38c>)
 800b872:	fba2 2303 	umull	r2, r3, r2, r3
 800b876:	095b      	lsrs	r3, r3, #5
 800b878:	f003 020f 	and.w	r2, r3, #15
 800b87c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4432      	add	r2, r6
 800b882:	609a      	str	r2, [r3, #8]
}
 800b884:	bf00      	nop
 800b886:	377c      	adds	r7, #124	; 0x7c
 800b888:	46bd      	mov	sp, r7
 800b88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b88e:	bf00      	nop
 800b890:	40011000 	.word	0x40011000
 800b894:	40011400 	.word	0x40011400
 800b898:	51eb851f 	.word	0x51eb851f

0800b89c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b085      	sub	sp, #20
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	d029      	beq.n	800b90a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b8c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b8c6:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b8d0:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800b8d6:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800b8dc:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800b8e2:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800b8e8:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800b8ee:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800b8f4:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800b8fa:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b8fc:	68fa      	ldr	r2, [r7, #12]
 800b8fe:	4313      	orrs	r3, r2
 800b900:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	68fa      	ldr	r2, [r7, #12]
 800b906:	601a      	str	r2, [r3, #0]
 800b908:	e034      	b.n	800b974 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b916:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b920:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b926:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b928:	68fa      	ldr	r2, [r7, #12]
 800b92a:	4313      	orrs	r3, r2
 800b92c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b93a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b93e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b948:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800b94e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800b954:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800b95a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800b960:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b962:	68ba      	ldr	r2, [r7, #8]
 800b964:	4313      	orrs	r3, r2
 800b966:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	68fa      	ldr	r2, [r7, #12]
 800b96c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	68ba      	ldr	r2, [r7, #8]
 800b972:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800b974:	2300      	movs	r3, #0
}
 800b976:	4618      	mov	r0, r3
 800b978:	3714      	adds	r7, #20
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr

0800b982 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b982:	b480      	push	{r7}
 800b984:	b087      	sub	sp, #28
 800b986:	af00      	add	r7, sp, #0
 800b988:	60f8      	str	r0, [r7, #12]
 800b98a:	60b9      	str	r1, [r7, #8]
 800b98c:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800b98e:	2300      	movs	r3, #0
 800b990:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800b992:	2300      	movs	r3, #0
 800b994:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d02e      	beq.n	800b9fa <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b9a8:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	3b01      	subs	r3, #1
 800b9b6:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800b9b8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	689b      	ldr	r3, [r3, #8]
 800b9be:	3b01      	subs	r3, #1
 800b9c0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800b9c2:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	3b01      	subs	r3, #1
 800b9ca:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800b9cc:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	691b      	ldr	r3, [r3, #16]
 800b9d2:	3b01      	subs	r3, #1
 800b9d4:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800b9d6:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	695b      	ldr	r3, [r3, #20]
 800b9dc:	3b01      	subs	r3, #1
 800b9de:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800b9e0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	699b      	ldr	r3, [r3, #24]
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	697a      	ldr	r2, [r7, #20]
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	697a      	ldr	r2, [r7, #20]
 800b9f6:	609a      	str	r2, [r3, #8]
 800b9f8:	e03b      	b.n	800ba72 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	689b      	ldr	r3, [r3, #8]
 800b9fe:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ba06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ba0a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	68db      	ldr	r3, [r3, #12]
 800ba10:	3b01      	subs	r3, #1
 800ba12:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	695b      	ldr	r3, [r3, #20]
 800ba18:	3b01      	subs	r3, #1
 800ba1a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	697a      	ldr	r2, [r7, #20]
 800ba20:	4313      	orrs	r3, r2
 800ba22:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	68db      	ldr	r3, [r3, #12]
 800ba28:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ba30:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	3b01      	subs	r3, #1
 800ba3e:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800ba40:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	689b      	ldr	r3, [r3, #8]
 800ba46:	3b01      	subs	r3, #1
 800ba48:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800ba4a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	691b      	ldr	r3, [r3, #16]
 800ba50:	3b01      	subs	r3, #1
 800ba52:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800ba54:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	699b      	ldr	r3, [r3, #24]
 800ba5a:	3b01      	subs	r3, #1
 800ba5c:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	693a      	ldr	r2, [r7, #16]
 800ba62:	4313      	orrs	r3, r2
 800ba64:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	697a      	ldr	r2, [r7, #20]
 800ba6a:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	693a      	ldr	r2, [r7, #16]
 800ba70:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800ba72:	2300      	movs	r3, #0
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	371c      	adds	r7, #28
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr

0800ba80 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b086      	sub	sp, #24
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	60f8      	str	r0, [r7, #12]
 800ba88:	60b9      	str	r1, [r7, #8]
 800ba8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800ba90:	2300      	movs	r3, #0
 800ba92:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800ba9c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	3b01      	subs	r3, #1
 800baa4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800baa6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800baae:	4313      	orrs	r3, r2
 800bab0:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800bab2:	693a      	ldr	r2, [r7, #16]
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800bab8:	f7fa fb2a 	bl	8006110 <HAL_GetTick>
 800babc:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800babe:	e010      	b.n	800bae2 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bac6:	d00c      	beq.n	800bae2 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d007      	beq.n	800bade <FMC_SDRAM_SendCommand+0x5e>
 800bace:	f7fa fb1f 	bl	8006110 <HAL_GetTick>
 800bad2:	4602      	mov	r2, r0
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	1ad3      	subs	r3, r2, r3
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	429a      	cmp	r2, r3
 800badc:	d201      	bcs.n	800bae2 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800bade:	2303      	movs	r3, #3
 800bae0:	e006      	b.n	800baf0 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	699b      	ldr	r3, [r3, #24]
 800bae6:	f003 0320 	and.w	r3, r3, #32
 800baea:	2b20      	cmp	r3, #32
 800baec:	d0e8      	beq.n	800bac0 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800baee:	2300      	movs	r3, #0
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3718      	adds	r7, #24
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	695a      	ldr	r2, [r3, #20]
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	005b      	lsls	r3, r3, #1
 800bb0a:	431a      	orrs	r2, r3
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800bb10:	2300      	movs	r3, #0
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	370c      	adds	r7, #12
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr

0800bb1e <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 800bb1e:	b590      	push	{r4, r7, lr}
 800bb20:	b085      	sub	sp, #20
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	6078      	str	r0, [r7, #4]
	int len = 0;
 800bb26:	2300      	movs	r3, #0
 800bb28:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	7a1b      	ldrb	r3, [r3, #8]
 800bb2e:	2b03      	cmp	r3, #3
 800bb30:	d102      	bne.n	800bb38 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 800bb32:	230c      	movs	r3, #12
 800bb34:	60fb      	str	r3, [r7, #12]
 800bb36:	e005      	b.n	800bb44 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	7a1b      	ldrb	r3, [r3, #8]
 800bb3c:	2b04      	cmp	r3, #4
 800bb3e:	d101      	bne.n	800bb44 <MQTTSerialize_connectLength+0x26>
		len = 10;
 800bb40:	230a      	movs	r3, #10
 800bb42:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	330c      	adds	r3, #12
 800bb48:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bb4c:	f000 fbb1 	bl	800c2b2 <MQTTstrlen>
 800bb50:	4603      	mov	r3, r0
 800bb52:	3302      	adds	r3, #2
 800bb54:	68fa      	ldr	r2, [r7, #12]
 800bb56:	4413      	add	r3, r2
 800bb58:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	7edb      	ldrb	r3, [r3, #27]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d013      	beq.n	800bb8a <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	3324      	adds	r3, #36	; 0x24
 800bb66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bb6a:	f000 fba2 	bl	800c2b2 <MQTTstrlen>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	1c9c      	adds	r4, r3, #2
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	3330      	adds	r3, #48	; 0x30
 800bb76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bb7a:	f000 fb9a 	bl	800c2b2 <MQTTstrlen>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	4423      	add	r3, r4
 800bb82:	3302      	adds	r3, #2
 800bb84:	68fa      	ldr	r2, [r7, #12]
 800bb86:	4413      	add	r3, r2
 800bb88:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d103      	bne.n	800bb9a <MQTTSerialize_connectLength+0x7c>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d00a      	beq.n	800bbb0 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	3340      	adds	r3, #64	; 0x40
 800bb9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bba2:	f000 fb86 	bl	800c2b2 <MQTTstrlen>
 800bba6:	4603      	mov	r3, r0
 800bba8:	3302      	adds	r3, #2
 800bbaa:	68fa      	ldr	r2, [r7, #12]
 800bbac:	4413      	add	r3, r2
 800bbae:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d103      	bne.n	800bbc0 <MQTTSerialize_connectLength+0xa2>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d00a      	beq.n	800bbd6 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	334c      	adds	r3, #76	; 0x4c
 800bbc4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bbc8:	f000 fb73 	bl	800c2b2 <MQTTstrlen>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	3302      	adds	r3, #2
 800bbd0:	68fa      	ldr	r2, [r7, #12]
 800bbd2:	4413      	add	r3, r2
 800bbd4:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3714      	adds	r7, #20
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd90      	pop	{r4, r7, pc}

0800bbe0 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b08a      	sub	sp, #40	; 0x28
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	60f8      	str	r0, [r7, #12]
 800bbe8:	60b9      	str	r1, [r7, #8]
 800bbea:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	617b      	str	r3, [r7, #20]
	int len = 0;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	623b      	str	r3, [r7, #32]
	int rc = -1;
 800bbfc:	f04f 33ff 	mov.w	r3, #4294967295
 800bc00:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f7ff ff8b 	bl	800bb1e <MQTTSerialize_connectLength>
 800bc08:	6238      	str	r0, [r7, #32]
 800bc0a:	6a38      	ldr	r0, [r7, #32]
 800bc0c:	f000 fa06 	bl	800c01c <MQTTPacket_len>
 800bc10:	4602      	mov	r2, r0
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	4293      	cmp	r3, r2
 800bc16:	da03      	bge.n	800bc20 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800bc18:	f06f 0301 	mvn.w	r3, #1
 800bc1c:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 800bc1e:	e0c2      	b.n	800bda6 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 800bc20:	2300      	movs	r3, #0
 800bc22:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 800bc24:	7e3b      	ldrb	r3, [r7, #24]
 800bc26:	2201      	movs	r2, #1
 800bc28:	f362 1307 	bfi	r3, r2, #4, #4
 800bc2c:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800bc2e:	7e3a      	ldrb	r2, [r7, #24]
 800bc30:	f107 031c 	add.w	r3, r7, #28
 800bc34:	4611      	mov	r1, r2
 800bc36:	4618      	mov	r0, r3
 800bc38:	f000 fa7f 	bl	800c13a <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800bc3c:	69fb      	ldr	r3, [r7, #28]
 800bc3e:	6a39      	ldr	r1, [r7, #32]
 800bc40:	4618      	mov	r0, r3
 800bc42:	f000 f980 	bl	800bf46 <MQTTPacket_encode>
 800bc46:	4602      	mov	r2, r0
 800bc48:	69fb      	ldr	r3, [r7, #28]
 800bc4a:	4413      	add	r3, r2
 800bc4c:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	7a1b      	ldrb	r3, [r3, #8]
 800bc52:	2b04      	cmp	r3, #4
 800bc54:	d10c      	bne.n	800bc70 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 800bc56:	f107 031c 	add.w	r3, r7, #28
 800bc5a:	4955      	ldr	r1, [pc, #340]	; (800bdb0 <MQTTSerialize_connect+0x1d0>)
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f000 faaa 	bl	800c1b6 <writeCString>
		writeChar(&ptr, (char) 4);
 800bc62:	f107 031c 	add.w	r3, r7, #28
 800bc66:	2104      	movs	r1, #4
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f000 fa66 	bl	800c13a <writeChar>
 800bc6e:	e00b      	b.n	800bc88 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 800bc70:	f107 031c 	add.w	r3, r7, #28
 800bc74:	494f      	ldr	r1, [pc, #316]	; (800bdb4 <MQTTSerialize_connect+0x1d4>)
 800bc76:	4618      	mov	r0, r3
 800bc78:	f000 fa9d 	bl	800c1b6 <writeCString>
		writeChar(&ptr, (char) 3);
 800bc7c:	f107 031c 	add.w	r3, r7, #28
 800bc80:	2103      	movs	r1, #3
 800bc82:	4618      	mov	r0, r3
 800bc84:	f000 fa59 	bl	800c13a <writeChar>
	}

	flags.all = 0;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	7e9b      	ldrb	r3, [r3, #26]
 800bc90:	f003 0301 	and.w	r3, r3, #1
 800bc94:	b2da      	uxtb	r2, r3
 800bc96:	7d3b      	ldrb	r3, [r7, #20]
 800bc98:	f362 0341 	bfi	r3, r2, #1, #1
 800bc9c:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	7edb      	ldrb	r3, [r3, #27]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	bf14      	ite	ne
 800bca6:	2301      	movne	r3, #1
 800bca8:	2300      	moveq	r3, #0
 800bcaa:	b2da      	uxtb	r2, r3
 800bcac:	7d3b      	ldrb	r3, [r7, #20]
 800bcae:	f362 0382 	bfi	r3, r2, #2, #1
 800bcb2:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 800bcb4:	7d3b      	ldrb	r3, [r7, #20]
 800bcb6:	f003 0304 	and.w	r3, r3, #4
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d013      	beq.n	800bce8 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcc6:	f003 0303 	and.w	r3, r3, #3
 800bcca:	b2da      	uxtb	r2, r3
 800bccc:	7d3b      	ldrb	r3, [r7, #20]
 800bcce:	f362 03c4 	bfi	r3, r2, #3, #2
 800bcd2:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bcda:	f003 0301 	and.w	r3, r3, #1
 800bcde:	b2da      	uxtb	r2, r3
 800bce0:	7d3b      	ldrb	r3, [r7, #20]
 800bce2:	f362 1345 	bfi	r3, r2, #5, #1
 800bce6:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d103      	bne.n	800bcf8 <MQTTSerialize_connect+0x118>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d003      	beq.n	800bd00 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 800bcf8:	7d3b      	ldrb	r3, [r7, #20]
 800bcfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcfe:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d103      	bne.n	800bd10 <MQTTSerialize_connect+0x130>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d003      	beq.n	800bd18 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 800bd10:	7d3b      	ldrb	r3, [r7, #20]
 800bd12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd16:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 800bd18:	7d3a      	ldrb	r2, [r7, #20]
 800bd1a:	f107 031c 	add.w	r3, r7, #28
 800bd1e:	4611      	mov	r1, r2
 800bd20:	4618      	mov	r0, r3
 800bd22:	f000 fa0a 	bl	800c13a <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	8b1b      	ldrh	r3, [r3, #24]
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	f107 031c 	add.w	r3, r7, #28
 800bd30:	4611      	mov	r1, r2
 800bd32:	4618      	mov	r0, r3
 800bd34:	f000 fa16 	bl	800c164 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f107 001c 	add.w	r0, r7, #28
 800bd3e:	330c      	adds	r3, #12
 800bd40:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bd42:	f000 fa57 	bl	800c1f4 <writeMQTTString>
	if (options->willFlag)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	7edb      	ldrb	r3, [r3, #27]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d00d      	beq.n	800bd6a <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f107 001c 	add.w	r0, r7, #28
 800bd54:	3324      	adds	r3, #36	; 0x24
 800bd56:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bd58:	f000 fa4c 	bl	800c1f4 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f107 001c 	add.w	r0, r7, #28
 800bd62:	3330      	adds	r3, #48	; 0x30
 800bd64:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bd66:	f000 fa45 	bl	800c1f4 <writeMQTTString>
	}
	if (flags.bits.username)
 800bd6a:	7d3b      	ldrb	r3, [r7, #20]
 800bd6c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bd70:	b2db      	uxtb	r3, r3
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d006      	beq.n	800bd84 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f107 001c 	add.w	r0, r7, #28
 800bd7c:	3340      	adds	r3, #64	; 0x40
 800bd7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bd80:	f000 fa38 	bl	800c1f4 <writeMQTTString>
	if (flags.bits.password)
 800bd84:	7d3b      	ldrb	r3, [r7, #20]
 800bd86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd8a:	b2db      	uxtb	r3, r3
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d006      	beq.n	800bd9e <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f107 001c 	add.w	r0, r7, #28
 800bd96:	334c      	adds	r3, #76	; 0x4c
 800bd98:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bd9a:	f000 fa2b 	bl	800c1f4 <writeMQTTString>

	rc = ptr - buf;
 800bd9e:	69fa      	ldr	r2, [r7, #28]
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	1ad3      	subs	r3, r2, r3
 800bda4:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 800bda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3728      	adds	r7, #40	; 0x28
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}
 800bdb0:	08029504 	.word	0x08029504
 800bdb4:	0802950c 	.word	0x0802950c

0800bdb8 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b08a      	sub	sp, #40	; 0x28
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	60f8      	str	r0, [r7, #12]
 800bdc0:	60b9      	str	r1, [r7, #8]
 800bdc2:	607a      	str	r2, [r7, #4]
 800bdc4:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800bdda:	f107 0318 	add.w	r3, r7, #24
 800bdde:	4618      	mov	r0, r3
 800bde0:	f000 f997 	bl	800c112 <readChar>
 800bde4:	4603      	mov	r3, r0
 800bde6:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 800bde8:	7f3b      	ldrb	r3, [r7, #28]
 800bdea:	f023 030f 	bic.w	r3, r3, #15
 800bdee:	b2db      	uxtb	r3, r3
 800bdf0:	2b20      	cmp	r3, #32
 800bdf2:	d12e      	bne.n	800be52 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800bdf4:	69bb      	ldr	r3, [r7, #24]
 800bdf6:	f107 0214 	add.w	r2, r7, #20
 800bdfa:	4611      	mov	r1, r2
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f000 f957 	bl	800c0b0 <MQTTPacket_decodeBuf>
 800be02:	6278      	str	r0, [r7, #36]	; 0x24
 800be04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be06:	69bb      	ldr	r3, [r7, #24]
 800be08:	4413      	add	r3, r2
 800be0a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800be0c:	69bb      	ldr	r3, [r7, #24]
 800be0e:	697a      	ldr	r2, [r7, #20]
 800be10:	4413      	add	r3, r2
 800be12:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 800be14:	69bb      	ldr	r3, [r7, #24]
 800be16:	6a3a      	ldr	r2, [r7, #32]
 800be18:	1ad3      	subs	r3, r2, r3
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	dd1b      	ble.n	800be56 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 800be1e:	f107 0318 	add.w	r3, r7, #24
 800be22:	4618      	mov	r0, r3
 800be24:	f000 f975 	bl	800c112 <readChar>
 800be28:	4603      	mov	r3, r0
 800be2a:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 800be2c:	7c3b      	ldrb	r3, [r7, #16]
 800be2e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800be32:	b2db      	uxtb	r3, r3
 800be34:	461a      	mov	r2, r3
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 800be3a:	f107 0318 	add.w	r3, r7, #24
 800be3e:	4618      	mov	r0, r3
 800be40:	f000 f967 	bl	800c112 <readChar>
 800be44:	4603      	mov	r3, r0
 800be46:	461a      	mov	r2, r3
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	701a      	strb	r2, [r3, #0]

	rc = 1;
 800be4c:	2301      	movs	r3, #1
 800be4e:	627b      	str	r3, [r7, #36]	; 0x24
 800be50:	e002      	b.n	800be58 <MQTTDeserialize_connack+0xa0>
		goto exit;
 800be52:	bf00      	nop
 800be54:	e000      	b.n	800be58 <MQTTDeserialize_connack+0xa0>
		goto exit;
 800be56:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800be58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3728      	adds	r7, #40	; 0x28
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}

0800be62 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 800be62:	b580      	push	{r7, lr}
 800be64:	b08a      	sub	sp, #40	; 0x28
 800be66:	af00      	add	r7, sp, #0
 800be68:	60f8      	str	r0, [r7, #12]
 800be6a:	60b9      	str	r1, [r7, #8]
 800be6c:	607a      	str	r2, [r7, #4]
 800be6e:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800be70:	2300      	movs	r3, #0
 800be72:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800be74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be76:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800be78:	2300      	movs	r3, #0
 800be7a:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800be7c:	2300      	movs	r3, #0
 800be7e:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 800be80:	2300      	movs	r3, #0
 800be82:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800be84:	f107 0318 	add.w	r3, r7, #24
 800be88:	4618      	mov	r0, r3
 800be8a:	f000 f942 	bl	800c112 <readChar>
 800be8e:	4603      	mov	r3, r0
 800be90:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 800be92:	7f3b      	ldrb	r3, [r7, #28]
 800be94:	f023 030f 	bic.w	r3, r3, #15
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	2b30      	cmp	r3, #48	; 0x30
 800be9c:	d14b      	bne.n	800bf36 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 800be9e:	7f3b      	ldrb	r3, [r7, #28]
 800bea0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	461a      	mov	r2, r3
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 800beac:	7f3b      	ldrb	r3, [r7, #28]
 800beae:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	461a      	mov	r2, r3
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 800beba:	7f3b      	ldrb	r3, [r7, #28]
 800bebc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	461a      	mov	r2, r3
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800bec8:	69bb      	ldr	r3, [r7, #24]
 800beca:	f107 0214 	add.w	r2, r7, #20
 800bece:	4611      	mov	r1, r2
 800bed0:	4618      	mov	r0, r3
 800bed2:	f000 f8ed 	bl	800c0b0 <MQTTPacket_decodeBuf>
 800bed6:	6278      	str	r0, [r7, #36]	; 0x24
 800bed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	4413      	add	r3, r2
 800bede:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800bee0:	69bb      	ldr	r3, [r7, #24]
 800bee2:	697a      	ldr	r2, [r7, #20]
 800bee4:	4413      	add	r3, r2
 800bee6:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800bee8:	f107 0318 	add.w	r3, r7, #24
 800beec:	6a3a      	ldr	r2, [r7, #32]
 800beee:	4619      	mov	r1, r3
 800bef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bef2:	f000 f9ad 	bl	800c250 <readMQTTLenString>
 800bef6:	4603      	mov	r3, r0
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d01e      	beq.n	800bf3a <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 800befc:	69bb      	ldr	r3, [r7, #24]
 800befe:	6a3a      	ldr	r2, [r7, #32]
 800bf00:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	db19      	blt.n	800bf3a <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	dd08      	ble.n	800bf20 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 800bf0e:	f107 0318 	add.w	r3, r7, #24
 800bf12:	4618      	mov	r0, r3
 800bf14:	f000 f8e2 	bl	800c0dc <readInt>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	b29a      	uxth	r2, r3
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	6a3a      	ldr	r2, [r7, #32]
 800bf24:	1ad2      	subs	r2, r2, r3
 800bf26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf28:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 800bf2a:	69ba      	ldr	r2, [r7, #24]
 800bf2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf2e:	601a      	str	r2, [r3, #0]
	rc = 1;
 800bf30:	2301      	movs	r3, #1
 800bf32:	627b      	str	r3, [r7, #36]	; 0x24
 800bf34:	e002      	b.n	800bf3c <MQTTDeserialize_publish+0xda>
		goto exit;
 800bf36:	bf00      	nop
 800bf38:	e000      	b.n	800bf3c <MQTTDeserialize_publish+0xda>
		goto exit;
 800bf3a:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800bf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3728      	adds	r7, #40	; 0x28
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}

0800bf46 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 800bf46:	b480      	push	{r7}
 800bf48:	b085      	sub	sp, #20
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
 800bf4e:	6039      	str	r1, [r7, #0]
	int rc = 0;
 800bf50:	2300      	movs	r3, #0
 800bf52:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	425a      	negs	r2, r3
 800bf58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bf60:	bf58      	it	pl
 800bf62:	4253      	negpl	r3, r2
 800bf64:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	da00      	bge.n	800bf6e <MQTTPacket_encode+0x28>
 800bf6c:	337f      	adds	r3, #127	; 0x7f
 800bf6e:	11db      	asrs	r3, r3, #7
 800bf70:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	dd03      	ble.n	800bf80 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 800bf78:	7afb      	ldrb	r3, [r7, #11]
 800bf7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bf7e:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	1c5a      	adds	r2, r3, #1
 800bf84:	60fa      	str	r2, [r7, #12]
 800bf86:	461a      	mov	r2, r3
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	4413      	add	r3, r2
 800bf8c:	7afa      	ldrb	r2, [r7, #11]
 800bf8e:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	dcde      	bgt.n	800bf54 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 800bf96:	68fb      	ldr	r3, [r7, #12]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3714      	adds	r7, #20
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr

0800bfa4 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b086      	sub	sp, #24
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	617b      	str	r3, [r7, #20]
	int len = 0;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 800bfbc:	f04f 33ff 	mov.w	r3, #4294967295
 800bfc0:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	3301      	adds	r3, #1
 800bfc6:	613b      	str	r3, [r7, #16]
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	2b04      	cmp	r3, #4
 800bfcc:	dd03      	ble.n	800bfd6 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 800bfce:	f04f 33ff 	mov.w	r3, #4294967295
 800bfd2:	60fb      	str	r3, [r7, #12]
			goto exit;
 800bfd4:	e01d      	b.n	800c012 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 800bfd6:	f107 020b 	add.w	r2, r7, #11
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2101      	movs	r1, #1
 800bfde:	4610      	mov	r0, r2
 800bfe0:	4798      	blx	r3
 800bfe2:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2b01      	cmp	r3, #1
 800bfe8:	d112      	bne.n	800c010 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	7afb      	ldrb	r3, [r7, #11]
 800bff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bff4:	6979      	ldr	r1, [r7, #20]
 800bff6:	fb01 f303 	mul.w	r3, r1, r3
 800bffa:	441a      	add	r2, r3
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	01db      	lsls	r3, r3, #7
 800c004:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 800c006:	7afb      	ldrb	r3, [r7, #11]
 800c008:	b25b      	sxtb	r3, r3
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	dbd6      	blt.n	800bfbc <MQTTPacket_decode+0x18>
exit:
 800c00e:	e000      	b.n	800c012 <MQTTPacket_decode+0x6e>
			goto exit;
 800c010:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 800c012:	693b      	ldr	r3, [r7, #16]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3718      	adds	r7, #24
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b083      	sub	sp, #12
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	3301      	adds	r3, #1
 800c028:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2b7f      	cmp	r3, #127	; 0x7f
 800c02e:	dc03      	bgt.n	800c038 <MQTTPacket_len+0x1c>
		rem_len += 1;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	3301      	adds	r3, #1
 800c034:	607b      	str	r3, [r7, #4]
 800c036:	e012      	b.n	800c05e <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c03e:	da03      	bge.n	800c048 <MQTTPacket_len+0x2c>
		rem_len += 2;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	3302      	adds	r3, #2
 800c044:	607b      	str	r3, [r7, #4]
 800c046:	e00a      	b.n	800c05e <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	4a08      	ldr	r2, [pc, #32]	; (800c06c <MQTTPacket_len+0x50>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	dc03      	bgt.n	800c058 <MQTTPacket_len+0x3c>
		rem_len += 3;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	3303      	adds	r3, #3
 800c054:	607b      	str	r3, [r7, #4]
 800c056:	e002      	b.n	800c05e <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	3304      	adds	r3, #4
 800c05c:	607b      	str	r3, [r7, #4]
	return rem_len;
 800c05e:	687b      	ldr	r3, [r7, #4]
}
 800c060:	4618      	mov	r0, r3
 800c062:	370c      	adds	r7, #12
 800c064:	46bd      	mov	sp, r7
 800c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06a:	4770      	bx	lr
 800c06c:	001ffffe 	.word	0x001ffffe

0800c070 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 800c070:	b480      	push	{r7}
 800c072:	b085      	sub	sp, #20
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 800c07a:	2300      	movs	r3, #0
 800c07c:	60fb      	str	r3, [r7, #12]
 800c07e:	e00a      	b.n	800c096 <bufchar+0x26>
		*c = *bufptr++;
 800c080:	4b0a      	ldr	r3, [pc, #40]	; (800c0ac <bufchar+0x3c>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	1c5a      	adds	r2, r3, #1
 800c086:	4909      	ldr	r1, [pc, #36]	; (800c0ac <bufchar+0x3c>)
 800c088:	600a      	str	r2, [r1, #0]
 800c08a:	781a      	ldrb	r2, [r3, #0]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	3301      	adds	r3, #1
 800c094:	60fb      	str	r3, [r7, #12]
 800c096:	68fa      	ldr	r2, [r7, #12]
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	dbf0      	blt.n	800c080 <bufchar+0x10>
	return count;
 800c09e:	683b      	ldr	r3, [r7, #0]
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3714      	adds	r7, #20
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr
 800c0ac:	20000d00 	.word	0x20000d00

0800c0b0 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 800c0ba:	4a06      	ldr	r2, [pc, #24]	; (800c0d4 <MQTTPacket_decodeBuf+0x24>)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 800c0c0:	6839      	ldr	r1, [r7, #0]
 800c0c2:	4805      	ldr	r0, [pc, #20]	; (800c0d8 <MQTTPacket_decodeBuf+0x28>)
 800c0c4:	f7ff ff6e 	bl	800bfa4 <MQTTPacket_decode>
 800c0c8:	4603      	mov	r3, r0
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3708      	adds	r7, #8
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	bf00      	nop
 800c0d4:	20000d00 	.word	0x20000d00
 800c0d8:	0800c071 	.word	0x0800c071

0800c0dc <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b085      	sub	sp, #20
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	021b      	lsls	r3, r3, #8
 800c0f0:	68fa      	ldr	r2, [r7, #12]
 800c0f2:	3201      	adds	r2, #1
 800c0f4:	7812      	ldrb	r2, [r2, #0]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	1c9a      	adds	r2, r3, #2
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	601a      	str	r2, [r3, #0]
	return len;
 800c104:	68bb      	ldr	r3, [r7, #8]
}
 800c106:	4618      	mov	r0, r3
 800c108:	3714      	adds	r7, #20
 800c10a:	46bd      	mov	sp, r7
 800c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c110:	4770      	bx	lr

0800c112 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 800c112:	b480      	push	{r7}
 800c114:	b085      	sub	sp, #20
 800c116:	af00      	add	r7, sp, #0
 800c118:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	1c5a      	adds	r2, r3, #1
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	601a      	str	r2, [r3, #0]
	return c;
 800c12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3714      	adds	r7, #20
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr

0800c13a <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 800c13a:	b480      	push	{r7}
 800c13c:	b083      	sub	sp, #12
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
 800c142:	460b      	mov	r3, r1
 800c144:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	78fa      	ldrb	r2, [r7, #3]
 800c14c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	1c5a      	adds	r2, r3, #1
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	601a      	str	r2, [r3, #0]
}
 800c158:	bf00      	nop
 800c15a:	370c      	adds	r7, #12
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr

0800c164 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 800c164:	b480      	push	{r7}
 800c166:	b083      	sub	sp, #12
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	2b00      	cmp	r3, #0
 800c172:	da00      	bge.n	800c176 <writeInt+0x12>
 800c174:	33ff      	adds	r3, #255	; 0xff
 800c176:	121b      	asrs	r3, r3, #8
 800c178:	461a      	mov	r2, r3
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	b2d2      	uxtb	r2, r2
 800c180:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	1c5a      	adds	r2, r3, #1
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	425a      	negs	r2, r3
 800c190:	b2db      	uxtb	r3, r3
 800c192:	b2d2      	uxtb	r2, r2
 800c194:	bf58      	it	pl
 800c196:	4253      	negpl	r3, r2
 800c198:	687a      	ldr	r2, [r7, #4]
 800c19a:	6812      	ldr	r2, [r2, #0]
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	1c5a      	adds	r2, r3, #1
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	601a      	str	r2, [r3, #0]
}
 800c1aa:	bf00      	nop
 800c1ac:	370c      	adds	r7, #12
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr

0800c1b6 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 800c1b6:	b580      	push	{r7, lr}
 800c1b8:	b084      	sub	sp, #16
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
 800c1be:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 800c1c0:	6838      	ldr	r0, [r7, #0]
 800c1c2:	f7f4 f86f 	bl	80002a4 <strlen>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 800c1ca:	68f9      	ldr	r1, [r7, #12]
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f7ff ffc9 	bl	800c164 <writeInt>
	memcpy(*pptr, string, len);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	68fa      	ldr	r2, [r7, #12]
 800c1d8:	6839      	ldr	r1, [r7, #0]
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f01a fda4 	bl	8026d28 <memcpy>
	*pptr += len;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	441a      	add	r2, r3
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	601a      	str	r2, [r3, #0]
}
 800c1ec:	bf00      	nop
 800c1ee:	3710      	adds	r7, #16
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	60f8      	str	r0, [r7, #12]
 800c1fc:	4638      	mov	r0, r7
 800c1fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2b00      	cmp	r3, #0
 800c206:	dd12      	ble.n	800c22e <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	4619      	mov	r1, r3
 800c20c:	68f8      	ldr	r0, [r7, #12]
 800c20e:	f7ff ffa9 	bl	800c164 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	68b9      	ldr	r1, [r7, #8]
 800c218:	687a      	ldr	r2, [r7, #4]
 800c21a:	4618      	mov	r0, r3
 800c21c:	f01a fd84 	bl	8026d28 <memcpy>
		*pptr += mqttstring.lenstring.len;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	441a      	add	r2, r3
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 800c22c:	e00c      	b.n	800c248 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d005      	beq.n	800c240 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	4619      	mov	r1, r3
 800c238:	68f8      	ldr	r0, [r7, #12]
 800c23a:	f7ff ffbc 	bl	800c1b6 <writeCString>
}
 800c23e:	e003      	b.n	800c248 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 800c240:	2100      	movs	r1, #0
 800c242:	68f8      	ldr	r0, [r7, #12]
 800c244:	f7ff ff8e 	bl	800c164 <writeInt>
}
 800c248:	bf00      	nop
 800c24a:	3710      	adds	r7, #16
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b086      	sub	sp, #24
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	607a      	str	r2, [r7, #4]
	int rc = 0;
 800c25c:	2300      	movs	r3, #0
 800c25e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	687a      	ldr	r2, [r7, #4]
 800c266:	1ad3      	subs	r3, r2, r3
 800c268:	2b01      	cmp	r3, #1
 800c26a:	dd1a      	ble.n	800c2a2 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 800c26c:	68b8      	ldr	r0, [r7, #8]
 800c26e:	f7ff ff35 	bl	800c0dc <readInt>
 800c272:	4602      	mov	r2, r0
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	6852      	ldr	r2, [r2, #4]
 800c280:	4413      	add	r3, r2
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	429a      	cmp	r2, r3
 800c286:	d30c      	bcc.n	800c2a2 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	681a      	ldr	r2, [r3, #0]
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	68fa      	ldr	r2, [r7, #12]
 800c296:	6852      	ldr	r2, [r2, #4]
 800c298:	441a      	add	r2, r3
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	601a      	str	r2, [r3, #0]
			rc = 1;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 800c2a8:	697b      	ldr	r3, [r7, #20]
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3718      	adds	r7, #24
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}

0800c2b2 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 800c2b2:	b580      	push	{r7, lr}
 800c2b4:	b086      	sub	sp, #24
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	1d3b      	adds	r3, r7, #4
 800c2ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d006      	beq.n	800c2d6 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7f3 ffea 	bl	80002a4 <strlen>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	617b      	str	r3, [r7, #20]
 800c2d4:	e001      	b.n	800c2da <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	617b      	str	r3, [r7, #20]
	return rc;
 800c2da:	697b      	ldr	r3, [r7, #20]
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3718      	adds	r7, #24
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}

0800c2e4 <MQTTPacket_read>:
 * @param getfn pointer to a function which will read any number of bytes from the needed source
 * @return integer MQTT packet type, or -1 on error
 * @note  the whole message must fit into the caller's buffer
 */
int MQTTPacket_read(unsigned char* buf, int buflen, int (*getfn)(unsigned char*, int))
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b088      	sub	sp, #32
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	60f8      	str	r0, [r7, #12]
 800c2ec:	60b9      	str	r1, [r7, #8]
 800c2ee:	607a      	str	r2, [r7, #4]
	int rc = -1;
 800c2f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c2f4:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	617b      	str	r3, [r7, #20]
	int len = 0;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	61bb      	str	r3, [r7, #24]
	int rem_len = 0;
 800c2fe:	2300      	movs	r3, #0
 800c300:	613b      	str	r3, [r7, #16]

	/* 1. read the header byte.  This has the packet type in it */
	if ((*getfn)(buf, 1) != 1)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2101      	movs	r1, #1
 800c306:	68f8      	ldr	r0, [r7, #12]
 800c308:	4798      	blx	r3
 800c30a:	4603      	mov	r3, r0
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d12f      	bne.n	800c370 <MQTTPacket_read+0x8c>
		goto exit;

	len = 1;
 800c310:	2301      	movs	r3, #1
 800c312:	61bb      	str	r3, [r7, #24]
	/* 2. read the remaining length.  This is variable in itself */
	MQTTPacket_decode(getfn, &rem_len);
 800c314:	f107 0310 	add.w	r3, r7, #16
 800c318:	4619      	mov	r1, r3
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f7ff fe42 	bl	800bfa4 <MQTTPacket_decode>
	len += MQTTPacket_encode(buf + 1, rem_len); /* put the original remaining length back into the buffer */
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	3301      	adds	r3, #1
 800c324:	693a      	ldr	r2, [r7, #16]
 800c326:	4611      	mov	r1, r2
 800c328:	4618      	mov	r0, r3
 800c32a:	f7ff fe0c 	bl	800bf46 <MQTTPacket_encode>
 800c32e:	4602      	mov	r2, r0
 800c330:	69bb      	ldr	r3, [r7, #24]
 800c332:	4413      	add	r3, r2
 800c334:	61bb      	str	r3, [r7, #24]

	/* 3. read the rest of the buffer using a callback to supply the rest of the data */
	if((rem_len + len) > buflen)
 800c336:	693a      	ldr	r2, [r7, #16]
 800c338:	69bb      	ldr	r3, [r7, #24]
 800c33a:	4413      	add	r3, r2
 800c33c:	68ba      	ldr	r2, [r7, #8]
 800c33e:	429a      	cmp	r2, r3
 800c340:	db18      	blt.n	800c374 <MQTTPacket_read+0x90>
		goto exit;
	if (rem_len && ((*getfn)(buf + len, rem_len) != rem_len))
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d00a      	beq.n	800c35e <MQTTPacket_read+0x7a>
 800c348:	69bb      	ldr	r3, [r7, #24]
 800c34a:	68fa      	ldr	r2, [r7, #12]
 800c34c:	441a      	add	r2, r3
 800c34e:	6939      	ldr	r1, [r7, #16]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	4610      	mov	r0, r2
 800c354:	4798      	blx	r3
 800c356:	4602      	mov	r2, r0
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	429a      	cmp	r2, r3
 800c35c:	d10c      	bne.n	800c378 <MQTTPacket_read+0x94>
		goto exit;

	header.byte = buf[0];
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	753b      	strb	r3, [r7, #20]
	rc = header.bits.type;
 800c364:	7d3b      	ldrb	r3, [r7, #20]
 800c366:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	61fb      	str	r3, [r7, #28]
 800c36e:	e004      	b.n	800c37a <MQTTPacket_read+0x96>
		goto exit;
 800c370:	bf00      	nop
 800c372:	e002      	b.n	800c37a <MQTTPacket_read+0x96>
		goto exit;
 800c374:	bf00      	nop
 800c376:	e000      	b.n	800c37a <MQTTPacket_read+0x96>
		goto exit;
 800c378:	bf00      	nop
exit:
	return rc;
 800c37a:	69fb      	ldr	r3, [r7, #28]
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3720      	adds	r7, #32
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b086      	sub	sp, #24
 800c388:	af00      	add	r7, sp, #0
 800c38a:	60f8      	str	r0, [r7, #12]
 800c38c:	4638      	mov	r0, r7
 800c38e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 800c392:	2300      	movs	r3, #0
 800c394:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 800c396:	463b      	mov	r3, r7
 800c398:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c39c:	f7ff ff89 	bl	800c2b2 <MQTTstrlen>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	1c9a      	adds	r2, r3, #2
 800c3a4:	6a3b      	ldr	r3, [r7, #32]
 800c3a6:	4413      	add	r3, r2
 800c3a8:	697a      	ldr	r2, [r7, #20]
 800c3aa:	4413      	add	r3, r2
 800c3ac:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	dd02      	ble.n	800c3ba <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	3302      	adds	r3, #2
 800c3b8:	617b      	str	r3, [r7, #20]
	return len;
 800c3ba:	697b      	ldr	r3, [r7, #20]
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3718      	adds	r7, #24
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b08a      	sub	sp, #40	; 0x28
 800c3c8:	af02      	add	r7, sp, #8
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	603b      	str	r3, [r7, #0]
 800c3d0:	4613      	mov	r3, r2
 800c3d2:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 800c3d8:	2300      	movs	r3, #0
 800c3da:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 800c3e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3e6:	9300      	str	r3, [sp, #0]
 800c3e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c3ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c3ee:	6838      	ldr	r0, [r7, #0]
 800c3f0:	f7ff ffc8 	bl	800c384 <MQTTSerialize_publishLength>
 800c3f4:	61b8      	str	r0, [r7, #24]
 800c3f6:	69b8      	ldr	r0, [r7, #24]
 800c3f8:	f7ff fe10 	bl	800c01c <MQTTPacket_len>
 800c3fc:	4602      	mov	r2, r0
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	4293      	cmp	r3, r2
 800c402:	da03      	bge.n	800c40c <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800c404:	f06f 0301 	mvn.w	r3, #1
 800c408:	61fb      	str	r3, [r7, #28]
		goto exit;
 800c40a:	e04c      	b.n	800c4a6 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 800c40c:	7c3b      	ldrb	r3, [r7, #16]
 800c40e:	2203      	movs	r2, #3
 800c410:	f362 1307 	bfi	r3, r2, #4, #4
 800c414:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 800c416:	79fb      	ldrb	r3, [r7, #7]
 800c418:	f003 0301 	and.w	r3, r3, #1
 800c41c:	b2da      	uxtb	r2, r3
 800c41e:	7c3b      	ldrb	r3, [r7, #16]
 800c420:	f362 03c3 	bfi	r3, r2, #3, #1
 800c424:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	f003 0303 	and.w	r3, r3, #3
 800c42c:	b2da      	uxtb	r2, r3
 800c42e:	7c3b      	ldrb	r3, [r7, #16]
 800c430:	f362 0342 	bfi	r3, r2, #1, #2
 800c434:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 800c436:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c43a:	f003 0301 	and.w	r3, r3, #1
 800c43e:	b2da      	uxtb	r2, r3
 800c440:	7c3b      	ldrb	r3, [r7, #16]
 800c442:	f362 0300 	bfi	r3, r2, #0, #1
 800c446:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 800c448:	7c3a      	ldrb	r2, [r7, #16]
 800c44a:	f107 0314 	add.w	r3, r7, #20
 800c44e:	4611      	mov	r1, r2
 800c450:	4618      	mov	r0, r3
 800c452:	f7ff fe72 	bl	800c13a <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	69b9      	ldr	r1, [r7, #24]
 800c45a:	4618      	mov	r0, r3
 800c45c:	f7ff fd73 	bl	800bf46 <MQTTPacket_encode>
 800c460:	4602      	mov	r2, r0
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	4413      	add	r3, r2
 800c466:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 800c468:	f107 0014 	add.w	r0, r7, #20
 800c46c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c470:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c472:	f7ff febf 	bl	800c1f4 <writeMQTTString>

	if (qos > 0)
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	dd06      	ble.n	800c48a <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 800c47c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800c47e:	f107 0314 	add.w	r3, r7, #20
 800c482:	4611      	mov	r1, r2
 800c484:	4618      	mov	r0, r3
 800c486:	f7ff fe6d 	bl	800c164 <writeInt>

	memcpy(ptr, payload, payloadlen);
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c48e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c490:	4618      	mov	r0, r3
 800c492:	f01a fc49 	bl	8026d28 <memcpy>
	ptr += payloadlen;
 800c496:	697a      	ldr	r2, [r7, #20]
 800c498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c49a:	4413      	add	r3, r2
 800c49c:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 800c49e:	697a      	ldr	r2, [r7, #20]
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	1ad3      	subs	r3, r2, r3
 800c4a4:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800c4a6:	69fb      	ldr	r3, [r7, #28]
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3720      	adds	r7, #32
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b084      	sub	sp, #16
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 800c4ba:	2302      	movs	r3, #2
 800c4bc:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 800c4be:	2300      	movs	r3, #0
 800c4c0:	60fb      	str	r3, [r7, #12]
 800c4c2:	e013      	b.n	800c4ec <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 800c4c4:	68fa      	ldr	r2, [r7, #12]
 800c4c6:	4613      	mov	r3, r2
 800c4c8:	005b      	lsls	r3, r3, #1
 800c4ca:	4413      	add	r3, r2
 800c4cc:	009b      	lsls	r3, r3, #2
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	4413      	add	r3, r2
 800c4d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c4d8:	f7ff feeb 	bl	800c2b2 <MQTTstrlen>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	3303      	adds	r3, #3
 800c4e0:	68ba      	ldr	r2, [r7, #8]
 800c4e2:	4413      	add	r3, r2
 800c4e4:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	60fb      	str	r3, [r7, #12]
 800c4ec:	68fa      	ldr	r2, [r7, #12]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	dbe7      	blt.n	800c4c4 <MQTTSerialize_subscribeLength+0x14>
	return len;
 800c4f4:	68bb      	ldr	r3, [r7, #8]
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3710      	adds	r7, #16
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}

0800c4fe <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b08a      	sub	sp, #40	; 0x28
 800c502:	af00      	add	r7, sp, #0
 800c504:	60f8      	str	r0, [r7, #12]
 800c506:	60b9      	str	r1, [r7, #8]
 800c508:	4611      	mov	r1, r2
 800c50a:	461a      	mov	r2, r3
 800c50c:	460b      	mov	r3, r1
 800c50e:	71fb      	strb	r3, [r7, #7]
 800c510:	4613      	mov	r3, r2
 800c512:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 800c518:	2300      	movs	r3, #0
 800c51a:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 800c51c:	2300      	movs	r3, #0
 800c51e:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 800c520:	2300      	movs	r3, #0
 800c522:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 800c524:	2300      	movs	r3, #0
 800c526:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 800c528:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c52a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c52c:	f7ff ffc0 	bl	800c4b0 <MQTTSerialize_subscribeLength>
 800c530:	61f8      	str	r0, [r7, #28]
 800c532:	69f8      	ldr	r0, [r7, #28]
 800c534:	f7ff fd72 	bl	800c01c <MQTTPacket_len>
 800c538:	4602      	mov	r2, r0
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	4293      	cmp	r3, r2
 800c53e:	da03      	bge.n	800c548 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800c540:	f06f 0301 	mvn.w	r3, #1
 800c544:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 800c546:	e051      	b.n	800c5ec <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 800c548:	2300      	movs	r3, #0
 800c54a:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 800c54c:	7d3b      	ldrb	r3, [r7, #20]
 800c54e:	2208      	movs	r2, #8
 800c550:	f362 1307 	bfi	r3, r2, #4, #4
 800c554:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 800c556:	79fb      	ldrb	r3, [r7, #7]
 800c558:	f003 0301 	and.w	r3, r3, #1
 800c55c:	b2da      	uxtb	r2, r3
 800c55e:	7d3b      	ldrb	r3, [r7, #20]
 800c560:	f362 03c3 	bfi	r3, r2, #3, #1
 800c564:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 800c566:	7d3b      	ldrb	r3, [r7, #20]
 800c568:	2201      	movs	r2, #1
 800c56a:	f362 0342 	bfi	r3, r2, #1, #2
 800c56e:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 800c570:	7d3a      	ldrb	r2, [r7, #20]
 800c572:	f107 0318 	add.w	r3, r7, #24
 800c576:	4611      	mov	r1, r2
 800c578:	4618      	mov	r0, r3
 800c57a:	f7ff fdde 	bl	800c13a <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800c57e:	69bb      	ldr	r3, [r7, #24]
 800c580:	69f9      	ldr	r1, [r7, #28]
 800c582:	4618      	mov	r0, r3
 800c584:	f7ff fcdf 	bl	800bf46 <MQTTPacket_encode>
 800c588:	4602      	mov	r2, r0
 800c58a:	69bb      	ldr	r3, [r7, #24]
 800c58c:	4413      	add	r3, r2
 800c58e:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 800c590:	88ba      	ldrh	r2, [r7, #4]
 800c592:	f107 0318 	add.w	r3, r7, #24
 800c596:	4611      	mov	r1, r2
 800c598:	4618      	mov	r0, r3
 800c59a:	f7ff fde3 	bl	800c164 <writeInt>

	for (i = 0; i < count; ++i)
 800c59e:	2300      	movs	r3, #0
 800c5a0:	623b      	str	r3, [r7, #32]
 800c5a2:	e01b      	b.n	800c5dc <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 800c5a4:	6a3a      	ldr	r2, [r7, #32]
 800c5a6:	4613      	mov	r3, r2
 800c5a8:	005b      	lsls	r3, r3, #1
 800c5aa:	4413      	add	r3, r2
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5b2:	4413      	add	r3, r2
 800c5b4:	f107 0018 	add.w	r0, r7, #24
 800c5b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c5ba:	f7ff fe1b 	bl	800c1f4 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 800c5be:	6a3b      	ldr	r3, [r7, #32]
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5c4:	4413      	add	r3, r2
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	b2da      	uxtb	r2, r3
 800c5ca:	f107 0318 	add.w	r3, r7, #24
 800c5ce:	4611      	mov	r1, r2
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f7ff fdb2 	bl	800c13a <writeChar>
	for (i = 0; i < count; ++i)
 800c5d6:	6a3b      	ldr	r3, [r7, #32]
 800c5d8:	3301      	adds	r3, #1
 800c5da:	623b      	str	r3, [r7, #32]
 800c5dc:	6a3a      	ldr	r2, [r7, #32]
 800c5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	dbdf      	blt.n	800c5a4 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 800c5e4:	69ba      	ldr	r2, [r7, #24]
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	1ad3      	subs	r3, r2, r3
 800c5ea:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800c5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3728      	adds	r7, #40	; 0x28
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}

0800c5f6 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 800c5f6:	b580      	push	{r7, lr}
 800c5f8:	b08a      	sub	sp, #40	; 0x28
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	60f8      	str	r0, [r7, #12]
 800c5fe:	60b9      	str	r1, [r7, #8]
 800c600:	607a      	str	r2, [r7, #4]
 800c602:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800c604:	2300      	movs	r3, #0
 800c606:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800c608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60a:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800c60c:	2300      	movs	r3, #0
 800c60e:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800c610:	2300      	movs	r3, #0
 800c612:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800c614:	f107 0318 	add.w	r3, r7, #24
 800c618:	4618      	mov	r0, r3
 800c61a:	f7ff fd7a 	bl	800c112 <readChar>
 800c61e:	4603      	mov	r3, r0
 800c620:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 800c622:	7f3b      	ldrb	r3, [r7, #28]
 800c624:	f023 030f 	bic.w	r3, r3, #15
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	2b90      	cmp	r3, #144	; 0x90
 800c62c:	d142      	bne.n	800c6b4 <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800c62e:	69bb      	ldr	r3, [r7, #24]
 800c630:	f107 0214 	add.w	r2, r7, #20
 800c634:	4611      	mov	r1, r2
 800c636:	4618      	mov	r0, r3
 800c638:	f7ff fd3a 	bl	800c0b0 <MQTTPacket_decodeBuf>
 800c63c:	6278      	str	r0, [r7, #36]	; 0x24
 800c63e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c640:	69bb      	ldr	r3, [r7, #24]
 800c642:	4413      	add	r3, r2
 800c644:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800c646:	69bb      	ldr	r3, [r7, #24]
 800c648:	697a      	ldr	r2, [r7, #20]
 800c64a:	4413      	add	r3, r2
 800c64c:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 800c64e:	69bb      	ldr	r3, [r7, #24]
 800c650:	6a3a      	ldr	r2, [r7, #32]
 800c652:	1ad3      	subs	r3, r2, r3
 800c654:	2b01      	cmp	r3, #1
 800c656:	dd2f      	ble.n	800c6b8 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 800c658:	f107 0318 	add.w	r3, r7, #24
 800c65c:	4618      	mov	r0, r3
 800c65e:	f7ff fd3d 	bl	800c0dc <readInt>
 800c662:	4603      	mov	r3, r0
 800c664:	b29a      	uxth	r2, r3
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	801a      	strh	r2, [r3, #0]

	*count = 0;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2200      	movs	r2, #0
 800c66e:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 800c670:	e019      	b.n	800c6a6 <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	68ba      	ldr	r2, [r7, #8]
 800c678:	429a      	cmp	r2, r3
 800c67a:	da03      	bge.n	800c684 <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 800c67c:	f04f 33ff 	mov.w	r3, #4294967295
 800c680:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 800c682:	e01a      	b.n	800c6ba <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 800c684:	f107 0318 	add.w	r3, r7, #24
 800c688:	4618      	mov	r0, r3
 800c68a:	f7ff fd42 	bl	800c112 <readChar>
 800c68e:	4603      	mov	r3, r0
 800c690:	4618      	mov	r0, r3
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	1c59      	adds	r1, r3, #1
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	6011      	str	r1, [r2, #0]
 800c69c:	009b      	lsls	r3, r3, #2
 800c69e:	683a      	ldr	r2, [r7, #0]
 800c6a0:	4413      	add	r3, r2
 800c6a2:	4602      	mov	r2, r0
 800c6a4:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 800c6a6:	69bb      	ldr	r3, [r7, #24]
 800c6a8:	6a3a      	ldr	r2, [r7, #32]
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	d8e1      	bhi.n	800c672 <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	627b      	str	r3, [r7, #36]	; 0x24
 800c6b2:	e002      	b.n	800c6ba <MQTTDeserialize_suback+0xc4>
		goto exit;
 800c6b4:	bf00      	nop
 800c6b6:	e000      	b.n	800c6ba <MQTTDeserialize_suback+0xc4>
		goto exit;
 800c6b8:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800c6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3728      	adds	r7, #40	; 0x28
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}

0800c6c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b085      	sub	sp, #20
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c6d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c6d6:	2b84      	cmp	r3, #132	; 0x84
 800c6d8:	d005      	beq.n	800c6e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c6da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	4413      	add	r3, r2
 800c6e2:	3303      	adds	r3, #3
 800c6e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3714      	adds	r7, #20
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr

0800c6f4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b083      	sub	sp, #12
 800c6f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6fa:	f3ef 8305 	mrs	r3, IPSR
 800c6fe:	607b      	str	r3, [r7, #4]
  return(result);
 800c700:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c702:	2b00      	cmp	r3, #0
 800c704:	bf14      	ite	ne
 800c706:	2301      	movne	r3, #1
 800c708:	2300      	moveq	r3, #0
 800c70a:	b2db      	uxtb	r3, r3
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	370c      	adds	r7, #12
 800c710:	46bd      	mov	sp, r7
 800c712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c716:	4770      	bx	lr

0800c718 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c71c:	f001 fc74 	bl	800e008 <vTaskStartScheduler>
  
  return osOK;
 800c720:	2300      	movs	r3, #0
}
 800c722:	4618      	mov	r0, r3
 800c724:	bd80      	pop	{r7, pc}

0800c726 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c726:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c728:	b089      	sub	sp, #36	; 0x24
 800c72a:	af04      	add	r7, sp, #16
 800c72c:	6078      	str	r0, [r7, #4]
 800c72e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	695b      	ldr	r3, [r3, #20]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d020      	beq.n	800c77a <osThreadCreate+0x54>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	699b      	ldr	r3, [r3, #24]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d01c      	beq.n	800c77a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	685c      	ldr	r4, [r3, #4]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681d      	ldr	r5, [r3, #0]
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	691e      	ldr	r6, [r3, #16]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c752:	4618      	mov	r0, r3
 800c754:	f7ff ffb6 	bl	800c6c4 <makeFreeRtosPriority>
 800c758:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	695b      	ldr	r3, [r3, #20]
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c762:	9202      	str	r2, [sp, #8]
 800c764:	9301      	str	r3, [sp, #4]
 800c766:	9100      	str	r1, [sp, #0]
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	4632      	mov	r2, r6
 800c76c:	4629      	mov	r1, r5
 800c76e:	4620      	mov	r0, r4
 800c770:	f001 fa78 	bl	800dc64 <xTaskCreateStatic>
 800c774:	4603      	mov	r3, r0
 800c776:	60fb      	str	r3, [r7, #12]
 800c778:	e01c      	b.n	800c7b4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	685c      	ldr	r4, [r3, #4]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c786:	b29e      	uxth	r6, r3
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c78e:	4618      	mov	r0, r3
 800c790:	f7ff ff98 	bl	800c6c4 <makeFreeRtosPriority>
 800c794:	4602      	mov	r2, r0
 800c796:	f107 030c 	add.w	r3, r7, #12
 800c79a:	9301      	str	r3, [sp, #4]
 800c79c:	9200      	str	r2, [sp, #0]
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	4632      	mov	r2, r6
 800c7a2:	4629      	mov	r1, r5
 800c7a4:	4620      	mov	r0, r4
 800c7a6:	f001 faba 	bl	800dd1e <xTaskCreate>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	2b01      	cmp	r3, #1
 800c7ae:	d001      	beq.n	800c7b4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	e000      	b.n	800c7b6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3714      	adds	r7, #20
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c7be <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c7be:	b580      	push	{r7, lr}
 800c7c0:	b084      	sub	sp, #16
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d001      	beq.n	800c7d4 <osDelay+0x16>
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	e000      	b.n	800c7d6 <osDelay+0x18>
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f001 fbe2 	bl	800dfa0 <vTaskDelay>
  
  return osOK;
 800c7dc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3710      	adds	r7, #16
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
	...

0800c7e8 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b086      	sub	sp, #24
 800c7ec:	af02      	add	r7, sp, #8
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800c7fa:	f7ff ff7b 	bl	800c6f4 <inHandlerMode>
 800c7fe:	4603      	mov	r3, r0
 800c800:	2b00      	cmp	r3, #0
 800c802:	d01c      	beq.n	800c83e <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800c804:	6839      	ldr	r1, [r7, #0]
 800c806:	f107 0208 	add.w	r2, r7, #8
 800c80a:	f107 030c 	add.w	r3, r7, #12
 800c80e:	9300      	str	r3, [sp, #0]
 800c810:	4613      	mov	r3, r2
 800c812:	2201      	movs	r2, #1
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f002 fae7 	bl	800ede8 <xTaskGenericNotifyFromISR>
 800c81a:	4603      	mov	r3, r0
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d002      	beq.n	800c826 <osSignalSet+0x3e>
      return 0x80000000;
 800c820:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c824:	e019      	b.n	800c85a <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d015      	beq.n	800c858 <osSignalSet+0x70>
 800c82c:	4b0d      	ldr	r3, [pc, #52]	; (800c864 <osSignalSet+0x7c>)
 800c82e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c832:	601a      	str	r2, [r3, #0]
 800c834:	f3bf 8f4f 	dsb	sy
 800c838:	f3bf 8f6f 	isb	sy
 800c83c:	e00c      	b.n	800c858 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800c83e:	6839      	ldr	r1, [r7, #0]
 800c840:	f107 0308 	add.w	r3, r7, #8
 800c844:	2201      	movs	r2, #1
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f002 fa18 	bl	800ec7c <xTaskGenericNotify>
 800c84c:	4603      	mov	r3, r0
 800c84e:	2b01      	cmp	r3, #1
 800c850:	d002      	beq.n	800c858 <osSignalSet+0x70>
    return 0x80000000;
 800c852:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c856:	e000      	b.n	800c85a <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800c858:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3710      	adds	r7, #16
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
 800c862:	bf00      	nop
 800c864:	e000ed04 	.word	0xe000ed04

0800c868 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800c868:	b590      	push	{r4, r7, lr}
 800c86a:	b089      	sub	sp, #36	; 0x24
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	60b9      	str	r1, [r7, #8]
 800c872:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800c874:	2300      	movs	r3, #0
 800c876:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800c878:	2300      	movs	r3, #0
 800c87a:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c882:	d103      	bne.n	800c88c <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800c884:	f04f 33ff 	mov.w	r3, #4294967295
 800c888:	61fb      	str	r3, [r7, #28]
 800c88a:	e009      	b.n	800c8a0 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d006      	beq.n	800c8a0 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800c896:	69fb      	ldr	r3, [r7, #28]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d101      	bne.n	800c8a0 <osSignalWait+0x38>
      ticks = 1;
 800c89c:	2301      	movs	r3, #1
 800c89e:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800c8a0:	f7ff ff28 	bl	800c6f4 <inHandlerMode>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d002      	beq.n	800c8b0 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800c8aa:	2382      	movs	r3, #130	; 0x82
 800c8ac:	613b      	str	r3, [r7, #16]
 800c8ae:	e01b      	b.n	800c8e8 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800c8b0:	68b9      	ldr	r1, [r7, #8]
 800c8b2:	f107 0310 	add.w	r3, r7, #16
 800c8b6:	1d1a      	adds	r2, r3, #4
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	2000      	movs	r0, #0
 800c8bc:	f002 f984 	bl	800ebc8 <xTaskNotifyWait>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d008      	beq.n	800c8d8 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800c8c6:	69fb      	ldr	r3, [r7, #28]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d102      	bne.n	800c8d2 <osSignalWait+0x6a>
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	613b      	str	r3, [r7, #16]
 800c8d0:	e00a      	b.n	800c8e8 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800c8d2:	2340      	movs	r3, #64	; 0x40
 800c8d4:	613b      	str	r3, [r7, #16]
 800c8d6:	e007      	b.n	800c8e8 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	da02      	bge.n	800c8e4 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800c8de:	2386      	movs	r3, #134	; 0x86
 800c8e0:	613b      	str	r3, [r7, #16]
 800c8e2:	e001      	b.n	800c8e8 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800c8e4:	2308      	movs	r3, #8
 800c8e6:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	461c      	mov	r4, r3
 800c8ec:	f107 0310 	add.w	r3, r7, #16
 800c8f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c8f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c8f8:	68f8      	ldr	r0, [r7, #12]
 800c8fa:	3724      	adds	r7, #36	; 0x24
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd90      	pop	{r4, r7, pc}

0800c900 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c900:	b580      	push	{r7, lr}
 800c902:	b086      	sub	sp, #24
 800c904:	af02      	add	r7, sp, #8
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	685b      	ldr	r3, [r3, #4]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d016      	beq.n	800c940 <osSemaphoreCreate+0x40>
    if (count == 1) {
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	2b01      	cmp	r3, #1
 800c916:	d10a      	bne.n	800c92e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	2203      	movs	r2, #3
 800c91e:	9200      	str	r2, [sp, #0]
 800c920:	2200      	movs	r2, #0
 800c922:	2100      	movs	r1, #0
 800c924:	2001      	movs	r0, #1
 800c926:	f000 faa7 	bl	800ce78 <xQueueGenericCreateStatic>
 800c92a:	4603      	mov	r3, r0
 800c92c:	e023      	b.n	800c976 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 800c92e:	6838      	ldr	r0, [r7, #0]
 800c930:	6839      	ldr	r1, [r7, #0]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	461a      	mov	r2, r3
 800c938:	f000 fb6f 	bl	800d01a <xQueueCreateCountingSemaphoreStatic>
 800c93c:	4603      	mov	r3, r0
 800c93e:	e01a      	b.n	800c976 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	2b01      	cmp	r3, #1
 800c944:	d110      	bne.n	800c968 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 800c946:	2203      	movs	r2, #3
 800c948:	2100      	movs	r1, #0
 800c94a:	2001      	movs	r0, #1
 800c94c:	f000 fb0c 	bl	800cf68 <xQueueGenericCreate>
 800c950:	60f8      	str	r0, [r7, #12]
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d005      	beq.n	800c964 <osSemaphoreCreate+0x64>
 800c958:	2300      	movs	r3, #0
 800c95a:	2200      	movs	r2, #0
 800c95c:	2100      	movs	r1, #0
 800c95e:	68f8      	ldr	r0, [r7, #12]
 800c960:	f000 fbc6 	bl	800d0f0 <xQueueGenericSend>
      return sema;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	e006      	b.n	800c976 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	683a      	ldr	r2, [r7, #0]
 800c96c:	4611      	mov	r1, r2
 800c96e:	4618      	mov	r0, r3
 800c970:	f000 fb8a 	bl	800d088 <xQueueCreateCountingSemaphore>
 800c974:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800c976:	4618      	mov	r0, r3
 800c978:	3710      	adds	r7, #16
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
	...

0800c980 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c98a:	2300      	movs	r3, #0
 800c98c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d101      	bne.n	800c998 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c994:	2380      	movs	r3, #128	; 0x80
 800c996:	e03a      	b.n	800ca0e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c998:	2300      	movs	r3, #0
 800c99a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9a2:	d103      	bne.n	800c9ac <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c9a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c9a8:	60fb      	str	r3, [r7, #12]
 800c9aa:	e009      	b.n	800c9c0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d006      	beq.n	800c9c0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d101      	bne.n	800c9c0 <osSemaphoreWait+0x40>
      ticks = 1;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c9c0:	f7ff fe98 	bl	800c6f4 <inHandlerMode>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d017      	beq.n	800c9fa <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c9ca:	f107 0308 	add.w	r3, r7, #8
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	2100      	movs	r1, #0
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f000 ff9e 	bl	800d914 <xQueueReceiveFromISR>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	2b01      	cmp	r3, #1
 800c9dc:	d001      	beq.n	800c9e2 <osSemaphoreWait+0x62>
      return osErrorOS;
 800c9de:	23ff      	movs	r3, #255	; 0xff
 800c9e0:	e015      	b.n	800ca0e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d011      	beq.n	800ca0c <osSemaphoreWait+0x8c>
 800c9e8:	4b0b      	ldr	r3, [pc, #44]	; (800ca18 <osSemaphoreWait+0x98>)
 800c9ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9ee:	601a      	str	r2, [r3, #0]
 800c9f0:	f3bf 8f4f 	dsb	sy
 800c9f4:	f3bf 8f6f 	isb	sy
 800c9f8:	e008      	b.n	800ca0c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c9fa:	68f9      	ldr	r1, [r7, #12]
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f000 fe7d 	bl	800d6fc <xQueueSemaphoreTake>
 800ca02:	4603      	mov	r3, r0
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	d001      	beq.n	800ca0c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800ca08:	23ff      	movs	r3, #255	; 0xff
 800ca0a:	e000      	b.n	800ca0e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800ca0c:	2300      	movs	r3, #0
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3710      	adds	r7, #16
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	e000ed04 	.word	0xe000ed04

0800ca1c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b084      	sub	sp, #16
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ca24:	2300      	movs	r3, #0
 800ca26:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800ca2c:	f7ff fe62 	bl	800c6f4 <inHandlerMode>
 800ca30:	4603      	mov	r3, r0
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d016      	beq.n	800ca64 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ca36:	f107 0308 	add.w	r3, r7, #8
 800ca3a:	4619      	mov	r1, r3
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f000 fcf0 	bl	800d422 <xQueueGiveFromISR>
 800ca42:	4603      	mov	r3, r0
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d001      	beq.n	800ca4c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800ca48:	23ff      	movs	r3, #255	; 0xff
 800ca4a:	e017      	b.n	800ca7c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d013      	beq.n	800ca7a <osSemaphoreRelease+0x5e>
 800ca52:	4b0c      	ldr	r3, [pc, #48]	; (800ca84 <osSemaphoreRelease+0x68>)
 800ca54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca58:	601a      	str	r2, [r3, #0]
 800ca5a:	f3bf 8f4f 	dsb	sy
 800ca5e:	f3bf 8f6f 	isb	sy
 800ca62:	e00a      	b.n	800ca7a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800ca64:	2300      	movs	r3, #0
 800ca66:	2200      	movs	r2, #0
 800ca68:	2100      	movs	r1, #0
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f000 fb40 	bl	800d0f0 <xQueueGenericSend>
 800ca70:	4603      	mov	r3, r0
 800ca72:	2b01      	cmp	r3, #1
 800ca74:	d001      	beq.n	800ca7a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800ca76:	23ff      	movs	r3, #255	; 0xff
 800ca78:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3710      	adds	r7, #16
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	e000ed04 	.word	0xe000ed04

0800ca88 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ca88:	b590      	push	{r4, r7, lr}
 800ca8a:	b085      	sub	sp, #20
 800ca8c:	af02      	add	r7, sp, #8
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	689b      	ldr	r3, [r3, #8]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d011      	beq.n	800cabe <osMessageCreate+0x36>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	68db      	ldr	r3, [r3, #12]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d00d      	beq.n	800cabe <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6818      	ldr	r0, [r3, #0]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6859      	ldr	r1, [r3, #4]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	689a      	ldr	r2, [r3, #8]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	68db      	ldr	r3, [r3, #12]
 800cab2:	2400      	movs	r4, #0
 800cab4:	9400      	str	r4, [sp, #0]
 800cab6:	f000 f9df 	bl	800ce78 <xQueueGenericCreateStatic>
 800caba:	4603      	mov	r3, r0
 800cabc:	e008      	b.n	800cad0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6818      	ldr	r0, [r3, #0]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	2200      	movs	r2, #0
 800cac8:	4619      	mov	r1, r3
 800caca:	f000 fa4d 	bl	800cf68 <xQueueGenericCreate>
 800cace:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	370c      	adds	r7, #12
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd90      	pop	{r4, r7, pc}

0800cad8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b086      	sub	sp, #24
 800cadc:	af00      	add	r7, sp, #0
 800cade:	60f8      	str	r0, [r7, #12]
 800cae0:	60b9      	str	r1, [r7, #8]
 800cae2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800cae4:	2300      	movs	r3, #0
 800cae6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d101      	bne.n	800caf6 <osMessagePut+0x1e>
    ticks = 1;
 800caf2:	2301      	movs	r3, #1
 800caf4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800caf6:	f7ff fdfd 	bl	800c6f4 <inHandlerMode>
 800cafa:	4603      	mov	r3, r0
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d018      	beq.n	800cb32 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800cb00:	f107 0210 	add.w	r2, r7, #16
 800cb04:	f107 0108 	add.w	r1, r7, #8
 800cb08:	2300      	movs	r3, #0
 800cb0a:	68f8      	ldr	r0, [r7, #12]
 800cb0c:	f000 fbee 	bl	800d2ec <xQueueGenericSendFromISR>
 800cb10:	4603      	mov	r3, r0
 800cb12:	2b01      	cmp	r3, #1
 800cb14:	d001      	beq.n	800cb1a <osMessagePut+0x42>
      return osErrorOS;
 800cb16:	23ff      	movs	r3, #255	; 0xff
 800cb18:	e018      	b.n	800cb4c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d014      	beq.n	800cb4a <osMessagePut+0x72>
 800cb20:	4b0c      	ldr	r3, [pc, #48]	; (800cb54 <osMessagePut+0x7c>)
 800cb22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb26:	601a      	str	r2, [r3, #0]
 800cb28:	f3bf 8f4f 	dsb	sy
 800cb2c:	f3bf 8f6f 	isb	sy
 800cb30:	e00b      	b.n	800cb4a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800cb32:	f107 0108 	add.w	r1, r7, #8
 800cb36:	2300      	movs	r3, #0
 800cb38:	697a      	ldr	r2, [r7, #20]
 800cb3a:	68f8      	ldr	r0, [r7, #12]
 800cb3c:	f000 fad8 	bl	800d0f0 <xQueueGenericSend>
 800cb40:	4603      	mov	r3, r0
 800cb42:	2b01      	cmp	r3, #1
 800cb44:	d001      	beq.n	800cb4a <osMessagePut+0x72>
      return osErrorOS;
 800cb46:	23ff      	movs	r3, #255	; 0xff
 800cb48:	e000      	b.n	800cb4c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800cb4a:	2300      	movs	r3, #0
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3718      	adds	r7, #24
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}
 800cb54:	e000ed04 	.word	0xe000ed04

0800cb58 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800cb58:	b590      	push	{r4, r7, lr}
 800cb5a:	b08b      	sub	sp, #44	; 0x2c
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	60f8      	str	r0, [r7, #12]
 800cb60:	60b9      	str	r1, [r7, #8]
 800cb62:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d10a      	bne.n	800cb88 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800cb72:	2380      	movs	r3, #128	; 0x80
 800cb74:	617b      	str	r3, [r7, #20]
    return event;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	461c      	mov	r4, r3
 800cb7a:	f107 0314 	add.w	r3, r7, #20
 800cb7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cb82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cb86:	e054      	b.n	800cc32 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb96:	d103      	bne.n	800cba0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800cb98:	f04f 33ff 	mov.w	r3, #4294967295
 800cb9c:	627b      	str	r3, [r7, #36]	; 0x24
 800cb9e:	e009      	b.n	800cbb4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d006      	beq.n	800cbb4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800cbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d101      	bne.n	800cbb4 <osMessageGet+0x5c>
      ticks = 1;
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800cbb4:	f7ff fd9e 	bl	800c6f4 <inHandlerMode>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d01c      	beq.n	800cbf8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800cbbe:	f107 0220 	add.w	r2, r7, #32
 800cbc2:	f107 0314 	add.w	r3, r7, #20
 800cbc6:	3304      	adds	r3, #4
 800cbc8:	4619      	mov	r1, r3
 800cbca:	68b8      	ldr	r0, [r7, #8]
 800cbcc:	f000 fea2 	bl	800d914 <xQueueReceiveFromISR>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	2b01      	cmp	r3, #1
 800cbd4:	d102      	bne.n	800cbdc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800cbd6:	2310      	movs	r3, #16
 800cbd8:	617b      	str	r3, [r7, #20]
 800cbda:	e001      	b.n	800cbe0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cbe0:	6a3b      	ldr	r3, [r7, #32]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d01d      	beq.n	800cc22 <osMessageGet+0xca>
 800cbe6:	4b15      	ldr	r3, [pc, #84]	; (800cc3c <osMessageGet+0xe4>)
 800cbe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbec:	601a      	str	r2, [r3, #0]
 800cbee:	f3bf 8f4f 	dsb	sy
 800cbf2:	f3bf 8f6f 	isb	sy
 800cbf6:	e014      	b.n	800cc22 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800cbf8:	f107 0314 	add.w	r3, r7, #20
 800cbfc:	3304      	adds	r3, #4
 800cbfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc00:	4619      	mov	r1, r3
 800cc02:	68b8      	ldr	r0, [r7, #8]
 800cc04:	f000 fc9a 	bl	800d53c <xQueueReceive>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	2b01      	cmp	r3, #1
 800cc0c:	d102      	bne.n	800cc14 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800cc0e:	2310      	movs	r3, #16
 800cc10:	617b      	str	r3, [r7, #20]
 800cc12:	e006      	b.n	800cc22 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800cc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d101      	bne.n	800cc1e <osMessageGet+0xc6>
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	e000      	b.n	800cc20 <osMessageGet+0xc8>
 800cc1e:	2340      	movs	r3, #64	; 0x40
 800cc20:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	461c      	mov	r4, r3
 800cc26:	f107 0314 	add.w	r3, r7, #20
 800cc2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cc2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800cc32:	68f8      	ldr	r0, [r7, #12]
 800cc34:	372c      	adds	r7, #44	; 0x2c
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd90      	pop	{r4, r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	e000ed04 	.word	0xe000ed04

0800cc40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cc40:	b480      	push	{r7}
 800cc42:	b083      	sub	sp, #12
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f103 0208 	add.w	r2, r3, #8
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f04f 32ff 	mov.w	r2, #4294967295
 800cc58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f103 0208 	add.w	r2, r3, #8
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f103 0208 	add.w	r2, r3, #8
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2200      	movs	r2, #0
 800cc72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cc74:	bf00      	nop
 800cc76:	370c      	adds	r7, #12
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr

0800cc80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cc80:	b480      	push	{r7}
 800cc82:	b083      	sub	sp, #12
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cc8e:	bf00      	nop
 800cc90:	370c      	adds	r7, #12
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr

0800cc9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cc9a:	b480      	push	{r7}
 800cc9c:	b085      	sub	sp, #20
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
 800cca2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	685b      	ldr	r3, [r3, #4]
 800cca8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	68fa      	ldr	r2, [r7, #12]
 800ccae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	689a      	ldr	r2, [r3, #8]
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	689b      	ldr	r3, [r3, #8]
 800ccbc:	683a      	ldr	r2, [r7, #0]
 800ccbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	683a      	ldr	r2, [r7, #0]
 800ccc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	1c5a      	adds	r2, r3, #1
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	601a      	str	r2, [r3, #0]
}
 800ccd6:	bf00      	nop
 800ccd8:	3714      	adds	r7, #20
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce0:	4770      	bx	lr

0800cce2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cce2:	b480      	push	{r7}
 800cce4:	b085      	sub	sp, #20
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
 800ccea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccf8:	d103      	bne.n	800cd02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	691b      	ldr	r3, [r3, #16]
 800ccfe:	60fb      	str	r3, [r7, #12]
 800cd00:	e00c      	b.n	800cd1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	3308      	adds	r3, #8
 800cd06:	60fb      	str	r3, [r7, #12]
 800cd08:	e002      	b.n	800cd10 <vListInsert+0x2e>
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	685b      	ldr	r3, [r3, #4]
 800cd0e:	60fb      	str	r3, [r7, #12]
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	68ba      	ldr	r2, [r7, #8]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d2f6      	bcs.n	800cd0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	685a      	ldr	r2, [r3, #4]
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	683a      	ldr	r2, [r7, #0]
 800cd2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	68fa      	ldr	r2, [r7, #12]
 800cd30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	683a      	ldr	r2, [r7, #0]
 800cd36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	1c5a      	adds	r2, r3, #1
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	601a      	str	r2, [r3, #0]
}
 800cd48:	bf00      	nop
 800cd4a:	3714      	adds	r7, #20
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr

0800cd54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cd54:	b480      	push	{r7}
 800cd56:	b085      	sub	sp, #20
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	691b      	ldr	r3, [r3, #16]
 800cd60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	687a      	ldr	r2, [r7, #4]
 800cd68:	6892      	ldr	r2, [r2, #8]
 800cd6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	689b      	ldr	r3, [r3, #8]
 800cd70:	687a      	ldr	r2, [r7, #4]
 800cd72:	6852      	ldr	r2, [r2, #4]
 800cd74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	685b      	ldr	r3, [r3, #4]
 800cd7a:	687a      	ldr	r2, [r7, #4]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d103      	bne.n	800cd88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	689a      	ldr	r2, [r3, #8]
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	1e5a      	subs	r2, r3, #1
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	681b      	ldr	r3, [r3, #0]
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3714      	adds	r7, #20
 800cda0:	46bd      	mov	sp, r7
 800cda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda6:	4770      	bx	lr

0800cda8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b084      	sub	sp, #16
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d10a      	bne.n	800cdd2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cdbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc0:	f383 8811 	msr	BASEPRI, r3
 800cdc4:	f3bf 8f6f 	isb	sy
 800cdc8:	f3bf 8f4f 	dsb	sy
 800cdcc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cdce:	bf00      	nop
 800cdd0:	e7fe      	b.n	800cdd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cdd2:	f002 fa77 	bl	800f2c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681a      	ldr	r2, [r3, #0]
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdde:	68f9      	ldr	r1, [r7, #12]
 800cde0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cde2:	fb01 f303 	mul.w	r3, r1, r3
 800cde6:	441a      	add	r2, r3
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	681a      	ldr	r2, [r3, #0]
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681a      	ldr	r2, [r3, #0]
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce02:	3b01      	subs	r3, #1
 800ce04:	68f9      	ldr	r1, [r7, #12]
 800ce06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce08:	fb01 f303 	mul.w	r3, r1, r3
 800ce0c:	441a      	add	r2, r3
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	22ff      	movs	r2, #255	; 0xff
 800ce16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	22ff      	movs	r2, #255	; 0xff
 800ce1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d114      	bne.n	800ce52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	691b      	ldr	r3, [r3, #16]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d01a      	beq.n	800ce66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	3310      	adds	r3, #16
 800ce34:	4618      	mov	r0, r3
 800ce36:	f001 fb4d 	bl	800e4d4 <xTaskRemoveFromEventList>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d012      	beq.n	800ce66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ce40:	4b0c      	ldr	r3, [pc, #48]	; (800ce74 <xQueueGenericReset+0xcc>)
 800ce42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce46:	601a      	str	r2, [r3, #0]
 800ce48:	f3bf 8f4f 	dsb	sy
 800ce4c:	f3bf 8f6f 	isb	sy
 800ce50:	e009      	b.n	800ce66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	3310      	adds	r3, #16
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7ff fef2 	bl	800cc40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	3324      	adds	r3, #36	; 0x24
 800ce60:	4618      	mov	r0, r3
 800ce62:	f7ff feed 	bl	800cc40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ce66:	f002 fa5d 	bl	800f324 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ce6a:	2301      	movs	r3, #1
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3710      	adds	r7, #16
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	e000ed04 	.word	0xe000ed04

0800ce78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b08e      	sub	sp, #56	; 0x38
 800ce7c:	af02      	add	r7, sp, #8
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	607a      	str	r2, [r7, #4]
 800ce84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d10a      	bne.n	800cea2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ce8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce90:	f383 8811 	msr	BASEPRI, r3
 800ce94:	f3bf 8f6f 	isb	sy
 800ce98:	f3bf 8f4f 	dsb	sy
 800ce9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ce9e:	bf00      	nop
 800cea0:	e7fe      	b.n	800cea0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d10a      	bne.n	800cebe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceac:	f383 8811 	msr	BASEPRI, r3
 800ceb0:	f3bf 8f6f 	isb	sy
 800ceb4:	f3bf 8f4f 	dsb	sy
 800ceb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ceba:	bf00      	nop
 800cebc:	e7fe      	b.n	800cebc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d002      	beq.n	800ceca <xQueueGenericCreateStatic+0x52>
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d001      	beq.n	800cece <xQueueGenericCreateStatic+0x56>
 800ceca:	2301      	movs	r3, #1
 800cecc:	e000      	b.n	800ced0 <xQueueGenericCreateStatic+0x58>
 800cece:	2300      	movs	r3, #0
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d10a      	bne.n	800ceea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ced4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced8:	f383 8811 	msr	BASEPRI, r3
 800cedc:	f3bf 8f6f 	isb	sy
 800cee0:	f3bf 8f4f 	dsb	sy
 800cee4:	623b      	str	r3, [r7, #32]
}
 800cee6:	bf00      	nop
 800cee8:	e7fe      	b.n	800cee8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d102      	bne.n	800cef6 <xQueueGenericCreateStatic+0x7e>
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d101      	bne.n	800cefa <xQueueGenericCreateStatic+0x82>
 800cef6:	2301      	movs	r3, #1
 800cef8:	e000      	b.n	800cefc <xQueueGenericCreateStatic+0x84>
 800cefa:	2300      	movs	r3, #0
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d10a      	bne.n	800cf16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cf00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf04:	f383 8811 	msr	BASEPRI, r3
 800cf08:	f3bf 8f6f 	isb	sy
 800cf0c:	f3bf 8f4f 	dsb	sy
 800cf10:	61fb      	str	r3, [r7, #28]
}
 800cf12:	bf00      	nop
 800cf14:	e7fe      	b.n	800cf14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cf16:	2348      	movs	r3, #72	; 0x48
 800cf18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	2b48      	cmp	r3, #72	; 0x48
 800cf1e:	d00a      	beq.n	800cf36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cf20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf24:	f383 8811 	msr	BASEPRI, r3
 800cf28:	f3bf 8f6f 	isb	sy
 800cf2c:	f3bf 8f4f 	dsb	sy
 800cf30:	61bb      	str	r3, [r7, #24]
}
 800cf32:	bf00      	nop
 800cf34:	e7fe      	b.n	800cf34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cf36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cf3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d00d      	beq.n	800cf5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cf42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf44:	2201      	movs	r2, #1
 800cf46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cf4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cf4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf50:	9300      	str	r3, [sp, #0]
 800cf52:	4613      	mov	r3, r2
 800cf54:	687a      	ldr	r2, [r7, #4]
 800cf56:	68b9      	ldr	r1, [r7, #8]
 800cf58:	68f8      	ldr	r0, [r7, #12]
 800cf5a:	f000 f83f 	bl	800cfdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cf5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3730      	adds	r7, #48	; 0x30
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b08a      	sub	sp, #40	; 0x28
 800cf6c:	af02      	add	r7, sp, #8
 800cf6e:	60f8      	str	r0, [r7, #12]
 800cf70:	60b9      	str	r1, [r7, #8]
 800cf72:	4613      	mov	r3, r2
 800cf74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d10a      	bne.n	800cf92 <xQueueGenericCreate+0x2a>
	__asm volatile
 800cf7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf80:	f383 8811 	msr	BASEPRI, r3
 800cf84:	f3bf 8f6f 	isb	sy
 800cf88:	f3bf 8f4f 	dsb	sy
 800cf8c:	613b      	str	r3, [r7, #16]
}
 800cf8e:	bf00      	nop
 800cf90:	e7fe      	b.n	800cf90 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	68ba      	ldr	r2, [r7, #8]
 800cf96:	fb02 f303 	mul.w	r3, r2, r3
 800cf9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cf9c:	69fb      	ldr	r3, [r7, #28]
 800cf9e:	3348      	adds	r3, #72	; 0x48
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f002 fab1 	bl	800f508 <pvPortMalloc>
 800cfa6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cfa8:	69bb      	ldr	r3, [r7, #24]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d011      	beq.n	800cfd2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	3348      	adds	r3, #72	; 0x48
 800cfb6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cfb8:	69bb      	ldr	r3, [r7, #24]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cfc0:	79fa      	ldrb	r2, [r7, #7]
 800cfc2:	69bb      	ldr	r3, [r7, #24]
 800cfc4:	9300      	str	r3, [sp, #0]
 800cfc6:	4613      	mov	r3, r2
 800cfc8:	697a      	ldr	r2, [r7, #20]
 800cfca:	68b9      	ldr	r1, [r7, #8]
 800cfcc:	68f8      	ldr	r0, [r7, #12]
 800cfce:	f000 f805 	bl	800cfdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cfd2:	69bb      	ldr	r3, [r7, #24]
	}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3720      	adds	r7, #32
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b084      	sub	sp, #16
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	60b9      	str	r1, [r7, #8]
 800cfe6:	607a      	str	r2, [r7, #4]
 800cfe8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d103      	bne.n	800cff8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cff0:	69bb      	ldr	r3, [r7, #24]
 800cff2:	69ba      	ldr	r2, [r7, #24]
 800cff4:	601a      	str	r2, [r3, #0]
 800cff6:	e002      	b.n	800cffe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cff8:	69bb      	ldr	r3, [r7, #24]
 800cffa:	687a      	ldr	r2, [r7, #4]
 800cffc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cffe:	69bb      	ldr	r3, [r7, #24]
 800d000:	68fa      	ldr	r2, [r7, #12]
 800d002:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d004:	69bb      	ldr	r3, [r7, #24]
 800d006:	68ba      	ldr	r2, [r7, #8]
 800d008:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d00a:	2101      	movs	r1, #1
 800d00c:	69b8      	ldr	r0, [r7, #24]
 800d00e:	f7ff fecb 	bl	800cda8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d012:	bf00      	nop
 800d014:	3710      	adds	r7, #16
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}

0800d01a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d01a:	b580      	push	{r7, lr}
 800d01c:	b08a      	sub	sp, #40	; 0x28
 800d01e:	af02      	add	r7, sp, #8
 800d020:	60f8      	str	r0, [r7, #12]
 800d022:	60b9      	str	r1, [r7, #8]
 800d024:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d10a      	bne.n	800d042 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800d02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d030:	f383 8811 	msr	BASEPRI, r3
 800d034:	f3bf 8f6f 	isb	sy
 800d038:	f3bf 8f4f 	dsb	sy
 800d03c:	61bb      	str	r3, [r7, #24]
}
 800d03e:	bf00      	nop
 800d040:	e7fe      	b.n	800d040 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d042:	68ba      	ldr	r2, [r7, #8]
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	429a      	cmp	r2, r3
 800d048:	d90a      	bls.n	800d060 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800d04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d04e:	f383 8811 	msr	BASEPRI, r3
 800d052:	f3bf 8f6f 	isb	sy
 800d056:	f3bf 8f4f 	dsb	sy
 800d05a:	617b      	str	r3, [r7, #20]
}
 800d05c:	bf00      	nop
 800d05e:	e7fe      	b.n	800d05e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d060:	2302      	movs	r3, #2
 800d062:	9300      	str	r3, [sp, #0]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2200      	movs	r2, #0
 800d068:	2100      	movs	r1, #0
 800d06a:	68f8      	ldr	r0, [r7, #12]
 800d06c:	f7ff ff04 	bl	800ce78 <xQueueGenericCreateStatic>
 800d070:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d072:	69fb      	ldr	r3, [r7, #28]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d002      	beq.n	800d07e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d078:	69fb      	ldr	r3, [r7, #28]
 800d07a:	68ba      	ldr	r2, [r7, #8]
 800d07c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d07e:	69fb      	ldr	r3, [r7, #28]
	}
 800d080:	4618      	mov	r0, r3
 800d082:	3720      	adds	r7, #32
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b086      	sub	sp, #24
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d10a      	bne.n	800d0ae <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800d098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d09c:	f383 8811 	msr	BASEPRI, r3
 800d0a0:	f3bf 8f6f 	isb	sy
 800d0a4:	f3bf 8f4f 	dsb	sy
 800d0a8:	613b      	str	r3, [r7, #16]
}
 800d0aa:	bf00      	nop
 800d0ac:	e7fe      	b.n	800d0ac <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d0ae:	683a      	ldr	r2, [r7, #0]
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d90a      	bls.n	800d0cc <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800d0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ba:	f383 8811 	msr	BASEPRI, r3
 800d0be:	f3bf 8f6f 	isb	sy
 800d0c2:	f3bf 8f4f 	dsb	sy
 800d0c6:	60fb      	str	r3, [r7, #12]
}
 800d0c8:	bf00      	nop
 800d0ca:	e7fe      	b.n	800d0ca <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d0cc:	2202      	movs	r2, #2
 800d0ce:	2100      	movs	r1, #0
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f7ff ff49 	bl	800cf68 <xQueueGenericCreate>
 800d0d6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d002      	beq.n	800d0e4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	683a      	ldr	r2, [r7, #0]
 800d0e2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d0e4:	697b      	ldr	r3, [r7, #20]
	}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3718      	adds	r7, #24
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}
	...

0800d0f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b08e      	sub	sp, #56	; 0x38
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	60f8      	str	r0, [r7, #12]
 800d0f8:	60b9      	str	r1, [r7, #8]
 800d0fa:	607a      	str	r2, [r7, #4]
 800d0fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d0fe:	2300      	movs	r3, #0
 800d100:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d10a      	bne.n	800d122 <xQueueGenericSend+0x32>
	__asm volatile
 800d10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d110:	f383 8811 	msr	BASEPRI, r3
 800d114:	f3bf 8f6f 	isb	sy
 800d118:	f3bf 8f4f 	dsb	sy
 800d11c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d11e:	bf00      	nop
 800d120:	e7fe      	b.n	800d120 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d103      	bne.n	800d130 <xQueueGenericSend+0x40>
 800d128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d12a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d101      	bne.n	800d134 <xQueueGenericSend+0x44>
 800d130:	2301      	movs	r3, #1
 800d132:	e000      	b.n	800d136 <xQueueGenericSend+0x46>
 800d134:	2300      	movs	r3, #0
 800d136:	2b00      	cmp	r3, #0
 800d138:	d10a      	bne.n	800d150 <xQueueGenericSend+0x60>
	__asm volatile
 800d13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d13e:	f383 8811 	msr	BASEPRI, r3
 800d142:	f3bf 8f6f 	isb	sy
 800d146:	f3bf 8f4f 	dsb	sy
 800d14a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d14c:	bf00      	nop
 800d14e:	e7fe      	b.n	800d14e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	2b02      	cmp	r3, #2
 800d154:	d103      	bne.n	800d15e <xQueueGenericSend+0x6e>
 800d156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d15a:	2b01      	cmp	r3, #1
 800d15c:	d101      	bne.n	800d162 <xQueueGenericSend+0x72>
 800d15e:	2301      	movs	r3, #1
 800d160:	e000      	b.n	800d164 <xQueueGenericSend+0x74>
 800d162:	2300      	movs	r3, #0
 800d164:	2b00      	cmp	r3, #0
 800d166:	d10a      	bne.n	800d17e <xQueueGenericSend+0x8e>
	__asm volatile
 800d168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d16c:	f383 8811 	msr	BASEPRI, r3
 800d170:	f3bf 8f6f 	isb	sy
 800d174:	f3bf 8f4f 	dsb	sy
 800d178:	623b      	str	r3, [r7, #32]
}
 800d17a:	bf00      	nop
 800d17c:	e7fe      	b.n	800d17c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d17e:	f001 fb67 	bl	800e850 <xTaskGetSchedulerState>
 800d182:	4603      	mov	r3, r0
 800d184:	2b00      	cmp	r3, #0
 800d186:	d102      	bne.n	800d18e <xQueueGenericSend+0x9e>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d101      	bne.n	800d192 <xQueueGenericSend+0xa2>
 800d18e:	2301      	movs	r3, #1
 800d190:	e000      	b.n	800d194 <xQueueGenericSend+0xa4>
 800d192:	2300      	movs	r3, #0
 800d194:	2b00      	cmp	r3, #0
 800d196:	d10a      	bne.n	800d1ae <xQueueGenericSend+0xbe>
	__asm volatile
 800d198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d19c:	f383 8811 	msr	BASEPRI, r3
 800d1a0:	f3bf 8f6f 	isb	sy
 800d1a4:	f3bf 8f4f 	dsb	sy
 800d1a8:	61fb      	str	r3, [r7, #28]
}
 800d1aa:	bf00      	nop
 800d1ac:	e7fe      	b.n	800d1ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1ae:	f002 f889 	bl	800f2c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d302      	bcc.n	800d1c4 <xQueueGenericSend+0xd4>
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	2b02      	cmp	r3, #2
 800d1c2:	d129      	bne.n	800d218 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d1c4:	683a      	ldr	r2, [r7, #0]
 800d1c6:	68b9      	ldr	r1, [r7, #8]
 800d1c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1ca:	f000 fc3b 	bl	800da44 <prvCopyDataToQueue>
 800d1ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d010      	beq.n	800d1fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1da:	3324      	adds	r3, #36	; 0x24
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f001 f979 	bl	800e4d4 <xTaskRemoveFromEventList>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d013      	beq.n	800d210 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d1e8:	4b3f      	ldr	r3, [pc, #252]	; (800d2e8 <xQueueGenericSend+0x1f8>)
 800d1ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1ee:	601a      	str	r2, [r3, #0]
 800d1f0:	f3bf 8f4f 	dsb	sy
 800d1f4:	f3bf 8f6f 	isb	sy
 800d1f8:	e00a      	b.n	800d210 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d007      	beq.n	800d210 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d200:	4b39      	ldr	r3, [pc, #228]	; (800d2e8 <xQueueGenericSend+0x1f8>)
 800d202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d206:	601a      	str	r2, [r3, #0]
 800d208:	f3bf 8f4f 	dsb	sy
 800d20c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d210:	f002 f888 	bl	800f324 <vPortExitCritical>
				return pdPASS;
 800d214:	2301      	movs	r3, #1
 800d216:	e063      	b.n	800d2e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d103      	bne.n	800d226 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d21e:	f002 f881 	bl	800f324 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d222:	2300      	movs	r3, #0
 800d224:	e05c      	b.n	800d2e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d106      	bne.n	800d23a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d22c:	f107 0314 	add.w	r3, r7, #20
 800d230:	4618      	mov	r0, r3
 800d232:	f001 f9b1 	bl	800e598 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d236:	2301      	movs	r3, #1
 800d238:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d23a:	f002 f873 	bl	800f324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d23e:	f000 ff43 	bl	800e0c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d242:	f002 f83f 	bl	800f2c4 <vPortEnterCritical>
 800d246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d248:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d24c:	b25b      	sxtb	r3, r3
 800d24e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d252:	d103      	bne.n	800d25c <xQueueGenericSend+0x16c>
 800d254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d256:	2200      	movs	r2, #0
 800d258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d262:	b25b      	sxtb	r3, r3
 800d264:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d268:	d103      	bne.n	800d272 <xQueueGenericSend+0x182>
 800d26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d26c:	2200      	movs	r2, #0
 800d26e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d272:	f002 f857 	bl	800f324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d276:	1d3a      	adds	r2, r7, #4
 800d278:	f107 0314 	add.w	r3, r7, #20
 800d27c:	4611      	mov	r1, r2
 800d27e:	4618      	mov	r0, r3
 800d280:	f001 f9a0 	bl	800e5c4 <xTaskCheckForTimeOut>
 800d284:	4603      	mov	r3, r0
 800d286:	2b00      	cmp	r3, #0
 800d288:	d124      	bne.n	800d2d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d28a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d28c:	f000 fcd2 	bl	800dc34 <prvIsQueueFull>
 800d290:	4603      	mov	r3, r0
 800d292:	2b00      	cmp	r3, #0
 800d294:	d018      	beq.n	800d2c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d298:	3310      	adds	r3, #16
 800d29a:	687a      	ldr	r2, [r7, #4]
 800d29c:	4611      	mov	r1, r2
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f001 f8f4 	bl	800e48c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d2a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2a6:	f000 fc5d 	bl	800db64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d2aa:	f000 ff1b 	bl	800e0e4 <xTaskResumeAll>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	f47f af7c 	bne.w	800d1ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d2b6:	4b0c      	ldr	r3, [pc, #48]	; (800d2e8 <xQueueGenericSend+0x1f8>)
 800d2b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2bc:	601a      	str	r2, [r3, #0]
 800d2be:	f3bf 8f4f 	dsb	sy
 800d2c2:	f3bf 8f6f 	isb	sy
 800d2c6:	e772      	b.n	800d1ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d2c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2ca:	f000 fc4b 	bl	800db64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2ce:	f000 ff09 	bl	800e0e4 <xTaskResumeAll>
 800d2d2:	e76c      	b.n	800d1ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d2d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2d6:	f000 fc45 	bl	800db64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d2da:	f000 ff03 	bl	800e0e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d2de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3738      	adds	r7, #56	; 0x38
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}
 800d2e8:	e000ed04 	.word	0xe000ed04

0800d2ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b090      	sub	sp, #64	; 0x40
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	60f8      	str	r0, [r7, #12]
 800d2f4:	60b9      	str	r1, [r7, #8]
 800d2f6:	607a      	str	r2, [r7, #4]
 800d2f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d300:	2b00      	cmp	r3, #0
 800d302:	d10a      	bne.n	800d31a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d308:	f383 8811 	msr	BASEPRI, r3
 800d30c:	f3bf 8f6f 	isb	sy
 800d310:	f3bf 8f4f 	dsb	sy
 800d314:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d316:	bf00      	nop
 800d318:	e7fe      	b.n	800d318 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d103      	bne.n	800d328 <xQueueGenericSendFromISR+0x3c>
 800d320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d324:	2b00      	cmp	r3, #0
 800d326:	d101      	bne.n	800d32c <xQueueGenericSendFromISR+0x40>
 800d328:	2301      	movs	r3, #1
 800d32a:	e000      	b.n	800d32e <xQueueGenericSendFromISR+0x42>
 800d32c:	2300      	movs	r3, #0
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d10a      	bne.n	800d348 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d336:	f383 8811 	msr	BASEPRI, r3
 800d33a:	f3bf 8f6f 	isb	sy
 800d33e:	f3bf 8f4f 	dsb	sy
 800d342:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d344:	bf00      	nop
 800d346:	e7fe      	b.n	800d346 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	2b02      	cmp	r3, #2
 800d34c:	d103      	bne.n	800d356 <xQueueGenericSendFromISR+0x6a>
 800d34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d352:	2b01      	cmp	r3, #1
 800d354:	d101      	bne.n	800d35a <xQueueGenericSendFromISR+0x6e>
 800d356:	2301      	movs	r3, #1
 800d358:	e000      	b.n	800d35c <xQueueGenericSendFromISR+0x70>
 800d35a:	2300      	movs	r3, #0
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d10a      	bne.n	800d376 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d364:	f383 8811 	msr	BASEPRI, r3
 800d368:	f3bf 8f6f 	isb	sy
 800d36c:	f3bf 8f4f 	dsb	sy
 800d370:	623b      	str	r3, [r7, #32]
}
 800d372:	bf00      	nop
 800d374:	e7fe      	b.n	800d374 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d376:	f002 f887 	bl	800f488 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d37a:	f3ef 8211 	mrs	r2, BASEPRI
 800d37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d382:	f383 8811 	msr	BASEPRI, r3
 800d386:	f3bf 8f6f 	isb	sy
 800d38a:	f3bf 8f4f 	dsb	sy
 800d38e:	61fa      	str	r2, [r7, #28]
 800d390:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d392:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d394:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d39c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d302      	bcc.n	800d3a8 <xQueueGenericSendFromISR+0xbc>
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	2b02      	cmp	r3, #2
 800d3a6:	d12f      	bne.n	800d408 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d3b8:	683a      	ldr	r2, [r7, #0]
 800d3ba:	68b9      	ldr	r1, [r7, #8]
 800d3bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d3be:	f000 fb41 	bl	800da44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d3c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ca:	d112      	bne.n	800d3f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d016      	beq.n	800d402 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d6:	3324      	adds	r3, #36	; 0x24
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f001 f87b 	bl	800e4d4 <xTaskRemoveFromEventList>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d00e      	beq.n	800d402 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d00b      	beq.n	800d402 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	601a      	str	r2, [r3, #0]
 800d3f0:	e007      	b.n	800d402 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d3f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	b2db      	uxtb	r3, r3
 800d3fa:	b25a      	sxtb	r2, r3
 800d3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d402:	2301      	movs	r3, #1
 800d404:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d406:	e001      	b.n	800d40c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d408:	2300      	movs	r3, #0
 800d40a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d40e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d416:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3740      	adds	r7, #64	; 0x40
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}

0800d422 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d422:	b580      	push	{r7, lr}
 800d424:	b08e      	sub	sp, #56	; 0x38
 800d426:	af00      	add	r7, sp, #0
 800d428:	6078      	str	r0, [r7, #4]
 800d42a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d432:	2b00      	cmp	r3, #0
 800d434:	d10a      	bne.n	800d44c <xQueueGiveFromISR+0x2a>
	__asm volatile
 800d436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43a:	f383 8811 	msr	BASEPRI, r3
 800d43e:	f3bf 8f6f 	isb	sy
 800d442:	f3bf 8f4f 	dsb	sy
 800d446:	623b      	str	r3, [r7, #32]
}
 800d448:	bf00      	nop
 800d44a:	e7fe      	b.n	800d44a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d44e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d450:	2b00      	cmp	r3, #0
 800d452:	d00a      	beq.n	800d46a <xQueueGiveFromISR+0x48>
	__asm volatile
 800d454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d458:	f383 8811 	msr	BASEPRI, r3
 800d45c:	f3bf 8f6f 	isb	sy
 800d460:	f3bf 8f4f 	dsb	sy
 800d464:	61fb      	str	r3, [r7, #28]
}
 800d466:	bf00      	nop
 800d468:	e7fe      	b.n	800d468 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d103      	bne.n	800d47a <xQueueGiveFromISR+0x58>
 800d472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d474:	689b      	ldr	r3, [r3, #8]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d101      	bne.n	800d47e <xQueueGiveFromISR+0x5c>
 800d47a:	2301      	movs	r3, #1
 800d47c:	e000      	b.n	800d480 <xQueueGiveFromISR+0x5e>
 800d47e:	2300      	movs	r3, #0
 800d480:	2b00      	cmp	r3, #0
 800d482:	d10a      	bne.n	800d49a <xQueueGiveFromISR+0x78>
	__asm volatile
 800d484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d488:	f383 8811 	msr	BASEPRI, r3
 800d48c:	f3bf 8f6f 	isb	sy
 800d490:	f3bf 8f4f 	dsb	sy
 800d494:	61bb      	str	r3, [r7, #24]
}
 800d496:	bf00      	nop
 800d498:	e7fe      	b.n	800d498 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d49a:	f001 fff5 	bl	800f488 <vPortValidateInterruptPriority>
	__asm volatile
 800d49e:	f3ef 8211 	mrs	r2, BASEPRI
 800d4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a6:	f383 8811 	msr	BASEPRI, r3
 800d4aa:	f3bf 8f6f 	isb	sy
 800d4ae:	f3bf 8f4f 	dsb	sy
 800d4b2:	617a      	str	r2, [r7, #20]
 800d4b4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d4b6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d4b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	d22b      	bcs.n	800d522 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d6:	1c5a      	adds	r2, r3, #1
 800d4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4da:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d4dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d4e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4e4:	d112      	bne.n	800d50c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d016      	beq.n	800d51c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f0:	3324      	adds	r3, #36	; 0x24
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f000 ffee 	bl	800e4d4 <xTaskRemoveFromEventList>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d00e      	beq.n	800d51c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d00b      	beq.n	800d51c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	2201      	movs	r2, #1
 800d508:	601a      	str	r2, [r3, #0]
 800d50a:	e007      	b.n	800d51c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d50c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d510:	3301      	adds	r3, #1
 800d512:	b2db      	uxtb	r3, r3
 800d514:	b25a      	sxtb	r2, r3
 800d516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d51c:	2301      	movs	r3, #1
 800d51e:	637b      	str	r3, [r7, #52]	; 0x34
 800d520:	e001      	b.n	800d526 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d522:	2300      	movs	r3, #0
 800d524:	637b      	str	r3, [r7, #52]	; 0x34
 800d526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d528:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	f383 8811 	msr	BASEPRI, r3
}
 800d530:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d534:	4618      	mov	r0, r3
 800d536:	3738      	adds	r7, #56	; 0x38
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}

0800d53c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b08c      	sub	sp, #48	; 0x30
 800d540:	af00      	add	r7, sp, #0
 800d542:	60f8      	str	r0, [r7, #12]
 800d544:	60b9      	str	r1, [r7, #8]
 800d546:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d548:	2300      	movs	r3, #0
 800d54a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d552:	2b00      	cmp	r3, #0
 800d554:	d10a      	bne.n	800d56c <xQueueReceive+0x30>
	__asm volatile
 800d556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d55a:	f383 8811 	msr	BASEPRI, r3
 800d55e:	f3bf 8f6f 	isb	sy
 800d562:	f3bf 8f4f 	dsb	sy
 800d566:	623b      	str	r3, [r7, #32]
}
 800d568:	bf00      	nop
 800d56a:	e7fe      	b.n	800d56a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d103      	bne.n	800d57a <xQueueReceive+0x3e>
 800d572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d576:	2b00      	cmp	r3, #0
 800d578:	d101      	bne.n	800d57e <xQueueReceive+0x42>
 800d57a:	2301      	movs	r3, #1
 800d57c:	e000      	b.n	800d580 <xQueueReceive+0x44>
 800d57e:	2300      	movs	r3, #0
 800d580:	2b00      	cmp	r3, #0
 800d582:	d10a      	bne.n	800d59a <xQueueReceive+0x5e>
	__asm volatile
 800d584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d588:	f383 8811 	msr	BASEPRI, r3
 800d58c:	f3bf 8f6f 	isb	sy
 800d590:	f3bf 8f4f 	dsb	sy
 800d594:	61fb      	str	r3, [r7, #28]
}
 800d596:	bf00      	nop
 800d598:	e7fe      	b.n	800d598 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d59a:	f001 f959 	bl	800e850 <xTaskGetSchedulerState>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d102      	bne.n	800d5aa <xQueueReceive+0x6e>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d101      	bne.n	800d5ae <xQueueReceive+0x72>
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e000      	b.n	800d5b0 <xQueueReceive+0x74>
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d10a      	bne.n	800d5ca <xQueueReceive+0x8e>
	__asm volatile
 800d5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b8:	f383 8811 	msr	BASEPRI, r3
 800d5bc:	f3bf 8f6f 	isb	sy
 800d5c0:	f3bf 8f4f 	dsb	sy
 800d5c4:	61bb      	str	r3, [r7, #24]
}
 800d5c6:	bf00      	nop
 800d5c8:	e7fe      	b.n	800d5c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d5ca:	f001 fe7b 	bl	800f2c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d01f      	beq.n	800d61a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d5da:	68b9      	ldr	r1, [r7, #8]
 800d5dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5de:	f000 fa9b 	bl	800db18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e4:	1e5a      	subs	r2, r3, #1
 800d5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ec:	691b      	ldr	r3, [r3, #16]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d00f      	beq.n	800d612 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f4:	3310      	adds	r3, #16
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f000 ff6c 	bl	800e4d4 <xTaskRemoveFromEventList>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d007      	beq.n	800d612 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d602:	4b3d      	ldr	r3, [pc, #244]	; (800d6f8 <xQueueReceive+0x1bc>)
 800d604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d608:	601a      	str	r2, [r3, #0]
 800d60a:	f3bf 8f4f 	dsb	sy
 800d60e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d612:	f001 fe87 	bl	800f324 <vPortExitCritical>
				return pdPASS;
 800d616:	2301      	movs	r3, #1
 800d618:	e069      	b.n	800d6ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d103      	bne.n	800d628 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d620:	f001 fe80 	bl	800f324 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d624:	2300      	movs	r3, #0
 800d626:	e062      	b.n	800d6ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d106      	bne.n	800d63c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d62e:	f107 0310 	add.w	r3, r7, #16
 800d632:	4618      	mov	r0, r3
 800d634:	f000 ffb0 	bl	800e598 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d638:	2301      	movs	r3, #1
 800d63a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d63c:	f001 fe72 	bl	800f324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d640:	f000 fd42 	bl	800e0c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d644:	f001 fe3e 	bl	800f2c4 <vPortEnterCritical>
 800d648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d64a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d64e:	b25b      	sxtb	r3, r3
 800d650:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d654:	d103      	bne.n	800d65e <xQueueReceive+0x122>
 800d656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d658:	2200      	movs	r2, #0
 800d65a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d660:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d664:	b25b      	sxtb	r3, r3
 800d666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d66a:	d103      	bne.n	800d674 <xQueueReceive+0x138>
 800d66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d66e:	2200      	movs	r2, #0
 800d670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d674:	f001 fe56 	bl	800f324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d678:	1d3a      	adds	r2, r7, #4
 800d67a:	f107 0310 	add.w	r3, r7, #16
 800d67e:	4611      	mov	r1, r2
 800d680:	4618      	mov	r0, r3
 800d682:	f000 ff9f 	bl	800e5c4 <xTaskCheckForTimeOut>
 800d686:	4603      	mov	r3, r0
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d123      	bne.n	800d6d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d68c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d68e:	f000 fabb 	bl	800dc08 <prvIsQueueEmpty>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d017      	beq.n	800d6c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d69a:	3324      	adds	r3, #36	; 0x24
 800d69c:	687a      	ldr	r2, [r7, #4]
 800d69e:	4611      	mov	r1, r2
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f000 fef3 	bl	800e48c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d6a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6a8:	f000 fa5c 	bl	800db64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d6ac:	f000 fd1a 	bl	800e0e4 <xTaskResumeAll>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d189      	bne.n	800d5ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d6b6:	4b10      	ldr	r3, [pc, #64]	; (800d6f8 <xQueueReceive+0x1bc>)
 800d6b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6bc:	601a      	str	r2, [r3, #0]
 800d6be:	f3bf 8f4f 	dsb	sy
 800d6c2:	f3bf 8f6f 	isb	sy
 800d6c6:	e780      	b.n	800d5ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d6c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6ca:	f000 fa4b 	bl	800db64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d6ce:	f000 fd09 	bl	800e0e4 <xTaskResumeAll>
 800d6d2:	e77a      	b.n	800d5ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d6d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6d6:	f000 fa45 	bl	800db64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d6da:	f000 fd03 	bl	800e0e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d6de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6e0:	f000 fa92 	bl	800dc08 <prvIsQueueEmpty>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	f43f af6f 	beq.w	800d5ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d6ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3730      	adds	r7, #48	; 0x30
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}
 800d6f6:	bf00      	nop
 800d6f8:	e000ed04 	.word	0xe000ed04

0800d6fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b08e      	sub	sp, #56	; 0x38
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d706:	2300      	movs	r3, #0
 800d708:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d70e:	2300      	movs	r3, #0
 800d710:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d714:	2b00      	cmp	r3, #0
 800d716:	d10a      	bne.n	800d72e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71c:	f383 8811 	msr	BASEPRI, r3
 800d720:	f3bf 8f6f 	isb	sy
 800d724:	f3bf 8f4f 	dsb	sy
 800d728:	623b      	str	r3, [r7, #32]
}
 800d72a:	bf00      	nop
 800d72c:	e7fe      	b.n	800d72c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d732:	2b00      	cmp	r3, #0
 800d734:	d00a      	beq.n	800d74c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d73a:	f383 8811 	msr	BASEPRI, r3
 800d73e:	f3bf 8f6f 	isb	sy
 800d742:	f3bf 8f4f 	dsb	sy
 800d746:	61fb      	str	r3, [r7, #28]
}
 800d748:	bf00      	nop
 800d74a:	e7fe      	b.n	800d74a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d74c:	f001 f880 	bl	800e850 <xTaskGetSchedulerState>
 800d750:	4603      	mov	r3, r0
 800d752:	2b00      	cmp	r3, #0
 800d754:	d102      	bne.n	800d75c <xQueueSemaphoreTake+0x60>
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d101      	bne.n	800d760 <xQueueSemaphoreTake+0x64>
 800d75c:	2301      	movs	r3, #1
 800d75e:	e000      	b.n	800d762 <xQueueSemaphoreTake+0x66>
 800d760:	2300      	movs	r3, #0
 800d762:	2b00      	cmp	r3, #0
 800d764:	d10a      	bne.n	800d77c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d76a:	f383 8811 	msr	BASEPRI, r3
 800d76e:	f3bf 8f6f 	isb	sy
 800d772:	f3bf 8f4f 	dsb	sy
 800d776:	61bb      	str	r3, [r7, #24]
}
 800d778:	bf00      	nop
 800d77a:	e7fe      	b.n	800d77a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d77c:	f001 fda2 	bl	800f2c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d784:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d024      	beq.n	800d7d6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d78e:	1e5a      	subs	r2, r3, #1
 800d790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d792:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d104      	bne.n	800d7a6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d79c:	f001 fa00 	bl	800eba0 <pvTaskIncrementMutexHeldCount>
 800d7a0:	4602      	mov	r2, r0
 800d7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a8:	691b      	ldr	r3, [r3, #16]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d00f      	beq.n	800d7ce <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b0:	3310      	adds	r3, #16
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f000 fe8e 	bl	800e4d4 <xTaskRemoveFromEventList>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d007      	beq.n	800d7ce <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d7be:	4b54      	ldr	r3, [pc, #336]	; (800d910 <xQueueSemaphoreTake+0x214>)
 800d7c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7c4:	601a      	str	r2, [r3, #0]
 800d7c6:	f3bf 8f4f 	dsb	sy
 800d7ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d7ce:	f001 fda9 	bl	800f324 <vPortExitCritical>
				return pdPASS;
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	e097      	b.n	800d906 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d111      	bne.n	800d800 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d00a      	beq.n	800d7f8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e6:	f383 8811 	msr	BASEPRI, r3
 800d7ea:	f3bf 8f6f 	isb	sy
 800d7ee:	f3bf 8f4f 	dsb	sy
 800d7f2:	617b      	str	r3, [r7, #20]
}
 800d7f4:	bf00      	nop
 800d7f6:	e7fe      	b.n	800d7f6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d7f8:	f001 fd94 	bl	800f324 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	e082      	b.n	800d906 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d802:	2b00      	cmp	r3, #0
 800d804:	d106      	bne.n	800d814 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d806:	f107 030c 	add.w	r3, r7, #12
 800d80a:	4618      	mov	r0, r3
 800d80c:	f000 fec4 	bl	800e598 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d810:	2301      	movs	r3, #1
 800d812:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d814:	f001 fd86 	bl	800f324 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d818:	f000 fc56 	bl	800e0c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d81c:	f001 fd52 	bl	800f2c4 <vPortEnterCritical>
 800d820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d822:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d826:	b25b      	sxtb	r3, r3
 800d828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d82c:	d103      	bne.n	800d836 <xQueueSemaphoreTake+0x13a>
 800d82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d830:	2200      	movs	r2, #0
 800d832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d838:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d83c:	b25b      	sxtb	r3, r3
 800d83e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d842:	d103      	bne.n	800d84c <xQueueSemaphoreTake+0x150>
 800d844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d846:	2200      	movs	r2, #0
 800d848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d84c:	f001 fd6a 	bl	800f324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d850:	463a      	mov	r2, r7
 800d852:	f107 030c 	add.w	r3, r7, #12
 800d856:	4611      	mov	r1, r2
 800d858:	4618      	mov	r0, r3
 800d85a:	f000 feb3 	bl	800e5c4 <xTaskCheckForTimeOut>
 800d85e:	4603      	mov	r3, r0
 800d860:	2b00      	cmp	r3, #0
 800d862:	d132      	bne.n	800d8ca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d864:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d866:	f000 f9cf 	bl	800dc08 <prvIsQueueEmpty>
 800d86a:	4603      	mov	r3, r0
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d026      	beq.n	800d8be <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d109      	bne.n	800d88c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d878:	f001 fd24 	bl	800f2c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d87e:	689b      	ldr	r3, [r3, #8]
 800d880:	4618      	mov	r0, r3
 800d882:	f001 f803 	bl	800e88c <xTaskPriorityInherit>
 800d886:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d888:	f001 fd4c 	bl	800f324 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d88e:	3324      	adds	r3, #36	; 0x24
 800d890:	683a      	ldr	r2, [r7, #0]
 800d892:	4611      	mov	r1, r2
 800d894:	4618      	mov	r0, r3
 800d896:	f000 fdf9 	bl	800e48c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d89a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d89c:	f000 f962 	bl	800db64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d8a0:	f000 fc20 	bl	800e0e4 <xTaskResumeAll>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	f47f af68 	bne.w	800d77c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d8ac:	4b18      	ldr	r3, [pc, #96]	; (800d910 <xQueueSemaphoreTake+0x214>)
 800d8ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8b2:	601a      	str	r2, [r3, #0]
 800d8b4:	f3bf 8f4f 	dsb	sy
 800d8b8:	f3bf 8f6f 	isb	sy
 800d8bc:	e75e      	b.n	800d77c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d8be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8c0:	f000 f950 	bl	800db64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d8c4:	f000 fc0e 	bl	800e0e4 <xTaskResumeAll>
 800d8c8:	e758      	b.n	800d77c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d8ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8cc:	f000 f94a 	bl	800db64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d8d0:	f000 fc08 	bl	800e0e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d8d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8d6:	f000 f997 	bl	800dc08 <prvIsQueueEmpty>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	f43f af4d 	beq.w	800d77c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d00d      	beq.n	800d904 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d8e8:	f001 fcec 	bl	800f2c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d8ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8ee:	f000 f891 	bl	800da14 <prvGetDisinheritPriorityAfterTimeout>
 800d8f2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f6:	689b      	ldr	r3, [r3, #8]
 800d8f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f001 f8c2 	bl	800ea84 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d900:	f001 fd10 	bl	800f324 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d904:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d906:	4618      	mov	r0, r3
 800d908:	3738      	adds	r7, #56	; 0x38
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
 800d90e:	bf00      	nop
 800d910:	e000ed04 	.word	0xe000ed04

0800d914 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b08e      	sub	sp, #56	; 0x38
 800d918:	af00      	add	r7, sp, #0
 800d91a:	60f8      	str	r0, [r7, #12]
 800d91c:	60b9      	str	r1, [r7, #8]
 800d91e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d926:	2b00      	cmp	r3, #0
 800d928:	d10a      	bne.n	800d940 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92e:	f383 8811 	msr	BASEPRI, r3
 800d932:	f3bf 8f6f 	isb	sy
 800d936:	f3bf 8f4f 	dsb	sy
 800d93a:	623b      	str	r3, [r7, #32]
}
 800d93c:	bf00      	nop
 800d93e:	e7fe      	b.n	800d93e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d103      	bne.n	800d94e <xQueueReceiveFromISR+0x3a>
 800d946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d101      	bne.n	800d952 <xQueueReceiveFromISR+0x3e>
 800d94e:	2301      	movs	r3, #1
 800d950:	e000      	b.n	800d954 <xQueueReceiveFromISR+0x40>
 800d952:	2300      	movs	r3, #0
 800d954:	2b00      	cmp	r3, #0
 800d956:	d10a      	bne.n	800d96e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d95c:	f383 8811 	msr	BASEPRI, r3
 800d960:	f3bf 8f6f 	isb	sy
 800d964:	f3bf 8f4f 	dsb	sy
 800d968:	61fb      	str	r3, [r7, #28]
}
 800d96a:	bf00      	nop
 800d96c:	e7fe      	b.n	800d96c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d96e:	f001 fd8b 	bl	800f488 <vPortValidateInterruptPriority>
	__asm volatile
 800d972:	f3ef 8211 	mrs	r2, BASEPRI
 800d976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d97a:	f383 8811 	msr	BASEPRI, r3
 800d97e:	f3bf 8f6f 	isb	sy
 800d982:	f3bf 8f4f 	dsb	sy
 800d986:	61ba      	str	r2, [r7, #24]
 800d988:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d98a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d98c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d992:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d996:	2b00      	cmp	r3, #0
 800d998:	d02f      	beq.n	800d9fa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d99c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d9a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d9a4:	68b9      	ldr	r1, [r7, #8]
 800d9a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9a8:	f000 f8b6 	bl	800db18 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ae:	1e5a      	subs	r2, r3, #1
 800d9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d9b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d9b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9bc:	d112      	bne.n	800d9e4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c0:	691b      	ldr	r3, [r3, #16]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d016      	beq.n	800d9f4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c8:	3310      	adds	r3, #16
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f000 fd82 	bl	800e4d4 <xTaskRemoveFromEventList>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d00e      	beq.n	800d9f4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d00b      	beq.n	800d9f4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2201      	movs	r2, #1
 800d9e0:	601a      	str	r2, [r3, #0]
 800d9e2:	e007      	b.n	800d9f4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d9e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9e8:	3301      	adds	r3, #1
 800d9ea:	b2db      	uxtb	r3, r3
 800d9ec:	b25a      	sxtb	r2, r3
 800d9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	637b      	str	r3, [r7, #52]	; 0x34
 800d9f8:	e001      	b.n	800d9fe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	637b      	str	r3, [r7, #52]	; 0x34
 800d9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da00:	613b      	str	r3, [r7, #16]
	__asm volatile
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	f383 8811 	msr	BASEPRI, r3
}
 800da08:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800da0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3738      	adds	r7, #56	; 0x38
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800da14:	b480      	push	{r7}
 800da16:	b085      	sub	sp, #20
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da20:	2b00      	cmp	r3, #0
 800da22:	d006      	beq.n	800da32 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f1c3 0307 	rsb	r3, r3, #7
 800da2e:	60fb      	str	r3, [r7, #12]
 800da30:	e001      	b.n	800da36 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800da32:	2300      	movs	r3, #0
 800da34:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800da36:	68fb      	ldr	r3, [r7, #12]
	}
 800da38:	4618      	mov	r0, r3
 800da3a:	3714      	adds	r7, #20
 800da3c:	46bd      	mov	sp, r7
 800da3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da42:	4770      	bx	lr

0800da44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b086      	sub	sp, #24
 800da48:	af00      	add	r7, sp, #0
 800da4a:	60f8      	str	r0, [r7, #12]
 800da4c:	60b9      	str	r1, [r7, #8]
 800da4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800da50:	2300      	movs	r3, #0
 800da52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d10d      	bne.n	800da7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d14d      	bne.n	800db06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	689b      	ldr	r3, [r3, #8]
 800da6e:	4618      	mov	r0, r3
 800da70:	f000 ff82 	bl	800e978 <xTaskPriorityDisinherit>
 800da74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	2200      	movs	r2, #0
 800da7a:	609a      	str	r2, [r3, #8]
 800da7c:	e043      	b.n	800db06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d119      	bne.n	800dab8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	6858      	ldr	r0, [r3, #4]
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da8c:	461a      	mov	r2, r3
 800da8e:	68b9      	ldr	r1, [r7, #8]
 800da90:	f019 f94a 	bl	8026d28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	685a      	ldr	r2, [r3, #4]
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da9c:	441a      	add	r2, r3
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	685a      	ldr	r2, [r3, #4]
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	689b      	ldr	r3, [r3, #8]
 800daaa:	429a      	cmp	r2, r3
 800daac:	d32b      	bcc.n	800db06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	681a      	ldr	r2, [r3, #0]
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	605a      	str	r2, [r3, #4]
 800dab6:	e026      	b.n	800db06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	68d8      	ldr	r0, [r3, #12]
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dac0:	461a      	mov	r2, r3
 800dac2:	68b9      	ldr	r1, [r7, #8]
 800dac4:	f019 f930 	bl	8026d28 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	68da      	ldr	r2, [r3, #12]
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dad0:	425b      	negs	r3, r3
 800dad2:	441a      	add	r2, r3
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	68da      	ldr	r2, [r3, #12]
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d207      	bcs.n	800daf4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	689a      	ldr	r2, [r3, #8]
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daec:	425b      	negs	r3, r3
 800daee:	441a      	add	r2, r3
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2b02      	cmp	r3, #2
 800daf8:	d105      	bne.n	800db06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d002      	beq.n	800db06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	3b01      	subs	r3, #1
 800db04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800db06:	693b      	ldr	r3, [r7, #16]
 800db08:	1c5a      	adds	r2, r3, #1
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800db0e:	697b      	ldr	r3, [r7, #20]
}
 800db10:	4618      	mov	r0, r3
 800db12:	3718      	adds	r7, #24
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}

0800db18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db26:	2b00      	cmp	r3, #0
 800db28:	d018      	beq.n	800db5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	68da      	ldr	r2, [r3, #12]
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db32:	441a      	add	r2, r3
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	68da      	ldr	r2, [r3, #12]
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	689b      	ldr	r3, [r3, #8]
 800db40:	429a      	cmp	r2, r3
 800db42:	d303      	bcc.n	800db4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681a      	ldr	r2, [r3, #0]
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	68d9      	ldr	r1, [r3, #12]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db54:	461a      	mov	r2, r3
 800db56:	6838      	ldr	r0, [r7, #0]
 800db58:	f019 f8e6 	bl	8026d28 <memcpy>
	}
}
 800db5c:	bf00      	nop
 800db5e:	3708      	adds	r7, #8
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b084      	sub	sp, #16
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800db6c:	f001 fbaa 	bl	800f2c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800db78:	e011      	b.n	800db9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d012      	beq.n	800dba8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	3324      	adds	r3, #36	; 0x24
 800db86:	4618      	mov	r0, r3
 800db88:	f000 fca4 	bl	800e4d4 <xTaskRemoveFromEventList>
 800db8c:	4603      	mov	r3, r0
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d001      	beq.n	800db96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800db92:	f000 fd79 	bl	800e688 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800db96:	7bfb      	ldrb	r3, [r7, #15]
 800db98:	3b01      	subs	r3, #1
 800db9a:	b2db      	uxtb	r3, r3
 800db9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800db9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	dce9      	bgt.n	800db7a <prvUnlockQueue+0x16>
 800dba6:	e000      	b.n	800dbaa <prvUnlockQueue+0x46>
					break;
 800dba8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	22ff      	movs	r2, #255	; 0xff
 800dbae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dbb2:	f001 fbb7 	bl	800f324 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dbb6:	f001 fb85 	bl	800f2c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dbc0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dbc2:	e011      	b.n	800dbe8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	691b      	ldr	r3, [r3, #16]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d012      	beq.n	800dbf2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	3310      	adds	r3, #16
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f000 fc7f 	bl	800e4d4 <xTaskRemoveFromEventList>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d001      	beq.n	800dbe0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dbdc:	f000 fd54 	bl	800e688 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dbe0:	7bbb      	ldrb	r3, [r7, #14]
 800dbe2:	3b01      	subs	r3, #1
 800dbe4:	b2db      	uxtb	r3, r3
 800dbe6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dbe8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	dce9      	bgt.n	800dbc4 <prvUnlockQueue+0x60>
 800dbf0:	e000      	b.n	800dbf4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dbf2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	22ff      	movs	r2, #255	; 0xff
 800dbf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dbfc:	f001 fb92 	bl	800f324 <vPortExitCritical>
}
 800dc00:	bf00      	nop
 800dc02:	3710      	adds	r7, #16
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b084      	sub	sp, #16
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc10:	f001 fb58 	bl	800f2c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d102      	bne.n	800dc22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	60fb      	str	r3, [r7, #12]
 800dc20:	e001      	b.n	800dc26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dc22:	2300      	movs	r3, #0
 800dc24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dc26:	f001 fb7d 	bl	800f324 <vPortExitCritical>

	return xReturn;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3710      	adds	r7, #16
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b084      	sub	sp, #16
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc3c:	f001 fb42 	bl	800f2c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d102      	bne.n	800dc52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	60fb      	str	r3, [r7, #12]
 800dc50:	e001      	b.n	800dc56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dc52:	2300      	movs	r3, #0
 800dc54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dc56:	f001 fb65 	bl	800f324 <vPortExitCritical>

	return xReturn;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3710      	adds	r7, #16
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b08e      	sub	sp, #56	; 0x38
 800dc68:	af04      	add	r7, sp, #16
 800dc6a:	60f8      	str	r0, [r7, #12]
 800dc6c:	60b9      	str	r1, [r7, #8]
 800dc6e:	607a      	str	r2, [r7, #4]
 800dc70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dc72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d10a      	bne.n	800dc8e <xTaskCreateStatic+0x2a>
	__asm volatile
 800dc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc7c:	f383 8811 	msr	BASEPRI, r3
 800dc80:	f3bf 8f6f 	isb	sy
 800dc84:	f3bf 8f4f 	dsb	sy
 800dc88:	623b      	str	r3, [r7, #32]
}
 800dc8a:	bf00      	nop
 800dc8c:	e7fe      	b.n	800dc8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d10a      	bne.n	800dcaa <xTaskCreateStatic+0x46>
	__asm volatile
 800dc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc98:	f383 8811 	msr	BASEPRI, r3
 800dc9c:	f3bf 8f6f 	isb	sy
 800dca0:	f3bf 8f4f 	dsb	sy
 800dca4:	61fb      	str	r3, [r7, #28]
}
 800dca6:	bf00      	nop
 800dca8:	e7fe      	b.n	800dca8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dcaa:	2358      	movs	r3, #88	; 0x58
 800dcac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	2b58      	cmp	r3, #88	; 0x58
 800dcb2:	d00a      	beq.n	800dcca <xTaskCreateStatic+0x66>
	__asm volatile
 800dcb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb8:	f383 8811 	msr	BASEPRI, r3
 800dcbc:	f3bf 8f6f 	isb	sy
 800dcc0:	f3bf 8f4f 	dsb	sy
 800dcc4:	61bb      	str	r3, [r7, #24]
}
 800dcc6:	bf00      	nop
 800dcc8:	e7fe      	b.n	800dcc8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dcca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d01e      	beq.n	800dd10 <xTaskCreateStatic+0xac>
 800dcd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d01b      	beq.n	800dd10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dcd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcda:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dcdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dce0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce4:	2202      	movs	r2, #2
 800dce6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dcea:	2300      	movs	r3, #0
 800dcec:	9303      	str	r3, [sp, #12]
 800dcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf0:	9302      	str	r3, [sp, #8]
 800dcf2:	f107 0314 	add.w	r3, r7, #20
 800dcf6:	9301      	str	r3, [sp, #4]
 800dcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfa:	9300      	str	r3, [sp, #0]
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	687a      	ldr	r2, [r7, #4]
 800dd00:	68b9      	ldr	r1, [r7, #8]
 800dd02:	68f8      	ldr	r0, [r7, #12]
 800dd04:	f000 f850 	bl	800dda8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dd08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd0a:	f000 f8df 	bl	800decc <prvAddNewTaskToReadyList>
 800dd0e:	e001      	b.n	800dd14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800dd10:	2300      	movs	r3, #0
 800dd12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dd14:	697b      	ldr	r3, [r7, #20]
	}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3728      	adds	r7, #40	; 0x28
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}

0800dd1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dd1e:	b580      	push	{r7, lr}
 800dd20:	b08c      	sub	sp, #48	; 0x30
 800dd22:	af04      	add	r7, sp, #16
 800dd24:	60f8      	str	r0, [r7, #12]
 800dd26:	60b9      	str	r1, [r7, #8]
 800dd28:	603b      	str	r3, [r7, #0]
 800dd2a:	4613      	mov	r3, r2
 800dd2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dd2e:	88fb      	ldrh	r3, [r7, #6]
 800dd30:	009b      	lsls	r3, r3, #2
 800dd32:	4618      	mov	r0, r3
 800dd34:	f001 fbe8 	bl	800f508 <pvPortMalloc>
 800dd38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d00e      	beq.n	800dd5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dd40:	2058      	movs	r0, #88	; 0x58
 800dd42:	f001 fbe1 	bl	800f508 <pvPortMalloc>
 800dd46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dd48:	69fb      	ldr	r3, [r7, #28]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d003      	beq.n	800dd56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dd4e:	69fb      	ldr	r3, [r7, #28]
 800dd50:	697a      	ldr	r2, [r7, #20]
 800dd52:	631a      	str	r2, [r3, #48]	; 0x30
 800dd54:	e005      	b.n	800dd62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dd56:	6978      	ldr	r0, [r7, #20]
 800dd58:	f001 fca6 	bl	800f6a8 <vPortFree>
 800dd5c:	e001      	b.n	800dd62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dd62:	69fb      	ldr	r3, [r7, #28]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d017      	beq.n	800dd98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dd68:	69fb      	ldr	r3, [r7, #28]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dd70:	88fa      	ldrh	r2, [r7, #6]
 800dd72:	2300      	movs	r3, #0
 800dd74:	9303      	str	r3, [sp, #12]
 800dd76:	69fb      	ldr	r3, [r7, #28]
 800dd78:	9302      	str	r3, [sp, #8]
 800dd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd7c:	9301      	str	r3, [sp, #4]
 800dd7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd80:	9300      	str	r3, [sp, #0]
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	68b9      	ldr	r1, [r7, #8]
 800dd86:	68f8      	ldr	r0, [r7, #12]
 800dd88:	f000 f80e 	bl	800dda8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dd8c:	69f8      	ldr	r0, [r7, #28]
 800dd8e:	f000 f89d 	bl	800decc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dd92:	2301      	movs	r3, #1
 800dd94:	61bb      	str	r3, [r7, #24]
 800dd96:	e002      	b.n	800dd9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dd98:	f04f 33ff 	mov.w	r3, #4294967295
 800dd9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dd9e:	69bb      	ldr	r3, [r7, #24]
	}
 800dda0:	4618      	mov	r0, r3
 800dda2:	3720      	adds	r7, #32
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b088      	sub	sp, #32
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	60f8      	str	r0, [r7, #12]
 800ddb0:	60b9      	str	r1, [r7, #8]
 800ddb2:	607a      	str	r2, [r7, #4]
 800ddb4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ddb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	009b      	lsls	r3, r3, #2
 800ddbe:	461a      	mov	r2, r3
 800ddc0:	21a5      	movs	r1, #165	; 0xa5
 800ddc2:	f018 ffd9 	bl	8026d78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ddc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ddd0:	3b01      	subs	r3, #1
 800ddd2:	009b      	lsls	r3, r3, #2
 800ddd4:	4413      	add	r3, r2
 800ddd6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ddd8:	69bb      	ldr	r3, [r7, #24]
 800ddda:	f023 0307 	bic.w	r3, r3, #7
 800ddde:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dde0:	69bb      	ldr	r3, [r7, #24]
 800dde2:	f003 0307 	and.w	r3, r3, #7
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d00a      	beq.n	800de00 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ddea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddee:	f383 8811 	msr	BASEPRI, r3
 800ddf2:	f3bf 8f6f 	isb	sy
 800ddf6:	f3bf 8f4f 	dsb	sy
 800ddfa:	617b      	str	r3, [r7, #20]
}
 800ddfc:	bf00      	nop
 800ddfe:	e7fe      	b.n	800ddfe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d01f      	beq.n	800de46 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800de06:	2300      	movs	r3, #0
 800de08:	61fb      	str	r3, [r7, #28]
 800de0a:	e012      	b.n	800de32 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800de0c:	68ba      	ldr	r2, [r7, #8]
 800de0e:	69fb      	ldr	r3, [r7, #28]
 800de10:	4413      	add	r3, r2
 800de12:	7819      	ldrb	r1, [r3, #0]
 800de14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de16:	69fb      	ldr	r3, [r7, #28]
 800de18:	4413      	add	r3, r2
 800de1a:	3334      	adds	r3, #52	; 0x34
 800de1c:	460a      	mov	r2, r1
 800de1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800de20:	68ba      	ldr	r2, [r7, #8]
 800de22:	69fb      	ldr	r3, [r7, #28]
 800de24:	4413      	add	r3, r2
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d006      	beq.n	800de3a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800de2c:	69fb      	ldr	r3, [r7, #28]
 800de2e:	3301      	adds	r3, #1
 800de30:	61fb      	str	r3, [r7, #28]
 800de32:	69fb      	ldr	r3, [r7, #28]
 800de34:	2b0f      	cmp	r3, #15
 800de36:	d9e9      	bls.n	800de0c <prvInitialiseNewTask+0x64>
 800de38:	e000      	b.n	800de3c <prvInitialiseNewTask+0x94>
			{
				break;
 800de3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800de3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de3e:	2200      	movs	r2, #0
 800de40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800de44:	e003      	b.n	800de4e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800de46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de48:	2200      	movs	r2, #0
 800de4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800de4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de50:	2b06      	cmp	r3, #6
 800de52:	d901      	bls.n	800de58 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800de54:	2306      	movs	r3, #6
 800de56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800de58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800de5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de62:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800de64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de66:	2200      	movs	r2, #0
 800de68:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800de6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de6c:	3304      	adds	r3, #4
 800de6e:	4618      	mov	r0, r3
 800de70:	f7fe ff06 	bl	800cc80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800de74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de76:	3318      	adds	r3, #24
 800de78:	4618      	mov	r0, r3
 800de7a:	f7fe ff01 	bl	800cc80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800de7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de86:	f1c3 0207 	rsb	r2, r3, #7
 800de8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800de8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800de94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de96:	2200      	movs	r2, #0
 800de98:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800de9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de9c:	2200      	movs	r2, #0
 800de9e:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dea2:	2200      	movs	r2, #0
 800dea4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dea8:	683a      	ldr	r2, [r7, #0]
 800deaa:	68f9      	ldr	r1, [r7, #12]
 800deac:	69b8      	ldr	r0, [r7, #24]
 800deae:	f001 f8db 	bl	800f068 <pxPortInitialiseStack>
 800deb2:	4602      	mov	r2, r0
 800deb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deb6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800deb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deba:	2b00      	cmp	r3, #0
 800debc:	d002      	beq.n	800dec4 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800debe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dec2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dec4:	bf00      	nop
 800dec6:	3720      	adds	r7, #32
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}

0800decc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ded4:	f001 f9f6 	bl	800f2c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ded8:	4b2a      	ldr	r3, [pc, #168]	; (800df84 <prvAddNewTaskToReadyList+0xb8>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	3301      	adds	r3, #1
 800dede:	4a29      	ldr	r2, [pc, #164]	; (800df84 <prvAddNewTaskToReadyList+0xb8>)
 800dee0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dee2:	4b29      	ldr	r3, [pc, #164]	; (800df88 <prvAddNewTaskToReadyList+0xbc>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d109      	bne.n	800defe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800deea:	4a27      	ldr	r2, [pc, #156]	; (800df88 <prvAddNewTaskToReadyList+0xbc>)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800def0:	4b24      	ldr	r3, [pc, #144]	; (800df84 <prvAddNewTaskToReadyList+0xb8>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	2b01      	cmp	r3, #1
 800def6:	d110      	bne.n	800df1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800def8:	f000 fbec 	bl	800e6d4 <prvInitialiseTaskLists>
 800defc:	e00d      	b.n	800df1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800defe:	4b23      	ldr	r3, [pc, #140]	; (800df8c <prvAddNewTaskToReadyList+0xc0>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d109      	bne.n	800df1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800df06:	4b20      	ldr	r3, [pc, #128]	; (800df88 <prvAddNewTaskToReadyList+0xbc>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df10:	429a      	cmp	r2, r3
 800df12:	d802      	bhi.n	800df1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800df14:	4a1c      	ldr	r2, [pc, #112]	; (800df88 <prvAddNewTaskToReadyList+0xbc>)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800df1a:	4b1d      	ldr	r3, [pc, #116]	; (800df90 <prvAddNewTaskToReadyList+0xc4>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	3301      	adds	r3, #1
 800df20:	4a1b      	ldr	r2, [pc, #108]	; (800df90 <prvAddNewTaskToReadyList+0xc4>)
 800df22:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df28:	2201      	movs	r2, #1
 800df2a:	409a      	lsls	r2, r3
 800df2c:	4b19      	ldr	r3, [pc, #100]	; (800df94 <prvAddNewTaskToReadyList+0xc8>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	4313      	orrs	r3, r2
 800df32:	4a18      	ldr	r2, [pc, #96]	; (800df94 <prvAddNewTaskToReadyList+0xc8>)
 800df34:	6013      	str	r3, [r2, #0]
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df3a:	4613      	mov	r3, r2
 800df3c:	009b      	lsls	r3, r3, #2
 800df3e:	4413      	add	r3, r2
 800df40:	009b      	lsls	r3, r3, #2
 800df42:	4a15      	ldr	r2, [pc, #84]	; (800df98 <prvAddNewTaskToReadyList+0xcc>)
 800df44:	441a      	add	r2, r3
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	3304      	adds	r3, #4
 800df4a:	4619      	mov	r1, r3
 800df4c:	4610      	mov	r0, r2
 800df4e:	f7fe fea4 	bl	800cc9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800df52:	f001 f9e7 	bl	800f324 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800df56:	4b0d      	ldr	r3, [pc, #52]	; (800df8c <prvAddNewTaskToReadyList+0xc0>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d00e      	beq.n	800df7c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800df5e:	4b0a      	ldr	r3, [pc, #40]	; (800df88 <prvAddNewTaskToReadyList+0xbc>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df68:	429a      	cmp	r2, r3
 800df6a:	d207      	bcs.n	800df7c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800df6c:	4b0b      	ldr	r3, [pc, #44]	; (800df9c <prvAddNewTaskToReadyList+0xd0>)
 800df6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df72:	601a      	str	r2, [r3, #0]
 800df74:	f3bf 8f4f 	dsb	sy
 800df78:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df7c:	bf00      	nop
 800df7e:	3708      	adds	r7, #8
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}
 800df84:	20000e04 	.word	0x20000e04
 800df88:	20000d04 	.word	0x20000d04
 800df8c:	20000e10 	.word	0x20000e10
 800df90:	20000e20 	.word	0x20000e20
 800df94:	20000e0c 	.word	0x20000e0c
 800df98:	20000d08 	.word	0x20000d08
 800df9c:	e000ed04 	.word	0xe000ed04

0800dfa0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b084      	sub	sp, #16
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d017      	beq.n	800dfe2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dfb2:	4b13      	ldr	r3, [pc, #76]	; (800e000 <vTaskDelay+0x60>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d00a      	beq.n	800dfd0 <vTaskDelay+0x30>
	__asm volatile
 800dfba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfbe:	f383 8811 	msr	BASEPRI, r3
 800dfc2:	f3bf 8f6f 	isb	sy
 800dfc6:	f3bf 8f4f 	dsb	sy
 800dfca:	60bb      	str	r3, [r7, #8]
}
 800dfcc:	bf00      	nop
 800dfce:	e7fe      	b.n	800dfce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dfd0:	f000 f87a 	bl	800e0c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dfd4:	2100      	movs	r1, #0
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f000 ffe0 	bl	800ef9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dfdc:	f000 f882 	bl	800e0e4 <xTaskResumeAll>
 800dfe0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d107      	bne.n	800dff8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dfe8:	4b06      	ldr	r3, [pc, #24]	; (800e004 <vTaskDelay+0x64>)
 800dfea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfee:	601a      	str	r2, [r3, #0]
 800dff0:	f3bf 8f4f 	dsb	sy
 800dff4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dff8:	bf00      	nop
 800dffa:	3710      	adds	r7, #16
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}
 800e000:	20000e2c 	.word	0x20000e2c
 800e004:	e000ed04 	.word	0xe000ed04

0800e008 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b08a      	sub	sp, #40	; 0x28
 800e00c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e00e:	2300      	movs	r3, #0
 800e010:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e012:	2300      	movs	r3, #0
 800e014:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e016:	463a      	mov	r2, r7
 800e018:	1d39      	adds	r1, r7, #4
 800e01a:	f107 0308 	add.w	r3, r7, #8
 800e01e:	4618      	mov	r0, r3
 800e020:	f7f5 fdf8 	bl	8003c14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e024:	6839      	ldr	r1, [r7, #0]
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	68ba      	ldr	r2, [r7, #8]
 800e02a:	9202      	str	r2, [sp, #8]
 800e02c:	9301      	str	r3, [sp, #4]
 800e02e:	2300      	movs	r3, #0
 800e030:	9300      	str	r3, [sp, #0]
 800e032:	2300      	movs	r3, #0
 800e034:	460a      	mov	r2, r1
 800e036:	491e      	ldr	r1, [pc, #120]	; (800e0b0 <vTaskStartScheduler+0xa8>)
 800e038:	481e      	ldr	r0, [pc, #120]	; (800e0b4 <vTaskStartScheduler+0xac>)
 800e03a:	f7ff fe13 	bl	800dc64 <xTaskCreateStatic>
 800e03e:	4603      	mov	r3, r0
 800e040:	4a1d      	ldr	r2, [pc, #116]	; (800e0b8 <vTaskStartScheduler+0xb0>)
 800e042:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e044:	4b1c      	ldr	r3, [pc, #112]	; (800e0b8 <vTaskStartScheduler+0xb0>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d002      	beq.n	800e052 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e04c:	2301      	movs	r3, #1
 800e04e:	617b      	str	r3, [r7, #20]
 800e050:	e001      	b.n	800e056 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e052:	2300      	movs	r3, #0
 800e054:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	2b01      	cmp	r3, #1
 800e05a:	d116      	bne.n	800e08a <vTaskStartScheduler+0x82>
	__asm volatile
 800e05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e060:	f383 8811 	msr	BASEPRI, r3
 800e064:	f3bf 8f6f 	isb	sy
 800e068:	f3bf 8f4f 	dsb	sy
 800e06c:	613b      	str	r3, [r7, #16]
}
 800e06e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e070:	4b12      	ldr	r3, [pc, #72]	; (800e0bc <vTaskStartScheduler+0xb4>)
 800e072:	f04f 32ff 	mov.w	r2, #4294967295
 800e076:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e078:	4b11      	ldr	r3, [pc, #68]	; (800e0c0 <vTaskStartScheduler+0xb8>)
 800e07a:	2201      	movs	r2, #1
 800e07c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e07e:	4b11      	ldr	r3, [pc, #68]	; (800e0c4 <vTaskStartScheduler+0xbc>)
 800e080:	2200      	movs	r2, #0
 800e082:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e084:	f001 f87c 	bl	800f180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e088:	e00e      	b.n	800e0a8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e090:	d10a      	bne.n	800e0a8 <vTaskStartScheduler+0xa0>
	__asm volatile
 800e092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e096:	f383 8811 	msr	BASEPRI, r3
 800e09a:	f3bf 8f6f 	isb	sy
 800e09e:	f3bf 8f4f 	dsb	sy
 800e0a2:	60fb      	str	r3, [r7, #12]
}
 800e0a4:	bf00      	nop
 800e0a6:	e7fe      	b.n	800e0a6 <vTaskStartScheduler+0x9e>
}
 800e0a8:	bf00      	nop
 800e0aa:	3718      	adds	r7, #24
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}
 800e0b0:	08029514 	.word	0x08029514
 800e0b4:	0800e6a1 	.word	0x0800e6a1
 800e0b8:	20000e28 	.word	0x20000e28
 800e0bc:	20000e24 	.word	0x20000e24
 800e0c0:	20000e10 	.word	0x20000e10
 800e0c4:	20000e08 	.word	0x20000e08

0800e0c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e0c8:	b480      	push	{r7}
 800e0ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e0cc:	4b04      	ldr	r3, [pc, #16]	; (800e0e0 <vTaskSuspendAll+0x18>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	3301      	adds	r3, #1
 800e0d2:	4a03      	ldr	r2, [pc, #12]	; (800e0e0 <vTaskSuspendAll+0x18>)
 800e0d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e0d6:	bf00      	nop
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0de:	4770      	bx	lr
 800e0e0:	20000e2c 	.word	0x20000e2c

0800e0e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b084      	sub	sp, #16
 800e0e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e0f2:	4b41      	ldr	r3, [pc, #260]	; (800e1f8 <xTaskResumeAll+0x114>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d10a      	bne.n	800e110 <xTaskResumeAll+0x2c>
	__asm volatile
 800e0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0fe:	f383 8811 	msr	BASEPRI, r3
 800e102:	f3bf 8f6f 	isb	sy
 800e106:	f3bf 8f4f 	dsb	sy
 800e10a:	603b      	str	r3, [r7, #0]
}
 800e10c:	bf00      	nop
 800e10e:	e7fe      	b.n	800e10e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e110:	f001 f8d8 	bl	800f2c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e114:	4b38      	ldr	r3, [pc, #224]	; (800e1f8 <xTaskResumeAll+0x114>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	3b01      	subs	r3, #1
 800e11a:	4a37      	ldr	r2, [pc, #220]	; (800e1f8 <xTaskResumeAll+0x114>)
 800e11c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e11e:	4b36      	ldr	r3, [pc, #216]	; (800e1f8 <xTaskResumeAll+0x114>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d161      	bne.n	800e1ea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e126:	4b35      	ldr	r3, [pc, #212]	; (800e1fc <xTaskResumeAll+0x118>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d05d      	beq.n	800e1ea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e12e:	e02e      	b.n	800e18e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e130:	4b33      	ldr	r3, [pc, #204]	; (800e200 <xTaskResumeAll+0x11c>)
 800e132:	68db      	ldr	r3, [r3, #12]
 800e134:	68db      	ldr	r3, [r3, #12]
 800e136:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	3318      	adds	r3, #24
 800e13c:	4618      	mov	r0, r3
 800e13e:	f7fe fe09 	bl	800cd54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	3304      	adds	r3, #4
 800e146:	4618      	mov	r0, r3
 800e148:	f7fe fe04 	bl	800cd54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e150:	2201      	movs	r2, #1
 800e152:	409a      	lsls	r2, r3
 800e154:	4b2b      	ldr	r3, [pc, #172]	; (800e204 <xTaskResumeAll+0x120>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	4313      	orrs	r3, r2
 800e15a:	4a2a      	ldr	r2, [pc, #168]	; (800e204 <xTaskResumeAll+0x120>)
 800e15c:	6013      	str	r3, [r2, #0]
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e162:	4613      	mov	r3, r2
 800e164:	009b      	lsls	r3, r3, #2
 800e166:	4413      	add	r3, r2
 800e168:	009b      	lsls	r3, r3, #2
 800e16a:	4a27      	ldr	r2, [pc, #156]	; (800e208 <xTaskResumeAll+0x124>)
 800e16c:	441a      	add	r2, r3
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	3304      	adds	r3, #4
 800e172:	4619      	mov	r1, r3
 800e174:	4610      	mov	r0, r2
 800e176:	f7fe fd90 	bl	800cc9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e17e:	4b23      	ldr	r3, [pc, #140]	; (800e20c <xTaskResumeAll+0x128>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e184:	429a      	cmp	r2, r3
 800e186:	d302      	bcc.n	800e18e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e188:	4b21      	ldr	r3, [pc, #132]	; (800e210 <xTaskResumeAll+0x12c>)
 800e18a:	2201      	movs	r2, #1
 800e18c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e18e:	4b1c      	ldr	r3, [pc, #112]	; (800e200 <xTaskResumeAll+0x11c>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d1cc      	bne.n	800e130 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d001      	beq.n	800e1a0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e19c:	f000 fb38 	bl	800e810 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e1a0:	4b1c      	ldr	r3, [pc, #112]	; (800e214 <xTaskResumeAll+0x130>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d010      	beq.n	800e1ce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e1ac:	f000 f836 	bl	800e21c <xTaskIncrementTick>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d002      	beq.n	800e1bc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e1b6:	4b16      	ldr	r3, [pc, #88]	; (800e210 <xTaskResumeAll+0x12c>)
 800e1b8:	2201      	movs	r2, #1
 800e1ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	3b01      	subs	r3, #1
 800e1c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d1f1      	bne.n	800e1ac <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800e1c8:	4b12      	ldr	r3, [pc, #72]	; (800e214 <xTaskResumeAll+0x130>)
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e1ce:	4b10      	ldr	r3, [pc, #64]	; (800e210 <xTaskResumeAll+0x12c>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d009      	beq.n	800e1ea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e1da:	4b0f      	ldr	r3, [pc, #60]	; (800e218 <xTaskResumeAll+0x134>)
 800e1dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1e0:	601a      	str	r2, [r3, #0]
 800e1e2:	f3bf 8f4f 	dsb	sy
 800e1e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e1ea:	f001 f89b 	bl	800f324 <vPortExitCritical>

	return xAlreadyYielded;
 800e1ee:	68bb      	ldr	r3, [r7, #8]
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3710      	adds	r7, #16
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}
 800e1f8:	20000e2c 	.word	0x20000e2c
 800e1fc:	20000e04 	.word	0x20000e04
 800e200:	20000dc4 	.word	0x20000dc4
 800e204:	20000e0c 	.word	0x20000e0c
 800e208:	20000d08 	.word	0x20000d08
 800e20c:	20000d04 	.word	0x20000d04
 800e210:	20000e18 	.word	0x20000e18
 800e214:	20000e14 	.word	0x20000e14
 800e218:	e000ed04 	.word	0xe000ed04

0800e21c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b086      	sub	sp, #24
 800e220:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e222:	2300      	movs	r3, #0
 800e224:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e226:	4b4e      	ldr	r3, [pc, #312]	; (800e360 <xTaskIncrementTick+0x144>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	f040 808e 	bne.w	800e34c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e230:	4b4c      	ldr	r3, [pc, #304]	; (800e364 <xTaskIncrementTick+0x148>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	3301      	adds	r3, #1
 800e236:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e238:	4a4a      	ldr	r2, [pc, #296]	; (800e364 <xTaskIncrementTick+0x148>)
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d120      	bne.n	800e286 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e244:	4b48      	ldr	r3, [pc, #288]	; (800e368 <xTaskIncrementTick+0x14c>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d00a      	beq.n	800e264 <xTaskIncrementTick+0x48>
	__asm volatile
 800e24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e252:	f383 8811 	msr	BASEPRI, r3
 800e256:	f3bf 8f6f 	isb	sy
 800e25a:	f3bf 8f4f 	dsb	sy
 800e25e:	603b      	str	r3, [r7, #0]
}
 800e260:	bf00      	nop
 800e262:	e7fe      	b.n	800e262 <xTaskIncrementTick+0x46>
 800e264:	4b40      	ldr	r3, [pc, #256]	; (800e368 <xTaskIncrementTick+0x14c>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	60fb      	str	r3, [r7, #12]
 800e26a:	4b40      	ldr	r3, [pc, #256]	; (800e36c <xTaskIncrementTick+0x150>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	4a3e      	ldr	r2, [pc, #248]	; (800e368 <xTaskIncrementTick+0x14c>)
 800e270:	6013      	str	r3, [r2, #0]
 800e272:	4a3e      	ldr	r2, [pc, #248]	; (800e36c <xTaskIncrementTick+0x150>)
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	6013      	str	r3, [r2, #0]
 800e278:	4b3d      	ldr	r3, [pc, #244]	; (800e370 <xTaskIncrementTick+0x154>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	3301      	adds	r3, #1
 800e27e:	4a3c      	ldr	r2, [pc, #240]	; (800e370 <xTaskIncrementTick+0x154>)
 800e280:	6013      	str	r3, [r2, #0]
 800e282:	f000 fac5 	bl	800e810 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e286:	4b3b      	ldr	r3, [pc, #236]	; (800e374 <xTaskIncrementTick+0x158>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	693a      	ldr	r2, [r7, #16]
 800e28c:	429a      	cmp	r2, r3
 800e28e:	d348      	bcc.n	800e322 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e290:	4b35      	ldr	r3, [pc, #212]	; (800e368 <xTaskIncrementTick+0x14c>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d104      	bne.n	800e2a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e29a:	4b36      	ldr	r3, [pc, #216]	; (800e374 <xTaskIncrementTick+0x158>)
 800e29c:	f04f 32ff 	mov.w	r2, #4294967295
 800e2a0:	601a      	str	r2, [r3, #0]
					break;
 800e2a2:	e03e      	b.n	800e322 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2a4:	4b30      	ldr	r3, [pc, #192]	; (800e368 <xTaskIncrementTick+0x14c>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	68db      	ldr	r3, [r3, #12]
 800e2aa:	68db      	ldr	r3, [r3, #12]
 800e2ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	685b      	ldr	r3, [r3, #4]
 800e2b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e2b4:	693a      	ldr	r2, [r7, #16]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	429a      	cmp	r2, r3
 800e2ba:	d203      	bcs.n	800e2c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e2bc:	4a2d      	ldr	r2, [pc, #180]	; (800e374 <xTaskIncrementTick+0x158>)
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e2c2:	e02e      	b.n	800e322 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2c4:	68bb      	ldr	r3, [r7, #8]
 800e2c6:	3304      	adds	r3, #4
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f7fe fd43 	bl	800cd54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d004      	beq.n	800e2e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	3318      	adds	r3, #24
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f7fe fd3a 	bl	800cd54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	409a      	lsls	r2, r3
 800e2e8:	4b23      	ldr	r3, [pc, #140]	; (800e378 <xTaskIncrementTick+0x15c>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	4313      	orrs	r3, r2
 800e2ee:	4a22      	ldr	r2, [pc, #136]	; (800e378 <xTaskIncrementTick+0x15c>)
 800e2f0:	6013      	str	r3, [r2, #0]
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2f6:	4613      	mov	r3, r2
 800e2f8:	009b      	lsls	r3, r3, #2
 800e2fa:	4413      	add	r3, r2
 800e2fc:	009b      	lsls	r3, r3, #2
 800e2fe:	4a1f      	ldr	r2, [pc, #124]	; (800e37c <xTaskIncrementTick+0x160>)
 800e300:	441a      	add	r2, r3
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	3304      	adds	r3, #4
 800e306:	4619      	mov	r1, r3
 800e308:	4610      	mov	r0, r2
 800e30a:	f7fe fcc6 	bl	800cc9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e312:	4b1b      	ldr	r3, [pc, #108]	; (800e380 <xTaskIncrementTick+0x164>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e318:	429a      	cmp	r2, r3
 800e31a:	d3b9      	bcc.n	800e290 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e31c:	2301      	movs	r3, #1
 800e31e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e320:	e7b6      	b.n	800e290 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e322:	4b17      	ldr	r3, [pc, #92]	; (800e380 <xTaskIncrementTick+0x164>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e328:	4914      	ldr	r1, [pc, #80]	; (800e37c <xTaskIncrementTick+0x160>)
 800e32a:	4613      	mov	r3, r2
 800e32c:	009b      	lsls	r3, r3, #2
 800e32e:	4413      	add	r3, r2
 800e330:	009b      	lsls	r3, r3, #2
 800e332:	440b      	add	r3, r1
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	2b01      	cmp	r3, #1
 800e338:	d901      	bls.n	800e33e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800e33a:	2301      	movs	r3, #1
 800e33c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e33e:	4b11      	ldr	r3, [pc, #68]	; (800e384 <xTaskIncrementTick+0x168>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d007      	beq.n	800e356 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800e346:	2301      	movs	r3, #1
 800e348:	617b      	str	r3, [r7, #20]
 800e34a:	e004      	b.n	800e356 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e34c:	4b0e      	ldr	r3, [pc, #56]	; (800e388 <xTaskIncrementTick+0x16c>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	3301      	adds	r3, #1
 800e352:	4a0d      	ldr	r2, [pc, #52]	; (800e388 <xTaskIncrementTick+0x16c>)
 800e354:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e356:	697b      	ldr	r3, [r7, #20]
}
 800e358:	4618      	mov	r0, r3
 800e35a:	3718      	adds	r7, #24
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}
 800e360:	20000e2c 	.word	0x20000e2c
 800e364:	20000e08 	.word	0x20000e08
 800e368:	20000dbc 	.word	0x20000dbc
 800e36c:	20000dc0 	.word	0x20000dc0
 800e370:	20000e1c 	.word	0x20000e1c
 800e374:	20000e24 	.word	0x20000e24
 800e378:	20000e0c 	.word	0x20000e0c
 800e37c:	20000d08 	.word	0x20000d08
 800e380:	20000d04 	.word	0x20000d04
 800e384:	20000e18 	.word	0x20000e18
 800e388:	20000e14 	.word	0x20000e14

0800e38c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b088      	sub	sp, #32
 800e390:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e392:	4b39      	ldr	r3, [pc, #228]	; (800e478 <vTaskSwitchContext+0xec>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d003      	beq.n	800e3a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e39a:	4b38      	ldr	r3, [pc, #224]	; (800e47c <vTaskSwitchContext+0xf0>)
 800e39c:	2201      	movs	r2, #1
 800e39e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e3a0:	e066      	b.n	800e470 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800e3a2:	4b36      	ldr	r3, [pc, #216]	; (800e47c <vTaskSwitchContext+0xf0>)
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800e3a8:	4b35      	ldr	r3, [pc, #212]	; (800e480 <vTaskSwitchContext+0xf4>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3ae:	61fb      	str	r3, [r7, #28]
 800e3b0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800e3b4:	61bb      	str	r3, [r7, #24]
 800e3b6:	69fb      	ldr	r3, [r7, #28]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	69ba      	ldr	r2, [r7, #24]
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d111      	bne.n	800e3e4 <vTaskSwitchContext+0x58>
 800e3c0:	69fb      	ldr	r3, [r7, #28]
 800e3c2:	3304      	adds	r3, #4
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	69ba      	ldr	r2, [r7, #24]
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d10b      	bne.n	800e3e4 <vTaskSwitchContext+0x58>
 800e3cc:	69fb      	ldr	r3, [r7, #28]
 800e3ce:	3308      	adds	r3, #8
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	69ba      	ldr	r2, [r7, #24]
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d105      	bne.n	800e3e4 <vTaskSwitchContext+0x58>
 800e3d8:	69fb      	ldr	r3, [r7, #28]
 800e3da:	330c      	adds	r3, #12
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	69ba      	ldr	r2, [r7, #24]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d008      	beq.n	800e3f6 <vTaskSwitchContext+0x6a>
 800e3e4:	4b26      	ldr	r3, [pc, #152]	; (800e480 <vTaskSwitchContext+0xf4>)
 800e3e6:	681a      	ldr	r2, [r3, #0]
 800e3e8:	4b25      	ldr	r3, [pc, #148]	; (800e480 <vTaskSwitchContext+0xf4>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	3334      	adds	r3, #52	; 0x34
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	4610      	mov	r0, r2
 800e3f2:	f7f5 fbfc 	bl	8003bee <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3f6:	4b23      	ldr	r3, [pc, #140]	; (800e484 <vTaskSwitchContext+0xf8>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	fab3 f383 	clz	r3, r3
 800e402:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e404:	7afb      	ldrb	r3, [r7, #11]
 800e406:	f1c3 031f 	rsb	r3, r3, #31
 800e40a:	617b      	str	r3, [r7, #20]
 800e40c:	491e      	ldr	r1, [pc, #120]	; (800e488 <vTaskSwitchContext+0xfc>)
 800e40e:	697a      	ldr	r2, [r7, #20]
 800e410:	4613      	mov	r3, r2
 800e412:	009b      	lsls	r3, r3, #2
 800e414:	4413      	add	r3, r2
 800e416:	009b      	lsls	r3, r3, #2
 800e418:	440b      	add	r3, r1
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d10a      	bne.n	800e436 <vTaskSwitchContext+0xaa>
	__asm volatile
 800e420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e424:	f383 8811 	msr	BASEPRI, r3
 800e428:	f3bf 8f6f 	isb	sy
 800e42c:	f3bf 8f4f 	dsb	sy
 800e430:	607b      	str	r3, [r7, #4]
}
 800e432:	bf00      	nop
 800e434:	e7fe      	b.n	800e434 <vTaskSwitchContext+0xa8>
 800e436:	697a      	ldr	r2, [r7, #20]
 800e438:	4613      	mov	r3, r2
 800e43a:	009b      	lsls	r3, r3, #2
 800e43c:	4413      	add	r3, r2
 800e43e:	009b      	lsls	r3, r3, #2
 800e440:	4a11      	ldr	r2, [pc, #68]	; (800e488 <vTaskSwitchContext+0xfc>)
 800e442:	4413      	add	r3, r2
 800e444:	613b      	str	r3, [r7, #16]
 800e446:	693b      	ldr	r3, [r7, #16]
 800e448:	685b      	ldr	r3, [r3, #4]
 800e44a:	685a      	ldr	r2, [r3, #4]
 800e44c:	693b      	ldr	r3, [r7, #16]
 800e44e:	605a      	str	r2, [r3, #4]
 800e450:	693b      	ldr	r3, [r7, #16]
 800e452:	685a      	ldr	r2, [r3, #4]
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	3308      	adds	r3, #8
 800e458:	429a      	cmp	r2, r3
 800e45a:	d104      	bne.n	800e466 <vTaskSwitchContext+0xda>
 800e45c:	693b      	ldr	r3, [r7, #16]
 800e45e:	685b      	ldr	r3, [r3, #4]
 800e460:	685a      	ldr	r2, [r3, #4]
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	605a      	str	r2, [r3, #4]
 800e466:	693b      	ldr	r3, [r7, #16]
 800e468:	685b      	ldr	r3, [r3, #4]
 800e46a:	68db      	ldr	r3, [r3, #12]
 800e46c:	4a04      	ldr	r2, [pc, #16]	; (800e480 <vTaskSwitchContext+0xf4>)
 800e46e:	6013      	str	r3, [r2, #0]
}
 800e470:	bf00      	nop
 800e472:	3720      	adds	r7, #32
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}
 800e478:	20000e2c 	.word	0x20000e2c
 800e47c:	20000e18 	.word	0x20000e18
 800e480:	20000d04 	.word	0x20000d04
 800e484:	20000e0c 	.word	0x20000e0c
 800e488:	20000d08 	.word	0x20000d08

0800e48c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d10a      	bne.n	800e4b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a0:	f383 8811 	msr	BASEPRI, r3
 800e4a4:	f3bf 8f6f 	isb	sy
 800e4a8:	f3bf 8f4f 	dsb	sy
 800e4ac:	60fb      	str	r3, [r7, #12]
}
 800e4ae:	bf00      	nop
 800e4b0:	e7fe      	b.n	800e4b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e4b2:	4b07      	ldr	r3, [pc, #28]	; (800e4d0 <vTaskPlaceOnEventList+0x44>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	3318      	adds	r3, #24
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f7fe fc11 	bl	800cce2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e4c0:	2101      	movs	r1, #1
 800e4c2:	6838      	ldr	r0, [r7, #0]
 800e4c4:	f000 fd6a 	bl	800ef9c <prvAddCurrentTaskToDelayedList>
}
 800e4c8:	bf00      	nop
 800e4ca:	3710      	adds	r7, #16
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}
 800e4d0:	20000d04 	.word	0x20000d04

0800e4d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b086      	sub	sp, #24
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	68db      	ldr	r3, [r3, #12]
 800e4e0:	68db      	ldr	r3, [r3, #12]
 800e4e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e4e4:	693b      	ldr	r3, [r7, #16]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d10a      	bne.n	800e500 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ee:	f383 8811 	msr	BASEPRI, r3
 800e4f2:	f3bf 8f6f 	isb	sy
 800e4f6:	f3bf 8f4f 	dsb	sy
 800e4fa:	60fb      	str	r3, [r7, #12]
}
 800e4fc:	bf00      	nop
 800e4fe:	e7fe      	b.n	800e4fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	3318      	adds	r3, #24
 800e504:	4618      	mov	r0, r3
 800e506:	f7fe fc25 	bl	800cd54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e50a:	4b1d      	ldr	r3, [pc, #116]	; (800e580 <xTaskRemoveFromEventList+0xac>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d11c      	bne.n	800e54c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	3304      	adds	r3, #4
 800e516:	4618      	mov	r0, r3
 800e518:	f7fe fc1c 	bl	800cd54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e520:	2201      	movs	r2, #1
 800e522:	409a      	lsls	r2, r3
 800e524:	4b17      	ldr	r3, [pc, #92]	; (800e584 <xTaskRemoveFromEventList+0xb0>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	4313      	orrs	r3, r2
 800e52a:	4a16      	ldr	r2, [pc, #88]	; (800e584 <xTaskRemoveFromEventList+0xb0>)
 800e52c:	6013      	str	r3, [r2, #0]
 800e52e:	693b      	ldr	r3, [r7, #16]
 800e530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e532:	4613      	mov	r3, r2
 800e534:	009b      	lsls	r3, r3, #2
 800e536:	4413      	add	r3, r2
 800e538:	009b      	lsls	r3, r3, #2
 800e53a:	4a13      	ldr	r2, [pc, #76]	; (800e588 <xTaskRemoveFromEventList+0xb4>)
 800e53c:	441a      	add	r2, r3
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	3304      	adds	r3, #4
 800e542:	4619      	mov	r1, r3
 800e544:	4610      	mov	r0, r2
 800e546:	f7fe fba8 	bl	800cc9a <vListInsertEnd>
 800e54a:	e005      	b.n	800e558 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e54c:	693b      	ldr	r3, [r7, #16]
 800e54e:	3318      	adds	r3, #24
 800e550:	4619      	mov	r1, r3
 800e552:	480e      	ldr	r0, [pc, #56]	; (800e58c <xTaskRemoveFromEventList+0xb8>)
 800e554:	f7fe fba1 	bl	800cc9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e55c:	4b0c      	ldr	r3, [pc, #48]	; (800e590 <xTaskRemoveFromEventList+0xbc>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e562:	429a      	cmp	r2, r3
 800e564:	d905      	bls.n	800e572 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e566:	2301      	movs	r3, #1
 800e568:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e56a:	4b0a      	ldr	r3, [pc, #40]	; (800e594 <xTaskRemoveFromEventList+0xc0>)
 800e56c:	2201      	movs	r2, #1
 800e56e:	601a      	str	r2, [r3, #0]
 800e570:	e001      	b.n	800e576 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e572:	2300      	movs	r3, #0
 800e574:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e576:	697b      	ldr	r3, [r7, #20]
}
 800e578:	4618      	mov	r0, r3
 800e57a:	3718      	adds	r7, #24
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}
 800e580:	20000e2c 	.word	0x20000e2c
 800e584:	20000e0c 	.word	0x20000e0c
 800e588:	20000d08 	.word	0x20000d08
 800e58c:	20000dc4 	.word	0x20000dc4
 800e590:	20000d04 	.word	0x20000d04
 800e594:	20000e18 	.word	0x20000e18

0800e598 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e598:	b480      	push	{r7}
 800e59a:	b083      	sub	sp, #12
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e5a0:	4b06      	ldr	r3, [pc, #24]	; (800e5bc <vTaskInternalSetTimeOutState+0x24>)
 800e5a2:	681a      	ldr	r2, [r3, #0]
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e5a8:	4b05      	ldr	r3, [pc, #20]	; (800e5c0 <vTaskInternalSetTimeOutState+0x28>)
 800e5aa:	681a      	ldr	r2, [r3, #0]
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	605a      	str	r2, [r3, #4]
}
 800e5b0:	bf00      	nop
 800e5b2:	370c      	adds	r7, #12
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ba:	4770      	bx	lr
 800e5bc:	20000e1c 	.word	0x20000e1c
 800e5c0:	20000e08 	.word	0x20000e08

0800e5c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b088      	sub	sp, #32
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d10a      	bne.n	800e5ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d8:	f383 8811 	msr	BASEPRI, r3
 800e5dc:	f3bf 8f6f 	isb	sy
 800e5e0:	f3bf 8f4f 	dsb	sy
 800e5e4:	613b      	str	r3, [r7, #16]
}
 800e5e6:	bf00      	nop
 800e5e8:	e7fe      	b.n	800e5e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d10a      	bne.n	800e606 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f4:	f383 8811 	msr	BASEPRI, r3
 800e5f8:	f3bf 8f6f 	isb	sy
 800e5fc:	f3bf 8f4f 	dsb	sy
 800e600:	60fb      	str	r3, [r7, #12]
}
 800e602:	bf00      	nop
 800e604:	e7fe      	b.n	800e604 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e606:	f000 fe5d 	bl	800f2c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e60a:	4b1d      	ldr	r3, [pc, #116]	; (800e680 <xTaskCheckForTimeOut+0xbc>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	685b      	ldr	r3, [r3, #4]
 800e614:	69ba      	ldr	r2, [r7, #24]
 800e616:	1ad3      	subs	r3, r2, r3
 800e618:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e622:	d102      	bne.n	800e62a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e624:	2300      	movs	r3, #0
 800e626:	61fb      	str	r3, [r7, #28]
 800e628:	e023      	b.n	800e672 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681a      	ldr	r2, [r3, #0]
 800e62e:	4b15      	ldr	r3, [pc, #84]	; (800e684 <xTaskCheckForTimeOut+0xc0>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	429a      	cmp	r2, r3
 800e634:	d007      	beq.n	800e646 <xTaskCheckForTimeOut+0x82>
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	685b      	ldr	r3, [r3, #4]
 800e63a:	69ba      	ldr	r2, [r7, #24]
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d302      	bcc.n	800e646 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e640:	2301      	movs	r3, #1
 800e642:	61fb      	str	r3, [r7, #28]
 800e644:	e015      	b.n	800e672 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	697a      	ldr	r2, [r7, #20]
 800e64c:	429a      	cmp	r2, r3
 800e64e:	d20b      	bcs.n	800e668 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	681a      	ldr	r2, [r3, #0]
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	1ad2      	subs	r2, r2, r3
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f7ff ff9b 	bl	800e598 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e662:	2300      	movs	r3, #0
 800e664:	61fb      	str	r3, [r7, #28]
 800e666:	e004      	b.n	800e672 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	2200      	movs	r2, #0
 800e66c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e66e:	2301      	movs	r3, #1
 800e670:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e672:	f000 fe57 	bl	800f324 <vPortExitCritical>

	return xReturn;
 800e676:	69fb      	ldr	r3, [r7, #28]
}
 800e678:	4618      	mov	r0, r3
 800e67a:	3720      	adds	r7, #32
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}
 800e680:	20000e08 	.word	0x20000e08
 800e684:	20000e1c 	.word	0x20000e1c

0800e688 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e688:	b480      	push	{r7}
 800e68a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e68c:	4b03      	ldr	r3, [pc, #12]	; (800e69c <vTaskMissedYield+0x14>)
 800e68e:	2201      	movs	r2, #1
 800e690:	601a      	str	r2, [r3, #0]
}
 800e692:	bf00      	nop
 800e694:	46bd      	mov	sp, r7
 800e696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69a:	4770      	bx	lr
 800e69c:	20000e18 	.word	0x20000e18

0800e6a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b082      	sub	sp, #8
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e6a8:	f000 f854 	bl	800e754 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e6ac:	4b07      	ldr	r3, [pc, #28]	; (800e6cc <prvIdleTask+0x2c>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	2b01      	cmp	r3, #1
 800e6b2:	d907      	bls.n	800e6c4 <prvIdleTask+0x24>
			{
				taskYIELD();
 800e6b4:	4b06      	ldr	r3, [pc, #24]	; (800e6d0 <prvIdleTask+0x30>)
 800e6b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6ba:	601a      	str	r2, [r3, #0]
 800e6bc:	f3bf 8f4f 	dsb	sy
 800e6c0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e6c4:	f7f5 fa8c 	bl	8003be0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e6c8:	e7ee      	b.n	800e6a8 <prvIdleTask+0x8>
 800e6ca:	bf00      	nop
 800e6cc:	20000d08 	.word	0x20000d08
 800e6d0:	e000ed04 	.word	0xe000ed04

0800e6d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b082      	sub	sp, #8
 800e6d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e6da:	2300      	movs	r3, #0
 800e6dc:	607b      	str	r3, [r7, #4]
 800e6de:	e00c      	b.n	800e6fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e6e0:	687a      	ldr	r2, [r7, #4]
 800e6e2:	4613      	mov	r3, r2
 800e6e4:	009b      	lsls	r3, r3, #2
 800e6e6:	4413      	add	r3, r2
 800e6e8:	009b      	lsls	r3, r3, #2
 800e6ea:	4a12      	ldr	r2, [pc, #72]	; (800e734 <prvInitialiseTaskLists+0x60>)
 800e6ec:	4413      	add	r3, r2
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f7fe faa6 	bl	800cc40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	3301      	adds	r3, #1
 800e6f8:	607b      	str	r3, [r7, #4]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2b06      	cmp	r3, #6
 800e6fe:	d9ef      	bls.n	800e6e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e700:	480d      	ldr	r0, [pc, #52]	; (800e738 <prvInitialiseTaskLists+0x64>)
 800e702:	f7fe fa9d 	bl	800cc40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e706:	480d      	ldr	r0, [pc, #52]	; (800e73c <prvInitialiseTaskLists+0x68>)
 800e708:	f7fe fa9a 	bl	800cc40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e70c:	480c      	ldr	r0, [pc, #48]	; (800e740 <prvInitialiseTaskLists+0x6c>)
 800e70e:	f7fe fa97 	bl	800cc40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e712:	480c      	ldr	r0, [pc, #48]	; (800e744 <prvInitialiseTaskLists+0x70>)
 800e714:	f7fe fa94 	bl	800cc40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e718:	480b      	ldr	r0, [pc, #44]	; (800e748 <prvInitialiseTaskLists+0x74>)
 800e71a:	f7fe fa91 	bl	800cc40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e71e:	4b0b      	ldr	r3, [pc, #44]	; (800e74c <prvInitialiseTaskLists+0x78>)
 800e720:	4a05      	ldr	r2, [pc, #20]	; (800e738 <prvInitialiseTaskLists+0x64>)
 800e722:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e724:	4b0a      	ldr	r3, [pc, #40]	; (800e750 <prvInitialiseTaskLists+0x7c>)
 800e726:	4a05      	ldr	r2, [pc, #20]	; (800e73c <prvInitialiseTaskLists+0x68>)
 800e728:	601a      	str	r2, [r3, #0]
}
 800e72a:	bf00      	nop
 800e72c:	3708      	adds	r7, #8
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}
 800e732:	bf00      	nop
 800e734:	20000d08 	.word	0x20000d08
 800e738:	20000d94 	.word	0x20000d94
 800e73c:	20000da8 	.word	0x20000da8
 800e740:	20000dc4 	.word	0x20000dc4
 800e744:	20000dd8 	.word	0x20000dd8
 800e748:	20000df0 	.word	0x20000df0
 800e74c:	20000dbc 	.word	0x20000dbc
 800e750:	20000dc0 	.word	0x20000dc0

0800e754 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b082      	sub	sp, #8
 800e758:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e75a:	e019      	b.n	800e790 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e75c:	f000 fdb2 	bl	800f2c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e760:	4b10      	ldr	r3, [pc, #64]	; (800e7a4 <prvCheckTasksWaitingTermination+0x50>)
 800e762:	68db      	ldr	r3, [r3, #12]
 800e764:	68db      	ldr	r3, [r3, #12]
 800e766:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	3304      	adds	r3, #4
 800e76c:	4618      	mov	r0, r3
 800e76e:	f7fe faf1 	bl	800cd54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e772:	4b0d      	ldr	r3, [pc, #52]	; (800e7a8 <prvCheckTasksWaitingTermination+0x54>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	3b01      	subs	r3, #1
 800e778:	4a0b      	ldr	r2, [pc, #44]	; (800e7a8 <prvCheckTasksWaitingTermination+0x54>)
 800e77a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e77c:	4b0b      	ldr	r3, [pc, #44]	; (800e7ac <prvCheckTasksWaitingTermination+0x58>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	3b01      	subs	r3, #1
 800e782:	4a0a      	ldr	r2, [pc, #40]	; (800e7ac <prvCheckTasksWaitingTermination+0x58>)
 800e784:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e786:	f000 fdcd 	bl	800f324 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f000 f810 	bl	800e7b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e790:	4b06      	ldr	r3, [pc, #24]	; (800e7ac <prvCheckTasksWaitingTermination+0x58>)
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d1e1      	bne.n	800e75c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e798:	bf00      	nop
 800e79a:	bf00      	nop
 800e79c:	3708      	adds	r7, #8
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}
 800e7a2:	bf00      	nop
 800e7a4:	20000dd8 	.word	0x20000dd8
 800e7a8:	20000e04 	.word	0x20000e04
 800e7ac:	20000dec 	.word	0x20000dec

0800e7b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b084      	sub	sp, #16
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d108      	bne.n	800e7d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	f000 ff6e 	bl	800f6a8 <vPortFree>
				vPortFree( pxTCB );
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f000 ff6b 	bl	800f6a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e7d2:	e018      	b.n	800e806 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e7da:	2b01      	cmp	r3, #1
 800e7dc:	d103      	bne.n	800e7e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f000 ff62 	bl	800f6a8 <vPortFree>
	}
 800e7e4:	e00f      	b.n	800e806 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e7ec:	2b02      	cmp	r3, #2
 800e7ee:	d00a      	beq.n	800e806 <prvDeleteTCB+0x56>
	__asm volatile
 800e7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f4:	f383 8811 	msr	BASEPRI, r3
 800e7f8:	f3bf 8f6f 	isb	sy
 800e7fc:	f3bf 8f4f 	dsb	sy
 800e800:	60fb      	str	r3, [r7, #12]
}
 800e802:	bf00      	nop
 800e804:	e7fe      	b.n	800e804 <prvDeleteTCB+0x54>
	}
 800e806:	bf00      	nop
 800e808:	3710      	adds	r7, #16
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}
	...

0800e810 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e810:	b480      	push	{r7}
 800e812:	b083      	sub	sp, #12
 800e814:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e816:	4b0c      	ldr	r3, [pc, #48]	; (800e848 <prvResetNextTaskUnblockTime+0x38>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d104      	bne.n	800e82a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e820:	4b0a      	ldr	r3, [pc, #40]	; (800e84c <prvResetNextTaskUnblockTime+0x3c>)
 800e822:	f04f 32ff 	mov.w	r2, #4294967295
 800e826:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e828:	e008      	b.n	800e83c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e82a:	4b07      	ldr	r3, [pc, #28]	; (800e848 <prvResetNextTaskUnblockTime+0x38>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	68db      	ldr	r3, [r3, #12]
 800e830:	68db      	ldr	r3, [r3, #12]
 800e832:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	685b      	ldr	r3, [r3, #4]
 800e838:	4a04      	ldr	r2, [pc, #16]	; (800e84c <prvResetNextTaskUnblockTime+0x3c>)
 800e83a:	6013      	str	r3, [r2, #0]
}
 800e83c:	bf00      	nop
 800e83e:	370c      	adds	r7, #12
 800e840:	46bd      	mov	sp, r7
 800e842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e846:	4770      	bx	lr
 800e848:	20000dbc 	.word	0x20000dbc
 800e84c:	20000e24 	.word	0x20000e24

0800e850 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e850:	b480      	push	{r7}
 800e852:	b083      	sub	sp, #12
 800e854:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e856:	4b0b      	ldr	r3, [pc, #44]	; (800e884 <xTaskGetSchedulerState+0x34>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d102      	bne.n	800e864 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e85e:	2301      	movs	r3, #1
 800e860:	607b      	str	r3, [r7, #4]
 800e862:	e008      	b.n	800e876 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e864:	4b08      	ldr	r3, [pc, #32]	; (800e888 <xTaskGetSchedulerState+0x38>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d102      	bne.n	800e872 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e86c:	2302      	movs	r3, #2
 800e86e:	607b      	str	r3, [r7, #4]
 800e870:	e001      	b.n	800e876 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e872:	2300      	movs	r3, #0
 800e874:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e876:	687b      	ldr	r3, [r7, #4]
	}
 800e878:	4618      	mov	r0, r3
 800e87a:	370c      	adds	r7, #12
 800e87c:	46bd      	mov	sp, r7
 800e87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e882:	4770      	bx	lr
 800e884:	20000e10 	.word	0x20000e10
 800e888:	20000e2c 	.word	0x20000e2c

0800e88c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b084      	sub	sp, #16
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e898:	2300      	movs	r3, #0
 800e89a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d05e      	beq.n	800e960 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8a6:	4b31      	ldr	r3, [pc, #196]	; (800e96c <xTaskPriorityInherit+0xe0>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d24e      	bcs.n	800e94e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	699b      	ldr	r3, [r3, #24]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	db06      	blt.n	800e8c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8b8:	4b2c      	ldr	r3, [pc, #176]	; (800e96c <xTaskPriorityInherit+0xe0>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8be:	f1c3 0207 	rsb	r2, r3, #7
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	6959      	ldr	r1, [r3, #20]
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8ce:	4613      	mov	r3, r2
 800e8d0:	009b      	lsls	r3, r3, #2
 800e8d2:	4413      	add	r3, r2
 800e8d4:	009b      	lsls	r3, r3, #2
 800e8d6:	4a26      	ldr	r2, [pc, #152]	; (800e970 <xTaskPriorityInherit+0xe4>)
 800e8d8:	4413      	add	r3, r2
 800e8da:	4299      	cmp	r1, r3
 800e8dc:	d12f      	bne.n	800e93e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	3304      	adds	r3, #4
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f7fe fa36 	bl	800cd54 <uxListRemove>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d10a      	bne.n	800e904 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8f2:	2201      	movs	r2, #1
 800e8f4:	fa02 f303 	lsl.w	r3, r2, r3
 800e8f8:	43da      	mvns	r2, r3
 800e8fa:	4b1e      	ldr	r3, [pc, #120]	; (800e974 <xTaskPriorityInherit+0xe8>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	4013      	ands	r3, r2
 800e900:	4a1c      	ldr	r2, [pc, #112]	; (800e974 <xTaskPriorityInherit+0xe8>)
 800e902:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e904:	4b19      	ldr	r3, [pc, #100]	; (800e96c <xTaskPriorityInherit+0xe0>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e90a:	68bb      	ldr	r3, [r7, #8]
 800e90c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e912:	2201      	movs	r2, #1
 800e914:	409a      	lsls	r2, r3
 800e916:	4b17      	ldr	r3, [pc, #92]	; (800e974 <xTaskPriorityInherit+0xe8>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	4313      	orrs	r3, r2
 800e91c:	4a15      	ldr	r2, [pc, #84]	; (800e974 <xTaskPriorityInherit+0xe8>)
 800e91e:	6013      	str	r3, [r2, #0]
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e924:	4613      	mov	r3, r2
 800e926:	009b      	lsls	r3, r3, #2
 800e928:	4413      	add	r3, r2
 800e92a:	009b      	lsls	r3, r3, #2
 800e92c:	4a10      	ldr	r2, [pc, #64]	; (800e970 <xTaskPriorityInherit+0xe4>)
 800e92e:	441a      	add	r2, r3
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	3304      	adds	r3, #4
 800e934:	4619      	mov	r1, r3
 800e936:	4610      	mov	r0, r2
 800e938:	f7fe f9af 	bl	800cc9a <vListInsertEnd>
 800e93c:	e004      	b.n	800e948 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e93e:	4b0b      	ldr	r3, [pc, #44]	; (800e96c <xTaskPriorityInherit+0xe0>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e948:	2301      	movs	r3, #1
 800e94a:	60fb      	str	r3, [r7, #12]
 800e94c:	e008      	b.n	800e960 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e952:	4b06      	ldr	r3, [pc, #24]	; (800e96c <xTaskPriorityInherit+0xe0>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e958:	429a      	cmp	r2, r3
 800e95a:	d201      	bcs.n	800e960 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e95c:	2301      	movs	r3, #1
 800e95e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e960:	68fb      	ldr	r3, [r7, #12]
	}
 800e962:	4618      	mov	r0, r3
 800e964:	3710      	adds	r7, #16
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}
 800e96a:	bf00      	nop
 800e96c:	20000d04 	.word	0x20000d04
 800e970:	20000d08 	.word	0x20000d08
 800e974:	20000e0c 	.word	0x20000e0c

0800e978 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b086      	sub	sp, #24
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e984:	2300      	movs	r3, #0
 800e986:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d06e      	beq.n	800ea6c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e98e:	4b3a      	ldr	r3, [pc, #232]	; (800ea78 <xTaskPriorityDisinherit+0x100>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	693a      	ldr	r2, [r7, #16]
 800e994:	429a      	cmp	r2, r3
 800e996:	d00a      	beq.n	800e9ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e99c:	f383 8811 	msr	BASEPRI, r3
 800e9a0:	f3bf 8f6f 	isb	sy
 800e9a4:	f3bf 8f4f 	dsb	sy
 800e9a8:	60fb      	str	r3, [r7, #12]
}
 800e9aa:	bf00      	nop
 800e9ac:	e7fe      	b.n	800e9ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e9ae:	693b      	ldr	r3, [r7, #16]
 800e9b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d10a      	bne.n	800e9cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ba:	f383 8811 	msr	BASEPRI, r3
 800e9be:	f3bf 8f6f 	isb	sy
 800e9c2:	f3bf 8f4f 	dsb	sy
 800e9c6:	60bb      	str	r3, [r7, #8]
}
 800e9c8:	bf00      	nop
 800e9ca:	e7fe      	b.n	800e9ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9d0:	1e5a      	subs	r2, r3, #1
 800e9d2:	693b      	ldr	r3, [r7, #16]
 800e9d4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e9d6:	693b      	ldr	r3, [r7, #16]
 800e9d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9de:	429a      	cmp	r2, r3
 800e9e0:	d044      	beq.n	800ea6c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d140      	bne.n	800ea6c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	3304      	adds	r3, #4
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7fe f9b0 	bl	800cd54 <uxListRemove>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d115      	bne.n	800ea26 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e9fa:	693b      	ldr	r3, [r7, #16]
 800e9fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9fe:	491f      	ldr	r1, [pc, #124]	; (800ea7c <xTaskPriorityDisinherit+0x104>)
 800ea00:	4613      	mov	r3, r2
 800ea02:	009b      	lsls	r3, r3, #2
 800ea04:	4413      	add	r3, r2
 800ea06:	009b      	lsls	r3, r3, #2
 800ea08:	440b      	add	r3, r1
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d10a      	bne.n	800ea26 <xTaskPriorityDisinherit+0xae>
 800ea10:	693b      	ldr	r3, [r7, #16]
 800ea12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea14:	2201      	movs	r2, #1
 800ea16:	fa02 f303 	lsl.w	r3, r2, r3
 800ea1a:	43da      	mvns	r2, r3
 800ea1c:	4b18      	ldr	r3, [pc, #96]	; (800ea80 <xTaskPriorityDisinherit+0x108>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	4013      	ands	r3, r2
 800ea22:	4a17      	ldr	r2, [pc, #92]	; (800ea80 <xTaskPriorityDisinherit+0x108>)
 800ea24:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ea26:	693b      	ldr	r3, [r7, #16]
 800ea28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea2a:	693b      	ldr	r3, [r7, #16]
 800ea2c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea32:	f1c3 0207 	rsb	r2, r3, #7
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ea3a:	693b      	ldr	r3, [r7, #16]
 800ea3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea3e:	2201      	movs	r2, #1
 800ea40:	409a      	lsls	r2, r3
 800ea42:	4b0f      	ldr	r3, [pc, #60]	; (800ea80 <xTaskPriorityDisinherit+0x108>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	4313      	orrs	r3, r2
 800ea48:	4a0d      	ldr	r2, [pc, #52]	; (800ea80 <xTaskPriorityDisinherit+0x108>)
 800ea4a:	6013      	str	r3, [r2, #0]
 800ea4c:	693b      	ldr	r3, [r7, #16]
 800ea4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea50:	4613      	mov	r3, r2
 800ea52:	009b      	lsls	r3, r3, #2
 800ea54:	4413      	add	r3, r2
 800ea56:	009b      	lsls	r3, r3, #2
 800ea58:	4a08      	ldr	r2, [pc, #32]	; (800ea7c <xTaskPriorityDisinherit+0x104>)
 800ea5a:	441a      	add	r2, r3
 800ea5c:	693b      	ldr	r3, [r7, #16]
 800ea5e:	3304      	adds	r3, #4
 800ea60:	4619      	mov	r1, r3
 800ea62:	4610      	mov	r0, r2
 800ea64:	f7fe f919 	bl	800cc9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ea68:	2301      	movs	r3, #1
 800ea6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ea6c:	697b      	ldr	r3, [r7, #20]
	}
 800ea6e:	4618      	mov	r0, r3
 800ea70:	3718      	adds	r7, #24
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}
 800ea76:	bf00      	nop
 800ea78:	20000d04 	.word	0x20000d04
 800ea7c:	20000d08 	.word	0x20000d08
 800ea80:	20000e0c 	.word	0x20000e0c

0800ea84 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b088      	sub	sp, #32
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ea92:	2301      	movs	r3, #1
 800ea94:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d077      	beq.n	800eb8c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ea9c:	69bb      	ldr	r3, [r7, #24]
 800ea9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d10a      	bne.n	800eaba <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800eaa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa8:	f383 8811 	msr	BASEPRI, r3
 800eaac:	f3bf 8f6f 	isb	sy
 800eab0:	f3bf 8f4f 	dsb	sy
 800eab4:	60fb      	str	r3, [r7, #12]
}
 800eab6:	bf00      	nop
 800eab8:	e7fe      	b.n	800eab8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800eaba:	69bb      	ldr	r3, [r7, #24]
 800eabc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eabe:	683a      	ldr	r2, [r7, #0]
 800eac0:	429a      	cmp	r2, r3
 800eac2:	d902      	bls.n	800eaca <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	61fb      	str	r3, [r7, #28]
 800eac8:	e002      	b.n	800ead0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800eaca:	69bb      	ldr	r3, [r7, #24]
 800eacc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eace:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ead0:	69bb      	ldr	r3, [r7, #24]
 800ead2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ead4:	69fa      	ldr	r2, [r7, #28]
 800ead6:	429a      	cmp	r2, r3
 800ead8:	d058      	beq.n	800eb8c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800eada:	69bb      	ldr	r3, [r7, #24]
 800eadc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eade:	697a      	ldr	r2, [r7, #20]
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d153      	bne.n	800eb8c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800eae4:	4b2b      	ldr	r3, [pc, #172]	; (800eb94 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	69ba      	ldr	r2, [r7, #24]
 800eaea:	429a      	cmp	r2, r3
 800eaec:	d10a      	bne.n	800eb04 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800eaee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf2:	f383 8811 	msr	BASEPRI, r3
 800eaf6:	f3bf 8f6f 	isb	sy
 800eafa:	f3bf 8f4f 	dsb	sy
 800eafe:	60bb      	str	r3, [r7, #8]
}
 800eb00:	bf00      	nop
 800eb02:	e7fe      	b.n	800eb02 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800eb04:	69bb      	ldr	r3, [r7, #24]
 800eb06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb08:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800eb0a:	69bb      	ldr	r3, [r7, #24]
 800eb0c:	69fa      	ldr	r2, [r7, #28]
 800eb0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eb10:	69bb      	ldr	r3, [r7, #24]
 800eb12:	699b      	ldr	r3, [r3, #24]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	db04      	blt.n	800eb22 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb18:	69fb      	ldr	r3, [r7, #28]
 800eb1a:	f1c3 0207 	rsb	r2, r3, #7
 800eb1e:	69bb      	ldr	r3, [r7, #24]
 800eb20:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800eb22:	69bb      	ldr	r3, [r7, #24]
 800eb24:	6959      	ldr	r1, [r3, #20]
 800eb26:	693a      	ldr	r2, [r7, #16]
 800eb28:	4613      	mov	r3, r2
 800eb2a:	009b      	lsls	r3, r3, #2
 800eb2c:	4413      	add	r3, r2
 800eb2e:	009b      	lsls	r3, r3, #2
 800eb30:	4a19      	ldr	r2, [pc, #100]	; (800eb98 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800eb32:	4413      	add	r3, r2
 800eb34:	4299      	cmp	r1, r3
 800eb36:	d129      	bne.n	800eb8c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb38:	69bb      	ldr	r3, [r7, #24]
 800eb3a:	3304      	adds	r3, #4
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f7fe f909 	bl	800cd54 <uxListRemove>
 800eb42:	4603      	mov	r3, r0
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d10a      	bne.n	800eb5e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800eb48:	69bb      	ldr	r3, [r7, #24]
 800eb4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb4c:	2201      	movs	r2, #1
 800eb4e:	fa02 f303 	lsl.w	r3, r2, r3
 800eb52:	43da      	mvns	r2, r3
 800eb54:	4b11      	ldr	r3, [pc, #68]	; (800eb9c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	4013      	ands	r3, r2
 800eb5a:	4a10      	ldr	r2, [pc, #64]	; (800eb9c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800eb5c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800eb5e:	69bb      	ldr	r3, [r7, #24]
 800eb60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb62:	2201      	movs	r2, #1
 800eb64:	409a      	lsls	r2, r3
 800eb66:	4b0d      	ldr	r3, [pc, #52]	; (800eb9c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	4313      	orrs	r3, r2
 800eb6c:	4a0b      	ldr	r2, [pc, #44]	; (800eb9c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800eb6e:	6013      	str	r3, [r2, #0]
 800eb70:	69bb      	ldr	r3, [r7, #24]
 800eb72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb74:	4613      	mov	r3, r2
 800eb76:	009b      	lsls	r3, r3, #2
 800eb78:	4413      	add	r3, r2
 800eb7a:	009b      	lsls	r3, r3, #2
 800eb7c:	4a06      	ldr	r2, [pc, #24]	; (800eb98 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800eb7e:	441a      	add	r2, r3
 800eb80:	69bb      	ldr	r3, [r7, #24]
 800eb82:	3304      	adds	r3, #4
 800eb84:	4619      	mov	r1, r3
 800eb86:	4610      	mov	r0, r2
 800eb88:	f7fe f887 	bl	800cc9a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eb8c:	bf00      	nop
 800eb8e:	3720      	adds	r7, #32
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}
 800eb94:	20000d04 	.word	0x20000d04
 800eb98:	20000d08 	.word	0x20000d08
 800eb9c:	20000e0c 	.word	0x20000e0c

0800eba0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800eba0:	b480      	push	{r7}
 800eba2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800eba4:	4b07      	ldr	r3, [pc, #28]	; (800ebc4 <pvTaskIncrementMutexHeldCount+0x24>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d004      	beq.n	800ebb6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ebac:	4b05      	ldr	r3, [pc, #20]	; (800ebc4 <pvTaskIncrementMutexHeldCount+0x24>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ebb2:	3201      	adds	r2, #1
 800ebb4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ebb6:	4b03      	ldr	r3, [pc, #12]	; (800ebc4 <pvTaskIncrementMutexHeldCount+0x24>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
	}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc2:	4770      	bx	lr
 800ebc4:	20000d04 	.word	0x20000d04

0800ebc8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b086      	sub	sp, #24
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	60f8      	str	r0, [r7, #12]
 800ebd0:	60b9      	str	r1, [r7, #8]
 800ebd2:	607a      	str	r2, [r7, #4]
 800ebd4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800ebd6:	f000 fb75 	bl	800f2c4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ebda:	4b26      	ldr	r3, [pc, #152]	; (800ec74 <xTaskNotifyWait+0xac>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800ebe2:	b2db      	uxtb	r3, r3
 800ebe4:	2b02      	cmp	r3, #2
 800ebe6:	d01a      	beq.n	800ec1e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800ebe8:	4b22      	ldr	r3, [pc, #136]	; (800ec74 <xTaskNotifyWait+0xac>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ebee:	68fa      	ldr	r2, [r7, #12]
 800ebf0:	43d2      	mvns	r2, r2
 800ebf2:	400a      	ands	r2, r1
 800ebf4:	651a      	str	r2, [r3, #80]	; 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ebf6:	4b1f      	ldr	r3, [pc, #124]	; (800ec74 <xTaskNotifyWait+0xac>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	2201      	movs	r2, #1
 800ebfc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d00b      	beq.n	800ec1e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ec06:	2101      	movs	r1, #1
 800ec08:	6838      	ldr	r0, [r7, #0]
 800ec0a:	f000 f9c7 	bl	800ef9c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ec0e:	4b1a      	ldr	r3, [pc, #104]	; (800ec78 <xTaskNotifyWait+0xb0>)
 800ec10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec14:	601a      	str	r2, [r3, #0]
 800ec16:	f3bf 8f4f 	dsb	sy
 800ec1a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ec1e:	f000 fb81 	bl	800f324 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ec22:	f000 fb4f 	bl	800f2c4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d004      	beq.n	800ec36 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800ec2c:	4b11      	ldr	r3, [pc, #68]	; (800ec74 <xTaskNotifyWait+0xac>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ec36:	4b0f      	ldr	r3, [pc, #60]	; (800ec74 <xTaskNotifyWait+0xac>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800ec3e:	b2db      	uxtb	r3, r3
 800ec40:	2b02      	cmp	r3, #2
 800ec42:	d002      	beq.n	800ec4a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800ec44:	2300      	movs	r3, #0
 800ec46:	617b      	str	r3, [r7, #20]
 800ec48:	e008      	b.n	800ec5c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800ec4a:	4b0a      	ldr	r3, [pc, #40]	; (800ec74 <xTaskNotifyWait+0xac>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ec50:	68ba      	ldr	r2, [r7, #8]
 800ec52:	43d2      	mvns	r2, r2
 800ec54:	400a      	ands	r2, r1
 800ec56:	651a      	str	r2, [r3, #80]	; 0x50
				xReturn = pdTRUE;
 800ec58:	2301      	movs	r3, #1
 800ec5a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ec5c:	4b05      	ldr	r3, [pc, #20]	; (800ec74 <xTaskNotifyWait+0xac>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	2200      	movs	r2, #0
 800ec62:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 800ec66:	f000 fb5d 	bl	800f324 <vPortExitCritical>

		return xReturn;
 800ec6a:	697b      	ldr	r3, [r7, #20]
	}
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	3718      	adds	r7, #24
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd80      	pop	{r7, pc}
 800ec74:	20000d04 	.word	0x20000d04
 800ec78:	e000ed04 	.word	0xe000ed04

0800ec7c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b08a      	sub	sp, #40	; 0x28
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	60f8      	str	r0, [r7, #12]
 800ec84:	60b9      	str	r1, [r7, #8]
 800ec86:	603b      	str	r3, [r7, #0]
 800ec88:	4613      	mov	r3, r2
 800ec8a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d10a      	bne.n	800ecac <xTaskGenericNotify+0x30>
	__asm volatile
 800ec96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec9a:	f383 8811 	msr	BASEPRI, r3
 800ec9e:	f3bf 8f6f 	isb	sy
 800eca2:	f3bf 8f4f 	dsb	sy
 800eca6:	61bb      	str	r3, [r7, #24]
}
 800eca8:	bf00      	nop
 800ecaa:	e7fe      	b.n	800ecaa <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800ecb0:	f000 fb08 	bl	800f2c4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d003      	beq.n	800ecc2 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ecba:	6a3b      	ldr	r3, [r7, #32]
 800ecbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ecc2:	6a3b      	ldr	r3, [r7, #32]
 800ecc4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800ecc8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ecca:	6a3b      	ldr	r3, [r7, #32]
 800eccc:	2202      	movs	r2, #2
 800ecce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 800ecd2:	79fb      	ldrb	r3, [r7, #7]
 800ecd4:	2b04      	cmp	r3, #4
 800ecd6:	d828      	bhi.n	800ed2a <xTaskGenericNotify+0xae>
 800ecd8:	a201      	add	r2, pc, #4	; (adr r2, 800ece0 <xTaskGenericNotify+0x64>)
 800ecda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecde:	bf00      	nop
 800ece0:	0800ed4b 	.word	0x0800ed4b
 800ece4:	0800ecf5 	.word	0x0800ecf5
 800ece8:	0800ed03 	.word	0x0800ed03
 800ecec:	0800ed0f 	.word	0x0800ed0f
 800ecf0:	0800ed17 	.word	0x0800ed17
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ecf4:	6a3b      	ldr	r3, [r7, #32]
 800ecf6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	431a      	orrs	r2, r3
 800ecfc:	6a3b      	ldr	r3, [r7, #32]
 800ecfe:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800ed00:	e026      	b.n	800ed50 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ed02:	6a3b      	ldr	r3, [r7, #32]
 800ed04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed06:	1c5a      	adds	r2, r3, #1
 800ed08:	6a3b      	ldr	r3, [r7, #32]
 800ed0a:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800ed0c:	e020      	b.n	800ed50 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ed0e:	6a3b      	ldr	r3, [r7, #32]
 800ed10:	68ba      	ldr	r2, [r7, #8]
 800ed12:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800ed14:	e01c      	b.n	800ed50 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ed16:	7ffb      	ldrb	r3, [r7, #31]
 800ed18:	2b02      	cmp	r3, #2
 800ed1a:	d003      	beq.n	800ed24 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ed1c:	6a3b      	ldr	r3, [r7, #32]
 800ed1e:	68ba      	ldr	r2, [r7, #8]
 800ed20:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ed22:	e015      	b.n	800ed50 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800ed24:	2300      	movs	r3, #0
 800ed26:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800ed28:	e012      	b.n	800ed50 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ed2a:	6a3b      	ldr	r3, [r7, #32]
 800ed2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed32:	d00c      	beq.n	800ed4e <xTaskGenericNotify+0xd2>
	__asm volatile
 800ed34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed38:	f383 8811 	msr	BASEPRI, r3
 800ed3c:	f3bf 8f6f 	isb	sy
 800ed40:	f3bf 8f4f 	dsb	sy
 800ed44:	617b      	str	r3, [r7, #20]
}
 800ed46:	bf00      	nop
 800ed48:	e7fe      	b.n	800ed48 <xTaskGenericNotify+0xcc>
					break;
 800ed4a:	bf00      	nop
 800ed4c:	e000      	b.n	800ed50 <xTaskGenericNotify+0xd4>

					break;
 800ed4e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ed50:	7ffb      	ldrb	r3, [r7, #31]
 800ed52:	2b01      	cmp	r3, #1
 800ed54:	d139      	bne.n	800edca <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ed56:	6a3b      	ldr	r3, [r7, #32]
 800ed58:	3304      	adds	r3, #4
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7fd fffa 	bl	800cd54 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800ed60:	6a3b      	ldr	r3, [r7, #32]
 800ed62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed64:	2201      	movs	r2, #1
 800ed66:	409a      	lsls	r2, r3
 800ed68:	4b1b      	ldr	r3, [pc, #108]	; (800edd8 <xTaskGenericNotify+0x15c>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	4313      	orrs	r3, r2
 800ed6e:	4a1a      	ldr	r2, [pc, #104]	; (800edd8 <xTaskGenericNotify+0x15c>)
 800ed70:	6013      	str	r3, [r2, #0]
 800ed72:	6a3b      	ldr	r3, [r7, #32]
 800ed74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed76:	4613      	mov	r3, r2
 800ed78:	009b      	lsls	r3, r3, #2
 800ed7a:	4413      	add	r3, r2
 800ed7c:	009b      	lsls	r3, r3, #2
 800ed7e:	4a17      	ldr	r2, [pc, #92]	; (800eddc <xTaskGenericNotify+0x160>)
 800ed80:	441a      	add	r2, r3
 800ed82:	6a3b      	ldr	r3, [r7, #32]
 800ed84:	3304      	adds	r3, #4
 800ed86:	4619      	mov	r1, r3
 800ed88:	4610      	mov	r0, r2
 800ed8a:	f7fd ff86 	bl	800cc9a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ed8e:	6a3b      	ldr	r3, [r7, #32]
 800ed90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d00a      	beq.n	800edac <xTaskGenericNotify+0x130>
	__asm volatile
 800ed96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed9a:	f383 8811 	msr	BASEPRI, r3
 800ed9e:	f3bf 8f6f 	isb	sy
 800eda2:	f3bf 8f4f 	dsb	sy
 800eda6:	613b      	str	r3, [r7, #16]
}
 800eda8:	bf00      	nop
 800edaa:	e7fe      	b.n	800edaa <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800edac:	6a3b      	ldr	r3, [r7, #32]
 800edae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edb0:	4b0b      	ldr	r3, [pc, #44]	; (800ede0 <xTaskGenericNotify+0x164>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d907      	bls.n	800edca <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800edba:	4b0a      	ldr	r3, [pc, #40]	; (800ede4 <xTaskGenericNotify+0x168>)
 800edbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edc0:	601a      	str	r2, [r3, #0]
 800edc2:	f3bf 8f4f 	dsb	sy
 800edc6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800edca:	f000 faab 	bl	800f324 <vPortExitCritical>

		return xReturn;
 800edce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800edd0:	4618      	mov	r0, r3
 800edd2:	3728      	adds	r7, #40	; 0x28
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}
 800edd8:	20000e0c 	.word	0x20000e0c
 800eddc:	20000d08 	.word	0x20000d08
 800ede0:	20000d04 	.word	0x20000d04
 800ede4:	e000ed04 	.word	0xe000ed04

0800ede8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b08e      	sub	sp, #56	; 0x38
 800edec:	af00      	add	r7, sp, #0
 800edee:	60f8      	str	r0, [r7, #12]
 800edf0:	60b9      	str	r1, [r7, #8]
 800edf2:	603b      	str	r3, [r7, #0]
 800edf4:	4613      	mov	r3, r2
 800edf6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800edf8:	2301      	movs	r3, #1
 800edfa:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d10a      	bne.n	800ee18 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800ee02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee06:	f383 8811 	msr	BASEPRI, r3
 800ee0a:	f3bf 8f6f 	isb	sy
 800ee0e:	f3bf 8f4f 	dsb	sy
 800ee12:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ee14:	bf00      	nop
 800ee16:	e7fe      	b.n	800ee16 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ee18:	f000 fb36 	bl	800f488 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800ee20:	f3ef 8211 	mrs	r2, BASEPRI
 800ee24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee28:	f383 8811 	msr	BASEPRI, r3
 800ee2c:	f3bf 8f6f 	isb	sy
 800ee30:	f3bf 8f4f 	dsb	sy
 800ee34:	623a      	str	r2, [r7, #32]
 800ee36:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800ee38:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ee3a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d003      	beq.n	800ee4a <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ee42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ee4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee4c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800ee50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ee54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee56:	2202      	movs	r2, #2
 800ee58:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 800ee5c:	79fb      	ldrb	r3, [r7, #7]
 800ee5e:	2b04      	cmp	r3, #4
 800ee60:	d828      	bhi.n	800eeb4 <xTaskGenericNotifyFromISR+0xcc>
 800ee62:	a201      	add	r2, pc, #4	; (adr r2, 800ee68 <xTaskGenericNotifyFromISR+0x80>)
 800ee64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee68:	0800eed5 	.word	0x0800eed5
 800ee6c:	0800ee7d 	.word	0x0800ee7d
 800ee70:	0800ee8b 	.word	0x0800ee8b
 800ee74:	0800ee97 	.word	0x0800ee97
 800ee78:	0800ee9f 	.word	0x0800ee9f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ee7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	431a      	orrs	r2, r3
 800ee84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee86:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800ee88:	e027      	b.n	800eeda <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ee8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee8e:	1c5a      	adds	r2, r3, #1
 800ee90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee92:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800ee94:	e021      	b.n	800eeda <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ee96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee98:	68ba      	ldr	r2, [r7, #8]
 800ee9a:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800ee9c:	e01d      	b.n	800eeda <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ee9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800eea2:	2b02      	cmp	r3, #2
 800eea4:	d003      	beq.n	800eeae <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800eea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea8:	68ba      	ldr	r2, [r7, #8]
 800eeaa:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800eeac:	e015      	b.n	800eeda <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800eeb2:	e012      	b.n	800eeda <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800eeb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eeb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eebc:	d00c      	beq.n	800eed8 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800eebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eec2:	f383 8811 	msr	BASEPRI, r3
 800eec6:	f3bf 8f6f 	isb	sy
 800eeca:	f3bf 8f4f 	dsb	sy
 800eece:	61bb      	str	r3, [r7, #24]
}
 800eed0:	bf00      	nop
 800eed2:	e7fe      	b.n	800eed2 <xTaskGenericNotifyFromISR+0xea>
					break;
 800eed4:	bf00      	nop
 800eed6:	e000      	b.n	800eeda <xTaskGenericNotifyFromISR+0xf2>
					break;
 800eed8:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800eeda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800eede:	2b01      	cmp	r3, #1
 800eee0:	d145      	bne.n	800ef6e <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800eee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d00a      	beq.n	800ef00 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800eeea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeee:	f383 8811 	msr	BASEPRI, r3
 800eef2:	f3bf 8f6f 	isb	sy
 800eef6:	f3bf 8f4f 	dsb	sy
 800eefa:	617b      	str	r3, [r7, #20]
}
 800eefc:	bf00      	nop
 800eefe:	e7fe      	b.n	800eefe <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef00:	4b20      	ldr	r3, [pc, #128]	; (800ef84 <xTaskGenericNotifyFromISR+0x19c>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d11c      	bne.n	800ef42 <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef0a:	3304      	adds	r3, #4
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f7fd ff21 	bl	800cd54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ef12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef16:	2201      	movs	r2, #1
 800ef18:	409a      	lsls	r2, r3
 800ef1a:	4b1b      	ldr	r3, [pc, #108]	; (800ef88 <xTaskGenericNotifyFromISR+0x1a0>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	4313      	orrs	r3, r2
 800ef20:	4a19      	ldr	r2, [pc, #100]	; (800ef88 <xTaskGenericNotifyFromISR+0x1a0>)
 800ef22:	6013      	str	r3, [r2, #0]
 800ef24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef28:	4613      	mov	r3, r2
 800ef2a:	009b      	lsls	r3, r3, #2
 800ef2c:	4413      	add	r3, r2
 800ef2e:	009b      	lsls	r3, r3, #2
 800ef30:	4a16      	ldr	r2, [pc, #88]	; (800ef8c <xTaskGenericNotifyFromISR+0x1a4>)
 800ef32:	441a      	add	r2, r3
 800ef34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef36:	3304      	adds	r3, #4
 800ef38:	4619      	mov	r1, r3
 800ef3a:	4610      	mov	r0, r2
 800ef3c:	f7fd fead 	bl	800cc9a <vListInsertEnd>
 800ef40:	e005      	b.n	800ef4e <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800ef42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef44:	3318      	adds	r3, #24
 800ef46:	4619      	mov	r1, r3
 800ef48:	4811      	ldr	r0, [pc, #68]	; (800ef90 <xTaskGenericNotifyFromISR+0x1a8>)
 800ef4a:	f7fd fea6 	bl	800cc9a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ef4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef52:	4b10      	ldr	r3, [pc, #64]	; (800ef94 <xTaskGenericNotifyFromISR+0x1ac>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d908      	bls.n	800ef6e <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800ef5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d002      	beq.n	800ef68 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800ef62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef64:	2201      	movs	r2, #1
 800ef66:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800ef68:	4b0b      	ldr	r3, [pc, #44]	; (800ef98 <xTaskGenericNotifyFromISR+0x1b0>)
 800ef6a:	2201      	movs	r2, #1
 800ef6c:	601a      	str	r2, [r3, #0]
 800ef6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef70:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ef72:	693b      	ldr	r3, [r7, #16]
 800ef74:	f383 8811 	msr	BASEPRI, r3
}
 800ef78:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800ef7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3738      	adds	r7, #56	; 0x38
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}
 800ef84:	20000e2c 	.word	0x20000e2c
 800ef88:	20000e0c 	.word	0x20000e0c
 800ef8c:	20000d08 	.word	0x20000d08
 800ef90:	20000dc4 	.word	0x20000dc4
 800ef94:	20000d04 	.word	0x20000d04
 800ef98:	20000e18 	.word	0x20000e18

0800ef9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b084      	sub	sp, #16
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
 800efa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800efa6:	4b29      	ldr	r3, [pc, #164]	; (800f04c <prvAddCurrentTaskToDelayedList+0xb0>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800efac:	4b28      	ldr	r3, [pc, #160]	; (800f050 <prvAddCurrentTaskToDelayedList+0xb4>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	3304      	adds	r3, #4
 800efb2:	4618      	mov	r0, r3
 800efb4:	f7fd fece 	bl	800cd54 <uxListRemove>
 800efb8:	4603      	mov	r3, r0
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d10b      	bne.n	800efd6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800efbe:	4b24      	ldr	r3, [pc, #144]	; (800f050 <prvAddCurrentTaskToDelayedList+0xb4>)
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efc4:	2201      	movs	r2, #1
 800efc6:	fa02 f303 	lsl.w	r3, r2, r3
 800efca:	43da      	mvns	r2, r3
 800efcc:	4b21      	ldr	r3, [pc, #132]	; (800f054 <prvAddCurrentTaskToDelayedList+0xb8>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	4013      	ands	r3, r2
 800efd2:	4a20      	ldr	r2, [pc, #128]	; (800f054 <prvAddCurrentTaskToDelayedList+0xb8>)
 800efd4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efdc:	d10a      	bne.n	800eff4 <prvAddCurrentTaskToDelayedList+0x58>
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d007      	beq.n	800eff4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800efe4:	4b1a      	ldr	r3, [pc, #104]	; (800f050 <prvAddCurrentTaskToDelayedList+0xb4>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	3304      	adds	r3, #4
 800efea:	4619      	mov	r1, r3
 800efec:	481a      	ldr	r0, [pc, #104]	; (800f058 <prvAddCurrentTaskToDelayedList+0xbc>)
 800efee:	f7fd fe54 	bl	800cc9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800eff2:	e026      	b.n	800f042 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800eff4:	68fa      	ldr	r2, [r7, #12]
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	4413      	add	r3, r2
 800effa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800effc:	4b14      	ldr	r3, [pc, #80]	; (800f050 <prvAddCurrentTaskToDelayedList+0xb4>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	68ba      	ldr	r2, [r7, #8]
 800f002:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f004:	68ba      	ldr	r2, [r7, #8]
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	429a      	cmp	r2, r3
 800f00a:	d209      	bcs.n	800f020 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f00c:	4b13      	ldr	r3, [pc, #76]	; (800f05c <prvAddCurrentTaskToDelayedList+0xc0>)
 800f00e:	681a      	ldr	r2, [r3, #0]
 800f010:	4b0f      	ldr	r3, [pc, #60]	; (800f050 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	3304      	adds	r3, #4
 800f016:	4619      	mov	r1, r3
 800f018:	4610      	mov	r0, r2
 800f01a:	f7fd fe62 	bl	800cce2 <vListInsert>
}
 800f01e:	e010      	b.n	800f042 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f020:	4b0f      	ldr	r3, [pc, #60]	; (800f060 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f022:	681a      	ldr	r2, [r3, #0]
 800f024:	4b0a      	ldr	r3, [pc, #40]	; (800f050 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	3304      	adds	r3, #4
 800f02a:	4619      	mov	r1, r3
 800f02c:	4610      	mov	r0, r2
 800f02e:	f7fd fe58 	bl	800cce2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f032:	4b0c      	ldr	r3, [pc, #48]	; (800f064 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	68ba      	ldr	r2, [r7, #8]
 800f038:	429a      	cmp	r2, r3
 800f03a:	d202      	bcs.n	800f042 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f03c:	4a09      	ldr	r2, [pc, #36]	; (800f064 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f03e:	68bb      	ldr	r3, [r7, #8]
 800f040:	6013      	str	r3, [r2, #0]
}
 800f042:	bf00      	nop
 800f044:	3710      	adds	r7, #16
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}
 800f04a:	bf00      	nop
 800f04c:	20000e08 	.word	0x20000e08
 800f050:	20000d04 	.word	0x20000d04
 800f054:	20000e0c 	.word	0x20000e0c
 800f058:	20000df0 	.word	0x20000df0
 800f05c:	20000dc0 	.word	0x20000dc0
 800f060:	20000dbc 	.word	0x20000dbc
 800f064:	20000e24 	.word	0x20000e24

0800f068 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f068:	b480      	push	{r7}
 800f06a:	b085      	sub	sp, #20
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	60f8      	str	r0, [r7, #12]
 800f070:	60b9      	str	r1, [r7, #8]
 800f072:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	3b04      	subs	r3, #4
 800f078:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f080:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	3b04      	subs	r3, #4
 800f086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	f023 0201 	bic.w	r2, r3, #1
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	3b04      	subs	r3, #4
 800f096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f098:	4a0c      	ldr	r2, [pc, #48]	; (800f0cc <pxPortInitialiseStack+0x64>)
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	3b14      	subs	r3, #20
 800f0a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f0a4:	687a      	ldr	r2, [r7, #4]
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	3b04      	subs	r3, #4
 800f0ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	f06f 0202 	mvn.w	r2, #2
 800f0b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	3b20      	subs	r3, #32
 800f0bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f0be:	68fb      	ldr	r3, [r7, #12]
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3714      	adds	r7, #20
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ca:	4770      	bx	lr
 800f0cc:	0800f0d1 	.word	0x0800f0d1

0800f0d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f0d0:	b480      	push	{r7}
 800f0d2:	b085      	sub	sp, #20
 800f0d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f0da:	4b12      	ldr	r3, [pc, #72]	; (800f124 <prvTaskExitError+0x54>)
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0e2:	d00a      	beq.n	800f0fa <prvTaskExitError+0x2a>
	__asm volatile
 800f0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0e8:	f383 8811 	msr	BASEPRI, r3
 800f0ec:	f3bf 8f6f 	isb	sy
 800f0f0:	f3bf 8f4f 	dsb	sy
 800f0f4:	60fb      	str	r3, [r7, #12]
}
 800f0f6:	bf00      	nop
 800f0f8:	e7fe      	b.n	800f0f8 <prvTaskExitError+0x28>
	__asm volatile
 800f0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0fe:	f383 8811 	msr	BASEPRI, r3
 800f102:	f3bf 8f6f 	isb	sy
 800f106:	f3bf 8f4f 	dsb	sy
 800f10a:	60bb      	str	r3, [r7, #8]
}
 800f10c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f10e:	bf00      	nop
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d0fc      	beq.n	800f110 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f116:	bf00      	nop
 800f118:	bf00      	nop
 800f11a:	3714      	adds	r7, #20
 800f11c:	46bd      	mov	sp, r7
 800f11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f122:	4770      	bx	lr
 800f124:	20000124 	.word	0x20000124
	...

0800f130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f130:	4b07      	ldr	r3, [pc, #28]	; (800f150 <pxCurrentTCBConst2>)
 800f132:	6819      	ldr	r1, [r3, #0]
 800f134:	6808      	ldr	r0, [r1, #0]
 800f136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f13a:	f380 8809 	msr	PSP, r0
 800f13e:	f3bf 8f6f 	isb	sy
 800f142:	f04f 0000 	mov.w	r0, #0
 800f146:	f380 8811 	msr	BASEPRI, r0
 800f14a:	4770      	bx	lr
 800f14c:	f3af 8000 	nop.w

0800f150 <pxCurrentTCBConst2>:
 800f150:	20000d04 	.word	0x20000d04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f154:	bf00      	nop
 800f156:	bf00      	nop

0800f158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f158:	4808      	ldr	r0, [pc, #32]	; (800f17c <prvPortStartFirstTask+0x24>)
 800f15a:	6800      	ldr	r0, [r0, #0]
 800f15c:	6800      	ldr	r0, [r0, #0]
 800f15e:	f380 8808 	msr	MSP, r0
 800f162:	f04f 0000 	mov.w	r0, #0
 800f166:	f380 8814 	msr	CONTROL, r0
 800f16a:	b662      	cpsie	i
 800f16c:	b661      	cpsie	f
 800f16e:	f3bf 8f4f 	dsb	sy
 800f172:	f3bf 8f6f 	isb	sy
 800f176:	df00      	svc	0
 800f178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f17a:	bf00      	nop
 800f17c:	e000ed08 	.word	0xe000ed08

0800f180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b086      	sub	sp, #24
 800f184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f186:	4b46      	ldr	r3, [pc, #280]	; (800f2a0 <xPortStartScheduler+0x120>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	4a46      	ldr	r2, [pc, #280]	; (800f2a4 <xPortStartScheduler+0x124>)
 800f18c:	4293      	cmp	r3, r2
 800f18e:	d10a      	bne.n	800f1a6 <xPortStartScheduler+0x26>
	__asm volatile
 800f190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f194:	f383 8811 	msr	BASEPRI, r3
 800f198:	f3bf 8f6f 	isb	sy
 800f19c:	f3bf 8f4f 	dsb	sy
 800f1a0:	613b      	str	r3, [r7, #16]
}
 800f1a2:	bf00      	nop
 800f1a4:	e7fe      	b.n	800f1a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f1a6:	4b3e      	ldr	r3, [pc, #248]	; (800f2a0 <xPortStartScheduler+0x120>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	4a3f      	ldr	r2, [pc, #252]	; (800f2a8 <xPortStartScheduler+0x128>)
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d10a      	bne.n	800f1c6 <xPortStartScheduler+0x46>
	__asm volatile
 800f1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b4:	f383 8811 	msr	BASEPRI, r3
 800f1b8:	f3bf 8f6f 	isb	sy
 800f1bc:	f3bf 8f4f 	dsb	sy
 800f1c0:	60fb      	str	r3, [r7, #12]
}
 800f1c2:	bf00      	nop
 800f1c4:	e7fe      	b.n	800f1c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f1c6:	4b39      	ldr	r3, [pc, #228]	; (800f2ac <xPortStartScheduler+0x12c>)
 800f1c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	781b      	ldrb	r3, [r3, #0]
 800f1ce:	b2db      	uxtb	r3, r3
 800f1d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f1d2:	697b      	ldr	r3, [r7, #20]
 800f1d4:	22ff      	movs	r2, #255	; 0xff
 800f1d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f1d8:	697b      	ldr	r3, [r7, #20]
 800f1da:	781b      	ldrb	r3, [r3, #0]
 800f1dc:	b2db      	uxtb	r3, r3
 800f1de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f1e0:	78fb      	ldrb	r3, [r7, #3]
 800f1e2:	b2db      	uxtb	r3, r3
 800f1e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f1e8:	b2da      	uxtb	r2, r3
 800f1ea:	4b31      	ldr	r3, [pc, #196]	; (800f2b0 <xPortStartScheduler+0x130>)
 800f1ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f1ee:	4b31      	ldr	r3, [pc, #196]	; (800f2b4 <xPortStartScheduler+0x134>)
 800f1f0:	2207      	movs	r2, #7
 800f1f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f1f4:	e009      	b.n	800f20a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f1f6:	4b2f      	ldr	r3, [pc, #188]	; (800f2b4 <xPortStartScheduler+0x134>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	3b01      	subs	r3, #1
 800f1fc:	4a2d      	ldr	r2, [pc, #180]	; (800f2b4 <xPortStartScheduler+0x134>)
 800f1fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f200:	78fb      	ldrb	r3, [r7, #3]
 800f202:	b2db      	uxtb	r3, r3
 800f204:	005b      	lsls	r3, r3, #1
 800f206:	b2db      	uxtb	r3, r3
 800f208:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f20a:	78fb      	ldrb	r3, [r7, #3]
 800f20c:	b2db      	uxtb	r3, r3
 800f20e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f212:	2b80      	cmp	r3, #128	; 0x80
 800f214:	d0ef      	beq.n	800f1f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f216:	4b27      	ldr	r3, [pc, #156]	; (800f2b4 <xPortStartScheduler+0x134>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	f1c3 0307 	rsb	r3, r3, #7
 800f21e:	2b04      	cmp	r3, #4
 800f220:	d00a      	beq.n	800f238 <xPortStartScheduler+0xb8>
	__asm volatile
 800f222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f226:	f383 8811 	msr	BASEPRI, r3
 800f22a:	f3bf 8f6f 	isb	sy
 800f22e:	f3bf 8f4f 	dsb	sy
 800f232:	60bb      	str	r3, [r7, #8]
}
 800f234:	bf00      	nop
 800f236:	e7fe      	b.n	800f236 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f238:	4b1e      	ldr	r3, [pc, #120]	; (800f2b4 <xPortStartScheduler+0x134>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	021b      	lsls	r3, r3, #8
 800f23e:	4a1d      	ldr	r2, [pc, #116]	; (800f2b4 <xPortStartScheduler+0x134>)
 800f240:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f242:	4b1c      	ldr	r3, [pc, #112]	; (800f2b4 <xPortStartScheduler+0x134>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f24a:	4a1a      	ldr	r2, [pc, #104]	; (800f2b4 <xPortStartScheduler+0x134>)
 800f24c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	b2da      	uxtb	r2, r3
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f256:	4b18      	ldr	r3, [pc, #96]	; (800f2b8 <xPortStartScheduler+0x138>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	4a17      	ldr	r2, [pc, #92]	; (800f2b8 <xPortStartScheduler+0x138>)
 800f25c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f260:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f262:	4b15      	ldr	r3, [pc, #84]	; (800f2b8 <xPortStartScheduler+0x138>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	4a14      	ldr	r2, [pc, #80]	; (800f2b8 <xPortStartScheduler+0x138>)
 800f268:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f26c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f26e:	f000 f8dd 	bl	800f42c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f272:	4b12      	ldr	r3, [pc, #72]	; (800f2bc <xPortStartScheduler+0x13c>)
 800f274:	2200      	movs	r2, #0
 800f276:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f278:	f000 f8fc 	bl	800f474 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f27c:	4b10      	ldr	r3, [pc, #64]	; (800f2c0 <xPortStartScheduler+0x140>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	4a0f      	ldr	r2, [pc, #60]	; (800f2c0 <xPortStartScheduler+0x140>)
 800f282:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f286:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f288:	f7ff ff66 	bl	800f158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f28c:	f7ff f87e 	bl	800e38c <vTaskSwitchContext>
	prvTaskExitError();
 800f290:	f7ff ff1e 	bl	800f0d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f294:	2300      	movs	r3, #0
}
 800f296:	4618      	mov	r0, r3
 800f298:	3718      	adds	r7, #24
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}
 800f29e:	bf00      	nop
 800f2a0:	e000ed00 	.word	0xe000ed00
 800f2a4:	410fc271 	.word	0x410fc271
 800f2a8:	410fc270 	.word	0x410fc270
 800f2ac:	e000e400 	.word	0xe000e400
 800f2b0:	20000e30 	.word	0x20000e30
 800f2b4:	20000e34 	.word	0x20000e34
 800f2b8:	e000ed20 	.word	0xe000ed20
 800f2bc:	20000124 	.word	0x20000124
 800f2c0:	e000ef34 	.word	0xe000ef34

0800f2c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b083      	sub	sp, #12
 800f2c8:	af00      	add	r7, sp, #0
	__asm volatile
 800f2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ce:	f383 8811 	msr	BASEPRI, r3
 800f2d2:	f3bf 8f6f 	isb	sy
 800f2d6:	f3bf 8f4f 	dsb	sy
 800f2da:	607b      	str	r3, [r7, #4]
}
 800f2dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f2de:	4b0f      	ldr	r3, [pc, #60]	; (800f31c <vPortEnterCritical+0x58>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	4a0d      	ldr	r2, [pc, #52]	; (800f31c <vPortEnterCritical+0x58>)
 800f2e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f2e8:	4b0c      	ldr	r3, [pc, #48]	; (800f31c <vPortEnterCritical+0x58>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	2b01      	cmp	r3, #1
 800f2ee:	d10f      	bne.n	800f310 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f2f0:	4b0b      	ldr	r3, [pc, #44]	; (800f320 <vPortEnterCritical+0x5c>)
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	b2db      	uxtb	r3, r3
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d00a      	beq.n	800f310 <vPortEnterCritical+0x4c>
	__asm volatile
 800f2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2fe:	f383 8811 	msr	BASEPRI, r3
 800f302:	f3bf 8f6f 	isb	sy
 800f306:	f3bf 8f4f 	dsb	sy
 800f30a:	603b      	str	r3, [r7, #0]
}
 800f30c:	bf00      	nop
 800f30e:	e7fe      	b.n	800f30e <vPortEnterCritical+0x4a>
	}
}
 800f310:	bf00      	nop
 800f312:	370c      	adds	r7, #12
 800f314:	46bd      	mov	sp, r7
 800f316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31a:	4770      	bx	lr
 800f31c:	20000124 	.word	0x20000124
 800f320:	e000ed04 	.word	0xe000ed04

0800f324 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f324:	b480      	push	{r7}
 800f326:	b083      	sub	sp, #12
 800f328:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f32a:	4b12      	ldr	r3, [pc, #72]	; (800f374 <vPortExitCritical+0x50>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d10a      	bne.n	800f348 <vPortExitCritical+0x24>
	__asm volatile
 800f332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f336:	f383 8811 	msr	BASEPRI, r3
 800f33a:	f3bf 8f6f 	isb	sy
 800f33e:	f3bf 8f4f 	dsb	sy
 800f342:	607b      	str	r3, [r7, #4]
}
 800f344:	bf00      	nop
 800f346:	e7fe      	b.n	800f346 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f348:	4b0a      	ldr	r3, [pc, #40]	; (800f374 <vPortExitCritical+0x50>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	3b01      	subs	r3, #1
 800f34e:	4a09      	ldr	r2, [pc, #36]	; (800f374 <vPortExitCritical+0x50>)
 800f350:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f352:	4b08      	ldr	r3, [pc, #32]	; (800f374 <vPortExitCritical+0x50>)
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d105      	bne.n	800f366 <vPortExitCritical+0x42>
 800f35a:	2300      	movs	r3, #0
 800f35c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	f383 8811 	msr	BASEPRI, r3
}
 800f364:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f366:	bf00      	nop
 800f368:	370c      	adds	r7, #12
 800f36a:	46bd      	mov	sp, r7
 800f36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f370:	4770      	bx	lr
 800f372:	bf00      	nop
 800f374:	20000124 	.word	0x20000124
	...

0800f380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f380:	f3ef 8009 	mrs	r0, PSP
 800f384:	f3bf 8f6f 	isb	sy
 800f388:	4b15      	ldr	r3, [pc, #84]	; (800f3e0 <pxCurrentTCBConst>)
 800f38a:	681a      	ldr	r2, [r3, #0]
 800f38c:	f01e 0f10 	tst.w	lr, #16
 800f390:	bf08      	it	eq
 800f392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f39a:	6010      	str	r0, [r2, #0]
 800f39c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f3a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f3a4:	f380 8811 	msr	BASEPRI, r0
 800f3a8:	f3bf 8f4f 	dsb	sy
 800f3ac:	f3bf 8f6f 	isb	sy
 800f3b0:	f7fe ffec 	bl	800e38c <vTaskSwitchContext>
 800f3b4:	f04f 0000 	mov.w	r0, #0
 800f3b8:	f380 8811 	msr	BASEPRI, r0
 800f3bc:	bc09      	pop	{r0, r3}
 800f3be:	6819      	ldr	r1, [r3, #0]
 800f3c0:	6808      	ldr	r0, [r1, #0]
 800f3c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3c6:	f01e 0f10 	tst.w	lr, #16
 800f3ca:	bf08      	it	eq
 800f3cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f3d0:	f380 8809 	msr	PSP, r0
 800f3d4:	f3bf 8f6f 	isb	sy
 800f3d8:	4770      	bx	lr
 800f3da:	bf00      	nop
 800f3dc:	f3af 8000 	nop.w

0800f3e0 <pxCurrentTCBConst>:
 800f3e0:	20000d04 	.word	0x20000d04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f3e4:	bf00      	nop
 800f3e6:	bf00      	nop

0800f3e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b082      	sub	sp, #8
 800f3ec:	af00      	add	r7, sp, #0
	__asm volatile
 800f3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3f2:	f383 8811 	msr	BASEPRI, r3
 800f3f6:	f3bf 8f6f 	isb	sy
 800f3fa:	f3bf 8f4f 	dsb	sy
 800f3fe:	607b      	str	r3, [r7, #4]
}
 800f400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f402:	f7fe ff0b 	bl	800e21c <xTaskIncrementTick>
 800f406:	4603      	mov	r3, r0
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d003      	beq.n	800f414 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f40c:	4b06      	ldr	r3, [pc, #24]	; (800f428 <SysTick_Handler+0x40>)
 800f40e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f412:	601a      	str	r2, [r3, #0]
 800f414:	2300      	movs	r3, #0
 800f416:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	f383 8811 	msr	BASEPRI, r3
}
 800f41e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f420:	bf00      	nop
 800f422:	3708      	adds	r7, #8
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}
 800f428:	e000ed04 	.word	0xe000ed04

0800f42c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f42c:	b480      	push	{r7}
 800f42e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f430:	4b0b      	ldr	r3, [pc, #44]	; (800f460 <vPortSetupTimerInterrupt+0x34>)
 800f432:	2200      	movs	r2, #0
 800f434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f436:	4b0b      	ldr	r3, [pc, #44]	; (800f464 <vPortSetupTimerInterrupt+0x38>)
 800f438:	2200      	movs	r2, #0
 800f43a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f43c:	4b0a      	ldr	r3, [pc, #40]	; (800f468 <vPortSetupTimerInterrupt+0x3c>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	4a0a      	ldr	r2, [pc, #40]	; (800f46c <vPortSetupTimerInterrupt+0x40>)
 800f442:	fba2 2303 	umull	r2, r3, r2, r3
 800f446:	099b      	lsrs	r3, r3, #6
 800f448:	4a09      	ldr	r2, [pc, #36]	; (800f470 <vPortSetupTimerInterrupt+0x44>)
 800f44a:	3b01      	subs	r3, #1
 800f44c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f44e:	4b04      	ldr	r3, [pc, #16]	; (800f460 <vPortSetupTimerInterrupt+0x34>)
 800f450:	2207      	movs	r2, #7
 800f452:	601a      	str	r2, [r3, #0]
}
 800f454:	bf00      	nop
 800f456:	46bd      	mov	sp, r7
 800f458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45c:	4770      	bx	lr
 800f45e:	bf00      	nop
 800f460:	e000e010 	.word	0xe000e010
 800f464:	e000e018 	.word	0xe000e018
 800f468:	200000b0 	.word	0x200000b0
 800f46c:	10624dd3 	.word	0x10624dd3
 800f470:	e000e014 	.word	0xe000e014

0800f474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f474:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f484 <vPortEnableVFP+0x10>
 800f478:	6801      	ldr	r1, [r0, #0]
 800f47a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f47e:	6001      	str	r1, [r0, #0]
 800f480:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f482:	bf00      	nop
 800f484:	e000ed88 	.word	0xe000ed88

0800f488 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f488:	b480      	push	{r7}
 800f48a:	b085      	sub	sp, #20
 800f48c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f48e:	f3ef 8305 	mrs	r3, IPSR
 800f492:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	2b0f      	cmp	r3, #15
 800f498:	d914      	bls.n	800f4c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f49a:	4a17      	ldr	r2, [pc, #92]	; (800f4f8 <vPortValidateInterruptPriority+0x70>)
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	4413      	add	r3, r2
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f4a4:	4b15      	ldr	r3, [pc, #84]	; (800f4fc <vPortValidateInterruptPriority+0x74>)
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	7afa      	ldrb	r2, [r7, #11]
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d20a      	bcs.n	800f4c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4b2:	f383 8811 	msr	BASEPRI, r3
 800f4b6:	f3bf 8f6f 	isb	sy
 800f4ba:	f3bf 8f4f 	dsb	sy
 800f4be:	607b      	str	r3, [r7, #4]
}
 800f4c0:	bf00      	nop
 800f4c2:	e7fe      	b.n	800f4c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f4c4:	4b0e      	ldr	r3, [pc, #56]	; (800f500 <vPortValidateInterruptPriority+0x78>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f4cc:	4b0d      	ldr	r3, [pc, #52]	; (800f504 <vPortValidateInterruptPriority+0x7c>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d90a      	bls.n	800f4ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4d8:	f383 8811 	msr	BASEPRI, r3
 800f4dc:	f3bf 8f6f 	isb	sy
 800f4e0:	f3bf 8f4f 	dsb	sy
 800f4e4:	603b      	str	r3, [r7, #0]
}
 800f4e6:	bf00      	nop
 800f4e8:	e7fe      	b.n	800f4e8 <vPortValidateInterruptPriority+0x60>
	}
 800f4ea:	bf00      	nop
 800f4ec:	3714      	adds	r7, #20
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f4:	4770      	bx	lr
 800f4f6:	bf00      	nop
 800f4f8:	e000e3f0 	.word	0xe000e3f0
 800f4fc:	20000e30 	.word	0x20000e30
 800f500:	e000ed0c 	.word	0xe000ed0c
 800f504:	20000e34 	.word	0x20000e34

0800f508 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b08a      	sub	sp, #40	; 0x28
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f510:	2300      	movs	r3, #0
 800f512:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f514:	f7fe fdd8 	bl	800e0c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f518:	4b5d      	ldr	r3, [pc, #372]	; (800f690 <pvPortMalloc+0x188>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d101      	bne.n	800f524 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f520:	f000 f924 	bl	800f76c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f524:	4b5b      	ldr	r3, [pc, #364]	; (800f694 <pvPortMalloc+0x18c>)
 800f526:	681a      	ldr	r2, [r3, #0]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	4013      	ands	r3, r2
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	f040 8093 	bne.w	800f658 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d01d      	beq.n	800f574 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f538:	2208      	movs	r2, #8
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	4413      	add	r3, r2
 800f53e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f003 0307 	and.w	r3, r3, #7
 800f546:	2b00      	cmp	r3, #0
 800f548:	d014      	beq.n	800f574 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f023 0307 	bic.w	r3, r3, #7
 800f550:	3308      	adds	r3, #8
 800f552:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f003 0307 	and.w	r3, r3, #7
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d00a      	beq.n	800f574 <pvPortMalloc+0x6c>
	__asm volatile
 800f55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f562:	f383 8811 	msr	BASEPRI, r3
 800f566:	f3bf 8f6f 	isb	sy
 800f56a:	f3bf 8f4f 	dsb	sy
 800f56e:	617b      	str	r3, [r7, #20]
}
 800f570:	bf00      	nop
 800f572:	e7fe      	b.n	800f572 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d06e      	beq.n	800f658 <pvPortMalloc+0x150>
 800f57a:	4b47      	ldr	r3, [pc, #284]	; (800f698 <pvPortMalloc+0x190>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	687a      	ldr	r2, [r7, #4]
 800f580:	429a      	cmp	r2, r3
 800f582:	d869      	bhi.n	800f658 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f584:	4b45      	ldr	r3, [pc, #276]	; (800f69c <pvPortMalloc+0x194>)
 800f586:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f588:	4b44      	ldr	r3, [pc, #272]	; (800f69c <pvPortMalloc+0x194>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f58e:	e004      	b.n	800f59a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f592:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f59c:	685b      	ldr	r3, [r3, #4]
 800f59e:	687a      	ldr	r2, [r7, #4]
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	d903      	bls.n	800f5ac <pvPortMalloc+0xa4>
 800f5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d1f1      	bne.n	800f590 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f5ac:	4b38      	ldr	r3, [pc, #224]	; (800f690 <pvPortMalloc+0x188>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	d050      	beq.n	800f658 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f5b6:	6a3b      	ldr	r3, [r7, #32]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	2208      	movs	r2, #8
 800f5bc:	4413      	add	r3, r2
 800f5be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c2:	681a      	ldr	r2, [r3, #0]
 800f5c4:	6a3b      	ldr	r3, [r7, #32]
 800f5c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ca:	685a      	ldr	r2, [r3, #4]
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	1ad2      	subs	r2, r2, r3
 800f5d0:	2308      	movs	r3, #8
 800f5d2:	005b      	lsls	r3, r3, #1
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	d91f      	bls.n	800f618 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f5d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	4413      	add	r3, r2
 800f5de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5e0:	69bb      	ldr	r3, [r7, #24]
 800f5e2:	f003 0307 	and.w	r3, r3, #7
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d00a      	beq.n	800f600 <pvPortMalloc+0xf8>
	__asm volatile
 800f5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ee:	f383 8811 	msr	BASEPRI, r3
 800f5f2:	f3bf 8f6f 	isb	sy
 800f5f6:	f3bf 8f4f 	dsb	sy
 800f5fa:	613b      	str	r3, [r7, #16]
}
 800f5fc:	bf00      	nop
 800f5fe:	e7fe      	b.n	800f5fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f602:	685a      	ldr	r2, [r3, #4]
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	1ad2      	subs	r2, r2, r3
 800f608:	69bb      	ldr	r3, [r7, #24]
 800f60a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60e:	687a      	ldr	r2, [r7, #4]
 800f610:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f612:	69b8      	ldr	r0, [r7, #24]
 800f614:	f000 f90c 	bl	800f830 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f618:	4b1f      	ldr	r3, [pc, #124]	; (800f698 <pvPortMalloc+0x190>)
 800f61a:	681a      	ldr	r2, [r3, #0]
 800f61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61e:	685b      	ldr	r3, [r3, #4]
 800f620:	1ad3      	subs	r3, r2, r3
 800f622:	4a1d      	ldr	r2, [pc, #116]	; (800f698 <pvPortMalloc+0x190>)
 800f624:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f626:	4b1c      	ldr	r3, [pc, #112]	; (800f698 <pvPortMalloc+0x190>)
 800f628:	681a      	ldr	r2, [r3, #0]
 800f62a:	4b1d      	ldr	r3, [pc, #116]	; (800f6a0 <pvPortMalloc+0x198>)
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	429a      	cmp	r2, r3
 800f630:	d203      	bcs.n	800f63a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f632:	4b19      	ldr	r3, [pc, #100]	; (800f698 <pvPortMalloc+0x190>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	4a1a      	ldr	r2, [pc, #104]	; (800f6a0 <pvPortMalloc+0x198>)
 800f638:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f63c:	685a      	ldr	r2, [r3, #4]
 800f63e:	4b15      	ldr	r3, [pc, #84]	; (800f694 <pvPortMalloc+0x18c>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	431a      	orrs	r2, r3
 800f644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f646:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f64a:	2200      	movs	r2, #0
 800f64c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f64e:	4b15      	ldr	r3, [pc, #84]	; (800f6a4 <pvPortMalloc+0x19c>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	3301      	adds	r3, #1
 800f654:	4a13      	ldr	r2, [pc, #76]	; (800f6a4 <pvPortMalloc+0x19c>)
 800f656:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f658:	f7fe fd44 	bl	800e0e4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800f65c:	69fb      	ldr	r3, [r7, #28]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d101      	bne.n	800f666 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800f662:	f7f4 facf 	bl	8003c04 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f666:	69fb      	ldr	r3, [r7, #28]
 800f668:	f003 0307 	and.w	r3, r3, #7
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d00a      	beq.n	800f686 <pvPortMalloc+0x17e>
	__asm volatile
 800f670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f674:	f383 8811 	msr	BASEPRI, r3
 800f678:	f3bf 8f6f 	isb	sy
 800f67c:	f3bf 8f4f 	dsb	sy
 800f680:	60fb      	str	r3, [r7, #12]
}
 800f682:	bf00      	nop
 800f684:	e7fe      	b.n	800f684 <pvPortMalloc+0x17c>
	return pvReturn;
 800f686:	69fb      	ldr	r3, [r7, #28]
}
 800f688:	4618      	mov	r0, r3
 800f68a:	3728      	adds	r7, #40	; 0x28
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd80      	pop	{r7, pc}
 800f690:	20008e40 	.word	0x20008e40
 800f694:	20008e54 	.word	0x20008e54
 800f698:	20008e44 	.word	0x20008e44
 800f69c:	20008e38 	.word	0x20008e38
 800f6a0:	20008e48 	.word	0x20008e48
 800f6a4:	20008e4c 	.word	0x20008e4c

0800f6a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b086      	sub	sp, #24
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d04d      	beq.n	800f756 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f6ba:	2308      	movs	r3, #8
 800f6bc:	425b      	negs	r3, r3
 800f6be:	697a      	ldr	r2, [r7, #20]
 800f6c0:	4413      	add	r3, r2
 800f6c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f6c4:	697b      	ldr	r3, [r7, #20]
 800f6c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f6c8:	693b      	ldr	r3, [r7, #16]
 800f6ca:	685a      	ldr	r2, [r3, #4]
 800f6cc:	4b24      	ldr	r3, [pc, #144]	; (800f760 <vPortFree+0xb8>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	4013      	ands	r3, r2
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d10a      	bne.n	800f6ec <vPortFree+0x44>
	__asm volatile
 800f6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6da:	f383 8811 	msr	BASEPRI, r3
 800f6de:	f3bf 8f6f 	isb	sy
 800f6e2:	f3bf 8f4f 	dsb	sy
 800f6e6:	60fb      	str	r3, [r7, #12]
}
 800f6e8:	bf00      	nop
 800f6ea:	e7fe      	b.n	800f6ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f6ec:	693b      	ldr	r3, [r7, #16]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d00a      	beq.n	800f70a <vPortFree+0x62>
	__asm volatile
 800f6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6f8:	f383 8811 	msr	BASEPRI, r3
 800f6fc:	f3bf 8f6f 	isb	sy
 800f700:	f3bf 8f4f 	dsb	sy
 800f704:	60bb      	str	r3, [r7, #8]
}
 800f706:	bf00      	nop
 800f708:	e7fe      	b.n	800f708 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f70a:	693b      	ldr	r3, [r7, #16]
 800f70c:	685a      	ldr	r2, [r3, #4]
 800f70e:	4b14      	ldr	r3, [pc, #80]	; (800f760 <vPortFree+0xb8>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	4013      	ands	r3, r2
 800f714:	2b00      	cmp	r3, #0
 800f716:	d01e      	beq.n	800f756 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f718:	693b      	ldr	r3, [r7, #16]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d11a      	bne.n	800f756 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f720:	693b      	ldr	r3, [r7, #16]
 800f722:	685a      	ldr	r2, [r3, #4]
 800f724:	4b0e      	ldr	r3, [pc, #56]	; (800f760 <vPortFree+0xb8>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	43db      	mvns	r3, r3
 800f72a:	401a      	ands	r2, r3
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f730:	f7fe fcca 	bl	800e0c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f734:	693b      	ldr	r3, [r7, #16]
 800f736:	685a      	ldr	r2, [r3, #4]
 800f738:	4b0a      	ldr	r3, [pc, #40]	; (800f764 <vPortFree+0xbc>)
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	4413      	add	r3, r2
 800f73e:	4a09      	ldr	r2, [pc, #36]	; (800f764 <vPortFree+0xbc>)
 800f740:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f742:	6938      	ldr	r0, [r7, #16]
 800f744:	f000 f874 	bl	800f830 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f748:	4b07      	ldr	r3, [pc, #28]	; (800f768 <vPortFree+0xc0>)
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	3301      	adds	r3, #1
 800f74e:	4a06      	ldr	r2, [pc, #24]	; (800f768 <vPortFree+0xc0>)
 800f750:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f752:	f7fe fcc7 	bl	800e0e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f756:	bf00      	nop
 800f758:	3718      	adds	r7, #24
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}
 800f75e:	bf00      	nop
 800f760:	20008e54 	.word	0x20008e54
 800f764:	20008e44 	.word	0x20008e44
 800f768:	20008e50 	.word	0x20008e50

0800f76c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f76c:	b480      	push	{r7}
 800f76e:	b085      	sub	sp, #20
 800f770:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f776:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f778:	4b27      	ldr	r3, [pc, #156]	; (800f818 <prvHeapInit+0xac>)
 800f77a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	f003 0307 	and.w	r3, r3, #7
 800f782:	2b00      	cmp	r3, #0
 800f784:	d00c      	beq.n	800f7a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	3307      	adds	r3, #7
 800f78a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	f023 0307 	bic.w	r3, r3, #7
 800f792:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f794:	68ba      	ldr	r2, [r7, #8]
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	1ad3      	subs	r3, r2, r3
 800f79a:	4a1f      	ldr	r2, [pc, #124]	; (800f818 <prvHeapInit+0xac>)
 800f79c:	4413      	add	r3, r2
 800f79e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f7a4:	4a1d      	ldr	r2, [pc, #116]	; (800f81c <prvHeapInit+0xb0>)
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f7aa:	4b1c      	ldr	r3, [pc, #112]	; (800f81c <prvHeapInit+0xb0>)
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	68ba      	ldr	r2, [r7, #8]
 800f7b4:	4413      	add	r3, r2
 800f7b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f7b8:	2208      	movs	r2, #8
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	1a9b      	subs	r3, r3, r2
 800f7be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	f023 0307 	bic.w	r3, r3, #7
 800f7c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	4a15      	ldr	r2, [pc, #84]	; (800f820 <prvHeapInit+0xb4>)
 800f7cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f7ce:	4b14      	ldr	r3, [pc, #80]	; (800f820 <prvHeapInit+0xb4>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f7d6:	4b12      	ldr	r3, [pc, #72]	; (800f820 <prvHeapInit+0xb4>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	68fa      	ldr	r2, [r7, #12]
 800f7e6:	1ad2      	subs	r2, r2, r3
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f7ec:	4b0c      	ldr	r3, [pc, #48]	; (800f820 <prvHeapInit+0xb4>)
 800f7ee:	681a      	ldr	r2, [r3, #0]
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	685b      	ldr	r3, [r3, #4]
 800f7f8:	4a0a      	ldr	r2, [pc, #40]	; (800f824 <prvHeapInit+0xb8>)
 800f7fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	685b      	ldr	r3, [r3, #4]
 800f800:	4a09      	ldr	r2, [pc, #36]	; (800f828 <prvHeapInit+0xbc>)
 800f802:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f804:	4b09      	ldr	r3, [pc, #36]	; (800f82c <prvHeapInit+0xc0>)
 800f806:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f80a:	601a      	str	r2, [r3, #0]
}
 800f80c:	bf00      	nop
 800f80e:	3714      	adds	r7, #20
 800f810:	46bd      	mov	sp, r7
 800f812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f816:	4770      	bx	lr
 800f818:	20000e38 	.word	0x20000e38
 800f81c:	20008e38 	.word	0x20008e38
 800f820:	20008e40 	.word	0x20008e40
 800f824:	20008e48 	.word	0x20008e48
 800f828:	20008e44 	.word	0x20008e44
 800f82c:	20008e54 	.word	0x20008e54

0800f830 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f830:	b480      	push	{r7}
 800f832:	b085      	sub	sp, #20
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f838:	4b28      	ldr	r3, [pc, #160]	; (800f8dc <prvInsertBlockIntoFreeList+0xac>)
 800f83a:	60fb      	str	r3, [r7, #12]
 800f83c:	e002      	b.n	800f844 <prvInsertBlockIntoFreeList+0x14>
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	60fb      	str	r3, [r7, #12]
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	687a      	ldr	r2, [r7, #4]
 800f84a:	429a      	cmp	r2, r3
 800f84c:	d8f7      	bhi.n	800f83e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	685b      	ldr	r3, [r3, #4]
 800f856:	68ba      	ldr	r2, [r7, #8]
 800f858:	4413      	add	r3, r2
 800f85a:	687a      	ldr	r2, [r7, #4]
 800f85c:	429a      	cmp	r2, r3
 800f85e:	d108      	bne.n	800f872 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	685a      	ldr	r2, [r3, #4]
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	685b      	ldr	r3, [r3, #4]
 800f868:	441a      	add	r2, r3
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	685b      	ldr	r3, [r3, #4]
 800f87a:	68ba      	ldr	r2, [r7, #8]
 800f87c:	441a      	add	r2, r3
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	429a      	cmp	r2, r3
 800f884:	d118      	bne.n	800f8b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	681a      	ldr	r2, [r3, #0]
 800f88a:	4b15      	ldr	r3, [pc, #84]	; (800f8e0 <prvInsertBlockIntoFreeList+0xb0>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	429a      	cmp	r2, r3
 800f890:	d00d      	beq.n	800f8ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	685a      	ldr	r2, [r3, #4]
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	685b      	ldr	r3, [r3, #4]
 800f89c:	441a      	add	r2, r3
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	681a      	ldr	r2, [r3, #0]
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	601a      	str	r2, [r3, #0]
 800f8ac:	e008      	b.n	800f8c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f8ae:	4b0c      	ldr	r3, [pc, #48]	; (800f8e0 <prvInsertBlockIntoFreeList+0xb0>)
 800f8b0:	681a      	ldr	r2, [r3, #0]
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	601a      	str	r2, [r3, #0]
 800f8b6:	e003      	b.n	800f8c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	681a      	ldr	r2, [r3, #0]
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f8c0:	68fa      	ldr	r2, [r7, #12]
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d002      	beq.n	800f8ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	687a      	ldr	r2, [r7, #4]
 800f8cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f8ce:	bf00      	nop
 800f8d0:	3714      	adds	r7, #20
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d8:	4770      	bx	lr
 800f8da:	bf00      	nop
 800f8dc:	20008e38 	.word	0x20008e38
 800f8e0:	20008e40 	.word	0x20008e40

0800f8e4 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800f8e8:	f004 fa88 	bl	8013dfc <touchgfx_init>
}
 800f8ec:	bf00      	nop
 800f8ee:	bd80      	pop	{r7, pc}

0800f8f0 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b082      	sub	sp, #8
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800f8f8:	f004 faaa 	bl	8013e50 <touchgfx_taskEntry>
}
 800f8fc:	bf00      	nop
 800f8fe:	3708      	adds	r7, #8
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}

0800f904 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800f904:	b480      	push	{r7}
 800f906:	b083      	sub	sp, #12
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
    {
 800f90c:	4a04      	ldr	r2, [pc, #16]	; (800f920 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	601a      	str	r2, [r3, #0]
    }
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	4618      	mov	r0, r3
 800f916:	370c      	adds	r7, #12
 800f918:	46bd      	mov	sp, r7
 800f91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91e:	4770      	bx	lr
 800f920:	0802a0cc 	.word	0x0802a0cc

0800f924 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800f924:	b580      	push	{r7, lr}
 800f926:	b082      	sub	sp, #8
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
    }
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	f7ff ffe9 	bl	800f904 <_ZN8touchgfx12FontProviderD1Ev>
 800f932:	2104      	movs	r1, #4
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f017 f84a 	bl	80269ce <_ZdlPvj>
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	4618      	mov	r0, r3
 800f93e:	3708      	adds	r7, #8
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}

0800f944 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b082      	sub	sp, #8
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
 800f94c:	460b      	mov	r3, r1
 800f94e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800f950:	887b      	ldrh	r3, [r7, #2]
 800f952:	2b02      	cmp	r3, #2
 800f954:	d010      	beq.n	800f978 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800f956:	2b02      	cmp	r3, #2
 800f958:	dc13      	bgt.n	800f982 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d002      	beq.n	800f964 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800f95e:	2b01      	cmp	r3, #1
 800f960:	d005      	beq.n	800f96e <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800f962:	e00e      	b.n	800f982 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800f964:	f002 fb1a 	bl	8011f9c <_ZN17TypedTextDatabase8getFontsEv>
 800f968:	4603      	mov	r3, r0
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	e00a      	b.n	800f984 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800f96e:	f002 fb15 	bl	8011f9c <_ZN17TypedTextDatabase8getFontsEv>
 800f972:	4603      	mov	r3, r0
 800f974:	685b      	ldr	r3, [r3, #4]
 800f976:	e005      	b.n	800f984 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800f978:	f002 fb10 	bl	8011f9c <_ZN17TypedTextDatabase8getFontsEv>
 800f97c:	4603      	mov	r3, r0
 800f97e:	689b      	ldr	r3, [r3, #8]
 800f980:	e000      	b.n	800f984 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800f982:	2300      	movs	r3, #0
    }
}
 800f984:	4618      	mov	r0, r3
 800f986:	3708      	adds	r7, #8
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}

0800f98c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b082      	sub	sp, #8
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
 800f994:	4a05      	ldr	r2, [pc, #20]	; (800f9ac <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	601a      	str	r2, [r3, #0]
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	4618      	mov	r0, r3
 800f99e:	f7ff ffb1 	bl	800f904 <_ZN8touchgfx12FontProviderD1Ev>
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	3708      	adds	r7, #8
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}
 800f9ac:	0802a0b8 	.word	0x0802a0b8

0800f9b0 <_ZN23ApplicationFontProviderD0Ev>:
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b082      	sub	sp, #8
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f7ff ffe7 	bl	800f98c <_ZN23ApplicationFontProviderD1Ev>
 800f9be:	2104      	movs	r1, #4
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f017 f804 	bl	80269ce <_ZdlPvj>
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	3708      	adds	r7, #8
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	bd80      	pop	{r7, pc}

0800f9d0 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800f9d0:	b480      	push	{r7}
 800f9d2:	b083      	sub	sp, #12
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
    {
 800f9d8:	4a04      	ldr	r2, [pc, #16]	; (800f9ec <_ZN8touchgfx4FontD1Ev+0x1c>)
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	601a      	str	r2, [r3, #0]
    }
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	370c      	adds	r7, #12
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ea:	4770      	bx	lr
 800f9ec:	0802a46c 	.word	0x0802a46c

0800f9f0 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b082      	sub	sp, #8
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
    }
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f7ff ffe9 	bl	800f9d0 <_ZN8touchgfx4FontD1Ev>
 800f9fe:	2110      	movs	r1, #16
 800fa00:	6878      	ldr	r0, [r7, #4]
 800fa02:	f016 ffe4 	bl	80269ce <_ZdlPvj>
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	4618      	mov	r0, r3
 800fa0a:	3708      	adds	r7, #8
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}

0800fa10 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800fa10:	b590      	push	{r4, r7, lr}
 800fa12:	b087      	sub	sp, #28
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
 800fa18:	460b      	mov	r3, r1
 800fa1a:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800fa1c:	887b      	ldrh	r3, [r7, #2]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d101      	bne.n	800fa26 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800fa22:	2300      	movs	r3, #0
 800fa24:	e010      	b.n	800fa48 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800fa26:	2300      	movs	r3, #0
 800fa28:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	3308      	adds	r3, #8
 800fa34:	681c      	ldr	r4, [r3, #0]
 800fa36:	f107 030f 	add.w	r3, r7, #15
 800fa3a:	f107 0210 	add.w	r2, r7, #16
 800fa3e:	8879      	ldrh	r1, [r7, #2]
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	47a0      	blx	r4
 800fa44:	6178      	str	r0, [r7, #20]
        return glyph;
 800fa46:	697b      	ldr	r3, [r7, #20]
    }
 800fa48:	4618      	mov	r0, r3
 800fa4a:	371c      	adds	r7, #28
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd90      	pop	{r4, r7, pc}

0800fa50 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800fa50:	b480      	push	{r7}
 800fa52:	b083      	sub	sp, #12
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	895b      	ldrh	r3, [r3, #10]
    }
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	370c      	adds	r7, #12
 800fa60:	46bd      	mov	sp, r7
 800fa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa66:	4770      	bx	lr

0800fa68 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800fa68:	b480      	push	{r7}
 800fa6a:	b083      	sub	sp, #12
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	899b      	ldrh	r3, [r3, #12]
    }
 800fa74:	4618      	mov	r0, r3
 800fa76:	370c      	adds	r7, #12
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7e:	4770      	bx	lr

0800fa80 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800fa80:	b480      	push	{r7}
 800fa82:	b083      	sub	sp, #12
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	889b      	ldrh	r3, [r3, #4]
    }
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	370c      	adds	r7, #12
 800fa90:	46bd      	mov	sp, r7
 800fa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa96:	4770      	bx	lr

0800fa98 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800fa98:	b480      	push	{r7}
 800fa9a:	b083      	sub	sp, #12
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	889a      	ldrh	r2, [r3, #4]
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	799b      	ldrb	r3, [r3, #6]
 800faa8:	b29b      	uxth	r3, r3
 800faaa:	4413      	add	r3, r2
 800faac:	b29b      	uxth	r3, r3
    }
 800faae:	4618      	mov	r0, r3
 800fab0:	370c      	adds	r7, #12
 800fab2:	46bd      	mov	sp, r7
 800fab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab8:	4770      	bx	lr

0800faba <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800faba:	b480      	push	{r7}
 800fabc:	b083      	sub	sp, #12
 800fabe:	af00      	add	r7, sp, #0
 800fac0:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	79db      	ldrb	r3, [r3, #7]
 800fac6:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800faca:	b2db      	uxtb	r3, r3
    }
 800facc:	4618      	mov	r0, r3
 800face:	370c      	adds	r7, #12
 800fad0:	46bd      	mov	sp, r7
 800fad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad6:	4770      	bx	lr

0800fad8 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800fad8:	b480      	push	{r7}
 800fada:	b083      	sub	sp, #12
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	79db      	ldrb	r3, [r3, #7]
 800fae4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800fae8:	b2db      	uxtb	r3, r3
    }
 800faea:	4618      	mov	r0, r3
 800faec:	370c      	adds	r7, #12
 800faee:	46bd      	mov	sp, r7
 800faf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf4:	4770      	bx	lr
	...

0800faf8 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b082      	sub	sp, #8
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
 800fb00:	4a05      	ldr	r2, [pc, #20]	; (800fb18 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	601a      	str	r2, [r3, #0]
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f7ff ff61 	bl	800f9d0 <_ZN8touchgfx4FontD1Ev>
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	4618      	mov	r0, r3
 800fb12:	3708      	adds	r7, #8
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}
 800fb18:	0802bc40 	.word	0x0802bc40

0800fb1c <_ZN8touchgfx9ConstFontD0Ev>:
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b082      	sub	sp, #8
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f7ff ffe7 	bl	800faf8 <_ZN8touchgfx9ConstFontD1Ev>
 800fb2a:	2118      	movs	r1, #24
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f016 ff4e 	bl	80269ce <_ZdlPvj>
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	4618      	mov	r0, r3
 800fb36:	3708      	adds	r7, #8
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}

0800fb3c <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b082      	sub	sp, #8
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
 800fb44:	4a05      	ldr	r2, [pc, #20]	; (800fb5c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	601a      	str	r2, [r3, #0]
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f7ff ffd3 	bl	800faf8 <_ZN8touchgfx9ConstFontD1Ev>
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	4618      	mov	r0, r3
 800fb56:	3708      	adds	r7, #8
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}
 800fb5c:	0802a0f0 	.word	0x0802a0f0

0800fb60 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b082      	sub	sp, #8
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f7ff ffe7 	bl	800fb3c <_ZN8touchgfx13GeneratedFontD1Ev>
 800fb6e:	2124      	movs	r1, #36	; 0x24
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f016 ff2c 	bl	80269ce <_ZdlPvj>
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	4618      	mov	r0, r3
 800fb7a:	3708      	adds	r7, #8
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd80      	pop	{r7, pc}

0800fb80 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800fb80:	b480      	push	{r7}
 800fb82:	b083      	sub	sp, #12
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
    {
 800fb88:	4a04      	ldr	r2, [pc, #16]	; (800fb9c <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	601a      	str	r2, [r3, #0]
    }
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	4618      	mov	r0, r3
 800fb92:	370c      	adds	r7, #12
 800fb94:	46bd      	mov	sp, r7
 800fb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9a:	4770      	bx	lr
 800fb9c:	0802a0e0 	.word	0x0802a0e0

0800fba0 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b082      	sub	sp, #8
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
    }
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f7ff ffe9 	bl	800fb80 <_ZN8touchgfx9TypedTextD1Ev>
 800fbae:	2108      	movs	r1, #8
 800fbb0:	6878      	ldr	r0, [r7, #4]
 800fbb2:	f016 ff0c 	bl	80269ce <_ZdlPvj>
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	4618      	mov	r0, r3
 800fbba:	3708      	adds	r7, #8
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd80      	pop	{r7, pc}

0800fbc0 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800fbc0:	b480      	push	{r7}
 800fbc2:	b083      	sub	sp, #12
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	6a1b      	ldr	r3, [r3, #32]
    }
 800fbcc:	4618      	mov	r0, r3
 800fbce:	370c      	adds	r7, #12
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd6:	4770      	bx	lr

0800fbd8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b08c      	sub	sp, #48	; 0x30
 800fbdc:	af08      	add	r7, sp, #32
 800fbde:	60f8      	str	r0, [r7, #12]
 800fbe0:	60b9      	str	r1, [r7, #8]
 800fbe2:	4611      	mov	r1, r2
 800fbe4:	461a      	mov	r2, r3
 800fbe6:	460b      	mov	r3, r1
 800fbe8:	80fb      	strh	r3, [r7, #6]
 800fbea:	4613      	mov	r3, r2
 800fbec:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800fbee:	68f8      	ldr	r0, [r7, #12]
 800fbf0:	88b9      	ldrh	r1, [r7, #4]
 800fbf2:	88fa      	ldrh	r2, [r7, #6]
 800fbf4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fbf6:	9306      	str	r3, [sp, #24]
 800fbf8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fbfa:	9305      	str	r3, [sp, #20]
 800fbfc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fc00:	9304      	str	r3, [sp, #16]
 800fc02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fc06:	9303      	str	r3, [sp, #12]
 800fc08:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fc0c:	9302      	str	r3, [sp, #8]
 800fc0e:	7f3b      	ldrb	r3, [r7, #28]
 800fc10:	9301      	str	r3, [sp, #4]
 800fc12:	7e3b      	ldrb	r3, [r7, #24]
 800fc14:	9300      	str	r3, [sp, #0]
 800fc16:	460b      	mov	r3, r1
 800fc18:	68b9      	ldr	r1, [r7, #8]
 800fc1a:	f009 f903 	bl	8018e24 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800fc1e:	4a08      	ldr	r2, [pc, #32]	; (800fc40 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	601a      	str	r2, [r3, #0]
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc28:	619a      	str	r2, [r3, #24]
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc2e:	61da      	str	r2, [r3, #28]
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fc34:	621a      	str	r2, [r3, #32]
{
}
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	4618      	mov	r0, r3
 800fc3a:	3710      	adds	r7, #16
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}
 800fc40:	0802a0f0 	.word	0x0802a0f0

0800fc44 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800fc44:	b480      	push	{r7}
 800fc46:	b085      	sub	sp, #20
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	699b      	ldr	r3, [r3, #24]
 800fc52:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	889b      	ldrh	r3, [r3, #4]
 800fc58:	0adb      	lsrs	r3, r3, #11
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	009b      	lsls	r3, r3, #2
 800fc5e:	68fa      	ldr	r2, [r7, #12]
 800fc60:	4413      	add	r3, r2
 800fc62:	681a      	ldr	r2, [r3, #0]
 800fc64:	683b      	ldr	r3, [r7, #0]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	4413      	add	r3, r2
}
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	3714      	adds	r7, #20
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc74:	4770      	bx	lr

0800fc76 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800fc76:	b480      	push	{r7}
 800fc78:	b089      	sub	sp, #36	; 0x24
 800fc7a:	af00      	add	r7, sp, #0
 800fc7c:	60f8      	str	r0, [r7, #12]
 800fc7e:	460b      	mov	r3, r1
 800fc80:	607a      	str	r2, [r7, #4]
 800fc82:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d003      	beq.n	800fc92 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	7b1b      	ldrb	r3, [r3, #12]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d101      	bne.n	800fc96 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800fc92:	2300      	movs	r3, #0
 800fc94:	e030      	b.n	800fcf8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	69da      	ldr	r2, [r3, #28]
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800fc9e:	697b      	ldr	r3, [r7, #20]
 800fca0:	7b5b      	ldrb	r3, [r3, #13]
 800fca2:	021b      	lsls	r3, r3, #8
 800fca4:	b21b      	sxth	r3, r3
 800fca6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fcaa:	b219      	sxth	r1, r3
 800fcac:	697b      	ldr	r3, [r7, #20]
 800fcae:	7adb      	ldrb	r3, [r3, #11]
 800fcb0:	b21b      	sxth	r3, r3
 800fcb2:	430b      	orrs	r3, r1
 800fcb4:	b21b      	sxth	r3, r3
 800fcb6:	b29b      	uxth	r3, r3
 800fcb8:	009b      	lsls	r3, r3, #2
 800fcba:	4413      	add	r3, r2
 800fcbc:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	7b1b      	ldrb	r3, [r3, #12]
 800fcc2:	837b      	strh	r3, [r7, #26]
 800fcc4:	8b7b      	ldrh	r3, [r7, #26]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d015      	beq.n	800fcf6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800fcca:	69fb      	ldr	r3, [r7, #28]
 800fccc:	881b      	ldrh	r3, [r3, #0]
 800fcce:	897a      	ldrh	r2, [r7, #10]
 800fcd0:	429a      	cmp	r2, r3
 800fcd2:	d103      	bne.n	800fcdc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800fcd4:	69fb      	ldr	r3, [r7, #28]
 800fcd6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800fcda:	e00d      	b.n	800fcf8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800fcdc:	69fb      	ldr	r3, [r7, #28]
 800fcde:	881b      	ldrh	r3, [r3, #0]
 800fce0:	897a      	ldrh	r2, [r7, #10]
 800fce2:	429a      	cmp	r2, r3
 800fce4:	d306      	bcc.n	800fcf4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800fce6:	8b7b      	ldrh	r3, [r7, #26]
 800fce8:	3b01      	subs	r3, #1
 800fcea:	837b      	strh	r3, [r7, #26]
 800fcec:	69fb      	ldr	r3, [r7, #28]
 800fcee:	3304      	adds	r3, #4
 800fcf0:	61fb      	str	r3, [r7, #28]
 800fcf2:	e7e7      	b.n	800fcc4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800fcf4:	bf00      	nop
        }
    }
    return 0;
 800fcf6:	2300      	movs	r3, #0
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3724      	adds	r7, #36	; 0x24
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd02:	4770      	bx	lr

0800fd04 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 13, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800fd04:	b580      	push	{r7, lr}
 800fd06:	af00      	add	r7, sp, #0
 800fd08:	4801      	ldr	r0, [pc, #4]	; (800fd10 <__tcf_0+0xc>)
 800fd0a:	f7ff ff17 	bl	800fb3c <_ZN8touchgfx13GeneratedFontD1Ev>
 800fd0e:	bd80      	pop	{r7, pc}
 800fd10:	20008e58 	.word	0x20008e58

0800fd14 <_Z23getFont_verdana_10_4bppv>:
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b08a      	sub	sp, #40	; 0x28
 800fd18:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 13, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800fd1a:	4b1e      	ldr	r3, [pc, #120]	; (800fd94 <_Z23getFont_verdana_10_4bppv+0x80>)
 800fd1c:	781b      	ldrb	r3, [r3, #0]
 800fd1e:	f3bf 8f5b 	dmb	ish
 800fd22:	b2db      	uxtb	r3, r3
 800fd24:	f003 0301 	and.w	r3, r3, #1
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	bf0c      	ite	eq
 800fd2c:	2301      	moveq	r3, #1
 800fd2e:	2300      	movne	r3, #0
 800fd30:	b2db      	uxtb	r3, r3
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d02a      	beq.n	800fd8c <_Z23getFont_verdana_10_4bppv+0x78>
 800fd36:	4817      	ldr	r0, [pc, #92]	; (800fd94 <_Z23getFont_verdana_10_4bppv+0x80>)
 800fd38:	f016 fe4b 	bl	80269d2 <__cxa_guard_acquire>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	bf14      	ite	ne
 800fd42:	2301      	movne	r3, #1
 800fd44:	2300      	moveq	r3, #0
 800fd46:	b2db      	uxtb	r3, r3
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d01f      	beq.n	800fd8c <_Z23getFont_verdana_10_4bppv+0x78>
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	9309      	str	r3, [sp, #36]	; 0x24
 800fd50:	2300      	movs	r3, #0
 800fd52:	9308      	str	r3, [sp, #32]
 800fd54:	233f      	movs	r3, #63	; 0x3f
 800fd56:	9307      	str	r3, [sp, #28]
 800fd58:	4b0f      	ldr	r3, [pc, #60]	; (800fd98 <_Z23getFont_verdana_10_4bppv+0x84>)
 800fd5a:	9306      	str	r3, [sp, #24]
 800fd5c:	4b0f      	ldr	r3, [pc, #60]	; (800fd9c <_Z23getFont_verdana_10_4bppv+0x88>)
 800fd5e:	9305      	str	r3, [sp, #20]
 800fd60:	2300      	movs	r3, #0
 800fd62:	9304      	str	r3, [sp, #16]
 800fd64:	2300      	movs	r3, #0
 800fd66:	9303      	str	r3, [sp, #12]
 800fd68:	2301      	movs	r3, #1
 800fd6a:	9302      	str	r3, [sp, #8]
 800fd6c:	2304      	movs	r3, #4
 800fd6e:	9301      	str	r3, [sp, #4]
 800fd70:	2300      	movs	r3, #0
 800fd72:	9300      	str	r3, [sp, #0]
 800fd74:	230a      	movs	r3, #10
 800fd76:	220d      	movs	r2, #13
 800fd78:	4909      	ldr	r1, [pc, #36]	; (800fda0 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800fd7a:	480a      	ldr	r0, [pc, #40]	; (800fda4 <_Z23getFont_verdana_10_4bppv+0x90>)
 800fd7c:	f7ff ff2c 	bl	800fbd8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800fd80:	4804      	ldr	r0, [pc, #16]	; (800fd94 <_Z23getFont_verdana_10_4bppv+0x80>)
 800fd82:	f016 fe32 	bl	80269ea <__cxa_guard_release>
 800fd86:	4808      	ldr	r0, [pc, #32]	; (800fda8 <_Z23getFont_verdana_10_4bppv+0x94>)
 800fd88:	f016 ff6a 	bl	8026c60 <atexit>
    return verdana_10_4bpp;
 800fd8c:	4b05      	ldr	r3, [pc, #20]	; (800fda4 <_Z23getFont_verdana_10_4bppv+0x90>)
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}
 800fd94:	20008e7c 	.word	0x20008e7c
 800fd98:	0802ec7c 	.word	0x0802ec7c
 800fd9c:	0802a13c 	.word	0x0802a13c
 800fda0:	0802ea10 	.word	0x0802ea10
 800fda4:	20008e58 	.word	0x20008e58
 800fda8:	0800fd05 	.word	0x0800fd05

0800fdac <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 18, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800fdac:	b580      	push	{r7, lr}
 800fdae:	af00      	add	r7, sp, #0
 800fdb0:	4801      	ldr	r0, [pc, #4]	; (800fdb8 <__tcf_0+0xc>)
 800fdb2:	f7ff fec3 	bl	800fb3c <_ZN8touchgfx13GeneratedFontD1Ev>
 800fdb6:	bd80      	pop	{r7, pc}
 800fdb8:	20008e80 	.word	0x20008e80

0800fdbc <_Z23getFont_verdana_20_4bppv>:
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b08a      	sub	sp, #40	; 0x28
 800fdc0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 18, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800fdc2:	4b1e      	ldr	r3, [pc, #120]	; (800fe3c <_Z23getFont_verdana_20_4bppv+0x80>)
 800fdc4:	781b      	ldrb	r3, [r3, #0]
 800fdc6:	f3bf 8f5b 	dmb	ish
 800fdca:	b2db      	uxtb	r3, r3
 800fdcc:	f003 0301 	and.w	r3, r3, #1
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	bf0c      	ite	eq
 800fdd4:	2301      	moveq	r3, #1
 800fdd6:	2300      	movne	r3, #0
 800fdd8:	b2db      	uxtb	r3, r3
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d02a      	beq.n	800fe34 <_Z23getFont_verdana_20_4bppv+0x78>
 800fdde:	4817      	ldr	r0, [pc, #92]	; (800fe3c <_Z23getFont_verdana_20_4bppv+0x80>)
 800fde0:	f016 fdf7 	bl	80269d2 <__cxa_guard_acquire>
 800fde4:	4603      	mov	r3, r0
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	bf14      	ite	ne
 800fdea:	2301      	movne	r3, #1
 800fdec:	2300      	moveq	r3, #0
 800fdee:	b2db      	uxtb	r3, r3
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d01f      	beq.n	800fe34 <_Z23getFont_verdana_20_4bppv+0x78>
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	9309      	str	r3, [sp, #36]	; 0x24
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	9308      	str	r3, [sp, #32]
 800fdfc:	233f      	movs	r3, #63	; 0x3f
 800fdfe:	9307      	str	r3, [sp, #28]
 800fe00:	4b0f      	ldr	r3, [pc, #60]	; (800fe40 <_Z23getFont_verdana_20_4bppv+0x84>)
 800fe02:	9306      	str	r3, [sp, #24]
 800fe04:	4b0f      	ldr	r3, [pc, #60]	; (800fe44 <_Z23getFont_verdana_20_4bppv+0x88>)
 800fe06:	9305      	str	r3, [sp, #20]
 800fe08:	2300      	movs	r3, #0
 800fe0a:	9304      	str	r3, [sp, #16]
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	9303      	str	r3, [sp, #12]
 800fe10:	2301      	movs	r3, #1
 800fe12:	9302      	str	r3, [sp, #8]
 800fe14:	2304      	movs	r3, #4
 800fe16:	9301      	str	r3, [sp, #4]
 800fe18:	2300      	movs	r3, #0
 800fe1a:	9300      	str	r3, [sp, #0]
 800fe1c:	2314      	movs	r3, #20
 800fe1e:	2212      	movs	r2, #18
 800fe20:	4909      	ldr	r1, [pc, #36]	; (800fe48 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800fe22:	480a      	ldr	r0, [pc, #40]	; (800fe4c <_Z23getFont_verdana_20_4bppv+0x90>)
 800fe24:	f7ff fed8 	bl	800fbd8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800fe28:	4804      	ldr	r0, [pc, #16]	; (800fe3c <_Z23getFont_verdana_20_4bppv+0x80>)
 800fe2a:	f016 fdde 	bl	80269ea <__cxa_guard_release>
 800fe2e:	4808      	ldr	r0, [pc, #32]	; (800fe50 <_Z23getFont_verdana_20_4bppv+0x94>)
 800fe30:	f016 ff16 	bl	8026c60 <atexit>
    return verdana_20_4bpp;
 800fe34:	4b05      	ldr	r3, [pc, #20]	; (800fe4c <_Z23getFont_verdana_20_4bppv+0x90>)
}
 800fe36:	4618      	mov	r0, r3
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}
 800fe3c:	20008ea4 	.word	0x20008ea4
 800fe40:	0802ec80 	.word	0x0802ec80
 800fe44:	0802a140 	.word	0x0802a140
 800fe48:	0802eac8 	.word	0x0802eac8
 800fe4c:	20008e80 	.word	0x20008e80
 800fe50:	0800fdad 	.word	0x0800fdad

0800fe54 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 13, 40, 1, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800fe54:	b580      	push	{r7, lr}
 800fe56:	af00      	add	r7, sp, #0
 800fe58:	4801      	ldr	r0, [pc, #4]	; (800fe60 <__tcf_0+0xc>)
 800fe5a:	f7ff fe6f 	bl	800fb3c <_ZN8touchgfx13GeneratedFontD1Ev>
 800fe5e:	bd80      	pop	{r7, pc}
 800fe60:	20008ea8 	.word	0x20008ea8

0800fe64 <_Z23getFont_verdana_40_4bppv>:
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b08a      	sub	sp, #40	; 0x28
 800fe68:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 13, 40, 1, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800fe6a:	4b1e      	ldr	r3, [pc, #120]	; (800fee4 <_Z23getFont_verdana_40_4bppv+0x80>)
 800fe6c:	781b      	ldrb	r3, [r3, #0]
 800fe6e:	f3bf 8f5b 	dmb	ish
 800fe72:	b2db      	uxtb	r3, r3
 800fe74:	f003 0301 	and.w	r3, r3, #1
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	bf0c      	ite	eq
 800fe7c:	2301      	moveq	r3, #1
 800fe7e:	2300      	movne	r3, #0
 800fe80:	b2db      	uxtb	r3, r3
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d02a      	beq.n	800fedc <_Z23getFont_verdana_40_4bppv+0x78>
 800fe86:	4817      	ldr	r0, [pc, #92]	; (800fee4 <_Z23getFont_verdana_40_4bppv+0x80>)
 800fe88:	f016 fda3 	bl	80269d2 <__cxa_guard_acquire>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	bf14      	ite	ne
 800fe92:	2301      	movne	r3, #1
 800fe94:	2300      	moveq	r3, #0
 800fe96:	b2db      	uxtb	r3, r3
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d01f      	beq.n	800fedc <_Z23getFont_verdana_40_4bppv+0x78>
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	9309      	str	r3, [sp, #36]	; 0x24
 800fea0:	2300      	movs	r3, #0
 800fea2:	9308      	str	r3, [sp, #32]
 800fea4:	233f      	movs	r3, #63	; 0x3f
 800fea6:	9307      	str	r3, [sp, #28]
 800fea8:	4b0f      	ldr	r3, [pc, #60]	; (800fee8 <_Z23getFont_verdana_40_4bppv+0x84>)
 800feaa:	9306      	str	r3, [sp, #24]
 800feac:	4b0f      	ldr	r3, [pc, #60]	; (800feec <_Z23getFont_verdana_40_4bppv+0x88>)
 800feae:	9305      	str	r3, [sp, #20]
 800feb0:	2300      	movs	r3, #0
 800feb2:	9304      	str	r3, [sp, #16]
 800feb4:	2300      	movs	r3, #0
 800feb6:	9303      	str	r3, [sp, #12]
 800feb8:	2301      	movs	r3, #1
 800feba:	9302      	str	r3, [sp, #8]
 800febc:	2304      	movs	r3, #4
 800febe:	9301      	str	r3, [sp, #4]
 800fec0:	2301      	movs	r3, #1
 800fec2:	9300      	str	r3, [sp, #0]
 800fec4:	2328      	movs	r3, #40	; 0x28
 800fec6:	220d      	movs	r2, #13
 800fec8:	4909      	ldr	r1, [pc, #36]	; (800fef0 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800feca:	480a      	ldr	r0, [pc, #40]	; (800fef4 <_Z23getFont_verdana_40_4bppv+0x90>)
 800fecc:	f7ff fe84 	bl	800fbd8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800fed0:	4804      	ldr	r0, [pc, #16]	; (800fee4 <_Z23getFont_verdana_40_4bppv+0x80>)
 800fed2:	f016 fd8a 	bl	80269ea <__cxa_guard_release>
 800fed6:	4808      	ldr	r0, [pc, #32]	; (800fef8 <_Z23getFont_verdana_40_4bppv+0x94>)
 800fed8:	f016 fec2 	bl	8026c60 <atexit>
    return verdana_40_4bpp;
 800fedc:	4b05      	ldr	r3, [pc, #20]	; (800fef4 <_Z23getFont_verdana_40_4bppv+0x90>)
}
 800fede:	4618      	mov	r0, r3
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}
 800fee4:	20008ecc 	.word	0x20008ecc
 800fee8:	0802ec84 	.word	0x0802ec84
 800feec:	0802a144 	.word	0x0802a144
 800fef0:	0802ebc4 	.word	0x0802ebc4
 800fef4:	20008ea8 	.word	0x20008ea8
 800fef8:	0800fe55 	.word	0x0800fe55

0800fefc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800fefc:	b480      	push	{r7}
 800fefe:	b083      	sub	sp, #12
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
 800ff04:	6039      	str	r1, [r7, #0]
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	4618      	mov	r0, r3
 800ff0a:	370c      	adds	r7, #12
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff12:	4770      	bx	lr

0800ff14 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800ff14:	b480      	push	{r7}
 800ff16:	b083      	sub	sp, #12
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
 800ff1c:	6039      	str	r1, [r7, #0]
    {
    }
 800ff1e:	bf00      	nop
 800ff20:	370c      	adds	r7, #12
 800ff22:	46bd      	mov	sp, r7
 800ff24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff28:	4770      	bx	lr

0800ff2a <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800ff2a:	b480      	push	{r7}
 800ff2c:	b083      	sub	sp, #12
 800ff2e:	af00      	add	r7, sp, #0
 800ff30:	6078      	str	r0, [r7, #4]
 800ff32:	6039      	str	r1, [r7, #0]
    {
    }
 800ff34:	bf00      	nop
 800ff36:	370c      	adds	r7, #12
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3e:	4770      	bx	lr

0800ff40 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800ff40:	b480      	push	{r7}
 800ff42:	b083      	sub	sp, #12
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	6039      	str	r1, [r7, #0]
    {
    }
 800ff4a:	bf00      	nop
 800ff4c:	370c      	adds	r7, #12
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff54:	4770      	bx	lr

0800ff56 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800ff56:	b480      	push	{r7}
 800ff58:	b083      	sub	sp, #12
 800ff5a:	af00      	add	r7, sp, #0
 800ff5c:	6078      	str	r0, [r7, #4]
 800ff5e:	460b      	mov	r3, r1
 800ff60:	70fb      	strb	r3, [r7, #3]
    {
    }
 800ff62:	bf00      	nop
 800ff64:	370c      	adds	r7, #12
 800ff66:	46bd      	mov	sp, r7
 800ff68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6c:	4770      	bx	lr

0800ff6e <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800ff6e:	b480      	push	{r7}
 800ff70:	b083      	sub	sp, #12
 800ff72:	af00      	add	r7, sp, #0
 800ff74:	6078      	str	r0, [r7, #4]
    {
    }
 800ff76:	bf00      	nop
 800ff78:	370c      	adds	r7, #12
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff80:	4770      	bx	lr

0800ff82 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800ff82:	b480      	push	{r7}
 800ff84:	b083      	sub	sp, #12
 800ff86:	af00      	add	r7, sp, #0
 800ff88:	6078      	str	r0, [r7, #4]
    {
    }
 800ff8a:	bf00      	nop
 800ff8c:	370c      	adds	r7, #12
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff94:	4770      	bx	lr
	...

0800ff98 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800ff98:	b480      	push	{r7}
 800ff9a:	b083      	sub	sp, #12
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
    {
 800ffa0:	4a04      	ldr	r2, [pc, #16]	; (800ffb4 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	601a      	str	r2, [r3, #0]
    }
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	370c      	adds	r7, #12
 800ffac:	46bd      	mov	sp, r7
 800ffae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb2:	4770      	bx	lr
 800ffb4:	0802a250 	.word	0x0802a250

0800ffb8 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b082      	sub	sp, #8
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
    }
 800ffc0:	6878      	ldr	r0, [r7, #4]
 800ffc2:	f7ff ffe9 	bl	800ff98 <_ZN8touchgfx15UIEventListenerD1Ev>
 800ffc6:	2104      	movs	r1, #4
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f016 fd00 	bl	80269ce <_ZdlPvj>
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	3708      	adds	r7, #8
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}

0800ffd8 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800ffd8:	b480      	push	{r7}
 800ffda:	b083      	sub	sp, #12
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
 800ffe0:	460b      	mov	r3, r1
 800ffe2:	70fb      	strb	r3, [r7, #3]
    {
    }
 800ffe4:	bf00      	nop
 800ffe6:	370c      	adds	r7, #12
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffee:	4770      	bx	lr

0800fff0 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800fff0:	b480      	push	{r7}
 800fff2:	b083      	sub	sp, #12
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	683a      	ldr	r2, [r7, #0]
 800fffe:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8010002:	6810      	ldr	r0, [r2, #0]
 8010004:	6851      	ldr	r1, [r2, #4]
 8010006:	c303      	stmia	r3!, {r0, r1}
    };
 8010008:	bf00      	nop
 801000a:	370c      	adds	r7, #12
 801000c:	46bd      	mov	sp, r7
 801000e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010012:	4770      	bx	lr

08010014 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8010014:	b480      	push	{r7}
 8010016:	b083      	sub	sp, #12
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
    {
 801001c:	4a04      	ldr	r2, [pc, #16]	; (8010030 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	601a      	str	r2, [r3, #0]
    }
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	4618      	mov	r0, r3
 8010026:	370c      	adds	r7, #12
 8010028:	46bd      	mov	sp, r7
 801002a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002e:	4770      	bx	lr
 8010030:	0802a238 	.word	0x0802a238

08010034 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8010034:	b580      	push	{r7, lr}
 8010036:	b082      	sub	sp, #8
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
    }
 801003c:	6878      	ldr	r0, [r7, #4]
 801003e:	f7ff ffe9 	bl	8010014 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8010042:	2104      	movs	r1, #4
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f016 fcc2 	bl	80269ce <_ZdlPvj>
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	4618      	mov	r0, r3
 801004e:	3708      	adds	r7, #8
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}

08010054 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8010054:	b480      	push	{r7}
 8010056:	af00      	add	r7, sp, #0
    {
        return instance;
 8010058:	4b03      	ldr	r3, [pc, #12]	; (8010068 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 801005a:	681b      	ldr	r3, [r3, #0]
    }
 801005c:	4618      	mov	r0, r3
 801005e:	46bd      	mov	sp, r7
 8010060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010064:	4770      	bx	lr
 8010066:	bf00      	nop
 8010068:	2000a0f0 	.word	0x2000a0f0

0801006c <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 801006c:	b480      	push	{r7}
 801006e:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8010070:	4b0b      	ldr	r3, [pc, #44]	; (80100a0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8010078:	2b00      	cmp	r3, #0
 801007a:	d008      	beq.n	801008e <_ZN8touchgfx3HAL3lcdEv+0x22>
 801007c:	4b08      	ldr	r3, [pc, #32]	; (80100a0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010082:	2b00      	cmp	r3, #0
 8010084:	d003      	beq.n	801008e <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8010086:	4b06      	ldr	r3, [pc, #24]	; (80100a0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801008c:	e002      	b.n	8010094 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 801008e:	4b04      	ldr	r3, [pc, #16]	; (80100a0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	689b      	ldr	r3, [r3, #8]
        }
    }
 8010094:	4618      	mov	r0, r3
 8010096:	46bd      	mov	sp, r7
 8010098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009c:	4770      	bx	lr
 801009e:	bf00      	nop
 80100a0:	2000a0f0 	.word	0x2000a0f0

080100a4 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 80100a4:	b480      	push	{r7}
 80100a6:	b083      	sub	sp, #12
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 80100ac:	4a07      	ldr	r2, [pc, #28]	; (80100cc <_ZN8touchgfx10TransitionC1Ev+0x28>)
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	601a      	str	r2, [r3, #0]
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2200      	movs	r2, #0
 80100b6:	605a      	str	r2, [r3, #4]
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2200      	movs	r2, #0
 80100bc:	721a      	strb	r2, [r3, #8]
    {
    }
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	4618      	mov	r0, r3
 80100c2:	370c      	adds	r7, #12
 80100c4:	46bd      	mov	sp, r7
 80100c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ca:	4770      	bx	lr
 80100cc:	0802a214 	.word	0x0802a214

080100d0 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 80100d0:	b480      	push	{r7}
 80100d2:	b083      	sub	sp, #12
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
    {
 80100d8:	4a04      	ldr	r2, [pc, #16]	; (80100ec <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	601a      	str	r2, [r3, #0]
    }
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	4618      	mov	r0, r3
 80100e2:	370c      	adds	r7, #12
 80100e4:	46bd      	mov	sp, r7
 80100e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ea:	4770      	bx	lr
 80100ec:	0802a214 	.word	0x0802a214

080100f0 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b082      	sub	sp, #8
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
    }
 80100f8:	6878      	ldr	r0, [r7, #4]
 80100fa:	f7ff ffe9 	bl	80100d0 <_ZN8touchgfx10TransitionD1Ev>
 80100fe:	210c      	movs	r1, #12
 8010100:	6878      	ldr	r0, [r7, #4]
 8010102:	f016 fc64 	bl	80269ce <_ZdlPvj>
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	4618      	mov	r0, r3
 801010a:	3708      	adds	r7, #8
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}

08010110 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8010110:	b480      	push	{r7}
 8010112:	b083      	sub	sp, #12
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
    {
    }
 8010118:	bf00      	nop
 801011a:	370c      	adds	r7, #12
 801011c:	46bd      	mov	sp, r7
 801011e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010122:	4770      	bx	lr

08010124 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8010124:	b480      	push	{r7}
 8010126:	b083      	sub	sp, #12
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
    {
    }
 801012c:	bf00      	nop
 801012e:	370c      	adds	r7, #12
 8010130:	46bd      	mov	sp, r7
 8010132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010136:	4770      	bx	lr

08010138 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8010138:	b480      	push	{r7}
 801013a:	b083      	sub	sp, #12
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
    {
    }
 8010140:	bf00      	nop
 8010142:	370c      	adds	r7, #12
 8010144:	46bd      	mov	sp, r7
 8010146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014a:	4770      	bx	lr

0801014c <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 801014c:	b580      	push	{r7, lr}
 801014e:	b082      	sub	sp, #8
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 8010154:	f007 fe4a 	bl	8017dec <_ZN8touchgfx11Application11getInstanceEv>
 8010158:	4603      	mov	r3, r0
 801015a:	681a      	ldr	r2, [r3, #0]
 801015c:	3230      	adds	r2, #48	; 0x30
 801015e:	6812      	ldr	r2, [r2, #0]
 8010160:	4618      	mov	r0, r3
 8010162:	4790      	blx	r2
    }
 8010164:	bf00      	nop
 8010166:	3708      	adds	r7, #8
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}

0801016c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 801016c:	b480      	push	{r7}
 801016e:	b083      	sub	sp, #12
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
 8010174:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	683a      	ldr	r2, [r7, #0]
 801017a:	605a      	str	r2, [r3, #4]
    }
 801017c:	bf00      	nop
 801017e:	370c      	adds	r7, #12
 8010180:	46bd      	mov	sp, r7
 8010182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010186:	4770      	bx	lr

08010188 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8010188:	b580      	push	{r7, lr}
 801018a:	b082      	sub	sp, #8
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
 8010190:	4a05      	ldr	r2, [pc, #20]	; (80101a8 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	601a      	str	r2, [r3, #0]
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	4618      	mov	r0, r3
 801019a:	f7ff fefd 	bl	800ff98 <_ZN8touchgfx15UIEventListenerD1Ev>
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	4618      	mov	r0, r3
 80101a2:	3708      	adds	r7, #8
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}
 80101a8:	0802baec 	.word	0x0802baec

080101ac <_ZN8touchgfx11ApplicationD0Ev>:
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b082      	sub	sp, #8
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
 80101b4:	6878      	ldr	r0, [r7, #4]
 80101b6:	f7ff ffe7 	bl	8010188 <_ZN8touchgfx11ApplicationD1Ev>
 80101ba:	f44f 719c 	mov.w	r1, #312	; 0x138
 80101be:	6878      	ldr	r0, [r7, #4]
 80101c0:	f016 fc05 	bl	80269ce <_ZdlPvj>
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	4618      	mov	r0, r3
 80101c8:	3708      	adds	r7, #8
 80101ca:	46bd      	mov	sp, r7
 80101cc:	bd80      	pop	{r7, pc}
	...

080101d0 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b082      	sub	sp, #8
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	4618      	mov	r0, r3
 80101dc:	f007 fe26 	bl	8017e2c <_ZN8touchgfx11ApplicationC1Ev>
 80101e0:	4a09      	ldr	r2, [pc, #36]	; (8010208 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	601a      	str	r2, [r3, #0]
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2200      	movs	r2, #0
 80101ea:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2200      	movs	r2, #0
 80101f2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	4a04      	ldr	r2, [pc, #16]	; (801020c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 80101fa:	6013      	str	r3, [r2, #0]
    }
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	4618      	mov	r0, r3
 8010200:	3708      	adds	r7, #8
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}
 8010206:	bf00      	nop
 8010208:	0802a1d0 	.word	0x0802a1d0
 801020c:	2000a13c 	.word	0x2000a13c

08010210 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8010210:	b580      	push	{r7, lr}
 8010212:	b082      	sub	sp, #8
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	f000 f804 	bl	8010226 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 801021e:	bf00      	nop
 8010220:	3708      	adds	r7, #8
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}

08010226 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8010226:	b580      	push	{r7, lr}
 8010228:	b082      	sub	sp, #8
 801022a:	af00      	add	r7, sp, #0
 801022c:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8010234:	2b00      	cmp	r3, #0
 8010236:	d00f      	beq.n	8010258 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	330c      	adds	r3, #12
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	4610      	mov	r0, r2
 801024c:	4798      	blx	r3
 801024e:	4603      	mov	r3, r0
 8010250:	2b00      	cmp	r3, #0
 8010252:	d001      	beq.n	8010258 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8010254:	2301      	movs	r3, #1
 8010256:	e000      	b.n	801025a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8010258:	2300      	movs	r3, #0
 801025a:	2b00      	cmp	r3, #0
 801025c:	d00e      	beq.n	801027c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	3308      	adds	r3, #8
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	4610      	mov	r0, r2
 8010272:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	2200      	movs	r2, #0
 8010278:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 801027c:	bf00      	nop
 801027e:	3708      	adds	r7, #8
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}

08010284 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8010284:	b480      	push	{r7}
 8010286:	b083      	sub	sp, #12
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	683a      	ldr	r2, [r7, #0]
 8010292:	601a      	str	r2, [r3, #0]
    }
 8010294:	bf00      	nop
 8010296:	370c      	adds	r7, #12
 8010298:	46bd      	mov	sp, r7
 801029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029e:	4770      	bx	lr

080102a0 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b082      	sub	sp, #8
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
 80102a8:	4a05      	ldr	r2, [pc, #20]	; (80102c0 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	601a      	str	r2, [r3, #0]
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	4618      	mov	r0, r3
 80102b2:	f7ff ff69 	bl	8010188 <_ZN8touchgfx11ApplicationD1Ev>
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	4618      	mov	r0, r3
 80102ba:	3708      	adds	r7, #8
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}
 80102c0:	0802a1d0 	.word	0x0802a1d0

080102c4 <_ZN8touchgfx14MVPApplicationD0Ev>:
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b082      	sub	sp, #8
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f7ff ffe7 	bl	80102a0 <_ZN8touchgfx14MVPApplicationD1Ev>
 80102d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80102d6:	6878      	ldr	r0, [r7, #4]
 80102d8:	f016 fb79 	bl	80269ce <_ZdlPvj>
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	4618      	mov	r0, r3
 80102e0:	3708      	adds	r7, #8
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}
	...

080102e8 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b082      	sub	sp, #8
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
 80102f0:	4a08      	ldr	r2, [pc, #32]	; (8010314 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	601a      	str	r2, [r3, #0]
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80102fc:	4618      	mov	r0, r3
 80102fe:	f000 fabd 	bl	801087c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	4618      	mov	r0, r3
 8010306:	f7ff ffcb 	bl	80102a0 <_ZN8touchgfx14MVPApplicationD1Ev>
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	4618      	mov	r0, r3
 801030e:	3708      	adds	r7, #8
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}
 8010314:	0802a174 	.word	0x0802a174

08010318 <_ZN23FrontendApplicationBaseD0Ev>:
 8010318:	b580      	push	{r7, lr}
 801031a:	b082      	sub	sp, #8
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f7ff ffe1 	bl	80102e8 <_ZN23FrontendApplicationBaseD1Ev>
 8010326:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801032a:	6878      	ldr	r0, [r7, #4]
 801032c:	f016 fb4f 	bl	80269ce <_ZdlPvj>
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	4618      	mov	r0, r3
 8010334:	3708      	adds	r7, #8
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}

0801033a <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 801033a:	b480      	push	{r7}
 801033c:	b083      	sub	sp, #12
 801033e:	af00      	add	r7, sp, #0
 8010340:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2201      	movs	r2, #1
 8010346:	721a      	strb	r2, [r3, #8]
    }
 8010348:	bf00      	nop
 801034a:	370c      	adds	r7, #12
 801034c:	46bd      	mov	sp, r7
 801034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010352:	4770      	bx	lr

08010354 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8010354:	b480      	push	{r7}
 8010356:	b083      	sub	sp, #12
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
 801035c:	6039      	str	r1, [r7, #0]
    {
        model = m;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	683a      	ldr	r2, [r7, #0]
 8010362:	605a      	str	r2, [r3, #4]
    }
 8010364:	bf00      	nop
 8010366:	370c      	adds	r7, #12
 8010368:	46bd      	mov	sp, r7
 801036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036e:	4770      	bx	lr

08010370 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8010370:	b580      	push	{r7, lr}
 8010372:	b084      	sub	sp, #16
 8010374:	af00      	add	r7, sp, #0
 8010376:	60f8      	str	r0, [r7, #12]
 8010378:	60b9      	str	r1, [r7, #8]
 801037a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	4618      	mov	r0, r3
 8010380:	f7ff ff26 	bl	80101d0 <_ZN8touchgfx14MVPApplicationC1Ev>
 8010384:	4a13      	ldr	r2, [pc, #76]	; (80103d4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	601a      	str	r2, [r3, #0]
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010390:	4618      	mov	r0, r3
 8010392:	f000 f89f 	bl	80104d4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	687a      	ldr	r2, [r7, #4]
 801039a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	68ba      	ldr	r2, [r7, #8]
 80103a2:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 80103a6:	f7ff fe55 	bl	8010054 <_ZN8touchgfx3HAL11getInstanceEv>
 80103aa:	4603      	mov	r3, r0
 80103ac:	681a      	ldr	r2, [r3, #0]
 80103ae:	3208      	adds	r2, #8
 80103b0:	6812      	ldr	r2, [r2, #0]
 80103b2:	2101      	movs	r1, #1
 80103b4:	4618      	mov	r0, r3
 80103b6:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 80103b8:	2000      	movs	r0, #0
 80103ba:	f001 fd77 	bl	8011eac <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80103be:	f7ff fe55 	bl	801006c <_ZN8touchgfx3HAL3lcdEv>
 80103c2:	4603      	mov	r3, r0
 80103c4:	4618      	mov	r0, r3
 80103c6:	f00f f9ea 	bl	801f79e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	4618      	mov	r0, r3
 80103ce:	3710      	adds	r7, #16
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd80      	pop	{r7, pc}
 80103d4:	0802a174 	.word	0x0802a174

080103d8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 80103d8:	b480      	push	{r7}
 80103da:	b083      	sub	sp, #12
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
 80103e0:	6039      	str	r1, [r7, #0]
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	4618      	mov	r0, r3
 80103e6:	370c      	adds	r7, #12
 80103e8:	46bd      	mov	sp, r7
 80103ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ee:	4770      	bx	lr

080103f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b082      	sub	sp, #8
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
 80103f8:	6039      	str	r1, [r7, #0]
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	683a      	ldr	r2, [r7, #0]
 80103fe:	4611      	mov	r1, r2
 8010400:	4618      	mov	r0, r3
 8010402:	f7ff ffe9 	bl	80103d8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	685a      	ldr	r2, [r3, #4]
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	605a      	str	r2, [r3, #4]
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	683a      	ldr	r2, [r7, #0]
 8010412:	3308      	adds	r3, #8
 8010414:	3208      	adds	r2, #8
 8010416:	e892 0003 	ldmia.w	r2, {r0, r1}
 801041a:	e883 0003 	stmia.w	r3, {r0, r1}
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	4618      	mov	r0, r3
 8010422:	3708      	adds	r7, #8
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 8010428:	b590      	push	{r4, r7, lr}
 801042a:	b089      	sub	sp, #36	; 0x24
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenNoTransitionImpl);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8010436:	4b10      	ldr	r3, [pc, #64]	; (8010478 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 8010438:	61bb      	str	r3, [r7, #24]
 801043a:	2300      	movs	r3, #0
 801043c:	61fb      	str	r3, [r7, #28]
 801043e:	f107 0008 	add.w	r0, r7, #8
 8010442:	f107 0318 	add.w	r3, r7, #24
 8010446:	cb0c      	ldmia	r3, {r2, r3}
 8010448:	6879      	ldr	r1, [r7, #4]
 801044a:	f000 f85f 	bl	801050c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801044e:	f107 0308 	add.w	r3, r7, #8
 8010452:	4619      	mov	r1, r3
 8010454:	4620      	mov	r0, r4
 8010456:	f7ff ffcb 	bl	80103f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 801045a:	f107 0308 	add.w	r3, r7, #8
 801045e:	4618      	mov	r0, r3
 8010460:	f000 fa0c 	bl	801087c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8010470:	bf00      	nop
 8010472:	3724      	adds	r7, #36	; 0x24
 8010474:	46bd      	mov	sp, r7
 8010476:	bd90      	pop	{r4, r7, pc}
 8010478:	0801047d 	.word	0x0801047d

0801047c <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b084      	sub	sp, #16
 8010480:	af02      	add	r7, sp, #8
 8010482:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f503 719c 	add.w	r1, r3, #312	; 0x138
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8010490:	461a      	mov	r2, r3
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8010498:	9300      	str	r3, [sp, #0]
 801049a:	4b04      	ldr	r3, [pc, #16]	; (80104ac <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 801049c:	4804      	ldr	r0, [pc, #16]	; (80104b0 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 801049e:	f000 f867 	bl	8010570 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80104a2:	bf00      	nop
 80104a4:	3708      	adds	r7, #8
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}
 80104aa:	bf00      	nop
 80104ac:	2000a130 	.word	0x2000a130
 80104b0:	2000a12c 	.word	0x2000a12c

080104b4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 80104b4:	b480      	push	{r7}
 80104b6:	b083      	sub	sp, #12
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
 80104bc:	4a04      	ldr	r2, [pc, #16]	; (80104d0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	601a      	str	r2, [r3, #0]
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	4618      	mov	r0, r3
 80104c6:	370c      	adds	r7, #12
 80104c8:	46bd      	mov	sp, r7
 80104ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ce:	4770      	bx	lr
 80104d0:	0802a238 	.word	0x0802a238

080104d4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b082      	sub	sp, #8
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	4618      	mov	r0, r3
 80104e0:	f7ff ffe8 	bl	80104b4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80104e4:	4a08      	ldr	r2, [pc, #32]	; (8010508 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	601a      	str	r2, [r3, #0]
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2200      	movs	r2, #0
 80104ee:	605a      	str	r2, [r3, #4]
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2200      	movs	r2, #0
 80104f4:	609a      	str	r2, [r3, #8]
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	2200      	movs	r2, #0
 80104fa:	60da      	str	r2, [r3, #12]
    {
    }
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	4618      	mov	r0, r3
 8010500:	3708      	adds	r7, #8
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}
 8010506:	bf00      	nop
 8010508:	0802a1b8 	.word	0x0802a1b8

0801050c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 801050c:	b580      	push	{r7, lr}
 801050e:	b084      	sub	sp, #16
 8010510:	af00      	add	r7, sp, #0
 8010512:	60f8      	str	r0, [r7, #12]
 8010514:	60b9      	str	r1, [r7, #8]
 8010516:	4639      	mov	r1, r7
 8010518:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	4618      	mov	r0, r3
 8010520:	f7ff ffc8 	bl	80104b4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8010524:	4a08      	ldr	r2, [pc, #32]	; (8010548 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	68ba      	ldr	r2, [r7, #8]
 801052e:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	3308      	adds	r3, #8
 8010534:	463a      	mov	r2, r7
 8010536:	e892 0003 	ldmia.w	r2, {r0, r1}
 801053a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	4618      	mov	r0, r3
 8010542:	3710      	adds	r7, #16
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}
 8010548:	0802a1b8 	.word	0x0802a1b8

0801054c <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 801054c:	b580      	push	{r7, lr}
 801054e:	b082      	sub	sp, #8
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	4618      	mov	r0, r3
 8010558:	f7ff fda4 	bl	80100a4 <_ZN8touchgfx10TransitionC1Ev>
 801055c:	4a03      	ldr	r2, [pc, #12]	; (801056c <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	601a      	str	r2, [r3, #0]
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	4618      	mov	r0, r3
 8010566:	3708      	adds	r7, #8
 8010568:	46bd      	mov	sp, r7
 801056a:	bd80      	pop	{r7, pc}
 801056c:	0802a150 	.word	0x0802a150

08010570 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8010570:	b590      	push	{r4, r7, lr}
 8010572:	b08f      	sub	sp, #60	; 0x3c
 8010574:	af00      	add	r7, sp, #0
 8010576:	60f8      	str	r0, [r7, #12]
 8010578:	60b9      	str	r1, [r7, #8]
 801057a:	607a      	str	r2, [r7, #4]
 801057c:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	689a      	ldr	r2, [r3, #8]
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	689b      	ldr	r3, [r3, #8]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	3320      	adds	r3, #32
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	4610      	mov	r0, r2
 801058e:	4798      	blx	r3
 8010590:	4603      	mov	r3, r0
 8010592:	f5b3 7f49 	cmp.w	r3, #804	; 0x324
 8010596:	d205      	bcs.n	80105a4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8010598:	4b7e      	ldr	r3, [pc, #504]	; (8010794 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 801059a:	4a7f      	ldr	r2, [pc, #508]	; (8010798 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 801059c:	21a7      	movs	r1, #167	; 0xa7
 801059e:	487f      	ldr	r0, [pc, #508]	; (801079c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80105a0:	f016 fb40 	bl	8026c24 <__assert_func>
 80105a4:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	685a      	ldr	r2, [r3, #4]
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	685b      	ldr	r3, [r3, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	3320      	adds	r3, #32
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	4610      	mov	r0, r2
 80105b6:	4798      	blx	r3
 80105b8:	4603      	mov	r3, r0
 80105ba:	2b0f      	cmp	r3, #15
 80105bc:	d805      	bhi.n	80105ca <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 80105be:	4b78      	ldr	r3, [pc, #480]	; (80107a0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80105c0:	4a75      	ldr	r2, [pc, #468]	; (8010798 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80105c2:	21a8      	movs	r1, #168	; 0xa8
 80105c4:	4875      	ldr	r0, [pc, #468]	; (801079c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80105c6:	f016 fb2d 	bl	8026c24 <__assert_func>
 80105ca:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	68da      	ldr	r2, [r3, #12]
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	68db      	ldr	r3, [r3, #12]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	3320      	adds	r3, #32
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	4610      	mov	r0, r2
 80105dc:	4798      	blx	r3
 80105de:	4603      	mov	r3, r0
 80105e0:	2b0b      	cmp	r3, #11
 80105e2:	d805      	bhi.n	80105f0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 80105e4:	4b6f      	ldr	r3, [pc, #444]	; (80107a4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 80105e6:	4a6c      	ldr	r2, [pc, #432]	; (8010798 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80105e8:	21a9      	movs	r1, #169	; 0xa9
 80105ea:	486c      	ldr	r0, [pc, #432]	; (801079c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80105ec:	f016 fb1a 	bl	8026c24 <__assert_func>
 80105f0:	bf00      	nop
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80105f6:	68bb      	ldr	r3, [r7, #8]
 80105f8:	627b      	str	r3, [r7, #36]	; 0x24
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 80105fe:	f007 fbf5 	bl	8017dec <_ZN8touchgfx11Application11getInstanceEv>
 8010602:	4603      	mov	r3, r0
 8010604:	4618      	mov	r0, r3
 8010606:	f007 fbf7 	bl	8017df8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 801060a:	6a3b      	ldr	r3, [r7, #32]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d008      	beq.n	8010624 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8010612:	6a3b      	ldr	r3, [r7, #32]
 8010614:	681a      	ldr	r2, [r3, #0]
 8010616:	6a3b      	ldr	r3, [r7, #32]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	330c      	adds	r3, #12
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	4610      	mov	r0, r2
 8010622:	4798      	blx	r3
    if (*currentTrans)
 8010624:	6a3b      	ldr	r3, [r7, #32]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d007      	beq.n	801063c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 801062c:	6a3b      	ldr	r3, [r7, #32]
 801062e:	681a      	ldr	r2, [r3, #0]
 8010630:	6a3b      	ldr	r3, [r7, #32]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	4610      	mov	r0, r2
 801063a:	4798      	blx	r3
    if (*currentScreen)
 801063c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d008      	beq.n	8010656 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8010644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010646:	681a      	ldr	r2, [r3, #0]
 8010648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	3314      	adds	r3, #20
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	4610      	mov	r0, r2
 8010654:	4798      	blx	r3
    if (*currentPresenter)
 8010656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d008      	beq.n	8010670 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 801065e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010660:	681a      	ldr	r2, [r3, #0]
 8010662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	3304      	adds	r3, #4
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	4610      	mov	r0, r2
 801066e:	4798      	blx	r3
    if (*currentScreen)
 8010670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d007      	beq.n	8010688 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8010678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801067a:	681a      	ldr	r2, [r3, #0]
 801067c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	4610      	mov	r0, r2
 8010686:	4798      	blx	r3
    if (*currentPresenter)
 8010688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d008      	beq.n	80106a2 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8010690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010692:	681a      	ldr	r2, [r3, #0]
 8010694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	3308      	adds	r3, #8
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	4610      	mov	r0, r2
 80106a0:	4798      	blx	r3
}
 80106a2:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	68db      	ldr	r3, [r3, #12]
 80106a8:	2100      	movs	r1, #0
 80106aa:	4618      	mov	r0, r3
 80106ac:	f000 f87c 	bl	80107a8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80106b0:	4603      	mov	r3, r0
 80106b2:	4619      	mov	r1, r3
 80106b4:	200c      	movs	r0, #12
 80106b6:	f7ff fc21 	bl	800fefc <_ZnwjPv>
 80106ba:	4604      	mov	r4, r0
 80106bc:	4620      	mov	r0, r4
 80106be:	f7ff ff45 	bl	801054c <_ZN8touchgfx12NoTransitionC1Ev>
 80106c2:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	689b      	ldr	r3, [r3, #8]
 80106c8:	2100      	movs	r1, #0
 80106ca:	4618      	mov	r0, r3
 80106cc:	f000 f87f 	bl	80107ce <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 80106d0:	4603      	mov	r3, r0
 80106d2:	4619      	mov	r1, r3
 80106d4:	f44f 7049 	mov.w	r0, #804	; 0x324
 80106d8:	f7ff fc10 	bl	800fefc <_ZnwjPv>
 80106dc:	4604      	mov	r4, r0
 80106de:	4620      	mov	r0, r4
 80106e0:	f001 ff06 	bl	80124f0 <_ZN10screenViewC1Ev>
 80106e4:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	685b      	ldr	r3, [r3, #4]
 80106ea:	2100      	movs	r1, #0
 80106ec:	4618      	mov	r0, r3
 80106ee:	f000 f881 	bl	80107f4 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 80106f2:	4603      	mov	r3, r0
 80106f4:	4619      	mov	r1, r3
 80106f6:	2010      	movs	r0, #16
 80106f8:	f7ff fc00 	bl	800fefc <_ZnwjPv>
 80106fc:	4604      	mov	r4, r0
 80106fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010700:	4620      	mov	r0, r4
 8010702:	f001 fdf7 	bl	80122f4 <_ZN15screenPresenterC1ER10screenView>
 8010706:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8010708:	683b      	ldr	r3, [r7, #0]
 801070a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801070c:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010712:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010718:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 801071a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801071c:	2b00      	cmp	r3, #0
 801071e:	d002      	beq.n	8010726 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8010720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010722:	3304      	adds	r3, #4
 8010724:	e000      	b.n	8010728 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8010726:	2300      	movs	r3, #0
 8010728:	4619      	mov	r1, r3
 801072a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801072c:	f7ff fdaa 	bl	8010284 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8010730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010732:	3304      	adds	r3, #4
 8010734:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010736:	4618      	mov	r0, r3
 8010738:	f7ff fe0c 	bl	8010354 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 801073c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801073e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010740:	4618      	mov	r0, r3
 8010742:	f000 f86a 	bl	801081a <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 8010746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010748:	61fb      	str	r3, [r7, #28]
 801074a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801074c:	61bb      	str	r3, [r7, #24]
 801074e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010750:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8010752:	69fb      	ldr	r3, [r7, #28]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	330c      	adds	r3, #12
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	69f8      	ldr	r0, [r7, #28]
 801075c:	4798      	blx	r3
    newPresenter->activate();
 801075e:	69bb      	ldr	r3, [r7, #24]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	69b8      	ldr	r0, [r7, #24]
 8010766:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8010768:	6979      	ldr	r1, [r7, #20]
 801076a:	69f8      	ldr	r0, [r7, #28]
 801076c:	f008 ff55 	bl	801961a <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8010770:	697b      	ldr	r3, [r7, #20]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	3310      	adds	r3, #16
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	6978      	ldr	r0, [r7, #20]
 801077a:	4798      	blx	r3
    newTransition->invalidate();
 801077c:	697b      	ldr	r3, [r7, #20]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	3314      	adds	r3, #20
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	6978      	ldr	r0, [r7, #20]
 8010786:	4798      	blx	r3
}
 8010788:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 801078a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801078c:	4618      	mov	r0, r3
 801078e:	373c      	adds	r7, #60	; 0x3c
 8010790:	46bd      	mov	sp, r7
 8010792:	bd90      	pop	{r4, r7, pc}
 8010794:	0802951c 	.word	0x0802951c
 8010798:	080295ac 	.word	0x080295ac
 801079c:	080296b0 	.word	0x080296b0
 80107a0:	080296f4 	.word	0x080296f4
 80107a4:	08029798 	.word	0x08029798

080107a8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b082      	sub	sp, #8
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
 80107b0:	460b      	mov	r3, r1
 80107b2:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	3324      	adds	r3, #36	; 0x24
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	887a      	ldrh	r2, [r7, #2]
 80107be:	4611      	mov	r1, r2
 80107c0:	6878      	ldr	r0, [r7, #4]
 80107c2:	4798      	blx	r3
 80107c4:	4603      	mov	r3, r0
    }
 80107c6:	4618      	mov	r0, r3
 80107c8:	3708      	adds	r7, #8
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bd80      	pop	{r7, pc}

080107ce <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 80107ce:	b580      	push	{r7, lr}
 80107d0:	b082      	sub	sp, #8
 80107d2:	af00      	add	r7, sp, #0
 80107d4:	6078      	str	r0, [r7, #4]
 80107d6:	460b      	mov	r3, r1
 80107d8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	3324      	adds	r3, #36	; 0x24
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	887a      	ldrh	r2, [r7, #2]
 80107e4:	4611      	mov	r1, r2
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	4798      	blx	r3
 80107ea:	4603      	mov	r3, r0
    }
 80107ec:	4618      	mov	r0, r3
 80107ee:	3708      	adds	r7, #8
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}

080107f4 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b082      	sub	sp, #8
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
 80107fc:	460b      	mov	r3, r1
 80107fe:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	3324      	adds	r3, #36	; 0x24
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	887a      	ldrh	r2, [r7, #2]
 801080a:	4611      	mov	r1, r2
 801080c:	6878      	ldr	r0, [r7, #4]
 801080e:	4798      	blx	r3
 8010810:	4603      	mov	r3, r0
    }
 8010812:	4618      	mov	r0, r3
 8010814:	3708      	adds	r7, #8
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}

0801081a <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 801081a:	b480      	push	{r7}
 801081c:	b083      	sub	sp, #12
 801081e:	af00      	add	r7, sp, #0
 8010820:	6078      	str	r0, [r7, #4]
 8010822:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	683a      	ldr	r2, [r7, #0]
 8010828:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801082a:	bf00      	nop
 801082c:	370c      	adds	r7, #12
 801082e:	46bd      	mov	sp, r7
 8010830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010834:	4770      	bx	lr
	...

08010838 <_ZN8touchgfx12NoTransitionD1Ev>:
 8010838:	b580      	push	{r7, lr}
 801083a:	b082      	sub	sp, #8
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
 8010840:	4a05      	ldr	r2, [pc, #20]	; (8010858 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	601a      	str	r2, [r3, #0]
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	4618      	mov	r0, r3
 801084a:	f7ff fc41 	bl	80100d0 <_ZN8touchgfx10TransitionD1Ev>
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	4618      	mov	r0, r3
 8010852:	3708      	adds	r7, #8
 8010854:	46bd      	mov	sp, r7
 8010856:	bd80      	pop	{r7, pc}
 8010858:	0802a150 	.word	0x0802a150

0801085c <_ZN8touchgfx12NoTransitionD0Ev>:
 801085c:	b580      	push	{r7, lr}
 801085e:	b082      	sub	sp, #8
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f7ff ffe7 	bl	8010838 <_ZN8touchgfx12NoTransitionD1Ev>
 801086a:	210c      	movs	r1, #12
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f016 f8ae 	bl	80269ce <_ZdlPvj>
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	4618      	mov	r0, r3
 8010876:	3708      	adds	r7, #8
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}

0801087c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 801087c:	b580      	push	{r7, lr}
 801087e:	b082      	sub	sp, #8
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
 8010884:	4a05      	ldr	r2, [pc, #20]	; (801089c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	601a      	str	r2, [r3, #0]
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	4618      	mov	r0, r3
 801088e:	f7ff fbc1 	bl	8010014 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	4618      	mov	r0, r3
 8010896:	3708      	adds	r7, #8
 8010898:	46bd      	mov	sp, r7
 801089a:	bd80      	pop	{r7, pc}
 801089c:	0802a1b8 	.word	0x0802a1b8

080108a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b082      	sub	sp, #8
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	6878      	ldr	r0, [r7, #4]
 80108aa:	f7ff ffe7 	bl	801087c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80108ae:	2110      	movs	r1, #16
 80108b0:	6878      	ldr	r0, [r7, #4]
 80108b2:	f016 f88c 	bl	80269ce <_ZdlPvj>
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	4618      	mov	r0, r3
 80108ba:	3708      	adds	r7, #8
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}

080108c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b082      	sub	sp, #8
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	685b      	ldr	r3, [r3, #4]
 80108cc:	687a      	ldr	r2, [r7, #4]
 80108ce:	68d2      	ldr	r2, [r2, #12]
 80108d0:	1052      	asrs	r2, r2, #1
 80108d2:	1899      	adds	r1, r3, r2
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	68db      	ldr	r3, [r3, #12]
 80108d8:	f003 0301 	and.w	r3, r3, #1
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d102      	bne.n	80108e6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	689b      	ldr	r3, [r3, #8]
 80108e4:	e00a      	b.n	80108fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	685b      	ldr	r3, [r3, #4]
 80108ea:	687a      	ldr	r2, [r7, #4]
 80108ec:	68d2      	ldr	r2, [r2, #12]
 80108ee:	1052      	asrs	r2, r2, #1
 80108f0:	4413      	add	r3, r2
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	687a      	ldr	r2, [r7, #4]
 80108f6:	6892      	ldr	r2, [r2, #8]
 80108f8:	4413      	add	r3, r2
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	4608      	mov	r0, r1
 80108fe:	4798      	blx	r3
    }
 8010900:	bf00      	nop
 8010902:	3708      	adds	r7, #8
 8010904:	46bd      	mov	sp, r7
 8010906:	bd80      	pop	{r7, pc}

08010908 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8010908:	b480      	push	{r7}
 801090a:	b083      	sub	sp, #12
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	685b      	ldr	r3, [r3, #4]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d010      	beq.n	801093a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	689b      	ldr	r3, [r3, #8]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d107      	bne.n	8010930 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	68db      	ldr	r3, [r3, #12]
 8010924:	f003 0301 	and.w	r3, r3, #1
 8010928:	2b00      	cmp	r3, #0
 801092a:	d101      	bne.n	8010930 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 801092c:	2301      	movs	r3, #1
 801092e:	e000      	b.n	8010932 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8010930:	2300      	movs	r3, #0
 8010932:	2b01      	cmp	r3, #1
 8010934:	d001      	beq.n	801093a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8010936:	2301      	movs	r3, #1
 8010938:	e000      	b.n	801093c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 801093a:	2300      	movs	r3, #0
    }
 801093c:	4618      	mov	r0, r3
 801093e:	370c      	adds	r7, #12
 8010940:	46bd      	mov	sp, r7
 8010942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010946:	4770      	bx	lr

08010948 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFrom24BitRGB
     */
    colortype(uint32_t col)
 8010948:	b480      	push	{r7}
 801094a:	b083      	sub	sp, #12
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
 8010950:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	683a      	ldr	r2, [r7, #0]
 8010956:	601a      	str	r2, [r3, #0]
    }
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	4618      	mov	r0, r3
 801095c:	370c      	adds	r7, #12
 801095e:	46bd      	mov	sp, r7
 8010960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010964:	4770      	bx	lr

08010966 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8010966:	b480      	push	{r7}
 8010968:	b083      	sub	sp, #12
 801096a:	af00      	add	r7, sp, #0
 801096c:	6078      	str	r0, [r7, #4]
    {
        x = 0;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	2200      	movs	r2, #0
 8010972:	801a      	strh	r2, [r3, #0]
        y = 0;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	2200      	movs	r2, #0
 8010978:	805a      	strh	r2, [r3, #2]
        width = 0;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	2200      	movs	r2, #0
 801097e:	809a      	strh	r2, [r3, #4]
        height = 0;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2200      	movs	r2, #0
 8010984:	80da      	strh	r2, [r3, #6]
    }
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	4618      	mov	r0, r3
 801098a:	370c      	adds	r7, #12
 801098c:	46bd      	mov	sp, r7
 801098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010992:	4770      	bx	lr

08010994 <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8010994:	b480      	push	{r7}
 8010996:	b085      	sub	sp, #20
 8010998:	af00      	add	r7, sp, #0
 801099a:	60f8      	str	r0, [r7, #12]
 801099c:	4608      	mov	r0, r1
 801099e:	4611      	mov	r1, r2
 80109a0:	461a      	mov	r2, r3
 80109a2:	4603      	mov	r3, r0
 80109a4:	817b      	strh	r3, [r7, #10]
 80109a6:	460b      	mov	r3, r1
 80109a8:	813b      	strh	r3, [r7, #8]
 80109aa:	4613      	mov	r3, r2
 80109ac:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	897a      	ldrh	r2, [r7, #10]
 80109b2:	801a      	strh	r2, [r3, #0]
        this->y = y;
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	893a      	ldrh	r2, [r7, #8]
 80109b8:	805a      	strh	r2, [r3, #2]
        this->width = width;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	88fa      	ldrh	r2, [r7, #6]
 80109be:	809a      	strh	r2, [r3, #4]
        this->height = height;
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	8b3a      	ldrh	r2, [r7, #24]
 80109c4:	80da      	strh	r2, [r3, #6]
    }
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	4618      	mov	r0, r3
 80109ca:	3714      	adds	r7, #20
 80109cc:	46bd      	mov	sp, r7
 80109ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d2:	4770      	bx	lr

080109d4 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 80109d4:	b480      	push	{r7}
 80109d6:	b083      	sub	sp, #12
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
 80109dc:	460b      	mov	r3, r1
 80109de:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	887a      	ldrh	r2, [r7, #2]
 80109e4:	801a      	strh	r2, [r3, #0]
    {
    }
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	4618      	mov	r0, r3
 80109ea:	370c      	adds	r7, #12
 80109ec:	46bd      	mov	sp, r7
 80109ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f2:	4770      	bx	lr

080109f4 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b084      	sub	sp, #16
 80109f8:	af02      	add	r7, sp, #8
 80109fa:	6078      	str	r0, [r7, #4]
        : rect(0, 0, 0, 0),
          parent(0),
          nextSibling(0),
          nextDrawChainElement(0),
          touchable(false),
          visible(true)
 80109fc:	4a13      	ldr	r2, [pc, #76]	; (8010a4c <_ZN8touchgfx8DrawableC1Ev+0x58>)
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	601a      	str	r2, [r3, #0]
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	1d18      	adds	r0, r3, #4
 8010a06:	2300      	movs	r3, #0
 8010a08:	9300      	str	r3, [sp, #0]
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	2100      	movs	r1, #0
 8010a10:	f7ff ffc0 	bl	8010994 <_ZN8touchgfx4RectC1Essss>
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	330c      	adds	r3, #12
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f7ff ffa4 	bl	8010966 <_ZN8touchgfx4RectC1Ev>
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	2200      	movs	r2, #0
 8010a22:	615a      	str	r2, [r3, #20]
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2200      	movs	r2, #0
 8010a28:	619a      	str	r2, [r3, #24]
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	61da      	str	r2, [r3, #28]
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	2200      	movs	r2, #0
 8010a34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	2201      	movs	r2, #1
 8010a3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	4618      	mov	r0, r3
 8010a44:	3708      	adds	r7, #8
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bd80      	pop	{r7, pc}
 8010a4a:	bf00      	nop
 8010a4c:	0802bbdc 	.word	0x0802bbdc

08010a50 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8010a50:	b480      	push	{r7}
 8010a52:	b083      	sub	sp, #12
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
    {
 8010a58:	4a04      	ldr	r2, [pc, #16]	; (8010a6c <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	601a      	str	r2, [r3, #0]
    }
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	4618      	mov	r0, r3
 8010a62:	370c      	adds	r7, #12
 8010a64:	46bd      	mov	sp, r7
 8010a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6a:	4770      	bx	lr
 8010a6c:	0802bbdc 	.word	0x0802bbdc

08010a70 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b082      	sub	sp, #8
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
    }
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f7ff ffe9 	bl	8010a50 <_ZN8touchgfx8DrawableD1Ev>
 8010a7e:	2128      	movs	r1, #40	; 0x28
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f015 ffa4 	bl	80269ce <_ZdlPvj>
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	4618      	mov	r0, r3
 8010a8a:	3708      	adds	r7, #8
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	bd80      	pop	{r7, pc}

08010a90 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8010a90:	b480      	push	{r7}
 8010a92:	b083      	sub	sp, #12
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8010a98:	2300      	movs	r3, #0
    }
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	370c      	adds	r7, #12
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa4:	4770      	bx	lr

08010aa6 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8010aa6:	b580      	push	{r7, lr}
 8010aa8:	b084      	sub	sp, #16
 8010aaa:	af00      	add	r7, sp, #0
 8010aac:	60f8      	str	r0, [r7, #12]
 8010aae:	4608      	mov	r0, r1
 8010ab0:	4611      	mov	r1, r2
 8010ab2:	461a      	mov	r2, r3
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	817b      	strh	r3, [r7, #10]
 8010ab8:	460b      	mov	r3, r1
 8010aba:	813b      	strh	r3, [r7, #8]
 8010abc:	4613      	mov	r3, r2
 8010abe:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8010ac0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010ac4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010ac8:	4619      	mov	r1, r3
 8010aca:	68f8      	ldr	r0, [r7, #12]
 8010acc:	f000 f82a 	bl	8010b24 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8010ad0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010ad4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010ad8:	4619      	mov	r1, r3
 8010ada:	68f8      	ldr	r0, [r7, #12]
 8010adc:	f000 f87e 	bl	8010bdc <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8010ae0:	bf00      	nop
 8010ae2:	3710      	adds	r7, #16
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	bd80      	pop	{r7, pc}

08010ae8 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8010ae8:	b480      	push	{r7}
 8010aea:	b083      	sub	sp, #12
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
 8010af0:	460b      	mov	r3, r1
 8010af2:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	887a      	ldrh	r2, [r7, #2]
 8010af8:	809a      	strh	r2, [r3, #4]
    }
 8010afa:	bf00      	nop
 8010afc:	370c      	adds	r7, #12
 8010afe:	46bd      	mov	sp, r7
 8010b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b04:	4770      	bx	lr

08010b06 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8010b06:	b480      	push	{r7}
 8010b08:	b083      	sub	sp, #12
 8010b0a:	af00      	add	r7, sp, #0
 8010b0c:	6078      	str	r0, [r7, #4]
 8010b0e:	460b      	mov	r3, r1
 8010b10:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	887a      	ldrh	r2, [r7, #2]
 8010b16:	80da      	strh	r2, [r3, #6]
    }
 8010b18:	bf00      	nop
 8010b1a:	370c      	adds	r7, #12
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b22:	4770      	bx	lr

08010b24 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b082      	sub	sp, #8
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
 8010b2c:	460b      	mov	r3, r1
 8010b2e:	807b      	strh	r3, [r7, #2]
 8010b30:	4613      	mov	r3, r2
 8010b32:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	332c      	adds	r3, #44	; 0x2c
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010b40:	4611      	mov	r1, r2
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	4798      	blx	r3
        setY(y);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	3330      	adds	r3, #48	; 0x30
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010b52:	4611      	mov	r1, r2
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	4798      	blx	r3
    }
 8010b58:	bf00      	nop
 8010b5a:	3708      	adds	r7, #8
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	bd80      	pop	{r7, pc}

08010b60 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8010b60:	b480      	push	{r7}
 8010b62:	b083      	sub	sp, #12
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
 8010b68:	460b      	mov	r3, r1
 8010b6a:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	887a      	ldrh	r2, [r7, #2]
 8010b70:	811a      	strh	r2, [r3, #8]
    }
 8010b72:	bf00      	nop
 8010b74:	370c      	adds	r7, #12
 8010b76:	46bd      	mov	sp, r7
 8010b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7c:	4770      	bx	lr

08010b7e <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8010b7e:	b480      	push	{r7}
 8010b80:	b083      	sub	sp, #12
 8010b82:	af00      	add	r7, sp, #0
 8010b84:	6078      	str	r0, [r7, #4]
 8010b86:	460b      	mov	r3, r1
 8010b88:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	887a      	ldrh	r2, [r7, #2]
 8010b8e:	815a      	strh	r2, [r3, #10]
    }
 8010b90:	bf00      	nop
 8010b92:	370c      	adds	r7, #12
 8010b94:	46bd      	mov	sp, r7
 8010b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9a:	4770      	bx	lr

08010b9c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8010b9c:	b480      	push	{r7}
 8010b9e:	b083      	sub	sp, #12
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
    {
    }
 8010ba4:	bf00      	nop
 8010ba6:	370c      	adds	r7, #12
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bae:	4770      	bx	lr

08010bb0 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
 8010bb0:	b480      	push	{r7}
 8010bb2:	b083      	sub	sp, #12
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
 8010bb8:	6039      	str	r1, [r7, #0]
    {
    }
 8010bba:	bf00      	nop
 8010bbc:	370c      	adds	r7, #12
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc4:	4770      	bx	lr

08010bc6 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
 8010bc6:	b480      	push	{r7}
 8010bc8:	b083      	sub	sp, #12
 8010bca:	af00      	add	r7, sp, #0
 8010bcc:	6078      	str	r0, [r7, #4]
 8010bce:	6039      	str	r1, [r7, #0]
    {
    }
 8010bd0:	bf00      	nop
 8010bd2:	370c      	adds	r7, #12
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bda:	4770      	bx	lr

08010bdc <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b082      	sub	sp, #8
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
 8010be4:	460b      	mov	r3, r1
 8010be6:	807b      	strh	r3, [r7, #2]
 8010be8:	4613      	mov	r3, r2
 8010bea:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	3334      	adds	r3, #52	; 0x34
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010bf8:	4611      	mov	r1, r2
 8010bfa:	6878      	ldr	r0, [r7, #4]
 8010bfc:	4798      	blx	r3
        setHeight(height);
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	3338      	adds	r3, #56	; 0x38
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010c0a:	4611      	mov	r1, r2
 8010c0c:	6878      	ldr	r0, [r7, #4]
 8010c0e:	4798      	blx	r3
    }
 8010c10:	bf00      	nop
 8010c12:	3708      	adds	r7, #8
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}

08010c18 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 8010c18:	b480      	push	{r7}
 8010c1a:	b083      	sub	sp, #12
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
 8010c20:	6039      	str	r1, [r7, #0]
    {
    }
 8010c22:	bf00      	nop
 8010c24:	370c      	adds	r7, #12
 8010c26:	46bd      	mov	sp, r7
 8010c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2c:	4770      	bx	lr

08010c2e <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8010c2e:	b480      	push	{r7}
 8010c30:	b083      	sub	sp, #12
 8010c32:	af00      	add	r7, sp, #0
 8010c34:	6078      	str	r0, [r7, #4]
    {
    }
 8010c36:	bf00      	nop
 8010c38:	370c      	adds	r7, #12
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c40:	4770      	bx	lr

08010c42 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 8010c42:	b480      	push	{r7}
 8010c44:	b083      	sub	sp, #12
 8010c46:	af00      	add	r7, sp, #0
 8010c48:	6078      	str	r0, [r7, #4]
 8010c4a:	460b      	mov	r3, r1
 8010c4c:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	78fa      	ldrb	r2, [r7, #3]
 8010c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8010c56:	bf00      	nop
 8010c58:	370c      	adds	r7, #12
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c60:	4770      	bx	lr

08010c62 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8010c62:	b480      	push	{r7}
 8010c64:	b083      	sub	sp, #12
 8010c66:	af00      	add	r7, sp, #0
 8010c68:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8010c70:	4618      	mov	r0, r3
 8010c72:	370c      	adds	r7, #12
 8010c74:	46bd      	mov	sp, r7
 8010c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7a:	4770      	bx	lr

08010c7c <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8010c7c:	b480      	push	{r7}
 8010c7e:	b083      	sub	sp, #12
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	370c      	adds	r7, #12
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c94:	4770      	bx	lr

08010c96 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8010c96:	b580      	push	{r7, lr}
 8010c98:	b082      	sub	sp, #8
 8010c9a:	af00      	add	r7, sp, #0
 8010c9c:	6078      	str	r0, [r7, #4]
 8010c9e:	460b      	mov	r3, r1
 8010ca0:	807b      	strh	r3, [r7, #2]
 8010ca2:	4613      	mov	r3, r2
 8010ca4:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	3350      	adds	r3, #80	; 0x50
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	8879      	ldrh	r1, [r7, #2]
 8010cb0:	687a      	ldr	r2, [r7, #4]
 8010cb2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8010cb6:	b292      	uxth	r2, r2
 8010cb8:	1a8a      	subs	r2, r1, r2
 8010cba:	b292      	uxth	r2, r2
 8010cbc:	b210      	sxth	r0, r2
 8010cbe:	8839      	ldrh	r1, [r7, #0]
 8010cc0:	687a      	ldr	r2, [r7, #4]
 8010cc2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8010cc6:	b292      	uxth	r2, r2
 8010cc8:	1a8a      	subs	r2, r1, r2
 8010cca:	b292      	uxth	r2, r2
 8010ccc:	b212      	sxth	r2, r2
 8010cce:	4601      	mov	r1, r0
 8010cd0:	6878      	ldr	r0, [r7, #4]
 8010cd2:	4798      	blx	r3
    }
 8010cd4:	bf00      	nop
 8010cd6:	3708      	adds	r7, #8
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}

08010cdc <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8010cdc:	b480      	push	{r7}
 8010cde:	b083      	sub	sp, #12
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010cea:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010cf2:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010cfa:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8010cfc:	bf00      	nop
 8010cfe:	370c      	adds	r7, #12
 8010d00:	46bd      	mov	sp, r7
 8010d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d06:	4770      	bx	lr

08010d08 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b084      	sub	sp, #16
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	60f8      	str	r0, [r7, #12]
 8010d10:	60b9      	str	r1, [r7, #8]
 8010d12:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8010d14:	68f8      	ldr	r0, [r7, #12]
 8010d16:	f7ff ffe1 	bl	8010cdc <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681a      	ldr	r2, [r3, #0]
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	68fa      	ldr	r2, [r7, #12]
 8010d26:	601a      	str	r2, [r3, #0]
    }
 8010d28:	bf00      	nop
 8010d2a:	3710      	adds	r7, #16
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	bd80      	pop	{r7, pc}

08010d30 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b082      	sub	sp, #8
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
    {
 8010d38:	4a06      	ldr	r2, [pc, #24]	; (8010d54 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	601a      	str	r2, [r3, #0]
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	3304      	adds	r3, #4
 8010d42:	4618      	mov	r0, r3
 8010d44:	f000 fe34 	bl	80119b0 <_ZN8touchgfx9ContainerD1Ev>
    }
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	3708      	adds	r7, #8
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bd80      	pop	{r7, pc}
 8010d52:	bf00      	nop
 8010d54:	0802bcd0 	.word	0x0802bcd0

08010d58 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b082      	sub	sp, #8
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
    }
 8010d60:	6878      	ldr	r0, [r7, #4]
 8010d62:	f7ff ffe5 	bl	8010d30 <_ZN8touchgfx6ScreenD1Ev>
 8010d66:	213c      	movs	r1, #60	; 0x3c
 8010d68:	6878      	ldr	r0, [r7, #4]
 8010d6a:	f015 fe30 	bl	80269ce <_ZdlPvj>
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	4618      	mov	r0, r3
 8010d72:	3708      	adds	r7, #8
 8010d74:	46bd      	mov	sp, r7
 8010d76:	bd80      	pop	{r7, pc}

08010d78 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8010d78:	b480      	push	{r7}
 8010d7a:	b083      	sub	sp, #12
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
    {
    }
 8010d80:	bf00      	nop
 8010d82:	370c      	adds	r7, #12
 8010d84:	46bd      	mov	sp, r7
 8010d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8a:	4770      	bx	lr

08010d8c <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8010d8c:	b480      	push	{r7}
 8010d8e:	b083      	sub	sp, #12
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
    {
    }
 8010d94:	bf00      	nop
 8010d96:	370c      	adds	r7, #12
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9e:	4770      	bx	lr

08010da0 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8010da0:	b480      	push	{r7}
 8010da2:	b083      	sub	sp, #12
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
    {
    }
 8010da8:	bf00      	nop
 8010daa:	370c      	adds	r7, #12
 8010dac:	46bd      	mov	sp, r7
 8010dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db2:	4770      	bx	lr

08010db4 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8010db4:	b480      	push	{r7}
 8010db6:	b083      	sub	sp, #12
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
    {
    }
 8010dbc:	bf00      	nop
 8010dbe:	370c      	adds	r7, #12
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc6:	4770      	bx	lr

08010dc8 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8010dc8:	b480      	push	{r7}
 8010dca:	b083      	sub	sp, #12
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
 8010dd0:	460b      	mov	r3, r1
 8010dd2:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010dd4:	bf00      	nop
 8010dd6:	370c      	adds	r7, #12
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dde:	4770      	bx	lr

08010de0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b082      	sub	sp, #8
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
 8010de8:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	3304      	adds	r3, #4
 8010dee:	6839      	ldr	r1, [r7, #0]
 8010df0:	4618      	mov	r0, r3
 8010df2:	f003 ff41 	bl	8014c78 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8010df6:	bf00      	nop
 8010df8:	3708      	adds	r7, #8
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd80      	pop	{r7, pc}

08010dfe <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8010dfe:	b580      	push	{r7, lr}
 8010e00:	b084      	sub	sp, #16
 8010e02:	af00      	add	r7, sp, #0
 8010e04:	60f8      	str	r0, [r7, #12]
 8010e06:	607b      	str	r3, [r7, #4]
 8010e08:	460b      	mov	r3, r1
 8010e0a:	817b      	strh	r3, [r7, #10]
 8010e0c:	4613      	mov	r3, r2
 8010e0e:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	4618      	mov	r0, r3
 8010e14:	f7ff ff25 	bl	8010c62 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d008      	beq.n	8010e30 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	4618      	mov	r0, r3
 8010e22:	f7ff ff2b 	bl	8010c7c <_ZNK8touchgfx8Drawable11isTouchableEv>
 8010e26:	4603      	mov	r3, r0
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d001      	beq.n	8010e30 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010e2c:	2301      	movs	r3, #1
 8010e2e:	e000      	b.n	8010e32 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8010e30:	2300      	movs	r3, #0
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d002      	beq.n	8010e3c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8010e36:	68fa      	ldr	r2, [r7, #12]
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	601a      	str	r2, [r3, #0]
        }
    }
 8010e3c:	bf00      	nop
 8010e3e:	3710      	adds	r7, #16
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}

08010e44 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b082      	sub	sp, #8
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f7ff fdd0 	bl	80109f4 <_ZN8touchgfx8DrawableC1Ev>
 8010e54:	4a03      	ldr	r2, [pc, #12]	; (8010e64 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	601a      	str	r2, [r3, #0]
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3708      	adds	r7, #8
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}
 8010e64:	0802a318 	.word	0x0802a318

08010e68 <_ZN8touchgfx6WidgetD1Ev>:
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b082      	sub	sp, #8
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
 8010e70:	4a05      	ldr	r2, [pc, #20]	; (8010e88 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	601a      	str	r2, [r3, #0]
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f7ff fde9 	bl	8010a50 <_ZN8touchgfx8DrawableD1Ev>
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	4618      	mov	r0, r3
 8010e82:	3708      	adds	r7, #8
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}
 8010e88:	0802a318 	.word	0x0802a318

08010e8c <_ZN8touchgfx6WidgetD0Ev>:
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b082      	sub	sp, #8
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
 8010e94:	6878      	ldr	r0, [r7, #4]
 8010e96:	f7ff ffe7 	bl	8010e68 <_ZN8touchgfx6WidgetD1Ev>
 8010e9a:	2128      	movs	r1, #40	; 0x28
 8010e9c:	6878      	ldr	r0, [r7, #4]
 8010e9e:	f015 fd96 	bl	80269ce <_ZdlPvj>
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	3708      	adds	r7, #8
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd80      	pop	{r7, pc}

08010eac <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b082      	sub	sp, #8
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	2326      	movs	r3, #38	; 0x26
 8010eba:	461a      	mov	r2, r3
 8010ebc:	2100      	movs	r1, #0
 8010ebe:	f015 ff5b 	bl	8026d78 <memset>
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	f7ff ffbd 	bl	8010e44 <_ZN8touchgfx6WidgetC1Ev>
 8010eca:	4a0a      	ldr	r2, [pc, #40]	; (8010ef4 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	601a      	str	r2, [r3, #0]
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	629a      	str	r2, [r3, #40]	; 0x28
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	2200      	movs	r2, #0
 8010eda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	2101      	movs	r1, #1
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f7ff fead 	bl	8010c42 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	4618      	mov	r0, r3
 8010eec:	3708      	adds	r7, #8
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}
 8010ef2:	bf00      	nop
 8010ef4:	0802b60c 	.word	0x0802b60c

08010ef8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 8010ef8:	b480      	push	{r7}
 8010efa:	b083      	sub	sp, #12
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
 8010f00:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	683a      	ldr	r2, [r7, #0]
 8010f06:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8010f08:	bf00      	nop
 8010f0a:	370c      	adds	r7, #12
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f12:	4770      	bx	lr

08010f14 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b082      	sub	sp, #8
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
 8010f1c:	4a05      	ldr	r2, [pc, #20]	; (8010f34 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	601a      	str	r2, [r3, #0]
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	4618      	mov	r0, r3
 8010f26:	f7ff ff9f 	bl	8010e68 <_ZN8touchgfx6WidgetD1Ev>
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	3708      	adds	r7, #8
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}
 8010f34:	0802b60c 	.word	0x0802b60c

08010f38 <_ZN8touchgfx14AbstractButtonD0Ev>:
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b082      	sub	sp, #8
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
 8010f40:	6878      	ldr	r0, [r7, #4]
 8010f42:	f7ff ffe7 	bl	8010f14 <_ZN8touchgfx14AbstractButtonD1Ev>
 8010f46:	2130      	movs	r1, #48	; 0x30
 8010f48:	6878      	ldr	r0, [r7, #4]
 8010f4a:	f015 fd40 	bl	80269ce <_ZdlPvj>
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	4618      	mov	r0, r3
 8010f52:	3708      	adds	r7, #8
 8010f54:	46bd      	mov	sp, r7
 8010f56:	bd80      	pop	{r7, pc}

08010f58 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b082      	sub	sp, #8
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	4618      	mov	r0, r3
 8010f64:	f7ff ffa2 	bl	8010eac <_ZN8touchgfx14AbstractButtonC1Ev>
 8010f68:	4a0c      	ldr	r2, [pc, #48]	; (8010f9c <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	601a      	str	r2, [r3, #0]
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	332e      	adds	r3, #46	; 0x2e
 8010f72:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010f76:	4618      	mov	r0, r3
 8010f78:	f7ff fd2c 	bl	80109d4 <_ZN8touchgfx6BitmapC1Et>
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	3330      	adds	r3, #48	; 0x30
 8010f80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010f84:	4618      	mov	r0, r3
 8010f86:	f7ff fd25 	bl	80109d4 <_ZN8touchgfx6BitmapC1Et>
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	22ff      	movs	r2, #255	; 0xff
 8010f8e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	4618      	mov	r0, r3
 8010f96:	3708      	adds	r7, #8
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd80      	pop	{r7, pc}
 8010f9c:	0802b858 	.word	0x0802b858

08010fa0 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b082      	sub	sp, #8
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	4618      	mov	r0, r3
 8010fac:	2326      	movs	r3, #38	; 0x26
 8010fae:	461a      	mov	r2, r3
 8010fb0:	2100      	movs	r1, #0
 8010fb2:	f015 fee1 	bl	8026d78 <memset>
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f7ff ff43 	bl	8010e44 <_ZN8touchgfx6WidgetC1Ev>
 8010fbe:	4a09      	ldr	r2, [pc, #36]	; (8010fe4 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	601a      	str	r2, [r3, #0]
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	22ff      	movs	r2, #255	; 0xff
 8010fc8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	3328      	adds	r3, #40	; 0x28
 8010fd0:	2100      	movs	r1, #0
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f7ff fcb8 	bl	8010948 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	4618      	mov	r0, r3
 8010fdc:	3708      	adds	r7, #8
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}
 8010fe2:	bf00      	nop
 8010fe4:	0802b790 	.word	0x0802b790

08010fe8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8010fe8:	b480      	push	{r7}
 8010fea:	b083      	sub	sp, #12
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
 8010ff0:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	683a      	ldr	r2, [r7, #0]
 8010ff6:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8010ff8:	bf00      	nop
 8010ffa:	370c      	adds	r7, #12
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011002:	4770      	bx	lr

08011004 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     *
     * @note This function is not available to call before the LCD has been setup, because the
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 8011004:	b590      	push	{r4, r7, lr}
 8011006:	b083      	sub	sp, #12
 8011008:	af00      	add	r7, sp, #0
 801100a:	4603      	mov	r3, r0
 801100c:	71fb      	strb	r3, [r7, #7]
 801100e:	460b      	mov	r3, r1
 8011010:	71bb      	strb	r3, [r7, #6]
 8011012:	4613      	mov	r3, r2
 8011014:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 8011016:	f7ff f81d 	bl	8010054 <_ZN8touchgfx3HAL11getInstanceEv>
 801101a:	4603      	mov	r3, r0
 801101c:	2b00      	cmp	r3, #0
 801101e:	d105      	bne.n	801102c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8011020:	4b0a      	ldr	r3, [pc, #40]	; (801104c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 8011022:	4a0b      	ldr	r2, [pc, #44]	; (8011050 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8011024:	2135      	movs	r1, #53	; 0x35
 8011026:	480b      	ldr	r0, [pc, #44]	; (8011054 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8011028:	f015 fdfc 	bl	8026c24 <__assert_func>
 801102c:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 801102e:	f7ff f81d 	bl	801006c <_ZN8touchgfx3HAL3lcdEv>
 8011032:	6803      	ldr	r3, [r0, #0]
 8011034:	3328      	adds	r3, #40	; 0x28
 8011036:	681c      	ldr	r4, [r3, #0]
 8011038:	797b      	ldrb	r3, [r7, #5]
 801103a:	79ba      	ldrb	r2, [r7, #6]
 801103c:	79f9      	ldrb	r1, [r7, #7]
 801103e:	47a0      	blx	r4
 8011040:	4603      	mov	r3, r0
    }
 8011042:	4618      	mov	r0, r3
 8011044:	370c      	adds	r7, #12
 8011046:	46bd      	mov	sp, r7
 8011048:	bd90      	pop	{r4, r7, pc}
 801104a:	bf00      	nop
 801104c:	0802983c 	.word	0x0802983c
 8011050:	08029880 	.word	0x08029880
 8011054:	080298dc 	.word	0x080298dc

08011058 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bitmap (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bitmap = Bitmap())
 8011058:	b580      	push	{r7, lr}
 801105a:	b082      	sub	sp, #8
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
 8011060:	6039      	str	r1, [r7, #0]
        : Widget(), alpha(255)
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	4618      	mov	r0, r3
 8011066:	2326      	movs	r3, #38	; 0x26
 8011068:	461a      	mov	r2, r3
 801106a:	2100      	movs	r1, #0
 801106c:	f015 fe84 	bl	8026d78 <memset>
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	4618      	mov	r0, r3
 8011074:	f7ff fee6 	bl	8010e44 <_ZN8touchgfx6WidgetC1Ev>
 8011078:	4a0b      	ldr	r2, [pc, #44]	; (80110a8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x50>)
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	601a      	str	r2, [r3, #0]
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	3326      	adds	r3, #38	; 0x26
 8011082:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011086:	4618      	mov	r0, r3
 8011088:	f7ff fca4 	bl	80109d4 <_ZN8touchgfx6BitmapC1Et>
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	22ff      	movs	r2, #255	; 0xff
 8011090:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bitmap);
 8011094:	6839      	ldr	r1, [r7, #0]
 8011096:	6878      	ldr	r0, [r7, #4]
 8011098:	f005 f9c2 	bl	8016420 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	4618      	mov	r0, r3
 80110a0:	3708      	adds	r7, #8
 80110a2:	46bd      	mov	sp, r7
 80110a4:	bd80      	pop	{r7, pc}
 80110a6:	bf00      	nop
 80110a8:	0802b9a4 	.word	0x0802b9a4

080110ac <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 80110ac:	b480      	push	{r7}
 80110ae:	b083      	sub	sp, #12
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
 80110b4:	460b      	mov	r3, r1
 80110b6:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 80110b8:	4a06      	ldr	r2, [pc, #24]	; (80110d4 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	601a      	str	r2, [r3, #0]
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	887a      	ldrh	r2, [r7, #2]
 80110c2:	809a      	strh	r2, [r3, #4]
    }
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	4618      	mov	r0, r3
 80110c8:	370c      	adds	r7, #12
 80110ca:	46bd      	mov	sp, r7
 80110cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d0:	4770      	bx	lr
 80110d2:	bf00      	nop
 80110d4:	0802a0e0 	.word	0x0802a0e0

080110d8 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 80110d8:	b580      	push	{r7, lr}
 80110da:	b082      	sub	sp, #8
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	4618      	mov	r0, r3
 80110e4:	2326      	movs	r3, #38	; 0x26
 80110e6:	461a      	mov	r2, r3
 80110e8:	2100      	movs	r1, #0
 80110ea:	f015 fe45 	bl	8026d78 <memset>
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	4618      	mov	r0, r3
 80110f2:	f7ff fea7 	bl	8010e44 <_ZN8touchgfx6WidgetC1Ev>
 80110f6:	4a14      	ldr	r2, [pc, #80]	; (8011148 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	601a      	str	r2, [r3, #0]
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	3328      	adds	r3, #40	; 0x28
 8011100:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011104:	4618      	mov	r0, r3
 8011106:	f7ff ffd1 	bl	80110ac <_ZN8touchgfx9TypedTextC1Et>
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	3330      	adds	r3, #48	; 0x30
 801110e:	2100      	movs	r1, #0
 8011110:	4618      	mov	r0, r3
 8011112:	f7ff fc19 	bl	8010948 <_ZN8touchgfx9colortypeC1Em>
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	2200      	movs	r2, #0
 801111a:	869a      	strh	r2, [r3, #52]	; 0x34
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	22ff      	movs	r2, #255	; 0xff
 8011120:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	2200      	movs	r2, #0
 8011128:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	2200      	movs	r2, #0
 8011130:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2200      	movs	r2, #0
 8011138:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	4618      	mov	r0, r3
 8011140:	3708      	adds	r7, #8
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}
 8011146:	bf00      	nop
 8011148:	0802b6e8 	.word	0x0802b6e8

0801114c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 801114c:	b580      	push	{r7, lr}
 801114e:	b082      	sub	sp, #8
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
 8011154:	4a08      	ldr	r2, [pc, #32]	; (8011178 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	601a      	str	r2, [r3, #0]
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	3328      	adds	r3, #40	; 0x28
 801115e:	4618      	mov	r0, r3
 8011160:	f7fe fd0e 	bl	800fb80 <_ZN8touchgfx9TypedTextD1Ev>
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	4618      	mov	r0, r3
 8011168:	f7ff fe7e 	bl	8010e68 <_ZN8touchgfx6WidgetD1Ev>
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	4618      	mov	r0, r3
 8011170:	3708      	adds	r7, #8
 8011172:	46bd      	mov	sp, r7
 8011174:	bd80      	pop	{r7, pc}
 8011176:	bf00      	nop
 8011178:	0802b6e8 	.word	0x0802b6e8

0801117c <_ZN8touchgfx8TextAreaD0Ev>:
 801117c:	b580      	push	{r7, lr}
 801117e:	b082      	sub	sp, #8
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	6878      	ldr	r0, [r7, #4]
 8011186:	f7ff ffe1 	bl	801114c <_ZN8touchgfx8TextAreaD1Ev>
 801118a:	213c      	movs	r1, #60	; 0x3c
 801118c:	6878      	ldr	r0, [r7, #4]
 801118e:	f015 fc1e 	bl	80269ce <_ZdlPvj>
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	4618      	mov	r0, r3
 8011196:	3708      	adds	r7, #8
 8011198:	46bd      	mov	sp, r7
 801119a:	bd80      	pop	{r7, pc}

0801119c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 801119c:	b580      	push	{r7, lr}
 801119e:	b082      	sub	sp, #8
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	4618      	mov	r0, r3
 80111a8:	f7ff ff96 	bl	80110d8 <_ZN8touchgfx8TextAreaC1Ev>
 80111ac:	4a05      	ldr	r2, [pc, #20]	; (80111c4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	601a      	str	r2, [r3, #0]
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2200      	movs	r2, #0
 80111b6:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	4618      	mov	r0, r3
 80111bc:	3708      	adds	r7, #8
 80111be:	46bd      	mov	sp, r7
 80111c0:	bd80      	pop	{r7, pc}
 80111c2:	bf00      	nop
 80111c4:	0802b8fc 	.word	0x0802b8fc

080111c8 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>:
     *
     * @param  dm The new display mode.
     *
     * @see DisplayMode, getDisplayMode
     */
    virtual void setDisplayMode(DisplayMode dm)
 80111c8:	b480      	push	{r7}
 80111ca:	b083      	sub	sp, #12
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
 80111d0:	460b      	mov	r3, r1
 80111d2:	70fb      	strb	r3, [r7, #3]
    {
        displayMode = dm;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	78fa      	ldrb	r2, [r7, #3]
 80111d8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    }
 80111dc:	bf00      	nop
 80111de:	370c      	adds	r7, #12
 80111e0:	46bd      	mov	sp, r7
 80111e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e6:	4770      	bx	lr

080111e8 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b084      	sub	sp, #16
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	60f8      	str	r0, [r7, #12]
 80111f0:	60b9      	str	r1, [r7, #8]
 80111f2:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bitmapPressed;
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	687a      	ldr	r2, [r7, #4]
 80111f8:	8812      	ldrh	r2, [r2, #0]
 80111fa:	869a      	strh	r2, [r3, #52]	; 0x34
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	687a      	ldr	r2, [r7, #4]
 8011200:	68b9      	ldr	r1, [r7, #8]
 8011202:	4618      	mov	r0, r3
 8011204:	f004 ff9a 	bl	801613c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 8011208:	bf00      	nop
 801120a:	3710      	adds	r7, #16
 801120c:	46bd      	mov	sp, r7
 801120e:	bd80      	pop	{r7, pc}

08011210 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 8011210:	b580      	push	{r7, lr}
 8011212:	b082      	sub	sp, #8
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
 8011218:	4a05      	ldr	r2, [pc, #20]	; (8011230 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	601a      	str	r2, [r3, #0]
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	4618      	mov	r0, r3
 8011222:	f7ff fd85 	bl	8010d30 <_ZN8touchgfx6ScreenD1Ev>
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	4618      	mov	r0, r3
 801122a:	3708      	adds	r7, #8
 801122c:	46bd      	mov	sp, r7
 801122e:	bd80      	pop	{r7, pc}
 8011230:	0802a2cc 	.word	0x0802a2cc

08011234 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 8011234:	b580      	push	{r7, lr}
 8011236:	b082      	sub	sp, #8
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
 801123c:	6878      	ldr	r0, [r7, #4]
 801123e:	f7ff ffe7 	bl	8011210 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 8011242:	2140      	movs	r1, #64	; 0x40
 8011244:	6878      	ldr	r0, [r7, #4]
 8011246:	f015 fbc2 	bl	80269ce <_ZdlPvj>
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	4618      	mov	r0, r3
 801124e:	3708      	adds	r7, #8
 8011250:	46bd      	mov	sp, r7
 8011252:	bd80      	pop	{r7, pc}

08011254 <_ZN14screenViewBaseD1Ev>:

class screenViewBase : public touchgfx::View<screenPresenter>
{
public:
    screenViewBase();
    virtual ~screenViewBase() {}
 8011254:	b580      	push	{r7, lr}
 8011256:	b082      	sub	sp, #8
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
 801125c:	4a25      	ldr	r2, [pc, #148]	; (80112f4 <_ZN14screenViewBaseD1Ev+0xa0>)
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	601a      	str	r2, [r3, #0]
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8011268:	4618      	mov	r0, r3
 801126a:	f000 fb7f 	bl	801196c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8011274:	4618      	mov	r0, r3
 8011276:	f000 fc6d 	bl	8011b54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8011280:	4618      	mov	r0, r3
 8011282:	f000 fc67 	bl	8011b54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 801128c:	4618      	mov	r0, r3
 801128e:	f000 f859 	bl	8011344 <_ZN8touchgfx6ButtonD1Ev>
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011298:	4618      	mov	r0, r3
 801129a:	f000 fc39 	bl	8011b10 <_ZN8touchgfx12ToggleButtonD1Ev>
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80112a4:	4618      	mov	r0, r3
 80112a6:	f000 fc11 	bl	8011acc <_ZN8touchgfx5ImageD1Ev>
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80112b0:	4618      	mov	r0, r3
 80112b2:	f000 fc0b 	bl	8011acc <_ZN8touchgfx5ImageD1Ev>
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80112bc:	4618      	mov	r0, r3
 80112be:	f000 fc05 	bl	8011acc <_ZN8touchgfx5ImageD1Ev>
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	33f8      	adds	r3, #248	; 0xf8
 80112c6:	4618      	mov	r0, r3
 80112c8:	f000 fc00 	bl	8011acc <_ZN8touchgfx5ImageD1Ev>
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	336c      	adds	r3, #108	; 0x6c
 80112d0:	4618      	mov	r0, r3
 80112d2:	f000 fbd3 	bl	8011a7c <_ZN8touchgfx12DigitalClockD1Ev>
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	3340      	adds	r3, #64	; 0x40
 80112da:	4618      	mov	r0, r3
 80112dc:	f000 fb8a 	bl	80119f4 <_ZN8touchgfx3BoxD1Ev>
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	4618      	mov	r0, r3
 80112e4:	f7ff ff94 	bl	8011210 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	4618      	mov	r0, r3
 80112ec:	3708      	adds	r7, #8
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}
 80112f2:	bf00      	nop
 80112f4:	0802a278 	.word	0x0802a278

080112f8 <_ZN14screenViewBaseD0Ev>:
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b082      	sub	sp, #8
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
 8011300:	6878      	ldr	r0, [r7, #4]
 8011302:	f7ff ffa7 	bl	8011254 <_ZN14screenViewBaseD1Ev>
 8011306:	f44f 7129 	mov.w	r1, #676	; 0x2a4
 801130a:	6878      	ldr	r0, [r7, #4]
 801130c:	f015 fb5f 	bl	80269ce <_ZdlPvj>
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	4618      	mov	r0, r3
 8011314:	3708      	adds	r7, #8
 8011316:	46bd      	mov	sp, r7
 8011318:	bd80      	pop	{r7, pc}

0801131a <_ZN14screenViewBase22updateOnOffButtonStateEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void updateOnOffButtonState()
 801131a:	b480      	push	{r7}
 801131c:	b083      	sub	sp, #12
 801131e:	af00      	add	r7, sp, #0
 8011320:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in screen
    }
 8011322:	bf00      	nop
 8011324:	370c      	adds	r7, #12
 8011326:	46bd      	mov	sp, r7
 8011328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132c:	4770      	bx	lr

0801132e <_ZN14screenViewBase22updateSetUpButtonStateEv>:

    virtual void updateSetUpButtonState()
 801132e:	b480      	push	{r7}
 8011330:	b083      	sub	sp, #12
 8011332:	af00      	add	r7, sp, #0
 8011334:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in screen
    }
 8011336:	bf00      	nop
 8011338:	370c      	adds	r7, #12
 801133a:	46bd      	mov	sp, r7
 801133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011340:	4770      	bx	lr
	...

08011344 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8011344:	b580      	push	{r7, lr}
 8011346:	b082      	sub	sp, #8
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
 801134c:	4a05      	ldr	r2, [pc, #20]	; (8011364 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	601a      	str	r2, [r3, #0]
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	4618      	mov	r0, r3
 8011356:	f7ff fddd 	bl	8010f14 <_ZN8touchgfx14AbstractButtonD1Ev>
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	4618      	mov	r0, r3
 801135e:	3708      	adds	r7, #8
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}
 8011364:	0802b858 	.word	0x0802b858

08011368 <_ZN8touchgfx6ButtonD0Ev>:
 8011368:	b580      	push	{r7, lr}
 801136a:	b082      	sub	sp, #8
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
 8011370:	6878      	ldr	r0, [r7, #4]
 8011372:	f7ff ffe7 	bl	8011344 <_ZN8touchgfx6ButtonD1Ev>
 8011376:	2134      	movs	r1, #52	; 0x34
 8011378:	6878      	ldr	r0, [r7, #4]
 801137a:	f015 fb28 	bl	80269ce <_ZdlPvj>
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	4618      	mov	r0, r3
 8011382:	3708      	adds	r7, #8
 8011384:	46bd      	mov	sp, r7
 8011386:	bd80      	pop	{r7, pc}

08011388 <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 8011388:	b580      	push	{r7, lr}
 801138a:	b082      	sub	sp, #8
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	4618      	mov	r0, r3
 8011394:	f7ff fde0 	bl	8010f58 <_ZN8touchgfx6ButtonC1Ev>
 8011398:	4a07      	ldr	r2, [pc, #28]	; (80113b8 <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	601a      	str	r2, [r3, #0]
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	3334      	adds	r3, #52	; 0x34
 80113a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80113a6:	4618      	mov	r0, r3
 80113a8:	f7ff fb14 	bl	80109d4 <_ZN8touchgfx6BitmapC1Et>
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	4618      	mov	r0, r3
 80113b0:	3708      	adds	r7, #8
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}
 80113b6:	bf00      	nop
 80113b8:	0802b678 	.word	0x0802b678

080113bc <_ZN14screenViewBaseC1Ev>:
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

screenViewBase::screenViewBase() :
 80113bc:	b590      	push	{r4, r7, lr}
 80113be:	b0a1      	sub	sp, #132	; 0x84
 80113c0:	af02      	add	r7, sp, #8
 80113c2:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &screenViewBase::buttonCallbackHandler)
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	4618      	mov	r0, r3
 80113c8:	f000 fa6a 	bl	80118a0 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 80113cc:	4ae0      	ldr	r2, [pc, #896]	; (8011750 <_ZN14screenViewBaseC1Ev+0x394>)
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	601a      	str	r2, [r3, #0]
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	3340      	adds	r3, #64	; 0x40
 80113d6:	4618      	mov	r0, r3
 80113d8:	f7ff fde2 	bl	8010fa0 <_ZN8touchgfx3BoxC1Ev>
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	336c      	adds	r3, #108	; 0x6c
 80113e0:	4618      	mov	r0, r3
 80113e2:	f003 fb07 	bl	80149f4 <_ZN8touchgfx12DigitalClockC1Ev>
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	f103 04f8 	add.w	r4, r3, #248	; 0xf8
 80113ec:	f107 0310 	add.w	r3, r7, #16
 80113f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80113f4:	4618      	mov	r0, r3
 80113f6:	f7ff faed 	bl	80109d4 <_ZN8touchgfx6BitmapC1Et>
 80113fa:	f107 0310 	add.w	r3, r7, #16
 80113fe:	4619      	mov	r1, r3
 8011400:	4620      	mov	r0, r4
 8011402:	f7ff fe29 	bl	8011058 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	f503 7492 	add.w	r4, r3, #292	; 0x124
 801140c:	f107 0314 	add.w	r3, r7, #20
 8011410:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011414:	4618      	mov	r0, r3
 8011416:	f7ff fadd 	bl	80109d4 <_ZN8touchgfx6BitmapC1Et>
 801141a:	f107 0314 	add.w	r3, r7, #20
 801141e:	4619      	mov	r1, r3
 8011420:	4620      	mov	r0, r4
 8011422:	f7ff fe19 	bl	8011058 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 801142c:	f107 0318 	add.w	r3, r7, #24
 8011430:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011434:	4618      	mov	r0, r3
 8011436:	f7ff facd 	bl	80109d4 <_ZN8touchgfx6BitmapC1Et>
 801143a:	f107 0318 	add.w	r3, r7, #24
 801143e:	4619      	mov	r1, r3
 8011440:	4620      	mov	r0, r4
 8011442:	f7ff fe09 	bl	8011058 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	f503 74be 	add.w	r4, r3, #380	; 0x17c
 801144c:	f107 031c 	add.w	r3, r7, #28
 8011450:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011454:	4618      	mov	r0, r3
 8011456:	f7ff fabd 	bl	80109d4 <_ZN8touchgfx6BitmapC1Et>
 801145a:	f107 031c 	add.w	r3, r7, #28
 801145e:	4619      	mov	r1, r3
 8011460:	4620      	mov	r0, r4
 8011462:	f7ff fdf9 	bl	8011058 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801146c:	4618      	mov	r0, r3
 801146e:	f7ff ff8b 	bl	8011388 <_ZN8touchgfx12ToggleButtonC1Ev>
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8011478:	4618      	mov	r0, r3
 801147a:	f7ff fd6d 	bl	8010f58 <_ZN8touchgfx6ButtonC1Ev>
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8011484:	4618      	mov	r0, r3
 8011486:	f7ff fe89 	bl	801119c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8011490:	4618      	mov	r0, r3
 8011492:	f7ff fe83 	bl	801119c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	f503 7025 	add.w	r0, r3, #660	; 0x294
 801149c:	4bad      	ldr	r3, [pc, #692]	; (8011754 <_ZN14screenViewBaseC1Ev+0x398>)
 801149e:	623b      	str	r3, [r7, #32]
 80114a0:	2300      	movs	r3, #0
 80114a2:	627b      	str	r3, [r7, #36]	; 0x24
 80114a4:	f107 0320 	add.w	r3, r7, #32
 80114a8:	cb0c      	ldmia	r3, {r2, r3}
 80114aa:	6879      	ldr	r1, [r7, #4]
 80114ac:	f000 fa1e 	bl	80118ec <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 240, 320);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80114b6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80114ba:	9300      	str	r3, [sp, #0]
 80114bc:	23f0      	movs	r3, #240	; 0xf0
 80114be:	2200      	movs	r2, #0
 80114c0:	2100      	movs	r1, #0
 80114c2:	f7ff faf0 	bl	8010aa6 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80114cc:	2200      	movs	r2, #0
 80114ce:	2100      	movs	r1, #0
 80114d0:	2000      	movs	r0, #0
 80114d2:	f7ff fd97 	bl	8011004 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80114d6:	4603      	mov	r3, r0
 80114d8:	4619      	mov	r1, r3
 80114da:	4620      	mov	r0, r4
 80114dc:	f7ff fd84 	bl	8010fe8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    digitalClock1.setPosition(7, 16, 66, 31);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80114e6:	231f      	movs	r3, #31
 80114e8:	9300      	str	r3, [sp, #0]
 80114ea:	2342      	movs	r3, #66	; 0x42
 80114ec:	2210      	movs	r2, #16
 80114ee:	2107      	movs	r1, #7
 80114f0:	f7ff fad9 	bl	8010aa6 <_ZN8touchgfx8Drawable11setPositionEssss>
    digitalClock1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80114fa:	2200      	movs	r2, #0
 80114fc:	2100      	movs	r1, #0
 80114fe:	2000      	movs	r0, #0
 8011500:	f7ff fd80 	bl	8011004 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011504:	4603      	mov	r3, r0
 8011506:	4619      	mov	r1, r3
 8011508:	4620      	mov	r0, r4
 801150a:	f003 f938 	bl	801477e <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>
    digitalClock1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8011514:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011518:	2100      	movs	r1, #0
 801151a:	4618      	mov	r0, r3
 801151c:	f7ff fdc6 	bl	80110ac <_ZN8touchgfx9TypedTextC1Et>
 8011520:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011524:	4619      	mov	r1, r3
 8011526:	4620      	mov	r0, r4
 8011528:	f003 f96e 	bl	8014808 <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>
 801152c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011530:	4618      	mov	r0, r3
 8011532:	f7fe fb25 	bl	800fb80 <_ZN8touchgfx9TypedTextD1Ev>
    digitalClock1.displayLeadingZeroForHourIndicator(true);
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	336c      	adds	r3, #108	; 0x6c
 801153a:	2101      	movs	r1, #1
 801153c:	4618      	mov	r0, r3
 801153e:	f003 fa9b 	bl	8014a78 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>
    digitalClock1.setDisplayMode(touchgfx::DigitalClock::DISPLAY_24_HOUR_NO_SECONDS);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	336c      	adds	r3, #108	; 0x6c
 8011546:	2101      	movs	r1, #1
 8011548:	4618      	mov	r0, r3
 801154a:	f7ff fe3d 	bl	80111c8 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>
    digitalClock1.setTime24Hour(9, 10, 0);
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8011554:	2300      	movs	r3, #0
 8011556:	220a      	movs	r2, #10
 8011558:	2109      	movs	r1, #9
 801155a:	f003 fa90 	bl	8014a7e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>

    humImage.setXY(9, 160);
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	33f8      	adds	r3, #248	; 0xf8
 8011562:	22a0      	movs	r2, #160	; 0xa0
 8011564:	2109      	movs	r1, #9
 8011566:	4618      	mov	r0, r3
 8011568:	f7ff fadc 	bl	8010b24 <_ZN8touchgfx8Drawable5setXYEss>
    humImage.setBitmap(touchgfx::Bitmap(BITMAP_ICONS8_HUMIDITY_64_ID));
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	f103 04f8 	add.w	r4, r3, #248	; 0xf8
 8011572:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011576:	2103      	movs	r1, #3
 8011578:	4618      	mov	r0, r3
 801157a:	f7ff fa2b 	bl	80109d4 <_ZN8touchgfx6BitmapC1Et>
 801157e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011582:	4619      	mov	r1, r3
 8011584:	4620      	mov	r0, r4
 8011586:	f004 ff4b 	bl	8016420 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    tempImage.setXY(-7, 47);
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8011590:	222f      	movs	r2, #47	; 0x2f
 8011592:	f06f 0106 	mvn.w	r1, #6
 8011596:	4618      	mov	r0, r3
 8011598:	f7ff fac4 	bl	8010b24 <_ZN8touchgfx8Drawable5setXYEss>
    tempImage.setBitmap(touchgfx::Bitmap(BITMAP_ICONS8_TEMPERATURE_96_ID));
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f503 7492 	add.w	r4, r3, #292	; 0x124
 80115a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80115a6:	2106      	movs	r1, #6
 80115a8:	4618      	mov	r0, r3
 80115aa:	f7ff fa13 	bl	80109d4 <_ZN8touchgfx6BitmapC1Et>
 80115ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80115b2:	4619      	mov	r1, r3
 80115b4:	4620      	mov	r0, r4
 80115b6:	f004 ff33 	bl	8016420 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    wifiImage.setXY(185, 7);
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80115c0:	2207      	movs	r2, #7
 80115c2:	21b9      	movs	r1, #185	; 0xb9
 80115c4:	4618      	mov	r0, r3
 80115c6:	f7ff faad 	bl	8010b24 <_ZN8touchgfx8Drawable5setXYEss>
    wifiImage.setBitmap(touchgfx::Bitmap(BITMAP_ICONS8_WI_FI_48_ID));
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 80115d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80115d4:	2107      	movs	r1, #7
 80115d6:	4618      	mov	r0, r3
 80115d8:	f7ff f9fc 	bl	80109d4 <_ZN8touchgfx6BitmapC1Et>
 80115dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80115e0:	4619      	mov	r1, r3
 80115e2:	4620      	mov	r0, r4
 80115e4:	f004 ff1c 	bl	8016420 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    celsiusImage.setXY(177, 79);
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80115ee:	224f      	movs	r2, #79	; 0x4f
 80115f0:	21b1      	movs	r1, #177	; 0xb1
 80115f2:	4618      	mov	r0, r3
 80115f4:	f7ff fa96 	bl	8010b24 <_ZN8touchgfx8Drawable5setXYEss>
    celsiusImage.setBitmap(touchgfx::Bitmap(BITMAP_ICONS8_CELSIUS_32_ID));
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	f503 74be 	add.w	r4, r3, #380	; 0x17c
 80115fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011602:	2102      	movs	r1, #2
 8011604:	4618      	mov	r0, r3
 8011606:	f7ff f9e5 	bl	80109d4 <_ZN8touchgfx6BitmapC1Et>
 801160a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801160e:	4619      	mov	r1, r3
 8011610:	4620      	mov	r0, r4
 8011612:	f004 ff05 	bl	8016420 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    humOnOffButton.setXY(92, 251);
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801161c:	22fb      	movs	r2, #251	; 0xfb
 801161e:	215c      	movs	r1, #92	; 0x5c
 8011620:	4618      	mov	r0, r3
 8011622:	f7ff fa7f 	bl	8010b24 <_ZN8touchgfx8Drawable5setXYEss>
    humOnOffButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_ON_ID));
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 801162c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011630:	2100      	movs	r1, #0
 8011632:	4618      	mov	r0, r3
 8011634:	f7ff f9ce 	bl	80109d4 <_ZN8touchgfx6BitmapC1Et>
 8011638:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801163c:	2101      	movs	r1, #1
 801163e:	4618      	mov	r0, r3
 8011640:	f7ff f9c8 	bl	80109d4 <_ZN8touchgfx6BitmapC1Et>
 8011644:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8011648:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801164c:	4619      	mov	r1, r3
 801164e:	4620      	mov	r0, r4
 8011650:	f7ff fdca 	bl	80111e8 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    humOnOffButton.setAction(buttonCallback);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8011660:	4619      	mov	r1, r3
 8011662:	4610      	mov	r0, r2
 8011664:	f7ff fc48 	bl	8010ef8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    setUpButton.setXY(17, 246);
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 801166e:	22f6      	movs	r2, #246	; 0xf6
 8011670:	2111      	movs	r1, #17
 8011672:	4618      	mov	r0, r3
 8011674:	f7ff fa56 	bl	8010b24 <_ZN8touchgfx8Drawable5setXYEss>
    setUpButton.setBitmaps(touchgfx::Bitmap(BITMAP_ICONS8_SETTINGS_48_ID), touchgfx::Bitmap(BITMAP_ICONS8_SETTINGS_48_ID));
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	f503 74f0 	add.w	r4, r3, #480	; 0x1e0
 801167e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011682:	2104      	movs	r1, #4
 8011684:	4618      	mov	r0, r3
 8011686:	f7ff f9a5 	bl	80109d4 <_ZN8touchgfx6BitmapC1Et>
 801168a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801168e:	2104      	movs	r1, #4
 8011690:	4618      	mov	r0, r3
 8011692:	f7ff f99f 	bl	80109d4 <_ZN8touchgfx6BitmapC1Et>
 8011696:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801169a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801169e:	4619      	mov	r1, r3
 80116a0:	4620      	mov	r0, r4
 80116a2:	f004 fd4b 	bl	801613c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    setUpButton.setAction(buttonCallback);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	f503 72f0 	add.w	r2, r3, #480	; 0x1e0
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80116b2:	4619      	mov	r1, r3
 80116b4:	4610      	mov	r0, r2
 80116b6:	f7ff fc1f 	bl	8010ef8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    humText.setXY(164, 180);
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80116c0:	22b4      	movs	r2, #180	; 0xb4
 80116c2:	21a4      	movs	r1, #164	; 0xa4
 80116c4:	4618      	mov	r0, r3
 80116c6:	f7ff fa2d 	bl	8010b24 <_ZN8touchgfx8Drawable5setXYEss>
    humText.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	f503 7405 	add.w	r4, r3, #532	; 0x214
 80116d0:	22ff      	movs	r2, #255	; 0xff
 80116d2:	21ff      	movs	r1, #255	; 0xff
 80116d4:	20ff      	movs	r0, #255	; 0xff
 80116d6:	f7ff fc95 	bl	8011004 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80116da:	4603      	mov	r3, r0
 80116dc:	663c      	str	r4, [r7, #96]	; 0x60
 80116de:	60fb      	str	r3, [r7, #12]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 80116e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80116e2:	68fa      	ldr	r2, [r7, #12]
 80116e4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80116e6:	bf00      	nop
    humText.setLinespacing(0);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80116ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80116f0:	2300      	movs	r3, #0
 80116f2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 80116f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80116f8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80116fc:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80116fe:	bf00      	nop
    humText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	f503 7405 	add.w	r4, r3, #532	; 0x214
 8011706:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801170a:	2101      	movs	r1, #1
 801170c:	4618      	mov	r0, r3
 801170e:	f7ff fccd 	bl	80110ac <_ZN8touchgfx9TypedTextC1Et>
 8011712:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011716:	4619      	mov	r1, r3
 8011718:	4620      	mov	r0, r4
 801171a:	f004 fcd8 	bl	80160ce <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 801171e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011722:	4618      	mov	r0, r3
 8011724:	f7fe fa2c 	bl	800fb80 <_ZN8touchgfx9TypedTextD1Ev>

    tempText.setXY(156, 71);
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 801172e:	2247      	movs	r2, #71	; 0x47
 8011730:	219c      	movs	r1, #156	; 0x9c
 8011732:	4618      	mov	r0, r3
 8011734:	f7ff f9f6 	bl	8010b24 <_ZN8touchgfx8Drawable5setXYEss>
    tempText.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	f503 7415 	add.w	r4, r3, #596	; 0x254
 801173e:	22ff      	movs	r2, #255	; 0xff
 8011740:	21ff      	movs	r1, #255	; 0xff
 8011742:	20ff      	movs	r0, #255	; 0xff
 8011744:	f7ff fc5e 	bl	8011004 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8011748:	4603      	mov	r3, r0
 801174a:	66fc      	str	r4, [r7, #108]	; 0x6c
 801174c:	e004      	b.n	8011758 <_ZN14screenViewBaseC1Ev+0x39c>
 801174e:	bf00      	nop
 8011750:	0802a278 	.word	0x0802a278
 8011754:	0801185d 	.word	0x0801185d
 8011758:	60bb      	str	r3, [r7, #8]
        this->color = color;
 801175a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801175c:	68ba      	ldr	r2, [r7, #8]
 801175e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011760:	bf00      	nop
    tempText.setLinespacing(0);
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8011768:	677b      	str	r3, [r7, #116]	; 0x74
 801176a:	2300      	movs	r3, #0
 801176c:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
        linespace = space;
 8011770:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011772:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8011776:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011778:	bf00      	nop
    tempText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID8));
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	f503 7415 	add.w	r4, r3, #596	; 0x254
 8011780:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011784:	2102      	movs	r1, #2
 8011786:	4618      	mov	r0, r3
 8011788:	f7ff fc90 	bl	80110ac <_ZN8touchgfx9TypedTextC1Et>
 801178c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011790:	4619      	mov	r1, r3
 8011792:	4620      	mov	r0, r4
 8011794:	f004 fc9b 	bl	80160ce <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8011798:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801179c:	4618      	mov	r0, r3
 801179e:	f7fe f9ef 	bl	800fb80 <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 80117a2:	687a      	ldr	r2, [r7, #4]
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	3340      	adds	r3, #64	; 0x40
 80117a8:	4619      	mov	r1, r3
 80117aa:	4610      	mov	r0, r2
 80117ac:	f7ff fb18 	bl	8010de0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(digitalClock1);
 80117b0:	687a      	ldr	r2, [r7, #4]
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	336c      	adds	r3, #108	; 0x6c
 80117b6:	4619      	mov	r1, r3
 80117b8:	4610      	mov	r0, r2
 80117ba:	f7ff fb11 	bl	8010de0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(humImage);
 80117be:	687a      	ldr	r2, [r7, #4]
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	33f8      	adds	r3, #248	; 0xf8
 80117c4:	4619      	mov	r1, r3
 80117c6:	4610      	mov	r0, r2
 80117c8:	f7ff fb0a 	bl	8010de0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempImage);
 80117cc:	687a      	ldr	r2, [r7, #4]
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80117d4:	4619      	mov	r1, r3
 80117d6:	4610      	mov	r0, r2
 80117d8:	f7ff fb02 	bl	8010de0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(wifiImage);
 80117dc:	687a      	ldr	r2, [r7, #4]
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80117e4:	4619      	mov	r1, r3
 80117e6:	4610      	mov	r0, r2
 80117e8:	f7ff fafa 	bl	8010de0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(celsiusImage);
 80117ec:	687a      	ldr	r2, [r7, #4]
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80117f4:	4619      	mov	r1, r3
 80117f6:	4610      	mov	r0, r2
 80117f8:	f7ff faf2 	bl	8010de0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(humOnOffButton);
 80117fc:	687a      	ldr	r2, [r7, #4]
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011804:	4619      	mov	r1, r3
 8011806:	4610      	mov	r0, r2
 8011808:	f7ff faea 	bl	8010de0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(setUpButton);
 801180c:	687a      	ldr	r2, [r7, #4]
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8011814:	4619      	mov	r1, r3
 8011816:	4610      	mov	r0, r2
 8011818:	f7ff fae2 	bl	8010de0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(humText);
 801181c:	687a      	ldr	r2, [r7, #4]
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8011824:	4619      	mov	r1, r3
 8011826:	4610      	mov	r0, r2
 8011828:	f7ff fada 	bl	8010de0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempText);
 801182c:	687a      	ldr	r2, [r7, #4]
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8011834:	4619      	mov	r1, r3
 8011836:	4610      	mov	r0, r2
 8011838:	f7ff fad2 	bl	8010de0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	4618      	mov	r0, r3
 8011840:	377c      	adds	r7, #124	; 0x7c
 8011842:	46bd      	mov	sp, r7
 8011844:	bd90      	pop	{r4, r7, pc}
 8011846:	bf00      	nop

08011848 <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 8011848:	b480      	push	{r7}
 801184a:	b083      	sub	sp, #12
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]

}
 8011850:	bf00      	nop
 8011852:	370c      	adds	r7, #12
 8011854:	46bd      	mov	sp, r7
 8011856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185a:	4770      	bx	lr

0801185c <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void screenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b082      	sub	sp, #8
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
 8011864:	6039      	str	r1, [r7, #0]
    if (&src == &humOnOffButton)
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801186c:	683a      	ldr	r2, [r7, #0]
 801186e:	429a      	cmp	r2, r3
 8011870:	d106      	bne.n	8011880 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Interaction1
        //When humOnOffButton clicked call virtual function
        //Call updateOnOffButtonState
        updateOnOffButtonState();
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	332c      	adds	r3, #44	; 0x2c
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	6878      	ldr	r0, [r7, #4]
 801187c:	4798      	blx	r3
        //Interaction2
        //When setUpButton clicked call virtual function
        //Call updateSetUpButtonState
        updateSetUpButtonState();
    }
}
 801187e:	e00b      	b.n	8011898 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
    else if (&src == &setUpButton)
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8011886:	683a      	ldr	r2, [r7, #0]
 8011888:	429a      	cmp	r2, r3
 801188a:	d105      	bne.n	8011898 <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
        updateSetUpButtonState();
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	3330      	adds	r3, #48	; 0x30
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	6878      	ldr	r0, [r7, #4]
 8011896:	4798      	blx	r3
}
 8011898:	bf00      	nop
 801189a:	3708      	adds	r7, #8
 801189c:	46bd      	mov	sp, r7
 801189e:	bd80      	pop	{r7, pc}

080118a0 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b082      	sub	sp, #8
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	4618      	mov	r0, r3
 80118ac:	f007 fd3a 	bl	8019324 <_ZN8touchgfx6ScreenC1Ev>
 80118b0:	4a05      	ldr	r2, [pc, #20]	; (80118c8 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	601a      	str	r2, [r3, #0]
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2200      	movs	r2, #0
 80118ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	4618      	mov	r0, r3
 80118c0:	3708      	adds	r7, #8
 80118c2:	46bd      	mov	sp, r7
 80118c4:	bd80      	pop	{r7, pc}
 80118c6:	bf00      	nop
 80118c8:	0802a2cc 	.word	0x0802a2cc

080118cc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 80118cc:	b480      	push	{r7}
 80118ce:	b083      	sub	sp, #12
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
 80118d4:	4a04      	ldr	r2, [pc, #16]	; (80118e8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	601a      	str	r2, [r3, #0]
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	4618      	mov	r0, r3
 80118de:	370c      	adds	r7, #12
 80118e0:	46bd      	mov	sp, r7
 80118e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e6:	4770      	bx	lr
 80118e8:	0802a300 	.word	0x0802a300

080118ec <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b084      	sub	sp, #16
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	60f8      	str	r0, [r7, #12]
 80118f4:	60b9      	str	r1, [r7, #8]
 80118f6:	4639      	mov	r1, r7
 80118f8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	4618      	mov	r0, r3
 8011900:	f7ff ffe4 	bl	80118cc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8011904:	4a08      	ldr	r2, [pc, #32]	; (8011928 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	68ba      	ldr	r2, [r7, #8]
 801190e:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	3308      	adds	r3, #8
 8011914:	463a      	mov	r2, r7
 8011916:	e892 0003 	ldmia.w	r2, {r0, r1}
 801191a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	4618      	mov	r0, r3
 8011922:	3710      	adds	r7, #16
 8011924:	46bd      	mov	sp, r7
 8011926:	bd80      	pop	{r7, pc}
 8011928:	0802a2b4 	.word	0x0802a2b4

0801192c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 801192c:	b480      	push	{r7}
 801192e:	b083      	sub	sp, #12
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
    }
 8011934:	4a04      	ldr	r2, [pc, #16]	; (8011948 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	601a      	str	r2, [r3, #0]
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	4618      	mov	r0, r3
 801193e:	370c      	adds	r7, #12
 8011940:	46bd      	mov	sp, r7
 8011942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011946:	4770      	bx	lr
 8011948:	0802a300 	.word	0x0802a300

0801194c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 801194c:	b580      	push	{r7, lr}
 801194e:	b082      	sub	sp, #8
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
    }
 8011954:	6878      	ldr	r0, [r7, #4]
 8011956:	f7ff ffe9 	bl	801192c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 801195a:	2104      	movs	r1, #4
 801195c:	6878      	ldr	r0, [r7, #4]
 801195e:	f015 f836 	bl	80269ce <_ZdlPvj>
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	4618      	mov	r0, r3
 8011966:	3708      	adds	r7, #8
 8011968:	46bd      	mov	sp, r7
 801196a:	bd80      	pop	{r7, pc}

0801196c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801196c:	b580      	push	{r7, lr}
 801196e:	b082      	sub	sp, #8
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
 8011974:	4a05      	ldr	r2, [pc, #20]	; (801198c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	601a      	str	r2, [r3, #0]
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	4618      	mov	r0, r3
 801197e:	f7ff ffd5 	bl	801192c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	4618      	mov	r0, r3
 8011986:	3708      	adds	r7, #8
 8011988:	46bd      	mov	sp, r7
 801198a:	bd80      	pop	{r7, pc}
 801198c:	0802a2b4 	.word	0x0802a2b4

08011990 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8011990:	b580      	push	{r7, lr}
 8011992:	b082      	sub	sp, #8
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
 8011998:	6878      	ldr	r0, [r7, #4]
 801199a:	f7ff ffe7 	bl	801196c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801199e:	2110      	movs	r1, #16
 80119a0:	6878      	ldr	r0, [r7, #4]
 80119a2:	f015 f814 	bl	80269ce <_ZdlPvj>
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	4618      	mov	r0, r3
 80119aa:	3708      	adds	r7, #8
 80119ac:	46bd      	mov	sp, r7
 80119ae:	bd80      	pop	{r7, pc}

080119b0 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b082      	sub	sp, #8
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
 80119b8:	4a05      	ldr	r2, [pc, #20]	; (80119d0 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	601a      	str	r2, [r3, #0]
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	4618      	mov	r0, r3
 80119c2:	f7ff f845 	bl	8010a50 <_ZN8touchgfx8DrawableD1Ev>
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	4618      	mov	r0, r3
 80119ca:	3708      	adds	r7, #8
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bd80      	pop	{r7, pc}
 80119d0:	0802adf8 	.word	0x0802adf8

080119d4 <_ZN8touchgfx9ContainerD0Ev>:
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b082      	sub	sp, #8
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
 80119dc:	6878      	ldr	r0, [r7, #4]
 80119de:	f7ff ffe7 	bl	80119b0 <_ZN8touchgfx9ContainerD1Ev>
 80119e2:	212c      	movs	r1, #44	; 0x2c
 80119e4:	6878      	ldr	r0, [r7, #4]
 80119e6:	f014 fff2 	bl	80269ce <_ZdlPvj>
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	4618      	mov	r0, r3
 80119ee:	3708      	adds	r7, #8
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}

080119f4 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b082      	sub	sp, #8
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
 80119fc:	4a05      	ldr	r2, [pc, #20]	; (8011a14 <_ZN8touchgfx3BoxD1Ev+0x20>)
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	601a      	str	r2, [r3, #0]
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	4618      	mov	r0, r3
 8011a06:	f7ff fa2f 	bl	8010e68 <_ZN8touchgfx6WidgetD1Ev>
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	3708      	adds	r7, #8
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}
 8011a14:	0802b790 	.word	0x0802b790

08011a18 <_ZN8touchgfx3BoxD0Ev>:
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b082      	sub	sp, #8
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
 8011a20:	6878      	ldr	r0, [r7, #4]
 8011a22:	f7ff ffe7 	bl	80119f4 <_ZN8touchgfx3BoxD1Ev>
 8011a26:	212c      	movs	r1, #44	; 0x2c
 8011a28:	6878      	ldr	r0, [r7, #4]
 8011a2a:	f014 ffd0 	bl	80269ce <_ZdlPvj>
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	4618      	mov	r0, r3
 8011a32:	3708      	adds	r7, #8
 8011a34:	46bd      	mov	sp, r7
 8011a36:	bd80      	pop	{r7, pc}

08011a38 <_ZN8touchgfx13AbstractClockD1Ev>:
 * Superclass of clock widgets. Allows the hour, minute and second of the clock to be set and
 * read.
 *
 * @see AnalogClock, DigitalClock
 */
class AbstractClock : public Container
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b082      	sub	sp, #8
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
 8011a40:	4a05      	ldr	r2, [pc, #20]	; (8011a58 <_ZN8touchgfx13AbstractClockD1Ev+0x20>)
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	601a      	str	r2, [r3, #0]
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	4618      	mov	r0, r3
 8011a4a:	f7ff ffb1 	bl	80119b0 <_ZN8touchgfx9ContainerD1Ev>
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	4618      	mov	r0, r3
 8011a52:	3708      	adds	r7, #8
 8011a54:	46bd      	mov	sp, r7
 8011a56:	bd80      	pop	{r7, pc}
 8011a58:	0802ac9c 	.word	0x0802ac9c

08011a5c <_ZN8touchgfx13AbstractClockD0Ev>:
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b082      	sub	sp, #8
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
 8011a64:	6878      	ldr	r0, [r7, #4]
 8011a66:	f7ff ffe7 	bl	8011a38 <_ZN8touchgfx13AbstractClockD1Ev>
 8011a6a:	2130      	movs	r1, #48	; 0x30
 8011a6c:	6878      	ldr	r0, [r7, #4]
 8011a6e:	f014 ffae 	bl	80269ce <_ZdlPvj>
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	4618      	mov	r0, r3
 8011a76:	3708      	adds	r7, #8
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}

08011a7c <_ZN8touchgfx12DigitalClockD1Ev>:
class DigitalClock : public AbstractClock
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b082      	sub	sp, #8
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
 8011a84:	4a08      	ldr	r2, [pc, #32]	; (8011aa8 <_ZN8touchgfx12DigitalClockD1Ev+0x2c>)
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	601a      	str	r2, [r3, #0]
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	3334      	adds	r3, #52	; 0x34
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f000 f860 	bl	8011b54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	4618      	mov	r0, r3
 8011a98:	f7ff ffce 	bl	8011a38 <_ZN8touchgfx13AbstractClockD1Ev>
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	3708      	adds	r7, #8
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bd80      	pop	{r7, pc}
 8011aa6:	bf00      	nop
 8011aa8:	0802abb4 	.word	0x0802abb4

08011aac <_ZN8touchgfx12DigitalClockD0Ev>:
 8011aac:	b580      	push	{r7, lr}
 8011aae:	b082      	sub	sp, #8
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	6078      	str	r0, [r7, #4]
 8011ab4:	6878      	ldr	r0, [r7, #4]
 8011ab6:	f7ff ffe1 	bl	8011a7c <_ZN8touchgfx12DigitalClockD1Ev>
 8011aba:	218c      	movs	r1, #140	; 0x8c
 8011abc:	6878      	ldr	r0, [r7, #4]
 8011abe:	f014 ff86 	bl	80269ce <_ZdlPvj>
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	3708      	adds	r7, #8
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bd80      	pop	{r7, pc}

08011acc <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b082      	sub	sp, #8
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
 8011ad4:	4a05      	ldr	r2, [pc, #20]	; (8011aec <_ZN8touchgfx5ImageD1Ev+0x20>)
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	601a      	str	r2, [r3, #0]
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	4618      	mov	r0, r3
 8011ade:	f7ff f9c3 	bl	8010e68 <_ZN8touchgfx6WidgetD1Ev>
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	3708      	adds	r7, #8
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	bd80      	pop	{r7, pc}
 8011aec:	0802b9a4 	.word	0x0802b9a4

08011af0 <_ZN8touchgfx5ImageD0Ev>:
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b082      	sub	sp, #8
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
 8011af8:	6878      	ldr	r0, [r7, #4]
 8011afa:	f7ff ffe7 	bl	8011acc <_ZN8touchgfx5ImageD1Ev>
 8011afe:	212c      	movs	r1, #44	; 0x2c
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	f014 ff64 	bl	80269ce <_ZdlPvj>
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	4618      	mov	r0, r3
 8011b0a:	3708      	adds	r7, #8
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	bd80      	pop	{r7, pc}

08011b10 <_ZN8touchgfx12ToggleButtonD1Ev>:
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b082      	sub	sp, #8
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
 8011b18:	4a05      	ldr	r2, [pc, #20]	; (8011b30 <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	601a      	str	r2, [r3, #0]
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	4618      	mov	r0, r3
 8011b22:	f7ff fc0f 	bl	8011344 <_ZN8touchgfx6ButtonD1Ev>
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	4618      	mov	r0, r3
 8011b2a:	3708      	adds	r7, #8
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	bd80      	pop	{r7, pc}
 8011b30:	0802b678 	.word	0x0802b678

08011b34 <_ZN8touchgfx12ToggleButtonD0Ev>:
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b082      	sub	sp, #8
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
 8011b3c:	6878      	ldr	r0, [r7, #4]
 8011b3e:	f7ff ffe7 	bl	8011b10 <_ZN8touchgfx12ToggleButtonD1Ev>
 8011b42:	2138      	movs	r1, #56	; 0x38
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	f014 ff42 	bl	80269ce <_ZdlPvj>
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	3708      	adds	r7, #8
 8011b50:	46bd      	mov	sp, r7
 8011b52:	bd80      	pop	{r7, pc}

08011b54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b082      	sub	sp, #8
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
 8011b5c:	4a05      	ldr	r2, [pc, #20]	; (8011b74 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	601a      	str	r2, [r3, #0]
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	4618      	mov	r0, r3
 8011b66:	f7ff faf1 	bl	801114c <_ZN8touchgfx8TextAreaD1Ev>
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	3708      	adds	r7, #8
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bd80      	pop	{r7, pc}
 8011b74:	0802b8fc 	.word	0x0802b8fc

08011b78 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b082      	sub	sp, #8
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
 8011b80:	6878      	ldr	r0, [r7, #4]
 8011b82:	f7ff ffe7 	bl	8011b54 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011b86:	2140      	movs	r1, #64	; 0x40
 8011b88:	6878      	ldr	r0, [r7, #4]
 8011b8a:	f014 ff20 	bl	80269ce <_ZdlPvj>
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	4618      	mov	r0, r3
 8011b92:	3708      	adds	r7, #8
 8011b94:	46bd      	mov	sp, r7
 8011b96:	bd80      	pop	{r7, pc}

08011b98 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b082      	sub	sp, #8
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
 8011ba0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	685b      	ldr	r3, [r3, #4]
 8011ba6:	687a      	ldr	r2, [r7, #4]
 8011ba8:	68d2      	ldr	r2, [r2, #12]
 8011baa:	1052      	asrs	r2, r2, #1
 8011bac:	1898      	adds	r0, r3, r2
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	68db      	ldr	r3, [r3, #12]
 8011bb2:	f003 0301 	and.w	r3, r3, #1
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d102      	bne.n	8011bc0 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	689b      	ldr	r3, [r3, #8]
 8011bbe:	e00a      	b.n	8011bd6 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	685b      	ldr	r3, [r3, #4]
 8011bc4:	687a      	ldr	r2, [r7, #4]
 8011bc6:	68d2      	ldr	r2, [r2, #12]
 8011bc8:	1052      	asrs	r2, r2, #1
 8011bca:	4413      	add	r3, r2
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	687a      	ldr	r2, [r7, #4]
 8011bd0:	6892      	ldr	r2, [r2, #8]
 8011bd2:	4413      	add	r3, r2
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	6839      	ldr	r1, [r7, #0]
 8011bd8:	4798      	blx	r3
    }
 8011bda:	bf00      	nop
 8011bdc:	3708      	adds	r7, #8
 8011bde:	46bd      	mov	sp, r7
 8011be0:	bd80      	pop	{r7, pc}

08011be2 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8011be2:	b480      	push	{r7}
 8011be4:	b083      	sub	sp, #12
 8011be6:	af00      	add	r7, sp, #0
 8011be8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	685b      	ldr	r3, [r3, #4]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d010      	beq.n	8011c14 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	689b      	ldr	r3, [r3, #8]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d107      	bne.n	8011c0a <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	68db      	ldr	r3, [r3, #12]
 8011bfe:	f003 0301 	and.w	r3, r3, #1
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d101      	bne.n	8011c0a <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8011c06:	2301      	movs	r3, #1
 8011c08:	e000      	b.n	8011c0c <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	2b01      	cmp	r3, #1
 8011c0e:	d001      	beq.n	8011c14 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8011c10:	2301      	movs	r3, #1
 8011c12:	e000      	b.n	8011c16 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8011c14:	2300      	movs	r3, #0
    }
 8011c16:	4618      	mov	r0, r3
 8011c18:	370c      	adds	r7, #12
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c20:	4770      	bx	lr
	...

08011c24 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8011c24:	b480      	push	{r7}
 8011c26:	af00      	add	r7, sp, #0
    return bitmap_database;
 8011c28:	4b02      	ldr	r3, [pc, #8]	; (8011c34 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c32:	4770      	bx	lr
 8011c34:	0802a374 	.word	0x0802a374

08011c38 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8011c38:	b480      	push	{r7}
 8011c3a:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8011c3c:	230c      	movs	r3, #12
}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	46bd      	mov	sp, r7
 8011c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c46:	4770      	bx	lr

08011c48 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8011c48:	b480      	push	{r7}
 8011c4a:	b085      	sub	sp, #20
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	60f8      	str	r0, [r7, #12]
 8011c50:	460b      	mov	r3, r1
 8011c52:	607a      	str	r2, [r7, #4]
 8011c54:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8011c56:	2300      	movs	r3, #0
    }
 8011c58:	4618      	mov	r0, r3
 8011c5a:	3714      	adds	r7, #20
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c62:	4770      	bx	lr

08011c64 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8011c64:	b480      	push	{r7}
 8011c66:	b083      	sub	sp, #12
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8011c6c:	2300      	movs	r3, #0
    }
 8011c6e:	4618      	mov	r0, r3
 8011c70:	370c      	adds	r7, #12
 8011c72:	46bd      	mov	sp, r7
 8011c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c78:	4770      	bx	lr
	...

08011c7c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8011c7c:	b480      	push	{r7}
 8011c7e:	b085      	sub	sp, #20
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	60f8      	str	r0, [r7, #12]
 8011c84:	60b9      	str	r1, [r7, #8]
 8011c86:	4613      	mov	r3, r2
 8011c88:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 8011c8a:	4a07      	ldr	r2, [pc, #28]	; (8011ca8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	6013      	str	r3, [r2, #0]
        fonts = f;
 8011c90:	4a06      	ldr	r2, [pc, #24]	; (8011cac <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8011c92:	68bb      	ldr	r3, [r7, #8]
 8011c94:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8011c96:	4a06      	ldr	r2, [pc, #24]	; (8011cb0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8011c98:	88fb      	ldrh	r3, [r7, #6]
 8011c9a:	8013      	strh	r3, [r2, #0]
    }
 8011c9c:	bf00      	nop
 8011c9e:	3714      	adds	r7, #20
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca6:	4770      	bx	lr
 8011ca8:	2000a140 	.word	0x2000a140
 8011cac:	2000a148 	.word	0x2000a148
 8011cb0:	2000a144 	.word	0x2000a144

08011cb4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8011cb4:	b40e      	push	{r1, r2, r3}
 8011cb6:	b580      	push	{r7, lr}
 8011cb8:	b085      	sub	sp, #20
 8011cba:	af00      	add	r7, sp, #0
 8011cbc:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8011cbe:	f107 0320 	add.w	r3, r7, #32
 8011cc2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8011cc4:	68bb      	ldr	r3, [r7, #8]
 8011cc6:	69fa      	ldr	r2, [r7, #28]
 8011cc8:	2100      	movs	r1, #0
 8011cca:	6878      	ldr	r0, [r7, #4]
 8011ccc:	f006 fee0 	bl	8018a90 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8011cd4:	89fb      	ldrh	r3, [r7, #14]
}
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	3714      	adds	r7, #20
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011ce0:	b003      	add	sp, #12
 8011ce2:	4770      	bx	lr

08011ce4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8011ce4:	b40c      	push	{r2, r3}
 8011ce6:	b580      	push	{r7, lr}
 8011ce8:	b084      	sub	sp, #16
 8011cea:	af00      	add	r7, sp, #0
 8011cec:	6078      	str	r0, [r7, #4]
 8011cee:	460b      	mov	r3, r1
 8011cf0:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8011cf2:	f107 031c 	add.w	r3, r7, #28
 8011cf6:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8011cf8:	78f9      	ldrb	r1, [r7, #3]
 8011cfa:	68bb      	ldr	r3, [r7, #8]
 8011cfc:	69ba      	ldr	r2, [r7, #24]
 8011cfe:	6878      	ldr	r0, [r7, #4]
 8011d00:	f006 fec6 	bl	8018a90 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8011d04:	4603      	mov	r3, r0
 8011d06:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8011d08:	89fb      	ldrh	r3, [r7, #14]
}
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	3710      	adds	r7, #16
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011d14:	b002      	add	sp, #8
 8011d16:	4770      	bx	lr

08011d18 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b08a      	sub	sp, #40	; 0x28
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
 8011d20:	460b      	mov	r3, r1
 8011d22:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d016      	beq.n	8011d5a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	331a      	adds	r3, #26
 8011d30:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8011d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d34:	8adb      	ldrh	r3, [r3, #22]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d105      	bne.n	8011d46 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8011d3a:	4b43      	ldr	r3, [pc, #268]	; (8011e48 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8011d3c:	4a43      	ldr	r2, [pc, #268]	; (8011e4c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8011d3e:	21c0      	movs	r1, #192	; 0xc0
 8011d40:	4843      	ldr	r0, [pc, #268]	; (8011e50 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011d42:	f014 ff6f 	bl	8026c24 <__assert_func>
            return buffer[pos];
 8011d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d48:	8a9b      	ldrh	r3, [r3, #20]
 8011d4a:	461a      	mov	r2, r3
 8011d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d4e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d001      	beq.n	8011d5a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8011d56:	2301      	movs	r3, #1
 8011d58:	e000      	b.n	8011d5c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d06a      	beq.n	8011e36 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8011d60:	6878      	ldr	r0, [r7, #4]
 8011d62:	f008 f9b3 	bl	801a0cc <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	331a      	adds	r3, #26
 8011d6a:	623b      	str	r3, [r7, #32]
 8011d6c:	2301      	movs	r3, #1
 8011d6e:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8011d70:	6a3b      	ldr	r3, [r7, #32]
 8011d72:	8adb      	ldrh	r3, [r3, #22]
 8011d74:	8bfa      	ldrh	r2, [r7, #30]
 8011d76:	429a      	cmp	r2, r3
 8011d78:	d305      	bcc.n	8011d86 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8011d7a:	4b36      	ldr	r3, [pc, #216]	; (8011e54 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8011d7c:	4a36      	ldr	r2, [pc, #216]	; (8011e58 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8011d7e:	21c5      	movs	r1, #197	; 0xc5
 8011d80:	4833      	ldr	r0, [pc, #204]	; (8011e50 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011d82:	f014 ff4f 	bl	8026c24 <__assert_func>
            const uint16_t index = pos + offset;
 8011d86:	6a3b      	ldr	r3, [r7, #32]
 8011d88:	8a9a      	ldrh	r2, [r3, #20]
 8011d8a:	8bfb      	ldrh	r3, [r7, #30]
 8011d8c:	4413      	add	r3, r2
 8011d8e:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8011d90:	8bbb      	ldrh	r3, [r7, #28]
 8011d92:	2b09      	cmp	r3, #9
 8011d94:	d801      	bhi.n	8011d9a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8011d96:	8bbb      	ldrh	r3, [r7, #28]
 8011d98:	e001      	b.n	8011d9e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8011d9a:	8bbb      	ldrh	r3, [r7, #28]
 8011d9c:	3b0a      	subs	r3, #10
 8011d9e:	6a3a      	ldr	r2, [r7, #32]
 8011da0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011da4:	f640 123f 	movw	r2, #2367	; 0x93f
 8011da8:	4293      	cmp	r3, r2
 8011daa:	bf0c      	ite	eq
 8011dac:	2301      	moveq	r3, #1
 8011dae:	2300      	movne	r3, #0
 8011db0:	b2db      	uxtb	r3, r3
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d03f      	beq.n	8011e36 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	331a      	adds	r3, #26
 8011dba:	687a      	ldr	r2, [r7, #4]
 8011dbc:	321a      	adds	r2, #26
 8011dbe:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8011dc0:	68ba      	ldr	r2, [r7, #8]
 8011dc2:	8ad2      	ldrh	r2, [r2, #22]
 8011dc4:	2a00      	cmp	r2, #0
 8011dc6:	d105      	bne.n	8011dd4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8011dc8:	4b1f      	ldr	r3, [pc, #124]	; (8011e48 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8011dca:	4a20      	ldr	r2, [pc, #128]	; (8011e4c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8011dcc:	21c0      	movs	r1, #192	; 0xc0
 8011dce:	4820      	ldr	r0, [pc, #128]	; (8011e50 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011dd0:	f014 ff28 	bl	8026c24 <__assert_func>
            return buffer[pos];
 8011dd4:	68ba      	ldr	r2, [r7, #8]
 8011dd6:	8a92      	ldrh	r2, [r2, #20]
 8011dd8:	4611      	mov	r1, r2
 8011dda:	68ba      	ldr	r2, [r7, #8]
 8011ddc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8011de0:	613b      	str	r3, [r7, #16]
 8011de2:	4613      	mov	r3, r2
 8011de4:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8011de6:	693b      	ldr	r3, [r7, #16]
 8011de8:	8adb      	ldrh	r3, [r3, #22]
 8011dea:	2b01      	cmp	r3, #1
 8011dec:	d806      	bhi.n	8011dfc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8011dee:	4b1b      	ldr	r3, [pc, #108]	; (8011e5c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8011df0:	4a1b      	ldr	r2, [pc, #108]	; (8011e60 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8011df2:	f240 110d 	movw	r1, #269	; 0x10d
 8011df6:	4816      	ldr	r0, [pc, #88]	; (8011e50 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011df8:	f014 ff14 	bl	8026c24 <__assert_func>
            const uint16_t index = pos + 1;
 8011dfc:	693b      	ldr	r3, [r7, #16]
 8011dfe:	8a9b      	ldrh	r3, [r3, #20]
 8011e00:	3301      	adds	r3, #1
 8011e02:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8011e04:	89bb      	ldrh	r3, [r7, #12]
 8011e06:	2b09      	cmp	r3, #9
 8011e08:	d801      	bhi.n	8011e0e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8011e0a:	89bb      	ldrh	r3, [r7, #12]
 8011e0c:	e000      	b.n	8011e10 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8011e0e:	2300      	movs	r3, #0
 8011e10:	693a      	ldr	r2, [r7, #16]
 8011e12:	89f9      	ldrh	r1, [r7, #14]
 8011e14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8011e18:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	331a      	adds	r3, #26
 8011e1e:	61bb      	str	r3, [r7, #24]
 8011e20:	f640 133f 	movw	r3, #2367	; 0x93f
 8011e24:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8011e26:	69bb      	ldr	r3, [r7, #24]
 8011e28:	8a9b      	ldrh	r3, [r3, #20]
 8011e2a:	4619      	mov	r1, r3
 8011e2c:	69bb      	ldr	r3, [r7, #24]
 8011e2e:	8afa      	ldrh	r2, [r7, #22]
 8011e30:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8011e34:	bf00      	nop
        }
    }
    return getNextChar();
 8011e36:	6878      	ldr	r0, [r7, #4]
 8011e38:	f008 f82c 	bl	8019e94 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8011e3c:	4603      	mov	r3, r0
}
 8011e3e:	4618      	mov	r0, r3
 8011e40:	3728      	adds	r7, #40	; 0x28
 8011e42:	46bd      	mov	sp, r7
 8011e44:	bd80      	pop	{r7, pc}
 8011e46:	bf00      	nop
 8011e48:	0802991c 	.word	0x0802991c
 8011e4c:	08029928 	.word	0x08029928
 8011e50:	080299d4 	.word	0x080299d4
 8011e54:	08029a1c 	.word	0x08029a1c
 8011e58:	08029a2c 	.word	0x08029a2c
 8011e5c:	08029b00 	.word	0x08029b00
 8011e60:	08029b0c 	.word	0x08029b0c

08011e64 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b082      	sub	sp, #8
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8011e6c:	6878      	ldr	r0, [r7, #4]
 8011e6e:	f007 ffcb 	bl	8019e08 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8011e72:	bf00      	nop
 8011e74:	3708      	adds	r7, #8
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}

08011e7a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8011e7a:	b580      	push	{r7, lr}
 8011e7c:	b088      	sub	sp, #32
 8011e7e:	af02      	add	r7, sp, #8
 8011e80:	60f8      	str	r0, [r7, #12]
 8011e82:	1d38      	adds	r0, r7, #4
 8011e84:	e880 0006 	stmia.w	r0, {r1, r2}
 8011e88:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8011e8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011e8e:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8011e90:	1d39      	adds	r1, r7, #4
 8011e92:	697b      	ldr	r3, [r7, #20]
 8011e94:	9301      	str	r3, [sp, #4]
 8011e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e98:	9300      	str	r3, [sp, #0]
 8011e9a:	6a3b      	ldr	r3, [r7, #32]
 8011e9c:	683a      	ldr	r2, [r7, #0]
 8011e9e:	68f8      	ldr	r0, [r7, #12]
 8011ea0:	f005 fb3d 	bl	801751e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8011ea4:	bf00      	nop
 8011ea6:	3718      	adds	r7, #24
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	bd80      	pop	{r7, pc}

08011eac <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8011eac:	b590      	push	{r4, r7, lr}
 8011eae:	b085      	sub	sp, #20
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8011eba:	88fb      	ldrh	r3, [r7, #6]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d127      	bne.n	8011f10 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8011ec0:	88fb      	ldrh	r3, [r7, #6]
 8011ec2:	4a1e      	ldr	r2, [pc, #120]	; (8011f3c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8011ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d016      	beq.n	8011efa <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8011ecc:	88fb      	ldrh	r3, [r7, #6]
 8011ece:	4a1b      	ldr	r2, [pc, #108]	; (8011f3c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8011ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011ed4:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8011ed6:	68bb      	ldr	r3, [r7, #8]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	68ba      	ldr	r2, [r7, #8]
 8011edc:	4413      	add	r3, r2
 8011ede:	4a18      	ldr	r2, [pc, #96]	; (8011f40 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8011ee0:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8011ee2:	68bb      	ldr	r3, [r7, #8]
 8011ee4:	685b      	ldr	r3, [r3, #4]
 8011ee6:	68ba      	ldr	r2, [r7, #8]
 8011ee8:	4413      	add	r3, r2
 8011eea:	4a16      	ldr	r2, [pc, #88]	; (8011f44 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8011eec:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8011eee:	68bb      	ldr	r3, [r7, #8]
 8011ef0:	689b      	ldr	r3, [r3, #8]
 8011ef2:	68ba      	ldr	r2, [r7, #8]
 8011ef4:	4413      	add	r3, r2
 8011ef6:	60fb      	str	r3, [r7, #12]
 8011ef8:	e00a      	b.n	8011f10 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8011efa:	4b11      	ldr	r3, [pc, #68]	; (8011f40 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8011efc:	4a12      	ldr	r2, [pc, #72]	; (8011f48 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8011efe:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8011f00:	4a12      	ldr	r2, [pc, #72]	; (8011f4c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8011f02:	4b10      	ldr	r3, [pc, #64]	; (8011f44 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8011f04:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8011f06:	88fb      	ldrh	r3, [r7, #6]
 8011f08:	4a11      	ldr	r2, [pc, #68]	; (8011f50 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8011f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f0e:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d00d      	beq.n	8011f32 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8011f16:	4a0f      	ldr	r2, [pc, #60]	; (8011f54 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8011f18:	88fb      	ldrh	r3, [r7, #6]
 8011f1a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8011f1c:	f000 f83e 	bl	8011f9c <_ZN17TypedTextDatabase8getFontsEv>
 8011f20:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8011f22:	f000 f833 	bl	8011f8c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8011f26:	4603      	mov	r3, r0
 8011f28:	461a      	mov	r2, r3
 8011f2a:	4621      	mov	r1, r4
 8011f2c:	68f8      	ldr	r0, [r7, #12]
 8011f2e:	f7ff fea5 	bl	8011c7c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8011f32:	bf00      	nop
 8011f34:	3714      	adds	r7, #20
 8011f36:	46bd      	mov	sp, r7
 8011f38:	bd90      	pop	{r4, r7, pc}
 8011f3a:	bf00      	nop
 8011f3c:	20008ed0 	.word	0x20008ed0
 8011f40:	20008ed8 	.word	0x20008ed8
 8011f44:	20008edc 	.word	0x20008edc
 8011f48:	08066214 	.word	0x08066214
 8011f4c:	08066208 	.word	0x08066208
 8011f50:	08066220 	.word	0x08066220
 8011f54:	20008ed4 	.word	0x20008ed4

08011f58 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8011f58:	b480      	push	{r7}
 8011f5a:	b083      	sub	sp, #12
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
 8011f60:	460b      	mov	r3, r1
 8011f62:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8011f64:	4b07      	ldr	r3, [pc, #28]	; (8011f84 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8011f66:	681a      	ldr	r2, [r3, #0]
 8011f68:	4b07      	ldr	r3, [pc, #28]	; (8011f88 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8011f6a:	6819      	ldr	r1, [r3, #0]
 8011f6c:	887b      	ldrh	r3, [r7, #2]
 8011f6e:	009b      	lsls	r3, r3, #2
 8011f70:	440b      	add	r3, r1
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	005b      	lsls	r3, r3, #1
 8011f76:	4413      	add	r3, r2
}
 8011f78:	4618      	mov	r0, r3
 8011f7a:	370c      	adds	r7, #12
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f82:	4770      	bx	lr
 8011f84:	20008ed8 	.word	0x20008ed8
 8011f88:	20008edc 	.word	0x20008edc

08011f8c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8011f8c:	b480      	push	{r7}
 8011f8e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8011f90:	2303      	movs	r3, #3
}
 8011f92:	4618      	mov	r0, r3
 8011f94:	46bd      	mov	sp, r7
 8011f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9a:	4770      	bx	lr

08011f9c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8011f9c:	b480      	push	{r7}
 8011f9e:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8011fa0:	4b02      	ldr	r3, [pc, #8]	; (8011fac <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011faa:	4770      	bx	lr
 8011fac:	20008ee0 	.word	0x20008ee0

08011fb0 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b082      	sub	sp, #8
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
 8011fb8:	6039      	str	r1, [r7, #0]
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	2b01      	cmp	r3, #1
 8011fbe:	d113      	bne.n	8011fe8 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8011fc0:	683b      	ldr	r3, [r7, #0]
 8011fc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011fc6:	4293      	cmp	r3, r2
 8011fc8:	d10e      	bne.n	8011fe8 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8011fca:	f7fd fef7 	bl	800fdbc <_Z23getFont_verdana_20_4bppv>
 8011fce:	4603      	mov	r3, r0
};
 8011fd0:	4a07      	ldr	r2, [pc, #28]	; (8011ff0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8011fd2:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8011fd4:	f7fd ff46 	bl	800fe64 <_Z23getFont_verdana_40_4bppv>
 8011fd8:	4603      	mov	r3, r0
};
 8011fda:	4a05      	ldr	r2, [pc, #20]	; (8011ff0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8011fdc:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8011fde:	f7fd fe99 	bl	800fd14 <_Z23getFont_verdana_10_4bppv>
 8011fe2:	4603      	mov	r3, r0
};
 8011fe4:	4a02      	ldr	r2, [pc, #8]	; (8011ff0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8011fe6:	6093      	str	r3, [r2, #8]
}  // namespace TypedTextDatabase
 8011fe8:	bf00      	nop
 8011fea:	3708      	adds	r7, #8
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd80      	pop	{r7, pc}
 8011ff0:	20008ee0 	.word	0x20008ee0

08011ff4 <_GLOBAL__sub_I_touchgfx_fonts>:
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	af00      	add	r7, sp, #0
 8011ff8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011ffc:	2001      	movs	r0, #1
 8011ffe:	f7ff ffd7 	bl	8011fb0 <_Z41__static_initialization_and_destruction_0ii>
 8012002:	bd80      	pop	{r7, pc}

08012004 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8012004:	b580      	push	{r7, lr}
 8012006:	b082      	sub	sp, #8
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
 801200c:	4a05      	ldr	r2, [pc, #20]	; (8012024 <_ZN19FrontendApplicationD1Ev+0x20>)
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	601a      	str	r2, [r3, #0]
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	4618      	mov	r0, r3
 8012016:	f7fe f967 	bl	80102e8 <_ZN23FrontendApplicationBaseD1Ev>
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	4618      	mov	r0, r3
 801201e:	3708      	adds	r7, #8
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}
 8012024:	0802a4bc 	.word	0x0802a4bc

08012028 <_ZN19FrontendApplicationD0Ev>:
 8012028:	b580      	push	{r7, lr}
 801202a:	b082      	sub	sp, #8
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
 8012030:	6878      	ldr	r0, [r7, #4]
 8012032:	f7ff ffe7 	bl	8012004 <_ZN19FrontendApplicationD1Ev>
 8012036:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801203a:	6878      	ldr	r0, [r7, #4]
 801203c:	f014 fcc7 	bl	80269ce <_ZdlPvj>
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	4618      	mov	r0, r3
 8012044:	3708      	adds	r7, #8
 8012046:	46bd      	mov	sp, r7
 8012048:	bd80      	pop	{r7, pc}

0801204a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 801204a:	b580      	push	{r7, lr}
 801204c:	b082      	sub	sp, #8
 801204e:	af00      	add	r7, sp, #0
 8012050:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8012058:	4618      	mov	r0, r3
 801205a:	f000 f82d 	bl	80120b8 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	4618      	mov	r0, r3
 8012062:	f005 fda5 	bl	8017bb0 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8012066:	bf00      	nop
 8012068:	3708      	adds	r7, #8
 801206a:	46bd      	mov	sp, r7
 801206c:	bd80      	pop	{r7, pc}
	...

08012070 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8012070:	b580      	push	{r7, lr}
 8012072:	b084      	sub	sp, #16
 8012074:	af00      	add	r7, sp, #0
 8012076:	60f8      	str	r0, [r7, #12]
 8012078:	60b9      	str	r1, [r7, #8]
 801207a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	687a      	ldr	r2, [r7, #4]
 8012080:	68b9      	ldr	r1, [r7, #8]
 8012082:	4618      	mov	r0, r3
 8012084:	f7fe f974 	bl	8010370 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8012088:	4a03      	ldr	r2, [pc, #12]	; (8012098 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	601a      	str	r2, [r3, #0]
{

}
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	4618      	mov	r0, r3
 8012092:	3710      	adds	r7, #16
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}
 8012098:	0802a4bc 	.word	0x0802a4bc

0801209c <_ZN5ModelC1Ev>:
extern osThreadId    eventLoopTaskHandle;
extern osMessageQId  envQueueHandle;
extern osSemaphoreId envSemHandle;
extern osPoolId      Pool_ID;

Model::Model() : modelListener(0)
 801209c:	b480      	push	{r7}
 801209e:	b083      	sub	sp, #12
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	2200      	movs	r2, #0
 80120a8:	601a      	str	r2, [r3, #0]
{

}
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	4618      	mov	r0, r3
 80120ae:	370c      	adds	r7, #12
 80120b0:	46bd      	mov	sp, r7
 80120b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b6:	4770      	bx	lr

080120b8 <_ZN5Model4tickEv>:

void Model::tick()
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b0aa      	sub	sp, #168	; 0xa8
 80120bc:	af00      	add	r7, sp, #0
 80120be:	6178      	str	r0, [r7, #20]
	//sensorUpdatePeriod=0;
	//if (sensorUpdatePeriod >=100)
	{
		osEvent event;
		event = osMessageGet(envQueueHandle, 1);
 80120c0:	4b1c      	ldr	r3, [pc, #112]	; (8012134 <_ZN5Model4tickEv+0x7c>)
 80120c2:	6819      	ldr	r1, [r3, #0]
 80120c4:	463b      	mov	r3, r7
 80120c6:	2201      	movs	r2, #1
 80120c8:	4618      	mov	r0, r3
 80120ca:	f7fa fd45 	bl	800cb58 <osMessageGet>
 80120ce:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80120d2:	463a      	mov	r2, r7
 80120d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80120d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		if (event.status == osEventMessage)
 80120da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80120de:	2b10      	cmp	r3, #16
 80120e0:	d124      	bne.n	801212c <_ZN5Model4tickEv+0x74>
		{
			ENV_MSG *envData;
			char buf[128] = {0,};
 80120e2:	2300      	movs	r3, #0
 80120e4:	61bb      	str	r3, [r7, #24]
 80120e6:	f107 031c 	add.w	r3, r7, #28
 80120ea:	227c      	movs	r2, #124	; 0x7c
 80120ec:	2100      	movs	r1, #0
 80120ee:	4618      	mov	r0, r3
 80120f0:	f014 fe42 	bl	8026d78 <memset>

			envData = (ENV_MSG *)event.value.p;
 80120f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80120f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

			modelListener->UpdateTemp((envData->temp));
 80120fc:	697b      	ldr	r3, [r7, #20]
 80120fe:	6818      	ldr	r0, [r3, #0]
 8012100:	697b      	ldr	r3, [r7, #20]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	3308      	adds	r3, #8
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801210e:	6812      	ldr	r2, [r2, #0]
 8012110:	4611      	mov	r1, r2
 8012112:	4798      	blx	r3
			modelListener->UpdateHum((envData->humid));
 8012114:	697b      	ldr	r3, [r7, #20]
 8012116:	6818      	ldr	r0, [r3, #0]
 8012118:	697b      	ldr	r3, [r7, #20]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	330c      	adds	r3, #12
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8012126:	6852      	ldr	r2, [r2, #4]
 8012128:	4611      	mov	r1, r2
 801212a:	4798      	blx	r3
		}
		//sensorUpdatePeriod = 0;
	}
	//sensorUpdatePeriod++;
}
 801212c:	bf00      	nop
 801212e:	37a8      	adds	r7, #168	; 0xa8
 8012130:	46bd      	mov	sp, r7
 8012132:	bd80      	pop	{r7, pc}
 8012134:	2000ae20 	.word	0x2000ae20

08012138 <_ZN5Model28updateHumidifierControlStateEb>:

void Model::updateHumidifierControlState(bool state)
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b082      	sub	sp, #8
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
 8012140:	460b      	mov	r3, r1
 8012142:	70fb      	strb	r3, [r7, #3]
	if (state == true)
 8012144:	78fb      	ldrb	r3, [r7, #3]
 8012146:	2b01      	cmp	r3, #1
 8012148:	d106      	bne.n	8012158 <_ZN5Model28updateHumidifierControlStateEb+0x20>
	{
		osSignalSet(eventLoopTaskHandle, BUZZER_ON | HUM_ON);
 801214a:	4b08      	ldr	r3, [pc, #32]	; (801216c <_ZN5Model28updateHumidifierControlStateEb+0x34>)
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	2105      	movs	r1, #5
 8012150:	4618      	mov	r0, r3
 8012152:	f7fa fb49 	bl	800c7e8 <osSignalSet>
	}
	else
	{
		osSignalSet(eventLoopTaskHandle, BUZZER_OFF | HUM_OFF);
	}
}
 8012156:	e005      	b.n	8012164 <_ZN5Model28updateHumidifierControlStateEb+0x2c>
		osSignalSet(eventLoopTaskHandle, BUZZER_OFF | HUM_OFF);
 8012158:	4b04      	ldr	r3, [pc, #16]	; (801216c <_ZN5Model28updateHumidifierControlStateEb+0x34>)
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	210a      	movs	r1, #10
 801215e:	4618      	mov	r0, r3
 8012160:	f7fa fb42 	bl	800c7e8 <osSignalSet>
}
 8012164:	bf00      	nop
 8012166:	3708      	adds	r7, #8
 8012168:	46bd      	mov	sp, r7
 801216a:	bd80      	pop	{r7, pc}
 801216c:	2000a390 	.word	0x2000a390

08012170 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8012170:	b480      	push	{r7}
 8012172:	b083      	sub	sp, #12
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
    {
    }
 8012178:	bf00      	nop
 801217a:	370c      	adds	r7, #12
 801217c:	46bd      	mov	sp, r7
 801217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012182:	4770      	bx	lr

08012184 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8012184:	b480      	push	{r7}
 8012186:	b083      	sub	sp, #12
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
    {
    }
 801218c:	bf00      	nop
 801218e:	370c      	adds	r7, #12
 8012190:	46bd      	mov	sp, r7
 8012192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012196:	4770      	bx	lr

08012198 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8012198:	b480      	push	{r7}
 801219a:	b083      	sub	sp, #12
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
    {
 80121a0:	4a04      	ldr	r2, [pc, #16]	; (80121b4 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	601a      	str	r2, [r3, #0]
    }
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	4618      	mov	r0, r3
 80121aa:	370c      	adds	r7, #12
 80121ac:	46bd      	mov	sp, r7
 80121ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b2:	4770      	bx	lr
 80121b4:	0802a554 	.word	0x0802a554

080121b8 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b082      	sub	sp, #8
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
    }
 80121c0:	6878      	ldr	r0, [r7, #4]
 80121c2:	f7ff ffe9 	bl	8012198 <_ZN8touchgfx9PresenterD1Ev>
 80121c6:	2104      	movs	r1, #4
 80121c8:	6878      	ldr	r0, [r7, #4]
 80121ca:	f014 fc00 	bl	80269ce <_ZdlPvj>
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	4618      	mov	r0, r3
 80121d2:	3708      	adds	r7, #8
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}

080121d8 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 80121d8:	b480      	push	{r7}
 80121da:	b083      	sub	sp, #12
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
    {
 80121e0:	4a04      	ldr	r2, [pc, #16]	; (80121f4 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	601a      	str	r2, [r3, #0]
    }
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	4618      	mov	r0, r3
 80121ea:	370c      	adds	r7, #12
 80121ec:	46bd      	mov	sp, r7
 80121ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f2:	4770      	bx	lr
 80121f4:	0802a554 	.word	0x0802a554

080121f8 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80121f8:	b480      	push	{r7}
 80121fa:	b083      	sub	sp, #12
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
 8012200:	4a06      	ldr	r2, [pc, #24]	; (801221c <_ZN13ModelListenerC1Ev+0x24>)
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	601a      	str	r2, [r3, #0]
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	2200      	movs	r2, #0
 801220a:	605a      	str	r2, [r3, #4]
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	4618      	mov	r0, r3
 8012210:	370c      	adds	r7, #12
 8012212:	46bd      	mov	sp, r7
 8012214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012218:	4770      	bx	lr
 801221a:	bf00      	nop
 801221c:	0802a53c 	.word	0x0802a53c

08012220 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8012220:	b480      	push	{r7}
 8012222:	b083      	sub	sp, #12
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
 8012228:	4a04      	ldr	r2, [pc, #16]	; (801223c <_ZN13ModelListenerD1Ev+0x1c>)
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	601a      	str	r2, [r3, #0]
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	4618      	mov	r0, r3
 8012232:	370c      	adds	r7, #12
 8012234:	46bd      	mov	sp, r7
 8012236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223a:	4770      	bx	lr
 801223c:	0802a53c 	.word	0x0802a53c

08012240 <_ZN13ModelListenerD0Ev>:
 8012240:	b580      	push	{r7, lr}
 8012242:	b082      	sub	sp, #8
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
 8012248:	6878      	ldr	r0, [r7, #4]
 801224a:	f7ff ffe9 	bl	8012220 <_ZN13ModelListenerD1Ev>
 801224e:	2108      	movs	r1, #8
 8012250:	6878      	ldr	r0, [r7, #4]
 8012252:	f014 fbbc 	bl	80269ce <_ZdlPvj>
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	4618      	mov	r0, r3
 801225a:	3708      	adds	r7, #8
 801225c:	46bd      	mov	sp, r7
 801225e:	bd80      	pop	{r7, pc}

08012260 <_ZN13ModelListener10UpdateTempEi>:
    //virtual void UpdateTemp(char *val)
    virtual void UpdateTemp(int) {};
 8012260:	b480      	push	{r7}
 8012262:	b083      	sub	sp, #12
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
 8012268:	6039      	str	r1, [r7, #0]
 801226a:	bf00      	nop
 801226c:	370c      	adds	r7, #12
 801226e:	46bd      	mov	sp, r7
 8012270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012274:	4770      	bx	lr

08012276 <_ZN13ModelListener9UpdateHumEi>:
    virtual void UpdateHum(int) {};
 8012276:	b480      	push	{r7}
 8012278:	b083      	sub	sp, #12
 801227a:	af00      	add	r7, sp, #0
 801227c:	6078      	str	r0, [r7, #4]
 801227e:	6039      	str	r1, [r7, #0]
 8012280:	bf00      	nop
 8012282:	370c      	adds	r7, #12
 8012284:	46bd      	mov	sp, r7
 8012286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228a:	4770      	bx	lr

0801228c <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {};
 801228c:	b580      	push	{r7, lr}
 801228e:	b082      	sub	sp, #8
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
 8012294:	4a09      	ldr	r2, [pc, #36]	; (80122bc <_ZN15screenPresenterD1Ev+0x30>)
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	601a      	str	r2, [r3, #0]
 801229a:	4a09      	ldr	r2, [pc, #36]	; (80122c0 <_ZN15screenPresenterD1Ev+0x34>)
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	605a      	str	r2, [r3, #4]
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	3304      	adds	r3, #4
 80122a4:	4618      	mov	r0, r3
 80122a6:	f7ff ffbb 	bl	8012220 <_ZN13ModelListenerD1Ev>
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	4618      	mov	r0, r3
 80122ae:	f7ff ff73 	bl	8012198 <_ZN8touchgfx9PresenterD1Ev>
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	4618      	mov	r0, r3
 80122b6:	3708      	adds	r7, #8
 80122b8:	46bd      	mov	sp, r7
 80122ba:	bd80      	pop	{r7, pc}
 80122bc:	0802a500 	.word	0x0802a500
 80122c0:	0802a524 	.word	0x0802a524

080122c4 <_ZThn4_N15screenPresenterD1Ev>:
 80122c4:	f1a0 0004 	sub.w	r0, r0, #4
 80122c8:	e7e0      	b.n	801228c <_ZN15screenPresenterD1Ev>
 80122ca:	bf00      	nop

080122cc <_ZN15screenPresenterD0Ev>:
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b082      	sub	sp, #8
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
 80122d4:	6878      	ldr	r0, [r7, #4]
 80122d6:	f7ff ffd9 	bl	801228c <_ZN15screenPresenterD1Ev>
 80122da:	2110      	movs	r1, #16
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	f014 fb76 	bl	80269ce <_ZdlPvj>
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	4618      	mov	r0, r3
 80122e6:	3708      	adds	r7, #8
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd80      	pop	{r7, pc}

080122ec <_ZThn4_N15screenPresenterD0Ev>:
 80122ec:	f1a0 0004 	sub.w	r0, r0, #4
 80122f0:	e7ec      	b.n	80122cc <_ZN15screenPresenterD0Ev>
	...

080122f4 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b082      	sub	sp, #8
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
 80122fc:	6039      	str	r1, [r7, #0]
    : view(v)
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	4618      	mov	r0, r3
 8012302:	f7ff ff69 	bl	80121d8 <_ZN8touchgfx9PresenterC1Ev>
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	3304      	adds	r3, #4
 801230a:	4618      	mov	r0, r3
 801230c:	f7ff ff74 	bl	80121f8 <_ZN13ModelListenerC1Ev>
 8012310:	4a06      	ldr	r2, [pc, #24]	; (801232c <_ZN15screenPresenterC1ER10screenView+0x38>)
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	601a      	str	r2, [r3, #0]
 8012316:	4a06      	ldr	r2, [pc, #24]	; (8012330 <_ZN15screenPresenterC1ER10screenView+0x3c>)
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	605a      	str	r2, [r3, #4]
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	683a      	ldr	r2, [r7, #0]
 8012320:	60da      	str	r2, [r3, #12]
{

}
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	4618      	mov	r0, r3
 8012326:	3708      	adds	r7, #8
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}
 801232c:	0802a500 	.word	0x0802a500
 8012330:	0802a524 	.word	0x0802a524

08012334 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 8012334:	b480      	push	{r7}
 8012336:	b083      	sub	sp, #12
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]

}
 801233c:	bf00      	nop
 801233e:	370c      	adds	r7, #12
 8012340:	46bd      	mov	sp, r7
 8012342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012346:	4770      	bx	lr

08012348 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 8012348:	b480      	push	{r7}
 801234a:	b083      	sub	sp, #12
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]

}
 8012350:	bf00      	nop
 8012352:	370c      	adds	r7, #12
 8012354:	46bd      	mov	sp, r7
 8012356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801235a:	4770      	bx	lr

0801235c <_ZN15screenPresenter28updateHumidifierControlStateEb>:

void screenPresenter::updateHumidifierControlState(bool state)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b082      	sub	sp, #8
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
 8012364:	460b      	mov	r3, r1
 8012366:	70fb      	strb	r3, [r7, #3]
	model->updateHumidifierControlState(state);
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	689b      	ldr	r3, [r3, #8]
 801236c:	78fa      	ldrb	r2, [r7, #3]
 801236e:	4611      	mov	r1, r2
 8012370:	4618      	mov	r0, r3
 8012372:	f7ff fee1 	bl	8012138 <_ZN5Model28updateHumidifierControlStateEb>
}
 8012376:	bf00      	nop
 8012378:	3708      	adds	r7, #8
 801237a:	46bd      	mov	sp, r7
 801237c:	bd80      	pop	{r7, pc}

0801237e <_ZN15screenPresenter10UpdateTempEi>:

void screenPresenter::UpdateTemp(int val)
{
 801237e:	b580      	push	{r7, lr}
 8012380:	b082      	sub	sp, #8
 8012382:	af00      	add	r7, sp, #0
 8012384:	6078      	str	r0, [r7, #4]
 8012386:	6039      	str	r1, [r7, #0]
	if (val >= 0 && val <= 50)
 8012388:	683b      	ldr	r3, [r7, #0]
 801238a:	2b00      	cmp	r3, #0
 801238c:	db0c      	blt.n	80123a8 <_ZN15screenPresenter10UpdateTempEi+0x2a>
 801238e:	683b      	ldr	r3, [r7, #0]
 8012390:	2b32      	cmp	r3, #50	; 0x32
 8012392:	dc09      	bgt.n	80123a8 <_ZN15screenPresenter10UpdateTempEi+0x2a>
	{
		view.UpdateTempView(val);
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	68da      	ldr	r2, [r3, #12]
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	68db      	ldr	r3, [r3, #12]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	3338      	adds	r3, #56	; 0x38
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	6839      	ldr	r1, [r7, #0]
 80123a4:	4610      	mov	r0, r2
 80123a6:	4798      	blx	r3
	}
}
 80123a8:	bf00      	nop
 80123aa:	3708      	adds	r7, #8
 80123ac:	46bd      	mov	sp, r7
 80123ae:	bd80      	pop	{r7, pc}

080123b0 <_ZThn4_N15screenPresenter10UpdateTempEi>:

    virtual void updateHumidifierControlState(bool state);

    virtual void UpdateTemp(int);
 80123b0:	f1a0 0004 	sub.w	r0, r0, #4
 80123b4:	f7ff bfe3 	b.w	801237e <_ZN15screenPresenter10UpdateTempEi>

080123b8 <_ZN15screenPresenter9UpdateHumEi>:

void screenPresenter::UpdateHum(int val)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b082      	sub	sp, #8
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
 80123c0:	6039      	str	r1, [r7, #0]
	if (val >= 20 && val <= 100)
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	2b13      	cmp	r3, #19
 80123c6:	dd0c      	ble.n	80123e2 <_ZN15screenPresenter9UpdateHumEi+0x2a>
 80123c8:	683b      	ldr	r3, [r7, #0]
 80123ca:	2b64      	cmp	r3, #100	; 0x64
 80123cc:	dc09      	bgt.n	80123e2 <_ZN15screenPresenter9UpdateHumEi+0x2a>
	{
		view.UpdateHumView(val);
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	68da      	ldr	r2, [r3, #12]
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	68db      	ldr	r3, [r3, #12]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	333c      	adds	r3, #60	; 0x3c
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	6839      	ldr	r1, [r7, #0]
 80123de:	4610      	mov	r0, r2
 80123e0:	4798      	blx	r3
	}
}
 80123e2:	bf00      	nop
 80123e4:	3708      	adds	r7, #8
 80123e6:	46bd      	mov	sp, r7
 80123e8:	bd80      	pop	{r7, pc}

080123ea <_ZThn4_N15screenPresenter9UpdateHumEi>:
    virtual void UpdateHum(int);
 80123ea:	f1a0 0004 	sub.w	r0, r0, #4
 80123ee:	f7ff bfe3 	b.w	80123b8 <_ZN15screenPresenter9UpdateHumEi>
	...

080123f4 <_ZNK8touchgfx6Bitmap5getIdEv>:
    /**
     * Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b082      	sub	sp, #8
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 80123fc:	4b07      	ldr	r3, [pc, #28]	; (801241c <_ZNK8touchgfx6Bitmap5getIdEv+0x28>)
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d105      	bne.n	8012410 <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>
 8012404:	4b06      	ldr	r3, [pc, #24]	; (8012420 <_ZNK8touchgfx6Bitmap5getIdEv+0x2c>)
 8012406:	4a07      	ldr	r2, [pc, #28]	; (8012424 <_ZNK8touchgfx6Bitmap5getIdEv+0x30>)
 8012408:	218b      	movs	r1, #139	; 0x8b
 801240a:	4807      	ldr	r0, [pc, #28]	; (8012428 <_ZNK8touchgfx6Bitmap5getIdEv+0x34>)
 801240c:	f014 fc0a 	bl	8026c24 <__assert_func>
        return bitmapId;
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	881b      	ldrh	r3, [r3, #0]
    }
 8012414:	4618      	mov	r0, r3
 8012416:	3708      	adds	r7, #8
 8012418:	46bd      	mov	sp, r7
 801241a:	bd80      	pop	{r7, pc}
 801241c:	2000a178 	.word	0x2000a178
 8012420:	08029bc0 	.word	0x08029bc0
 8012424:	08029bfc 	.word	0x08029bfc
 8012428:	08029c30 	.word	0x08029c30

0801242c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 801242c:	b480      	push	{r7}
 801242e:	b083      	sub	sp, #12
 8012430:	af00      	add	r7, sp, #0
 8012432:	6078      	str	r0, [r7, #4]
 8012434:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	683a      	ldr	r2, [r7, #0]
 801243a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801243c:	bf00      	nop
 801243e:	370c      	adds	r7, #12
 8012440:	46bd      	mov	sp, r7
 8012442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012446:	4770      	bx	lr

08012448 <_ZNK8touchgfx12ToggleButton8getStateEv>:
     * Gets the state of the ToggleButton as set with forceState.
     *
     * @return True if the button has been toggled, i.e. the pressed state is shown when the
     *         button is not pressed.
     */
    bool getState() const
 8012448:	b590      	push	{r4, r7, lr}
 801244a:	b083      	sub	sp, #12
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
    {
        return up.getId() == originalPressed.getId();
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	332e      	adds	r3, #46	; 0x2e
 8012454:	4618      	mov	r0, r3
 8012456:	f7ff ffcd 	bl	80123f4 <_ZNK8touchgfx6Bitmap5getIdEv>
 801245a:	4603      	mov	r3, r0
 801245c:	461c      	mov	r4, r3
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	3334      	adds	r3, #52	; 0x34
 8012462:	4618      	mov	r0, r3
 8012464:	f7ff ffc6 	bl	80123f4 <_ZNK8touchgfx6Bitmap5getIdEv>
 8012468:	4603      	mov	r3, r0
 801246a:	429c      	cmp	r4, r3
 801246c:	bf0c      	ite	eq
 801246e:	2301      	moveq	r3, #1
 8012470:	2300      	movne	r3, #0
 8012472:	b2db      	uxtb	r3, r3
    }
 8012474:	4618      	mov	r0, r3
 8012476:	370c      	adds	r7, #12
 8012478:	46bd      	mov	sp, r7
 801247a:	bd90      	pop	{r4, r7, pc}

0801247c <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 801247c:	b580      	push	{r7, lr}
 801247e:	b082      	sub	sp, #8
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
 8012484:	4a05      	ldr	r2, [pc, #20]	; (801249c <_ZN10screenViewD1Ev+0x20>)
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	601a      	str	r2, [r3, #0]
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	4618      	mov	r0, r3
 801248e:	f7fe fee1 	bl	8011254 <_ZN14screenViewBaseD1Ev>
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	4618      	mov	r0, r3
 8012496:	3708      	adds	r7, #8
 8012498:	46bd      	mov	sp, r7
 801249a:	bd80      	pop	{r7, pc}
 801249c:	0802a56c 	.word	0x0802a56c

080124a0 <_ZN10screenViewD0Ev>:
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b082      	sub	sp, #8
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
 80124a8:	6878      	ldr	r0, [r7, #4]
 80124aa:	f7ff ffe7 	bl	801247c <_ZN10screenViewD1Ev>
 80124ae:	f44f 7149 	mov.w	r1, #804	; 0x324
 80124b2:	6878      	ldr	r0, [r7, #4]
 80124b4:	f014 fa8b 	bl	80269ce <_ZdlPvj>
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	4618      	mov	r0, r3
 80124bc:	3708      	adds	r7, #8
 80124be:	46bd      	mov	sp, r7
 80124c0:	bd80      	pop	{r7, pc}
	...

080124c4 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b084      	sub	sp, #16
 80124c8:	af02      	add	r7, sp, #8
 80124ca:	6078      	str	r0, [r7, #4]
 80124cc:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 80124ce:	6878      	ldr	r0, [r7, #4]
 80124d0:	683b      	ldr	r3, [r7, #0]
 80124d2:	9300      	str	r3, [sp, #0]
 80124d4:	4b04      	ldr	r3, [pc, #16]	; (80124e8 <_ZNSt7__cxx119to_stringEi+0x24>)
 80124d6:	2210      	movs	r2, #16
 80124d8:	4904      	ldr	r1, [pc, #16]	; (80124ec <_ZNSt7__cxx119to_stringEi+0x28>)
 80124da:	f000 f8eb 	bl	80126b4 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 80124de:	6878      	ldr	r0, [r7, #4]
 80124e0:	3708      	adds	r7, #8
 80124e2:	46bd      	mov	sp, r7
 80124e4:	bd80      	pop	{r7, pc}
 80124e6:	bf00      	nop
 80124e8:	08029c74 	.word	0x08029c74
 80124ec:	08027969 	.word	0x08027969

080124f0 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>
#include <string.h>
#include <string>

screenView::screenView()
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b082      	sub	sp, #8
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	4618      	mov	r0, r3
 80124fc:	f7fe ff5e 	bl	80113bc <_ZN14screenViewBaseC1Ev>
 8012500:	4a03      	ldr	r2, [pc, #12]	; (8012510 <_ZN10screenViewC1Ev+0x20>)
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	601a      	str	r2, [r3, #0]
{

}
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	4618      	mov	r0, r3
 801250a:	3708      	adds	r7, #8
 801250c:	46bd      	mov	sp, r7
 801250e:	bd80      	pop	{r7, pc}
 8012510:	0802a56c 	.word	0x0802a56c

08012514 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b084      	sub	sp, #16
 8012518:	af02      	add	r7, sp, #8
 801251a:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	4618      	mov	r0, r3
 8012520:	f7ff f992 	bl	8011848 <_ZN14screenViewBase11setupScreenEv>

	tempTextViewBuffer[0] = 0;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2200      	movs	r2, #0
 8012528:	f8a3 22a4 	strh.w	r2, [r3, #676]	; 0x2a4
	humTextViewBuffer[0] = 0;
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	2200      	movs	r2, #0
 8012530:	f8a3 22e4 	strh.w	r2, [r3, #740]	; 0x2e4
	//screenViewBase::tempText.setPosition(156, 71, 240, 320);

	screenViewBase::tempText.setPosition(100, 71, 240, 320);
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	f503 7015 	add.w	r0, r3, #596	; 0x254
 801253a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 801253e:	9300      	str	r3, [sp, #0]
 8012540:	23f0      	movs	r3, #240	; 0xf0
 8012542:	2247      	movs	r2, #71	; 0x47
 8012544:	2164      	movs	r1, #100	; 0x64
 8012546:	f7fe faae 	bl	8010aa6 <_ZN8touchgfx8Drawable11setPositionEssss>
	screenViewBase::tempText.setWildcard(tempTextViewBuffer);
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	f503 7215 	add.w	r2, r3, #596	; 0x254
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8012556:	4619      	mov	r1, r3
 8012558:	4610      	mov	r0, r2
 801255a:	f7ff ff67 	bl	801242c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>

    screenViewBase::humText.setPosition(100, 180, 240, 320);
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	f503 7005 	add.w	r0, r3, #532	; 0x214
 8012564:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8012568:	9300      	str	r3, [sp, #0]
 801256a:	23f0      	movs	r3, #240	; 0xf0
 801256c:	22b4      	movs	r2, #180	; 0xb4
 801256e:	2164      	movs	r1, #100	; 0x64
 8012570:	f7fe fa99 	bl	8010aa6 <_ZN8touchgfx8Drawable11setPositionEssss>
    screenViewBase::humText.setWildcard(humTextViewBuffer);
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f503 7205 	add.w	r2, r3, #532	; 0x214
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8012580:	4619      	mov	r1, r3
 8012582:	4610      	mov	r0, r2
 8012584:	f7ff ff52 	bl	801242c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>

}
 8012588:	bf00      	nop
 801258a:	3708      	adds	r7, #8
 801258c:	46bd      	mov	sp, r7
 801258e:	bd80      	pop	{r7, pc}

08012590 <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b082      	sub	sp, #8
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	4618      	mov	r0, r3
 801259c:	f7fe fc00 	bl	8010da0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80125a0:	bf00      	nop
 80125a2:	3708      	adds	r7, #8
 80125a4:	46bd      	mov	sp, r7
 80125a6:	bd80      	pop	{r7, pc}

080125a8 <_ZN10screenView28HumidifierControlButtonStateEv>:

void screenView::HumidifierControlButtonState()
{
 80125a8:	b480      	push	{r7}
 80125aa:	b083      	sub	sp, #12
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
	//presenter->updateHumidifierControlState(buttonOnOff.getState());
}
 80125b0:	bf00      	nop
 80125b2:	370c      	adds	r7, #12
 80125b4:	46bd      	mov	sp, r7
 80125b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ba:	4770      	bx	lr

080125bc <_ZN10screenView22updateOnOffButtonStateEv>:

void screenView::updateOnOffButtonState()
{
 80125bc:	b5b0      	push	{r4, r5, r7, lr}
 80125be:	b082      	sub	sp, #8
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
	presenter->updateHumidifierControlState(humOnOffButton.getState());
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	3310      	adds	r3, #16
 80125d0:	681c      	ldr	r4, [r3, #0]
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80125d8:	4618      	mov	r0, r3
 80125da:	f7ff ff35 	bl	8012448 <_ZNK8touchgfx12ToggleButton8getStateEv>
 80125de:	4603      	mov	r3, r0
 80125e0:	4619      	mov	r1, r3
 80125e2:	4628      	mov	r0, r5
 80125e4:	47a0      	blx	r4
}
 80125e6:	bf00      	nop
 80125e8:	3708      	adds	r7, #8
 80125ea:	46bd      	mov	sp, r7
 80125ec:	bdb0      	pop	{r4, r5, r7, pc}

080125ee <_ZN10screenView14UpdateTempViewEi>:

void screenView::UpdateTempView(int val)
{
 80125ee:	b590      	push	{r4, r7, lr}
 80125f0:	b08b      	sub	sp, #44	; 0x2c
 80125f2:	af00      	add	r7, sp, #0
 80125f4:	6078      	str	r0, [r7, #4]
 80125f6:	6039      	str	r1, [r7, #0]
	std::string s = std::to_string(val);
 80125f8:	f107 030c 	add.w	r3, r7, #12
 80125fc:	6839      	ldr	r1, [r7, #0]
 80125fe:	4618      	mov	r0, r3
 8012600:	f7ff ff60 	bl	80124c4 <_ZNSt7__cxx119to_stringEi>
	char const *pchar = s.c_str();  //use char const* as target type
 8012604:	f107 030c 	add.w	r3, r7, #12
 8012608:	4618      	mov	r0, r3
 801260a:	f014 fad3 	bl	8026bb4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 801260e:	6278      	str	r0, [r7, #36]	; 0x24

	//memset(tempTextViewBuffer, 0x0, sizeof(tempTextViewBuffer));

	Unicode::strncpy(tempTextViewBuffer, pchar, strlen(pchar));
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f503 7429 	add.w	r4, r3, #676	; 0x2a4
 8012616:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012618:	f7ed fe44 	bl	80002a4 <strlen>
 801261c:	4603      	mov	r3, r0
 801261e:	b29b      	uxth	r3, r3
 8012620:	461a      	mov	r2, r3
 8012622:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012624:	4620      	mov	r0, r4
 8012626:	f007 ffa4 	bl	801a572 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	screenViewBase::tempText.invalidate();
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8012630:	4618      	mov	r0, r3
 8012632:	f006 fb36 	bl	8018ca2 <_ZNK8touchgfx8Drawable10invalidateEv>
	std::string s = std::to_string(val);
 8012636:	f107 030c 	add.w	r3, r7, #12
 801263a:	4618      	mov	r0, r3
 801263c:	f014 fa78 	bl	8026b30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8012640:	bf00      	nop
 8012642:	372c      	adds	r7, #44	; 0x2c
 8012644:	46bd      	mov	sp, r7
 8012646:	bd90      	pop	{r4, r7, pc}

08012648 <_ZN10screenView13UpdateHumViewEi>:

void screenView::UpdateHumView(int val)
{
 8012648:	b590      	push	{r4, r7, lr}
 801264a:	b08b      	sub	sp, #44	; 0x2c
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
 8012650:	6039      	str	r1, [r7, #0]
	std::string s = std::to_string(val);
 8012652:	f107 030c 	add.w	r3, r7, #12
 8012656:	6839      	ldr	r1, [r7, #0]
 8012658:	4618      	mov	r0, r3
 801265a:	f7ff ff33 	bl	80124c4 <_ZNSt7__cxx119to_stringEi>

	s += "%";
 801265e:	f107 030c 	add.w	r3, r7, #12
 8012662:	4913      	ldr	r1, [pc, #76]	; (80126b0 <_ZN10screenView13UpdateHumViewEi+0x68>)
 8012664:	4618      	mov	r0, r3
 8012666:	f014 faa1 	bl	8026bac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
	char const *pchar = s.c_str();  //use char const* as target type
 801266a:	f107 030c 	add.w	r3, r7, #12
 801266e:	4618      	mov	r0, r3
 8012670:	f014 faa0 	bl	8026bb4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8012674:	6278      	str	r0, [r7, #36]	; 0x24

	//memset(humTextViewBuffer, 0x0, sizeof(humTextViewBuffer));

	Unicode::strncpy(humTextViewBuffer, pchar, strlen(pchar));
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	f503 7439 	add.w	r4, r3, #740	; 0x2e4
 801267c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801267e:	f7ed fe11 	bl	80002a4 <strlen>
 8012682:	4603      	mov	r3, r0
 8012684:	b29b      	uxth	r3, r3
 8012686:	461a      	mov	r2, r3
 8012688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801268a:	4620      	mov	r0, r4
 801268c:	f007 ff71 	bl	801a572 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	screenViewBase::humText.invalidate();
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8012696:	4618      	mov	r0, r3
 8012698:	f006 fb03 	bl	8018ca2 <_ZNK8touchgfx8Drawable10invalidateEv>
	std::string s = std::to_string(val);
 801269c:	f107 030c 	add.w	r3, r7, #12
 80126a0:	4618      	mov	r0, r3
 80126a2:	f014 fa45 	bl	8026b30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80126a6:	bf00      	nop
 80126a8:	372c      	adds	r7, #44	; 0x2c
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bd90      	pop	{r4, r7, pc}
 80126ae:	bf00      	nop
 80126b0:	08029c78 	.word	0x08029c78

080126b4 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 80126b4:	b408      	push	{r3}
 80126b6:	b590      	push	{r4, r7, lr}
 80126b8:	b088      	sub	sp, #32
 80126ba:	af00      	add	r7, sp, #0
 80126bc:	60f8      	str	r0, [r7, #12]
 80126be:	60b9      	str	r1, [r7, #8]
 80126c0:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	3307      	adds	r3, #7
 80126c6:	08db      	lsrs	r3, r3, #3
 80126c8:	00db      	lsls	r3, r3, #3
 80126ca:	ebad 0d03 	sub.w	sp, sp, r3
 80126ce:	466b      	mov	r3, sp
 80126d0:	3307      	adds	r3, #7
 80126d2:	08db      	lsrs	r3, r3, #3
 80126d4:	00db      	lsls	r3, r3, #3
 80126d6:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 80126d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80126dc:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 80126de:	68bc      	ldr	r4, [r7, #8]
 80126e0:	693b      	ldr	r3, [r7, #16]
 80126e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80126e4:	6879      	ldr	r1, [r7, #4]
 80126e6:	69f8      	ldr	r0, [r7, #28]
 80126e8:	47a0      	blx	r4
 80126ea:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 80126ec:	69bb      	ldr	r3, [r7, #24]
 80126ee:	69fa      	ldr	r2, [r7, #28]
 80126f0:	18d4      	adds	r4, r2, r3
 80126f2:	f107 0314 	add.w	r3, r7, #20
 80126f6:	4618      	mov	r0, r3
 80126f8:	f014 f97d 	bl	80269f6 <_ZNSaIcEC1Ev>
 80126fc:	f107 0314 	add.w	r3, r7, #20
 8012700:	4622      	mov	r2, r4
 8012702:	69f9      	ldr	r1, [r7, #28]
 8012704:	68f8      	ldr	r0, [r7, #12]
 8012706:	f000 f80d 	bl	8012724 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 801270a:	f107 0314 	add.w	r3, r7, #20
 801270e:	4618      	mov	r0, r3
 8012710:	f014 f972 	bl	80269f8 <_ZNSaIcED1Ev>
 8012714:	bf00      	nop
    }
 8012716:	68f8      	ldr	r0, [r7, #12]
 8012718:	3720      	adds	r7, #32
 801271a:	46bd      	mov	sp, r7
 801271c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8012720:	b001      	add	sp, #4
 8012722:	4770      	bx	lr

08012724 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 8012724:	b590      	push	{r4, r7, lr}
 8012726:	b085      	sub	sp, #20
 8012728:	af00      	add	r7, sp, #0
 801272a:	60f8      	str	r0, [r7, #12]
 801272c:	60b9      	str	r1, [r7, #8]
 801272e:	607a      	str	r2, [r7, #4]
 8012730:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 8012732:	68fc      	ldr	r4, [r7, #12]
 8012734:	68f8      	ldr	r0, [r7, #12]
 8012736:	f014 f971 	bl	8026a1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 801273a:	4603      	mov	r3, r0
 801273c:	683a      	ldr	r2, [r7, #0]
 801273e:	4619      	mov	r1, r3
 8012740:	4620      	mov	r0, r4
 8012742:	f014 fa39 	bl	8026bb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8012746:	687a      	ldr	r2, [r7, #4]
 8012748:	68b9      	ldr	r1, [r7, #8]
 801274a:	68f8      	ldr	r0, [r7, #12]
 801274c:	f000 f805 	bl	801275a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	4618      	mov	r0, r3
 8012754:	3714      	adds	r7, #20
 8012756:	46bd      	mov	sp, r7
 8012758:	bd90      	pop	{r4, r7, pc}

0801275a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 801275a:	b580      	push	{r7, lr}
 801275c:	b086      	sub	sp, #24
 801275e:	af00      	add	r7, sp, #0
 8012760:	60f8      	str	r0, [r7, #12]
 8012762:	60b9      	str	r1, [r7, #8]
 8012764:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8012766:	687a      	ldr	r2, [r7, #4]
 8012768:	68b9      	ldr	r1, [r7, #8]
 801276a:	68f8      	ldr	r0, [r7, #12]
 801276c:	f000 f804 	bl	8012778 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8012770:	bf00      	nop
 8012772:	3718      	adds	r7, #24
 8012774:	46bd      	mov	sp, r7
 8012776:	bd80      	pop	{r7, pc}

08012778 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8012778:	b590      	push	{r4, r7, lr}
 801277a:	b087      	sub	sp, #28
 801277c:	af00      	add	r7, sp, #0
 801277e:	60f8      	str	r0, [r7, #12]
 8012780:	60b9      	str	r1, [r7, #8]
 8012782:	607a      	str	r2, [r7, #4]
 8012784:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8012786:	4623      	mov	r3, r4
 8012788:	687a      	ldr	r2, [r7, #4]
 801278a:	68b9      	ldr	r1, [r7, #8]
 801278c:	68f8      	ldr	r0, [r7, #12]
 801278e:	f000 f805 	bl	801279c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8012792:	bf00      	nop
 8012794:	371c      	adds	r7, #28
 8012796:	46bd      	mov	sp, r7
 8012798:	bd90      	pop	{r4, r7, pc}
	...

0801279c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 801279c:	b580      	push	{r7, lr}
 801279e:	b086      	sub	sp, #24
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	60f8      	str	r0, [r7, #12]
 80127a4:	60b9      	str	r1, [r7, #8]
 80127a6:	607a      	str	r2, [r7, #4]
 80127a8:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 80127aa:	68b8      	ldr	r0, [r7, #8]
 80127ac:	f000 f83e 	bl	801282c <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 80127b0:	4603      	mov	r3, r0
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d005      	beq.n	80127c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 80127b6:	68ba      	ldr	r2, [r7, #8]
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	429a      	cmp	r2, r3
 80127bc:	d001      	beq.n	80127c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 80127be:	2301      	movs	r3, #1
 80127c0:	e000      	b.n	80127c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 80127c2:	2300      	movs	r3, #0
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d002      	beq.n	80127ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 80127c8:	4817      	ldr	r0, [pc, #92]	; (8012828 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 80127ca:	f014 f919 	bl	8026a00 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 80127ce:	6879      	ldr	r1, [r7, #4]
 80127d0:	68b8      	ldr	r0, [r7, #8]
 80127d2:	f000 f83b 	bl	801284c <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 80127d6:	4603      	mov	r3, r0
 80127d8:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 80127da:	697b      	ldr	r3, [r7, #20]
 80127dc:	2b0f      	cmp	r3, #15
 80127de:	d910      	bls.n	8012802 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 80127e0:	f107 0314 	add.w	r3, r7, #20
 80127e4:	2200      	movs	r2, #0
 80127e6:	4619      	mov	r1, r3
 80127e8:	68f8      	ldr	r0, [r7, #12]
 80127ea:	f014 f921 	bl	8026a30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80127ee:	4603      	mov	r3, r0
 80127f0:	4619      	mov	r1, r3
 80127f2:	68f8      	ldr	r0, [r7, #12]
 80127f4:	f014 f90e 	bl	8026a14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 80127f8:	697b      	ldr	r3, [r7, #20]
 80127fa:	4619      	mov	r1, r3
 80127fc:	68f8      	ldr	r0, [r7, #12]
 80127fe:	f014 f90f 	bl	8026a20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8012802:	68f8      	ldr	r0, [r7, #12]
 8012804:	f014 f908 	bl	8026a18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8012808:	4603      	mov	r3, r0
 801280a:	687a      	ldr	r2, [r7, #4]
 801280c:	68b9      	ldr	r1, [r7, #8]
 801280e:	4618      	mov	r0, r3
 8012810:	f014 f94d 	bl	8026aae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8012814:	697b      	ldr	r3, [r7, #20]
 8012816:	4619      	mov	r1, r3
 8012818:	68f8      	ldr	r0, [r7, #12]
 801281a:	f014 f903 	bl	8026a24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 801281e:	bf00      	nop
 8012820:	3718      	adds	r7, #24
 8012822:	46bd      	mov	sp, r7
 8012824:	bd80      	pop	{r7, pc}
 8012826:	bf00      	nop
 8012828:	08029c7c 	.word	0x08029c7c

0801282c <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 801282c:	b480      	push	{r7}
 801282e:	b083      	sub	sp, #12
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	2b00      	cmp	r3, #0
 8012838:	bf0c      	ite	eq
 801283a:	2301      	moveq	r3, #1
 801283c:	2300      	movne	r3, #0
 801283e:	b2db      	uxtb	r3, r3
 8012840:	4618      	mov	r0, r3
 8012842:	370c      	adds	r7, #12
 8012844:	46bd      	mov	sp, r7
 8012846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284a:	4770      	bx	lr

0801284c <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 801284c:	b5b0      	push	{r4, r5, r7, lr}
 801284e:	b084      	sub	sp, #16
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
 8012854:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8012856:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8012858:	1d3b      	adds	r3, r7, #4
 801285a:	4618      	mov	r0, r3
 801285c:	f000 f80a 	bl	8012874 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 8012860:	462a      	mov	r2, r5
 8012862:	6839      	ldr	r1, [r7, #0]
 8012864:	4620      	mov	r0, r4
 8012866:	f000 f80f 	bl	8012888 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 801286a:	4603      	mov	r3, r0
    }
 801286c:	4618      	mov	r0, r3
 801286e:	3710      	adds	r7, #16
 8012870:	46bd      	mov	sp, r7
 8012872:	bdb0      	pop	{r4, r5, r7, pc}

08012874 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8012874:	b480      	push	{r7}
 8012876:	b083      	sub	sp, #12
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 801287c:	4618      	mov	r0, r3
 801287e:	370c      	adds	r7, #12
 8012880:	46bd      	mov	sp, r7
 8012882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012886:	4770      	bx	lr

08012888 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8012888:	b480      	push	{r7}
 801288a:	b085      	sub	sp, #20
 801288c:	af00      	add	r7, sp, #0
 801288e:	60f8      	str	r0, [r7, #12]
 8012890:	60b9      	str	r1, [r7, #8]
 8012892:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8012894:	68ba      	ldr	r2, [r7, #8]
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	1ad3      	subs	r3, r2, r3
    }
 801289a:	4618      	mov	r0, r3
 801289c:	3714      	adds	r7, #20
 801289e:	46bd      	mov	sp, r7
 80128a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a4:	4770      	bx	lr
	...

080128a8 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 80128a8:	b480      	push	{r7}
 80128aa:	b083      	sub	sp, #12
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
    {
 80128b0:	4a04      	ldr	r2, [pc, #16]	; (80128c4 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	601a      	str	r2, [r3, #0]
    }
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	4618      	mov	r0, r3
 80128ba:	370c      	adds	r7, #12
 80128bc:	46bd      	mov	sp, r7
 80128be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c2:	4770      	bx	lr
 80128c4:	0802a5cc 	.word	0x0802a5cc

080128c8 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b082      	sub	sp, #8
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
    }
 80128d0:	6878      	ldr	r0, [r7, #4]
 80128d2:	f7ff ffe9 	bl	80128a8 <_ZN8touchgfx15TouchControllerD1Ev>
 80128d6:	2104      	movs	r1, #4
 80128d8:	6878      	ldr	r0, [r7, #4]
 80128da:	f014 f878 	bl	80269ce <_ZdlPvj>
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	4618      	mov	r0, r3
 80128e2:	3708      	adds	r7, #8
 80128e4:	46bd      	mov	sp, r7
 80128e6:	bd80      	pop	{r7, pc}

080128e8 <_ZN20STM32TouchController4initEv>:
//#include <cstring.h>

extern UART_HandleTypeDef huart1;

void STM32TouchController::init()
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b082      	sub	sp, #8
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
	BSP_TS_Init(240, 320);
 80128f0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80128f4:	20f0      	movs	r0, #240	; 0xf0
 80128f6:	f7f3 fae9 	bl	8005ecc <BSP_TS_Init>
}
 80128fa:	bf00      	nop
 80128fc:	3708      	adds	r7, #8
 80128fe:	46bd      	mov	sp, r7
 8012900:	bd80      	pop	{r7, pc}

08012902 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8012902:	b580      	push	{r7, lr}
 8012904:	b0a6      	sub	sp, #152	; 0x98
 8012906:	af00      	add	r7, sp, #0
 8012908:	60f8      	str	r0, [r7, #12]
 801290a:	60b9      	str	r1, [r7, #8]
 801290c:	607a      	str	r2, [r7, #4]
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    TS_StateTypeDef TS_State;
    BSP_TS_GetState(&TS_State);
 801290e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8012912:	4618      	mov	r0, r3
 8012914:	f7f3 fb14 	bl	8005f40 <BSP_TS_GetState>
    if (TS_State.TouchDetected)
 8012918:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 801291c:	2b00      	cmp	r3, #0
 801291e:	d01a      	beq.n	8012956 <_ZN20STM32TouchController11sampleTouchERlS0_+0x54>
    {
    	char buf[128] = {0,};
 8012920:	2300      	movs	r3, #0
 8012922:	613b      	str	r3, [r7, #16]
 8012924:	f107 0314 	add.w	r3, r7, #20
 8012928:	227c      	movs	r2, #124	; 0x7c
 801292a:	2100      	movs	r1, #0
 801292c:	4618      	mov	r0, r3
 801292e:	f014 fa23 	bl	8026d78 <memset>

        x = TS_State.X;
 8012932:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8012936:	461a      	mov	r2, r3
 8012938:	68bb      	ldr	r3, [r7, #8]
 801293a:	601a      	str	r2, [r3, #0]
        y = TS_State.Y;
 801293c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8012940:	461a      	mov	r2, r3
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	601a      	str	r2, [r3, #0]

        //x = 240 - x;
        y = 320 - y;
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	f5c3 72a0 	rsb	r2, r3, #320	; 0x140
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	601a      	str	r2, [r3, #0]

        //snprintf(buf, sizeof(buf), "x=%lu y=%lu\r\n", x, y);
        //HAL_UART_Transmit(&huart1, (uint8_t *)buf, strlen(buf), 100);
        //DEBUG_PRINT(buf);

        return true;
 8012952:	2301      	movs	r3, #1
 8012954:	e000      	b.n	8012958 <_ZN20STM32TouchController11sampleTouchERlS0_+0x56>
    }

    //DEBUG_PRINT("return false");
    return false;
 8012956:	2300      	movs	r3, #0
}
 8012958:	4618      	mov	r0, r3
 801295a:	3798      	adds	r7, #152	; 0x98
 801295c:	46bd      	mov	sp, r7
 801295e:	bd80      	pop	{r7, pc}

08012960 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8012960:	b580      	push	{r7, lr}
 8012962:	b082      	sub	sp, #8
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
 8012968:	4a05      	ldr	r2, [pc, #20]	; (8012980 <_ZN20STM32TouchControllerD1Ev+0x20>)
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	601a      	str	r2, [r3, #0]
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	4618      	mov	r0, r3
 8012972:	f7ff ff99 	bl	80128a8 <_ZN8touchgfx15TouchControllerD1Ev>
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	4618      	mov	r0, r3
 801297a:	3708      	adds	r7, #8
 801297c:	46bd      	mov	sp, r7
 801297e:	bd80      	pop	{r7, pc}
 8012980:	0802a5b4 	.word	0x0802a5b4

08012984 <_ZN20STM32TouchControllerD0Ev>:
 8012984:	b580      	push	{r7, lr}
 8012986:	b082      	sub	sp, #8
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
 801298c:	6878      	ldr	r0, [r7, #4]
 801298e:	f7ff ffe7 	bl	8012960 <_ZN20STM32TouchControllerD1Ev>
 8012992:	2104      	movs	r1, #4
 8012994:	6878      	ldr	r0, [r7, #4]
 8012996:	f014 f81a 	bl	80269ce <_ZdlPvj>
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	4618      	mov	r0, r3
 801299e:	3708      	adds	r7, #8
 80129a0:	46bd      	mov	sp, r7
 80129a2:	bd80      	pop	{r7, pc}

080129a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80129a4:	b480      	push	{r7}
 80129a6:	b083      	sub	sp, #12
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	4603      	mov	r3, r0
 80129ac:	71fb      	strb	r3, [r7, #7]

}
 80129ae:	bf00      	nop
 80129b0:	370c      	adds	r7, #12
 80129b2:	46bd      	mov	sp, r7
 80129b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b8:	4770      	bx	lr

080129ba <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80129ba:	b480      	push	{r7}
 80129bc:	b083      	sub	sp, #12
 80129be:	af00      	add	r7, sp, #0
 80129c0:	4603      	mov	r3, r0
 80129c2:	71fb      	strb	r3, [r7, #7]

}
 80129c4:	bf00      	nop
 80129c6:	370c      	adds	r7, #12
 80129c8:	46bd      	mov	sp, r7
 80129ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ce:	4770      	bx	lr

080129d0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80129d0:	b480      	push	{r7}
 80129d2:	b083      	sub	sp, #12
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	4603      	mov	r3, r0
 80129d8:	71fb      	strb	r3, [r7, #7]

}
 80129da:	bf00      	nop
 80129dc:	370c      	adds	r7, #12
 80129de:	46bd      	mov	sp, r7
 80129e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e4:	4770      	bx	lr
	...

080129e8 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80129e8:	b480      	push	{r7}
 80129ea:	b083      	sub	sp, #12
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
    {
 80129f0:	4a04      	ldr	r2, [pc, #16]	; (8012a04 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	601a      	str	r2, [r3, #0]
    }
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	4618      	mov	r0, r3
 80129fa:	370c      	adds	r7, #12
 80129fc:	46bd      	mov	sp, r7
 80129fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a02:	4770      	bx	lr
 8012a04:	0802b09c 	.word	0x0802b09c

08012a08 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	b082      	sub	sp, #8
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
    }
 8012a10:	6878      	ldr	r0, [r7, #4]
 8012a12:	f7ff ffe9 	bl	80129e8 <_ZN8touchgfx3HALD1Ev>
 8012a16:	217c      	movs	r1, #124	; 0x7c
 8012a18:	6878      	ldr	r0, [r7, #4]
 8012a1a:	f013 ffd8 	bl	80269ce <_ZdlPvj>
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	4618      	mov	r0, r3
 8012a22:	3708      	adds	r7, #8
 8012a24:	46bd      	mov	sp, r7
 8012a26:	bd80      	pop	{r7, pc}

08012a28 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8012a28:	b480      	push	{r7}
 8012a2a:	b083      	sub	sp, #12
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
 8012a30:	460b      	mov	r3, r1
 8012a32:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	78fa      	ldrb	r2, [r7, #3]
 8012a38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	2201      	movs	r2, #1
 8012a40:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8012a44:	bf00      	nop
 8012a46:	370c      	adds	r7, #12
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4e:	4770      	bx	lr

08012a50 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b082      	sub	sp, #8
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d009      	beq.n	8012a76 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	685a      	ldr	r2, [r3, #4]
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	685b      	ldr	r3, [r3, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	4610      	mov	r0, r2
 8012a70:	4798      	blx	r3
 8012a72:	4603      	mov	r3, r0
 8012a74:	e000      	b.n	8012a78 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 8012a76:	2300      	movs	r3, #0
        }
    }
 8012a78:	4618      	mov	r0, r3
 8012a7a:	3708      	adds	r7, #8
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	bd80      	pop	{r7, pc}

08012a80 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b082      	sub	sp, #8
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8012a88:	6878      	ldr	r0, [r7, #4]
 8012a8a:	f002 ffcb 	bl	8015a24 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	3390      	adds	r3, #144	; 0x90
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	6878      	ldr	r0, [r7, #4]
 8012a98:	4798      	blx	r3
    }
 8012a9a:	bf00      	nop
 8012a9c:	3708      	adds	r7, #8
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	bd80      	pop	{r7, pc}

08012aa2 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8012aa2:	b480      	push	{r7}
 8012aa4:	b083      	sub	sp, #12
 8012aa6:	af00      	add	r7, sp, #0
 8012aa8:	6078      	str	r0, [r7, #4]
 8012aaa:	6039      	str	r1, [r7, #0]
    {
        return false;
 8012aac:	2300      	movs	r3, #0
    }
 8012aae:	4618      	mov	r0, r3
 8012ab0:	370c      	adds	r7, #12
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab8:	4770      	bx	lr
	...

08012abc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b084      	sub	sp, #16
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	60f8      	str	r0, [r7, #12]
 8012ac4:	60b9      	str	r1, [r7, #8]
 8012ac6:	607a      	str	r2, [r7, #4]
 8012ac8:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8012aca:	68bb      	ldr	r3, [r7, #8]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d106      	bne.n	8012ade <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8012ad0:	4b11      	ldr	r3, [pc, #68]	; (8012b18 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8012ad2:	4a12      	ldr	r2, [pc, #72]	; (8012b1c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8012ad4:	f240 216b 	movw	r1, #619	; 0x26b
 8012ad8:	4811      	ldr	r0, [pc, #68]	; (8012b20 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8012ada:	f014 f8a3 	bl	8026c24 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	68ba      	ldr	r2, [r7, #8]
 8012ae2:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	687a      	ldr	r2, [r7, #4]
 8012ae8:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	683a      	ldr	r2, [r7, #0]
 8012aee:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	bf14      	ite	ne
 8012af6:	2301      	movne	r3, #1
 8012af8:	2300      	moveq	r3, #0
 8012afa:	b2da      	uxtb	r2, r3
 8012afc:	4b09      	ldr	r3, [pc, #36]	; (8012b24 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8012afe:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8012b00:	683b      	ldr	r3, [r7, #0]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	bf14      	ite	ne
 8012b06:	2301      	movne	r3, #1
 8012b08:	2300      	moveq	r3, #0
 8012b0a:	b2da      	uxtb	r2, r3
 8012b0c:	4b06      	ldr	r3, [pc, #24]	; (8012b28 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8012b0e:	701a      	strb	r2, [r3, #0]
    }
 8012b10:	bf00      	nop
 8012b12:	3710      	adds	r7, #16
 8012b14:	46bd      	mov	sp, r7
 8012b16:	bd80      	pop	{r7, pc}
 8012b18:	08029ca8 	.word	0x08029ca8
 8012b1c:	08029ce0 	.word	0x08029ce0
 8012b20:	08029d30 	.word	0x08029d30
 8012b24:	2000a0ee 	.word	0x2000a0ee
 8012b28:	2000a0ef 	.word	0x2000a0ef

08012b2c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8012b2c:	b480      	push	{r7}
 8012b2e:	b083      	sub	sp, #12
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8012b34:	2300      	movs	r3, #0
    }
 8012b36:	4618      	mov	r0, r3
 8012b38:	370c      	adds	r7, #12
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b40:	4770      	bx	lr

08012b42 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8012b42:	b580      	push	{r7, lr}
 8012b44:	b082      	sub	sp, #8
 8012b46:	af00      	add	r7, sp, #0
 8012b48:	6078      	str	r0, [r7, #4]
 8012b4a:	460b      	mov	r3, r1
 8012b4c:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d004      	beq.n	8012b60 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b5a:	887a      	ldrh	r2, [r7, #2]
 8012b5c:	4610      	mov	r0, r2
 8012b5e:	4798      	blx	r3
        }
    }
 8012b60:	bf00      	nop
 8012b62:	3708      	adds	r7, #8
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}

08012b68 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b082      	sub	sp, #8
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	685a      	ldr	r2, [r3, #4]
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	685b      	ldr	r3, [r3, #4]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	3318      	adds	r3, #24
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	4610      	mov	r0, r2
 8012b80:	4798      	blx	r3
 8012b82:	4603      	mov	r3, r0
    }
 8012b84:	4618      	mov	r0, r3
 8012b86:	3708      	adds	r7, #8
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd80      	pop	{r7, pc}

08012b8c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8012b8c:	b480      	push	{r7}
 8012b8e:	b083      	sub	sp, #12
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012ba0:	429a      	cmp	r2, r3
 8012ba2:	d017      	beq.n	8012bd4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8012ba4:	4b1a      	ldr	r3, [pc, #104]	; (8012c10 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8012ba6:	781b      	ldrb	r3, [r3, #0]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d12a      	bne.n	8012c02 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8012bac:	4b19      	ldr	r3, [pc, #100]	; (8012c14 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8012bae:	881a      	ldrh	r2, [r3, #0]
 8012bb0:	4b19      	ldr	r3, [pc, #100]	; (8012c18 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8012bb2:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8012bb4:	4b19      	ldr	r3, [pc, #100]	; (8012c1c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8012bb6:	881a      	ldrh	r2, [r3, #0]
 8012bb8:	4b19      	ldr	r3, [pc, #100]	; (8012c20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8012bba:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8012bbc:	4b16      	ldr	r3, [pc, #88]	; (8012c18 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8012bbe:	881a      	ldrh	r2, [r3, #0]
 8012bc0:	4b16      	ldr	r3, [pc, #88]	; (8012c1c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8012bc2:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8012bc4:	4b16      	ldr	r3, [pc, #88]	; (8012c20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8012bc6:	881a      	ldrh	r2, [r3, #0]
 8012bc8:	4b12      	ldr	r3, [pc, #72]	; (8012c14 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8012bca:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8012bcc:	4b10      	ldr	r3, [pc, #64]	; (8012c10 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8012bce:	2201      	movs	r2, #1
 8012bd0:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8012bd2:	e016      	b.n	8012c02 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8012bd4:	4b0e      	ldr	r3, [pc, #56]	; (8012c10 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8012bd6:	781b      	ldrb	r3, [r3, #0]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d012      	beq.n	8012c02 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8012bdc:	4b0f      	ldr	r3, [pc, #60]	; (8012c1c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8012bde:	881a      	ldrh	r2, [r3, #0]
 8012be0:	4b0d      	ldr	r3, [pc, #52]	; (8012c18 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8012be2:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8012be4:	4b0b      	ldr	r3, [pc, #44]	; (8012c14 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8012be6:	881a      	ldrh	r2, [r3, #0]
 8012be8:	4b0d      	ldr	r3, [pc, #52]	; (8012c20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8012bea:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8012bec:	4b0c      	ldr	r3, [pc, #48]	; (8012c20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8012bee:	881a      	ldrh	r2, [r3, #0]
 8012bf0:	4b0a      	ldr	r3, [pc, #40]	; (8012c1c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8012bf2:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8012bf4:	4b08      	ldr	r3, [pc, #32]	; (8012c18 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8012bf6:	881a      	ldrh	r2, [r3, #0]
 8012bf8:	4b06      	ldr	r3, [pc, #24]	; (8012c14 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8012bfa:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8012bfc:	4b04      	ldr	r3, [pc, #16]	; (8012c10 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8012bfe:	2200      	movs	r2, #0
 8012c00:	701a      	strb	r2, [r3, #0]
    }
 8012c02:	bf00      	nop
 8012c04:	370c      	adds	r7, #12
 8012c06:	46bd      	mov	sp, r7
 8012c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0c:	4770      	bx	lr
 8012c0e:	bf00      	nop
 8012c10:	2000a0e8 	.word	0x2000a0e8
 8012c14:	2000a0e4 	.word	0x2000a0e4
 8012c18:	2000a0ea 	.word	0x2000a0ea
 8012c1c:	2000a0e6 	.word	0x2000a0e6
 8012c20:	2000a0ec 	.word	0x2000a0ec

08012c24 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingVariant when chaning rendering variant
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 8012c24:	b480      	push	{r7}
 8012c26:	b083      	sub	sp, #12
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	6078      	str	r0, [r7, #4]
    {

    }
 8012c2c:	bf00      	nop
 8012c2e:	370c      	adds	r7, #12
 8012c30:	46bd      	mov	sp, r7
 8012c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c36:	4770      	bx	lr

08012c38 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingVariant when chaning rendering variant
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 8012c38:	b480      	push	{r7}
 8012c3a:	b083      	sub	sp, #12
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
    {

    }
 8012c40:	bf00      	nop
 8012c42:	370c      	adds	r7, #12
 8012c44:	46bd      	mov	sp, r7
 8012c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c4a:	4770      	bx	lr

08012c4c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b082      	sub	sp, #8
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	4618      	mov	r0, r3
 8012c58:	f002 f951 	bl	8014efe <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8012c5c:	bf00      	nop
 8012c5e:	3708      	adds	r7, #8
 8012c60:	46bd      	mov	sp, r7
 8012c62:	bd80      	pop	{r7, pc}

08012c64 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b082      	sub	sp, #8
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
 8012c6c:	4a05      	ldr	r2, [pc, #20]	; (8012c84 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	601a      	str	r2, [r3, #0]
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	4618      	mov	r0, r3
 8012c76:	f7ff feb7 	bl	80129e8 <_ZN8touchgfx3HALD1Ev>
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	3708      	adds	r7, #8
 8012c80:	46bd      	mov	sp, r7
 8012c82:	bd80      	pop	{r7, pc}
 8012c84:	0802a7f8 	.word	0x0802a7f8

08012c88 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b082      	sub	sp, #8
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
 8012c90:	6878      	ldr	r0, [r7, #4]
 8012c92:	f7ff ffe7 	bl	8012c64 <_ZN20TouchGFXGeneratedHALD1Ev>
 8012c96:	217c      	movs	r1, #124	; 0x7c
 8012c98:	6878      	ldr	r0, [r7, #4]
 8012c9a:	f013 fe98 	bl	80269ce <_ZdlPvj>
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	3708      	adds	r7, #8
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	bd80      	pop	{r7, pc}

08012ca8 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b082      	sub	sp, #8
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	f7ff ffca 	bl	8012c4c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8012cb8:	bf00      	nop
 8012cba:	3708      	adds	r7, #8
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	bd80      	pop	{r7, pc}

08012cc0 <_ZN11TouchGFXHAL10initializeEv>:
using namespace touchgfx;

extern UART_HandleTypeDef huart1;

void TouchGFXHAL::initialize()
{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b082      	sub	sp, #8
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	4618      	mov	r0, r3
 8012ccc:	f001 fb84 	bl	80143d8 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8012cd0:	bf00      	nop
 8012cd2:	3708      	adds	r7, #8
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	bd80      	pop	{r7, pc}

08012cd8 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	b082      	sub	sp, #8
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	6078      	str	r0, [r7, #4]
	enableLCDControllerInterrupt();
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	3368      	adds	r3, #104	; 0x68
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	6878      	ldr	r0, [r7, #4]
 8012cea:	4798      	blx	r3
	enableInterrupts();
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	3360      	adds	r3, #96	; 0x60
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	6878      	ldr	r0, [r7, #4]
 8012cf6:	4798      	blx	r3

	OSWrappers::waitForVSync();
 8012cf8:	f000 f928 	bl	8012f4c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
	backPorchExited();
 8012cfc:	687a      	ldr	r2, [r7, #4]
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	3358      	adds	r3, #88	; 0x58
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	4610      	mov	r0, r2
 8012d08:	4798      	blx	r3

	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 8012d0a:	2201      	movs	r2, #1
 8012d0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012d10:	480a      	ldr	r0, [pc, #40]	; (8012d3c <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
 8012d12:	f7f4 f861 	bl	8006dd8 <HAL_GPIO_WritePin>

	LCD_IO_WriteReg(0x29);
 8012d16:	2029      	movs	r0, #41	; 0x29
 8012d18:	f7f3 f824 	bl	8005d64 <LCD_IO_WriteReg>

	HAL_UART_Transmit(&huart1,
 8012d1c:	2364      	movs	r3, #100	; 0x64
 8012d1e:	2218      	movs	r2, #24
 8012d20:	4907      	ldr	r1, [pc, #28]	; (8012d40 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 8012d22:	4808      	ldr	r0, [pc, #32]	; (8012d44 <_ZN11TouchGFXHAL9taskEntryEv+0x6c>)
 8012d24:	f7f7 fe3f 	bl	800a9a6 <HAL_UART_Transmit>
					(uint8_t *)"taskEntry... init !!!!\r\n",
					strlen("taskEntry... init !!!!\r\n"), 100);
	for(;;)
	{
		OSWrappers::waitForVSync();
 8012d28:	f000 f910 	bl	8012f4c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
		backPorchExited();
 8012d2c:	687a      	ldr	r2, [r7, #4]
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	3358      	adds	r3, #88	; 0x58
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	4610      	mov	r0, r2
 8012d38:	4798      	blx	r3
		OSWrappers::waitForVSync();
 8012d3a:	e7f5      	b.n	8012d28 <_ZN11TouchGFXHAL9taskEntryEv+0x50>
 8012d3c:	40021800 	.word	0x40021800
 8012d40:	08029d74 	.word	0x08029d74
 8012d44:	2000b058 	.word	0x2000b058

08012d48 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b082      	sub	sp, #8
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	4618      	mov	r0, r3
 8012d54:	f001 fbcc 	bl	80144f0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8012d58:	4603      	mov	r3, r0
}
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	3708      	adds	r7, #8
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	bd80      	pop	{r7, pc}

08012d62 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8012d62:	b580      	push	{r7, lr}
 8012d64:	b082      	sub	sp, #8
 8012d66:	af00      	add	r7, sp, #0
 8012d68:	6078      	str	r0, [r7, #4]
 8012d6a:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	6839      	ldr	r1, [r7, #0]
 8012d70:	4618      	mov	r0, r3
 8012d72:	f001 fbcb 	bl	801450c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8012d76:	bf00      	nop
 8012d78:	3708      	adds	r7, #8
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd80      	pop	{r7, pc}

08012d7e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8012d7e:	b580      	push	{r7, lr}
 8012d80:	b082      	sub	sp, #8
 8012d82:	af00      	add	r7, sp, #0
 8012d84:	6078      	str	r0, [r7, #4]
 8012d86:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	6839      	ldr	r1, [r7, #0]
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	f001 fbd3 	bl	8014538 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8012d92:	bf00      	nop
 8012d94:	3708      	adds	r7, #8
 8012d96:	46bd      	mov	sp, r7
 8012d98:	bd80      	pop	{r7, pc}

08012d9a <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8012d9a:	b580      	push	{r7, lr}
 8012d9c:	b084      	sub	sp, #16
 8012d9e:	af00      	add	r7, sp, #0
 8012da0:	60f8      	str	r0, [r7, #12]
 8012da2:	60b9      	str	r1, [r7, #8]
 8012da4:	607a      	str	r2, [r7, #4]
 8012da6:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8012da8:	68f8      	ldr	r0, [r7, #12]
 8012daa:	683b      	ldr	r3, [r7, #0]
 8012dac:	687a      	ldr	r2, [r7, #4]
 8012dae:	68b9      	ldr	r1, [r7, #8]
 8012db0:	f001 fbd0 	bl	8014554 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8012db4:	4603      	mov	r3, r0
}
 8012db6:	4618      	mov	r0, r3
 8012db8:	3710      	adds	r7, #16
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	bd80      	pop	{r7, pc}

08012dbe <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8012dbe:	b580      	push	{r7, lr}
 8012dc0:	b082      	sub	sp, #8
 8012dc2:	af00      	add	r7, sp, #0
 8012dc4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	4618      	mov	r0, r3
 8012dca:	f001 fb37 	bl	801443c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8012dce:	bf00      	nop
 8012dd0:	3708      	adds	r7, #8
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	bd80      	pop	{r7, pc}

08012dd6 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8012dd6:	b580      	push	{r7, lr}
 8012dd8:	b082      	sub	sp, #8
 8012dda:	af00      	add	r7, sp, #0
 8012ddc:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	4618      	mov	r0, r3
 8012de2:	f001 fb3b 	bl	801445c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8012de6:	bf00      	nop
 8012de8:	3708      	adds	r7, #8
 8012dea:	46bd      	mov	sp, r7
 8012dec:	bd80      	pop	{r7, pc}

08012dee <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8012dee:	b580      	push	{r7, lr}
 8012df0:	b082      	sub	sp, #8
 8012df2:	af00      	add	r7, sp, #0
 8012df4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	4618      	mov	r0, r3
 8012dfa:	f001 fb3d 	bl	8014478 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8012dfe:	bf00      	nop
 8012e00:	3708      	adds	r7, #8
 8012e02:	46bd      	mov	sp, r7
 8012e04:	bd80      	pop	{r7, pc}

08012e06 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8012e06:	b580      	push	{r7, lr}
 8012e08:	b082      	sub	sp, #8
 8012e0a:	af00      	add	r7, sp, #0
 8012e0c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	4618      	mov	r0, r3
 8012e12:	f001 fb3f 	bl	8014494 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8012e16:	bf00      	nop
 8012e18:	3708      	adds	r7, #8
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	bd80      	pop	{r7, pc}
	...

08012e20 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b082      	sub	sp, #8
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
 8012e28:	4a05      	ldr	r2, [pc, #20]	; (8012e40 <_ZN11TouchGFXHALD1Ev+0x20>)
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	601a      	str	r2, [r3, #0]
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	4618      	mov	r0, r3
 8012e32:	f7ff ff17 	bl	8012c64 <_ZN20TouchGFXGeneratedHALD1Ev>
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	4618      	mov	r0, r3
 8012e3a:	3708      	adds	r7, #8
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	bd80      	pop	{r7, pc}
 8012e40:	0802a5e4 	.word	0x0802a5e4

08012e44 <_ZN11TouchGFXHALD0Ev>:
 8012e44:	b580      	push	{r7, lr}
 8012e46:	b082      	sub	sp, #8
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	6078      	str	r0, [r7, #4]
 8012e4c:	6878      	ldr	r0, [r7, #4]
 8012e4e:	f7ff ffe7 	bl	8012e20 <_ZN11TouchGFXHALD1Ev>
 8012e52:	217c      	movs	r1, #124	; 0x7c
 8012e54:	6878      	ldr	r0, [r7, #4]
 8012e56:	f013 fdba 	bl	80269ce <_ZdlPvj>
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	3708      	adds	r7, #8
 8012e60:	46bd      	mov	sp, r7
 8012e62:	bd80      	pop	{r7, pc}

08012e64 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8012e64:	b580      	push	{r7, lr}
 8012e66:	af00      	add	r7, sp, #0
    frame_buffer_sem = osSemaphoreCreate(osSemaphore(frame_buffer_sem), 1);
 8012e68:	2101      	movs	r1, #1
 8012e6a:	4811      	ldr	r0, [pc, #68]	; (8012eb0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8012e6c:	f7f9 fd48 	bl	800c900 <osSemaphoreCreate>
 8012e70:	4603      	mov	r3, r0
 8012e72:	4a10      	ldr	r2, [pc, #64]	; (8012eb4 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8012e74:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8012e76:	4b0f      	ldr	r3, [pc, #60]	; (8012eb4 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d105      	bne.n	8012e8a <_ZN8touchgfx10OSWrappers10initializeEv+0x26>
 8012e7e:	4b0e      	ldr	r3, [pc, #56]	; (8012eb8 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8012e80:	4a0e      	ldr	r2, [pc, #56]	; (8012ebc <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8012e82:	2125      	movs	r1, #37	; 0x25
 8012e84:	480e      	ldr	r0, [pc, #56]	; (8012ec0 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8012e86:	f013 fecd 	bl	8026c24 <__assert_func>

    vsync_sem = osSemaphoreCreate(osSemaphore(vsync_sem), 1);
 8012e8a:	2101      	movs	r1, #1
 8012e8c:	480d      	ldr	r0, [pc, #52]	; (8012ec4 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8012e8e:	f7f9 fd37 	bl	800c900 <osSemaphoreCreate>
 8012e92:	4603      	mov	r3, r0
 8012e94:	4a0c      	ldr	r2, [pc, #48]	; (8012ec8 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8012e96:	6013      	str	r3, [r2, #0]
    assert((vsync_sem != NULL) && "Creation of vsync semaphore failed");
 8012e98:	4b0b      	ldr	r3, [pc, #44]	; (8012ec8 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d105      	bne.n	8012eac <_ZN8touchgfx10OSWrappers10initializeEv+0x48>
 8012ea0:	4b0a      	ldr	r3, [pc, #40]	; (8012ecc <_ZN8touchgfx10OSWrappers10initializeEv+0x68>)
 8012ea2:	4a06      	ldr	r2, [pc, #24]	; (8012ebc <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8012ea4:	2128      	movs	r1, #40	; 0x28
 8012ea6:	4806      	ldr	r0, [pc, #24]	; (8012ec0 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8012ea8:	f013 febc 	bl	8026c24 <__assert_func>
}
 8012eac:	bf00      	nop
 8012eae:	bd80      	pop	{r7, pc}
 8012eb0:	0802a698 	.word	0x0802a698
 8012eb4:	20008eec 	.word	0x20008eec
 8012eb8:	08029d90 	.word	0x08029d90
 8012ebc:	08029ddc 	.word	0x08029ddc
 8012ec0:	08029e0c 	.word	0x08029e0c
 8012ec4:	0802a6a0 	.word	0x0802a6a0
 8012ec8:	20008ef0 	.word	0x20008ef0
 8012ecc:	08029e38 	.word	0x08029e38

08012ed0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, osWaitForever);
 8012ed4:	4b04      	ldr	r3, [pc, #16]	; (8012ee8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8012edc:	4618      	mov	r0, r3
 8012ede:	f7f9 fd4f 	bl	800c980 <osSemaphoreWait>
}
 8012ee2:	bf00      	nop
 8012ee4:	bd80      	pop	{r7, pc}
 8012ee6:	bf00      	nop
 8012ee8:	20008eec 	.word	0x20008eec

08012eec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8012ef0:	4b03      	ldr	r3, [pc, #12]	; (8012f00 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f7f9 fd91 	bl	800ca1c <osSemaphoreRelease>
}
 8012efa:	bf00      	nop
 8012efc:	bd80      	pop	{r7, pc}
 8012efe:	bf00      	nop
 8012f00:	20008eec 	.word	0x20008eec

08012f04 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, 0);
 8012f08:	4b03      	ldr	r3, [pc, #12]	; (8012f18 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	2100      	movs	r1, #0
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f7f9 fd36 	bl	800c980 <osSemaphoreWait>
}
 8012f14:	bf00      	nop
 8012f16:	bd80      	pop	{r7, pc}
 8012f18:	20008eec 	.word	0x20008eec

08012f1c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(frame_buffer_sem);
 8012f20:	4b03      	ldr	r3, [pc, #12]	; (8012f30 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	4618      	mov	r0, r3
 8012f26:	f7f9 fd79 	bl	800ca1c <osSemaphoreRelease>
}
 8012f2a:	bf00      	nop
 8012f2c:	bd80      	pop	{r7, pc}
 8012f2e:	bf00      	nop
 8012f30:	20008eec 	.word	0x20008eec

08012f34 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(vsync_sem);
 8012f38:	4b03      	ldr	r3, [pc, #12]	; (8012f48 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	f7f9 fd6d 	bl	800ca1c <osSemaphoreRelease>
}
 8012f42:	bf00      	nop
 8012f44:	bd80      	pop	{r7, pc}
 8012f46:	bf00      	nop
 8012f48:	20008ef0 	.word	0x20008ef0

08012f4c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8012f4c:	b580      	push	{r7, lr}
 8012f4e:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osSemaphoreWait(vsync_sem, 0);
 8012f50:	4b07      	ldr	r3, [pc, #28]	; (8012f70 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	2100      	movs	r1, #0
 8012f56:	4618      	mov	r0, r3
 8012f58:	f7f9 fd12 	bl	800c980 <osSemaphoreWait>

    // Then, wait for next VSYNC to occur.
    osSemaphoreWait(vsync_sem, osWaitForever);
 8012f5c:	4b04      	ldr	r3, [pc, #16]	; (8012f70 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	f04f 31ff 	mov.w	r1, #4294967295
 8012f64:	4618      	mov	r0, r3
 8012f66:	f7f9 fd0b 	bl	800c980 <osSemaphoreWait>
}
 8012f6a:	bf00      	nop
 8012f6c:	bd80      	pop	{r7, pc}
 8012f6e:	bf00      	nop
 8012f70:	20008ef0 	.word	0x20008ef0

08012f74 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b082      	sub	sp, #8
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 8012f7e:	88fb      	ldrh	r3, [r7, #6]
 8012f80:	4618      	mov	r0, r3
 8012f82:	f7f9 fc1c 	bl	800c7be <osDelay>
}
 8012f86:	bf00      	nop
 8012f88:	3708      	adds	r7, #8
 8012f8a:	46bd      	mov	sp, r7
 8012f8c:	bd80      	pop	{r7, pc}
	...

08012f90 <__NVIC_EnableIRQ>:
{
 8012f90:	b480      	push	{r7}
 8012f92:	b083      	sub	sp, #12
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	4603      	mov	r3, r0
 8012f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	db0b      	blt.n	8012fba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012fa2:	79fb      	ldrb	r3, [r7, #7]
 8012fa4:	f003 021f 	and.w	r2, r3, #31
 8012fa8:	4907      	ldr	r1, [pc, #28]	; (8012fc8 <__NVIC_EnableIRQ+0x38>)
 8012faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012fae:	095b      	lsrs	r3, r3, #5
 8012fb0:	2001      	movs	r0, #1
 8012fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8012fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8012fba:	bf00      	nop
 8012fbc:	370c      	adds	r7, #12
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc4:	4770      	bx	lr
 8012fc6:	bf00      	nop
 8012fc8:	e000e100 	.word	0xe000e100

08012fcc <__NVIC_DisableIRQ>:
{
 8012fcc:	b480      	push	{r7}
 8012fce:	b083      	sub	sp, #12
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	db12      	blt.n	8013004 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012fde:	79fb      	ldrb	r3, [r7, #7]
 8012fe0:	f003 021f 	and.w	r2, r3, #31
 8012fe4:	490a      	ldr	r1, [pc, #40]	; (8013010 <__NVIC_DisableIRQ+0x44>)
 8012fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012fea:	095b      	lsrs	r3, r3, #5
 8012fec:	2001      	movs	r0, #1
 8012fee:	fa00 f202 	lsl.w	r2, r0, r2
 8012ff2:	3320      	adds	r3, #32
 8012ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8012ff8:	f3bf 8f4f 	dsb	sy
}
 8012ffc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8012ffe:	f3bf 8f6f 	isb	sy
}
 8013002:	bf00      	nop
}
 8013004:	bf00      	nop
 8013006:	370c      	adds	r7, #12
 8013008:	46bd      	mov	sp, r7
 801300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300e:	4770      	bx	lr
 8013010:	e000e100 	.word	0xe000e100

08013014 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8013014:	b480      	push	{r7}
 8013016:	b083      	sub	sp, #12
 8013018:	af00      	add	r7, sp, #0
 801301a:	6078      	str	r0, [r7, #4]
        : color(0)
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	2200      	movs	r2, #0
 8013020:	601a      	str	r2, [r3, #0]
    }
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	4618      	mov	r0, r3
 8013026:	370c      	adds	r7, #12
 8013028:	46bd      	mov	sp, r7
 801302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801302e:	4770      	bx	lr

08013030 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8013030:	b480      	push	{r7}
 8013032:	b083      	sub	sp, #12
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
        return color;
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	681b      	ldr	r3, [r3, #0]
    }
 801303c:	4618      	mov	r0, r3
 801303e:	370c      	adds	r7, #12
 8013040:	46bd      	mov	sp, r7
 8013042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013046:	4770      	bx	lr

08013048 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8013048:	b480      	push	{r7}
 801304a:	b083      	sub	sp, #12
 801304c:	af00      	add	r7, sp, #0
 801304e:	6078      	str	r0, [r7, #4]
    {
 8013050:	4a04      	ldr	r2, [pc, #16]	; (8013064 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	601a      	str	r2, [r3, #0]
    }
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	4618      	mov	r0, r3
 801305a:	370c      	adds	r7, #12
 801305c:	46bd      	mov	sp, r7
 801305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013062:	4770      	bx	lr
 8013064:	0802a700 	.word	0x0802a700

08013068 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8013068:	b580      	push	{r7, lr}
 801306a:	b082      	sub	sp, #8
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
    }
 8013070:	6878      	ldr	r0, [r7, #4]
 8013072:	f7ff ffe9 	bl	8013048 <_ZN8touchgfx9DMA_QueueD1Ev>
 8013076:	2104      	movs	r1, #4
 8013078:	6878      	ldr	r0, [r7, #4]
 801307a:	f013 fca8 	bl	80269ce <_ZdlPvj>
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	4618      	mov	r0, r3
 8013082:	3708      	adds	r7, #8
 8013084:	46bd      	mov	sp, r7
 8013086:	bd80      	pop	{r7, pc}

08013088 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8013088:	b580      	push	{r7, lr}
 801308a:	b082      	sub	sp, #8
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	3344      	adds	r3, #68	; 0x44
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	6878      	ldr	r0, [r7, #4]
 801309a:	4798      	blx	r3
    }
 801309c:	bf00      	nop
 801309e:	3708      	adds	r7, #8
 80130a0:	46bd      	mov	sp, r7
 80130a2:	bd80      	pop	{r7, pc}

080130a4 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 80130a4:	b480      	push	{r7}
 80130a6:	b083      	sub	sp, #12
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	6078      	str	r0, [r7, #4]
    {
 80130ac:	4a04      	ldr	r2, [pc, #16]	; (80130c0 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	601a      	str	r2, [r3, #0]
    }
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	4618      	mov	r0, r3
 80130b6:	370c      	adds	r7, #12
 80130b8:	46bd      	mov	sp, r7
 80130ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130be:	4770      	bx	lr
 80130c0:	0802b4e8 	.word	0x0802b4e8

080130c4 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b082      	sub	sp, #8
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
    }
 80130cc:	6878      	ldr	r0, [r7, #4]
 80130ce:	f7ff ffe9 	bl	80130a4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80130d2:	210c      	movs	r1, #12
 80130d4:	6878      	ldr	r0, [r7, #4]
 80130d6:	f013 fc7a 	bl	80269ce <_ZdlPvj>
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	4618      	mov	r0, r3
 80130de:	3708      	adds	r7, #8
 80130e0:	46bd      	mov	sp, r7
 80130e2:	bd80      	pop	{r7, pc}

080130e4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80130e4:	b480      	push	{r7}
 80130e6:	b083      	sub	sp, #12
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	6078      	str	r0, [r7, #4]
 80130ec:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80130ee:	4a09      	ldr	r2, [pc, #36]	; (8013114 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	601a      	str	r2, [r3, #0]
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	683a      	ldr	r2, [r7, #0]
 80130f8:	605a      	str	r2, [r3, #4]
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	2200      	movs	r2, #0
 80130fe:	721a      	strb	r2, [r3, #8]
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	2200      	movs	r2, #0
 8013104:	725a      	strb	r2, [r3, #9]
    {
    }
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	4618      	mov	r0, r3
 801310a:	370c      	adds	r7, #12
 801310c:	46bd      	mov	sp, r7
 801310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013112:	4770      	bx	lr
 8013114:	0802b4e8 	.word	0x0802b4e8

08013118 <_ZN10STM32F4DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8013118:	b480      	push	{r7}
 801311a:	b083      	sub	sp, #12
 801311c:	af00      	add	r7, sp, #0
 801311e:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8013120:	2301      	movs	r3, #1
    }
 8013122:	4618      	mov	r0, r3
 8013124:	370c      	adds	r7, #12
 8013126:	46bd      	mov	sp, r7
 8013128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312c:	4770      	bx	lr

0801312e <_ZN10STM32F4DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 801312e:	b580      	push	{r7, lr}
 8013130:	b082      	sub	sp, #8
 8013132:	af00      	add	r7, sp, #0
 8013134:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8013136:	687a      	ldr	r2, [r7, #4]
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	3328      	adds	r3, #40	; 0x28
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	4610      	mov	r0, r2
 8013142:	4798      	blx	r3
    }
 8013144:	bf00      	nop
 8013146:	3708      	adds	r7, #8
 8013148:	46bd      	mov	sp, r7
 801314a:	bd80      	pop	{r7, pc}

0801314c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 801314c:	b580      	push	{r7, lr}
 801314e:	b082      	sub	sp, #8
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	685a      	ldr	r2, [r3, #4]
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	685b      	ldr	r3, [r3, #4]
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	3314      	adds	r3, #20
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	4610      	mov	r0, r2
 8013164:	4798      	blx	r3
    }
 8013166:	bf00      	nop
 8013168:	3708      	adds	r7, #8
 801316a:	46bd      	mov	sp, r7
 801316c:	bd80      	pop	{r7, pc}

0801316e <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 801316e:	b580      	push	{r7, lr}
 8013170:	b082      	sub	sp, #8
 8013172:	af00      	add	r7, sp, #0
 8013174:	6078      	str	r0, [r7, #4]
    (void)handle; // Unused argument
    HAL::getInstance()->signalDMAInterrupt();
 8013176:	f7fc ff6d 	bl	8010054 <_ZN8touchgfx3HAL11getInstanceEv>
 801317a:	4603      	mov	r3, r0
 801317c:	4618      	mov	r0, r3
 801317e:	f7ff ffe5 	bl	801314c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8013182:	bf00      	nop
 8013184:	3708      	adds	r7, #8
 8013186:	46bd      	mov	sp, r7
 8013188:	bd80      	pop	{r7, pc}

0801318a <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 801318a:	b580      	push	{r7, lr}
 801318c:	b082      	sub	sp, #8
 801318e:	af00      	add	r7, sp, #0
 8013190:	6078      	str	r0, [r7, #4]
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	3318      	adds	r3, #24
 8013196:	4618      	mov	r0, r3
 8013198:	f7ff ff3c 	bl	8013014 <_ZN8touchgfx9colortypeC1Ev>
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	4618      	mov	r0, r3
 80131a0:	3708      	adds	r7, #8
 80131a2:	46bd      	mov	sp, r7
 80131a4:	bd80      	pop	{r7, pc}
	...

080131a8 <_ZN10STM32F4DMAC1Ev>:
}

STM32F4DMA::STM32F4DMA()
 80131a8:	b5b0      	push	{r4, r5, r7, lr}
 80131aa:	b082      	sub	sp, #8
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80131b0:	687a      	ldr	r2, [r7, #4]
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	330c      	adds	r3, #12
 80131b6:	4619      	mov	r1, r3
 80131b8:	4610      	mov	r0, r2
 80131ba:	f7ff ff93 	bl	80130e4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80131be:	4a0e      	ldr	r2, [pc, #56]	; (80131f8 <_ZN10STM32F4DMAC1Ev+0x50>)
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	601a      	str	r2, [r3, #0]
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	f103 000c 	add.w	r0, r3, #12
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	3320      	adds	r3, #32
 80131ce:	2260      	movs	r2, #96	; 0x60
 80131d0:	4619      	mov	r1, r3
 80131d2:	f002 fd53 	bl	8015c7c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	3320      	adds	r3, #32
 80131da:	245f      	movs	r4, #95	; 0x5f
 80131dc:	461d      	mov	r5, r3
 80131de:	2c00      	cmp	r4, #0
 80131e0:	db05      	blt.n	80131ee <_ZN10STM32F4DMAC1Ev+0x46>
 80131e2:	4628      	mov	r0, r5
 80131e4:	f7ff ffd1 	bl	801318a <_ZN8touchgfx6BlitOpC1Ev>
 80131e8:	3520      	adds	r5, #32
 80131ea:	3c01      	subs	r4, #1
 80131ec:	e7f7      	b.n	80131de <_ZN10STM32F4DMAC1Ev+0x36>
{
}
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	4618      	mov	r0, r3
 80131f2:	3708      	adds	r7, #8
 80131f4:	46bd      	mov	sp, r7
 80131f6:	bdb0      	pop	{r4, r5, r7, pc}
 80131f8:	0802a6b0 	.word	0x0802a6b0

080131fc <_ZN10STM32F4DMAD1Ev>:

STM32F4DMA::~STM32F4DMA()
 80131fc:	b580      	push	{r7, lr}
 80131fe:	b082      	sub	sp, #8
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
 8013204:	4a09      	ldr	r2, [pc, #36]	; (801322c <_ZN10STM32F4DMAD1Ev+0x30>)
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 801320a:	205a      	movs	r0, #90	; 0x5a
 801320c:	f7ff fede 	bl	8012fcc <__NVIC_DisableIRQ>
STM32F4DMA::~STM32F4DMA()
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	330c      	adds	r3, #12
 8013214:	4618      	mov	r0, r3
 8013216:	f000 fb27 	bl	8013868 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	4618      	mov	r0, r3
 801321e:	f7ff ff41 	bl	80130a4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	4618      	mov	r0, r3
 8013226:	3708      	adds	r7, #8
 8013228:	46bd      	mov	sp, r7
 801322a:	bd80      	pop	{r7, pc}
 801322c:	0802a6b0 	.word	0x0802a6b0

08013230 <_ZN10STM32F4DMAD0Ev>:
STM32F4DMA::~STM32F4DMA()
 8013230:	b580      	push	{r7, lr}
 8013232:	b082      	sub	sp, #8
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
}
 8013238:	6878      	ldr	r0, [r7, #4]
 801323a:	f7ff ffdf 	bl	80131fc <_ZN10STM32F4DMAD1Ev>
 801323e:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8013242:	6878      	ldr	r0, [r7, #4]
 8013244:	f013 fbc3 	bl	80269ce <_ZdlPvj>
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	4618      	mov	r0, r3
 801324c:	3708      	adds	r7, #8
 801324e:	46bd      	mov	sp, r7
 8013250:	bd80      	pop	{r7, pc}
	...

08013254 <_ZN10STM32F4DMA10initializeEv>:

void STM32F4DMA::initialize()
{
 8013254:	b580      	push	{r7, lr}
 8013256:	b084      	sub	sp, #16
 8013258:	af00      	add	r7, sp, #0
 801325a:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801325c:	2300      	movs	r3, #0
 801325e:	60fb      	str	r3, [r7, #12]
 8013260:	4b10      	ldr	r3, [pc, #64]	; (80132a4 <_ZN10STM32F4DMA10initializeEv+0x50>)
 8013262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013264:	4a0f      	ldr	r2, [pc, #60]	; (80132a4 <_ZN10STM32F4DMA10initializeEv+0x50>)
 8013266:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801326a:	6313      	str	r3, [r2, #48]	; 0x30
 801326c:	4b0d      	ldr	r3, [pc, #52]	; (80132a4 <_ZN10STM32F4DMA10initializeEv+0x50>)
 801326e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013270:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013274:	60fb      	str	r3, [r7, #12]
 8013276:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8013278:	4b0a      	ldr	r3, [pc, #40]	; (80132a4 <_ZN10STM32F4DMA10initializeEv+0x50>)
 801327a:	691b      	ldr	r3, [r3, #16]
 801327c:	4a09      	ldr	r2, [pc, #36]	; (80132a4 <_ZN10STM32F4DMA10initializeEv+0x50>)
 801327e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013282:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8013284:	4b07      	ldr	r3, [pc, #28]	; (80132a4 <_ZN10STM32F4DMA10initializeEv+0x50>)
 8013286:	691b      	ldr	r3, [r3, #16]
 8013288:	4a06      	ldr	r2, [pc, #24]	; (80132a4 <_ZN10STM32F4DMA10initializeEv+0x50>)
 801328a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801328e:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8013290:	4b05      	ldr	r3, [pc, #20]	; (80132a8 <_ZN10STM32F4DMA10initializeEv+0x54>)
 8013292:	4a06      	ldr	r2, [pc, #24]	; (80132ac <_ZN10STM32F4DMA10initializeEv+0x58>)
 8013294:	611a      	str	r2, [r3, #16]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8013296:	205a      	movs	r0, #90	; 0x5a
 8013298:	f7ff fe7a 	bl	8012f90 <__NVIC_EnableIRQ>
}
 801329c:	bf00      	nop
 801329e:	3710      	adds	r7, #16
 80132a0:	46bd      	mov	sp, r7
 80132a2:	bd80      	pop	{r7, pc}
 80132a4:	40023800 	.word	0x40023800
 80132a8:	2000ad9c 	.word	0x2000ad9c
 80132ac:	0801316f 	.word	0x0801316f

080132b0 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F4DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b084      	sub	sp, #16
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	6078      	str	r0, [r7, #4]
 80132b8:	460b      	mov	r3, r1
 80132ba:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80132bc:	2300      	movs	r3, #0
 80132be:	60fb      	str	r3, [r7, #12]

    switch (format)
 80132c0:	78fb      	ldrb	r3, [r7, #3]
 80132c2:	2b0b      	cmp	r3, #11
 80132c4:	d826      	bhi.n	8013314 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 80132c6:	a201      	add	r2, pc, #4	; (adr r2, 80132cc <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80132c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132cc:	08013309 	.word	0x08013309
 80132d0:	08013303 	.word	0x08013303
 80132d4:	080132fd 	.word	0x080132fd
 80132d8:	08013315 	.word	0x08013315
 80132dc:	08013315 	.word	0x08013315
 80132e0:	08013315 	.word	0x08013315
 80132e4:	08013315 	.word	0x08013315
 80132e8:	0801330f 	.word	0x0801330f
 80132ec:	0801330f 	.word	0x0801330f
 80132f0:	0801330f 	.word	0x0801330f
 80132f4:	0801330f 	.word	0x0801330f
 80132f8:	0801330f 	.word	0x0801330f
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80132fc:	2300      	movs	r3, #0
 80132fe:	60fb      	str	r3, [r7, #12]
        break;
 8013300:	e00e      	b.n	8013320 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8013302:	2301      	movs	r3, #1
 8013304:	60fb      	str	r3, [r7, #12]
        break;
 8013306:	e00b      	b.n	8013320 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8013308:	2302      	movs	r3, #2
 801330a:	60fb      	str	r3, [r7, #12]
        break;
 801330c:	e008      	b.n	8013320 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 801330e:	2305      	movs	r3, #5
 8013310:	60fb      	str	r3, [r7, #12]
        break;
 8013312:	e005      	b.n	8013320 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8013314:	4b05      	ldr	r3, [pc, #20]	; (801332c <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8013316:	4a06      	ldr	r2, [pc, #24]	; (8013330 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8013318:	2165      	movs	r1, #101	; 0x65
 801331a:	4806      	ldr	r0, [pc, #24]	; (8013334 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 801331c:	f013 fc82 	bl	8026c24 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8013320:	68fb      	ldr	r3, [r7, #12]
}
 8013322:	4618      	mov	r0, r3
 8013324:	3710      	adds	r7, #16
 8013326:	46bd      	mov	sp, r7
 8013328:	bd80      	pop	{r7, pc}
 801332a:	bf00      	nop
 801332c:	08029e74 	.word	0x08029e74
 8013330:	08029e90 	.word	0x08029e90
 8013334:	08029edc 	.word	0x08029edc

08013338 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F4DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b084      	sub	sp, #16
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
 8013340:	460b      	mov	r3, r1
 8013342:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8013344:	2300      	movs	r3, #0
 8013346:	60fb      	str	r3, [r7, #12]

    switch (format)
 8013348:	78fb      	ldrb	r3, [r7, #3]
 801334a:	2b0a      	cmp	r3, #10
 801334c:	d821      	bhi.n	8013392 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 801334e:	a201      	add	r2, pc, #4	; (adr r2, 8013354 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8013350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013354:	0801338d 	.word	0x0801338d
 8013358:	08013387 	.word	0x08013387
 801335c:	08013381 	.word	0x08013381
 8013360:	08013393 	.word	0x08013393
 8013364:	08013393 	.word	0x08013393
 8013368:	08013393 	.word	0x08013393
 801336c:	08013393 	.word	0x08013393
 8013370:	08013387 	.word	0x08013387
 8013374:	08013387 	.word	0x08013387
 8013378:	08013387 	.word	0x08013387
 801337c:	08013387 	.word	0x08013387
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8013380:	2300      	movs	r3, #0
 8013382:	60fb      	str	r3, [r7, #12]
        break;
 8013384:	e00b      	b.n	801339e <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8013386:	2301      	movs	r3, #1
 8013388:	60fb      	str	r3, [r7, #12]
        break;
 801338a:	e008      	b.n	801339e <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 801338c:	2302      	movs	r3, #2
 801338e:	60fb      	str	r3, [r7, #12]
        break;
 8013390:	e005      	b.n	801339e <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8013392:	4b05      	ldr	r3, [pc, #20]	; (80133a8 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8013394:	4a05      	ldr	r2, [pc, #20]	; (80133ac <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8013396:	2186      	movs	r1, #134	; 0x86
 8013398:	4805      	ldr	r0, [pc, #20]	; (80133b0 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 801339a:	f013 fc43 	bl	8026c24 <__assert_func>
        break;
    }

    return dma2dColorMode;
 801339e:	68fb      	ldr	r3, [r7, #12]
}
 80133a0:	4618      	mov	r0, r3
 80133a2:	3710      	adds	r7, #16
 80133a4:	46bd      	mov	sp, r7
 80133a6:	bd80      	pop	{r7, pc}
 80133a8:	08029e74 	.word	0x08029e74
 80133ac:	08029f08 	.word	0x08029f08
 80133b0:	08029edc 	.word	0x08029edc

080133b4 <_ZN10STM32F4DMA11getBlitCapsEv>:

BlitOperations STM32F4DMA::getBlitCaps()
{
 80133b4:	b480      	push	{r7}
 80133b6:	b083      	sub	sp, #12
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 80133bc:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 80133c0:	4618      	mov	r0, r3
 80133c2:	370c      	adds	r7, #12
 80133c4:	46bd      	mov	sp, r7
 80133c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ca:	4770      	bx	lr

080133cc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32F4DMA::setupDataCopy(const BlitOp& blitOp)
{
 80133cc:	b590      	push	{r4, r7, lr}
 80133ce:	b089      	sub	sp, #36	; 0x24
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	6078      	str	r0, [r7, #4]
 80133d4:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80133d6:	683b      	ldr	r3, [r7, #0]
 80133d8:	7f5b      	ldrb	r3, [r3, #29]
 80133da:	4619      	mov	r1, r3
 80133dc:	6878      	ldr	r0, [r7, #4]
 80133de:	f7ff ff67 	bl	80132b0 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80133e2:	61f8      	str	r0, [r7, #28]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80133e4:	683b      	ldr	r3, [r7, #0]
 80133e6:	7f9b      	ldrb	r3, [r3, #30]
 80133e8:	4619      	mov	r1, r3
 80133ea:	6878      	ldr	r0, [r7, #4]
 80133ec:	f7ff ff60 	bl	80132b0 <_ZN10STM32F4DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80133f0:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80133f2:	683b      	ldr	r3, [r7, #0]
 80133f4:	7f9b      	ldrb	r3, [r3, #30]
 80133f6:	4619      	mov	r1, r3
 80133f8:	6878      	ldr	r0, [r7, #4]
 80133fa:	f7ff ff9d 	bl	8013338 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80133fe:	6178      	str	r0, [r7, #20]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8013400:	683b      	ldr	r3, [r7, #0]
 8013402:	8adb      	ldrh	r3, [r3, #22]
 8013404:	461a      	mov	r2, r3
 8013406:	683b      	ldr	r3, [r7, #0]
 8013408:	8a1b      	ldrh	r3, [r3, #16]
 801340a:	1ad2      	subs	r2, r2, r3
 801340c:	4b8e      	ldr	r3, [pc, #568]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 801340e:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8013410:	683b      	ldr	r3, [r7, #0]
 8013412:	8adb      	ldrh	r3, [r3, #22]
 8013414:	461a      	mov	r2, r3
 8013416:	683b      	ldr	r3, [r7, #0]
 8013418:	8a1b      	ldrh	r3, [r3, #16]
 801341a:	1ad2      	subs	r2, r2, r3
 801341c:	4b8a      	ldr	r3, [pc, #552]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 801341e:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8013420:	683b      	ldr	r3, [r7, #0]
 8013422:	8a9b      	ldrh	r3, [r3, #20]
 8013424:	461a      	mov	r2, r3
 8013426:	683b      	ldr	r3, [r7, #0]
 8013428:	8a1b      	ldrh	r3, [r3, #16]
 801342a:	1ad2      	subs	r2, r2, r3
 801342c:	4b86      	ldr	r3, [pc, #536]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 801342e:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8013430:	4a85      	ldr	r2, [pc, #532]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8013432:	697b      	ldr	r3, [r7, #20]
 8013434:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8013436:	683b      	ldr	r3, [r7, #0]
 8013438:	8a5b      	ldrh	r3, [r3, #18]
 801343a:	461a      	mov	r2, r3
 801343c:	683b      	ldr	r3, [r7, #0]
 801343e:	8a1b      	ldrh	r3, [r3, #16]
 8013440:	041b      	lsls	r3, r3, #16
 8013442:	431a      	orrs	r2, r3
 8013444:	4b80      	ldr	r3, [pc, #512]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8013446:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8013448:	683b      	ldr	r3, [r7, #0]
 801344a:	68da      	ldr	r2, [r3, #12]
 801344c:	4b7e      	ldr	r3, [pc, #504]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 801344e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8013450:	683b      	ldr	r3, [r7, #0]
 8013452:	685a      	ldr	r2, [r3, #4]
 8013454:	4b7c      	ldr	r3, [pc, #496]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8013456:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8013458:	683b      	ldr	r3, [r7, #0]
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013460:	d047      	beq.n	80134f2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
 8013462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013466:	f200 80f9 	bhi.w	801365c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
 801346a:	2b80      	cmp	r3, #128	; 0x80
 801346c:	d00e      	beq.n	801348c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
 801346e:	2b80      	cmp	r3, #128	; 0x80
 8013470:	f200 80f4 	bhi.w	801365c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
 8013474:	2b40      	cmp	r3, #64	; 0x40
 8013476:	f000 80d2 	beq.w	801361e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x252>
 801347a:	2b40      	cmp	r3, #64	; 0x40
 801347c:	f200 80ee 	bhi.w	801365c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
 8013480:	2b04      	cmp	r3, #4
 8013482:	d069      	beq.n	8013558 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18c>
 8013484:	2b20      	cmp	r3, #32
 8013486:	f000 80ca 	beq.w	801361e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x252>
 801348a:	e0e7      	b.n	801365c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801348c:	683b      	ldr	r3, [r7, #0]
 801348e:	7f1b      	ldrb	r3, [r3, #28]
 8013490:	061b      	lsls	r3, r3, #24
 8013492:	4a6d      	ldr	r2, [pc, #436]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8013494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013498:	f043 030a 	orr.w	r3, r3, #10
 801349c:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 801349e:	683b      	ldr	r3, [r7, #0]
 80134a0:	3318      	adds	r3, #24
 80134a2:	4618      	mov	r0, r3
 80134a4:	f7ff fdc4 	bl	8013030 <_ZNK8touchgfx9colortypecvmEv>
 80134a8:	4603      	mov	r3, r0
 80134aa:	021b      	lsls	r3, r3, #8
 80134ac:	f403 0478 	and.w	r4, r3, #16252928	; 0xf80000
 80134b0:	683b      	ldr	r3, [r7, #0]
 80134b2:	3318      	adds	r3, #24
 80134b4:	4618      	mov	r0, r3
 80134b6:	f7ff fdbb 	bl	8013030 <_ZNK8touchgfx9colortypecvmEv>
 80134ba:	4603      	mov	r3, r0
 80134bc:	015b      	lsls	r3, r3, #5
 80134be:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 80134c2:	431c      	orrs	r4, r3
 80134c4:	683b      	ldr	r3, [r7, #0]
 80134c6:	3318      	adds	r3, #24
 80134c8:	4618      	mov	r0, r3
 80134ca:	f7ff fdb1 	bl	8013030 <_ZNK8touchgfx9colortypecvmEv>
 80134ce:	4603      	mov	r3, r0
 80134d0:	00db      	lsls	r3, r3, #3
 80134d2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80134d6:	4a5c      	ldr	r2, [pc, #368]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80134d8:	4323      	orrs	r3, r4
 80134da:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80134dc:	4a5a      	ldr	r2, [pc, #360]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80134de:	69bb      	ldr	r3, [r7, #24]
 80134e0:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80134e2:	683b      	ldr	r3, [r7, #0]
 80134e4:	68da      	ldr	r2, [r3, #12]
 80134e6:	4b58      	ldr	r3, [pc, #352]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80134e8:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80134ea:	4b57      	ldr	r3, [pc, #348]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80134ec:	4a57      	ldr	r2, [pc, #348]	; (801364c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>)
 80134ee:	601a      	str	r2, [r3, #0]
        break;
 80134f0:	e0f7      	b.n	80136e2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x316>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80134f2:	683b      	ldr	r3, [r7, #0]
 80134f4:	7f1b      	ldrb	r3, [r3, #28]
 80134f6:	061b      	lsls	r3, r3, #24
 80134f8:	4a53      	ldr	r2, [pc, #332]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80134fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80134fe:	f043 0309 	orr.w	r3, r3, #9
 8013502:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 8013504:	683b      	ldr	r3, [r7, #0]
 8013506:	3318      	adds	r3, #24
 8013508:	4618      	mov	r0, r3
 801350a:	f7ff fd91 	bl	8013030 <_ZNK8touchgfx9colortypecvmEv>
 801350e:	4603      	mov	r3, r0
 8013510:	021b      	lsls	r3, r3, #8
 8013512:	f403 0478 	and.w	r4, r3, #16252928	; 0xf80000
 8013516:	683b      	ldr	r3, [r7, #0]
 8013518:	3318      	adds	r3, #24
 801351a:	4618      	mov	r0, r3
 801351c:	f7ff fd88 	bl	8013030 <_ZNK8touchgfx9colortypecvmEv>
 8013520:	4603      	mov	r3, r0
 8013522:	015b      	lsls	r3, r3, #5
 8013524:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 8013528:	431c      	orrs	r4, r3
 801352a:	683b      	ldr	r3, [r7, #0]
 801352c:	3318      	adds	r3, #24
 801352e:	4618      	mov	r0, r3
 8013530:	f7ff fd7e 	bl	8013030 <_ZNK8touchgfx9colortypecvmEv>
 8013534:	4603      	mov	r3, r0
 8013536:	00db      	lsls	r3, r3, #3
 8013538:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801353c:	4a42      	ldr	r2, [pc, #264]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 801353e:	4323      	orrs	r3, r4
 8013540:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8013542:	4a41      	ldr	r2, [pc, #260]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8013544:	69bb      	ldr	r3, [r7, #24]
 8013546:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8013548:	683b      	ldr	r3, [r7, #0]
 801354a:	68da      	ldr	r2, [r3, #12]
 801354c:	4b3e      	ldr	r3, [pc, #248]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 801354e:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8013550:	4b3d      	ldr	r3, [pc, #244]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8013552:	4a3e      	ldr	r2, [pc, #248]	; (801364c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>)
 8013554:	601a      	str	r2, [r3, #0]
        break;
 8013556:	e0c4      	b.n	80136e2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x316>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8013558:	683b      	ldr	r3, [r7, #0]
 801355a:	7f1b      	ldrb	r3, [r3, #28]
 801355c:	061b      	lsls	r3, r3, #24
 801355e:	461a      	mov	r2, r3
 8013560:	69fb      	ldr	r3, [r7, #28]
 8013562:	4313      	orrs	r3, r2
 8013564:	4a38      	ldr	r2, [pc, #224]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8013566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801356a:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801356c:	4a36      	ldr	r2, [pc, #216]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 801356e:	69bb      	ldr	r3, [r7, #24]
 8013570:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8013572:	683b      	ldr	r3, [r7, #0]
 8013574:	68da      	ldr	r2, [r3, #12]
 8013576:	4b34      	ldr	r3, [pc, #208]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8013578:	615a      	str	r2, [r3, #20]

        if (blitOp.srcFormat == Bitmap::L8)
 801357a:	683b      	ldr	r3, [r7, #0]
 801357c:	7f5b      	ldrb	r3, [r3, #29]
 801357e:	2b0b      	cmp	r3, #11
 8013580:	d149      	bne.n	8013616 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x24a>
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8013582:	683b      	ldr	r3, [r7, #0]
 8013584:	689b      	ldr	r3, [r3, #8]
 8013586:	613b      	str	r3, [r7, #16]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8013588:	693b      	ldr	r3, [r7, #16]
 801358a:	1d1a      	adds	r2, r3, #4
 801358c:	4b2e      	ldr	r3, [pc, #184]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 801358e:	62da      	str	r2, [r3, #44]	; 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 8013590:	693b      	ldr	r3, [r7, #16]
 8013592:	881b      	ldrh	r3, [r3, #0]
 8013594:	b2db      	uxtb	r3, r3
 8013596:	2b00      	cmp	r3, #0
 8013598:	d002      	beq.n	80135a0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d4>
 801359a:	2b01      	cmp	r3, #1
 801359c:	d00f      	beq.n	80135be <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f2>
 801359e:	e01e      	b.n	80135de <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x212>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80135a0:	4b29      	ldr	r3, [pc, #164]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80135a2:	69db      	ldr	r3, [r3, #28]
 80135a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80135a8:	f023 0310 	bic.w	r3, r3, #16
 80135ac:	693a      	ldr	r2, [r7, #16]
 80135ae:	8852      	ldrh	r2, [r2, #2]
 80135b0:	3a01      	subs	r2, #1
 80135b2:	0212      	lsls	r2, r2, #8
 80135b4:	4611      	mov	r1, r2
 80135b6:	4a24      	ldr	r2, [pc, #144]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80135b8:	430b      	orrs	r3, r1
 80135ba:	61d3      	str	r3, [r2, #28]
                break;
 80135bc:	e015      	b.n	80135ea <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21e>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80135be:	4b22      	ldr	r3, [pc, #136]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80135c0:	69db      	ldr	r3, [r3, #28]
 80135c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80135c6:	f023 0310 	bic.w	r3, r3, #16
 80135ca:	693a      	ldr	r2, [r7, #16]
 80135cc:	8852      	ldrh	r2, [r2, #2]
 80135ce:	3a01      	subs	r2, #1
 80135d0:	0212      	lsls	r2, r2, #8
 80135d2:	4313      	orrs	r3, r2
 80135d4:	4a1c      	ldr	r2, [pc, #112]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80135d6:	f043 0310 	orr.w	r3, r3, #16
 80135da:	61d3      	str	r3, [r2, #28]
                break;
 80135dc:	e005      	b.n	80135ea <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21e>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 80135de:	4b1c      	ldr	r3, [pc, #112]	; (8013650 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x284>)
 80135e0:	4a1c      	ldr	r2, [pc, #112]	; (8013654 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80135e2:	21fc      	movs	r1, #252	; 0xfc
 80135e4:	481c      	ldr	r0, [pc, #112]	; (8013658 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80135e6:	f013 fb1d 	bl	8026c24 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80135ea:	4b17      	ldr	r3, [pc, #92]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80135ec:	69db      	ldr	r3, [r3, #28]
 80135ee:	4a16      	ldr	r2, [pc, #88]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80135f0:	f043 0320 	orr.w	r3, r3, #32
 80135f4:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80135f6:	4b14      	ldr	r3, [pc, #80]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 80135f8:	69db      	ldr	r3, [r3, #28]
 80135fa:	f003 0320 	and.w	r3, r3, #32
 80135fe:	2b00      	cmp	r3, #0
 8013600:	bf14      	ite	ne
 8013602:	2301      	movne	r3, #1
 8013604:	2300      	moveq	r3, #0
 8013606:	b2db      	uxtb	r3, r3
 8013608:	2b00      	cmp	r3, #0
 801360a:	d001      	beq.n	8013610 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
            {
                __NOP();
 801360c:	bf00      	nop
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 801360e:	e7f2      	b.n	80135f6 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22a>
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8013610:	4b0d      	ldr	r3, [pc, #52]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8013612:	2210      	movs	r2, #16
 8013614:	609a      	str	r2, [r3, #8]
        }

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8013616:	4b0c      	ldr	r3, [pc, #48]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8013618:	4a0c      	ldr	r2, [pc, #48]	; (801364c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>)
 801361a:	601a      	str	r2, [r3, #0]
        break;
 801361c:	e061      	b.n	80136e2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x316>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801361e:	683b      	ldr	r3, [r7, #0]
 8013620:	7f1b      	ldrb	r3, [r3, #28]
 8013622:	061b      	lsls	r3, r3, #24
 8013624:	461a      	mov	r2, r3
 8013626:	69fb      	ldr	r3, [r7, #28]
 8013628:	4313      	orrs	r3, r2
 801362a:	4a07      	ldr	r2, [pc, #28]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 801362c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013630:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8013632:	4a05      	ldr	r2, [pc, #20]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8013634:	69bb      	ldr	r3, [r7, #24]
 8013636:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8013638:	683b      	ldr	r3, [r7, #0]
 801363a:	68da      	ldr	r2, [r3, #12]
 801363c:	4b02      	ldr	r3, [pc, #8]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 801363e:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8013640:	4b01      	ldr	r3, [pc, #4]	; (8013648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>)
 8013642:	4a02      	ldr	r2, [pc, #8]	; (801364c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>)
 8013644:	601a      	str	r2, [r3, #0]
        break;
 8013646:	e04c      	b.n	80136e2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x316>
 8013648:	4002b000 	.word	0x4002b000
 801364c:	00020201 	.word	0x00020201
 8013650:	08029f58 	.word	0x08029f58
 8013654:	08029f74 	.word	0x08029f74
 8013658:	08029edc 	.word	0x08029edc
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801365c:	683b      	ldr	r3, [r7, #0]
 801365e:	7f1b      	ldrb	r3, [r3, #28]
 8013660:	061b      	lsls	r3, r3, #24
 8013662:	461a      	mov	r2, r3
 8013664:	69fb      	ldr	r3, [r7, #28]
 8013666:	4313      	orrs	r3, r2
 8013668:	4a20      	ldr	r2, [pc, #128]	; (80136ec <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 801366a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801366e:	61d3      	str	r3, [r2, #28]

        if (blitOp.srcFormat == Bitmap::L8)
 8013670:	683b      	ldr	r3, [r7, #0]
 8013672:	7f5b      	ldrb	r3, [r3, #29]
 8013674:	2b0b      	cmp	r3, #11
 8013676:	d12f      	bne.n	80136d8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30c>
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8013678:	683b      	ldr	r3, [r7, #0]
 801367a:	689b      	ldr	r3, [r3, #8]
 801367c:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	1d1a      	adds	r2, r3, #4
 8013682:	4b1a      	ldr	r3, [pc, #104]	; (80136ec <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 8013684:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Write foreground CLUT size and CLUT color mode */
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8013686:	4b19      	ldr	r3, [pc, #100]	; (80136ec <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 8013688:	69db      	ldr	r3, [r3, #28]
 801368a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801368e:	f023 0310 	bic.w	r3, r3, #16
 8013692:	68fa      	ldr	r2, [r7, #12]
 8013694:	8852      	ldrh	r2, [r2, #2]
 8013696:	3a01      	subs	r2, #1
 8013698:	0212      	lsls	r2, r2, #8
 801369a:	4313      	orrs	r3, r2
 801369c:	4a13      	ldr	r2, [pc, #76]	; (80136ec <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 801369e:	f043 0310 	orr.w	r3, r3, #16
 80136a2:	61d3      	str	r3, [r2, #28]

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80136a4:	4b11      	ldr	r3, [pc, #68]	; (80136ec <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 80136a6:	69db      	ldr	r3, [r3, #28]
 80136a8:	4a10      	ldr	r2, [pc, #64]	; (80136ec <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 80136aa:	f043 0320 	orr.w	r3, r3, #32
 80136ae:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80136b0:	4b0e      	ldr	r3, [pc, #56]	; (80136ec <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 80136b2:	69db      	ldr	r3, [r3, #28]
 80136b4:	f003 0320 	and.w	r3, r3, #32
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	bf14      	ite	ne
 80136bc:	2301      	movne	r3, #1
 80136be:	2300      	moveq	r3, #0
 80136c0:	b2db      	uxtb	r3, r3
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d001      	beq.n	80136ca <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2fe>
            {
                __NOP();
 80136c6:	bf00      	nop
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80136c8:	e7f2      	b.n	80136b0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e4>
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80136ca:	4b08      	ldr	r3, [pc, #32]	; (80136ec <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 80136cc:	2210      	movs	r2, #16
 80136ce:	609a      	str	r2, [r3, #8]
            /* Start DMA2D */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80136d0:	4b06      	ldr	r3, [pc, #24]	; (80136ec <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 80136d2:	4a07      	ldr	r2, [pc, #28]	; (80136f0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x324>)
 80136d4:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 80136d6:	e003      	b.n	80136e0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x314>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80136d8:	4b04      	ldr	r3, [pc, #16]	; (80136ec <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x320>)
 80136da:	f240 2201 	movw	r2, #513	; 0x201
 80136de:	601a      	str	r2, [r3, #0]
        break;
 80136e0:	bf00      	nop
    }
}
 80136e2:	bf00      	nop
 80136e4:	3724      	adds	r7, #36	; 0x24
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bd90      	pop	{r4, r7, pc}
 80136ea:	bf00      	nop
 80136ec:	4002b000 	.word	0x4002b000
 80136f0:	00010201 	.word	0x00010201

080136f4 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32F4DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32F4DMA::setupDataFill(const BlitOp& blitOp)
{
 80136f4:	b590      	push	{r4, r7, lr}
 80136f6:	b085      	sub	sp, #20
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]
 80136fc:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80136fe:	683b      	ldr	r3, [r7, #0]
 8013700:	7f9b      	ldrb	r3, [r3, #30]
 8013702:	4619      	mov	r1, r3
 8013704:	6878      	ldr	r0, [r7, #4]
 8013706:	f7ff fe17 	bl	8013338 <_ZN10STM32F4DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801370a:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 801370c:	4a53      	ldr	r2, [pc, #332]	; (801385c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8013712:	683b      	ldr	r3, [r7, #0]
 8013714:	8a5b      	ldrh	r3, [r3, #18]
 8013716:	461a      	mov	r2, r3
 8013718:	683b      	ldr	r3, [r7, #0]
 801371a:	8a1b      	ldrh	r3, [r3, #16]
 801371c:	041b      	lsls	r3, r3, #16
 801371e:	431a      	orrs	r2, r3
 8013720:	4b4e      	ldr	r3, [pc, #312]	; (801385c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8013722:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8013724:	683b      	ldr	r3, [r7, #0]
 8013726:	68da      	ldr	r2, [r3, #12]
 8013728:	4b4c      	ldr	r3, [pc, #304]	; (801385c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 801372a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 801372c:	683b      	ldr	r3, [r7, #0]
 801372e:	8adb      	ldrh	r3, [r3, #22]
 8013730:	461a      	mov	r2, r3
 8013732:	683b      	ldr	r3, [r7, #0]
 8013734:	8a1b      	ldrh	r3, [r3, #16]
 8013736:	1ad2      	subs	r2, r2, r3
 8013738:	4b48      	ldr	r3, [pc, #288]	; (801385c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 801373a:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 801373c:	683b      	ldr	r3, [r7, #0]
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	2b08      	cmp	r3, #8
 8013742:	d14d      	bne.n	80137e0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xec>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8013744:	683b      	ldr	r3, [r7, #0]
 8013746:	8adb      	ldrh	r3, [r3, #22]
 8013748:	461a      	mov	r2, r3
 801374a:	683b      	ldr	r3, [r7, #0]
 801374c:	8a1b      	ldrh	r3, [r3, #16]
 801374e:	1ad2      	subs	r2, r2, r3
 8013750:	4b42      	ldr	r3, [pc, #264]	; (801385c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8013752:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8013754:	683b      	ldr	r3, [r7, #0]
 8013756:	8adb      	ldrh	r3, [r3, #22]
 8013758:	461a      	mov	r2, r3
 801375a:	683b      	ldr	r3, [r7, #0]
 801375c:	8a1b      	ldrh	r3, [r3, #16]
 801375e:	1ad2      	subs	r2, r2, r3
 8013760:	4b3e      	ldr	r3, [pc, #248]	; (801385c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8013762:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8013764:	4a3d      	ldr	r2, [pc, #244]	; (801385c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 801376a:	683b      	ldr	r3, [r7, #0]
 801376c:	7f1b      	ldrb	r3, [r3, #28]
 801376e:	061b      	lsls	r3, r3, #24
 8013770:	4a3a      	ldr	r2, [pc, #232]	; (801385c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8013772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013776:	f043 0309 	orr.w	r3, r3, #9
 801377a:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3)) & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 801377c:	683b      	ldr	r3, [r7, #0]
 801377e:	7f1b      	ldrb	r3, [r3, #28]
 8013780:	061b      	lsls	r3, r3, #24
 8013782:	461c      	mov	r4, r3
 8013784:	683b      	ldr	r3, [r7, #0]
 8013786:	3318      	adds	r3, #24
 8013788:	4618      	mov	r0, r3
 801378a:	f7ff fc51 	bl	8013030 <_ZNK8touchgfx9colortypecvmEv>
 801378e:	4603      	mov	r3, r0
 8013790:	021b      	lsls	r3, r3, #8
 8013792:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 8013796:	431c      	orrs	r4, r3
 8013798:	683b      	ldr	r3, [r7, #0]
 801379a:	3318      	adds	r3, #24
 801379c:	4618      	mov	r0, r3
 801379e:	f7ff fc47 	bl	8013030 <_ZNK8touchgfx9colortypecvmEv>
 80137a2:	4603      	mov	r3, r0
 80137a4:	015b      	lsls	r3, r3, #5
 80137a6:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 80137aa:	431c      	orrs	r4, r3
 80137ac:	683b      	ldr	r3, [r7, #0]
 80137ae:	3318      	adds	r3, #24
 80137b0:	4618      	mov	r0, r3
 80137b2:	f7ff fc3d 	bl	8013030 <_ZNK8touchgfx9colortypecvmEv>
 80137b6:	4603      	mov	r3, r0
 80137b8:	00db      	lsls	r3, r3, #3
 80137ba:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80137be:	4323      	orrs	r3, r4
 80137c0:	4a26      	ldr	r2, [pc, #152]	; (801385c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 80137c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80137c6:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80137c8:	683b      	ldr	r3, [r7, #0]
 80137ca:	68da      	ldr	r2, [r3, #12]
 80137cc:	4b23      	ldr	r3, [pc, #140]	; (801385c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 80137ce:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80137d0:	683b      	ldr	r3, [r7, #0]
 80137d2:	68da      	ldr	r2, [r3, #12]
 80137d4:	4b21      	ldr	r3, [pc, #132]	; (801385c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 80137d6:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80137d8:	4b20      	ldr	r3, [pc, #128]	; (801385c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 80137da:	4a21      	ldr	r2, [pc, #132]	; (8013860 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x16c>)
 80137dc:	601a      	str	r2, [r3, #0]
        }

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 80137de:	e039      	b.n	8013854 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x160>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80137e0:	4a1e      	ldr	r2, [pc, #120]	; (801385c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80137e6:	4b1d      	ldr	r3, [pc, #116]	; (801385c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 80137e8:	2200      	movs	r2, #0
 80137ea:	611a      	str	r2, [r3, #16]
        if (blitOp.dstFormat == Bitmap::RGB565)
 80137ec:	683b      	ldr	r3, [r7, #0]
 80137ee:	7f9b      	ldrb	r3, [r3, #30]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d108      	bne.n	8013806 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x112>
            WRITE_REG(DMA2D->OCOLR, blitOp.color);
 80137f4:	683b      	ldr	r3, [r7, #0]
 80137f6:	3318      	adds	r3, #24
 80137f8:	4c18      	ldr	r4, [pc, #96]	; (801385c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 80137fa:	4618      	mov	r0, r3
 80137fc:	f7ff fc18 	bl	8013030 <_ZNK8touchgfx9colortypecvmEv>
 8013800:	4603      	mov	r3, r0
 8013802:	63a3      	str	r3, [r4, #56]	; 0x38
 8013804:	e023      	b.n	801384e <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x15a>
            WRITE_REG(DMA2D->OCOLR, (blitOp.alpha << 24) | (blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 8013806:	683b      	ldr	r3, [r7, #0]
 8013808:	7f1b      	ldrb	r3, [r3, #28]
 801380a:	061b      	lsls	r3, r3, #24
 801380c:	461c      	mov	r4, r3
 801380e:	683b      	ldr	r3, [r7, #0]
 8013810:	3318      	adds	r3, #24
 8013812:	4618      	mov	r0, r3
 8013814:	f7ff fc0c 	bl	8013030 <_ZNK8touchgfx9colortypecvmEv>
 8013818:	4603      	mov	r3, r0
 801381a:	021b      	lsls	r3, r3, #8
 801381c:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 8013820:	431c      	orrs	r4, r3
 8013822:	683b      	ldr	r3, [r7, #0]
 8013824:	3318      	adds	r3, #24
 8013826:	4618      	mov	r0, r3
 8013828:	f7ff fc02 	bl	8013030 <_ZNK8touchgfx9colortypecvmEv>
 801382c:	4603      	mov	r3, r0
 801382e:	015b      	lsls	r3, r3, #5
 8013830:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 8013834:	431c      	orrs	r4, r3
 8013836:	683b      	ldr	r3, [r7, #0]
 8013838:	3318      	adds	r3, #24
 801383a:	4618      	mov	r0, r3
 801383c:	f7ff fbf8 	bl	8013030 <_ZNK8touchgfx9colortypecvmEv>
 8013840:	4603      	mov	r3, r0
 8013842:	00db      	lsls	r3, r3, #3
 8013844:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8013848:	4a04      	ldr	r2, [pc, #16]	; (801385c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 801384a:	4323      	orrs	r3, r4
 801384c:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 801384e:	4b03      	ldr	r3, [pc, #12]	; (801385c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x168>)
 8013850:	4a04      	ldr	r2, [pc, #16]	; (8013864 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x170>)
 8013852:	601a      	str	r2, [r3, #0]
}
 8013854:	bf00      	nop
 8013856:	3714      	adds	r7, #20
 8013858:	46bd      	mov	sp, r7
 801385a:	bd90      	pop	{r4, r7, pc}
 801385c:	4002b000 	.word	0x4002b000
 8013860:	00020201 	.word	0x00020201
 8013864:	00030201 	.word	0x00030201

08013868 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8013868:	b580      	push	{r7, lr}
 801386a:	b082      	sub	sp, #8
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
 8013870:	4a05      	ldr	r2, [pc, #20]	; (8013888 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	601a      	str	r2, [r3, #0]
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	4618      	mov	r0, r3
 801387a:	f7ff fbe5 	bl	8013048 <_ZN8touchgfx9DMA_QueueD1Ev>
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	4618      	mov	r0, r3
 8013882:	3708      	adds	r7, #8
 8013884:	46bd      	mov	sp, r7
 8013886:	bd80      	pop	{r7, pc}
 8013888:	0802b538 	.word	0x0802b538

0801388c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 801388c:	b580      	push	{r7, lr}
 801388e:	b082      	sub	sp, #8
 8013890:	af00      	add	r7, sp, #0
 8013892:	6078      	str	r0, [r7, #4]
 8013894:	6878      	ldr	r0, [r7, #4]
 8013896:	f7ff ffe7 	bl	8013868 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801389a:	2114      	movs	r1, #20
 801389c:	6878      	ldr	r0, [r7, #4]
 801389e:	f013 f896 	bl	80269ce <_ZdlPvj>
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	4618      	mov	r0, r3
 80138a6:	3708      	adds	r7, #8
 80138a8:	46bd      	mov	sp, r7
 80138aa:	bd80      	pop	{r7, pc}

080138ac <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 80138ac:	b480      	push	{r7}
 80138ae:	b083      	sub	sp, #12
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 80138b4:	4a04      	ldr	r2, [pc, #16]	; (80138c8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	6013      	str	r3, [r2, #0]
    }
 80138ba:	bf00      	nop
 80138bc:	370c      	adds	r7, #12
 80138be:	46bd      	mov	sp, r7
 80138c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c4:	4770      	bx	lr
 80138c6:	bf00      	nop
 80138c8:	2000a14c 	.word	0x2000a14c

080138cc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80138cc:	b480      	push	{r7}
 80138ce:	b085      	sub	sp, #20
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	60f8      	str	r0, [r7, #12]
 80138d4:	60b9      	str	r1, [r7, #8]
 80138d6:	607a      	str	r2, [r7, #4]
 80138d8:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80138da:	4a0b      	ldr	r2, [pc, #44]	; (8013908 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	601a      	str	r2, [r3, #0]
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	68ba      	ldr	r2, [r7, #8]
 80138e4:	605a      	str	r2, [r3, #4]
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	687a      	ldr	r2, [r7, #4]
 80138ea:	609a      	str	r2, [r3, #8]
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	683a      	ldr	r2, [r7, #0]
 80138f0:	60da      	str	r2, [r3, #12]
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	69ba      	ldr	r2, [r7, #24]
 80138f6:	611a      	str	r2, [r3, #16]
    {
    }
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	4618      	mov	r0, r3
 80138fc:	3714      	adds	r7, #20
 80138fe:	46bd      	mov	sp, r7
 8013900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013904:	4770      	bx	lr
 8013906:	bf00      	nop
 8013908:	0802a7e8 	.word	0x0802a7e8

0801390c <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 801390c:	b480      	push	{r7}
 801390e:	b083      	sub	sp, #12
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
    {
 8013914:	4a04      	ldr	r2, [pc, #16]	; (8013928 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	601a      	str	r2, [r3, #0]
    }
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	4618      	mov	r0, r3
 801391e:	370c      	adds	r7, #12
 8013920:	46bd      	mov	sp, r7
 8013922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013926:	4770      	bx	lr
 8013928:	0802a7e8 	.word	0x0802a7e8

0801392c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 801392c:	b580      	push	{r7, lr}
 801392e:	b082      	sub	sp, #8
 8013930:	af00      	add	r7, sp, #0
 8013932:	6078      	str	r0, [r7, #4]
    }
 8013934:	6878      	ldr	r0, [r7, #4]
 8013936:	f7ff ffe9 	bl	801390c <_ZN8touchgfx7MVPHeapD1Ev>
 801393a:	2114      	movs	r1, #20
 801393c:	6878      	ldr	r0, [r7, #4]
 801393e:	f013 f846 	bl	80269ce <_ZdlPvj>
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	4618      	mov	r0, r3
 8013946:	3708      	adds	r7, #8
 8013948:	46bd      	mov	sp, r7
 801394a:	bd80      	pop	{r7, pc}

0801394c <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 801394c:	b480      	push	{r7}
 801394e:	b083      	sub	sp, #12
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
    {
 8013954:	4a04      	ldr	r2, [pc, #16]	; (8013968 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	601a      	str	r2, [r3, #0]
    }
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	4618      	mov	r0, r3
 801395e:	370c      	adds	r7, #12
 8013960:	46bd      	mov	sp, r7
 8013962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013966:	4770      	bx	lr
 8013968:	0802ba0c 	.word	0x0802ba0c

0801396c <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 801396c:	b580      	push	{r7, lr}
 801396e:	b082      	sub	sp, #8
 8013970:	af00      	add	r7, sp, #0
 8013972:	6078      	str	r0, [r7, #4]
    }
 8013974:	6878      	ldr	r0, [r7, #4]
 8013976:	f7ff ffe9 	bl	801394c <_ZN8touchgfx3LCDD1Ev>
 801397a:	2108      	movs	r1, #8
 801397c:	6878      	ldr	r0, [r7, #4]
 801397e:	f013 f826 	bl	80269ce <_ZdlPvj>
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	4618      	mov	r0, r3
 8013986:	3708      	adds	r7, #8
 8013988:	46bd      	mov	sp, r7
 801398a:	bd80      	pop	{r7, pc}

0801398c <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 801398c:	b480      	push	{r7}
 801398e:	b083      	sub	sp, #12
 8013990:	af00      	add	r7, sp, #0
 8013992:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	2200      	movs	r2, #0
 8013998:	801a      	strh	r2, [r3, #0]
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	2200      	movs	r2, #0
 801399e:	805a      	strh	r2, [r3, #2]
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	2200      	movs	r2, #0
 80139a4:	809a      	strh	r2, [r3, #4]
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	2200      	movs	r2, #0
 80139aa:	80da      	strh	r2, [r3, #6]
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	2200      	movs	r2, #0
 80139b0:	811a      	strh	r2, [r3, #8]
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	2200      	movs	r2, #0
 80139b6:	815a      	strh	r2, [r3, #10]
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	2200      	movs	r2, #0
 80139bc:	819a      	strh	r2, [r3, #12]
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	2200      	movs	r2, #0
 80139c2:	739a      	strb	r2, [r3, #14]
        {
        }
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	4618      	mov	r0, r3
 80139c8:	370c      	adds	r7, #12
 80139ca:	46bd      	mov	sp, r7
 80139cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d0:	4770      	bx	lr

080139d2 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 80139d2:	b580      	push	{r7, lr}
 80139d4:	b082      	sub	sp, #8
 80139d6:	af00      	add	r7, sp, #0
 80139d8:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	4618      	mov	r0, r3
 80139de:	f7ff ffd5 	bl	801398c <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	2200      	movs	r2, #0
 80139e6:	611a      	str	r2, [r3, #16]
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	2200      	movs	r2, #0
 80139ec:	829a      	strh	r2, [r3, #20]
    {
    }
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	4618      	mov	r0, r3
 80139f2:	3708      	adds	r7, #8
 80139f4:	46bd      	mov	sp, r7
 80139f6:	bd80      	pop	{r7, pc}

080139f8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 80139f8:	b580      	push	{r7, lr}
 80139fa:	b084      	sub	sp, #16
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	60f8      	str	r0, [r7, #12]
 8013a00:	60b9      	str	r1, [r7, #8]
 8013a02:	607a      	str	r2, [r7, #4]
 8013a04:	603b      	str	r3, [r7, #0]
          lastRenderVariant(HARDWARE)
 8013a06:	4a4a      	ldr	r2, [pc, #296]	; (8013b30 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	601a      	str	r2, [r3, #0]
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	68ba      	ldr	r2, [r7, #8]
 8013a10:	605a      	str	r2, [r3, #4]
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	687a      	ldr	r2, [r7, #4]
 8013a16:	609a      	str	r2, [r3, #8]
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	683a      	ldr	r2, [r7, #0]
 8013a1c:	60da      	str	r2, [r3, #12]
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	2200      	movs	r2, #0
 8013a22:	611a      	str	r2, [r3, #16]
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	2200      	movs	r2, #0
 8013a28:	615a      	str	r2, [r3, #20]
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	2200      	movs	r2, #0
 8013a2e:	619a      	str	r2, [r3, #24]
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	331c      	adds	r3, #28
 8013a34:	4618      	mov	r0, r3
 8013a36:	f7ff ffcc 	bl	80139d2 <_ZN8touchgfx8GesturesC1Ev>
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	639a      	str	r2, [r3, #56]	; 0x38
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	2200      	movs	r2, #0
 8013a44:	63da      	str	r2, [r3, #60]	; 0x3c
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	2200      	movs	r2, #0
 8013a4a:	641a      	str	r2, [r3, #64]	; 0x40
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	2200      	movs	r2, #0
 8013a50:	645a      	str	r2, [r3, #68]	; 0x44
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	2200      	movs	r2, #0
 8013a56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	2201      	movs	r2, #1
 8013a5e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	2200      	movs	r2, #0
 8013a66:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	64da      	str	r2, [r3, #76]	; 0x4c
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	3350      	adds	r3, #80	; 0x50
 8013a74:	4618      	mov	r0, r3
 8013a76:	f7fc ff76 	bl	8010966 <_ZN8touchgfx4RectC1Ev>
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	2201      	movs	r2, #1
 8013a7e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	2200      	movs	r2, #0
 8013a86:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	2200      	movs	r2, #0
 8013a8e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	2201      	movs	r2, #1
 8013a96:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	2200      	movs	r2, #0
 8013a9e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	2200      	movs	r2, #0
 8013aae:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	2200      	movs	r2, #0
 8013ab6:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	2200      	movs	r2, #0
 8013abe:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	671a      	str	r2, [r3, #112]	; 0x70
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	2200      	movs	r2, #0
 8013acc:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	2201      	movs	r2, #1
 8013adc:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	2201      	movs	r2, #1
 8013ae4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8013ae8:	4a12      	ldr	r2, [pc, #72]	; (8013b34 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x13c>)
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8013aee:	4a12      	ldr	r2, [pc, #72]	; (8013b38 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 8013af0:	8b3b      	ldrh	r3, [r7, #24]
 8013af2:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8013af4:	4a11      	ldr	r2, [pc, #68]	; (8013b3c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 8013af6:	8bbb      	ldrh	r3, [r7, #28]
 8013af8:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8013afa:	4b11      	ldr	r3, [pc, #68]	; (8013b40 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x148>)
 8013afc:	2200      	movs	r2, #0
 8013afe:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8013b00:	4b0d      	ldr	r3, [pc, #52]	; (8013b38 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 8013b02:	881a      	ldrh	r2, [r3, #0]
 8013b04:	4b0f      	ldr	r3, [pc, #60]	; (8013b44 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x14c>)
 8013b06:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8013b08:	4b0c      	ldr	r3, [pc, #48]	; (8013b3c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 8013b0a:	881a      	ldrh	r2, [r3, #0]
 8013b0c:	4b0e      	ldr	r3, [pc, #56]	; (8013b48 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x150>)
 8013b0e:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8013b10:	8b3a      	ldrh	r2, [r7, #24]
 8013b12:	8bbb      	ldrh	r3, [r7, #28]
 8013b14:	429a      	cmp	r2, r3
 8013b16:	bf34      	ite	cc
 8013b18:	2301      	movcc	r3, #1
 8013b1a:	2300      	movcs	r3, #0
 8013b1c:	b2db      	uxtb	r3, r3
 8013b1e:	461a      	mov	r2, r3
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	4618      	mov	r0, r3
 8013b2a:	3710      	adds	r7, #16
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	bd80      	pop	{r7, pc}
 8013b30:	0802b09c 	.word	0x0802b09c
 8013b34:	2000a0f0 	.word	0x2000a0f0
 8013b38:	2000a0e4 	.word	0x2000a0e4
 8013b3c:	2000a0e6 	.word	0x2000a0e6
 8013b40:	2000a0e8 	.word	0x2000a0e8
 8013b44:	2000a0ea 	.word	0x2000a0ea
 8013b48:	2000a0ec 	.word	0x2000a0ec

08013b4c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8013b4c:	b580      	push	{r7, lr}
 8013b4e:	b082      	sub	sp, #8
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
 8013b54:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 8013b56:	683b      	ldr	r3, [r7, #0]
 8013b58:	4618      	mov	r0, r3
 8013b5a:	f7fc fc65 	bl	8010428 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 8013b5e:	bf00      	nop
 8013b60:	3708      	adds	r7, #8
 8013b62:	46bd      	mov	sp, r7
 8013b64:	bd80      	pop	{r7, pc}
	...

08013b68 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	b086      	sub	sp, #24
 8013b6c:	af02      	add	r7, sp, #8
 8013b6e:	60f8      	str	r0, [r7, #12]
 8013b70:	60b9      	str	r1, [r7, #8]
 8013b72:	607a      	str	r2, [r7, #4]
 8013b74:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8013b76:	68f8      	ldr	r0, [r7, #12]
 8013b78:	69bb      	ldr	r3, [r7, #24]
 8013b7a:	9300      	str	r3, [sp, #0]
 8013b7c:	683b      	ldr	r3, [r7, #0]
 8013b7e:	687a      	ldr	r2, [r7, #4]
 8013b80:	68b9      	ldr	r1, [r7, #8]
 8013b82:	f7ff fea3 	bl	80138cc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8013b86:	4a04      	ldr	r2, [pc, #16]	; (8013b98 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	601a      	str	r2, [r3, #0]
    {

    }
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	4618      	mov	r0, r3
 8013b90:	3710      	adds	r7, #16
 8013b92:	46bd      	mov	sp, r7
 8013b94:	bd80      	pop	{r7, pc}
 8013b96:	bf00      	nop
 8013b98:	0802a7d4 	.word	0x0802a7d4

08013b9c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	af00      	add	r7, sp, #0
 8013ba0:	4801      	ldr	r0, [pc, #4]	; (8013ba8 <__tcf_0+0xc>)
 8013ba2:	f000 f95f 	bl	8013e64 <_ZN12FrontendHeapD1Ev>
 8013ba6:	bd80      	pop	{r7, pc}
 8013ba8:	20008ef4 	.word	0x20008ef4

08013bac <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8013bac:	b580      	push	{r7, lr}
 8013bae:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8013bb0:	4b12      	ldr	r3, [pc, #72]	; (8013bfc <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8013bb2:	781b      	ldrb	r3, [r3, #0]
 8013bb4:	f3bf 8f5b 	dmb	ish
 8013bb8:	b2db      	uxtb	r3, r3
 8013bba:	f003 0301 	and.w	r3, r3, #1
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	bf0c      	ite	eq
 8013bc2:	2301      	moveq	r3, #1
 8013bc4:	2300      	movne	r3, #0
 8013bc6:	b2db      	uxtb	r3, r3
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d013      	beq.n	8013bf4 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8013bcc:	480b      	ldr	r0, [pc, #44]	; (8013bfc <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8013bce:	f012 ff00 	bl	80269d2 <__cxa_guard_acquire>
 8013bd2:	4603      	mov	r3, r0
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	bf14      	ite	ne
 8013bd8:	2301      	movne	r3, #1
 8013bda:	2300      	moveq	r3, #0
 8013bdc:	b2db      	uxtb	r3, r3
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d008      	beq.n	8013bf4 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8013be2:	4807      	ldr	r0, [pc, #28]	; (8013c00 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8013be4:	f000 f868 	bl	8013cb8 <_ZN12FrontendHeapC1Ev>
 8013be8:	4804      	ldr	r0, [pc, #16]	; (8013bfc <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8013bea:	f012 fefe 	bl	80269ea <__cxa_guard_release>
 8013bee:	4805      	ldr	r0, [pc, #20]	; (8013c04 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8013bf0:	f013 f836 	bl	8026c60 <atexit>
        return instance;
 8013bf4:	4b02      	ldr	r3, [pc, #8]	; (8013c00 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	bd80      	pop	{r7, pc}
 8013bfa:	bf00      	nop
 8013bfc:	200093c0 	.word	0x200093c0
 8013c00:	20008ef4 	.word	0x20008ef4
 8013c04:	08013b9d 	.word	0x08013b9d

08013c08 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b082      	sub	sp, #8
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
 8013c10:	4a05      	ldr	r2, [pc, #20]	; (8013c28 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	601a      	str	r2, [r3, #0]
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	4618      	mov	r0, r3
 8013c1a:	f7ff fe77 	bl	801390c <_ZN8touchgfx7MVPHeapD1Ev>
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	4618      	mov	r0, r3
 8013c22:	3708      	adds	r7, #8
 8013c24:	46bd      	mov	sp, r7
 8013c26:	bd80      	pop	{r7, pc}
 8013c28:	0802a7d4 	.word	0x0802a7d4

08013c2c <_ZN16FrontendHeapBaseD0Ev>:
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b082      	sub	sp, #8
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]
 8013c34:	6878      	ldr	r0, [r7, #4]
 8013c36:	f7ff ffe7 	bl	8013c08 <_ZN16FrontendHeapBaseD1Ev>
 8013c3a:	2114      	movs	r1, #20
 8013c3c:	6878      	ldr	r0, [r7, #4]
 8013c3e:	f012 fec6 	bl	80269ce <_ZdlPvj>
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	4618      	mov	r0, r3
 8013c46:	3708      	adds	r7, #8
 8013c48:	46bd      	mov	sp, r7
 8013c4a:	bd80      	pop	{r7, pc}

08013c4c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b082      	sub	sp, #8
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	4618      	mov	r0, r3
 8013c58:	f000 fd76 	bl	8014748 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013c5c:	4a03      	ldr	r2, [pc, #12]	; (8013c6c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	601a      	str	r2, [r3, #0]
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	4618      	mov	r0, r3
 8013c66:	3708      	adds	r7, #8
 8013c68:	46bd      	mov	sp, r7
 8013c6a:	bd80      	pop	{r7, pc}
 8013c6c:	0802a7a0 	.word	0x0802a7a0

08013c70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b082      	sub	sp, #8
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	f000 fd64 	bl	8014748 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013c80:	4a03      	ldr	r2, [pc, #12]	; (8013c90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	601a      	str	r2, [r3, #0]
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	4618      	mov	r0, r3
 8013c8a:	3708      	adds	r7, #8
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	bd80      	pop	{r7, pc}
 8013c90:	0802a76c 	.word	0x0802a76c

08013c94 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8013c94:	b580      	push	{r7, lr}
 8013c96:	b082      	sub	sp, #8
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	6078      	str	r0, [r7, #4]
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	f000 fd52 	bl	8014748 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013ca4:	4a03      	ldr	r2, [pc, #12]	; (8013cb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	601a      	str	r2, [r3, #0]
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	4618      	mov	r0, r3
 8013cae:	3708      	adds	r7, #8
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	bd80      	pop	{r7, pc}
 8013cb4:	0802a738 	.word	0x0802a738

08013cb8 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8013cb8:	b590      	push	{r4, r7, lr}
 8013cba:	b085      	sub	sp, #20
 8013cbc:	af02      	add	r7, sp, #8
 8013cbe:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8013cc0:	6878      	ldr	r0, [r7, #4]
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	f103 0114 	add.w	r1, r3, #20
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	f503 7456 	add.w	r4, r3, #856	; 0x358
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	f503 735d 	add.w	r3, r3, #884	; 0x374
                     app(model, *this)
 8013cda:	9300      	str	r3, [sp, #0]
 8013cdc:	4623      	mov	r3, r4
 8013cde:	f7ff ff43 	bl	8013b68 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8013ce2:	4a18      	ldr	r2, [pc, #96]	; (8013d44 <_ZN12FrontendHeapC1Ev+0x8c>)
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	601a      	str	r2, [r3, #0]
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	3314      	adds	r3, #20
 8013cec:	4618      	mov	r0, r3
 8013cee:	f7ff ffad 	bl	8013c4c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	332c      	adds	r3, #44	; 0x2c
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	f7ff ffba 	bl	8013c70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8013d02:	4618      	mov	r0, r3
 8013d04:	f7ff ffc6 	bl	8013c94 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8013d0e:	4618      	mov	r0, r3
 8013d10:	f7fe f9c4 	bl	801209c <_ZN5ModelC1Ev>
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	f503 705d 	add.w	r0, r3, #884	; 0x374
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8013d20:	687a      	ldr	r2, [r7, #4]
 8013d22:	4619      	mov	r1, r3
 8013d24:	f7fe f9a4 	bl	8012070 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8013d28:	687a      	ldr	r2, [r7, #4]
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8013d30:	4619      	mov	r1, r3
 8013d32:	4610      	mov	r0, r2
 8013d34:	f7ff ff0a 	bl	8013b4c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	370c      	adds	r7, #12
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	bd90      	pop	{r4, r7, pc}
 8013d42:	bf00      	nop
 8013d44:	0802a724 	.word	0x0802a724

08013d48 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b086      	sub	sp, #24
 8013d4c:	af02      	add	r7, sp, #8
 8013d4e:	60f8      	str	r0, [r7, #12]
 8013d50:	60b9      	str	r1, [r7, #8]
 8013d52:	607a      	str	r2, [r7, #4]
 8013d54:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8013d56:	68f8      	ldr	r0, [r7, #12]
 8013d58:	8bbb      	ldrh	r3, [r7, #28]
 8013d5a:	9301      	str	r3, [sp, #4]
 8013d5c:	8b3b      	ldrh	r3, [r7, #24]
 8013d5e:	9300      	str	r3, [sp, #0]
 8013d60:	683b      	ldr	r3, [r7, #0]
 8013d62:	687a      	ldr	r2, [r7, #4]
 8013d64:	68b9      	ldr	r1, [r7, #8]
 8013d66:	f7ff fe47 	bl	80139f8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8013d6a:	4a04      	ldr	r2, [pc, #16]	; (8013d7c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	601a      	str	r2, [r3, #0]
    }
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	4618      	mov	r0, r3
 8013d74:	3710      	adds	r7, #16
 8013d76:	46bd      	mov	sp, r7
 8013d78:	bd80      	pop	{r7, pc}
 8013d7a:	bf00      	nop
 8013d7c:	0802a7f8 	.word	0x0802a7f8

08013d80 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b086      	sub	sp, #24
 8013d84:	af02      	add	r7, sp, #8
 8013d86:	60f8      	str	r0, [r7, #12]
 8013d88:	60b9      	str	r1, [r7, #8]
 8013d8a:	607a      	str	r2, [r7, #4]
 8013d8c:	603b      	str	r3, [r7, #0]
 8013d8e:	68f8      	ldr	r0, [r7, #12]
 8013d90:	8bbb      	ldrh	r3, [r7, #28]
 8013d92:	9301      	str	r3, [sp, #4]
 8013d94:	8b3b      	ldrh	r3, [r7, #24]
 8013d96:	9300      	str	r3, [sp, #0]
 8013d98:	683b      	ldr	r3, [r7, #0]
 8013d9a:	687a      	ldr	r2, [r7, #4]
 8013d9c:	68b9      	ldr	r1, [r7, #8]
 8013d9e:	f7ff ffd3 	bl	8013d48 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8013da2:	4a04      	ldr	r2, [pc, #16]	; (8013db4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	601a      	str	r2, [r3, #0]
    }
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	4618      	mov	r0, r3
 8013dac:	3710      	adds	r7, #16
 8013dae:	46bd      	mov	sp, r7
 8013db0:	bd80      	pop	{r7, pc}
 8013db2:	bf00      	nop
 8013db4:	0802a5e4 	.word	0x0802a5e4

08013db8 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8013db8:	b480      	push	{r7}
 8013dba:	b083      	sub	sp, #12
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
 8013dc0:	4a04      	ldr	r2, [pc, #16]	; (8013dd4 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	601a      	str	r2, [r3, #0]
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	4618      	mov	r0, r3
 8013dca:	370c      	adds	r7, #12
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd2:	4770      	bx	lr
 8013dd4:	0802a5cc 	.word	0x0802a5cc

08013dd8 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8013dd8:	b580      	push	{r7, lr}
 8013dda:	b082      	sub	sp, #8
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	6078      	str	r0, [r7, #4]
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	4618      	mov	r0, r3
 8013de4:	f7ff ffe8 	bl	8013db8 <_ZN8touchgfx15TouchControllerC1Ev>
 8013de8:	4a03      	ldr	r2, [pc, #12]	; (8013df8 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	601a      	str	r2, [r3, #0]
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	4618      	mov	r0, r3
 8013df2:	3708      	adds	r7, #8
 8013df4:	46bd      	mov	sp, r7
 8013df6:	bd80      	pop	{r7, pc}
 8013df8:	0802a5b4 	.word	0x0802a5b4

08013dfc <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 8013dfc:	b590      	push	{r4, r7, lr}
 8013dfe:	b085      	sub	sp, #20
 8013e00:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8013e02:	f7fd ff0f 	bl	8011c24 <_ZN14BitmapDatabase11getInstanceEv>
 8013e06:	4604      	mov	r4, r0
 8013e08:	f7fd ff16 	bl	8011c38 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8013e0c:	4603      	mov	r3, r0
 8013e0e:	4619      	mov	r1, r3
 8013e10:	2300      	movs	r3, #0
 8013e12:	9300      	str	r3, [sp, #0]
 8013e14:	2300      	movs	r3, #0
 8013e16:	2200      	movs	r2, #0
 8013e18:	4620      	mov	r0, r4
 8013e1a:	f006 ffdd 	bl	801add8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 8013e1e:	4809      	ldr	r0, [pc, #36]	; (8013e44 <touchgfx_init+0x48>)
 8013e20:	f7ff fd44 	bl	80138ac <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8013e24:	2000      	movs	r0, #0
 8013e26:	f7fe f841 	bl	8011eac <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 8013e2a:	4807      	ldr	r0, [pc, #28]	; (8013e48 <touchgfx_init+0x4c>)
 8013e2c:	f006 ff16 	bl	801ac5c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8013e30:	f7ff febc 	bl	8013bac <_ZN12FrontendHeap11getInstanceEv>
 8013e34:	6078      	str	r0, [r7, #4]
  (void)heap;

  /*
   * Initialize TouchGFX
   */
  hal.initialize();
 8013e36:	4805      	ldr	r0, [pc, #20]	; (8013e4c <touchgfx_init+0x50>)
 8013e38:	f7fe ff42 	bl	8012cc0 <_ZN11TouchGFXHAL10initializeEv>
}
 8013e3c:	bf00      	nop
 8013e3e:	370c      	adds	r7, #12
 8013e40:	46bd      	mov	sp, r7
 8013e42:	bd90      	pop	{r4, r7, pc}
 8013e44:	2000a060 	.word	0x2000a060
 8013e48:	20000128 	.word	0x20000128
 8013e4c:	2000a064 	.word	0x2000a064

08013e50 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8013e50:	b580      	push	{r7, lr}
 8013e52:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 8013e54:	4802      	ldr	r0, [pc, #8]	; (8013e60 <touchgfx_taskEntry+0x10>)
 8013e56:	f7fe ff3f 	bl	8012cd8 <_ZN11TouchGFXHAL9taskEntryEv>
}
 8013e5a:	bf00      	nop
 8013e5c:	bd80      	pop	{r7, pc}
 8013e5e:	bf00      	nop
 8013e60:	2000a064 	.word	0x2000a064

08013e64 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b082      	sub	sp, #8
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	6078      	str	r0, [r7, #4]
 8013e6c:	4a10      	ldr	r2, [pc, #64]	; (8013eb0 <_ZN12FrontendHeapD1Ev+0x4c>)
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	601a      	str	r2, [r3, #0]
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8013e78:	4618      	mov	r0, r3
 8013e7a:	f7fe f8c3 	bl	8012004 <_ZN19FrontendApplicationD1Ev>
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8013e84:	4618      	mov	r0, r3
 8013e86:	f000 f827 	bl	8013ed8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	332c      	adds	r3, #44	; 0x2c
 8013e8e:	4618      	mov	r0, r3
 8013e90:	f000 f844 	bl	8013f1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	3314      	adds	r3, #20
 8013e98:	4618      	mov	r0, r3
 8013e9a:	f000 f863 	bl	8013f64 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	f7ff feb1 	bl	8013c08 <_ZN16FrontendHeapBaseD1Ev>
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	3708      	adds	r7, #8
 8013eac:	46bd      	mov	sp, r7
 8013eae:	bd80      	pop	{r7, pc}
 8013eb0:	0802a724 	.word	0x0802a724

08013eb4 <_ZN12FrontendHeapD0Ev>:
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b082      	sub	sp, #8
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
 8013ebc:	6878      	ldr	r0, [r7, #4]
 8013ebe:	f7ff ffd1 	bl	8013e64 <_ZN12FrontendHeapD1Ev>
 8013ec2:	f240 41cc 	movw	r1, #1228	; 0x4cc
 8013ec6:	6878      	ldr	r0, [r7, #4]
 8013ec8:	f012 fd81 	bl	80269ce <_ZdlPvj>
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	4618      	mov	r0, r3
 8013ed0:	3708      	adds	r7, #8
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	bd80      	pop	{r7, pc}
	...

08013ed8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b082      	sub	sp, #8
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
 8013ee0:	4a05      	ldr	r2, [pc, #20]	; (8013ef8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	601a      	str	r2, [r3, #0]
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	4618      	mov	r0, r3
 8013eea:	f000 fc2b 	bl	8014744 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	3708      	adds	r7, #8
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	bd80      	pop	{r7, pc}
 8013ef8:	0802a738 	.word	0x0802a738

08013efc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b082      	sub	sp, #8
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	6078      	str	r0, [r7, #4]
 8013f04:	6878      	ldr	r0, [r7, #4]
 8013f06:	f7ff ffe7 	bl	8013ed8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013f0a:	2114      	movs	r1, #20
 8013f0c:	6878      	ldr	r0, [r7, #4]
 8013f0e:	f012 fd5e 	bl	80269ce <_ZdlPvj>
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	4618      	mov	r0, r3
 8013f16:	3708      	adds	r7, #8
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	bd80      	pop	{r7, pc}

08013f1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b082      	sub	sp, #8
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
 8013f24:	4a05      	ldr	r2, [pc, #20]	; (8013f3c <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	601a      	str	r2, [r3, #0]
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f000 fc09 	bl	8014744 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	4618      	mov	r0, r3
 8013f36:	3708      	adds	r7, #8
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	bd80      	pop	{r7, pc}
 8013f3c:	0802a76c 	.word	0x0802a76c

08013f40 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b082      	sub	sp, #8
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	6078      	str	r0, [r7, #4]
 8013f48:	6878      	ldr	r0, [r7, #4]
 8013f4a:	f7ff ffe7 	bl	8013f1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013f4e:	f44f 714b 	mov.w	r1, #812	; 0x32c
 8013f52:	6878      	ldr	r0, [r7, #4]
 8013f54:	f012 fd3b 	bl	80269ce <_ZdlPvj>
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	3708      	adds	r7, #8
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	bd80      	pop	{r7, pc}
	...

08013f64 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b082      	sub	sp, #8
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	6078      	str	r0, [r7, #4]
 8013f6c:	4a05      	ldr	r2, [pc, #20]	; (8013f84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	601a      	str	r2, [r3, #0]
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	4618      	mov	r0, r3
 8013f76:	f000 fbe5 	bl	8014744 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	3708      	adds	r7, #8
 8013f80:	46bd      	mov	sp, r7
 8013f82:	bd80      	pop	{r7, pc}
 8013f84:	0802a7a0 	.word	0x0802a7a0

08013f88 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b082      	sub	sp, #8
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6078      	str	r0, [r7, #4]
 8013f90:	6878      	ldr	r0, [r7, #4]
 8013f92:	f7ff ffe7 	bl	8013f64 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013f96:	2118      	movs	r1, #24
 8013f98:	6878      	ldr	r0, [r7, #4]
 8013f9a:	f012 fd18 	bl	80269ce <_ZdlPvj>
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	3708      	adds	r7, #8
 8013fa4:	46bd      	mov	sp, r7
 8013fa6:	bd80      	pop	{r7, pc}

08013fa8 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b082      	sub	sp, #8
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	6078      	str	r0, [r7, #4]
 8013fb0:	4a05      	ldr	r2, [pc, #20]	; (8013fc8 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	601a      	str	r2, [r3, #0]
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	4618      	mov	r0, r3
 8013fba:	f7ff fcc7 	bl	801394c <_ZN8touchgfx3LCDD1Ev>
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	3708      	adds	r7, #8
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	bd80      	pop	{r7, pc}
 8013fc8:	0802cb80 	.word	0x0802cb80

08013fcc <_ZN8touchgfx8LCD16bppD0Ev>:
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b082      	sub	sp, #8
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	6078      	str	r0, [r7, #4]
 8013fd4:	6878      	ldr	r0, [r7, #4]
 8013fd6:	f7ff ffe7 	bl	8013fa8 <_ZN8touchgfx8LCD16bppD1Ev>
 8013fda:	2178      	movs	r1, #120	; 0x78
 8013fdc:	6878      	ldr	r0, [r7, #4]
 8013fde:	f012 fcf6 	bl	80269ce <_ZdlPvj>
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	3708      	adds	r7, #8
 8013fe8:	46bd      	mov	sp, r7
 8013fea:	bd80      	pop	{r7, pc}

08013fec <_Z41__static_initialization_and_destruction_0ii>:
 8013fec:	b580      	push	{r7, lr}
 8013fee:	b084      	sub	sp, #16
 8013ff0:	af02      	add	r7, sp, #8
 8013ff2:	6078      	str	r0, [r7, #4]
 8013ff4:	6039      	str	r1, [r7, #0]
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	2b01      	cmp	r3, #1
 8013ffa:	d118      	bne.n	801402e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8013ffc:	683b      	ldr	r3, [r7, #0]
 8013ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014002:	4293      	cmp	r3, r2
 8014004:	d113      	bne.n	801402e <_Z41__static_initialization_and_destruction_0ii+0x42>
static STM32TouchController tc;
 8014006:	4817      	ldr	r0, [pc, #92]	; (8014064 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8014008:	f7ff fee6 	bl	8013dd8 <_ZN20STM32TouchControllerC1Ev>
static STM32F4DMA dma;
 801400c:	4816      	ldr	r0, [pc, #88]	; (8014068 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801400e:	f7ff f8cb 	bl	80131a8 <_ZN10STM32F4DMAC1Ev>
static LCD16bpp display;
 8014012:	4816      	ldr	r0, [pc, #88]	; (801406c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014014:	f009 ff62 	bl	801dedc <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 320);
 8014018:	f44f 73a0 	mov.w	r3, #320	; 0x140
 801401c:	9301      	str	r3, [sp, #4]
 801401e:	23f0      	movs	r3, #240	; 0xf0
 8014020:	9300      	str	r3, [sp, #0]
 8014022:	4b10      	ldr	r3, [pc, #64]	; (8014064 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8014024:	4a11      	ldr	r2, [pc, #68]	; (801406c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014026:	4910      	ldr	r1, [pc, #64]	; (8014068 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014028:	4811      	ldr	r0, [pc, #68]	; (8014070 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801402a:	f7ff fea9 	bl	8013d80 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d113      	bne.n	801405c <_Z41__static_initialization_and_destruction_0ii+0x70>
 8014034:	683b      	ldr	r3, [r7, #0]
 8014036:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801403a:	4293      	cmp	r3, r2
 801403c:	d10e      	bne.n	801405c <_Z41__static_initialization_and_destruction_0ii+0x70>
 801403e:	480c      	ldr	r0, [pc, #48]	; (8014070 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014040:	f7fe feee 	bl	8012e20 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8014044:	480b      	ldr	r0, [pc, #44]	; (8014074 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8014046:	f7fb fca1 	bl	800f98c <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 801404a:	4808      	ldr	r0, [pc, #32]	; (801406c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801404c:	f7ff ffac 	bl	8013fa8 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32F4DMA dma;
 8014050:	4805      	ldr	r0, [pc, #20]	; (8014068 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014052:	f7ff f8d3 	bl	80131fc <_ZN10STM32F4DMAD1Ev>
static STM32TouchController tc;
 8014056:	4803      	ldr	r0, [pc, #12]	; (8014064 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8014058:	f7fe fc82 	bl	8012960 <_ZN20STM32TouchControllerD1Ev>
}
 801405c:	bf00      	nop
 801405e:	3708      	adds	r7, #8
 8014060:	46bd      	mov	sp, r7
 8014062:	bd80      	pop	{r7, pc}
 8014064:	200093c4 	.word	0x200093c4
 8014068:	200093c8 	.word	0x200093c8
 801406c:	20009fe8 	.word	0x20009fe8
 8014070:	2000a064 	.word	0x2000a064
 8014074:	20000128 	.word	0x20000128

08014078 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8014078:	b480      	push	{r7}
 801407a:	b083      	sub	sp, #12
 801407c:	af00      	add	r7, sp, #0
 801407e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8014080:	2301      	movs	r3, #1
    }
 8014082:	4618      	mov	r0, r3
 8014084:	370c      	adds	r7, #12
 8014086:	46bd      	mov	sp, r7
 8014088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801408c:	4770      	bx	lr

0801408e <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 801408e:	b480      	push	{r7}
 8014090:	b083      	sub	sp, #12
 8014092:	af00      	add	r7, sp, #0
 8014094:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8014096:	230c      	movs	r3, #12
    }
 8014098:	4618      	mov	r0, r3
 801409a:	370c      	adds	r7, #12
 801409c:	46bd      	mov	sp, r7
 801409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a2:	4770      	bx	lr

080140a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80140a4:	b480      	push	{r7}
 80140a6:	b083      	sub	sp, #12
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
 80140ac:	460b      	mov	r3, r1
 80140ae:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80140b0:	887a      	ldrh	r2, [r7, #2]
 80140b2:	4613      	mov	r3, r2
 80140b4:	005b      	lsls	r3, r3, #1
 80140b6:	4413      	add	r3, r2
 80140b8:	009b      	lsls	r3, r3, #2
 80140ba:	3308      	adds	r3, #8
 80140bc:	687a      	ldr	r2, [r7, #4]
 80140be:	4413      	add	r3, r2
    }
 80140c0:	4618      	mov	r0, r3
 80140c2:	370c      	adds	r7, #12
 80140c4:	46bd      	mov	sp, r7
 80140c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ca:	4770      	bx	lr

080140cc <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80140cc:	b480      	push	{r7}
 80140ce:	b083      	sub	sp, #12
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	6078      	str	r0, [r7, #4]
 80140d4:	460b      	mov	r3, r1
 80140d6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80140d8:	887a      	ldrh	r2, [r7, #2]
 80140da:	4613      	mov	r3, r2
 80140dc:	005b      	lsls	r3, r3, #1
 80140de:	4413      	add	r3, r2
 80140e0:	009b      	lsls	r3, r3, #2
 80140e2:	3308      	adds	r3, #8
 80140e4:	687a      	ldr	r2, [r7, #4]
 80140e6:	4413      	add	r3, r2
    }
 80140e8:	4618      	mov	r0, r3
 80140ea:	370c      	adds	r7, #12
 80140ec:	46bd      	mov	sp, r7
 80140ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f2:	4770      	bx	lr

080140f4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80140f4:	b480      	push	{r7}
 80140f6:	b083      	sub	sp, #12
 80140f8:	af00      	add	r7, sp, #0
 80140fa:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80140fc:	2301      	movs	r3, #1
    }
 80140fe:	4618      	mov	r0, r3
 8014100:	370c      	adds	r7, #12
 8014102:	46bd      	mov	sp, r7
 8014104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014108:	4770      	bx	lr

0801410a <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801410a:	b480      	push	{r7}
 801410c:	b083      	sub	sp, #12
 801410e:	af00      	add	r7, sp, #0
 8014110:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8014112:	f44f 7349 	mov.w	r3, #804	; 0x324
    }
 8014116:	4618      	mov	r0, r3
 8014118:	370c      	adds	r7, #12
 801411a:	46bd      	mov	sp, r7
 801411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014120:	4770      	bx	lr

08014122 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8014122:	b480      	push	{r7}
 8014124:	b083      	sub	sp, #12
 8014126:	af00      	add	r7, sp, #0
 8014128:	6078      	str	r0, [r7, #4]
 801412a:	460b      	mov	r3, r1
 801412c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801412e:	887b      	ldrh	r3, [r7, #2]
 8014130:	f44f 7249 	mov.w	r2, #804	; 0x324
 8014134:	fb02 f303 	mul.w	r3, r2, r3
 8014138:	3308      	adds	r3, #8
 801413a:	687a      	ldr	r2, [r7, #4]
 801413c:	4413      	add	r3, r2
    }
 801413e:	4618      	mov	r0, r3
 8014140:	370c      	adds	r7, #12
 8014142:	46bd      	mov	sp, r7
 8014144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014148:	4770      	bx	lr

0801414a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801414a:	b480      	push	{r7}
 801414c:	b083      	sub	sp, #12
 801414e:	af00      	add	r7, sp, #0
 8014150:	6078      	str	r0, [r7, #4]
 8014152:	460b      	mov	r3, r1
 8014154:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014156:	887b      	ldrh	r3, [r7, #2]
 8014158:	f44f 7249 	mov.w	r2, #804	; 0x324
 801415c:	fb02 f303 	mul.w	r3, r2, r3
 8014160:	3308      	adds	r3, #8
 8014162:	687a      	ldr	r2, [r7, #4]
 8014164:	4413      	add	r3, r2
    }
 8014166:	4618      	mov	r0, r3
 8014168:	370c      	adds	r7, #12
 801416a:	46bd      	mov	sp, r7
 801416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014170:	4770      	bx	lr

08014172 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8014172:	b480      	push	{r7}
 8014174:	b083      	sub	sp, #12
 8014176:	af00      	add	r7, sp, #0
 8014178:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801417a:	2301      	movs	r3, #1
    }
 801417c:	4618      	mov	r0, r3
 801417e:	370c      	adds	r7, #12
 8014180:	46bd      	mov	sp, r7
 8014182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014186:	4770      	bx	lr

08014188 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8014188:	b480      	push	{r7}
 801418a:	b083      	sub	sp, #12
 801418c:	af00      	add	r7, sp, #0
 801418e:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8014190:	2310      	movs	r3, #16
    }
 8014192:	4618      	mov	r0, r3
 8014194:	370c      	adds	r7, #12
 8014196:	46bd      	mov	sp, r7
 8014198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801419c:	4770      	bx	lr

0801419e <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801419e:	b480      	push	{r7}
 80141a0:	b083      	sub	sp, #12
 80141a2:	af00      	add	r7, sp, #0
 80141a4:	6078      	str	r0, [r7, #4]
 80141a6:	460b      	mov	r3, r1
 80141a8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80141aa:	887b      	ldrh	r3, [r7, #2]
 80141ac:	011b      	lsls	r3, r3, #4
 80141ae:	3308      	adds	r3, #8
 80141b0:	687a      	ldr	r2, [r7, #4]
 80141b2:	4413      	add	r3, r2
    }
 80141b4:	4618      	mov	r0, r3
 80141b6:	370c      	adds	r7, #12
 80141b8:	46bd      	mov	sp, r7
 80141ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141be:	4770      	bx	lr

080141c0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80141c0:	b480      	push	{r7}
 80141c2:	b083      	sub	sp, #12
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
 80141c8:	460b      	mov	r3, r1
 80141ca:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80141cc:	887b      	ldrh	r3, [r7, #2]
 80141ce:	011b      	lsls	r3, r3, #4
 80141d0:	3308      	adds	r3, #8
 80141d2:	687a      	ldr	r2, [r7, #4]
 80141d4:	4413      	add	r3, r2
    }
 80141d6:	4618      	mov	r0, r3
 80141d8:	370c      	adds	r7, #12
 80141da:	46bd      	mov	sp, r7
 80141dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e0:	4770      	bx	lr

080141e2 <_GLOBAL__sub_I_touchgfx_init>:
 80141e2:	b580      	push	{r7, lr}
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80141ea:	2001      	movs	r0, #1
 80141ec:	f7ff fefe 	bl	8013fec <_Z41__static_initialization_and_destruction_0ii>
 80141f0:	bd80      	pop	{r7, pc}

080141f2 <_GLOBAL__sub_D_touchgfx_init>:
 80141f2:	b580      	push	{r7, lr}
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80141fa:	2000      	movs	r0, #0
 80141fc:	f7ff fef6 	bl	8013fec <_Z41__static_initialization_and_destruction_0ii>
 8014200:	bd80      	pop	{r7, pc}

08014202 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8014202:	b580      	push	{r7, lr}
 8014204:	b082      	sub	sp, #8
 8014206:	af00      	add	r7, sp, #0
 8014208:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	3318      	adds	r3, #24
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	6878      	ldr	r0, [r7, #4]
 8014214:	4798      	blx	r3
    }
 8014216:	bf00      	nop
 8014218:	3708      	adds	r7, #8
 801421a:	46bd      	mov	sp, r7
 801421c:	bd80      	pop	{r7, pc}

0801421e <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 801421e:	b480      	push	{r7}
 8014220:	b083      	sub	sp, #12
 8014222:	af00      	add	r7, sp, #0
 8014224:	6078      	str	r0, [r7, #4]
 8014226:	460b      	mov	r3, r1
 8014228:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	78fa      	ldrb	r2, [r7, #3]
 801422e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8014232:	bf00      	nop
 8014234:	370c      	adds	r7, #12
 8014236:	46bd      	mov	sp, r7
 8014238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801423c:	4770      	bx	lr

0801423e <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 801423e:	b480      	push	{r7}
 8014240:	b083      	sub	sp, #12
 8014242:	af00      	add	r7, sp, #0
 8014244:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 801424c:	3301      	adds	r3, #1
 801424e:	b2da      	uxtb	r2, r3
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8014256:	bf00      	nop
 8014258:	370c      	adds	r7, #12
 801425a:	46bd      	mov	sp, r7
 801425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014260:	4770      	bx	lr
	...

08014264 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8014264:	b580      	push	{r7, lr}
 8014266:	b082      	sub	sp, #8
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]
 801426c:	460b      	mov	r3, r1
 801426e:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8014270:	78fb      	ldrb	r3, [r7, #3]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d002      	beq.n	801427c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8014276:	78fb      	ldrb	r3, [r7, #3]
 8014278:	2b02      	cmp	r3, #2
 801427a:	d105      	bne.n	8014288 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	78fa      	ldrb	r2, [r7, #3]
 8014280:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8014284:	2301      	movs	r3, #1
 8014286:	e027      	b.n	80142d8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8014288:	78fb      	ldrb	r3, [r7, #3]
 801428a:	2b01      	cmp	r3, #1
 801428c:	d123      	bne.n	80142d6 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014292:	2b00      	cmp	r3, #0
 8014294:	d014      	beq.n	80142c0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	3380      	adds	r3, #128	; 0x80
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	6878      	ldr	r0, [r7, #4]
 80142a0:	4798      	blx	r3
 80142a2:	4603      	mov	r3, r0
 80142a4:	461a      	mov	r2, r3
 80142a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80142aa:	429a      	cmp	r2, r3
 80142ac:	d008      	beq.n	80142c0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80142ae:	4b0c      	ldr	r3, [pc, #48]	; (80142e0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 80142b0:	781b      	ldrb	r3, [r3, #0]
 80142b2:	f083 0301 	eor.w	r3, r3, #1
 80142b6:	b2db      	uxtb	r3, r3
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d001      	beq.n	80142c0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80142bc:	2301      	movs	r3, #1
 80142be:	e000      	b.n	80142c2 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 80142c0:	2300      	movs	r3, #0
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d005      	beq.n	80142d2 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	78fa      	ldrb	r2, [r7, #3]
 80142ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 80142ce:	2301      	movs	r3, #1
 80142d0:	e002      	b.n	80142d8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 80142d2:	2300      	movs	r3, #0
 80142d4:	e000      	b.n	80142d8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 80142d6:	2300      	movs	r3, #0
    }
 80142d8:	4618      	mov	r0, r3
 80142da:	3708      	adds	r7, #8
 80142dc:	46bd      	mov	sp, r7
 80142de:	bd80      	pop	{r7, pc}
 80142e0:	2000a0ee 	.word	0x2000a0ee

080142e4 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 80142e4:	b480      	push	{r7}
 80142e6:	b083      	sub	sp, #12
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
 80142ec:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	683a      	ldr	r2, [r7, #0]
 80142f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
 80142f4:	bf00      	nop
 80142f6:	370c      	adds	r7, #12
 80142f8:	46bd      	mov	sp, r7
 80142fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142fe:	4770      	bx	lr

08014300 <__NVIC_EnableIRQ>:
{
 8014300:	b480      	push	{r7}
 8014302:	b083      	sub	sp, #12
 8014304:	af00      	add	r7, sp, #0
 8014306:	4603      	mov	r3, r0
 8014308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801430a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801430e:	2b00      	cmp	r3, #0
 8014310:	db0b      	blt.n	801432a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014312:	79fb      	ldrb	r3, [r7, #7]
 8014314:	f003 021f 	and.w	r2, r3, #31
 8014318:	4907      	ldr	r1, [pc, #28]	; (8014338 <__NVIC_EnableIRQ+0x38>)
 801431a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801431e:	095b      	lsrs	r3, r3, #5
 8014320:	2001      	movs	r0, #1
 8014322:	fa00 f202 	lsl.w	r2, r0, r2
 8014326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801432a:	bf00      	nop
 801432c:	370c      	adds	r7, #12
 801432e:	46bd      	mov	sp, r7
 8014330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014334:	4770      	bx	lr
 8014336:	bf00      	nop
 8014338:	e000e100 	.word	0xe000e100

0801433c <__NVIC_DisableIRQ>:
{
 801433c:	b480      	push	{r7}
 801433e:	b083      	sub	sp, #12
 8014340:	af00      	add	r7, sp, #0
 8014342:	4603      	mov	r3, r0
 8014344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801434a:	2b00      	cmp	r3, #0
 801434c:	db12      	blt.n	8014374 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801434e:	79fb      	ldrb	r3, [r7, #7]
 8014350:	f003 021f 	and.w	r2, r3, #31
 8014354:	490a      	ldr	r1, [pc, #40]	; (8014380 <__NVIC_DisableIRQ+0x44>)
 8014356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801435a:	095b      	lsrs	r3, r3, #5
 801435c:	2001      	movs	r0, #1
 801435e:	fa00 f202 	lsl.w	r2, r0, r2
 8014362:	3320      	adds	r3, #32
 8014364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8014368:	f3bf 8f4f 	dsb	sy
}
 801436c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801436e:	f3bf 8f6f 	isb	sy
}
 8014372:	bf00      	nop
}
 8014374:	bf00      	nop
 8014376:	370c      	adds	r7, #12
 8014378:	46bd      	mov	sp, r7
 801437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801437e:	4770      	bx	lr
 8014380:	e000e100 	.word	0xe000e100

08014384 <__NVIC_SetPriority>:
{
 8014384:	b480      	push	{r7}
 8014386:	b083      	sub	sp, #12
 8014388:	af00      	add	r7, sp, #0
 801438a:	4603      	mov	r3, r0
 801438c:	6039      	str	r1, [r7, #0]
 801438e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014394:	2b00      	cmp	r3, #0
 8014396:	db0a      	blt.n	80143ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014398:	683b      	ldr	r3, [r7, #0]
 801439a:	b2da      	uxtb	r2, r3
 801439c:	490c      	ldr	r1, [pc, #48]	; (80143d0 <__NVIC_SetPriority+0x4c>)
 801439e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80143a2:	0112      	lsls	r2, r2, #4
 80143a4:	b2d2      	uxtb	r2, r2
 80143a6:	440b      	add	r3, r1
 80143a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80143ac:	e00a      	b.n	80143c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80143ae:	683b      	ldr	r3, [r7, #0]
 80143b0:	b2da      	uxtb	r2, r3
 80143b2:	4908      	ldr	r1, [pc, #32]	; (80143d4 <__NVIC_SetPriority+0x50>)
 80143b4:	79fb      	ldrb	r3, [r7, #7]
 80143b6:	f003 030f 	and.w	r3, r3, #15
 80143ba:	3b04      	subs	r3, #4
 80143bc:	0112      	lsls	r2, r2, #4
 80143be:	b2d2      	uxtb	r2, r2
 80143c0:	440b      	add	r3, r1
 80143c2:	761a      	strb	r2, [r3, #24]
}
 80143c4:	bf00      	nop
 80143c6:	370c      	adds	r7, #12
 80143c8:	46bd      	mov	sp, r7
 80143ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ce:	4770      	bx	lr
 80143d0:	e000e100 	.word	0xe000e100
 80143d4:	e000ed00 	.word	0xe000ed00

080143d8 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80143d8:	b5b0      	push	{r4, r5, r7, lr}
 80143da:	b082      	sub	sp, #8
 80143dc:	af00      	add	r7, sp, #0
 80143de:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	4618      	mov	r0, r3
 80143e4:	f001 f896 	bl	8015514 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(Application::getInstance()));
 80143e8:	687d      	ldr	r5, [r7, #4]
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	334c      	adds	r3, #76	; 0x4c
 80143f0:	681c      	ldr	r4, [r3, #0]
 80143f2:	f003 fcfb 	bl	8017dec <_ZN8touchgfx11Application11getInstanceEv>
 80143f6:	4603      	mov	r3, r0
 80143f8:	4619      	mov	r1, r3
 80143fa:	4628      	mov	r0, r5
 80143fc:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	490d      	ldr	r1, [pc, #52]	; (8014438 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8014402:	4618      	mov	r0, r3
 8014404:	f7ff ff6e 	bl	80142e4 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	2101      	movs	r1, #1
 801440c:	4618      	mov	r0, r3
 801440e:	f7ff ff29 	bl	8014264 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 8014412:	6878      	ldr	r0, [r7, #4]
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	3370      	adds	r3, #112	; 0x70
 801441a:	681c      	ldr	r4, [r3, #0]
 801441c:	2300      	movs	r3, #0
 801441e:	2200      	movs	r2, #0
 8014420:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8014424:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	2101      	movs	r1, #1
 801442a:	4618      	mov	r0, r3
 801442c:	f7ff fef7 	bl	801421e <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8014430:	bf00      	nop
 8014432:	3708      	adds	r7, #8
 8014434:	46bd      	mov	sp, r7
 8014436:	bdb0      	pop	{r4, r5, r7, pc}
 8014438:	08012f75 	.word	0x08012f75

0801443c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 801443c:	b580      	push	{r7, lr}
 801443e:	b082      	sub	sp, #8
 8014440:	af00      	add	r7, sp, #0
 8014442:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8014444:	2109      	movs	r1, #9
 8014446:	205a      	movs	r0, #90	; 0x5a
 8014448:	f7ff ff9c 	bl	8014384 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 801444c:	2109      	movs	r1, #9
 801444e:	2058      	movs	r0, #88	; 0x58
 8014450:	f7ff ff98 	bl	8014384 <__NVIC_SetPriority>
}
 8014454:	bf00      	nop
 8014456:	3708      	adds	r7, #8
 8014458:	46bd      	mov	sp, r7
 801445a:	bd80      	pop	{r7, pc}

0801445c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 801445c:	b580      	push	{r7, lr}
 801445e:	b082      	sub	sp, #8
 8014460:	af00      	add	r7, sp, #0
 8014462:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8014464:	205a      	movs	r0, #90	; 0x5a
 8014466:	f7ff ff4b 	bl	8014300 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 801446a:	2058      	movs	r0, #88	; 0x58
 801446c:	f7ff ff48 	bl	8014300 <__NVIC_EnableIRQ>
}
 8014470:	bf00      	nop
 8014472:	3708      	adds	r7, #8
 8014474:	46bd      	mov	sp, r7
 8014476:	bd80      	pop	{r7, pc}

08014478 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8014478:	b580      	push	{r7, lr}
 801447a:	b082      	sub	sp, #8
 801447c:	af00      	add	r7, sp, #0
 801447e:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8014480:	205a      	movs	r0, #90	; 0x5a
 8014482:	f7ff ff5b 	bl	801433c <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8014486:	2058      	movs	r0, #88	; 0x58
 8014488:	f7ff ff58 	bl	801433c <__NVIC_DisableIRQ>
}
 801448c:	bf00      	nop
 801448e:	3708      	adds	r7, #8
 8014490:	46bd      	mov	sp, r7
 8014492:	bd80      	pop	{r7, pc}

08014494 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8014494:	b480      	push	{r7}
 8014496:	b083      	sub	sp, #12
 8014498:	af00      	add	r7, sp, #0
 801449a:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 801449c:	4b11      	ldr	r3, [pc, #68]	; (80144e4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801449e:	68db      	ldr	r3, [r3, #12]
 80144a0:	b29b      	uxth	r3, r3
 80144a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80144a6:	b29b      	uxth	r3, r3
 80144a8:	3b01      	subs	r3, #1
 80144aa:	b29a      	uxth	r2, r3
 80144ac:	4b0e      	ldr	r3, [pc, #56]	; (80144e8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80144ae:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80144b0:	4b0c      	ldr	r3, [pc, #48]	; (80144e4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80144b2:	691b      	ldr	r3, [r3, #16]
 80144b4:	b29b      	uxth	r3, r3
 80144b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80144ba:	b29b      	uxth	r3, r3
 80144bc:	3b01      	subs	r3, #1
 80144be:	b29a      	uxth	r2, r3
 80144c0:	4b0a      	ldr	r3, [pc, #40]	; (80144ec <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 80144c2:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80144c4:	4b08      	ldr	r3, [pc, #32]	; (80144e8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80144c6:	881a      	ldrh	r2, [r3, #0]
 80144c8:	4b06      	ldr	r3, [pc, #24]	; (80144e4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80144ca:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80144cc:	4b05      	ldr	r3, [pc, #20]	; (80144e4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80144ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80144d0:	4a04      	ldr	r2, [pc, #16]	; (80144e4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80144d2:	f043 0301 	orr.w	r3, r3, #1
 80144d6:	6353      	str	r3, [r2, #52]	; 0x34
}
 80144d8:	bf00      	nop
 80144da:	370c      	adds	r7, #12
 80144dc:	46bd      	mov	sp, r7
 80144de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e2:	4770      	bx	lr
 80144e4:	40016800 	.word	0x40016800
 80144e8:	2000a0e0 	.word	0x2000a0e0
 80144ec:	2000a0e2 	.word	0x2000a0e2

080144f0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80144f0:	b480      	push	{r7}
 80144f2:	b083      	sub	sp, #12
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80144f8:	4b03      	ldr	r3, [pc, #12]	; (8014508 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80144fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80144fc:	4618      	mov	r0, r3
 80144fe:	370c      	adds	r7, #12
 8014500:	46bd      	mov	sp, r7
 8014502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014506:	4770      	bx	lr
 8014508:	40016884 	.word	0x40016884

0801450c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 801450c:	b480      	push	{r7}
 801450e:	b083      	sub	sp, #12
 8014510:	af00      	add	r7, sp, #0
 8014512:	6078      	str	r0, [r7, #4]
 8014514:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8014516:	4a06      	ldr	r2, [pc, #24]	; (8014530 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8014518:	683b      	ldr	r3, [r7, #0]
 801451a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 801451c:	4b05      	ldr	r3, [pc, #20]	; (8014534 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 801451e:	2201      	movs	r2, #1
 8014520:	625a      	str	r2, [r3, #36]	; 0x24
}
 8014522:	bf00      	nop
 8014524:	370c      	adds	r7, #12
 8014526:	46bd      	mov	sp, r7
 8014528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801452c:	4770      	bx	lr
 801452e:	bf00      	nop
 8014530:	40016884 	.word	0x40016884
 8014534:	40016800 	.word	0x40016800

08014538 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8014538:	b580      	push	{r7, lr}
 801453a:	b082      	sub	sp, #8
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
 8014540:	6039      	str	r1, [r7, #0]
  HAL::flushFrameBuffer(rect);
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	6839      	ldr	r1, [r7, #0]
 8014546:	4618      	mov	r0, r3
 8014548:	f000 fcdf 	bl	8014f0a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 801454c:	bf00      	nop
 801454e:	3708      	adds	r7, #8
 8014550:	46bd      	mov	sp, r7
 8014552:	bd80      	pop	{r7, pc}

08014554 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8014554:	b580      	push	{r7, lr}
 8014556:	b084      	sub	sp, #16
 8014558:	af00      	add	r7, sp, #0
 801455a:	60f8      	str	r0, [r7, #12]
 801455c:	60b9      	str	r1, [r7, #8]
 801455e:	607a      	str	r2, [r7, #4]
 8014560:	603b      	str	r3, [r7, #0]
  return HAL::blockCopy(dest, src, numBytes);
 8014562:	68f8      	ldr	r0, [r7, #12]
 8014564:	683b      	ldr	r3, [r7, #0]
 8014566:	687a      	ldr	r2, [r7, #4]
 8014568:	68b9      	ldr	r1, [r7, #8]
 801456a:	f000 fe02 	bl	8015172 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 801456e:	4603      	mov	r3, r0
}
 8014570:	4618      	mov	r0, r3
 8014572:	3710      	adds	r7, #16
 8014574:	46bd      	mov	sp, r7
 8014576:	bd80      	pop	{r7, pc}

08014578 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8014578:	b480      	push	{r7}
 801457a:	b085      	sub	sp, #20
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8014580:	4b0d      	ldr	r3, [pc, #52]	; (80145b8 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8014582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014584:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8014586:	4b0c      	ldr	r3, [pc, #48]	; (80145b8 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8014588:	68db      	ldr	r3, [r3, #12]
 801458a:	b29b      	uxth	r3, r3
 801458c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014590:	b29b      	uxth	r3, r3
 8014592:	3301      	adds	r3, #1
 8014594:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 8014596:	89fa      	ldrh	r2, [r7, #14]
 8014598:	89bb      	ldrh	r3, [r7, #12]
 801459a:	429a      	cmp	r2, r3
 801459c:	d304      	bcc.n	80145a8 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 801459e:	89fa      	ldrh	r2, [r7, #14]
 80145a0:	89bb      	ldrh	r3, [r7, #12]
 80145a2:	1ad3      	subs	r3, r2, r3
 80145a4:	b29b      	uxth	r3, r3
 80145a6:	e000      	b.n	80145aa <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 80145a8:	2300      	movs	r3, #0
}
 80145aa:	4618      	mov	r0, r3
 80145ac:	3714      	adds	r7, #20
 80145ae:	46bd      	mov	sp, r7
 80145b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b4:	4770      	bx	lr
 80145b6:	bf00      	nop
 80145b8:	40016800 	.word	0x40016800

080145bc <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 80145bc:	b580      	push	{r7, lr}
 80145be:	b082      	sub	sp, #8
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 80145c4:	4b1a      	ldr	r3, [pc, #104]	; (8014630 <HAL_LTDC_LineEventCallback+0x74>)
 80145c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145c8:	4a1a      	ldr	r2, [pc, #104]	; (8014634 <HAL_LTDC_LineEventCallback+0x78>)
 80145ca:	8812      	ldrh	r2, [r2, #0]
 80145cc:	4293      	cmp	r3, r2
 80145ce:	bf0c      	ite	eq
 80145d0:	2301      	moveq	r3, #1
 80145d2:	2300      	movne	r3, #0
 80145d4:	b2db      	uxtb	r3, r3
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d017      	beq.n	801460a <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80145da:	4b17      	ldr	r3, [pc, #92]	; (8014638 <HAL_LTDC_LineEventCallback+0x7c>)
 80145dc:	881b      	ldrh	r3, [r3, #0]
 80145de:	4619      	mov	r1, r3
 80145e0:	6878      	ldr	r0, [r7, #4]
 80145e2:	f7f3 fe51 	bl	8008288 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 80145e6:	f7fb fd35 	bl	8010054 <_ZN8touchgfx3HAL11getInstanceEv>
 80145ea:	4603      	mov	r3, r0
 80145ec:	4618      	mov	r0, r3
 80145ee:	f7ff fe26 	bl	801423e <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 80145f2:	f7fe fc9f 	bl	8012f34 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80145f6:	f7fb fd2d 	bl	8010054 <_ZN8touchgfx3HAL11getInstanceEv>
 80145fa:	4603      	mov	r3, r0
 80145fc:	4618      	mov	r0, r3
 80145fe:	f001 fa11 	bl	8015a24 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8014602:	2000      	movs	r0, #0
 8014604:	f7fe f9ce 	bl	80129a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8014608:	e00e      	b.n	8014628 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 801460a:	4b0a      	ldr	r3, [pc, #40]	; (8014634 <HAL_LTDC_LineEventCallback+0x78>)
 801460c:	881b      	ldrh	r3, [r3, #0]
 801460e:	4619      	mov	r1, r3
 8014610:	6878      	ldr	r0, [r7, #4]
 8014612:	f7f3 fe39 	bl	8008288 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8014616:	2000      	movs	r0, #0
 8014618:	f7fe f9cf 	bl	80129ba <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 801461c:	f7fb fd1a 	bl	8010054 <_ZN8touchgfx3HAL11getInstanceEv>
 8014620:	4603      	mov	r3, r0
 8014622:	4618      	mov	r0, r3
 8014624:	f7ff fded 	bl	8014202 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8014628:	bf00      	nop
 801462a:	3708      	adds	r7, #8
 801462c:	46bd      	mov	sp, r7
 801462e:	bd80      	pop	{r7, pc}
 8014630:	40016800 	.word	0x40016800
 8014634:	2000a0e0 	.word	0x2000a0e0
 8014638:	2000a0e2 	.word	0x2000a0e2

0801463c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801463c:	8880      	ldrh	r0, [r0, #4]
 801463e:	4770      	bx	lr

08014640 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8014640:	2300      	movs	r3, #0
 8014642:	8083      	strh	r3, [r0, #4]
 8014644:	4770      	bx	lr
	...

08014648 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8014648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801464a:	6803      	ldr	r3, [r0, #0]
 801464c:	4605      	mov	r5, r0
 801464e:	460e      	mov	r6, r1
 8014650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014652:	2100      	movs	r1, #0
 8014654:	4798      	blx	r3
 8014656:	682b      	ldr	r3, [r5, #0]
 8014658:	4604      	mov	r4, r0
 801465a:	6a1b      	ldr	r3, [r3, #32]
 801465c:	4628      	mov	r0, r5
 801465e:	4798      	blx	r3
 8014660:	88ab      	ldrh	r3, [r5, #4]
 8014662:	1b34      	subs	r4, r6, r4
 8014664:	b2a4      	uxth	r4, r4
 8014666:	fbb4 f4f0 	udiv	r4, r4, r0
 801466a:	42a3      	cmp	r3, r4
 801466c:	d805      	bhi.n	801467a <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 801466e:	4b0e      	ldr	r3, [pc, #56]	; (80146a8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8014670:	4a0e      	ldr	r2, [pc, #56]	; (80146ac <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8014672:	2120      	movs	r1, #32
 8014674:	480e      	ldr	r0, [pc, #56]	; (80146b0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8014676:	f012 fad5 	bl	8026c24 <__assert_func>
 801467a:	682b      	ldr	r3, [r5, #0]
 801467c:	2100      	movs	r1, #0
 801467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014680:	4628      	mov	r0, r5
 8014682:	4798      	blx	r3
 8014684:	682b      	ldr	r3, [r5, #0]
 8014686:	4607      	mov	r7, r0
 8014688:	6a1b      	ldr	r3, [r3, #32]
 801468a:	4628      	mov	r0, r5
 801468c:	4798      	blx	r3
 801468e:	1bf3      	subs	r3, r6, r7
 8014690:	b29b      	uxth	r3, r3
 8014692:	fbb3 f2f0 	udiv	r2, r3, r0
 8014696:	fb02 3010 	mls	r0, r2, r0, r3
 801469a:	b118      	cbz	r0, 80146a4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 801469c:	4b05      	ldr	r3, [pc, #20]	; (80146b4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 801469e:	4a03      	ldr	r2, [pc, #12]	; (80146ac <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80146a0:	2121      	movs	r1, #33	; 0x21
 80146a2:	e7e7      	b.n	8014674 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 80146a4:	4620      	mov	r0, r4
 80146a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146a8:	0802a8ac 	.word	0x0802a8ac
 80146ac:	0802aa1a 	.word	0x0802aa1a
 80146b0:	0802a8c1 	.word	0x0802a8c1
 80146b4:	0802a8ef 	.word	0x0802a8ef

080146b8 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80146b8:	b538      	push	{r3, r4, r5, lr}
 80146ba:	6803      	ldr	r3, [r0, #0]
 80146bc:	6a1b      	ldr	r3, [r3, #32]
 80146be:	460d      	mov	r5, r1
 80146c0:	4604      	mov	r4, r0
 80146c2:	4798      	blx	r3
 80146c4:	4285      	cmp	r5, r0
 80146c6:	d905      	bls.n	80146d4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 80146c8:	4b0c      	ldr	r3, [pc, #48]	; (80146fc <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 80146ca:	4a0d      	ldr	r2, [pc, #52]	; (8014700 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80146cc:	2132      	movs	r1, #50	; 0x32
 80146ce:	480d      	ldr	r0, [pc, #52]	; (8014704 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 80146d0:	f012 faa8 	bl	8026c24 <__assert_func>
 80146d4:	6823      	ldr	r3, [r4, #0]
 80146d6:	88a5      	ldrh	r5, [r4, #4]
 80146d8:	69db      	ldr	r3, [r3, #28]
 80146da:	4620      	mov	r0, r4
 80146dc:	4798      	blx	r3
 80146de:	4285      	cmp	r5, r0
 80146e0:	d303      	bcc.n	80146ea <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 80146e2:	4b09      	ldr	r3, [pc, #36]	; (8014708 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 80146e4:	4a06      	ldr	r2, [pc, #24]	; (8014700 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80146e6:	2133      	movs	r1, #51	; 0x33
 80146e8:	e7f1      	b.n	80146ce <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 80146ea:	6823      	ldr	r3, [r4, #0]
 80146ec:	88a1      	ldrh	r1, [r4, #4]
 80146ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146f0:	4620      	mov	r0, r4
 80146f2:	4798      	blx	r3
 80146f4:	88a3      	ldrh	r3, [r4, #4]
 80146f6:	3301      	adds	r3, #1
 80146f8:	80a3      	strh	r3, [r4, #4]
 80146fa:	bd38      	pop	{r3, r4, r5, pc}
 80146fc:	0802a969 	.word	0x0802a969
 8014700:	0802aa5d 	.word	0x0802aa5d
 8014704:	0802a8c1 	.word	0x0802a8c1
 8014708:	0802a980 	.word	0x0802a980

0801470c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801470c:	b570      	push	{r4, r5, r6, lr}
 801470e:	6803      	ldr	r3, [r0, #0]
 8014710:	6a1b      	ldr	r3, [r3, #32]
 8014712:	4616      	mov	r6, r2
 8014714:	4604      	mov	r4, r0
 8014716:	460d      	mov	r5, r1
 8014718:	4798      	blx	r3
 801471a:	4286      	cmp	r6, r0
 801471c:	d905      	bls.n	801472a <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 801471e:	4b06      	ldr	r3, [pc, #24]	; (8014738 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8014720:	4a06      	ldr	r2, [pc, #24]	; (801473c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8014722:	4807      	ldr	r0, [pc, #28]	; (8014740 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8014724:	213c      	movs	r1, #60	; 0x3c
 8014726:	f012 fa7d 	bl	8026c24 <__assert_func>
 801472a:	6823      	ldr	r3, [r4, #0]
 801472c:	4629      	mov	r1, r5
 801472e:	4620      	mov	r0, r4
 8014730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014732:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014736:	4718      	bx	r3
 8014738:	0802a969 	.word	0x0802a969
 801473c:	0802a9d0 	.word	0x0802a9d0
 8014740:	0802a8c1 	.word	0x0802a8c1

08014744 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8014744:	4770      	bx	lr
	...

08014748 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8014748:	4a02      	ldr	r2, [pc, #8]	; (8014754 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801474a:	6002      	str	r2, [r0, #0]
 801474c:	2200      	movs	r2, #0
 801474e:	8082      	strh	r2, [r0, #4]
 8014750:	4770      	bx	lr
 8014752:	bf00      	nop
 8014754:	0802a9a4 	.word	0x0802a9a4

08014758 <_ZN8touchgfx9Container13getFirstChildEv>:
 8014758:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801475a:	4770      	bx	lr

0801475c <_ZNK8touchgfx12DigitalClock14getDisplayModeEv>:
 801475c:	f890 002f 	ldrb.w	r0, [r0, #47]	; 0x2f
 8014760:	4770      	bx	lr

08014762 <_ZN8touchgfx12DigitalClock8setWidthEs>:
 8014762:	8101      	strh	r1, [r0, #8]
 8014764:	8781      	strh	r1, [r0, #60]	; 0x3c
 8014766:	4770      	bx	lr

08014768 <_ZN8touchgfx12DigitalClock9setHeightEs>:
 8014768:	8141      	strh	r1, [r0, #10]
 801476a:	87c1      	strh	r1, [r0, #62]	; 0x3e
 801476c:	4770      	bx	lr

0801476e <_ZN8touchgfx12DigitalClock8setAlphaEh>:
 801476e:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
 8014772:	4770      	bx	lr

08014774 <_ZNK8touchgfx12DigitalClock8getAlphaEv>:
 8014774:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8014778:	4770      	bx	lr

0801477a <_ZNK8touchgfx12DigitalClock8getColorEv>:
 801477a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801477c:	4770      	bx	lr

0801477e <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>:
 801477e:	6641      	str	r1, [r0, #100]	; 0x64
 8014780:	3034      	adds	r0, #52	; 0x34
 8014782:	f004 ba8e 	b.w	8018ca2 <_ZNK8touchgfx8Drawable10invalidateEv>
	...

08014788 <_ZN8touchgfx12DigitalClock12setBaselineYEs>:
 8014788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801478c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8014790:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014794:	4293      	cmp	r3, r2
 8014796:	4605      	mov	r5, r0
 8014798:	d026      	beq.n	80147e8 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x60>
 801479a:	6802      	ldr	r2, [r0, #0]
 801479c:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 80147a0:	6d56      	ldr	r6, [r2, #84]	; 0x54
 80147a2:	4a12      	ldr	r2, [pc, #72]	; (80147ec <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x64>)
 80147a4:	6812      	ldr	r2, [r2, #0]
 80147a6:	b28c      	uxth	r4, r1
 80147a8:	b92a      	cbnz	r2, 80147b6 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x2e>
 80147aa:	4b11      	ldr	r3, [pc, #68]	; (80147f0 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x68>)
 80147ac:	4a11      	ldr	r2, [pc, #68]	; (80147f4 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x6c>)
 80147ae:	21b1      	movs	r1, #177	; 0xb1
 80147b0:	4811      	ldr	r0, [pc, #68]	; (80147f8 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x70>)
 80147b2:	f012 fa37 	bl	8026c24 <__assert_func>
 80147b6:	4911      	ldr	r1, [pc, #68]	; (80147fc <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x74>)
 80147b8:	8809      	ldrh	r1, [r1, #0]
 80147ba:	4299      	cmp	r1, r3
 80147bc:	d803      	bhi.n	80147c6 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x3e>
 80147be:	4b10      	ldr	r3, [pc, #64]	; (8014800 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x78>)
 80147c0:	4a0c      	ldr	r2, [pc, #48]	; (80147f4 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x6c>)
 80147c2:	21b2      	movs	r1, #178	; 0xb2
 80147c4:	e7f4      	b.n	80147b0 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x28>
 80147c6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80147ca:	4b0e      	ldr	r3, [pc, #56]	; (8014804 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x7c>)
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80147d2:	6803      	ldr	r3, [r0, #0]
 80147d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147d6:	4798      	blx	r3
 80147d8:	1a22      	subs	r2, r4, r0
 80147da:	4639      	mov	r1, r7
 80147dc:	4628      	mov	r0, r5
 80147de:	4633      	mov	r3, r6
 80147e0:	b212      	sxth	r2, r2
 80147e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80147e6:	4718      	bx	r3
 80147e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147ec:	2000a140 	.word	0x2000a140
 80147f0:	0802aaef 	.word	0x0802aaef
 80147f4:	0802ac64 	.word	0x0802ac64
 80147f8:	0802ab31 	.word	0x0802ab31
 80147fc:	2000a144 	.word	0x2000a144
 8014800:	0802ab5a 	.word	0x0802ab5a
 8014804:	2000a148 	.word	0x2000a148

08014808 <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>:
 8014808:	b513      	push	{r0, r1, r4, lr}
 801480a:	4b08      	ldr	r3, [pc, #32]	; (801482c <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE+0x24>)
 801480c:	9300      	str	r3, [sp, #0]
 801480e:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8014812:	888b      	ldrh	r3, [r1, #4]
 8014814:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014818:	4669      	mov	r1, sp
 801481a:	4620      	mov	r0, r4
 801481c:	f001 fc57 	bl	80160ce <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 8014820:	4620      	mov	r0, r4
 8014822:	f004 fa3e 	bl	8018ca2 <_ZNK8touchgfx8Drawable10invalidateEv>
 8014826:	b002      	add	sp, #8
 8014828:	bd10      	pop	{r4, pc}
 801482a:	bf00      	nop
 801482c:	0802a0e0 	.word	0x0802a0e0

08014830 <_ZN8touchgfx12DigitalClock11updateClockEv>:
 8014830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014834:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8014838:	b085      	sub	sp, #20
 801483a:	4604      	mov	r4, r0
 801483c:	b9fb      	cbnz	r3, 801487e <_ZN8touchgfx12DigitalClock11updateClockEv+0x4e>
 801483e:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8014842:	4a3f      	ldr	r2, [pc, #252]	; (8014940 <_ZN8touchgfx12DigitalClock11updateClockEv+0x110>)
 8014844:	4e3f      	ldr	r6, [pc, #252]	; (8014944 <_ZN8touchgfx12DigitalClock11updateClockEv+0x114>)
 8014846:	f100 0574 	add.w	r5, r0, #116	; 0x74
 801484a:	2b00      	cmp	r3, #0
 801484c:	bf08      	it	eq
 801484e:	4616      	moveq	r6, r2
 8014850:	f000 f961 	bl	8014b16 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 8014854:	4607      	mov	r7, r0
 8014856:	4620      	mov	r0, r4
 8014858:	f000 f970 	bl	8014b3c <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 801485c:	4680      	mov	r8, r0
 801485e:	4620      	mov	r0, r4
 8014860:	f000 f965 	bl	8014b2e <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 8014864:	2800      	cmp	r0, #0
 8014866:	bf14      	ite	ne
 8014868:	2341      	movne	r3, #65	; 0x41
 801486a:	2350      	moveq	r3, #80	; 0x50
 801486c:	e9cd 8300 	strd	r8, r3, [sp]
 8014870:	4632      	mov	r2, r6
 8014872:	463b      	mov	r3, r7
 8014874:	210c      	movs	r1, #12
 8014876:	4628      	mov	r0, r5
 8014878:	f006 f9e2 	bl	801ac40 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801487c:	e016      	b.n	80148ac <_ZN8touchgfx12DigitalClock11updateClockEv+0x7c>
 801487e:	2b01      	cmp	r3, #1
 8014880:	d11b      	bne.n	80148ba <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 8014882:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8014886:	4a30      	ldr	r2, [pc, #192]	; (8014948 <_ZN8touchgfx12DigitalClock11updateClockEv+0x118>)
 8014888:	4d30      	ldr	r5, [pc, #192]	; (801494c <_ZN8touchgfx12DigitalClock11updateClockEv+0x11c>)
 801488a:	2b00      	cmp	r3, #0
 801488c:	bf08      	it	eq
 801488e:	4615      	moveq	r5, r2
 8014890:	f000 f93e 	bl	8014b10 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 8014894:	4606      	mov	r6, r0
 8014896:	4620      	mov	r0, r4
 8014898:	f000 f950 	bl	8014b3c <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 801489c:	4633      	mov	r3, r6
 801489e:	9000      	str	r0, [sp, #0]
 80148a0:	462a      	mov	r2, r5
 80148a2:	210c      	movs	r1, #12
 80148a4:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80148a8:	f006 f9ca 	bl	801ac40 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80148ac:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80148b0:	b005      	add	sp, #20
 80148b2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80148b6:	f004 b9f4 	b.w	8018ca2 <_ZNK8touchgfx8Drawable10invalidateEv>
 80148ba:	2b02      	cmp	r3, #2
 80148bc:	d125      	bne.n	801490a <_ZN8touchgfx12DigitalClock11updateClockEv+0xda>
 80148be:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 80148c2:	4a23      	ldr	r2, [pc, #140]	; (8014950 <_ZN8touchgfx12DigitalClock11updateClockEv+0x120>)
 80148c4:	4e23      	ldr	r6, [pc, #140]	; (8014954 <_ZN8touchgfx12DigitalClock11updateClockEv+0x124>)
 80148c6:	f100 0574 	add.w	r5, r0, #116	; 0x74
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	bf08      	it	eq
 80148ce:	4616      	moveq	r6, r2
 80148d0:	f000 f921 	bl	8014b16 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 80148d4:	4607      	mov	r7, r0
 80148d6:	4620      	mov	r0, r4
 80148d8:	f000 f930 	bl	8014b3c <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 80148dc:	4680      	mov	r8, r0
 80148de:	4620      	mov	r0, r4
 80148e0:	f000 f92f 	bl	8014b42 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 80148e4:	4681      	mov	r9, r0
 80148e6:	4620      	mov	r0, r4
 80148e8:	f000 f921 	bl	8014b2e <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 80148ec:	2800      	cmp	r0, #0
 80148ee:	bf14      	ite	ne
 80148f0:	2341      	movne	r3, #65	; 0x41
 80148f2:	2350      	moveq	r3, #80	; 0x50
 80148f4:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80148f8:	f8cd 8000 	str.w	r8, [sp]
 80148fc:	463b      	mov	r3, r7
 80148fe:	4632      	mov	r2, r6
 8014900:	210c      	movs	r1, #12
 8014902:	4628      	mov	r0, r5
 8014904:	f006 f99c 	bl	801ac40 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8014908:	e7d0      	b.n	80148ac <_ZN8touchgfx12DigitalClock11updateClockEv+0x7c>
 801490a:	2b03      	cmp	r3, #3
 801490c:	d1ce      	bne.n	80148ac <_ZN8touchgfx12DigitalClock11updateClockEv+0x7c>
 801490e:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8014912:	4a11      	ldr	r2, [pc, #68]	; (8014958 <_ZN8touchgfx12DigitalClock11updateClockEv+0x128>)
 8014914:	4d11      	ldr	r5, [pc, #68]	; (801495c <_ZN8touchgfx12DigitalClock11updateClockEv+0x12c>)
 8014916:	2b00      	cmp	r3, #0
 8014918:	bf08      	it	eq
 801491a:	4615      	moveq	r5, r2
 801491c:	f000 f8f8 	bl	8014b10 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 8014920:	4606      	mov	r6, r0
 8014922:	4620      	mov	r0, r4
 8014924:	f000 f90a 	bl	8014b3c <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8014928:	4607      	mov	r7, r0
 801492a:	4620      	mov	r0, r4
 801492c:	f000 f909 	bl	8014b42 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 8014930:	4633      	mov	r3, r6
 8014932:	e9cd 7000 	strd	r7, r0, [sp]
 8014936:	462a      	mov	r2, r5
 8014938:	210c      	movs	r1, #12
 801493a:	f104 0074 	add.w	r0, r4, #116	; 0x74
 801493e:	e79b      	b.n	8014878 <_ZN8touchgfx12DigitalClock11updateClockEv+0x48>
 8014940:	0802aa9b 	.word	0x0802aa9b
 8014944:	0802aac5 	.word	0x0802aac5
 8014948:	0802aaa7 	.word	0x0802aaa7
 801494c:	0802aae5 	.word	0x0802aae5
 8014950:	0802aac2 	.word	0x0802aac2
 8014954:	0802aaaf 	.word	0x0802aaaf
 8014958:	0802aae2 	.word	0x0802aae2
 801495c:	0802aad3 	.word	0x0802aad3

08014960 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8014960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014962:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8014964:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014968:	4299      	cmp	r1, r3
 801496a:	4606      	mov	r6, r0
 801496c:	d02a      	beq.n	80149c4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 801496e:	4b16      	ldr	r3, [pc, #88]	; (80149c8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	b92b      	cbnz	r3, 8014980 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 8014974:	4b15      	ldr	r3, [pc, #84]	; (80149cc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 8014976:	4a16      	ldr	r2, [pc, #88]	; (80149d0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8014978:	21b1      	movs	r1, #177	; 0xb1
 801497a:	4816      	ldr	r0, [pc, #88]	; (80149d4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 801497c:	f012 f952 	bl	8026c24 <__assert_func>
 8014980:	4a15      	ldr	r2, [pc, #84]	; (80149d8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 8014982:	8812      	ldrh	r2, [r2, #0]
 8014984:	428a      	cmp	r2, r1
 8014986:	d803      	bhi.n	8014990 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 8014988:	4b14      	ldr	r3, [pc, #80]	; (80149dc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 801498a:	4a11      	ldr	r2, [pc, #68]	; (80149d0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 801498c:	21b2      	movs	r1, #178	; 0xb2
 801498e:	e7f4      	b.n	801497a <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8014990:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8014994:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8014998:	4b11      	ldr	r3, [pc, #68]	; (80149e0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 801499a:	7854      	ldrb	r4, [r2, #1]
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80149a2:	682b      	ldr	r3, [r5, #0]
 80149a4:	69df      	ldr	r7, [r3, #28]
 80149a6:	4b0f      	ldr	r3, [pc, #60]	; (80149e4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 80149a8:	6818      	ldr	r0, [r3, #0]
 80149aa:	f7fd fad5 	bl	8011f58 <_ZNK8touchgfx5Texts7getTextEt>
 80149ae:	f3c4 0481 	ubfx	r4, r4, #2, #2
 80149b2:	2300      	movs	r3, #0
 80149b4:	9300      	str	r3, [sp, #0]
 80149b6:	4602      	mov	r2, r0
 80149b8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80149ba:	4621      	mov	r1, r4
 80149bc:	4628      	mov	r0, r5
 80149be:	47b8      	blx	r7
 80149c0:	b003      	add	sp, #12
 80149c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149c4:	2000      	movs	r0, #0
 80149c6:	e7fb      	b.n	80149c0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 80149c8:	2000a140 	.word	0x2000a140
 80149cc:	0802aaef 	.word	0x0802aaef
 80149d0:	0802ac64 	.word	0x0802ac64
 80149d4:	0802ab31 	.word	0x0802ab31
 80149d8:	2000a144 	.word	0x2000a144
 80149dc:	0802ab5a 	.word	0x0802ab5a
 80149e0:	2000a148 	.word	0x2000a148
 80149e4:	2000a14c 	.word	0x2000a14c

080149e8 <_ZNK8touchgfx12DigitalClock12getTextWidthEv>:
 80149e8:	b508      	push	{r3, lr}
 80149ea:	3034      	adds	r0, #52	; 0x34
 80149ec:	f7ff ffb8 	bl	8014960 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>
 80149f0:	bd08      	pop	{r3, pc}
	...

080149f4 <_ZN8touchgfx12DigitalClockC1Ev>:
 80149f4:	b510      	push	{r4, lr}
 80149f6:	4604      	mov	r4, r0
 80149f8:	f000 f870 	bl	8014adc <_ZN8touchgfx13AbstractClockC1Ev>
 80149fc:	2201      	movs	r2, #1
 80149fe:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8014a02:	4a1a      	ldr	r2, [pc, #104]	; (8014a6c <_ZN8touchgfx12DigitalClockC1Ev+0x78>)
 8014a04:	65e2      	str	r2, [r4, #92]	; 0x5c
 8014a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014a0a:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
 8014a0e:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8014a12:	66a2      	str	r2, [r4, #104]	; 0x68
 8014a14:	4b16      	ldr	r3, [pc, #88]	; (8014a70 <_ZN8touchgfx12DigitalClockC1Ev+0x7c>)
 8014a16:	4a17      	ldr	r2, [pc, #92]	; (8014a74 <_ZN8touchgfx12DigitalClockC1Ev+0x80>)
 8014a18:	6023      	str	r3, [r4, #0]
 8014a1a:	6362      	str	r2, [r4, #52]	; 0x34
 8014a1c:	2303      	movs	r3, #3
 8014a1e:	4622      	mov	r2, r4
 8014a20:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 8014a24:	2300      	movs	r3, #0
 8014a26:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8014a2a:	8723      	strh	r3, [r4, #56]	; 0x38
 8014a2c:	8763      	strh	r3, [r4, #58]	; 0x3a
 8014a2e:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8014a30:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8014a32:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8014a36:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 8014a3a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
 8014a3e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8014a42:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014a46:	6523      	str	r3, [r4, #80]	; 0x50
 8014a48:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8014a4c:	6663      	str	r3, [r4, #100]	; 0x64
 8014a4e:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
 8014a52:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 8014a56:	f822 3f74 	strh.w	r3, [r2, #116]!
 8014a5a:	4620      	mov	r0, r4
 8014a5c:	6722      	str	r2, [r4, #112]	; 0x70
 8014a5e:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8014a62:	f000 f909 	bl	8014c78 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014a66:	4620      	mov	r0, r4
 8014a68:	bd10      	pop	{r4, pc}
 8014a6a:	bf00      	nop
 8014a6c:	0802a0e0 	.word	0x0802a0e0
 8014a70:	0802abb4 	.word	0x0802abb4
 8014a74:	0802b8fc 	.word	0x0802b8fc

08014a78 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>:
 8014a78:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
 8014a7c:	4770      	bx	lr

08014a7e <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>:
 8014a7e:	b470      	push	{r4, r5, r6}
 8014a80:	2518      	movs	r5, #24
 8014a82:	fbb1 f6f5 	udiv	r6, r1, r5
 8014a86:	fb06 1115 	mls	r1, r6, r5, r1
 8014a8a:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 8014a8e:	213c      	movs	r1, #60	; 0x3c
 8014a90:	fbb2 f5f1 	udiv	r5, r2, r1
 8014a94:	fb05 2211 	mls	r2, r5, r1, r2
 8014a98:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
 8014a9c:	fbb3 f2f1 	udiv	r2, r3, r1
 8014aa0:	fb02 3311 	mls	r3, r2, r1, r3
 8014aa4:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
 8014aa8:	6803      	ldr	r3, [r0, #0]
 8014aaa:	bc70      	pop	{r4, r5, r6}
 8014aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014ab0:	4718      	bx	r3

08014ab2 <_ZN8touchgfx13AbstractClock13setTime12HourEhhhb>:
 8014ab2:	b4f0      	push	{r4, r5, r6, r7}
 8014ab4:	6804      	ldr	r4, [r0, #0]
 8014ab6:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8014aba:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8014abe:	2e00      	cmp	r6, #0
 8014ac0:	f04f 040c 	mov.w	r4, #12
 8014ac4:	fbb1 f7f4 	udiv	r7, r1, r4
 8014ac8:	fb07 1114 	mls	r1, r7, r4, r1
 8014acc:	bf18      	it	ne
 8014ace:	2400      	movne	r4, #0
 8014ad0:	fa54 f181 	uxtab	r1, r4, r1
 8014ad4:	46ac      	mov	ip, r5
 8014ad6:	b2c9      	uxtb	r1, r1
 8014ad8:	bcf0      	pop	{r4, r5, r6, r7}
 8014ada:	4760      	bx	ip

08014adc <_ZN8touchgfx13AbstractClockC1Ev>:
 8014adc:	2101      	movs	r1, #1
 8014ade:	2200      	movs	r2, #0
 8014ae0:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8014ae4:	4909      	ldr	r1, [pc, #36]	; (8014b0c <_ZN8touchgfx13AbstractClockC1Ev+0x30>)
 8014ae6:	8082      	strh	r2, [r0, #4]
 8014ae8:	80c2      	strh	r2, [r0, #6]
 8014aea:	8102      	strh	r2, [r0, #8]
 8014aec:	8142      	strh	r2, [r0, #10]
 8014aee:	8182      	strh	r2, [r0, #12]
 8014af0:	81c2      	strh	r2, [r0, #14]
 8014af2:	8202      	strh	r2, [r0, #16]
 8014af4:	8242      	strh	r2, [r0, #18]
 8014af6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8014afa:	61c2      	str	r2, [r0, #28]
 8014afc:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8014b00:	6001      	str	r1, [r0, #0]
 8014b02:	6282      	str	r2, [r0, #40]	; 0x28
 8014b04:	8582      	strh	r2, [r0, #44]	; 0x2c
 8014b06:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8014b0a:	4770      	bx	lr
 8014b0c:	0802ac9c 	.word	0x0802ac9c

08014b10 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>:
 8014b10:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8014b14:	4770      	bx	lr

08014b16 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>:
 8014b16:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8014b1a:	220c      	movs	r2, #12
 8014b1c:	f100 030b 	add.w	r3, r0, #11
 8014b20:	fb93 f0f2 	sdiv	r0, r3, r2
 8014b24:	fb02 3010 	mls	r0, r2, r0, r3
 8014b28:	3001      	adds	r0, #1
 8014b2a:	b2c0      	uxtb	r0, r0
 8014b2c:	4770      	bx	lr

08014b2e <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>:
 8014b2e:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8014b32:	280b      	cmp	r0, #11
 8014b34:	bf8c      	ite	hi
 8014b36:	2000      	movhi	r0, #0
 8014b38:	2001      	movls	r0, #1
 8014b3a:	4770      	bx	lr

08014b3c <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>:
 8014b3c:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8014b40:	4770      	bx	lr

08014b42 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>:
 8014b42:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 8014b46:	4770      	bx	lr

08014b48 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8014b48:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014b4a:	2000      	movs	r0, #0
 8014b4c:	b12b      	cbz	r3, 8014b5a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8014b4e:	b920      	cbnz	r0, 8014b5a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8014b50:	1a5a      	subs	r2, r3, r1
 8014b52:	4250      	negs	r0, r2
 8014b54:	4150      	adcs	r0, r2
 8014b56:	699b      	ldr	r3, [r3, #24]
 8014b58:	e7f8      	b.n	8014b4c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8014b5a:	4770      	bx	lr

08014b5c <_ZN8touchgfx9Container9removeAllEv>:
 8014b5c:	2200      	movs	r2, #0
 8014b5e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014b60:	b123      	cbz	r3, 8014b6c <_ZN8touchgfx9Container9removeAllEv+0x10>
 8014b62:	6999      	ldr	r1, [r3, #24]
 8014b64:	6281      	str	r1, [r0, #40]	; 0x28
 8014b66:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8014b6a:	e7f8      	b.n	8014b5e <_ZN8touchgfx9Container9removeAllEv+0x2>
 8014b6c:	4770      	bx	lr

08014b6e <_ZN8touchgfx9Container6unlinkEv>:
 8014b6e:	2300      	movs	r3, #0
 8014b70:	6283      	str	r3, [r0, #40]	; 0x28
 8014b72:	4770      	bx	lr

08014b74 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8014b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b78:	461f      	mov	r7, r3
 8014b7a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8014b7e:	460d      	mov	r5, r1
 8014b80:	4616      	mov	r6, r2
 8014b82:	b103      	cbz	r3, 8014b86 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8014b84:	6038      	str	r0, [r7, #0]
 8014b86:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014b88:	b314      	cbz	r4, 8014bd0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8014b8a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8014b8e:	b1eb      	cbz	r3, 8014bcc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014b90:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8014b94:	428d      	cmp	r5, r1
 8014b96:	db19      	blt.n	8014bcc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014b98:	8923      	ldrh	r3, [r4, #8]
 8014b9a:	b289      	uxth	r1, r1
 8014b9c:	440b      	add	r3, r1
 8014b9e:	b21b      	sxth	r3, r3
 8014ba0:	429d      	cmp	r5, r3
 8014ba2:	da13      	bge.n	8014bcc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014ba4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8014ba8:	4296      	cmp	r6, r2
 8014baa:	db0f      	blt.n	8014bcc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014bac:	8963      	ldrh	r3, [r4, #10]
 8014bae:	b292      	uxth	r2, r2
 8014bb0:	4413      	add	r3, r2
 8014bb2:	b21b      	sxth	r3, r3
 8014bb4:	429e      	cmp	r6, r3
 8014bb6:	da09      	bge.n	8014bcc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014bb8:	6823      	ldr	r3, [r4, #0]
 8014bba:	1ab2      	subs	r2, r6, r2
 8014bbc:	1a69      	subs	r1, r5, r1
 8014bbe:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8014bc2:	b212      	sxth	r2, r2
 8014bc4:	463b      	mov	r3, r7
 8014bc6:	b209      	sxth	r1, r1
 8014bc8:	4620      	mov	r0, r4
 8014bca:	47c0      	blx	r8
 8014bcc:	69a4      	ldr	r4, [r4, #24]
 8014bce:	e7db      	b.n	8014b88 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8014bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014bd4 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8014bd4:	2200      	movs	r2, #0
 8014bd6:	8002      	strh	r2, [r0, #0]
 8014bd8:	8042      	strh	r2, [r0, #2]
 8014bda:	8082      	strh	r2, [r0, #4]
 8014bdc:	80c2      	strh	r2, [r0, #6]
 8014bde:	4770      	bx	lr

08014be0 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8014be0:	b570      	push	{r4, r5, r6, lr}
 8014be2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014be4:	460d      	mov	r5, r1
 8014be6:	4616      	mov	r6, r2
 8014be8:	b13c      	cbz	r4, 8014bfa <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8014bea:	6823      	ldr	r3, [r4, #0]
 8014bec:	4620      	mov	r0, r4
 8014bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014bf0:	4632      	mov	r2, r6
 8014bf2:	4629      	mov	r1, r5
 8014bf4:	4798      	blx	r3
 8014bf6:	69a4      	ldr	r4, [r4, #24]
 8014bf8:	e7f6      	b.n	8014be8 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8014bfa:	bd70      	pop	{r4, r5, r6, pc}

08014bfc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8014bfc:	b538      	push	{r3, r4, r5, lr}
 8014bfe:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014c00:	460d      	mov	r5, r1
 8014c02:	b134      	cbz	r4, 8014c12 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8014c04:	682b      	ldr	r3, [r5, #0]
 8014c06:	4621      	mov	r1, r4
 8014c08:	689b      	ldr	r3, [r3, #8]
 8014c0a:	4628      	mov	r0, r5
 8014c0c:	4798      	blx	r3
 8014c0e:	69a4      	ldr	r4, [r4, #24]
 8014c10:	e7f7      	b.n	8014c02 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8014c12:	bd38      	pop	{r3, r4, r5, pc}

08014c14 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8014c14:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014c16:	b19b      	cbz	r3, 8014c40 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014c18:	428b      	cmp	r3, r1
 8014c1a:	d109      	bne.n	8014c30 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8014c1c:	699a      	ldr	r2, [r3, #24]
 8014c1e:	2100      	movs	r1, #0
 8014c20:	6159      	str	r1, [r3, #20]
 8014c22:	6282      	str	r2, [r0, #40]	; 0x28
 8014c24:	b902      	cbnz	r2, 8014c28 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8014c26:	4770      	bx	lr
 8014c28:	6199      	str	r1, [r3, #24]
 8014c2a:	4770      	bx	lr
 8014c2c:	4613      	mov	r3, r2
 8014c2e:	b13a      	cbz	r2, 8014c40 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014c30:	699a      	ldr	r2, [r3, #24]
 8014c32:	428a      	cmp	r2, r1
 8014c34:	d1fa      	bne.n	8014c2c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8014c36:	698a      	ldr	r2, [r1, #24]
 8014c38:	619a      	str	r2, [r3, #24]
 8014c3a:	2300      	movs	r3, #0
 8014c3c:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8014c40:	4770      	bx	lr

08014c42 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8014c42:	b410      	push	{r4}
 8014c44:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014c46:	4604      	mov	r4, r0
 8014c48:	b92b      	cbnz	r3, 8014c56 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8014c4a:	6803      	ldr	r3, [r0, #0]
 8014c4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014c52:	4611      	mov	r1, r2
 8014c54:	4718      	bx	r3
 8014c56:	b941      	cbnz	r1, 8014c6a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8014c58:	6193      	str	r3, [r2, #24]
 8014c5a:	6282      	str	r2, [r0, #40]	; 0x28
 8014c5c:	6154      	str	r4, [r2, #20]
 8014c5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014c62:	4770      	bx	lr
 8014c64:	4603      	mov	r3, r0
 8014c66:	2800      	cmp	r0, #0
 8014c68:	d0f9      	beq.n	8014c5e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8014c6a:	4299      	cmp	r1, r3
 8014c6c:	6998      	ldr	r0, [r3, #24]
 8014c6e:	d1f9      	bne.n	8014c64 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8014c70:	6190      	str	r0, [r2, #24]
 8014c72:	618a      	str	r2, [r1, #24]
 8014c74:	e7f2      	b.n	8014c5c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08014c78 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8014c78:	4288      	cmp	r0, r1
 8014c7a:	b508      	push	{r3, lr}
 8014c7c:	d105      	bne.n	8014c8a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8014c7e:	4b11      	ldr	r3, [pc, #68]	; (8014cc4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8014c80:	4a11      	ldr	r2, [pc, #68]	; (8014cc8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014c82:	2123      	movs	r1, #35	; 0x23
 8014c84:	4811      	ldr	r0, [pc, #68]	; (8014ccc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8014c86:	f011 ffcd 	bl	8026c24 <__assert_func>
 8014c8a:	694b      	ldr	r3, [r1, #20]
 8014c8c:	b11b      	cbz	r3, 8014c96 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8014c8e:	4b10      	ldr	r3, [pc, #64]	; (8014cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8014c90:	4a0d      	ldr	r2, [pc, #52]	; (8014cc8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014c92:	2124      	movs	r1, #36	; 0x24
 8014c94:	e7f6      	b.n	8014c84 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8014c96:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8014c9a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014c9c:	b913      	cbnz	r3, 8014ca4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8014c9e:	6281      	str	r1, [r0, #40]	; 0x28
 8014ca0:	bd08      	pop	{r3, pc}
 8014ca2:	4613      	mov	r3, r2
 8014ca4:	699a      	ldr	r2, [r3, #24]
 8014ca6:	b12a      	cbz	r2, 8014cb4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8014ca8:	428b      	cmp	r3, r1
 8014caa:	d1fa      	bne.n	8014ca2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8014cac:	4b09      	ldr	r3, [pc, #36]	; (8014cd4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8014cae:	4a06      	ldr	r2, [pc, #24]	; (8014cc8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014cb0:	2135      	movs	r1, #53	; 0x35
 8014cb2:	e7e7      	b.n	8014c84 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8014cb4:	428b      	cmp	r3, r1
 8014cb6:	d103      	bne.n	8014cc0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8014cb8:	4b06      	ldr	r3, [pc, #24]	; (8014cd4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8014cba:	4a03      	ldr	r2, [pc, #12]	; (8014cc8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014cbc:	2138      	movs	r1, #56	; 0x38
 8014cbe:	e7e1      	b.n	8014c84 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8014cc0:	6199      	str	r1, [r3, #24]
 8014cc2:	e7ed      	b.n	8014ca0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8014cc4:	0802ad28 	.word	0x0802ad28
 8014cc8:	0802ae78 	.word	0x0802ae78
 8014ccc:	0802ad54 	.word	0x0802ad54
 8014cd0:	0802ad87 	.word	0x0802ad87
 8014cd4:	0802adbd 	.word	0x0802adbd

08014cd8 <_ZN8touchgfx4RectaNERKS0_>:
 8014cd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014cdc:	f9b1 7000 	ldrsh.w	r7, [r1]
 8014ce0:	888c      	ldrh	r4, [r1, #4]
 8014ce2:	f9b0 9000 	ldrsh.w	r9, [r0]
 8014ce6:	443c      	add	r4, r7
 8014ce8:	b2a4      	uxth	r4, r4
 8014cea:	fa0f f884 	sxth.w	r8, r4
 8014cee:	45c1      	cmp	r9, r8
 8014cf0:	da2f      	bge.n	8014d52 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014cf2:	8882      	ldrh	r2, [r0, #4]
 8014cf4:	444a      	add	r2, r9
 8014cf6:	b292      	uxth	r2, r2
 8014cf8:	fa0f fe82 	sxth.w	lr, r2
 8014cfc:	4577      	cmp	r7, lr
 8014cfe:	da28      	bge.n	8014d52 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014d00:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8014d04:	88cb      	ldrh	r3, [r1, #6]
 8014d06:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8014d0a:	442b      	add	r3, r5
 8014d0c:	b21b      	sxth	r3, r3
 8014d0e:	429e      	cmp	r6, r3
 8014d10:	da1f      	bge.n	8014d52 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014d12:	88c3      	ldrh	r3, [r0, #6]
 8014d14:	4433      	add	r3, r6
 8014d16:	b29b      	uxth	r3, r3
 8014d18:	fa0f fc83 	sxth.w	ip, r3
 8014d1c:	4565      	cmp	r5, ip
 8014d1e:	da18      	bge.n	8014d52 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014d20:	454f      	cmp	r7, r9
 8014d22:	bfb8      	it	lt
 8014d24:	464f      	movlt	r7, r9
 8014d26:	42b5      	cmp	r5, r6
 8014d28:	bfb8      	it	lt
 8014d2a:	4635      	movlt	r5, r6
 8014d2c:	45f0      	cmp	r8, lr
 8014d2e:	bfd8      	it	le
 8014d30:	4622      	movle	r2, r4
 8014d32:	1bd2      	subs	r2, r2, r7
 8014d34:	8082      	strh	r2, [r0, #4]
 8014d36:	884a      	ldrh	r2, [r1, #2]
 8014d38:	88c9      	ldrh	r1, [r1, #6]
 8014d3a:	8007      	strh	r7, [r0, #0]
 8014d3c:	440a      	add	r2, r1
 8014d3e:	b292      	uxth	r2, r2
 8014d40:	b211      	sxth	r1, r2
 8014d42:	458c      	cmp	ip, r1
 8014d44:	bfa8      	it	ge
 8014d46:	4613      	movge	r3, r2
 8014d48:	1b5b      	subs	r3, r3, r5
 8014d4a:	80c3      	strh	r3, [r0, #6]
 8014d4c:	8045      	strh	r5, [r0, #2]
 8014d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d52:	2300      	movs	r3, #0
 8014d54:	8003      	strh	r3, [r0, #0]
 8014d56:	8043      	strh	r3, [r0, #2]
 8014d58:	8083      	strh	r3, [r0, #4]
 8014d5a:	80c3      	strh	r3, [r0, #6]
 8014d5c:	e7f7      	b.n	8014d4e <_ZN8touchgfx4RectaNERKS0_+0x76>

08014d5e <_ZNK8touchgfx4Rect7isEmptyEv>:
 8014d5e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	dd06      	ble.n	8014d74 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8014d66:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8014d6a:	2800      	cmp	r0, #0
 8014d6c:	bfcc      	ite	gt
 8014d6e:	2000      	movgt	r0, #0
 8014d70:	2001      	movle	r0, #1
 8014d72:	4770      	bx	lr
 8014d74:	2001      	movs	r0, #1
 8014d76:	4770      	bx	lr

08014d78 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8014d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8014d80:	8003      	strh	r3, [r0, #0]
 8014d82:	4604      	mov	r4, r0
 8014d84:	8043      	strh	r3, [r0, #2]
 8014d86:	8083      	strh	r3, [r0, #4]
 8014d88:	80c3      	strh	r3, [r0, #6]
 8014d8a:	2d00      	cmp	r5, #0
 8014d8c:	d040      	beq.n	8014e10 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8014d8e:	1d28      	adds	r0, r5, #4
 8014d90:	f7ff ffe5 	bl	8014d5e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014d94:	b988      	cbnz	r0, 8014dba <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8014d96:	4620      	mov	r0, r4
 8014d98:	f7ff ffe1 	bl	8014d5e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014d9c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8014da0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8014da4:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8014da8:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8014dac:	b138      	cbz	r0, 8014dbe <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8014dae:	8022      	strh	r2, [r4, #0]
 8014db0:	8063      	strh	r3, [r4, #2]
 8014db2:	f8a4 e004 	strh.w	lr, [r4, #4]
 8014db6:	f8a4 c006 	strh.w	ip, [r4, #6]
 8014dba:	69ad      	ldr	r5, [r5, #24]
 8014dbc:	e7e5      	b.n	8014d8a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8014dbe:	f9b4 0000 	ldrsh.w	r0, [r4]
 8014dc2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8014dc6:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8014dca:	4290      	cmp	r0, r2
 8014dcc:	4607      	mov	r7, r0
 8014dce:	bfa8      	it	ge
 8014dd0:	4617      	movge	r7, r2
 8014dd2:	4472      	add	r2, lr
 8014dd4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8014dd8:	8027      	strh	r7, [r4, #0]
 8014dda:	4299      	cmp	r1, r3
 8014ddc:	460e      	mov	r6, r1
 8014dde:	4440      	add	r0, r8
 8014de0:	bfa8      	it	ge
 8014de2:	461e      	movge	r6, r3
 8014de4:	4471      	add	r1, lr
 8014de6:	4463      	add	r3, ip
 8014de8:	b200      	sxth	r0, r0
 8014dea:	b212      	sxth	r2, r2
 8014dec:	b209      	sxth	r1, r1
 8014dee:	b21b      	sxth	r3, r3
 8014df0:	4290      	cmp	r0, r2
 8014df2:	bfac      	ite	ge
 8014df4:	ebc7 0200 	rsbge	r2, r7, r0
 8014df8:	ebc7 0202 	rsblt	r2, r7, r2
 8014dfc:	4299      	cmp	r1, r3
 8014dfe:	bfac      	ite	ge
 8014e00:	ebc6 0301 	rsbge	r3, r6, r1
 8014e04:	ebc6 0303 	rsblt	r3, r6, r3
 8014e08:	8066      	strh	r6, [r4, #2]
 8014e0a:	80a2      	strh	r2, [r4, #4]
 8014e0c:	80e3      	strh	r3, [r4, #6]
 8014e0e:	e7d4      	b.n	8014dba <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8014e10:	4620      	mov	r0, r4
 8014e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014e16 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8014e16:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014e1a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8014e1e:	b383      	cbz	r3, 8014e82 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014e20:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014e22:	b374      	cbz	r4, 8014e82 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014e24:	f9b1 5000 	ldrsh.w	r5, [r1]
 8014e28:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8014e2c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8014e30:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8014e34:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8014e38:	b303      	cbz	r3, 8014e7c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8014e3a:	4668      	mov	r0, sp
 8014e3c:	1d21      	adds	r1, r4, #4
 8014e3e:	f8ad 5000 	strh.w	r5, [sp]
 8014e42:	f8ad 6002 	strh.w	r6, [sp, #2]
 8014e46:	f8ad 7004 	strh.w	r7, [sp, #4]
 8014e4a:	f8ad 8006 	strh.w	r8, [sp, #6]
 8014e4e:	f7ff ff43 	bl	8014cd8 <_ZN8touchgfx4RectaNERKS0_>
 8014e52:	4668      	mov	r0, sp
 8014e54:	f7ff ff83 	bl	8014d5e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014e58:	b980      	cbnz	r0, 8014e7c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8014e5a:	f8bd 3000 	ldrh.w	r3, [sp]
 8014e5e:	88a2      	ldrh	r2, [r4, #4]
 8014e60:	1a9b      	subs	r3, r3, r2
 8014e62:	f8ad 3000 	strh.w	r3, [sp]
 8014e66:	88e2      	ldrh	r2, [r4, #6]
 8014e68:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014e6c:	1a9b      	subs	r3, r3, r2
 8014e6e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014e72:	6823      	ldr	r3, [r4, #0]
 8014e74:	4669      	mov	r1, sp
 8014e76:	689b      	ldr	r3, [r3, #8]
 8014e78:	4620      	mov	r0, r4
 8014e7a:	4798      	blx	r3
 8014e7c:	69a4      	ldr	r4, [r4, #24]
 8014e7e:	2c00      	cmp	r4, #0
 8014e80:	d1d8      	bne.n	8014e34 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8014e82:	b002      	add	sp, #8
 8014e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014e88 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8014e88:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014e8a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8014e8e:	460d      	mov	r5, r1
 8014e90:	4616      	mov	r6, r2
 8014e92:	b323      	cbz	r3, 8014ede <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8014e94:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014e96:	b314      	cbz	r4, 8014ede <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8014e98:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8014e9c:	b1eb      	cbz	r3, 8014eda <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8014e9e:	6828      	ldr	r0, [r5, #0]
 8014ea0:	6869      	ldr	r1, [r5, #4]
 8014ea2:	466b      	mov	r3, sp
 8014ea4:	c303      	stmia	r3!, {r0, r1}
 8014ea6:	4668      	mov	r0, sp
 8014ea8:	1d21      	adds	r1, r4, #4
 8014eaa:	f7ff ff15 	bl	8014cd8 <_ZN8touchgfx4RectaNERKS0_>
 8014eae:	4668      	mov	r0, sp
 8014eb0:	f7ff ff55 	bl	8014d5e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014eb4:	b988      	cbnz	r0, 8014eda <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8014eb6:	f8bd 3000 	ldrh.w	r3, [sp]
 8014eba:	88a2      	ldrh	r2, [r4, #4]
 8014ebc:	1a9b      	subs	r3, r3, r2
 8014ebe:	f8ad 3000 	strh.w	r3, [sp]
 8014ec2:	88e2      	ldrh	r2, [r4, #6]
 8014ec4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014ec8:	1a9b      	subs	r3, r3, r2
 8014eca:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014ece:	6823      	ldr	r3, [r4, #0]
 8014ed0:	4632      	mov	r2, r6
 8014ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014ed4:	4669      	mov	r1, sp
 8014ed6:	4620      	mov	r0, r4
 8014ed8:	4798      	blx	r3
 8014eda:	69a4      	ldr	r4, [r4, #24]
 8014edc:	e7db      	b.n	8014e96 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8014ede:	b002      	add	sp, #8
 8014ee0:	bd70      	pop	{r4, r5, r6, pc}

08014ee2 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8014ee2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014ee6:	4770      	bx	lr

08014ee8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8014ee8:	b513      	push	{r0, r1, r4, lr}
 8014eea:	6803      	ldr	r3, [r0, #0]
 8014eec:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	e9cd 3300 	strd	r3, r3, [sp]
 8014ef6:	466b      	mov	r3, sp
 8014ef8:	47a0      	blx	r4
 8014efa:	b002      	add	sp, #8
 8014efc:	bd10      	pop	{r4, pc}

08014efe <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8014efe:	2301      	movs	r3, #1
 8014f00:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8014f04:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8014f08:	4770      	bx	lr

08014f0a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8014f0a:	2301      	movs	r3, #1
 8014f0c:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8014f10:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8014f14:	4770      	bx	lr

08014f16 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8014f16:	6843      	ldr	r3, [r0, #4]
 8014f18:	2201      	movs	r2, #1
 8014f1a:	725a      	strb	r2, [r3, #9]
 8014f1c:	6840      	ldr	r0, [r0, #4]
 8014f1e:	6803      	ldr	r3, [r0, #0]
 8014f20:	691b      	ldr	r3, [r3, #16]
 8014f22:	4718      	bx	r3

08014f24 <_ZN8touchgfx3HAL8flushDMAEv>:
 8014f24:	6840      	ldr	r0, [r0, #4]
 8014f26:	6803      	ldr	r3, [r0, #0]
 8014f28:	689b      	ldr	r3, [r3, #8]
 8014f2a:	4718      	bx	r3

08014f2c <_ZN8touchgfx3HAL10beginFrameEv>:
 8014f2c:	4b04      	ldr	r3, [pc, #16]	; (8014f40 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8014f2e:	781b      	ldrb	r3, [r3, #0]
 8014f30:	b123      	cbz	r3, 8014f3c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8014f32:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8014f36:	f080 0001 	eor.w	r0, r0, #1
 8014f3a:	4770      	bx	lr
 8014f3c:	2001      	movs	r0, #1
 8014f3e:	4770      	bx	lr
 8014f40:	2000a0ee 	.word	0x2000a0ee

08014f44 <_ZN8touchgfx3HAL8endFrameEv>:
 8014f44:	b510      	push	{r4, lr}
 8014f46:	4604      	mov	r4, r0
 8014f48:	6840      	ldr	r0, [r0, #4]
 8014f4a:	6803      	ldr	r3, [r0, #0]
 8014f4c:	689b      	ldr	r3, [r3, #8]
 8014f4e:	4798      	blx	r3
 8014f50:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8014f54:	b113      	cbz	r3, 8014f5c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8014f56:	2301      	movs	r3, #1
 8014f58:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8014f5c:	bd10      	pop	{r4, pc}

08014f5e <_ZN8touchgfx3HAL9taskEntryEv>:
 8014f5e:	b508      	push	{r3, lr}
 8014f60:	6803      	ldr	r3, [r0, #0]
 8014f62:	4604      	mov	r4, r0
 8014f64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014f66:	4798      	blx	r3
 8014f68:	6823      	ldr	r3, [r4, #0]
 8014f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014f6c:	4620      	mov	r0, r4
 8014f6e:	4798      	blx	r3
 8014f70:	f7fd ffec 	bl	8012f4c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8014f74:	6823      	ldr	r3, [r4, #0]
 8014f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014f78:	e7f8      	b.n	8014f6c <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08014f7c <_ZN8touchgfx3HAL4tickEv>:
 8014f7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014f7e:	6803      	ldr	r3, [r0, #0]
 8014f80:	4d5c      	ldr	r5, [pc, #368]	; (80150f4 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8014f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014f86:	4604      	mov	r4, r0
 8014f88:	4798      	blx	r3
 8014f8a:	2800      	cmp	r0, #0
 8014f8c:	f000 8097 	beq.w	80150be <_ZN8touchgfx3HAL4tickEv+0x142>
 8014f90:	2001      	movs	r0, #1
 8014f92:	f7fd fd07 	bl	80129a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8014f96:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8014f9a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8014f9e:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8014fa2:	2600      	movs	r6, #0
 8014fa4:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8014fa8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8014fac:	b133      	cbz	r3, 8014fbc <_ZN8touchgfx3HAL4tickEv+0x40>
 8014fae:	6823      	ldr	r3, [r4, #0]
 8014fb0:	4620      	mov	r0, r4
 8014fb2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014fb6:	4798      	blx	r3
 8014fb8:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8014fbc:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8014fc0:	6862      	ldr	r2, [r4, #4]
 8014fc2:	f083 0301 	eor.w	r3, r3, #1
 8014fc6:	7253      	strb	r3, [r2, #9]
 8014fc8:	2601      	movs	r6, #1
 8014fca:	702e      	strb	r6, [r5, #0]
 8014fcc:	f002 ff0e 	bl	8017dec <_ZN8touchgfx11Application11getInstanceEv>
 8014fd0:	6803      	ldr	r3, [r0, #0]
 8014fd2:	4631      	mov	r1, r6
 8014fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014fd6:	4798      	blx	r3
 8014fd8:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8014fdc:	b90b      	cbnz	r3, 8014fe2 <_ZN8touchgfx3HAL4tickEv+0x66>
 8014fde:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8014fe2:	f002 ff03 	bl	8017dec <_ZN8touchgfx11Application11getInstanceEv>
 8014fe6:	6803      	ldr	r3, [r0, #0]
 8014fe8:	695b      	ldr	r3, [r3, #20]
 8014fea:	4798      	blx	r3
 8014fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014fee:	6803      	ldr	r3, [r0, #0]
 8014ff0:	691b      	ldr	r3, [r3, #16]
 8014ff2:	4798      	blx	r3
 8014ff4:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8014ff8:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8014ffc:	3b01      	subs	r3, #1
 8014ffe:	b2db      	uxtb	r3, r3
 8015000:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015004:	b10a      	cbz	r2, 801500a <_ZN8touchgfx3HAL4tickEv+0x8e>
 8015006:	2b00      	cmp	r3, #0
 8015008:	d1eb      	bne.n	8014fe2 <_ZN8touchgfx3HAL4tickEv+0x66>
 801500a:	4a3b      	ldr	r2, [pc, #236]	; (80150f8 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801500c:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8015010:	7813      	ldrb	r3, [r2, #0]
 8015012:	3301      	adds	r3, #1
 8015014:	b25b      	sxtb	r3, r3
 8015016:	4299      	cmp	r1, r3
 8015018:	7013      	strb	r3, [r2, #0]
 801501a:	dc10      	bgt.n	801503e <_ZN8touchgfx3HAL4tickEv+0xc2>
 801501c:	68e0      	ldr	r0, [r4, #12]
 801501e:	2300      	movs	r3, #0
 8015020:	7013      	strb	r3, [r2, #0]
 8015022:	6803      	ldr	r3, [r0, #0]
 8015024:	aa03      	add	r2, sp, #12
 8015026:	68db      	ldr	r3, [r3, #12]
 8015028:	a902      	add	r1, sp, #8
 801502a:	4798      	blx	r3
 801502c:	6823      	ldr	r3, [r4, #0]
 801502e:	2800      	cmp	r0, #0
 8015030:	d051      	beq.n	80150d6 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8015032:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015036:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801503a:	4620      	mov	r0, r4
 801503c:	4798      	blx	r3
 801503e:	6960      	ldr	r0, [r4, #20]
 8015040:	2300      	movs	r3, #0
 8015042:	f88d 3007 	strb.w	r3, [sp, #7]
 8015046:	b158      	cbz	r0, 8015060 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015048:	6803      	ldr	r3, [r0, #0]
 801504a:	f10d 0107 	add.w	r1, sp, #7
 801504e:	68db      	ldr	r3, [r3, #12]
 8015050:	4798      	blx	r3
 8015052:	b128      	cbz	r0, 8015060 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015056:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801505a:	6803      	ldr	r3, [r0, #0]
 801505c:	68db      	ldr	r3, [r3, #12]
 801505e:	4798      	blx	r3
 8015060:	f104 001c 	add.w	r0, r4, #28
 8015064:	f011 fbfa 	bl	802685c <_ZN8touchgfx8Gestures4tickEv>
 8015068:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801506c:	b30b      	cbz	r3, 80150b2 <_ZN8touchgfx3HAL4tickEv+0x136>
 801506e:	6920      	ldr	r0, [r4, #16]
 8015070:	6803      	ldr	r3, [r0, #0]
 8015072:	691b      	ldr	r3, [r3, #16]
 8015074:	4798      	blx	r3
 8015076:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015078:	4606      	mov	r6, r0
 801507a:	b903      	cbnz	r3, 801507e <_ZN8touchgfx3HAL4tickEv+0x102>
 801507c:	6720      	str	r0, [r4, #112]	; 0x70
 801507e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015080:	4a1e      	ldr	r2, [pc, #120]	; (80150fc <_ZN8touchgfx3HAL4tickEv+0x180>)
 8015082:	1af3      	subs	r3, r6, r3
 8015084:	4293      	cmp	r3, r2
 8015086:	d914      	bls.n	80150b2 <_ZN8touchgfx3HAL4tickEv+0x136>
 8015088:	6920      	ldr	r0, [r4, #16]
 801508a:	6803      	ldr	r3, [r0, #0]
 801508c:	699b      	ldr	r3, [r3, #24]
 801508e:	4798      	blx	r3
 8015090:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015092:	2264      	movs	r2, #100	; 0x64
 8015094:	1af3      	subs	r3, r6, r3
 8015096:	fbb3 f3f2 	udiv	r3, r3, r2
 801509a:	fbb0 f0f3 	udiv	r0, r0, r3
 801509e:	2800      	cmp	r0, #0
 80150a0:	dc1e      	bgt.n	80150e0 <_ZN8touchgfx3HAL4tickEv+0x164>
 80150a2:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80150a6:	6920      	ldr	r0, [r4, #16]
 80150a8:	6803      	ldr	r3, [r0, #0]
 80150aa:	2100      	movs	r1, #0
 80150ac:	69db      	ldr	r3, [r3, #28]
 80150ae:	4798      	blx	r3
 80150b0:	6726      	str	r6, [r4, #112]	; 0x70
 80150b2:	f002 fe9b 	bl	8017dec <_ZN8touchgfx11Application11getInstanceEv>
 80150b6:	6803      	ldr	r3, [r0, #0]
 80150b8:	2100      	movs	r1, #0
 80150ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80150bc:	4798      	blx	r3
 80150be:	6823      	ldr	r3, [r4, #0]
 80150c0:	4620      	mov	r0, r4
 80150c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80150c6:	4798      	blx	r3
 80150c8:	2001      	movs	r0, #1
 80150ca:	f7fd fc76 	bl	80129ba <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80150ce:	2300      	movs	r3, #0
 80150d0:	702b      	strb	r3, [r5, #0]
 80150d2:	b004      	add	sp, #16
 80150d4:	bd70      	pop	{r4, r5, r6, pc}
 80150d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80150da:	4620      	mov	r0, r4
 80150dc:	4798      	blx	r3
 80150de:	e7ae      	b.n	801503e <_ZN8touchgfx3HAL4tickEv+0xc2>
 80150e0:	2863      	cmp	r0, #99	; 0x63
 80150e2:	bfcb      	itete	gt
 80150e4:	2300      	movgt	r3, #0
 80150e6:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80150ea:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80150ee:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80150f2:	e7d8      	b.n	80150a6 <_ZN8touchgfx3HAL4tickEv+0x12a>
 80150f4:	2000a0f4 	.word	0x2000a0f4
 80150f8:	2000a0f5 	.word	0x2000a0f5
 80150fc:	05f5e100 	.word	0x05f5e100

08015100 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8015100:	f7fd bef4 	b.w	8012eec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015104 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8015104:	6581      	str	r1, [r0, #88]	; 0x58
 8015106:	301c      	adds	r0, #28
 8015108:	f011 bba6 	b.w	8026858 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801510c <_ZN8touchgfx3HAL5touchEll>:
 801510c:	b530      	push	{r4, r5, lr}
 801510e:	b087      	sub	sp, #28
 8015110:	4604      	mov	r4, r0
 8015112:	a804      	add	r0, sp, #16
 8015114:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8015118:	f002 fc32 	bl	8017980 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801511c:	9b04      	ldr	r3, [sp, #16]
 801511e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015122:	a906      	add	r1, sp, #24
 8015124:	9b05      	ldr	r3, [sp, #20]
 8015126:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801512a:	a803      	add	r0, sp, #12
 801512c:	f002 fc66 	bl	80179fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8015130:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8015134:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8015138:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801513c:	f104 001c 	add.w	r0, r4, #28
 8015140:	b189      	cbz	r1, 8015166 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8015142:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8015146:	9300      	str	r3, [sp, #0]
 8015148:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801514c:	4613      	mov	r3, r2
 801514e:	462a      	mov	r2, r5
 8015150:	f011 fb92 	bl	8026878 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8015154:	b128      	cbz	r0, 8015162 <_ZN8touchgfx3HAL5touchEll+0x56>
 8015156:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801515a:	65e3      	str	r3, [r4, #92]	; 0x5c
 801515c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015160:	6623      	str	r3, [r4, #96]	; 0x60
 8015162:	b007      	add	sp, #28
 8015164:	bd30      	pop	{r4, r5, pc}
 8015166:	f011 fbcb 	bl	8026900 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801516a:	2301      	movs	r3, #1
 801516c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015170:	e7f1      	b.n	8015156 <_ZN8touchgfx3HAL5touchEll+0x4a>

08015172 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8015172:	b570      	push	{r4, r5, r6, lr}
 8015174:	2b00      	cmp	r3, #0
 8015176:	d050      	beq.n	801521a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015178:	ea81 0002 	eor.w	r0, r1, r2
 801517c:	07c6      	lsls	r6, r0, #31
 801517e:	d508      	bpl.n	8015192 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015180:	3a01      	subs	r2, #1
 8015182:	18cc      	adds	r4, r1, r3
 8015184:	42a1      	cmp	r1, r4
 8015186:	d048      	beq.n	801521a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015188:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801518c:	f801 0b01 	strb.w	r0, [r1], #1
 8015190:	e7f8      	b.n	8015184 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8015192:	07d5      	lsls	r5, r2, #31
 8015194:	bf42      	ittt	mi
 8015196:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801519a:	f801 0b01 	strbmi.w	r0, [r1], #1
 801519e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80151a2:	2b01      	cmp	r3, #1
 80151a4:	d915      	bls.n	80151d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80151a6:	ea82 0001 	eor.w	r0, r2, r1
 80151aa:	0784      	lsls	r4, r0, #30
 80151ac:	d02d      	beq.n	801520a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 80151ae:	1e94      	subs	r4, r2, #2
 80151b0:	4608      	mov	r0, r1
 80151b2:	18ce      	adds	r6, r1, r3
 80151b4:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 80151b8:	f820 5b02 	strh.w	r5, [r0], #2
 80151bc:	1a35      	subs	r5, r6, r0
 80151be:	2d01      	cmp	r5, #1
 80151c0:	d8f8      	bhi.n	80151b4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 80151c2:	1e98      	subs	r0, r3, #2
 80151c4:	f020 0001 	bic.w	r0, r0, #1
 80151c8:	3002      	adds	r0, #2
 80151ca:	4401      	add	r1, r0
 80151cc:	4402      	add	r2, r0
 80151ce:	f003 0301 	and.w	r3, r3, #1
 80151d2:	1f14      	subs	r4, r2, #4
 80151d4:	4608      	mov	r0, r1
 80151d6:	18ce      	adds	r6, r1, r3
 80151d8:	1a35      	subs	r5, r6, r0
 80151da:	2d03      	cmp	r5, #3
 80151dc:	d810      	bhi.n	8015200 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 80151de:	089c      	lsrs	r4, r3, #2
 80151e0:	00a0      	lsls	r0, r4, #2
 80151e2:	4401      	add	r1, r0
 80151e4:	3801      	subs	r0, #1
 80151e6:	4402      	add	r2, r0
 80151e8:	f06f 0003 	mvn.w	r0, #3
 80151ec:	fb00 3404 	mla	r4, r0, r4, r3
 80151f0:	440c      	add	r4, r1
 80151f2:	42a1      	cmp	r1, r4
 80151f4:	d011      	beq.n	801521a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80151f6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80151fa:	f801 3b01 	strb.w	r3, [r1], #1
 80151fe:	e7f8      	b.n	80151f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8015200:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8015204:	f840 5b04 	str.w	r5, [r0], #4
 8015208:	e7e6      	b.n	80151d8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 801520a:	0790      	lsls	r0, r2, #30
 801520c:	d0e1      	beq.n	80151d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801520e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8015212:	f821 0b02 	strh.w	r0, [r1], #2
 8015216:	3b02      	subs	r3, #2
 8015218:	e7db      	b.n	80151d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801521a:	2001      	movs	r0, #1
 801521c:	bd70      	pop	{r4, r5, r6, pc}

0801521e <_ZN8touchgfx3HAL7noTouchEv>:
 801521e:	b510      	push	{r4, lr}
 8015220:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8015224:	4604      	mov	r4, r0
 8015226:	b153      	cbz	r3, 801523e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8015228:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801522c:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8015230:	2101      	movs	r1, #1
 8015232:	301c      	adds	r0, #28
 8015234:	f011 fb64 	bl	8026900 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015238:	2300      	movs	r3, #0
 801523a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801523e:	bd10      	pop	{r4, pc}

08015240 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8015240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015244:	4604      	mov	r4, r0
 8015246:	6980      	ldr	r0, [r0, #24]
 8015248:	b085      	sub	sp, #20
 801524a:	460f      	mov	r7, r1
 801524c:	4690      	mov	r8, r2
 801524e:	4699      	mov	r9, r3
 8015250:	b930      	cbnz	r0, 8015260 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8015252:	4b1c      	ldr	r3, [pc, #112]	; (80152c4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8015254:	4a1c      	ldr	r2, [pc, #112]	; (80152c8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8015256:	f44f 71a1 	mov.w	r1, #322	; 0x142
 801525a:	481c      	ldr	r0, [pc, #112]	; (80152cc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 801525c:	f011 fce2 	bl	8026c24 <__assert_func>
 8015260:	ad04      	add	r5, sp, #16
 8015262:	2600      	movs	r6, #0
 8015264:	f845 6d04 	str.w	r6, [r5, #-4]!
 8015268:	6806      	ldr	r6, [r0, #0]
 801526a:	9501      	str	r5, [sp, #4]
 801526c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8015270:	9500      	str	r5, [sp, #0]
 8015272:	6835      	ldr	r5, [r6, #0]
 8015274:	47a8      	blx	r5
 8015276:	4d16      	ldr	r5, [pc, #88]	; (80152d0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8015278:	4606      	mov	r6, r0
 801527a:	f8a5 9000 	strh.w	r9, [r5]
 801527e:	f7fa fef5 	bl	801006c <_ZN8touchgfx3HAL3lcdEv>
 8015282:	6803      	ldr	r3, [r0, #0]
 8015284:	6a1b      	ldr	r3, [r3, #32]
 8015286:	4798      	blx	r3
 8015288:	2801      	cmp	r0, #1
 801528a:	d012      	beq.n	80152b2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 801528c:	d306      	bcc.n	801529c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 801528e:	280d      	cmp	r0, #13
 8015290:	d80b      	bhi.n	80152aa <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8015292:	4b10      	ldr	r3, [pc, #64]	; (80152d4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8015294:	4a0c      	ldr	r2, [pc, #48]	; (80152c8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8015296:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801529a:	e7de      	b.n	801525a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 801529c:	882b      	ldrh	r3, [r5, #0]
 801529e:	fb08 7203 	mla	r2, r8, r3, r7
 80152a2:	9b03      	ldr	r3, [sp, #12]
 80152a4:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80152a8:	63e3      	str	r3, [r4, #60]	; 0x3c
 80152aa:	4630      	mov	r0, r6
 80152ac:	b005      	add	sp, #20
 80152ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152b2:	882a      	ldrh	r2, [r5, #0]
 80152b4:	9b03      	ldr	r3, [sp, #12]
 80152b6:	fb08 7202 	mla	r2, r8, r2, r7
 80152ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80152be:	1a9a      	subs	r2, r3, r2
 80152c0:	63e2      	str	r2, [r4, #60]	; 0x3c
 80152c2:	e7f2      	b.n	80152aa <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 80152c4:	0802af21 	.word	0x0802af21
 80152c8:	0802b23a 	.word	0x0802b23a
 80152cc:	0802af66 	.word	0x0802af66
 80152d0:	2000a0ea 	.word	0x2000a0ea
 80152d4:	0802af8c 	.word	0x0802af8c

080152d8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 80152d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80152dc:	4698      	mov	r8, r3
 80152de:	6803      	ldr	r3, [r0, #0]
 80152e0:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 80152e2:	4b0f      	ldr	r3, [pc, #60]	; (8015320 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 80152e4:	b087      	sub	sp, #28
 80152e6:	f8b3 9000 	ldrh.w	r9, [r3]
 80152ea:	460e      	mov	r6, r1
 80152ec:	4617      	mov	r7, r2
 80152ee:	4604      	mov	r4, r0
 80152f0:	f7fa febc 	bl	801006c <_ZN8touchgfx3HAL3lcdEv>
 80152f4:	6803      	ldr	r3, [r0, #0]
 80152f6:	6a1b      	ldr	r3, [r3, #32]
 80152f8:	4798      	blx	r3
 80152fa:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80152fe:	9302      	str	r3, [sp, #8]
 8015300:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8015304:	9301      	str	r3, [sp, #4]
 8015306:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801530a:	9300      	str	r3, [sp, #0]
 801530c:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8015310:	4643      	mov	r3, r8
 8015312:	463a      	mov	r2, r7
 8015314:	4631      	mov	r1, r6
 8015316:	4620      	mov	r0, r4
 8015318:	47a8      	blx	r5
 801531a:	b007      	add	sp, #28
 801531c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015320:	2000a0ea 	.word	0x2000a0ea

08015324 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8015324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015328:	4604      	mov	r4, r0
 801532a:	b08b      	sub	sp, #44	; 0x2c
 801532c:	4610      	mov	r0, r2
 801532e:	460d      	mov	r5, r1
 8015330:	4691      	mov	r9, r2
 8015332:	461e      	mov	r6, r3
 8015334:	f005 fcaa 	bl	801ac8c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015338:	2800      	cmp	r0, #0
 801533a:	f000 80a0 	beq.w	801547e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 801533e:	6823      	ldr	r3, [r4, #0]
 8015340:	f8df b170 	ldr.w	fp, [pc, #368]	; 80154b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>
 8015344:	6a1b      	ldr	r3, [r3, #32]
 8015346:	f8df a170 	ldr.w	sl, [pc, #368]	; 80154b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>
 801534a:	4620      	mov	r0, r4
 801534c:	4798      	blx	r3
 801534e:	6823      	ldr	r3, [r4, #0]
 8015350:	4620      	mov	r0, r4
 8015352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015354:	4798      	blx	r3
 8015356:	f8bb 3000 	ldrh.w	r3, [fp]
 801535a:	9301      	str	r3, [sp, #4]
 801535c:	f8ba 3000 	ldrh.w	r3, [sl]
 8015360:	9302      	str	r3, [sp, #8]
 8015362:	4b51      	ldr	r3, [pc, #324]	; (80154a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 8015364:	881a      	ldrh	r2, [r3, #0]
 8015366:	9203      	str	r2, [sp, #12]
 8015368:	4a50      	ldr	r2, [pc, #320]	; (80154ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 801536a:	8812      	ldrh	r2, [r2, #0]
 801536c:	9204      	str	r2, [sp, #16]
 801536e:	af0a      	add	r7, sp, #40	; 0x28
 8015370:	4a4f      	ldr	r2, [pc, #316]	; (80154b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x18c>)
 8015372:	f827 9d0c 	strh.w	r9, [r7, #-12]!
 8015376:	7812      	ldrb	r2, [r2, #0]
 8015378:	4698      	mov	r8, r3
 801537a:	4638      	mov	r0, r7
 801537c:	2a00      	cmp	r2, #0
 801537e:	f040 8081 	bne.w	8015484 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x160>
 8015382:	f005 fd3d 	bl	801ae00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015386:	f8ab 0000 	strh.w	r0, [fp]
 801538a:	4638      	mov	r0, r7
 801538c:	f005 fd72 	bl	801ae74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015390:	f8aa 0000 	strh.w	r0, [sl]
 8015394:	4638      	mov	r0, r7
 8015396:	f005 fd33 	bl	801ae00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801539a:	f8a8 0000 	strh.w	r0, [r8]
 801539e:	4638      	mov	r0, r7
 80153a0:	f005 fd68 	bl	801ae74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80153a4:	4b41      	ldr	r3, [pc, #260]	; (80154ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 80153a6:	8018      	strh	r0, [r3, #0]
 80153a8:	4648      	mov	r0, r9
 80153aa:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 80153ae:	f005 fc6d 	bl	801ac8c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80153b2:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80153b6:	2200      	movs	r2, #0
 80153b8:	4611      	mov	r1, r2
 80153ba:	4628      	mov	r0, r5
 80153bc:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80153c0:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80153c4:	f7fb fbae 	bl	8010b24 <_ZN8touchgfx8Drawable5setXYEss>
 80153c8:	2301      	movs	r3, #1
 80153ca:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80153ce:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80153d2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	dd5c      	ble.n	8015494 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 80153da:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	dd58      	ble.n	8015494 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 80153e2:	462a      	mov	r2, r5
 80153e4:	ab08      	add	r3, sp, #32
 80153e6:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80153ea:	6851      	ldr	r1, [r2, #4]
 80153ec:	c303      	stmia	r3!, {r0, r1}
 80153ee:	4631      	mov	r1, r6
 80153f0:	a808      	add	r0, sp, #32
 80153f2:	f7ff fc71 	bl	8014cd8 <_ZN8touchgfx4RectaNERKS0_>
 80153f6:	a807      	add	r0, sp, #28
 80153f8:	f005 fe94 	bl	801b124 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80153fc:	4606      	mov	r6, r0
 80153fe:	f7fa fe35 	bl	801006c <_ZN8touchgfx3HAL3lcdEv>
 8015402:	6803      	ldr	r3, [r0, #0]
 8015404:	6a1b      	ldr	r3, [r3, #32]
 8015406:	4798      	blx	r3
 8015408:	4286      	cmp	r6, r0
 801540a:	d04a      	beq.n	80154a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x17e>
 801540c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801540e:	b150      	cbz	r0, 8015426 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 8015410:	a807      	add	r0, sp, #28
 8015412:	f005 fe87 	bl	801b124 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015416:	4606      	mov	r6, r0
 8015418:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801541a:	6803      	ldr	r3, [r0, #0]
 801541c:	6a1b      	ldr	r3, [r3, #32]
 801541e:	4798      	blx	r3
 8015420:	1a33      	subs	r3, r6, r0
 8015422:	4258      	negs	r0, r3
 8015424:	4158      	adcs	r0, r3
 8015426:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 801542a:	2600      	movs	r6, #0
 801542c:	682a      	ldr	r2, [r5, #0]
 801542e:	696b      	ldr	r3, [r5, #20]
 8015430:	616e      	str	r6, [r5, #20]
 8015432:	9305      	str	r3, [sp, #20]
 8015434:	6892      	ldr	r2, [r2, #8]
 8015436:	a908      	add	r1, sp, #32
 8015438:	4628      	mov	r0, r5
 801543a:	4790      	blx	r2
 801543c:	9b05      	ldr	r3, [sp, #20]
 801543e:	616b      	str	r3, [r5, #20]
 8015440:	4652      	mov	r2, sl
 8015442:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8015446:	4649      	mov	r1, r9
 8015448:	4628      	mov	r0, r5
 801544a:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 801544e:	f7fb fb69 	bl	8010b24 <_ZN8touchgfx8Drawable5setXYEss>
 8015452:	4b18      	ldr	r3, [pc, #96]	; (80154b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>)
 8015454:	9a01      	ldr	r2, [sp, #4]
 8015456:	801a      	strh	r2, [r3, #0]
 8015458:	4b17      	ldr	r3, [pc, #92]	; (80154b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>)
 801545a:	9a02      	ldr	r2, [sp, #8]
 801545c:	801a      	strh	r2, [r3, #0]
 801545e:	4b12      	ldr	r3, [pc, #72]	; (80154a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 8015460:	9a03      	ldr	r2, [sp, #12]
 8015462:	801a      	strh	r2, [r3, #0]
 8015464:	4b11      	ldr	r3, [pc, #68]	; (80154ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 8015466:	9a04      	ldr	r2, [sp, #16]
 8015468:	801a      	strh	r2, [r3, #0]
 801546a:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 801546e:	6823      	ldr	r3, [r4, #0]
 8015470:	4620      	mov	r0, r4
 8015472:	6a1b      	ldr	r3, [r3, #32]
 8015474:	4798      	blx	r3
 8015476:	6823      	ldr	r3, [r4, #0]
 8015478:	4620      	mov	r0, r4
 801547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801547c:	4798      	blx	r3
 801547e:	b00b      	add	sp, #44	; 0x2c
 8015480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015484:	f005 fcf6 	bl	801ae74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015488:	f8ab 0000 	strh.w	r0, [fp]
 801548c:	4638      	mov	r0, r7
 801548e:	f005 fcb7 	bl	801ae00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015492:	e77d      	b.n	8015390 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x6c>
 8015494:	462a      	mov	r2, r5
 8015496:	ab08      	add	r3, sp, #32
 8015498:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801549c:	6851      	ldr	r1, [r2, #4]
 801549e:	c303      	stmia	r3!, {r0, r1}
 80154a0:	e7a9      	b.n	80153f6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xd2>
 80154a2:	2000      	movs	r0, #0
 80154a4:	e7bf      	b.n	8015426 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 80154a6:	bf00      	nop
 80154a8:	2000a0e4 	.word	0x2000a0e4
 80154ac:	2000a0e6 	.word	0x2000a0e6
 80154b0:	2000a0e8 	.word	0x2000a0e8
 80154b4:	2000a0ea 	.word	0x2000a0ea
 80154b8:	2000a0ec 	.word	0x2000a0ec

080154bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80154bc:	b510      	push	{r4, lr}
 80154be:	4b07      	ldr	r3, [pc, #28]	; (80154dc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80154c0:	781b      	ldrb	r3, [r3, #0]
 80154c2:	4604      	mov	r4, r0
 80154c4:	b13b      	cbz	r3, 80154d6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80154c6:	6803      	ldr	r3, [r0, #0]
 80154c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154ca:	4798      	blx	r3
 80154cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80154ce:	4283      	cmp	r3, r0
 80154d0:	d101      	bne.n	80154d6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80154d2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80154d4:	bd10      	pop	{r4, pc}
 80154d6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80154d8:	e7fc      	b.n	80154d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80154da:	bf00      	nop
 80154dc:	2000a0ee 	.word	0x2000a0ee

080154e0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80154e0:	b510      	push	{r4, lr}
 80154e2:	4b0b      	ldr	r3, [pc, #44]	; (8015510 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 80154e4:	781b      	ldrb	r3, [r3, #0]
 80154e6:	4604      	mov	r4, r0
 80154e8:	b95b      	cbnz	r3, 8015502 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80154ea:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80154ee:	2b02      	cmp	r3, #2
 80154f0:	d007      	beq.n	8015502 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80154f2:	6840      	ldr	r0, [r0, #4]
 80154f4:	f000 fbce 	bl	8015c94 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80154f8:	b118      	cbz	r0, 8015502 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80154fa:	6862      	ldr	r2, [r4, #4]
 80154fc:	7a53      	ldrb	r3, [r2, #9]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d0fc      	beq.n	80154fc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8015502:	f7fd fce5 	bl	8012ed0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015506:	4620      	mov	r0, r4
 8015508:	f7ff ffd8 	bl	80154bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801550c:	bd10      	pop	{r4, pc}
 801550e:	bf00      	nop
 8015510:	2000a0ee 	.word	0x2000a0ee

08015514 <_ZN8touchgfx3HAL10initializeEv>:
 8015514:	b510      	push	{r4, lr}
 8015516:	4604      	mov	r4, r0
 8015518:	f7fd fca4 	bl	8012e64 <_ZN8touchgfx10OSWrappers10initializeEv>
 801551c:	6860      	ldr	r0, [r4, #4]
 801551e:	6803      	ldr	r3, [r0, #0]
 8015520:	68db      	ldr	r3, [r3, #12]
 8015522:	4798      	blx	r3
 8015524:	68e0      	ldr	r0, [r4, #12]
 8015526:	6803      	ldr	r3, [r0, #0]
 8015528:	689b      	ldr	r3, [r3, #8]
 801552a:	4798      	blx	r3
 801552c:	6823      	ldr	r3, [r4, #0]
 801552e:	4620      	mov	r0, r4
 8015530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015536:	4718      	bx	r3

08015538 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8015538:	b508      	push	{r3, lr}
 801553a:	290d      	cmp	r1, #13
 801553c:	d817      	bhi.n	801556e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 801553e:	e8df f001 	tbb	[pc, r1]
 8015542:	090b      	.short	0x090b
 8015544:	0d0d0d07 	.word	0x0d0d0d07
 8015548:	1414140d 	.word	0x1414140d
 801554c:	0d0d1414 	.word	0x0d0d1414
 8015550:	2020      	movs	r0, #32
 8015552:	bd08      	pop	{r3, pc}
 8015554:	2018      	movs	r0, #24
 8015556:	e7fc      	b.n	8015552 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015558:	2010      	movs	r0, #16
 801555a:	e7fa      	b.n	8015552 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801555c:	4b05      	ldr	r3, [pc, #20]	; (8015574 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 801555e:	4a06      	ldr	r2, [pc, #24]	; (8015578 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8015560:	4806      	ldr	r0, [pc, #24]	; (801557c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8015562:	f44f 7111 	mov.w	r1, #580	; 0x244
 8015566:	f011 fb5d 	bl	8026c24 <__assert_func>
 801556a:	2008      	movs	r0, #8
 801556c:	e7f1      	b.n	8015552 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801556e:	2000      	movs	r0, #0
 8015570:	e7ef      	b.n	8015552 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015572:	bf00      	nop
 8015574:	0802b05f 	.word	0x0802b05f
 8015578:	0802b3fc 	.word	0x0802b3fc
 801557c:	0802af66 	.word	0x0802af66

08015580 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8015580:	b570      	push	{r4, r5, r6, lr}
 8015582:	460d      	mov	r5, r1
 8015584:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8015588:	4616      	mov	r6, r2
 801558a:	461c      	mov	r4, r3
 801558c:	f7ff ffd4 	bl	8015538 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8015590:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8015594:	10c0      	asrs	r0, r0, #3
 8015596:	fb06 5101 	mla	r1, r6, r1, r5
 801559a:	fb00 4001 	mla	r0, r0, r1, r4
 801559e:	bd70      	pop	{r4, r5, r6, pc}

080155a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 80155a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155a4:	b08a      	sub	sp, #40	; 0x28
 80155a6:	f04f 0c00 	mov.w	ip, #0
 80155aa:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 80155ae:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80155b2:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80155b6:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 80155ba:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80155be:	f8cd c020 	str.w	ip, [sp, #32]
 80155c2:	f1b8 0f02 	cmp.w	r8, #2
 80155c6:	4604      	mov	r4, r0
 80155c8:	469a      	mov	sl, r3
 80155ca:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80155ce:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80155d2:	d030      	beq.n	8015636 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 80155d4:	2bff      	cmp	r3, #255	; 0xff
 80155d6:	d12c      	bne.n	8015632 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 80155d8:	4560      	cmp	r0, ip
 80155da:	bf14      	ite	ne
 80155dc:	2004      	movne	r0, #4
 80155de:	2001      	moveq	r0, #1
 80155e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80155e4:	9204      	str	r2, [sp, #16]
 80155e6:	4620      	mov	r0, r4
 80155e8:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80155ec:	f8ad 201c 	strh.w	r2, [sp, #28]
 80155f0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80155f4:	f8ad 6018 	strh.w	r6, [sp, #24]
 80155f8:	f8ad 501a 	strh.w	r5, [sp, #26]
 80155fc:	f7ff ff5e 	bl	80154bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015600:	e9cd 9700 	strd	r9, r7, [sp]
 8015604:	4603      	mov	r3, r0
 8015606:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 801560a:	4651      	mov	r1, sl
 801560c:	4620      	mov	r0, r4
 801560e:	f7ff ffb7 	bl	8015580 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015612:	f8ad 901e 	strh.w	r9, [sp, #30]
 8015616:	9005      	str	r0, [sp, #20]
 8015618:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 801561c:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8015620:	b106      	cbz	r6, 8015624 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8015622:	b98d      	cbnz	r5, 8015648 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8015624:	4b12      	ldr	r3, [pc, #72]	; (8015670 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8015626:	4a13      	ldr	r2, [pc, #76]	; (8015674 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8015628:	f240 11c3 	movw	r1, #451	; 0x1c3
 801562c:	4812      	ldr	r0, [pc, #72]	; (8015678 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 801562e:	f011 faf9 	bl	8026c24 <__assert_func>
 8015632:	2004      	movs	r0, #4
 8015634:	e7d4      	b.n	80155e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8015636:	2bff      	cmp	r3, #255	; 0xff
 8015638:	d104      	bne.n	8015644 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 801563a:	2800      	cmp	r0, #0
 801563c:	bf14      	ite	ne
 801563e:	2040      	movne	r0, #64	; 0x40
 8015640:	2020      	moveq	r0, #32
 8015642:	e7cd      	b.n	80155e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8015644:	2040      	movs	r0, #64	; 0x40
 8015646:	e7cb      	b.n	80155e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8015648:	6823      	ldr	r3, [r4, #0]
 801564a:	9d02      	ldr	r5, [sp, #8]
 801564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801564e:	4620      	mov	r0, r4
 8015650:	4798      	blx	r3
 8015652:	4228      	tst	r0, r5
 8015654:	d104      	bne.n	8015660 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8015656:	4b09      	ldr	r3, [pc, #36]	; (801567c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8015658:	4a06      	ldr	r2, [pc, #24]	; (8015674 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801565a:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 801565e:	e7e5      	b.n	801562c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8015660:	6860      	ldr	r0, [r4, #4]
 8015662:	6803      	ldr	r3, [r0, #0]
 8015664:	a902      	add	r1, sp, #8
 8015666:	685b      	ldr	r3, [r3, #4]
 8015668:	4798      	blx	r3
 801566a:	b00a      	add	sp, #40	; 0x28
 801566c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015670:	0802afe2 	.word	0x0802afe2
 8015674:	0802b29e 	.word	0x0802b29e
 8015678:	0802af66 	.word	0x0802af66
 801567c:	0802b01a 	.word	0x0802b01a

08015680 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8015680:	b510      	push	{r4, lr}
 8015682:	b08a      	sub	sp, #40	; 0x28
 8015684:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8015688:	9408      	str	r4, [sp, #32]
 801568a:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 801568e:	9407      	str	r4, [sp, #28]
 8015690:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8015694:	9406      	str	r4, [sp, #24]
 8015696:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801569a:	9405      	str	r4, [sp, #20]
 801569c:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 80156a0:	9404      	str	r4, [sp, #16]
 80156a2:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 80156a6:	9403      	str	r4, [sp, #12]
 80156a8:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 80156ac:	9402      	str	r4, [sp, #8]
 80156ae:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80156b2:	e9cd 3400 	strd	r3, r4, [sp]
 80156b6:	4613      	mov	r3, r2
 80156b8:	2200      	movs	r2, #0
 80156ba:	f7ff ff71 	bl	80155a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80156be:	b00a      	add	sp, #40	; 0x28
 80156c0:	bd10      	pop	{r4, pc}
	...

080156c4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 80156c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80156c6:	b08b      	sub	sp, #44	; 0x2c
 80156c8:	4616      	mov	r6, r2
 80156ca:	460d      	mov	r5, r1
 80156cc:	461f      	mov	r7, r3
 80156ce:	4604      	mov	r4, r0
 80156d0:	f7fa fccc 	bl	801006c <_ZN8touchgfx3HAL3lcdEv>
 80156d4:	6803      	ldr	r3, [r0, #0]
 80156d6:	6a1b      	ldr	r3, [r3, #32]
 80156d8:	4798      	blx	r3
 80156da:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80156de:	4b0d      	ldr	r3, [pc, #52]	; (8015714 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 80156e0:	881b      	ldrh	r3, [r3, #0]
 80156e2:	9306      	str	r3, [sp, #24]
 80156e4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80156e8:	9305      	str	r3, [sp, #20]
 80156ea:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80156ee:	9304      	str	r3, [sp, #16]
 80156f0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80156f4:	9303      	str	r3, [sp, #12]
 80156f6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80156fa:	9302      	str	r3, [sp, #8]
 80156fc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015700:	2200      	movs	r2, #0
 8015702:	e9cd 7300 	strd	r7, r3, [sp]
 8015706:	4629      	mov	r1, r5
 8015708:	4633      	mov	r3, r6
 801570a:	4620      	mov	r0, r4
 801570c:	f7ff ff48 	bl	80155a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015710:	b00b      	add	sp, #44	; 0x2c
 8015712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015714:	2000a0ea 	.word	0x2000a0ea

08015718 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8015718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801571c:	461f      	mov	r7, r3
 801571e:	4b14      	ldr	r3, [pc, #80]	; (8015770 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8015720:	b08a      	sub	sp, #40	; 0x28
 8015722:	4616      	mov	r6, r2
 8015724:	f8b3 8000 	ldrh.w	r8, [r3]
 8015728:	460d      	mov	r5, r1
 801572a:	4604      	mov	r4, r0
 801572c:	f7fa fc9e 	bl	801006c <_ZN8touchgfx3HAL3lcdEv>
 8015730:	6803      	ldr	r3, [r0, #0]
 8015732:	6a1b      	ldr	r3, [r3, #32]
 8015734:	4798      	blx	r3
 8015736:	2302      	movs	r3, #2
 8015738:	e9cd 8306 	strd	r8, r3, [sp, #24]
 801573c:	2301      	movs	r3, #1
 801573e:	9305      	str	r3, [sp, #20]
 8015740:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015744:	9304      	str	r3, [sp, #16]
 8015746:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801574a:	9303      	str	r3, [sp, #12]
 801574c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015750:	9302      	str	r3, [sp, #8]
 8015752:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015756:	9008      	str	r0, [sp, #32]
 8015758:	e9cd 7300 	strd	r7, r3, [sp]
 801575c:	2200      	movs	r2, #0
 801575e:	4633      	mov	r3, r6
 8015760:	4629      	mov	r1, r5
 8015762:	4620      	mov	r0, r4
 8015764:	f7ff ff1c 	bl	80155a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015768:	b00a      	add	sp, #40	; 0x28
 801576a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801576e:	bf00      	nop
 8015770:	2000a0ea 	.word	0x2000a0ea

08015774 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8015774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015778:	b08b      	sub	sp, #44	; 0x2c
 801577a:	469b      	mov	fp, r3
 801577c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8015780:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8015784:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8015788:	2fff      	cmp	r7, #255	; 0xff
 801578a:	bf14      	ite	ne
 801578c:	2308      	movne	r3, #8
 801578e:	2302      	moveq	r3, #2
 8015790:	2600      	movs	r6, #0
 8015792:	4604      	mov	r4, r0
 8015794:	4689      	mov	r9, r1
 8015796:	4692      	mov	sl, r2
 8015798:	e9cd 3602 	strd	r3, r6, [sp, #8]
 801579c:	9608      	str	r6, [sp, #32]
 801579e:	f7ff fe8d 	bl	80154bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80157a2:	e9cd 8500 	strd	r8, r5, [sp]
 80157a6:	4603      	mov	r3, r0
 80157a8:	465a      	mov	r2, fp
 80157aa:	4651      	mov	r1, sl
 80157ac:	4620      	mov	r0, r4
 80157ae:	f7ff fee7 	bl	8015580 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80157b2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80157b6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80157ba:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80157be:	f8ad 301a 	strh.w	r3, [sp, #26]
 80157c2:	6823      	ldr	r3, [r4, #0]
 80157c4:	9005      	str	r0, [sp, #20]
 80157c6:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 80157ca:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 80157ce:	f8ad 601c 	strh.w	r6, [sp, #28]
 80157d2:	f8ad 801e 	strh.w	r8, [sp, #30]
 80157d6:	f8cd 9020 	str.w	r9, [sp, #32]
 80157da:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 80157de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157e0:	9d02      	ldr	r5, [sp, #8]
 80157e2:	4620      	mov	r0, r4
 80157e4:	4798      	blx	r3
 80157e6:	4228      	tst	r0, r5
 80157e8:	d106      	bne.n	80157f8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 80157ea:	4b07      	ldr	r3, [pc, #28]	; (8015808 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 80157ec:	4a07      	ldr	r2, [pc, #28]	; (801580c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 80157ee:	4808      	ldr	r0, [pc, #32]	; (8015810 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 80157f0:	f240 11fb 	movw	r1, #507	; 0x1fb
 80157f4:	f011 fa16 	bl	8026c24 <__assert_func>
 80157f8:	6860      	ldr	r0, [r4, #4]
 80157fa:	6803      	ldr	r3, [r0, #0]
 80157fc:	a902      	add	r1, sp, #8
 80157fe:	685b      	ldr	r3, [r3, #4]
 8015800:	4798      	blx	r3
 8015802:	b00b      	add	sp, #44	; 0x2c
 8015804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015808:	0802b01a 	.word	0x0802b01a
 801580c:	0802b367 	.word	0x0802b367
 8015810:	0802af66 	.word	0x0802af66

08015814 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8015814:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015818:	461f      	mov	r7, r3
 801581a:	4b0b      	ldr	r3, [pc, #44]	; (8015848 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801581c:	460d      	mov	r5, r1
 801581e:	f8b3 8000 	ldrh.w	r8, [r3]
 8015822:	4616      	mov	r6, r2
 8015824:	4604      	mov	r4, r0
 8015826:	f7fa fc21 	bl	801006c <_ZN8touchgfx3HAL3lcdEv>
 801582a:	6803      	ldr	r3, [r0, #0]
 801582c:	6a1b      	ldr	r3, [r3, #32]
 801582e:	4798      	blx	r3
 8015830:	463b      	mov	r3, r7
 8015832:	e9cd 8000 	strd	r8, r0, [sp]
 8015836:	4632      	mov	r2, r6
 8015838:	4629      	mov	r1, r5
 801583a:	4620      	mov	r0, r4
 801583c:	f7ff fea0 	bl	8015580 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015840:	b002      	add	sp, #8
 8015842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015846:	bf00      	nop
 8015848:	2000a0ea 	.word	0x2000a0ea

0801584c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 801584c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015850:	b088      	sub	sp, #32
 8015852:	4698      	mov	r8, r3
 8015854:	2300      	movs	r3, #0
 8015856:	9306      	str	r3, [sp, #24]
 8015858:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801585c:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8015860:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8015864:	f8ad 6010 	strh.w	r6, [sp, #16]
 8015868:	e9cd 3100 	strd	r3, r1, [sp]
 801586c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015870:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015874:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8015878:	f88d 301c 	strb.w	r3, [sp, #28]
 801587c:	4617      	mov	r7, r2
 801587e:	4604      	mov	r4, r0
 8015880:	f8ad 5012 	strh.w	r5, [sp, #18]
 8015884:	f7ff fe1a 	bl	80154bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015888:	4642      	mov	r2, r8
 801588a:	4603      	mov	r3, r0
 801588c:	4639      	mov	r1, r7
 801588e:	4620      	mov	r0, r4
 8015890:	f7ff ffc0 	bl	8015814 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015894:	4b16      	ldr	r3, [pc, #88]	; (80158f0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8015896:	9003      	str	r0, [sp, #12]
 8015898:	881b      	ldrh	r3, [r3, #0]
 801589a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801589e:	f7fa fbe5 	bl	801006c <_ZN8touchgfx3HAL3lcdEv>
 80158a2:	6803      	ldr	r3, [r0, #0]
 80158a4:	6a1b      	ldr	r3, [r3, #32]
 80158a6:	4798      	blx	r3
 80158a8:	f88d 001e 	strb.w	r0, [sp, #30]
 80158ac:	f88d 001d 	strb.w	r0, [sp, #29]
 80158b0:	b106      	cbz	r6, 80158b4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 80158b2:	b935      	cbnz	r5, 80158c2 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 80158b4:	4b0f      	ldr	r3, [pc, #60]	; (80158f4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 80158b6:	4a10      	ldr	r2, [pc, #64]	; (80158f8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80158b8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80158bc:	480f      	ldr	r0, [pc, #60]	; (80158fc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 80158be:	f011 f9b1 	bl	8026c24 <__assert_func>
 80158c2:	6823      	ldr	r3, [r4, #0]
 80158c4:	9d00      	ldr	r5, [sp, #0]
 80158c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80158c8:	4620      	mov	r0, r4
 80158ca:	4798      	blx	r3
 80158cc:	4228      	tst	r0, r5
 80158ce:	d104      	bne.n	80158da <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 80158d0:	4b0b      	ldr	r3, [pc, #44]	; (8015900 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 80158d2:	4a09      	ldr	r2, [pc, #36]	; (80158f8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80158d4:	f240 11e1 	movw	r1, #481	; 0x1e1
 80158d8:	e7f0      	b.n	80158bc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 80158da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80158dc:	6860      	ldr	r0, [r4, #4]
 80158de:	9306      	str	r3, [sp, #24]
 80158e0:	6803      	ldr	r3, [r0, #0]
 80158e2:	4669      	mov	r1, sp
 80158e4:	685b      	ldr	r3, [r3, #4]
 80158e6:	4798      	blx	r3
 80158e8:	b008      	add	sp, #32
 80158ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158ee:	bf00      	nop
 80158f0:	2000a0ea 	.word	0x2000a0ea
 80158f4:	0802afe2 	.word	0x0802afe2
 80158f8:	0802b150 	.word	0x0802b150
 80158fc:	0802af66 	.word	0x0802af66
 8015900:	0802b01a 	.word	0x0802b01a

08015904 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8015904:	b570      	push	{r4, r5, r6, lr}
 8015906:	b08a      	sub	sp, #40	; 0x28
 8015908:	466b      	mov	r3, sp
 801590a:	e883 0006 	stmia.w	r3, {r1, r2}
 801590e:	4b20      	ldr	r3, [pc, #128]	; (8015990 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8015910:	781b      	ldrb	r3, [r3, #0]
 8015912:	4604      	mov	r4, r0
 8015914:	b933      	cbnz	r3, 8015924 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8015916:	4b1f      	ldr	r3, [pc, #124]	; (8015994 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8015918:	4a1f      	ldr	r2, [pc, #124]	; (8015998 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801591a:	4820      	ldr	r0, [pc, #128]	; (801599c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 801591c:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8015920:	f011 f980 	bl	8026c24 <__assert_func>
 8015924:	2300      	movs	r3, #0
 8015926:	9308      	str	r3, [sp, #32]
 8015928:	2301      	movs	r3, #1
 801592a:	9302      	str	r3, [sp, #8]
 801592c:	6803      	ldr	r3, [r0, #0]
 801592e:	f8bd 5000 	ldrh.w	r5, [sp]
 8015932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015934:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8015938:	4798      	blx	r3
 801593a:	4632      	mov	r2, r6
 801593c:	4629      	mov	r1, r5
 801593e:	4603      	mov	r3, r0
 8015940:	4620      	mov	r0, r4
 8015942:	f7ff ff67 	bl	8015814 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015946:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8015948:	9305      	str	r3, [sp, #20]
 801594a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801594e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015952:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015956:	f8ad 301a 	strh.w	r3, [sp, #26]
 801595a:	4b11      	ldr	r3, [pc, #68]	; (80159a0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 801595c:	9003      	str	r0, [sp, #12]
 801595e:	881b      	ldrh	r3, [r3, #0]
 8015960:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015964:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015968:	f7fa fb80 	bl	801006c <_ZN8touchgfx3HAL3lcdEv>
 801596c:	6803      	ldr	r3, [r0, #0]
 801596e:	6a1b      	ldr	r3, [r3, #32]
 8015970:	4798      	blx	r3
 8015972:	23ff      	movs	r3, #255	; 0xff
 8015974:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8015978:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801597c:	6860      	ldr	r0, [r4, #4]
 801597e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015982:	6803      	ldr	r3, [r0, #0]
 8015984:	a902      	add	r1, sp, #8
 8015986:	685b      	ldr	r3, [r3, #4]
 8015988:	4798      	blx	r3
 801598a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801598c:	b00a      	add	sp, #40	; 0x28
 801598e:	bd70      	pop	{r4, r5, r6, pc}
 8015990:	2000a0ef 	.word	0x2000a0ef
 8015994:	0802aeb3 	.word	0x0802aeb3
 8015998:	0802b1f4 	.word	0x0802b1f4
 801599c:	0802af66 	.word	0x0802af66
 80159a0:	2000a0ea 	.word	0x2000a0ea

080159a4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80159a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159a6:	b08b      	sub	sp, #44	; 0x2c
 80159a8:	466d      	mov	r5, sp
 80159aa:	e885 0006 	stmia.w	r5, {r1, r2}
 80159ae:	461d      	mov	r5, r3
 80159b0:	2300      	movs	r3, #0
 80159b2:	9308      	str	r3, [sp, #32]
 80159b4:	2301      	movs	r3, #1
 80159b6:	9302      	str	r3, [sp, #8]
 80159b8:	6803      	ldr	r3, [r0, #0]
 80159ba:	f8bd 6000 	ldrh.w	r6, [sp]
 80159be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80159c0:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80159c4:	4604      	mov	r4, r0
 80159c6:	4798      	blx	r3
 80159c8:	463a      	mov	r2, r7
 80159ca:	4631      	mov	r1, r6
 80159cc:	4603      	mov	r3, r0
 80159ce:	4620      	mov	r0, r4
 80159d0:	f7ff ff20 	bl	8015814 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80159d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80159d8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80159dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80159e0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80159e4:	4b0e      	ldr	r3, [pc, #56]	; (8015a20 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 80159e6:	9003      	str	r0, [sp, #12]
 80159e8:	881b      	ldrh	r3, [r3, #0]
 80159ea:	f8ad 301c 	strh.w	r3, [sp, #28]
 80159ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80159f0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80159f4:	9505      	str	r5, [sp, #20]
 80159f6:	f7fa fb39 	bl	801006c <_ZN8touchgfx3HAL3lcdEv>
 80159fa:	6803      	ldr	r3, [r0, #0]
 80159fc:	6a1b      	ldr	r3, [r3, #32]
 80159fe:	4798      	blx	r3
 8015a00:	23ff      	movs	r3, #255	; 0xff
 8015a02:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8015a06:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8015a0a:	6860      	ldr	r0, [r4, #4]
 8015a0c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015a10:	6803      	ldr	r3, [r0, #0]
 8015a12:	a902      	add	r1, sp, #8
 8015a14:	685b      	ldr	r3, [r3, #4]
 8015a16:	4798      	blx	r3
 8015a18:	4628      	mov	r0, r5
 8015a1a:	b00b      	add	sp, #44	; 0x2c
 8015a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a1e:	bf00      	nop
 8015a20:	2000a0ea 	.word	0x2000a0ea

08015a24 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8015a24:	b570      	push	{r4, r5, r6, lr}
 8015a26:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8015a2a:	4604      	mov	r4, r0
 8015a2c:	b19b      	cbz	r3, 8015a56 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8015a2e:	2002      	movs	r0, #2
 8015a30:	f7fc ffce 	bl	80129d0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8015a34:	2300      	movs	r3, #0
 8015a36:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015a3a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8015a3e:	6823      	ldr	r3, [r4, #0]
 8015a40:	4620      	mov	r0, r4
 8015a42:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8015a46:	f7ff fd39 	bl	80154bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015a4a:	462b      	mov	r3, r5
 8015a4c:	4601      	mov	r1, r0
 8015a4e:	4620      	mov	r0, r4
 8015a50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a54:	4718      	bx	r3
 8015a56:	bd70      	pop	{r4, r5, r6, pc}

08015a58 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>:
 8015a58:	4770      	bx	lr

08015a5a <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8015a5a:	4770      	bx	lr

08015a5c <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8015a5c:	2000      	movs	r0, #0
 8015a5e:	4770      	bx	lr

08015a60 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8015a60:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8015a64:	1a13      	subs	r3, r2, r0
 8015a66:	4258      	negs	r0, r3
 8015a68:	4158      	adcs	r0, r3
 8015a6a:	4770      	bx	lr

08015a6c <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8015a6c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8015a70:	1a9b      	subs	r3, r3, r2
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	bfdc      	itt	le
 8015a76:	6882      	ldrle	r2, [r0, #8]
 8015a78:	189b      	addle	r3, r3, r2
 8015a7a:	2b01      	cmp	r3, #1
 8015a7c:	bfcc      	ite	gt
 8015a7e:	2000      	movgt	r0, #0
 8015a80:	2001      	movle	r0, #1
 8015a82:	4770      	bx	lr

08015a84 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8015a84:	6902      	ldr	r2, [r0, #16]
 8015a86:	6840      	ldr	r0, [r0, #4]
 8015a88:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8015a8c:	4770      	bx	lr

08015a8e <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8015a8e:	6803      	ldr	r3, [r0, #0]
 8015a90:	691b      	ldr	r3, [r3, #16]
 8015a92:	4718      	bx	r3

08015a94 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8015a94:	4770      	bx	lr

08015a96 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8015a96:	4770      	bx	lr

08015a98 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8015a98:	b570      	push	{r4, r5, r6, lr}
 8015a9a:	2301      	movs	r3, #1
 8015a9c:	7203      	strb	r3, [r0, #8]
 8015a9e:	4604      	mov	r4, r0
 8015aa0:	6840      	ldr	r0, [r0, #4]
 8015aa2:	6803      	ldr	r3, [r0, #0]
 8015aa4:	699b      	ldr	r3, [r3, #24]
 8015aa6:	4798      	blx	r3
 8015aa8:	6803      	ldr	r3, [r0, #0]
 8015aaa:	2b08      	cmp	r3, #8
 8015aac:	4605      	mov	r5, r0
 8015aae:	d01e      	beq.n	8015aee <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8015ab0:	d80b      	bhi.n	8015aca <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015ab2:	2b02      	cmp	r3, #2
 8015ab4:	d027      	beq.n	8015b06 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8015ab6:	2b04      	cmp	r3, #4
 8015ab8:	d011      	beq.n	8015ade <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8015aba:	2b01      	cmp	r3, #1
 8015abc:	d028      	beq.n	8015b10 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8015abe:	4b17      	ldr	r3, [pc, #92]	; (8015b1c <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8015ac0:	4a17      	ldr	r2, [pc, #92]	; (8015b20 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8015ac2:	4818      	ldr	r0, [pc, #96]	; (8015b24 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8015ac4:	218c      	movs	r1, #140	; 0x8c
 8015ac6:	f011 f8ad 	bl	8026c24 <__assert_func>
 8015aca:	2b40      	cmp	r3, #64	; 0x40
 8015acc:	d020      	beq.n	8015b10 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8015ace:	d801      	bhi.n	8015ad4 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8015ad0:	2b20      	cmp	r3, #32
 8015ad2:	e7f3      	b.n	8015abc <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8015ad4:	2b80      	cmp	r3, #128	; 0x80
 8015ad6:	d01b      	beq.n	8015b10 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8015ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015adc:	e7ee      	b.n	8015abc <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8015ade:	6823      	ldr	r3, [r4, #0]
 8015ae0:	7f01      	ldrb	r1, [r0, #28]
 8015ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ae4:	4620      	mov	r0, r4
 8015ae6:	4798      	blx	r3
 8015ae8:	6823      	ldr	r3, [r4, #0]
 8015aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015aec:	e006      	b.n	8015afc <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8015aee:	6823      	ldr	r3, [r4, #0]
 8015af0:	7f01      	ldrb	r1, [r0, #28]
 8015af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015af4:	4620      	mov	r0, r4
 8015af6:	4798      	blx	r3
 8015af8:	6823      	ldr	r3, [r4, #0]
 8015afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015afc:	4629      	mov	r1, r5
 8015afe:	4620      	mov	r0, r4
 8015b00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b04:	4718      	bx	r3
 8015b06:	6823      	ldr	r3, [r4, #0]
 8015b08:	4620      	mov	r0, r4
 8015b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015b0c:	4798      	blx	r3
 8015b0e:	e7f3      	b.n	8015af8 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8015b10:	6823      	ldr	r3, [r4, #0]
 8015b12:	4620      	mov	r0, r4
 8015b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015b16:	4798      	blx	r3
 8015b18:	e7e6      	b.n	8015ae8 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8015b1a:	bf00      	nop
 8015b1c:	0802b445 	.word	0x0802b445
 8015b20:	0802b554 	.word	0x0802b554
 8015b24:	0802b46a 	.word	0x0802b46a

08015b28 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8015b28:	b570      	push	{r4, r5, r6, lr}
 8015b2a:	4604      	mov	r4, r0
 8015b2c:	460e      	mov	r6, r1
 8015b2e:	6860      	ldr	r0, [r4, #4]
 8015b30:	6803      	ldr	r3, [r0, #0]
 8015b32:	685b      	ldr	r3, [r3, #4]
 8015b34:	4798      	blx	r3
 8015b36:	2800      	cmp	r0, #0
 8015b38:	d1f9      	bne.n	8015b2e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8015b3a:	4d0d      	ldr	r5, [pc, #52]	; (8015b70 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8015b3c:	6828      	ldr	r0, [r5, #0]
 8015b3e:	6803      	ldr	r3, [r0, #0]
 8015b40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015b42:	4798      	blx	r3
 8015b44:	f7fd f9de 	bl	8012f04 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8015b48:	6828      	ldr	r0, [r5, #0]
 8015b4a:	2101      	movs	r1, #1
 8015b4c:	f7ff ff84 	bl	8015a58 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 8015b50:	6860      	ldr	r0, [r4, #4]
 8015b52:	6803      	ldr	r3, [r0, #0]
 8015b54:	4631      	mov	r1, r6
 8015b56:	689b      	ldr	r3, [r3, #8]
 8015b58:	4798      	blx	r3
 8015b5a:	6823      	ldr	r3, [r4, #0]
 8015b5c:	4620      	mov	r0, r4
 8015b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b60:	4798      	blx	r3
 8015b62:	6828      	ldr	r0, [r5, #0]
 8015b64:	6803      	ldr	r3, [r0, #0]
 8015b66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015b6c:	4718      	bx	r3
 8015b6e:	bf00      	nop
 8015b70:	2000a0f0 	.word	0x2000a0f0

08015b74 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8015b74:	b508      	push	{r3, lr}
 8015b76:	f7fd f9ab 	bl	8012ed0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015b7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015b7e:	f7fd b9b5 	b.w	8012eec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015b82 <_ZN8touchgfx13DMA_Interface5startEv>:
 8015b82:	b510      	push	{r4, lr}
 8015b84:	4604      	mov	r4, r0
 8015b86:	6840      	ldr	r0, [r0, #4]
 8015b88:	6803      	ldr	r3, [r0, #0]
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	4798      	blx	r3
 8015b8e:	b948      	cbnz	r0, 8015ba4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015b90:	7a63      	ldrb	r3, [r4, #9]
 8015b92:	b13b      	cbz	r3, 8015ba4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015b94:	7a23      	ldrb	r3, [r4, #8]
 8015b96:	b92b      	cbnz	r3, 8015ba4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015b98:	6823      	ldr	r3, [r4, #0]
 8015b9a:	4620      	mov	r0, r4
 8015b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ba2:	4718      	bx	r3
 8015ba4:	bd10      	pop	{r4, pc}
	...

08015ba8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8015ba8:	b510      	push	{r4, lr}
 8015baa:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8015bae:	1b12      	subs	r2, r2, r4
 8015bb0:	2a00      	cmp	r2, #0
 8015bb2:	bfdc      	itt	le
 8015bb4:	6883      	ldrle	r3, [r0, #8]
 8015bb6:	18d2      	addle	r2, r2, r3
 8015bb8:	2a01      	cmp	r2, #1
 8015bba:	dd18      	ble.n	8015bee <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8015bbc:	6843      	ldr	r3, [r0, #4]
 8015bbe:	f101 021c 	add.w	r2, r1, #28
 8015bc2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8015bc6:	f851 4b04 	ldr.w	r4, [r1], #4
 8015bca:	f843 4b04 	str.w	r4, [r3], #4
 8015bce:	4291      	cmp	r1, r2
 8015bd0:	d1f9      	bne.n	8015bc6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8015bd2:	880a      	ldrh	r2, [r1, #0]
 8015bd4:	801a      	strh	r2, [r3, #0]
 8015bd6:	788a      	ldrb	r2, [r1, #2]
 8015bd8:	709a      	strb	r2, [r3, #2]
 8015bda:	68c3      	ldr	r3, [r0, #12]
 8015bdc:	6882      	ldr	r2, [r0, #8]
 8015bde:	f3bf 8f5b 	dmb	ish
 8015be2:	3301      	adds	r3, #1
 8015be4:	429a      	cmp	r2, r3
 8015be6:	bfd8      	it	le
 8015be8:	1a9b      	suble	r3, r3, r2
 8015bea:	60c3      	str	r3, [r0, #12]
 8015bec:	bd10      	pop	{r4, pc}
 8015bee:	4b03      	ldr	r3, [pc, #12]	; (8015bfc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8015bf0:	4a03      	ldr	r2, [pc, #12]	; (8015c00 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8015bf2:	4804      	ldr	r0, [pc, #16]	; (8015c04 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8015bf4:	2139      	movs	r1, #57	; 0x39
 8015bf6:	f011 f815 	bl	8026c24 <__assert_func>
 8015bfa:	bf00      	nop
 8015bfc:	0802b490 	.word	0x0802b490
 8015c00:	0802b584 	.word	0x0802b584
 8015c04:	0802b46a 	.word	0x0802b46a

08015c08 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8015c08:	b510      	push	{r4, lr}
 8015c0a:	6803      	ldr	r3, [r0, #0]
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	4604      	mov	r4, r0
 8015c10:	4798      	blx	r3
 8015c12:	b128      	cbz	r0, 8015c20 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8015c14:	4b07      	ldr	r3, [pc, #28]	; (8015c34 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8015c16:	4a08      	ldr	r2, [pc, #32]	; (8015c38 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8015c18:	4808      	ldr	r0, [pc, #32]	; (8015c3c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8015c1a:	213f      	movs	r1, #63	; 0x3f
 8015c1c:	f011 f802 	bl	8026c24 <__assert_func>
 8015c20:	6923      	ldr	r3, [r4, #16]
 8015c22:	68a2      	ldr	r2, [r4, #8]
 8015c24:	f3bf 8f5b 	dmb	ish
 8015c28:	3301      	adds	r3, #1
 8015c2a:	429a      	cmp	r2, r3
 8015c2c:	bfd8      	it	le
 8015c2e:	1a9b      	suble	r3, r3, r2
 8015c30:	6123      	str	r3, [r4, #16]
 8015c32:	bd10      	pop	{r4, pc}
 8015c34:	0802b4b3 	.word	0x0802b4b3
 8015c38:	0802b5d2 	.word	0x0802b5d2
 8015c3c:	0802b46a 	.word	0x0802b46a

08015c40 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8015c40:	b570      	push	{r4, r5, r6, lr}
 8015c42:	4604      	mov	r4, r0
 8015c44:	6840      	ldr	r0, [r0, #4]
 8015c46:	6803      	ldr	r3, [r0, #0]
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	4798      	blx	r3
 8015c4c:	4605      	mov	r5, r0
 8015c4e:	b930      	cbnz	r0, 8015c5e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015c50:	7a23      	ldrb	r3, [r4, #8]
 8015c52:	b123      	cbz	r3, 8015c5e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015c54:	6860      	ldr	r0, [r4, #4]
 8015c56:	6803      	ldr	r3, [r0, #0]
 8015c58:	695b      	ldr	r3, [r3, #20]
 8015c5a:	4798      	blx	r3
 8015c5c:	7225      	strb	r5, [r4, #8]
 8015c5e:	6860      	ldr	r0, [r4, #4]
 8015c60:	6803      	ldr	r3, [r0, #0]
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	4798      	blx	r3
 8015c66:	b928      	cbnz	r0, 8015c74 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8015c68:	6823      	ldr	r3, [r4, #0]
 8015c6a:	4620      	mov	r0, r4
 8015c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c72:	4718      	bx	r3
 8015c74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c78:	f7fd b950 	b.w	8012f1c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08015c7c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8015c7c:	b510      	push	{r4, lr}
 8015c7e:	4c04      	ldr	r4, [pc, #16]	; (8015c90 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8015c80:	6082      	str	r2, [r0, #8]
 8015c82:	2200      	movs	r2, #0
 8015c84:	e9c0 4100 	strd	r4, r1, [r0]
 8015c88:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8015c8c:	bd10      	pop	{r4, pc}
 8015c8e:	bf00      	nop
 8015c90:	0802b538 	.word	0x0802b538

08015c94 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8015c94:	6840      	ldr	r0, [r0, #4]
 8015c96:	6803      	ldr	r3, [r0, #0]
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	4718      	bx	r3

08015c9c <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8015c9c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8015ca0:	4770      	bx	lr

08015ca2 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8015ca2:	b510      	push	{r4, lr}
 8015ca4:	4604      	mov	r4, r0
 8015ca6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8015ca8:	b150      	cbz	r0, 8015cc0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8015caa:	6803      	ldr	r3, [r0, #0]
 8015cac:	68db      	ldr	r3, [r3, #12]
 8015cae:	4798      	blx	r3
 8015cb0:	b130      	cbz	r0, 8015cc0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8015cb2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015cb4:	6803      	ldr	r3, [r0, #0]
 8015cb6:	4621      	mov	r1, r4
 8015cb8:	689b      	ldr	r3, [r3, #8]
 8015cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015cbe:	4718      	bx	r3
 8015cc0:	bd10      	pop	{r4, pc}

08015cc2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8015cc2:	b570      	push	{r4, r5, r6, lr}
 8015cc4:	790b      	ldrb	r3, [r1, #4]
 8015cc6:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	bf0c      	ite	eq
 8015cce:	2301      	moveq	r3, #1
 8015cd0:	2300      	movne	r3, #0
 8015cd2:	4604      	mov	r4, r0
 8015cd4:	460e      	mov	r6, r1
 8015cd6:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8015cda:	d109      	bne.n	8015cf0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8015cdc:	b14d      	cbz	r5, 8015cf2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8015cde:	7933      	ldrb	r3, [r6, #4]
 8015ce0:	2b01      	cmp	r3, #1
 8015ce2:	d10c      	bne.n	8015cfe <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8015ce4:	6823      	ldr	r3, [r4, #0]
 8015ce6:	4620      	mov	r0, r4
 8015ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015cea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015cee:	4718      	bx	r3
 8015cf0:	b12d      	cbz	r5, 8015cfe <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8015cf2:	6823      	ldr	r3, [r4, #0]
 8015cf4:	4620      	mov	r0, r4
 8015cf6:	695b      	ldr	r3, [r3, #20]
 8015cf8:	4798      	blx	r3
 8015cfa:	2d00      	cmp	r5, #0
 8015cfc:	d1ef      	bne.n	8015cde <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8015cfe:	bd70      	pop	{r4, r5, r6, pc}

08015d00 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 8015d00:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8015d04:	b133      	cbz	r3, 8015d14 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 8015d06:	790b      	ldrb	r3, [r1, #4]
 8015d08:	2b01      	cmp	r3, #1
 8015d0a:	bf01      	itttt	eq
 8015d0c:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 8015d0e:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 8015d10:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 8015d12:	8603      	strheq	r3, [r0, #48]	; 0x30
 8015d14:	f7ff bfd5 	b.w	8015cc2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

08015d18 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8015d18:	2200      	movs	r2, #0
 8015d1a:	8002      	strh	r2, [r0, #0]
 8015d1c:	8042      	strh	r2, [r0, #2]
 8015d1e:	8082      	strh	r2, [r0, #4]
 8015d20:	80c2      	strh	r2, [r0, #6]
 8015d22:	4770      	bx	lr

08015d24 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8015d24:	b570      	push	{r4, r5, r6, lr}
 8015d26:	6803      	ldr	r3, [r0, #0]
 8015d28:	4604      	mov	r4, r0
 8015d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d2c:	4615      	mov	r5, r2
 8015d2e:	4798      	blx	r3
 8015d30:	6823      	ldr	r3, [r4, #0]
 8015d32:	4629      	mov	r1, r5
 8015d34:	4620      	mov	r0, r4
 8015d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015d38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015d3c:	4718      	bx	r3
	...

08015d40 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8015d40:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015d42:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8015d44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015d48:	4299      	cmp	r1, r3
 8015d4a:	d029      	beq.n	8015da0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8015d4c:	4b15      	ldr	r3, [pc, #84]	; (8015da4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8015d4e:	681b      	ldr	r3, [r3, #0]
 8015d50:	b92b      	cbnz	r3, 8015d5e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8015d52:	4b15      	ldr	r3, [pc, #84]	; (8015da8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8015d54:	4a15      	ldr	r2, [pc, #84]	; (8015dac <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8015d56:	21b1      	movs	r1, #177	; 0xb1
 8015d58:	4815      	ldr	r0, [pc, #84]	; (8015db0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8015d5a:	f010 ff63 	bl	8026c24 <__assert_func>
 8015d5e:	4a15      	ldr	r2, [pc, #84]	; (8015db4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8015d60:	8812      	ldrh	r2, [r2, #0]
 8015d62:	428a      	cmp	r2, r1
 8015d64:	d803      	bhi.n	8015d6e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 8015d66:	4b14      	ldr	r3, [pc, #80]	; (8015db8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8015d68:	4a10      	ldr	r2, [pc, #64]	; (8015dac <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8015d6a:	21b2      	movs	r1, #178	; 0xb2
 8015d6c:	e7f4      	b.n	8015d58 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 8015d6e:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8015d72:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8015d76:	4b11      	ldr	r3, [pc, #68]	; (8015dbc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8015d78:	7854      	ldrb	r4, [r2, #1]
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8015d80:	682b      	ldr	r3, [r5, #0]
 8015d82:	69de      	ldr	r6, [r3, #28]
 8015d84:	4b0e      	ldr	r3, [pc, #56]	; (8015dc0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8015d86:	6818      	ldr	r0, [r3, #0]
 8015d88:	f7fc f8e6 	bl	8011f58 <_ZNK8touchgfx5Texts7getTextEt>
 8015d8c:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8015d90:	2300      	movs	r3, #0
 8015d92:	4602      	mov	r2, r0
 8015d94:	9300      	str	r3, [sp, #0]
 8015d96:	4621      	mov	r1, r4
 8015d98:	4628      	mov	r0, r5
 8015d9a:	47b0      	blx	r6
 8015d9c:	b002      	add	sp, #8
 8015d9e:	bd70      	pop	{r4, r5, r6, pc}
 8015da0:	2000      	movs	r0, #0
 8015da2:	e7fb      	b.n	8015d9c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8015da4:	2000a140 	.word	0x2000a140
 8015da8:	0802aaef 	.word	0x0802aaef
 8015dac:	0802b758 	.word	0x0802b758
 8015db0:	0802ab31 	.word	0x0802ab31
 8015db4:	2000a144 	.word	0x2000a144
 8015db8:	0802ab5a 	.word	0x0802ab5a
 8015dbc:	2000a148 	.word	0x2000a148
 8015dc0:	2000a14c 	.word	0x2000a14c

08015dc4 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8015dc4:	b570      	push	{r4, r5, r6, lr}
 8015dc6:	6803      	ldr	r3, [r0, #0]
 8015dc8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8015dca:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8015dcc:	4b11      	ldr	r3, [pc, #68]	; (8015e14 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	4604      	mov	r4, r0
 8015dd2:	b28d      	uxth	r5, r1
 8015dd4:	b92b      	cbnz	r3, 8015de2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8015dd6:	4b10      	ldr	r3, [pc, #64]	; (8015e18 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8015dd8:	4a10      	ldr	r2, [pc, #64]	; (8015e1c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8015dda:	21b1      	movs	r1, #177	; 0xb1
 8015ddc:	4810      	ldr	r0, [pc, #64]	; (8015e20 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8015dde:	f010 ff21 	bl	8026c24 <__assert_func>
 8015de2:	4910      	ldr	r1, [pc, #64]	; (8015e24 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8015de4:	8809      	ldrh	r1, [r1, #0]
 8015de6:	4291      	cmp	r1, r2
 8015de8:	d803      	bhi.n	8015df2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8015dea:	4b0f      	ldr	r3, [pc, #60]	; (8015e28 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8015dec:	4a0b      	ldr	r2, [pc, #44]	; (8015e1c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8015dee:	21b2      	movs	r1, #178	; 0xb2
 8015df0:	e7f4      	b.n	8015ddc <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8015df2:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8015df6:	4b0d      	ldr	r3, [pc, #52]	; (8015e2c <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8015dfe:	6803      	ldr	r3, [r0, #0]
 8015e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e02:	4798      	blx	r3
 8015e04:	1a29      	subs	r1, r5, r0
 8015e06:	4633      	mov	r3, r6
 8015e08:	4620      	mov	r0, r4
 8015e0a:	b209      	sxth	r1, r1
 8015e0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e10:	4718      	bx	r3
 8015e12:	bf00      	nop
 8015e14:	2000a140 	.word	0x2000a140
 8015e18:	0802aaef 	.word	0x0802aaef
 8015e1c:	0802b758 	.word	0x0802b758
 8015e20:	0802ab31 	.word	0x0802ab31
 8015e24:	2000a144 	.word	0x2000a144
 8015e28:	0802ab5a 	.word	0x0802ab5a
 8015e2c:	2000a148 	.word	0x2000a148

08015e30 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8015e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e34:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8015e36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015e3a:	4293      	cmp	r3, r2
 8015e3c:	b08c      	sub	sp, #48	; 0x30
 8015e3e:	4604      	mov	r4, r0
 8015e40:	4688      	mov	r8, r1
 8015e42:	d05f      	beq.n	8015f04 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8015e44:	4e31      	ldr	r6, [pc, #196]	; (8015f0c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8015e46:	6832      	ldr	r2, [r6, #0]
 8015e48:	b92a      	cbnz	r2, 8015e56 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 8015e4a:	4b31      	ldr	r3, [pc, #196]	; (8015f10 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8015e4c:	4a31      	ldr	r2, [pc, #196]	; (8015f14 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8015e4e:	21b1      	movs	r1, #177	; 0xb1
 8015e50:	4831      	ldr	r0, [pc, #196]	; (8015f18 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8015e52:	f010 fee7 	bl	8026c24 <__assert_func>
 8015e56:	4d31      	ldr	r5, [pc, #196]	; (8015f1c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8015e58:	8829      	ldrh	r1, [r5, #0]
 8015e5a:	4299      	cmp	r1, r3
 8015e5c:	d803      	bhi.n	8015e66 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 8015e5e:	4b30      	ldr	r3, [pc, #192]	; (8015f20 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8015e60:	4a2c      	ldr	r2, [pc, #176]	; (8015f14 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8015e62:	21b2      	movs	r1, #178	; 0xb2
 8015e64:	e7f4      	b.n	8015e50 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8015e66:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8015e6a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8015e6e:	4b2d      	ldr	r3, [pc, #180]	; (8015f24 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015e76:	2a00      	cmp	r2, #0
 8015e78:	d044      	beq.n	8015f04 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8015e7a:	784b      	ldrb	r3, [r1, #1]
 8015e7c:	9207      	str	r2, [sp, #28]
 8015e7e:	f3c3 0901 	ubfx	r9, r3, #0, #2
 8015e82:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8015e86:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8015e8a:	4b27      	ldr	r3, [pc, #156]	; (8015f28 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 8015e8c:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8015e96:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8015e9a:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8015e9e:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8015ea2:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8015ea6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8015ea8:	9009      	str	r0, [sp, #36]	; 0x24
 8015eaa:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8015eae:	f88d 9020 	strb.w	r9, [sp, #32]
 8015eb2:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8015eb6:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8015eba:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 8015ebe:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8015ec2:	b10a      	cbz	r2, 8015ec8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8015ec4:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8015ec6:	b907      	cbnz	r7, 8015eca <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 8015ec8:	689f      	ldr	r7, [r3, #8]
 8015eca:	f10d 0914 	add.w	r9, sp, #20
 8015ece:	4621      	mov	r1, r4
 8015ed0:	4648      	mov	r0, r9
 8015ed2:	f002 ff94 	bl	8018dfe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015ed6:	6833      	ldr	r3, [r6, #0]
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d0b6      	beq.n	8015e4a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 8015edc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8015ede:	882b      	ldrh	r3, [r5, #0]
 8015ee0:	428b      	cmp	r3, r1
 8015ee2:	d9bc      	bls.n	8015e5e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8015ee4:	4b11      	ldr	r3, [pc, #68]	; (8015f2c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 8015ee6:	6818      	ldr	r0, [r3, #0]
 8015ee8:	f7fc f836 	bl	8011f58 <_ZNK8touchgfx5Texts7getTextEt>
 8015eec:	2300      	movs	r3, #0
 8015eee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015ef2:	ab07      	add	r3, sp, #28
 8015ef4:	9001      	str	r0, [sp, #4]
 8015ef6:	9300      	str	r3, [sp, #0]
 8015ef8:	e899 0006 	ldmia.w	r9, {r1, r2}
 8015efc:	4643      	mov	r3, r8
 8015efe:	4638      	mov	r0, r7
 8015f00:	f7fb ffbb 	bl	8011e7a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015f04:	b00c      	add	sp, #48	; 0x30
 8015f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f0a:	bf00      	nop
 8015f0c:	2000a140 	.word	0x2000a140
 8015f10:	0802aaef 	.word	0x0802aaef
 8015f14:	0802b758 	.word	0x0802b758
 8015f18:	0802ab31 	.word	0x0802ab31
 8015f1c:	2000a144 	.word	0x2000a144
 8015f20:	0802ab5a 	.word	0x0802ab5a
 8015f24:	2000a148 	.word	0x2000a148
 8015f28:	2000a0f0 	.word	0x2000a0f0
 8015f2c:	2000a14c 	.word	0x2000a14c

08015f30 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8015f30:	b40e      	push	{r1, r2, r3}
 8015f32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f36:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8015f38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015f3c:	4293      	cmp	r3, r2
 8015f3e:	b09b      	sub	sp, #108	; 0x6c
 8015f40:	4604      	mov	r4, r0
 8015f42:	d061      	beq.n	8016008 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
 8015f44:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801601c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 8015f48:	aa24      	add	r2, sp, #144	; 0x90
 8015f4a:	9203      	str	r2, [sp, #12]
 8015f4c:	f8da 2000 	ldr.w	r2, [sl]
 8015f50:	b92a      	cbnz	r2, 8015f5e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8015f52:	4b2e      	ldr	r3, [pc, #184]	; (801600c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>)
 8015f54:	4a2e      	ldr	r2, [pc, #184]	; (8016010 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 8015f56:	21b1      	movs	r1, #177	; 0xb1
 8015f58:	482e      	ldr	r0, [pc, #184]	; (8016014 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>)
 8015f5a:	f010 fe63 	bl	8026c24 <__assert_func>
 8015f5e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8016020 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>
 8015f62:	f8b8 1000 	ldrh.w	r1, [r8]
 8015f66:	4299      	cmp	r1, r3
 8015f68:	d803      	bhi.n	8015f72 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 8015f6a:	4b2b      	ldr	r3, [pc, #172]	; (8016018 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 8015f6c:	4a28      	ldr	r2, [pc, #160]	; (8016010 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 8015f6e:	21b2      	movs	r1, #178	; 0xb2
 8015f70:	e7f2      	b.n	8015f58 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 8015f72:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8016024 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>
 8015f76:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8015f7a:	f8d9 3000 	ldr.w	r3, [r9]
 8015f7e:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8015f82:	683b      	ldr	r3, [r7, #0]
 8015f84:	4638      	mov	r0, r7
 8015f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f88:	4798      	blx	r3
 8015f8a:	4606      	mov	r6, r0
 8015f8c:	b205      	sxth	r5, r0
 8015f8e:	a804      	add	r0, sp, #16
 8015f90:	f003 fb49 	bl	8019626 <_ZN8touchgfx12TextProviderC1Ev>
 8015f94:	683b      	ldr	r3, [r7, #0]
 8015f96:	4638      	mov	r0, r7
 8015f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f9a:	4798      	blx	r3
 8015f9c:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8015f9e:	9a03      	ldr	r2, [sp, #12]
 8015fa0:	4603      	mov	r3, r0
 8015fa2:	a804      	add	r0, sp, #16
 8015fa4:	f003 fb84 	bl	80196b0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8015fa8:	f8da 3000 	ldr.w	r3, [sl]
 8015fac:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d0ce      	beq.n	8015f52 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8015fb4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8015fb6:	f8b8 0000 	ldrh.w	r0, [r8]
 8015fba:	4290      	cmp	r0, r2
 8015fbc:	d9d5      	bls.n	8015f6a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 8015fbe:	eb03 0742 	add.w	r7, r3, r2, lsl #1
 8015fc2:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8015fc6:	787a      	ldrb	r2, [r7, #1]
 8015fc8:	f8d9 3000 	ldr.w	r3, [r9]
 8015fcc:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
 8015fd0:	9700      	str	r7, [sp, #0]
 8015fd2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015fd6:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8015fda:	a804      	add	r0, sp, #16
 8015fdc:	f001 fa7a 	bl	80174d4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8015fe0:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8015fe4:	18a9      	adds	r1, r5, r2
 8015fe6:	2900      	cmp	r1, #0
 8015fe8:	b203      	sxth	r3, r0
 8015fea:	dd0b      	ble.n	8016004 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 8015fec:	3b01      	subs	r3, #1
 8015fee:	fb13 f302 	smulbb	r3, r3, r2
 8015ff2:	fb16 3300 	smlabb	r3, r6, r0, r3
 8015ff6:	b21d      	sxth	r5, r3
 8015ff8:	4628      	mov	r0, r5
 8015ffa:	b01b      	add	sp, #108	; 0x6c
 8015ffc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016000:	b003      	add	sp, #12
 8016002:	4770      	bx	lr
 8016004:	2b00      	cmp	r3, #0
 8016006:	dcf7      	bgt.n	8015ff8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8016008:	2500      	movs	r5, #0
 801600a:	e7f5      	b.n	8015ff8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 801600c:	0802aaef 	.word	0x0802aaef
 8016010:	0802b758 	.word	0x0802b758
 8016014:	0802ab31 	.word	0x0802ab31
 8016018:	0802ab5a 	.word	0x0802ab5a
 801601c:	2000a140 	.word	0x2000a140
 8016020:	2000a144 	.word	0x2000a144
 8016024:	2000a148 	.word	0x2000a148

08016028 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8016028:	b570      	push	{r4, r5, r6, lr}
 801602a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801602c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016030:	4299      	cmp	r1, r3
 8016032:	4604      	mov	r4, r0
 8016034:	d01e      	beq.n	8016074 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8016036:	6803      	ldr	r3, [r0, #0]
 8016038:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801603a:	4b0f      	ldr	r3, [pc, #60]	; (8016078 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	b92b      	cbnz	r3, 801604c <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8016040:	4b0e      	ldr	r3, [pc, #56]	; (801607c <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 8016042:	4a0f      	ldr	r2, [pc, #60]	; (8016080 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8016044:	21b1      	movs	r1, #177	; 0xb1
 8016046:	480f      	ldr	r0, [pc, #60]	; (8016084 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8016048:	f010 fdec 	bl	8026c24 <__assert_func>
 801604c:	4b0e      	ldr	r3, [pc, #56]	; (8016088 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 801604e:	881b      	ldrh	r3, [r3, #0]
 8016050:	428b      	cmp	r3, r1
 8016052:	d803      	bhi.n	801605c <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8016054:	4b0d      	ldr	r3, [pc, #52]	; (801608c <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8016056:	4a0a      	ldr	r2, [pc, #40]	; (8016080 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8016058:	21b2      	movs	r1, #178	; 0xb2
 801605a:	e7f4      	b.n	8016046 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 801605c:	4b0c      	ldr	r3, [pc, #48]	; (8016090 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 801605e:	6818      	ldr	r0, [r3, #0]
 8016060:	f7fb ff7a 	bl	8011f58 <_ZNK8touchgfx5Texts7getTextEt>
 8016064:	2300      	movs	r3, #0
 8016066:	4601      	mov	r1, r0
 8016068:	46ac      	mov	ip, r5
 801606a:	4620      	mov	r0, r4
 801606c:	461a      	mov	r2, r3
 801606e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016072:	4760      	bx	ip
 8016074:	2000      	movs	r0, #0
 8016076:	bd70      	pop	{r4, r5, r6, pc}
 8016078:	2000a140 	.word	0x2000a140
 801607c:	0802aaef 	.word	0x0802aaef
 8016080:	0802b758 	.word	0x0802b758
 8016084:	0802ab31 	.word	0x0802ab31
 8016088:	2000a144 	.word	0x2000a144
 801608c:	0802ab5a 	.word	0x0802ab5a
 8016090:	2000a14c 	.word	0x2000a14c

08016094 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8016094:	b538      	push	{r3, r4, r5, lr}
 8016096:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8016098:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801609c:	429a      	cmp	r2, r3
 801609e:	4604      	mov	r4, r0
 80160a0:	d014      	beq.n	80160cc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 80160a2:	6803      	ldr	r3, [r0, #0]
 80160a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80160a6:	4798      	blx	r3
 80160a8:	6823      	ldr	r3, [r4, #0]
 80160aa:	4605      	mov	r5, r0
 80160ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80160ae:	4620      	mov	r0, r4
 80160b0:	4798      	blx	r3
 80160b2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80160b6:	b22d      	sxth	r5, r5
 80160b8:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80160bc:	4601      	mov	r1, r0
 80160be:	bf06      	itte	eq
 80160c0:	4602      	moveq	r2, r0
 80160c2:	4629      	moveq	r1, r5
 80160c4:	462a      	movne	r2, r5
 80160c6:	4620      	mov	r0, r4
 80160c8:	f7fa fd88 	bl	8010bdc <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80160cc:	bd38      	pop	{r3, r4, r5, pc}

080160ce <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 80160ce:	888a      	ldrh	r2, [r1, #4]
 80160d0:	8582      	strh	r2, [r0, #44]	; 0x2c
 80160d2:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80160d6:	b922      	cbnz	r2, 80160e2 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 80160d8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80160dc:	b90b      	cbnz	r3, 80160e2 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 80160de:	f7ff bfd9 	b.w	8016094 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 80160e2:	4770      	bx	lr

080160e4 <_ZNK8touchgfx3Box12getSolidRectEv>:
 80160e4:	2300      	movs	r3, #0
 80160e6:	8083      	strh	r3, [r0, #4]
 80160e8:	80c3      	strh	r3, [r0, #6]
 80160ea:	8003      	strh	r3, [r0, #0]
 80160ec:	8043      	strh	r3, [r0, #2]
 80160ee:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 80160f2:	2bff      	cmp	r3, #255	; 0xff
 80160f4:	bf01      	itttt	eq
 80160f6:	890b      	ldrheq	r3, [r1, #8]
 80160f8:	8083      	strheq	r3, [r0, #4]
 80160fa:	894b      	ldrheq	r3, [r1, #10]
 80160fc:	80c3      	strheq	r3, [r0, #6]
 80160fe:	4770      	bx	lr

08016100 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8016100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016102:	4604      	mov	r4, r0
 8016104:	6808      	ldr	r0, [r1, #0]
 8016106:	6849      	ldr	r1, [r1, #4]
 8016108:	466b      	mov	r3, sp
 801610a:	c303      	stmia	r3!, {r0, r1}
 801610c:	6823      	ldr	r3, [r4, #0]
 801610e:	4669      	mov	r1, sp
 8016110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016112:	4620      	mov	r0, r4
 8016114:	4798      	blx	r3
 8016116:	4b08      	ldr	r3, [pc, #32]	; (8016138 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801611e:	b10a      	cbz	r2, 8016124 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8016120:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8016122:	b900      	cbnz	r0, 8016126 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8016124:	6898      	ldr	r0, [r3, #8]
 8016126:	6803      	ldr	r3, [r0, #0]
 8016128:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801612a:	699d      	ldr	r5, [r3, #24]
 801612c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8016130:	4669      	mov	r1, sp
 8016132:	47a8      	blx	r5
 8016134:	b003      	add	sp, #12
 8016136:	bd30      	pop	{r4, r5, pc}
 8016138:	2000a0f0 	.word	0x2000a0f0

0801613c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801613c:	b570      	push	{r4, r5, r6, lr}
 801613e:	880b      	ldrh	r3, [r1, #0]
 8016140:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8016142:	4605      	mov	r5, r0
 8016144:	8813      	ldrh	r3, [r2, #0]
 8016146:	f825 3f30 	strh.w	r3, [r5, #48]!
 801614a:	4604      	mov	r4, r0
 801614c:	4628      	mov	r0, r5
 801614e:	f004 fe57 	bl	801ae00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016152:	4606      	mov	r6, r0
 8016154:	4628      	mov	r0, r5
 8016156:	f004 fe8d 	bl	801ae74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801615a:	6823      	ldr	r3, [r4, #0]
 801615c:	4605      	mov	r5, r0
 801615e:	b231      	sxth	r1, r6
 8016160:	4620      	mov	r0, r4
 8016162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016164:	4798      	blx	r3
 8016166:	6823      	ldr	r3, [r4, #0]
 8016168:	b229      	sxth	r1, r5
 801616a:	4620      	mov	r0, r4
 801616c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801616e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016172:	4718      	bx	r3

08016174 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8016174:	b510      	push	{r4, lr}
 8016176:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 801617a:	2bff      	cmp	r3, #255	; 0xff
 801617c:	4604      	mov	r4, r0
 801617e:	d006      	beq.n	801618e <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8016180:	2300      	movs	r3, #0
 8016182:	8003      	strh	r3, [r0, #0]
 8016184:	8043      	strh	r3, [r0, #2]
 8016186:	8083      	strh	r3, [r0, #4]
 8016188:	80c3      	strh	r3, [r0, #6]
 801618a:	4620      	mov	r0, r4
 801618c:	bd10      	pop	{r4, pc}
 801618e:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8016192:	b11b      	cbz	r3, 801619c <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8016194:	3130      	adds	r1, #48	; 0x30
 8016196:	f004 fea7 	bl	801aee8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801619a:	e7f6      	b.n	801618a <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801619c:	312e      	adds	r1, #46	; 0x2e
 801619e:	e7fa      	b.n	8016196 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

080161a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 80161a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161a4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80161a8:	b08a      	sub	sp, #40	; 0x28
 80161aa:	4604      	mov	r4, r0
 80161ac:	4688      	mov	r8, r1
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d044      	beq.n	801623c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 80161b2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80161b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80161b8:	a805      	add	r0, sp, #20
 80161ba:	f004 fe21 	bl	801ae00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80161be:	4605      	mov	r5, r0
 80161c0:	b206      	sxth	r6, r0
 80161c2:	a805      	add	r0, sp, #20
 80161c4:	f004 fe56 	bl	801ae74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80161c8:	f9b8 2000 	ldrsh.w	r2, [r8]
 80161cc:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 80161d0:	4417      	add	r7, r2
 80161d2:	b2bf      	uxth	r7, r7
 80161d4:	2300      	movs	r3, #0
 80161d6:	fa0f fe87 	sxth.w	lr, r7
 80161da:	459e      	cmp	lr, r3
 80161dc:	fa0f fc80 	sxth.w	ip, r0
 80161e0:	9306      	str	r3, [sp, #24]
 80161e2:	dd2d      	ble.n	8016240 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 80161e4:	4296      	cmp	r6, r2
 80161e6:	dd2b      	ble.n	8016240 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 80161e8:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 80161ec:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 80161f0:	4419      	add	r1, r3
 80161f2:	b289      	uxth	r1, r1
 80161f4:	fa0f f881 	sxth.w	r8, r1
 80161f8:	f1b8 0f00 	cmp.w	r8, #0
 80161fc:	dd20      	ble.n	8016240 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 80161fe:	459c      	cmp	ip, r3
 8016200:	dd1e      	ble.n	8016240 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8016202:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8016206:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801620a:	4576      	cmp	r6, lr
 801620c:	bfa8      	it	ge
 801620e:	463d      	movge	r5, r7
 8016210:	45c4      	cmp	ip, r8
 8016212:	bfa8      	it	ge
 8016214:	4608      	movge	r0, r1
 8016216:	1aad      	subs	r5, r5, r2
 8016218:	1ac0      	subs	r0, r0, r3
 801621a:	f8ad 501c 	strh.w	r5, [sp, #28]
 801621e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8016222:	f8ad 2018 	strh.w	r2, [sp, #24]
 8016226:	f8ad 301a 	strh.w	r3, [sp, #26]
 801622a:	4b1f      	ldr	r3, [pc, #124]	; (80162a8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	b953      	cbnz	r3, 8016246 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 8016230:	4b1e      	ldr	r3, [pc, #120]	; (80162ac <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 8016232:	4a1f      	ldr	r2, [pc, #124]	; (80162b0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 8016234:	481f      	ldr	r0, [pc, #124]	; (80162b4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 8016236:	218b      	movs	r1, #139	; 0x8b
 8016238:	f010 fcf4 	bl	8026c24 <__assert_func>
 801623c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801623e:	e7b9      	b.n	80161b4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8016240:	2300      	movs	r3, #0
 8016242:	9307      	str	r3, [sp, #28]
 8016244:	e7f1      	b.n	801622a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 8016246:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801624a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801624e:	429a      	cmp	r2, r3
 8016250:	d026      	beq.n	80162a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8016252:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8016256:	2b00      	cmp	r3, #0
 8016258:	dd22      	ble.n	80162a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801625a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801625e:	2b00      	cmp	r3, #0
 8016260:	dd1e      	ble.n	80162a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8016262:	2300      	movs	r3, #0
 8016264:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8016268:	6823      	ldr	r3, [r4, #0]
 801626a:	a908      	add	r1, sp, #32
 801626c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801626e:	4620      	mov	r0, r4
 8016270:	4798      	blx	r3
 8016272:	4b11      	ldr	r3, [pc, #68]	; (80162b8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801627a:	b10a      	cbz	r2, 8016280 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 801627c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801627e:	b900      	cbnz	r0, 8016282 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 8016280:	6898      	ldr	r0, [r3, #8]
 8016282:	6801      	ldr	r1, [r0, #0]
 8016284:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8016288:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801628c:	2501      	movs	r5, #1
 801628e:	9502      	str	r5, [sp, #8]
 8016290:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8016294:	9401      	str	r4, [sp, #4]
 8016296:	ac06      	add	r4, sp, #24
 8016298:	9400      	str	r4, [sp, #0]
 801629a:	688c      	ldr	r4, [r1, #8]
 801629c:	a905      	add	r1, sp, #20
 801629e:	47a0      	blx	r4
 80162a0:	b00a      	add	sp, #40	; 0x28
 80162a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162a6:	bf00      	nop
 80162a8:	2000a178 	.word	0x2000a178
 80162ac:	0802b7ec 	.word	0x0802b7ec
 80162b0:	0802b8c0 	.word	0x0802b8c0
 80162b4:	0802b828 	.word	0x0802b828
 80162b8:	2000a0f0 	.word	0x2000a0f0

080162bc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 80162bc:	b570      	push	{r4, r5, r6, lr}
 80162be:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80162c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80162c4:	4299      	cmp	r1, r3
 80162c6:	4604      	mov	r4, r0
 80162c8:	d01e      	beq.n	8016308 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 80162ca:	6803      	ldr	r3, [r0, #0]
 80162cc:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 80162ce:	4b0f      	ldr	r3, [pc, #60]	; (801630c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	b92b      	cbnz	r3, 80162e0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 80162d4:	4b0e      	ldr	r3, [pc, #56]	; (8016310 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 80162d6:	4a0f      	ldr	r2, [pc, #60]	; (8016314 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 80162d8:	21b1      	movs	r1, #177	; 0xb1
 80162da:	480f      	ldr	r0, [pc, #60]	; (8016318 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 80162dc:	f010 fca2 	bl	8026c24 <__assert_func>
 80162e0:	4b0e      	ldr	r3, [pc, #56]	; (801631c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 80162e2:	881b      	ldrh	r3, [r3, #0]
 80162e4:	428b      	cmp	r3, r1
 80162e6:	d803      	bhi.n	80162f0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 80162e8:	4b0d      	ldr	r3, [pc, #52]	; (8016320 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 80162ea:	4a0a      	ldr	r2, [pc, #40]	; (8016314 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 80162ec:	21b2      	movs	r1, #178	; 0xb2
 80162ee:	e7f4      	b.n	80162da <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 80162f0:	4b0c      	ldr	r3, [pc, #48]	; (8016324 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 80162f2:	6818      	ldr	r0, [r3, #0]
 80162f4:	f7fb fe30 	bl	8011f58 <_ZNK8touchgfx5Texts7getTextEt>
 80162f8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80162fa:	4601      	mov	r1, r0
 80162fc:	46ac      	mov	ip, r5
 80162fe:	4620      	mov	r0, r4
 8016300:	2300      	movs	r3, #0
 8016302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016306:	4760      	bx	ip
 8016308:	2000      	movs	r0, #0
 801630a:	bd70      	pop	{r4, r5, r6, pc}
 801630c:	2000a140 	.word	0x2000a140
 8016310:	0802aaef 	.word	0x0802aaef
 8016314:	0802b96c 	.word	0x0802b96c
 8016318:	0802ab31 	.word	0x0802ab31
 801631c:	2000a144 	.word	0x2000a144
 8016320:	0802ab5a 	.word	0x0802ab5a
 8016324:	2000a14c 	.word	0x2000a14c

08016328 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8016328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801632c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801632e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016332:	4293      	cmp	r3, r2
 8016334:	b08c      	sub	sp, #48	; 0x30
 8016336:	4604      	mov	r4, r0
 8016338:	460e      	mov	r6, r1
 801633a:	d05d      	beq.n	80163f8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801633c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 801641c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 8016340:	f8d8 2000 	ldr.w	r2, [r8]
 8016344:	b92a      	cbnz	r2, 8016352 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 8016346:	4b2e      	ldr	r3, [pc, #184]	; (8016400 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 8016348:	4a2e      	ldr	r2, [pc, #184]	; (8016404 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 801634a:	21b1      	movs	r1, #177	; 0xb1
 801634c:	482e      	ldr	r0, [pc, #184]	; (8016408 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 801634e:	f010 fc69 	bl	8026c24 <__assert_func>
 8016352:	4f2e      	ldr	r7, [pc, #184]	; (801640c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 8016354:	8839      	ldrh	r1, [r7, #0]
 8016356:	4299      	cmp	r1, r3
 8016358:	d803      	bhi.n	8016362 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 801635a:	4b2d      	ldr	r3, [pc, #180]	; (8016410 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 801635c:	4a29      	ldr	r2, [pc, #164]	; (8016404 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 801635e:	21b2      	movs	r1, #178	; 0xb2
 8016360:	e7f4      	b.n	801634c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 8016362:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8016366:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801636a:	4b2a      	ldr	r3, [pc, #168]	; (8016414 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8016372:	2a00      	cmp	r2, #0
 8016374:	d040      	beq.n	80163f8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8016376:	784b      	ldrb	r3, [r1, #1]
 8016378:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 801637c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8016380:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8016384:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 8016388:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 801638c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801638e:	9207      	str	r2, [sp, #28]
 8016390:	f3c3 0901 	ubfx	r9, r3, #0, #2
 8016394:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8016398:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801639c:	f88d 9020 	strb.w	r9, [sp, #32]
 80163a0:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 80163a4:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 80163a8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80163ac:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 80163b0:	9009      	str	r0, [sp, #36]	; 0x24
 80163b2:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 80163b6:	f7f9 fe59 	bl	801006c <_ZN8touchgfx3HAL3lcdEv>
 80163ba:	ad05      	add	r5, sp, #20
 80163bc:	4681      	mov	r9, r0
 80163be:	4621      	mov	r1, r4
 80163c0:	4628      	mov	r0, r5
 80163c2:	f002 fd1c 	bl	8018dfe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80163c6:	f8d8 3000 	ldr.w	r3, [r8]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d0bb      	beq.n	8016346 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 80163ce:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80163d0:	883b      	ldrh	r3, [r7, #0]
 80163d2:	428b      	cmp	r3, r1
 80163d4:	d9c1      	bls.n	801635a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 80163d6:	4b10      	ldr	r3, [pc, #64]	; (8016418 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 80163d8:	6818      	ldr	r0, [r3, #0]
 80163da:	f7fb fdbd 	bl	8011f58 <_ZNK8touchgfx5Texts7getTextEt>
 80163de:	2300      	movs	r3, #0
 80163e0:	9303      	str	r3, [sp, #12]
 80163e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80163e4:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80163e8:	ab07      	add	r3, sp, #28
 80163ea:	9300      	str	r3, [sp, #0]
 80163ec:	e895 0006 	ldmia.w	r5, {r1, r2}
 80163f0:	4633      	mov	r3, r6
 80163f2:	4648      	mov	r0, r9
 80163f4:	f7fb fd41 	bl	8011e7a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80163f8:	b00c      	add	sp, #48	; 0x30
 80163fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163fe:	bf00      	nop
 8016400:	0802aaef 	.word	0x0802aaef
 8016404:	0802b96c 	.word	0x0802b96c
 8016408:	0802ab31 	.word	0x0802ab31
 801640c:	2000a144 	.word	0x2000a144
 8016410:	0802ab5a 	.word	0x0802ab5a
 8016414:	2000a148 	.word	0x2000a148
 8016418:	2000a14c 	.word	0x2000a14c
 801641c:	2000a140 	.word	0x2000a140

08016420 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8016420:	b570      	push	{r4, r5, r6, lr}
 8016422:	880b      	ldrh	r3, [r1, #0]
 8016424:	84c3      	strh	r3, [r0, #38]	; 0x26
 8016426:	4604      	mov	r4, r0
 8016428:	4608      	mov	r0, r1
 801642a:	460d      	mov	r5, r1
 801642c:	f004 fce8 	bl	801ae00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016430:	4606      	mov	r6, r0
 8016432:	4628      	mov	r0, r5
 8016434:	f004 fd1e 	bl	801ae74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016438:	6823      	ldr	r3, [r4, #0]
 801643a:	4605      	mov	r5, r0
 801643c:	b231      	sxth	r1, r6
 801643e:	4620      	mov	r0, r4
 8016440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016442:	4798      	blx	r3
 8016444:	6823      	ldr	r3, [r4, #0]
 8016446:	b229      	sxth	r1, r5
 8016448:	4620      	mov	r0, r4
 801644a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801644c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016450:	4718      	bx	r3

08016452 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8016452:	b510      	push	{r4, lr}
 8016454:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8016458:	2bff      	cmp	r3, #255	; 0xff
 801645a:	4604      	mov	r4, r0
 801645c:	d006      	beq.n	801646c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801645e:	2300      	movs	r3, #0
 8016460:	8003      	strh	r3, [r0, #0]
 8016462:	8043      	strh	r3, [r0, #2]
 8016464:	8083      	strh	r3, [r0, #4]
 8016466:	80c3      	strh	r3, [r0, #6]
 8016468:	4620      	mov	r0, r4
 801646a:	bd10      	pop	{r4, pc}
 801646c:	3126      	adds	r1, #38	; 0x26
 801646e:	f004 fd3b 	bl	801aee8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8016472:	e7f9      	b.n	8016468 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08016474 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8016474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016478:	4604      	mov	r4, r0
 801647a:	b088      	sub	sp, #32
 801647c:	f854 3b26 	ldr.w	r3, [r4], #38
 8016480:	2500      	movs	r5, #0
 8016482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016484:	460f      	mov	r7, r1
 8016486:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801648a:	a904      	add	r1, sp, #16
 801648c:	4606      	mov	r6, r0
 801648e:	4798      	blx	r3
 8016490:	4620      	mov	r0, r4
 8016492:	f004 fcb5 	bl	801ae00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016496:	4680      	mov	r8, r0
 8016498:	4620      	mov	r0, r4
 801649a:	f004 fceb 	bl	801ae74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801649e:	9506      	str	r5, [sp, #24]
 80164a0:	ad06      	add	r5, sp, #24
 80164a2:	f8ad 001e 	strh.w	r0, [sp, #30]
 80164a6:	4639      	mov	r1, r7
 80164a8:	4628      	mov	r0, r5
 80164aa:	f8ad 801c 	strh.w	r8, [sp, #28]
 80164ae:	f7fe fc13 	bl	8014cd8 <_ZN8touchgfx4RectaNERKS0_>
 80164b2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	dd19      	ble.n	80164ee <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80164ba:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	dd15      	ble.n	80164ee <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80164c2:	4b0c      	ldr	r3, [pc, #48]	; (80164f4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80164ca:	b10a      	cbz	r2, 80164d0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80164cc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80164ce:	b900      	cbnz	r0, 80164d2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80164d0:	6898      	ldr	r0, [r3, #8]
 80164d2:	6801      	ldr	r1, [r0, #0]
 80164d4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80164d8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80164dc:	2701      	movs	r7, #1
 80164de:	9702      	str	r7, [sp, #8]
 80164e0:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80164e4:	e9cd 5600 	strd	r5, r6, [sp]
 80164e8:	688d      	ldr	r5, [r1, #8]
 80164ea:	4621      	mov	r1, r4
 80164ec:	47a8      	blx	r5
 80164ee:	b008      	add	sp, #32
 80164f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164f4:	2000a0f0 	.word	0x2000a0f0

080164f8 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80164f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164fc:	4696      	mov	lr, r2
 80164fe:	4605      	mov	r5, r0
 8016500:	4614      	mov	r4, r2
 8016502:	460e      	mov	r6, r1
 8016504:	461f      	mov	r7, r3
 8016506:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801650a:	b097      	sub	sp, #92	; 0x5c
 801650c:	f10d 0c1c 	add.w	ip, sp, #28
 8016510:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016514:	f8de 3000 	ldr.w	r3, [lr]
 8016518:	f8cc 3000 	str.w	r3, [ip]
 801651c:	f104 0e14 	add.w	lr, r4, #20
 8016520:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016524:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8016528:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801652c:	f8de 3000 	ldr.w	r3, [lr]
 8016530:	f8cc 3000 	str.w	r3, [ip]
 8016534:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8016538:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801653c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8016540:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016544:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8016548:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801654c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8016550:	f8de 3000 	ldr.w	r3, [lr]
 8016554:	f8cc 3000 	str.w	r3, [ip]
 8016558:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801655a:	682b      	ldr	r3, [r5, #0]
 801655c:	9201      	str	r2, [sp, #4]
 801655e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8016562:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016564:	9200      	str	r2, [sp, #0]
 8016566:	f8cd 8008 	str.w	r8, [sp, #8]
 801656a:	f8d3 b038 	ldr.w	fp, [r3, #56]	; 0x38
 801656e:	aa07      	add	r2, sp, #28
 8016570:	463b      	mov	r3, r7
 8016572:	4631      	mov	r1, r6
 8016574:	4628      	mov	r0, r5
 8016576:	47d8      	blx	fp
 8016578:	46a6      	mov	lr, r4
 801657a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801657e:	f10d 0c1c 	add.w	ip, sp, #28
 8016582:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016586:	f8de 3000 	ldr.w	r3, [lr]
 801658a:	f8cc 3000 	str.w	r3, [ip]
 801658e:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8016592:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016596:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801659a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801659e:	343c      	adds	r4, #60	; 0x3c
 80165a0:	f8de 3000 	ldr.w	r3, [lr]
 80165a4:	f8cc 3000 	str.w	r3, [ip]
 80165a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80165aa:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80165ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80165b2:	6823      	ldr	r3, [r4, #0]
 80165b4:	f8cc 3000 	str.w	r3, [ip]
 80165b8:	682b      	ldr	r3, [r5, #0]
 80165ba:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80165be:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80165c0:	9201      	str	r2, [sp, #4]
 80165c2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80165c4:	9200      	str	r2, [sp, #0]
 80165c6:	f8cd 8008 	str.w	r8, [sp, #8]
 80165ca:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80165cc:	aa07      	add	r2, sp, #28
 80165ce:	463b      	mov	r3, r7
 80165d0:	4631      	mov	r1, r6
 80165d2:	4628      	mov	r0, r5
 80165d4:	47a0      	blx	r4
 80165d6:	b017      	add	sp, #92	; 0x5c
 80165d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080165dc <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80165dc:	2000      	movs	r0, #0
 80165de:	4770      	bx	lr

080165e0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80165e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165e4:	b08d      	sub	sp, #52	; 0x34
 80165e6:	4688      	mov	r8, r1
 80165e8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80165ea:	f8d3 c000 	ldr.w	ip, [r3]
 80165ee:	680f      	ldr	r7, [r1, #0]
 80165f0:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 80165f4:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 80165f8:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 80165fc:	edd3 6a07 	vldr	s13, [r3, #28]
 8016600:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016602:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8016606:	f9b1 9000 	ldrsh.w	r9, [r1]
 801660a:	f9ba 1000 	ldrsh.w	r1, [sl]
 801660e:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8016612:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8016616:	eba7 070c 	sub.w	r7, r7, ip
 801661a:	42bc      	cmp	r4, r7
 801661c:	bfa8      	it	ge
 801661e:	463c      	movge	r4, r7
 8016620:	ee07 4a90 	vmov	s15, r4
 8016624:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8016628:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801662c:	ee25 4a04 	vmul.f32	s8, s10, s8
 8016630:	ee65 4a24 	vmul.f32	s9, s10, s9
 8016634:	ee25 5a27 	vmul.f32	s10, s10, s15
 8016638:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801663c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8016640:	eb09 0e0c 	add.w	lr, r9, ip
 8016644:	4571      	cmp	r1, lr
 8016646:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801664a:	ee32 1a05 	vadd.f32	s2, s4, s10
 801664e:	ee36 0a84 	vadd.f32	s0, s13, s8
 8016652:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016656:	ee22 2a07 	vmul.f32	s4, s4, s14
 801665a:	f340 808d 	ble.w	8016778 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 801665e:	eba1 060e 	sub.w	r6, r1, lr
 8016662:	fb96 f5f4 	sdiv	r5, r6, r4
 8016666:	ee07 5a10 	vmov	s14, r5
 801666a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801666e:	2d00      	cmp	r5, #0
 8016670:	fb04 6615 	mls	r6, r4, r5, r6
 8016674:	eea7 0a04 	vfma.f32	s0, s14, s8
 8016678:	eee7 0a24 	vfma.f32	s1, s14, s9
 801667c:	eea7 1a05 	vfma.f32	s2, s14, s10
 8016680:	dd13      	ble.n	80166aa <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 8016682:	ee70 6a44 	vsub.f32	s13, s0, s8
 8016686:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801668a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801668e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016692:	bf18      	it	ne
 8016694:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8016698:	ee31 2a45 	vsub.f32	s4, s2, s10
 801669c:	bf08      	it	eq
 801669e:	eeb0 7a67 	vmoveq.f32	s14, s15
 80166a2:	ee61 1a87 	vmul.f32	s3, s3, s14
 80166a6:	ee22 2a07 	vmul.f32	s4, s4, s14
 80166aa:	fb05 f204 	mul.w	r2, r5, r4
 80166ae:	1abf      	subs	r7, r7, r2
 80166b0:	4494      	add	ip, r2
 80166b2:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80166b6:	4411      	add	r1, r2
 80166b8:	eb09 020c 	add.w	r2, r9, ip
 80166bc:	443a      	add	r2, r7
 80166be:	b209      	sxth	r1, r1
 80166c0:	428a      	cmp	r2, r1
 80166c2:	bfc4      	itt	gt
 80166c4:	eba1 0209 	subgt.w	r2, r1, r9
 80166c8:	eba2 070c 	subgt.w	r7, r2, ip
 80166cc:	2f00      	cmp	r7, #0
 80166ce:	dd50      	ble.n	8016772 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 80166d0:	fb97 f1f4 	sdiv	r1, r7, r4
 80166d4:	fb04 7211 	mls	r2, r4, r1, r7
 80166d8:	b90a      	cbnz	r2, 80166de <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 80166da:	3901      	subs	r1, #1
 80166dc:	4622      	mov	r2, r4
 80166de:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80166e2:	6840      	ldr	r0, [r0, #4]
 80166e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80166e6:	f8d0 a000 	ldr.w	sl, [r0]
 80166ea:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80166ec:	9008      	str	r0, [sp, #32]
 80166ee:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 80166f2:	9818      	ldr	r0, [sp, #96]	; 0x60
 80166f4:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80166f8:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80166fc:	695b      	ldr	r3, [r3, #20]
 80166fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016700:	445b      	add	r3, fp
 8016702:	eef0 6a42 	vmov.f32	s13, s4
 8016706:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801670a:	ee21 3a23 	vmul.f32	s6, s2, s7
 801670e:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8016712:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016716:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801671a:	9307      	str	r3, [sp, #28]
 801671c:	ee17 7a90 	vmov	r7, s15
 8016720:	ee73 7a42 	vsub.f32	s15, s6, s4
 8016724:	eeb0 7a61 	vmov.f32	s14, s3
 8016728:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801672c:	ee16 3a90 	vmov	r3, s13
 8016730:	fb97 f7f4 	sdiv	r7, r7, r4
 8016734:	ee17 ca90 	vmov	ip, s15
 8016738:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801673c:	fb9c fcf4 	sdiv	ip, ip, r4
 8016740:	fb0c 3306 	mla	r3, ip, r6, r3
 8016744:	9302      	str	r3, [sp, #8]
 8016746:	ee17 3a10 	vmov	r3, s14
 801674a:	44b6      	add	lr, r6
 801674c:	fb04 e505 	mla	r5, r4, r5, lr
 8016750:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8016754:	fb07 3706 	mla	r7, r7, r6, r3
 8016758:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801675c:	e9cd 4700 	strd	r4, r7, [sp]
 8016760:	2900      	cmp	r1, #0
 8016762:	bfcc      	ite	gt
 8016764:	46a1      	movgt	r9, r4
 8016766:	4691      	movle	r9, r2
 8016768:	eba9 0306 	sub.w	r3, r9, r6
 801676c:	f8da 4008 	ldr.w	r4, [sl, #8]
 8016770:	47a0      	blx	r4
 8016772:	b00d      	add	sp, #52	; 0x34
 8016774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016778:	2500      	movs	r5, #0
 801677a:	462e      	mov	r6, r5
 801677c:	e799      	b.n	80166b2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

08016780 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016784:	b0db      	sub	sp, #364	; 0x16c
 8016786:	461d      	mov	r5, r3
 8016788:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801678c:	930a      	str	r3, [sp, #40]	; 0x28
 801678e:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8016792:	930b      	str	r3, [sp, #44]	; 0x2c
 8016794:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8016798:	9310      	str	r3, [sp, #64]	; 0x40
 801679a:	6803      	ldr	r3, [r0, #0]
 801679c:	910f      	str	r1, [sp, #60]	; 0x3c
 801679e:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 80167a0:	9009      	str	r0, [sp, #36]	; 0x24
 80167a2:	4614      	mov	r4, r2
 80167a4:	4629      	mov	r1, r5
 80167a6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80167aa:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 80167ae:	47b8      	blx	r7
 80167b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167b2:	6058      	str	r0, [r3, #4]
 80167b4:	2800      	cmp	r0, #0
 80167b6:	f000 83a1 	beq.w	8016efc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80167ba:	682b      	ldr	r3, [r5, #0]
 80167bc:	9314      	str	r3, [sp, #80]	; 0x50
 80167be:	686b      	ldr	r3, [r5, #4]
 80167c0:	9315      	str	r3, [sp, #84]	; 0x54
 80167c2:	4bc4      	ldr	r3, [pc, #784]	; (8016ad4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80167c4:	ed94 7a02 	vldr	s14, [r4, #8]
 80167c8:	7819      	ldrb	r1, [r3, #0]
 80167ca:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80167ce:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80167d2:	2900      	cmp	r1, #0
 80167d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80167d8:	bf16      	itet	ne
 80167da:	4619      	movne	r1, r3
 80167dc:	4611      	moveq	r1, r2
 80167de:	4613      	movne	r3, r2
 80167e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167e4:	9116      	str	r1, [sp, #88]	; 0x58
 80167e6:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80167ea:	f240 8387 	bls.w	8016efc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80167ee:	ed94 7a07 	vldr	s14, [r4, #28]
 80167f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80167f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167fa:	f240 837f 	bls.w	8016efc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80167fe:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8016802:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801680a:	f240 8377 	bls.w	8016efc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801680e:	6822      	ldr	r2, [r4, #0]
 8016810:	4bb1      	ldr	r3, [pc, #708]	; (8016ad8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8016812:	429a      	cmp	r2, r3
 8016814:	f2c0 8372 	blt.w	8016efc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016818:	49b0      	ldr	r1, [pc, #704]	; (8016adc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801681a:	6963      	ldr	r3, [r4, #20]
 801681c:	428a      	cmp	r2, r1
 801681e:	f300 836d 	bgt.w	8016efc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016822:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8016826:	48ae      	ldr	r0, [pc, #696]	; (8016ae0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8016828:	33ff      	adds	r3, #255	; 0xff
 801682a:	4283      	cmp	r3, r0
 801682c:	f200 8366 	bhi.w	8016efc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016830:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016832:	4dac      	ldr	r5, [pc, #688]	; (8016ae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8016834:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8016838:	33ff      	adds	r3, #255	; 0xff
 801683a:	42ab      	cmp	r3, r5
 801683c:	f200 835e 	bhi.w	8016efc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016840:	6862      	ldr	r2, [r4, #4]
 8016842:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8016846:	33ff      	adds	r3, #255	; 0xff
 8016848:	4283      	cmp	r3, r0
 801684a:	f200 8357 	bhi.w	8016efc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801684e:	69a1      	ldr	r1, [r4, #24]
 8016850:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8016854:	33ff      	adds	r3, #255	; 0xff
 8016856:	4283      	cmp	r3, r0
 8016858:	f200 8350 	bhi.w	8016efc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801685c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801685e:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8016862:	30ff      	adds	r0, #255	; 0xff
 8016864:	42a8      	cmp	r0, r5
 8016866:	f200 8349 	bhi.w	8016efc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801686a:	428a      	cmp	r2, r1
 801686c:	f280 8110 	bge.w	8016a90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8016870:	429a      	cmp	r2, r3
 8016872:	f300 8119 	bgt.w	8016aa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8016876:	4299      	cmp	r1, r3
 8016878:	f280 811d 	bge.w	8016ab6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801687c:	2502      	movs	r5, #2
 801687e:	2701      	movs	r7, #1
 8016880:	46a9      	mov	r9, r5
 8016882:	46b8      	mov	r8, r7
 8016884:	f04f 0a00 	mov.w	sl, #0
 8016888:	4621      	mov	r1, r4
 801688a:	a849      	add	r0, sp, #292	; 0x124
 801688c:	f003 fc84 	bl	801a198 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8016890:	4622      	mov	r2, r4
 8016892:	4653      	mov	r3, sl
 8016894:	a949      	add	r1, sp, #292	; 0x124
 8016896:	f8cd 9000 	str.w	r9, [sp]
 801689a:	a819      	add	r0, sp, #100	; 0x64
 801689c:	f003 fdac 	bl	801a3f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80168a0:	4622      	mov	r2, r4
 80168a2:	4653      	mov	r3, sl
 80168a4:	a949      	add	r1, sp, #292	; 0x124
 80168a6:	f8cd 8000 	str.w	r8, [sp]
 80168aa:	a829      	add	r0, sp, #164	; 0xa4
 80168ac:	f003 fda4 	bl	801a3f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80168b0:	4643      	mov	r3, r8
 80168b2:	4622      	mov	r2, r4
 80168b4:	a949      	add	r1, sp, #292	; 0x124
 80168b6:	f8cd 9000 	str.w	r9, [sp]
 80168ba:	a839      	add	r0, sp, #228	; 0xe4
 80168bc:	f003 fd9c 	bl	801a3f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80168c0:	42af      	cmp	r7, r5
 80168c2:	bfb5      	itete	lt
 80168c4:	2300      	movlt	r3, #0
 80168c6:	2301      	movge	r3, #1
 80168c8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80168ca:	930e      	strge	r3, [sp, #56]	; 0x38
 80168cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80168ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80168d2:	af12      	add	r7, sp, #72	; 0x48
 80168d4:	bfb9      	ittee	lt
 80168d6:	ad29      	addlt	r5, sp, #164	; 0xa4
 80168d8:	ac19      	addlt	r4, sp, #100	; 0x64
 80168da:	ad19      	addge	r5, sp, #100	; 0x64
 80168dc:	ac29      	addge	r4, sp, #164	; 0xa4
 80168de:	e887 0003 	stmia.w	r7, {r0, r1}
 80168e2:	b928      	cbnz	r0, 80168f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80168e4:	4b80      	ldr	r3, [pc, #512]	; (8016ae8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80168e6:	6818      	ldr	r0, [r3, #0]
 80168e8:	6803      	ldr	r3, [r0, #0]
 80168ea:	6a1b      	ldr	r3, [r3, #32]
 80168ec:	4798      	blx	r3
 80168ee:	6038      	str	r0, [r7, #0]
 80168f0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80168f2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80168f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80168fa:	930c      	str	r3, [sp, #48]	; 0x30
 80168fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80168fe:	6963      	ldr	r3, [r4, #20]
 8016900:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8016902:	440b      	add	r3, r1
 8016904:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8016908:	4408      	add	r0, r1
 801690a:	b200      	sxth	r0, r0
 801690c:	4283      	cmp	r3, r0
 801690e:	900d      	str	r0, [sp, #52]	; 0x34
 8016910:	f280 80dd 	bge.w	8016ace <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8016914:	428b      	cmp	r3, r1
 8016916:	da08      	bge.n	801692a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016918:	2a00      	cmp	r2, #0
 801691a:	dd06      	ble.n	801692a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801691c:	1acb      	subs	r3, r1, r3
 801691e:	429a      	cmp	r2, r3
 8016920:	f2c0 80e4 	blt.w	8016aec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8016924:	2b00      	cmp	r3, #0
 8016926:	f300 80e2 	bgt.w	8016aee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801692a:	6967      	ldr	r7, [r4, #20]
 801692c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801692e:	443b      	add	r3, r7
 8016930:	461f      	mov	r7, r3
 8016932:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016934:	1bdf      	subs	r7, r3, r7
 8016936:	4297      	cmp	r7, r2
 8016938:	bfa8      	it	ge
 801693a:	4617      	movge	r7, r2
 801693c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8016940:	2f00      	cmp	r7, #0
 8016942:	f340 8166 	ble.w	8016c12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8016946:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016948:	6829      	ldr	r1, [r5, #0]
 801694a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801694e:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016952:	6820      	ldr	r0, [r4, #0]
 8016954:	4411      	add	r1, r2
 8016956:	4299      	cmp	r1, r3
 8016958:	dd1a      	ble.n	8016990 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801695a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801695e:	440b      	add	r3, r1
 8016960:	4402      	add	r2, r0
 8016962:	b21b      	sxth	r3, r3
 8016964:	429a      	cmp	r2, r3
 8016966:	dc13      	bgt.n	8016990 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801696a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	9206      	str	r2, [sp, #24]
 8016970:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016972:	9205      	str	r2, [sp, #20]
 8016974:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016976:	9500      	str	r5, [sp, #0]
 8016978:	e9cd b203 	strd	fp, r2, [sp, #12]
 801697c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801697e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016980:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8016984:	a912      	add	r1, sp, #72	; 0x48
 8016986:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 801698a:	aa49      	add	r2, sp, #292	; 0x124
 801698c:	4623      	mov	r3, r4
 801698e:	47c8      	blx	r9
 8016990:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016994:	441a      	add	r2, r3
 8016996:	6963      	ldr	r3, [r4, #20]
 8016998:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801699c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80169a0:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80169a4:	68a1      	ldr	r1, [r4, #8]
 80169a6:	ed94 6a08 	vldr	s12, [r4, #32]
 80169aa:	6022      	str	r2, [r4, #0]
 80169ac:	3301      	adds	r3, #1
 80169ae:	6163      	str	r3, [r4, #20]
 80169b0:	69a3      	ldr	r3, [r4, #24]
 80169b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80169b6:	3b01      	subs	r3, #1
 80169b8:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80169bc:	61a3      	str	r3, [r4, #24]
 80169be:	6923      	ldr	r3, [r4, #16]
 80169c0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80169c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80169c8:	edd4 6a07 	vldr	s13, [r4, #28]
 80169cc:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80169d0:	440b      	add	r3, r1
 80169d2:	68e1      	ldr	r1, [r4, #12]
 80169d4:	6123      	str	r3, [r4, #16]
 80169d6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80169da:	428b      	cmp	r3, r1
 80169dc:	edc4 6a07 	vstr	s13, [r4, #28]
 80169e0:	db15      	blt.n	8016a0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80169e2:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80169e6:	ee76 6a26 	vadd.f32	s13, s12, s13
 80169ea:	3201      	adds	r2, #1
 80169ec:	edc4 6a07 	vstr	s13, [r4, #28]
 80169f0:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80169f4:	6022      	str	r2, [r4, #0]
 80169f6:	ee36 7a87 	vadd.f32	s14, s13, s14
 80169fa:	1a5b      	subs	r3, r3, r1
 80169fc:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016a00:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8016a04:	6123      	str	r3, [r4, #16]
 8016a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016a0a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016a0e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016a12:	441a      	add	r2, r3
 8016a14:	696b      	ldr	r3, [r5, #20]
 8016a16:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8016a1a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8016a1e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8016a22:	68a9      	ldr	r1, [r5, #8]
 8016a24:	ed95 6a08 	vldr	s12, [r5, #32]
 8016a28:	602a      	str	r2, [r5, #0]
 8016a2a:	3301      	adds	r3, #1
 8016a2c:	616b      	str	r3, [r5, #20]
 8016a2e:	69ab      	ldr	r3, [r5, #24]
 8016a30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016a34:	3b01      	subs	r3, #1
 8016a36:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8016a3a:	61ab      	str	r3, [r5, #24]
 8016a3c:	692b      	ldr	r3, [r5, #16]
 8016a3e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016a46:	edd5 6a07 	vldr	s13, [r5, #28]
 8016a4a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016a4e:	440b      	add	r3, r1
 8016a50:	68e9      	ldr	r1, [r5, #12]
 8016a52:	612b      	str	r3, [r5, #16]
 8016a54:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016a58:	428b      	cmp	r3, r1
 8016a5a:	edc5 6a07 	vstr	s13, [r5, #28]
 8016a5e:	db15      	blt.n	8016a8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8016a60:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8016a64:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016a68:	3201      	adds	r2, #1
 8016a6a:	edc5 6a07 	vstr	s13, [r5, #28]
 8016a6e:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8016a72:	602a      	str	r2, [r5, #0]
 8016a74:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016a78:	1a5b      	subs	r3, r3, r1
 8016a7a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016a7e:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8016a82:	612b      	str	r3, [r5, #16]
 8016a84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016a88:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016a8c:	3f01      	subs	r7, #1
 8016a8e:	e757      	b.n	8016940 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8016a90:	4299      	cmp	r1, r3
 8016a92:	dc13      	bgt.n	8016abc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8016a94:	429a      	cmp	r2, r3
 8016a96:	da14      	bge.n	8016ac2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8016a98:	2502      	movs	r5, #2
 8016a9a:	2703      	movs	r7, #3
 8016a9c:	46a9      	mov	r9, r5
 8016a9e:	f04f 0800 	mov.w	r8, #0
 8016aa2:	f04f 0a01 	mov.w	sl, #1
 8016aa6:	e6ef      	b.n	8016888 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016aa8:	2501      	movs	r5, #1
 8016aaa:	2700      	movs	r7, #0
 8016aac:	46a9      	mov	r9, r5
 8016aae:	46b8      	mov	r8, r7
 8016ab0:	f04f 0a02 	mov.w	sl, #2
 8016ab4:	e6e8      	b.n	8016888 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016ab6:	2501      	movs	r5, #1
 8016ab8:	2702      	movs	r7, #2
 8016aba:	e6e1      	b.n	8016880 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8016abc:	2500      	movs	r5, #0
 8016abe:	2701      	movs	r7, #1
 8016ac0:	e7f4      	b.n	8016aac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8016ac2:	2702      	movs	r7, #2
 8016ac4:	2503      	movs	r5, #3
 8016ac6:	f04f 0900 	mov.w	r9, #0
 8016aca:	46b8      	mov	r8, r7
 8016acc:	e7e9      	b.n	8016aa2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8016ace:	4613      	mov	r3, r2
 8016ad0:	e728      	b.n	8016924 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8016ad2:	bf00      	nop
 8016ad4:	2000a0e8 	.word	0x2000a0e8
 8016ad8:	fffd8f01 	.word	0xfffd8f01
 8016adc:	00027100 	.word	0x00027100
 8016ae0:	0004e1ff 	.word	0x0004e1ff
 8016ae4:	0004e1fe 	.word	0x0004e1fe
 8016ae8:	2000a0f0 	.word	0x2000a0f0
 8016aec:	4613      	mov	r3, r2
 8016aee:	992b      	ldr	r1, [sp, #172]	; 0xac
 8016af0:	9111      	str	r1, [sp, #68]	; 0x44
 8016af2:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8016af6:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8016afa:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8016afc:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8016b00:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8016b04:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8016b08:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8016b0c:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8016b10:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8016b14:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8016b18:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8016b1c:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8016b20:	469e      	mov	lr, r3
 8016b22:	469c      	mov	ip, r3
 8016b24:	f04f 0900 	mov.w	r9, #0
 8016b28:	f1bc 0f00 	cmp.w	ip, #0
 8016b2c:	d147      	bne.n	8016bbe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8016b2e:	eb03 0c07 	add.w	ip, r3, r7
 8016b32:	1ad7      	subs	r7, r2, r3
 8016b34:	f1b9 0f00 	cmp.w	r9, #0
 8016b38:	d009      	beq.n	8016b4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8016b3a:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8016b3e:	9029      	str	r0, [sp, #164]	; 0xa4
 8016b40:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8016b44:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8016b48:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8016b4c:	912d      	str	r1, [sp, #180]	; 0xb4
 8016b4e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8016b50:	9111      	str	r1, [sp, #68]	; 0x44
 8016b52:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8016b56:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8016b5a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8016b5e:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8016b62:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8016b66:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8016b6a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8016b6e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8016b72:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8016b76:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8016b7a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8016b7e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8016b82:	f04f 0800 	mov.w	r8, #0
 8016b86:	f1be 0f00 	cmp.w	lr, #0
 8016b8a:	d031      	beq.n	8016bf0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8016b8c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016b8e:	4431      	add	r1, r6
 8016b90:	4549      	cmp	r1, r9
 8016b92:	4450      	add	r0, sl
 8016b94:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8016b98:	ee37 7a04 	vadd.f32	s14, s14, s8
 8016b9c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016ba0:	db08      	blt.n	8016bb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8016ba2:	ee77 7a85 	vadd.f32	s15, s15, s10
 8016ba6:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016baa:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016bae:	3001      	adds	r0, #1
 8016bb0:	eba1 0109 	sub.w	r1, r1, r9
 8016bb4:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016bb8:	f04f 0801 	mov.w	r8, #1
 8016bbc:	e7e3      	b.n	8016b86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8016bbe:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016bc0:	4431      	add	r1, r6
 8016bc2:	4541      	cmp	r1, r8
 8016bc4:	4450      	add	r0, sl
 8016bc6:	ee37 7a24 	vadd.f32	s14, s14, s9
 8016bca:	ee77 7a84 	vadd.f32	s15, s15, s8
 8016bce:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8016bd2:	db08      	blt.n	8016be6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8016bd4:	ee76 6a85 	vadd.f32	s13, s13, s10
 8016bd8:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016bdc:	ee77 7a86 	vadd.f32	s15, s15, s12
 8016be0:	3001      	adds	r0, #1
 8016be2:	eba1 0108 	sub.w	r1, r1, r8
 8016be6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016bea:	f04f 0901 	mov.w	r9, #1
 8016bee:	e79b      	b.n	8016b28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8016bf0:	449c      	add	ip, r3
 8016bf2:	1aff      	subs	r7, r7, r3
 8016bf4:	f1b8 0f00 	cmp.w	r8, #0
 8016bf8:	d009      	beq.n	8016c0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8016bfa:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8016bfe:	9019      	str	r0, [sp, #100]	; 0x64
 8016c00:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8016c04:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8016c08:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8016c0c:	911d      	str	r1, [sp, #116]	; 0x74
 8016c0e:	1ad2      	subs	r2, r2, r3
 8016c10:	e68b      	b.n	801692a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016c12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016c14:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	f000 80d1 	beq.w	8016dbe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8016c1c:	ad19      	add	r5, sp, #100	; 0x64
 8016c1e:	ac39      	add	r4, sp, #228	; 0xe4
 8016c20:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016c22:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8016c26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016c2a:	930c      	str	r3, [sp, #48]	; 0x30
 8016c2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016c2e:	6963      	ldr	r3, [r4, #20]
 8016c30:	440b      	add	r3, r1
 8016c32:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8016c36:	4408      	add	r0, r1
 8016c38:	b200      	sxth	r0, r0
 8016c3a:	4283      	cmp	r3, r0
 8016c3c:	900d      	str	r0, [sp, #52]	; 0x34
 8016c3e:	f280 80c1 	bge.w	8016dc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8016c42:	428b      	cmp	r3, r1
 8016c44:	da08      	bge.n	8016c58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016c46:	2a00      	cmp	r2, #0
 8016c48:	dd06      	ble.n	8016c58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016c4a:	1acb      	subs	r3, r1, r3
 8016c4c:	429a      	cmp	r2, r3
 8016c4e:	f2c0 80bb 	blt.w	8016dc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	f300 80b9 	bgt.w	8016dca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8016c58:	6967      	ldr	r7, [r4, #20]
 8016c5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016c5c:	443b      	add	r3, r7
 8016c5e:	461f      	mov	r7, r3
 8016c60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016c62:	1bdf      	subs	r7, r3, r7
 8016c64:	4297      	cmp	r7, r2
 8016c66:	bfa8      	it	ge
 8016c68:	4617      	movge	r7, r2
 8016c6a:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8016c6e:	2f00      	cmp	r7, #0
 8016c70:	f340 813c 	ble.w	8016eec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8016c74:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016c76:	6829      	ldr	r1, [r5, #0]
 8016c78:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016c7c:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016c80:	6820      	ldr	r0, [r4, #0]
 8016c82:	4411      	add	r1, r2
 8016c84:	4299      	cmp	r1, r3
 8016c86:	dd1a      	ble.n	8016cbe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8016c88:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016c8c:	440b      	add	r3, r1
 8016c8e:	4402      	add	r2, r0
 8016c90:	b21b      	sxth	r3, r3
 8016c92:	429a      	cmp	r2, r3
 8016c94:	dc13      	bgt.n	8016cbe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8016c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c98:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	9206      	str	r2, [sp, #24]
 8016c9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016ca0:	9205      	str	r2, [sp, #20]
 8016ca2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016ca4:	9500      	str	r5, [sp, #0]
 8016ca6:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016caa:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016cac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016cae:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8016cb2:	a912      	add	r1, sp, #72	; 0x48
 8016cb4:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 8016cb8:	aa49      	add	r2, sp, #292	; 0x124
 8016cba:	4623      	mov	r3, r4
 8016cbc:	47c8      	blx	r9
 8016cbe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016cc2:	441a      	add	r2, r3
 8016cc4:	6963      	ldr	r3, [r4, #20]
 8016cc6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8016cca:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8016cce:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8016cd2:	68a1      	ldr	r1, [r4, #8]
 8016cd4:	ed94 6a08 	vldr	s12, [r4, #32]
 8016cd8:	6022      	str	r2, [r4, #0]
 8016cda:	3301      	adds	r3, #1
 8016cdc:	6163      	str	r3, [r4, #20]
 8016cde:	69a3      	ldr	r3, [r4, #24]
 8016ce0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016ce4:	3b01      	subs	r3, #1
 8016ce6:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8016cea:	61a3      	str	r3, [r4, #24]
 8016cec:	6923      	ldr	r3, [r4, #16]
 8016cee:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016cf6:	edd4 6a07 	vldr	s13, [r4, #28]
 8016cfa:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016cfe:	440b      	add	r3, r1
 8016d00:	68e1      	ldr	r1, [r4, #12]
 8016d02:	6123      	str	r3, [r4, #16]
 8016d04:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016d08:	428b      	cmp	r3, r1
 8016d0a:	edc4 6a07 	vstr	s13, [r4, #28]
 8016d0e:	db15      	blt.n	8016d3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8016d10:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8016d14:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016d18:	3201      	adds	r2, #1
 8016d1a:	edc4 6a07 	vstr	s13, [r4, #28]
 8016d1e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8016d22:	6022      	str	r2, [r4, #0]
 8016d24:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016d28:	1a5b      	subs	r3, r3, r1
 8016d2a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016d2e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8016d32:	6123      	str	r3, [r4, #16]
 8016d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016d38:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016d3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016d40:	441a      	add	r2, r3
 8016d42:	696b      	ldr	r3, [r5, #20]
 8016d44:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8016d48:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8016d4c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8016d50:	68a9      	ldr	r1, [r5, #8]
 8016d52:	ed95 6a08 	vldr	s12, [r5, #32]
 8016d56:	602a      	str	r2, [r5, #0]
 8016d58:	3301      	adds	r3, #1
 8016d5a:	616b      	str	r3, [r5, #20]
 8016d5c:	69ab      	ldr	r3, [r5, #24]
 8016d5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016d62:	3b01      	subs	r3, #1
 8016d64:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8016d68:	61ab      	str	r3, [r5, #24]
 8016d6a:	692b      	ldr	r3, [r5, #16]
 8016d6c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016d70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016d74:	edd5 6a07 	vldr	s13, [r5, #28]
 8016d78:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016d7c:	440b      	add	r3, r1
 8016d7e:	68e9      	ldr	r1, [r5, #12]
 8016d80:	612b      	str	r3, [r5, #16]
 8016d82:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016d86:	428b      	cmp	r3, r1
 8016d88:	edc5 6a07 	vstr	s13, [r5, #28]
 8016d8c:	db15      	blt.n	8016dba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8016d8e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8016d92:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016d96:	3201      	adds	r2, #1
 8016d98:	edc5 6a07 	vstr	s13, [r5, #28]
 8016d9c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8016da0:	602a      	str	r2, [r5, #0]
 8016da2:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016da6:	1a5b      	subs	r3, r3, r1
 8016da8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016dac:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8016db0:	612b      	str	r3, [r5, #16]
 8016db2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016db6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016dba:	3f01      	subs	r7, #1
 8016dbc:	e757      	b.n	8016c6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8016dbe:	ad39      	add	r5, sp, #228	; 0xe4
 8016dc0:	ac19      	add	r4, sp, #100	; 0x64
 8016dc2:	e72d      	b.n	8016c20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8016dc4:	4613      	mov	r3, r2
 8016dc6:	e744      	b.n	8016c52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8016dc8:	4613      	mov	r3, r2
 8016dca:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8016dce:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8016dd0:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8016dd4:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8016dd8:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8016ddc:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8016de0:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8016de4:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8016de8:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8016dec:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8016dee:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8016df2:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8016df6:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8016dfa:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8016dfe:	960e      	str	r6, [sp, #56]	; 0x38
 8016e00:	469e      	mov	lr, r3
 8016e02:	461f      	mov	r7, r3
 8016e04:	f04f 0900 	mov.w	r9, #0
 8016e08:	2f00      	cmp	r7, #0
 8016e0a:	d146      	bne.n	8016e9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8016e0c:	449c      	add	ip, r3
 8016e0e:	1ad7      	subs	r7, r2, r3
 8016e10:	f1b9 0f00 	cmp.w	r9, #0
 8016e14:	d009      	beq.n	8016e2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8016e16:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8016e1a:	9039      	str	r0, [sp, #228]	; 0xe4
 8016e1c:	913d      	str	r1, [sp, #244]	; 0xf4
 8016e1e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8016e22:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8016e26:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8016e2a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8016e2c:	910e      	str	r1, [sp, #56]	; 0x38
 8016e2e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8016e32:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8016e36:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8016e3a:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8016e3e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8016e42:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8016e46:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8016e4a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8016e4e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8016e52:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8016e56:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8016e5a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8016e5e:	f04f 0800 	mov.w	r8, #0
 8016e62:	f1be 0f00 	cmp.w	lr, #0
 8016e66:	d030      	beq.n	8016eca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8016e68:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016e6a:	4431      	add	r1, r6
 8016e6c:	4549      	cmp	r1, r9
 8016e6e:	4450      	add	r0, sl
 8016e70:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8016e74:	ee37 7a04 	vadd.f32	s14, s14, s8
 8016e78:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016e7c:	db08      	blt.n	8016e90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8016e7e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8016e82:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016e86:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016e8a:	3001      	adds	r0, #1
 8016e8c:	eba1 0109 	sub.w	r1, r1, r9
 8016e90:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016e94:	f04f 0801 	mov.w	r8, #1
 8016e98:	e7e3      	b.n	8016e62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8016e9a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016e9c:	4431      	add	r1, r6
 8016e9e:	4541      	cmp	r1, r8
 8016ea0:	4450      	add	r0, sl
 8016ea2:	ee37 7a24 	vadd.f32	s14, s14, s9
 8016ea6:	ee77 7a84 	vadd.f32	s15, s15, s8
 8016eaa:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8016eae:	db08      	blt.n	8016ec2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8016eb0:	ee76 6a85 	vadd.f32	s13, s13, s10
 8016eb4:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016eb8:	ee77 7a86 	vadd.f32	s15, s15, s12
 8016ebc:	3001      	adds	r0, #1
 8016ebe:	eba1 0108 	sub.w	r1, r1, r8
 8016ec2:	3f01      	subs	r7, #1
 8016ec4:	f04f 0901 	mov.w	r9, #1
 8016ec8:	e79e      	b.n	8016e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8016eca:	449c      	add	ip, r3
 8016ecc:	1aff      	subs	r7, r7, r3
 8016ece:	f1b8 0f00 	cmp.w	r8, #0
 8016ed2:	d009      	beq.n	8016ee8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8016ed4:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8016ed8:	9019      	str	r0, [sp, #100]	; 0x64
 8016eda:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8016ede:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8016ee2:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8016ee6:	911d      	str	r1, [sp, #116]	; 0x74
 8016ee8:	1ad2      	subs	r2, r2, r3
 8016eea:	e6b5      	b.n	8016c58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016eec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	b923      	cbnz	r3, 8016efc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016ef2:	4b04      	ldr	r3, [pc, #16]	; (8016f04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8016ef4:	6818      	ldr	r0, [r3, #0]
 8016ef6:	6803      	ldr	r3, [r0, #0]
 8016ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016efa:	4798      	blx	r3
 8016efc:	b05b      	add	sp, #364	; 0x16c
 8016efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f02:	bf00      	nop
 8016f04:	2000a0f0 	.word	0x2000a0f0

08016f08 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8016f08:	b570      	push	{r4, r5, r6, lr}
 8016f0a:	4604      	mov	r4, r0
 8016f0c:	2500      	movs	r5, #0
 8016f0e:	7223      	strb	r3, [r4, #8]
 8016f10:	9804      	ldr	r0, [sp, #16]
 8016f12:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8016f16:	8025      	strh	r5, [r4, #0]
 8016f18:	6061      	str	r1, [r4, #4]
 8016f1a:	7263      	strb	r3, [r4, #9]
 8016f1c:	60e0      	str	r0, [r4, #12]
 8016f1e:	8222      	strh	r2, [r4, #16]
 8016f20:	8265      	strh	r5, [r4, #18]
 8016f22:	82a5      	strh	r5, [r4, #20]
 8016f24:	82e5      	strh	r5, [r4, #22]
 8016f26:	8325      	strh	r5, [r4, #24]
 8016f28:	8365      	strh	r5, [r4, #26]
 8016f2a:	83a5      	strh	r5, [r4, #28]
 8016f2c:	77a5      	strb	r5, [r4, #30]
 8016f2e:	6803      	ldr	r3, [r0, #0]
 8016f30:	695b      	ldr	r3, [r3, #20]
 8016f32:	4798      	blx	r3
 8016f34:	4606      	mov	r6, r0
 8016f36:	b1f8      	cbz	r0, 8016f78 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8016f38:	68e0      	ldr	r0, [r4, #12]
 8016f3a:	6803      	ldr	r3, [r0, #0]
 8016f3c:	4631      	mov	r1, r6
 8016f3e:	68db      	ldr	r3, [r3, #12]
 8016f40:	4798      	blx	r3
 8016f42:	7b43      	ldrb	r3, [r0, #13]
 8016f44:	7a82      	ldrb	r2, [r0, #10]
 8016f46:	005b      	lsls	r3, r3, #1
 8016f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016f4c:	4313      	orrs	r3, r2
 8016f4e:	83a3      	strh	r3, [r4, #28]
 8016f50:	7a63      	ldrb	r3, [r4, #9]
 8016f52:	2b04      	cmp	r3, #4
 8016f54:	4605      	mov	r5, r0
 8016f56:	d10f      	bne.n	8016f78 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8016f58:	68e0      	ldr	r0, [r4, #12]
 8016f5a:	6803      	ldr	r3, [r0, #0]
 8016f5c:	462a      	mov	r2, r5
 8016f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f60:	4631      	mov	r1, r6
 8016f62:	4798      	blx	r3
 8016f64:	7b6b      	ldrb	r3, [r5, #13]
 8016f66:	005b      	lsls	r3, r3, #1
 8016f68:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016f6c:	7aab      	ldrb	r3, [r5, #10]
 8016f6e:	4313      	orrs	r3, r2
 8016f70:	4418      	add	r0, r3
 8016f72:	8ba3      	ldrh	r3, [r4, #28]
 8016f74:	4418      	add	r0, r3
 8016f76:	83a0      	strh	r0, [r4, #28]
 8016f78:	4620      	mov	r0, r4
 8016f7a:	bd70      	pop	{r4, r5, r6, pc}

08016f7c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8016f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f80:	2400      	movs	r4, #0
 8016f82:	b085      	sub	sp, #20
 8016f84:	4681      	mov	r9, r0
 8016f86:	4688      	mov	r8, r1
 8016f88:	4692      	mov	sl, r2
 8016f8a:	469b      	mov	fp, r3
 8016f8c:	4627      	mov	r7, r4
 8016f8e:	4625      	mov	r5, r4
 8016f90:	4626      	mov	r6, r4
 8016f92:	4554      	cmp	r4, sl
 8016f94:	da2a      	bge.n	8016fec <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8016f96:	2300      	movs	r3, #0
 8016f98:	9303      	str	r3, [sp, #12]
 8016f9a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8016f9e:	429d      	cmp	r5, r3
 8016fa0:	d004      	beq.n	8016fac <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8016fa2:	f242 030b 	movw	r3, #8203	; 0x200b
 8016fa6:	429d      	cmp	r5, r3
 8016fa8:	bf18      	it	ne
 8016faa:	462f      	movne	r7, r5
 8016fac:	ab03      	add	r3, sp, #12
 8016fae:	4642      	mov	r2, r8
 8016fb0:	4659      	mov	r1, fp
 8016fb2:	4648      	mov	r0, r9
 8016fb4:	f002 fe76 	bl	8019ca4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016fb8:	4605      	mov	r5, r0
 8016fba:	b1b8      	cbz	r0, 8016fec <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8016fbc:	280a      	cmp	r0, #10
 8016fbe:	d015      	beq.n	8016fec <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8016fc0:	9a03      	ldr	r2, [sp, #12]
 8016fc2:	b18a      	cbz	r2, 8016fe8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8016fc4:	7b50      	ldrb	r0, [r2, #13]
 8016fc6:	7a93      	ldrb	r3, [r2, #10]
 8016fc8:	8895      	ldrh	r5, [r2, #4]
 8016fca:	0040      	lsls	r0, r0, #1
 8016fcc:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8016fd0:	4303      	orrs	r3, r0
 8016fd2:	9301      	str	r3, [sp, #4]
 8016fd4:	f8d8 3000 	ldr.w	r3, [r8]
 8016fd8:	4639      	mov	r1, r7
 8016fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016fdc:	4640      	mov	r0, r8
 8016fde:	4798      	blx	r3
 8016fe0:	9b01      	ldr	r3, [sp, #4]
 8016fe2:	4418      	add	r0, r3
 8016fe4:	4406      	add	r6, r0
 8016fe6:	b2b6      	uxth	r6, r6
 8016fe8:	3401      	adds	r4, #1
 8016fea:	e7d2      	b.n	8016f92 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8016fec:	4630      	mov	r0, r6
 8016fee:	b005      	add	sp, #20
 8016ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016ff4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8016ff4:	2a02      	cmp	r2, #2
 8016ff6:	b530      	push	{r4, r5, lr}
 8016ff8:	d011      	beq.n	801701e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8016ffa:	2a03      	cmp	r2, #3
 8016ffc:	d01c      	beq.n	8017038 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8016ffe:	2a01      	cmp	r2, #1
 8017000:	d10c      	bne.n	801701c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017002:	888b      	ldrh	r3, [r1, #4]
 8017004:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8017008:	8801      	ldrh	r1, [r0, #0]
 801700a:	8844      	ldrh	r4, [r0, #2]
 801700c:	8004      	strh	r4, [r0, #0]
 801700e:	1a9b      	subs	r3, r3, r2
 8017010:	1a5b      	subs	r3, r3, r1
 8017012:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017016:	8043      	strh	r3, [r0, #2]
 8017018:	8081      	strh	r1, [r0, #4]
 801701a:	80c2      	strh	r2, [r0, #6]
 801701c:	bd30      	pop	{r4, r5, pc}
 801701e:	88cb      	ldrh	r3, [r1, #6]
 8017020:	88c2      	ldrh	r2, [r0, #6]
 8017022:	1a9b      	subs	r3, r3, r2
 8017024:	8842      	ldrh	r2, [r0, #2]
 8017026:	1a9b      	subs	r3, r3, r2
 8017028:	888a      	ldrh	r2, [r1, #4]
 801702a:	8881      	ldrh	r1, [r0, #4]
 801702c:	8043      	strh	r3, [r0, #2]
 801702e:	1a52      	subs	r2, r2, r1
 8017030:	8801      	ldrh	r1, [r0, #0]
 8017032:	1a52      	subs	r2, r2, r1
 8017034:	8002      	strh	r2, [r0, #0]
 8017036:	e7f1      	b.n	801701c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017038:	88cb      	ldrh	r3, [r1, #6]
 801703a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801703e:	8841      	ldrh	r1, [r0, #2]
 8017040:	f9b0 5000 	ldrsh.w	r5, [r0]
 8017044:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8017048:	8045      	strh	r5, [r0, #2]
 801704a:	1a9b      	subs	r3, r3, r2
 801704c:	1a5b      	subs	r3, r3, r1
 801704e:	8003      	strh	r3, [r0, #0]
 8017050:	8082      	strh	r2, [r0, #4]
 8017052:	80c4      	strh	r4, [r0, #6]
 8017054:	e7e2      	b.n	801701c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08017056 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8017056:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801705a:	b09f      	sub	sp, #124	; 0x7c
 801705c:	9116      	str	r1, [sp, #88]	; 0x58
 801705e:	9317      	str	r3, [sp, #92]	; 0x5c
 8017060:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8017062:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017064:	8809      	ldrh	r1, [r1, #0]
 8017066:	889b      	ldrh	r3, [r3, #4]
 8017068:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801706c:	9212      	str	r2, [sp, #72]	; 0x48
 801706e:	440b      	add	r3, r1
 8017070:	b21b      	sxth	r3, r3
 8017072:	9310      	str	r3, [sp, #64]	; 0x40
 8017074:	f8d8 3000 	ldr.w	r3, [r8]
 8017078:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801707c:	7a59      	ldrb	r1, [r3, #9]
 801707e:	7a1b      	ldrb	r3, [r3, #8]
 8017080:	9315      	str	r3, [sp, #84]	; 0x54
 8017082:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017084:	9011      	str	r0, [sp, #68]	; 0x44
 8017086:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801708a:	9114      	str	r1, [sp, #80]	; 0x50
 801708c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017090:	2a00      	cmp	r2, #0
 8017092:	d067      	beq.n	8017164 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 8017094:	f898 3010 	ldrb.w	r3, [r8, #16]
 8017098:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801709a:	2b04      	cmp	r3, #4
 801709c:	bf14      	ite	ne
 801709e:	2301      	movne	r3, #1
 80170a0:	2302      	moveq	r3, #2
 80170a2:	4413      	add	r3, r2
 80170a4:	f04f 0900 	mov.w	r9, #0
 80170a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80170aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80170ae:	464c      	mov	r4, r9
 80170b0:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80170b4:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 80170b8:	4293      	cmp	r3, r2
 80170ba:	f280 808c 	bge.w	80171d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80170be:	2300      	movs	r3, #0
 80170c0:	931c      	str	r3, [sp, #112]	; 0x70
 80170c2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80170c6:	429c      	cmp	r4, r3
 80170c8:	d006      	beq.n	80170d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 80170ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80170cc:	f242 020b 	movw	r2, #8203	; 0x200b
 80170d0:	4294      	cmp	r4, r2
 80170d2:	bf18      	it	ne
 80170d4:	4623      	movne	r3, r4
 80170d6:	930d      	str	r3, [sp, #52]	; 0x34
 80170d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80170da:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80170dc:	f8d8 2000 	ldr.w	r2, [r8]
 80170e0:	428b      	cmp	r3, r1
 80170e2:	db41      	blt.n	8017168 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80170e4:	6813      	ldr	r3, [r2, #0]
 80170e6:	4610      	mov	r0, r2
 80170e8:	695b      	ldr	r3, [r3, #20]
 80170ea:	4798      	blx	r3
 80170ec:	4604      	mov	r4, r0
 80170ee:	f8d8 0000 	ldr.w	r0, [r8]
 80170f2:	6803      	ldr	r3, [r0, #0]
 80170f4:	aa1d      	add	r2, sp, #116	; 0x74
 80170f6:	689e      	ldr	r6, [r3, #8]
 80170f8:	4621      	mov	r1, r4
 80170fa:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80170fe:	47b0      	blx	r6
 8017100:	901c      	str	r0, [sp, #112]	; 0x70
 8017102:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017106:	429c      	cmp	r4, r3
 8017108:	f000 80e9 	beq.w	80172de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801710c:	f242 030b 	movw	r3, #8203	; 0x200b
 8017110:	429c      	cmp	r4, r3
 8017112:	f000 80e4 	beq.w	80172de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8017116:	2c00      	cmp	r4, #0
 8017118:	f000 80f6 	beq.w	8017308 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 801711c:	2c0a      	cmp	r4, #10
 801711e:	d060      	beq.n	80171e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8017120:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017122:	b36a      	cbz	r2, 8017180 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 8017124:	8894      	ldrh	r4, [r2, #4]
 8017126:	f1bb 0f00 	cmp.w	fp, #0
 801712a:	d03b      	beq.n	80171a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 801712c:	f892 900d 	ldrb.w	r9, [r2, #13]
 8017130:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8017134:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8017138:	f892 900a 	ldrb.w	r9, [r2, #10]
 801713c:	f1bb 0f01 	cmp.w	fp, #1
 8017140:	ea49 0903 	orr.w	r9, r9, r3
 8017144:	d134      	bne.n	80171b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 8017146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017148:	eba5 0509 	sub.w	r5, r5, r9
 801714c:	2b00      	cmp	r3, #0
 801714e:	d14f      	bne.n	80171f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8017150:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017152:	eb09 0305 	add.w	r3, r9, r5
 8017156:	4413      	add	r3, r2
 8017158:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801715a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801715e:	4293      	cmp	r3, r2
 8017160:	da51      	bge.n	8017206 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 8017162:	e038      	b.n	80171d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8017164:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017166:	e79d      	b.n	80170a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 8017168:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801716c:	9301      	str	r3, [sp, #4]
 801716e:	ab1d      	add	r3, sp, #116	; 0x74
 8017170:	9300      	str	r3, [sp, #0]
 8017172:	4659      	mov	r1, fp
 8017174:	ab1c      	add	r3, sp, #112	; 0x70
 8017176:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8017178:	f002 fdec 	bl	8019d54 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801717c:	4604      	mov	r4, r0
 801717e:	e7c0      	b.n	8017102 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8017180:	f8d8 0000 	ldr.w	r0, [r8]
 8017184:	6803      	ldr	r3, [r0, #0]
 8017186:	691b      	ldr	r3, [r3, #16]
 8017188:	4798      	blx	r3
 801718a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801718e:	4298      	cmp	r0, r3
 8017190:	f000 80a5 	beq.w	80172de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8017194:	f242 030b 	movw	r3, #8203	; 0x200b
 8017198:	4298      	cmp	r0, r3
 801719a:	f000 80a0 	beq.w	80172de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801719e:	f1bb 0f00 	cmp.w	fp, #0
 80171a2:	d100      	bne.n	80171a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 80171a4:	444d      	add	r5, r9
 80171a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80171a8:	2a00      	cmp	r2, #0
 80171aa:	d1bf      	bne.n	801712c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 80171ac:	4691      	mov	r9, r2
 80171ae:	e096      	b.n	80172de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 80171b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	f000 80aa 	beq.w	801730c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 80171b8:	f1bb 0f00 	cmp.w	fp, #0
 80171bc:	d118      	bne.n	80171f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80171be:	f8d8 0000 	ldr.w	r0, [r8]
 80171c2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80171c4:	6803      	ldr	r3, [r0, #0]
 80171c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80171c8:	4798      	blx	r3
 80171ca:	4405      	add	r5, r0
 80171cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80171ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80171d0:	1aeb      	subs	r3, r5, r3
 80171d2:	4293      	cmp	r3, r2
 80171d4:	dd17      	ble.n	8017206 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 80171d6:	2c00      	cmp	r4, #0
 80171d8:	f000 8096 	beq.w	8017308 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 80171dc:	2c0a      	cmp	r4, #10
 80171de:	f040 8084 	bne.w	80172ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x294>
 80171e2:	240a      	movs	r4, #10
 80171e4:	fab4 f084 	clz	r0, r4
 80171e8:	0940      	lsrs	r0, r0, #5
 80171ea:	b01f      	add	sp, #124	; 0x7c
 80171ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171f0:	f8d8 0000 	ldr.w	r0, [r8]
 80171f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80171f6:	6803      	ldr	r3, [r0, #0]
 80171f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80171fa:	4798      	blx	r3
 80171fc:	f1bb 0f01 	cmp.w	fp, #1
 8017200:	eba5 0500 	sub.w	r5, r5, r0
 8017204:	d0a4      	beq.n	8017150 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8017206:	981c      	ldr	r0, [sp, #112]	; 0x70
 8017208:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801720a:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801720e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017212:	7b43      	ldrb	r3, [r0, #13]
 8017214:	015b      	lsls	r3, r3, #5
 8017216:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801721a:	7983      	ldrb	r3, [r0, #6]
 801721c:	4429      	add	r1, r5
 801721e:	4313      	orrs	r3, r2
 8017220:	440b      	add	r3, r1
 8017222:	42b3      	cmp	r3, r6
 8017224:	db5b      	blt.n	80172de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8017226:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017228:	4299      	cmp	r1, r3
 801722a:	da58      	bge.n	80172de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801722c:	f8d8 0000 	ldr.w	r0, [r8]
 8017230:	6803      	ldr	r3, [r0, #0]
 8017232:	42ae      	cmp	r6, r5
 8017234:	bfc8      	it	gt
 8017236:	1b76      	subgt	r6, r6, r5
 8017238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801723a:	bfcc      	ite	gt
 801723c:	b2b6      	uxthgt	r6, r6
 801723e:	2600      	movle	r6, #0
 8017240:	4798      	blx	r3
 8017242:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017244:	7b5a      	ldrb	r2, [r3, #13]
 8017246:	00d1      	lsls	r1, r2, #3
 8017248:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801724c:	7a19      	ldrb	r1, [r3, #8]
 801724e:	4339      	orrs	r1, r7
 8017250:	0657      	lsls	r7, r2, #25
 8017252:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8017254:	bf44      	itt	mi
 8017256:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801725a:	b209      	sxthmi	r1, r1
 801725c:	19c7      	adds	r7, r0, r7
 801725e:	1a7f      	subs	r7, r7, r1
 8017260:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8017262:	b2bf      	uxth	r7, r7
 8017264:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8017268:	fa0f fa87 	sxth.w	sl, r7
 801726c:	4551      	cmp	r1, sl
 801726e:	dd3a      	ble.n	80172e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8017270:	0112      	lsls	r2, r2, #4
 8017272:	79d8      	ldrb	r0, [r3, #7]
 8017274:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8017278:	4302      	orrs	r2, r0
 801727a:	4492      	add	sl, r2
 801727c:	4551      	cmp	r1, sl
 801727e:	dc2e      	bgt.n	80172de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8017280:	1bcf      	subs	r7, r1, r7
 8017282:	b2bf      	uxth	r7, r7
 8017284:	468a      	mov	sl, r1
 8017286:	9319      	str	r3, [sp, #100]	; 0x64
 8017288:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801728a:	f8d8 0000 	ldr.w	r0, [r8]
 801728e:	681a      	ldr	r2, [r3, #0]
 8017290:	6801      	ldr	r1, [r0, #0]
 8017292:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8017294:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017296:	9313      	str	r3, [sp, #76]	; 0x4c
 8017298:	9218      	str	r2, [sp, #96]	; 0x60
 801729a:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801729c:	4788      	blx	r1
 801729e:	f898 1006 	ldrb.w	r1, [r8, #6]
 80172a2:	910b      	str	r1, [sp, #44]	; 0x2c
 80172a4:	f898 100e 	ldrb.w	r1, [r8, #14]
 80172a8:	910a      	str	r1, [sp, #40]	; 0x28
 80172aa:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 80172ae:	9109      	str	r1, [sp, #36]	; 0x24
 80172b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80172b2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80172b6:	9305      	str	r3, [sp, #20]
 80172b8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80172ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80172bc:	9206      	str	r2, [sp, #24]
 80172be:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80172c2:	e9cd 7303 	strd	r7, r3, [sp, #12]
 80172c6:	e9cd a601 	strd	sl, r6, [sp, #4]
 80172ca:	442e      	add	r6, r5
 80172cc:	b236      	sxth	r6, r6
 80172ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80172d0:	9600      	str	r6, [sp, #0]
 80172d2:	681a      	ldr	r2, [r3, #0]
 80172d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80172d6:	685b      	ldr	r3, [r3, #4]
 80172d8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80172da:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80172dc:	47b0      	blx	r6
 80172de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80172e0:	3301      	adds	r3, #1
 80172e2:	930e      	str	r3, [sp, #56]	; 0x38
 80172e4:	e6e6      	b.n	80170b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 80172e6:	2700      	movs	r7, #0
 80172e8:	e7cd      	b.n	8017286 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x230>
 80172ea:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80172ec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80172ee:	3501      	adds	r5, #1
 80172f0:	429d      	cmp	r5, r3
 80172f2:	f6bf af77 	bge.w	80171e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80172f6:	4659      	mov	r1, fp
 80172f8:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80172fa:	f7fa fd0d 	bl	8011d18 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80172fe:	4604      	mov	r4, r0
 8017300:	b110      	cbz	r0, 8017308 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 8017302:	280a      	cmp	r0, #10
 8017304:	d1f2      	bne.n	80172ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8017306:	e76c      	b.n	80171e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8017308:	2400      	movs	r4, #0
 801730a:	e76b      	b.n	80171e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801730c:	f1bb 0f00 	cmp.w	fp, #0
 8017310:	f43f af5c 	beq.w	80171cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8017314:	e777      	b.n	8017206 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

08017316 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8017316:	b530      	push	{r4, r5, lr}
 8017318:	8a44      	ldrh	r4, [r0, #18]
 801731a:	8ac5      	ldrh	r5, [r0, #22]
 801731c:	82c3      	strh	r3, [r0, #22]
 801731e:	442c      	add	r4, r5
 8017320:	1ae4      	subs	r4, r4, r3
 8017322:	8244      	strh	r4, [r0, #18]
 8017324:	8b03      	ldrh	r3, [r0, #24]
 8017326:	8a84      	ldrh	r4, [r0, #20]
 8017328:	4422      	add	r2, r4
 801732a:	440c      	add	r4, r1
 801732c:	1a59      	subs	r1, r3, r1
 801732e:	8342      	strh	r2, [r0, #26]
 8017330:	8284      	strh	r4, [r0, #20]
 8017332:	8301      	strh	r1, [r0, #24]
 8017334:	bd30      	pop	{r4, r5, pc}

08017336 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8017336:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801733a:	7a43      	ldrb	r3, [r0, #9]
 801733c:	1eda      	subs	r2, r3, #3
 801733e:	b087      	sub	sp, #28
 8017340:	4604      	mov	r4, r0
 8017342:	b2d2      	uxtb	r2, r2
 8017344:	460f      	mov	r7, r1
 8017346:	2900      	cmp	r1, #0
 8017348:	d036      	beq.n	80173b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801734a:	2a01      	cmp	r2, #1
 801734c:	d932      	bls.n	80173b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801734e:	1e58      	subs	r0, r3, #1
 8017350:	f1d0 0b00 	rsbs	fp, r0, #0
 8017354:	eb4b 0b00 	adc.w	fp, fp, r0
 8017358:	1e99      	subs	r1, r3, #2
 801735a:	424b      	negs	r3, r1
 801735c:	414b      	adcs	r3, r1
 801735e:	9303      	str	r3, [sp, #12]
 8017360:	2300      	movs	r3, #0
 8017362:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8017366:	2500      	movs	r5, #0
 8017368:	8265      	strh	r5, [r4, #18]
 801736a:	82a5      	strh	r5, [r4, #20]
 801736c:	46a9      	mov	r9, r5
 801736e:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8017372:	2300      	movs	r3, #0
 8017374:	9305      	str	r3, [sp, #20]
 8017376:	8823      	ldrh	r3, [r4, #0]
 8017378:	2b20      	cmp	r3, #32
 801737a:	d02b      	beq.n	80173d4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801737c:	eba3 020a 	sub.w	r2, r3, sl
 8017380:	4256      	negs	r6, r2
 8017382:	4156      	adcs	r6, r2
 8017384:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8017388:	4293      	cmp	r3, r2
 801738a:	d004      	beq.n	8017396 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801738c:	4553      	cmp	r3, sl
 801738e:	bf16      	itet	ne
 8017390:	4699      	movne	r9, r3
 8017392:	2601      	moveq	r6, #1
 8017394:	2600      	movne	r6, #0
 8017396:	ab05      	add	r3, sp, #20
 8017398:	68e2      	ldr	r2, [r4, #12]
 801739a:	7a21      	ldrb	r1, [r4, #8]
 801739c:	6860      	ldr	r0, [r4, #4]
 801739e:	f002 fc81 	bl	8019ca4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80173a2:	8020      	strh	r0, [r4, #0]
 80173a4:	b9c8      	cbnz	r0, 80173da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 80173a6:	8b22      	ldrh	r2, [r4, #24]
 80173a8:	2300      	movs	r3, #0
 80173aa:	4611      	mov	r1, r2
 80173ac:	4620      	mov	r0, r4
 80173ae:	f7ff ffb2 	bl	8017316 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80173b2:	e066      	b.n	8017482 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80173b4:	468b      	mov	fp, r1
 80173b6:	e7cf      	b.n	8017358 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 80173b8:	3b01      	subs	r3, #1
 80173ba:	2a01      	cmp	r2, #1
 80173bc:	bf8c      	ite	hi
 80173be:	2200      	movhi	r2, #0
 80173c0:	2201      	movls	r2, #1
 80173c2:	2b01      	cmp	r3, #1
 80173c4:	bf8c      	ite	hi
 80173c6:	2300      	movhi	r3, #0
 80173c8:	2301      	movls	r3, #1
 80173ca:	9202      	str	r2, [sp, #8]
 80173cc:	9301      	str	r3, [sp, #4]
 80173ce:	9103      	str	r1, [sp, #12]
 80173d0:	468b      	mov	fp, r1
 80173d2:	e7c8      	b.n	8017366 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 80173d4:	4699      	mov	r9, r3
 80173d6:	2601      	movs	r6, #1
 80173d8:	e7dd      	b.n	8017396 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 80173da:	8ae3      	ldrh	r3, [r4, #22]
 80173dc:	280a      	cmp	r0, #10
 80173de:	f103 0301 	add.w	r3, r3, #1
 80173e2:	82e3      	strh	r3, [r4, #22]
 80173e4:	d0df      	beq.n	80173a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 80173e6:	9a05      	ldr	r2, [sp, #20]
 80173e8:	bb42      	cbnz	r2, 801743c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 80173ea:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80173ee:	4298      	cmp	r0, r3
 80173f0:	d001      	beq.n	80173f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 80173f2:	4550      	cmp	r0, sl
 80173f4:	d1bd      	bne.n	8017372 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80173f6:	8823      	ldrh	r3, [r4, #0]
 80173f8:	8b21      	ldrh	r1, [r4, #24]
 80173fa:	2b20      	cmp	r3, #32
 80173fc:	d001      	beq.n	8017402 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 80173fe:	4553      	cmp	r3, sl
 8017400:	d131      	bne.n	8017466 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8017402:	2e00      	cmp	r6, #0
 8017404:	bf0a      	itet	eq
 8017406:	460d      	moveq	r5, r1
 8017408:	4630      	movne	r0, r6
 801740a:	2001      	moveq	r0, #1
 801740c:	440a      	add	r2, r1
 801740e:	8aa3      	ldrh	r3, [r4, #20]
 8017410:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8017414:	b292      	uxth	r2, r2
 8017416:	8322      	strh	r2, [r4, #24]
 8017418:	4413      	add	r3, r2
 801741a:	2f00      	cmp	r7, #0
 801741c:	d03a      	beq.n	8017494 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801741e:	f1bb 0f00 	cmp.w	fp, #0
 8017422:	d102      	bne.n	801742a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 8017424:	9903      	ldr	r1, [sp, #12]
 8017426:	b301      	cbz	r1, 801746a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8017428:	b1f8      	cbz	r0, 801746a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801742a:	8ba1      	ldrh	r1, [r4, #28]
 801742c:	4419      	add	r1, r3
 801742e:	458c      	cmp	ip, r1
 8017430:	da2a      	bge.n	8017488 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8017432:	8a61      	ldrh	r1, [r4, #18]
 8017434:	b341      	cbz	r1, 8017488 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8017436:	4563      	cmp	r3, ip
 8017438:	dd9b      	ble.n	8017372 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801743a:	e01c      	b.n	8017476 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801743c:	8893      	ldrh	r3, [r2, #4]
 801743e:	8023      	strh	r3, [r4, #0]
 8017440:	f892 800d 	ldrb.w	r8, [r2, #13]
 8017444:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8017448:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801744c:	f892 800a 	ldrb.w	r8, [r2, #10]
 8017450:	ea48 0800 	orr.w	r8, r8, r0
 8017454:	68e0      	ldr	r0, [r4, #12]
 8017456:	6803      	ldr	r3, [r0, #0]
 8017458:	4649      	mov	r1, r9
 801745a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801745c:	4798      	blx	r3
 801745e:	eb08 0200 	add.w	r2, r8, r0
 8017462:	b292      	uxth	r2, r2
 8017464:	e7c7      	b.n	80173f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8017466:	2000      	movs	r0, #0
 8017468:	e7d0      	b.n	801740c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801746a:	4563      	cmp	r3, ip
 801746c:	dd81      	ble.n	8017372 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801746e:	8a63      	ldrh	r3, [r4, #18]
 8017470:	2b00      	cmp	r3, #0
 8017472:	f43f af7e 	beq.w	8017372 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8017476:	2301      	movs	r3, #1
 8017478:	77a3      	strb	r3, [r4, #30]
 801747a:	8ba2      	ldrh	r2, [r4, #28]
 801747c:	8b63      	ldrh	r3, [r4, #26]
 801747e:	4413      	add	r3, r2
 8017480:	8363      	strh	r3, [r4, #26]
 8017482:	b007      	add	sp, #28
 8017484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017488:	2300      	movs	r3, #0
 801748a:	4611      	mov	r1, r2
 801748c:	4620      	mov	r0, r4
 801748e:	f7ff ff42 	bl	8017316 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8017492:	e76e      	b.n	8017372 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8017494:	4563      	cmp	r3, ip
 8017496:	dd14      	ble.n	80174c2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8017498:	9b02      	ldr	r3, [sp, #8]
 801749a:	b113      	cbz	r3, 80174a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801749c:	2301      	movs	r3, #1
 801749e:	460a      	mov	r2, r1
 80174a0:	e783      	b.n	80173aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 80174a2:	9b01      	ldr	r3, [sp, #4]
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	f43f af64 	beq.w	8017372 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80174aa:	2800      	cmp	r0, #0
 80174ac:	f47f af61 	bne.w	8017372 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80174b0:	b116      	cbz	r6, 80174b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 80174b2:	2301      	movs	r3, #1
 80174b4:	462a      	mov	r2, r5
 80174b6:	e779      	b.n	80173ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 80174b8:	8a63      	ldrh	r3, [r4, #18]
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	f43f af59 	beq.w	8017372 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80174c0:	e7df      	b.n	8017482 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80174c2:	2800      	cmp	r0, #0
 80174c4:	f47f af55 	bne.w	8017372 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80174c8:	2e00      	cmp	r6, #0
 80174ca:	f43f af52 	beq.w	8017372 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80174ce:	2301      	movs	r3, #1
 80174d0:	462a      	mov	r2, r5
 80174d2:	e7db      	b.n	801748c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

080174d4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80174d4:	b530      	push	{r4, r5, lr}
 80174d6:	4605      	mov	r5, r0
 80174d8:	b08b      	sub	sp, #44	; 0x2c
 80174da:	b191      	cbz	r1, 8017502 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 80174dc:	e9cd 3100 	strd	r3, r1, [sp]
 80174e0:	4613      	mov	r3, r2
 80174e2:	4601      	mov	r1, r0
 80174e4:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80174e8:	a802      	add	r0, sp, #8
 80174ea:	f7ff fd0d 	bl	8016f08 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80174ee:	2401      	movs	r4, #1
 80174f0:	2100      	movs	r1, #0
 80174f2:	a802      	add	r0, sp, #8
 80174f4:	f7ff ff1f 	bl	8017336 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80174f8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80174fc:	b163      	cbz	r3, 8017518 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 80174fe:	3401      	adds	r4, #1
 8017500:	e7f6      	b.n	80174f0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8017502:	f002 fcc7 	bl	8019e94 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017506:	2401      	movs	r4, #1
 8017508:	280a      	cmp	r0, #10
 801750a:	4628      	mov	r0, r5
 801750c:	bf08      	it	eq
 801750e:	3401      	addeq	r4, #1
 8017510:	f002 fcc0 	bl	8019e94 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017514:	2800      	cmp	r0, #0
 8017516:	d1f7      	bne.n	8017508 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8017518:	b2a0      	uxth	r0, r4
 801751a:	b00b      	add	sp, #44	; 0x2c
 801751c:	bd30      	pop	{r4, r5, pc}

0801751e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801751e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017522:	b0db      	sub	sp, #364	; 0x16c
 8017524:	4689      	mov	r9, r1
 8017526:	f8dd a190 	ldr.w	sl, [sp, #400]	; 0x190
 801752a:	900a      	str	r0, [sp, #40]	; 0x28
 801752c:	461c      	mov	r4, r3
 801752e:	f1ba 0f00 	cmp.w	sl, #0
 8017532:	f000 80a5 	beq.w	8017680 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8017536:	681b      	ldr	r3, [r3, #0]
 8017538:	2b00      	cmp	r3, #0
 801753a:	f000 80a1 	beq.w	8017680 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 801753e:	7ba3      	ldrb	r3, [r4, #14]
 8017540:	2b00      	cmp	r3, #0
 8017542:	f000 809d 	beq.w	8017680 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8017546:	6810      	ldr	r0, [r2, #0]
 8017548:	6851      	ldr	r1, [r2, #4]
 801754a:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801754e:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8017552:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8017556:	4643      	mov	r3, r8
 8017558:	c303      	stmia	r3!, {r0, r1}
 801755a:	2500      	movs	r5, #0
 801755c:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8017560:	79a2      	ldrb	r2, [r4, #6]
 8017562:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017566:	a90e      	add	r1, sp, #56	; 0x38
 8017568:	4640      	mov	r0, r8
 801756a:	950e      	str	r5, [sp, #56]	; 0x38
 801756c:	f7ff fd42 	bl	8016ff4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8017570:	a90e      	add	r1, sp, #56	; 0x38
 8017572:	4608      	mov	r0, r1
 8017574:	79a2      	ldrb	r2, [r4, #6]
 8017576:	af18      	add	r7, sp, #96	; 0x60
 8017578:	f7ff fd3c 	bl	8016ff4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801757c:	4638      	mov	r0, r7
 801757e:	f002 f852 	bl	8019626 <_ZN8touchgfx12TextProviderC1Ev>
 8017582:	6820      	ldr	r0, [r4, #0]
 8017584:	6803      	ldr	r3, [r0, #0]
 8017586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017588:	4798      	blx	r3
 801758a:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801758c:	4603      	mov	r3, r0
 801758e:	4651      	mov	r1, sl
 8017590:	4638      	mov	r0, r7
 8017592:	f002 f88d 	bl	80196b0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017596:	6820      	ldr	r0, [r4, #0]
 8017598:	7923      	ldrb	r3, [r4, #4]
 801759a:	9308      	str	r3, [sp, #32]
 801759c:	6803      	ldr	r3, [r0, #0]
 801759e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80175a0:	4798      	blx	r3
 80175a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80175a6:	181e      	adds	r6, r3, r0
 80175a8:	42ae      	cmp	r6, r5
 80175aa:	dd06      	ble.n	80175ba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 80175ac:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 80175b0:	4282      	cmp	r2, r0
 80175b2:	bfa4      	itt	ge
 80175b4:	189d      	addge	r5, r3, r2
 80175b6:	fb95 f5f6 	sdivge	r5, r5, r6
 80175ba:	a82e      	add	r0, sp, #184	; 0xb8
 80175bc:	f002 f833 	bl	8019626 <_ZN8touchgfx12TextProviderC1Ev>
 80175c0:	7c23      	ldrb	r3, [r4, #16]
 80175c2:	b14b      	cbz	r3, 80175d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xba>
 80175c4:	6820      	ldr	r0, [r4, #0]
 80175c6:	6803      	ldr	r3, [r0, #0]
 80175c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80175ca:	4798      	blx	r3
 80175cc:	9a65      	ldr	r2, [sp, #404]	; 0x194
 80175ce:	4603      	mov	r3, r0
 80175d0:	4651      	mov	r1, sl
 80175d2:	a82e      	add	r0, sp, #184	; 0xb8
 80175d4:	f002 f86c 	bl	80196b0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80175d8:	7c21      	ldrb	r1, [r4, #16]
 80175da:	9101      	str	r1, [sp, #4]
 80175dc:	6821      	ldr	r1, [r4, #0]
 80175de:	7963      	ldrb	r3, [r4, #5]
 80175e0:	9100      	str	r1, [sp, #0]
 80175e2:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80175e6:	a92e      	add	r1, sp, #184	; 0xb8
 80175e8:	a810      	add	r0, sp, #64	; 0x40
 80175ea:	f7ff fc8d 	bl	8016f08 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80175ee:	7c23      	ldrb	r3, [r4, #16]
 80175f0:	b9bb      	cbnz	r3, 8017622 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x104>
 80175f2:	fa1f fa86 	uxth.w	sl, r6
 80175f6:	2d00      	cmp	r5, #0
 80175f8:	dd45      	ble.n	8017686 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 80175fa:	4638      	mov	r0, r7
 80175fc:	f002 fc4a 	bl	8019e94 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017600:	2800      	cmp	r0, #0
 8017602:	d03d      	beq.n	8017680 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8017604:	280a      	cmp	r0, #10
 8017606:	d1f6      	bne.n	80175f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 8017608:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801760c:	4453      	add	r3, sl
 801760e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8017612:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8017616:	eba3 030a 	sub.w	r3, r3, sl
 801761a:	3d01      	subs	r5, #1
 801761c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017620:	e7e9      	b.n	80175f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 8017622:	0073      	lsls	r3, r6, #1
 8017624:	9309      	str	r3, [sp, #36]	; 0x24
 8017626:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801762a:	fa1f fa86 	uxth.w	sl, r6
 801762e:	2d00      	cmp	r5, #0
 8017630:	dd29      	ble.n	8017686 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 8017632:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8017636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017638:	428b      	cmp	r3, r1
 801763a:	bfd4      	ite	le
 801763c:	2100      	movle	r1, #0
 801763e:	2101      	movgt	r1, #1
 8017640:	a810      	add	r0, sp, #64	; 0x40
 8017642:	f7ff fe78 	bl	8017336 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8017646:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 801764a:	3b01      	subs	r3, #1
 801764c:	b29b      	uxth	r3, r3
 801764e:	455b      	cmp	r3, fp
 8017650:	930b      	str	r3, [sp, #44]	; 0x2c
 8017652:	d005      	beq.n	8017660 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 8017654:	7961      	ldrb	r1, [r4, #5]
 8017656:	4638      	mov	r0, r7
 8017658:	f7fa fb5e 	bl	8011d18 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801765c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801765e:	e7f4      	b.n	801764a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12c>
 8017660:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8017664:	4453      	add	r3, sl
 8017666:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801766a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801766e:	eba3 030a 	sub.w	r3, r3, sl
 8017672:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017676:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801767a:	3d01      	subs	r5, #1
 801767c:	2b00      	cmp	r3, #0
 801767e:	d1d6      	bne.n	801762e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x110>
 8017680:	b05b      	add	sp, #364	; 0x16c
 8017682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017686:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801768a:	ad44      	add	r5, sp, #272	; 0x110
 801768c:	f04f 0b00 	mov.w	fp, #0
 8017690:	7c23      	ldrb	r3, [r4, #16]
 8017692:	2b00      	cmp	r3, #0
 8017694:	d067      	beq.n	8017766 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8017696:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801769a:	458a      	cmp	sl, r1
 801769c:	bfd4      	ite	le
 801769e:	2100      	movle	r1, #0
 80176a0:	2101      	movgt	r1, #1
 80176a2:	a810      	add	r0, sp, #64	; 0x40
 80176a4:	f7ff fe47 	bl	8017336 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80176a8:	9b08      	ldr	r3, [sp, #32]
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d056      	beq.n	801775c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 80176ae:	7c23      	ldrb	r3, [r4, #16]
 80176b0:	9309      	str	r3, [sp, #36]	; 0x24
 80176b2:	2258      	movs	r2, #88	; 0x58
 80176b4:	4639      	mov	r1, r7
 80176b6:	4628      	mov	r0, r5
 80176b8:	f00f fb36 	bl	8026d28 <memcpy>
 80176bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d059      	beq.n	8017776 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 80176c2:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 80176c6:	7922      	ldrb	r2, [r4, #4]
 80176c8:	2a01      	cmp	r2, #1
 80176ca:	d13d      	bne.n	8017748 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>
 80176cc:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 80176d0:	1ac0      	subs	r0, r0, r3
 80176d2:	2302      	movs	r3, #2
 80176d4:	fb90 f0f3 	sdiv	r0, r0, r3
 80176d8:	b200      	sxth	r0, r0
 80176da:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80176de:	4418      	add	r0, r3
 80176e0:	7c23      	ldrb	r3, [r4, #16]
 80176e2:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d03a      	beq.n	8017760 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 80176ea:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 80176ee:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 80176f2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80176f6:	9500      	str	r5, [sp, #0]
 80176f8:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80176fc:	e9cd b703 	strd	fp, r7, [sp, #12]
 8017700:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8017704:	464a      	mov	r2, r9
 8017706:	2100      	movs	r1, #0
 8017708:	980a      	ldr	r0, [sp, #40]	; 0x28
 801770a:	f7ff fca4 	bl	8017056 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801770e:	2800      	cmp	r0, #0
 8017710:	d1b6      	bne.n	8017680 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8017712:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8017716:	b2b2      	uxth	r2, r6
 8017718:	4611      	mov	r1, r2
 801771a:	4413      	add	r3, r2
 801771c:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8017720:	1a52      	subs	r2, r2, r1
 8017722:	7c21      	ldrb	r1, [r4, #16]
 8017724:	b21b      	sxth	r3, r3
 8017726:	b212      	sxth	r2, r2
 8017728:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801772c:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8017730:	b109      	cbz	r1, 8017736 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 8017732:	42b2      	cmp	r2, r6
 8017734:	dba4      	blt.n	8017680 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8017736:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801773a:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801773e:	440a      	add	r2, r1
 8017740:	b212      	sxth	r2, r2
 8017742:	4293      	cmp	r3, r2
 8017744:	dda4      	ble.n	8017690 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x172>
 8017746:	e79b      	b.n	8017680 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8017748:	2a02      	cmp	r2, #2
 801774a:	d105      	bne.n	8017758 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23a>
 801774c:	7be2      	ldrb	r2, [r4, #15]
 801774e:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8017752:	1a80      	subs	r0, r0, r2
 8017754:	1ac0      	subs	r0, r0, r3
 8017756:	e7bf      	b.n	80176d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ba>
 8017758:	2000      	movs	r0, #0
 801775a:	e7be      	b.n	80176da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 801775c:	7be0      	ldrb	r0, [r4, #15]
 801775e:	e7bc      	b.n	80176da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 8017760:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017764:	e7c3      	b.n	80176ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d0>
 8017766:	9b08      	ldr	r3, [sp, #32]
 8017768:	2b00      	cmp	r3, #0
 801776a:	d0f7      	beq.n	801775c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801776c:	2258      	movs	r2, #88	; 0x58
 801776e:	4639      	mov	r1, r7
 8017770:	4628      	mov	r0, r5
 8017772:	f00f fad9 	bl	8026d28 <memcpy>
 8017776:	2300      	movs	r3, #0
 8017778:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801777c:	6821      	ldr	r1, [r4, #0]
 801777e:	4628      	mov	r0, r5
 8017780:	f7ff fbfc 	bl	8016f7c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8017784:	b203      	sxth	r3, r0
 8017786:	e79e      	b.n	80176c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a8>

08017788 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8017788:	b510      	push	{r4, lr}
 801778a:	2b02      	cmp	r3, #2
 801778c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017790:	d00b      	beq.n	80177aa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8017792:	2b03      	cmp	r3, #3
 8017794:	d00e      	beq.n	80177b4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8017796:	2b01      	cmp	r3, #1
 8017798:	d001      	beq.n	801779e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801779a:	1860      	adds	r0, r4, r1
 801779c:	bd10      	pop	{r4, pc}
 801779e:	8880      	ldrh	r0, [r0, #4]
 80177a0:	4420      	add	r0, r4
 80177a2:	b200      	sxth	r0, r0
 80177a4:	1a80      	subs	r0, r0, r2
 80177a6:	3801      	subs	r0, #1
 80177a8:	e7f8      	b.n	801779c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 80177aa:	8880      	ldrh	r0, [r0, #4]
 80177ac:	4420      	add	r0, r4
 80177ae:	b200      	sxth	r0, r0
 80177b0:	1a40      	subs	r0, r0, r1
 80177b2:	e7f8      	b.n	80177a6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80177b4:	18a0      	adds	r0, r4, r2
 80177b6:	e7f1      	b.n	801779c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

080177b8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80177b8:	b510      	push	{r4, lr}
 80177ba:	2b02      	cmp	r3, #2
 80177bc:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80177c0:	d006      	beq.n	80177d0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 80177c2:	2b03      	cmp	r3, #3
 80177c4:	d00a      	beq.n	80177dc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80177c6:	2b01      	cmp	r3, #1
 80177c8:	bf14      	ite	ne
 80177ca:	18a0      	addne	r0, r4, r2
 80177cc:	1860      	addeq	r0, r4, r1
 80177ce:	bd10      	pop	{r4, pc}
 80177d0:	88c0      	ldrh	r0, [r0, #6]
 80177d2:	4420      	add	r0, r4
 80177d4:	b200      	sxth	r0, r0
 80177d6:	1a80      	subs	r0, r0, r2
 80177d8:	3801      	subs	r0, #1
 80177da:	e7f8      	b.n	80177ce <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 80177dc:	88c0      	ldrh	r0, [r0, #6]
 80177de:	4420      	add	r0, r4
 80177e0:	b200      	sxth	r0, r0
 80177e2:	1a40      	subs	r0, r0, r1
 80177e4:	e7f8      	b.n	80177d8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

080177e8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80177e8:	4b01      	ldr	r3, [pc, #4]	; (80177f0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80177ea:	2200      	movs	r2, #0
 80177ec:	601a      	str	r2, [r3, #0]
 80177ee:	4770      	bx	lr
 80177f0:	2000a0f8 	.word	0x2000a0f8

080177f4 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80177f4:	4603      	mov	r3, r0
 80177f6:	b1c8      	cbz	r0, 801782c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80177f8:	0c02      	lsrs	r2, r0, #16
 80177fa:	0412      	lsls	r2, r2, #16
 80177fc:	b9a2      	cbnz	r2, 8017828 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80177fe:	0403      	lsls	r3, r0, #16
 8017800:	2010      	movs	r0, #16
 8017802:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017806:	bf04      	itt	eq
 8017808:	021b      	lsleq	r3, r3, #8
 801780a:	3008      	addeq	r0, #8
 801780c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017810:	bf04      	itt	eq
 8017812:	011b      	lsleq	r3, r3, #4
 8017814:	3004      	addeq	r0, #4
 8017816:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801781a:	bf04      	itt	eq
 801781c:	009b      	lsleq	r3, r3, #2
 801781e:	3002      	addeq	r0, #2
 8017820:	2b00      	cmp	r3, #0
 8017822:	db04      	blt.n	801782e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8017824:	3001      	adds	r0, #1
 8017826:	4770      	bx	lr
 8017828:	2000      	movs	r0, #0
 801782a:	e7ea      	b.n	8017802 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801782c:	2020      	movs	r0, #32
 801782e:	4770      	bx	lr

08017830 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8017830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017834:	b087      	sub	sp, #28
 8017836:	4681      	mov	r9, r0
 8017838:	4698      	mov	r8, r3
 801783a:	4610      	mov	r0, r2
 801783c:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8017840:	460d      	mov	r5, r1
 8017842:	b981      	cbnz	r1, 8017866 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8017844:	b14b      	cbz	r3, 801785a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8017846:	460b      	mov	r3, r1
 8017848:	e9cd 4700 	strd	r4, r7, [sp]
 801784c:	464a      	mov	r2, r9
 801784e:	4641      	mov	r1, r8
 8017850:	f7ff ffee 	bl	8017830 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017854:	b007      	add	sp, #28
 8017856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801785a:	f04f 33ff 	mov.w	r3, #4294967295
 801785e:	603b      	str	r3, [r7, #0]
 8017860:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017864:	e7f6      	b.n	8017854 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8017866:	fa32 fa01 	lsrs.w	sl, r2, r1
 801786a:	d107      	bne.n	801787c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801786c:	fb09 f602 	mul.w	r6, r9, r2
 8017870:	fbb6 f0f4 	udiv	r0, r6, r4
 8017874:	fb04 6610 	mls	r6, r4, r0, r6
 8017878:	603e      	str	r6, [r7, #0]
 801787a:	e7eb      	b.n	8017854 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801787c:	2601      	movs	r6, #1
 801787e:	408e      	lsls	r6, r1
 8017880:	3e01      	subs	r6, #1
 8017882:	4016      	ands	r6, r2
 8017884:	fa09 fb01 	lsl.w	fp, r9, r1
 8017888:	4630      	mov	r0, r6
 801788a:	fbbb f3f4 	udiv	r3, fp, r4
 801788e:	9302      	str	r3, [sp, #8]
 8017890:	fb0a f303 	mul.w	r3, sl, r3
 8017894:	9303      	str	r3, [sp, #12]
 8017896:	f7ff ffad 	bl	80177f4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801789a:	464a      	mov	r2, r9
 801789c:	460b      	mov	r3, r1
 801789e:	e9cd 4700 	strd	r4, r7, [sp]
 80178a2:	4601      	mov	r1, r0
 80178a4:	4630      	mov	r0, r6
 80178a6:	f7ff ffc3 	bl	8017830 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80178aa:	9b02      	ldr	r3, [sp, #8]
 80178ac:	fb04 bb13 	mls	fp, r4, r3, fp
 80178b0:	4606      	mov	r6, r0
 80178b2:	4658      	mov	r0, fp
 80178b4:	eb05 0108 	add.w	r1, r5, r8
 80178b8:	f7ff ff9c 	bl	80177f4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80178bc:	ab05      	add	r3, sp, #20
 80178be:	e9cd 4300 	strd	r4, r3, [sp]
 80178c2:	465a      	mov	r2, fp
 80178c4:	4603      	mov	r3, r0
 80178c6:	4650      	mov	r0, sl
 80178c8:	f7ff ffb2 	bl	8017830 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80178cc:	6839      	ldr	r1, [r7, #0]
 80178ce:	9a05      	ldr	r2, [sp, #20]
 80178d0:	9b03      	ldr	r3, [sp, #12]
 80178d2:	4411      	add	r1, r2
 80178d4:	fbb1 f2f4 	udiv	r2, r1, r4
 80178d8:	18d3      	adds	r3, r2, r3
 80178da:	441e      	add	r6, r3
 80178dc:	fb04 1412 	mls	r4, r4, r2, r1
 80178e0:	4430      	add	r0, r6
 80178e2:	603c      	str	r4, [r7, #0]
 80178e4:	e7b6      	b.n	8017854 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

080178e6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80178e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80178ea:	b085      	sub	sp, #20
 80178ec:	f1b0 0900 	subs.w	r9, r0, #0
 80178f0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80178f2:	461d      	mov	r5, r3
 80178f4:	bfbf      	itttt	lt
 80178f6:	6823      	ldrlt	r3, [r4, #0]
 80178f8:	425b      	neglt	r3, r3
 80178fa:	f1c9 0900 	rsblt	r9, r9, #0
 80178fe:	6023      	strlt	r3, [r4, #0]
 8017900:	bfb4      	ite	lt
 8017902:	f04f 36ff 	movlt.w	r6, #4294967295
 8017906:	2601      	movge	r6, #1
 8017908:	2a00      	cmp	r2, #0
 801790a:	4617      	mov	r7, r2
 801790c:	da04      	bge.n	8017918 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801790e:	6823      	ldr	r3, [r4, #0]
 8017910:	425b      	negs	r3, r3
 8017912:	4257      	negs	r7, r2
 8017914:	4276      	negs	r6, r6
 8017916:	6023      	str	r3, [r4, #0]
 8017918:	2d00      	cmp	r5, #0
 801791a:	4638      	mov	r0, r7
 801791c:	bfba      	itte	lt
 801791e:	426d      	neglt	r5, r5
 8017920:	f04f 38ff 	movlt.w	r8, #4294967295
 8017924:	f04f 0801 	movge.w	r8, #1
 8017928:	f7ff ff64 	bl	80177f4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801792c:	ab03      	add	r3, sp, #12
 801792e:	e9cd 5300 	strd	r5, r3, [sp]
 8017932:	463a      	mov	r2, r7
 8017934:	4603      	mov	r3, r0
 8017936:	4648      	mov	r0, r9
 8017938:	f7ff ff7a 	bl	8017830 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801793c:	6823      	ldr	r3, [r4, #0]
 801793e:	9a03      	ldr	r2, [sp, #12]
 8017940:	4546      	cmp	r6, r8
 8017942:	441a      	add	r2, r3
 8017944:	fb92 f3f5 	sdiv	r3, r2, r5
 8017948:	4418      	add	r0, r3
 801794a:	bf18      	it	ne
 801794c:	4240      	negne	r0, r0
 801794e:	fb05 2313 	mls	r3, r5, r3, r2
 8017952:	1c72      	adds	r2, r6, #1
 8017954:	6023      	str	r3, [r4, #0]
 8017956:	d105      	bne.n	8017964 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8017958:	2b00      	cmp	r3, #0
 801795a:	f1c3 0200 	rsb	r2, r3, #0
 801795e:	db0b      	blt.n	8017978 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8017960:	6022      	str	r2, [r4, #0]
 8017962:	e006      	b.n	8017972 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017964:	2e01      	cmp	r6, #1
 8017966:	d104      	bne.n	8017972 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017968:	2b00      	cmp	r3, #0
 801796a:	da02      	bge.n	8017972 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801796c:	442b      	add	r3, r5
 801796e:	3801      	subs	r0, #1
 8017970:	6023      	str	r3, [r4, #0]
 8017972:	b005      	add	sp, #20
 8017974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017978:	3801      	subs	r0, #1
 801797a:	1b52      	subs	r2, r2, r5
 801797c:	e7f0      	b.n	8017960 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08017980 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8017980:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8017984:	4c1c      	ldr	r4, [pc, #112]	; (80179f8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8017986:	6807      	ldr	r7, [r0, #0]
 8017988:	69a3      	ldr	r3, [r4, #24]
 801798a:	4605      	mov	r5, r0
 801798c:	b92b      	cbnz	r3, 801799a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801798e:	6840      	ldr	r0, [r0, #4]
 8017990:	e9c5 7000 	strd	r7, r0, [r5]
 8017994:	b004      	add	sp, #16
 8017996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801799a:	68a2      	ldr	r2, [r4, #8]
 801799c:	6820      	ldr	r0, [r4, #0]
 801799e:	ae04      	add	r6, sp, #16
 80179a0:	f04f 0802 	mov.w	r8, #2
 80179a4:	fb93 f1f8 	sdiv	r1, r3, r8
 80179a8:	440a      	add	r2, r1
 80179aa:	f846 2d04 	str.w	r2, [r6, #-4]!
 80179ae:	69e1      	ldr	r1, [r4, #28]
 80179b0:	9600      	str	r6, [sp, #0]
 80179b2:	463a      	mov	r2, r7
 80179b4:	f7ff ff97 	bl	80178e6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80179b8:	69a3      	ldr	r3, [r4, #24]
 80179ba:	686a      	ldr	r2, [r5, #4]
 80179bc:	6a21      	ldr	r1, [r4, #32]
 80179be:	9600      	str	r6, [sp, #0]
 80179c0:	4607      	mov	r7, r0
 80179c2:	6860      	ldr	r0, [r4, #4]
 80179c4:	f7ff ff8f 	bl	80178e6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80179c8:	6962      	ldr	r2, [r4, #20]
 80179ca:	69a3      	ldr	r3, [r4, #24]
 80179cc:	fb93 f8f8 	sdiv	r8, r3, r8
 80179d0:	4442      	add	r2, r8
 80179d2:	9203      	str	r2, [sp, #12]
 80179d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80179d6:	682a      	ldr	r2, [r5, #0]
 80179d8:	9600      	str	r6, [sp, #0]
 80179da:	4407      	add	r7, r0
 80179dc:	68e0      	ldr	r0, [r4, #12]
 80179de:	f7ff ff82 	bl	80178e6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80179e2:	9600      	str	r6, [sp, #0]
 80179e4:	4680      	mov	r8, r0
 80179e6:	69a3      	ldr	r3, [r4, #24]
 80179e8:	686a      	ldr	r2, [r5, #4]
 80179ea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80179ec:	6920      	ldr	r0, [r4, #16]
 80179ee:	f7ff ff7a 	bl	80178e6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80179f2:	4440      	add	r0, r8
 80179f4:	e7cc      	b.n	8017990 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80179f6:	bf00      	nop
 80179f8:	2000a0fc 	.word	0x2000a0fc

080179fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80179fc:	b510      	push	{r4, lr}
 80179fe:	4b07      	ldr	r3, [pc, #28]	; (8017a1c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8017a00:	781b      	ldrb	r3, [r3, #0]
 8017a02:	2b01      	cmp	r3, #1
 8017a04:	d108      	bne.n	8017a18 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8017a06:	4b06      	ldr	r3, [pc, #24]	; (8017a20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8017a08:	880c      	ldrh	r4, [r1, #0]
 8017a0a:	881b      	ldrh	r3, [r3, #0]
 8017a0c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017a10:	3b01      	subs	r3, #1
 8017a12:	1b1b      	subs	r3, r3, r4
 8017a14:	8003      	strh	r3, [r0, #0]
 8017a16:	800a      	strh	r2, [r1, #0]
 8017a18:	bd10      	pop	{r4, pc}
 8017a1a:	bf00      	nop
 8017a1c:	2000a0e8 	.word	0x2000a0e8
 8017a20:	2000a0ec 	.word	0x2000a0ec

08017a24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8017a24:	b510      	push	{r4, lr}
 8017a26:	4b0a      	ldr	r3, [pc, #40]	; (8017a50 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8017a28:	781b      	ldrb	r3, [r3, #0]
 8017a2a:	2b01      	cmp	r3, #1
 8017a2c:	d10e      	bne.n	8017a4c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8017a2e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017a32:	8843      	ldrh	r3, [r0, #2]
 8017a34:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017a38:	8044      	strh	r4, [r0, #2]
 8017a3a:	18ca      	adds	r2, r1, r3
 8017a3c:	4b05      	ldr	r3, [pc, #20]	; (8017a54 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8017a3e:	881b      	ldrh	r3, [r3, #0]
 8017a40:	1a9b      	subs	r3, r3, r2
 8017a42:	8003      	strh	r3, [r0, #0]
 8017a44:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017a48:	80c3      	strh	r3, [r0, #6]
 8017a4a:	8081      	strh	r1, [r0, #4]
 8017a4c:	bd10      	pop	{r4, pc}
 8017a4e:	bf00      	nop
 8017a50:	2000a0e8 	.word	0x2000a0e8
 8017a54:	2000a0e4 	.word	0x2000a0e4

08017a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8017a58:	b510      	push	{r4, lr}
 8017a5a:	4b07      	ldr	r3, [pc, #28]	; (8017a78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8017a5c:	781b      	ldrb	r3, [r3, #0]
 8017a5e:	2b01      	cmp	r3, #1
 8017a60:	d108      	bne.n	8017a74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8017a62:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017a66:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017a6a:	8003      	strh	r3, [r0, #0]
 8017a6c:	8893      	ldrh	r3, [r2, #4]
 8017a6e:	3b01      	subs	r3, #1
 8017a70:	1b1b      	subs	r3, r3, r4
 8017a72:	800b      	strh	r3, [r1, #0]
 8017a74:	bd10      	pop	{r4, pc}
 8017a76:	bf00      	nop
 8017a78:	2000a0e8 	.word	0x2000a0e8

08017a7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8017a7c:	b513      	push	{r0, r1, r4, lr}
 8017a7e:	4b08      	ldr	r3, [pc, #32]	; (8017aa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8017a80:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017a84:	4b07      	ldr	r3, [pc, #28]	; (8017aa4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8017a86:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017a8e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017a92:	2400      	movs	r4, #0
 8017a94:	466a      	mov	r2, sp
 8017a96:	9400      	str	r4, [sp, #0]
 8017a98:	f7ff ffde 	bl	8017a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8017a9c:	b002      	add	sp, #8
 8017a9e:	bd10      	pop	{r4, pc}
 8017aa0:	2000a0e4 	.word	0x2000a0e4
 8017aa4:	2000a0e6 	.word	0x2000a0e6

08017aa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8017aa8:	b510      	push	{r4, lr}
 8017aaa:	4b0a      	ldr	r3, [pc, #40]	; (8017ad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8017aac:	781b      	ldrb	r3, [r3, #0]
 8017aae:	2b01      	cmp	r3, #1
 8017ab0:	460a      	mov	r2, r1
 8017ab2:	d10d      	bne.n	8017ad0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8017ab4:	8881      	ldrh	r1, [r0, #4]
 8017ab6:	8803      	ldrh	r3, [r0, #0]
 8017ab8:	440b      	add	r3, r1
 8017aba:	4601      	mov	r1, r0
 8017abc:	3b01      	subs	r3, #1
 8017abe:	f821 3b02 	strh.w	r3, [r1], #2
 8017ac2:	f7ff ffc9 	bl	8017a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8017ac6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017aca:	88c2      	ldrh	r2, [r0, #6]
 8017acc:	8082      	strh	r2, [r0, #4]
 8017ace:	80c3      	strh	r3, [r0, #6]
 8017ad0:	bd10      	pop	{r4, pc}
 8017ad2:	bf00      	nop
 8017ad4:	2000a0e8 	.word	0x2000a0e8

08017ad8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8017ad8:	b507      	push	{r0, r1, r2, lr}
 8017ada:	4b09      	ldr	r3, [pc, #36]	; (8017b00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8017adc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017ae0:	4b08      	ldr	r3, [pc, #32]	; (8017b04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8017ae2:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017ae6:	2100      	movs	r1, #0
 8017ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017aec:	9100      	str	r1, [sp, #0]
 8017aee:	4669      	mov	r1, sp
 8017af0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017af4:	f7ff ffd8 	bl	8017aa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017af8:	b003      	add	sp, #12
 8017afa:	f85d fb04 	ldr.w	pc, [sp], #4
 8017afe:	bf00      	nop
 8017b00:	2000a0e4 	.word	0x2000a0e4
 8017b04:	2000a0e6 	.word	0x2000a0e6

08017b08 <_ZN8touchgfx11Application13requestRedrawEv>:
 8017b08:	4b06      	ldr	r3, [pc, #24]	; (8017b24 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8017b0a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017b0e:	4b06      	ldr	r3, [pc, #24]	; (8017b28 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8017b10:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8017b14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017b18:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8017b1c:	2100      	movs	r1, #0
 8017b1e:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8017b22:	4770      	bx	lr
 8017b24:	2000a0e4 	.word	0x2000a0e4
 8017b28:	2000a0e6 	.word	0x2000a0e6

08017b2c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8017b2c:	4b03      	ldr	r3, [pc, #12]	; (8017b3c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8017b2e:	6818      	ldr	r0, [r3, #0]
 8017b30:	b110      	cbz	r0, 8017b38 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8017b32:	6803      	ldr	r3, [r0, #0]
 8017b34:	699b      	ldr	r3, [r3, #24]
 8017b36:	4718      	bx	r3
 8017b38:	4770      	bx	lr
 8017b3a:	bf00      	nop
 8017b3c:	2000a12c 	.word	0x2000a12c

08017b40 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8017b40:	4770      	bx	lr
	...

08017b44 <_ZN8touchgfx11Application4drawEv>:
 8017b44:	b507      	push	{r0, r1, r2, lr}
 8017b46:	4b09      	ldr	r3, [pc, #36]	; (8017b6c <_ZN8touchgfx11Application4drawEv+0x28>)
 8017b48:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017b4c:	4b08      	ldr	r3, [pc, #32]	; (8017b70 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8017b4e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017b56:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017b5a:	6803      	ldr	r3, [r0, #0]
 8017b5c:	2100      	movs	r1, #0
 8017b5e:	9100      	str	r1, [sp, #0]
 8017b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017b62:	4669      	mov	r1, sp
 8017b64:	4798      	blx	r3
 8017b66:	b003      	add	sp, #12
 8017b68:	f85d fb04 	ldr.w	pc, [sp], #4
 8017b6c:	2000a0e4 	.word	0x2000a0e4
 8017b70:	2000a0e6 	.word	0x2000a0e6

08017b74 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8017b74:	4b03      	ldr	r3, [pc, #12]	; (8017b84 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8017b76:	6818      	ldr	r0, [r3, #0]
 8017b78:	b110      	cbz	r0, 8017b80 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8017b7a:	6803      	ldr	r3, [r0, #0]
 8017b7c:	69db      	ldr	r3, [r3, #28]
 8017b7e:	4718      	bx	r3
 8017b80:	4770      	bx	lr
 8017b82:	bf00      	nop
 8017b84:	2000a12c 	.word	0x2000a12c

08017b88 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8017b88:	4b03      	ldr	r3, [pc, #12]	; (8017b98 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8017b8a:	6818      	ldr	r0, [r3, #0]
 8017b8c:	b110      	cbz	r0, 8017b94 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8017b8e:	6803      	ldr	r3, [r0, #0]
 8017b90:	6a1b      	ldr	r3, [r3, #32]
 8017b92:	4718      	bx	r3
 8017b94:	4770      	bx	lr
 8017b96:	bf00      	nop
 8017b98:	2000a12c 	.word	0x2000a12c

08017b9c <_ZN8touchgfx11Application14handleKeyEventEh>:
 8017b9c:	4b03      	ldr	r3, [pc, #12]	; (8017bac <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8017b9e:	6818      	ldr	r0, [r3, #0]
 8017ba0:	b110      	cbz	r0, 8017ba8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8017ba2:	6803      	ldr	r3, [r0, #0]
 8017ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ba6:	4718      	bx	r3
 8017ba8:	4770      	bx	lr
 8017baa:	bf00      	nop
 8017bac:	2000a12c 	.word	0x2000a12c

08017bb0 <_ZN8touchgfx11Application15handleTickEventEv>:
 8017bb0:	b570      	push	{r4, r5, r6, lr}
 8017bb2:	4d34      	ldr	r5, [pc, #208]	; (8017c84 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 8017bb4:	4604      	mov	r4, r0
 8017bb6:	6828      	ldr	r0, [r5, #0]
 8017bb8:	b140      	cbz	r0, 8017bcc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017bba:	7a03      	ldrb	r3, [r0, #8]
 8017bbc:	b933      	cbnz	r3, 8017bcc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017bbe:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8017bc2:	6803      	ldr	r3, [r0, #0]
 8017bc4:	689b      	ldr	r3, [r3, #8]
 8017bc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017bca:	4718      	bx	r3
 8017bcc:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8017bd0:	b97b      	cbnz	r3, 8017bf2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017bd2:	b170      	cbz	r0, 8017bf2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017bd4:	7a03      	ldrb	r3, [r0, #8]
 8017bd6:	b163      	cbz	r3, 8017bf2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017bd8:	4b2b      	ldr	r3, [pc, #172]	; (8017c88 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 8017bda:	6818      	ldr	r0, [r3, #0]
 8017bdc:	b110      	cbz	r0, 8017be4 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8017bde:	6803      	ldr	r3, [r0, #0]
 8017be0:	691b      	ldr	r3, [r3, #16]
 8017be2:	4798      	blx	r3
 8017be4:	6828      	ldr	r0, [r5, #0]
 8017be6:	6803      	ldr	r3, [r0, #0]
 8017be8:	68db      	ldr	r3, [r3, #12]
 8017bea:	4798      	blx	r3
 8017bec:	2301      	movs	r3, #1
 8017bee:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8017bf2:	2500      	movs	r5, #0
 8017bf4:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8017bf8:	42a8      	cmp	r0, r5
 8017bfa:	dd0c      	ble.n	8017c16 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8017bfc:	1963      	adds	r3, r4, r5
 8017bfe:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8017c02:	b132      	cbz	r2, 8017c12 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8017c04:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8017c08:	4413      	add	r3, r2
 8017c0a:	6858      	ldr	r0, [r3, #4]
 8017c0c:	6803      	ldr	r3, [r0, #0]
 8017c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017c10:	4798      	blx	r3
 8017c12:	3501      	adds	r5, #1
 8017c14:	e7ee      	b.n	8017bf4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8017c16:	2300      	movs	r3, #0
 8017c18:	461a      	mov	r2, r3
 8017c1a:	4298      	cmp	r0, r3
 8017c1c:	d114      	bne.n	8017c48 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 8017c1e:	1d25      	adds	r5, r4, #4
 8017c20:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 8017c24:	1e48      	subs	r0, r1, #1
 8017c26:	b280      	uxth	r0, r0
 8017c28:	4291      	cmp	r1, r2
 8017c2a:	dd24      	ble.n	8017c76 <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 8017c2c:	4288      	cmp	r0, r1
 8017c2e:	d2fb      	bcs.n	8017c28 <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 8017c30:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8017c34:	3304      	adds	r3, #4
 8017c36:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8017c3a:	428b      	cmp	r3, r1
 8017c3c:	d018      	beq.n	8017c70 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 8017c3e:	f853 6f04 	ldr.w	r6, [r3, #4]!
 8017c42:	f843 6c04 	str.w	r6, [r3, #-4]
 8017c46:	e7f8      	b.n	8017c3a <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 8017c48:	18e1      	adds	r1, r4, r3
 8017c4a:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8017c4e:	b16d      	cbz	r5, 8017c6c <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 8017c50:	429a      	cmp	r2, r3
 8017c52:	d00a      	beq.n	8017c6a <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 8017c54:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8017c58:	4431      	add	r1, r6
 8017c5a:	684e      	ldr	r6, [r1, #4]
 8017c5c:	b291      	uxth	r1, r2
 8017c5e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8017c62:	604e      	str	r6, [r1, #4]
 8017c64:	18a1      	adds	r1, r4, r2
 8017c66:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8017c6a:	3201      	adds	r2, #1
 8017c6c:	3301      	adds	r3, #1
 8017c6e:	e7d4      	b.n	8017c1a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8017c70:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8017c74:	e7d4      	b.n	8017c20 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 8017c76:	4b04      	ldr	r3, [pc, #16]	; (8017c88 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 8017c78:	6818      	ldr	r0, [r3, #0]
 8017c7a:	b110      	cbz	r0, 8017c82 <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 8017c7c:	6803      	ldr	r3, [r0, #0]
 8017c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c80:	e7a1      	b.n	8017bc6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8017c82:	bd70      	pop	{r4, r5, r6, pc}
 8017c84:	2000a130 	.word	0x2000a130
 8017c88:	2000a12c 	.word	0x2000a12c

08017c8c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8017c8c:	b570      	push	{r4, r5, r6, lr}
 8017c8e:	4606      	mov	r6, r0
 8017c90:	460c      	mov	r4, r1
 8017c92:	b929      	cbnz	r1, 8017ca0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8017c94:	4b0c      	ldr	r3, [pc, #48]	; (8017cc8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8017c96:	4a0d      	ldr	r2, [pc, #52]	; (8017ccc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8017c98:	480d      	ldr	r0, [pc, #52]	; (8017cd0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8017c9a:	2164      	movs	r1, #100	; 0x64
 8017c9c:	f00e ffc2 	bl	8026c24 <__assert_func>
 8017ca0:	4d0c      	ldr	r5, [pc, #48]	; (8017cd4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8017ca2:	2300      	movs	r3, #0
 8017ca4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8017ca8:	6828      	ldr	r0, [r5, #0]
 8017caa:	b110      	cbz	r0, 8017cb2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8017cac:	6803      	ldr	r3, [r0, #0]
 8017cae:	695b      	ldr	r3, [r3, #20]
 8017cb0:	4798      	blx	r3
 8017cb2:	602c      	str	r4, [r5, #0]
 8017cb4:	6823      	ldr	r3, [r4, #0]
 8017cb6:	4620      	mov	r0, r4
 8017cb8:	68db      	ldr	r3, [r3, #12]
 8017cba:	4798      	blx	r3
 8017cbc:	6833      	ldr	r3, [r6, #0]
 8017cbe:	4630      	mov	r0, r6
 8017cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017cc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017cc6:	4718      	bx	r3
 8017cc8:	0802ba58 	.word	0x0802ba58
 8017ccc:	0802bb28 	.word	0x0802bb28
 8017cd0:	0802ba62 	.word	0x0802ba62
 8017cd4:	2000a12c 	.word	0x2000a12c

08017cd8 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8017cd8:	b510      	push	{r4, lr}
 8017cda:	f9b1 4000 	ldrsh.w	r4, [r1]
 8017cde:	888a      	ldrh	r2, [r1, #4]
 8017ce0:	f9b0 3000 	ldrsh.w	r3, [r0]
 8017ce4:	4422      	add	r2, r4
 8017ce6:	b212      	sxth	r2, r2
 8017ce8:	4293      	cmp	r3, r2
 8017cea:	da15      	bge.n	8017d18 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017cec:	8882      	ldrh	r2, [r0, #4]
 8017cee:	4413      	add	r3, r2
 8017cf0:	b21b      	sxth	r3, r3
 8017cf2:	429c      	cmp	r4, r3
 8017cf4:	da10      	bge.n	8017d18 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017cf6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8017cfa:	88c9      	ldrh	r1, [r1, #6]
 8017cfc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8017d00:	4419      	add	r1, r3
 8017d02:	b209      	sxth	r1, r1
 8017d04:	428a      	cmp	r2, r1
 8017d06:	da07      	bge.n	8017d18 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017d08:	88c0      	ldrh	r0, [r0, #6]
 8017d0a:	4410      	add	r0, r2
 8017d0c:	b200      	sxth	r0, r0
 8017d0e:	4283      	cmp	r3, r0
 8017d10:	bfac      	ite	ge
 8017d12:	2000      	movge	r0, #0
 8017d14:	2001      	movlt	r0, #1
 8017d16:	bd10      	pop	{r4, pc}
 8017d18:	2000      	movs	r0, #0
 8017d1a:	e7fc      	b.n	8017d16 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08017d1c <_ZNK8touchgfx4Rect8includesERKS0_>:
 8017d1c:	b570      	push	{r4, r5, r6, lr}
 8017d1e:	f9b1 4000 	ldrsh.w	r4, [r1]
 8017d22:	f9b0 5000 	ldrsh.w	r5, [r0]
 8017d26:	42ac      	cmp	r4, r5
 8017d28:	db18      	blt.n	8017d5c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8017d2a:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8017d2e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8017d32:	429a      	cmp	r2, r3
 8017d34:	db12      	blt.n	8017d5c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8017d36:	8886      	ldrh	r6, [r0, #4]
 8017d38:	4435      	add	r5, r6
 8017d3a:	888e      	ldrh	r6, [r1, #4]
 8017d3c:	4434      	add	r4, r6
 8017d3e:	b22d      	sxth	r5, r5
 8017d40:	b224      	sxth	r4, r4
 8017d42:	42a5      	cmp	r5, r4
 8017d44:	db0a      	blt.n	8017d5c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8017d46:	88c0      	ldrh	r0, [r0, #6]
 8017d48:	4418      	add	r0, r3
 8017d4a:	88cb      	ldrh	r3, [r1, #6]
 8017d4c:	441a      	add	r2, r3
 8017d4e:	b200      	sxth	r0, r0
 8017d50:	b212      	sxth	r2, r2
 8017d52:	4290      	cmp	r0, r2
 8017d54:	bfb4      	ite	lt
 8017d56:	2000      	movlt	r0, #0
 8017d58:	2001      	movge	r0, #1
 8017d5a:	bd70      	pop	{r4, r5, r6, pc}
 8017d5c:	2000      	movs	r0, #0
 8017d5e:	e7fc      	b.n	8017d5a <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08017d60 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8017d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d62:	4604      	mov	r4, r0
 8017d64:	4608      	mov	r0, r1
 8017d66:	460d      	mov	r5, r1
 8017d68:	f7fc fff9 	bl	8014d5e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017d6c:	b978      	cbnz	r0, 8017d8e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8017d6e:	4620      	mov	r0, r4
 8017d70:	f7fc fff5 	bl	8014d5e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017d74:	f9b5 6000 	ldrsh.w	r6, [r5]
 8017d78:	b150      	cbz	r0, 8017d90 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8017d7a:	8026      	strh	r6, [r4, #0]
 8017d7c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8017d80:	8063      	strh	r3, [r4, #2]
 8017d82:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8017d86:	80a3      	strh	r3, [r4, #4]
 8017d88:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017d8c:	80e3      	strh	r3, [r4, #6]
 8017d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d90:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017d94:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8017d98:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8017d9c:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8017da0:	88ed      	ldrh	r5, [r5, #6]
 8017da2:	42b1      	cmp	r1, r6
 8017da4:	460f      	mov	r7, r1
 8017da6:	bfa8      	it	ge
 8017da8:	4637      	movge	r7, r6
 8017daa:	4293      	cmp	r3, r2
 8017dac:	4618      	mov	r0, r3
 8017dae:	4466      	add	r6, ip
 8017db0:	bfa8      	it	ge
 8017db2:	4610      	movge	r0, r2
 8017db4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8017db8:	8027      	strh	r7, [r4, #0]
 8017dba:	442a      	add	r2, r5
 8017dbc:	88e5      	ldrh	r5, [r4, #6]
 8017dbe:	8060      	strh	r0, [r4, #2]
 8017dc0:	4461      	add	r1, ip
 8017dc2:	442b      	add	r3, r5
 8017dc4:	b236      	sxth	r6, r6
 8017dc6:	b209      	sxth	r1, r1
 8017dc8:	b212      	sxth	r2, r2
 8017dca:	b21b      	sxth	r3, r3
 8017dcc:	428e      	cmp	r6, r1
 8017dce:	bfac      	ite	ge
 8017dd0:	ebc7 0106 	rsbge	r1, r7, r6
 8017dd4:	ebc7 0101 	rsblt	r1, r7, r1
 8017dd8:	429a      	cmp	r2, r3
 8017dda:	bfac      	ite	ge
 8017ddc:	ebc0 0202 	rsbge	r2, r0, r2
 8017de0:	ebc0 0203 	rsblt	r2, r0, r3
 8017de4:	80a1      	strh	r1, [r4, #4]
 8017de6:	80e2      	strh	r2, [r4, #6]
 8017de8:	e7d1      	b.n	8017d8e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08017dec <_ZN8touchgfx11Application11getInstanceEv>:
 8017dec:	4b01      	ldr	r3, [pc, #4]	; (8017df4 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8017dee:	6818      	ldr	r0, [r3, #0]
 8017df0:	4770      	bx	lr
 8017df2:	bf00      	nop
 8017df4:	2000a13c 	.word	0x2000a13c

08017df8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8017df8:	2300      	movs	r3, #0
 8017dfa:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8017dfe:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8017e02:	30a8      	adds	r0, #168	; 0xa8
 8017e04:	f802 3b01 	strb.w	r3, [r2], #1
 8017e08:	4282      	cmp	r2, r0
 8017e0a:	d1fb      	bne.n	8017e04 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8017e0c:	4770      	bx	lr

08017e0e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8017e0e:	4603      	mov	r3, r0
 8017e10:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8017e14:	2200      	movs	r2, #0
 8017e16:	801a      	strh	r2, [r3, #0]
 8017e18:	805a      	strh	r2, [r3, #2]
 8017e1a:	809a      	strh	r2, [r3, #4]
 8017e1c:	80da      	strh	r2, [r3, #6]
 8017e1e:	3308      	adds	r3, #8
 8017e20:	428b      	cmp	r3, r1
 8017e22:	d1f8      	bne.n	8017e16 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8017e24:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8017e28:	4770      	bx	lr
	...

08017e2c <_ZN8touchgfx11ApplicationC1Ev>:
 8017e2c:	b570      	push	{r4, r5, r6, lr}
 8017e2e:	4b1a      	ldr	r3, [pc, #104]	; (8017e98 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8017e30:	6003      	str	r3, [r0, #0]
 8017e32:	2500      	movs	r5, #0
 8017e34:	4604      	mov	r4, r0
 8017e36:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 8017e3a:	30a8      	adds	r0, #168	; 0xa8
 8017e3c:	f7ff ffe7 	bl	8017e0e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017e40:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8017e44:	f7ff ffe3 	bl	8017e0e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017e48:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8017e4c:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8017e50:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8017e54:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8017e58:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8017e5c:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 8017e60:	490e      	ldr	r1, [pc, #56]	; (8017e9c <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8017e62:	480f      	ldr	r0, [pc, #60]	; (8017ea0 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8017e64:	4e0f      	ldr	r6, [pc, #60]	; (8017ea4 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8017e66:	f00e fcab 	bl	80267c0 <CRC_Lock>
 8017e6a:	4b0f      	ldr	r3, [pc, #60]	; (8017ea8 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8017e6c:	b158      	cbz	r0, 8017e86 <_ZN8touchgfx11ApplicationC1Ev+0x5a>
 8017e6e:	801d      	strh	r5, [r3, #0]
 8017e70:	4a0e      	ldr	r2, [pc, #56]	; (8017eac <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8017e72:	2300      	movs	r3, #0
 8017e74:	6013      	str	r3, [r2, #0]
 8017e76:	4a0e      	ldr	r2, [pc, #56]	; (8017eb0 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8017e78:	6033      	str	r3, [r6, #0]
 8017e7a:	4620      	mov	r0, r4
 8017e7c:	6013      	str	r3, [r2, #0]
 8017e7e:	f7ff ffbb 	bl	8017df8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8017e82:	4620      	mov	r0, r4
 8017e84:	bd70      	pop	{r4, r5, r6, pc}
 8017e86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017e8a:	2002      	movs	r0, #2
 8017e8c:	801a      	strh	r2, [r3, #0]
 8017e8e:	6030      	str	r0, [r6, #0]
 8017e90:	f001 fa7e 	bl	8019390 <_ZN8touchgfx6Screen4drawEv>
 8017e94:	e7ec      	b.n	8017e70 <_ZN8touchgfx11ApplicationC1Ev+0x44>
 8017e96:	bf00      	nop
 8017e98:	0802baec 	.word	0x0802baec
 8017e9c:	b5e8b5cd 	.word	0xb5e8b5cd
 8017ea0:	f407a5c2 	.word	0xf407a5c2
 8017ea4:	2000a12c 	.word	0x2000a12c
 8017ea8:	2000012c 	.word	0x2000012c
 8017eac:	2000a13c 	.word	0x2000a13c
 8017eb0:	2000a130 	.word	0x2000a130

08017eb4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8017eb4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8017eb8:	428b      	cmp	r3, r1
 8017eba:	b510      	push	{r4, lr}
 8017ebc:	d90e      	bls.n	8017edc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 8017ebe:	3b01      	subs	r3, #1
 8017ec0:	b29b      	uxth	r3, r3
 8017ec2:	428b      	cmp	r3, r1
 8017ec4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8017ec8:	d908      	bls.n	8017edc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 8017eca:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8017ece:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8017ed2:	681a      	ldr	r2, [r3, #0]
 8017ed4:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8017ed8:	685a      	ldr	r2, [r3, #4]
 8017eda:	6062      	str	r2, [r4, #4]
 8017edc:	bd10      	pop	{r4, pc}
	...

08017ee0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8017ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017ee2:	466b      	mov	r3, sp
 8017ee4:	e883 0006 	stmia.w	r3, {r1, r2}
 8017ee8:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8017eec:	2a07      	cmp	r2, #7
 8017eee:	4604      	mov	r4, r0
 8017ef0:	d906      	bls.n	8017f00 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8017ef2:	4b09      	ldr	r3, [pc, #36]	; (8017f18 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8017ef4:	4a09      	ldr	r2, [pc, #36]	; (8017f1c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8017ef6:	480a      	ldr	r0, [pc, #40]	; (8017f20 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8017ef8:	f240 118f 	movw	r1, #399	; 0x18f
 8017efc:	f00e fe92 	bl	8026c24 <__assert_func>
 8017f00:	1c51      	adds	r1, r2, #1
 8017f02:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8017f06:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8017f0a:	cb03      	ldmia	r3!, {r0, r1}
 8017f0c:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8017f10:	6069      	str	r1, [r5, #4]
 8017f12:	b003      	add	sp, #12
 8017f14:	bd30      	pop	{r4, r5, pc}
 8017f16:	bf00      	nop
 8017f18:	0802ba8c 	.word	0x0802ba8c
 8017f1c:	0802bb6c 	.word	0x0802bb6c
 8017f20:	0802babb 	.word	0x0802babb

08017f24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8017f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f28:	b08d      	sub	sp, #52	; 0x34
 8017f2a:	ac08      	add	r4, sp, #32
 8017f2c:	4683      	mov	fp, r0
 8017f2e:	4620      	mov	r0, r4
 8017f30:	e884 0006 	stmia.w	r4, {r1, r2}
 8017f34:	f7fc ff13 	bl	8014d5e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017f38:	2800      	cmp	r0, #0
 8017f3a:	d16a      	bne.n	8018012 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8017f3c:	9402      	str	r4, [sp, #8]
 8017f3e:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8017f42:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8017f46:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 8017f4a:	2400      	movs	r4, #0
 8017f4c:	9301      	str	r3, [sp, #4]
 8017f4e:	36a0      	adds	r6, #160	; 0xa0
 8017f50:	42a5      	cmp	r5, r4
 8017f52:	d00d      	beq.n	8017f70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 8017f54:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8017f58:	9802      	ldr	r0, [sp, #8]
 8017f5a:	f7ff fedf 	bl	8017d1c <_ZNK8touchgfx4Rect8includesERKS0_>
 8017f5e:	b128      	cbz	r0, 8017f6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8017f60:	1e69      	subs	r1, r5, #1
 8017f62:	1b09      	subs	r1, r1, r4
 8017f64:	b289      	uxth	r1, r1
 8017f66:	9801      	ldr	r0, [sp, #4]
 8017f68:	f7ff ffa4 	bl	8017eb4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017f6c:	3401      	adds	r4, #1
 8017f6e:	e7ef      	b.n	8017f50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017f70:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8017f74:	9703      	str	r7, [sp, #12]
 8017f76:	1e7b      	subs	r3, r7, #1
 8017f78:	9300      	str	r3, [sp, #0]
 8017f7a:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8017f7e:	2400      	movs	r4, #0
 8017f80:	4655      	mov	r5, sl
 8017f82:	9704      	str	r7, [sp, #16]
 8017f84:	4626      	mov	r6, r4
 8017f86:	9b04      	ldr	r3, [sp, #16]
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d078      	beq.n	801807e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 8017f8c:	9902      	ldr	r1, [sp, #8]
 8017f8e:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8017f92:	f7ff fea1 	bl	8017cd8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017f96:	b360      	cbz	r0, 8017ff2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8017f98:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8017f9c:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8017fa0:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 8017fa4:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8017fa8:	45e6      	cmp	lr, ip
 8017faa:	db35      	blt.n	8018018 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8017fac:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8017fb0:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8017fb4:	4472      	add	r2, lr
 8017fb6:	4463      	add	r3, ip
 8017fb8:	b212      	sxth	r2, r2
 8017fba:	b21b      	sxth	r3, r3
 8017fbc:	429a      	cmp	r2, r3
 8017fbe:	dc2b      	bgt.n	8018018 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8017fc0:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8017fc4:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8017fc8:	fa1f f288 	uxth.w	r2, r8
 8017fcc:	4413      	add	r3, r2
 8017fce:	b29b      	uxth	r3, r3
 8017fd0:	45c1      	cmp	r9, r8
 8017fd2:	fa0f fe83 	sxth.w	lr, r3
 8017fd6:	fa1f fc89 	uxth.w	ip, r9
 8017fda:	db0f      	blt.n	8017ffc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 8017fdc:	eba3 030c 	sub.w	r3, r3, ip
 8017fe0:	1ac9      	subs	r1, r1, r3
 8017fe2:	b209      	sxth	r1, r1
 8017fe4:	2900      	cmp	r1, #0
 8017fe6:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8017fea:	dd12      	ble.n	8018012 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8017fec:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 8017ff0:	4604      	mov	r4, r0
 8017ff2:	9b04      	ldr	r3, [sp, #16]
 8017ff4:	3b01      	subs	r3, #1
 8017ff6:	9304      	str	r3, [sp, #16]
 8017ff8:	3d08      	subs	r5, #8
 8017ffa:	e7c4      	b.n	8017f86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 8017ffc:	4461      	add	r1, ip
 8017ffe:	b209      	sxth	r1, r1
 8018000:	4571      	cmp	r1, lr
 8018002:	dc3a      	bgt.n	801807a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8018004:	eba2 020c 	sub.w	r2, r2, ip
 8018008:	b212      	sxth	r2, r2
 801800a:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801800e:	2a00      	cmp	r2, #0
 8018010:	dcee      	bgt.n	8017ff0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8018012:	b00d      	add	sp, #52	; 0x34
 8018014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018018:	45c1      	cmp	r9, r8
 801801a:	db2e      	blt.n	801807a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801801c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8018020:	4499      	add	r9, r3
 8018022:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8018026:	4498      	add	r8, r3
 8018028:	fa0f f989 	sxth.w	r9, r9
 801802c:	fa0f f888 	sxth.w	r8, r8
 8018030:	45c1      	cmp	r9, r8
 8018032:	dc22      	bgt.n	801807a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8018034:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8018038:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801803c:	fa1f f28c 	uxth.w	r2, ip
 8018040:	4413      	add	r3, r2
 8018042:	b29b      	uxth	r3, r3
 8018044:	45e6      	cmp	lr, ip
 8018046:	fa1f f88e 	uxth.w	r8, lr
 801804a:	fa0f f983 	sxth.w	r9, r3
 801804e:	db0a      	blt.n	8018066 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 8018050:	eba3 0308 	sub.w	r3, r3, r8
 8018054:	1ac9      	subs	r1, r1, r3
 8018056:	b209      	sxth	r1, r1
 8018058:	2900      	cmp	r1, #0
 801805a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801805e:	ddd8      	ble.n	8018012 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8018060:	f8ad 9020 	strh.w	r9, [sp, #32]
 8018064:	e7c4      	b.n	8017ff0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8018066:	4441      	add	r1, r8
 8018068:	b209      	sxth	r1, r1
 801806a:	4549      	cmp	r1, r9
 801806c:	dc05      	bgt.n	801807a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801806e:	eba2 0208 	sub.w	r2, r2, r8
 8018072:	b212      	sxth	r2, r2
 8018074:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8018078:	e7c9      	b.n	801800e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801807a:	4606      	mov	r6, r0
 801807c:	e7b9      	b.n	8017ff2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801807e:	2c00      	cmp	r4, #0
 8018080:	f47f af7d 	bne.w	8017f7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8018084:	2e00      	cmp	r6, #0
 8018086:	f000 81dd 	beq.w	8018444 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 801808a:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801808e:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8018092:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8018096:	b2b9      	uxth	r1, r7
 8018098:	9104      	str	r1, [sp, #16]
 801809a:	9804      	ldr	r0, [sp, #16]
 801809c:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 80180a0:	4401      	add	r1, r0
 80180a2:	b2b3      	uxth	r3, r6
 80180a4:	b289      	uxth	r1, r1
 80180a6:	441a      	add	r2, r3
 80180a8:	9105      	str	r1, [sp, #20]
 80180aa:	b292      	uxth	r2, r2
 80180ac:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 80180b0:	fa0f f882 	sxth.w	r8, r2
 80180b4:	4655      	mov	r5, sl
 80180b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80180ba:	9b03      	ldr	r3, [sp, #12]
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d054      	beq.n	801816a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 80180c0:	9902      	ldr	r1, [sp, #8]
 80180c2:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 80180c6:	f7ff fe07 	bl	8017cd8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80180ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80180ce:	b1d8      	cbz	r0, 8018108 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80180d0:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 80180d4:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 80180d8:	4576      	cmp	r6, lr
 80180da:	dc26      	bgt.n	801812a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80180dc:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 80180e0:	44f4      	add	ip, lr
 80180e2:	fa0f fc8c 	sxth.w	ip, ip
 80180e6:	45e0      	cmp	r8, ip
 80180e8:	db1f      	blt.n	801812a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80180ea:	428f      	cmp	r7, r1
 80180ec:	fa1f fc81 	uxth.w	ip, r1
 80180f0:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 80180f4:	dc0f      	bgt.n	8018116 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 80180f6:	9805      	ldr	r0, [sp, #20]
 80180f8:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 80180fc:	eba0 0c0c 	sub.w	ip, r0, ip
 8018100:	eba1 010c 	sub.w	r1, r1, ip
 8018104:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8018108:	4620      	mov	r0, r4
 801810a:	9903      	ldr	r1, [sp, #12]
 801810c:	3901      	subs	r1, #1
 801810e:	9103      	str	r1, [sp, #12]
 8018110:	3d08      	subs	r5, #8
 8018112:	4604      	mov	r4, r0
 8018114:	e7cf      	b.n	80180b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 8018116:	4461      	add	r1, ip
 8018118:	b209      	sxth	r1, r1
 801811a:	4549      	cmp	r1, r9
 801811c:	dcf5      	bgt.n	801810a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801811e:	9904      	ldr	r1, [sp, #16]
 8018120:	eba1 0c0c 	sub.w	ip, r1, ip
 8018124:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8018128:	e7ee      	b.n	8018108 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801812a:	428f      	cmp	r7, r1
 801812c:	dced      	bgt.n	801810a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801812e:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8018132:	4461      	add	r1, ip
 8018134:	b209      	sxth	r1, r1
 8018136:	4589      	cmp	r9, r1
 8018138:	dbe7      	blt.n	801810a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801813a:	4576      	cmp	r6, lr
 801813c:	fa1f fc8e 	uxth.w	ip, lr
 8018140:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8018144:	dc08      	bgt.n	8018158 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 8018146:	eba2 0c0c 	sub.w	ip, r2, ip
 801814a:	eba1 010c 	sub.w	r1, r1, ip
 801814e:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8018152:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8018156:	e7d7      	b.n	8018108 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8018158:	4461      	add	r1, ip
 801815a:	b209      	sxth	r1, r1
 801815c:	4588      	cmp	r8, r1
 801815e:	dbd4      	blt.n	801810a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018160:	eba3 0c0c 	sub.w	ip, r3, ip
 8018164:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8018168:	e7ce      	b.n	8018108 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801816a:	2c00      	cmp	r4, #0
 801816c:	f000 816a 	beq.w	8018444 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 8018170:	9b00      	ldr	r3, [sp, #0]
 8018172:	3301      	adds	r3, #1
 8018174:	f000 8166 	beq.w	8018444 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 8018178:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801817c:	4621      	mov	r1, r4
 801817e:	9802      	ldr	r0, [sp, #8]
 8018180:	f7ff fdcc 	bl	8017d1c <_ZNK8touchgfx4Rect8includesERKS0_>
 8018184:	b120      	cbz	r0, 8018190 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 8018186:	f8bd 1000 	ldrh.w	r1, [sp]
 801818a:	9801      	ldr	r0, [sp, #4]
 801818c:	f7ff fe92 	bl	8017eb4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018190:	9902      	ldr	r1, [sp, #8]
 8018192:	4620      	mov	r0, r4
 8018194:	f7ff fda0 	bl	8017cd8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018198:	2800      	cmp	r0, #0
 801819a:	f000 809b 	beq.w	80182d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801819e:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80181a2:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 80181a6:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 80181aa:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 80181ae:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 80181b2:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 80181b6:	fa1f f288 	uxth.w	r2, r8
 80181ba:	19d5      	adds	r5, r2, r7
 80181bc:	fa1f f985 	uxth.w	r9, r5
 80181c0:	fa0f f589 	sxth.w	r5, r9
 80181c4:	b2a1      	uxth	r1, r4
 80181c6:	440b      	add	r3, r1
 80181c8:	9503      	str	r5, [sp, #12]
 80181ca:	45a0      	cmp	r8, r4
 80181cc:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 80181d0:	9507      	str	r5, [sp, #28]
 80181d2:	b29b      	uxth	r3, r3
 80181d4:	f340 809d 	ble.w	8018312 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 80181d8:	1a52      	subs	r2, r2, r1
 80181da:	b292      	uxth	r2, r2
 80181dc:	4584      	cmp	ip, r0
 80181de:	fa0f fe83 	sxth.w	lr, r3
 80181e2:	b215      	sxth	r5, r2
 80181e4:	dd2f      	ble.n	8018246 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 80181e6:	9e00      	ldr	r6, [sp, #0]
 80181e8:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 80181ec:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 80181f0:	9e03      	ldr	r6, [sp, #12]
 80181f2:	eba6 060e 	sub.w	r6, r6, lr
 80181f6:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 80181fa:	fa1f fc8c 	uxth.w	ip, ip
 80181fe:	b280      	uxth	r0, r0
 8018200:	ebac 0300 	sub.w	r3, ip, r0
 8018204:	448c      	add	ip, r1
 8018206:	4470      	add	r0, lr
 8018208:	b29b      	uxth	r3, r3
 801820a:	fa0f fc8c 	sxth.w	ip, ip
 801820e:	b200      	sxth	r0, r0
 8018210:	b21c      	sxth	r4, r3
 8018212:	ebac 0000 	sub.w	r0, ip, r0
 8018216:	4366      	muls	r6, r4
 8018218:	4368      	muls	r0, r5
 801821a:	4286      	cmp	r6, r0
 801821c:	db09      	blt.n	8018232 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801821e:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 8018222:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 8018226:	4417      	add	r7, r2
 8018228:	f8ad 3020 	strh.w	r3, [sp, #32]
 801822c:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8018230:	e685      	b.n	8017f3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8018232:	440b      	add	r3, r1
 8018234:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8018238:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801823c:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 8018240:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018244:	e67b      	b.n	8017f3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8018246:	9e03      	ldr	r6, [sp, #12]
 8018248:	45b6      	cmp	lr, r6
 801824a:	da28      	bge.n	801829e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801824c:	9b00      	ldr	r3, [sp, #0]
 801824e:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 8018252:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 8018256:	eb04 030c 	add.w	r3, r4, ip
 801825a:	fa1f f883 	uxth.w	r8, r3
 801825e:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 8018262:	4403      	add	r3, r0
 8018264:	eba3 0308 	sub.w	r3, r3, r8
 8018268:	b29b      	uxth	r3, r3
 801826a:	fa0f f988 	sxth.w	r9, r8
 801826e:	eba0 000c 	sub.w	r0, r0, ip
 8018272:	fa0f f883 	sxth.w	r8, r3
 8018276:	eba6 060e 	sub.w	r6, r6, lr
 801827a:	4368      	muls	r0, r5
 801827c:	fb08 f606 	mul.w	r6, r8, r6
 8018280:	42b0      	cmp	r0, r6
 8018282:	dc06      	bgt.n	8018292 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 8018284:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 8018288:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801828c:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 8018290:	e7c9      	b.n	8018226 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 8018292:	4423      	add	r3, r4
 8018294:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 8018298:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801829c:	e64f      	b.n	8017f3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801829e:	9807      	ldr	r0, [sp, #28]
 80182a0:	eba3 0309 	sub.w	r3, r3, r9
 80182a4:	b29b      	uxth	r3, r3
 80182a6:	2806      	cmp	r0, #6
 80182a8:	fa0f fc83 	sxth.w	ip, r3
 80182ac:	d818      	bhi.n	80182e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 80182ae:	4652      	mov	r2, sl
 80182b0:	ab0a      	add	r3, sp, #40	; 0x28
 80182b2:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 80182b6:	6851      	ldr	r1, [r2, #4]
 80182b8:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 80182bc:	c303      	stmia	r3!, {r0, r1}
 80182be:	9b03      	ldr	r3, [sp, #12]
 80182c0:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 80182c4:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 80182c8:	ab0a      	add	r3, sp, #40	; 0x28
 80182ca:	e893 0006 	ldmia.w	r3, {r1, r2}
 80182ce:	9801      	ldr	r0, [sp, #4]
 80182d0:	f7ff fe06 	bl	8017ee0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80182d4:	9b00      	ldr	r3, [sp, #0]
 80182d6:	3b01      	subs	r3, #1
 80182d8:	9300      	str	r3, [sp, #0]
 80182da:	f1aa 0a08 	sub.w	sl, sl, #8
 80182de:	e747      	b.n	8018170 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 80182e0:	9800      	ldr	r0, [sp, #0]
 80182e2:	45ac      	cmp	ip, r5
 80182e4:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 80182e8:	db0c      	blt.n	8018304 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 80182ea:	4417      	add	r7, r2
 80182ec:	b2bf      	uxth	r7, r7
 80182ee:	4458      	add	r0, fp
 80182f0:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 80182f4:	440f      	add	r7, r1
 80182f6:	f8ad 4020 	strh.w	r4, [sp, #32]
 80182fa:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 80182fe:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 8018302:	e61c      	b.n	8017f3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8018304:	4458      	add	r0, fp
 8018306:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 801830a:	443b      	add	r3, r7
 801830c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8018310:	e615      	b.n	8017f3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8018312:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 8018316:	fa1f f18c 	uxth.w	r1, ip
 801831a:	eb01 0e05 	add.w	lr, r1, r5
 801831e:	b282      	uxth	r2, r0
 8018320:	fa1f fe8e 	uxth.w	lr, lr
 8018324:	9204      	str	r2, [sp, #16]
 8018326:	fa0f f28e 	sxth.w	r2, lr
 801832a:	9205      	str	r2, [sp, #20]
 801832c:	9e04      	ldr	r6, [sp, #16]
 801832e:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 8018332:	4432      	add	r2, r6
 8018334:	b292      	uxth	r2, r2
 8018336:	4584      	cmp	ip, r0
 8018338:	9206      	str	r2, [sp, #24]
 801833a:	da26      	bge.n	801838a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801833c:	eba3 0309 	sub.w	r3, r3, r9
 8018340:	eba2 020e 	sub.w	r2, r2, lr
 8018344:	b29b      	uxth	r3, r3
 8018346:	b292      	uxth	r2, r2
 8018348:	fa0f fa83 	sxth.w	sl, r3
 801834c:	b211      	sxth	r1, r2
 801834e:	eba0 000c 	sub.w	r0, r0, ip
 8018352:	eba4 0408 	sub.w	r4, r4, r8
 8018356:	fb0a f000 	mul.w	r0, sl, r0
 801835a:	434c      	muls	r4, r1
 801835c:	42a0      	cmp	r0, r4
 801835e:	9800      	ldr	r0, [sp, #0]
 8018360:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8018364:	dc06      	bgt.n	8018374 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 8018366:	4458      	add	r0, fp
 8018368:	9a05      	ldr	r2, [sp, #20]
 801836a:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801836e:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8018372:	e7ca      	b.n	801830a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8018374:	eb0b 0300 	add.w	r3, fp, r0
 8018378:	9903      	ldr	r1, [sp, #12]
 801837a:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801837e:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 8018382:	442a      	add	r2, r5
 8018384:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8018388:	e5d9      	b.n	8017f3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801838a:	9e04      	ldr	r6, [sp, #16]
 801838c:	9a03      	ldr	r2, [sp, #12]
 801838e:	1b89      	subs	r1, r1, r6
 8018390:	b21e      	sxth	r6, r3
 8018392:	b289      	uxth	r1, r1
 8018394:	4296      	cmp	r6, r2
 8018396:	fa0f fc81 	sxth.w	ip, r1
 801839a:	dd26      	ble.n	80183ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c6>
 801839c:	eba3 0309 	sub.w	r3, r3, r9
 80183a0:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 80183a4:	9e05      	ldr	r6, [sp, #20]
 80183a6:	b29b      	uxth	r3, r3
 80183a8:	eba6 0902 	sub.w	r9, r6, r2
 80183ac:	b218      	sxth	r0, r3
 80183ae:	eba4 0408 	sub.w	r4, r4, r8
 80183b2:	fb0c f404 	mul.w	r4, ip, r4
 80183b6:	fb00 f909 	mul.w	r9, r0, r9
 80183ba:	9a00      	ldr	r2, [sp, #0]
 80183bc:	454c      	cmp	r4, r9
 80183be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80183c2:	db03      	blt.n	80183cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a8>
 80183c4:	445a      	add	r2, fp
 80183c6:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 80183ca:	e79e      	b.n	801830a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 80183cc:	eb0b 0302 	add.w	r3, fp, r2
 80183d0:	9a03      	ldr	r2, [sp, #12]
 80183d2:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 80183d6:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 80183da:	4429      	add	r1, r5
 80183dc:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80183e0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80183e4:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 80183e8:	e5a9      	b.n	8017f3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80183ea:	9b06      	ldr	r3, [sp, #24]
 80183ec:	9c07      	ldr	r4, [sp, #28]
 80183ee:	eba3 020e 	sub.w	r2, r3, lr
 80183f2:	b292      	uxth	r2, r2
 80183f4:	2c06      	cmp	r4, #6
 80183f6:	b213      	sxth	r3, r2
 80183f8:	d80d      	bhi.n	8018416 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f2>
 80183fa:	4651      	mov	r1, sl
 80183fc:	aa0a      	add	r2, sp, #40	; 0x28
 80183fe:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 8018402:	6849      	ldr	r1, [r1, #4]
 8018404:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 8018408:	9b05      	ldr	r3, [sp, #20]
 801840a:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801840e:	c203      	stmia	r2!, {r0, r1}
 8018410:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 8018414:	e758      	b.n	80182c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 8018416:	9c00      	ldr	r4, [sp, #0]
 8018418:	4563      	cmp	r3, ip
 801841a:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801841e:	db0d      	blt.n	801843c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x518>
 8018420:	4429      	add	r1, r5
 8018422:	9a04      	ldr	r2, [sp, #16]
 8018424:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8018428:	b289      	uxth	r1, r1
 801842a:	445c      	add	r4, fp
 801842c:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8018430:	4411      	add	r1, r2
 8018432:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 8018436:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801843a:	e580      	b.n	8017f3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801843c:	445c      	add	r4, fp
 801843e:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 8018442:	e79e      	b.n	8018382 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 8018444:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8018448:	2f07      	cmp	r7, #7
 801844a:	d806      	bhi.n	801845a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x536>
 801844c:	ab08      	add	r3, sp, #32
 801844e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8018452:	9801      	ldr	r0, [sp, #4]
 8018454:	f7ff fd44 	bl	8017ee0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8018458:	e5db      	b.n	8018012 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801845a:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801845e:	f107 39ff 	add.w	r9, r7, #4294967295
 8018462:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8018466:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 801846a:	f04f 35ff 	mov.w	r5, #4294967295
 801846e:	2400      	movs	r4, #0
 8018470:	9304      	str	r3, [sp, #16]
 8018472:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8018476:	9300      	str	r3, [sp, #0]
 8018478:	f109 32ff 	add.w	r2, r9, #4294967295
 801847c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8018480:	9303      	str	r3, [sp, #12]
 8018482:	4690      	mov	r8, r2
 8018484:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8018488:	f1b8 3fff 	cmp.w	r8, #4294967295
 801848c:	bf14      	ite	ne
 801848e:	9904      	ldrne	r1, [sp, #16]
 8018490:	f8dd e008 	ldreq.w	lr, [sp, #8]
 8018494:	6818      	ldr	r0, [r3, #0]
 8018496:	9206      	str	r2, [sp, #24]
 8018498:	bf18      	it	ne
 801849a:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801849e:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 80184a2:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80184a6:	f8be 6004 	ldrh.w	r6, [lr, #4]
 80184aa:	9305      	str	r3, [sp, #20]
 80184ac:	fb16 f601 	smulbb	r6, r6, r1
 80184b0:	6859      	ldr	r1, [r3, #4]
 80184b2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80184b6:	4671      	mov	r1, lr
 80184b8:	a80a      	add	r0, sp, #40	; 0x28
 80184ba:	f7ff fc51 	bl	8017d60 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80184be:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 80184c2:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80184c6:	9b03      	ldr	r3, [sp, #12]
 80184c8:	9a00      	ldr	r2, [sp, #0]
 80184ca:	fb11 f100 	smulbb	r1, r1, r0
 80184ce:	fb02 6603 	mla	r6, r2, r3, r6
 80184d2:	1b8e      	subs	r6, r1, r6
 80184d4:	2008      	movs	r0, #8
 80184d6:	fb91 f1f0 	sdiv	r1, r1, r0
 80184da:	42b1      	cmp	r1, r6
 80184dc:	dc21      	bgt.n	8018522 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 80184de:	4556      	cmp	r6, sl
 80184e0:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 80184e4:	da03      	bge.n	80184ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 80184e6:	b1e6      	cbz	r6, 8018522 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 80184e8:	46b2      	mov	sl, r6
 80184ea:	4645      	mov	r5, r8
 80184ec:	464c      	mov	r4, r9
 80184ee:	f108 38ff 	add.w	r8, r8, #4294967295
 80184f2:	f118 0f02 	cmn.w	r8, #2
 80184f6:	d1c7      	bne.n	8018488 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x564>
 80184f8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80184fc:	f1a7 0708 	sub.w	r7, r7, #8
 8018500:	4691      	mov	r9, r2
 8018502:	d1b6      	bne.n	8018472 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54e>
 8018504:	9b01      	ldr	r3, [sp, #4]
 8018506:	b2a6      	uxth	r6, r4
 8018508:	00e4      	lsls	r4, r4, #3
 801850a:	1918      	adds	r0, r3, r4
 801850c:	1c6b      	adds	r3, r5, #1
 801850e:	d10b      	bne.n	8018528 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x604>
 8018510:	4601      	mov	r1, r0
 8018512:	9802      	ldr	r0, [sp, #8]
 8018514:	f7ff fc24 	bl	8017d60 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018518:	4631      	mov	r1, r6
 801851a:	9801      	ldr	r0, [sp, #4]
 801851c:	f7ff fcca 	bl	8017eb4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018520:	e50d      	b.n	8017f3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8018522:	4645      	mov	r5, r8
 8018524:	464c      	mov	r4, r9
 8018526:	e7ed      	b.n	8018504 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e0>
 8018528:	9b01      	ldr	r3, [sp, #4]
 801852a:	00ed      	lsls	r5, r5, #3
 801852c:	1959      	adds	r1, r3, r5
 801852e:	f7ff fc17 	bl	8017d60 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018532:	9b02      	ldr	r3, [sp, #8]
 8018534:	cb03      	ldmia	r3!, {r0, r1}
 8018536:	445d      	add	r5, fp
 8018538:	445c      	add	r4, fp
 801853a:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 801853e:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 8018542:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 8018546:	9b02      	ldr	r3, [sp, #8]
 8018548:	6861      	ldr	r1, [r4, #4]
 801854a:	c303      	stmia	r3!, {r0, r1}
 801854c:	e7e4      	b.n	8018518 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f4>
	...

08018550 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8018550:	b530      	push	{r4, r5, lr}
 8018552:	4b1d      	ldr	r3, [pc, #116]	; (80185c8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8018554:	b085      	sub	sp, #20
 8018556:	460c      	mov	r4, r1
 8018558:	f9b3 2000 	ldrsh.w	r2, [r3]
 801855c:	4b1b      	ldr	r3, [pc, #108]	; (80185cc <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801855e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018562:	2100      	movs	r1, #0
 8018564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018568:	9100      	str	r1, [sp, #0]
 801856a:	4605      	mov	r5, r0
 801856c:	6861      	ldr	r1, [r4, #4]
 801856e:	6820      	ldr	r0, [r4, #0]
 8018570:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018574:	ab02      	add	r3, sp, #8
 8018576:	c303      	stmia	r3!, {r0, r1}
 8018578:	4669      	mov	r1, sp
 801857a:	a802      	add	r0, sp, #8
 801857c:	f7fc fbac 	bl	8014cd8 <_ZN8touchgfx4RectaNERKS0_>
 8018580:	ab02      	add	r3, sp, #8
 8018582:	cb03      	ldmia	r3!, {r0, r1}
 8018584:	4b12      	ldr	r3, [pc, #72]	; (80185d0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8018586:	6020      	str	r0, [r4, #0]
 8018588:	6818      	ldr	r0, [r3, #0]
 801858a:	6061      	str	r1, [r4, #4]
 801858c:	b138      	cbz	r0, 801859e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801858e:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 8018592:	b133      	cbz	r3, 80185a2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8018594:	6821      	ldr	r1, [r4, #0]
 8018596:	6862      	ldr	r2, [r4, #4]
 8018598:	4628      	mov	r0, r5
 801859a:	f7ff fcc3 	bl	8017f24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801859e:	b005      	add	sp, #20
 80185a0:	bd30      	pop	{r4, r5, pc}
 80185a2:	6803      	ldr	r3, [r0, #0]
 80185a4:	4621      	mov	r1, r4
 80185a6:	689b      	ldr	r3, [r3, #8]
 80185a8:	4798      	blx	r3
 80185aa:	4b0a      	ldr	r3, [pc, #40]	; (80185d4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 80185ac:	6818      	ldr	r0, [r3, #0]
 80185ae:	b118      	cbz	r0, 80185b8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 80185b0:	6803      	ldr	r3, [r0, #0]
 80185b2:	4621      	mov	r1, r4
 80185b4:	689b      	ldr	r3, [r3, #8]
 80185b6:	4798      	blx	r3
 80185b8:	4b07      	ldr	r3, [pc, #28]	; (80185d8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 80185ba:	6818      	ldr	r0, [r3, #0]
 80185bc:	6803      	ldr	r3, [r0, #0]
 80185be:	4621      	mov	r1, r4
 80185c0:	695b      	ldr	r3, [r3, #20]
 80185c2:	4798      	blx	r3
 80185c4:	e7eb      	b.n	801859e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80185c6:	bf00      	nop
 80185c8:	2000a0e4 	.word	0x2000a0e4
 80185cc:	2000a0e6 	.word	0x2000a0e6
 80185d0:	2000a12c 	.word	0x2000a12c
 80185d4:	2000a128 	.word	0x2000a128
 80185d8:	2000a0f0 	.word	0x2000a0f0

080185dc <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 80185dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185e0:	4604      	mov	r4, r0
 80185e2:	b09b      	sub	sp, #108	; 0x6c
 80185e4:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 80185e8:	b129      	cbz	r1, 80185f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 80185ea:	2300      	movs	r3, #0
 80185ec:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 80185f0:	b01b      	add	sp, #108	; 0x6c
 80185f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185f6:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 80185fa:	4630      	mov	r0, r6
 80185fc:	f7fc fbaf 	bl	8014d5e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018600:	4605      	mov	r5, r0
 8018602:	b940      	cbnz	r0, 8018616 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 8018604:	e896 0006 	ldmia.w	r6, {r1, r2}
 8018608:	4620      	mov	r0, r4
 801860a:	f7ff fc8b 	bl	8017f24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801860e:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8018612:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8018616:	4ba6      	ldr	r3, [pc, #664]	; (80188b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 8018618:	681b      	ldr	r3, [r3, #0]
 801861a:	b33b      	cbz	r3, 801866c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801861c:	4da5      	ldr	r5, [pc, #660]	; (80188b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801861e:	4628      	mov	r0, r5
 8018620:	f7fc fb9d 	bl	8014d5e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018624:	4606      	mov	r6, r0
 8018626:	bb08      	cbnz	r0, 801866c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 8018628:	4628      	mov	r0, r5
 801862a:	f7ff f9fb 	bl	8017a24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801862e:	6829      	ldr	r1, [r5, #0]
 8018630:	686a      	ldr	r2, [r5, #4]
 8018632:	4620      	mov	r0, r4
 8018634:	f7ff fc76 	bl	8017f24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018638:	802e      	strh	r6, [r5, #0]
 801863a:	806e      	strh	r6, [r5, #2]
 801863c:	80ae      	strh	r6, [r5, #4]
 801863e:	80ee      	strh	r6, [r5, #6]
 8018640:	4f9d      	ldr	r7, [pc, #628]	; (80188b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 8018642:	a809      	add	r0, sp, #36	; 0x24
 8018644:	f7ff fbe3 	bl	8017e0e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018648:	883d      	ldrh	r5, [r7, #0]
 801864a:	462e      	mov	r6, r5
 801864c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018650:	42b3      	cmp	r3, r6
 8018652:	d910      	bls.n	8018676 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 8018654:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8018658:	a809      	add	r0, sp, #36	; 0x24
 801865a:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801865e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8018662:	3601      	adds	r6, #1
 8018664:	f7ff fc3c 	bl	8017ee0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8018668:	b2b6      	uxth	r6, r6
 801866a:	e7ef      	b.n	801864c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801866c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018670:	2b00      	cmp	r3, #0
 8018672:	d1e5      	bne.n	8018640 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 8018674:	e7bc      	b.n	80185f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8018676:	462e      	mov	r6, r5
 8018678:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801867c:	42b3      	cmp	r3, r6
 801867e:	d90b      	bls.n	8018698 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 8018680:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8018684:	4620      	mov	r0, r4
 8018686:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801868a:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801868e:	3601      	adds	r6, #1
 8018690:	f7ff fc48 	bl	8017f24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018694:	b2b6      	uxth	r6, r6
 8018696:	e7ef      	b.n	8018678 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8018698:	4a88      	ldr	r2, [pc, #544]	; (80188bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801869a:	6813      	ldr	r3, [r2, #0]
 801869c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80186a0:	2b01      	cmp	r3, #1
 80186a2:	4690      	mov	r8, r2
 80186a4:	f040 8093 	bne.w	80187ce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f2>
 80186a8:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80186ac:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 80186b0:	33aa      	adds	r3, #170	; 0xaa
 80186b2:	f04f 0900 	mov.w	r9, #0
 80186b6:	42a8      	cmp	r0, r5
 80186b8:	f103 0308 	add.w	r3, r3, #8
 80186bc:	dd0a      	ble.n	80186d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 80186be:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80186c2:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 80186c6:	440a      	add	r2, r1
 80186c8:	b212      	sxth	r2, r2
 80186ca:	4591      	cmp	r9, r2
 80186cc:	bfb8      	it	lt
 80186ce:	4691      	movlt	r9, r2
 80186d0:	3501      	adds	r5, #1
 80186d2:	e7f0      	b.n	80186b6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 80186d4:	4b7a      	ldr	r3, [pc, #488]	; (80188c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 80186d6:	4e7b      	ldr	r6, [pc, #492]	; (80188c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 80186d8:	881d      	ldrh	r5, [r3, #0]
 80186da:	2300      	movs	r3, #0
 80186dc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80186e0:	2d0f      	cmp	r5, #15
 80186e2:	bf8c      	ite	hi
 80186e4:	08ed      	lsrhi	r5, r5, #3
 80186e6:	2501      	movls	r5, #1
 80186e8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80186ec:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 80186f0:	f8d8 0000 	ldr.w	r0, [r8]
 80186f4:	440b      	add	r3, r1
 80186f6:	b21b      	sxth	r3, r3
 80186f8:	4599      	cmp	r9, r3
 80186fa:	6802      	ldr	r2, [r0, #0]
 80186fc:	dd4a      	ble.n	8018794 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 80186fe:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8018702:	4798      	blx	r3
 8018704:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8018708:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801870c:	4413      	add	r3, r2
 801870e:	b21b      	sxth	r3, r3
 8018710:	195a      	adds	r2, r3, r5
 8018712:	4290      	cmp	r0, r2
 8018714:	da07      	bge.n	8018726 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 8018716:	4581      	cmp	r9, r0
 8018718:	dd05      	ble.n	8018726 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801871a:	4298      	cmp	r0, r3
 801871c:	da33      	bge.n	8018786 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801871e:	2b00      	cmp	r3, #0
 8018720:	dd31      	ble.n	8018786 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 8018722:	4648      	mov	r0, r9
 8018724:	e004      	b.n	8018730 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 8018726:	4298      	cmp	r0, r3
 8018728:	dbfb      	blt.n	8018722 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801872a:	4548      	cmp	r0, r9
 801872c:	bfa8      	it	ge
 801872e:	4648      	movge	r0, r9
 8018730:	f9b6 2000 	ldrsh.w	r2, [r6]
 8018734:	f8b7 a000 	ldrh.w	sl, [r7]
 8018738:	f8ad 3016 	strh.w	r3, [sp, #22]
 801873c:	2100      	movs	r1, #0
 801873e:	1ac0      	subs	r0, r0, r3
 8018740:	f8ad 1014 	strh.w	r1, [sp, #20]
 8018744:	f8ad 2018 	strh.w	r2, [sp, #24]
 8018748:	f8ad 001a 	strh.w	r0, [sp, #26]
 801874c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018750:	4553      	cmp	r3, sl
 8018752:	d9c9      	bls.n	80186e8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8018754:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8018758:	ab07      	add	r3, sp, #28
 801875a:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801875e:	6851      	ldr	r1, [r2, #4]
 8018760:	c303      	stmia	r3!, {r0, r1}
 8018762:	a807      	add	r0, sp, #28
 8018764:	a905      	add	r1, sp, #20
 8018766:	f7fc fab7 	bl	8014cd8 <_ZN8touchgfx4RectaNERKS0_>
 801876a:	a807      	add	r0, sp, #28
 801876c:	f7fc faf7 	bl	8014d5e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018770:	b920      	cbnz	r0, 801877c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 8018772:	6823      	ldr	r3, [r4, #0]
 8018774:	a907      	add	r1, sp, #28
 8018776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018778:	4620      	mov	r0, r4
 801877a:	4798      	blx	r3
 801877c:	f10a 0a01 	add.w	sl, sl, #1
 8018780:	fa1f fa8a 	uxth.w	sl, sl
 8018784:	e7e2      	b.n	801874c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 8018786:	f8d8 0000 	ldr.w	r0, [r8]
 801878a:	6803      	ldr	r3, [r0, #0]
 801878c:	2101      	movs	r1, #1
 801878e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018790:	4798      	blx	r3
 8018792:	e7a9      	b.n	80186e8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 8018794:	69d3      	ldr	r3, [r2, #28]
 8018796:	4798      	blx	r3
 8018798:	4b4b      	ldr	r3, [pc, #300]	; (80188c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801879a:	781b      	ldrb	r3, [r3, #0]
 801879c:	2b00      	cmp	r3, #0
 801879e:	f43f af27 	beq.w	80185f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80187a2:	2300      	movs	r3, #0
 80187a4:	883d      	ldrh	r5, [r7, #0]
 80187a6:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 80187aa:	34ea      	adds	r4, #234	; 0xea
 80187ac:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 80187b0:	42ab      	cmp	r3, r5
 80187b2:	f67f af1d 	bls.w	80185f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80187b6:	ab1a      	add	r3, sp, #104	; 0x68
 80187b8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80187bc:	3b44      	subs	r3, #68	; 0x44
 80187be:	e893 0006 	ldmia.w	r3, {r1, r2}
 80187c2:	4620      	mov	r0, r4
 80187c4:	3501      	adds	r5, #1
 80187c6:	f7ff fb8b 	bl	8017ee0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80187ca:	b2ad      	uxth	r5, r5
 80187cc:	e7ee      	b.n	80187ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d0>
 80187ce:	2b02      	cmp	r3, #2
 80187d0:	f040 813c 	bne.w	8018a4c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x470>
 80187d4:	4b3d      	ldr	r3, [pc, #244]	; (80188cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 80187d6:	781b      	ldrb	r3, [r3, #0]
 80187d8:	2b01      	cmp	r3, #1
 80187da:	d02c      	beq.n	8018836 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25a>
 80187dc:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 80187e0:	883a      	ldrh	r2, [r7, #0]
 80187e2:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 80187e6:	3201      	adds	r2, #1
 80187e8:	b292      	uxth	r2, r2
 80187ea:	2900      	cmp	r1, #0
 80187ec:	d0d4      	beq.n	8018798 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 80187ee:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 80187f2:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 80187f6:	441d      	add	r5, r3
 80187f8:	b22d      	sxth	r5, r5
 80187fa:	4610      	mov	r0, r2
 80187fc:	f04f 0a00 	mov.w	sl, #0
 8018800:	b283      	uxth	r3, r0
 8018802:	4299      	cmp	r1, r3
 8018804:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 8018808:	f240 80c4 	bls.w	8018994 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 801880c:	4426      	add	r6, r4
 801880e:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 8018812:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 8018816:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801881a:	4573      	cmp	r3, lr
 801881c:	4684      	mov	ip, r0
 801881e:	f340 80a6 	ble.w	801896e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 8018822:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 8018826:	4475      	add	r5, lr
 8018828:	b22d      	sxth	r5, r5
 801882a:	429d      	cmp	r5, r3
 801882c:	bfa8      	it	ge
 801882e:	461d      	movge	r5, r3
 8018830:	3001      	adds	r0, #1
 8018832:	46e2      	mov	sl, ip
 8018834:	e7e4      	b.n	8018800 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x224>
 8018836:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801883a:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801883e:	f1bb 0f00 	cmp.w	fp, #0
 8018842:	d0a9      	beq.n	8018798 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 8018844:	883b      	ldrh	r3, [r7, #0]
 8018846:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801884a:	3301      	adds	r3, #1
 801884c:	b29b      	uxth	r3, r3
 801884e:	2600      	movs	r6, #0
 8018850:	b299      	uxth	r1, r3
 8018852:	458b      	cmp	fp, r1
 8018854:	ea4f 05c6 	mov.w	r5, r6, lsl #3
 8018858:	d93a      	bls.n	80188d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801885a:	4425      	add	r5, r4
 801885c:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8018860:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8018864:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8018868:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801886c:	4408      	add	r0, r1
 801886e:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8018872:	4471      	add	r1, lr
 8018874:	b200      	sxth	r0, r0
 8018876:	b209      	sxth	r1, r1
 8018878:	4288      	cmp	r0, r1
 801887a:	469c      	mov	ip, r3
 801887c:	da06      	bge.n	801888c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 801887e:	4586      	cmp	lr, r0
 8018880:	4672      	mov	r2, lr
 8018882:	bfb8      	it	lt
 8018884:	4602      	movlt	r2, r0
 8018886:	3301      	adds	r3, #1
 8018888:	4666      	mov	r6, ip
 801888a:	e7e1      	b.n	8018850 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x274>
 801888c:	d10b      	bne.n	80188a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 801888e:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 8018892:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8018896:	458c      	cmp	ip, r1
 8018898:	bfb4      	ite	lt
 801889a:	469c      	movlt	ip, r3
 801889c:	46b4      	movge	ip, r6
 801889e:	4572      	cmp	r2, lr
 80188a0:	bfb8      	it	lt
 80188a2:	4672      	movlt	r2, lr
 80188a4:	e7ef      	b.n	8018886 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 80188a6:	428a      	cmp	r2, r1
 80188a8:	bfb8      	it	lt
 80188aa:	460a      	movlt	r2, r1
 80188ac:	46b4      	mov	ip, r6
 80188ae:	e7ea      	b.n	8018886 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 80188b0:	2000a128 	.word	0x2000a128
 80188b4:	2000a134 	.word	0x2000a134
 80188b8:	2000012c 	.word	0x2000012c
 80188bc:	2000a0f0 	.word	0x2000a0f0
 80188c0:	2000a0e6 	.word	0x2000a0e6
 80188c4:	2000a0e4 	.word	0x2000a0e4
 80188c8:	2000a0ee 	.word	0x2000a0ee
 80188cc:	2000a0e8 	.word	0x2000a0e8
 80188d0:	1961      	adds	r1, r4, r5
 80188d2:	ab07      	add	r3, sp, #28
 80188d4:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 80188d8:	6849      	ldr	r1, [r1, #4]
 80188da:	c303      	stmia	r3!, {r0, r1}
 80188dc:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80188e0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80188e4:	2b13      	cmp	r3, #19
 80188e6:	bfd8      	it	le
 80188e8:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 80188ec:	f8ad 201c 	strh.w	r2, [sp, #28]
 80188f0:	440b      	add	r3, r1
 80188f2:	1a9b      	subs	r3, r3, r2
 80188f4:	a807      	add	r0, sp, #28
 80188f6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80188fa:	f7ff f8ed 	bl	8017ad8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80188fe:	a807      	add	r0, sp, #28
 8018900:	f7fc fa2d 	bl	8014d5e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018904:	2800      	cmp	r0, #0
 8018906:	d198      	bne.n	801883a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 8018908:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801890c:	f8d8 0000 	ldr.w	r0, [r8]
 8018910:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8018914:	f8d0 e000 	ldr.w	lr, [r0]
 8018918:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801891c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018920:	f1bc 0f14 	cmp.w	ip, #20
 8018924:	bfa8      	it	ge
 8018926:	f04f 0c14 	movge.w	ip, #20
 801892a:	fa1f fc8c 	uxth.w	ip, ip
 801892e:	f8cd c000 	str.w	ip, [sp]
 8018932:	f8de a074 	ldr.w	sl, [lr, #116]	; 0x74
 8018936:	47d0      	blx	sl
 8018938:	4682      	mov	sl, r0
 801893a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801893e:	a807      	add	r0, sp, #28
 8018940:	f7ff f870 	bl	8017a24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8018944:	6823      	ldr	r3, [r4, #0]
 8018946:	4425      	add	r5, r4
 8018948:	4620      	mov	r0, r4
 801894a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801894c:	a907      	add	r1, sp, #28
 801894e:	4798      	blx	r3
 8018950:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8018954:	eba0 000a 	sub.w	r0, r0, sl
 8018958:	b200      	sxth	r0, r0
 801895a:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801895e:	2800      	cmp	r0, #0
 8018960:	f47f af6b 	bne.w	801883a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 8018964:	b2b1      	uxth	r1, r6
 8018966:	4648      	mov	r0, r9
 8018968:	f7ff faa4 	bl	8017eb4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801896c:	e765      	b.n	801883a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 801896e:	d10c      	bne.n	801898a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 8018970:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 8018974:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 8018978:	45b4      	cmp	ip, r6
 801897a:	bfb4      	ite	lt
 801897c:	4684      	movlt	ip, r0
 801897e:	46d4      	movge	ip, sl
 8018980:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 8018984:	4433      	add	r3, r6
 8018986:	b21b      	sxth	r3, r3
 8018988:	e74f      	b.n	801882a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x24e>
 801898a:	4575      	cmp	r5, lr
 801898c:	bfa8      	it	ge
 801898e:	4675      	movge	r5, lr
 8018990:	46d4      	mov	ip, sl
 8018992:	e74d      	b.n	8018830 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x254>
 8018994:	eb0b 0006 	add.w	r0, fp, r6
 8018998:	4426      	add	r6, r4
 801899a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801899e:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 80189a2:	f1b9 0f13 	cmp.w	r9, #19
 80189a6:	bfde      	ittt	le
 80189a8:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 80189ac:	444d      	addle	r5, r9
 80189ae:	b22d      	sxthle	r5, r5
 80189b0:	f7fc f9d5 	bl	8014d5e <_ZNK8touchgfx4Rect7isEmptyEv>
 80189b4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80189b8:	2800      	cmp	r0, #0
 80189ba:	f47f af16 	bne.w	80187ea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x20e>
 80189be:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 80189c2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80189c6:	eba5 050c 	sub.w	r5, r5, ip
 80189ca:	fa1f f28c 	uxth.w	r2, ip
 80189ce:	fa1f f989 	uxth.w	r9, r9
 80189d2:	eb02 0009 	add.w	r0, r2, r9
 80189d6:	2d14      	cmp	r5, #20
 80189d8:	bfa8      	it	ge
 80189da:	2514      	movge	r5, #20
 80189dc:	b200      	sxth	r0, r0
 80189de:	fa1f fe85 	uxth.w	lr, r5
 80189e2:	eba0 000c 	sub.w	r0, r0, ip
 80189e6:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 80189ea:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 80189ee:	f8ad 101c 	strh.w	r1, [sp, #28]
 80189f2:	4586      	cmp	lr, r0
 80189f4:	f8d8 0000 	ldr.w	r0, [r8]
 80189f8:	f8ad c01e 	strh.w	ip, [sp, #30]
 80189fc:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018a00:	bfb8      	it	lt
 8018a02:	46f1      	movlt	r9, lr
 8018a04:	6805      	ldr	r5, [r0, #0]
 8018a06:	f8cd 9000 	str.w	r9, [sp]
 8018a0a:	b29b      	uxth	r3, r3
 8018a0c:	b289      	uxth	r1, r1
 8018a0e:	6f6d      	ldr	r5, [r5, #116]	; 0x74
 8018a10:	47a8      	blx	r5
 8018a12:	6823      	ldr	r3, [r4, #0]
 8018a14:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8018a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018a1a:	a907      	add	r1, sp, #28
 8018a1c:	4620      	mov	r0, r4
 8018a1e:	4798      	blx	r3
 8018a20:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8018a24:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 8018a28:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 8018a2c:	1a5b      	subs	r3, r3, r1
 8018a2e:	440a      	add	r2, r1
 8018a30:	b21b      	sxth	r3, r3
 8018a32:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 8018a36:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	f47f aed0 	bne.w	80187e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x204>
 8018a40:	fa1f f18a 	uxth.w	r1, sl
 8018a44:	4658      	mov	r0, fp
 8018a46:	f7ff fa35 	bl	8017eb4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018a4a:	e6c9      	b.n	80187e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x204>
 8018a4c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018a50:	42ab      	cmp	r3, r5
 8018a52:	f67f aea1 	bls.w	8018798 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 8018a56:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8018a5a:	ab07      	add	r3, sp, #28
 8018a5c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018a60:	6851      	ldr	r1, [r2, #4]
 8018a62:	c303      	stmia	r3!, {r0, r1}
 8018a64:	a807      	add	r0, sp, #28
 8018a66:	f7fc f97a 	bl	8014d5e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018a6a:	b920      	cbnz	r0, 8018a76 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49a>
 8018a6c:	6823      	ldr	r3, [r4, #0]
 8018a6e:	a907      	add	r1, sp, #28
 8018a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018a72:	4620      	mov	r0, r4
 8018a74:	4798      	blx	r3
 8018a76:	3501      	adds	r5, #1
 8018a78:	b2ad      	uxth	r5, r5
 8018a7a:	e7e7      	b.n	8018a4c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x470>

08018a7c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8018a7c:	4b03      	ldr	r3, [pc, #12]	; (8018a8c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8018a7e:	2200      	movs	r2, #0
 8018a80:	801a      	strh	r2, [r3, #0]
 8018a82:	805a      	strh	r2, [r3, #2]
 8018a84:	809a      	strh	r2, [r3, #4]
 8018a86:	80da      	strh	r2, [r3, #6]
 8018a88:	4770      	bx	lr
 8018a8a:	bf00      	nop
 8018a8c:	2000a134 	.word	0x2000a134

08018a90 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8018a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a94:	4607      	mov	r7, r0
 8018a96:	b099      	sub	sp, #100	; 0x64
 8018a98:	a802      	add	r0, sp, #8
 8018a9a:	4614      	mov	r4, r2
 8018a9c:	461d      	mov	r5, r3
 8018a9e:	468a      	mov	sl, r1
 8018aa0:	f000 fdc1 	bl	8019626 <_ZN8touchgfx12TextProviderC1Ev>
 8018aa4:	683b      	ldr	r3, [r7, #0]
 8018aa6:	4638      	mov	r0, r7
 8018aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018aaa:	4798      	blx	r3
 8018aac:	462a      	mov	r2, r5
 8018aae:	4603      	mov	r3, r0
 8018ab0:	4621      	mov	r1, r4
 8018ab2:	a802      	add	r0, sp, #8
 8018ab4:	f000 fdfc 	bl	80196b0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018ab8:	2500      	movs	r5, #0
 8018aba:	462c      	mov	r4, r5
 8018abc:	46a9      	mov	r9, r5
 8018abe:	46a8      	mov	r8, r5
 8018ac0:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8018ac4:	2300      	movs	r3, #0
 8018ac6:	9301      	str	r3, [sp, #4]
 8018ac8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018acc:	429c      	cmp	r4, r3
 8018ace:	d002      	beq.n	8018ad6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 8018ad0:	455c      	cmp	r4, fp
 8018ad2:	bf18      	it	ne
 8018ad4:	4625      	movne	r5, r4
 8018ad6:	ab01      	add	r3, sp, #4
 8018ad8:	463a      	mov	r2, r7
 8018ada:	4651      	mov	r1, sl
 8018adc:	a802      	add	r0, sp, #8
 8018ade:	f001 f8e1 	bl	8019ca4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018ae2:	4604      	mov	r4, r0
 8018ae4:	b108      	cbz	r0, 8018aea <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 8018ae6:	280a      	cmp	r0, #10
 8018ae8:	d10a      	bne.n	8018b00 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 8018aea:	45c1      	cmp	r9, r8
 8018aec:	bf38      	it	cc
 8018aee:	46c1      	movcc	r9, r8
 8018af0:	f04f 0800 	mov.w	r8, #0
 8018af4:	2c00      	cmp	r4, #0
 8018af6:	d1e5      	bne.n	8018ac4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8018af8:	4648      	mov	r0, r9
 8018afa:	b019      	add	sp, #100	; 0x64
 8018afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b00:	9a01      	ldr	r2, [sp, #4]
 8018b02:	2a00      	cmp	r2, #0
 8018b04:	d0de      	beq.n	8018ac4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8018b06:	7b56      	ldrb	r6, [r2, #13]
 8018b08:	683b      	ldr	r3, [r7, #0]
 8018b0a:	8894      	ldrh	r4, [r2, #4]
 8018b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018b0e:	0076      	lsls	r6, r6, #1
 8018b10:	f406 7080 	and.w	r0, r6, #256	; 0x100
 8018b14:	7a96      	ldrb	r6, [r2, #10]
 8018b16:	4629      	mov	r1, r5
 8018b18:	4306      	orrs	r6, r0
 8018b1a:	4638      	mov	r0, r7
 8018b1c:	4798      	blx	r3
 8018b1e:	4430      	add	r0, r6
 8018b20:	4480      	add	r8, r0
 8018b22:	fa1f f888 	uxth.w	r8, r8
 8018b26:	e7e5      	b.n	8018af4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

08018b28 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8018b28:	b508      	push	{r3, lr}
 8018b2a:	6803      	ldr	r3, [r0, #0]
 8018b2c:	68db      	ldr	r3, [r3, #12]
 8018b2e:	4798      	blx	r3
 8018b30:	b128      	cbz	r0, 8018b3e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8018b32:	7b43      	ldrb	r3, [r0, #13]
 8018b34:	7a80      	ldrb	r0, [r0, #10]
 8018b36:	005b      	lsls	r3, r3, #1
 8018b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018b3c:	4318      	orrs	r0, r3
 8018b3e:	bd08      	pop	{r3, pc}

08018b40 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8018b40:	b40e      	push	{r1, r2, r3}
 8018b42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b44:	b098      	sub	sp, #96	; 0x60
 8018b46:	ab1d      	add	r3, sp, #116	; 0x74
 8018b48:	4605      	mov	r5, r0
 8018b4a:	f853 4b04 	ldr.w	r4, [r3], #4
 8018b4e:	9300      	str	r3, [sp, #0]
 8018b50:	a802      	add	r0, sp, #8
 8018b52:	f000 fd68 	bl	8019626 <_ZN8touchgfx12TextProviderC1Ev>
 8018b56:	682b      	ldr	r3, [r5, #0]
 8018b58:	4628      	mov	r0, r5
 8018b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018b5c:	4798      	blx	r3
 8018b5e:	ae18      	add	r6, sp, #96	; 0x60
 8018b60:	4603      	mov	r3, r0
 8018b62:	4621      	mov	r1, r4
 8018b64:	9a00      	ldr	r2, [sp, #0]
 8018b66:	2400      	movs	r4, #0
 8018b68:	a802      	add	r0, sp, #8
 8018b6a:	f000 fda1 	bl	80196b0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018b6e:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8018b72:	462a      	mov	r2, r5
 8018b74:	4633      	mov	r3, r6
 8018b76:	4621      	mov	r1, r4
 8018b78:	a802      	add	r0, sp, #8
 8018b7a:	f001 f893 	bl	8019ca4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018b7e:	b1f0      	cbz	r0, 8018bbe <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7e>
 8018b80:	280a      	cmp	r0, #10
 8018b82:	d018      	beq.n	8018bb6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x76>
 8018b84:	9f01      	ldr	r7, [sp, #4]
 8018b86:	b1b7      	cbz	r7, 8018bb6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x76>
 8018b88:	7b78      	ldrb	r0, [r7, #13]
 8018b8a:	7a3b      	ldrb	r3, [r7, #8]
 8018b8c:	88aa      	ldrh	r2, [r5, #4]
 8018b8e:	00c1      	lsls	r1, r0, #3
 8018b90:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018b94:	4319      	orrs	r1, r3
 8018b96:	0643      	lsls	r3, r0, #25
 8018b98:	bf44      	itt	mi
 8018b9a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8018b9e:	b219      	sxthmi	r1, r3
 8018ba0:	0100      	lsls	r0, r0, #4
 8018ba2:	79fb      	ldrb	r3, [r7, #7]
 8018ba4:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8018ba8:	4303      	orrs	r3, r0
 8018baa:	4413      	add	r3, r2
 8018bac:	1a5b      	subs	r3, r3, r1
 8018bae:	b29b      	uxth	r3, r3
 8018bb0:	42a3      	cmp	r3, r4
 8018bb2:	bfc8      	it	gt
 8018bb4:	b21c      	sxthgt	r4, r3
 8018bb6:	4633      	mov	r3, r6
 8018bb8:	462a      	mov	r2, r5
 8018bba:	2100      	movs	r1, #0
 8018bbc:	e7dc      	b.n	8018b78 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 8018bbe:	b2a0      	uxth	r0, r4
 8018bc0:	b018      	add	sp, #96	; 0x60
 8018bc2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018bc6:	b003      	add	sp, #12
 8018bc8:	4770      	bx	lr

08018bca <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8018bca:	b40e      	push	{r1, r2, r3}
 8018bcc:	b530      	push	{r4, r5, lr}
 8018bce:	b098      	sub	sp, #96	; 0x60
 8018bd0:	ab1b      	add	r3, sp, #108	; 0x6c
 8018bd2:	4604      	mov	r4, r0
 8018bd4:	f853 5b04 	ldr.w	r5, [r3], #4
 8018bd8:	9301      	str	r3, [sp, #4]
 8018bda:	a802      	add	r0, sp, #8
 8018bdc:	f000 fd23 	bl	8019626 <_ZN8touchgfx12TextProviderC1Ev>
 8018be0:	6823      	ldr	r3, [r4, #0]
 8018be2:	4620      	mov	r0, r4
 8018be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018be6:	4798      	blx	r3
 8018be8:	9a01      	ldr	r2, [sp, #4]
 8018bea:	4603      	mov	r3, r0
 8018bec:	4629      	mov	r1, r5
 8018bee:	a802      	add	r0, sp, #8
 8018bf0:	f000 fd5e 	bl	80196b0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018bf4:	a802      	add	r0, sp, #8
 8018bf6:	f001 f94d 	bl	8019e94 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018bfa:	2401      	movs	r4, #1
 8018bfc:	b2a3      	uxth	r3, r4
 8018bfe:	b140      	cbz	r0, 8018c12 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x48>
 8018c00:	280a      	cmp	r0, #10
 8018c02:	bf08      	it	eq
 8018c04:	3301      	addeq	r3, #1
 8018c06:	a802      	add	r0, sp, #8
 8018c08:	bf08      	it	eq
 8018c0a:	b21c      	sxtheq	r4, r3
 8018c0c:	f001 f942 	bl	8019e94 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018c10:	e7f4      	b.n	8018bfc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 8018c12:	4618      	mov	r0, r3
 8018c14:	b018      	add	sp, #96	; 0x60
 8018c16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018c1a:	b003      	add	sp, #12
 8018c1c:	4770      	bx	lr

08018c1e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8018c1e:	b40e      	push	{r1, r2, r3}
 8018c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c22:	b098      	sub	sp, #96	; 0x60
 8018c24:	ab1d      	add	r3, sp, #116	; 0x74
 8018c26:	4604      	mov	r4, r0
 8018c28:	f853 5b04 	ldr.w	r5, [r3], #4
 8018c2c:	9300      	str	r3, [sp, #0]
 8018c2e:	a802      	add	r0, sp, #8
 8018c30:	f000 fcf9 	bl	8019626 <_ZN8touchgfx12TextProviderC1Ev>
 8018c34:	6823      	ldr	r3, [r4, #0]
 8018c36:	4620      	mov	r0, r4
 8018c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018c3a:	4798      	blx	r3
 8018c3c:	4629      	mov	r1, r5
 8018c3e:	4603      	mov	r3, r0
 8018c40:	9a00      	ldr	r2, [sp, #0]
 8018c42:	a802      	add	r0, sp, #8
 8018c44:	ad18      	add	r5, sp, #96	; 0x60
 8018c46:	f000 fd33 	bl	80196b0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018c4a:	2100      	movs	r1, #0
 8018c4c:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8018c50:	4622      	mov	r2, r4
 8018c52:	462b      	mov	r3, r5
 8018c54:	a802      	add	r0, sp, #8
 8018c56:	f001 f825 	bl	8019ca4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018c5a:	26ff      	movs	r6, #255	; 0xff
 8018c5c:	b1d8      	cbz	r0, 8018c96 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8018c5e:	280a      	cmp	r0, #10
 8018c60:	d012      	beq.n	8018c88 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 8018c62:	9801      	ldr	r0, [sp, #4]
 8018c64:	b180      	cbz	r0, 8018c88 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 8018c66:	7b47      	ldrb	r7, [r0, #13]
 8018c68:	7922      	ldrb	r2, [r4, #4]
 8018c6a:	00fb      	lsls	r3, r7, #3
 8018c6c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018c70:	7a03      	ldrb	r3, [r0, #8]
 8018c72:	430b      	orrs	r3, r1
 8018c74:	0679      	lsls	r1, r7, #25
 8018c76:	bf44      	itt	mi
 8018c78:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018c7c:	b21b      	sxthmi	r3, r3
 8018c7e:	1ad3      	subs	r3, r2, r3
 8018c80:	b2db      	uxtb	r3, r3
 8018c82:	429e      	cmp	r6, r3
 8018c84:	bf28      	it	cs
 8018c86:	461e      	movcs	r6, r3
 8018c88:	462b      	mov	r3, r5
 8018c8a:	4622      	mov	r2, r4
 8018c8c:	2100      	movs	r1, #0
 8018c8e:	a802      	add	r0, sp, #8
 8018c90:	f001 f808 	bl	8019ca4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018c94:	e7e2      	b.n	8018c5c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8018c96:	4630      	mov	r0, r6
 8018c98:	b018      	add	sp, #96	; 0x60
 8018c9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018c9e:	b003      	add	sp, #12
 8018ca0:	4770      	bx	lr

08018ca2 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8018ca2:	b513      	push	{r0, r1, r4, lr}
 8018ca4:	1d01      	adds	r1, r0, #4
 8018ca6:	4603      	mov	r3, r0
 8018ca8:	c903      	ldmia	r1, {r0, r1}
 8018caa:	466a      	mov	r2, sp
 8018cac:	e882 0003 	stmia.w	r2, {r0, r1}
 8018cb0:	2100      	movs	r1, #0
 8018cb2:	9100      	str	r1, [sp, #0]
 8018cb4:	6819      	ldr	r1, [r3, #0]
 8018cb6:	4618      	mov	r0, r3
 8018cb8:	690c      	ldr	r4, [r1, #16]
 8018cba:	4611      	mov	r1, r2
 8018cbc:	47a0      	blx	r4
 8018cbe:	b002      	add	sp, #8
 8018cc0:	bd10      	pop	{r4, pc}

08018cc2 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8018cc2:	b538      	push	{r3, r4, r5, lr}
 8018cc4:	680b      	ldr	r3, [r1, #0]
 8018cc6:	460c      	mov	r4, r1
 8018cc8:	68db      	ldr	r3, [r3, #12]
 8018cca:	4605      	mov	r5, r0
 8018ccc:	4798      	blx	r3
 8018cce:	6823      	ldr	r3, [r4, #0]
 8018cd0:	4620      	mov	r0, r4
 8018cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018cd4:	4629      	mov	r1, r5
 8018cd6:	4798      	blx	r3
 8018cd8:	4628      	mov	r0, r5
 8018cda:	bd38      	pop	{r3, r4, r5, pc}

08018cdc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8018cdc:	b410      	push	{r4}
 8018cde:	880a      	ldrh	r2, [r1, #0]
 8018ce0:	8884      	ldrh	r4, [r0, #4]
 8018ce2:	4422      	add	r2, r4
 8018ce4:	800a      	strh	r2, [r1, #0]
 8018ce6:	88c4      	ldrh	r4, [r0, #6]
 8018ce8:	884a      	ldrh	r2, [r1, #2]
 8018cea:	4422      	add	r2, r4
 8018cec:	804a      	strh	r2, [r1, #2]
 8018cee:	6940      	ldr	r0, [r0, #20]
 8018cf0:	b120      	cbz	r0, 8018cfc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8018cf2:	6803      	ldr	r3, [r0, #0]
 8018cf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018cfa:	4718      	bx	r3
 8018cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018d00:	4770      	bx	lr

08018d02 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8018d02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d04:	460b      	mov	r3, r1
 8018d06:	b085      	sub	sp, #20
 8018d08:	4604      	mov	r4, r0
 8018d0a:	b901      	cbnz	r1, 8018d0e <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8018d0c:	b322      	cbz	r2, 8018d58 <_ZN8touchgfx8Drawable12moveRelativeEss+0x56>
 8018d0e:	1d27      	adds	r7, r4, #4
 8018d10:	e897 0003 	ldmia.w	r7, {r0, r1}
 8018d14:	466e      	mov	r6, sp
 8018d16:	e886 0003 	stmia.w	r6, {r0, r1}
 8018d1a:	88a1      	ldrh	r1, [r4, #4]
 8018d1c:	88e5      	ldrh	r5, [r4, #6]
 8018d1e:	4419      	add	r1, r3
 8018d20:	6823      	ldr	r3, [r4, #0]
 8018d22:	442a      	add	r2, r5
 8018d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d26:	b209      	sxth	r1, r1
 8018d28:	4620      	mov	r0, r4
 8018d2a:	b215      	sxth	r5, r2
 8018d2c:	4798      	blx	r3
 8018d2e:	6823      	ldr	r3, [r4, #0]
 8018d30:	4629      	mov	r1, r5
 8018d32:	4620      	mov	r0, r4
 8018d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018d36:	4798      	blx	r3
 8018d38:	e897 0003 	ldmia.w	r7, {r0, r1}
 8018d3c:	ad02      	add	r5, sp, #8
 8018d3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8018d42:	6960      	ldr	r0, [r4, #20]
 8018d44:	b150      	cbz	r0, 8018d5c <_ZN8touchgfx8Drawable12moveRelativeEss+0x5a>
 8018d46:	6803      	ldr	r3, [r0, #0]
 8018d48:	4631      	mov	r1, r6
 8018d4a:	691b      	ldr	r3, [r3, #16]
 8018d4c:	4798      	blx	r3
 8018d4e:	6960      	ldr	r0, [r4, #20]
 8018d50:	6803      	ldr	r3, [r0, #0]
 8018d52:	691b      	ldr	r3, [r3, #16]
 8018d54:	4629      	mov	r1, r5
 8018d56:	4798      	blx	r3
 8018d58:	b005      	add	sp, #20
 8018d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d5c:	f7ff f846 	bl	8017dec <_ZN8touchgfx11Application11getInstanceEv>
 8018d60:	6803      	ldr	r3, [r0, #0]
 8018d62:	4631      	mov	r1, r6
 8018d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018d66:	4798      	blx	r3
 8018d68:	f7ff f840 	bl	8017dec <_ZN8touchgfx11Application11getInstanceEv>
 8018d6c:	6803      	ldr	r3, [r0, #0]
 8018d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018d70:	e7f0      	b.n	8018d54 <_ZN8touchgfx8Drawable12moveRelativeEss+0x52>

08018d72 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8018d72:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018d74:	8882      	ldrh	r2, [r0, #4]
 8018d76:	880b      	ldrh	r3, [r1, #0]
 8018d78:	4413      	add	r3, r2
 8018d7a:	800b      	strh	r3, [r1, #0]
 8018d7c:	88c2      	ldrh	r2, [r0, #6]
 8018d7e:	884b      	ldrh	r3, [r1, #2]
 8018d80:	4413      	add	r3, r2
 8018d82:	4602      	mov	r2, r0
 8018d84:	804b      	strh	r3, [r1, #2]
 8018d86:	4605      	mov	r5, r0
 8018d88:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018d8c:	460c      	mov	r4, r1
 8018d8e:	6851      	ldr	r1, [r2, #4]
 8018d90:	466b      	mov	r3, sp
 8018d92:	c303      	stmia	r3!, {r0, r1}
 8018d94:	4621      	mov	r1, r4
 8018d96:	4668      	mov	r0, sp
 8018d98:	f7fb ff9e 	bl	8014cd8 <_ZN8touchgfx4RectaNERKS0_>
 8018d9c:	466b      	mov	r3, sp
 8018d9e:	cb03      	ldmia	r3!, {r0, r1}
 8018da0:	6020      	str	r0, [r4, #0]
 8018da2:	6061      	str	r1, [r4, #4]
 8018da4:	6968      	ldr	r0, [r5, #20]
 8018da6:	b128      	cbz	r0, 8018db4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8018da8:	6803      	ldr	r3, [r0, #0]
 8018daa:	691b      	ldr	r3, [r3, #16]
 8018dac:	4621      	mov	r1, r4
 8018dae:	4798      	blx	r3
 8018db0:	b003      	add	sp, #12
 8018db2:	bd30      	pop	{r4, r5, pc}
 8018db4:	f7ff f81a 	bl	8017dec <_ZN8touchgfx11Application11getInstanceEv>
 8018db8:	6803      	ldr	r3, [r0, #0]
 8018dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018dbc:	e7f6      	b.n	8018dac <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08018dbe <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8018dbe:	b570      	push	{r4, r5, r6, lr}
 8018dc0:	8882      	ldrh	r2, [r0, #4]
 8018dc2:	880b      	ldrh	r3, [r1, #0]
 8018dc4:	4413      	add	r3, r2
 8018dc6:	800b      	strh	r3, [r1, #0]
 8018dc8:	88c2      	ldrh	r2, [r0, #6]
 8018dca:	884b      	ldrh	r3, [r1, #2]
 8018dcc:	460c      	mov	r4, r1
 8018dce:	4413      	add	r3, r2
 8018dd0:	804b      	strh	r3, [r1, #2]
 8018dd2:	4605      	mov	r5, r0
 8018dd4:	1d01      	adds	r1, r0, #4
 8018dd6:	4620      	mov	r0, r4
 8018dd8:	f7fb ff7e 	bl	8014cd8 <_ZN8touchgfx4RectaNERKS0_>
 8018ddc:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	dd0b      	ble.n	8018dfc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018de4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	dd07      	ble.n	8018dfc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018dec:	6968      	ldr	r0, [r5, #20]
 8018dee:	b128      	cbz	r0, 8018dfc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018df0:	6803      	ldr	r3, [r0, #0]
 8018df2:	4621      	mov	r1, r4
 8018df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018df6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018dfa:	4718      	bx	r3
 8018dfc:	bd70      	pop	{r4, r5, r6, pc}

08018dfe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8018dfe:	b510      	push	{r4, lr}
 8018e00:	4604      	mov	r4, r0
 8018e02:	4608      	mov	r0, r1
 8018e04:	2300      	movs	r3, #0
 8018e06:	8023      	strh	r3, [r4, #0]
 8018e08:	8063      	strh	r3, [r4, #2]
 8018e0a:	6803      	ldr	r3, [r0, #0]
 8018e0c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018e10:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8018e14:	80a1      	strh	r1, [r4, #4]
 8018e16:	80e2      	strh	r2, [r4, #6]
 8018e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e1a:	4621      	mov	r1, r4
 8018e1c:	4798      	blx	r3
 8018e1e:	4620      	mov	r0, r4
 8018e20:	bd10      	pop	{r4, pc}
	...

08018e24 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8018e24:	b530      	push	{r4, r5, lr}
 8018e26:	8083      	strh	r3, [r0, #4]
 8018e28:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8018e2c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8018e30:	7183      	strb	r3, [r0, #6]
 8018e32:	79c3      	ldrb	r3, [r0, #7]
 8018e34:	6101      	str	r1, [r0, #16]
 8018e36:	f365 0306 	bfi	r3, r5, #0, #7
 8018e3a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8018e3e:	8282      	strh	r2, [r0, #20]
 8018e40:	f365 13c7 	bfi	r3, r5, #7, #1
 8018e44:	71c3      	strb	r3, [r0, #7]
 8018e46:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8018e4a:	7203      	strb	r3, [r0, #8]
 8018e4c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8018e50:	7243      	strb	r3, [r0, #9]
 8018e52:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8018e56:	8143      	strh	r3, [r0, #10]
 8018e58:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8018e5c:	8183      	strh	r3, [r0, #12]
 8018e5e:	4b01      	ldr	r3, [pc, #4]	; (8018e64 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8018e60:	6003      	str	r3, [r0, #0]
 8018e62:	bd30      	pop	{r4, r5, pc}
 8018e64:	0802bc40 	.word	0x0802bc40

08018e68 <_ZNK8touchgfx9ConstFont4findEt>:
 8018e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e6a:	6904      	ldr	r4, [r0, #16]
 8018e6c:	b3bc      	cbz	r4, 8018ede <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018e6e:	88a3      	ldrh	r3, [r4, #4]
 8018e70:	8a82      	ldrh	r2, [r0, #20]
 8018e72:	1acb      	subs	r3, r1, r3
 8018e74:	f102 32ff 	add.w	r2, r2, #4294967295
 8018e78:	d431      	bmi.n	8018ede <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018e7a:	4293      	cmp	r3, r2
 8018e7c:	dd0c      	ble.n	8018e98 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8018e7e:	230e      	movs	r3, #14
 8018e80:	fb03 4302 	mla	r3, r3, r2, r4
 8018e84:	889b      	ldrh	r3, [r3, #4]
 8018e86:	1a5b      	subs	r3, r3, r1
 8018e88:	1ad3      	subs	r3, r2, r3
 8018e8a:	429a      	cmp	r2, r3
 8018e8c:	db27      	blt.n	8018ede <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	bfbc      	itt	lt
 8018e92:	2302      	movlt	r3, #2
 8018e94:	fb92 f3f3 	sdivlt	r3, r2, r3
 8018e98:	2500      	movs	r5, #0
 8018e9a:	260e      	movs	r6, #14
 8018e9c:	4295      	cmp	r5, r2
 8018e9e:	dc1e      	bgt.n	8018ede <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018ea0:	fb06 4003 	mla	r0, r6, r3, r4
 8018ea4:	8887      	ldrh	r7, [r0, #4]
 8018ea6:	42b9      	cmp	r1, r7
 8018ea8:	d01a      	beq.n	8018ee0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8018eaa:	d20d      	bcs.n	8018ec8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8018eac:	1e5a      	subs	r2, r3, #1
 8018eae:	4295      	cmp	r5, r2
 8018eb0:	dc15      	bgt.n	8018ede <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018eb2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8018eb6:	1a5b      	subs	r3, r3, r1
 8018eb8:	1ad3      	subs	r3, r2, r3
 8018eba:	429a      	cmp	r2, r3
 8018ebc:	db0f      	blt.n	8018ede <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018ebe:	429d      	cmp	r5, r3
 8018ec0:	ddec      	ble.n	8018e9c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018ec2:	1953      	adds	r3, r2, r5
 8018ec4:	105b      	asrs	r3, r3, #1
 8018ec6:	e7e9      	b.n	8018e9c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018ec8:	1c5d      	adds	r5, r3, #1
 8018eca:	42aa      	cmp	r2, r5
 8018ecc:	db07      	blt.n	8018ede <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018ece:	8a43      	ldrh	r3, [r0, #18]
 8018ed0:	1acb      	subs	r3, r1, r3
 8018ed2:	442b      	add	r3, r5
 8018ed4:	429d      	cmp	r5, r3
 8018ed6:	dc02      	bgt.n	8018ede <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018ed8:	429a      	cmp	r2, r3
 8018eda:	dadf      	bge.n	8018e9c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018edc:	e7f1      	b.n	8018ec2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8018ede:	2000      	movs	r0, #0
 8018ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018ee2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8018ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ee4:	4604      	mov	r4, r0
 8018ee6:	4617      	mov	r7, r2
 8018ee8:	461e      	mov	r6, r3
 8018eea:	b911      	cbnz	r1, 8018ef2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8018eec:	2500      	movs	r5, #0
 8018eee:	4628      	mov	r0, r5
 8018ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ef2:	290a      	cmp	r1, #10
 8018ef4:	d0fa      	beq.n	8018eec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018ef6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8018efa:	4291      	cmp	r1, r2
 8018efc:	d0f6      	beq.n	8018eec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018efe:	f242 020b 	movw	r2, #8203	; 0x200b
 8018f02:	4291      	cmp	r1, r2
 8018f04:	d0f2      	beq.n	8018eec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018f06:	f7ff ffaf 	bl	8018e68 <_ZNK8touchgfx9ConstFont4findEt>
 8018f0a:	4605      	mov	r5, r0
 8018f0c:	b950      	cbnz	r0, 8018f24 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8018f0e:	6823      	ldr	r3, [r4, #0]
 8018f10:	4620      	mov	r0, r4
 8018f12:	691b      	ldr	r3, [r3, #16]
 8018f14:	4798      	blx	r3
 8018f16:	4601      	mov	r1, r0
 8018f18:	4620      	mov	r0, r4
 8018f1a:	f7ff ffa5 	bl	8018e68 <_ZNK8touchgfx9ConstFont4findEt>
 8018f1e:	4605      	mov	r5, r0
 8018f20:	2800      	cmp	r0, #0
 8018f22:	d0e3      	beq.n	8018eec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018f24:	6823      	ldr	r3, [r4, #0]
 8018f26:	4629      	mov	r1, r5
 8018f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018f2a:	4620      	mov	r0, r4
 8018f2c:	4798      	blx	r3
 8018f2e:	6038      	str	r0, [r7, #0]
 8018f30:	6823      	ldr	r3, [r4, #0]
 8018f32:	4620      	mov	r0, r4
 8018f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018f36:	4798      	blx	r3
 8018f38:	7030      	strb	r0, [r6, #0]
 8018f3a:	e7d8      	b.n	8018eee <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08018f3c <_ZN8touchgfx6memsetEPvhm>:
 8018f3c:	4402      	add	r2, r0
 8018f3e:	4290      	cmp	r0, r2
 8018f40:	d002      	beq.n	8018f48 <_ZN8touchgfx6memsetEPvhm+0xc>
 8018f42:	f800 1b01 	strb.w	r1, [r0], #1
 8018f46:	e7fa      	b.n	8018f3e <_ZN8touchgfx6memsetEPvhm+0x2>
 8018f48:	4770      	bx	lr

08018f4a <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8018f4a:	2000      	movs	r0, #0
 8018f4c:	4770      	bx	lr

08018f4e <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8018f4e:	2001      	movs	r0, #1
 8018f50:	4770      	bx	lr

08018f52 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8018f52:	2002      	movs	r0, #2
 8018f54:	4770      	bx	lr

08018f56 <_ZN8touchgfx12GestureEventD1Ev>:
 8018f56:	4770      	bx	lr

08018f58 <_ZN8touchgfx9DragEventD1Ev>:
 8018f58:	4770      	bx	lr

08018f5a <_ZN8touchgfx10ClickEventD1Ev>:
 8018f5a:	4770      	bx	lr

08018f5c <_ZN8touchgfx10ClickEventD0Ev>:
 8018f5c:	b510      	push	{r4, lr}
 8018f5e:	210c      	movs	r1, #12
 8018f60:	4604      	mov	r4, r0
 8018f62:	f00d fd34 	bl	80269ce <_ZdlPvj>
 8018f66:	4620      	mov	r0, r4
 8018f68:	bd10      	pop	{r4, pc}

08018f6a <_ZN8touchgfx9DragEventD0Ev>:
 8018f6a:	b510      	push	{r4, lr}
 8018f6c:	2110      	movs	r1, #16
 8018f6e:	4604      	mov	r4, r0
 8018f70:	f00d fd2d 	bl	80269ce <_ZdlPvj>
 8018f74:	4620      	mov	r0, r4
 8018f76:	bd10      	pop	{r4, pc}

08018f78 <_ZN8touchgfx12GestureEventD0Ev>:
 8018f78:	b510      	push	{r4, lr}
 8018f7a:	210c      	movs	r1, #12
 8018f7c:	4604      	mov	r4, r0
 8018f7e:	f00d fd26 	bl	80269ce <_ZdlPvj>
 8018f82:	4620      	mov	r0, r4
 8018f84:	bd10      	pop	{r4, pc}
	...

08018f88 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8018f88:	b530      	push	{r4, r5, lr}
 8018f8a:	460d      	mov	r5, r1
 8018f8c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8018f8e:	b087      	sub	sp, #28
 8018f90:	4604      	mov	r4, r0
 8018f92:	b301      	cbz	r1, 8018fd6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8018f94:	a801      	add	r0, sp, #4
 8018f96:	f7ff ff32 	bl	8018dfe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018f9a:	892a      	ldrh	r2, [r5, #8]
 8018f9c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018fa0:	7928      	ldrb	r0, [r5, #4]
 8018fa2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8018fa6:	f88d 0010 	strb.w	r0, [sp, #16]
 8018faa:	1ad2      	subs	r2, r2, r3
 8018fac:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8018fae:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018fb0:	f8ad 1012 	strh.w	r1, [sp, #18]
 8018fb4:	441a      	add	r2, r3
 8018fb6:	896b      	ldrh	r3, [r5, #10]
 8018fb8:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8018fbc:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018fc0:	1b5b      	subs	r3, r3, r5
 8018fc2:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8018fc4:	442b      	add	r3, r5
 8018fc6:	4d05      	ldr	r5, [pc, #20]	; (8018fdc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8018fc8:	9503      	str	r5, [sp, #12]
 8018fca:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018fce:	6803      	ldr	r3, [r0, #0]
 8018fd0:	a903      	add	r1, sp, #12
 8018fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018fd4:	4798      	blx	r3
 8018fd6:	b007      	add	sp, #28
 8018fd8:	bd30      	pop	{r4, r5, pc}
 8018fda:	bf00      	nop
 8018fdc:	0802bcbc 	.word	0x0802bcbc

08018fe0 <_ZNK8touchgfx4Rect9intersectEss>:
 8018fe0:	b510      	push	{r4, lr}
 8018fe2:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018fe6:	428b      	cmp	r3, r1
 8018fe8:	dc10      	bgt.n	801900c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8018fea:	8884      	ldrh	r4, [r0, #4]
 8018fec:	4423      	add	r3, r4
 8018fee:	b21b      	sxth	r3, r3
 8018ff0:	4299      	cmp	r1, r3
 8018ff2:	da0b      	bge.n	801900c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8018ff4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018ff8:	4293      	cmp	r3, r2
 8018ffa:	dc07      	bgt.n	801900c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8018ffc:	88c0      	ldrh	r0, [r0, #6]
 8018ffe:	4418      	add	r0, r3
 8019000:	b200      	sxth	r0, r0
 8019002:	4282      	cmp	r2, r0
 8019004:	bfac      	ite	ge
 8019006:	2000      	movge	r0, #0
 8019008:	2001      	movlt	r0, #1
 801900a:	bd10      	pop	{r4, pc}
 801900c:	2000      	movs	r0, #0
 801900e:	e7fc      	b.n	801900a <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08019010 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8019010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019012:	460c      	mov	r4, r1
 8019014:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019016:	b089      	sub	sp, #36	; 0x24
 8019018:	4605      	mov	r5, r0
 801901a:	2900      	cmp	r1, #0
 801901c:	d054      	beq.n	80190c8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801901e:	4668      	mov	r0, sp
 8019020:	f7ff feed 	bl	8018dfe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019024:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 8019026:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8019028:	8922      	ldrh	r2, [r4, #8]
 801902a:	88e1      	ldrh	r1, [r4, #6]
 801902c:	443a      	add	r2, r7
 801902e:	4431      	add	r1, r6
 8019030:	b212      	sxth	r2, r2
 8019032:	b209      	sxth	r1, r1
 8019034:	4668      	mov	r0, sp
 8019036:	f7ff ffd3 	bl	8018fe0 <_ZNK8touchgfx4Rect9intersectEss>
 801903a:	b1d0      	cbz	r0, 8019072 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801903c:	89a2      	ldrh	r2, [r4, #12]
 801903e:	8961      	ldrh	r1, [r4, #10]
 8019040:	443a      	add	r2, r7
 8019042:	4431      	add	r1, r6
 8019044:	b212      	sxth	r2, r2
 8019046:	b209      	sxth	r1, r1
 8019048:	4668      	mov	r0, sp
 801904a:	f7ff ffc9 	bl	8018fe0 <_ZNK8touchgfx4Rect9intersectEss>
 801904e:	4603      	mov	r3, r0
 8019050:	b978      	cbnz	r0, 8019072 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8019052:	4a1e      	ldr	r2, [pc, #120]	; (80190cc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 8019054:	9204      	str	r2, [sp, #16]
 8019056:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8019058:	f8ad 3016 	strh.w	r3, [sp, #22]
 801905c:	2202      	movs	r2, #2
 801905e:	f88d 2014 	strb.w	r2, [sp, #20]
 8019062:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019066:	f8ad 301a 	strh.w	r3, [sp, #26]
 801906a:	6803      	ldr	r3, [r0, #0]
 801906c:	a904      	add	r1, sp, #16
 801906e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019070:	4798      	blx	r3
 8019072:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8019074:	a802      	add	r0, sp, #8
 8019076:	f7ff fec2 	bl	8018dfe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801907a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801907e:	88e0      	ldrh	r0, [r4, #6]
 8019080:	8961      	ldrh	r1, [r4, #10]
 8019082:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8019086:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801908a:	8923      	ldrh	r3, [r4, #8]
 801908c:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801908e:	7927      	ldrb	r7, [r4, #4]
 8019090:	f88d 7014 	strb.w	r7, [sp, #20]
 8019094:	1a80      	subs	r0, r0, r2
 8019096:	1a89      	subs	r1, r1, r2
 8019098:	89a2      	ldrh	r2, [r4, #12]
 801909a:	4c0d      	ldr	r4, [pc, #52]	; (80190d0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801909c:	9404      	str	r4, [sp, #16]
 801909e:	4460      	add	r0, ip
 80190a0:	eba3 030e 	sub.w	r3, r3, lr
 80190a4:	eba2 020e 	sub.w	r2, r2, lr
 80190a8:	f8ad 0016 	strh.w	r0, [sp, #22]
 80190ac:	4433      	add	r3, r6
 80190ae:	4461      	add	r1, ip
 80190b0:	4432      	add	r2, r6
 80190b2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80190b4:	f8ad 101a 	strh.w	r1, [sp, #26]
 80190b8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80190bc:	f8ad 201c 	strh.w	r2, [sp, #28]
 80190c0:	6803      	ldr	r3, [r0, #0]
 80190c2:	a904      	add	r1, sp, #16
 80190c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80190c6:	4798      	blx	r3
 80190c8:	b009      	add	sp, #36	; 0x24
 80190ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80190cc:	0802bc94 	.word	0x0802bc94
 80190d0:	0802bca8 	.word	0x0802bca8

080190d4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80190d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190d8:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 80190dc:	790b      	ldrb	r3, [r1, #4]
 80190de:	b0a1      	sub	sp, #132	; 0x84
 80190e0:	4604      	mov	r4, r0
 80190e2:	460d      	mov	r5, r1
 80190e4:	f1b9 0f00 	cmp.w	r9, #0
 80190e8:	d00f      	beq.n	801910a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	f040 80a0 	bne.w	8019230 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 80190f0:	b021      	add	sp, #132	; 0x84
 80190f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190f6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80190fa:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 80190fe:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019102:	1d20      	adds	r0, r4, #4
 8019104:	f7fb fd36 	bl	8014b74 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019108:	e092      	b.n	8019230 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 801910a:	2b00      	cmp	r3, #0
 801910c:	d1f0      	bne.n	80190f0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801910e:	4b5e      	ldr	r3, [pc, #376]	; (8019288 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b4>)
 8019110:	681b      	ldr	r3, [r3, #0]
 8019112:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 8019116:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801911a:	f1ba 0f03 	cmp.w	sl, #3
 801911e:	ddea      	ble.n	80190f6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8019120:	f1ba 0f0c 	cmp.w	sl, #12
 8019124:	f04f 0303 	mov.w	r3, #3
 8019128:	bfdc      	itt	le
 801912a:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801912e:	fb92 f3f3 	sdivle	r3, r2, r3
 8019132:	9301      	str	r3, [sp, #4]
 8019134:	4b55      	ldr	r3, [pc, #340]	; (801928c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 8019136:	4956      	ldr	r1, [pc, #344]	; (8019290 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 8019138:	f9b3 2000 	ldrsh.w	r2, [r3]
 801913c:	4b55      	ldr	r3, [pc, #340]	; (8019294 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801913e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8019142:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019146:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801914a:	ab0e      	add	r3, sp, #56	; 0x38
 801914c:	2248      	movs	r2, #72	; 0x48
 801914e:	2600      	movs	r6, #0
 8019150:	4618      	mov	r0, r3
 8019152:	960a      	str	r6, [sp, #40]	; 0x28
 8019154:	f00d fde8 	bl	8026d28 <memcpy>
 8019158:	f04f 32ff 	mov.w	r2, #4294967295
 801915c:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8019160:	f8cd a008 	str.w	sl, [sp, #8]
 8019164:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8019168:	fb93 f3f2 	sdiv	r3, r3, r2
 801916c:	b29b      	uxth	r3, r3
 801916e:	46b3      	mov	fp, r6
 8019170:	9303      	str	r3, [sp, #12]
 8019172:	2300      	movs	r3, #0
 8019174:	9309      	str	r3, [sp, #36]	; 0x24
 8019176:	9b07      	ldr	r3, [sp, #28]
 8019178:	9a03      	ldr	r2, [sp, #12]
 801917a:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801917e:	88ef      	ldrh	r7, [r5, #6]
 8019180:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8019184:	fb13 f302 	smulbb	r3, r3, r2
 8019188:	b29b      	uxth	r3, r3
 801918a:	9304      	str	r3, [sp, #16]
 801918c:	9b07      	ldr	r3, [sp, #28]
 801918e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8019192:	a80a      	add	r0, sp, #40	; 0x28
 8019194:	685b      	ldr	r3, [r3, #4]
 8019196:	fb13 f302 	smulbb	r3, r3, r2
 801919a:	b29b      	uxth	r3, r3
 801919c:	9305      	str	r3, [sp, #20]
 801919e:	9b04      	ldr	r3, [sp, #16]
 80191a0:	441f      	add	r7, r3
 80191a2:	9b05      	ldr	r3, [sp, #20]
 80191a4:	4498      	add	r8, r3
 80191a6:	b23f      	sxth	r7, r7
 80191a8:	fa0f f888 	sxth.w	r8, r8
 80191ac:	4642      	mov	r2, r8
 80191ae:	4639      	mov	r1, r7
 80191b0:	f7ff ff16 	bl	8018fe0 <_ZNK8touchgfx4Rect9intersectEss>
 80191b4:	b380      	cbz	r0, 8019218 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 80191b6:	4639      	mov	r1, r7
 80191b8:	ab09      	add	r3, sp, #36	; 0x24
 80191ba:	4642      	mov	r2, r8
 80191bc:	1d20      	adds	r0, r4, #4
 80191be:	f7fb fcd9 	bl	8014b74 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80191c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80191c4:	b341      	cbz	r1, 8019218 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 80191c6:	4549      	cmp	r1, r9
 80191c8:	d026      	beq.n	8019218 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 80191ca:	a80c      	add	r0, sp, #48	; 0x30
 80191cc:	f7ff fe17 	bl	8018dfe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80191d0:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 80191d4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80191d8:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 80191dc:	2002      	movs	r0, #2
 80191de:	fb92 f2f0 	sdiv	r2, r2, r0
 80191e2:	440a      	add	r2, r1
 80191e4:	1a99      	subs	r1, r3, r2
 80191e6:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 80191ea:	fb93 f3f0 	sdiv	r3, r3, r0
 80191ee:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 80191f2:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 80191f6:	4403      	add	r3, r0
 80191f8:	1ad3      	subs	r3, r2, r3
 80191fa:	435b      	muls	r3, r3
 80191fc:	9a06      	ldr	r2, [sp, #24]
 80191fe:	fb01 3301 	mla	r3, r1, r1, r3
 8019202:	4293      	cmp	r3, r2
 8019204:	d208      	bcs.n	8019218 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 8019206:	9a04      	ldr	r2, [sp, #16]
 8019208:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801920c:	86a2      	strh	r2, [r4, #52]	; 0x34
 801920e:	9a05      	ldr	r2, [sp, #20]
 8019210:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8019214:	86e2      	strh	r2, [r4, #54]	; 0x36
 8019216:	9306      	str	r3, [sp, #24]
 8019218:	f10b 0b02 	add.w	fp, fp, #2
 801921c:	f1bb 0f08 	cmp.w	fp, #8
 8019220:	dda7      	ble.n	8019172 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8019222:	9b02      	ldr	r3, [sp, #8]
 8019224:	4453      	add	r3, sl
 8019226:	9302      	str	r3, [sp, #8]
 8019228:	9b01      	ldr	r3, [sp, #4]
 801922a:	3601      	adds	r6, #1
 801922c:	42b3      	cmp	r3, r6
 801922e:	d199      	bne.n	8019164 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x90>
 8019230:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019232:	2900      	cmp	r1, #0
 8019234:	f43f af5c 	beq.w	80190f0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019238:	a80c      	add	r0, sp, #48	; 0x30
 801923a:	f7ff fde0 	bl	8018dfe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801923e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8019242:	88ea      	ldrh	r2, [r5, #6]
 8019244:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 8019248:	7929      	ldrb	r1, [r5, #4]
 801924a:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801924e:	1ad2      	subs	r2, r2, r3
 8019250:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019252:	441a      	add	r2, r3
 8019254:	892b      	ldrh	r3, [r5, #8]
 8019256:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801925a:	1a1b      	subs	r3, r3, r0
 801925c:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801925e:	4403      	add	r3, r0
 8019260:	480d      	ldr	r0, [pc, #52]	; (8019298 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 8019262:	900e      	str	r0, [sp, #56]	; 0x38
 8019264:	2600      	movs	r6, #0
 8019266:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019268:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801926c:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 8019270:	6803      	ldr	r3, [r0, #0]
 8019272:	a90e      	add	r1, sp, #56	; 0x38
 8019274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019276:	4798      	blx	r3
 8019278:	792b      	ldrb	r3, [r5, #4]
 801927a:	2b00      	cmp	r3, #0
 801927c:	f43f af38 	beq.w	80190f0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019280:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8019284:	e734      	b.n	80190f0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019286:	bf00      	nop
 8019288:	2000a0f0 	.word	0x2000a0f0
 801928c:	2000a0e4 	.word	0x2000a0e4
 8019290:	08029fb4 	.word	0x08029fb4
 8019294:	2000a0e6 	.word	0x2000a0e6
 8019298:	0802bc94 	.word	0x0802bc94

0801929c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801929c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801929e:	4604      	mov	r4, r0
 80192a0:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80192a4:	3201      	adds	r2, #1
 80192a6:	d112      	bne.n	80192ce <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80192a8:	6803      	ldr	r3, [r0, #0]
 80192aa:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80192ae:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80192b2:	f8ad 1004 	strh.w	r1, [sp, #4]
 80192b6:	2500      	movs	r5, #0
 80192b8:	9500      	str	r5, [sp, #0]
 80192ba:	466d      	mov	r5, sp
 80192bc:	4629      	mov	r1, r5
 80192be:	f8ad 2006 	strh.w	r2, [sp, #6]
 80192c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192c4:	4798      	blx	r3
 80192c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80192ca:	e884 0003 	stmia.w	r4, {r0, r1}
 80192ce:	4620      	mov	r0, r4
 80192d0:	b003      	add	sp, #12
 80192d2:	bd30      	pop	{r4, r5, pc}

080192d4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80192d4:	b513      	push	{r0, r1, r4, lr}
 80192d6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80192da:	3301      	adds	r3, #1
 80192dc:	4604      	mov	r4, r0
 80192de:	d109      	bne.n	80192f4 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 80192e0:	4601      	mov	r1, r0
 80192e2:	4668      	mov	r0, sp
 80192e4:	f7ff fd8b 	bl	8018dfe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80192e8:	f8bd 3000 	ldrh.w	r3, [sp]
 80192ec:	8423      	strh	r3, [r4, #32]
 80192ee:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80192f2:	8463      	strh	r3, [r4, #34]	; 0x22
 80192f4:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 80192f8:	b002      	add	sp, #8
 80192fa:	bd10      	pop	{r4, pc}

080192fc <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 80192fc:	b513      	push	{r0, r1, r4, lr}
 80192fe:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8019302:	3301      	adds	r3, #1
 8019304:	4604      	mov	r4, r0
 8019306:	d109      	bne.n	801931c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8019308:	4601      	mov	r1, r0
 801930a:	4668      	mov	r0, sp
 801930c:	f7ff fd77 	bl	8018dfe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019310:	f8bd 3000 	ldrh.w	r3, [sp]
 8019314:	8423      	strh	r3, [r4, #32]
 8019316:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801931a:	8463      	strh	r3, [r4, #34]	; 0x22
 801931c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8019320:	b002      	add	sp, #8
 8019322:	bd10      	pop	{r4, pc}

08019324 <_ZN8touchgfx6ScreenC1Ev>:
 8019324:	b570      	push	{r4, r5, r6, lr}
 8019326:	4605      	mov	r5, r0
 8019328:	4b15      	ldr	r3, [pc, #84]	; (8019380 <_ZN8touchgfx6ScreenC1Ev+0x5c>)
 801932a:	f845 3b04 	str.w	r3, [r5], #4
 801932e:	2300      	movs	r3, #0
 8019330:	8103      	strh	r3, [r0, #8]
 8019332:	8143      	strh	r3, [r0, #10]
 8019334:	8183      	strh	r3, [r0, #12]
 8019336:	81c3      	strh	r3, [r0, #14]
 8019338:	8203      	strh	r3, [r0, #16]
 801933a:	8243      	strh	r3, [r0, #18]
 801933c:	8283      	strh	r3, [r0, #20]
 801933e:	82c3      	strh	r3, [r0, #22]
 8019340:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8019344:	6203      	str	r3, [r0, #32]
 8019346:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801934a:	4a0e      	ldr	r2, [pc, #56]	; (8019384 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801934c:	6343      	str	r3, [r0, #52]	; 0x34
 801934e:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8019352:	4b0d      	ldr	r3, [pc, #52]	; (8019388 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8019354:	6042      	str	r2, [r0, #4]
 8019356:	f9b3 6000 	ldrsh.w	r6, [r3]
 801935a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801935c:	4a0b      	ldr	r2, [pc, #44]	; (801938c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801935e:	4604      	mov	r4, r0
 8019360:	2101      	movs	r1, #1
 8019362:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8019366:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801936a:	f9b2 1000 	ldrsh.w	r1, [r2]
 801936e:	4628      	mov	r0, r5
 8019370:	4798      	blx	r3
 8019372:	6863      	ldr	r3, [r4, #4]
 8019374:	4628      	mov	r0, r5
 8019376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019378:	4631      	mov	r1, r6
 801937a:	4798      	blx	r3
 801937c:	4620      	mov	r0, r4
 801937e:	bd70      	pop	{r4, r5, r6, pc}
 8019380:	0802bcd0 	.word	0x0802bcd0
 8019384:	0802adf8 	.word	0x0802adf8
 8019388:	2000a0e6 	.word	0x2000a0e6
 801938c:	2000a0e4 	.word	0x2000a0e4

08019390 <_ZN8touchgfx6Screen4drawEv>:
 8019390:	b507      	push	{r0, r1, r2, lr}
 8019392:	4b09      	ldr	r3, [pc, #36]	; (80193b8 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8019394:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019398:	4b08      	ldr	r3, [pc, #32]	; (80193bc <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801939a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801939e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80193a2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80193a6:	6803      	ldr	r3, [r0, #0]
 80193a8:	2100      	movs	r1, #0
 80193aa:	9100      	str	r1, [sp, #0]
 80193ac:	689b      	ldr	r3, [r3, #8]
 80193ae:	4669      	mov	r1, sp
 80193b0:	4798      	blx	r3
 80193b2:	b003      	add	sp, #12
 80193b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80193b8:	2000a0e4 	.word	0x2000a0e4
 80193bc:	2000a0e6 	.word	0x2000a0e6

080193c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80193c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193c4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	b089      	sub	sp, #36	; 0x24
 80193cc:	4680      	mov	r8, r0
 80193ce:	460c      	mov	r4, r1
 80193d0:	4615      	mov	r5, r2
 80193d2:	dd0e      	ble.n	80193f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80193d4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80193d8:	2b00      	cmp	r3, #0
 80193da:	dd0a      	ble.n	80193f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80193dc:	4628      	mov	r0, r5
 80193de:	f7ff ff5d 	bl	801929c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80193e2:	4621      	mov	r1, r4
 80193e4:	f7fe fc78 	bl	8017cd8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80193e8:	69eb      	ldr	r3, [r5, #28]
 80193ea:	b928      	cbnz	r0, 80193f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 80193ec:	461d      	mov	r5, r3
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d1f4      	bne.n	80193dc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 80193f2:	b009      	add	sp, #36	; 0x24
 80193f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193f8:	ae04      	add	r6, sp, #16
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	f000 80b5 	beq.w	801956a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8019400:	682b      	ldr	r3, [r5, #0]
 8019402:	4629      	mov	r1, r5
 8019404:	68db      	ldr	r3, [r3, #12]
 8019406:	a802      	add	r0, sp, #8
 8019408:	4798      	blx	r3
 801940a:	4628      	mov	r0, r5
 801940c:	f7ff ff62 	bl	80192d4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019410:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8019414:	4407      	add	r7, r0
 8019416:	4628      	mov	r0, r5
 8019418:	f7ff ff70 	bl	80192fc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801941c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019420:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8019424:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019428:	4418      	add	r0, r3
 801942a:	4621      	mov	r1, r4
 801942c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8019430:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019434:	b23f      	sxth	r7, r7
 8019436:	4630      	mov	r0, r6
 8019438:	f8ad 3016 	strh.w	r3, [sp, #22]
 801943c:	f8ad 7010 	strh.w	r7, [sp, #16]
 8019440:	f7fb fc4a 	bl	8014cd8 <_ZN8touchgfx4RectaNERKS0_>
 8019444:	4628      	mov	r0, r5
 8019446:	f7ff ff29 	bl	801929c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801944a:	4602      	mov	r2, r0
 801944c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8019450:	ab06      	add	r3, sp, #24
 8019452:	e883 0003 	stmia.w	r3, {r0, r1}
 8019456:	4611      	mov	r1, r2
 8019458:	4618      	mov	r0, r3
 801945a:	f7fb fc3d 	bl	8014cd8 <_ZN8touchgfx4RectaNERKS0_>
 801945e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8019462:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019466:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801946a:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801946e:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8019472:	4299      	cmp	r1, r3
 8019474:	d10b      	bne.n	801948e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8019476:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801947a:	4552      	cmp	r2, sl
 801947c:	d107      	bne.n	801948e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801947e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8019482:	455a      	cmp	r2, fp
 8019484:	d103      	bne.n	801948e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8019486:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801948a:	454a      	cmp	r2, r9
 801948c:	d06d      	beq.n	801956a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801948e:	f1bb 0f00 	cmp.w	fp, #0
 8019492:	dd65      	ble.n	8019560 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8019494:	f1b9 0f00 	cmp.w	r9, #0
 8019498:	dd62      	ble.n	8019560 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801949a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801949e:	fa1f f08a 	uxth.w	r0, sl
 80194a2:	4552      	cmp	r2, sl
 80194a4:	9000      	str	r0, [sp, #0]
 80194a6:	da12      	bge.n	80194ce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80194a8:	9301      	str	r3, [sp, #4]
 80194aa:	9b00      	ldr	r3, [sp, #0]
 80194ac:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80194b0:	f8ad 2012 	strh.w	r2, [sp, #18]
 80194b4:	1a9a      	subs	r2, r3, r2
 80194b6:	f8ad 1010 	strh.w	r1, [sp, #16]
 80194ba:	f8ad 0014 	strh.w	r0, [sp, #20]
 80194be:	f8ad 2016 	strh.w	r2, [sp, #22]
 80194c2:	69ea      	ldr	r2, [r5, #28]
 80194c4:	4631      	mov	r1, r6
 80194c6:	4640      	mov	r0, r8
 80194c8:	f7ff ff7a 	bl	80193c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80194cc:	9b01      	ldr	r3, [sp, #4]
 80194ce:	f9b4 2000 	ldrsh.w	r2, [r4]
 80194d2:	429a      	cmp	r2, r3
 80194d4:	b29f      	uxth	r7, r3
 80194d6:	da0d      	bge.n	80194f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 80194d8:	f8ad 2010 	strh.w	r2, [sp, #16]
 80194dc:	1aba      	subs	r2, r7, r2
 80194de:	f8ad a012 	strh.w	sl, [sp, #18]
 80194e2:	f8ad 2014 	strh.w	r2, [sp, #20]
 80194e6:	f8ad 9016 	strh.w	r9, [sp, #22]
 80194ea:	69ea      	ldr	r2, [r5, #28]
 80194ec:	4631      	mov	r1, r6
 80194ee:	4640      	mov	r0, r8
 80194f0:	f7ff ff66 	bl	80193c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80194f4:	8822      	ldrh	r2, [r4, #0]
 80194f6:	88a3      	ldrh	r3, [r4, #4]
 80194f8:	445f      	add	r7, fp
 80194fa:	4413      	add	r3, r2
 80194fc:	b29b      	uxth	r3, r3
 80194fe:	b2bf      	uxth	r7, r7
 8019500:	b23a      	sxth	r2, r7
 8019502:	b219      	sxth	r1, r3
 8019504:	4291      	cmp	r1, r2
 8019506:	dd0d      	ble.n	8019524 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8019508:	1bdb      	subs	r3, r3, r7
 801950a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801950e:	f8ad a012 	strh.w	sl, [sp, #18]
 8019512:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019516:	f8ad 9016 	strh.w	r9, [sp, #22]
 801951a:	69ea      	ldr	r2, [r5, #28]
 801951c:	4631      	mov	r1, r6
 801951e:	4640      	mov	r0, r8
 8019520:	f7ff ff4e 	bl	80193c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019524:	88e2      	ldrh	r2, [r4, #6]
 8019526:	8863      	ldrh	r3, [r4, #2]
 8019528:	4413      	add	r3, r2
 801952a:	9a00      	ldr	r2, [sp, #0]
 801952c:	444a      	add	r2, r9
 801952e:	b29b      	uxth	r3, r3
 8019530:	fa1f f982 	uxth.w	r9, r2
 8019534:	fa0f f289 	sxth.w	r2, r9
 8019538:	b219      	sxth	r1, r3
 801953a:	428a      	cmp	r2, r1
 801953c:	da15      	bge.n	801956a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801953e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019542:	f9b4 0000 	ldrsh.w	r0, [r4]
 8019546:	f8ad 1014 	strh.w	r1, [sp, #20]
 801954a:	eba3 0309 	sub.w	r3, r3, r9
 801954e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019552:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019556:	f8ad 3016 	strh.w	r3, [sp, #22]
 801955a:	69ea      	ldr	r2, [r5, #28]
 801955c:	4631      	mov	r1, r6
 801955e:	e001      	b.n	8019564 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8019560:	69ea      	ldr	r2, [r5, #28]
 8019562:	4621      	mov	r1, r4
 8019564:	4640      	mov	r0, r8
 8019566:	f7ff ff2b 	bl	80193c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801956a:	4628      	mov	r0, r5
 801956c:	f7ff fe96 	bl	801929c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019570:	6861      	ldr	r1, [r4, #4]
 8019572:	4602      	mov	r2, r0
 8019574:	6820      	ldr	r0, [r4, #0]
 8019576:	4633      	mov	r3, r6
 8019578:	c303      	stmia	r3!, {r0, r1}
 801957a:	4611      	mov	r1, r2
 801957c:	4630      	mov	r0, r6
 801957e:	f7fb fbab 	bl	8014cd8 <_ZN8touchgfx4RectaNERKS0_>
 8019582:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8019586:	2b00      	cmp	r3, #0
 8019588:	f77f af33 	ble.w	80193f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801958c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019590:	2b00      	cmp	r3, #0
 8019592:	f77f af2e 	ble.w	80193f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019596:	4628      	mov	r0, r5
 8019598:	f7ff fe9c 	bl	80192d4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801959c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80195a0:	1a18      	subs	r0, r3, r0
 80195a2:	f8ad 0010 	strh.w	r0, [sp, #16]
 80195a6:	4628      	mov	r0, r5
 80195a8:	f7ff fea8 	bl	80192fc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80195ac:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80195b0:	1a18      	subs	r0, r3, r0
 80195b2:	f8ad 0012 	strh.w	r0, [sp, #18]
 80195b6:	682b      	ldr	r3, [r5, #0]
 80195b8:	4631      	mov	r1, r6
 80195ba:	689b      	ldr	r3, [r3, #8]
 80195bc:	4628      	mov	r0, r5
 80195be:	4798      	blx	r3
 80195c0:	e717      	b.n	80193f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080195c2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80195c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80195c4:	aa02      	add	r2, sp, #8
 80195c6:	2300      	movs	r3, #0
 80195c8:	f842 3d04 	str.w	r3, [r2, #-4]!
 80195cc:	4604      	mov	r4, r0
 80195ce:	3004      	adds	r0, #4
 80195d0:	460d      	mov	r5, r1
 80195d2:	f7fb fc59 	bl	8014e88 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80195d6:	9a01      	ldr	r2, [sp, #4]
 80195d8:	b11a      	cbz	r2, 80195e2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 80195da:	4629      	mov	r1, r5
 80195dc:	4620      	mov	r0, r4
 80195de:	f7ff feef 	bl	80193c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80195e2:	b003      	add	sp, #12
 80195e4:	bd30      	pop	{r4, r5, pc}

080195e6 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80195e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80195e8:	4602      	mov	r2, r0
 80195ea:	4604      	mov	r4, r0
 80195ec:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80195f0:	460d      	mov	r5, r1
 80195f2:	6851      	ldr	r1, [r2, #4]
 80195f4:	466b      	mov	r3, sp
 80195f6:	c303      	stmia	r3!, {r0, r1}
 80195f8:	4629      	mov	r1, r5
 80195fa:	4668      	mov	r0, sp
 80195fc:	f7fb fb6c 	bl	8014cd8 <_ZN8touchgfx4RectaNERKS0_>
 8019600:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019604:	4669      	mov	r1, sp
 8019606:	b123      	cbz	r3, 8019612 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 8019608:	4620      	mov	r0, r4
 801960a:	f7ff ffda 	bl	80195c2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801960e:	b003      	add	sp, #12
 8019610:	bd30      	pop	{r4, r5, pc}
 8019612:	1d20      	adds	r0, r4, #4
 8019614:	f7fb fbff 	bl	8014e16 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8019618:	e7f9      	b.n	801960e <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801961a <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801961a:	680a      	ldr	r2, [r1, #0]
 801961c:	460b      	mov	r3, r1
 801961e:	6992      	ldr	r2, [r2, #24]
 8019620:	1d01      	adds	r1, r0, #4
 8019622:	4618      	mov	r0, r3
 8019624:	4710      	bx	r2

08019626 <_ZN8touchgfx12TextProviderC1Ev>:
 8019626:	b510      	push	{r4, lr}
 8019628:	2300      	movs	r3, #0
 801962a:	2201      	movs	r2, #1
 801962c:	4604      	mov	r4, r0
 801962e:	e9c0 3300 	strd	r3, r3, [r0]
 8019632:	60c3      	str	r3, [r0, #12]
 8019634:	7403      	strb	r3, [r0, #16]
 8019636:	82c3      	strh	r3, [r0, #22]
 8019638:	8303      	strh	r3, [r0, #24]
 801963a:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801963c:	8603      	strh	r3, [r0, #48]	; 0x30
 801963e:	86c3      	strh	r3, [r0, #54]	; 0x36
 8019640:	8703      	strh	r3, [r0, #56]	; 0x38
 8019642:	63c3      	str	r3, [r0, #60]	; 0x3c
 8019644:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8019648:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801964c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8019650:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 8019654:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 8019658:	f7f8 fc04 	bl	8011e64 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801965c:	4620      	mov	r0, r4
 801965e:	bd10      	pop	{r4, pc}

08019660 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8019660:	b530      	push	{r4, r5, lr}
 8019662:	2500      	movs	r5, #0
 8019664:	2401      	movs	r4, #1
 8019666:	6843      	ldr	r3, [r0, #4]
 8019668:	b913      	cbnz	r3, 8019670 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801966a:	6803      	ldr	r3, [r0, #0]
 801966c:	b1f3      	cbz	r3, 80196ac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801966e:	6043      	str	r3, [r0, #4]
 8019670:	7c03      	ldrb	r3, [r0, #16]
 8019672:	b143      	cbz	r3, 8019686 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8019674:	68c3      	ldr	r3, [r0, #12]
 8019676:	b12b      	cbz	r3, 8019684 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8019678:	881a      	ldrh	r2, [r3, #0]
 801967a:	b11a      	cbz	r2, 8019684 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801967c:	1c9a      	adds	r2, r3, #2
 801967e:	60c2      	str	r2, [r0, #12]
 8019680:	8818      	ldrh	r0, [r3, #0]
 8019682:	bd30      	pop	{r4, r5, pc}
 8019684:	7405      	strb	r5, [r0, #16]
 8019686:	6843      	ldr	r3, [r0, #4]
 8019688:	8819      	ldrh	r1, [r3, #0]
 801968a:	b179      	cbz	r1, 80196ac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801968c:	1c9a      	adds	r2, r3, #2
 801968e:	2902      	cmp	r1, #2
 8019690:	6042      	str	r2, [r0, #4]
 8019692:	d1f5      	bne.n	8019680 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8019694:	6883      	ldr	r3, [r0, #8]
 8019696:	1d1a      	adds	r2, r3, #4
 8019698:	6082      	str	r2, [r0, #8]
 801969a:	681b      	ldr	r3, [r3, #0]
 801969c:	60c3      	str	r3, [r0, #12]
 801969e:	2b00      	cmp	r3, #0
 80196a0:	d0e1      	beq.n	8019666 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80196a2:	881b      	ldrh	r3, [r3, #0]
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d0de      	beq.n	8019666 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80196a8:	7404      	strb	r4, [r0, #16]
 80196aa:	e7dc      	b.n	8019666 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80196ac:	2000      	movs	r0, #0
 80196ae:	e7e8      	b.n	8019682 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080196b0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 80196b0:	b410      	push	{r4}
 80196b2:	63c3      	str	r3, [r0, #60]	; 0x3c
 80196b4:	2300      	movs	r3, #0
 80196b6:	6082      	str	r2, [r0, #8]
 80196b8:	6001      	str	r1, [r0, #0]
 80196ba:	6043      	str	r3, [r0, #4]
 80196bc:	60c3      	str	r3, [r0, #12]
 80196be:	7403      	strb	r3, [r0, #16]
 80196c0:	8603      	strh	r3, [r0, #48]	; 0x30
 80196c2:	8303      	strh	r3, [r0, #24]
 80196c4:	8703      	strh	r3, [r0, #56]	; 0x38
 80196c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80196ca:	f7f8 bbcb 	b.w	8011e64 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080196ce <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80196ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80196d0:	4605      	mov	r5, r0
 80196d2:	4608      	mov	r0, r1
 80196d4:	b1e9      	cbz	r1, 8019712 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 80196d6:	f105 0440 	add.w	r4, r5, #64	; 0x40
 80196da:	460b      	mov	r3, r1
 80196dc:	f101 0708 	add.w	r7, r1, #8
 80196e0:	4622      	mov	r2, r4
 80196e2:	6818      	ldr	r0, [r3, #0]
 80196e4:	6859      	ldr	r1, [r3, #4]
 80196e6:	4626      	mov	r6, r4
 80196e8:	c603      	stmia	r6!, {r0, r1}
 80196ea:	3308      	adds	r3, #8
 80196ec:	42bb      	cmp	r3, r7
 80196ee:	4634      	mov	r4, r6
 80196f0:	d1f7      	bne.n	80196e2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80196f2:	6818      	ldr	r0, [r3, #0]
 80196f4:	6030      	str	r0, [r6, #0]
 80196f6:	889b      	ldrh	r3, [r3, #4]
 80196f8:	80b3      	strh	r3, [r6, #4]
 80196fa:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 80196fe:	015b      	lsls	r3, r3, #5
 8019700:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019704:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 8019708:	430b      	orrs	r3, r1
 801970a:	425b      	negs	r3, r3
 801970c:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 8019710:	4610      	mov	r0, r2
 8019712:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019714 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8019714:	b538      	push	{r3, r4, r5, lr}
 8019716:	460c      	mov	r4, r1
 8019718:	6811      	ldr	r1, [r2, #0]
 801971a:	4610      	mov	r0, r2
 801971c:	68cd      	ldr	r5, [r1, #12]
 801971e:	4619      	mov	r1, r3
 8019720:	47a8      	blx	r5
 8019722:	2800      	cmp	r0, #0
 8019724:	bf08      	it	eq
 8019726:	4620      	moveq	r0, r4
 8019728:	bd38      	pop	{r3, r4, r5, pc}
	...

0801972c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801972c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801972e:	4604      	mov	r4, r0
 8019730:	4615      	mov	r5, r2
 8019732:	4608      	mov	r0, r1
 8019734:	b93a      	cbnz	r2, 8019746 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8019736:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801973a:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801973e:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8019742:	4628      	mov	r0, r5
 8019744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019746:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801974a:	8893      	ldrh	r3, [r2, #4]
 801974c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8019750:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8019754:	79ee      	ldrb	r6, [r5, #7]
 8019756:	4316      	orrs	r6, r2
 8019758:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801975c:	189a      	adds	r2, r3, r2
 801975e:	b291      	uxth	r1, r2
 8019760:	291d      	cmp	r1, #29
 8019762:	b2b7      	uxth	r7, r6
 8019764:	f200 8083 	bhi.w	801986e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 8019768:	2201      	movs	r2, #1
 801976a:	408a      	lsls	r2, r1
 801976c:	4978      	ldr	r1, [pc, #480]	; (8019950 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801976e:	420a      	tst	r2, r1
 8019770:	ea4f 06e6 	mov.w	r6, r6, asr #3
 8019774:	d12d      	bne.n	80197d2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8019776:	f412 7f60 	tst.w	r2, #896	; 0x380
 801977a:	d078      	beq.n	801986e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 801977c:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8019780:	462b      	mov	r3, r5
 8019782:	f105 0e08 	add.w	lr, r5, #8
 8019786:	4615      	mov	r5, r2
 8019788:	6818      	ldr	r0, [r3, #0]
 801978a:	6859      	ldr	r1, [r3, #4]
 801978c:	4694      	mov	ip, r2
 801978e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8019792:	3308      	adds	r3, #8
 8019794:	4573      	cmp	r3, lr
 8019796:	4662      	mov	r2, ip
 8019798:	d1f6      	bne.n	8019788 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5c>
 801979a:	6818      	ldr	r0, [r3, #0]
 801979c:	f8cc 0000 	str.w	r0, [ip]
 80197a0:	889b      	ldrh	r3, [r3, #4]
 80197a2:	f8ac 3004 	strh.w	r3, [ip, #4]
 80197a6:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 80197aa:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 80197ae:	b2b3      	uxth	r3, r6
 80197b0:	1aca      	subs	r2, r1, r3
 80197b2:	b292      	uxth	r2, r2
 80197b4:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 80197b8:	10d2      	asrs	r2, r2, #3
 80197ba:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80197be:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80197c2:	4302      	orrs	r2, r0
 80197c4:	1bcf      	subs	r7, r1, r7
 80197c6:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 80197ca:	1afb      	subs	r3, r7, r3
 80197cc:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 80197d0:	e7b7      	b.n	8019742 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80197d2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80197d4:	b92b      	cbnz	r3, 80197e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 80197d6:	4b5f      	ldr	r3, [pc, #380]	; (8019954 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 80197d8:	4a5f      	ldr	r2, [pc, #380]	; (8019958 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 80197da:	4860      	ldr	r0, [pc, #384]	; (801995c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 80197dc:	21c0      	movs	r1, #192	; 0xc0
 80197de:	f00d fa21 	bl	8026c24 <__assert_func>
 80197e2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80197e4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80197e8:	8b59      	ldrh	r1, [r3, #26]
 80197ea:	f640 6333 	movw	r3, #3635	; 0xe33
 80197ee:	4299      	cmp	r1, r3
 80197f0:	d110      	bne.n	8019814 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 80197f2:	6803      	ldr	r3, [r0, #0]
 80197f4:	68db      	ldr	r3, [r3, #12]
 80197f6:	4798      	blx	r3
 80197f8:	7b41      	ldrb	r1, [r0, #13]
 80197fa:	00cb      	lsls	r3, r1, #3
 80197fc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019800:	7a03      	ldrb	r3, [r0, #8]
 8019802:	0648      	lsls	r0, r1, #25
 8019804:	ea43 0302 	orr.w	r3, r3, r2
 8019808:	bf44      	itt	mi
 801980a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801980e:	b21b      	sxthmi	r3, r3
 8019810:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8019814:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 8019818:	443b      	add	r3, r7
 801981a:	4433      	add	r3, r6
 801981c:	b29b      	uxth	r3, r3
 801981e:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8019822:	462a      	mov	r2, r5
 8019824:	f105 0c08 	add.w	ip, r5, #8
 8019828:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801982c:	4635      	mov	r5, r6
 801982e:	6810      	ldr	r0, [r2, #0]
 8019830:	6851      	ldr	r1, [r2, #4]
 8019832:	4637      	mov	r7, r6
 8019834:	c703      	stmia	r7!, {r0, r1}
 8019836:	3208      	adds	r2, #8
 8019838:	4562      	cmp	r2, ip
 801983a:	463e      	mov	r6, r7
 801983c:	d1f7      	bne.n	801982e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801983e:	6810      	ldr	r0, [r2, #0]
 8019840:	6038      	str	r0, [r7, #0]
 8019842:	8892      	ldrh	r2, [r2, #4]
 8019844:	80ba      	strh	r2, [r7, #4]
 8019846:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801984a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801984e:	10db      	asrs	r3, r3, #3
 8019850:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019854:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019858:	4313      	orrs	r3, r2
 801985a:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801985e:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8019862:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8019866:	1a9b      	subs	r3, r3, r2
 8019868:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801986c:	e769      	b.n	8019742 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801986e:	f023 0204 	bic.w	r2, r3, #4
 8019872:	f640 611b 	movw	r1, #3611	; 0xe1b
 8019876:	428a      	cmp	r2, r1
 8019878:	d003      	beq.n	8019882 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x156>
 801987a:	f640 621d 	movw	r2, #3613	; 0xe1d
 801987e:	4293      	cmp	r3, r2
 8019880:	d120      	bne.n	80198c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x198>
 8019882:	3b01      	subs	r3, #1
 8019884:	4602      	mov	r2, r0
 8019886:	b29b      	uxth	r3, r3
 8019888:	4629      	mov	r1, r5
 801988a:	4620      	mov	r0, r4
 801988c:	f7ff ff42 	bl	8019714 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019890:	7b41      	ldrb	r1, [r0, #13]
 8019892:	00cb      	lsls	r3, r1, #3
 8019894:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019898:	7a03      	ldrb	r3, [r0, #8]
 801989a:	0649      	lsls	r1, r1, #25
 801989c:	ea43 0302 	orr.w	r3, r3, r2
 80198a0:	bf44      	itt	mi
 80198a2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80198a6:	b21b      	sxthmi	r3, r3
 80198a8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 80198ac:	7b6b      	ldrb	r3, [r5, #13]
 80198ae:	7aaa      	ldrb	r2, [r5, #10]
 80198b0:	005b      	lsls	r3, r3, #1
 80198b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80198b6:	4313      	orrs	r3, r2
 80198b8:	115a      	asrs	r2, r3, #5
 80198ba:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80198be:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80198c2:	e036      	b.n	8019932 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 80198c4:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80198c8:	f402 7180 	and.w	r1, r2, #256	; 0x100
 80198cc:	7a2a      	ldrb	r2, [r5, #8]
 80198ce:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80198d2:	ea42 0201 	orr.w	r2, r2, r1
 80198d6:	bf1c      	itt	ne
 80198d8:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 80198dc:	b212      	sxthne	r2, r2
 80198de:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 80198e2:	f640 6109 	movw	r1, #3593	; 0xe09
 80198e6:	f023 0210 	bic.w	r2, r3, #16
 80198ea:	428a      	cmp	r2, r1
 80198ec:	d003      	beq.n	80198f6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ca>
 80198ee:	f640 6213 	movw	r2, #3603	; 0xe13
 80198f2:	4293      	cmp	r3, r2
 80198f4:	d12a      	bne.n	801994c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 80198f6:	7b6e      	ldrb	r6, [r5, #13]
 80198f8:	0076      	lsls	r6, r6, #1
 80198fa:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80198fe:	7aae      	ldrb	r6, [r5, #10]
 8019900:	4316      	orrs	r6, r2
 8019902:	f640 6213 	movw	r2, #3603	; 0xe13
 8019906:	4293      	cmp	r3, r2
 8019908:	bf18      	it	ne
 801990a:	f103 33ff 	addne.w	r3, r3, #4294967295
 801990e:	4602      	mov	r2, r0
 8019910:	bf14      	ite	ne
 8019912:	b29b      	uxthne	r3, r3
 8019914:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8019918:	4629      	mov	r1, r5
 801991a:	4620      	mov	r0, r4
 801991c:	f7ff fefa 	bl	8019714 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019920:	7b43      	ldrb	r3, [r0, #13]
 8019922:	7a82      	ldrb	r2, [r0, #10]
 8019924:	005b      	lsls	r3, r3, #1
 8019926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801992a:	4313      	orrs	r3, r2
 801992c:	1af6      	subs	r6, r6, r3
 801992e:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 8019932:	7b69      	ldrb	r1, [r5, #13]
 8019934:	00cb      	lsls	r3, r1, #3
 8019936:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801993a:	7a2b      	ldrb	r3, [r5, #8]
 801993c:	4313      	orrs	r3, r2
 801993e:	064a      	lsls	r2, r1, #25
 8019940:	bf44      	itt	mi
 8019942:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019946:	b21b      	sxthmi	r3, r3
 8019948:	1bdb      	subs	r3, r3, r7
 801994a:	e73f      	b.n	80197cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801994c:	2300      	movs	r3, #0
 801994e:	e7b6      	b.n	80198be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x192>
 8019950:	3fc00079 	.word	0x3fc00079
 8019954:	0802bcfc 	.word	0x0802bcfc
 8019958:	0802bf6e 	.word	0x0802bf6e
 801995c:	0802bd05 	.word	0x0802bd05

08019960 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8019960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019964:	4604      	mov	r4, r0
 8019966:	b942      	cbnz	r2, 801997a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8019968:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801996c:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8019970:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8019974:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8019978:	e046      	b.n	8019a08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801997a:	7b51      	ldrb	r1, [r2, #13]
 801997c:	8893      	ldrh	r3, [r2, #4]
 801997e:	010f      	lsls	r7, r1, #4
 8019980:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8019984:	79d7      	ldrb	r7, [r2, #7]
 8019986:	4307      	orrs	r7, r0
 8019988:	2f04      	cmp	r7, #4
 801998a:	b2bd      	uxth	r5, r7
 801998c:	bfcc      	ite	gt
 801998e:	08bf      	lsrgt	r7, r7, #2
 8019990:	2701      	movle	r7, #1
 8019992:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8019996:	f200 80ab 	bhi.w	8019af0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801999a:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801999e:	4283      	cmp	r3, r0
 80199a0:	d216      	bcs.n	80199d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80199a2:	f240 605b 	movw	r0, #1627	; 0x65b
 80199a6:	4283      	cmp	r3, r0
 80199a8:	d859      	bhi.n	8019a5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 80199aa:	f240 6057 	movw	r0, #1623	; 0x657
 80199ae:	4283      	cmp	r3, r0
 80199b0:	d20e      	bcs.n	80199d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80199b2:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80199b6:	d24a      	bcs.n	8019a4e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 80199b8:	f240 604e 	movw	r0, #1614	; 0x64e
 80199bc:	4283      	cmp	r3, r0
 80199be:	d207      	bcs.n	80199d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80199c0:	f240 601a 	movw	r0, #1562	; 0x61a
 80199c4:	4283      	cmp	r3, r0
 80199c6:	d02a      	beq.n	8019a1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80199c8:	d821      	bhi.n	8019a0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 80199ca:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 80199ce:	d35b      	bcc.n	8019a88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80199d0:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 80199d4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80199d8:	f040 80d0 	bne.w	8019b7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 80199dc:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 80199e0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80199e4:	f040 80ca 	bne.w	8019b7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 80199e8:	00cb      	lsls	r3, r1, #3
 80199ea:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80199ee:	7a13      	ldrb	r3, [r2, #8]
 80199f0:	0649      	lsls	r1, r1, #25
 80199f2:	ea43 0300 	orr.w	r3, r3, r0
 80199f6:	bf44      	itt	mi
 80199f8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80199fc:	b21b      	sxthmi	r3, r3
 80199fe:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8019a02:	1b5d      	subs	r5, r3, r5
 8019a04:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8019a08:	4610      	mov	r0, r2
 8019a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019a0e:	f240 604b 	movw	r0, #1611	; 0x64b
 8019a12:	4283      	cmp	r3, r0
 8019a14:	d338      	bcc.n	8019a88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8019a16:	f240 604c 	movw	r0, #1612	; 0x64c
 8019a1a:	4283      	cmp	r3, r0
 8019a1c:	d9d8      	bls.n	80199d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019a1e:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 8019a22:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 8019a26:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019a2a:	f040 80f1 	bne.w	8019c10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 8019a2e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019a32:	f040 80ed 	bne.w	8019c10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 8019a36:	00cb      	lsls	r3, r1, #3
 8019a38:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019a3c:	7a13      	ldrb	r3, [r2, #8]
 8019a3e:	064e      	lsls	r6, r1, #25
 8019a40:	ea43 0300 	orr.w	r3, r3, r0
 8019a44:	bf44      	itt	mi
 8019a46:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019a4a:	b21b      	sxthmi	r3, r3
 8019a4c:	e7d9      	b.n	8019a02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8019a4e:	f240 6054 	movw	r0, #1620	; 0x654
 8019a52:	4283      	cmp	r3, r0
 8019a54:	d8e3      	bhi.n	8019a1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8019a56:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8019a5a:	d9e0      	bls.n	8019a1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8019a5c:	e7b8      	b.n	80199d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019a5e:	f240 6074 	movw	r0, #1652	; 0x674
 8019a62:	4283      	cmp	r3, r0
 8019a64:	d0b4      	beq.n	80199d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019a66:	d82d      	bhi.n	8019ac4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 8019a68:	f240 605e 	movw	r0, #1630	; 0x65e
 8019a6c:	4283      	cmp	r3, r0
 8019a6e:	d804      	bhi.n	8019a7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 8019a70:	f240 605d 	movw	r0, #1629	; 0x65d
 8019a74:	4283      	cmp	r3, r0
 8019a76:	d3d2      	bcc.n	8019a1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8019a78:	e7aa      	b.n	80199d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019a7a:	f240 605f 	movw	r0, #1631	; 0x65f
 8019a7e:	4283      	cmp	r3, r0
 8019a80:	d0cd      	beq.n	8019a1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8019a82:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8019a86:	d0a3      	beq.n	80199d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019a88:	00cb      	lsls	r3, r1, #3
 8019a8a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019a8e:	7a13      	ldrb	r3, [r2, #8]
 8019a90:	0649      	lsls	r1, r1, #25
 8019a92:	ea43 0300 	orr.w	r3, r3, r0
 8019a96:	bf44      	itt	mi
 8019a98:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019a9c:	b21b      	sxthmi	r3, r3
 8019a9e:	1b5d      	subs	r5, r3, r5
 8019aa0:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8019aa4:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8019aa8:	7b53      	ldrb	r3, [r2, #13]
 8019aaa:	015b      	lsls	r3, r3, #5
 8019aac:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019ab0:	7993      	ldrb	r3, [r2, #6]
 8019ab2:	430b      	orrs	r3, r1
 8019ab4:	005b      	lsls	r3, r3, #1
 8019ab6:	2105      	movs	r1, #5
 8019ab8:	fb93 f3f1 	sdiv	r3, r3, r1
 8019abc:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8019ac0:	440b      	add	r3, r1
 8019ac2:	e757      	b.n	8019974 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8019ac4:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8019ac8:	4283      	cmp	r3, r0
 8019aca:	d809      	bhi.n	8019ae0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 8019acc:	f240 60df 	movw	r0, #1759	; 0x6df
 8019ad0:	4283      	cmp	r3, r0
 8019ad2:	f4bf af7d 	bcs.w	80199d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019ad6:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8019ada:	2b05      	cmp	r3, #5
 8019adc:	d8d4      	bhi.n	8019a88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8019ade:	e777      	b.n	80199d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019ae0:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8019ae4:	4283      	cmp	r3, r0
 8019ae6:	d09a      	beq.n	8019a1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8019ae8:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8019aec:	4283      	cmp	r3, r0
 8019aee:	e7ca      	b.n	8019a86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8019af0:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8019af4:	d22b      	bcs.n	8019b4e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 8019af6:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8019afa:	4283      	cmp	r3, r0
 8019afc:	d28f      	bcs.n	8019a1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8019afe:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8019b02:	4283      	cmp	r3, r0
 8019b04:	d816      	bhi.n	8019b34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 8019b06:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8019b0a:	4283      	cmp	r3, r0
 8019b0c:	f4bf af60 	bcs.w	80199d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019b10:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8019b14:	4283      	cmp	r3, r0
 8019b16:	d80a      	bhi.n	8019b2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 8019b18:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8019b1c:	4283      	cmp	r3, r0
 8019b1e:	f4bf af57 	bcs.w	80199d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019b22:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8019b26:	4283      	cmp	r3, r0
 8019b28:	f43f af79 	beq.w	8019a1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8019b2c:	e7ac      	b.n	8019a88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8019b2e:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8019b32:	e7f8      	b.n	8019b26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8019b34:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8019b38:	4283      	cmp	r3, r0
 8019b3a:	d802      	bhi.n	8019b42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8019b3c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8019b40:	e798      	b.n	8019a74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 8019b42:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8019b46:	4283      	cmp	r3, r0
 8019b48:	f47f af42 	bne.w	80199d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019b4c:	e767      	b.n	8019a1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8019b4e:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8019b52:	4283      	cmp	r3, r0
 8019b54:	f43f af63 	beq.w	8019a1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8019b58:	d802      	bhi.n	8019b60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 8019b5a:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8019b5e:	e7f2      	b.n	8019b46 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 8019b60:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8019b64:	4283      	cmp	r3, r0
 8019b66:	d805      	bhi.n	8019b74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 8019b68:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8019b6c:	4283      	cmp	r3, r0
 8019b6e:	f4ff af2f 	bcc.w	80199d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8019b72:	e754      	b.n	8019a1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8019b74:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8019b78:	4283      	cmp	r3, r0
 8019b7a:	e7af      	b.n	8019adc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 8019b7c:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8019b80:	4617      	mov	r7, r2
 8019b82:	f102 0808 	add.w	r8, r2, #8
 8019b86:	4666      	mov	r6, ip
 8019b88:	6838      	ldr	r0, [r7, #0]
 8019b8a:	6879      	ldr	r1, [r7, #4]
 8019b8c:	46e6      	mov	lr, ip
 8019b8e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8019b92:	3708      	adds	r7, #8
 8019b94:	4547      	cmp	r7, r8
 8019b96:	46f4      	mov	ip, lr
 8019b98:	d1f6      	bne.n	8019b88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 8019b9a:	6838      	ldr	r0, [r7, #0]
 8019b9c:	f8ce 0000 	str.w	r0, [lr]
 8019ba0:	88b9      	ldrh	r1, [r7, #4]
 8019ba2:	f8ae 1004 	strh.w	r1, [lr, #4]
 8019ba6:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 8019baa:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019bae:	d009      	beq.n	8019bc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x264>
 8019bb0:	7b51      	ldrb	r1, [r2, #13]
 8019bb2:	7992      	ldrb	r2, [r2, #6]
 8019bb4:	0149      	lsls	r1, r1, #5
 8019bb6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019bba:	4311      	orrs	r1, r2
 8019bbc:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8019bc0:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 8019bc4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019bc8:	d00d      	beq.n	8019be6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x286>
 8019bca:	442b      	add	r3, r5
 8019bcc:	b29b      	uxth	r3, r3
 8019bce:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8019bd2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8019bd6:	10db      	asrs	r3, r3, #3
 8019bd8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019bdc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019be0:	4313      	orrs	r3, r2
 8019be2:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8019be6:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8019bea:	00cb      	lsls	r3, r1, #3
 8019bec:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019bf0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8019bf4:	064f      	lsls	r7, r1, #25
 8019bf6:	ea43 0302 	orr.w	r3, r3, r2
 8019bfa:	bf44      	itt	mi
 8019bfc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019c00:	b21b      	sxthmi	r3, r3
 8019c02:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8019c06:	1b5d      	subs	r5, r3, r5
 8019c08:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8019c0c:	4632      	mov	r2, r6
 8019c0e:	e6fb      	b.n	8019a08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8019c10:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8019c14:	4694      	mov	ip, r2
 8019c16:	f102 0908 	add.w	r9, r2, #8
 8019c1a:	4676      	mov	r6, lr
 8019c1c:	f8dc 0000 	ldr.w	r0, [ip]
 8019c20:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8019c24:	46f0      	mov	r8, lr
 8019c26:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8019c2a:	f10c 0c08 	add.w	ip, ip, #8
 8019c2e:	45cc      	cmp	ip, r9
 8019c30:	46c6      	mov	lr, r8
 8019c32:	d1f3      	bne.n	8019c1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2bc>
 8019c34:	f8dc 0000 	ldr.w	r0, [ip]
 8019c38:	f8c8 0000 	str.w	r0, [r8]
 8019c3c:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8019c40:	f8a8 1004 	strh.w	r1, [r8, #4]
 8019c44:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 8019c48:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019c4c:	d009      	beq.n	8019c62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x302>
 8019c4e:	7b51      	ldrb	r1, [r2, #13]
 8019c50:	7992      	ldrb	r2, [r2, #6]
 8019c52:	0149      	lsls	r1, r1, #5
 8019c54:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019c58:	4311      	orrs	r1, r2
 8019c5a:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8019c5e:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 8019c62:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019c66:	d00d      	beq.n	8019c84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8019c68:	1bdb      	subs	r3, r3, r7
 8019c6a:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8019c6e:	b29b      	uxth	r3, r3
 8019c70:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8019c74:	10db      	asrs	r3, r3, #3
 8019c76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019c7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019c7e:	4313      	orrs	r3, r2
 8019c80:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8019c84:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8019c88:	00cb      	lsls	r3, r1, #3
 8019c8a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019c8e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8019c92:	0648      	lsls	r0, r1, #25
 8019c94:	ea43 0302 	orr.w	r3, r3, r2
 8019c98:	bf44      	itt	mi
 8019c9a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019c9e:	b21b      	sxthmi	r3, r3
 8019ca0:	e7b1      	b.n	8019c06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a6>
	...

08019ca4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8019ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ca8:	461e      	mov	r6, r3
 8019caa:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8019cac:	4604      	mov	r4, r0
 8019cae:	4617      	mov	r7, r2
 8019cb0:	b92b      	cbnz	r3, 8019cbe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 8019cb2:	4b25      	ldr	r3, [pc, #148]	; (8019d48 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 8019cb4:	4a25      	ldr	r2, [pc, #148]	; (8019d4c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 8019cb6:	4826      	ldr	r0, [pc, #152]	; (8019d50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 8019cb8:	21c0      	movs	r1, #192	; 0xc0
 8019cba:	f00c ffb3 	bl	8026c24 <__assert_func>
 8019cbe:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8019cc0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019cc4:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8019cc8:	f7f8 f826 	bl	8011d18 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019ccc:	4605      	mov	r5, r0
 8019cce:	b918      	cbnz	r0, 8019cd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 8019cd0:	6030      	str	r0, [r6, #0]
 8019cd2:	4628      	mov	r0, r5
 8019cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019cd8:	683b      	ldr	r3, [r7, #0]
 8019cda:	4601      	mov	r1, r0
 8019cdc:	68db      	ldr	r3, [r3, #12]
 8019cde:	4638      	mov	r0, r7
 8019ce0:	4798      	blx	r3
 8019ce2:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8019ce6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019cea:	4602      	mov	r2, r0
 8019cec:	6030      	str	r0, [r6, #0]
 8019cee:	d213      	bcs.n	8019d18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 8019cf0:	4643      	mov	r3, r8
 8019cf2:	4639      	mov	r1, r7
 8019cf4:	4620      	mov	r0, r4
 8019cf6:	f7ff fe33 	bl	8019960 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8019cfa:	6030      	str	r0, [r6, #0]
 8019cfc:	6833      	ldr	r3, [r6, #0]
 8019cfe:	b143      	cbz	r3, 8019d12 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 8019d00:	7b5a      	ldrb	r2, [r3, #13]
 8019d02:	7a9b      	ldrb	r3, [r3, #10]
 8019d04:	0052      	lsls	r2, r2, #1
 8019d06:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019d0a:	4313      	orrs	r3, r2
 8019d0c:	bf0c      	ite	eq
 8019d0e:	2301      	moveq	r3, #1
 8019d10:	2300      	movne	r3, #0
 8019d12:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8019d16:	e7dc      	b.n	8019cd2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 8019d18:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8019d1c:	b29b      	uxth	r3, r3
 8019d1e:	2b7f      	cmp	r3, #127	; 0x7f
 8019d20:	d804      	bhi.n	8019d2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 8019d22:	4639      	mov	r1, r7
 8019d24:	4620      	mov	r0, r4
 8019d26:	f7ff fd01 	bl	801972c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8019d2a:	e7e6      	b.n	8019cfa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8019d2c:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8019d30:	2b00      	cmp	r3, #0
 8019d32:	d0e3      	beq.n	8019cfc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8019d34:	f640 1302 	movw	r3, #2306	; 0x902
 8019d38:	429d      	cmp	r5, r3
 8019d3a:	d1df      	bne.n	8019cfc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8019d3c:	4601      	mov	r1, r0
 8019d3e:	4620      	mov	r0, r4
 8019d40:	f7ff fcc5 	bl	80196ce <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8019d44:	e7d9      	b.n	8019cfa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8019d46:	bf00      	nop
 8019d48:	0802bcfc 	.word	0x0802bcfc
 8019d4c:	0802bf6e 	.word	0x0802bf6e
 8019d50:	0802bd05 	.word	0x0802bd05

08019d54 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8019d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019d58:	461e      	mov	r6, r3
 8019d5a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8019d5c:	4604      	mov	r4, r0
 8019d5e:	4617      	mov	r7, r2
 8019d60:	b92b      	cbnz	r3, 8019d6e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 8019d62:	4b26      	ldr	r3, [pc, #152]	; (8019dfc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 8019d64:	4a26      	ldr	r2, [pc, #152]	; (8019e00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 8019d66:	4827      	ldr	r0, [pc, #156]	; (8019e04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 8019d68:	21c0      	movs	r1, #192	; 0xc0
 8019d6a:	f00c ff5b 	bl	8026c24 <__assert_func>
 8019d6e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8019d70:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019d74:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8019d78:	f7f7 ffce 	bl	8011d18 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019d7c:	4605      	mov	r5, r0
 8019d7e:	b918      	cbnz	r0, 8019d88 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 8019d80:	6030      	str	r0, [r6, #0]
 8019d82:	4628      	mov	r0, r5
 8019d84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019d88:	683b      	ldr	r3, [r7, #0]
 8019d8a:	4601      	mov	r1, r0
 8019d8c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8019d90:	4638      	mov	r0, r7
 8019d92:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8019d96:	47c8      	blx	r9
 8019d98:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8019d9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019da0:	4602      	mov	r2, r0
 8019da2:	6030      	str	r0, [r6, #0]
 8019da4:	d213      	bcs.n	8019dce <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 8019da6:	4643      	mov	r3, r8
 8019da8:	4639      	mov	r1, r7
 8019daa:	4620      	mov	r0, r4
 8019dac:	f7ff fdd8 	bl	8019960 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8019db0:	6030      	str	r0, [r6, #0]
 8019db2:	6833      	ldr	r3, [r6, #0]
 8019db4:	b143      	cbz	r3, 8019dc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 8019db6:	7b5a      	ldrb	r2, [r3, #13]
 8019db8:	7a9b      	ldrb	r3, [r3, #10]
 8019dba:	0052      	lsls	r2, r2, #1
 8019dbc:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019dc0:	4313      	orrs	r3, r2
 8019dc2:	bf0c      	ite	eq
 8019dc4:	2301      	moveq	r3, #1
 8019dc6:	2300      	movne	r3, #0
 8019dc8:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8019dcc:	e7d9      	b.n	8019d82 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 8019dce:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8019dd2:	b29b      	uxth	r3, r3
 8019dd4:	2b7f      	cmp	r3, #127	; 0x7f
 8019dd6:	d804      	bhi.n	8019de2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 8019dd8:	4639      	mov	r1, r7
 8019dda:	4620      	mov	r0, r4
 8019ddc:	f7ff fca6 	bl	801972c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8019de0:	e7e6      	b.n	8019db0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8019de2:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	d0e3      	beq.n	8019db2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8019dea:	f640 1302 	movw	r3, #2306	; 0x902
 8019dee:	429d      	cmp	r5, r3
 8019df0:	d1df      	bne.n	8019db2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8019df2:	4601      	mov	r1, r0
 8019df4:	4620      	mov	r0, r4
 8019df6:	f7ff fc6a 	bl	80196ce <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8019dfa:	e7d9      	b.n	8019db0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8019dfc:	0802bcfc 	.word	0x0802bcfc
 8019e00:	0802bf6e 	.word	0x0802bf6e
 8019e04:	0802bd05 	.word	0x0802bd05

08019e08 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8019e08:	b510      	push	{r4, lr}
 8019e0a:	4604      	mov	r4, r0
 8019e0c:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8019e0e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019e10:	b9d9      	cbnz	r1, 8019e4a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 8019e12:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019e14:	2b0a      	cmp	r3, #10
 8019e16:	d036      	beq.n	8019e86 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 8019e18:	4620      	mov	r0, r4
 8019e1a:	f7ff fc21 	bl	8019660 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8019e1e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019e20:	2b09      	cmp	r3, #9
 8019e22:	d906      	bls.n	8019e32 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 8019e24:	4b18      	ldr	r3, [pc, #96]	; (8019e88 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 8019e26:	4a19      	ldr	r2, [pc, #100]	; (8019e8c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 8019e28:	4819      	ldr	r0, [pc, #100]	; (8019e90 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 8019e2a:	f44f 7182 	mov.w	r1, #260	; 0x104
 8019e2e:	f00c fef9 	bl	8026c24 <__assert_func>
 8019e32:	1c5a      	adds	r2, r3, #1
 8019e34:	8622      	strh	r2, [r4, #48]	; 0x30
 8019e36:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8019e38:	4413      	add	r3, r2
 8019e3a:	b29b      	uxth	r3, r3
 8019e3c:	2b09      	cmp	r3, #9
 8019e3e:	bf88      	it	hi
 8019e40:	3b0a      	subhi	r3, #10
 8019e42:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019e46:	8358      	strh	r0, [r3, #26]
 8019e48:	e7e3      	b.n	8019e12 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 8019e4a:	2b0a      	cmp	r3, #10
 8019e4c:	d01b      	beq.n	8019e86 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 8019e4e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8019e50:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8019e54:	3901      	subs	r1, #1
 8019e56:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 8019e58:	8721      	strh	r1, [r4, #56]	; 0x38
 8019e5a:	1c51      	adds	r1, r2, #1
 8019e5c:	b289      	uxth	r1, r1
 8019e5e:	2901      	cmp	r1, #1
 8019e60:	bf8a      	itet	hi
 8019e62:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019e66:	86e1      	strhls	r1, [r4, #54]	; 0x36
 8019e68:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 8019e6a:	2b09      	cmp	r3, #9
 8019e6c:	d8da      	bhi.n	8019e24 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 8019e6e:	1c5a      	adds	r2, r3, #1
 8019e70:	8622      	strh	r2, [r4, #48]	; 0x30
 8019e72:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8019e74:	4413      	add	r3, r2
 8019e76:	b29b      	uxth	r3, r3
 8019e78:	2b09      	cmp	r3, #9
 8019e7a:	bf88      	it	hi
 8019e7c:	3b0a      	subhi	r3, #10
 8019e7e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019e82:	8358      	strh	r0, [r3, #26]
 8019e84:	e7c2      	b.n	8019e0c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8019e86:	bd10      	pop	{r4, pc}
 8019e88:	0802bd31 	.word	0x0802bd31
 8019e8c:	0802c0c4 	.word	0x0802c0c4
 8019e90:	0802bd05 	.word	0x0802bd05

08019e94 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8019e94:	b538      	push	{r3, r4, r5, lr}
 8019e96:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8019e98:	4604      	mov	r4, r0
 8019e9a:	b92a      	cbnz	r2, 8019ea8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8019e9c:	4b13      	ldr	r3, [pc, #76]	; (8019eec <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8019e9e:	4a14      	ldr	r2, [pc, #80]	; (8019ef0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8019ea0:	4814      	ldr	r0, [pc, #80]	; (8019ef4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 8019ea2:	21d5      	movs	r1, #213	; 0xd5
 8019ea4:	f00c febe 	bl	8026c24 <__assert_func>
 8019ea8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8019eaa:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8019eae:	3a01      	subs	r2, #1
 8019eb0:	8b4d      	ldrh	r5, [r1, #26]
 8019eb2:	8602      	strh	r2, [r0, #48]	; 0x30
 8019eb4:	1c5a      	adds	r2, r3, #1
 8019eb6:	b292      	uxth	r2, r2
 8019eb8:	2a09      	cmp	r2, #9
 8019eba:	bf86      	itte	hi
 8019ebc:	3b09      	subhi	r3, #9
 8019ebe:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 8019ec0:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 8019ec2:	f7ff ffa1 	bl	8019e08 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8019ec6:	8b23      	ldrh	r3, [r4, #24]
 8019ec8:	2b01      	cmp	r3, #1
 8019eca:	bf9c      	itt	ls
 8019ecc:	3301      	addls	r3, #1
 8019ece:	8323      	strhls	r3, [r4, #24]
 8019ed0:	8ae3      	ldrh	r3, [r4, #22]
 8019ed2:	b90b      	cbnz	r3, 8019ed8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 8019ed4:	2302      	movs	r3, #2
 8019ed6:	82e3      	strh	r3, [r4, #22]
 8019ed8:	8ae3      	ldrh	r3, [r4, #22]
 8019eda:	3b01      	subs	r3, #1
 8019edc:	b29b      	uxth	r3, r3
 8019ede:	82e3      	strh	r3, [r4, #22]
 8019ee0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019ee4:	4628      	mov	r0, r5
 8019ee6:	8265      	strh	r5, [r4, #18]
 8019ee8:	bd38      	pop	{r3, r4, r5, pc}
 8019eea:	bf00      	nop
 8019eec:	0802bcfc 	.word	0x0802bcfc
 8019ef0:	0802c019 	.word	0x0802c019
 8019ef4:	0802bd05 	.word	0x0802bd05

08019ef8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8019ef8:	b538      	push	{r3, r4, r5, lr}
 8019efa:	428a      	cmp	r2, r1
 8019efc:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 8019efe:	d90c      	bls.n	8019f1a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8019f00:	b92c      	cbnz	r4, 8019f0e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 8019f02:	4b1c      	ldr	r3, [pc, #112]	; (8019f74 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 8019f04:	4a1c      	ldr	r2, [pc, #112]	; (8019f78 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8019f06:	21e1      	movs	r1, #225	; 0xe1
 8019f08:	481c      	ldr	r0, [pc, #112]	; (8019f7c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 8019f0a:	f00c fe8b 	bl	8026c24 <__assert_func>
 8019f0e:	3c01      	subs	r4, #1
 8019f10:	8604      	strh	r4, [r0, #48]	; 0x30
 8019f12:	4b1b      	ldr	r3, [pc, #108]	; (8019f80 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 8019f14:	4a1b      	ldr	r2, [pc, #108]	; (8019f84 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 8019f16:	21c5      	movs	r1, #197	; 0xc5
 8019f18:	e7f6      	b.n	8019f08 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8019f1a:	428c      	cmp	r4, r1
 8019f1c:	d203      	bcs.n	8019f26 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 8019f1e:	4b1a      	ldr	r3, [pc, #104]	; (8019f88 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 8019f20:	4a1a      	ldr	r2, [pc, #104]	; (8019f8c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 8019f22:	21cb      	movs	r1, #203	; 0xcb
 8019f24:	e7f0      	b.n	8019f08 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8019f26:	1a64      	subs	r4, r4, r1
 8019f28:	8604      	strh	r4, [r0, #48]	; 0x30
 8019f2a:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8019f2c:	4421      	add	r1, r4
 8019f2e:	b289      	uxth	r1, r1
 8019f30:	2909      	cmp	r1, #9
 8019f32:	bf88      	it	hi
 8019f34:	390a      	subhi	r1, #10
 8019f36:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8019f38:	250a      	movs	r5, #10
 8019f3a:	b1ba      	cbz	r2, 8019f6c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8019f3c:	3a01      	subs	r2, #1
 8019f3e:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 8019f40:	b292      	uxth	r2, r2
 8019f42:	2909      	cmp	r1, #9
 8019f44:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8019f48:	d903      	bls.n	8019f52 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8019f4a:	4b11      	ldr	r3, [pc, #68]	; (8019f90 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8019f4c:	4a11      	ldr	r2, [pc, #68]	; (8019f94 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 8019f4e:	21e6      	movs	r1, #230	; 0xe6
 8019f50:	e7da      	b.n	8019f08 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8019f52:	3101      	adds	r1, #1
 8019f54:	8601      	strh	r1, [r0, #48]	; 0x30
 8019f56:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 8019f58:	b901      	cbnz	r1, 8019f5c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8019f5a:	85c5      	strh	r5, [r0, #46]	; 0x2e
 8019f5c:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 8019f5e:	3901      	subs	r1, #1
 8019f60:	b289      	uxth	r1, r1
 8019f62:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8019f64:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8019f68:	834c      	strh	r4, [r1, #26]
 8019f6a:	e7e6      	b.n	8019f3a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8019f6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019f70:	f7ff bf4a 	b.w	8019e08 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8019f74:	0802bcfc 	.word	0x0802bcfc
 8019f78:	0802bdf2 	.word	0x0802bdf2
 8019f7c:	0802bd05 	.word	0x0802bd05
 8019f80:	0802bd3d 	.word	0x0802bd3d
 8019f84:	0802be9c 	.word	0x0802be9c
 8019f88:	0802bd4b 	.word	0x0802bd4b
 8019f8c:	0802c173 	.word	0x0802c173
 8019f90:	0802bd57 	.word	0x0802bd57
 8019f94:	0802bd6a 	.word	0x0802bd6a

08019f98 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8019f98:	3a01      	subs	r2, #1
 8019f9a:	b570      	push	{r4, r5, r6, lr}
 8019f9c:	b292      	uxth	r2, r2
 8019f9e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8019fa2:	42b2      	cmp	r2, r6
 8019fa4:	d019      	beq.n	8019fda <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 8019fa6:	8b04      	ldrh	r4, [r0, #24]
 8019fa8:	f831 5b02 	ldrh.w	r5, [r1], #2
 8019fac:	4294      	cmp	r4, r2
 8019fae:	d805      	bhi.n	8019fbc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 8019fb0:	4b19      	ldr	r3, [pc, #100]	; (801a018 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8019fb2:	4a1a      	ldr	r2, [pc, #104]	; (801a01c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 8019fb4:	481a      	ldr	r0, [pc, #104]	; (801a020 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 8019fb6:	21c5      	movs	r1, #197	; 0xc5
 8019fb8:	f00c fe34 	bl	8026c24 <__assert_func>
 8019fbc:	8ac4      	ldrh	r4, [r0, #22]
 8019fbe:	4414      	add	r4, r2
 8019fc0:	b2a4      	uxth	r4, r4
 8019fc2:	2c01      	cmp	r4, #1
 8019fc4:	bf88      	it	hi
 8019fc6:	3c02      	subhi	r4, #2
 8019fc8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8019fcc:	3a01      	subs	r2, #1
 8019fce:	8a64      	ldrh	r4, [r4, #18]
 8019fd0:	42ac      	cmp	r4, r5
 8019fd2:	b292      	uxth	r2, r2
 8019fd4:	d0e5      	beq.n	8019fa2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 8019fd6:	2000      	movs	r0, #0
 8019fd8:	bd70      	pop	{r4, r5, r6, pc}
 8019fda:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019fde:	2400      	movs	r4, #0
 8019fe0:	4413      	add	r3, r2
 8019fe2:	b2a2      	uxth	r2, r4
 8019fe4:	429a      	cmp	r2, r3
 8019fe6:	da14      	bge.n	801a012 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 8019fe8:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 8019fea:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8019fee:	4296      	cmp	r6, r2
 8019ff0:	d802      	bhi.n	8019ff8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 8019ff2:	4b09      	ldr	r3, [pc, #36]	; (801a018 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8019ff4:	4a0b      	ldr	r2, [pc, #44]	; (801a024 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 8019ff6:	e7dd      	b.n	8019fb4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 8019ff8:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 8019ffa:	4432      	add	r2, r6
 8019ffc:	b292      	uxth	r2, r2
 8019ffe:	2a09      	cmp	r2, #9
 801a000:	bf88      	it	hi
 801a002:	3a0a      	subhi	r2, #10
 801a004:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801a008:	3401      	adds	r4, #1
 801a00a:	8b52      	ldrh	r2, [r2, #26]
 801a00c:	42aa      	cmp	r2, r5
 801a00e:	d0e8      	beq.n	8019fe2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801a010:	e7e1      	b.n	8019fd6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801a012:	2001      	movs	r0, #1
 801a014:	e7e0      	b.n	8019fd8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801a016:	bf00      	nop
 801a018:	0802bd3d 	.word	0x0802bd3d
 801a01c:	0802c1f7 	.word	0x0802c1f7
 801a020:	0802bd05 	.word	0x0802bd05
 801a024:	0802be9c 	.word	0x0802be9c

0801a028 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801a028:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a02c:	4605      	mov	r5, r0
 801a02e:	4616      	mov	r6, r2
 801a030:	1c8c      	adds	r4, r1, #2
 801a032:	8809      	ldrh	r1, [r1, #0]
 801a034:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801a038:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801a03c:	42b3      	cmp	r3, r6
 801a03e:	d124      	bne.n	801a08a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801a040:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801a044:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801a048:	f001 070f 	and.w	r7, r1, #15
 801a04c:	f8cd 8000 	str.w	r8, [sp]
 801a050:	464b      	mov	r3, r9
 801a052:	4652      	mov	r2, sl
 801a054:	4621      	mov	r1, r4
 801a056:	4628      	mov	r0, r5
 801a058:	f7ff ff9e 	bl	8019f98 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801a05c:	4683      	mov	fp, r0
 801a05e:	b168      	cbz	r0, 801a07c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801a060:	eb0a 0109 	add.w	r1, sl, r9
 801a064:	4441      	add	r1, r8
 801a066:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801a06a:	463a      	mov	r2, r7
 801a06c:	4649      	mov	r1, r9
 801a06e:	4628      	mov	r0, r5
 801a070:	f7ff ff42 	bl	8019ef8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801a074:	4658      	mov	r0, fp
 801a076:	b003      	add	sp, #12
 801a078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a07c:	eb07 010a 	add.w	r1, r7, sl
 801a080:	4449      	add	r1, r9
 801a082:	4441      	add	r1, r8
 801a084:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801a088:	e7d2      	b.n	801a030 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801a08a:	f04f 0b00 	mov.w	fp, #0
 801a08e:	e7f1      	b.n	801a074 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801a090 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801a090:	b570      	push	{r4, r5, r6, lr}
 801a092:	8810      	ldrh	r0, [r2, #0]
 801a094:	4298      	cmp	r0, r3
 801a096:	d817      	bhi.n	801a0c8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a098:	1e48      	subs	r0, r1, #1
 801a09a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801a09e:	4298      	cmp	r0, r3
 801a0a0:	d312      	bcc.n	801a0c8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a0a2:	2400      	movs	r4, #0
 801a0a4:	428c      	cmp	r4, r1
 801a0a6:	d20f      	bcs.n	801a0c8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a0a8:	1860      	adds	r0, r4, r1
 801a0aa:	1040      	asrs	r0, r0, #1
 801a0ac:	0085      	lsls	r5, r0, #2
 801a0ae:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801a0b2:	42b3      	cmp	r3, r6
 801a0b4:	d902      	bls.n	801a0bc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801a0b6:	3001      	adds	r0, #1
 801a0b8:	b284      	uxth	r4, r0
 801a0ba:	e7f3      	b.n	801a0a4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a0bc:	d201      	bcs.n	801a0c2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801a0be:	b281      	uxth	r1, r0
 801a0c0:	e7f0      	b.n	801a0a4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a0c2:	442a      	add	r2, r5
 801a0c4:	8850      	ldrh	r0, [r2, #2]
 801a0c6:	bd70      	pop	{r4, r5, r6, pc}
 801a0c8:	2000      	movs	r0, #0
 801a0ca:	e7fc      	b.n	801a0c6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801a0cc <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801a0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0d0:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801a0d2:	886f      	ldrh	r7, [r5, #2]
 801a0d4:	4604      	mov	r4, r0
 801a0d6:	087f      	lsrs	r7, r7, #1
 801a0d8:	260b      	movs	r6, #11
 801a0da:	3e01      	subs	r6, #1
 801a0dc:	d01b      	beq.n	801a116 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801a0de:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a0e0:	b92b      	cbnz	r3, 801a0ee <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801a0e2:	4b0e      	ldr	r3, [pc, #56]	; (801a11c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801a0e4:	4a0e      	ldr	r2, [pc, #56]	; (801a120 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801a0e6:	480f      	ldr	r0, [pc, #60]	; (801a124 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801a0e8:	21c0      	movs	r1, #192	; 0xc0
 801a0ea:	f00c fd9b 	bl	8026c24 <__assert_func>
 801a0ee:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801a0f0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a0f4:	462a      	mov	r2, r5
 801a0f6:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801a0fa:	4639      	mov	r1, r7
 801a0fc:	4643      	mov	r3, r8
 801a0fe:	4620      	mov	r0, r4
 801a100:	f7ff ffc6 	bl	801a090 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801a104:	b138      	cbz	r0, 801a116 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801a106:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801a10a:	4642      	mov	r2, r8
 801a10c:	4620      	mov	r0, r4
 801a10e:	f7ff ff8b 	bl	801a028 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801a112:	2800      	cmp	r0, #0
 801a114:	d1e1      	bne.n	801a0da <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801a116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a11a:	bf00      	nop
 801a11c:	0802bcfc 	.word	0x0802bcfc
 801a120:	0802bf6e 	.word	0x0802bf6e
 801a124:	0802bd05 	.word	0x0802bd05

0801a128 <_ZN8touchgfx8ceil28_4El>:
 801a128:	f110 030f 	adds.w	r3, r0, #15
 801a12c:	d401      	bmi.n	801a132 <_ZN8touchgfx8ceil28_4El+0xa>
 801a12e:	1118      	asrs	r0, r3, #4
 801a130:	4770      	bx	lr
 801a132:	f1c0 0001 	rsb	r0, r0, #1
 801a136:	f010 000f 	ands.w	r0, r0, #15
 801a13a:	bf18      	it	ne
 801a13c:	2001      	movne	r0, #1
 801a13e:	2210      	movs	r2, #16
 801a140:	fb93 f3f2 	sdiv	r3, r3, r2
 801a144:	1a18      	subs	r0, r3, r0
 801a146:	4770      	bx	lr

0801a148 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801a148:	2900      	cmp	r1, #0
 801a14a:	b538      	push	{r3, r4, r5, lr}
 801a14c:	dc05      	bgt.n	801a15a <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801a14e:	4b0f      	ldr	r3, [pc, #60]	; (801a18c <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801a150:	4a0f      	ldr	r2, [pc, #60]	; (801a190 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801a152:	4810      	ldr	r0, [pc, #64]	; (801a194 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801a154:	21fa      	movs	r1, #250	; 0xfa
 801a156:	f00c fd65 	bl	8026c24 <__assert_func>
 801a15a:	2800      	cmp	r0, #0
 801a15c:	db06      	blt.n	801a16c <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801a15e:	fb90 f4f1 	sdiv	r4, r0, r1
 801a162:	6014      	str	r4, [r2, #0]
 801a164:	fb01 0114 	mls	r1, r1, r4, r0
 801a168:	6019      	str	r1, [r3, #0]
 801a16a:	bd38      	pop	{r3, r4, r5, pc}
 801a16c:	4240      	negs	r0, r0
 801a16e:	fb90 f4f1 	sdiv	r4, r0, r1
 801a172:	4265      	negs	r5, r4
 801a174:	fb01 0014 	mls	r0, r1, r4, r0
 801a178:	6015      	str	r5, [r2, #0]
 801a17a:	6018      	str	r0, [r3, #0]
 801a17c:	2800      	cmp	r0, #0
 801a17e:	d0f4      	beq.n	801a16a <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801a180:	6810      	ldr	r0, [r2, #0]
 801a182:	3801      	subs	r0, #1
 801a184:	6010      	str	r0, [r2, #0]
 801a186:	6818      	ldr	r0, [r3, #0]
 801a188:	1a09      	subs	r1, r1, r0
 801a18a:	e7ed      	b.n	801a168 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801a18c:	0802c2c8 	.word	0x0802c2c8
 801a190:	0802c307 	.word	0x0802c307
 801a194:	0802c2d8 	.word	0x0802c2d8

0801a198 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801a198:	b570      	push	{r4, r5, r6, lr}
 801a19a:	694a      	ldr	r2, [r1, #20]
 801a19c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801a19e:	684b      	ldr	r3, [r1, #4]
 801a1a0:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801a1a2:	1b54      	subs	r4, r2, r5
 801a1a4:	f000 8106 	beq.w	801a3b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801a1a8:	1b9b      	subs	r3, r3, r6
 801a1aa:	d003      	beq.n	801a1b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801a1ac:	4363      	muls	r3, r4
 801a1ae:	2210      	movs	r2, #16
 801a1b0:	fb93 f3f2 	sdiv	r3, r3, r2
 801a1b4:	680c      	ldr	r4, [r1, #0]
 801a1b6:	698a      	ldr	r2, [r1, #24]
 801a1b8:	1b65      	subs	r5, r4, r5
 801a1ba:	f000 80fd 	beq.w	801a3b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801a1be:	1b92      	subs	r2, r2, r6
 801a1c0:	d003      	beq.n	801a1ca <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801a1c2:	436a      	muls	r2, r5
 801a1c4:	2410      	movs	r4, #16
 801a1c6:	fb92 f2f4 	sdiv	r2, r2, r4
 801a1ca:	1a9b      	subs	r3, r3, r2
 801a1cc:	ee07 3a90 	vmov	s15, r3
 801a1d0:	ed9f 4a88 	vldr	s8, [pc, #544]	; 801a3f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801a1d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a1d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a1dc:	ee67 7a84 	vmul.f32	s15, s15, s8
 801a1e0:	460a      	mov	r2, r1
 801a1e2:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801a1e6:	4603      	mov	r3, r0
 801a1e8:	f100 040c 	add.w	r4, r0, #12
 801a1ec:	eeb1 6a43 	vneg.f32	s12, s6
 801a1f0:	edd2 7a02 	vldr	s15, [r2, #8]
 801a1f4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801a1f8:	3214      	adds	r2, #20
 801a1fa:	ece3 6a01 	vstmia	r3!, {s13}
 801a1fe:	ed52 7a02 	vldr	s15, [r2, #-8]
 801a202:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a206:	429c      	cmp	r4, r3
 801a208:	edc3 7a02 	vstr	s15, [r3, #8]
 801a20c:	ed52 7a01 	vldr	s15, [r2, #-4]
 801a210:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a214:	edc3 7a05 	vstr	s15, [r3, #20]
 801a218:	d1ea      	bne.n	801a1f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801a21a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a21c:	698b      	ldr	r3, [r1, #24]
 801a21e:	edd0 4a02 	vldr	s9, [r0, #8]
 801a222:	edd0 3a00 	vldr	s7, [r0]
 801a226:	edd0 6a01 	vldr	s13, [r0, #4]
 801a22a:	ed90 5a05 	vldr	s10, [r0, #20]
 801a22e:	ed90 2a03 	vldr	s4, [r0, #12]
 801a232:	edd0 5a04 	vldr	s11, [r0, #16]
 801a236:	ed90 1a07 	vldr	s2, [r0, #28]
 801a23a:	edd0 2a06 	vldr	s5, [r0, #24]
 801a23e:	1a9b      	subs	r3, r3, r2
 801a240:	ee07 3a90 	vmov	s15, r3
 801a244:	684b      	ldr	r3, [r1, #4]
 801a246:	1a9b      	subs	r3, r3, r2
 801a248:	ee07 3a10 	vmov	s14, r3
 801a24c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a250:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801a254:	ee67 7a84 	vmul.f32	s15, s15, s8
 801a258:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801a25c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a260:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801a264:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a268:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801a26c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a270:	ee32 5a45 	vsub.f32	s10, s4, s10
 801a274:	ee67 7a83 	vmul.f32	s15, s15, s6
 801a278:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801a27c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801a27e:	694a      	ldr	r2, [r1, #20]
 801a280:	1b13      	subs	r3, r2, r4
 801a282:	ee07 3a10 	vmov	s14, r3
 801a286:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a28a:	680b      	ldr	r3, [r1, #0]
 801a28c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a290:	1b1b      	subs	r3, r3, r4
 801a292:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801a296:	ee07 3a10 	vmov	s14, r3
 801a29a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a29e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a2a2:	eee6 4a87 	vfma.f32	s9, s13, s14
 801a2a6:	ee64 4a86 	vmul.f32	s9, s9, s12
 801a2aa:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801a2ae:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a2b0:	698b      	ldr	r3, [r1, #24]
 801a2b2:	1a9b      	subs	r3, r3, r2
 801a2b4:	ee06 3a90 	vmov	s13, r3
 801a2b8:	684b      	ldr	r3, [r1, #4]
 801a2ba:	1a9b      	subs	r3, r3, r2
 801a2bc:	ee07 3a10 	vmov	s14, r3
 801a2c0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a2c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a2c8:	ee66 6a84 	vmul.f32	s13, s13, s8
 801a2cc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a2d0:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801a2d4:	eee5 6a87 	vfma.f32	s13, s11, s14
 801a2d8:	ee66 6a83 	vmul.f32	s13, s13, s6
 801a2dc:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801a2e0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801a2e2:	694a      	ldr	r2, [r1, #20]
 801a2e4:	1b13      	subs	r3, r2, r4
 801a2e6:	ee07 3a10 	vmov	s14, r3
 801a2ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a2ee:	680b      	ldr	r3, [r1, #0]
 801a2f0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a2f4:	1b1b      	subs	r3, r3, r4
 801a2f6:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801a2fa:	ee07 3a10 	vmov	s14, r3
 801a2fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a302:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a306:	eea5 5a87 	vfma.f32	s10, s11, s14
 801a30a:	edd0 5a08 	vldr	s11, [r0, #32]
 801a30e:	ee25 5a06 	vmul.f32	s10, s10, s12
 801a312:	ee31 1a65 	vsub.f32	s2, s2, s11
 801a316:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801a31a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a31c:	698b      	ldr	r3, [r1, #24]
 801a31e:	1a9b      	subs	r3, r3, r2
 801a320:	ee07 3a10 	vmov	s14, r3
 801a324:	684b      	ldr	r3, [r1, #4]
 801a326:	1a9b      	subs	r3, r3, r2
 801a328:	ee01 3a90 	vmov	s3, r3
 801a32c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a330:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801a334:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a338:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801a33c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801a340:	ee61 1a84 	vmul.f32	s3, s3, s8
 801a344:	eea1 7a21 	vfma.f32	s14, s2, s3
 801a348:	ee27 7a03 	vmul.f32	s14, s14, s6
 801a34c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801a350:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801a352:	694a      	ldr	r2, [r1, #20]
 801a354:	1b13      	subs	r3, r2, r4
 801a356:	ee03 3a10 	vmov	s6, r3
 801a35a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801a35e:	680b      	ldr	r3, [r1, #0]
 801a360:	ee23 3a04 	vmul.f32	s6, s6, s8
 801a364:	1b1b      	subs	r3, r3, r4
 801a366:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801a36a:	ee03 3a10 	vmov	s6, r3
 801a36e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801a372:	ee23 4a04 	vmul.f32	s8, s6, s8
 801a376:	eee1 5a04 	vfma.f32	s11, s2, s8
 801a37a:	ee25 6a86 	vmul.f32	s12, s11, s12
 801a37e:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801a382:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801a386:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801a38a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801a38e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a392:	dd13      	ble.n	801a3bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801a394:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a398:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801a39c:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a39e:	eee3 7a87 	vfma.f32	s15, s7, s14
 801a3a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a3a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3aa:	dd15      	ble.n	801a3d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801a3ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a3b0:	6403      	str	r3, [r0, #64]	; 0x40
 801a3b2:	bd70      	pop	{r4, r5, r6, pc}
 801a3b4:	4623      	mov	r3, r4
 801a3b6:	e6fd      	b.n	801a1b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801a3b8:	462a      	mov	r2, r5
 801a3ba:	e706      	b.n	801a1ca <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801a3bc:	d502      	bpl.n	801a3c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801a3be:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a3c2:	e7e9      	b.n	801a398 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801a3c4:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801a3c8:	eea3 2a85 	vfma.f32	s4, s7, s10
 801a3cc:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801a3d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3d4:	dade      	bge.n	801a394 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801a3d6:	e7f2      	b.n	801a3be <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801a3d8:	d502      	bpl.n	801a3e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801a3da:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a3de:	e7e7      	b.n	801a3b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801a3e0:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801a3e4:	eee3 4a86 	vfma.f32	s9, s7, s12
 801a3e8:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801a3ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3f0:	dadc      	bge.n	801a3ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801a3f2:	e7f2      	b.n	801a3da <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801a3f4:	3d800000 	.word	0x3d800000

0801a3f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801a3f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3fc:	f04f 0814 	mov.w	r8, #20
 801a400:	fb08 f903 	mul.w	r9, r8, r3
 801a404:	eb02 0a09 	add.w	sl, r2, r9
 801a408:	4604      	mov	r4, r0
 801a40a:	f8da 0004 	ldr.w	r0, [sl, #4]
 801a40e:	4617      	mov	r7, r2
 801a410:	460d      	mov	r5, r1
 801a412:	461e      	mov	r6, r3
 801a414:	f7ff fe88 	bl	801a128 <_ZN8touchgfx8ceil28_4El>
 801a418:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a41a:	6160      	str	r0, [r4, #20]
 801a41c:	fb08 f803 	mul.w	r8, r8, r3
 801a420:	eb07 0b08 	add.w	fp, r7, r8
 801a424:	9001      	str	r0, [sp, #4]
 801a426:	f8db 0004 	ldr.w	r0, [fp, #4]
 801a42a:	f7ff fe7d 	bl	801a128 <_ZN8touchgfx8ceil28_4El>
 801a42e:	9a01      	ldr	r2, [sp, #4]
 801a430:	1a80      	subs	r0, r0, r2
 801a432:	61a0      	str	r0, [r4, #24]
 801a434:	2800      	cmp	r0, #0
 801a436:	f000 8088 	beq.w	801a54a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801a43a:	f857 3009 	ldr.w	r3, [r7, r9]
 801a43e:	f857 c008 	ldr.w	ip, [r7, r8]
 801a442:	f8da 1004 	ldr.w	r1, [sl, #4]
 801a446:	f8db 0004 	ldr.w	r0, [fp, #4]
 801a44a:	ebac 0c03 	sub.w	ip, ip, r3
 801a44e:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801a452:	fb0b f202 	mul.w	r2, fp, r2
 801a456:	fb0c 2211 	mls	r2, ip, r1, r2
 801a45a:	1a40      	subs	r0, r0, r1
 801a45c:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801a460:	fb00 2003 	mla	r0, r0, r3, r2
 801a464:	3801      	subs	r0, #1
 801a466:	f104 0310 	add.w	r3, r4, #16
 801a46a:	4622      	mov	r2, r4
 801a46c:	4641      	mov	r1, r8
 801a46e:	4440      	add	r0, r8
 801a470:	f7ff fe6a 	bl	801a148 <_ZN8touchgfx11floorDivModEllRlS0_>
 801a474:	f104 0308 	add.w	r3, r4, #8
 801a478:	1d22      	adds	r2, r4, #4
 801a47a:	4641      	mov	r1, r8
 801a47c:	4658      	mov	r0, fp
 801a47e:	f7ff fe63 	bl	801a148 <_ZN8touchgfx11floorDivModEllRlS0_>
 801a482:	f8c4 800c 	str.w	r8, [r4, #12]
 801a486:	f8da 3004 	ldr.w	r3, [sl, #4]
 801a48a:	6962      	ldr	r2, [r4, #20]
 801a48c:	eddf 6a31 	vldr	s13, [pc, #196]	; 801a554 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801a490:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801a494:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801a498:	ee07 3a10 	vmov	s14, r3
 801a49c:	6822      	ldr	r2, [r4, #0]
 801a49e:	f857 3009 	ldr.w	r3, [r7, r9]
 801a4a2:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801a4a6:	ee07 3a90 	vmov	s15, r3
 801a4aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a4ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a4b2:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801a4b6:	ee27 7a26 	vmul.f32	s14, s14, s13
 801a4ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a4be:	edd3 6a00 	vldr	s13, [r3]
 801a4c2:	eee6 6a07 	vfma.f32	s13, s12, s14
 801a4c6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801a4ca:	eee6 6a27 	vfma.f32	s13, s12, s15
 801a4ce:	edc4 6a07 	vstr	s13, [r4, #28]
 801a4d2:	edd4 6a01 	vldr	s13, [r4, #4]
 801a4d6:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801a4da:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801a4de:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a4e2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a4e6:	ed84 6a08 	vstr	s12, [r4, #32]
 801a4ea:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801a4ec:	6262      	str	r2, [r4, #36]	; 0x24
 801a4ee:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801a4f2:	ed93 6a03 	vldr	s12, [r3, #12]
 801a4f6:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a4fa:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801a4fe:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801a502:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801a506:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801a50a:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801a50e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a512:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801a516:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801a518:	6322      	str	r2, [r4, #48]	; 0x30
 801a51a:	ed93 6a06 	vldr	s12, [r3, #24]
 801a51e:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801a522:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a526:	eeb0 7a46 	vmov.f32	s14, s12
 801a52a:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801a52e:	eea6 7a27 	vfma.f32	s14, s12, s15
 801a532:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801a536:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801a53a:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801a53e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a542:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801a546:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801a548:	63e3      	str	r3, [r4, #60]	; 0x3c
 801a54a:	4620      	mov	r0, r4
 801a54c:	b003      	add	sp, #12
 801a54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a552:	bf00      	nop
 801a554:	3d800000 	.word	0x3d800000

0801a558 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801a558:	4602      	mov	r2, r0
 801a55a:	b148      	cbz	r0, 801a570 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801a55c:	2300      	movs	r3, #0
 801a55e:	b298      	uxth	r0, r3
 801a560:	3301      	adds	r3, #1
 801a562:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801a566:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801a56a:	2900      	cmp	r1, #0
 801a56c:	d1f7      	bne.n	801a55e <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801a56e:	4770      	bx	lr
 801a570:	4770      	bx	lr

0801a572 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801a572:	b530      	push	{r4, r5, lr}
 801a574:	4604      	mov	r4, r0
 801a576:	b159      	cbz	r1, 801a590 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801a578:	b148      	cbz	r0, 801a58e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a57a:	2300      	movs	r3, #0
 801a57c:	b298      	uxth	r0, r3
 801a57e:	4282      	cmp	r2, r0
 801a580:	d905      	bls.n	801a58e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a582:	5ccd      	ldrb	r5, [r1, r3]
 801a584:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801a588:	3301      	adds	r3, #1
 801a58a:	2d00      	cmp	r5, #0
 801a58c:	d1f6      	bne.n	801a57c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801a58e:	bd30      	pop	{r4, r5, pc}
 801a590:	4608      	mov	r0, r1
 801a592:	e7fc      	b.n	801a58e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801a594 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801a594:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a596:	b08b      	sub	sp, #44	; 0x2c
 801a598:	468c      	mov	ip, r1
 801a59a:	2100      	movs	r1, #0
 801a59c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801a5a0:	ae01      	add	r6, sp, #4
 801a5a2:	211f      	movs	r1, #31
 801a5a4:	fbb0 f7f3 	udiv	r7, r0, r3
 801a5a8:	fb03 0517 	mls	r5, r3, r7, r0
 801a5ac:	b2ec      	uxtb	r4, r5
 801a5ae:	2d09      	cmp	r5, #9
 801a5b0:	bfd4      	ite	le
 801a5b2:	3430      	addle	r4, #48	; 0x30
 801a5b4:	3457      	addgt	r4, #87	; 0x57
 801a5b6:	b2e4      	uxtb	r4, r4
 801a5b8:	558c      	strb	r4, [r1, r6]
 801a5ba:	4638      	mov	r0, r7
 801a5bc:	1e4c      	subs	r4, r1, #1
 801a5be:	b92f      	cbnz	r7, 801a5cc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801a5c0:	4431      	add	r1, r6
 801a5c2:	4660      	mov	r0, ip
 801a5c4:	f7ff ffd5 	bl	801a572 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a5c8:	b00b      	add	sp, #44	; 0x2c
 801a5ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a5cc:	4621      	mov	r1, r4
 801a5ce:	e7e9      	b.n	801a5a4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801a5d0 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801a5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a5d2:	4607      	mov	r7, r0
 801a5d4:	b08b      	sub	sp, #44	; 0x2c
 801a5d6:	4608      	mov	r0, r1
 801a5d8:	b341      	cbz	r1, 801a62c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801a5da:	1e99      	subs	r1, r3, #2
 801a5dc:	2922      	cmp	r1, #34	; 0x22
 801a5de:	d825      	bhi.n	801a62c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801a5e0:	2100      	movs	r1, #0
 801a5e2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801a5e6:	463c      	mov	r4, r7
 801a5e8:	261f      	movs	r6, #31
 801a5ea:	f10d 0c04 	add.w	ip, sp, #4
 801a5ee:	fb94 fef3 	sdiv	lr, r4, r3
 801a5f2:	fb03 441e 	mls	r4, r3, lr, r4
 801a5f6:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801a5fa:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801a5fe:	b2ec      	uxtb	r4, r5
 801a600:	2d09      	cmp	r5, #9
 801a602:	bfd4      	ite	le
 801a604:	3430      	addle	r4, #48	; 0x30
 801a606:	3457      	addgt	r4, #87	; 0x57
 801a608:	b2e4      	uxtb	r4, r4
 801a60a:	f80c 4006 	strb.w	r4, [ip, r6]
 801a60e:	4674      	mov	r4, lr
 801a610:	1e71      	subs	r1, r6, #1
 801a612:	b96c      	cbnz	r4, 801a630 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801a614:	2f00      	cmp	r7, #0
 801a616:	da05      	bge.n	801a624 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801a618:	ab0a      	add	r3, sp, #40	; 0x28
 801a61a:	4419      	add	r1, r3
 801a61c:	232d      	movs	r3, #45	; 0x2d
 801a61e:	f801 3c24 	strb.w	r3, [r1, #-36]
 801a622:	1eb1      	subs	r1, r6, #2
 801a624:	3101      	adds	r1, #1
 801a626:	4461      	add	r1, ip
 801a628:	f7ff ffa3 	bl	801a572 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a62c:	b00b      	add	sp, #44	; 0x2c
 801a62e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a630:	460e      	mov	r6, r1
 801a632:	e7dc      	b.n	801a5ee <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801a634 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801a634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a638:	4691      	mov	r9, r2
 801a63a:	b085      	sub	sp, #20
 801a63c:	6802      	ldr	r2, [r0, #0]
 801a63e:	9201      	str	r2, [sp, #4]
 801a640:	4688      	mov	r8, r1
 801a642:	4683      	mov	fp, r0
 801a644:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801a648:	9103      	str	r1, [sp, #12]
 801a64a:	4610      	mov	r0, r2
 801a64c:	461c      	mov	r4, r3
 801a64e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801a652:	9302      	str	r3, [sp, #8]
 801a654:	f7ff ff80 	bl	801a558 <_ZN8touchgfx7Unicode6strlenEPKt>
 801a658:	f1b8 0f00 	cmp.w	r8, #0
 801a65c:	bf0c      	ite	eq
 801a65e:	4684      	moveq	ip, r0
 801a660:	f100 0c01 	addne.w	ip, r0, #1
 801a664:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801a668:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801a66c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801a66e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a670:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801a674:	9903      	ldr	r1, [sp, #12]
 801a676:	fa1f fc8c 	uxth.w	ip, ip
 801a67a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801a67e:	d041      	beq.n	801a704 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801a680:	d834      	bhi.n	801a6ec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801a682:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801a686:	d059      	beq.n	801a73c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801a688:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801a68c:	d03a      	beq.n	801a704 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801a68e:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801a692:	d034      	beq.n	801a6fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801a694:	2400      	movs	r4, #0
 801a696:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801a69a:	3a01      	subs	r2, #1
 801a69c:	b169      	cbz	r1, 801a6ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a69e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a6a0:	458c      	cmp	ip, r1
 801a6a2:	da09      	bge.n	801a6b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801a6a4:	eba1 010c 	sub.w	r1, r1, ip
 801a6a8:	b289      	uxth	r1, r1
 801a6aa:	b933      	cbnz	r3, 801a6ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a6ac:	2e00      	cmp	r6, #0
 801a6ae:	d051      	beq.n	801a754 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801a6b0:	2800      	cmp	r0, #0
 801a6b2:	d04f      	beq.n	801a754 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801a6b4:	440c      	add	r4, r1
 801a6b6:	b2a4      	uxth	r4, r4
 801a6b8:	2100      	movs	r1, #0
 801a6ba:	682b      	ldr	r3, [r5, #0]
 801a6bc:	4293      	cmp	r3, r2
 801a6be:	da07      	bge.n	801a6d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801a6c0:	f1b8 0f00 	cmp.w	r8, #0
 801a6c4:	d004      	beq.n	801a6d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801a6c6:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801a6ca:	682b      	ldr	r3, [r5, #0]
 801a6cc:	3301      	adds	r3, #1
 801a6ce:	602b      	str	r3, [r5, #0]
 801a6d0:	2730      	movs	r7, #48	; 0x30
 801a6d2:	2c00      	cmp	r4, #0
 801a6d4:	d04e      	beq.n	801a774 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801a6d6:	682e      	ldr	r6, [r5, #0]
 801a6d8:	3c01      	subs	r4, #1
 801a6da:	42b2      	cmp	r2, r6
 801a6dc:	b2a4      	uxth	r4, r4
 801a6de:	dd49      	ble.n	801a774 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801a6e0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801a6e4:	682b      	ldr	r3, [r5, #0]
 801a6e6:	3301      	adds	r3, #1
 801a6e8:	602b      	str	r3, [r5, #0]
 801a6ea:	e7f2      	b.n	801a6d2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801a6ec:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801a6f0:	d01d      	beq.n	801a72e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801a6f2:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801a6f6:	d002      	beq.n	801a6fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801a6f8:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801a6fc:	e7c9      	b.n	801a692 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801a6fe:	4684      	mov	ip, r0
 801a700:	f04f 0800 	mov.w	r8, #0
 801a704:	2c00      	cmp	r4, #0
 801a706:	d0c6      	beq.n	801a696 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a708:	b947      	cbnz	r7, 801a71c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801a70a:	2801      	cmp	r0, #1
 801a70c:	d106      	bne.n	801a71c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801a70e:	8814      	ldrh	r4, [r2, #0]
 801a710:	2c30      	cmp	r4, #48	; 0x30
 801a712:	bf02      	ittt	eq
 801a714:	3202      	addeq	r2, #2
 801a716:	f8cb 2000 	streq.w	r2, [fp]
 801a71a:	4638      	moveq	r0, r7
 801a71c:	45bc      	cmp	ip, r7
 801a71e:	da14      	bge.n	801a74a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801a720:	b2bf      	uxth	r7, r7
 801a722:	eba7 040c 	sub.w	r4, r7, ip
 801a726:	b2a4      	uxth	r4, r4
 801a728:	46bc      	mov	ip, r7
 801a72a:	2600      	movs	r6, #0
 801a72c:	e7b3      	b.n	801a696 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a72e:	4684      	mov	ip, r0
 801a730:	b16c      	cbz	r4, 801a74e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801a732:	42b8      	cmp	r0, r7
 801a734:	dd00      	ble.n	801a738 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801a736:	b2b8      	uxth	r0, r7
 801a738:	2400      	movs	r4, #0
 801a73a:	e003      	b.n	801a744 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801a73c:	f04f 0c01 	mov.w	ip, #1
 801a740:	2400      	movs	r4, #0
 801a742:	4660      	mov	r0, ip
 801a744:	4626      	mov	r6, r4
 801a746:	46a0      	mov	r8, r4
 801a748:	e7a5      	b.n	801a696 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a74a:	2400      	movs	r4, #0
 801a74c:	e7ed      	b.n	801a72a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801a74e:	4626      	mov	r6, r4
 801a750:	46a0      	mov	r8, r4
 801a752:	e7a0      	b.n	801a696 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a754:	2900      	cmp	r1, #0
 801a756:	d0b0      	beq.n	801a6ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a758:	2720      	movs	r7, #32
 801a75a:	682e      	ldr	r6, [r5, #0]
 801a75c:	2900      	cmp	r1, #0
 801a75e:	d0ac      	beq.n	801a6ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a760:	3901      	subs	r1, #1
 801a762:	4296      	cmp	r6, r2
 801a764:	b289      	uxth	r1, r1
 801a766:	daa7      	bge.n	801a6b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801a768:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801a76c:	682b      	ldr	r3, [r5, #0]
 801a76e:	3301      	adds	r3, #1
 801a770:	602b      	str	r3, [r5, #0]
 801a772:	e7f2      	b.n	801a75a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801a774:	b188      	cbz	r0, 801a79a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801a776:	682b      	ldr	r3, [r5, #0]
 801a778:	3801      	subs	r0, #1
 801a77a:	429a      	cmp	r2, r3
 801a77c:	b280      	uxth	r0, r0
 801a77e:	dd0c      	ble.n	801a79a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801a780:	f8db 3000 	ldr.w	r3, [fp]
 801a784:	1c9c      	adds	r4, r3, #2
 801a786:	f8cb 4000 	str.w	r4, [fp]
 801a78a:	881c      	ldrh	r4, [r3, #0]
 801a78c:	682b      	ldr	r3, [r5, #0]
 801a78e:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801a792:	682b      	ldr	r3, [r5, #0]
 801a794:	3301      	adds	r3, #1
 801a796:	602b      	str	r3, [r5, #0]
 801a798:	e7ec      	b.n	801a774 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801a79a:	2620      	movs	r6, #32
 801a79c:	b151      	cbz	r1, 801a7b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801a79e:	6828      	ldr	r0, [r5, #0]
 801a7a0:	3901      	subs	r1, #1
 801a7a2:	4282      	cmp	r2, r0
 801a7a4:	b289      	uxth	r1, r1
 801a7a6:	dd05      	ble.n	801a7b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801a7a8:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801a7ac:	682b      	ldr	r3, [r5, #0]
 801a7ae:	3301      	adds	r3, #1
 801a7b0:	602b      	str	r3, [r5, #0]
 801a7b2:	e7f3      	b.n	801a79c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801a7b4:	b005      	add	sp, #20
 801a7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a7ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801a7ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a7be:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801a7c2:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801a7c6:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801a7ca:	2400      	movs	r4, #0
 801a7cc:	8014      	strh	r4, [r2, #0]
 801a7ce:	701c      	strb	r4, [r3, #0]
 801a7d0:	f888 4000 	strb.w	r4, [r8]
 801a7d4:	f88c 4000 	strb.w	r4, [ip]
 801a7d8:	f88e 4000 	strb.w	r4, [lr]
 801a7dc:	703c      	strb	r4, [r7, #0]
 801a7de:	6804      	ldr	r4, [r0, #0]
 801a7e0:	b1a4      	cbz	r4, 801a80c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801a7e2:	8824      	ldrh	r4, [r4, #0]
 801a7e4:	f04f 0901 	mov.w	r9, #1
 801a7e8:	b314      	cbz	r4, 801a830 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801a7ea:	2c2b      	cmp	r4, #43	; 0x2b
 801a7ec:	d001      	beq.n	801a7f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801a7ee:	2c20      	cmp	r4, #32
 801a7f0:	d110      	bne.n	801a814 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801a7f2:	8014      	strh	r4, [r2, #0]
 801a7f4:	6804      	ldr	r4, [r0, #0]
 801a7f6:	b10c      	cbz	r4, 801a7fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801a7f8:	3402      	adds	r4, #2
 801a7fa:	6004      	str	r4, [r0, #0]
 801a7fc:	680c      	ldr	r4, [r1, #0]
 801a7fe:	b10c      	cbz	r4, 801a804 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801a800:	3401      	adds	r4, #1
 801a802:	600c      	str	r4, [r1, #0]
 801a804:	6804      	ldr	r4, [r0, #0]
 801a806:	b17c      	cbz	r4, 801a828 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801a808:	8824      	ldrh	r4, [r4, #0]
 801a80a:	e7ed      	b.n	801a7e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801a80c:	680c      	ldr	r4, [r1, #0]
 801a80e:	b17c      	cbz	r4, 801a830 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801a810:	7824      	ldrb	r4, [r4, #0]
 801a812:	e7e7      	b.n	801a7e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801a814:	2c2d      	cmp	r4, #45	; 0x2d
 801a816:	d102      	bne.n	801a81e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801a818:	f883 9000 	strb.w	r9, [r3]
 801a81c:	e7ea      	b.n	801a7f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801a81e:	2c23      	cmp	r4, #35	; 0x23
 801a820:	d107      	bne.n	801a832 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801a822:	f888 9000 	strb.w	r9, [r8]
 801a826:	e7e5      	b.n	801a7f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801a828:	680c      	ldr	r4, [r1, #0]
 801a82a:	b10c      	cbz	r4, 801a830 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801a82c:	7824      	ldrb	r4, [r4, #0]
 801a82e:	e7db      	b.n	801a7e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801a830:	2400      	movs	r4, #0
 801a832:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801a836:	2b09      	cmp	r3, #9
 801a838:	d901      	bls.n	801a83e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801a83a:	2c2a      	cmp	r4, #42	; 0x2a
 801a83c:	d122      	bne.n	801a884 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801a83e:	2301      	movs	r3, #1
 801a840:	2c30      	cmp	r4, #48	; 0x30
 801a842:	f88e 3000 	strb.w	r3, [lr]
 801a846:	d10d      	bne.n	801a864 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801a848:	f88c 3000 	strb.w	r3, [ip]
 801a84c:	6803      	ldr	r3, [r0, #0]
 801a84e:	b10b      	cbz	r3, 801a854 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801a850:	3302      	adds	r3, #2
 801a852:	6003      	str	r3, [r0, #0]
 801a854:	680b      	ldr	r3, [r1, #0]
 801a856:	b10b      	cbz	r3, 801a85c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801a858:	3301      	adds	r3, #1
 801a85a:	600b      	str	r3, [r1, #0]
 801a85c:	6803      	ldr	r3, [r0, #0]
 801a85e:	2b00      	cmp	r3, #0
 801a860:	d02f      	beq.n	801a8c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801a862:	881c      	ldrh	r4, [r3, #0]
 801a864:	2c2a      	cmp	r4, #42	; 0x2a
 801a866:	d135      	bne.n	801a8d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801a868:	f04f 33ff 	mov.w	r3, #4294967295
 801a86c:	6033      	str	r3, [r6, #0]
 801a86e:	6803      	ldr	r3, [r0, #0]
 801a870:	b10b      	cbz	r3, 801a876 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801a872:	3302      	adds	r3, #2
 801a874:	6003      	str	r3, [r0, #0]
 801a876:	680b      	ldr	r3, [r1, #0]
 801a878:	b10b      	cbz	r3, 801a87e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801a87a:	3301      	adds	r3, #1
 801a87c:	600b      	str	r3, [r1, #0]
 801a87e:	6803      	ldr	r3, [r0, #0]
 801a880:	b31b      	cbz	r3, 801a8ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801a882:	881c      	ldrh	r4, [r3, #0]
 801a884:	2c2e      	cmp	r4, #46	; 0x2e
 801a886:	d11a      	bne.n	801a8be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801a888:	2301      	movs	r3, #1
 801a88a:	703b      	strb	r3, [r7, #0]
 801a88c:	6803      	ldr	r3, [r0, #0]
 801a88e:	b10b      	cbz	r3, 801a894 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801a890:	3302      	adds	r3, #2
 801a892:	6003      	str	r3, [r0, #0]
 801a894:	680b      	ldr	r3, [r1, #0]
 801a896:	b10b      	cbz	r3, 801a89c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801a898:	3301      	adds	r3, #1
 801a89a:	600b      	str	r3, [r1, #0]
 801a89c:	6803      	ldr	r3, [r0, #0]
 801a89e:	2b00      	cmp	r3, #0
 801a8a0:	d036      	beq.n	801a910 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801a8a2:	881b      	ldrh	r3, [r3, #0]
 801a8a4:	2b2a      	cmp	r3, #42	; 0x2a
 801a8a6:	d137      	bne.n	801a918 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801a8a8:	f04f 33ff 	mov.w	r3, #4294967295
 801a8ac:	602b      	str	r3, [r5, #0]
 801a8ae:	6803      	ldr	r3, [r0, #0]
 801a8b0:	b10b      	cbz	r3, 801a8b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801a8b2:	3302      	adds	r3, #2
 801a8b4:	6003      	str	r3, [r0, #0]
 801a8b6:	680b      	ldr	r3, [r1, #0]
 801a8b8:	b10b      	cbz	r3, 801a8be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801a8ba:	3301      	adds	r3, #1
 801a8bc:	600b      	str	r3, [r1, #0]
 801a8be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a8c2:	680c      	ldr	r4, [r1, #0]
 801a8c4:	b134      	cbz	r4, 801a8d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801a8c6:	7824      	ldrb	r4, [r4, #0]
 801a8c8:	e7cc      	b.n	801a864 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801a8ca:	680b      	ldr	r3, [r1, #0]
 801a8cc:	2b00      	cmp	r3, #0
 801a8ce:	d0f6      	beq.n	801a8be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801a8d0:	781c      	ldrb	r4, [r3, #0]
 801a8d2:	e7d7      	b.n	801a884 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801a8d4:	2300      	movs	r3, #0
 801a8d6:	6033      	str	r3, [r6, #0]
 801a8d8:	220a      	movs	r2, #10
 801a8da:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801a8de:	fa1f f38c 	uxth.w	r3, ip
 801a8e2:	2b09      	cmp	r3, #9
 801a8e4:	d8ce      	bhi.n	801a884 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801a8e6:	6833      	ldr	r3, [r6, #0]
 801a8e8:	fb02 c303 	mla	r3, r2, r3, ip
 801a8ec:	6033      	str	r3, [r6, #0]
 801a8ee:	6803      	ldr	r3, [r0, #0]
 801a8f0:	b10b      	cbz	r3, 801a8f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801a8f2:	3302      	adds	r3, #2
 801a8f4:	6003      	str	r3, [r0, #0]
 801a8f6:	680b      	ldr	r3, [r1, #0]
 801a8f8:	b10b      	cbz	r3, 801a8fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801a8fa:	3301      	adds	r3, #1
 801a8fc:	600b      	str	r3, [r1, #0]
 801a8fe:	6803      	ldr	r3, [r0, #0]
 801a900:	b10b      	cbz	r3, 801a906 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801a902:	881c      	ldrh	r4, [r3, #0]
 801a904:	e7e9      	b.n	801a8da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801a906:	680c      	ldr	r4, [r1, #0]
 801a908:	2c00      	cmp	r4, #0
 801a90a:	d0e6      	beq.n	801a8da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801a90c:	7824      	ldrb	r4, [r4, #0]
 801a90e:	e7e4      	b.n	801a8da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801a910:	680b      	ldr	r3, [r1, #0]
 801a912:	b10b      	cbz	r3, 801a918 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801a914:	781b      	ldrb	r3, [r3, #0]
 801a916:	e7c5      	b.n	801a8a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801a918:	2200      	movs	r2, #0
 801a91a:	602a      	str	r2, [r5, #0]
 801a91c:	240a      	movs	r4, #10
 801a91e:	3b30      	subs	r3, #48	; 0x30
 801a920:	b29e      	uxth	r6, r3
 801a922:	2e09      	cmp	r6, #9
 801a924:	682a      	ldr	r2, [r5, #0]
 801a926:	d813      	bhi.n	801a950 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801a928:	fb04 3302 	mla	r3, r4, r2, r3
 801a92c:	602b      	str	r3, [r5, #0]
 801a92e:	6803      	ldr	r3, [r0, #0]
 801a930:	b10b      	cbz	r3, 801a936 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801a932:	3302      	adds	r3, #2
 801a934:	6003      	str	r3, [r0, #0]
 801a936:	680b      	ldr	r3, [r1, #0]
 801a938:	b10b      	cbz	r3, 801a93e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801a93a:	3301      	adds	r3, #1
 801a93c:	600b      	str	r3, [r1, #0]
 801a93e:	6803      	ldr	r3, [r0, #0]
 801a940:	b10b      	cbz	r3, 801a946 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801a942:	881b      	ldrh	r3, [r3, #0]
 801a944:	e7eb      	b.n	801a91e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801a946:	680b      	ldr	r3, [r1, #0]
 801a948:	2b00      	cmp	r3, #0
 801a94a:	d0e8      	beq.n	801a91e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801a94c:	781b      	ldrb	r3, [r3, #0]
 801a94e:	e7e6      	b.n	801a91e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801a950:	2a06      	cmp	r2, #6
 801a952:	bfa8      	it	ge
 801a954:	2206      	movge	r2, #6
 801a956:	602a      	str	r2, [r5, #0]
 801a958:	e7b1      	b.n	801a8be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801a95a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801a95a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a95e:	b0a3      	sub	sp, #140	; 0x8c
 801a960:	2600      	movs	r6, #0
 801a962:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801a966:	4607      	mov	r7, r0
 801a968:	4688      	mov	r8, r1
 801a96a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801a96e:	4631      	mov	r1, r6
 801a970:	2242      	movs	r2, #66	; 0x42
 801a972:	4648      	mov	r0, r9
 801a974:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801a976:	960d      	str	r6, [sp, #52]	; 0x34
 801a978:	f7fe fae0 	bl	8018f3c <_ZN8touchgfx6memsetEPvhm>
 801a97c:	b15f      	cbz	r7, 801a996 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801a97e:	f108 3aff 	add.w	sl, r8, #4294967295
 801a982:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a986:	b152      	cbz	r2, 801a99e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801a988:	8812      	ldrh	r2, [r2, #0]
 801a98a:	b10a      	cbz	r2, 801a990 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801a98c:	459a      	cmp	sl, r3
 801a98e:	dc2e      	bgt.n	801a9ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801a990:	2200      	movs	r2, #0
 801a992:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801a996:	4638      	mov	r0, r7
 801a998:	b023      	add	sp, #140	; 0x8c
 801a99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a99e:	9a08      	ldr	r2, [sp, #32]
 801a9a0:	2a00      	cmp	r2, #0
 801a9a2:	d0f5      	beq.n	801a990 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801a9a4:	7812      	ldrb	r2, [r2, #0]
 801a9a6:	e7f0      	b.n	801a98a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801a9a8:	2d00      	cmp	r5, #0
 801a9aa:	d0ea      	beq.n	801a982 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a9ac:	782a      	ldrb	r2, [r5, #0]
 801a9ae:	b142      	cbz	r2, 801a9c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801a9b0:	2a25      	cmp	r2, #37	; 0x25
 801a9b2:	d001      	beq.n	801a9b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801a9b4:	459a      	cmp	sl, r3
 801a9b6:	dc08      	bgt.n	801a9ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801a9b8:	f1bb 0f00 	cmp.w	fp, #0
 801a9bc:	d121      	bne.n	801aa02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801a9be:	2d00      	cmp	r5, #0
 801a9c0:	d0df      	beq.n	801a982 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a9c2:	782a      	ldrb	r2, [r5, #0]
 801a9c4:	f04f 0b00 	mov.w	fp, #0
 801a9c8:	e01d      	b.n	801aa06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801a9ca:	f1bb 0f00 	cmp.w	fp, #0
 801a9ce:	d078      	beq.n	801aac2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 801a9d0:	f8bb 2000 	ldrh.w	r2, [fp]
 801a9d4:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801a9d8:	f1bb 0f00 	cmp.w	fp, #0
 801a9dc:	d002      	beq.n	801a9e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801a9de:	f10b 0202 	add.w	r2, fp, #2
 801a9e2:	9209      	str	r2, [sp, #36]	; 0x24
 801a9e4:	b10d      	cbz	r5, 801a9ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801a9e6:	3501      	adds	r5, #1
 801a9e8:	9508      	str	r5, [sp, #32]
 801a9ea:	3301      	adds	r3, #1
 801a9ec:	930d      	str	r3, [sp, #52]	; 0x34
 801a9ee:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801a9f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a9f4:	f1bb 0f00 	cmp.w	fp, #0
 801a9f8:	d0d6      	beq.n	801a9a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801a9fa:	f8bb 2000 	ldrh.w	r2, [fp]
 801a9fe:	2a00      	cmp	r2, #0
 801aa00:	d1d6      	bne.n	801a9b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801aa02:	f8bb 2000 	ldrh.w	r2, [fp]
 801aa06:	2a00      	cmp	r2, #0
 801aa08:	d0bb      	beq.n	801a982 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801aa0a:	459a      	cmp	sl, r3
 801aa0c:	ddb9      	ble.n	801a982 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801aa0e:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801aa12:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801aa16:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801aa1a:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801aa1e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801aa22:	960e      	str	r6, [sp, #56]	; 0x38
 801aa24:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801aa28:	960f      	str	r6, [sp, #60]	; 0x3c
 801aa2a:	f1bb 0f00 	cmp.w	fp, #0
 801aa2e:	d002      	beq.n	801aa36 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801aa30:	f10b 0302 	add.w	r3, fp, #2
 801aa34:	9309      	str	r3, [sp, #36]	; 0x24
 801aa36:	b10d      	cbz	r5, 801aa3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801aa38:	1c6b      	adds	r3, r5, #1
 801aa3a:	9308      	str	r3, [sp, #32]
 801aa3c:	ab0f      	add	r3, sp, #60	; 0x3c
 801aa3e:	9305      	str	r3, [sp, #20]
 801aa40:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801aa44:	9304      	str	r3, [sp, #16]
 801aa46:	ab0e      	add	r3, sp, #56	; 0x38
 801aa48:	9303      	str	r3, [sp, #12]
 801aa4a:	ab0c      	add	r3, sp, #48	; 0x30
 801aa4c:	9302      	str	r3, [sp, #8]
 801aa4e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801aa52:	9301      	str	r3, [sp, #4]
 801aa54:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801aa58:	9300      	str	r3, [sp, #0]
 801aa5a:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801aa5e:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801aa62:	a908      	add	r1, sp, #32
 801aa64:	a809      	add	r0, sp, #36	; 0x24
 801aa66:	f7ff fea8 	bl	801a7ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801aa6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aa6c:	2b00      	cmp	r3, #0
 801aa6e:	bfbe      	ittt	lt
 801aa70:	6823      	ldrlt	r3, [r4, #0]
 801aa72:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801aa76:	930e      	strlt	r3, [sp, #56]	; 0x38
 801aa78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aa7a:	bfb8      	it	lt
 801aa7c:	3404      	addlt	r4, #4
 801aa7e:	2b00      	cmp	r3, #0
 801aa80:	bfb8      	it	lt
 801aa82:	6823      	ldrlt	r3, [r4, #0]
 801aa84:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801aa88:	bfbe      	ittt	lt
 801aa8a:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801aa8e:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801aa90:	3404      	addlt	r4, #4
 801aa92:	b1d9      	cbz	r1, 801aacc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 801aa94:	880b      	ldrh	r3, [r1, #0]
 801aa96:	2b69      	cmp	r3, #105	; 0x69
 801aa98:	d01f      	beq.n	801aada <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801aa9a:	d82f      	bhi.n	801aafc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 801aa9c:	2b58      	cmp	r3, #88	; 0x58
 801aa9e:	d01c      	beq.n	801aada <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801aaa0:	d818      	bhi.n	801aad4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 801aaa2:	2b25      	cmp	r3, #37	; 0x25
 801aaa4:	d034      	beq.n	801ab10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 801aaa6:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801aaaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aaac:	f1bb 0f00 	cmp.w	fp, #0
 801aab0:	f000 80b8 	beq.w	801ac24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 801aab4:	f8bb 5000 	ldrh.w	r5, [fp]
 801aab8:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801aabc:	3301      	adds	r3, #1
 801aabe:	930d      	str	r3, [sp, #52]	; 0x34
 801aac0:	e029      	b.n	801ab16 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 801aac2:	b10d      	cbz	r5, 801aac8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 801aac4:	782a      	ldrb	r2, [r5, #0]
 801aac6:	e785      	b.n	801a9d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801aac8:	462a      	mov	r2, r5
 801aaca:	e783      	b.n	801a9d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801aacc:	2a00      	cmp	r2, #0
 801aace:	d0ea      	beq.n	801aaa6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801aad0:	7813      	ldrb	r3, [r2, #0]
 801aad2:	e7e0      	b.n	801aa96 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 801aad4:	3b63      	subs	r3, #99	; 0x63
 801aad6:	2b01      	cmp	r3, #1
 801aad8:	d8e5      	bhi.n	801aaa6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801aada:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801aade:	b329      	cbz	r1, 801ab2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 801aae0:	880b      	ldrh	r3, [r1, #0]
 801aae2:	2b69      	cmp	r3, #105	; 0x69
 801aae4:	d063      	beq.n	801abae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 801aae6:	d825      	bhi.n	801ab34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 801aae8:	2b63      	cmp	r3, #99	; 0x63
 801aaea:	d038      	beq.n	801ab5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 801aaec:	2b64      	cmp	r3, #100	; 0x64
 801aaee:	d05e      	beq.n	801abae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 801aaf0:	2b58      	cmp	r3, #88	; 0x58
 801aaf2:	d07b      	beq.n	801abec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 801aaf4:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801aaf8:	4625      	mov	r5, r4
 801aafa:	e036      	b.n	801ab6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801aafc:	2b73      	cmp	r3, #115	; 0x73
 801aafe:	d0ec      	beq.n	801aada <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801ab00:	d802      	bhi.n	801ab08 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 801ab02:	2b6f      	cmp	r3, #111	; 0x6f
 801ab04:	d1cf      	bne.n	801aaa6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801ab06:	e7e8      	b.n	801aada <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801ab08:	2b75      	cmp	r3, #117	; 0x75
 801ab0a:	d0e6      	beq.n	801aada <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801ab0c:	2b78      	cmp	r3, #120	; 0x78
 801ab0e:	e7f9      	b.n	801ab04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 801ab10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ab12:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801ab16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab18:	b10b      	cbz	r3, 801ab1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 801ab1a:	3302      	adds	r3, #2
 801ab1c:	9309      	str	r3, [sp, #36]	; 0x24
 801ab1e:	9b08      	ldr	r3, [sp, #32]
 801ab20:	2b00      	cmp	r3, #0
 801ab22:	f43f af2e 	beq.w	801a982 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ab26:	3301      	adds	r3, #1
 801ab28:	9308      	str	r3, [sp, #32]
 801ab2a:	e72a      	b.n	801a982 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ab2c:	2a00      	cmp	r2, #0
 801ab2e:	d0e1      	beq.n	801aaf4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801ab30:	7813      	ldrb	r3, [r2, #0]
 801ab32:	e7d6      	b.n	801aae2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 801ab34:	2b73      	cmp	r3, #115	; 0x73
 801ab36:	d036      	beq.n	801aba6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 801ab38:	d807      	bhi.n	801ab4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 801ab3a:	2b6f      	cmp	r3, #111	; 0x6f
 801ab3c:	d1da      	bne.n	801aaf4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801ab3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ab40:	1d25      	adds	r5, r4, #4
 801ab42:	eba8 0202 	sub.w	r2, r8, r2
 801ab46:	2308      	movs	r3, #8
 801ab48:	e04a      	b.n	801abe0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 801ab4a:	2b75      	cmp	r3, #117	; 0x75
 801ab4c:	d043      	beq.n	801abd6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 801ab4e:	2b78      	cmp	r3, #120	; 0x78
 801ab50:	d1d0      	bne.n	801aaf4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801ab52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ab54:	1d25      	adds	r5, r4, #4
 801ab56:	eba8 0202 	sub.w	r2, r8, r2
 801ab5a:	2310      	movs	r3, #16
 801ab5c:	e040      	b.n	801abe0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 801ab5e:	7823      	ldrb	r3, [r4, #0]
 801ab60:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801ab64:	1d25      	adds	r5, r4, #4
 801ab66:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801ab6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab6c:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801ab70:	2b00      	cmp	r3, #0
 801ab72:	d052      	beq.n	801ac1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 801ab74:	881a      	ldrh	r2, [r3, #0]
 801ab76:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801ab7a:	a80d      	add	r0, sp, #52	; 0x34
 801ab7c:	9005      	str	r0, [sp, #20]
 801ab7e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801ab82:	9004      	str	r0, [sp, #16]
 801ab84:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ab86:	9003      	str	r0, [sp, #12]
 801ab88:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801ab8c:	9002      	str	r0, [sp, #8]
 801ab8e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ab90:	9001      	str	r0, [sp, #4]
 801ab92:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801ab96:	9000      	str	r0, [sp, #0]
 801ab98:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801ab9c:	a810      	add	r0, sp, #64	; 0x40
 801ab9e:	f7ff fd49 	bl	801a634 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801aba2:	462c      	mov	r4, r5
 801aba4:	e7b7      	b.n	801ab16 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 801aba6:	6823      	ldr	r3, [r4, #0]
 801aba8:	1d25      	adds	r5, r4, #4
 801abaa:	9310      	str	r3, [sp, #64]	; 0x40
 801abac:	e7dd      	b.n	801ab6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801abae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801abb0:	6820      	ldr	r0, [r4, #0]
 801abb2:	eba8 0202 	sub.w	r2, r8, r2
 801abb6:	230a      	movs	r3, #10
 801abb8:	b292      	uxth	r2, r2
 801abba:	4649      	mov	r1, r9
 801abbc:	f7ff fd08 	bl	801a5d0 <_ZN8touchgfx7Unicode4itoaElPtti>
 801abc0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801abc4:	2b2d      	cmp	r3, #45	; 0x2d
 801abc6:	f104 0504 	add.w	r5, r4, #4
 801abca:	d1ce      	bne.n	801ab6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801abcc:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801abd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801abd2:	3302      	adds	r3, #2
 801abd4:	e7e9      	b.n	801abaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 801abd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801abd8:	1d25      	adds	r5, r4, #4
 801abda:	eba8 0202 	sub.w	r2, r8, r2
 801abde:	230a      	movs	r3, #10
 801abe0:	b292      	uxth	r2, r2
 801abe2:	4649      	mov	r1, r9
 801abe4:	6820      	ldr	r0, [r4, #0]
 801abe6:	f7ff fcd5 	bl	801a594 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801abea:	e7be      	b.n	801ab6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801abec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801abee:	6820      	ldr	r0, [r4, #0]
 801abf0:	eba8 0202 	sub.w	r2, r8, r2
 801abf4:	b292      	uxth	r2, r2
 801abf6:	2310      	movs	r3, #16
 801abf8:	4649      	mov	r1, r9
 801abfa:	f7ff fccb 	bl	801a594 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801abfe:	1d25      	adds	r5, r4, #4
 801ac00:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801ac04:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	d0ae      	beq.n	801ab6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801ac0c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801ac10:	2919      	cmp	r1, #25
 801ac12:	d8f7      	bhi.n	801ac04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 801ac14:	3b20      	subs	r3, #32
 801ac16:	8013      	strh	r3, [r2, #0]
 801ac18:	e7f4      	b.n	801ac04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 801ac1a:	9a08      	ldr	r2, [sp, #32]
 801ac1c:	2a00      	cmp	r2, #0
 801ac1e:	d0aa      	beq.n	801ab76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 801ac20:	7812      	ldrb	r2, [r2, #0]
 801ac22:	e7a8      	b.n	801ab76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 801ac24:	2d00      	cmp	r5, #0
 801ac26:	f43f af47 	beq.w	801aab8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 801ac2a:	782d      	ldrb	r5, [r5, #0]
 801ac2c:	e744      	b.n	801aab8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

0801ac2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801ac2e:	b507      	push	{r0, r1, r2, lr}
 801ac30:	9300      	str	r3, [sp, #0]
 801ac32:	4613      	mov	r3, r2
 801ac34:	2200      	movs	r2, #0
 801ac36:	f7ff fe90 	bl	801a95a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801ac3a:	b003      	add	sp, #12
 801ac3c:	f85d fb04 	ldr.w	pc, [sp], #4

0801ac40 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801ac40:	b40c      	push	{r2, r3}
 801ac42:	b507      	push	{r0, r1, r2, lr}
 801ac44:	ab04      	add	r3, sp, #16
 801ac46:	f853 2b04 	ldr.w	r2, [r3], #4
 801ac4a:	9301      	str	r3, [sp, #4]
 801ac4c:	f7ff ffef 	bl	801ac2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801ac50:	b003      	add	sp, #12
 801ac52:	f85d eb04 	ldr.w	lr, [sp], #4
 801ac56:	b002      	add	sp, #8
 801ac58:	4770      	bx	lr
	...

0801ac5c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801ac5c:	4b01      	ldr	r3, [pc, #4]	; (801ac64 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801ac5e:	6018      	str	r0, [r3, #0]
 801ac60:	4770      	bx	lr
 801ac62:	bf00      	nop
 801ac64:	2000a150 	.word	0x2000a150

0801ac68 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801ac68:	4b06      	ldr	r3, [pc, #24]	; (801ac84 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801ac6a:	881a      	ldrh	r2, [r3, #0]
 801ac6c:	4282      	cmp	r2, r0
 801ac6e:	d807      	bhi.n	801ac80 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801ac70:	4b05      	ldr	r3, [pc, #20]	; (801ac88 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801ac72:	881b      	ldrh	r3, [r3, #0]
 801ac74:	4413      	add	r3, r2
 801ac76:	4298      	cmp	r0, r3
 801ac78:	bfac      	ite	ge
 801ac7a:	2000      	movge	r0, #0
 801ac7c:	2001      	movlt	r0, #1
 801ac7e:	4770      	bx	lr
 801ac80:	2000      	movs	r0, #0
 801ac82:	4770      	bx	lr
 801ac84:	2000a170 	.word	0x2000a170
 801ac88:	2000a174 	.word	0x2000a174

0801ac8c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801ac8c:	b508      	push	{r3, lr}
 801ac8e:	4601      	mov	r1, r0
 801ac90:	f7ff ffea 	bl	801ac68 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801ac94:	b118      	cbz	r0, 801ac9e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801ac96:	4b02      	ldr	r3, [pc, #8]	; (801aca0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801ac98:	681b      	ldr	r3, [r3, #0]
 801ac9a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801ac9e:	bd08      	pop	{r3, pc}
 801aca0:	2000a154 	.word	0x2000a154

0801aca4 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801aca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aca8:	4d28      	ldr	r5, [pc, #160]	; (801ad4c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801acaa:	682b      	ldr	r3, [r5, #0]
 801acac:	2b00      	cmp	r3, #0
 801acae:	d04a      	beq.n	801ad46 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801acb0:	4a27      	ldr	r2, [pc, #156]	; (801ad50 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801acb2:	4e28      	ldr	r6, [pc, #160]	; (801ad54 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801acb4:	8810      	ldrh	r0, [r2, #0]
 801acb6:	f8b6 8000 	ldrh.w	r8, [r6]
 801acba:	4c27      	ldr	r4, [pc, #156]	; (801ad58 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801acbc:	4f27      	ldr	r7, [pc, #156]	; (801ad5c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801acbe:	4440      	add	r0, r8
 801acc0:	1c41      	adds	r1, r0, #1
 801acc2:	f021 0101 	bic.w	r1, r1, #1
 801acc6:	0409      	lsls	r1, r1, #16
 801acc8:	0c09      	lsrs	r1, r1, #16
 801acca:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801acce:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801acd2:	eb03 020e 	add.w	r2, r3, lr
 801acd6:	eb0e 010c 	add.w	r1, lr, ip
 801acda:	6022      	str	r2, [r4, #0]
 801acdc:	185a      	adds	r2, r3, r1
 801acde:	603a      	str	r2, [r7, #0]
 801ace0:	220e      	movs	r2, #14
 801ace2:	fb02 f208 	mul.w	r2, r2, r8
 801ace6:	3203      	adds	r2, #3
 801ace8:	f022 0203 	bic.w	r2, r2, #3
 801acec:	4411      	add	r1, r2
 801acee:	440b      	add	r3, r1
 801acf0:	491b      	ldr	r1, [pc, #108]	; (801ad60 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801acf2:	600b      	str	r3, [r1, #0]
 801acf4:	491b      	ldr	r1, [pc, #108]	; (801ad64 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801acf6:	2300      	movs	r3, #0
 801acf8:	800b      	strh	r3, [r1, #0]
 801acfa:	491b      	ldr	r1, [pc, #108]	; (801ad68 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801acfc:	6809      	ldr	r1, [r1, #0]
 801acfe:	eba1 010e 	sub.w	r1, r1, lr
 801ad02:	eba1 010c 	sub.w	r1, r1, ip
 801ad06:	1a8a      	subs	r2, r1, r2
 801ad08:	4918      	ldr	r1, [pc, #96]	; (801ad6c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801ad0a:	600a      	str	r2, [r1, #0]
 801ad0c:	4a18      	ldr	r2, [pc, #96]	; (801ad70 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801ad0e:	469c      	mov	ip, r3
 801ad10:	8013      	strh	r3, [r2, #0]
 801ad12:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ad16:	4283      	cmp	r3, r0
 801ad18:	d10d      	bne.n	801ad36 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801ad1a:	8835      	ldrh	r5, [r6, #0]
 801ad1c:	6838      	ldr	r0, [r7, #0]
 801ad1e:	2300      	movs	r3, #0
 801ad20:	240e      	movs	r4, #14
 801ad22:	429d      	cmp	r5, r3
 801ad24:	d90f      	bls.n	801ad46 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801ad26:	fb04 0203 	mla	r2, r4, r3, r0
 801ad2a:	3301      	adds	r3, #1
 801ad2c:	7b11      	ldrb	r1, [r2, #12]
 801ad2e:	f36f 1145 	bfc	r1, #5, #1
 801ad32:	7311      	strb	r1, [r2, #12]
 801ad34:	e7f5      	b.n	801ad22 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801ad36:	682a      	ldr	r2, [r5, #0]
 801ad38:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801ad3c:	6822      	ldr	r2, [r4, #0]
 801ad3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801ad42:	3301      	adds	r3, #1
 801ad44:	e7e7      	b.n	801ad16 <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801ad46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad4a:	bf00      	nop
 801ad4c:	2000a154 	.word	0x2000a154
 801ad50:	2000a170 	.word	0x2000a170
 801ad54:	2000a174 	.word	0x2000a174
 801ad58:	2000a168 	.word	0x2000a168
 801ad5c:	2000a158 	.word	0x2000a158
 801ad60:	2000a160 	.word	0x2000a160
 801ad64:	2000a172 	.word	0x2000a172
 801ad68:	2000a15c 	.word	0x2000a15c
 801ad6c:	2000a16c 	.word	0x2000a16c
 801ad70:	2000a164 	.word	0x2000a164

0801ad74 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801ad74:	b510      	push	{r4, lr}
 801ad76:	4b10      	ldr	r3, [pc, #64]	; (801adb8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801ad78:	681b      	ldr	r3, [r3, #0]
 801ad7a:	b9db      	cbnz	r3, 801adb4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801ad7c:	b1d1      	cbz	r1, 801adb4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801ad7e:	4b0f      	ldr	r3, [pc, #60]	; (801adbc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801ad80:	801a      	strh	r2, [r3, #0]
 801ad82:	4b0f      	ldr	r3, [pc, #60]	; (801adc0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801ad84:	881b      	ldrh	r3, [r3, #0]
 801ad86:	b292      	uxth	r2, r2
 801ad88:	240e      	movs	r4, #14
 801ad8a:	4413      	add	r3, r2
 801ad8c:	4362      	muls	r2, r4
 801ad8e:	2406      	movs	r4, #6
 801ad90:	fb04 2203 	mla	r2, r4, r3, r2
 801ad94:	428a      	cmp	r2, r1
 801ad96:	d305      	bcc.n	801ada4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801ad98:	4b0a      	ldr	r3, [pc, #40]	; (801adc4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801ad9a:	4a0b      	ldr	r2, [pc, #44]	; (801adc8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801ad9c:	480b      	ldr	r0, [pc, #44]	; (801adcc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801ad9e:	2137      	movs	r1, #55	; 0x37
 801ada0:	f00b ff40 	bl	8026c24 <__assert_func>
 801ada4:	4b0a      	ldr	r3, [pc, #40]	; (801add0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801ada6:	6019      	str	r1, [r3, #0]
 801ada8:	4b0a      	ldr	r3, [pc, #40]	; (801add4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801adaa:	6018      	str	r0, [r3, #0]
 801adac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801adb0:	f7ff bf78 	b.w	801aca4 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801adb4:	bd10      	pop	{r4, pc}
 801adb6:	bf00      	nop
 801adb8:	2000a160 	.word	0x2000a160
 801adbc:	2000a174 	.word	0x2000a174
 801adc0:	2000a170 	.word	0x2000a170
 801adc4:	0802c3a5 	.word	0x0802c3a5
 801adc8:	0802c3fe 	.word	0x0802c3fe
 801adcc:	0802c380 	.word	0x0802c380
 801add0:	2000a15c 	.word	0x2000a15c
 801add4:	2000a154 	.word	0x2000a154

0801add8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801add8:	b470      	push	{r4, r5, r6}
 801adda:	4c07      	ldr	r4, [pc, #28]	; (801adf8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801addc:	6826      	ldr	r6, [r4, #0]
 801adde:	4605      	mov	r5, r0
 801ade0:	4610      	mov	r0, r2
 801ade2:	9a03      	ldr	r2, [sp, #12]
 801ade4:	b936      	cbnz	r6, 801adf4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801ade6:	6025      	str	r5, [r4, #0]
 801ade8:	4c04      	ldr	r4, [pc, #16]	; (801adfc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801adea:	8021      	strh	r1, [r4, #0]
 801adec:	bc70      	pop	{r4, r5, r6}
 801adee:	4619      	mov	r1, r3
 801adf0:	f7ff bfc0 	b.w	801ad74 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801adf4:	bc70      	pop	{r4, r5, r6}
 801adf6:	4770      	bx	lr
 801adf8:	2000a178 	.word	0x2000a178
 801adfc:	2000a170 	.word	0x2000a170

0801ae00 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801ae00:	b508      	push	{r3, lr}
 801ae02:	4b14      	ldr	r3, [pc, #80]	; (801ae54 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801ae04:	6819      	ldr	r1, [r3, #0]
 801ae06:	b931      	cbnz	r1, 801ae16 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801ae08:	4b13      	ldr	r3, [pc, #76]	; (801ae58 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801ae0a:	4a14      	ldr	r2, [pc, #80]	; (801ae5c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801ae0c:	4814      	ldr	r0, [pc, #80]	; (801ae60 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801ae0e:	f240 3187 	movw	r1, #903	; 0x387
 801ae12:	f00b ff07 	bl	8026c24 <__assert_func>
 801ae16:	4a13      	ldr	r2, [pc, #76]	; (801ae64 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801ae18:	8803      	ldrh	r3, [r0, #0]
 801ae1a:	8812      	ldrh	r2, [r2, #0]
 801ae1c:	4293      	cmp	r3, r2
 801ae1e:	d204      	bcs.n	801ae2a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801ae20:	2214      	movs	r2, #20
 801ae22:	fb02 1303 	mla	r3, r2, r3, r1
 801ae26:	8918      	ldrh	r0, [r3, #8]
 801ae28:	bd08      	pop	{r3, pc}
 801ae2a:	490f      	ldr	r1, [pc, #60]	; (801ae68 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801ae2c:	8809      	ldrh	r1, [r1, #0]
 801ae2e:	4411      	add	r1, r2
 801ae30:	428b      	cmp	r3, r1
 801ae32:	da06      	bge.n	801ae42 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801ae34:	1a9b      	subs	r3, r3, r2
 801ae36:	4a0d      	ldr	r2, [pc, #52]	; (801ae6c <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801ae38:	6812      	ldr	r2, [r2, #0]
 801ae3a:	210e      	movs	r1, #14
 801ae3c:	fb01 2303 	mla	r3, r1, r3, r2
 801ae40:	e7f1      	b.n	801ae26 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801ae42:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ae46:	4293      	cmp	r3, r2
 801ae48:	bf0a      	itet	eq
 801ae4a:	4b09      	ldreq	r3, [pc, #36]	; (801ae70 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801ae4c:	2000      	movne	r0, #0
 801ae4e:	8818      	ldrheq	r0, [r3, #0]
 801ae50:	e7ea      	b.n	801ae28 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801ae52:	bf00      	nop
 801ae54:	2000a178 	.word	0x2000a178
 801ae58:	0802b7ec 	.word	0x0802b7ec
 801ae5c:	0802c4ab 	.word	0x0802c4ab
 801ae60:	0802c380 	.word	0x0802c380
 801ae64:	2000a170 	.word	0x2000a170
 801ae68:	2000a174 	.word	0x2000a174
 801ae6c:	2000a158 	.word	0x2000a158
 801ae70:	2000a0e4 	.word	0x2000a0e4

0801ae74 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801ae74:	b508      	push	{r3, lr}
 801ae76:	4b14      	ldr	r3, [pc, #80]	; (801aec8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801ae78:	6819      	ldr	r1, [r3, #0]
 801ae7a:	b931      	cbnz	r1, 801ae8a <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801ae7c:	4b13      	ldr	r3, [pc, #76]	; (801aecc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801ae7e:	4a14      	ldr	r2, [pc, #80]	; (801aed0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801ae80:	4814      	ldr	r0, [pc, #80]	; (801aed4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801ae82:	f240 319b 	movw	r1, #923	; 0x39b
 801ae86:	f00b fecd 	bl	8026c24 <__assert_func>
 801ae8a:	4a13      	ldr	r2, [pc, #76]	; (801aed8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801ae8c:	8803      	ldrh	r3, [r0, #0]
 801ae8e:	8812      	ldrh	r2, [r2, #0]
 801ae90:	4293      	cmp	r3, r2
 801ae92:	d204      	bcs.n	801ae9e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801ae94:	2214      	movs	r2, #20
 801ae96:	fb02 1303 	mla	r3, r2, r3, r1
 801ae9a:	8958      	ldrh	r0, [r3, #10]
 801ae9c:	bd08      	pop	{r3, pc}
 801ae9e:	490f      	ldr	r1, [pc, #60]	; (801aedc <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801aea0:	8809      	ldrh	r1, [r1, #0]
 801aea2:	4411      	add	r1, r2
 801aea4:	428b      	cmp	r3, r1
 801aea6:	da06      	bge.n	801aeb6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801aea8:	1a9b      	subs	r3, r3, r2
 801aeaa:	4a0d      	ldr	r2, [pc, #52]	; (801aee0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801aeac:	6812      	ldr	r2, [r2, #0]
 801aeae:	210e      	movs	r1, #14
 801aeb0:	fb01 2303 	mla	r3, r1, r3, r2
 801aeb4:	e7f1      	b.n	801ae9a <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801aeb6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801aeba:	4293      	cmp	r3, r2
 801aebc:	bf0a      	itet	eq
 801aebe:	4b09      	ldreq	r3, [pc, #36]	; (801aee4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801aec0:	2000      	movne	r0, #0
 801aec2:	8818      	ldrheq	r0, [r3, #0]
 801aec4:	e7ea      	b.n	801ae9c <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801aec6:	bf00      	nop
 801aec8:	2000a178 	.word	0x2000a178
 801aecc:	0802b7ec 	.word	0x0802b7ec
 801aed0:	0802c4d7 	.word	0x0802c4d7
 801aed4:	0802c380 	.word	0x0802c380
 801aed8:	2000a170 	.word	0x2000a170
 801aedc:	2000a174 	.word	0x2000a174
 801aee0:	2000a158 	.word	0x2000a158
 801aee4:	2000a0e6 	.word	0x2000a0e6

0801aee8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801aee8:	b510      	push	{r4, lr}
 801aeea:	4b23      	ldr	r3, [pc, #140]	; (801af78 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801aeec:	681c      	ldr	r4, [r3, #0]
 801aeee:	b934      	cbnz	r4, 801aefe <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801aef0:	4b22      	ldr	r3, [pc, #136]	; (801af7c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801aef2:	4a23      	ldr	r2, [pc, #140]	; (801af80 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801aef4:	4823      	ldr	r0, [pc, #140]	; (801af84 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801aef6:	f240 31af 	movw	r1, #943	; 0x3af
 801aefa:	f00b fe93 	bl	8026c24 <__assert_func>
 801aefe:	4a22      	ldr	r2, [pc, #136]	; (801af88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801af00:	880b      	ldrh	r3, [r1, #0]
 801af02:	8812      	ldrh	r2, [r2, #0]
 801af04:	4293      	cmp	r3, r2
 801af06:	d211      	bcs.n	801af2c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801af08:	2214      	movs	r2, #20
 801af0a:	fb02 4303 	mla	r3, r2, r3, r4
 801af0e:	8a1a      	ldrh	r2, [r3, #16]
 801af10:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801af14:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801af18:	8a5b      	ldrh	r3, [r3, #18]
 801af1a:	8004      	strh	r4, [r0, #0]
 801af1c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801af20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801af24:	8041      	strh	r1, [r0, #2]
 801af26:	8082      	strh	r2, [r0, #4]
 801af28:	80c3      	strh	r3, [r0, #6]
 801af2a:	e00e      	b.n	801af4a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801af2c:	4917      	ldr	r1, [pc, #92]	; (801af8c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801af2e:	8809      	ldrh	r1, [r1, #0]
 801af30:	4411      	add	r1, r2
 801af32:	428b      	cmp	r3, r1
 801af34:	da0a      	bge.n	801af4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801af36:	1a9b      	subs	r3, r3, r2
 801af38:	4a15      	ldr	r2, [pc, #84]	; (801af90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801af3a:	6812      	ldr	r2, [r2, #0]
 801af3c:	210e      	movs	r1, #14
 801af3e:	fb01 2303 	mla	r3, r1, r3, r2
 801af42:	681a      	ldr	r2, [r3, #0]
 801af44:	6002      	str	r2, [r0, #0]
 801af46:	685a      	ldr	r2, [r3, #4]
 801af48:	6042      	str	r2, [r0, #4]
 801af4a:	bd10      	pop	{r4, pc}
 801af4c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801af50:	4293      	cmp	r3, r2
 801af52:	d10b      	bne.n	801af6c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801af54:	4b0f      	ldr	r3, [pc, #60]	; (801af94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801af56:	f9b3 1000 	ldrsh.w	r1, [r3]
 801af5a:	4b0f      	ldr	r3, [pc, #60]	; (801af98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801af5c:	8081      	strh	r1, [r0, #4]
 801af5e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801af62:	80c2      	strh	r2, [r0, #6]
 801af64:	2300      	movs	r3, #0
 801af66:	8003      	strh	r3, [r0, #0]
 801af68:	8043      	strh	r3, [r0, #2]
 801af6a:	e7ee      	b.n	801af4a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801af6c:	2300      	movs	r3, #0
 801af6e:	8003      	strh	r3, [r0, #0]
 801af70:	8043      	strh	r3, [r0, #2]
 801af72:	8083      	strh	r3, [r0, #4]
 801af74:	e7d8      	b.n	801af28 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801af76:	bf00      	nop
 801af78:	2000a178 	.word	0x2000a178
 801af7c:	0802b7ec 	.word	0x0802b7ec
 801af80:	0802c444 	.word	0x0802c444
 801af84:	0802c380 	.word	0x0802c380
 801af88:	2000a170 	.word	0x2000a170
 801af8c:	2000a174 	.word	0x2000a174
 801af90:	2000a158 	.word	0x2000a158
 801af94:	2000a0e4 	.word	0x2000a0e4
 801af98:	2000a0e6 	.word	0x2000a0e6

0801af9c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801af9c:	4b18      	ldr	r3, [pc, #96]	; (801b000 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801af9e:	681b      	ldr	r3, [r3, #0]
 801afa0:	b34b      	cbz	r3, 801aff6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801afa2:	4a18      	ldr	r2, [pc, #96]	; (801b004 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801afa4:	8800      	ldrh	r0, [r0, #0]
 801afa6:	8812      	ldrh	r2, [r2, #0]
 801afa8:	4290      	cmp	r0, r2
 801afaa:	d211      	bcs.n	801afd0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801afac:	2214      	movs	r2, #20
 801afae:	fb02 3300 	mla	r3, r2, r0, r3
 801afb2:	8a1a      	ldrh	r2, [r3, #16]
 801afb4:	8919      	ldrh	r1, [r3, #8]
 801afb6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801afba:	428a      	cmp	r2, r1
 801afbc:	db1d      	blt.n	801affa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801afbe:	8a58      	ldrh	r0, [r3, #18]
 801afc0:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801afc4:	895b      	ldrh	r3, [r3, #10]
 801afc6:	4298      	cmp	r0, r3
 801afc8:	bfac      	ite	ge
 801afca:	2000      	movge	r0, #0
 801afcc:	2001      	movlt	r0, #1
 801afce:	4770      	bx	lr
 801afd0:	4b0d      	ldr	r3, [pc, #52]	; (801b008 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801afd2:	881b      	ldrh	r3, [r3, #0]
 801afd4:	4413      	add	r3, r2
 801afd6:	4298      	cmp	r0, r3
 801afd8:	da0d      	bge.n	801aff6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801afda:	4b0c      	ldr	r3, [pc, #48]	; (801b00c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801afdc:	681b      	ldr	r3, [r3, #0]
 801afde:	1a80      	subs	r0, r0, r2
 801afe0:	220e      	movs	r2, #14
 801afe2:	fb02 3300 	mla	r3, r2, r0, r3
 801afe6:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801afea:	891a      	ldrh	r2, [r3, #8]
 801afec:	4291      	cmp	r1, r2
 801afee:	db04      	blt.n	801affa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801aff0:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801aff4:	e7e6      	b.n	801afc4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801aff6:	2000      	movs	r0, #0
 801aff8:	4770      	bx	lr
 801affa:	2001      	movs	r0, #1
 801affc:	4770      	bx	lr
 801affe:	bf00      	nop
 801b000:	2000a178 	.word	0x2000a178
 801b004:	2000a170 	.word	0x2000a170
 801b008:	2000a174 	.word	0x2000a174
 801b00c:	2000a158 	.word	0x2000a158

0801b010 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801b010:	b508      	push	{r3, lr}
 801b012:	4b12      	ldr	r3, [pc, #72]	; (801b05c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801b014:	6819      	ldr	r1, [r3, #0]
 801b016:	b931      	cbnz	r1, 801b026 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801b018:	4b11      	ldr	r3, [pc, #68]	; (801b060 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b01a:	4a12      	ldr	r2, [pc, #72]	; (801b064 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801b01c:	4812      	ldr	r0, [pc, #72]	; (801b068 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801b01e:	f240 31d3 	movw	r1, #979	; 0x3d3
 801b022:	f00b fdff 	bl	8026c24 <__assert_func>
 801b026:	8803      	ldrh	r3, [r0, #0]
 801b028:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b02c:	4293      	cmp	r3, r2
 801b02e:	d012      	beq.n	801b056 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801b030:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b034:	4293      	cmp	r3, r2
 801b036:	d103      	bne.n	801b040 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801b038:	4b0c      	ldr	r3, [pc, #48]	; (801b06c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801b03a:	681b      	ldr	r3, [r3, #0]
 801b03c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801b03e:	bd08      	pop	{r3, pc}
 801b040:	4a0b      	ldr	r2, [pc, #44]	; (801b070 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801b042:	6812      	ldr	r2, [r2, #0]
 801b044:	b11a      	cbz	r2, 801b04e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801b046:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b04a:	2800      	cmp	r0, #0
 801b04c:	d1f7      	bne.n	801b03e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b04e:	2214      	movs	r2, #20
 801b050:	4353      	muls	r3, r2
 801b052:	58c8      	ldr	r0, [r1, r3]
 801b054:	e7f3      	b.n	801b03e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b056:	2000      	movs	r0, #0
 801b058:	e7f1      	b.n	801b03e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b05a:	bf00      	nop
 801b05c:	2000a178 	.word	0x2000a178
 801b060:	0802b7ec 	.word	0x0802b7ec
 801b064:	0802c47a 	.word	0x0802c47a
 801b068:	0802c380 	.word	0x0802c380
 801b06c:	2000a0f0 	.word	0x2000a0f0
 801b070:	2000a154 	.word	0x2000a154

0801b074 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801b074:	8802      	ldrh	r2, [r0, #0]
 801b076:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801b07a:	429a      	cmp	r2, r3
 801b07c:	d845      	bhi.n	801b10a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801b07e:	4b24      	ldr	r3, [pc, #144]	; (801b110 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801b080:	8818      	ldrh	r0, [r3, #0]
 801b082:	4282      	cmp	r2, r0
 801b084:	d221      	bcs.n	801b0ca <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801b086:	4b23      	ldr	r3, [pc, #140]	; (801b114 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801b088:	6819      	ldr	r1, [r3, #0]
 801b08a:	2314      	movs	r3, #20
 801b08c:	fb03 1302 	mla	r3, r3, r2, r1
 801b090:	6858      	ldr	r0, [r3, #4]
 801b092:	2800      	cmp	r0, #0
 801b094:	d03a      	beq.n	801b10c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801b096:	4920      	ldr	r1, [pc, #128]	; (801b118 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801b098:	6809      	ldr	r1, [r1, #0]
 801b09a:	2900      	cmp	r1, #0
 801b09c:	d036      	beq.n	801b10c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801b09e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b0a2:	2900      	cmp	r1, #0
 801b0a4:	d032      	beq.n	801b10c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801b0a6:	891a      	ldrh	r2, [r3, #8]
 801b0a8:	8958      	ldrh	r0, [r3, #10]
 801b0aa:	4350      	muls	r0, r2
 801b0ac:	7c5a      	ldrb	r2, [r3, #17]
 801b0ae:	7cdb      	ldrb	r3, [r3, #19]
 801b0b0:	0952      	lsrs	r2, r2, #5
 801b0b2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801b0b6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801b0ba:	2b0b      	cmp	r3, #11
 801b0bc:	bf18      	it	ne
 801b0be:	0040      	lslne	r0, r0, #1
 801b0c0:	3003      	adds	r0, #3
 801b0c2:	f020 0003 	bic.w	r0, r0, #3
 801b0c6:	4408      	add	r0, r1
 801b0c8:	4770      	bx	lr
 801b0ca:	4b14      	ldr	r3, [pc, #80]	; (801b11c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801b0cc:	881b      	ldrh	r3, [r3, #0]
 801b0ce:	4403      	add	r3, r0
 801b0d0:	429a      	cmp	r2, r3
 801b0d2:	da1a      	bge.n	801b10a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801b0d4:	4b12      	ldr	r3, [pc, #72]	; (801b120 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801b0d6:	681b      	ldr	r3, [r3, #0]
 801b0d8:	1a10      	subs	r0, r2, r0
 801b0da:	210e      	movs	r1, #14
 801b0dc:	fb01 3000 	mla	r0, r1, r0, r3
 801b0e0:	7b03      	ldrb	r3, [r0, #12]
 801b0e2:	f003 031f 	and.w	r3, r3, #31
 801b0e6:	2b0b      	cmp	r3, #11
 801b0e8:	d10b      	bne.n	801b102 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b0ea:	8903      	ldrh	r3, [r0, #8]
 801b0ec:	8940      	ldrh	r0, [r0, #10]
 801b0ee:	4358      	muls	r0, r3
 801b0f0:	4b09      	ldr	r3, [pc, #36]	; (801b118 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801b0f2:	6819      	ldr	r1, [r3, #0]
 801b0f4:	3003      	adds	r0, #3
 801b0f6:	f020 0303 	bic.w	r3, r0, #3
 801b0fa:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801b0fe:	4418      	add	r0, r3
 801b100:	4770      	bx	lr
 801b102:	2b0d      	cmp	r3, #13
 801b104:	d101      	bne.n	801b10a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801b106:	300d      	adds	r0, #13
 801b108:	4770      	bx	lr
 801b10a:	2000      	movs	r0, #0
 801b10c:	4770      	bx	lr
 801b10e:	bf00      	nop
 801b110:	2000a170 	.word	0x2000a170
 801b114:	2000a178 	.word	0x2000a178
 801b118:	2000a154 	.word	0x2000a154
 801b11c:	2000a174 	.word	0x2000a174
 801b120:	2000a158 	.word	0x2000a158

0801b124 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801b124:	4b19      	ldr	r3, [pc, #100]	; (801b18c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801b126:	6819      	ldr	r1, [r3, #0]
 801b128:	8803      	ldrh	r3, [r0, #0]
 801b12a:	b1e9      	cbz	r1, 801b168 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801b12c:	4a18      	ldr	r2, [pc, #96]	; (801b190 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801b12e:	8812      	ldrh	r2, [r2, #0]
 801b130:	429a      	cmp	r2, r3
 801b132:	d90a      	bls.n	801b14a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801b134:	2214      	movs	r2, #20
 801b136:	fb02 1303 	mla	r3, r2, r3, r1
 801b13a:	7c58      	ldrb	r0, [r3, #17]
 801b13c:	0942      	lsrs	r2, r0, #5
 801b13e:	7cd8      	ldrb	r0, [r3, #19]
 801b140:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801b144:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801b148:	4770      	bx	lr
 801b14a:	4912      	ldr	r1, [pc, #72]	; (801b194 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801b14c:	8809      	ldrh	r1, [r1, #0]
 801b14e:	4411      	add	r1, r2
 801b150:	428b      	cmp	r3, r1
 801b152:	da09      	bge.n	801b168 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801b154:	1a9b      	subs	r3, r3, r2
 801b156:	4a10      	ldr	r2, [pc, #64]	; (801b198 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801b158:	6812      	ldr	r2, [r2, #0]
 801b15a:	210e      	movs	r1, #14
 801b15c:	fb01 2303 	mla	r3, r1, r3, r2
 801b160:	7b18      	ldrb	r0, [r3, #12]
 801b162:	f000 001f 	and.w	r0, r0, #31
 801b166:	4770      	bx	lr
 801b168:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b16c:	4293      	cmp	r3, r2
 801b16e:	d10a      	bne.n	801b186 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801b170:	4b0a      	ldr	r3, [pc, #40]	; (801b19c <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801b172:	681b      	ldr	r3, [r3, #0]
 801b174:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b178:	b10a      	cbz	r2, 801b17e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801b17a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801b17c:	b900      	cbnz	r0, 801b180 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801b17e:	6898      	ldr	r0, [r3, #8]
 801b180:	6803      	ldr	r3, [r0, #0]
 801b182:	6a1b      	ldr	r3, [r3, #32]
 801b184:	4718      	bx	r3
 801b186:	2000      	movs	r0, #0
 801b188:	4770      	bx	lr
 801b18a:	bf00      	nop
 801b18c:	2000a178 	.word	0x2000a178
 801b190:	2000a170 	.word	0x2000a170
 801b194:	2000a174 	.word	0x2000a174
 801b198:	2000a158 	.word	0x2000a158
 801b19c:	2000a0f0 	.word	0x2000a0f0

0801b1a0 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801b1a0:	2010      	movs	r0, #16
 801b1a2:	4770      	bx	lr

0801b1a4 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801b1a4:	2000      	movs	r0, #0
 801b1a6:	4770      	bx	lr

0801b1a8 <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 801b1a8:	00d2      	lsls	r2, r2, #3
 801b1aa:	0209      	lsls	r1, r1, #8
 801b1ac:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b1b0:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 801b1b4:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 801b1b8:	4310      	orrs	r0, r2
 801b1ba:	4770      	bx	lr

0801b1bc <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 801b1bc:	0a09      	lsrs	r1, r1, #8
 801b1be:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 801b1c2:	4770      	bx	lr

0801b1c4 <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 801b1c4:	08c9      	lsrs	r1, r1, #3
 801b1c6:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 801b1ca:	4770      	bx	lr

0801b1cc <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 801b1cc:	00c9      	lsls	r1, r1, #3
 801b1ce:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 801b1d2:	4770      	bx	lr

0801b1d4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801b1d4:	2bff      	cmp	r3, #255	; 0xff
 801b1d6:	d050      	beq.n	801b27a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801b1d8:	2a0b      	cmp	r2, #11
 801b1da:	d04a      	beq.n	801b272 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801b1dc:	d80e      	bhi.n	801b1fc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801b1de:	2a03      	cmp	r2, #3
 801b1e0:	d03f      	beq.n	801b262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801b1e2:	d804      	bhi.n	801b1ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b1e4:	2a01      	cmp	r2, #1
 801b1e6:	d03e      	beq.n	801b266 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801b1e8:	d93f      	bls.n	801b26a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801b1ea:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801b1ec:	4770      	bx	lr
 801b1ee:	2a09      	cmp	r2, #9
 801b1f0:	d03f      	beq.n	801b272 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801b1f2:	d83c      	bhi.n	801b26e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801b1f4:	2a08      	cmp	r2, #8
 801b1f6:	d03a      	beq.n	801b26e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801b1f8:	2000      	movs	r0, #0
 801b1fa:	4770      	bx	lr
 801b1fc:	2a2f      	cmp	r2, #47	; 0x2f
 801b1fe:	d024      	beq.n	801b24a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801b200:	d80d      	bhi.n	801b21e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801b202:	2a2d      	cmp	r2, #45	; 0x2d
 801b204:	d014      	beq.n	801b230 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801b206:	d826      	bhi.n	801b256 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801b208:	2a2c      	cmp	r2, #44	; 0x2c
 801b20a:	d1f5      	bne.n	801b1f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b20c:	684b      	ldr	r3, [r1, #4]
 801b20e:	781b      	ldrb	r3, [r3, #0]
 801b210:	2b01      	cmp	r3, #1
 801b212:	d018      	beq.n	801b246 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801b214:	d323      	bcc.n	801b25e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801b216:	2b02      	cmp	r3, #2
 801b218:	d1ee      	bne.n	801b1f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b21a:	6880      	ldr	r0, [r0, #8]
 801b21c:	4770      	bx	lr
 801b21e:	2a31      	cmp	r2, #49	; 0x31
 801b220:	d004      	beq.n	801b22c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801b222:	d328      	bcc.n	801b276 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801b224:	2a32      	cmp	r2, #50	; 0x32
 801b226:	d026      	beq.n	801b276 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801b228:	2a33      	cmp	r2, #51	; 0x33
 801b22a:	d1e5      	bne.n	801b1f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b22c:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801b22e:	4770      	bx	lr
 801b230:	684b      	ldr	r3, [r1, #4]
 801b232:	781b      	ldrb	r3, [r3, #0]
 801b234:	2b01      	cmp	r3, #1
 801b236:	d004      	beq.n	801b242 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b238:	d30b      	bcc.n	801b252 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801b23a:	2b02      	cmp	r3, #2
 801b23c:	d1dc      	bne.n	801b1f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b23e:	6900      	ldr	r0, [r0, #16]
 801b240:	4770      	bx	lr
 801b242:	6a00      	ldr	r0, [r0, #32]
 801b244:	4770      	bx	lr
 801b246:	6980      	ldr	r0, [r0, #24]
 801b248:	4770      	bx	lr
 801b24a:	684b      	ldr	r3, [r1, #4]
 801b24c:	781b      	ldrb	r3, [r3, #0]
 801b24e:	2b00      	cmp	r3, #0
 801b250:	d1d2      	bne.n	801b1f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b252:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801b254:	4770      	bx	lr
 801b256:	684b      	ldr	r3, [r1, #4]
 801b258:	781b      	ldrb	r3, [r3, #0]
 801b25a:	2b00      	cmp	r3, #0
 801b25c:	d1cc      	bne.n	801b1f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b25e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801b260:	4770      	bx	lr
 801b262:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801b264:	4770      	bx	lr
 801b266:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801b268:	4770      	bx	lr
 801b26a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801b26c:	4770      	bx	lr
 801b26e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801b270:	4770      	bx	lr
 801b272:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801b274:	4770      	bx	lr
 801b276:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801b278:	4770      	bx	lr
 801b27a:	2a0b      	cmp	r2, #11
 801b27c:	d049      	beq.n	801b312 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801b27e:	d80e      	bhi.n	801b29e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801b280:	2a03      	cmp	r2, #3
 801b282:	d040      	beq.n	801b306 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801b284:	d804      	bhi.n	801b290 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801b286:	2a01      	cmp	r2, #1
 801b288:	d03f      	beq.n	801b30a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801b28a:	d940      	bls.n	801b30e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801b28c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801b28e:	4770      	bx	lr
 801b290:	2a09      	cmp	r2, #9
 801b292:	d03e      	beq.n	801b312 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801b294:	d801      	bhi.n	801b29a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801b296:	2a08      	cmp	r2, #8
 801b298:	d1ae      	bne.n	801b1f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b29a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801b29c:	4770      	bx	lr
 801b29e:	2a2f      	cmp	r2, #47	; 0x2f
 801b2a0:	d024      	beq.n	801b2ec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801b2a2:	d80d      	bhi.n	801b2c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801b2a4:	2a2d      	cmp	r2, #45	; 0x2d
 801b2a6:	d014      	beq.n	801b2d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801b2a8:	d826      	bhi.n	801b2f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801b2aa:	2a2c      	cmp	r2, #44	; 0x2c
 801b2ac:	d1a4      	bne.n	801b1f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b2ae:	684b      	ldr	r3, [r1, #4]
 801b2b0:	781b      	ldrb	r3, [r3, #0]
 801b2b2:	2b01      	cmp	r3, #1
 801b2b4:	d018      	beq.n	801b2e8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801b2b6:	d324      	bcc.n	801b302 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801b2b8:	2b02      	cmp	r3, #2
 801b2ba:	d19d      	bne.n	801b1f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b2bc:	68c0      	ldr	r0, [r0, #12]
 801b2be:	4770      	bx	lr
 801b2c0:	2a31      	cmp	r2, #49	; 0x31
 801b2c2:	d004      	beq.n	801b2ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801b2c4:	d327      	bcc.n	801b316 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801b2c6:	2a32      	cmp	r2, #50	; 0x32
 801b2c8:	d025      	beq.n	801b316 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801b2ca:	2a33      	cmp	r2, #51	; 0x33
 801b2cc:	d194      	bne.n	801b1f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b2ce:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801b2d0:	4770      	bx	lr
 801b2d2:	684b      	ldr	r3, [r1, #4]
 801b2d4:	781b      	ldrb	r3, [r3, #0]
 801b2d6:	2b01      	cmp	r3, #1
 801b2d8:	d004      	beq.n	801b2e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801b2da:	d30b      	bcc.n	801b2f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801b2dc:	2b02      	cmp	r3, #2
 801b2de:	d18b      	bne.n	801b1f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b2e0:	6940      	ldr	r0, [r0, #20]
 801b2e2:	4770      	bx	lr
 801b2e4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801b2e6:	4770      	bx	lr
 801b2e8:	69c0      	ldr	r0, [r0, #28]
 801b2ea:	4770      	bx	lr
 801b2ec:	684b      	ldr	r3, [r1, #4]
 801b2ee:	781b      	ldrb	r3, [r3, #0]
 801b2f0:	2b00      	cmp	r3, #0
 801b2f2:	d181      	bne.n	801b1f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b2f4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801b2f6:	4770      	bx	lr
 801b2f8:	684b      	ldr	r3, [r1, #4]
 801b2fa:	781b      	ldrb	r3, [r3, #0]
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	f47f af7b 	bne.w	801b1f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b302:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801b304:	4770      	bx	lr
 801b306:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801b308:	4770      	bx	lr
 801b30a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801b30c:	4770      	bx	lr
 801b30e:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801b310:	4770      	bx	lr
 801b312:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801b314:	4770      	bx	lr
 801b316:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801b318:	4770      	bx	lr

0801b31a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b31a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b31e:	b087      	sub	sp, #28
 801b320:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b322:	9205      	str	r2, [sp, #20]
 801b324:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b328:	9202      	str	r2, [sp, #8]
 801b32a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801b32e:	9101      	str	r1, [sp, #4]
 801b330:	6841      	ldr	r1, [r0, #4]
 801b332:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801b336:	fb01 2404 	mla	r4, r1, r4, r2
 801b33a:	6802      	ldr	r2, [r0, #0]
 801b33c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b340:	f8de 2000 	ldr.w	r2, [lr]
 801b344:	9203      	str	r2, [sp, #12]
 801b346:	f8de 2004 	ldr.w	r2, [lr, #4]
 801b34a:	3204      	adds	r2, #4
 801b34c:	9204      	str	r2, [sp, #16]
 801b34e:	9a02      	ldr	r2, [sp, #8]
 801b350:	43d6      	mvns	r6, r2
 801b352:	b2f6      	uxtb	r6, r6
 801b354:	9a01      	ldr	r2, [sp, #4]
 801b356:	2a00      	cmp	r2, #0
 801b358:	dc03      	bgt.n	801b362 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b35a:	9a05      	ldr	r2, [sp, #20]
 801b35c:	2a00      	cmp	r2, #0
 801b35e:	f340 8129 	ble.w	801b5b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b362:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b364:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801b368:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801b36c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b370:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b372:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b376:	2b00      	cmp	r3, #0
 801b378:	dd0e      	ble.n	801b398 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b37a:	1408      	asrs	r0, r1, #16
 801b37c:	d405      	bmi.n	801b38a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b37e:	4560      	cmp	r0, ip
 801b380:	da03      	bge.n	801b38a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b382:	1410      	asrs	r0, r2, #16
 801b384:	d401      	bmi.n	801b38a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b386:	42b8      	cmp	r0, r7
 801b388:	db07      	blt.n	801b39a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801b38a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b38c:	4401      	add	r1, r0
 801b38e:	9814      	ldr	r0, [sp, #80]	; 0x50
 801b390:	3b01      	subs	r3, #1
 801b392:	4402      	add	r2, r0
 801b394:	3402      	adds	r4, #2
 801b396:	e7ee      	b.n	801b376 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b398:	d071      	beq.n	801b47e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b39a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b39c:	1e58      	subs	r0, r3, #1
 801b39e:	fb05 1500 	mla	r5, r5, r0, r1
 801b3a2:	142d      	asrs	r5, r5, #16
 801b3a4:	d45f      	bmi.n	801b466 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801b3a6:	4565      	cmp	r5, ip
 801b3a8:	da5d      	bge.n	801b466 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801b3aa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b3ac:	fb05 2000 	mla	r0, r5, r0, r2
 801b3b0:	1400      	asrs	r0, r0, #16
 801b3b2:	d458      	bmi.n	801b466 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801b3b4:	42b8      	cmp	r0, r7
 801b3b6:	da56      	bge.n	801b466 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801b3b8:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801b3bc:	4699      	mov	r9, r3
 801b3be:	46a2      	mov	sl, r4
 801b3c0:	f1b9 0f00 	cmp.w	r9, #0
 801b3c4:	dd57      	ble.n	801b476 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801b3c6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801b3ca:	9803      	ldr	r0, [sp, #12]
 801b3cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b3d0:	140d      	asrs	r5, r1, #16
 801b3d2:	fb07 000c 	mla	r0, r7, ip, r0
 801b3d6:	f109 39ff 	add.w	r9, r9, #4294967295
 801b3da:	5d40      	ldrb	r0, [r0, r5]
 801b3dc:	9d04      	ldr	r5, [sp, #16]
 801b3de:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801b3e2:	f8ba 5000 	ldrh.w	r5, [sl]
 801b3e6:	122f      	asrs	r7, r5, #8
 801b3e8:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b3ec:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b3f0:	fb17 f706 	smulbb	r7, r7, r6
 801b3f4:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801b3f8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b3fc:	00ed      	lsls	r5, r5, #3
 801b3fe:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801b402:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801b406:	10c7      	asrs	r7, r0, #3
 801b408:	b2ed      	uxtb	r5, r5
 801b40a:	00c0      	lsls	r0, r0, #3
 801b40c:	fb18 f806 	smulbb	r8, r8, r6
 801b410:	fb15 f506 	smulbb	r5, r5, r6
 801b414:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b418:	b2c0      	uxtb	r0, r0
 801b41a:	fa1f fc8c 	uxth.w	ip, ip
 801b41e:	fb07 870b 	mla	r7, r7, fp, r8
 801b422:	fb00 500b 	mla	r0, r0, fp, r5
 801b426:	b280      	uxth	r0, r0
 801b428:	b2bf      	uxth	r7, r7
 801b42a:	f10c 0501 	add.w	r5, ip, #1
 801b42e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b432:	f107 0801 	add.w	r8, r7, #1
 801b436:	1c45      	adds	r5, r0, #1
 801b438:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b43c:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801b440:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b442:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b446:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b44a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801b44e:	ea4c 0c05 	orr.w	ip, ip, r5
 801b452:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801b456:	4401      	add	r1, r0
 801b458:	9814      	ldr	r0, [sp, #80]	; 0x50
 801b45a:	ea4c 0c08 	orr.w	ip, ip, r8
 801b45e:	f82a cb02 	strh.w	ip, [sl], #2
 801b462:	4402      	add	r2, r0
 801b464:	e7ac      	b.n	801b3c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b466:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801b46a:	f04f 0800 	mov.w	r8, #0
 801b46e:	eb03 0008 	add.w	r0, r3, r8
 801b472:	2800      	cmp	r0, #0
 801b474:	dc41      	bgt.n	801b4fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801b476:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b47a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b47e:	9b01      	ldr	r3, [sp, #4]
 801b480:	2b00      	cmp	r3, #0
 801b482:	f340 8097 	ble.w	801b5b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b486:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b48a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b48e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b492:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b494:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b498:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b49c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b4a0:	eef0 6a62 	vmov.f32	s13, s5
 801b4a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b4a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b4ac:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b4b0:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801b4b4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b4b8:	eef0 6a43 	vmov.f32	s13, s6
 801b4bc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b4c0:	ee12 2a90 	vmov	r2, s5
 801b4c4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b4c8:	fb92 f3f3 	sdiv	r3, r2, r3
 801b4cc:	ee13 2a10 	vmov	r2, s6
 801b4d0:	9313      	str	r3, [sp, #76]	; 0x4c
 801b4d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b4d4:	fb92 f3f3 	sdiv	r3, r2, r3
 801b4d8:	9314      	str	r3, [sp, #80]	; 0x50
 801b4da:	9b01      	ldr	r3, [sp, #4]
 801b4dc:	9a05      	ldr	r2, [sp, #20]
 801b4de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b4e2:	3b01      	subs	r3, #1
 801b4e4:	9301      	str	r3, [sp, #4]
 801b4e6:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801b4ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b4ec:	eeb0 3a67 	vmov.f32	s6, s15
 801b4f0:	bf08      	it	eq
 801b4f2:	4613      	moveq	r3, r2
 801b4f4:	eef0 2a47 	vmov.f32	s5, s14
 801b4f8:	e72c      	b.n	801b354 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801b4fa:	140f      	asrs	r7, r1, #16
 801b4fc:	d453      	bmi.n	801b5a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801b4fe:	f8de 5008 	ldr.w	r5, [lr, #8]
 801b502:	42bd      	cmp	r5, r7
 801b504:	dd4f      	ble.n	801b5a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801b506:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b50a:	d44c      	bmi.n	801b5a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801b50c:	f8de 000c 	ldr.w	r0, [lr, #12]
 801b510:	4560      	cmp	r0, ip
 801b512:	dd48      	ble.n	801b5a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801b514:	9803      	ldr	r0, [sp, #12]
 801b516:	b22d      	sxth	r5, r5
 801b518:	fb0c 0505 	mla	r5, ip, r5, r0
 801b51c:	5de8      	ldrb	r0, [r5, r7]
 801b51e:	9d04      	ldr	r5, [sp, #16]
 801b520:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801b524:	f06f 0501 	mvn.w	r5, #1
 801b528:	fb05 fb08 	mul.w	fp, r5, r8
 801b52c:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b530:	f834 500b 	ldrh.w	r5, [r4, fp]
 801b534:	122f      	asrs	r7, r5, #8
 801b536:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b53a:	fb17 f706 	smulbb	r7, r7, r6
 801b53e:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801b542:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b546:	00ed      	lsls	r5, r5, #3
 801b548:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801b54c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801b550:	10c7      	asrs	r7, r0, #3
 801b552:	b2ed      	uxtb	r5, r5
 801b554:	00c0      	lsls	r0, r0, #3
 801b556:	fb19 f906 	smulbb	r9, r9, r6
 801b55a:	fb15 f506 	smulbb	r5, r5, r6
 801b55e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b562:	b2c0      	uxtb	r0, r0
 801b564:	fa1f fc8c 	uxth.w	ip, ip
 801b568:	fb07 970a 	mla	r7, r7, sl, r9
 801b56c:	fb00 500a 	mla	r0, r0, sl, r5
 801b570:	b2bf      	uxth	r7, r7
 801b572:	b280      	uxth	r0, r0
 801b574:	f10c 0501 	add.w	r5, ip, #1
 801b578:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b57c:	f107 0901 	add.w	r9, r7, #1
 801b580:	1c45      	adds	r5, r0, #1
 801b582:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b586:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801b58a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b58e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b592:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801b596:	ea4c 0c05 	orr.w	ip, ip, r5
 801b59a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801b59e:	ea4c 0c09 	orr.w	ip, ip, r9
 801b5a2:	f824 c00b 	strh.w	ip, [r4, fp]
 801b5a6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b5a8:	4401      	add	r1, r0
 801b5aa:	9814      	ldr	r0, [sp, #80]	; 0x50
 801b5ac:	f108 38ff 	add.w	r8, r8, #4294967295
 801b5b0:	4402      	add	r2, r0
 801b5b2:	e75c      	b.n	801b46e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801b5b4:	b007      	add	sp, #28
 801b5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b5ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b5ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5be:	b085      	sub	sp, #20
 801b5c0:	4693      	mov	fp, r2
 801b5c2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b5c4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801b5c6:	6870      	ldr	r0, [r6, #4]
 801b5c8:	9100      	str	r1, [sp, #0]
 801b5ca:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b5ce:	fb00 2404 	mla	r4, r0, r4, r2
 801b5d2:	6832      	ldr	r2, [r6, #0]
 801b5d4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b5d8:	682a      	ldr	r2, [r5, #0]
 801b5da:	9201      	str	r2, [sp, #4]
 801b5dc:	686a      	ldr	r2, [r5, #4]
 801b5de:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801b5e2:	3204      	adds	r2, #4
 801b5e4:	9202      	str	r2, [sp, #8]
 801b5e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b5ea:	9a00      	ldr	r2, [sp, #0]
 801b5ec:	2a00      	cmp	r2, #0
 801b5ee:	dc03      	bgt.n	801b5f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b5f0:	f1bb 0f00 	cmp.w	fp, #0
 801b5f4:	f340 80a0 	ble.w	801b738 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801b5f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b5fa:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801b5fe:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801b602:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b606:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b608:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b60c:	2b00      	cmp	r3, #0
 801b60e:	dd0c      	ble.n	801b62a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b610:	1406      	asrs	r6, r0, #16
 801b612:	d405      	bmi.n	801b620 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b614:	454e      	cmp	r6, r9
 801b616:	da03      	bge.n	801b620 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b618:	1416      	asrs	r6, r2, #16
 801b61a:	d401      	bmi.n	801b620 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b61c:	4546      	cmp	r6, r8
 801b61e:	db05      	blt.n	801b62c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b620:	4470      	add	r0, lr
 801b622:	4462      	add	r2, ip
 801b624:	3b01      	subs	r3, #1
 801b626:	3402      	adds	r4, #2
 801b628:	e7f0      	b.n	801b60c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801b62a:	d00f      	beq.n	801b64c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801b62c:	1e5e      	subs	r6, r3, #1
 801b62e:	fb0e 0706 	mla	r7, lr, r6, r0
 801b632:	143f      	asrs	r7, r7, #16
 801b634:	d541      	bpl.n	801b6ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801b636:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801b63a:	4698      	mov	r8, r3
 801b63c:	9603      	str	r6, [sp, #12]
 801b63e:	f1b8 0f00 	cmp.w	r8, #0
 801b642:	dc59      	bgt.n	801b6f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b644:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b648:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b64c:	9b00      	ldr	r3, [sp, #0]
 801b64e:	2b00      	cmp	r3, #0
 801b650:	dd72      	ble.n	801b738 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801b652:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b656:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b65a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b65e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b660:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b664:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b668:	eeb0 6a62 	vmov.f32	s12, s5
 801b66c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b670:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b674:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b678:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b67c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b680:	eeb0 6a43 	vmov.f32	s12, s6
 801b684:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b688:	ee12 2a90 	vmov	r2, s5
 801b68c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b690:	fb92 fef3 	sdiv	lr, r2, r3
 801b694:	ee13 2a10 	vmov	r2, s6
 801b698:	fb92 fcf3 	sdiv	ip, r2, r3
 801b69c:	9b00      	ldr	r3, [sp, #0]
 801b69e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b6a2:	3b01      	subs	r3, #1
 801b6a4:	9300      	str	r3, [sp, #0]
 801b6a6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b6aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b6ac:	eeb0 3a67 	vmov.f32	s6, s15
 801b6b0:	bf08      	it	eq
 801b6b2:	465b      	moveq	r3, fp
 801b6b4:	eef0 2a47 	vmov.f32	s5, s14
 801b6b8:	e797      	b.n	801b5ea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801b6ba:	454f      	cmp	r7, r9
 801b6bc:	dabb      	bge.n	801b636 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b6be:	fb0c 2606 	mla	r6, ip, r6, r2
 801b6c2:	1436      	asrs	r6, r6, #16
 801b6c4:	d4b7      	bmi.n	801b636 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b6c6:	4546      	cmp	r6, r8
 801b6c8:	dab5      	bge.n	801b636 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b6ca:	461e      	mov	r6, r3
 801b6cc:	46a0      	mov	r8, r4
 801b6ce:	2e00      	cmp	r6, #0
 801b6d0:	ddb8      	ble.n	801b644 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801b6d2:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801b6d6:	9901      	ldr	r1, [sp, #4]
 801b6d8:	1417      	asrs	r7, r2, #16
 801b6da:	ea4f 4920 	mov.w	r9, r0, asr #16
 801b6de:	fb0a 1707 	mla	r7, sl, r7, r1
 801b6e2:	9902      	ldr	r1, [sp, #8]
 801b6e4:	f817 7009 	ldrb.w	r7, [r7, r9]
 801b6e8:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801b6ec:	f828 7b02 	strh.w	r7, [r8], #2
 801b6f0:	4470      	add	r0, lr
 801b6f2:	4462      	add	r2, ip
 801b6f4:	3e01      	subs	r6, #1
 801b6f6:	e7ea      	b.n	801b6ce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801b6f8:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b6fc:	d417      	bmi.n	801b72e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801b6fe:	68ae      	ldr	r6, [r5, #8]
 801b700:	454e      	cmp	r6, r9
 801b702:	dd14      	ble.n	801b72e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801b704:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801b708:	d411      	bmi.n	801b72e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801b70a:	68ef      	ldr	r7, [r5, #12]
 801b70c:	4557      	cmp	r7, sl
 801b70e:	dd0e      	ble.n	801b72e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801b710:	9f01      	ldr	r7, [sp, #4]
 801b712:	b236      	sxth	r6, r6
 801b714:	fb0a 7606 	mla	r6, sl, r6, r7
 801b718:	9f02      	ldr	r7, [sp, #8]
 801b71a:	f816 6009 	ldrb.w	r6, [r6, r9]
 801b71e:	f06f 0101 	mvn.w	r1, #1
 801b722:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801b726:	fb01 f608 	mul.w	r6, r1, r8
 801b72a:	9903      	ldr	r1, [sp, #12]
 801b72c:	538f      	strh	r7, [r1, r6]
 801b72e:	4470      	add	r0, lr
 801b730:	4462      	add	r2, ip
 801b732:	f108 38ff 	add.w	r8, r8, #4294967295
 801b736:	e782      	b.n	801b63e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b738:	b005      	add	sp, #20
 801b73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b73e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b73e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b742:	b087      	sub	sp, #28
 801b744:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801b746:	9205      	str	r2, [sp, #20]
 801b748:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b74c:	9203      	str	r2, [sp, #12]
 801b74e:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801b752:	9102      	str	r1, [sp, #8]
 801b754:	6861      	ldr	r1, [r4, #4]
 801b756:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801b75a:	fb01 2000 	mla	r0, r1, r0, r2
 801b75e:	6822      	ldr	r2, [r4, #0]
 801b760:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801b764:	9200      	str	r2, [sp, #0]
 801b766:	f8dc 2000 	ldr.w	r2, [ip]
 801b76a:	9204      	str	r2, [sp, #16]
 801b76c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801b770:	3204      	adds	r2, #4
 801b772:	9201      	str	r2, [sp, #4]
 801b774:	9a03      	ldr	r2, [sp, #12]
 801b776:	43d5      	mvns	r5, r2
 801b778:	b2ed      	uxtb	r5, r5
 801b77a:	9a02      	ldr	r2, [sp, #8]
 801b77c:	2a00      	cmp	r2, #0
 801b77e:	dc03      	bgt.n	801b788 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801b780:	9a05      	ldr	r2, [sp, #20]
 801b782:	2a00      	cmp	r2, #0
 801b784:	f340 812c 	ble.w	801b9e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801b788:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b78a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801b78e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801b792:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b796:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b798:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	dd10      	ble.n	801b7c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b7a0:	140c      	asrs	r4, r1, #16
 801b7a2:	d405      	bmi.n	801b7b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b7a4:	4574      	cmp	r4, lr
 801b7a6:	da03      	bge.n	801b7b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b7a8:	1414      	asrs	r4, r2, #16
 801b7aa:	d401      	bmi.n	801b7b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b7ac:	42bc      	cmp	r4, r7
 801b7ae:	db09      	blt.n	801b7c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801b7b0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b7b2:	9800      	ldr	r0, [sp, #0]
 801b7b4:	4421      	add	r1, r4
 801b7b6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b7b8:	3002      	adds	r0, #2
 801b7ba:	4422      	add	r2, r4
 801b7bc:	3b01      	subs	r3, #1
 801b7be:	9000      	str	r0, [sp, #0]
 801b7c0:	e7ec      	b.n	801b79c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801b7c2:	d071      	beq.n	801b8a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801b7c4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b7c6:	1e5c      	subs	r4, r3, #1
 801b7c8:	fb06 1604 	mla	r6, r6, r4, r1
 801b7cc:	1436      	asrs	r6, r6, #16
 801b7ce:	d45d      	bmi.n	801b88c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b7d0:	4576      	cmp	r6, lr
 801b7d2:	da5b      	bge.n	801b88c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b7d4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801b7d6:	fb06 2404 	mla	r4, r6, r4, r2
 801b7da:	1424      	asrs	r4, r4, #16
 801b7dc:	d456      	bmi.n	801b88c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b7de:	42bc      	cmp	r4, r7
 801b7e0:	da54      	bge.n	801b88c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b7e2:	f8dd 9000 	ldr.w	r9, [sp]
 801b7e6:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801b7ea:	4698      	mov	r8, r3
 801b7ec:	f1b8 0f00 	cmp.w	r8, #0
 801b7f0:	dd54      	ble.n	801b89c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801b7f2:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801b7f6:	9804      	ldr	r0, [sp, #16]
 801b7f8:	1414      	asrs	r4, r2, #16
 801b7fa:	fb07 0404 	mla	r4, r7, r4, r0
 801b7fe:	140e      	asrs	r6, r1, #16
 801b800:	9801      	ldr	r0, [sp, #4]
 801b802:	f814 e006 	ldrb.w	lr, [r4, r6]
 801b806:	f8b9 4000 	ldrh.w	r4, [r9]
 801b80a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b80e:	eb00 0b0e 	add.w	fp, r0, lr
 801b812:	1227      	asrs	r7, r4, #8
 801b814:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801b818:	f89b b001 	ldrb.w	fp, [fp, #1]
 801b81c:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801b820:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b822:	fb16 f60a 	smulbb	r6, r6, sl
 801b826:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b82a:	fb07 6705 	mla	r7, r7, r5, r6
 801b82e:	10e6      	asrs	r6, r4, #3
 801b830:	00e4      	lsls	r4, r4, #3
 801b832:	b2e4      	uxtb	r4, r4
 801b834:	fb1b fb0a 	smulbb	fp, fp, sl
 801b838:	fb14 f405 	smulbb	r4, r4, r5
 801b83c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b840:	b2bf      	uxth	r7, r7
 801b842:	fb06 b605 	mla	r6, r6, r5, fp
 801b846:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801b84a:	b2b6      	uxth	r6, r6
 801b84c:	fa1f fe8e 	uxth.w	lr, lr
 801b850:	1c7c      	adds	r4, r7, #1
 801b852:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801b856:	f106 0b01 	add.w	fp, r6, #1
 801b85a:	f10e 0401 	add.w	r4, lr, #1
 801b85e:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801b862:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801b866:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b86a:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801b86e:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801b872:	4327      	orrs	r7, r4
 801b874:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801b878:	4401      	add	r1, r0
 801b87a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801b87c:	ea47 070b 	orr.w	r7, r7, fp
 801b880:	f829 7b02 	strh.w	r7, [r9], #2
 801b884:	4402      	add	r2, r0
 801b886:	f108 38ff 	add.w	r8, r8, #4294967295
 801b88a:	e7af      	b.n	801b7ec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801b88c:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801b890:	f04f 0e00 	mov.w	lr, #0
 801b894:	eb03 040e 	add.w	r4, r3, lr
 801b898:	2c00      	cmp	r4, #0
 801b89a:	dc43      	bgt.n	801b924 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801b89c:	9a00      	ldr	r2, [sp, #0]
 801b89e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b8a2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b8a6:	9300      	str	r3, [sp, #0]
 801b8a8:	9b02      	ldr	r3, [sp, #8]
 801b8aa:	2b00      	cmp	r3, #0
 801b8ac:	f340 8098 	ble.w	801b9e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801b8b0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b8b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b8b8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b8bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b8be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b8c2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b8c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b8ca:	eef0 6a62 	vmov.f32	s13, s5
 801b8ce:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b8d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b8d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b8da:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801b8de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b8e2:	eef0 6a43 	vmov.f32	s13, s6
 801b8e6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b8ea:	ee12 2a90 	vmov	r2, s5
 801b8ee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b8f2:	fb92 f3f3 	sdiv	r3, r2, r3
 801b8f6:	ee13 2a10 	vmov	r2, s6
 801b8fa:	9313      	str	r3, [sp, #76]	; 0x4c
 801b8fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b8fe:	fb92 f3f3 	sdiv	r3, r2, r3
 801b902:	9314      	str	r3, [sp, #80]	; 0x50
 801b904:	9b02      	ldr	r3, [sp, #8]
 801b906:	9a05      	ldr	r2, [sp, #20]
 801b908:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b90c:	3b01      	subs	r3, #1
 801b90e:	9302      	str	r3, [sp, #8]
 801b910:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801b914:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b916:	eeb0 3a67 	vmov.f32	s6, s15
 801b91a:	bf08      	it	eq
 801b91c:	4613      	moveq	r3, r2
 801b91e:	eef0 2a47 	vmov.f32	s5, s14
 801b922:	e72a      	b.n	801b77a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b924:	140f      	asrs	r7, r1, #16
 801b926:	d454      	bmi.n	801b9d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801b928:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801b92c:	42be      	cmp	r6, r7
 801b92e:	dd50      	ble.n	801b9d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801b930:	ea5f 4822 	movs.w	r8, r2, asr #16
 801b934:	d44d      	bmi.n	801b9d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801b936:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801b93a:	4544      	cmp	r4, r8
 801b93c:	dd49      	ble.n	801b9d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801b93e:	9c04      	ldr	r4, [sp, #16]
 801b940:	b236      	sxth	r6, r6
 801b942:	fb08 4606 	mla	r6, r8, r6, r4
 801b946:	f06f 0001 	mvn.w	r0, #1
 801b94a:	f816 8007 	ldrb.w	r8, [r6, r7]
 801b94e:	9c01      	ldr	r4, [sp, #4]
 801b950:	fb00 fa0e 	mul.w	sl, r0, lr
 801b954:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801b958:	9800      	ldr	r0, [sp, #0]
 801b95a:	eb04 0b08 	add.w	fp, r4, r8
 801b95e:	f830 400a 	ldrh.w	r4, [r0, sl]
 801b962:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801b966:	9801      	ldr	r0, [sp, #4]
 801b968:	f89b b001 	ldrb.w	fp, [fp, #1]
 801b96c:	f810 8008 	ldrb.w	r8, [r0, r8]
 801b970:	9800      	ldr	r0, [sp, #0]
 801b972:	1227      	asrs	r7, r4, #8
 801b974:	fb16 f609 	smulbb	r6, r6, r9
 801b978:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b97c:	fb07 6705 	mla	r7, r7, r5, r6
 801b980:	10e6      	asrs	r6, r4, #3
 801b982:	00e4      	lsls	r4, r4, #3
 801b984:	b2e4      	uxtb	r4, r4
 801b986:	fb1b fb09 	smulbb	fp, fp, r9
 801b98a:	fb14 f405 	smulbb	r4, r4, r5
 801b98e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b992:	b2bf      	uxth	r7, r7
 801b994:	fb06 b605 	mla	r6, r6, r5, fp
 801b998:	fb08 4809 	mla	r8, r8, r9, r4
 801b99c:	b2b6      	uxth	r6, r6
 801b99e:	fa1f f888 	uxth.w	r8, r8
 801b9a2:	1c7c      	adds	r4, r7, #1
 801b9a4:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801b9a8:	f106 0b01 	add.w	fp, r6, #1
 801b9ac:	f108 0401 	add.w	r4, r8, #1
 801b9b0:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801b9b4:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801b9b8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b9bc:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801b9c0:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801b9c4:	4327      	orrs	r7, r4
 801b9c6:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801b9ca:	ea47 070b 	orr.w	r7, r7, fp
 801b9ce:	f820 700a 	strh.w	r7, [r0, sl]
 801b9d2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b9d4:	4401      	add	r1, r0
 801b9d6:	9814      	ldr	r0, [sp, #80]	; 0x50
 801b9d8:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b9dc:	4402      	add	r2, r0
 801b9de:	e759      	b.n	801b894 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801b9e0:	b007      	add	sp, #28
 801b9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b9e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9ec:	b085      	sub	sp, #20
 801b9ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b9f2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b9f4:	9203      	str	r2, [sp, #12]
 801b9f6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b9fa:	6870      	ldr	r0, [r6, #4]
 801b9fc:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801b9fe:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801ba02:	686f      	ldr	r7, [r5, #4]
 801ba04:	9101      	str	r1, [sp, #4]
 801ba06:	fb00 2404 	mla	r4, r0, r4, r2
 801ba0a:	6832      	ldr	r2, [r6, #0]
 801ba0c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ba10:	682a      	ldr	r2, [r5, #0]
 801ba12:	9202      	str	r2, [sp, #8]
 801ba14:	3704      	adds	r7, #4
 801ba16:	9a01      	ldr	r2, [sp, #4]
 801ba18:	2a00      	cmp	r2, #0
 801ba1a:	dc03      	bgt.n	801ba24 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ba1c:	9a03      	ldr	r2, [sp, #12]
 801ba1e:	2a00      	cmp	r2, #0
 801ba20:	f340 80cc 	ble.w	801bbbc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801ba24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ba26:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801ba2a:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801ba2e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ba32:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ba34:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	dd0d      	ble.n	801ba58 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ba3c:	1406      	asrs	r6, r0, #16
 801ba3e:	d405      	bmi.n	801ba4c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ba40:	454e      	cmp	r6, r9
 801ba42:	da03      	bge.n	801ba4c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ba44:	1416      	asrs	r6, r2, #16
 801ba46:	d401      	bmi.n	801ba4c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ba48:	4546      	cmp	r6, r8
 801ba4a:	db06      	blt.n	801ba5a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ba4c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ba4e:	4460      	add	r0, ip
 801ba50:	4432      	add	r2, r6
 801ba52:	3b01      	subs	r3, #1
 801ba54:	3402      	adds	r4, #2
 801ba56:	e7ef      	b.n	801ba38 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801ba58:	d00f      	beq.n	801ba7a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ba5a:	1e5e      	subs	r6, r3, #1
 801ba5c:	fb0c 0e06 	mla	lr, ip, r6, r0
 801ba60:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801ba64:	d543      	bpl.n	801baee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801ba66:	4698      	mov	r8, r3
 801ba68:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801ba6c:	f1b8 0f00 	cmp.w	r8, #0
 801ba70:	dc71      	bgt.n	801bb56 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801ba72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ba76:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ba7a:	9b01      	ldr	r3, [sp, #4]
 801ba7c:	2b00      	cmp	r3, #0
 801ba7e:	f340 809d 	ble.w	801bbbc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801ba82:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ba86:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ba8a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ba8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ba90:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ba94:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ba98:	eeb0 6a62 	vmov.f32	s12, s5
 801ba9c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801baa0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801baa4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801baa8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801baac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bab0:	eeb0 6a43 	vmov.f32	s12, s6
 801bab4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bab8:	ee12 2a90 	vmov	r2, s5
 801babc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bac0:	fb92 fcf3 	sdiv	ip, r2, r3
 801bac4:	ee13 2a10 	vmov	r2, s6
 801bac8:	fb92 f3f3 	sdiv	r3, r2, r3
 801bacc:	9312      	str	r3, [sp, #72]	; 0x48
 801bace:	9b01      	ldr	r3, [sp, #4]
 801bad0:	9a03      	ldr	r2, [sp, #12]
 801bad2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bad6:	3b01      	subs	r3, #1
 801bad8:	9301      	str	r3, [sp, #4]
 801bada:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801bade:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bae0:	eeb0 3a67 	vmov.f32	s6, s15
 801bae4:	bf08      	it	eq
 801bae6:	4613      	moveq	r3, r2
 801bae8:	eef0 2a47 	vmov.f32	s5, s14
 801baec:	e793      	b.n	801ba16 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801baee:	45ce      	cmp	lr, r9
 801baf0:	dab9      	bge.n	801ba66 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801baf2:	9912      	ldr	r1, [sp, #72]	; 0x48
 801baf4:	fb01 2606 	mla	r6, r1, r6, r2
 801baf8:	1436      	asrs	r6, r6, #16
 801bafa:	d4b4      	bmi.n	801ba66 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801bafc:	4546      	cmp	r6, r8
 801bafe:	dab2      	bge.n	801ba66 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801bb00:	4698      	mov	r8, r3
 801bb02:	46a2      	mov	sl, r4
 801bb04:	f1b8 0f00 	cmp.w	r8, #0
 801bb08:	ddb3      	ble.n	801ba72 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801bb0a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801bb0e:	9902      	ldr	r1, [sp, #8]
 801bb10:	1416      	asrs	r6, r2, #16
 801bb12:	fb09 1606 	mla	r6, r9, r6, r1
 801bb16:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801bb1a:	492a      	ldr	r1, [pc, #168]	; (801bbc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801bb1c:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801bb20:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801bb24:	eb07 0b0e 	add.w	fp, r7, lr
 801bb28:	4460      	add	r0, ip
 801bb2a:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801bb2e:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801bb32:	00f6      	lsls	r6, r6, #3
 801bb34:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801bb38:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801bb3c:	ea49 0606 	orr.w	r6, r9, r6
 801bb40:	f817 900e 	ldrb.w	r9, [r7, lr]
 801bb44:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bb46:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801bb4a:	f82a 6b02 	strh.w	r6, [sl], #2
 801bb4e:	440a      	add	r2, r1
 801bb50:	f108 38ff 	add.w	r8, r8, #4294967295
 801bb54:	e7d6      	b.n	801bb04 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801bb56:	ea5f 4920 	movs.w	r9, r0, asr #16
 801bb5a:	d429      	bmi.n	801bbb0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801bb5c:	68ae      	ldr	r6, [r5, #8]
 801bb5e:	454e      	cmp	r6, r9
 801bb60:	dd26      	ble.n	801bbb0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801bb62:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801bb66:	d423      	bmi.n	801bbb0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801bb68:	68e9      	ldr	r1, [r5, #12]
 801bb6a:	4559      	cmp	r1, fp
 801bb6c:	dd20      	ble.n	801bbb0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801bb6e:	9902      	ldr	r1, [sp, #8]
 801bb70:	fa0f fe86 	sxth.w	lr, r6
 801bb74:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801bb78:	f06f 0101 	mvn.w	r1, #1
 801bb7c:	f81e e009 	ldrb.w	lr, [lr, r9]
 801bb80:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801bb84:	eb07 060e 	add.w	r6, r7, lr
 801bb88:	fb01 f908 	mul.w	r9, r1, r8
 801bb8c:	f896 b002 	ldrb.w	fp, [r6, #2]
 801bb90:	7876      	ldrb	r6, [r6, #1]
 801bb92:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801bb96:	00f6      	lsls	r6, r6, #3
 801bb98:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801bb9c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801bba0:	ea4b 0606 	orr.w	r6, fp, r6
 801bba4:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801bba8:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801bbac:	f82a 6009 	strh.w	r6, [sl, r9]
 801bbb0:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bbb2:	4460      	add	r0, ip
 801bbb4:	440a      	add	r2, r1
 801bbb6:	f108 38ff 	add.w	r8, r8, #4294967295
 801bbba:	e757      	b.n	801ba6c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801bbbc:	b005      	add	sp, #20
 801bbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbc2:	bf00      	nop
 801bbc4:	fffff800 	.word	0xfffff800

0801bbc8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbcc:	b087      	sub	sp, #28
 801bbce:	468b      	mov	fp, r1
 801bbd0:	9815      	ldr	r0, [sp, #84]	; 0x54
 801bbd2:	9204      	str	r2, [sp, #16]
 801bbd4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801bbd8:	9205      	str	r2, [sp, #20]
 801bbda:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801bbde:	6841      	ldr	r1, [r0, #4]
 801bbe0:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801bbe4:	fb01 2404 	mla	r4, r1, r4, r2
 801bbe8:	6802      	ldr	r2, [r0, #0]
 801bbea:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801bbee:	f8dc 2000 	ldr.w	r2, [ip]
 801bbf2:	9201      	str	r2, [sp, #4]
 801bbf4:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801bbf8:	3204      	adds	r2, #4
 801bbfa:	9202      	str	r2, [sp, #8]
 801bbfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bc00:	f1bb 0f00 	cmp.w	fp, #0
 801bc04:	dc03      	bgt.n	801bc0e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801bc06:	9a04      	ldr	r2, [sp, #16]
 801bc08:	2a00      	cmp	r2, #0
 801bc0a:	f340 8138 	ble.w	801be7e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801bc0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bc10:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801bc14:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801bc18:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bc1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bc1e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801bc22:	2b00      	cmp	r3, #0
 801bc24:	dd0e      	ble.n	801bc44 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801bc26:	1402      	asrs	r2, r0, #16
 801bc28:	d405      	bmi.n	801bc36 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801bc2a:	42ba      	cmp	r2, r7
 801bc2c:	da03      	bge.n	801bc36 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801bc2e:	140a      	asrs	r2, r1, #16
 801bc30:	d401      	bmi.n	801bc36 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801bc32:	42b2      	cmp	r2, r6
 801bc34:	db07      	blt.n	801bc46 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801bc36:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bc38:	4410      	add	r0, r2
 801bc3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bc3c:	3b01      	subs	r3, #1
 801bc3e:	4411      	add	r1, r2
 801bc40:	3402      	adds	r4, #2
 801bc42:	e7ee      	b.n	801bc22 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801bc44:	d019      	beq.n	801bc7a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801bc46:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801bc48:	1e5a      	subs	r2, r3, #1
 801bc4a:	fb05 0502 	mla	r5, r5, r2, r0
 801bc4e:	142d      	asrs	r5, r5, #16
 801bc50:	d409      	bmi.n	801bc66 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801bc52:	42bd      	cmp	r5, r7
 801bc54:	da07      	bge.n	801bc66 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801bc56:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801bc58:	fb05 1202 	mla	r2, r5, r2, r1
 801bc5c:	1412      	asrs	r2, r2, #16
 801bc5e:	d402      	bmi.n	801bc66 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801bc60:	42b2      	cmp	r2, r6
 801bc62:	f2c0 80ac 	blt.w	801bdbe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801bc66:	f04f 0e00 	mov.w	lr, #0
 801bc6a:	eb03 020e 	add.w	r2, r3, lr
 801bc6e:	2a00      	cmp	r2, #0
 801bc70:	dc3e      	bgt.n	801bcf0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801bc72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bc76:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bc7a:	f1bb 0f00 	cmp.w	fp, #0
 801bc7e:	f340 80fe 	ble.w	801be7e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801bc82:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bc86:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bc8a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bc8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bc90:	f1bb 0b01 	subs.w	fp, fp, #1
 801bc94:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bc98:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bc9c:	eeb0 6a62 	vmov.f32	s12, s5
 801bca0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bca4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bca8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bcac:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801bcb0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bcb4:	eeb0 6a43 	vmov.f32	s12, s6
 801bcb8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bcbc:	ee12 2a90 	vmov	r2, s5
 801bcc0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bcc4:	fb92 f3f3 	sdiv	r3, r2, r3
 801bcc8:	ee13 2a10 	vmov	r2, s6
 801bccc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bcd0:	9313      	str	r3, [sp, #76]	; 0x4c
 801bcd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bcd4:	fb92 f3f3 	sdiv	r3, r2, r3
 801bcd8:	9a04      	ldr	r2, [sp, #16]
 801bcda:	9314      	str	r3, [sp, #80]	; 0x50
 801bcdc:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801bce0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bce2:	eeb0 3a67 	vmov.f32	s6, s15
 801bce6:	bf08      	it	eq
 801bce8:	4613      	moveq	r3, r2
 801bcea:	eef0 2a47 	vmov.f32	s5, s14
 801bcee:	e787      	b.n	801bc00 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801bcf0:	1406      	asrs	r6, r0, #16
 801bcf2:	d45d      	bmi.n	801bdb0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801bcf4:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801bcf8:	42b5      	cmp	r5, r6
 801bcfa:	dd59      	ble.n	801bdb0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801bcfc:	140f      	asrs	r7, r1, #16
 801bcfe:	d457      	bmi.n	801bdb0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801bd00:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801bd04:	42ba      	cmp	r2, r7
 801bd06:	dd53      	ble.n	801bdb0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801bd08:	9a01      	ldr	r2, [sp, #4]
 801bd0a:	b22d      	sxth	r5, r5
 801bd0c:	fb07 2505 	mla	r5, r7, r5, r2
 801bd10:	5daa      	ldrb	r2, [r5, r6]
 801bd12:	9d02      	ldr	r5, [sp, #8]
 801bd14:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801bd18:	0e2e      	lsrs	r6, r5, #24
 801bd1a:	d049      	beq.n	801bdb0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801bd1c:	f06f 0201 	mvn.w	r2, #1
 801bd20:	fb02 f20e 	mul.w	r2, r2, lr
 801bd24:	9203      	str	r2, [sp, #12]
 801bd26:	f834 8002 	ldrh.w	r8, [r4, r2]
 801bd2a:	9a05      	ldr	r2, [sp, #20]
 801bd2c:	4356      	muls	r6, r2
 801bd2e:	1c72      	adds	r2, r6, #1
 801bd30:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801bd34:	1212      	asrs	r2, r2, #8
 801bd36:	fa1f f982 	uxth.w	r9, r2
 801bd3a:	ea4f 2728 	mov.w	r7, r8, asr #8
 801bd3e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801bd42:	43d2      	mvns	r2, r2
 801bd44:	b2d2      	uxtb	r2, r2
 801bd46:	fb16 f609 	smulbb	r6, r6, r9
 801bd4a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801bd4e:	fb07 6702 	mla	r7, r7, r2, r6
 801bd52:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801bd56:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801bd5a:	b2ed      	uxtb	r5, r5
 801bd5c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801bd60:	fa5f f888 	uxtb.w	r8, r8
 801bd64:	fb15 f509 	smulbb	r5, r5, r9
 801bd68:	fb08 5502 	mla	r5, r8, r2, r5
 801bd6c:	b2bf      	uxth	r7, r7
 801bd6e:	fb1a fa09 	smulbb	sl, sl, r9
 801bd72:	b2ad      	uxth	r5, r5
 801bd74:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801bd78:	fb06 a602 	mla	r6, r6, r2, sl
 801bd7c:	1c7a      	adds	r2, r7, #1
 801bd7e:	f105 0a01 	add.w	sl, r5, #1
 801bd82:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801bd86:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801bd8a:	b2b6      	uxth	r6, r6
 801bd8c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801bd90:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801bd94:	ea47 070a 	orr.w	r7, r7, sl
 801bd98:	f106 0a01 	add.w	sl, r6, #1
 801bd9c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801bda0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801bda4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801bda8:	9a03      	ldr	r2, [sp, #12]
 801bdaa:	ea47 070a 	orr.w	r7, r7, sl
 801bdae:	52a7      	strh	r7, [r4, r2]
 801bdb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bdb2:	4410      	add	r0, r2
 801bdb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bdb6:	f10e 3eff 	add.w	lr, lr, #4294967295
 801bdba:	4411      	add	r1, r2
 801bdbc:	e755      	b.n	801bc6a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801bdbe:	f04f 0800 	mov.w	r8, #0
 801bdc2:	eba3 0208 	sub.w	r2, r3, r8
 801bdc6:	2a00      	cmp	r2, #0
 801bdc8:	f77f af53 	ble.w	801bc72 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801bdcc:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801bdd0:	9f01      	ldr	r7, [sp, #4]
 801bdd2:	140a      	asrs	r2, r1, #16
 801bdd4:	1405      	asrs	r5, r0, #16
 801bdd6:	fb06 7202 	mla	r2, r6, r2, r7
 801bdda:	5d52      	ldrb	r2, [r2, r5]
 801bddc:	9d02      	ldr	r5, [sp, #8]
 801bdde:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801bde2:	0e2e      	lsrs	r6, r5, #24
 801bde4:	d044      	beq.n	801be70 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801bde6:	9a05      	ldr	r2, [sp, #20]
 801bde8:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801bdec:	4356      	muls	r6, r2
 801bdee:	1c72      	adds	r2, r6, #1
 801bdf0:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801bdf4:	1212      	asrs	r2, r2, #8
 801bdf6:	fa1f f982 	uxth.w	r9, r2
 801bdfa:	ea4f 272e 	mov.w	r7, lr, asr #8
 801bdfe:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801be02:	43d2      	mvns	r2, r2
 801be04:	b2d2      	uxtb	r2, r2
 801be06:	fb16 f609 	smulbb	r6, r6, r9
 801be0a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801be0e:	fb07 6702 	mla	r7, r7, r2, r6
 801be12:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801be16:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801be1a:	b2ed      	uxtb	r5, r5
 801be1c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801be20:	fa5f fe8e 	uxtb.w	lr, lr
 801be24:	fb15 f509 	smulbb	r5, r5, r9
 801be28:	fb0e 5502 	mla	r5, lr, r2, r5
 801be2c:	b2bf      	uxth	r7, r7
 801be2e:	fb1a fa09 	smulbb	sl, sl, r9
 801be32:	b2ad      	uxth	r5, r5
 801be34:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801be38:	fb06 a602 	mla	r6, r6, r2, sl
 801be3c:	1c7a      	adds	r2, r7, #1
 801be3e:	f105 0a01 	add.w	sl, r5, #1
 801be42:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801be46:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801be4a:	b2b6      	uxth	r6, r6
 801be4c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801be50:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801be54:	ea47 070a 	orr.w	r7, r7, sl
 801be58:	f106 0a01 	add.w	sl, r6, #1
 801be5c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801be60:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801be64:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801be68:	ea47 070a 	orr.w	r7, r7, sl
 801be6c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801be70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801be72:	4410      	add	r0, r2
 801be74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801be76:	f108 0801 	add.w	r8, r8, #1
 801be7a:	4411      	add	r1, r2
 801be7c:	e7a1      	b.n	801bdc2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801be7e:	b007      	add	sp, #28
 801be80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801be84 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801be84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be88:	b085      	sub	sp, #20
 801be8a:	468b      	mov	fp, r1
 801be8c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801be8e:	9203      	str	r2, [sp, #12]
 801be90:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801be94:	6841      	ldr	r1, [r0, #4]
 801be96:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801be9a:	fb01 2404 	mla	r4, r1, r4, r2
 801be9e:	6802      	ldr	r2, [r0, #0]
 801bea0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801bea4:	f8de 2000 	ldr.w	r2, [lr]
 801bea8:	9200      	str	r2, [sp, #0]
 801beaa:	f8de 2004 	ldr.w	r2, [lr, #4]
 801beae:	3204      	adds	r2, #4
 801beb0:	9201      	str	r2, [sp, #4]
 801beb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801beb6:	f1bb 0f00 	cmp.w	fp, #0
 801beba:	dc03      	bgt.n	801bec4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801bebc:	9a03      	ldr	r2, [sp, #12]
 801bebe:	2a00      	cmp	r2, #0
 801bec0:	f340 8153 	ble.w	801c16a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801bec4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bec6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801beca:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801bece:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801bed2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bed4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bed8:	2b00      	cmp	r3, #0
 801beda:	dd0e      	ble.n	801befa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801bedc:	1408      	asrs	r0, r1, #16
 801bede:	d405      	bmi.n	801beec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801bee0:	42b8      	cmp	r0, r7
 801bee2:	da03      	bge.n	801beec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801bee4:	1410      	asrs	r0, r2, #16
 801bee6:	d401      	bmi.n	801beec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801bee8:	42b0      	cmp	r0, r6
 801beea:	db07      	blt.n	801befc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801beec:	9811      	ldr	r0, [sp, #68]	; 0x44
 801beee:	4401      	add	r1, r0
 801bef0:	9812      	ldr	r0, [sp, #72]	; 0x48
 801bef2:	3b01      	subs	r3, #1
 801bef4:	4402      	add	r2, r0
 801bef6:	3402      	adds	r4, #2
 801bef8:	e7ee      	b.n	801bed8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801befa:	d017      	beq.n	801bf2c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801befc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801befe:	1e58      	subs	r0, r3, #1
 801bf00:	fb05 1500 	mla	r5, r5, r0, r1
 801bf04:	142d      	asrs	r5, r5, #16
 801bf06:	d409      	bmi.n	801bf1c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801bf08:	42bd      	cmp	r5, r7
 801bf0a:	da07      	bge.n	801bf1c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801bf0c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801bf0e:	fb05 2000 	mla	r0, r5, r0, r2
 801bf12:	1400      	asrs	r0, r0, #16
 801bf14:	d402      	bmi.n	801bf1c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801bf16:	42b0      	cmp	r0, r6
 801bf18:	f2c0 80bc 	blt.w	801c094 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801bf1c:	2600      	movs	r6, #0
 801bf1e:	1998      	adds	r0, r3, r6
 801bf20:	2800      	cmp	r0, #0
 801bf22:	dc3e      	bgt.n	801bfa2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801bf24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bf28:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bf2c:	f1bb 0f00 	cmp.w	fp, #0
 801bf30:	f340 811b 	ble.w	801c16a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801bf34:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bf38:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bf3c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bf40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bf42:	f1bb 0b01 	subs.w	fp, fp, #1
 801bf46:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bf4a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bf4e:	eeb0 6a62 	vmov.f32	s12, s5
 801bf52:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bf56:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bf5a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bf5e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801bf62:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bf66:	eeb0 6a43 	vmov.f32	s12, s6
 801bf6a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bf6e:	ee12 2a90 	vmov	r2, s5
 801bf72:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bf76:	fb92 f3f3 	sdiv	r3, r2, r3
 801bf7a:	ee13 2a10 	vmov	r2, s6
 801bf7e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bf82:	9311      	str	r3, [sp, #68]	; 0x44
 801bf84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bf86:	fb92 f3f3 	sdiv	r3, r2, r3
 801bf8a:	9a03      	ldr	r2, [sp, #12]
 801bf8c:	9312      	str	r3, [sp, #72]	; 0x48
 801bf8e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801bf92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bf94:	eeb0 3a67 	vmov.f32	s6, s15
 801bf98:	bf08      	it	eq
 801bf9a:	4613      	moveq	r3, r2
 801bf9c:	eef0 2a47 	vmov.f32	s5, s14
 801bfa0:	e789      	b.n	801beb6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801bfa2:	140f      	asrs	r7, r1, #16
 801bfa4:	d45e      	bmi.n	801c064 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801bfa6:	f8de 5008 	ldr.w	r5, [lr, #8]
 801bfaa:	42bd      	cmp	r5, r7
 801bfac:	dd5a      	ble.n	801c064 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801bfae:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801bfb2:	d457      	bmi.n	801c064 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801bfb4:	f8de 000c 	ldr.w	r0, [lr, #12]
 801bfb8:	4560      	cmp	r0, ip
 801bfba:	dd53      	ble.n	801c064 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801bfbc:	9800      	ldr	r0, [sp, #0]
 801bfbe:	b22d      	sxth	r5, r5
 801bfc0:	fb0c 0505 	mla	r5, ip, r5, r0
 801bfc4:	5de8      	ldrb	r0, [r5, r7]
 801bfc6:	9d01      	ldr	r5, [sp, #4]
 801bfc8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801bfcc:	0e07      	lsrs	r7, r0, #24
 801bfce:	2fff      	cmp	r7, #255	; 0xff
 801bfd0:	d04e      	beq.n	801c070 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801bfd2:	b2fd      	uxtb	r5, r7
 801bfd4:	2f00      	cmp	r7, #0
 801bfd6:	d045      	beq.n	801c064 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801bfd8:	f06f 0701 	mvn.w	r7, #1
 801bfdc:	4377      	muls	r7, r6
 801bfde:	fa1f f985 	uxth.w	r9, r5
 801bfe2:	f834 8007 	ldrh.w	r8, [r4, r7]
 801bfe6:	9702      	str	r7, [sp, #8]
 801bfe8:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801bfec:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801bff0:	43ed      	mvns	r5, r5
 801bff2:	b2ed      	uxtb	r5, r5
 801bff4:	fb17 f709 	smulbb	r7, r7, r9
 801bff8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bffc:	fb0c 7c05 	mla	ip, ip, r5, r7
 801c000:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801c004:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801c008:	b2c0      	uxtb	r0, r0
 801c00a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801c00e:	fa5f f888 	uxtb.w	r8, r8
 801c012:	fb10 f009 	smulbb	r0, r0, r9
 801c016:	fb08 0005 	mla	r0, r8, r5, r0
 801c01a:	b280      	uxth	r0, r0
 801c01c:	fa1f fc8c 	uxth.w	ip, ip
 801c020:	fb1a fa09 	smulbb	sl, sl, r9
 801c024:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c028:	fb07 a705 	mla	r7, r7, r5, sl
 801c02c:	f100 0a01 	add.w	sl, r0, #1
 801c030:	f10c 0501 	add.w	r5, ip, #1
 801c034:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801c038:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801c03c:	b2bf      	uxth	r7, r7
 801c03e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c042:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c046:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c04a:	f107 0a01 	add.w	sl, r7, #1
 801c04e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801c052:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c056:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c05a:	9802      	ldr	r0, [sp, #8]
 801c05c:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c060:	f824 c000 	strh.w	ip, [r4, r0]
 801c064:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c066:	4401      	add	r1, r0
 801c068:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c06a:	3e01      	subs	r6, #1
 801c06c:	4402      	add	r2, r0
 801c06e:	e756      	b.n	801bf1e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801c070:	f06f 0501 	mvn.w	r5, #1
 801c074:	fb05 f706 	mul.w	r7, r5, r6
 801c078:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801c07c:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801c080:	0945      	lsrs	r5, r0, #5
 801c082:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c086:	ea4c 0505 	orr.w	r5, ip, r5
 801c08a:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801c08e:	4305      	orrs	r5, r0
 801c090:	53e5      	strh	r5, [r4, r7]
 801c092:	e7e7      	b.n	801c064 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801c094:	f04f 0800 	mov.w	r8, #0
 801c098:	eba3 0008 	sub.w	r0, r3, r8
 801c09c:	2800      	cmp	r0, #0
 801c09e:	f77f af41 	ble.w	801bf24 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c0a2:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801c0a6:	9f00      	ldr	r7, [sp, #0]
 801c0a8:	1410      	asrs	r0, r2, #16
 801c0aa:	140d      	asrs	r5, r1, #16
 801c0ac:	fb06 7000 	mla	r0, r6, r0, r7
 801c0b0:	5d40      	ldrb	r0, [r0, r5]
 801c0b2:	9d01      	ldr	r5, [sp, #4]
 801c0b4:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801c0b8:	0e06      	lsrs	r6, r0, #24
 801c0ba:	2eff      	cmp	r6, #255	; 0xff
 801c0bc:	d048      	beq.n	801c150 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 801c0be:	b2f5      	uxtb	r5, r6
 801c0c0:	2e00      	cmp	r6, #0
 801c0c2:	d03e      	beq.n	801c142 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801c0c4:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801c0c8:	fa1f f985 	uxth.w	r9, r5
 801c0cc:	ea4f 272c 	mov.w	r7, ip, asr #8
 801c0d0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801c0d4:	43ed      	mvns	r5, r5
 801c0d6:	b2ed      	uxtb	r5, r5
 801c0d8:	fb16 f609 	smulbb	r6, r6, r9
 801c0dc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c0e0:	fb07 6705 	mla	r7, r7, r5, r6
 801c0e4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801c0e8:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801c0ec:	b2c0      	uxtb	r0, r0
 801c0ee:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c0f2:	fa5f fc8c 	uxtb.w	ip, ip
 801c0f6:	fb10 f009 	smulbb	r0, r0, r9
 801c0fa:	fb0c 0005 	mla	r0, ip, r5, r0
 801c0fe:	b2bf      	uxth	r7, r7
 801c100:	fb1a fa09 	smulbb	sl, sl, r9
 801c104:	b280      	uxth	r0, r0
 801c106:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c10a:	fb06 a605 	mla	r6, r6, r5, sl
 801c10e:	1c7d      	adds	r5, r7, #1
 801c110:	f100 0a01 	add.w	sl, r0, #1
 801c114:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801c118:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801c11c:	b2b6      	uxth	r6, r6
 801c11e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c122:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c126:	ea47 070a 	orr.w	r7, r7, sl
 801c12a:	f106 0a01 	add.w	sl, r6, #1
 801c12e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c132:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c136:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c13a:	ea47 070a 	orr.w	r7, r7, sl
 801c13e:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801c142:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c144:	4401      	add	r1, r0
 801c146:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c148:	f108 0801 	add.w	r8, r8, #1
 801c14c:	4402      	add	r2, r0
 801c14e:	e7a3      	b.n	801c098 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c150:	4d07      	ldr	r5, [pc, #28]	; (801c170 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801c152:	ea05 2610 	and.w	r6, r5, r0, lsr #8
 801c156:	0945      	lsrs	r5, r0, #5
 801c158:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c15c:	4335      	orrs	r5, r6
 801c15e:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801c162:	4305      	orrs	r5, r0
 801c164:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801c168:	e7eb      	b.n	801c142 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801c16a:	b005      	add	sp, #20
 801c16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c170:	fffff800 	.word	0xfffff800

0801c174 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c178:	b087      	sub	sp, #28
 801c17a:	468b      	mov	fp, r1
 801c17c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c17e:	9204      	str	r2, [sp, #16]
 801c180:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c184:	9205      	str	r2, [sp, #20]
 801c186:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801c18a:	6861      	ldr	r1, [r4, #4]
 801c18c:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801c190:	fb01 2000 	mla	r0, r1, r0, r2
 801c194:	6822      	ldr	r2, [r4, #0]
 801c196:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801c19a:	f8de 2000 	ldr.w	r2, [lr]
 801c19e:	9201      	str	r2, [sp, #4]
 801c1a0:	f8de 2004 	ldr.w	r2, [lr, #4]
 801c1a4:	9202      	str	r2, [sp, #8]
 801c1a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c1aa:	f1bb 0f00 	cmp.w	fp, #0
 801c1ae:	dc03      	bgt.n	801c1b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801c1b0:	9a04      	ldr	r2, [sp, #16]
 801c1b2:	2a00      	cmp	r2, #0
 801c1b4:	f340 8142 	ble.w	801c43c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801c1b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c1ba:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801c1be:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801c1c2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c1c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c1c8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c1cc:	2b00      	cmp	r3, #0
 801c1ce:	dd0e      	ble.n	801c1ee <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c1d0:	140c      	asrs	r4, r1, #16
 801c1d2:	d405      	bmi.n	801c1e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801c1d4:	42bc      	cmp	r4, r7
 801c1d6:	da03      	bge.n	801c1e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801c1d8:	1414      	asrs	r4, r2, #16
 801c1da:	d401      	bmi.n	801c1e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801c1dc:	42b4      	cmp	r4, r6
 801c1de:	db07      	blt.n	801c1f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c1e0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c1e2:	4421      	add	r1, r4
 801c1e4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c1e6:	3b01      	subs	r3, #1
 801c1e8:	4422      	add	r2, r4
 801c1ea:	3002      	adds	r0, #2
 801c1ec:	e7ee      	b.n	801c1cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801c1ee:	d019      	beq.n	801c224 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801c1f0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c1f2:	1e5c      	subs	r4, r3, #1
 801c1f4:	fb05 1504 	mla	r5, r5, r4, r1
 801c1f8:	142d      	asrs	r5, r5, #16
 801c1fa:	d409      	bmi.n	801c210 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801c1fc:	42bd      	cmp	r5, r7
 801c1fe:	da07      	bge.n	801c210 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801c200:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801c202:	fb05 2404 	mla	r4, r5, r4, r2
 801c206:	1424      	asrs	r4, r4, #16
 801c208:	d402      	bmi.n	801c210 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801c20a:	42b4      	cmp	r4, r6
 801c20c:	f2c0 80b1 	blt.w	801c372 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801c210:	f04f 0800 	mov.w	r8, #0
 801c214:	eb03 0408 	add.w	r4, r3, r8
 801c218:	2c00      	cmp	r4, #0
 801c21a:	dc3e      	bgt.n	801c29a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801c21c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c220:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c224:	f1bb 0f00 	cmp.w	fp, #0
 801c228:	f340 8108 	ble.w	801c43c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801c22c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c230:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c234:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c238:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c23a:	f1bb 0b01 	subs.w	fp, fp, #1
 801c23e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c242:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c246:	eeb0 6a62 	vmov.f32	s12, s5
 801c24a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c24e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c252:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c256:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c25a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c25e:	eeb0 6a43 	vmov.f32	s12, s6
 801c262:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c266:	ee12 2a90 	vmov	r2, s5
 801c26a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c26e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c272:	ee13 2a10 	vmov	r2, s6
 801c276:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c27a:	9313      	str	r3, [sp, #76]	; 0x4c
 801c27c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c27e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c282:	9a04      	ldr	r2, [sp, #16]
 801c284:	9314      	str	r3, [sp, #80]	; 0x50
 801c286:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c28a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c28c:	eeb0 3a67 	vmov.f32	s6, s15
 801c290:	bf08      	it	eq
 801c292:	4613      	moveq	r3, r2
 801c294:	eef0 2a47 	vmov.f32	s5, s14
 801c298:	e787      	b.n	801c1aa <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801c29a:	140e      	asrs	r6, r1, #16
 801c29c:	d462      	bmi.n	801c364 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c29e:	f8de 5008 	ldr.w	r5, [lr, #8]
 801c2a2:	42b5      	cmp	r5, r6
 801c2a4:	dd5e      	ble.n	801c364 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c2a6:	1417      	asrs	r7, r2, #16
 801c2a8:	d45c      	bmi.n	801c364 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c2aa:	f8de 400c 	ldr.w	r4, [lr, #12]
 801c2ae:	42bc      	cmp	r4, r7
 801c2b0:	dd58      	ble.n	801c364 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c2b2:	b22d      	sxth	r5, r5
 801c2b4:	fb07 6505 	mla	r5, r7, r5, r6
 801c2b8:	9c02      	ldr	r4, [sp, #8]
 801c2ba:	5d66      	ldrb	r6, [r4, r5]
 801c2bc:	2e00      	cmp	r6, #0
 801c2be:	d051      	beq.n	801c364 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c2c0:	9c01      	ldr	r4, [sp, #4]
 801c2c2:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801c2c6:	f06f 0401 	mvn.w	r4, #1
 801c2ca:	fb04 f408 	mul.w	r4, r4, r8
 801c2ce:	9403      	str	r4, [sp, #12]
 801c2d0:	5b05      	ldrh	r5, [r0, r4]
 801c2d2:	9c05      	ldr	r4, [sp, #20]
 801c2d4:	4366      	muls	r6, r4
 801c2d6:	1c74      	adds	r4, r6, #1
 801c2d8:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801c2dc:	1224      	asrs	r4, r4, #8
 801c2de:	b2a7      	uxth	r7, r4
 801c2e0:	122e      	asrs	r6, r5, #8
 801c2e2:	43e4      	mvns	r4, r4
 801c2e4:	b2e4      	uxtb	r4, r4
 801c2e6:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801c2ea:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c2ee:	fb16 f604 	smulbb	r6, r6, r4
 801c2f2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801c2f6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c2fa:	00ed      	lsls	r5, r5, #3
 801c2fc:	fb0c 6c07 	mla	ip, ip, r7, r6
 801c300:	b2ed      	uxtb	r5, r5
 801c302:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801c306:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801c30a:	fb15 f504 	smulbb	r5, r5, r4
 801c30e:	fa5f f989 	uxtb.w	r9, r9
 801c312:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801c316:	fb09 5507 	mla	r5, r9, r7, r5
 801c31a:	fb1a fa04 	smulbb	sl, sl, r4
 801c31e:	fa1f fc8c 	uxth.w	ip, ip
 801c322:	b2ad      	uxth	r5, r5
 801c324:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c328:	fb06 a607 	mla	r6, r6, r7, sl
 801c32c:	f10c 0401 	add.w	r4, ip, #1
 801c330:	f105 0a01 	add.w	sl, r5, #1
 801c334:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801c338:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c33c:	b2b6      	uxth	r6, r6
 801c33e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c342:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c346:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c34a:	f106 0a01 	add.w	sl, r6, #1
 801c34e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c352:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c356:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c35a:	9c03      	ldr	r4, [sp, #12]
 801c35c:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c360:	f820 c004 	strh.w	ip, [r0, r4]
 801c364:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c366:	4421      	add	r1, r4
 801c368:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c36a:	f108 38ff 	add.w	r8, r8, #4294967295
 801c36e:	4422      	add	r2, r4
 801c370:	e750      	b.n	801c214 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c372:	f04f 0900 	mov.w	r9, #0
 801c376:	eba3 0409 	sub.w	r4, r3, r9
 801c37a:	2c00      	cmp	r4, #0
 801c37c:	f77f af4e 	ble.w	801c21c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801c380:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801c384:	140d      	asrs	r5, r1, #16
 801c386:	1414      	asrs	r4, r2, #16
 801c388:	fb06 5404 	mla	r4, r6, r4, r5
 801c38c:	9d02      	ldr	r5, [sp, #8]
 801c38e:	5d2e      	ldrb	r6, [r5, r4]
 801c390:	2e00      	cmp	r6, #0
 801c392:	d04c      	beq.n	801c42e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801c394:	9d01      	ldr	r5, [sp, #4]
 801c396:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801c39a:	9c05      	ldr	r4, [sp, #20]
 801c39c:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801c3a0:	4366      	muls	r6, r4
 801c3a2:	1c74      	adds	r4, r6, #1
 801c3a4:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801c3a8:	1224      	asrs	r4, r4, #8
 801c3aa:	b2a7      	uxth	r7, r4
 801c3ac:	122e      	asrs	r6, r5, #8
 801c3ae:	43e4      	mvns	r4, r4
 801c3b0:	b2e4      	uxtb	r4, r4
 801c3b2:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801c3b6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c3ba:	fb16 f604 	smulbb	r6, r6, r4
 801c3be:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801c3c2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c3c6:	00ed      	lsls	r5, r5, #3
 801c3c8:	fb0c 6c07 	mla	ip, ip, r7, r6
 801c3cc:	b2ed      	uxtb	r5, r5
 801c3ce:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801c3d2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801c3d6:	fb15 f504 	smulbb	r5, r5, r4
 801c3da:	fa5f f888 	uxtb.w	r8, r8
 801c3de:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801c3e2:	fb08 5507 	mla	r5, r8, r7, r5
 801c3e6:	fb1a fa04 	smulbb	sl, sl, r4
 801c3ea:	fa1f fc8c 	uxth.w	ip, ip
 801c3ee:	b2ad      	uxth	r5, r5
 801c3f0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c3f4:	fb06 a607 	mla	r6, r6, r7, sl
 801c3f8:	f10c 0401 	add.w	r4, ip, #1
 801c3fc:	f105 0a01 	add.w	sl, r5, #1
 801c400:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801c404:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c408:	b2b6      	uxth	r6, r6
 801c40a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c40e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c412:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c416:	f106 0a01 	add.w	sl, r6, #1
 801c41a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c41e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c422:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c426:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c42a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801c42e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c430:	4421      	add	r1, r4
 801c432:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c434:	f109 0901 	add.w	r9, r9, #1
 801c438:	4422      	add	r2, r4
 801c43a:	e79c      	b.n	801c376 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801c43c:	b007      	add	sp, #28
 801c43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c442 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c442:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c446:	b085      	sub	sp, #20
 801c448:	468b      	mov	fp, r1
 801c44a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c44c:	9203      	str	r2, [sp, #12]
 801c44e:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801c452:	6861      	ldr	r1, [r4, #4]
 801c454:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801c458:	fb01 2000 	mla	r0, r1, r0, r2
 801c45c:	6822      	ldr	r2, [r4, #0]
 801c45e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801c462:	f8d8 2000 	ldr.w	r2, [r8]
 801c466:	9200      	str	r2, [sp, #0]
 801c468:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801c46c:	9201      	str	r2, [sp, #4]
 801c46e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c472:	f1bb 0f00 	cmp.w	fp, #0
 801c476:	dc03      	bgt.n	801c480 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801c478:	9a03      	ldr	r2, [sp, #12]
 801c47a:	2a00      	cmp	r2, #0
 801c47c:	f340 8146 	ble.w	801c70c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801c480:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c482:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801c486:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801c48a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c48e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c490:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c494:	2b00      	cmp	r3, #0
 801c496:	dd0e      	ble.n	801c4b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801c498:	140c      	asrs	r4, r1, #16
 801c49a:	d405      	bmi.n	801c4a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c49c:	42bc      	cmp	r4, r7
 801c49e:	da03      	bge.n	801c4a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c4a0:	1414      	asrs	r4, r2, #16
 801c4a2:	d401      	bmi.n	801c4a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c4a4:	42b4      	cmp	r4, r6
 801c4a6:	db07      	blt.n	801c4b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c4a8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c4aa:	4421      	add	r1, r4
 801c4ac:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c4ae:	3b01      	subs	r3, #1
 801c4b0:	4422      	add	r2, r4
 801c4b2:	3002      	adds	r0, #2
 801c4b4:	e7ee      	b.n	801c494 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801c4b6:	d017      	beq.n	801c4e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801c4b8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c4ba:	1e5c      	subs	r4, r3, #1
 801c4bc:	fb05 1504 	mla	r5, r5, r4, r1
 801c4c0:	142d      	asrs	r5, r5, #16
 801c4c2:	d409      	bmi.n	801c4d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c4c4:	42bd      	cmp	r5, r7
 801c4c6:	da07      	bge.n	801c4d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c4c8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c4ca:	fb05 2404 	mla	r4, r5, r4, r2
 801c4ce:	1424      	asrs	r4, r4, #16
 801c4d0:	d402      	bmi.n	801c4d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c4d2:	42b4      	cmp	r4, r6
 801c4d4:	f2c0 80b3 	blt.w	801c63e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801c4d8:	2600      	movs	r6, #0
 801c4da:	199c      	adds	r4, r3, r6
 801c4dc:	2c00      	cmp	r4, #0
 801c4de:	dc3e      	bgt.n	801c55e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801c4e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c4e4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c4e8:	f1bb 0f00 	cmp.w	fp, #0
 801c4ec:	f340 810e 	ble.w	801c70c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801c4f0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c4f4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c4f8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c4fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c4fe:	f1bb 0b01 	subs.w	fp, fp, #1
 801c502:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c506:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c50a:	eeb0 6a62 	vmov.f32	s12, s5
 801c50e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c512:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c516:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c51a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c51e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c522:	eeb0 6a43 	vmov.f32	s12, s6
 801c526:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c52a:	ee12 2a90 	vmov	r2, s5
 801c52e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c532:	fb92 f3f3 	sdiv	r3, r2, r3
 801c536:	ee13 2a10 	vmov	r2, s6
 801c53a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c53e:	9311      	str	r3, [sp, #68]	; 0x44
 801c540:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c542:	fb92 f3f3 	sdiv	r3, r2, r3
 801c546:	9a03      	ldr	r2, [sp, #12]
 801c548:	9312      	str	r3, [sp, #72]	; 0x48
 801c54a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c54e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c550:	eeb0 3a67 	vmov.f32	s6, s15
 801c554:	bf08      	it	eq
 801c556:	4613      	moveq	r3, r2
 801c558:	eef0 2a47 	vmov.f32	s5, s14
 801c55c:	e789      	b.n	801c472 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801c55e:	140f      	asrs	r7, r1, #16
 801c560:	d45f      	bmi.n	801c622 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801c562:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801c566:	42bd      	cmp	r5, r7
 801c568:	dd5b      	ble.n	801c622 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801c56a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801c56e:	d458      	bmi.n	801c622 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801c570:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801c574:	4564      	cmp	r4, ip
 801c576:	dd54      	ble.n	801c622 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801c578:	b22d      	sxth	r5, r5
 801c57a:	fb0c 7505 	mla	r5, ip, r5, r7
 801c57e:	9c01      	ldr	r4, [sp, #4]
 801c580:	5d64      	ldrb	r4, [r4, r5]
 801c582:	2cff      	cmp	r4, #255	; 0xff
 801c584:	d053      	beq.n	801c62e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801c586:	2c00      	cmp	r4, #0
 801c588:	d04b      	beq.n	801c622 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801c58a:	9f00      	ldr	r7, [sp, #0]
 801c58c:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801c590:	f06f 0501 	mvn.w	r5, #1
 801c594:	4375      	muls	r5, r6
 801c596:	9502      	str	r5, [sp, #8]
 801c598:	5b45      	ldrh	r5, [r0, r5]
 801c59a:	fa1f fc84 	uxth.w	ip, r4
 801c59e:	122f      	asrs	r7, r5, #8
 801c5a0:	43e4      	mvns	r4, r4
 801c5a2:	b2e4      	uxtb	r4, r4
 801c5a4:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801c5a8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c5ac:	fb17 f704 	smulbb	r7, r7, r4
 801c5b0:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801c5b4:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801c5b8:	00ed      	lsls	r5, r5, #3
 801c5ba:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801c5be:	b2ed      	uxtb	r5, r5
 801c5c0:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801c5c4:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801c5c8:	fb15 f504 	smulbb	r5, r5, r4
 801c5cc:	fa5f f989 	uxtb.w	r9, r9
 801c5d0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801c5d4:	fb09 550c 	mla	r5, r9, ip, r5
 801c5d8:	fb1a fa04 	smulbb	sl, sl, r4
 801c5dc:	fa1f fe8e 	uxth.w	lr, lr
 801c5e0:	b2ad      	uxth	r5, r5
 801c5e2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c5e6:	fb07 a70c 	mla	r7, r7, ip, sl
 801c5ea:	f10e 0401 	add.w	r4, lr, #1
 801c5ee:	f105 0a01 	add.w	sl, r5, #1
 801c5f2:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801c5f6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c5fa:	b2bf      	uxth	r7, r7
 801c5fc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c600:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801c604:	ea4e 0e0a 	orr.w	lr, lr, sl
 801c608:	f107 0a01 	add.w	sl, r7, #1
 801c60c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801c610:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c614:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c618:	9c02      	ldr	r4, [sp, #8]
 801c61a:	ea4e 0e0a 	orr.w	lr, lr, sl
 801c61e:	f820 e004 	strh.w	lr, [r0, r4]
 801c622:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c624:	4421      	add	r1, r4
 801c626:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c628:	3e01      	subs	r6, #1
 801c62a:	4422      	add	r2, r4
 801c62c:	e755      	b.n	801c4da <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c62e:	9c00      	ldr	r4, [sp, #0]
 801c630:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801c634:	f06f 0401 	mvn.w	r4, #1
 801c638:	4374      	muls	r4, r6
 801c63a:	5305      	strh	r5, [r0, r4]
 801c63c:	e7f1      	b.n	801c622 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801c63e:	f04f 0900 	mov.w	r9, #0
 801c642:	eba3 0409 	sub.w	r4, r3, r9
 801c646:	2c00      	cmp	r4, #0
 801c648:	f77f af4a 	ble.w	801c4e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c64c:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801c650:	1414      	asrs	r4, r2, #16
 801c652:	140d      	asrs	r5, r1, #16
 801c654:	fb06 5504 	mla	r5, r6, r4, r5
 801c658:	9c01      	ldr	r4, [sp, #4]
 801c65a:	5d64      	ldrb	r4, [r4, r5]
 801c65c:	2cff      	cmp	r4, #255	; 0xff
 801c65e:	d04f      	beq.n	801c700 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801c660:	2c00      	cmp	r4, #0
 801c662:	d046      	beq.n	801c6f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c664:	9e00      	ldr	r6, [sp, #0]
 801c666:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801c66a:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801c66e:	b2a7      	uxth	r7, r4
 801c670:	122e      	asrs	r6, r5, #8
 801c672:	43e4      	mvns	r4, r4
 801c674:	b2e4      	uxtb	r4, r4
 801c676:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801c67a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c67e:	fb16 f604 	smulbb	r6, r6, r4
 801c682:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801c686:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c68a:	00ed      	lsls	r5, r5, #3
 801c68c:	fb0c 6c07 	mla	ip, ip, r7, r6
 801c690:	b2ed      	uxtb	r5, r5
 801c692:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801c696:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c69a:	fb15 f504 	smulbb	r5, r5, r4
 801c69e:	fa5f fe8e 	uxtb.w	lr, lr
 801c6a2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801c6a6:	fb0e 5507 	mla	r5, lr, r7, r5
 801c6aa:	fb1a fa04 	smulbb	sl, sl, r4
 801c6ae:	fa1f fc8c 	uxth.w	ip, ip
 801c6b2:	b2ad      	uxth	r5, r5
 801c6b4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c6b8:	fb06 a607 	mla	r6, r6, r7, sl
 801c6bc:	f10c 0401 	add.w	r4, ip, #1
 801c6c0:	f105 0a01 	add.w	sl, r5, #1
 801c6c4:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801c6c8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c6cc:	b2b6      	uxth	r6, r6
 801c6ce:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c6d2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c6d6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c6da:	f106 0a01 	add.w	sl, r6, #1
 801c6de:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c6e2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c6e6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c6ea:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c6ee:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801c6f2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c6f4:	4421      	add	r1, r4
 801c6f6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c6f8:	f109 0901 	add.w	r9, r9, #1
 801c6fc:	4422      	add	r2, r4
 801c6fe:	e7a0      	b.n	801c642 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801c700:	9c00      	ldr	r4, [sp, #0]
 801c702:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801c706:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801c70a:	e7f2      	b.n	801c6f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c70c:	b005      	add	sp, #20
 801c70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c712 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c712:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c716:	b085      	sub	sp, #20
 801c718:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c71a:	9203      	str	r2, [sp, #12]
 801c71c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801c720:	9201      	str	r2, [sp, #4]
 801c722:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c726:	9100      	str	r1, [sp, #0]
 801c728:	6841      	ldr	r1, [r0, #4]
 801c72a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801c72e:	fb01 2404 	mla	r4, r1, r4, r2
 801c732:	6802      	ldr	r2, [r0, #0]
 801c734:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c738:	f8de 2000 	ldr.w	r2, [lr]
 801c73c:	9202      	str	r2, [sp, #8]
 801c73e:	9a01      	ldr	r2, [sp, #4]
 801c740:	43d6      	mvns	r6, r2
 801c742:	b2f6      	uxtb	r6, r6
 801c744:	9a00      	ldr	r2, [sp, #0]
 801c746:	2a00      	cmp	r2, #0
 801c748:	dc03      	bgt.n	801c752 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801c74a:	9a03      	ldr	r2, [sp, #12]
 801c74c:	2a00      	cmp	r2, #0
 801c74e:	f340 8124 	ble.w	801c99a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801c752:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c754:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801c758:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801c75c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c760:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c762:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c766:	2b00      	cmp	r3, #0
 801c768:	dd0e      	ble.n	801c788 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c76a:	1408      	asrs	r0, r1, #16
 801c76c:	d405      	bmi.n	801c77a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c76e:	4560      	cmp	r0, ip
 801c770:	da03      	bge.n	801c77a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c772:	1410      	asrs	r0, r2, #16
 801c774:	d401      	bmi.n	801c77a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c776:	42b8      	cmp	r0, r7
 801c778:	db07      	blt.n	801c78a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c77a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c77c:	4401      	add	r1, r0
 801c77e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c780:	3b01      	subs	r3, #1
 801c782:	4402      	add	r2, r0
 801c784:	3402      	adds	r4, #2
 801c786:	e7ee      	b.n	801c766 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801c788:	d06e      	beq.n	801c868 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c78a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c78c:	1e58      	subs	r0, r3, #1
 801c78e:	fb05 1500 	mla	r5, r5, r0, r1
 801c792:	142d      	asrs	r5, r5, #16
 801c794:	d45c      	bmi.n	801c850 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801c796:	4565      	cmp	r5, ip
 801c798:	da5a      	bge.n	801c850 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801c79a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c79c:	fb05 2000 	mla	r0, r5, r0, r2
 801c7a0:	1400      	asrs	r0, r0, #16
 801c7a2:	d455      	bmi.n	801c850 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801c7a4:	42b8      	cmp	r0, r7
 801c7a6:	da53      	bge.n	801c850 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801c7a8:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801c7ac:	4699      	mov	r9, r3
 801c7ae:	46a2      	mov	sl, r4
 801c7b0:	f1b9 0f00 	cmp.w	r9, #0
 801c7b4:	dd54      	ble.n	801c860 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801c7b6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801c7ba:	140d      	asrs	r5, r1, #16
 801c7bc:	1410      	asrs	r0, r2, #16
 801c7be:	fb07 5000 	mla	r0, r7, r0, r5
 801c7c2:	9d02      	ldr	r5, [sp, #8]
 801c7c4:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801c7c8:	f8ba 5000 	ldrh.w	r5, [sl]
 801c7cc:	122f      	asrs	r7, r5, #8
 801c7ce:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801c7d2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c7d6:	fb17 f706 	smulbb	r7, r7, r6
 801c7da:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801c7de:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c7e2:	00ed      	lsls	r5, r5, #3
 801c7e4:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801c7e8:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801c7ec:	10c7      	asrs	r7, r0, #3
 801c7ee:	b2ed      	uxtb	r5, r5
 801c7f0:	00c0      	lsls	r0, r0, #3
 801c7f2:	fb18 f806 	smulbb	r8, r8, r6
 801c7f6:	fb15 f506 	smulbb	r5, r5, r6
 801c7fa:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c7fe:	b2c0      	uxtb	r0, r0
 801c800:	fa1f fc8c 	uxth.w	ip, ip
 801c804:	fb07 870b 	mla	r7, r7, fp, r8
 801c808:	fb00 500b 	mla	r0, r0, fp, r5
 801c80c:	b280      	uxth	r0, r0
 801c80e:	b2bf      	uxth	r7, r7
 801c810:	f10c 0501 	add.w	r5, ip, #1
 801c814:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801c818:	f107 0801 	add.w	r8, r7, #1
 801c81c:	1c45      	adds	r5, r0, #1
 801c81e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801c822:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801c826:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c828:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c82c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c830:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801c834:	ea4c 0c05 	orr.w	ip, ip, r5
 801c838:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801c83c:	4401      	add	r1, r0
 801c83e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c840:	ea4c 0c08 	orr.w	ip, ip, r8
 801c844:	f82a cb02 	strh.w	ip, [sl], #2
 801c848:	4402      	add	r2, r0
 801c84a:	f109 39ff 	add.w	r9, r9, #4294967295
 801c84e:	e7af      	b.n	801c7b0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c850:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801c854:	f04f 0800 	mov.w	r8, #0
 801c858:	eb03 0008 	add.w	r0, r3, r8
 801c85c:	2800      	cmp	r0, #0
 801c85e:	dc41      	bgt.n	801c8e4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801c860:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c864:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c868:	9b00      	ldr	r3, [sp, #0]
 801c86a:	2b00      	cmp	r3, #0
 801c86c:	f340 8095 	ble.w	801c99a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801c870:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c874:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c878:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c87c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c87e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c882:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c886:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c88a:	eef0 6a62 	vmov.f32	s13, s5
 801c88e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c892:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c896:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c89a:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801c89e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c8a2:	eef0 6a43 	vmov.f32	s13, s6
 801c8a6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c8aa:	ee12 2a90 	vmov	r2, s5
 801c8ae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c8b2:	fb92 f3f3 	sdiv	r3, r2, r3
 801c8b6:	ee13 2a10 	vmov	r2, s6
 801c8ba:	9311      	str	r3, [sp, #68]	; 0x44
 801c8bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c8be:	fb92 f3f3 	sdiv	r3, r2, r3
 801c8c2:	9312      	str	r3, [sp, #72]	; 0x48
 801c8c4:	9b00      	ldr	r3, [sp, #0]
 801c8c6:	9a03      	ldr	r2, [sp, #12]
 801c8c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c8cc:	3b01      	subs	r3, #1
 801c8ce:	9300      	str	r3, [sp, #0]
 801c8d0:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801c8d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c8d6:	eeb0 3a67 	vmov.f32	s6, s15
 801c8da:	bf08      	it	eq
 801c8dc:	4613      	moveq	r3, r2
 801c8de:	eef0 2a47 	vmov.f32	s5, s14
 801c8e2:	e72f      	b.n	801c744 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801c8e4:	140f      	asrs	r7, r1, #16
 801c8e6:	d451      	bmi.n	801c98c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801c8e8:	f8de 5008 	ldr.w	r5, [lr, #8]
 801c8ec:	42bd      	cmp	r5, r7
 801c8ee:	dd4d      	ble.n	801c98c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801c8f0:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801c8f4:	d44a      	bmi.n	801c98c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801c8f6:	f8de 000c 	ldr.w	r0, [lr, #12]
 801c8fa:	4560      	cmp	r0, ip
 801c8fc:	dd46      	ble.n	801c98c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801c8fe:	b22d      	sxth	r5, r5
 801c900:	fb0c 7505 	mla	r5, ip, r5, r7
 801c904:	9802      	ldr	r0, [sp, #8]
 801c906:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801c90a:	f06f 0501 	mvn.w	r5, #1
 801c90e:	fb05 fb08 	mul.w	fp, r5, r8
 801c912:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801c916:	f834 500b 	ldrh.w	r5, [r4, fp]
 801c91a:	122f      	asrs	r7, r5, #8
 801c91c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c920:	fb17 f706 	smulbb	r7, r7, r6
 801c924:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801c928:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c92c:	00ed      	lsls	r5, r5, #3
 801c92e:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801c932:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801c936:	10c7      	asrs	r7, r0, #3
 801c938:	b2ed      	uxtb	r5, r5
 801c93a:	00c0      	lsls	r0, r0, #3
 801c93c:	fb19 f906 	smulbb	r9, r9, r6
 801c940:	fb15 f506 	smulbb	r5, r5, r6
 801c944:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c948:	b2c0      	uxtb	r0, r0
 801c94a:	fa1f fc8c 	uxth.w	ip, ip
 801c94e:	fb07 970a 	mla	r7, r7, sl, r9
 801c952:	fb00 500a 	mla	r0, r0, sl, r5
 801c956:	b2bf      	uxth	r7, r7
 801c958:	b280      	uxth	r0, r0
 801c95a:	f10c 0501 	add.w	r5, ip, #1
 801c95e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801c962:	f107 0901 	add.w	r9, r7, #1
 801c966:	1c45      	adds	r5, r0, #1
 801c968:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801c96c:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801c970:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c974:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c978:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801c97c:	ea4c 0c05 	orr.w	ip, ip, r5
 801c980:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801c984:	ea4c 0c09 	orr.w	ip, ip, r9
 801c988:	f824 c00b 	strh.w	ip, [r4, fp]
 801c98c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c98e:	4401      	add	r1, r0
 801c990:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c992:	f108 38ff 	add.w	r8, r8, #4294967295
 801c996:	4402      	add	r2, r0
 801c998:	e75e      	b.n	801c858 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801c99a:	b005      	add	sp, #20
 801c99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c9a0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9a4:	b085      	sub	sp, #20
 801c9a6:	4693      	mov	fp, r2
 801c9a8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c9aa:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801c9ac:	6870      	ldr	r0, [r6, #4]
 801c9ae:	9101      	str	r1, [sp, #4]
 801c9b0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c9b4:	fb00 2404 	mla	r4, r0, r4, r2
 801c9b8:	6832      	ldr	r2, [r6, #0]
 801c9ba:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801c9be:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c9c2:	682a      	ldr	r2, [r5, #0]
 801c9c4:	9202      	str	r2, [sp, #8]
 801c9c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c9ca:	9a01      	ldr	r2, [sp, #4]
 801c9cc:	2a00      	cmp	r2, #0
 801c9ce:	dc03      	bgt.n	801c9d8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801c9d0:	f1bb 0f00 	cmp.w	fp, #0
 801c9d4:	f340 809a 	ble.w	801cb0c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801c9d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c9da:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801c9de:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801c9e2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c9e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c9e8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c9ec:	2b00      	cmp	r3, #0
 801c9ee:	dd0c      	ble.n	801ca0a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c9f0:	1406      	asrs	r6, r0, #16
 801c9f2:	d405      	bmi.n	801ca00 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c9f4:	454e      	cmp	r6, r9
 801c9f6:	da03      	bge.n	801ca00 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c9f8:	1416      	asrs	r6, r2, #16
 801c9fa:	d401      	bmi.n	801ca00 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c9fc:	4546      	cmp	r6, r8
 801c9fe:	db05      	blt.n	801ca0c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ca00:	4470      	add	r0, lr
 801ca02:	4462      	add	r2, ip
 801ca04:	3b01      	subs	r3, #1
 801ca06:	3402      	adds	r4, #2
 801ca08:	e7f0      	b.n	801c9ec <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ca0a:	d00f      	beq.n	801ca2c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ca0c:	1e5e      	subs	r6, r3, #1
 801ca0e:	fb0e 0706 	mla	r7, lr, r6, r0
 801ca12:	143f      	asrs	r7, r7, #16
 801ca14:	d541      	bpl.n	801ca9a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801ca16:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801ca1a:	4698      	mov	r8, r3
 801ca1c:	9603      	str	r6, [sp, #12]
 801ca1e:	f1b8 0f00 	cmp.w	r8, #0
 801ca22:	dc56      	bgt.n	801cad2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801ca24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ca28:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ca2c:	9b01      	ldr	r3, [sp, #4]
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	dd6c      	ble.n	801cb0c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801ca32:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ca36:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ca3a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ca3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ca40:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ca44:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ca48:	eeb0 6a62 	vmov.f32	s12, s5
 801ca4c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ca50:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ca54:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ca58:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ca5c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ca60:	eeb0 6a43 	vmov.f32	s12, s6
 801ca64:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ca68:	ee12 2a90 	vmov	r2, s5
 801ca6c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ca70:	fb92 fef3 	sdiv	lr, r2, r3
 801ca74:	ee13 2a10 	vmov	r2, s6
 801ca78:	fb92 fcf3 	sdiv	ip, r2, r3
 801ca7c:	9b01      	ldr	r3, [sp, #4]
 801ca7e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ca82:	3b01      	subs	r3, #1
 801ca84:	9301      	str	r3, [sp, #4]
 801ca86:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ca8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ca8c:	eeb0 3a67 	vmov.f32	s6, s15
 801ca90:	bf08      	it	eq
 801ca92:	465b      	moveq	r3, fp
 801ca94:	eef0 2a47 	vmov.f32	s5, s14
 801ca98:	e797      	b.n	801c9ca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801ca9a:	454f      	cmp	r7, r9
 801ca9c:	dabb      	bge.n	801ca16 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ca9e:	fb0c 2606 	mla	r6, ip, r6, r2
 801caa2:	1436      	asrs	r6, r6, #16
 801caa4:	d4b7      	bmi.n	801ca16 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801caa6:	4546      	cmp	r6, r8
 801caa8:	dab5      	bge.n	801ca16 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801caaa:	461e      	mov	r6, r3
 801caac:	46a0      	mov	r8, r4
 801caae:	2e00      	cmp	r6, #0
 801cab0:	ddb8      	ble.n	801ca24 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801cab2:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801cab6:	9902      	ldr	r1, [sp, #8]
 801cab8:	1417      	asrs	r7, r2, #16
 801caba:	ea4f 4920 	mov.w	r9, r0, asr #16
 801cabe:	fb0a 9707 	mla	r7, sl, r7, r9
 801cac2:	4470      	add	r0, lr
 801cac4:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801cac8:	f828 7b02 	strh.w	r7, [r8], #2
 801cacc:	4462      	add	r2, ip
 801cace:	3e01      	subs	r6, #1
 801cad0:	e7ed      	b.n	801caae <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801cad2:	ea5f 4920 	movs.w	r9, r0, asr #16
 801cad6:	d414      	bmi.n	801cb02 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801cad8:	68ae      	ldr	r6, [r5, #8]
 801cada:	454e      	cmp	r6, r9
 801cadc:	dd11      	ble.n	801cb02 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801cade:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801cae2:	d40e      	bmi.n	801cb02 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801cae4:	68ef      	ldr	r7, [r5, #12]
 801cae6:	4557      	cmp	r7, sl
 801cae8:	dd0b      	ble.n	801cb02 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801caea:	b236      	sxth	r6, r6
 801caec:	fb0a 9606 	mla	r6, sl, r6, r9
 801caf0:	9f02      	ldr	r7, [sp, #8]
 801caf2:	f06f 0101 	mvn.w	r1, #1
 801caf6:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801cafa:	fb01 f608 	mul.w	r6, r1, r8
 801cafe:	9903      	ldr	r1, [sp, #12]
 801cb00:	538f      	strh	r7, [r1, r6]
 801cb02:	4470      	add	r0, lr
 801cb04:	4462      	add	r2, ip
 801cb06:	f108 38ff 	add.w	r8, r8, #4294967295
 801cb0a:	e788      	b.n	801ca1e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801cb0c:	b005      	add	sp, #20
 801cb0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cb12 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cb12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb16:	b085      	sub	sp, #20
 801cb18:	468b      	mov	fp, r1
 801cb1a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801cb1c:	9202      	str	r2, [sp, #8]
 801cb1e:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801cb22:	9203      	str	r2, [sp, #12]
 801cb24:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801cb28:	6841      	ldr	r1, [r0, #4]
 801cb2a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801cb2e:	fb01 2404 	mla	r4, r1, r4, r2
 801cb32:	6802      	ldr	r2, [r0, #0]
 801cb34:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801cb38:	f8d8 2000 	ldr.w	r2, [r8]
 801cb3c:	9200      	str	r2, [sp, #0]
 801cb3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cb42:	f1bb 0f00 	cmp.w	fp, #0
 801cb46:	dc03      	bgt.n	801cb50 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801cb48:	9a02      	ldr	r2, [sp, #8]
 801cb4a:	2a00      	cmp	r2, #0
 801cb4c:	f340 8134 	ble.w	801cdb8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801cb50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cb52:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801cb56:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801cb5a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cb5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cb60:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801cb64:	2b00      	cmp	r3, #0
 801cb66:	dd0e      	ble.n	801cb86 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801cb68:	1402      	asrs	r2, r0, #16
 801cb6a:	d405      	bmi.n	801cb78 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801cb6c:	42ba      	cmp	r2, r7
 801cb6e:	da03      	bge.n	801cb78 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801cb70:	140a      	asrs	r2, r1, #16
 801cb72:	d401      	bmi.n	801cb78 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801cb74:	42b2      	cmp	r2, r6
 801cb76:	db07      	blt.n	801cb88 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cb78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cb7a:	4410      	add	r0, r2
 801cb7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cb7e:	3b01      	subs	r3, #1
 801cb80:	4411      	add	r1, r2
 801cb82:	3402      	adds	r4, #2
 801cb84:	e7ee      	b.n	801cb64 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801cb86:	d019      	beq.n	801cbbc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801cb88:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801cb8a:	1e5a      	subs	r2, r3, #1
 801cb8c:	fb05 0502 	mla	r5, r5, r2, r0
 801cb90:	142d      	asrs	r5, r5, #16
 801cb92:	d409      	bmi.n	801cba8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801cb94:	42bd      	cmp	r5, r7
 801cb96:	da07      	bge.n	801cba8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801cb98:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801cb9a:	fb05 1202 	mla	r2, r5, r2, r1
 801cb9e:	1412      	asrs	r2, r2, #16
 801cba0:	d402      	bmi.n	801cba8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801cba2:	42b2      	cmp	r2, r6
 801cba4:	f2c0 80aa 	blt.w	801ccfc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801cba8:	f04f 0c00 	mov.w	ip, #0
 801cbac:	eb03 020c 	add.w	r2, r3, ip
 801cbb0:	2a00      	cmp	r2, #0
 801cbb2:	dc3e      	bgt.n	801cc32 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801cbb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cbb8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cbbc:	f1bb 0f00 	cmp.w	fp, #0
 801cbc0:	f340 80fa 	ble.w	801cdb8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801cbc4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cbc8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cbcc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cbd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cbd2:	f1bb 0b01 	subs.w	fp, fp, #1
 801cbd6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cbda:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cbde:	eeb0 6a62 	vmov.f32	s12, s5
 801cbe2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cbe6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cbea:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cbee:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801cbf2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cbf6:	eeb0 6a43 	vmov.f32	s12, s6
 801cbfa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cbfe:	ee12 2a90 	vmov	r2, s5
 801cc02:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cc06:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc0a:	ee13 2a10 	vmov	r2, s6
 801cc0e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cc12:	9311      	str	r3, [sp, #68]	; 0x44
 801cc14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cc16:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc1a:	9a02      	ldr	r2, [sp, #8]
 801cc1c:	9312      	str	r3, [sp, #72]	; 0x48
 801cc1e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801cc22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cc24:	eeb0 3a67 	vmov.f32	s6, s15
 801cc28:	bf08      	it	eq
 801cc2a:	4613      	moveq	r3, r2
 801cc2c:	eef0 2a47 	vmov.f32	s5, s14
 801cc30:	e787      	b.n	801cb42 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801cc32:	1406      	asrs	r6, r0, #16
 801cc34:	d45b      	bmi.n	801ccee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801cc36:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801cc3a:	42b5      	cmp	r5, r6
 801cc3c:	dd57      	ble.n	801ccee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801cc3e:	140f      	asrs	r7, r1, #16
 801cc40:	d455      	bmi.n	801ccee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801cc42:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801cc46:	42ba      	cmp	r2, r7
 801cc48:	dd51      	ble.n	801ccee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801cc4a:	b22d      	sxth	r5, r5
 801cc4c:	fb07 6505 	mla	r5, r7, r5, r6
 801cc50:	9a00      	ldr	r2, [sp, #0]
 801cc52:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 801cc56:	0e2e      	lsrs	r6, r5, #24
 801cc58:	d049      	beq.n	801ccee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801cc5a:	f06f 0201 	mvn.w	r2, #1
 801cc5e:	fb02 f20c 	mul.w	r2, r2, ip
 801cc62:	9201      	str	r2, [sp, #4]
 801cc64:	f834 e002 	ldrh.w	lr, [r4, r2]
 801cc68:	9a03      	ldr	r2, [sp, #12]
 801cc6a:	4356      	muls	r6, r2
 801cc6c:	1c72      	adds	r2, r6, #1
 801cc6e:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801cc72:	1212      	asrs	r2, r2, #8
 801cc74:	fa1f f982 	uxth.w	r9, r2
 801cc78:	ea4f 272e 	mov.w	r7, lr, asr #8
 801cc7c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801cc80:	43d2      	mvns	r2, r2
 801cc82:	b2d2      	uxtb	r2, r2
 801cc84:	fb16 f609 	smulbb	r6, r6, r9
 801cc88:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801cc8c:	fb07 6702 	mla	r7, r7, r2, r6
 801cc90:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801cc94:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801cc98:	b2ed      	uxtb	r5, r5
 801cc9a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801cc9e:	fa5f fe8e 	uxtb.w	lr, lr
 801cca2:	fb15 f509 	smulbb	r5, r5, r9
 801cca6:	fb0e 5502 	mla	r5, lr, r2, r5
 801ccaa:	b2bf      	uxth	r7, r7
 801ccac:	fb1a fa09 	smulbb	sl, sl, r9
 801ccb0:	b2ad      	uxth	r5, r5
 801ccb2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ccb6:	fb06 a602 	mla	r6, r6, r2, sl
 801ccba:	1c7a      	adds	r2, r7, #1
 801ccbc:	f105 0a01 	add.w	sl, r5, #1
 801ccc0:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ccc4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ccc8:	b2b6      	uxth	r6, r6
 801ccca:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ccce:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ccd2:	ea47 070a 	orr.w	r7, r7, sl
 801ccd6:	f106 0a01 	add.w	sl, r6, #1
 801ccda:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ccde:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cce2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cce6:	9a01      	ldr	r2, [sp, #4]
 801cce8:	ea47 070a 	orr.w	r7, r7, sl
 801ccec:	52a7      	strh	r7, [r4, r2]
 801ccee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ccf0:	4410      	add	r0, r2
 801ccf2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ccf4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ccf8:	4411      	add	r1, r2
 801ccfa:	e757      	b.n	801cbac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801ccfc:	f04f 0e00 	mov.w	lr, #0
 801cd00:	eba3 020e 	sub.w	r2, r3, lr
 801cd04:	2a00      	cmp	r2, #0
 801cd06:	f77f af55 	ble.w	801cbb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801cd0a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801cd0e:	1405      	asrs	r5, r0, #16
 801cd10:	140a      	asrs	r2, r1, #16
 801cd12:	fb06 5202 	mla	r2, r6, r2, r5
 801cd16:	9d00      	ldr	r5, [sp, #0]
 801cd18:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801cd1c:	0e2e      	lsrs	r6, r5, #24
 801cd1e:	d044      	beq.n	801cdaa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 801cd20:	9a03      	ldr	r2, [sp, #12]
 801cd22:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801cd26:	4356      	muls	r6, r2
 801cd28:	1c72      	adds	r2, r6, #1
 801cd2a:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801cd2e:	1212      	asrs	r2, r2, #8
 801cd30:	fa1f f982 	uxth.w	r9, r2
 801cd34:	ea4f 272c 	mov.w	r7, ip, asr #8
 801cd38:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801cd3c:	43d2      	mvns	r2, r2
 801cd3e:	b2d2      	uxtb	r2, r2
 801cd40:	fb16 f609 	smulbb	r6, r6, r9
 801cd44:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801cd48:	fb07 6702 	mla	r7, r7, r2, r6
 801cd4c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801cd50:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801cd54:	b2ed      	uxtb	r5, r5
 801cd56:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801cd5a:	fa5f fc8c 	uxtb.w	ip, ip
 801cd5e:	fb15 f509 	smulbb	r5, r5, r9
 801cd62:	fb0c 5502 	mla	r5, ip, r2, r5
 801cd66:	b2bf      	uxth	r7, r7
 801cd68:	fb1a fa09 	smulbb	sl, sl, r9
 801cd6c:	b2ad      	uxth	r5, r5
 801cd6e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801cd72:	fb06 a602 	mla	r6, r6, r2, sl
 801cd76:	1c7a      	adds	r2, r7, #1
 801cd78:	f105 0a01 	add.w	sl, r5, #1
 801cd7c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801cd80:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801cd84:	b2b6      	uxth	r6, r6
 801cd86:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cd8a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801cd8e:	ea47 070a 	orr.w	r7, r7, sl
 801cd92:	f106 0a01 	add.w	sl, r6, #1
 801cd96:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801cd9a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cd9e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cda2:	ea47 070a 	orr.w	r7, r7, sl
 801cda6:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801cdaa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cdac:	4410      	add	r0, r2
 801cdae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cdb0:	f10e 0e01 	add.w	lr, lr, #1
 801cdb4:	4411      	add	r1, r2
 801cdb6:	e7a3      	b.n	801cd00 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801cdb8:	b005      	add	sp, #20
 801cdba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801cdc0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdc4:	b085      	sub	sp, #20
 801cdc6:	468b      	mov	fp, r1
 801cdc8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cdca:	9203      	str	r2, [sp, #12]
 801cdcc:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801cdd0:	6861      	ldr	r1, [r4, #4]
 801cdd2:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 801cdd6:	fb01 2000 	mla	r0, r1, r0, r2
 801cdda:	6822      	ldr	r2, [r4, #0]
 801cddc:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801cde0:	f8d9 2000 	ldr.w	r2, [r9]
 801cde4:	9200      	str	r2, [sp, #0]
 801cde6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cdea:	f1bb 0f00 	cmp.w	fp, #0
 801cdee:	dc03      	bgt.n	801cdf8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801cdf0:	9a03      	ldr	r2, [sp, #12]
 801cdf2:	2a00      	cmp	r2, #0
 801cdf4:	f340 8154 	ble.w	801d0a0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801cdf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cdfa:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801cdfe:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801ce02:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ce06:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ce08:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ce0c:	2b00      	cmp	r3, #0
 801ce0e:	dd0e      	ble.n	801ce2e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ce10:	140c      	asrs	r4, r1, #16
 801ce12:	d405      	bmi.n	801ce20 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ce14:	42bc      	cmp	r4, r7
 801ce16:	da03      	bge.n	801ce20 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ce18:	1414      	asrs	r4, r2, #16
 801ce1a:	d401      	bmi.n	801ce20 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ce1c:	42b4      	cmp	r4, r6
 801ce1e:	db07      	blt.n	801ce30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ce20:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ce22:	4421      	add	r1, r4
 801ce24:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ce26:	3b01      	subs	r3, #1
 801ce28:	4422      	add	r2, r4
 801ce2a:	3002      	adds	r0, #2
 801ce2c:	e7ee      	b.n	801ce0c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ce2e:	d017      	beq.n	801ce60 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ce30:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ce32:	1e5c      	subs	r4, r3, #1
 801ce34:	fb05 1504 	mla	r5, r5, r4, r1
 801ce38:	142d      	asrs	r5, r5, #16
 801ce3a:	d409      	bmi.n	801ce50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ce3c:	42bd      	cmp	r5, r7
 801ce3e:	da07      	bge.n	801ce50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ce40:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ce42:	fb05 2404 	mla	r4, r5, r4, r2
 801ce46:	1424      	asrs	r4, r4, #16
 801ce48:	d402      	bmi.n	801ce50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ce4a:	42b4      	cmp	r4, r6
 801ce4c:	f2c0 80c0 	blt.w	801cfd0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801ce50:	2700      	movs	r7, #0
 801ce52:	19dc      	adds	r4, r3, r7
 801ce54:	2c00      	cmp	r4, #0
 801ce56:	dc3e      	bgt.n	801ced6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801ce58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ce5c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ce60:	f1bb 0f00 	cmp.w	fp, #0
 801ce64:	f340 811c 	ble.w	801d0a0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801ce68:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ce6c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ce70:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ce74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ce76:	f1bb 0b01 	subs.w	fp, fp, #1
 801ce7a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ce7e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ce82:	eeb0 6a62 	vmov.f32	s12, s5
 801ce86:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ce8a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ce8e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ce92:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ce96:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ce9a:	eeb0 6a43 	vmov.f32	s12, s6
 801ce9e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cea2:	ee12 2a90 	vmov	r2, s5
 801cea6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ceaa:	fb92 f3f3 	sdiv	r3, r2, r3
 801ceae:	ee13 2a10 	vmov	r2, s6
 801ceb2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ceb6:	9311      	str	r3, [sp, #68]	; 0x44
 801ceb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ceba:	fb92 f3f3 	sdiv	r3, r2, r3
 801cebe:	9a03      	ldr	r2, [sp, #12]
 801cec0:	9312      	str	r3, [sp, #72]	; 0x48
 801cec2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801cec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cec8:	eeb0 3a67 	vmov.f32	s6, s15
 801cecc:	bf08      	it	eq
 801cece:	4613      	moveq	r3, r2
 801ced0:	eef0 2a47 	vmov.f32	s5, s14
 801ced4:	e789      	b.n	801cdea <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801ced6:	140e      	asrs	r6, r1, #16
 801ced8:	d461      	bmi.n	801cf9e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801ceda:	f8d9 5008 	ldr.w	r5, [r9, #8]
 801cede:	42b5      	cmp	r5, r6
 801cee0:	dd5d      	ble.n	801cf9e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801cee2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801cee6:	d45a      	bmi.n	801cf9e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801cee8:	f8d9 400c 	ldr.w	r4, [r9, #12]
 801ceec:	4564      	cmp	r4, ip
 801ceee:	dd56      	ble.n	801cf9e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801cef0:	b22d      	sxth	r5, r5
 801cef2:	fb0c 6505 	mla	r5, ip, r5, r6
 801cef6:	9c00      	ldr	r4, [sp, #0]
 801cef8:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 801cefc:	ea5f 6e14 	movs.w	lr, r4, lsr #24
 801cf00:	d04d      	beq.n	801cf9e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801cf02:	0a26      	lsrs	r6, r4, #8
 801cf04:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801cf08:	fa5f f58e 	uxtb.w	r5, lr
 801cf0c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801cf10:	9601      	str	r6, [sp, #4]
 801cf12:	d04a      	beq.n	801cfaa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801cf14:	f06f 0601 	mvn.w	r6, #1
 801cf18:	437e      	muls	r6, r7
 801cf1a:	fa1f fa85 	uxth.w	sl, r5
 801cf1e:	f830 8006 	ldrh.w	r8, [r0, r6]
 801cf22:	9602      	str	r6, [sp, #8]
 801cf24:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801cf28:	43ed      	mvns	r5, r5
 801cf2a:	fa5f fc8c 	uxtb.w	ip, ip
 801cf2e:	b2ed      	uxtb	r5, r5
 801cf30:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801cf34:	fb1c fc0a 	smulbb	ip, ip, sl
 801cf38:	fb0e cc05 	mla	ip, lr, r5, ip
 801cf3c:	b2e4      	uxtb	r4, r4
 801cf3e:	ea4f 0ee8 	mov.w	lr, r8, asr #3
 801cf42:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801cf46:	f89d 6004 	ldrb.w	r6, [sp, #4]
 801cf4a:	fa5f f888 	uxtb.w	r8, r8
 801cf4e:	fb14 f40a 	smulbb	r4, r4, sl
 801cf52:	fb08 4405 	mla	r4, r8, r5, r4
 801cf56:	b2a4      	uxth	r4, r4
 801cf58:	fa1f fc8c 	uxth.w	ip, ip
 801cf5c:	fb16 f60a 	smulbb	r6, r6, sl
 801cf60:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801cf64:	fb0e 6e05 	mla	lr, lr, r5, r6
 801cf68:	1c66      	adds	r6, r4, #1
 801cf6a:	f10c 0501 	add.w	r5, ip, #1
 801cf6e:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801cf72:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801cf76:	fa1f fe8e 	uxth.w	lr, lr
 801cf7a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801cf7e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801cf82:	ea4c 0c06 	orr.w	ip, ip, r6
 801cf86:	f10e 0601 	add.w	r6, lr, #1
 801cf8a:	eb06 261e 	add.w	r6, r6, lr, lsr #8
 801cf8e:	0976      	lsrs	r6, r6, #5
 801cf90:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801cf94:	9c02      	ldr	r4, [sp, #8]
 801cf96:	ea4c 0c06 	orr.w	ip, ip, r6
 801cf9a:	f820 c004 	strh.w	ip, [r0, r4]
 801cf9e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801cfa0:	4421      	add	r1, r4
 801cfa2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801cfa4:	3f01      	subs	r7, #1
 801cfa6:	4422      	add	r2, r4
 801cfa8:	e753      	b.n	801ce52 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801cfaa:	4e3f      	ldr	r6, [pc, #252]	; (801d0a8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>)
 801cfac:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801cfb0:	ea06 2c0c 	and.w	ip, r6, ip, lsl #8
 801cfb4:	ea4c 0c04 	orr.w	ip, ip, r4
 801cfb8:	9c01      	ldr	r4, [sp, #4]
 801cfba:	f06f 0501 	mvn.w	r5, #1
 801cfbe:	00e6      	lsls	r6, r4, #3
 801cfc0:	437d      	muls	r5, r7
 801cfc2:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 801cfc6:	ea4c 0c04 	orr.w	ip, ip, r4
 801cfca:	f820 c005 	strh.w	ip, [r0, r5]
 801cfce:	e7e6      	b.n	801cf9e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801cfd0:	f04f 0800 	mov.w	r8, #0
 801cfd4:	eba3 0408 	sub.w	r4, r3, r8
 801cfd8:	2c00      	cmp	r4, #0
 801cfda:	f77f af3d 	ble.w	801ce58 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801cfde:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801cfe2:	140d      	asrs	r5, r1, #16
 801cfe4:	1414      	asrs	r4, r2, #16
 801cfe6:	fb06 5404 	mla	r4, r6, r4, r5
 801cfea:	9d00      	ldr	r5, [sp, #0]
 801cfec:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 801cff0:	ea5f 6c14 	movs.w	ip, r4, lsr #24
 801cff4:	d042      	beq.n	801d07c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801cff6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801cffa:	fa5f f58c 	uxtb.w	r5, ip
 801cffe:	ea4f 4714 	mov.w	r7, r4, lsr #16
 801d002:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801d006:	d040      	beq.n	801d08a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801d008:	f830 e018 	ldrh.w	lr, [r0, r8, lsl #1]
 801d00c:	fa1f fa85 	uxth.w	sl, r5
 801d010:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801d014:	43ed      	mvns	r5, r5
 801d016:	b2ff      	uxtb	r7, r7
 801d018:	b2ed      	uxtb	r5, r5
 801d01a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d01e:	fb17 f70a 	smulbb	r7, r7, sl
 801d022:	fb0c 7705 	mla	r7, ip, r5, r7
 801d026:	b2e4      	uxtb	r4, r4
 801d028:	ea4f 0cee 	mov.w	ip, lr, asr #3
 801d02c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d030:	fa5f fe8e 	uxtb.w	lr, lr
 801d034:	fb14 f40a 	smulbb	r4, r4, sl
 801d038:	fb0e 4405 	mla	r4, lr, r5, r4
 801d03c:	b2f6      	uxtb	r6, r6
 801d03e:	b2bf      	uxth	r7, r7
 801d040:	fb16 f60a 	smulbb	r6, r6, sl
 801d044:	b2a4      	uxth	r4, r4
 801d046:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801d04a:	fb0c 6c05 	mla	ip, ip, r5, r6
 801d04e:	1c7d      	adds	r5, r7, #1
 801d050:	1c66      	adds	r6, r4, #1
 801d052:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801d056:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801d05a:	fa1f fc8c 	uxth.w	ip, ip
 801d05e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801d062:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801d066:	4337      	orrs	r7, r6
 801d068:	f10c 0601 	add.w	r6, ip, #1
 801d06c:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801d070:	0976      	lsrs	r6, r6, #5
 801d072:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d076:	4337      	orrs	r7, r6
 801d078:	f820 7018 	strh.w	r7, [r0, r8, lsl #1]
 801d07c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d07e:	4421      	add	r1, r4
 801d080:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d082:	f108 0801 	add.w	r8, r8, #1
 801d086:	4422      	add	r2, r4
 801d088:	e7a4      	b.n	801cfd4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801d08a:	4d07      	ldr	r5, [pc, #28]	; (801d0a8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>)
 801d08c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801d090:	ea05 2707 	and.w	r7, r5, r7, lsl #8
 801d094:	00f6      	lsls	r6, r6, #3
 801d096:	4327      	orrs	r7, r4
 801d098:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 801d09c:	4327      	orrs	r7, r4
 801d09e:	e7eb      	b.n	801d078 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801d0a0:	b005      	add	sp, #20
 801d0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0a6:	bf00      	nop
 801d0a8:	fffff800 	.word	0xfffff800

0801d0ac <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0b0:	b087      	sub	sp, #28
 801d0b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d0b6:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d0b8:	9204      	str	r2, [sp, #16]
 801d0ba:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801d0be:	9205      	str	r2, [sp, #20]
 801d0c0:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801d0c4:	9101      	str	r1, [sp, #4]
 801d0c6:	6841      	ldr	r1, [r0, #4]
 801d0c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801d0cc:	fb01 2404 	mla	r4, r1, r4, r2
 801d0d0:	6802      	ldr	r2, [r0, #0]
 801d0d2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d0d6:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801d0da:	3201      	adds	r2, #1
 801d0dc:	f022 0201 	bic.w	r2, r2, #1
 801d0e0:	9202      	str	r2, [sp, #8]
 801d0e2:	f8d8 2000 	ldr.w	r2, [r8]
 801d0e6:	9203      	str	r2, [sp, #12]
 801d0e8:	9a01      	ldr	r2, [sp, #4]
 801d0ea:	2a00      	cmp	r2, #0
 801d0ec:	dc03      	bgt.n	801d0f6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d0ee:	9a04      	ldr	r2, [sp, #16]
 801d0f0:	2a00      	cmp	r2, #0
 801d0f2:	f340 814d 	ble.w	801d390 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801d0f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d0f8:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801d0fc:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801d100:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d104:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d106:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d10a:	2b00      	cmp	r3, #0
 801d10c:	dd0e      	ble.n	801d12c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801d10e:	1402      	asrs	r2, r0, #16
 801d110:	d405      	bmi.n	801d11e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d112:	42ba      	cmp	r2, r7
 801d114:	da03      	bge.n	801d11e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d116:	140a      	asrs	r2, r1, #16
 801d118:	d401      	bmi.n	801d11e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d11a:	42b2      	cmp	r2, r6
 801d11c:	db07      	blt.n	801d12e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801d11e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d120:	4410      	add	r0, r2
 801d122:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d124:	3b01      	subs	r3, #1
 801d126:	4411      	add	r1, r2
 801d128:	3402      	adds	r4, #2
 801d12a:	e7ee      	b.n	801d10a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801d12c:	d019      	beq.n	801d162 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801d12e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d130:	1e5a      	subs	r2, r3, #1
 801d132:	fb05 0502 	mla	r5, r5, r2, r0
 801d136:	142d      	asrs	r5, r5, #16
 801d138:	d409      	bmi.n	801d14e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801d13a:	42bd      	cmp	r5, r7
 801d13c:	da07      	bge.n	801d14e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801d13e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801d140:	fb05 1202 	mla	r2, r5, r2, r1
 801d144:	1412      	asrs	r2, r2, #16
 801d146:	d402      	bmi.n	801d14e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801d148:	42b2      	cmp	r2, r6
 801d14a:	f2c0 80b7 	blt.w	801d2bc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801d14e:	f04f 0c00 	mov.w	ip, #0
 801d152:	eb03 020c 	add.w	r2, r3, ip
 801d156:	2a00      	cmp	r2, #0
 801d158:	dc3f      	bgt.n	801d1da <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 801d15a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d15e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d162:	9b01      	ldr	r3, [sp, #4]
 801d164:	2b00      	cmp	r3, #0
 801d166:	f340 8113 	ble.w	801d390 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801d16a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d16e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d172:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d176:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d178:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d17c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d180:	eeb0 6a62 	vmov.f32	s12, s5
 801d184:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d188:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d18c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d190:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d194:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d198:	eeb0 6a43 	vmov.f32	s12, s6
 801d19c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d1a0:	ee12 2a90 	vmov	r2, s5
 801d1a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d1a8:	fb92 f3f3 	sdiv	r3, r2, r3
 801d1ac:	ee13 2a10 	vmov	r2, s6
 801d1b0:	9313      	str	r3, [sp, #76]	; 0x4c
 801d1b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d1b4:	fb92 f3f3 	sdiv	r3, r2, r3
 801d1b8:	9314      	str	r3, [sp, #80]	; 0x50
 801d1ba:	9b01      	ldr	r3, [sp, #4]
 801d1bc:	9a04      	ldr	r2, [sp, #16]
 801d1be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d1c2:	3b01      	subs	r3, #1
 801d1c4:	9301      	str	r3, [sp, #4]
 801d1c6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d1ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d1cc:	eeb0 3a67 	vmov.f32	s6, s15
 801d1d0:	bf08      	it	eq
 801d1d2:	4613      	moveq	r3, r2
 801d1d4:	eef0 2a47 	vmov.f32	s5, s14
 801d1d8:	e786      	b.n	801d0e8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d1da:	1405      	asrs	r5, r0, #16
 801d1dc:	d467      	bmi.n	801d2ae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801d1de:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801d1e2:	42aa      	cmp	r2, r5
 801d1e4:	dd63      	ble.n	801d2ae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801d1e6:	140e      	asrs	r6, r1, #16
 801d1e8:	d461      	bmi.n	801d2ae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801d1ea:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801d1ee:	42b2      	cmp	r2, r6
 801d1f0:	dd5d      	ble.n	801d2ae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801d1f2:	9a02      	ldr	r2, [sp, #8]
 801d1f4:	fb06 5502 	mla	r5, r6, r2, r5
 801d1f8:	086a      	lsrs	r2, r5, #1
 801d1fa:	9e03      	ldr	r6, [sp, #12]
 801d1fc:	5cb2      	ldrb	r2, [r6, r2]
 801d1fe:	07ee      	lsls	r6, r5, #31
 801d200:	bf54      	ite	pl
 801d202:	f002 020f 	andpl.w	r2, r2, #15
 801d206:	1112      	asrmi	r2, r2, #4
 801d208:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d20c:	b2d2      	uxtb	r2, r2
 801d20e:	2a00      	cmp	r2, #0
 801d210:	d04d      	beq.n	801d2ae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801d212:	f06f 0601 	mvn.w	r6, #1
 801d216:	fb06 fb0c 	mul.w	fp, r6, ip
 801d21a:	9e05      	ldr	r6, [sp, #20]
 801d21c:	4d5e      	ldr	r5, [pc, #376]	; (801d398 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801d21e:	f834 e00b 	ldrh.w	lr, [r4, fp]
 801d222:	682d      	ldr	r5, [r5, #0]
 801d224:	4372      	muls	r2, r6
 801d226:	1c56      	adds	r6, r2, #1
 801d228:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d22c:	1212      	asrs	r2, r2, #8
 801d22e:	0a2f      	lsrs	r7, r5, #8
 801d230:	fa1f fa82 	uxth.w	sl, r2
 801d234:	ea4f 262e 	mov.w	r6, lr, asr #8
 801d238:	43d2      	mvns	r2, r2
 801d23a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d23e:	b2d2      	uxtb	r2, r2
 801d240:	fb17 f70a 	smulbb	r7, r7, sl
 801d244:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 801d248:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d24c:	fb06 7602 	mla	r6, r6, r2, r7
 801d250:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801d254:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801d258:	fb19 f90a 	smulbb	r9, r9, sl
 801d25c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d260:	00ed      	lsls	r5, r5, #3
 801d262:	fb07 9702 	mla	r7, r7, r2, r9
 801d266:	b2ed      	uxtb	r5, r5
 801d268:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d26c:	b2bf      	uxth	r7, r7
 801d26e:	fa5f fe8e 	uxtb.w	lr, lr
 801d272:	fb15 f50a 	smulbb	r5, r5, sl
 801d276:	b2b6      	uxth	r6, r6
 801d278:	fb0e 5502 	mla	r5, lr, r2, r5
 801d27c:	f107 0901 	add.w	r9, r7, #1
 801d280:	b2ad      	uxth	r5, r5
 801d282:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801d286:	f106 0901 	add.w	r9, r6, #1
 801d28a:	097f      	lsrs	r7, r7, #5
 801d28c:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 801d290:	f105 0e01 	add.w	lr, r5, #1
 801d294:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801d298:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801d29c:	eb0e 2e15 	add.w	lr, lr, r5, lsr #8
 801d2a0:	4337      	orrs	r7, r6
 801d2a2:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801d2a6:	ea47 070e 	orr.w	r7, r7, lr
 801d2aa:	f824 700b 	strh.w	r7, [r4, fp]
 801d2ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d2b0:	4410      	add	r0, r2
 801d2b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d2b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d2b8:	4411      	add	r1, r2
 801d2ba:	e74a      	b.n	801d152 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801d2bc:	f04f 0e00 	mov.w	lr, #0
 801d2c0:	eba3 020e 	sub.w	r2, r3, lr
 801d2c4:	2a00      	cmp	r2, #0
 801d2c6:	f77f af48 	ble.w	801d15a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801d2ca:	9e02      	ldr	r6, [sp, #8]
 801d2cc:	1402      	asrs	r2, r0, #16
 801d2ce:	140d      	asrs	r5, r1, #16
 801d2d0:	fb06 2505 	mla	r5, r6, r5, r2
 801d2d4:	086a      	lsrs	r2, r5, #1
 801d2d6:	9e03      	ldr	r6, [sp, #12]
 801d2d8:	5cb2      	ldrb	r2, [r6, r2]
 801d2da:	07ed      	lsls	r5, r5, #31
 801d2dc:	bf54      	ite	pl
 801d2de:	f002 020f 	andpl.w	r2, r2, #15
 801d2e2:	1112      	asrmi	r2, r2, #4
 801d2e4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d2e8:	b2d2      	uxtb	r2, r2
 801d2ea:	2a00      	cmp	r2, #0
 801d2ec:	d049      	beq.n	801d382 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801d2ee:	9e05      	ldr	r6, [sp, #20]
 801d2f0:	4d29      	ldr	r5, [pc, #164]	; (801d398 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801d2f2:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801d2f6:	682d      	ldr	r5, [r5, #0]
 801d2f8:	4372      	muls	r2, r6
 801d2fa:	1c56      	adds	r6, r2, #1
 801d2fc:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d300:	1212      	asrs	r2, r2, #8
 801d302:	0a2f      	lsrs	r7, r5, #8
 801d304:	fa1f fa82 	uxth.w	sl, r2
 801d308:	ea4f 262c 	mov.w	r6, ip, asr #8
 801d30c:	43d2      	mvns	r2, r2
 801d30e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d312:	b2d2      	uxtb	r2, r2
 801d314:	fb17 f70a 	smulbb	r7, r7, sl
 801d318:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 801d31c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d320:	fb06 7602 	mla	r6, r6, r2, r7
 801d324:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801d328:	ea4f 07ec 	mov.w	r7, ip, asr #3
 801d32c:	fb19 f90a 	smulbb	r9, r9, sl
 801d330:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d334:	00ed      	lsls	r5, r5, #3
 801d336:	fb07 9702 	mla	r7, r7, r2, r9
 801d33a:	b2ed      	uxtb	r5, r5
 801d33c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d340:	b2bf      	uxth	r7, r7
 801d342:	fa5f fc8c 	uxtb.w	ip, ip
 801d346:	fb15 f50a 	smulbb	r5, r5, sl
 801d34a:	b2b6      	uxth	r6, r6
 801d34c:	fb0c 5502 	mla	r5, ip, r2, r5
 801d350:	f107 0901 	add.w	r9, r7, #1
 801d354:	b2ad      	uxth	r5, r5
 801d356:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801d35a:	f106 0b01 	add.w	fp, r6, #1
 801d35e:	097f      	lsrs	r7, r7, #5
 801d360:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 801d364:	f105 0c01 	add.w	ip, r5, #1
 801d368:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801d36c:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801d370:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801d374:	4337      	orrs	r7, r6
 801d376:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d37a:	ea47 070c 	orr.w	r7, r7, ip
 801d37e:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801d382:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d384:	4410      	add	r0, r2
 801d386:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d388:	f10e 0e01 	add.w	lr, lr, #1
 801d38c:	4411      	add	r1, r2
 801d38e:	e797      	b.n	801d2c0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801d390:	b007      	add	sp, #28
 801d392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d396:	bf00      	nop
 801d398:	2000a0f8 	.word	0x2000a0f8

0801d39c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3a0:	b087      	sub	sp, #28
 801d3a2:	468b      	mov	fp, r1
 801d3a4:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d3a6:	9205      	str	r2, [sp, #20]
 801d3a8:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801d3ac:	6841      	ldr	r1, [r0, #4]
 801d3ae:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801d3b2:	fb01 2404 	mla	r4, r1, r4, r2
 801d3b6:	6802      	ldr	r2, [r0, #0]
 801d3b8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d3bc:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801d3c0:	3201      	adds	r2, #1
 801d3c2:	f022 0201 	bic.w	r2, r2, #1
 801d3c6:	9201      	str	r2, [sp, #4]
 801d3c8:	f8d8 2000 	ldr.w	r2, [r8]
 801d3cc:	9202      	str	r2, [sp, #8]
 801d3ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d3d2:	f1bb 0f00 	cmp.w	fp, #0
 801d3d6:	dc03      	bgt.n	801d3e0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801d3d8:	9a05      	ldr	r2, [sp, #20]
 801d3da:	2a00      	cmp	r2, #0
 801d3dc:	f340 8156 	ble.w	801d68c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801d3e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d3e2:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801d3e6:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801d3ea:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d3ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d3f0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d3f4:	2b00      	cmp	r3, #0
 801d3f6:	dd0e      	ble.n	801d416 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d3f8:	1402      	asrs	r2, r0, #16
 801d3fa:	d405      	bmi.n	801d408 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d3fc:	42ba      	cmp	r2, r7
 801d3fe:	da03      	bge.n	801d408 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d400:	140a      	asrs	r2, r1, #16
 801d402:	d401      	bmi.n	801d408 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d404:	42b2      	cmp	r2, r6
 801d406:	db07      	blt.n	801d418 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d408:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d40a:	4410      	add	r0, r2
 801d40c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d40e:	3b01      	subs	r3, #1
 801d410:	4411      	add	r1, r2
 801d412:	3402      	adds	r4, #2
 801d414:	e7ee      	b.n	801d3f4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801d416:	d017      	beq.n	801d448 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 801d418:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d41a:	1e5a      	subs	r2, r3, #1
 801d41c:	fb05 0502 	mla	r5, r5, r2, r0
 801d420:	142d      	asrs	r5, r5, #16
 801d422:	d409      	bmi.n	801d438 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801d424:	42bd      	cmp	r5, r7
 801d426:	da07      	bge.n	801d438 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801d428:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801d42a:	fb05 1202 	mla	r2, r5, r2, r1
 801d42e:	1412      	asrs	r2, r2, #16
 801d430:	d402      	bmi.n	801d438 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801d432:	42b2      	cmp	r2, r6
 801d434:	f2c0 80be 	blt.w	801d5b4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801d438:	2600      	movs	r6, #0
 801d43a:	199a      	adds	r2, r3, r6
 801d43c:	2a00      	cmp	r2, #0
 801d43e:	dc3e      	bgt.n	801d4be <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801d440:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d444:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d448:	f1bb 0f00 	cmp.w	fp, #0
 801d44c:	f340 811e 	ble.w	801d68c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801d450:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d454:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d458:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d45c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d45e:	f1bb 0b01 	subs.w	fp, fp, #1
 801d462:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d466:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d46a:	eeb0 6a62 	vmov.f32	s12, s5
 801d46e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d472:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d476:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d47a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d47e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d482:	eeb0 6a43 	vmov.f32	s12, s6
 801d486:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d48a:	ee12 2a90 	vmov	r2, s5
 801d48e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d492:	fb92 f3f3 	sdiv	r3, r2, r3
 801d496:	ee13 2a10 	vmov	r2, s6
 801d49a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d49e:	9313      	str	r3, [sp, #76]	; 0x4c
 801d4a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d4a2:	fb92 f3f3 	sdiv	r3, r2, r3
 801d4a6:	9a05      	ldr	r2, [sp, #20]
 801d4a8:	9314      	str	r3, [sp, #80]	; 0x50
 801d4aa:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d4ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d4b0:	eeb0 3a67 	vmov.f32	s6, s15
 801d4b4:	bf08      	it	eq
 801d4b6:	4613      	moveq	r3, r2
 801d4b8:	eef0 2a47 	vmov.f32	s5, s14
 801d4bc:	e789      	b.n	801d3d2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801d4be:	1405      	asrs	r5, r0, #16
 801d4c0:	d465      	bmi.n	801d58e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801d4c2:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801d4c6:	42aa      	cmp	r2, r5
 801d4c8:	dd61      	ble.n	801d58e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801d4ca:	140f      	asrs	r7, r1, #16
 801d4cc:	d45f      	bmi.n	801d58e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801d4ce:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801d4d2:	42ba      	cmp	r2, r7
 801d4d4:	dd5b      	ble.n	801d58e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801d4d6:	9a01      	ldr	r2, [sp, #4]
 801d4d8:	fb07 5502 	mla	r5, r7, r2, r5
 801d4dc:	086a      	lsrs	r2, r5, #1
 801d4de:	9f02      	ldr	r7, [sp, #8]
 801d4e0:	5cba      	ldrb	r2, [r7, r2]
 801d4e2:	07ef      	lsls	r7, r5, #31
 801d4e4:	bf54      	ite	pl
 801d4e6:	f002 020f 	andpl.w	r2, r2, #15
 801d4ea:	1112      	asrmi	r2, r2, #4
 801d4ec:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d4f0:	b2d2      	uxtb	r2, r2
 801d4f2:	2a00      	cmp	r2, #0
 801d4f4:	d04b      	beq.n	801d58e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801d4f6:	4d67      	ldr	r5, [pc, #412]	; (801d694 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>)
 801d4f8:	682f      	ldr	r7, [r5, #0]
 801d4fa:	08fd      	lsrs	r5, r7, #3
 801d4fc:	ea4f 2917 	mov.w	r9, r7, lsr #8
 801d500:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d504:	00ff      	lsls	r7, r7, #3
 801d506:	2aff      	cmp	r2, #255	; 0xff
 801d508:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801d50c:	9503      	str	r5, [sp, #12]
 801d50e:	b2ff      	uxtb	r7, r7
 801d510:	d043      	beq.n	801d59a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801d512:	f06f 0501 	mvn.w	r5, #1
 801d516:	4375      	muls	r5, r6
 801d518:	fa1f fa82 	uxth.w	sl, r2
 801d51c:	f834 e005 	ldrh.w	lr, [r4, r5]
 801d520:	9504      	str	r5, [sp, #16]
 801d522:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801d526:	43d2      	mvns	r2, r2
 801d528:	b2d2      	uxtb	r2, r2
 801d52a:	fb19 f90a 	smulbb	r9, r9, sl
 801d52e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d532:	9d03      	ldr	r5, [sp, #12]
 801d534:	fb0c 9c02 	mla	ip, ip, r2, r9
 801d538:	ea4f 09ee 	mov.w	r9, lr, asr #3
 801d53c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801d540:	fb15 f50a 	smulbb	r5, r5, sl
 801d544:	fb09 5502 	mla	r5, r9, r2, r5
 801d548:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d54c:	b2ad      	uxth	r5, r5
 801d54e:	fa5f fe8e 	uxtb.w	lr, lr
 801d552:	fb17 f70a 	smulbb	r7, r7, sl
 801d556:	fa1f fc8c 	uxth.w	ip, ip
 801d55a:	fb0e 7702 	mla	r7, lr, r2, r7
 801d55e:	f105 0901 	add.w	r9, r5, #1
 801d562:	b2bf      	uxth	r7, r7
 801d564:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801d568:	f10c 0901 	add.w	r9, ip, #1
 801d56c:	1c7a      	adds	r2, r7, #1
 801d56e:	096d      	lsrs	r5, r5, #5
 801d570:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801d574:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801d578:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d57c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d580:	ea45 050c 	orr.w	r5, r5, ip
 801d584:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d588:	9a04      	ldr	r2, [sp, #16]
 801d58a:	433d      	orrs	r5, r7
 801d58c:	52a5      	strh	r5, [r4, r2]
 801d58e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d590:	4410      	add	r0, r2
 801d592:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d594:	3e01      	subs	r6, #1
 801d596:	4411      	add	r1, r2
 801d598:	e74f      	b.n	801d43a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d59a:	f06f 0201 	mvn.w	r2, #1
 801d59e:	fb02 fe06 	mul.w	lr, r2, r6
 801d5a2:	9a03      	ldr	r2, [sp, #12]
 801d5a4:	00d5      	lsls	r5, r2, #3
 801d5a6:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801d5aa:	ea45 05d7 	orr.w	r5, r5, r7, lsr #3
 801d5ae:	f824 500e 	strh.w	r5, [r4, lr]
 801d5b2:	e7ec      	b.n	801d58e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801d5b4:	f04f 0e00 	mov.w	lr, #0
 801d5b8:	eba3 020e 	sub.w	r2, r3, lr
 801d5bc:	2a00      	cmp	r2, #0
 801d5be:	f77f af3f 	ble.w	801d440 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801d5c2:	9e01      	ldr	r6, [sp, #4]
 801d5c4:	1402      	asrs	r2, r0, #16
 801d5c6:	140d      	asrs	r5, r1, #16
 801d5c8:	fb06 2505 	mla	r5, r6, r5, r2
 801d5cc:	086a      	lsrs	r2, r5, #1
 801d5ce:	9e02      	ldr	r6, [sp, #8]
 801d5d0:	5cb2      	ldrb	r2, [r6, r2]
 801d5d2:	07ed      	lsls	r5, r5, #31
 801d5d4:	bf54      	ite	pl
 801d5d6:	f002 020f 	andpl.w	r2, r2, #15
 801d5da:	1112      	asrmi	r2, r2, #4
 801d5dc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d5e0:	b2d2      	uxtb	r2, r2
 801d5e2:	2a00      	cmp	r2, #0
 801d5e4:	d045      	beq.n	801d672 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801d5e6:	4d2b      	ldr	r5, [pc, #172]	; (801d694 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>)
 801d5e8:	682e      	ldr	r6, [r5, #0]
 801d5ea:	2aff      	cmp	r2, #255	; 0xff
 801d5ec:	ea4f 2916 	mov.w	r9, r6, lsr #8
 801d5f0:	ea4f 05d6 	mov.w	r5, r6, lsr #3
 801d5f4:	ea4f 06c6 	mov.w	r6, r6, lsl #3
 801d5f8:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801d5fc:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d600:	b2f6      	uxtb	r6, r6
 801d602:	d03d      	beq.n	801d680 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801d604:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801d608:	fa1f fa82 	uxth.w	sl, r2
 801d60c:	ea4f 272c 	mov.w	r7, ip, asr #8
 801d610:	43d2      	mvns	r2, r2
 801d612:	b2d2      	uxtb	r2, r2
 801d614:	fb19 f90a 	smulbb	r9, r9, sl
 801d618:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d61c:	fb07 9702 	mla	r7, r7, r2, r9
 801d620:	ea4f 09ec 	mov.w	r9, ip, asr #3
 801d624:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801d628:	fb15 f50a 	smulbb	r5, r5, sl
 801d62c:	fb09 5502 	mla	r5, r9, r2, r5
 801d630:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d634:	b2ad      	uxth	r5, r5
 801d636:	fa5f fc8c 	uxtb.w	ip, ip
 801d63a:	fb16 f60a 	smulbb	r6, r6, sl
 801d63e:	b2bf      	uxth	r7, r7
 801d640:	fb0c 6602 	mla	r6, ip, r2, r6
 801d644:	f105 0901 	add.w	r9, r5, #1
 801d648:	b2b6      	uxth	r6, r6
 801d64a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801d64e:	f107 0901 	add.w	r9, r7, #1
 801d652:	096d      	lsrs	r5, r5, #5
 801d654:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801d658:	1c72      	adds	r2, r6, #1
 801d65a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d65e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801d662:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801d666:	433d      	orrs	r5, r7
 801d668:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801d66c:	4335      	orrs	r5, r6
 801d66e:	f824 501e 	strh.w	r5, [r4, lr, lsl #1]
 801d672:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d674:	4410      	add	r0, r2
 801d676:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d678:	f10e 0e01 	add.w	lr, lr, #1
 801d67c:	4411      	add	r1, r2
 801d67e:	e79b      	b.n	801d5b8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 801d680:	00ed      	lsls	r5, r5, #3
 801d682:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801d686:	ea45 05d6 	orr.w	r5, r5, r6, lsr #3
 801d68a:	e7f0      	b.n	801d66e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 801d68c:	b007      	add	sp, #28
 801d68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d692:	bf00      	nop
 801d694:	2000a0f8 	.word	0x2000a0f8

0801d698 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801d698:	4770      	bx	lr

0801d69a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801d69a:	4770      	bx	lr

0801d69c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801d69c:	4770      	bx	lr

0801d69e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801d69e:	4770      	bx	lr

0801d6a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d6a0:	4770      	bx	lr

0801d6a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d6a2:	4770      	bx	lr

0801d6a4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d6a4:	4770      	bx	lr

0801d6a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d6a6:	4770      	bx	lr

0801d6a8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d6a8:	4770      	bx	lr

0801d6aa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801d6aa:	4770      	bx	lr

0801d6ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d6ac:	4770      	bx	lr

0801d6ae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d6ae:	4770      	bx	lr

0801d6b0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d6b0:	4770      	bx	lr

0801d6b2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801d6b2:	4770      	bx	lr

0801d6b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d6b4:	4770      	bx	lr

0801d6b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d6b6:	4770      	bx	lr

0801d6b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d6b8:	4770      	bx	lr

0801d6ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d6ba:	4770      	bx	lr

0801d6bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d6bc:	4770      	bx	lr

0801d6be <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d6be:	4770      	bx	lr

0801d6c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d6c0:	4770      	bx	lr

0801d6c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d6c2:	4770      	bx	lr

0801d6c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d6c4:	4770      	bx	lr

0801d6c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d6c6:	4770      	bx	lr

0801d6c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d6c8:	4770      	bx	lr

0801d6ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801d6ca:	4770      	bx	lr

0801d6cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d6cc:	4770      	bx	lr

0801d6ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801d6ce:	4770      	bx	lr

0801d6d0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801d6d0:	b508      	push	{r3, lr}
 801d6d2:	4b06      	ldr	r3, [pc, #24]	; (801d6ec <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 801d6d4:	8818      	ldrh	r0, [r3, #0]
 801d6d6:	b928      	cbnz	r0, 801d6e4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 801d6d8:	4b05      	ldr	r3, [pc, #20]	; (801d6f0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 801d6da:	4a06      	ldr	r2, [pc, #24]	; (801d6f4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 801d6dc:	4806      	ldr	r0, [pc, #24]	; (801d6f8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 801d6de:	2154      	movs	r1, #84	; 0x54
 801d6e0:	f009 faa0 	bl	8026c24 <__assert_func>
 801d6e4:	0040      	lsls	r0, r0, #1
 801d6e6:	b280      	uxth	r0, r0
 801d6e8:	bd08      	pop	{r3, pc}
 801d6ea:	bf00      	nop
 801d6ec:	2000a0ea 	.word	0x2000a0ea
 801d6f0:	0802c8d1 	.word	0x0802c8d1
 801d6f4:	0802ce5b 	.word	0x0802ce5b
 801d6f8:	0802c913 	.word	0x0802c913

0801d6fc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801d6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d700:	b08b      	sub	sp, #44	; 0x2c
 801d702:	460f      	mov	r7, r1
 801d704:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801d708:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801d70c:	4616      	mov	r6, r2
 801d70e:	f1bb 0f00 	cmp.w	fp, #0
 801d712:	d046      	beq.n	801d7a2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801d714:	6810      	ldr	r0, [r2, #0]
 801d716:	6851      	ldr	r1, [r2, #4]
 801d718:	ad06      	add	r5, sp, #24
 801d71a:	c503      	stmia	r5!, {r0, r1}
 801d71c:	6818      	ldr	r0, [r3, #0]
 801d71e:	6859      	ldr	r1, [r3, #4]
 801d720:	ad08      	add	r5, sp, #32
 801d722:	c503      	stmia	r5!, {r0, r1}
 801d724:	a806      	add	r0, sp, #24
 801d726:	f7fa f9d7 	bl	8017ad8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d72a:	4631      	mov	r1, r6
 801d72c:	a808      	add	r0, sp, #32
 801d72e:	f7fa f9bb 	bl	8017aa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d732:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801d736:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801d73a:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801d73e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801d742:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801d746:	fb16 2103 	smlabb	r1, r6, r3, r2
 801d74a:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801d74e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801d752:	4f5d      	ldr	r7, [pc, #372]	; (801d8c8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 801d754:	440a      	add	r2, r1
 801d756:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d75a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801d75e:	6838      	ldr	r0, [r7, #0]
 801d760:	4413      	add	r3, r2
 801d762:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801d766:	6803      	ldr	r3, [r0, #0]
 801d768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d76a:	4798      	blx	r3
 801d76c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801d770:	46b9      	mov	r9, r7
 801d772:	d019      	beq.n	801d7a8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801d774:	f010 0f04 	tst.w	r0, #4
 801d778:	d01a      	beq.n	801d7b0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801d77a:	f8d9 0000 	ldr.w	r0, [r9]
 801d77e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801d782:	6801      	ldr	r1, [r0, #0]
 801d784:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d788:	e9cd b403 	strd	fp, r4, [sp, #12]
 801d78c:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801d790:	9402      	str	r4, [sp, #8]
 801d792:	b2ad      	uxth	r5, r5
 801d794:	fa1f f488 	uxth.w	r4, r8
 801d798:	9501      	str	r5, [sp, #4]
 801d79a:	9400      	str	r4, [sp, #0]
 801d79c:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 801d79e:	4631      	mov	r1, r6
 801d7a0:	47a0      	blx	r4
 801d7a2:	b00b      	add	sp, #44	; 0x2c
 801d7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7a8:	b914      	cbnz	r4, 801d7b0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801d7aa:	f010 0f01 	tst.w	r0, #1
 801d7ae:	e7e3      	b.n	801d778 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801d7b0:	f8d9 0000 	ldr.w	r0, [r9]
 801d7b4:	6803      	ldr	r3, [r0, #0]
 801d7b6:	6a1b      	ldr	r3, [r3, #32]
 801d7b8:	4798      	blx	r3
 801d7ba:	4b44      	ldr	r3, [pc, #272]	; (801d8cc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d0>)
 801d7bc:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801d7c0:	881a      	ldrh	r2, [r3, #0]
 801d7c2:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801d7c6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801d7ca:	fb02 1404 	mla	r4, r2, r4, r1
 801d7ce:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801d7d2:	469a      	mov	sl, r3
 801d7d4:	fb05 f502 	mul.w	r5, r5, r2
 801d7d8:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801d7dc:	d058      	beq.n	801d890 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x194>
 801d7de:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801d7e2:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801d7e6:	fa1f f28b 	uxth.w	r2, fp
 801d7ea:	fa1f f989 	uxth.w	r9, r9
 801d7ee:	469e      	mov	lr, r3
 801d7f0:	42ac      	cmp	r4, r5
 801d7f2:	d263      	bcs.n	801d8bc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 801d7f4:	eb04 0a07 	add.w	sl, r4, r7
 801d7f8:	4554      	cmp	r4, sl
 801d7fa:	d23c      	bcs.n	801d876 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17a>
 801d7fc:	8821      	ldrh	r1, [r4, #0]
 801d7fe:	f836 3b02 	ldrh.w	r3, [r6], #2
 801d802:	1208      	asrs	r0, r1, #8
 801d804:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801d808:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801d80c:	fb10 f009 	smulbb	r0, r0, r9
 801d810:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801d814:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d818:	00c9      	lsls	r1, r1, #3
 801d81a:	fb0c 0c02 	mla	ip, ip, r2, r0
 801d81e:	b2c9      	uxtb	r1, r1
 801d820:	10d8      	asrs	r0, r3, #3
 801d822:	00db      	lsls	r3, r3, #3
 801d824:	fb11 f109 	smulbb	r1, r1, r9
 801d828:	b2db      	uxtb	r3, r3
 801d82a:	fa1f fc8c 	uxth.w	ip, ip
 801d82e:	fb03 1302 	mla	r3, r3, r2, r1
 801d832:	b29b      	uxth	r3, r3
 801d834:	f10c 0101 	add.w	r1, ip, #1
 801d838:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801d83c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 801d840:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801d844:	fb1b fb09 	smulbb	fp, fp, r9
 801d848:	1c59      	adds	r1, r3, #1
 801d84a:	fb00 b002 	mla	r0, r0, r2, fp
 801d84e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801d852:	b280      	uxth	r0, r0
 801d854:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801d858:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d85c:	ea4c 0c03 	orr.w	ip, ip, r3
 801d860:	1c43      	adds	r3, r0, #1
 801d862:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801d866:	0940      	lsrs	r0, r0, #5
 801d868:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801d86c:	ea4c 0c00 	orr.w	ip, ip, r0
 801d870:	f824 cb02 	strh.w	ip, [r4], #2
 801d874:	e7c0      	b.n	801d7f8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801d876:	f8be 3000 	ldrh.w	r3, [lr]
 801d87a:	eba3 0308 	sub.w	r3, r3, r8
 801d87e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d882:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801d886:	eba3 0308 	sub.w	r3, r3, r8
 801d88a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801d88e:	e7af      	b.n	801d7f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801d890:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801d894:	f8d9 0000 	ldr.w	r0, [r9]
 801d898:	42ac      	cmp	r4, r5
 801d89a:	6803      	ldr	r3, [r0, #0]
 801d89c:	d20e      	bcs.n	801d8bc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 801d89e:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
 801d8a2:	4632      	mov	r2, r6
 801d8a4:	463b      	mov	r3, r7
 801d8a6:	4621      	mov	r1, r4
 801d8a8:	47c0      	blx	r8
 801d8aa:	f8ba 3000 	ldrh.w	r3, [sl]
 801d8ae:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d8b2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801d8b6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801d8ba:	e7eb      	b.n	801d894 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>
 801d8bc:	4b02      	ldr	r3, [pc, #8]	; (801d8c8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 801d8be:	6818      	ldr	r0, [r3, #0]
 801d8c0:	6803      	ldr	r3, [r0, #0]
 801d8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d8c4:	4798      	blx	r3
 801d8c6:	e76c      	b.n	801d7a2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801d8c8:	2000a0f0 	.word	0x2000a0f0
 801d8cc:	2000a0ea 	.word	0x2000a0ea

0801d8d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d8d0:	b510      	push	{r4, lr}
 801d8d2:	2104      	movs	r1, #4
 801d8d4:	4604      	mov	r4, r0
 801d8d6:	f009 f87a 	bl	80269ce <_ZdlPvj>
 801d8da:	4620      	mov	r0, r4
 801d8dc:	bd10      	pop	{r4, pc}

0801d8de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801d8de:	b510      	push	{r4, lr}
 801d8e0:	2104      	movs	r1, #4
 801d8e2:	4604      	mov	r4, r0
 801d8e4:	f009 f873 	bl	80269ce <_ZdlPvj>
 801d8e8:	4620      	mov	r0, r4
 801d8ea:	bd10      	pop	{r4, pc}

0801d8ec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d8ec:	b510      	push	{r4, lr}
 801d8ee:	2104      	movs	r1, #4
 801d8f0:	4604      	mov	r4, r0
 801d8f2:	f009 f86c 	bl	80269ce <_ZdlPvj>
 801d8f6:	4620      	mov	r0, r4
 801d8f8:	bd10      	pop	{r4, pc}

0801d8fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801d8fa:	b510      	push	{r4, lr}
 801d8fc:	2104      	movs	r1, #4
 801d8fe:	4604      	mov	r4, r0
 801d900:	f009 f865 	bl	80269ce <_ZdlPvj>
 801d904:	4620      	mov	r0, r4
 801d906:	bd10      	pop	{r4, pc}

0801d908 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d908:	b510      	push	{r4, lr}
 801d90a:	2104      	movs	r1, #4
 801d90c:	4604      	mov	r4, r0
 801d90e:	f009 f85e 	bl	80269ce <_ZdlPvj>
 801d912:	4620      	mov	r0, r4
 801d914:	bd10      	pop	{r4, pc}

0801d916 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801d916:	b510      	push	{r4, lr}
 801d918:	2104      	movs	r1, #4
 801d91a:	4604      	mov	r4, r0
 801d91c:	f009 f857 	bl	80269ce <_ZdlPvj>
 801d920:	4620      	mov	r0, r4
 801d922:	bd10      	pop	{r4, pc}

0801d924 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d924:	b510      	push	{r4, lr}
 801d926:	2104      	movs	r1, #4
 801d928:	4604      	mov	r4, r0
 801d92a:	f009 f850 	bl	80269ce <_ZdlPvj>
 801d92e:	4620      	mov	r0, r4
 801d930:	bd10      	pop	{r4, pc}

0801d932 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801d932:	b510      	push	{r4, lr}
 801d934:	2104      	movs	r1, #4
 801d936:	4604      	mov	r4, r0
 801d938:	f009 f849 	bl	80269ce <_ZdlPvj>
 801d93c:	4620      	mov	r0, r4
 801d93e:	bd10      	pop	{r4, pc}

0801d940 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d940:	b510      	push	{r4, lr}
 801d942:	2104      	movs	r1, #4
 801d944:	4604      	mov	r4, r0
 801d946:	f009 f842 	bl	80269ce <_ZdlPvj>
 801d94a:	4620      	mov	r0, r4
 801d94c:	bd10      	pop	{r4, pc}

0801d94e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d94e:	b510      	push	{r4, lr}
 801d950:	2104      	movs	r1, #4
 801d952:	4604      	mov	r4, r0
 801d954:	f009 f83b 	bl	80269ce <_ZdlPvj>
 801d958:	4620      	mov	r0, r4
 801d95a:	bd10      	pop	{r4, pc}

0801d95c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d95c:	b510      	push	{r4, lr}
 801d95e:	2104      	movs	r1, #4
 801d960:	4604      	mov	r4, r0
 801d962:	f009 f834 	bl	80269ce <_ZdlPvj>
 801d966:	4620      	mov	r0, r4
 801d968:	bd10      	pop	{r4, pc}

0801d96a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d96a:	b510      	push	{r4, lr}
 801d96c:	2104      	movs	r1, #4
 801d96e:	4604      	mov	r4, r0
 801d970:	f009 f82d 	bl	80269ce <_ZdlPvj>
 801d974:	4620      	mov	r0, r4
 801d976:	bd10      	pop	{r4, pc}

0801d978 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d978:	b510      	push	{r4, lr}
 801d97a:	2104      	movs	r1, #4
 801d97c:	4604      	mov	r4, r0
 801d97e:	f009 f826 	bl	80269ce <_ZdlPvj>
 801d982:	4620      	mov	r0, r4
 801d984:	bd10      	pop	{r4, pc}

0801d986 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801d986:	b510      	push	{r4, lr}
 801d988:	2104      	movs	r1, #4
 801d98a:	4604      	mov	r4, r0
 801d98c:	f009 f81f 	bl	80269ce <_ZdlPvj>
 801d990:	4620      	mov	r0, r4
 801d992:	bd10      	pop	{r4, pc}

0801d994 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d994:	b510      	push	{r4, lr}
 801d996:	2104      	movs	r1, #4
 801d998:	4604      	mov	r4, r0
 801d99a:	f009 f818 	bl	80269ce <_ZdlPvj>
 801d99e:	4620      	mov	r0, r4
 801d9a0:	bd10      	pop	{r4, pc}

0801d9a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d9a2:	b510      	push	{r4, lr}
 801d9a4:	2104      	movs	r1, #4
 801d9a6:	4604      	mov	r4, r0
 801d9a8:	f009 f811 	bl	80269ce <_ZdlPvj>
 801d9ac:	4620      	mov	r0, r4
 801d9ae:	bd10      	pop	{r4, pc}

0801d9b0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d9b0:	b510      	push	{r4, lr}
 801d9b2:	2104      	movs	r1, #4
 801d9b4:	4604      	mov	r4, r0
 801d9b6:	f009 f80a 	bl	80269ce <_ZdlPvj>
 801d9ba:	4620      	mov	r0, r4
 801d9bc:	bd10      	pop	{r4, pc}

0801d9be <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801d9be:	b510      	push	{r4, lr}
 801d9c0:	2104      	movs	r1, #4
 801d9c2:	4604      	mov	r4, r0
 801d9c4:	f009 f803 	bl	80269ce <_ZdlPvj>
 801d9c8:	4620      	mov	r0, r4
 801d9ca:	bd10      	pop	{r4, pc}

0801d9cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d9cc:	b510      	push	{r4, lr}
 801d9ce:	2104      	movs	r1, #4
 801d9d0:	4604      	mov	r4, r0
 801d9d2:	f008 fffc 	bl	80269ce <_ZdlPvj>
 801d9d6:	4620      	mov	r0, r4
 801d9d8:	bd10      	pop	{r4, pc}

0801d9da <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d9da:	b510      	push	{r4, lr}
 801d9dc:	2104      	movs	r1, #4
 801d9de:	4604      	mov	r4, r0
 801d9e0:	f008 fff5 	bl	80269ce <_ZdlPvj>
 801d9e4:	4620      	mov	r0, r4
 801d9e6:	bd10      	pop	{r4, pc}

0801d9e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d9e8:	b510      	push	{r4, lr}
 801d9ea:	2104      	movs	r1, #4
 801d9ec:	4604      	mov	r4, r0
 801d9ee:	f008 ffee 	bl	80269ce <_ZdlPvj>
 801d9f2:	4620      	mov	r0, r4
 801d9f4:	bd10      	pop	{r4, pc}

0801d9f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d9f6:	b510      	push	{r4, lr}
 801d9f8:	2104      	movs	r1, #4
 801d9fa:	4604      	mov	r4, r0
 801d9fc:	f008 ffe7 	bl	80269ce <_ZdlPvj>
 801da00:	4620      	mov	r0, r4
 801da02:	bd10      	pop	{r4, pc}

0801da04 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801da04:	b510      	push	{r4, lr}
 801da06:	2104      	movs	r1, #4
 801da08:	4604      	mov	r4, r0
 801da0a:	f008 ffe0 	bl	80269ce <_ZdlPvj>
 801da0e:	4620      	mov	r0, r4
 801da10:	bd10      	pop	{r4, pc}

0801da12 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801da12:	b510      	push	{r4, lr}
 801da14:	2104      	movs	r1, #4
 801da16:	4604      	mov	r4, r0
 801da18:	f008 ffd9 	bl	80269ce <_ZdlPvj>
 801da1c:	4620      	mov	r0, r4
 801da1e:	bd10      	pop	{r4, pc}

0801da20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801da20:	b510      	push	{r4, lr}
 801da22:	2104      	movs	r1, #4
 801da24:	4604      	mov	r4, r0
 801da26:	f008 ffd2 	bl	80269ce <_ZdlPvj>
 801da2a:	4620      	mov	r0, r4
 801da2c:	bd10      	pop	{r4, pc}

0801da2e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801da2e:	b510      	push	{r4, lr}
 801da30:	2104      	movs	r1, #4
 801da32:	4604      	mov	r4, r0
 801da34:	f008 ffcb 	bl	80269ce <_ZdlPvj>
 801da38:	4620      	mov	r0, r4
 801da3a:	bd10      	pop	{r4, pc}

0801da3c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801da3c:	b510      	push	{r4, lr}
 801da3e:	2104      	movs	r1, #4
 801da40:	4604      	mov	r4, r0
 801da42:	f008 ffc4 	bl	80269ce <_ZdlPvj>
 801da46:	4620      	mov	r0, r4
 801da48:	bd10      	pop	{r4, pc}

0801da4a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801da4a:	b510      	push	{r4, lr}
 801da4c:	2104      	movs	r1, #4
 801da4e:	4604      	mov	r4, r0
 801da50:	f008 ffbd 	bl	80269ce <_ZdlPvj>
 801da54:	4620      	mov	r0, r4
 801da56:	bd10      	pop	{r4, pc}

0801da58 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801da58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da5c:	460d      	mov	r5, r1
 801da5e:	b087      	sub	sp, #28
 801da60:	4614      	mov	r4, r2
 801da62:	4698      	mov	r8, r3
 801da64:	b333      	cbz	r3, 801dab4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801da66:	4608      	mov	r0, r1
 801da68:	f7f7 f979 	bl	8014d5e <_ZNK8touchgfx4Rect7isEmptyEv>
 801da6c:	bb10      	cbnz	r0, 801dab4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801da6e:	6828      	ldr	r0, [r5, #0]
 801da70:	6869      	ldr	r1, [r5, #4]
 801da72:	4e73      	ldr	r6, [pc, #460]	; (801dc40 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1e8>)
 801da74:	ab04      	add	r3, sp, #16
 801da76:	c303      	stmia	r3!, {r0, r1}
 801da78:	a804      	add	r0, sp, #16
 801da7a:	f7fa f82d 	bl	8017ad8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801da7e:	6830      	ldr	r0, [r6, #0]
 801da80:	6803      	ldr	r3, [r0, #0]
 801da82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801da84:	4798      	blx	r3
 801da86:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801da8a:	d016      	beq.n	801daba <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801da8c:	f010 0f08 	tst.w	r0, #8
 801da90:	d016      	beq.n	801dac0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801da92:	6830      	ldr	r0, [r6, #0]
 801da94:	f8bd 5016 	ldrh.w	r5, [sp, #22]
 801da98:	6801      	ldr	r1, [r0, #0]
 801da9a:	9501      	str	r5, [sp, #4]
 801da9c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 801daa0:	f8cd 8008 	str.w	r8, [sp, #8]
 801daa4:	9500      	str	r5, [sp, #0]
 801daa6:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 801daa8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801daac:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801dab0:	4621      	mov	r1, r4
 801dab2:	47a8      	blx	r5
 801dab4:	b007      	add	sp, #28
 801dab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801daba:	f010 0f02 	tst.w	r0, #2
 801dabe:	e7e7      	b.n	801da90 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x38>
 801dac0:	6830      	ldr	r0, [r6, #0]
 801dac2:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801dac6:	6803      	ldr	r3, [r0, #0]
 801dac8:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801dacc:	6a1b      	ldr	r3, [r3, #32]
 801dace:	4798      	blx	r3
 801dad0:	495c      	ldr	r1, [pc, #368]	; (801dc44 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ec>)
 801dad2:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 801dad6:	880b      	ldrh	r3, [r1, #0]
 801dad8:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801dadc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801dae0:	fb03 c202 	mla	r2, r3, r2, ip
 801dae4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801dae8:	468e      	mov	lr, r1
 801daea:	fb07 f203 	mul.w	r2, r7, r3
 801daee:	d053      	beq.n	801db98 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x140>
 801daf0:	fa1f f388 	uxth.w	r3, r8
 801daf4:	f1c8 07ff 	rsb	r7, r8, #255	; 0xff
 801daf8:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 801dafc:	ea4f 2814 	mov.w	r8, r4, lsr #8
 801db00:	00e4      	lsls	r4, r4, #3
 801db02:	b2e4      	uxtb	r4, r4
 801db04:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801db08:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801db0c:	fb08 f803 	mul.w	r8, r8, r3
 801db10:	fb09 f903 	mul.w	r9, r9, r3
 801db14:	eb00 0142 	add.w	r1, r0, r2, lsl #1
 801db18:	4363      	muls	r3, r4
 801db1a:	006d      	lsls	r5, r5, #1
 801db1c:	b2bc      	uxth	r4, r7
 801db1e:	4288      	cmp	r0, r1
 801db20:	f080 8088 	bcs.w	801dc34 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 801db24:	eb00 0a05 	add.w	sl, r0, r5
 801db28:	4550      	cmp	r0, sl
 801db2a:	d22f      	bcs.n	801db8c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x134>
 801db2c:	8802      	ldrh	r2, [r0, #0]
 801db2e:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801db32:	10d7      	asrs	r7, r2, #3
 801db34:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801db38:	00d2      	lsls	r2, r2, #3
 801db3a:	fb1c fc04 	smulbb	ip, ip, r4
 801db3e:	b2d2      	uxtb	r2, r2
 801db40:	44c4      	add	ip, r8
 801db42:	fb12 f204 	smulbb	r2, r2, r4
 801db46:	fa1f fc8c 	uxth.w	ip, ip
 801db4a:	441a      	add	r2, r3
 801db4c:	b292      	uxth	r2, r2
 801db4e:	f10c 0b01 	add.w	fp, ip, #1
 801db52:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801db56:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801db5a:	fb17 f704 	smulbb	r7, r7, r4
 801db5e:	f102 0b01 	add.w	fp, r2, #1
 801db62:	444f      	add	r7, r9
 801db64:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801db68:	b2bf      	uxth	r7, r7
 801db6a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801db6e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801db72:	ea4c 0202 	orr.w	r2, ip, r2
 801db76:	f107 0c01 	add.w	ip, r7, #1
 801db7a:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801db7e:	097f      	lsrs	r7, r7, #5
 801db80:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801db84:	433a      	orrs	r2, r7
 801db86:	f820 2b02 	strh.w	r2, [r0], #2
 801db8a:	e7cd      	b.n	801db28 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xd0>
 801db8c:	f8be 2000 	ldrh.w	r2, [lr]
 801db90:	ebc5 0242 	rsb	r2, r5, r2, lsl #1
 801db94:	4410      	add	r0, r2
 801db96:	e7c2      	b.n	801db1e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xc6>
 801db98:	07db      	lsls	r3, r3, #31
 801db9a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801db9e:	d50e      	bpl.n	801dbbe <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x166>
 801dba0:	006d      	lsls	r5, r5, #1
 801dba2:	4290      	cmp	r0, r2
 801dba4:	d246      	bcs.n	801dc34 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 801dba6:	1943      	adds	r3, r0, r5
 801dba8:	4298      	cmp	r0, r3
 801dbaa:	d202      	bcs.n	801dbb2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15a>
 801dbac:	f820 4b02 	strh.w	r4, [r0], #2
 801dbb0:	e7fa      	b.n	801dba8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x150>
 801dbb2:	f8be 3000 	ldrh.w	r3, [lr]
 801dbb6:	ebc5 0343 	rsb	r3, r5, r3, lsl #1
 801dbba:	4418      	add	r0, r3
 801dbbc:	e7f1      	b.n	801dba2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x14a>
 801dbbe:	0787      	lsls	r7, r0, #30
 801dbc0:	462b      	mov	r3, r5
 801dbc2:	d00a      	beq.n	801dbda <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x182>
 801dbc4:	4603      	mov	r3, r0
 801dbc6:	4293      	cmp	r3, r2
 801dbc8:	d205      	bcs.n	801dbd6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17e>
 801dbca:	801c      	strh	r4, [r3, #0]
 801dbcc:	f8be 1000 	ldrh.w	r1, [lr]
 801dbd0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801dbd4:	e7f7      	b.n	801dbc6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
 801dbd6:	3002      	adds	r0, #2
 801dbd8:	1e6b      	subs	r3, r5, #1
 801dbda:	07dd      	lsls	r5, r3, #31
 801dbdc:	d50d      	bpl.n	801dbfa <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a2>
 801dbde:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801dbe2:	3901      	subs	r1, #1
 801dbe4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801dbe8:	4291      	cmp	r1, r2
 801dbea:	d205      	bcs.n	801dbf8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a0>
 801dbec:	800c      	strh	r4, [r1, #0]
 801dbee:	f8be 5000 	ldrh.w	r5, [lr]
 801dbf2:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 801dbf6:	e7f7      	b.n	801dbe8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>
 801dbf8:	3b01      	subs	r3, #1
 801dbfa:	b1db      	cbz	r3, 801dc34 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 801dbfc:	b2a1      	uxth	r1, r4
 801dbfe:	105b      	asrs	r3, r3, #1
 801dc00:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 801dc04:	009b      	lsls	r3, r3, #2
 801dc06:	4290      	cmp	r0, r2
 801dc08:	d214      	bcs.n	801dc34 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 801dc0a:	0781      	lsls	r1, r0, #30
 801dc0c:	d006      	beq.n	801dc1c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c4>
 801dc0e:	4b0e      	ldr	r3, [pc, #56]	; (801dc48 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f0>)
 801dc10:	4a0e      	ldr	r2, [pc, #56]	; (801dc4c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f4>)
 801dc12:	480f      	ldr	r0, [pc, #60]	; (801dc50 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f8>)
 801dc14:	f44f 7162 	mov.w	r1, #904	; 0x388
 801dc18:	f009 f804 	bl	8026c24 <__assert_func>
 801dc1c:	18c5      	adds	r5, r0, r3
 801dc1e:	4601      	mov	r1, r0
 801dc20:	42a9      	cmp	r1, r5
 801dc22:	d202      	bcs.n	801dc2a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1d2>
 801dc24:	f841 4b04 	str.w	r4, [r1], #4
 801dc28:	e7fa      	b.n	801dc20 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c8>
 801dc2a:	f8be 1000 	ldrh.w	r1, [lr]
 801dc2e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801dc32:	e7e8      	b.n	801dc06 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ae>
 801dc34:	6830      	ldr	r0, [r6, #0]
 801dc36:	6803      	ldr	r3, [r0, #0]
 801dc38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dc3a:	4798      	blx	r3
 801dc3c:	e73a      	b.n	801dab4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801dc3e:	bf00      	nop
 801dc40:	2000a0f0 	.word	0x2000a0f0
 801dc44:	2000a0ea 	.word	0x2000a0ea
 801dc48:	0802c870 	.word	0x0802c870
 801dc4c:	0802d028 	.word	0x0802d028
 801dc50:	0802c89f 	.word	0x0802c89f

0801dc54 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801dc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc58:	4f97      	ldr	r7, [pc, #604]	; (801deb8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 801dc5a:	4616      	mov	r6, r2
 801dc5c:	683a      	ldr	r2, [r7, #0]
 801dc5e:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801dc62:	2a02      	cmp	r2, #2
 801dc64:	b08f      	sub	sp, #60	; 0x3c
 801dc66:	4604      	mov	r4, r0
 801dc68:	4689      	mov	r9, r1
 801dc6a:	d106      	bne.n	801dc7a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801dc6c:	4b93      	ldr	r3, [pc, #588]	; (801debc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 801dc6e:	4a94      	ldr	r2, [pc, #592]	; (801dec0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801dc70:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 801dc74:	4893      	ldr	r0, [pc, #588]	; (801dec4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 801dc76:	f008 ffd5 	bl	8026c24 <__assert_func>
 801dc7a:	ad0e      	add	r5, sp, #56	; 0x38
 801dc7c:	f825 3d24 	strh.w	r3, [r5, #-36]!
 801dc80:	4628      	mov	r0, r5
 801dc82:	f7fd fa4f 	bl	801b124 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dc86:	6823      	ldr	r3, [r4, #0]
 801dc88:	4680      	mov	r8, r0
 801dc8a:	6a1b      	ldr	r3, [r3, #32]
 801dc8c:	4620      	mov	r0, r4
 801dc8e:	4798      	blx	r3
 801dc90:	4580      	cmp	r8, r0
 801dc92:	d004      	beq.n	801dc9e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801dc94:	4b8c      	ldr	r3, [pc, #560]	; (801dec8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 801dc96:	4a8a      	ldr	r2, [pc, #552]	; (801dec0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801dc98:	f240 21ca 	movw	r1, #714	; 0x2ca
 801dc9c:	e7ea      	b.n	801dc74 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801dc9e:	4628      	mov	r0, r5
 801dca0:	f7fd f9b6 	bl	801b010 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dca4:	4680      	mov	r8, r0
 801dca6:	b920      	cbnz	r0, 801dcb2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801dca8:	4b88      	ldr	r3, [pc, #544]	; (801decc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 801dcaa:	4a85      	ldr	r2, [pc, #532]	; (801dec0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801dcac:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801dcb0:	e7e0      	b.n	801dc74 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801dcb2:	6830      	ldr	r0, [r6, #0]
 801dcb4:	6871      	ldr	r1, [r6, #4]
 801dcb6:	f9b6 a000 	ldrsh.w	sl, [r6]
 801dcba:	ab06      	add	r3, sp, #24
 801dcbc:	c303      	stmia	r3!, {r0, r1}
 801dcbe:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801dcc2:	f8d9 0000 	ldr.w	r0, [r9]
 801dcc6:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801dcca:	ab08      	add	r3, sp, #32
 801dccc:	c303      	stmia	r3!, {r0, r1}
 801dcce:	4628      	mov	r0, r5
 801dcd0:	f7fd f896 	bl	801ae00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801dcd4:	4606      	mov	r6, r0
 801dcd6:	4628      	mov	r0, r5
 801dcd8:	f7fd f8cc 	bl	801ae74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801dcdc:	f10d 0b20 	add.w	fp, sp, #32
 801dce0:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801dce4:	a806      	add	r0, sp, #24
 801dce6:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801dcea:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801dcee:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 801dcf2:	f7f9 fef1 	bl	8017ad8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dcf6:	4658      	mov	r0, fp
 801dcf8:	f7f9 feee 	bl	8017ad8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dcfc:	a80a      	add	r0, sp, #40	; 0x28
 801dcfe:	f7f9 feeb 	bl	8017ad8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dd02:	4d73      	ldr	r5, [pc, #460]	; (801ded0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 801dd04:	4b73      	ldr	r3, [pc, #460]	; (801ded4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801dd06:	f9b5 2000 	ldrsh.w	r2, [r5]
 801dd0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dd0e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801dd12:	2100      	movs	r1, #0
 801dd14:	910c      	str	r1, [sp, #48]	; 0x30
 801dd16:	4658      	mov	r0, fp
 801dd18:	a90c      	add	r1, sp, #48	; 0x30
 801dd1a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801dd1e:	f7f6 ffdb 	bl	8014cd8 <_ZN8touchgfx4RectaNERKS0_>
 801dd22:	4658      	mov	r0, fp
 801dd24:	f7f7 f81b 	bl	8014d5e <_ZNK8touchgfx4Rect7isEmptyEv>
 801dd28:	2800      	cmp	r0, #0
 801dd2a:	f040 8099 	bne.w	801de60 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 801dd2e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801dd32:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801dd36:	4288      	cmp	r0, r1
 801dd38:	db37      	blt.n	801ddaa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 801dd3a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801dd3e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801dd42:	429a      	cmp	r2, r3
 801dd44:	db31      	blt.n	801ddaa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 801dd46:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801dd4a:	4430      	add	r0, r6
 801dd4c:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801dd50:	4431      	add	r1, r6
 801dd52:	b200      	sxth	r0, r0
 801dd54:	b209      	sxth	r1, r1
 801dd56:	4288      	cmp	r0, r1
 801dd58:	dc27      	bgt.n	801ddaa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 801dd5a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801dd5e:	440a      	add	r2, r1
 801dd60:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801dd64:	440b      	add	r3, r1
 801dd66:	b212      	sxth	r2, r2
 801dd68:	b21b      	sxth	r3, r3
 801dd6a:	429a      	cmp	r2, r3
 801dd6c:	dc1d      	bgt.n	801ddaa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 801dd6e:	6823      	ldr	r3, [r4, #0]
 801dd70:	4620      	mov	r0, r4
 801dd72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dd74:	4798      	blx	r3
 801dd76:	4682      	mov	sl, r0
 801dd78:	6838      	ldr	r0, [r7, #0]
 801dd7a:	6803      	ldr	r3, [r0, #0]
 801dd7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dd7e:	4798      	blx	r3
 801dd80:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801dd84:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801dd88:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801dd8c:	1a5b      	subs	r3, r3, r1
 801dd8e:	b29b      	uxth	r3, r3
 801dd90:	b21c      	sxth	r4, r3
 801dd92:	2c00      	cmp	r4, #0
 801dd94:	dc0e      	bgt.n	801ddb4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801dd96:	bf1f      	itttt	ne
 801dd98:	f8ad 1020 	strhne.w	r1, [sp, #32]
 801dd9c:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 801dda0:	185b      	addne	r3, r3, r1
 801dda2:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 801dda6:	4644      	mov	r4, r8
 801dda8:	e009      	b.n	801ddbe <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16a>
 801ddaa:	4b4b      	ldr	r3, [pc, #300]	; (801ded8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801ddac:	4a44      	ldr	r2, [pc, #272]	; (801dec0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801ddae:	f240 21da 	movw	r1, #730	; 0x2da
 801ddb2:	e75f      	b.n	801dc74 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801ddb4:	1ad3      	subs	r3, r2, r3
 801ddb6:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801ddba:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801ddbe:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 801ddc2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801ddc6:	1b9b      	subs	r3, r3, r6
 801ddc8:	b29b      	uxth	r3, r3
 801ddca:	b219      	sxth	r1, r3
 801ddcc:	2900      	cmp	r1, #0
 801ddce:	dd4b      	ble.n	801de68 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x214>
 801ddd0:	4351      	muls	r1, r2
 801ddd2:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801ddd6:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801ddda:	1acb      	subs	r3, r1, r3
 801dddc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801dde0:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801dde4:	2e00      	cmp	r6, #0
 801dde6:	dd3b      	ble.n	801de60 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 801dde8:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801ddec:	2b00      	cmp	r3, #0
 801ddee:	dd37      	ble.n	801de60 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 801ddf0:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801ddf4:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801ddf8:	fb0a f90c 	mul.w	r9, sl, ip
 801ddfc:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 801de00:	4481      	add	r9, r0
 801de02:	8828      	ldrh	r0, [r5, #0]
 801de04:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 801de08:	42ae      	cmp	r6, r5
 801de0a:	bfa8      	it	ge
 801de0c:	462e      	movge	r6, r5
 801de0e:	1a41      	subs	r1, r0, r1
 801de10:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801de14:	428e      	cmp	r6, r1
 801de16:	bfa8      	it	ge
 801de18:	460e      	movge	r6, r1
 801de1a:	429d      	cmp	r5, r3
 801de1c:	bfa8      	it	ge
 801de1e:	461d      	movge	r5, r3
 801de20:	4b2c      	ldr	r3, [pc, #176]	; (801ded4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801de22:	881b      	ldrh	r3, [r3, #0]
 801de24:	eba3 030c 	sub.w	r3, r3, ip
 801de28:	429d      	cmp	r5, r3
 801de2a:	bfa8      	it	ge
 801de2c:	461d      	movge	r5, r3
 801de2e:	42b0      	cmp	r0, r6
 801de30:	d12c      	bne.n	801de8c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x238>
 801de32:	4290      	cmp	r0, r2
 801de34:	d12a      	bne.n	801de8c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x238>
 801de36:	6838      	ldr	r0, [r7, #0]
 801de38:	9203      	str	r2, [sp, #12]
 801de3a:	6803      	ldr	r3, [r0, #0]
 801de3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801de3e:	4798      	blx	r3
 801de40:	07c3      	lsls	r3, r0, #31
 801de42:	d51a      	bpl.n	801de7a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 801de44:	9a03      	ldr	r2, [sp, #12]
 801de46:	6838      	ldr	r0, [r7, #0]
 801de48:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 801de4c:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801de50:	6803      	ldr	r3, [r0, #0]
 801de52:	9200      	str	r2, [sp, #0]
 801de54:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801de56:	e89b 0006 	ldmia.w	fp, {r1, r2}
 801de5a:	4623      	mov	r3, r4
 801de5c:	47a8      	blx	r5
 801de5e:	4680      	mov	r8, r0
 801de60:	4640      	mov	r0, r8
 801de62:	b00f      	add	sp, #60	; 0x3c
 801de64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de68:	bf1f      	itttt	ne
 801de6a:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 801de6e:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 801de72:	185b      	addne	r3, r3, r1
 801de74:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801de78:	e7b2      	b.n	801dde0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18c>
 801de7a:	6838      	ldr	r0, [r7, #0]
 801de7c:	6803      	ldr	r3, [r0, #0]
 801de7e:	464a      	mov	r2, r9
 801de80:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 801de82:	4621      	mov	r1, r4
 801de84:	fb05 f30a 	mul.w	r3, r5, sl
 801de88:	47b0      	blx	r6
 801de8a:	e7e9      	b.n	801de60 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 801de8c:	4355      	muls	r5, r2
 801de8e:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 801de92:	9303      	str	r3, [sp, #12]
 801de94:	0076      	lsls	r6, r6, #1
 801de96:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 801de9a:	9b03      	ldr	r3, [sp, #12]
 801de9c:	429c      	cmp	r4, r3
 801de9e:	d2df      	bcs.n	801de60 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 801dea0:	6838      	ldr	r0, [r7, #0]
 801dea2:	6803      	ldr	r3, [r0, #0]
 801dea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dea6:	464a      	mov	r2, r9
 801dea8:	461d      	mov	r5, r3
 801deaa:	4621      	mov	r1, r4
 801deac:	4633      	mov	r3, r6
 801deae:	47a8      	blx	r5
 801deb0:	44d1      	add	r9, sl
 801deb2:	445c      	add	r4, fp
 801deb4:	e7f1      	b.n	801de9a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x246>
 801deb6:	bf00      	nop
 801deb8:	2000a0f0 	.word	0x2000a0f0
 801debc:	0802c696 	.word	0x0802c696
 801dec0:	0802cf0b 	.word	0x0802cf0b
 801dec4:	0802c89f 	.word	0x0802c89f
 801dec8:	0802c748 	.word	0x0802c748
 801decc:	0802c79d 	.word	0x0802c79d
 801ded0:	2000a0ea 	.word	0x2000a0ea
 801ded4:	2000a0ec 	.word	0x2000a0ec
 801ded8:	0802c7db 	.word	0x0802c7db

0801dedc <_ZN8touchgfx8LCD16bppC1Ev>:
 801dedc:	2200      	movs	r2, #0
 801dede:	4910      	ldr	r1, [pc, #64]	; (801df20 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801dee0:	6042      	str	r2, [r0, #4]
 801dee2:	6001      	str	r1, [r0, #0]
 801dee4:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801dee8:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801deec:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801def0:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801def4:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801def8:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801defc:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801df00:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801df04:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801df08:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801df0c:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801df10:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801df14:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801df18:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801df1c:	4770      	bx	lr
 801df1e:	bf00      	nop
 801df20:	0802cb80 	.word	0x0802cb80

0801df24 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801df24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df28:	460d      	mov	r5, r1
 801df2a:	b08b      	sub	sp, #44	; 0x2c
 801df2c:	4604      	mov	r4, r0
 801df2e:	6808      	ldr	r0, [r1, #0]
 801df30:	6849      	ldr	r1, [r1, #4]
 801df32:	4699      	mov	r9, r3
 801df34:	ab06      	add	r3, sp, #24
 801df36:	c303      	stmia	r3!, {r0, r1}
 801df38:	6810      	ldr	r0, [r2, #0]
 801df3a:	6851      	ldr	r1, [r2, #4]
 801df3c:	ab08      	add	r3, sp, #32
 801df3e:	c303      	stmia	r3!, {r0, r1}
 801df40:	a806      	add	r0, sp, #24
 801df42:	f7f9 fdc9 	bl	8017ad8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801df46:	4629      	mov	r1, r5
 801df48:	a808      	add	r0, sp, #32
 801df4a:	f7f9 fdad 	bl	8017aa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801df4e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801df52:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801df56:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801df5a:	4d5f      	ldr	r5, [pc, #380]	; (801e0d8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 801df5c:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801df60:	6828      	ldr	r0, [r5, #0]
 801df62:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801df66:	fb11 2103 	smlabb	r1, r1, r3, r2
 801df6a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801df6e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801df72:	440a      	add	r2, r1
 801df74:	f8ad 2020 	strh.w	r2, [sp, #32]
 801df78:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801df7c:	4413      	add	r3, r2
 801df7e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801df82:	6803      	ldr	r3, [r0, #0]
 801df84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801df86:	4798      	blx	r3
 801df88:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801df8c:	d118      	bne.n	801dfc0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801df8e:	f010 0f20 	tst.w	r0, #32
 801df92:	6828      	ldr	r0, [r5, #0]
 801df94:	d017      	beq.n	801dfc6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801df96:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 801df9a:	6801      	ldr	r1, [r0, #0]
 801df9c:	9502      	str	r5, [sp, #8]
 801df9e:	b2b6      	uxth	r6, r6
 801dfa0:	fa1f f588 	uxth.w	r5, r8
 801dfa4:	f8cd 900c 	str.w	r9, [sp, #12]
 801dfa8:	9601      	str	r6, [sp, #4]
 801dfaa:	9500      	str	r5, [sp, #0]
 801dfac:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801dfae:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801dfb2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801dfb6:	4621      	mov	r1, r4
 801dfb8:	47a8      	blx	r5
 801dfba:	b00b      	add	sp, #44	; 0x2c
 801dfbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dfc0:	f010 0f40 	tst.w	r0, #64	; 0x40
 801dfc4:	e7e5      	b.n	801df92 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801dfc6:	6803      	ldr	r3, [r0, #0]
 801dfc8:	6a1b      	ldr	r3, [r3, #32]
 801dfca:	4798      	blx	r3
 801dfcc:	4a43      	ldr	r2, [pc, #268]	; (801e0dc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 801dfce:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801dfd2:	f8b2 e000 	ldrh.w	lr, [r2]
 801dfd6:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801dfda:	fb0e 1303 	mla	r3, lr, r3, r1
 801dfde:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dfe2:	fb0e fe06 	mul.w	lr, lr, r6
 801dfe6:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801dfea:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 801dfee:	9305      	str	r3, [sp, #20]
 801dff0:	4692      	mov	sl, r2
 801dff2:	4570      	cmp	r0, lr
 801dff4:	d26a      	bcs.n	801e0cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a8>
 801dff6:	9b05      	ldr	r3, [sp, #20]
 801dff8:	4621      	mov	r1, r4
 801dffa:	eb00 0b03 	add.w	fp, r0, r3
 801dffe:	4558      	cmp	r0, fp
 801e000:	d257      	bcs.n	801e0b2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18e>
 801e002:	f851 4b04 	ldr.w	r4, [r1], #4
 801e006:	0e22      	lsrs	r2, r4, #24
 801e008:	d012      	beq.n	801e030 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801e00a:	2aff      	cmp	r2, #255	; 0xff
 801e00c:	ea4f 2714 	mov.w	r7, r4, lsr #8
 801e010:	d110      	bne.n	801e034 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801e012:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e016:	d10d      	bne.n	801e034 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801e018:	0963      	lsrs	r3, r4, #5
 801e01a:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801e01e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e022:	f027 0707 	bic.w	r7, r7, #7
 801e026:	431f      	orrs	r7, r3
 801e028:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801e02c:	433c      	orrs	r4, r7
 801e02e:	8004      	strh	r4, [r0, #0]
 801e030:	3002      	adds	r0, #2
 801e032:	e7e4      	b.n	801dffe <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xda>
 801e034:	fb09 f302 	mul.w	r3, r9, r2
 801e038:	1c5a      	adds	r2, r3, #1
 801e03a:	f8b0 c000 	ldrh.w	ip, [r0]
 801e03e:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801e042:	1212      	asrs	r2, r2, #8
 801e044:	b293      	uxth	r3, r2
 801e046:	ea4f 262c 	mov.w	r6, ip, asr #8
 801e04a:	f3c4 4507 	ubfx	r5, r4, #16, #8
 801e04e:	43d2      	mvns	r2, r2
 801e050:	b2d2      	uxtb	r2, r2
 801e052:	fb15 f503 	smulbb	r5, r5, r3
 801e056:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e05a:	fb06 5602 	mla	r6, r6, r2, r5
 801e05e:	b2ff      	uxtb	r7, r7
 801e060:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801e064:	b2e4      	uxtb	r4, r4
 801e066:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e06a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801e06e:	fb17 f703 	smulbb	r7, r7, r3
 801e072:	fa5f fc8c 	uxtb.w	ip, ip
 801e076:	fb14 f403 	smulbb	r4, r4, r3
 801e07a:	fb05 7702 	mla	r7, r5, r2, r7
 801e07e:	fb0c 4202 	mla	r2, ip, r2, r4
 801e082:	b2b6      	uxth	r6, r6
 801e084:	b2bf      	uxth	r7, r7
 801e086:	b292      	uxth	r2, r2
 801e088:	1c73      	adds	r3, r6, #1
 801e08a:	f102 0c01 	add.w	ip, r2, #1
 801e08e:	1c7d      	adds	r5, r7, #1
 801e090:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801e094:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e098:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801e09c:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801e0a0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e0a4:	097f      	lsrs	r7, r7, #5
 801e0a6:	4316      	orrs	r6, r2
 801e0a8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801e0ac:	433e      	orrs	r6, r7
 801e0ae:	8006      	strh	r6, [r0, #0]
 801e0b0:	e7be      	b.n	801e030 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801e0b2:	f8ba 3000 	ldrh.w	r3, [sl]
 801e0b6:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 801e0ba:	eba3 0308 	sub.w	r3, r3, r8
 801e0be:	eba4 0408 	sub.w	r4, r4, r8
 801e0c2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e0c6:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801e0ca:	e792      	b.n	801dff2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801e0cc:	4b02      	ldr	r3, [pc, #8]	; (801e0d8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 801e0ce:	6818      	ldr	r0, [r3, #0]
 801e0d0:	6803      	ldr	r3, [r0, #0]
 801e0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e0d4:	4798      	blx	r3
 801e0d6:	e770      	b.n	801dfba <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801e0d8:	2000a0f0 	.word	0x2000a0f0
 801e0dc:	2000a0ea 	.word	0x2000a0ea

0801e0e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801e0e0:	b570      	push	{r4, r5, r6, lr}
 801e0e2:	9d04      	ldr	r5, [sp, #16]
 801e0e4:	f89d 6018 	ldrb.w	r6, [sp, #24]
 801e0e8:	460c      	mov	r4, r1
 801e0ea:	4619      	mov	r1, r3
 801e0ec:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801e0f0:	2a0d      	cmp	r2, #13
 801e0f2:	d820      	bhi.n	801e136 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x56>
 801e0f4:	e8df f002 	tbb	[pc, r2]
 801e0f8:	18121807 	.word	0x18121807
 801e0fc:	18181818 	.word	0x18181818
 801e100:	18181818 	.word	0x18181818
 801e104:	1818      	.short	0x1818
 801e106:	6802      	ldr	r2, [r0, #0]
 801e108:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801e10c:	68d6      	ldr	r6, [r2, #12]
 801e10e:	462b      	mov	r3, r5
 801e110:	460a      	mov	r2, r1
 801e112:	46b4      	mov	ip, r6
 801e114:	4621      	mov	r1, r4
 801e116:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e11a:	4760      	bx	ip
 801e11c:	462a      	mov	r2, r5
 801e11e:	4620      	mov	r0, r4
 801e120:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e124:	f7ff befe 	b.w	801df24 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e128:	4b03      	ldr	r3, [pc, #12]	; (801e138 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 801e12a:	4a04      	ldr	r2, [pc, #16]	; (801e13c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 801e12c:	4804      	ldr	r0, [pc, #16]	; (801e140 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801e12e:	f240 21c1 	movw	r1, #705	; 0x2c1
 801e132:	f008 fd77 	bl	8026c24 <__assert_func>
 801e136:	bd70      	pop	{r4, r5, r6, pc}
 801e138:	0802c83b 	.word	0x0802c83b
 801e13c:	0802cf91 	.word	0x0802cf91
 801e140:	0802c89f 	.word	0x0802c89f

0801e144 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801e144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e148:	b093      	sub	sp, #76	; 0x4c
 801e14a:	880f      	ldrh	r7, [r1, #0]
 801e14c:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801e150:	4604      	mov	r4, r0
 801e152:	4688      	mov	r8, r1
 801e154:	4616      	mov	r6, r2
 801e156:	b12f      	cbz	r7, 801e164 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801e158:	4b6f      	ldr	r3, [pc, #444]	; (801e318 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801e15a:	4a70      	ldr	r2, [pc, #448]	; (801e31c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801e15c:	4870      	ldr	r0, [pc, #448]	; (801e320 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801e15e:	21e2      	movs	r1, #226	; 0xe2
 801e160:	f008 fd60 	bl	8026c24 <__assert_func>
 801e164:	6810      	ldr	r0, [r2, #0]
 801e166:	6851      	ldr	r1, [r2, #4]
 801e168:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 801e328 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>
 801e16c:	ad0e      	add	r5, sp, #56	; 0x38
 801e16e:	c503      	stmia	r5!, {r0, r1}
 801e170:	6818      	ldr	r0, [r3, #0]
 801e172:	6859      	ldr	r1, [r3, #4]
 801e174:	ad10      	add	r5, sp, #64	; 0x40
 801e176:	c503      	stmia	r5!, {r0, r1}
 801e178:	a80e      	add	r0, sp, #56	; 0x38
 801e17a:	f7f9 fcad 	bl	8017ad8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e17e:	4631      	mov	r1, r6
 801e180:	a810      	add	r0, sp, #64	; 0x40
 801e182:	f7f9 fc91 	bl	8017aa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e186:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801e18a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801e18e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801e192:	f8db 0000 	ldr.w	r0, [fp]
 801e196:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801e19a:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801e19e:	4e61      	ldr	r6, [pc, #388]	; (801e324 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801e1a0:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e1a4:	440c      	add	r4, r1
 801e1a6:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801e1aa:	440a      	add	r2, r1
 801e1ac:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801e1b0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e1b4:	4413      	add	r3, r2
 801e1b6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801e1ba:	6803      	ldr	r3, [r0, #0]
 801e1bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e1c0:	4798      	blx	r3
 801e1c2:	2801      	cmp	r0, #1
 801e1c4:	d11d      	bne.n	801e202 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801e1c6:	220b      	movs	r2, #11
 801e1c8:	9708      	str	r7, [sp, #32]
 801e1ca:	9207      	str	r2, [sp, #28]
 801e1cc:	8832      	ldrh	r2, [r6, #0]
 801e1ce:	f8cd a010 	str.w	sl, [sp, #16]
 801e1d2:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801e1d6:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801e1da:	9203      	str	r2, [sp, #12]
 801e1dc:	fa1f f289 	uxth.w	r2, r9
 801e1e0:	9201      	str	r2, [sp, #4]
 801e1e2:	b2ad      	uxth	r5, r5
 801e1e4:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801e1e8:	9200      	str	r2, [sp, #0]
 801e1ea:	9502      	str	r5, [sp, #8]
 801e1ec:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801e1f0:	f8db 0000 	ldr.w	r0, [fp]
 801e1f4:	4642      	mov	r2, r8
 801e1f6:	4621      	mov	r1, r4
 801e1f8:	f7f7 f9d2 	bl	80155a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801e1fc:	b013      	add	sp, #76	; 0x4c
 801e1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e202:	f8db 0000 	ldr.w	r0, [fp]
 801e206:	6803      	ldr	r3, [r0, #0]
 801e208:	6a1b      	ldr	r3, [r3, #32]
 801e20a:	4798      	blx	r3
 801e20c:	8832      	ldrh	r2, [r6, #0]
 801e20e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801e212:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801e216:	960d      	str	r6, [sp, #52]	; 0x34
 801e218:	fb02 1303 	mla	r3, r2, r3, r1
 801e21c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e220:	4355      	muls	r5, r2
 801e222:	eb00 0345 	add.w	r3, r0, r5, lsl #1
 801e226:	930c      	str	r3, [sp, #48]	; 0x30
 801e228:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801e22c:	930b      	str	r3, [sp, #44]	; 0x2c
 801e22e:	f04f 0e04 	mov.w	lr, #4
 801e232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e234:	4298      	cmp	r0, r3
 801e236:	d269      	bcs.n	801e30c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 801e238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e23a:	4621      	mov	r1, r4
 801e23c:	eb00 0b03 	add.w	fp, r0, r3
 801e240:	4558      	cmp	r0, fp
 801e242:	460b      	mov	r3, r1
 801e244:	d256      	bcs.n	801e2f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801e246:	781b      	ldrb	r3, [r3, #0]
 801e248:	fb1e e303 	smlabb	r3, lr, r3, lr
 801e24c:	3101      	adds	r1, #1
 801e24e:	f858 2003 	ldr.w	r2, [r8, r3]
 801e252:	0e14      	lsrs	r4, r2, #24
 801e254:	d012      	beq.n	801e27c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801e256:	2cff      	cmp	r4, #255	; 0xff
 801e258:	ea4f 2612 	mov.w	r6, r2, lsr #8
 801e25c:	d110      	bne.n	801e280 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801e25e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e262:	d10d      	bne.n	801e280 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801e264:	0953      	lsrs	r3, r2, #5
 801e266:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801e26a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e26e:	f026 0607 	bic.w	r6, r6, #7
 801e272:	431e      	orrs	r6, r3
 801e274:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801e278:	4332      	orrs	r2, r6
 801e27a:	8002      	strh	r2, [r0, #0]
 801e27c:	3002      	adds	r0, #2
 801e27e:	e7df      	b.n	801e240 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfc>
 801e280:	fb0a f404 	mul.w	r4, sl, r4
 801e284:	1c63      	adds	r3, r4, #1
 801e286:	8807      	ldrh	r7, [r0, #0]
 801e288:	eb03 2324 	add.w	r3, r3, r4, asr #8
 801e28c:	121b      	asrs	r3, r3, #8
 801e28e:	fa1f fc83 	uxth.w	ip, r3
 801e292:	123d      	asrs	r5, r7, #8
 801e294:	f3c2 4407 	ubfx	r4, r2, #16, #8
 801e298:	43db      	mvns	r3, r3
 801e29a:	b2db      	uxtb	r3, r3
 801e29c:	fb14 f40c 	smulbb	r4, r4, ip
 801e2a0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801e2a4:	fb05 4503 	mla	r5, r5, r3, r4
 801e2a8:	b2d2      	uxtb	r2, r2
 801e2aa:	10fc      	asrs	r4, r7, #3
 801e2ac:	00ff      	lsls	r7, r7, #3
 801e2ae:	b2ff      	uxtb	r7, r7
 801e2b0:	fb12 f20c 	smulbb	r2, r2, ip
 801e2b4:	fb07 2203 	mla	r2, r7, r3, r2
 801e2b8:	b2f6      	uxtb	r6, r6
 801e2ba:	b2ad      	uxth	r5, r5
 801e2bc:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801e2c0:	b292      	uxth	r2, r2
 801e2c2:	fb16 f60c 	smulbb	r6, r6, ip
 801e2c6:	fb04 6603 	mla	r6, r4, r3, r6
 801e2ca:	1c6b      	adds	r3, r5, #1
 801e2cc:	1c54      	adds	r4, r2, #1
 801e2ce:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801e2d2:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801e2d6:	b2b6      	uxth	r6, r6
 801e2d8:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801e2dc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801e2e0:	4325      	orrs	r5, r4
 801e2e2:	1c74      	adds	r4, r6, #1
 801e2e4:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801e2e8:	0976      	lsrs	r6, r6, #5
 801e2ea:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e2ee:	4335      	orrs	r5, r6
 801e2f0:	8005      	strh	r5, [r0, #0]
 801e2f2:	e7c3      	b.n	801e27c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801e2f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e2f6:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801e2fa:	881b      	ldrh	r3, [r3, #0]
 801e2fc:	eba4 0409 	sub.w	r4, r4, r9
 801e300:	eba3 0309 	sub.w	r3, r3, r9
 801e304:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e308:	440c      	add	r4, r1
 801e30a:	e792      	b.n	801e232 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801e30c:	4b06      	ldr	r3, [pc, #24]	; (801e328 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801e30e:	6818      	ldr	r0, [r3, #0]
 801e310:	6803      	ldr	r3, [r0, #0]
 801e312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e314:	4798      	blx	r3
 801e316:	e771      	b.n	801e1fc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 801e318:	0802c646 	.word	0x0802c646
 801e31c:	0802cd62 	.word	0x0802cd62
 801e320:	0802c89f 	.word	0x0802c89f
 801e324:	2000a0ea 	.word	0x2000a0ea
 801e328:	2000a0f0 	.word	0x2000a0f0

0801e32c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801e32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e330:	4614      	mov	r4, r2
 801e332:	880a      	ldrh	r2, [r1, #0]
 801e334:	b091      	sub	sp, #68	; 0x44
 801e336:	2a02      	cmp	r2, #2
 801e338:	4607      	mov	r7, r0
 801e33a:	4689      	mov	r9, r1
 801e33c:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 801e340:	d006      	beq.n	801e350 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 801e342:	4b77      	ldr	r3, [pc, #476]	; (801e520 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f4>)
 801e344:	4a77      	ldr	r2, [pc, #476]	; (801e524 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f8>)
 801e346:	4878      	ldr	r0, [pc, #480]	; (801e528 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1fc>)
 801e348:	f240 113b 	movw	r1, #315	; 0x13b
 801e34c:	f008 fc6a 	bl	8026c24 <__assert_func>
 801e350:	2e00      	cmp	r6, #0
 801e352:	d04b      	beq.n	801e3ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801e354:	6820      	ldr	r0, [r4, #0]
 801e356:	6861      	ldr	r1, [r4, #4]
 801e358:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 801e530 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>
 801e35c:	ad0c      	add	r5, sp, #48	; 0x30
 801e35e:	c503      	stmia	r5!, {r0, r1}
 801e360:	6818      	ldr	r0, [r3, #0]
 801e362:	6859      	ldr	r1, [r3, #4]
 801e364:	ad0e      	add	r5, sp, #56	; 0x38
 801e366:	c503      	stmia	r5!, {r0, r1}
 801e368:	a80c      	add	r0, sp, #48	; 0x30
 801e36a:	f7f9 fbb5 	bl	8017ad8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e36e:	4621      	mov	r1, r4
 801e370:	a80e      	add	r0, sp, #56	; 0x38
 801e372:	f7f9 fb99 	bl	8017aa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e376:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e37a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e37e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801e382:	f8da 0000 	ldr.w	r0, [sl]
 801e386:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801e38a:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801e38e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e392:	187c      	adds	r4, r7, r1
 801e394:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801e398:	4f64      	ldr	r7, [pc, #400]	; (801e52c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
 801e39a:	440a      	add	r2, r1
 801e39c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801e3a0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801e3a4:	4413      	add	r3, r2
 801e3a6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e3aa:	6803      	ldr	r3, [r0, #0]
 801e3ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e3b0:	4798      	blx	r3
 801e3b2:	2801      	cmp	r0, #1
 801e3b4:	d11d      	bne.n	801e3f2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
 801e3b6:	2200      	movs	r2, #0
 801e3b8:	210b      	movs	r1, #11
 801e3ba:	e9cd 1207 	strd	r1, r2, [sp, #28]
 801e3be:	8839      	ldrh	r1, [r7, #0]
 801e3c0:	9604      	str	r6, [sp, #16]
 801e3c2:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801e3c6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801e3ca:	9203      	str	r2, [sp, #12]
 801e3cc:	fa1f f288 	uxth.w	r2, r8
 801e3d0:	9201      	str	r2, [sp, #4]
 801e3d2:	b2ad      	uxth	r5, r5
 801e3d4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e3d8:	9200      	str	r2, [sp, #0]
 801e3da:	9502      	str	r5, [sp, #8]
 801e3dc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e3e0:	f8da 0000 	ldr.w	r0, [sl]
 801e3e4:	464a      	mov	r2, r9
 801e3e6:	4621      	mov	r1, r4
 801e3e8:	f7f7 f8da 	bl	80155a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801e3ec:	b011      	add	sp, #68	; 0x44
 801e3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3f2:	f8da 0000 	ldr.w	r0, [sl]
 801e3f6:	6803      	ldr	r3, [r0, #0]
 801e3f8:	6a1b      	ldr	r3, [r3, #32]
 801e3fa:	4798      	blx	r3
 801e3fc:	8839      	ldrh	r1, [r7, #0]
 801e3fe:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e402:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e406:	2eff      	cmp	r6, #255	; 0xff
 801e408:	fb01 2303 	mla	r3, r1, r3, r2
 801e40c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e410:	f109 0204 	add.w	r2, r9, #4
 801e414:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 801e418:	fb05 f501 	mul.w	r5, r5, r1
 801e41c:	d05f      	beq.n	801e4de <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b2>
 801e41e:	f1c6 09ff 	rsb	r9, r6, #255	; 0xff
 801e422:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801e426:	b2b6      	uxth	r6, r6
 801e428:	fa1f f989 	uxth.w	r9, r9
 801e42c:	970b      	str	r7, [sp, #44]	; 0x2c
 801e42e:	42a8      	cmp	r0, r5
 801e430:	d26f      	bcs.n	801e512 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 801e432:	eb00 010b 	add.w	r1, r0, fp
 801e436:	4288      	cmp	r0, r1
 801e438:	4623      	mov	r3, r4
 801e43a:	d244      	bcs.n	801e4c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19a>
 801e43c:	781b      	ldrb	r3, [r3, #0]
 801e43e:	8807      	ldrh	r7, [r0, #0]
 801e440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801e444:	ea4f 2c27 	mov.w	ip, r7, asr #8
 801e448:	ea4f 2e23 	mov.w	lr, r3, asr #8
 801e44c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e450:	fb1c fc09 	smulbb	ip, ip, r9
 801e454:	ea4f 0ae7 	mov.w	sl, r7, asr #3
 801e458:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801e45c:	00ff      	lsls	r7, r7, #3
 801e45e:	fb0e ce06 	mla	lr, lr, r6, ip
 801e462:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801e466:	ea4f 0ce3 	mov.w	ip, r3, asr #3
 801e46a:	b2ff      	uxtb	r7, r7
 801e46c:	00db      	lsls	r3, r3, #3
 801e46e:	fa1f fe8e 	uxth.w	lr, lr
 801e472:	fb1a fa09 	smulbb	sl, sl, r9
 801e476:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801e47a:	b2db      	uxtb	r3, r3
 801e47c:	fb17 f709 	smulbb	r7, r7, r9
 801e480:	fb0c ac06 	mla	ip, ip, r6, sl
 801e484:	fb03 7306 	mla	r3, r3, r6, r7
 801e488:	f10e 0a01 	add.w	sl, lr, #1
 801e48c:	b29b      	uxth	r3, r3
 801e48e:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801e492:	f40e 4a78 	and.w	sl, lr, #63488	; 0xf800
 801e496:	f103 0e01 	add.w	lr, r3, #1
 801e49a:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801e49e:	fa1f fc8c 	uxth.w	ip, ip
 801e4a2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e4a6:	ea4a 0e03 	orr.w	lr, sl, r3
 801e4aa:	f10c 0a01 	add.w	sl, ip, #1
 801e4ae:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801e4b2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801e4b6:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801e4ba:	ea4e 0e0c 	orr.w	lr, lr, ip
 801e4be:	3401      	adds	r4, #1
 801e4c0:	f820 eb02 	strh.w	lr, [r0], #2
 801e4c4:	e7b7      	b.n	801e436 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x10a>
 801e4c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e4c8:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 801e4cc:	881b      	ldrh	r3, [r3, #0]
 801e4ce:	eba1 0108 	sub.w	r1, r1, r8
 801e4d2:	eba3 0308 	sub.w	r3, r3, r8
 801e4d6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e4da:	440c      	add	r4, r1
 801e4dc:	e7a7      	b.n	801e42e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x102>
 801e4de:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801e4e2:	42a8      	cmp	r0, r5
 801e4e4:	d215      	bcs.n	801e512 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 801e4e6:	eb00 010b 	add.w	r1, r0, fp
 801e4ea:	4288      	cmp	r0, r1
 801e4ec:	d206      	bcs.n	801e4fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1d0>
 801e4ee:	f814 3b01 	ldrb.w	r3, [r4], #1
 801e4f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801e4f6:	f820 3b02 	strh.w	r3, [r0], #2
 801e4fa:	e7f6      	b.n	801e4ea <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1be>
 801e4fc:	883b      	ldrh	r3, [r7, #0]
 801e4fe:	eba3 0308 	sub.w	r3, r3, r8
 801e502:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e506:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801e50a:	eba3 0308 	sub.w	r3, r3, r8
 801e50e:	441c      	add	r4, r3
 801e510:	e7e7      	b.n	801e4e2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b6>
 801e512:	4b07      	ldr	r3, [pc, #28]	; (801e530 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
 801e514:	6818      	ldr	r0, [r3, #0]
 801e516:	6803      	ldr	r3, [r0, #0]
 801e518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e51a:	4798      	blx	r3
 801e51c:	e766      	b.n	801e3ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801e51e:	bf00      	nop
 801e520:	0802c504 	.word	0x0802c504
 801e524:	0802cbcc 	.word	0x0802cbcc
 801e528:	0802c89f 	.word	0x0802c89f
 801e52c:	2000a0ea 	.word	0x2000a0ea
 801e530:	2000a0f0 	.word	0x2000a0f0

0801e534 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801e534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e538:	4614      	mov	r4, r2
 801e53a:	880a      	ldrh	r2, [r1, #0]
 801e53c:	b091      	sub	sp, #68	; 0x44
 801e53e:	2a01      	cmp	r2, #1
 801e540:	4606      	mov	r6, r0
 801e542:	4688      	mov	r8, r1
 801e544:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801e548:	d006      	beq.n	801e558 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 801e54a:	4b7c      	ldr	r3, [pc, #496]	; (801e73c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x208>)
 801e54c:	4a7c      	ldr	r2, [pc, #496]	; (801e740 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20c>)
 801e54e:	487d      	ldr	r0, [pc, #500]	; (801e744 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x210>)
 801e550:	f240 1197 	movw	r1, #407	; 0x197
 801e554:	f008 fb66 	bl	8026c24 <__assert_func>
 801e558:	2f00      	cmp	r7, #0
 801e55a:	d04b      	beq.n	801e5f4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801e55c:	6820      	ldr	r0, [r4, #0]
 801e55e:	6861      	ldr	r1, [r4, #4]
 801e560:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 801e750 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801e564:	ad0c      	add	r5, sp, #48	; 0x30
 801e566:	c503      	stmia	r5!, {r0, r1}
 801e568:	6818      	ldr	r0, [r3, #0]
 801e56a:	6859      	ldr	r1, [r3, #4]
 801e56c:	ad0e      	add	r5, sp, #56	; 0x38
 801e56e:	c503      	stmia	r5!, {r0, r1}
 801e570:	a80c      	add	r0, sp, #48	; 0x30
 801e572:	f7f9 fab1 	bl	8017ad8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e576:	4621      	mov	r1, r4
 801e578:	a80e      	add	r0, sp, #56	; 0x38
 801e57a:	f7f9 fa95 	bl	8017aa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e57e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e582:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e586:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801e58a:	f8da 0000 	ldr.w	r0, [sl]
 801e58e:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801e592:	f9bd 903e 	ldrsh.w	r9, [sp, #62]	; 0x3e
 801e596:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e59a:	1874      	adds	r4, r6, r1
 801e59c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801e5a0:	4e69      	ldr	r6, [pc, #420]	; (801e748 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x214>)
 801e5a2:	440a      	add	r2, r1
 801e5a4:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801e5a8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801e5ac:	4413      	add	r3, r2
 801e5ae:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e5b2:	6803      	ldr	r3, [r0, #0]
 801e5b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e5b8:	4798      	blx	r3
 801e5ba:	2801      	cmp	r0, #1
 801e5bc:	d11d      	bne.n	801e5fa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 801e5be:	220b      	movs	r2, #11
 801e5c0:	2100      	movs	r1, #0
 801e5c2:	e9cd 2107 	strd	r2, r1, [sp, #28]
 801e5c6:	8832      	ldrh	r2, [r6, #0]
 801e5c8:	9704      	str	r7, [sp, #16]
 801e5ca:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801e5ce:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801e5d2:	9203      	str	r2, [sp, #12]
 801e5d4:	fa1f f289 	uxth.w	r2, r9
 801e5d8:	9202      	str	r2, [sp, #8]
 801e5da:	b2ad      	uxth	r5, r5
 801e5dc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e5e0:	9200      	str	r2, [sp, #0]
 801e5e2:	9501      	str	r5, [sp, #4]
 801e5e4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e5e8:	f8da 0000 	ldr.w	r0, [sl]
 801e5ec:	4642      	mov	r2, r8
 801e5ee:	4621      	mov	r1, r4
 801e5f0:	f7f6 ffd6 	bl	80155a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801e5f4:	b011      	add	sp, #68	; 0x44
 801e5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5fa:	f8da 0000 	ldr.w	r0, [sl]
 801e5fe:	6803      	ldr	r3, [r0, #0]
 801e600:	6a1b      	ldr	r3, [r3, #32]
 801e602:	4798      	blx	r3
 801e604:	8832      	ldrh	r2, [r6, #0]
 801e606:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e60a:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801e60e:	2fff      	cmp	r7, #255	; 0xff
 801e610:	fb02 1303 	mla	r3, r2, r3, r1
 801e614:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e618:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 801e61c:	fb09 f902 	mul.w	r9, r9, r2
 801e620:	d056      	beq.n	801e6d0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19c>
 801e622:	ea6f 0c07 	mvn.w	ip, r7
 801e626:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 801e62a:	b2bb      	uxth	r3, r7
 801e62c:	fa5f fc8c 	uxtb.w	ip, ip
 801e630:	960b      	str	r6, [sp, #44]	; 0x2c
 801e632:	4548      	cmp	r0, r9
 801e634:	d27b      	bcs.n	801e72e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 801e636:	eb00 0a0e 	add.w	sl, r0, lr
 801e63a:	4550      	cmp	r0, sl
 801e63c:	4622      	mov	r2, r4
 801e63e:	d23d      	bcs.n	801e6bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x188>
 801e640:	7811      	ldrb	r1, [r2, #0]
 801e642:	2604      	movs	r6, #4
 801e644:	2203      	movs	r2, #3
 801e646:	fb12 6101 	smlabb	r1, r2, r1, r6
 801e64a:	eb08 0b01 	add.w	fp, r8, r1
 801e64e:	8802      	ldrh	r2, [r0, #0]
 801e650:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801e654:	f89b b001 	ldrb.w	fp, [fp, #1]
 801e658:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e65c:	1217      	asrs	r7, r2, #8
 801e65e:	fb16 f603 	smulbb	r6, r6, r3
 801e662:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e666:	fb07 670c 	mla	r7, r7, ip, r6
 801e66a:	10d6      	asrs	r6, r2, #3
 801e66c:	00d2      	lsls	r2, r2, #3
 801e66e:	b2d2      	uxtb	r2, r2
 801e670:	fb1b fb03 	smulbb	fp, fp, r3
 801e674:	fb12 f20c 	smulbb	r2, r2, ip
 801e678:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e67c:	b2bf      	uxth	r7, r7
 801e67e:	fb06 b60c 	mla	r6, r6, ip, fp
 801e682:	fb01 2103 	mla	r1, r1, r3, r2
 801e686:	b2b6      	uxth	r6, r6
 801e688:	b289      	uxth	r1, r1
 801e68a:	1c7a      	adds	r2, r7, #1
 801e68c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801e690:	f106 0b01 	add.w	fp, r6, #1
 801e694:	1c4a      	adds	r2, r1, #1
 801e696:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801e69a:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801e69e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e6a2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e6a6:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801e6aa:	4317      	orrs	r7, r2
 801e6ac:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801e6b0:	ea47 070b 	orr.w	r7, r7, fp
 801e6b4:	3401      	adds	r4, #1
 801e6b6:	f820 7b02 	strh.w	r7, [r0], #2
 801e6ba:	e7be      	b.n	801e63a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 801e6bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e6be:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 801e6c2:	8812      	ldrh	r2, [r2, #0]
 801e6c4:	1b49      	subs	r1, r1, r5
 801e6c6:	1b52      	subs	r2, r2, r5
 801e6c8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801e6cc:	440c      	add	r4, r1
 801e6ce:	e7b0      	b.n	801e632 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xfe>
 801e6d0:	491e      	ldr	r1, [pc, #120]	; (801e74c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801e6d2:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 801e6d6:	2203      	movs	r2, #3
 801e6d8:	2704      	movs	r7, #4
 801e6da:	4548      	cmp	r0, r9
 801e6dc:	d227      	bcs.n	801e72e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 801e6de:	eb00 0c0e 	add.w	ip, r0, lr
 801e6e2:	4560      	cmp	r0, ip
 801e6e4:	4623      	mov	r3, r4
 801e6e6:	d219      	bcs.n	801e71c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801e6e8:	f893 a000 	ldrb.w	sl, [r3]
 801e6ec:	fb12 7a0a 	smlabb	sl, r2, sl, r7
 801e6f0:	eb08 0b0a 	add.w	fp, r8, sl
 801e6f4:	f818 a00a 	ldrb.w	sl, [r8, sl]
 801e6f8:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801e6fc:	f89b b001 	ldrb.w	fp, [fp, #1]
 801e700:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801e704:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801e708:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801e70c:	ea43 030b 	orr.w	r3, r3, fp
 801e710:	ea43 03da 	orr.w	r3, r3, sl, lsr #3
 801e714:	3401      	adds	r4, #1
 801e716:	f820 3b02 	strh.w	r3, [r0], #2
 801e71a:	e7e2      	b.n	801e6e2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ae>
 801e71c:	8833      	ldrh	r3, [r6, #0]
 801e71e:	1b5b      	subs	r3, r3, r5
 801e720:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e724:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801e728:	1b5b      	subs	r3, r3, r5
 801e72a:	441c      	add	r4, r3
 801e72c:	e7d5      	b.n	801e6da <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a6>
 801e72e:	4b08      	ldr	r3, [pc, #32]	; (801e750 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801e730:	6818      	ldr	r0, [r3, #0]
 801e732:	6803      	ldr	r3, [r0, #0]
 801e734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e736:	4798      	blx	r3
 801e738:	e75c      	b.n	801e5f4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801e73a:	bf00      	nop
 801e73c:	0802c552 	.word	0x0802c552
 801e740:	0802cc55 	.word	0x0802cc55
 801e744:	0802c89f 	.word	0x0802c89f
 801e748:	2000a0ea 	.word	0x2000a0ea
 801e74c:	fffff800 	.word	0xfffff800
 801e750:	2000a0f0 	.word	0x2000a0f0

0801e754 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801e754:	b430      	push	{r4, r5}
 801e756:	780d      	ldrb	r5, [r1, #0]
 801e758:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801e75c:	2d01      	cmp	r5, #1
 801e75e:	d00a      	beq.n	801e776 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801e760:	d305      	bcc.n	801e76e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801e762:	2d02      	cmp	r5, #2
 801e764:	d10b      	bne.n	801e77e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801e766:	9402      	str	r4, [sp, #8]
 801e768:	bc30      	pop	{r4, r5}
 801e76a:	f7ff bddf 	b.w	801e32c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801e76e:	9402      	str	r4, [sp, #8]
 801e770:	bc30      	pop	{r4, r5}
 801e772:	f7ff bce7 	b.w	801e144 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801e776:	9402      	str	r4, [sp, #8]
 801e778:	bc30      	pop	{r4, r5}
 801e77a:	f7ff bedb 	b.w	801e534 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801e77e:	bc30      	pop	{r4, r5}
 801e780:	4770      	bx	lr
	...

0801e784 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801e784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e788:	4604      	mov	r4, r0
 801e78a:	b087      	sub	sp, #28
 801e78c:	6810      	ldr	r0, [r2, #0]
 801e78e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801e792:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801e9cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801e796:	460e      	mov	r6, r1
 801e798:	6851      	ldr	r1, [r2, #4]
 801e79a:	ad02      	add	r5, sp, #8
 801e79c:	c503      	stmia	r5!, {r0, r1}
 801e79e:	6818      	ldr	r0, [r3, #0]
 801e7a0:	6859      	ldr	r1, [r3, #4]
 801e7a2:	ad04      	add	r5, sp, #16
 801e7a4:	4617      	mov	r7, r2
 801e7a6:	c503      	stmia	r5!, {r0, r1}
 801e7a8:	a802      	add	r0, sp, #8
 801e7aa:	f7f9 f995 	bl	8017ad8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e7ae:	4639      	mov	r1, r7
 801e7b0:	a804      	add	r0, sp, #16
 801e7b2:	f7f9 f979 	bl	8017aa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e7b6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801e7ba:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e7be:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801e7c2:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801e7c6:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801e7ca:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e7ce:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801e7d2:	440e      	add	r6, r1
 801e7d4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801e7d8:	440a      	add	r2, r1
 801e7da:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e7de:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801e7e2:	4413      	add	r3, r2
 801e7e4:	f8ad 3012 	strh.w	r3, [sp, #18]
 801e7e8:	4b77      	ldr	r3, [pc, #476]	; (801e9c8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801e7ea:	6818      	ldr	r0, [r3, #0]
 801e7ec:	6803      	ldr	r3, [r0, #0]
 801e7ee:	6a1b      	ldr	r3, [r3, #32]
 801e7f0:	4798      	blx	r3
 801e7f2:	f8b9 b000 	ldrh.w	fp, [r9]
 801e7f6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e7fa:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801e7fe:	fb0b 2303 	mla	r3, fp, r3, r2
 801e802:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e806:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e80a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801e80e:	fb05 f50b 	mul.w	r5, r5, fp
 801e812:	9300      	str	r3, [sp, #0]
 801e814:	d068      	beq.n	801e8e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x164>
 801e816:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801e81a:	4558      	cmp	r0, fp
 801e81c:	f080 80cc 	bcs.w	801e9b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801e820:	9b00      	ldr	r3, [sp, #0]
 801e822:	18c3      	adds	r3, r0, r3
 801e824:	9301      	str	r3, [sp, #4]
 801e826:	4631      	mov	r1, r6
 801e828:	9b01      	ldr	r3, [sp, #4]
 801e82a:	4298      	cmp	r0, r3
 801e82c:	d24e      	bcs.n	801e8cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x148>
 801e82e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e832:	2a00      	cmp	r2, #0
 801e834:	d047      	beq.n	801e8c6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 801e836:	fb0a f202 	mul.w	r2, sl, r2
 801e83a:	1c53      	adds	r3, r2, #1
 801e83c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e840:	121b      	asrs	r3, r3, #8
 801e842:	d040      	beq.n	801e8c6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 801e844:	8802      	ldrh	r2, [r0, #0]
 801e846:	f8b4 c000 	ldrh.w	ip, [r4]
 801e84a:	b29e      	uxth	r6, r3
 801e84c:	1215      	asrs	r5, r2, #8
 801e84e:	43db      	mvns	r3, r3
 801e850:	b2db      	uxtb	r3, r3
 801e852:	ea4f 272c 	mov.w	r7, ip, asr #8
 801e856:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801e85a:	fb15 f503 	smulbb	r5, r5, r3
 801e85e:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801e862:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e866:	00d2      	lsls	r2, r2, #3
 801e868:	fb07 5706 	mla	r7, r7, r6, r5
 801e86c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801e870:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801e874:	b2d2      	uxtb	r2, r2
 801e876:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e87a:	fb1e fe03 	smulbb	lr, lr, r3
 801e87e:	fb12 f203 	smulbb	r2, r2, r3
 801e882:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801e886:	fa5f fc8c 	uxtb.w	ip, ip
 801e88a:	fb05 e506 	mla	r5, r5, r6, lr
 801e88e:	fb0c 2c06 	mla	ip, ip, r6, r2
 801e892:	b2bf      	uxth	r7, r7
 801e894:	b2ad      	uxth	r5, r5
 801e896:	fa1f fc8c 	uxth.w	ip, ip
 801e89a:	1c7b      	adds	r3, r7, #1
 801e89c:	f10c 0601 	add.w	r6, ip, #1
 801e8a0:	f105 0e01 	add.w	lr, r5, #1
 801e8a4:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801e8a8:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801e8ac:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801e8b0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e8b4:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801e8b8:	096d      	lsrs	r5, r5, #5
 801e8ba:	ea47 070c 	orr.w	r7, r7, ip
 801e8be:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e8c2:	432f      	orrs	r7, r5
 801e8c4:	8007      	strh	r7, [r0, #0]
 801e8c6:	3002      	adds	r0, #2
 801e8c8:	3402      	adds	r4, #2
 801e8ca:	e7ad      	b.n	801e828 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801e8cc:	f8b9 3000 	ldrh.w	r3, [r9]
 801e8d0:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801e8d4:	eba3 0308 	sub.w	r3, r3, r8
 801e8d8:	eba6 0608 	sub.w	r6, r6, r8
 801e8dc:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801e8e0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e8e4:	440e      	add	r6, r1
 801e8e6:	e798      	b.n	801e81a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801e8e8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801e8ec:	42a8      	cmp	r0, r5
 801e8ee:	d263      	bcs.n	801e9b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801e8f0:	9b00      	ldr	r3, [sp, #0]
 801e8f2:	4631      	mov	r1, r6
 801e8f4:	eb00 0b03 	add.w	fp, r0, r3
 801e8f8:	4558      	cmp	r0, fp
 801e8fa:	d24f      	bcs.n	801e99c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801e8fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e900:	b12b      	cbz	r3, 801e90e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 801e902:	2bff      	cmp	r3, #255	; 0xff
 801e904:	f8b4 e000 	ldrh.w	lr, [r4]
 801e908:	d104      	bne.n	801e914 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x190>
 801e90a:	f8a0 e000 	strh.w	lr, [r0]
 801e90e:	3002      	adds	r0, #2
 801e910:	3402      	adds	r4, #2
 801e912:	e7f1      	b.n	801e8f8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x174>
 801e914:	8802      	ldrh	r2, [r0, #0]
 801e916:	b29f      	uxth	r7, r3
 801e918:	1216      	asrs	r6, r2, #8
 801e91a:	43db      	mvns	r3, r3
 801e91c:	b2db      	uxtb	r3, r3
 801e91e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801e922:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e926:	fb16 f603 	smulbb	r6, r6, r3
 801e92a:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801e92e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e932:	00d2      	lsls	r2, r2, #3
 801e934:	fb0c 6c07 	mla	ip, ip, r7, r6
 801e938:	b2d2      	uxtb	r2, r2
 801e93a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801e93e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801e942:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e946:	fb1a fa03 	smulbb	sl, sl, r3
 801e94a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e94e:	fb12 f303 	smulbb	r3, r2, r3
 801e952:	fa5f fe8e 	uxtb.w	lr, lr
 801e956:	fb06 a607 	mla	r6, r6, r7, sl
 801e95a:	fb0e 3e07 	mla	lr, lr, r7, r3
 801e95e:	fa1f fc8c 	uxth.w	ip, ip
 801e962:	b2b6      	uxth	r6, r6
 801e964:	fa1f fe8e 	uxth.w	lr, lr
 801e968:	f10c 0201 	add.w	r2, ip, #1
 801e96c:	f10e 0301 	add.w	r3, lr, #1
 801e970:	f106 0a01 	add.w	sl, r6, #1
 801e974:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801e978:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801e97c:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801e980:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e984:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801e988:	0976      	lsrs	r6, r6, #5
 801e98a:	ea4c 0c0e 	orr.w	ip, ip, lr
 801e98e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e992:	ea4c 0c06 	orr.w	ip, ip, r6
 801e996:	f8a0 c000 	strh.w	ip, [r0]
 801e99a:	e7b8      	b.n	801e90e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 801e99c:	f8b9 3000 	ldrh.w	r3, [r9]
 801e9a0:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801e9a4:	eba3 0308 	sub.w	r3, r3, r8
 801e9a8:	eba6 0608 	sub.w	r6, r6, r8
 801e9ac:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801e9b0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e9b4:	440e      	add	r6, r1
 801e9b6:	e799      	b.n	801e8ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x168>
 801e9b8:	4b03      	ldr	r3, [pc, #12]	; (801e9c8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801e9ba:	6818      	ldr	r0, [r3, #0]
 801e9bc:	6803      	ldr	r3, [r0, #0]
 801e9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e9c0:	4798      	blx	r3
 801e9c2:	b007      	add	sp, #28
 801e9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9c8:	2000a0f0 	.word	0x2000a0f0
 801e9cc:	2000a0ea 	.word	0x2000a0ea

0801e9d0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801e9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9d4:	b089      	sub	sp, #36	; 0x24
 801e9d6:	4682      	mov	sl, r0
 801e9d8:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801e9dc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e9de:	460d      	mov	r5, r1
 801e9e0:	4691      	mov	r9, r2
 801e9e2:	4698      	mov	r8, r3
 801e9e4:	b3ae      	cbz	r6, 801ea52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801e9e6:	4608      	mov	r0, r1
 801e9e8:	f7fc fa0a 	bl	801ae00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e9ec:	4607      	mov	r7, r0
 801e9ee:	4628      	mov	r0, r5
 801e9f0:	f7fc fa40 	bl	801ae74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e9f4:	f8ad 000e 	strh.w	r0, [sp, #14]
 801e9f8:	4628      	mov	r0, r5
 801e9fa:	f8ad 9008 	strh.w	r9, [sp, #8]
 801e9fe:	f8ad 800a 	strh.w	r8, [sp, #10]
 801ea02:	f8ad 700c 	strh.w	r7, [sp, #12]
 801ea06:	f7fc fb8d 	bl	801b124 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ea0a:	b178      	cbz	r0, 801ea2c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801ea0c:	4628      	mov	r0, r5
 801ea0e:	f7fc fb89 	bl	801b124 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ea12:	2802      	cmp	r0, #2
 801ea14:	d00a      	beq.n	801ea2c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801ea16:	4628      	mov	r0, r5
 801ea18:	f7fc fb84 	bl	801b124 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ea1c:	280b      	cmp	r0, #11
 801ea1e:	d005      	beq.n	801ea2c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801ea20:	4b69      	ldr	r3, [pc, #420]	; (801ebc8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f8>)
 801ea22:	4a6a      	ldr	r2, [pc, #424]	; (801ebcc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
 801ea24:	486a      	ldr	r0, [pc, #424]	; (801ebd0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
 801ea26:	214b      	movs	r1, #75	; 0x4b
 801ea28:	f008 f8fc 	bl	8026c24 <__assert_func>
 801ea2c:	4628      	mov	r0, r5
 801ea2e:	f7fc faef 	bl	801b010 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ea32:	4607      	mov	r7, r0
 801ea34:	4628      	mov	r0, r5
 801ea36:	f7fc fb1d 	bl	801b074 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801ea3a:	4681      	mov	r9, r0
 801ea3c:	4628      	mov	r0, r5
 801ea3e:	f7fc fb71 	bl	801b124 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ea42:	2802      	cmp	r0, #2
 801ea44:	d108      	bne.n	801ea58 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 801ea46:	4633      	mov	r3, r6
 801ea48:	4622      	mov	r2, r4
 801ea4a:	a902      	add	r1, sp, #8
 801ea4c:	4638      	mov	r0, r7
 801ea4e:	f7ff fa69 	bl	801df24 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ea52:	b009      	add	sp, #36	; 0x24
 801ea54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea58:	4628      	mov	r0, r5
 801ea5a:	f7fc fb63 	bl	801b124 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ea5e:	280b      	cmp	r0, #11
 801ea60:	d107      	bne.n	801ea72 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801ea62:	9600      	str	r6, [sp, #0]
 801ea64:	4623      	mov	r3, r4
 801ea66:	aa02      	add	r2, sp, #8
 801ea68:	4649      	mov	r1, r9
 801ea6a:	4638      	mov	r0, r7
 801ea6c:	f7ff fe72 	bl	801e754 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801ea70:	e7ef      	b.n	801ea52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801ea72:	4628      	mov	r0, r5
 801ea74:	f7fc fa92 	bl	801af9c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801ea78:	b950      	cbnz	r0, 801ea90 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801ea7a:	e9cd 6000 	strd	r6, r0, [sp]
 801ea7e:	f8da 3000 	ldr.w	r3, [sl]
 801ea82:	aa02      	add	r2, sp, #8
 801ea84:	68dd      	ldr	r5, [r3, #12]
 801ea86:	4639      	mov	r1, r7
 801ea88:	4623      	mov	r3, r4
 801ea8a:	4650      	mov	r0, sl
 801ea8c:	47a8      	blx	r5
 801ea8e:	e7e0      	b.n	801ea52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801ea90:	f10d 0818 	add.w	r8, sp, #24
 801ea94:	4629      	mov	r1, r5
 801ea96:	4640      	mov	r0, r8
 801ea98:	f7fc fa26 	bl	801aee8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801ea9c:	e898 0003 	ldmia.w	r8, {r0, r1}
 801eaa0:	ad04      	add	r5, sp, #16
 801eaa2:	e885 0003 	stmia.w	r5, {r0, r1}
 801eaa6:	4628      	mov	r0, r5
 801eaa8:	4621      	mov	r1, r4
 801eaaa:	f7f6 f915 	bl	8014cd8 <_ZN8touchgfx4RectaNERKS0_>
 801eaae:	4628      	mov	r0, r5
 801eab0:	f7f6 f955 	bl	8014d5e <_ZNK8touchgfx4Rect7isEmptyEv>
 801eab4:	b138      	cbz	r0, 801eac6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf6>
 801eab6:	9600      	str	r6, [sp, #0]
 801eab8:	4623      	mov	r3, r4
 801eaba:	aa02      	add	r2, sp, #8
 801eabc:	4649      	mov	r1, r9
 801eabe:	4638      	mov	r0, r7
 801eac0:	f7ff fe60 	bl	801e784 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801eac4:	e7c5      	b.n	801ea52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801eac6:	e9cd 6000 	strd	r6, r0, [sp]
 801eaca:	f8da 3000 	ldr.w	r3, [sl]
 801eace:	aa02      	add	r2, sp, #8
 801ead0:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801ead4:	4639      	mov	r1, r7
 801ead6:	462b      	mov	r3, r5
 801ead8:	4650      	mov	r0, sl
 801eada:	47d8      	blx	fp
 801eadc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801eae0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801eae4:	4293      	cmp	r3, r2
 801eae6:	dd13      	ble.n	801eb10 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x140>
 801eae8:	f9b4 0000 	ldrsh.w	r0, [r4]
 801eaec:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801eaf0:	f8ad 0018 	strh.w	r0, [sp, #24]
 801eaf4:	1a9b      	subs	r3, r3, r2
 801eaf6:	f8ad 201a 	strh.w	r2, [sp, #26]
 801eafa:	f8ad 101c 	strh.w	r1, [sp, #28]
 801eafe:	f8ad 301e 	strh.w	r3, [sp, #30]
 801eb02:	9600      	str	r6, [sp, #0]
 801eb04:	4643      	mov	r3, r8
 801eb06:	aa02      	add	r2, sp, #8
 801eb08:	4649      	mov	r1, r9
 801eb0a:	4638      	mov	r0, r7
 801eb0c:	f7ff fe3a 	bl	801e784 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801eb10:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801eb14:	f9b4 2000 	ldrsh.w	r2, [r4]
 801eb18:	4293      	cmp	r3, r2
 801eb1a:	dd13      	ble.n	801eb44 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 801eb1c:	1a9b      	subs	r3, r3, r2
 801eb1e:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801eb22:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801eb26:	f8ad 2018 	strh.w	r2, [sp, #24]
 801eb2a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801eb2e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801eb32:	f8ad 101e 	strh.w	r1, [sp, #30]
 801eb36:	9600      	str	r6, [sp, #0]
 801eb38:	4643      	mov	r3, r8
 801eb3a:	aa02      	add	r2, sp, #8
 801eb3c:	4649      	mov	r1, r9
 801eb3e:	4638      	mov	r0, r7
 801eb40:	f7ff fe20 	bl	801e784 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801eb44:	88a2      	ldrh	r2, [r4, #4]
 801eb46:	8823      	ldrh	r3, [r4, #0]
 801eb48:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801eb4c:	4413      	add	r3, r2
 801eb4e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801eb52:	440a      	add	r2, r1
 801eb54:	b29b      	uxth	r3, r3
 801eb56:	b292      	uxth	r2, r2
 801eb58:	b211      	sxth	r1, r2
 801eb5a:	b218      	sxth	r0, r3
 801eb5c:	4288      	cmp	r0, r1
 801eb5e:	dd13      	ble.n	801eb88 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b8>
 801eb60:	1a9b      	subs	r3, r3, r2
 801eb62:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801eb66:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 801eb6a:	f8ad 1018 	strh.w	r1, [sp, #24]
 801eb6e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801eb72:	f8ad 001e 	strh.w	r0, [sp, #30]
 801eb76:	9600      	str	r6, [sp, #0]
 801eb78:	4643      	mov	r3, r8
 801eb7a:	aa02      	add	r2, sp, #8
 801eb7c:	4649      	mov	r1, r9
 801eb7e:	4638      	mov	r0, r7
 801eb80:	f8ad 501a 	strh.w	r5, [sp, #26]
 801eb84:	f7ff fdfe 	bl	801e784 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801eb88:	88e2      	ldrh	r2, [r4, #6]
 801eb8a:	8863      	ldrh	r3, [r4, #2]
 801eb8c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801eb90:	4413      	add	r3, r2
 801eb92:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801eb96:	440a      	add	r2, r1
 801eb98:	b29b      	uxth	r3, r3
 801eb9a:	b292      	uxth	r2, r2
 801eb9c:	b211      	sxth	r1, r2
 801eb9e:	b218      	sxth	r0, r3
 801eba0:	4288      	cmp	r0, r1
 801eba2:	f77f af56 	ble.w	801ea52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801eba6:	f9b4 5000 	ldrsh.w	r5, [r4]
 801ebaa:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801ebae:	f8ad 5018 	strh.w	r5, [sp, #24]
 801ebb2:	1a9b      	subs	r3, r3, r2
 801ebb4:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ebb8:	f8ad 101a 	strh.w	r1, [sp, #26]
 801ebbc:	f8ad 001c 	strh.w	r0, [sp, #28]
 801ebc0:	9600      	str	r6, [sp, #0]
 801ebc2:	4643      	mov	r3, r8
 801ebc4:	e779      	b.n	801eaba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
 801ebc6:	bf00      	nop
 801ebc8:	0802c5a0 	.word	0x0802c5a0
 801ebcc:	0802ccde 	.word	0x0802ccde
 801ebd0:	0802c89f 	.word	0x0802c89f

0801ebd4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801ebd4:	b508      	push	{r3, lr}
 801ebd6:	b180      	cbz	r0, 801ebfa <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 801ebd8:	2902      	cmp	r1, #2
 801ebda:	d014      	beq.n	801ec06 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 801ebdc:	2903      	cmp	r1, #3
 801ebde:	d01d      	beq.n	801ec1c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801ebe0:	2901      	cmp	r1, #1
 801ebe2:	d101      	bne.n	801ebe8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801ebe4:	2001      	movs	r0, #1
 801ebe6:	bd08      	pop	{r3, pc}
 801ebe8:	4b0e      	ldr	r3, [pc, #56]	; (801ec24 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801ebea:	8818      	ldrh	r0, [r3, #0]
 801ebec:	b990      	cbnz	r0, 801ec14 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801ebee:	4b0e      	ldr	r3, [pc, #56]	; (801ec28 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 801ebf0:	4a0e      	ldr	r2, [pc, #56]	; (801ec2c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 801ebf2:	480f      	ldr	r0, [pc, #60]	; (801ec30 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 801ebf4:	2154      	movs	r1, #84	; 0x54
 801ebf6:	f008 f815 	bl	8026c24 <__assert_func>
 801ebfa:	2902      	cmp	r1, #2
 801ebfc:	d00e      	beq.n	801ec1c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801ebfe:	2903      	cmp	r1, #3
 801ec00:	d0f2      	beq.n	801ebe8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 801ec02:	2901      	cmp	r1, #1
 801ec04:	d1ee      	bne.n	801ebe4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 801ec06:	4b07      	ldr	r3, [pc, #28]	; (801ec24 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801ec08:	8818      	ldrh	r0, [r3, #0]
 801ec0a:	2800      	cmp	r0, #0
 801ec0c:	d0ef      	beq.n	801ebee <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801ec0e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801ec12:	e7e8      	b.n	801ebe6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801ec14:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801ec18:	4240      	negs	r0, r0
 801ec1a:	e7e4      	b.n	801ebe6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801ec1c:	f04f 30ff 	mov.w	r0, #4294967295
 801ec20:	e7e1      	b.n	801ebe6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801ec22:	bf00      	nop
 801ec24:	2000a0ea 	.word	0x2000a0ea
 801ec28:	0802c8d1 	.word	0x0802c8d1
 801ec2c:	0802ce5b 	.word	0x0802ce5b
 801ec30:	0802c913 	.word	0x0802c913

0801ec34 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801ec34:	b508      	push	{r3, lr}
 801ec36:	b180      	cbz	r0, 801ec5a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 801ec38:	2902      	cmp	r1, #2
 801ec3a:	d014      	beq.n	801ec66 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 801ec3c:	2903      	cmp	r1, #3
 801ec3e:	d018      	beq.n	801ec72 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801ec40:	2901      	cmp	r1, #1
 801ec42:	d001      	beq.n	801ec48 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801ec44:	2001      	movs	r0, #1
 801ec46:	e013      	b.n	801ec70 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801ec48:	4b0e      	ldr	r3, [pc, #56]	; (801ec84 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801ec4a:	8818      	ldrh	r0, [r3, #0]
 801ec4c:	b970      	cbnz	r0, 801ec6c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 801ec4e:	4b0e      	ldr	r3, [pc, #56]	; (801ec88 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 801ec50:	4a0e      	ldr	r2, [pc, #56]	; (801ec8c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 801ec52:	480f      	ldr	r0, [pc, #60]	; (801ec90 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 801ec54:	2154      	movs	r1, #84	; 0x54
 801ec56:	f007 ffe5 	bl	8026c24 <__assert_func>
 801ec5a:	2902      	cmp	r1, #2
 801ec5c:	d009      	beq.n	801ec72 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801ec5e:	2903      	cmp	r1, #3
 801ec60:	d0f0      	beq.n	801ec44 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 801ec62:	2901      	cmp	r1, #1
 801ec64:	d1f0      	bne.n	801ec48 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801ec66:	f04f 30ff 	mov.w	r0, #4294967295
 801ec6a:	e001      	b.n	801ec70 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801ec6c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801ec70:	bd08      	pop	{r3, pc}
 801ec72:	4b04      	ldr	r3, [pc, #16]	; (801ec84 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801ec74:	8818      	ldrh	r0, [r3, #0]
 801ec76:	2800      	cmp	r0, #0
 801ec78:	d0e9      	beq.n	801ec4e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 801ec7a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801ec7e:	4240      	negs	r0, r0
 801ec80:	e7f6      	b.n	801ec70 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801ec82:	bf00      	nop
 801ec84:	2000a0ea 	.word	0x2000a0ea
 801ec88:	0802c8d1 	.word	0x0802c8d1
 801ec8c:	0802ce5b 	.word	0x0802ce5b
 801ec90:	0802c913 	.word	0x0802c913

0801ec94 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801ec94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec98:	b099      	sub	sp, #100	; 0x64
 801ec9a:	910b      	str	r1, [sp, #44]	; 0x2c
 801ec9c:	a914      	add	r1, sp, #80	; 0x50
 801ec9e:	e881 000c 	stmia.w	r1, {r2, r3}
 801eca2:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801eca6:	9308      	str	r3, [sp, #32]
 801eca8:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 801ecac:	f89d 10a4 	ldrb.w	r1, [sp, #164]	; 0xa4
 801ecb0:	f893 b00d 	ldrb.w	fp, [r3, #13]
 801ecb4:	910c      	str	r1, [sp, #48]	; 0x30
 801ecb6:	f89d 10b0 	ldrb.w	r1, [sp, #176]	; 0xb0
 801ecba:	910d      	str	r1, [sp, #52]	; 0x34
 801ecbc:	7998      	ldrb	r0, [r3, #6]
 801ecbe:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 801ecc2:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 801ecc6:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 801ecca:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801ecce:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801ecd2:	ea4f 114b 	mov.w	r1, fp, lsl #5
 801ecd6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ecda:	4301      	orrs	r1, r0
 801ecdc:	9109      	str	r1, [sp, #36]	; 0x24
 801ecde:	f000 81e2 	beq.w	801f0a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x412>
 801ece2:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
 801ece6:	79d9      	ldrb	r1, [r3, #7]
 801ece8:	f40b 7b80 	and.w	fp, fp, #256	; 0x100
 801ecec:	ea51 0b0b 	orrs.w	fp, r1, fp
 801ecf0:	f000 81d9 	beq.w	801f0a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x412>
 801ecf4:	f993 3009 	ldrsb.w	r3, [r3, #9]
 801ecf8:	b29b      	uxth	r3, r3
 801ecfa:	2e00      	cmp	r6, #0
 801ecfc:	f000 80fc 	beq.w	801eef8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x264>
 801ed00:	1af6      	subs	r6, r6, r3
 801ed02:	b2b6      	uxth	r6, r6
 801ed04:	0433      	lsls	r3, r6, #16
 801ed06:	d502      	bpl.n	801ed0e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801ed08:	1bad      	subs	r5, r5, r6
 801ed0a:	b22d      	sxth	r5, r5
 801ed0c:	2600      	movs	r6, #0
 801ed0e:	f9b2 1000 	ldrsh.w	r1, [r2]
 801ed12:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801ed16:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801ed1a:	428d      	cmp	r5, r1
 801ed1c:	b28b      	uxth	r3, r1
 801ed1e:	bfbf      	itttt	lt
 801ed20:	18f6      	addlt	r6, r6, r3
 801ed22:	1b75      	sublt	r5, r6, r5
 801ed24:	b2ae      	uxthlt	r6, r5
 801ed26:	460d      	movlt	r5, r1
 801ed28:	8891      	ldrh	r1, [r2, #4]
 801ed2a:	440b      	add	r3, r1
 801ed2c:	b21b      	sxth	r3, r3
 801ed2e:	9311      	str	r3, [sp, #68]	; 0x44
 801ed30:	8853      	ldrh	r3, [r2, #2]
 801ed32:	88d2      	ldrh	r2, [r2, #6]
 801ed34:	4413      	add	r3, r2
 801ed36:	b21b      	sxth	r3, r3
 801ed38:	9310      	str	r3, [sp, #64]	; 0x40
 801ed3a:	4bb2      	ldr	r3, [pc, #712]	; (801f004 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x370>)
 801ed3c:	9a08      	ldr	r2, [sp, #32]
 801ed3e:	f893 9000 	ldrb.w	r9, [r3]
 801ed42:	f109 3cff 	add.w	ip, r9, #4294967295
 801ed46:	f1dc 0300 	rsbs	r3, ip, #0
 801ed4a:	eb43 030c 	adc.w	r3, r3, ip
 801ed4e:	930f      	str	r3, [sp, #60]	; 0x3c
 801ed50:	4629      	mov	r1, r5
 801ed52:	4653      	mov	r3, sl
 801ed54:	a814      	add	r0, sp, #80	; 0x50
 801ed56:	f7f8 fd17 	bl	8017788 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801ed5a:	4629      	mov	r1, r5
 801ed5c:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801ed60:	4653      	mov	r3, sl
 801ed62:	9a08      	ldr	r2, [sp, #32]
 801ed64:	a814      	add	r0, sp, #80	; 0x50
 801ed66:	f7f8 fd27 	bl	80177b8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801ed6a:	a918      	add	r1, sp, #96	; 0x60
 801ed6c:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801ed70:	a817      	add	r0, sp, #92	; 0x5c
 801ed72:	f7f8 fe83 	bl	8017a7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801ed76:	f1ba 0f00 	cmp.w	sl, #0
 801ed7a:	f040 80c0 	bne.w	801eefe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26a>
 801ed7e:	f1b9 0f01 	cmp.w	r9, #1
 801ed82:	f040 80c4 	bne.w	801ef0e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x27a>
 801ed86:	2301      	movs	r3, #1
 801ed88:	fa03 f308 	lsl.w	r3, r3, r8
 801ed8c:	3b01      	subs	r3, #1
 801ed8e:	b2db      	uxtb	r3, r3
 801ed90:	f1b8 0f01 	cmp.w	r8, #1
 801ed94:	930a      	str	r3, [sp, #40]	; 0x28
 801ed96:	f000 80e5 	beq.w	801ef64 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d0>
 801ed9a:	f1b8 0f02 	cmp.w	r8, #2
 801ed9e:	f000 80e4 	beq.w	801ef6a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d6>
 801eda2:	f1b8 0f04 	cmp.w	r8, #4
 801eda6:	bf15      	itete	ne
 801eda8:	46c1      	movne	r9, r8
 801edaa:	f04f 0904 	moveq.w	r9, #4
 801edae:	2301      	movne	r3, #1
 801edb0:	2311      	moveq	r3, #17
 801edb2:	9307      	str	r3, [sp, #28]
 801edb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801edb6:	b153      	cbz	r3, 801edce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13a>
 801edb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801edba:	2408      	movs	r4, #8
 801edbc:	fb94 f3f9 	sdiv	r3, r4, r9
 801edc0:	1e5c      	subs	r4, r3, #1
 801edc2:	4414      	add	r4, r2
 801edc4:	fb94 f4f3 	sdiv	r4, r4, r3
 801edc8:	fb14 f403 	smulbb	r4, r4, r3
 801edcc:	b2a4      	uxth	r4, r4
 801edce:	b906      	cbnz	r6, 801edd2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801edd0:	b16f      	cbz	r7, 801edee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15a>
 801edd2:	fb07 6304 	mla	r3, r7, r4, r6
 801edd6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801edd8:	fb08 f303 	mul.w	r3, r8, r3
 801eddc:	4639      	mov	r1, r7
 801edde:	f003 0707 	and.w	r7, r3, #7
 801ede2:	eb02 03d3 	add.w	r3, r2, r3, lsr #3
 801ede6:	9328      	str	r3, [sp, #160]	; 0xa0
 801ede8:	ebab 0301 	sub.w	r3, fp, r1
 801edec:	930e      	str	r3, [sp, #56]	; 0x38
 801edee:	4651      	mov	r1, sl
 801edf0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801edf2:	f7ff feef 	bl	801ebd4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801edf6:	4651      	mov	r1, sl
 801edf8:	4683      	mov	fp, r0
 801edfa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801edfc:	f7ff ff1a 	bl	801ec34 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801ee00:	9a08      	ldr	r2, [sp, #32]
 801ee02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ee04:	1a9b      	subs	r3, r3, r2
 801ee06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ee08:	429a      	cmp	r2, r3
 801ee0a:	bfa8      	it	ge
 801ee0c:	461a      	movge	r2, r3
 801ee0e:	2a00      	cmp	r2, #0
 801ee10:	4682      	mov	sl, r0
 801ee12:	9208      	str	r2, [sp, #32]
 801ee14:	f340 8147 	ble.w	801f0a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x412>
 801ee18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ee1a:	1bad      	subs	r5, r5, r6
 801ee1c:	1b5d      	subs	r5, r3, r5
 801ee1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee20:	429d      	cmp	r5, r3
 801ee22:	bfd4      	ite	le
 801ee24:	ebc6 0605 	rsble	r6, r6, r5
 801ee28:	ebc6 0603 	rsbgt	r6, r6, r3
 801ee2c:	2e00      	cmp	r6, #0
 801ee2e:	f340 813a 	ble.w	801f0a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x412>
 801ee32:	1ba4      	subs	r4, r4, r6
 801ee34:	fb09 f304 	mul.w	r3, r9, r4
 801ee38:	930e      	str	r3, [sp, #56]	; 0x38
 801ee3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ee3c:	2b00      	cmp	r3, #0
 801ee3e:	f040 809d 	bne.w	801ef7c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 801ee42:	4b71      	ldr	r3, [pc, #452]	; (801f008 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 801ee44:	6818      	ldr	r0, [r3, #0]
 801ee46:	6803      	ldr	r3, [r0, #0]
 801ee48:	6a1b      	ldr	r3, [r3, #32]
 801ee4a:	4798      	blx	r3
 801ee4c:	496f      	ldr	r1, [pc, #444]	; (801f00c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 801ee4e:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801ee52:	880c      	ldrh	r4, [r1, #0]
 801ee54:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 801ee58:	fb04 1303 	mla	r3, r4, r3, r1
 801ee5c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ee60:	9309      	str	r3, [sp, #36]	; 0x24
 801ee62:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ee64:	7819      	ldrb	r1, [r3, #0]
 801ee66:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ee68:	0a1b      	lsrs	r3, r3, #8
 801ee6a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801ee6e:	930f      	str	r3, [sp, #60]	; 0x3c
 801ee70:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ee72:	08db      	lsrs	r3, r3, #3
 801ee74:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801ee78:	9310      	str	r3, [sp, #64]	; 0x40
 801ee7a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ee7c:	00db      	lsls	r3, r3, #3
 801ee7e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801ee82:	9311      	str	r3, [sp, #68]	; 0x44
 801ee84:	ea4f 034b 	mov.w	r3, fp, lsl #1
 801ee88:	fb0b ab16 	mls	fp, fp, r6, sl
 801ee8c:	fb03 fa06 	mul.w	sl, r3, r6
 801ee90:	930c      	str	r3, [sp, #48]	; 0x30
 801ee92:	eb0a 034b 	add.w	r3, sl, fp, lsl #1
 801ee96:	9312      	str	r3, [sp, #72]	; 0x48
 801ee98:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ee9a:	4139      	asrs	r1, r7
 801ee9c:	b29b      	uxth	r3, r3
 801ee9e:	b2c9      	uxtb	r1, r1
 801eea0:	9313      	str	r3, [sp, #76]	; 0x4c
 801eea2:	9b08      	ldr	r3, [sp, #32]
 801eea4:	3b01      	subs	r3, #1
 801eea6:	9308      	str	r3, [sp, #32]
 801eea8:	3301      	adds	r3, #1
 801eeaa:	f000 80c3 	beq.w	801f034 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 801eeae:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801eeb2:	46b2      	mov	sl, r6
 801eeb4:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801eeb8:	f0c0 80aa 	bcc.w	801f010 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 801eebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eebe:	400b      	ands	r3, r1
 801eec0:	d00a      	beq.n	801eed8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x244>
 801eec2:	9807      	ldr	r0, [sp, #28]
 801eec4:	fb13 f300 	smulbb	r3, r3, r0
 801eec8:	2bfe      	cmp	r3, #254	; 0xfe
 801eeca:	dd59      	ble.n	801ef80 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ec>
 801eecc:	980d      	ldr	r0, [sp, #52]	; 0x34
 801eece:	28ff      	cmp	r0, #255	; 0xff
 801eed0:	d156      	bne.n	801ef80 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ec>
 801eed2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801eed4:	f8ae 4000 	strh.w	r4, [lr]
 801eed8:	4447      	add	r7, r8
 801eeda:	b2bf      	uxth	r7, r7
 801eedc:	2f07      	cmp	r7, #7
 801eede:	bf81      	itttt	hi
 801eee0:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801eee2:	7859      	ldrbhi	r1, [r3, #1]
 801eee4:	3301      	addhi	r3, #1
 801eee6:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801eee8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eeea:	bf9a      	itte	ls
 801eeec:	fa41 f109 	asrls.w	r1, r1, r9
 801eef0:	b2c9      	uxtbls	r1, r1
 801eef2:	2700      	movhi	r7, #0
 801eef4:	449e      	add	lr, r3
 801eef6:	e7dd      	b.n	801eeb4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x220>
 801eef8:	441d      	add	r5, r3
 801eefa:	b22d      	sxth	r5, r5
 801eefc:	e707      	b.n	801ed0e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801eefe:	f1ba 0f01 	cmp.w	sl, #1
 801ef02:	f47f af40 	bne.w	801ed86 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801ef06:	f1b9 0f01 	cmp.w	r9, #1
 801ef0a:	f47f af3c 	bne.w	801ed86 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801ef0e:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 801f008 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801ef12:	f8d9 0000 	ldr.w	r0, [r9]
 801ef16:	6803      	ldr	r3, [r0, #0]
 801ef18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ef1a:	4798      	blx	r3
 801ef1c:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801ef20:	464a      	mov	r2, r9
 801ef22:	d006      	beq.n	801ef32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29e>
 801ef24:	f1b8 0f04 	cmp.w	r8, #4
 801ef28:	d11a      	bne.n	801ef60 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801ef2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ef2c:	3300      	adds	r3, #0
 801ef2e:	bf18      	it	ne
 801ef30:	2301      	movne	r3, #1
 801ef32:	05c0      	lsls	r0, r0, #23
 801ef34:	f140 8087 	bpl.w	801f046 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801ef38:	f1b8 0f08 	cmp.w	r8, #8
 801ef3c:	f040 8083 	bne.w	801f046 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801ef40:	2b00      	cmp	r3, #0
 801ef42:	bf14      	ite	ne
 801ef44:	2180      	movne	r1, #128	; 0x80
 801ef46:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801ef4a:	2e00      	cmp	r6, #0
 801ef4c:	f040 80ae 	bne.w	801f0ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x418>
 801ef50:	2f00      	cmp	r7, #0
 801ef52:	f000 8082 	beq.w	801f05a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c6>
 801ef56:	23ff      	movs	r3, #255	; 0xff
 801ef58:	930a      	str	r3, [sp, #40]	; 0x28
 801ef5a:	46c1      	mov	r9, r8
 801ef5c:	2301      	movs	r3, #1
 801ef5e:	e728      	b.n	801edb2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x11e>
 801ef60:	2300      	movs	r3, #0
 801ef62:	e7e6      	b.n	801ef32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29e>
 801ef64:	46c1      	mov	r9, r8
 801ef66:	23ff      	movs	r3, #255	; 0xff
 801ef68:	e723      	b.n	801edb2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x11e>
 801ef6a:	46c1      	mov	r9, r8
 801ef6c:	2355      	movs	r3, #85	; 0x55
 801ef6e:	e720      	b.n	801edb2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x11e>
 801ef70:	23ff      	movs	r3, #255	; 0xff
 801ef72:	930a      	str	r3, [sp, #40]	; 0x28
 801ef74:	2301      	movs	r3, #1
 801ef76:	46c1      	mov	r9, r8
 801ef78:	9307      	str	r3, [sp, #28]
 801ef7a:	e71d      	b.n	801edb8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x124>
 801ef7c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ef7e:	e765      	b.n	801ee4c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1b8>
 801ef80:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ef82:	f8be 5000 	ldrh.w	r5, [lr]
 801ef86:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ef88:	fb10 f303 	smulbb	r3, r0, r3
 801ef8c:	b29b      	uxth	r3, r3
 801ef8e:	1c58      	adds	r0, r3, #1
 801ef90:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801ef94:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ef98:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ef9a:	fa1f fc83 	uxth.w	ip, r3
 801ef9e:	122c      	asrs	r4, r5, #8
 801efa0:	43db      	mvns	r3, r3
 801efa2:	b2db      	uxtb	r3, r3
 801efa4:	fb1c fb02 	smulbb	fp, ip, r2
 801efa8:	fb10 f00c 	smulbb	r0, r0, ip
 801efac:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801efb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801efb2:	fb04 0403 	mla	r4, r4, r3, r0
 801efb6:	10e8      	asrs	r0, r5, #3
 801efb8:	00ed      	lsls	r5, r5, #3
 801efba:	b2ed      	uxtb	r5, r5
 801efbc:	fb1c fc02 	smulbb	ip, ip, r2
 801efc0:	fb05 cc03 	mla	ip, r5, r3, ip
 801efc4:	b2a4      	uxth	r4, r4
 801efc6:	fa1f fc8c 	uxth.w	ip, ip
 801efca:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801efce:	fb00 b003 	mla	r0, r0, r3, fp
 801efd2:	1c63      	adds	r3, r4, #1
 801efd4:	f10c 0b01 	add.w	fp, ip, #1
 801efd8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801efdc:	eb0b 2b1c 	add.w	fp, fp, ip, lsr #8
 801efe0:	b280      	uxth	r0, r0
 801efe2:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 801efe6:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801efea:	ea44 040b 	orr.w	r4, r4, fp
 801efee:	f100 0b01 	add.w	fp, r0, #1
 801eff2:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 801eff6:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801effa:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801effe:	ea44 040b 	orr.w	r4, r4, fp
 801f002:	e767      	b.n	801eed4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x240>
 801f004:	2000a0e8 	.word	0x2000a0e8
 801f008:	2000a0f0 	.word	0x2000a0f0
 801f00c:	2000a0ea 	.word	0x2000a0ea
 801f010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f012:	b153      	cbz	r3, 801f02a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801f014:	441f      	add	r7, r3
 801f016:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f018:	b2bf      	uxth	r7, r7
 801f01a:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 801f01e:	f007 0707 	and.w	r7, r7, #7
 801f022:	7819      	ldrb	r1, [r3, #0]
 801f024:	9328      	str	r3, [sp, #160]	; 0xa0
 801f026:	4139      	asrs	r1, r7
 801f028:	b2c9      	uxtb	r1, r1
 801f02a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f02c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f02e:	441a      	add	r2, r3
 801f030:	9209      	str	r2, [sp, #36]	; 0x24
 801f032:	e736      	b.n	801eea2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x20e>
 801f034:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f036:	2b00      	cmp	r3, #0
 801f038:	d135      	bne.n	801f0a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x412>
 801f03a:	4b21      	ldr	r3, [pc, #132]	; (801f0c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x42c>)
 801f03c:	6818      	ldr	r0, [r3, #0]
 801f03e:	6803      	ldr	r3, [r0, #0]
 801f040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f042:	4798      	blx	r3
 801f044:	e02f      	b.n	801f0a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x412>
 801f046:	2b00      	cmp	r3, #0
 801f048:	f43f ae9d 	beq.w	801ed86 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801f04c:	2e00      	cmp	r6, #0
 801f04e:	f47f ae9a 	bne.w	801ed86 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801f052:	2f00      	cmp	r7, #0
 801f054:	f47f ae97 	bne.w	801ed86 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801f058:	2180      	movs	r1, #128	; 0x80
 801f05a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f05c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f05e:	18eb      	adds	r3, r5, r3
 801f060:	4283      	cmp	r3, r0
 801f062:	f73f ae90 	bgt.w	801ed86 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801f066:	9b08      	ldr	r3, [sp, #32]
 801f068:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f06a:	445b      	add	r3, fp
 801f06c:	4283      	cmp	r3, r0
 801f06e:	f73f ae8a 	bgt.w	801ed86 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 801f072:	6810      	ldr	r0, [r2, #0]
 801f074:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801f078:	6805      	ldr	r5, [r0, #0]
 801f07a:	9105      	str	r1, [sp, #20]
 801f07c:	f1b8 0f08 	cmp.w	r8, #8
 801f080:	bf18      	it	ne
 801f082:	3401      	addne	r4, #1
 801f084:	990d      	ldr	r1, [sp, #52]	; 0x34
 801f086:	9104      	str	r1, [sp, #16]
 801f088:	bf18      	it	ne
 801f08a:	f024 0401 	bicne.w	r4, r4, #1
 801f08e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801f090:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801f094:	bf18      	it	ne
 801f096:	b2a4      	uxthne	r4, r4
 801f098:	e9cd 4102 	strd	r4, r1, [sp, #8]
 801f09c:	e9cd 4b00 	strd	r4, fp, [sp]
 801f0a0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f0a2:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 801f0a4:	47a0      	blx	r4
 801f0a6:	b019      	add	sp, #100	; 0x64
 801f0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f0ae:	2b00      	cmp	r3, #0
 801f0b0:	f47f af5e 	bne.w	801ef70 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 801f0b4:	23ff      	movs	r3, #255	; 0xff
 801f0b6:	930a      	str	r3, [sp, #40]	; 0x28
 801f0b8:	2301      	movs	r3, #1
 801f0ba:	46c1      	mov	r9, r8
 801f0bc:	9307      	str	r3, [sp, #28]
 801f0be:	e688      	b.n	801edd2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801f0c0:	2000a0f0 	.word	0x2000a0f0

0801f0c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801f0c4:	b538      	push	{r3, r4, r5, lr}
 801f0c6:	4c15      	ldr	r4, [pc, #84]	; (801f11c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801f0c8:	7823      	ldrb	r3, [r4, #0]
 801f0ca:	f3bf 8f5b 	dmb	ish
 801f0ce:	07da      	lsls	r2, r3, #31
 801f0d0:	4605      	mov	r5, r0
 801f0d2:	d40b      	bmi.n	801f0ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801f0d4:	4620      	mov	r0, r4
 801f0d6:	f007 fc7c 	bl	80269d2 <__cxa_guard_acquire>
 801f0da:	b138      	cbz	r0, 801f0ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801f0dc:	4620      	mov	r0, r4
 801f0de:	f007 fc84 	bl	80269ea <__cxa_guard_release>
 801f0e2:	4a0f      	ldr	r2, [pc, #60]	; (801f120 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801f0e4:	490f      	ldr	r1, [pc, #60]	; (801f124 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801f0e6:	4810      	ldr	r0, [pc, #64]	; (801f128 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801f0e8:	f007 fc6c 	bl	80269c4 <__aeabi_atexit>
 801f0ec:	4c0f      	ldr	r4, [pc, #60]	; (801f12c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801f0ee:	7823      	ldrb	r3, [r4, #0]
 801f0f0:	f3bf 8f5b 	dmb	ish
 801f0f4:	07db      	lsls	r3, r3, #31
 801f0f6:	d40b      	bmi.n	801f110 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801f0f8:	4620      	mov	r0, r4
 801f0fa:	f007 fc6a 	bl	80269d2 <__cxa_guard_acquire>
 801f0fe:	b138      	cbz	r0, 801f110 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801f100:	4620      	mov	r0, r4
 801f102:	f007 fc72 	bl	80269ea <__cxa_guard_release>
 801f106:	4a06      	ldr	r2, [pc, #24]	; (801f120 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801f108:	4909      	ldr	r1, [pc, #36]	; (801f130 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801f10a:	480a      	ldr	r0, [pc, #40]	; (801f134 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801f10c:	f007 fc5a 	bl	80269c4 <__aeabi_atexit>
 801f110:	4b05      	ldr	r3, [pc, #20]	; (801f128 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801f112:	612b      	str	r3, [r5, #16]
 801f114:	4b07      	ldr	r3, [pc, #28]	; (801f134 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801f116:	616b      	str	r3, [r5, #20]
 801f118:	bd38      	pop	{r3, r4, r5, pc}
 801f11a:	bf00      	nop
 801f11c:	2000a1bc 	.word	0x2000a1bc
 801f120:	20000000 	.word	0x20000000
 801f124:	0801d6cb 	.word	0x0801d6cb
 801f128:	20000170 	.word	0x20000170
 801f12c:	2000a1c0 	.word	0x2000a1c0
 801f130:	0801d6c9 	.word	0x0801d6c9
 801f134:	20000174 	.word	0x20000174

0801f138 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801f138:	b538      	push	{r3, r4, r5, lr}
 801f13a:	4c15      	ldr	r4, [pc, #84]	; (801f190 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801f13c:	7823      	ldrb	r3, [r4, #0]
 801f13e:	f3bf 8f5b 	dmb	ish
 801f142:	07da      	lsls	r2, r3, #31
 801f144:	4605      	mov	r5, r0
 801f146:	d40b      	bmi.n	801f160 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801f148:	4620      	mov	r0, r4
 801f14a:	f007 fc42 	bl	80269d2 <__cxa_guard_acquire>
 801f14e:	b138      	cbz	r0, 801f160 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801f150:	4620      	mov	r0, r4
 801f152:	f007 fc4a 	bl	80269ea <__cxa_guard_release>
 801f156:	4a0f      	ldr	r2, [pc, #60]	; (801f194 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801f158:	490f      	ldr	r1, [pc, #60]	; (801f198 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801f15a:	4810      	ldr	r0, [pc, #64]	; (801f19c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801f15c:	f007 fc32 	bl	80269c4 <__aeabi_atexit>
 801f160:	4c0f      	ldr	r4, [pc, #60]	; (801f1a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801f162:	7823      	ldrb	r3, [r4, #0]
 801f164:	f3bf 8f5b 	dmb	ish
 801f168:	07db      	lsls	r3, r3, #31
 801f16a:	d40b      	bmi.n	801f184 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801f16c:	4620      	mov	r0, r4
 801f16e:	f007 fc30 	bl	80269d2 <__cxa_guard_acquire>
 801f172:	b138      	cbz	r0, 801f184 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801f174:	4620      	mov	r0, r4
 801f176:	f007 fc38 	bl	80269ea <__cxa_guard_release>
 801f17a:	4a06      	ldr	r2, [pc, #24]	; (801f194 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801f17c:	4909      	ldr	r1, [pc, #36]	; (801f1a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801f17e:	480a      	ldr	r0, [pc, #40]	; (801f1a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801f180:	f007 fc20 	bl	80269c4 <__aeabi_atexit>
 801f184:	4b05      	ldr	r3, [pc, #20]	; (801f19c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801f186:	60ab      	str	r3, [r5, #8]
 801f188:	4b07      	ldr	r3, [pc, #28]	; (801f1a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801f18a:	60eb      	str	r3, [r5, #12]
 801f18c:	bd38      	pop	{r3, r4, r5, pc}
 801f18e:	bf00      	nop
 801f190:	2000a194 	.word	0x2000a194
 801f194:	20000000 	.word	0x20000000
 801f198:	0801d6cf 	.word	0x0801d6cf
 801f19c:	20000148 	.word	0x20000148
 801f1a0:	2000a198 	.word	0x2000a198
 801f1a4:	0801d6cd 	.word	0x0801d6cd
 801f1a8:	2000014c 	.word	0x2000014c

0801f1ac <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801f1ac:	b510      	push	{r4, lr}
 801f1ae:	4604      	mov	r4, r0
 801f1b0:	f7ff ff88 	bl	801f0c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801f1b4:	4620      	mov	r0, r4
 801f1b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f1ba:	f7ff bfbd 	b.w	801f138 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801f1c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801f1c0:	b538      	push	{r3, r4, r5, lr}
 801f1c2:	4c15      	ldr	r4, [pc, #84]	; (801f218 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801f1c4:	7823      	ldrb	r3, [r4, #0]
 801f1c6:	f3bf 8f5b 	dmb	ish
 801f1ca:	07da      	lsls	r2, r3, #31
 801f1cc:	4605      	mov	r5, r0
 801f1ce:	d40b      	bmi.n	801f1e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801f1d0:	4620      	mov	r0, r4
 801f1d2:	f007 fbfe 	bl	80269d2 <__cxa_guard_acquire>
 801f1d6:	b138      	cbz	r0, 801f1e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801f1d8:	4620      	mov	r0, r4
 801f1da:	f007 fc06 	bl	80269ea <__cxa_guard_release>
 801f1de:	4a0f      	ldr	r2, [pc, #60]	; (801f21c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801f1e0:	490f      	ldr	r1, [pc, #60]	; (801f220 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801f1e2:	4810      	ldr	r0, [pc, #64]	; (801f224 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801f1e4:	f007 fbee 	bl	80269c4 <__aeabi_atexit>
 801f1e8:	4c0f      	ldr	r4, [pc, #60]	; (801f228 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801f1ea:	7823      	ldrb	r3, [r4, #0]
 801f1ec:	f3bf 8f5b 	dmb	ish
 801f1f0:	07db      	lsls	r3, r3, #31
 801f1f2:	d40b      	bmi.n	801f20c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801f1f4:	4620      	mov	r0, r4
 801f1f6:	f007 fbec 	bl	80269d2 <__cxa_guard_acquire>
 801f1fa:	b138      	cbz	r0, 801f20c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801f1fc:	4620      	mov	r0, r4
 801f1fe:	f007 fbf4 	bl	80269ea <__cxa_guard_release>
 801f202:	4a06      	ldr	r2, [pc, #24]	; (801f21c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801f204:	4909      	ldr	r1, [pc, #36]	; (801f22c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801f206:	480a      	ldr	r0, [pc, #40]	; (801f230 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801f208:	f007 fbdc 	bl	80269c4 <__aeabi_atexit>
 801f20c:	4b05      	ldr	r3, [pc, #20]	; (801f224 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801f20e:	622b      	str	r3, [r5, #32]
 801f210:	4b07      	ldr	r3, [pc, #28]	; (801f230 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801f212:	626b      	str	r3, [r5, #36]	; 0x24
 801f214:	bd38      	pop	{r3, r4, r5, pc}
 801f216:	bf00      	nop
 801f218:	2000a1c4 	.word	0x2000a1c4
 801f21c:	20000000 	.word	0x20000000
 801f220:	0801d6c3 	.word	0x0801d6c3
 801f224:	20000178 	.word	0x20000178
 801f228:	2000a1c8 	.word	0x2000a1c8
 801f22c:	0801d6c1 	.word	0x0801d6c1
 801f230:	2000017c 	.word	0x2000017c

0801f234 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801f234:	b538      	push	{r3, r4, r5, lr}
 801f236:	4c15      	ldr	r4, [pc, #84]	; (801f28c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801f238:	7823      	ldrb	r3, [r4, #0]
 801f23a:	f3bf 8f5b 	dmb	ish
 801f23e:	07da      	lsls	r2, r3, #31
 801f240:	4605      	mov	r5, r0
 801f242:	d40b      	bmi.n	801f25c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801f244:	4620      	mov	r0, r4
 801f246:	f007 fbc4 	bl	80269d2 <__cxa_guard_acquire>
 801f24a:	b138      	cbz	r0, 801f25c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801f24c:	4620      	mov	r0, r4
 801f24e:	f007 fbcc 	bl	80269ea <__cxa_guard_release>
 801f252:	4a0f      	ldr	r2, [pc, #60]	; (801f290 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801f254:	490f      	ldr	r1, [pc, #60]	; (801f294 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801f256:	4810      	ldr	r0, [pc, #64]	; (801f298 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801f258:	f007 fbb4 	bl	80269c4 <__aeabi_atexit>
 801f25c:	4c0f      	ldr	r4, [pc, #60]	; (801f29c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801f25e:	7823      	ldrb	r3, [r4, #0]
 801f260:	f3bf 8f5b 	dmb	ish
 801f264:	07db      	lsls	r3, r3, #31
 801f266:	d40b      	bmi.n	801f280 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801f268:	4620      	mov	r0, r4
 801f26a:	f007 fbb2 	bl	80269d2 <__cxa_guard_acquire>
 801f26e:	b138      	cbz	r0, 801f280 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801f270:	4620      	mov	r0, r4
 801f272:	f007 fbba 	bl	80269ea <__cxa_guard_release>
 801f276:	4a06      	ldr	r2, [pc, #24]	; (801f290 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801f278:	4909      	ldr	r1, [pc, #36]	; (801f2a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801f27a:	480a      	ldr	r0, [pc, #40]	; (801f2a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801f27c:	f007 fba2 	bl	80269c4 <__aeabi_atexit>
 801f280:	4b05      	ldr	r3, [pc, #20]	; (801f298 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801f282:	61ab      	str	r3, [r5, #24]
 801f284:	4b07      	ldr	r3, [pc, #28]	; (801f2a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801f286:	61eb      	str	r3, [r5, #28]
 801f288:	bd38      	pop	{r3, r4, r5, pc}
 801f28a:	bf00      	nop
 801f28c:	2000a19c 	.word	0x2000a19c
 801f290:	20000000 	.word	0x20000000
 801f294:	0801d6c7 	.word	0x0801d6c7
 801f298:	20000150 	.word	0x20000150
 801f29c:	2000a1a0 	.word	0x2000a1a0
 801f2a0:	0801d6c5 	.word	0x0801d6c5
 801f2a4:	20000154 	.word	0x20000154

0801f2a8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801f2a8:	b510      	push	{r4, lr}
 801f2aa:	4604      	mov	r4, r0
 801f2ac:	f7ff ff88 	bl	801f1c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801f2b0:	4620      	mov	r0, r4
 801f2b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f2b6:	f7ff bfbd 	b.w	801f234 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801f2bc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801f2bc:	b538      	push	{r3, r4, r5, lr}
 801f2be:	4c15      	ldr	r4, [pc, #84]	; (801f314 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801f2c0:	7823      	ldrb	r3, [r4, #0]
 801f2c2:	f3bf 8f5b 	dmb	ish
 801f2c6:	07da      	lsls	r2, r3, #31
 801f2c8:	4605      	mov	r5, r0
 801f2ca:	d40b      	bmi.n	801f2e4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801f2cc:	4620      	mov	r0, r4
 801f2ce:	f007 fb80 	bl	80269d2 <__cxa_guard_acquire>
 801f2d2:	b138      	cbz	r0, 801f2e4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801f2d4:	4620      	mov	r0, r4
 801f2d6:	f007 fb88 	bl	80269ea <__cxa_guard_release>
 801f2da:	4a0f      	ldr	r2, [pc, #60]	; (801f318 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801f2dc:	490f      	ldr	r1, [pc, #60]	; (801f31c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801f2de:	4810      	ldr	r0, [pc, #64]	; (801f320 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801f2e0:	f007 fb70 	bl	80269c4 <__aeabi_atexit>
 801f2e4:	4c0f      	ldr	r4, [pc, #60]	; (801f324 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801f2e6:	7823      	ldrb	r3, [r4, #0]
 801f2e8:	f3bf 8f5b 	dmb	ish
 801f2ec:	07db      	lsls	r3, r3, #31
 801f2ee:	d40b      	bmi.n	801f308 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801f2f0:	4620      	mov	r0, r4
 801f2f2:	f007 fb6e 	bl	80269d2 <__cxa_guard_acquire>
 801f2f6:	b138      	cbz	r0, 801f308 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801f2f8:	4620      	mov	r0, r4
 801f2fa:	f007 fb76 	bl	80269ea <__cxa_guard_release>
 801f2fe:	4a06      	ldr	r2, [pc, #24]	; (801f318 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801f300:	4909      	ldr	r1, [pc, #36]	; (801f328 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801f302:	480a      	ldr	r0, [pc, #40]	; (801f32c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801f304:	f007 fb5e 	bl	80269c4 <__aeabi_atexit>
 801f308:	4b05      	ldr	r3, [pc, #20]	; (801f320 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801f30a:	632b      	str	r3, [r5, #48]	; 0x30
 801f30c:	4b07      	ldr	r3, [pc, #28]	; (801f32c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801f30e:	636b      	str	r3, [r5, #52]	; 0x34
 801f310:	bd38      	pop	{r3, r4, r5, pc}
 801f312:	bf00      	nop
 801f314:	2000a1d4 	.word	0x2000a1d4
 801f318:	20000000 	.word	0x20000000
 801f31c:	0801d6bb 	.word	0x0801d6bb
 801f320:	20000188 	.word	0x20000188
 801f324:	2000a1d8 	.word	0x2000a1d8
 801f328:	0801d6b9 	.word	0x0801d6b9
 801f32c:	2000018c 	.word	0x2000018c

0801f330 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801f330:	b538      	push	{r3, r4, r5, lr}
 801f332:	4c15      	ldr	r4, [pc, #84]	; (801f388 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801f334:	7823      	ldrb	r3, [r4, #0]
 801f336:	f3bf 8f5b 	dmb	ish
 801f33a:	07da      	lsls	r2, r3, #31
 801f33c:	4605      	mov	r5, r0
 801f33e:	d40b      	bmi.n	801f358 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801f340:	4620      	mov	r0, r4
 801f342:	f007 fb46 	bl	80269d2 <__cxa_guard_acquire>
 801f346:	b138      	cbz	r0, 801f358 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801f348:	4620      	mov	r0, r4
 801f34a:	f007 fb4e 	bl	80269ea <__cxa_guard_release>
 801f34e:	4a0f      	ldr	r2, [pc, #60]	; (801f38c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801f350:	490f      	ldr	r1, [pc, #60]	; (801f390 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801f352:	4810      	ldr	r0, [pc, #64]	; (801f394 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801f354:	f007 fb36 	bl	80269c4 <__aeabi_atexit>
 801f358:	4c0f      	ldr	r4, [pc, #60]	; (801f398 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801f35a:	7823      	ldrb	r3, [r4, #0]
 801f35c:	f3bf 8f5b 	dmb	ish
 801f360:	07db      	lsls	r3, r3, #31
 801f362:	d40b      	bmi.n	801f37c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801f364:	4620      	mov	r0, r4
 801f366:	f007 fb34 	bl	80269d2 <__cxa_guard_acquire>
 801f36a:	b138      	cbz	r0, 801f37c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801f36c:	4620      	mov	r0, r4
 801f36e:	f007 fb3c 	bl	80269ea <__cxa_guard_release>
 801f372:	4a06      	ldr	r2, [pc, #24]	; (801f38c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801f374:	4909      	ldr	r1, [pc, #36]	; (801f39c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801f376:	480a      	ldr	r0, [pc, #40]	; (801f3a0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801f378:	f007 fb24 	bl	80269c4 <__aeabi_atexit>
 801f37c:	4b05      	ldr	r3, [pc, #20]	; (801f394 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801f37e:	62ab      	str	r3, [r5, #40]	; 0x28
 801f380:	4b07      	ldr	r3, [pc, #28]	; (801f3a0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801f382:	62eb      	str	r3, [r5, #44]	; 0x2c
 801f384:	bd38      	pop	{r3, r4, r5, pc}
 801f386:	bf00      	nop
 801f388:	2000a1a4 	.word	0x2000a1a4
 801f38c:	20000000 	.word	0x20000000
 801f390:	0801d6bf 	.word	0x0801d6bf
 801f394:	20000158 	.word	0x20000158
 801f398:	2000a1a8 	.word	0x2000a1a8
 801f39c:	0801d6bd 	.word	0x0801d6bd
 801f3a0:	2000015c 	.word	0x2000015c

0801f3a4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801f3a4:	b510      	push	{r4, lr}
 801f3a6:	4604      	mov	r4, r0
 801f3a8:	f7ff ff88 	bl	801f2bc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801f3ac:	4620      	mov	r0, r4
 801f3ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f3b2:	f7ff bfbd 	b.w	801f330 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801f3b8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801f3b8:	b538      	push	{r3, r4, r5, lr}
 801f3ba:	4c15      	ldr	r4, [pc, #84]	; (801f410 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801f3bc:	7823      	ldrb	r3, [r4, #0]
 801f3be:	f3bf 8f5b 	dmb	ish
 801f3c2:	07da      	lsls	r2, r3, #31
 801f3c4:	4605      	mov	r5, r0
 801f3c6:	d40b      	bmi.n	801f3e0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801f3c8:	4620      	mov	r0, r4
 801f3ca:	f007 fb02 	bl	80269d2 <__cxa_guard_acquire>
 801f3ce:	b138      	cbz	r0, 801f3e0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801f3d0:	4620      	mov	r0, r4
 801f3d2:	f007 fb0a 	bl	80269ea <__cxa_guard_release>
 801f3d6:	4a0f      	ldr	r2, [pc, #60]	; (801f414 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801f3d8:	490f      	ldr	r1, [pc, #60]	; (801f418 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801f3da:	4810      	ldr	r0, [pc, #64]	; (801f41c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801f3dc:	f007 faf2 	bl	80269c4 <__aeabi_atexit>
 801f3e0:	4c0f      	ldr	r4, [pc, #60]	; (801f420 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801f3e2:	7823      	ldrb	r3, [r4, #0]
 801f3e4:	f3bf 8f5b 	dmb	ish
 801f3e8:	07db      	lsls	r3, r3, #31
 801f3ea:	d40b      	bmi.n	801f404 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801f3ec:	4620      	mov	r0, r4
 801f3ee:	f007 faf0 	bl	80269d2 <__cxa_guard_acquire>
 801f3f2:	b138      	cbz	r0, 801f404 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801f3f4:	4620      	mov	r0, r4
 801f3f6:	f007 faf8 	bl	80269ea <__cxa_guard_release>
 801f3fa:	4a06      	ldr	r2, [pc, #24]	; (801f414 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801f3fc:	4909      	ldr	r1, [pc, #36]	; (801f424 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801f3fe:	480a      	ldr	r0, [pc, #40]	; (801f428 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801f400:	f007 fae0 	bl	80269c4 <__aeabi_atexit>
 801f404:	4b05      	ldr	r3, [pc, #20]	; (801f41c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801f406:	652b      	str	r3, [r5, #80]	; 0x50
 801f408:	4b07      	ldr	r3, [pc, #28]	; (801f428 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801f40a:	656b      	str	r3, [r5, #84]	; 0x54
 801f40c:	bd38      	pop	{r3, r4, r5, pc}
 801f40e:	bf00      	nop
 801f410:	2000a1dc 	.word	0x2000a1dc
 801f414:	20000000 	.word	0x20000000
 801f418:	0801d6ab 	.word	0x0801d6ab
 801f41c:	20000190 	.word	0x20000190
 801f420:	2000a1e0 	.word	0x2000a1e0
 801f424:	0801d6a9 	.word	0x0801d6a9
 801f428:	20000194 	.word	0x20000194

0801f42c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801f42c:	b538      	push	{r3, r4, r5, lr}
 801f42e:	4c15      	ldr	r4, [pc, #84]	; (801f484 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801f430:	7823      	ldrb	r3, [r4, #0]
 801f432:	f3bf 8f5b 	dmb	ish
 801f436:	07da      	lsls	r2, r3, #31
 801f438:	4605      	mov	r5, r0
 801f43a:	d40b      	bmi.n	801f454 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801f43c:	4620      	mov	r0, r4
 801f43e:	f007 fac8 	bl	80269d2 <__cxa_guard_acquire>
 801f442:	b138      	cbz	r0, 801f454 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801f444:	4620      	mov	r0, r4
 801f446:	f007 fad0 	bl	80269ea <__cxa_guard_release>
 801f44a:	4a0f      	ldr	r2, [pc, #60]	; (801f488 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801f44c:	490f      	ldr	r1, [pc, #60]	; (801f48c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801f44e:	4810      	ldr	r0, [pc, #64]	; (801f490 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801f450:	f007 fab8 	bl	80269c4 <__aeabi_atexit>
 801f454:	4c0f      	ldr	r4, [pc, #60]	; (801f494 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801f456:	7823      	ldrb	r3, [r4, #0]
 801f458:	f3bf 8f5b 	dmb	ish
 801f45c:	07db      	lsls	r3, r3, #31
 801f45e:	d40b      	bmi.n	801f478 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801f460:	4620      	mov	r0, r4
 801f462:	f007 fab6 	bl	80269d2 <__cxa_guard_acquire>
 801f466:	b138      	cbz	r0, 801f478 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801f468:	4620      	mov	r0, r4
 801f46a:	f007 fabe 	bl	80269ea <__cxa_guard_release>
 801f46e:	4a06      	ldr	r2, [pc, #24]	; (801f488 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801f470:	4909      	ldr	r1, [pc, #36]	; (801f498 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801f472:	480a      	ldr	r0, [pc, #40]	; (801f49c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801f474:	f007 faa6 	bl	80269c4 <__aeabi_atexit>
 801f478:	4b05      	ldr	r3, [pc, #20]	; (801f490 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801f47a:	64ab      	str	r3, [r5, #72]	; 0x48
 801f47c:	4b07      	ldr	r3, [pc, #28]	; (801f49c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801f47e:	64eb      	str	r3, [r5, #76]	; 0x4c
 801f480:	bd38      	pop	{r3, r4, r5, pc}
 801f482:	bf00      	nop
 801f484:	2000a1e4 	.word	0x2000a1e4
 801f488:	20000000 	.word	0x20000000
 801f48c:	0801d6af 	.word	0x0801d6af
 801f490:	20000198 	.word	0x20000198
 801f494:	2000a1e8 	.word	0x2000a1e8
 801f498:	0801d6ad 	.word	0x0801d6ad
 801f49c:	2000019c 	.word	0x2000019c

0801f4a0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801f4a0:	b538      	push	{r3, r4, r5, lr}
 801f4a2:	4c15      	ldr	r4, [pc, #84]	; (801f4f8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801f4a4:	7823      	ldrb	r3, [r4, #0]
 801f4a6:	f3bf 8f5b 	dmb	ish
 801f4aa:	07da      	lsls	r2, r3, #31
 801f4ac:	4605      	mov	r5, r0
 801f4ae:	d40b      	bmi.n	801f4c8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801f4b0:	4620      	mov	r0, r4
 801f4b2:	f007 fa8e 	bl	80269d2 <__cxa_guard_acquire>
 801f4b6:	b138      	cbz	r0, 801f4c8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801f4b8:	4620      	mov	r0, r4
 801f4ba:	f007 fa96 	bl	80269ea <__cxa_guard_release>
 801f4be:	4a0f      	ldr	r2, [pc, #60]	; (801f4fc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801f4c0:	490f      	ldr	r1, [pc, #60]	; (801f500 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801f4c2:	4810      	ldr	r0, [pc, #64]	; (801f504 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801f4c4:	f007 fa7e 	bl	80269c4 <__aeabi_atexit>
 801f4c8:	4c0f      	ldr	r4, [pc, #60]	; (801f508 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801f4ca:	7823      	ldrb	r3, [r4, #0]
 801f4cc:	f3bf 8f5b 	dmb	ish
 801f4d0:	07db      	lsls	r3, r3, #31
 801f4d2:	d40b      	bmi.n	801f4ec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801f4d4:	4620      	mov	r0, r4
 801f4d6:	f007 fa7c 	bl	80269d2 <__cxa_guard_acquire>
 801f4da:	b138      	cbz	r0, 801f4ec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801f4dc:	4620      	mov	r0, r4
 801f4de:	f007 fa84 	bl	80269ea <__cxa_guard_release>
 801f4e2:	4a06      	ldr	r2, [pc, #24]	; (801f4fc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801f4e4:	4909      	ldr	r1, [pc, #36]	; (801f50c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801f4e6:	480a      	ldr	r0, [pc, #40]	; (801f510 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801f4e8:	f007 fa6c 	bl	80269c4 <__aeabi_atexit>
 801f4ec:	4b05      	ldr	r3, [pc, #20]	; (801f504 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801f4ee:	642b      	str	r3, [r5, #64]	; 0x40
 801f4f0:	4b07      	ldr	r3, [pc, #28]	; (801f510 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801f4f2:	646b      	str	r3, [r5, #68]	; 0x44
 801f4f4:	bd38      	pop	{r3, r4, r5, pc}
 801f4f6:	bf00      	nop
 801f4f8:	2000a1ac 	.word	0x2000a1ac
 801f4fc:	20000000 	.word	0x20000000
 801f500:	0801d6b3 	.word	0x0801d6b3
 801f504:	20000160 	.word	0x20000160
 801f508:	2000a1b0 	.word	0x2000a1b0
 801f50c:	0801d6b1 	.word	0x0801d6b1
 801f510:	20000164 	.word	0x20000164

0801f514 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801f514:	b538      	push	{r3, r4, r5, lr}
 801f516:	4c15      	ldr	r4, [pc, #84]	; (801f56c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801f518:	7823      	ldrb	r3, [r4, #0]
 801f51a:	f3bf 8f5b 	dmb	ish
 801f51e:	07da      	lsls	r2, r3, #31
 801f520:	4605      	mov	r5, r0
 801f522:	d40b      	bmi.n	801f53c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801f524:	4620      	mov	r0, r4
 801f526:	f007 fa54 	bl	80269d2 <__cxa_guard_acquire>
 801f52a:	b138      	cbz	r0, 801f53c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801f52c:	4620      	mov	r0, r4
 801f52e:	f007 fa5c 	bl	80269ea <__cxa_guard_release>
 801f532:	4a0f      	ldr	r2, [pc, #60]	; (801f570 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801f534:	490f      	ldr	r1, [pc, #60]	; (801f574 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801f536:	4810      	ldr	r0, [pc, #64]	; (801f578 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801f538:	f007 fa44 	bl	80269c4 <__aeabi_atexit>
 801f53c:	4c0f      	ldr	r4, [pc, #60]	; (801f57c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801f53e:	7823      	ldrb	r3, [r4, #0]
 801f540:	f3bf 8f5b 	dmb	ish
 801f544:	07db      	lsls	r3, r3, #31
 801f546:	d40b      	bmi.n	801f560 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801f548:	4620      	mov	r0, r4
 801f54a:	f007 fa42 	bl	80269d2 <__cxa_guard_acquire>
 801f54e:	b138      	cbz	r0, 801f560 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801f550:	4620      	mov	r0, r4
 801f552:	f007 fa4a 	bl	80269ea <__cxa_guard_release>
 801f556:	4a06      	ldr	r2, [pc, #24]	; (801f570 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801f558:	4909      	ldr	r1, [pc, #36]	; (801f580 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801f55a:	480a      	ldr	r0, [pc, #40]	; (801f584 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801f55c:	f007 fa32 	bl	80269c4 <__aeabi_atexit>
 801f560:	4b05      	ldr	r3, [pc, #20]	; (801f578 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801f562:	63ab      	str	r3, [r5, #56]	; 0x38
 801f564:	4b07      	ldr	r3, [pc, #28]	; (801f584 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801f566:	63eb      	str	r3, [r5, #60]	; 0x3c
 801f568:	bd38      	pop	{r3, r4, r5, pc}
 801f56a:	bf00      	nop
 801f56c:	2000a1cc 	.word	0x2000a1cc
 801f570:	20000000 	.word	0x20000000
 801f574:	0801d6b7 	.word	0x0801d6b7
 801f578:	20000180 	.word	0x20000180
 801f57c:	2000a1d0 	.word	0x2000a1d0
 801f580:	0801d6b5 	.word	0x0801d6b5
 801f584:	20000184 	.word	0x20000184

0801f588 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801f588:	b510      	push	{r4, lr}
 801f58a:	4604      	mov	r4, r0
 801f58c:	f7ff ff14 	bl	801f3b8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801f590:	4620      	mov	r0, r4
 801f592:	f7ff ff85 	bl	801f4a0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801f596:	4620      	mov	r0, r4
 801f598:	f7ff ff48 	bl	801f42c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801f59c:	4620      	mov	r0, r4
 801f59e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f5a2:	f7ff bfb7 	b.w	801f514 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801f5a8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801f5a8:	b538      	push	{r3, r4, r5, lr}
 801f5aa:	4c15      	ldr	r4, [pc, #84]	; (801f600 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801f5ac:	7823      	ldrb	r3, [r4, #0]
 801f5ae:	f3bf 8f5b 	dmb	ish
 801f5b2:	07da      	lsls	r2, r3, #31
 801f5b4:	4605      	mov	r5, r0
 801f5b6:	d40b      	bmi.n	801f5d0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801f5b8:	4620      	mov	r0, r4
 801f5ba:	f007 fa0a 	bl	80269d2 <__cxa_guard_acquire>
 801f5be:	b138      	cbz	r0, 801f5d0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801f5c0:	4620      	mov	r0, r4
 801f5c2:	f007 fa12 	bl	80269ea <__cxa_guard_release>
 801f5c6:	4a0f      	ldr	r2, [pc, #60]	; (801f604 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801f5c8:	490f      	ldr	r1, [pc, #60]	; (801f608 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801f5ca:	4810      	ldr	r0, [pc, #64]	; (801f60c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801f5cc:	f007 f9fa 	bl	80269c4 <__aeabi_atexit>
 801f5d0:	4c0f      	ldr	r4, [pc, #60]	; (801f610 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801f5d2:	7823      	ldrb	r3, [r4, #0]
 801f5d4:	f3bf 8f5b 	dmb	ish
 801f5d8:	07db      	lsls	r3, r3, #31
 801f5da:	d40b      	bmi.n	801f5f4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801f5dc:	4620      	mov	r0, r4
 801f5de:	f007 f9f8 	bl	80269d2 <__cxa_guard_acquire>
 801f5e2:	b138      	cbz	r0, 801f5f4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801f5e4:	4620      	mov	r0, r4
 801f5e6:	f007 fa00 	bl	80269ea <__cxa_guard_release>
 801f5ea:	4a06      	ldr	r2, [pc, #24]	; (801f604 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801f5ec:	4909      	ldr	r1, [pc, #36]	; (801f614 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801f5ee:	480a      	ldr	r0, [pc, #40]	; (801f618 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801f5f0:	f007 f9e8 	bl	80269c4 <__aeabi_atexit>
 801f5f4:	4b05      	ldr	r3, [pc, #20]	; (801f60c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801f5f6:	662b      	str	r3, [r5, #96]	; 0x60
 801f5f8:	4b07      	ldr	r3, [pc, #28]	; (801f618 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801f5fa:	666b      	str	r3, [r5, #100]	; 0x64
 801f5fc:	bd38      	pop	{r3, r4, r5, pc}
 801f5fe:	bf00      	nop
 801f600:	2000a1b4 	.word	0x2000a1b4
 801f604:	20000000 	.word	0x20000000
 801f608:	0801d6a3 	.word	0x0801d6a3
 801f60c:	20000168 	.word	0x20000168
 801f610:	2000a1b8 	.word	0x2000a1b8
 801f614:	0801d6a1 	.word	0x0801d6a1
 801f618:	2000016c 	.word	0x2000016c

0801f61c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801f61c:	b538      	push	{r3, r4, r5, lr}
 801f61e:	4c15      	ldr	r4, [pc, #84]	; (801f674 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801f620:	7823      	ldrb	r3, [r4, #0]
 801f622:	f3bf 8f5b 	dmb	ish
 801f626:	07da      	lsls	r2, r3, #31
 801f628:	4605      	mov	r5, r0
 801f62a:	d40b      	bmi.n	801f644 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801f62c:	4620      	mov	r0, r4
 801f62e:	f007 f9d0 	bl	80269d2 <__cxa_guard_acquire>
 801f632:	b138      	cbz	r0, 801f644 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801f634:	4620      	mov	r0, r4
 801f636:	f007 f9d8 	bl	80269ea <__cxa_guard_release>
 801f63a:	4a0f      	ldr	r2, [pc, #60]	; (801f678 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f63c:	490f      	ldr	r1, [pc, #60]	; (801f67c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801f63e:	4810      	ldr	r0, [pc, #64]	; (801f680 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f640:	f007 f9c0 	bl	80269c4 <__aeabi_atexit>
 801f644:	4c0f      	ldr	r4, [pc, #60]	; (801f684 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801f646:	7823      	ldrb	r3, [r4, #0]
 801f648:	f3bf 8f5b 	dmb	ish
 801f64c:	07db      	lsls	r3, r3, #31
 801f64e:	d40b      	bmi.n	801f668 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801f650:	4620      	mov	r0, r4
 801f652:	f007 f9be 	bl	80269d2 <__cxa_guard_acquire>
 801f656:	b138      	cbz	r0, 801f668 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801f658:	4620      	mov	r0, r4
 801f65a:	f007 f9c6 	bl	80269ea <__cxa_guard_release>
 801f65e:	4a06      	ldr	r2, [pc, #24]	; (801f678 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f660:	4909      	ldr	r1, [pc, #36]	; (801f688 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801f662:	480a      	ldr	r0, [pc, #40]	; (801f68c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801f664:	f007 f9ae 	bl	80269c4 <__aeabi_atexit>
 801f668:	4b05      	ldr	r3, [pc, #20]	; (801f680 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f66a:	65ab      	str	r3, [r5, #88]	; 0x58
 801f66c:	4b07      	ldr	r3, [pc, #28]	; (801f68c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801f66e:	65eb      	str	r3, [r5, #92]	; 0x5c
 801f670:	bd38      	pop	{r3, r4, r5, pc}
 801f672:	bf00      	nop
 801f674:	2000a18c 	.word	0x2000a18c
 801f678:	20000000 	.word	0x20000000
 801f67c:	0801d6a7 	.word	0x0801d6a7
 801f680:	20000140 	.word	0x20000140
 801f684:	2000a190 	.word	0x2000a190
 801f688:	0801d6a5 	.word	0x0801d6a5
 801f68c:	20000144 	.word	0x20000144

0801f690 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801f690:	b510      	push	{r4, lr}
 801f692:	4604      	mov	r4, r0
 801f694:	f7ff ff88 	bl	801f5a8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801f698:	4620      	mov	r0, r4
 801f69a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f69e:	f7ff bfbd 	b.w	801f61c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801f6a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801f6a4:	b538      	push	{r3, r4, r5, lr}
 801f6a6:	4c15      	ldr	r4, [pc, #84]	; (801f6fc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801f6a8:	7823      	ldrb	r3, [r4, #0]
 801f6aa:	f3bf 8f5b 	dmb	ish
 801f6ae:	07da      	lsls	r2, r3, #31
 801f6b0:	4605      	mov	r5, r0
 801f6b2:	d40b      	bmi.n	801f6cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801f6b4:	4620      	mov	r0, r4
 801f6b6:	f007 f98c 	bl	80269d2 <__cxa_guard_acquire>
 801f6ba:	b138      	cbz	r0, 801f6cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801f6bc:	4620      	mov	r0, r4
 801f6be:	f007 f994 	bl	80269ea <__cxa_guard_release>
 801f6c2:	4a0f      	ldr	r2, [pc, #60]	; (801f700 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801f6c4:	490f      	ldr	r1, [pc, #60]	; (801f704 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801f6c6:	4810      	ldr	r0, [pc, #64]	; (801f708 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801f6c8:	f007 f97c 	bl	80269c4 <__aeabi_atexit>
 801f6cc:	4c0f      	ldr	r4, [pc, #60]	; (801f70c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801f6ce:	7823      	ldrb	r3, [r4, #0]
 801f6d0:	f3bf 8f5b 	dmb	ish
 801f6d4:	07db      	lsls	r3, r3, #31
 801f6d6:	d40b      	bmi.n	801f6f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801f6d8:	4620      	mov	r0, r4
 801f6da:	f007 f97a 	bl	80269d2 <__cxa_guard_acquire>
 801f6de:	b138      	cbz	r0, 801f6f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801f6e0:	4620      	mov	r0, r4
 801f6e2:	f007 f982 	bl	80269ea <__cxa_guard_release>
 801f6e6:	4a06      	ldr	r2, [pc, #24]	; (801f700 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801f6e8:	4909      	ldr	r1, [pc, #36]	; (801f710 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801f6ea:	480a      	ldr	r0, [pc, #40]	; (801f714 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801f6ec:	f007 f96a 	bl	80269c4 <__aeabi_atexit>
 801f6f0:	4b05      	ldr	r3, [pc, #20]	; (801f708 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801f6f2:	672b      	str	r3, [r5, #112]	; 0x70
 801f6f4:	4b07      	ldr	r3, [pc, #28]	; (801f714 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801f6f6:	676b      	str	r3, [r5, #116]	; 0x74
 801f6f8:	bd38      	pop	{r3, r4, r5, pc}
 801f6fa:	bf00      	nop
 801f6fc:	2000a184 	.word	0x2000a184
 801f700:	20000000 	.word	0x20000000
 801f704:	0801d69b 	.word	0x0801d69b
 801f708:	20000138 	.word	0x20000138
 801f70c:	2000a188 	.word	0x2000a188
 801f710:	0801d699 	.word	0x0801d699
 801f714:	2000013c 	.word	0x2000013c

0801f718 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801f718:	b538      	push	{r3, r4, r5, lr}
 801f71a:	4c15      	ldr	r4, [pc, #84]	; (801f770 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801f71c:	7823      	ldrb	r3, [r4, #0]
 801f71e:	f3bf 8f5b 	dmb	ish
 801f722:	07da      	lsls	r2, r3, #31
 801f724:	4605      	mov	r5, r0
 801f726:	d40b      	bmi.n	801f740 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801f728:	4620      	mov	r0, r4
 801f72a:	f007 f952 	bl	80269d2 <__cxa_guard_acquire>
 801f72e:	b138      	cbz	r0, 801f740 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801f730:	4620      	mov	r0, r4
 801f732:	f007 f95a 	bl	80269ea <__cxa_guard_release>
 801f736:	4a0f      	ldr	r2, [pc, #60]	; (801f774 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f738:	490f      	ldr	r1, [pc, #60]	; (801f778 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801f73a:	4810      	ldr	r0, [pc, #64]	; (801f77c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f73c:	f007 f942 	bl	80269c4 <__aeabi_atexit>
 801f740:	4c0f      	ldr	r4, [pc, #60]	; (801f780 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801f742:	7823      	ldrb	r3, [r4, #0]
 801f744:	f3bf 8f5b 	dmb	ish
 801f748:	07db      	lsls	r3, r3, #31
 801f74a:	d40b      	bmi.n	801f764 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801f74c:	4620      	mov	r0, r4
 801f74e:	f007 f940 	bl	80269d2 <__cxa_guard_acquire>
 801f752:	b138      	cbz	r0, 801f764 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801f754:	4620      	mov	r0, r4
 801f756:	f007 f948 	bl	80269ea <__cxa_guard_release>
 801f75a:	4a06      	ldr	r2, [pc, #24]	; (801f774 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f75c:	4909      	ldr	r1, [pc, #36]	; (801f784 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801f75e:	480a      	ldr	r0, [pc, #40]	; (801f788 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801f760:	f007 f930 	bl	80269c4 <__aeabi_atexit>
 801f764:	4b05      	ldr	r3, [pc, #20]	; (801f77c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f766:	66ab      	str	r3, [r5, #104]	; 0x68
 801f768:	4b07      	ldr	r3, [pc, #28]	; (801f788 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801f76a:	66eb      	str	r3, [r5, #108]	; 0x6c
 801f76c:	bd38      	pop	{r3, r4, r5, pc}
 801f76e:	bf00      	nop
 801f770:	2000a17c 	.word	0x2000a17c
 801f774:	20000000 	.word	0x20000000
 801f778:	0801d69f 	.word	0x0801d69f
 801f77c:	20000130 	.word	0x20000130
 801f780:	2000a180 	.word	0x2000a180
 801f784:	0801d69d 	.word	0x0801d69d
 801f788:	20000134 	.word	0x20000134

0801f78c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801f78c:	b510      	push	{r4, lr}
 801f78e:	4604      	mov	r4, r0
 801f790:	f7ff ff88 	bl	801f6a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801f794:	4620      	mov	r0, r4
 801f796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f79a:	f7ff bfbd 	b.w	801f718 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801f79e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801f79e:	b510      	push	{r4, lr}
 801f7a0:	4604      	mov	r4, r0
 801f7a2:	f7ff fff3 	bl	801f78c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801f7a6:	4620      	mov	r0, r4
 801f7a8:	f7ff ff72 	bl	801f690 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801f7ac:	4620      	mov	r0, r4
 801f7ae:	f7ff fdf9 	bl	801f3a4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801f7b2:	4620      	mov	r0, r4
 801f7b4:	f7ff fcfa 	bl	801f1ac <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801f7b8:	4620      	mov	r0, r4
 801f7ba:	f7ff fd75 	bl	801f2a8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801f7be:	4620      	mov	r0, r4
 801f7c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f7c4:	f7ff bee0 	b.w	801f588 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801f7c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801f7c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7cc:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 801f7d0:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801f7d4:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801f7d8:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801f7dc:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 801f7e0:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 801f7e4:	8808      	ldrh	r0, [r1, #0]
 801f7e6:	fb0e 4708 	mla	r7, lr, r8, r4
 801f7ea:	f1be 0f00 	cmp.w	lr, #0
 801f7ee:	eb02 0a07 	add.w	sl, r2, r7
 801f7f2:	db37      	blt.n	801f864 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 801f7f4:	45f3      	cmp	fp, lr
 801f7f6:	dd35      	ble.n	801f864 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 801f7f8:	2c00      	cmp	r4, #0
 801f7fa:	db31      	blt.n	801f860 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 801f7fc:	45a0      	cmp	r8, r4
 801f7fe:	dd2f      	ble.n	801f860 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 801f800:	5dd2      	ldrb	r2, [r2, r7]
 801f802:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 801f806:	1c62      	adds	r2, r4, #1
 801f808:	d42f      	bmi.n	801f86a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801f80a:	4590      	cmp	r8, r2
 801f80c:	dd2d      	ble.n	801f86a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801f80e:	b366      	cbz	r6, 801f86a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801f810:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801f814:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801f818:	f11e 0e01 	adds.w	lr, lr, #1
 801f81c:	d429      	bmi.n	801f872 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 801f81e:	45f3      	cmp	fp, lr
 801f820:	dd27      	ble.n	801f872 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 801f822:	f1bc 0f00 	cmp.w	ip, #0
 801f826:	f000 80a0 	beq.w	801f96a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a2>
 801f82a:	2c00      	cmp	r4, #0
 801f82c:	db1f      	blt.n	801f86e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801f82e:	45a0      	cmp	r8, r4
 801f830:	dd1d      	ble.n	801f86e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801f832:	f81a 2008 	ldrb.w	r2, [sl, r8]
 801f836:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 801f83a:	3401      	adds	r4, #1
 801f83c:	d41c      	bmi.n	801f878 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 801f83e:	45a0      	cmp	r8, r4
 801f840:	dd1a      	ble.n	801f878 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 801f842:	b1de      	cbz	r6, 801f87c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 801f844:	44d0      	add	r8, sl
 801f846:	f898 2001 	ldrb.w	r2, [r8, #1]
 801f84a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801f84e:	2e0f      	cmp	r6, #15
 801f850:	d915      	bls.n	801f87e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 801f852:	4b49      	ldr	r3, [pc, #292]	; (801f978 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 801f854:	4a49      	ldr	r2, [pc, #292]	; (801f97c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 801f856:	484a      	ldr	r0, [pc, #296]	; (801f980 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 801f858:	f240 11ef 	movw	r1, #495	; 0x1ef
 801f85c:	f007 f9e2 	bl	8026c24 <__assert_func>
 801f860:	4681      	mov	r9, r0
 801f862:	e7d0      	b.n	801f806 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 801f864:	4607      	mov	r7, r0
 801f866:	4681      	mov	r9, r0
 801f868:	e7d6      	b.n	801f818 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801f86a:	4607      	mov	r7, r0
 801f86c:	e7d4      	b.n	801f818 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801f86e:	4686      	mov	lr, r0
 801f870:	e7e3      	b.n	801f83a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 801f872:	4603      	mov	r3, r0
 801f874:	4686      	mov	lr, r0
 801f876:	e7ea      	b.n	801f84e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 801f878:	4603      	mov	r3, r0
 801f87a:	e7e8      	b.n	801f84e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 801f87c:	4603      	mov	r3, r0
 801f87e:	f1bc 0f0f 	cmp.w	ip, #15
 801f882:	d8e6      	bhi.n	801f852 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 801f884:	ea4f 4409 	mov.w	r4, r9, lsl #16
 801f888:	fb16 f80c 	smulbb	r8, r6, ip
 801f88c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801f890:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801f894:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f898:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801f89c:	ea44 0909 	orr.w	r9, r4, r9
 801f8a0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f8a4:	f1cc 0410 	rsb	r4, ip, #16
 801f8a8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801f8ac:	1ba4      	subs	r4, r4, r6
 801f8ae:	041a      	lsls	r2, r3, #16
 801f8b0:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 801f8b4:	ea4a 0707 	orr.w	r7, sl, r7
 801f8b8:	4377      	muls	r7, r6
 801f8ba:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801f8be:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801f8c2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f8c6:	fb04 7409 	mla	r4, r4, r9, r7
 801f8ca:	4313      	orrs	r3, r2
 801f8cc:	ea4f 420e 	mov.w	r2, lr, lsl #16
 801f8d0:	fb08 4303 	mla	r3, r8, r3, r4
 801f8d4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801f8d8:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 801f8dc:	4322      	orrs	r2, r4
 801f8de:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 801f8e2:	fb0c 3202 	mla	r2, ip, r2, r3
 801f8e6:	0d53      	lsrs	r3, r2, #21
 801f8e8:	0952      	lsrs	r2, r2, #5
 801f8ea:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f8ee:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f8f2:	431a      	orrs	r2, r3
 801f8f4:	b293      	uxth	r3, r2
 801f8f6:	b2af      	uxth	r7, r5
 801f8f8:	1202      	asrs	r2, r0, #8
 801f8fa:	43ed      	mvns	r5, r5
 801f8fc:	b2ed      	uxtb	r5, r5
 801f8fe:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801f902:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801f906:	fb12 f205 	smulbb	r2, r2, r5
 801f90a:	10c6      	asrs	r6, r0, #3
 801f90c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f910:	fb0c 2c07 	mla	ip, ip, r7, r2
 801f914:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f918:	10da      	asrs	r2, r3, #3
 801f91a:	fb16 f605 	smulbb	r6, r6, r5
 801f91e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801f922:	fb02 6207 	mla	r2, r2, r7, r6
 801f926:	b296      	uxth	r6, r2
 801f928:	00c2      	lsls	r2, r0, #3
 801f92a:	00dc      	lsls	r4, r3, #3
 801f92c:	b2d2      	uxtb	r2, r2
 801f92e:	b2e4      	uxtb	r4, r4
 801f930:	fb12 f205 	smulbb	r2, r2, r5
 801f934:	fb04 2207 	mla	r2, r4, r7, r2
 801f938:	fa1f fc8c 	uxth.w	ip, ip
 801f93c:	b292      	uxth	r2, r2
 801f93e:	f10c 0301 	add.w	r3, ip, #1
 801f942:	1c50      	adds	r0, r2, #1
 801f944:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801f948:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f94c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f950:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801f954:	4313      	orrs	r3, r2
 801f956:	1c72      	adds	r2, r6, #1
 801f958:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 801f95c:	0952      	lsrs	r2, r2, #5
 801f95e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f962:	4313      	orrs	r3, r2
 801f964:	800b      	strh	r3, [r1, #0]
 801f966:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f96a:	2e0f      	cmp	r6, #15
 801f96c:	f63f af71 	bhi.w	801f852 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 801f970:	4603      	mov	r3, r0
 801f972:	4686      	mov	lr, r0
 801f974:	e786      	b.n	801f884 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 801f976:	bf00      	nop
 801f978:	0802c82a 	.word	0x0802c82a
 801f97c:	0802ce96 	.word	0x0802ce96
 801f980:	0802c913 	.word	0x0802c913

0801f984 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f988:	ed2d 8b08 	vpush	{d8-d11}
 801f98c:	b099      	sub	sp, #100	; 0x64
 801f98e:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 801f992:	9215      	str	r2, [sp, #84]	; 0x54
 801f994:	9309      	str	r3, [sp, #36]	; 0x24
 801f996:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801f998:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 801f99c:	930d      	str	r3, [sp, #52]	; 0x34
 801f99e:	910c      	str	r1, [sp, #48]	; 0x30
 801f9a0:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801f9a4:	9016      	str	r0, [sp, #88]	; 0x58
 801f9a6:	6850      	ldr	r0, [r2, #4]
 801f9a8:	6812      	ldr	r2, [r2, #0]
 801f9aa:	fb00 1303 	mla	r3, r0, r3, r1
 801f9ae:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801f9b2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801f9b4:	681b      	ldr	r3, [r3, #0]
 801f9b6:	930b      	str	r3, [sp, #44]	; 0x2c
 801f9b8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801f9ba:	685e      	ldr	r6, [r3, #4]
 801f9bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f9be:	43db      	mvns	r3, r3
 801f9c0:	b2db      	uxtb	r3, r3
 801f9c2:	eeb0 aa40 	vmov.f32	s20, s0
 801f9c6:	eef0 9a60 	vmov.f32	s19, s1
 801f9ca:	eeb0 9a41 	vmov.f32	s18, s2
 801f9ce:	eeb0 8a62 	vmov.f32	s16, s5
 801f9d2:	eef0 8a43 	vmov.f32	s17, s6
 801f9d6:	eef0 ba44 	vmov.f32	s23, s8
 801f9da:	eeb0 ba64 	vmov.f32	s22, s9
 801f9de:	eef0 aa45 	vmov.f32	s21, s10
 801f9e2:	3604      	adds	r6, #4
 801f9e4:	930a      	str	r3, [sp, #40]	; 0x28
 801f9e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f9e8:	2b00      	cmp	r3, #0
 801f9ea:	dc03      	bgt.n	801f9f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f9ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f9ee:	2b00      	cmp	r3, #0
 801f9f0:	f340 8226 	ble.w	801fe40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 801f9f4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801f9f6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f9fa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f9fe:	1e48      	subs	r0, r1, #1
 801fa00:	1e57      	subs	r7, r2, #1
 801fa02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa04:	2b00      	cmp	r3, #0
 801fa06:	f340 80e4 	ble.w	801fbd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 801fa0a:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801fa0e:	ea4f 4325 	mov.w	r3, r5, asr #16
 801fa12:	d406      	bmi.n	801fa22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fa14:	4584      	cmp	ip, r0
 801fa16:	da04      	bge.n	801fa22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fa18:	2b00      	cmp	r3, #0
 801fa1a:	db02      	blt.n	801fa22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fa1c:	42bb      	cmp	r3, r7
 801fa1e:	f2c0 80d9 	blt.w	801fbd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801fa22:	f11c 0c01 	adds.w	ip, ip, #1
 801fa26:	f100 80ca 	bmi.w	801fbbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801fa2a:	4561      	cmp	r1, ip
 801fa2c:	f2c0 80c7 	blt.w	801fbbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801fa30:	3301      	adds	r3, #1
 801fa32:	f100 80c4 	bmi.w	801fbbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801fa36:	429a      	cmp	r2, r3
 801fa38:	f2c0 80c1 	blt.w	801fbbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801fa3c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801fa40:	4647      	mov	r7, r8
 801fa42:	f1bb 0f00 	cmp.w	fp, #0
 801fa46:	f340 80e4 	ble.w	801fc12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 801fa4a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801fa4c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801fa4e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801fa52:	689b      	ldr	r3, [r3, #8]
 801fa54:	ea5f 422a 	movs.w	r2, sl, asr #16
 801fa58:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801fa5c:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801fa60:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801fa64:	f100 8122 	bmi.w	801fcac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 801fa68:	f103 39ff 	add.w	r9, r3, #4294967295
 801fa6c:	454a      	cmp	r2, r9
 801fa6e:	f280 811d 	bge.w	801fcac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 801fa72:	f1bc 0f00 	cmp.w	ip, #0
 801fa76:	f2c0 8119 	blt.w	801fcac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 801fa7a:	f10e 39ff 	add.w	r9, lr, #4294967295
 801fa7e:	45cc      	cmp	ip, r9
 801fa80:	f280 8114 	bge.w	801fcac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 801fa84:	b21b      	sxth	r3, r3
 801fa86:	fb0c 2203 	mla	r2, ip, r3, r2
 801fa8a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fa8c:	eb04 0902 	add.w	r9, r4, r2
 801fa90:	5ca2      	ldrb	r2, [r4, r2]
 801fa92:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801fa96:	2800      	cmp	r0, #0
 801fa98:	f000 80ff 	beq.w	801fc9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 801fa9c:	f899 2001 	ldrb.w	r2, [r9, #1]
 801faa0:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801faa4:	9211      	str	r2, [sp, #68]	; 0x44
 801faa6:	b151      	cbz	r1, 801fabe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801faa8:	eb09 0203 	add.w	r2, r9, r3
 801faac:	f819 3003 	ldrb.w	r3, [r9, r3]
 801fab0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801fab4:	930f      	str	r3, [sp, #60]	; 0x3c
 801fab6:	7853      	ldrb	r3, [r2, #1]
 801fab8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801fabc:	9312      	str	r3, [sp, #72]	; 0x48
 801fabe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fac0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fac2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801fac6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801faca:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801face:	ea4c 0c03 	orr.w	ip, ip, r3
 801fad2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fad4:	041b      	lsls	r3, r3, #16
 801fad6:	fb10 f201 	smulbb	r2, r0, r1
 801fada:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801fade:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801fae2:	10d2      	asrs	r2, r2, #3
 801fae4:	4323      	orrs	r3, r4
 801fae6:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801faea:	4353      	muls	r3, r2
 801faec:	fb09 330c 	mla	r3, r9, ip, r3
 801faf0:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801faf4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801faf8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801fafc:	ea4c 0e0e 	orr.w	lr, ip, lr
 801fb00:	f1c1 0c10 	rsb	ip, r1, #16
 801fb04:	ebac 0c00 	sub.w	ip, ip, r0
 801fb08:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801fb0c:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801fb10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fb12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fb14:	0418      	lsls	r0, r3, #16
 801fb16:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801fb1a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801fb1e:	4318      	orrs	r0, r3
 801fb20:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801fb24:	fb02 c200 	mla	r2, r2, r0, ip
 801fb28:	0d53      	lsrs	r3, r2, #21
 801fb2a:	0952      	lsrs	r2, r2, #5
 801fb2c:	f8b7 c000 	ldrh.w	ip, [r7]
 801fb30:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fb34:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801fb38:	431a      	orrs	r2, r3
 801fb3a:	b292      	uxth	r2, r2
 801fb3c:	ea4f 212c 	mov.w	r1, ip, asr #8
 801fb40:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801fb44:	1210      	asrs	r0, r2, #8
 801fb46:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801fb4a:	fb11 f104 	smulbb	r1, r1, r4
 801fb4e:	ea4f 0eec 	mov.w	lr, ip, asr #3
 801fb52:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801fb56:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801fb5a:	fb00 1003 	mla	r0, r0, r3, r1
 801fb5e:	fa5f fc8c 	uxtb.w	ip, ip
 801fb62:	10d1      	asrs	r1, r2, #3
 801fb64:	00d2      	lsls	r2, r2, #3
 801fb66:	fb1c fc04 	smulbb	ip, ip, r4
 801fb6a:	b2d2      	uxtb	r2, r2
 801fb6c:	fb02 c203 	mla	r2, r2, r3, ip
 801fb70:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801fb74:	b280      	uxth	r0, r0
 801fb76:	b292      	uxth	r2, r2
 801fb78:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801fb7c:	fb1e fe04 	smulbb	lr, lr, r4
 801fb80:	fb01 e103 	mla	r1, r1, r3, lr
 801fb84:	f102 0c01 	add.w	ip, r2, #1
 801fb88:	1c43      	adds	r3, r0, #1
 801fb8a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801fb8e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801fb92:	b289      	uxth	r1, r1
 801fb94:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801fb98:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801fb9c:	4313      	orrs	r3, r2
 801fb9e:	1c4a      	adds	r2, r1, #1
 801fba0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801fba4:	0949      	lsrs	r1, r1, #5
 801fba6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801fbaa:	430b      	orrs	r3, r1
 801fbac:	803b      	strh	r3, [r7, #0]
 801fbae:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801fbb0:	449a      	add	sl, r3
 801fbb2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fbb4:	3702      	adds	r7, #2
 801fbb6:	441d      	add	r5, r3
 801fbb8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fbbc:	e741      	b.n	801fa42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801fbbe:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801fbc0:	449a      	add	sl, r3
 801fbc2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fbc4:	441d      	add	r5, r3
 801fbc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fbc8:	3b01      	subs	r3, #1
 801fbca:	9309      	str	r3, [sp, #36]	; 0x24
 801fbcc:	f108 0802 	add.w	r8, r8, #2
 801fbd0:	e717      	b.n	801fa02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fbd2:	d023      	beq.n	801fc1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 801fbd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fbd6:	982d      	ldr	r0, [sp, #180]	; 0xb4
 801fbd8:	3b01      	subs	r3, #1
 801fbda:	fb00 a003 	mla	r0, r0, r3, sl
 801fbde:	1400      	asrs	r0, r0, #16
 801fbe0:	f53f af2c 	bmi.w	801fa3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801fbe4:	3901      	subs	r1, #1
 801fbe6:	4288      	cmp	r0, r1
 801fbe8:	f6bf af28 	bge.w	801fa3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801fbec:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801fbee:	fb01 5303 	mla	r3, r1, r3, r5
 801fbf2:	141b      	asrs	r3, r3, #16
 801fbf4:	f53f af22 	bmi.w	801fa3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801fbf8:	3a01      	subs	r2, #1
 801fbfa:	4293      	cmp	r3, r2
 801fbfc:	f6bf af1e 	bge.w	801fa3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801fc00:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801fc04:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801fc08:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801fc0c:	f1be 0f00 	cmp.w	lr, #0
 801fc10:	dc6c      	bgt.n	801fcec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801fc12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc14:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fc18:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801fc1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fc1e:	2b00      	cmp	r3, #0
 801fc20:	f340 810e 	ble.w	801fe40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 801fc24:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801fc28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fc2c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801fc30:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fc32:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801fc36:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801fc3a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801fc3e:	eef0 6a48 	vmov.f32	s13, s16
 801fc42:	ee69 7a27 	vmul.f32	s15, s18, s15
 801fc46:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fc4a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801fc4e:	ee16 aa90 	vmov	sl, s13
 801fc52:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fc56:	eef0 6a68 	vmov.f32	s13, s17
 801fc5a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fc5e:	ee18 2a10 	vmov	r2, s16
 801fc62:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801fc66:	fb92 f3f3 	sdiv	r3, r2, r3
 801fc6a:	ee18 2a90 	vmov	r2, s17
 801fc6e:	932d      	str	r3, [sp, #180]	; 0xb4
 801fc70:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fc72:	fb92 f3f3 	sdiv	r3, r2, r3
 801fc76:	932e      	str	r3, [sp, #184]	; 0xb8
 801fc78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fc7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801fc7c:	3b01      	subs	r3, #1
 801fc7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fc82:	930c      	str	r3, [sp, #48]	; 0x30
 801fc84:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fc86:	bf08      	it	eq
 801fc88:	4613      	moveq	r3, r2
 801fc8a:	ee16 5a90 	vmov	r5, s13
 801fc8e:	9309      	str	r3, [sp, #36]	; 0x24
 801fc90:	eef0 8a67 	vmov.f32	s17, s15
 801fc94:	eeb0 8a47 	vmov.f32	s16, s14
 801fc98:	e6a5      	b.n	801f9e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801fc9a:	2900      	cmp	r1, #0
 801fc9c:	f43f af0f 	beq.w	801fabe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801fca0:	f819 3003 	ldrb.w	r3, [r9, r3]
 801fca4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801fca8:	930f      	str	r3, [sp, #60]	; 0x3c
 801fcaa:	e708      	b.n	801fabe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801fcac:	f112 0901 	adds.w	r9, r2, #1
 801fcb0:	f53f af7d 	bmi.w	801fbae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801fcb4:	454b      	cmp	r3, r9
 801fcb6:	f6ff af7a 	blt.w	801fbae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801fcba:	f11c 0901 	adds.w	r9, ip, #1
 801fcbe:	f53f af76 	bmi.w	801fbae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801fcc2:	45ce      	cmp	lr, r9
 801fcc4:	f6ff af73 	blt.w	801fbae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801fcc8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801fcca:	9202      	str	r2, [sp, #8]
 801fccc:	b21b      	sxth	r3, r3
 801fcce:	fa0f f28e 	sxth.w	r2, lr
 801fcd2:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801fcd6:	e9cd c003 	strd	ip, r0, [sp, #12]
 801fcda:	9201      	str	r2, [sp, #4]
 801fcdc:	9300      	str	r3, [sp, #0]
 801fcde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fce0:	9816      	ldr	r0, [sp, #88]	; 0x58
 801fce2:	4633      	mov	r3, r6
 801fce4:	4639      	mov	r1, r7
 801fce6:	f7ff fd6f 	bl	801f7c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801fcea:	e760      	b.n	801fbae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801fcec:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801fcee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fcf0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801fcf4:	ea4f 422a 	mov.w	r2, sl, asr #16
 801fcf8:	1429      	asrs	r1, r5, #16
 801fcfa:	fb03 2101 	mla	r1, r3, r1, r2
 801fcfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fd00:	440a      	add	r2, r1
 801fd02:	5c61      	ldrb	r1, [r4, r1]
 801fd04:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801fd08:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801fd0c:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801fd10:	f1bc 0f00 	cmp.w	ip, #0
 801fd14:	f000 808c 	beq.w	801fe30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 801fd18:	7857      	ldrb	r7, [r2, #1]
 801fd1a:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801fd1e:	9413      	str	r4, [sp, #76]	; 0x4c
 801fd20:	b140      	cbz	r0, 801fd34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 801fd22:	18d7      	adds	r7, r2, r3
 801fd24:	5cd3      	ldrb	r3, [r2, r3]
 801fd26:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801fd2a:	9310      	str	r3, [sp, #64]	; 0x40
 801fd2c:	787b      	ldrb	r3, [r7, #1]
 801fd2e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801fd32:	9314      	str	r3, [sp, #80]	; 0x50
 801fd34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801fd36:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fd38:	fb1c f200 	smulbb	r2, ip, r0
 801fd3c:	041f      	lsls	r7, r3, #16
 801fd3e:	10d2      	asrs	r2, r2, #3
 801fd40:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801fd44:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801fd48:	431f      	orrs	r7, r3
 801fd4a:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801fd4e:	9317      	str	r3, [sp, #92]	; 0x5c
 801fd50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fd52:	041b      	lsls	r3, r3, #16
 801fd54:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801fd58:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801fd5c:	ea43 030b 	orr.w	r3, r3, fp
 801fd60:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801fd62:	4353      	muls	r3, r2
 801fd64:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801fd68:	fb04 3707 	mla	r7, r4, r7, r3
 801fd6c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801fd70:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801fd74:	ea43 0b01 	orr.w	fp, r3, r1
 801fd78:	f1c0 0110 	rsb	r1, r0, #16
 801fd7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fd7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fd80:	eba1 0c0c 	sub.w	ip, r1, ip
 801fd84:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801fd88:	fb0c 770b 	mla	r7, ip, fp, r7
 801fd8c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801fd90:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801fd94:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801fd98:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801fd9c:	ea4c 0c0b 	orr.w	ip, ip, fp
 801fda0:	fb02 770c 	mla	r7, r2, ip, r7
 801fda4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fda6:	0d79      	lsrs	r1, r7, #21
 801fda8:	097f      	lsrs	r7, r7, #5
 801fdaa:	8812      	ldrh	r2, [r2, #0]
 801fdac:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801fdb0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801fdb4:	430f      	orrs	r7, r1
 801fdb6:	b2bb      	uxth	r3, r7
 801fdb8:	1211      	asrs	r1, r2, #8
 801fdba:	1218      	asrs	r0, r3, #8
 801fdbc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801fdc0:	fb11 f104 	smulbb	r1, r1, r4
 801fdc4:	10d7      	asrs	r7, r2, #3
 801fdc6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801fdca:	00d2      	lsls	r2, r2, #3
 801fdcc:	fb00 1009 	mla	r0, r0, r9, r1
 801fdd0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fdd4:	10d9      	asrs	r1, r3, #3
 801fdd6:	b2d2      	uxtb	r2, r2
 801fdd8:	00db      	lsls	r3, r3, #3
 801fdda:	fb17 f704 	smulbb	r7, r7, r4
 801fdde:	fb12 f204 	smulbb	r2, r2, r4
 801fde2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801fde6:	b2db      	uxtb	r3, r3
 801fde8:	b280      	uxth	r0, r0
 801fdea:	fb01 7109 	mla	r1, r1, r9, r7
 801fdee:	fb03 2309 	mla	r3, r3, r9, r2
 801fdf2:	b29b      	uxth	r3, r3
 801fdf4:	b289      	uxth	r1, r1
 801fdf6:	1c42      	adds	r2, r0, #1
 801fdf8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801fdfc:	1c4f      	adds	r7, r1, #1
 801fdfe:	1c5a      	adds	r2, r3, #1
 801fe00:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801fe04:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801fe08:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801fe0c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801fe10:	0949      	lsrs	r1, r1, #5
 801fe12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fe14:	4310      	orrs	r0, r2
 801fe16:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801fe1a:	4308      	orrs	r0, r1
 801fe1c:	f823 0b02 	strh.w	r0, [r3], #2
 801fe20:	930e      	str	r3, [sp, #56]	; 0x38
 801fe22:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801fe24:	449a      	add	sl, r3
 801fe26:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fe28:	f10e 3eff 	add.w	lr, lr, #4294967295
 801fe2c:	441d      	add	r5, r3
 801fe2e:	e6ed      	b.n	801fc0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801fe30:	2800      	cmp	r0, #0
 801fe32:	f43f af7f 	beq.w	801fd34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 801fe36:	5cd3      	ldrb	r3, [r2, r3]
 801fe38:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801fe3c:	9310      	str	r3, [sp, #64]	; 0x40
 801fe3e:	e779      	b.n	801fd34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 801fe40:	b019      	add	sp, #100	; 0x64
 801fe42:	ecbd 8b08 	vpop	{d8-d11}
 801fe46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801fe4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801fe4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fe50:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 801fe54:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801fe58:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801fe5c:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 801fe60:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801fe64:	8808      	ldrh	r0, [r1, #0]
 801fe66:	fb06 570e 	mla	r7, r6, lr, r5
 801fe6a:	2e00      	cmp	r6, #0
 801fe6c:	eb02 0807 	add.w	r8, r2, r7
 801fe70:	db38      	blt.n	801fee4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 801fe72:	45b1      	cmp	r9, r6
 801fe74:	dd36      	ble.n	801fee4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 801fe76:	2d00      	cmp	r5, #0
 801fe78:	db32      	blt.n	801fee0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 801fe7a:	45ae      	cmp	lr, r5
 801fe7c:	dd30      	ble.n	801fee0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 801fe7e:	5dd2      	ldrb	r2, [r2, r7]
 801fe80:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801fe84:	1c6a      	adds	r2, r5, #1
 801fe86:	d430      	bmi.n	801feea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801fe88:	4596      	cmp	lr, r2
 801fe8a:	dd2e      	ble.n	801feea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801fe8c:	b36c      	cbz	r4, 801feea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801fe8e:	f898 2001 	ldrb.w	r2, [r8, #1]
 801fe92:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801fe96:	3601      	adds	r6, #1
 801fe98:	d42b      	bmi.n	801fef2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 801fe9a:	45b1      	cmp	r9, r6
 801fe9c:	dd29      	ble.n	801fef2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 801fe9e:	f1bc 0f00 	cmp.w	ip, #0
 801fea2:	d028      	beq.n	801fef6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 801fea4:	2d00      	cmp	r5, #0
 801fea6:	db22      	blt.n	801feee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 801fea8:	45ae      	cmp	lr, r5
 801feaa:	dd20      	ble.n	801feee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 801feac:	f818 600e 	ldrb.w	r6, [r8, lr]
 801feb0:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 801feb4:	3501      	adds	r5, #1
 801feb6:	d407      	bmi.n	801fec8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801feb8:	45ae      	cmp	lr, r5
 801feba:	dd05      	ble.n	801fec8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801febc:	b134      	cbz	r4, 801fecc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801febe:	44c6      	add	lr, r8
 801fec0:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801fec4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801fec8:	2c0f      	cmp	r4, #15
 801feca:	d802      	bhi.n	801fed2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 801fecc:	f1bc 0f0f 	cmp.w	ip, #15
 801fed0:	d914      	bls.n	801fefc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 801fed2:	4b26      	ldr	r3, [pc, #152]	; (801ff6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 801fed4:	4a26      	ldr	r2, [pc, #152]	; (801ff70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 801fed6:	4827      	ldr	r0, [pc, #156]	; (801ff74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 801fed8:	f240 11ef 	movw	r1, #495	; 0x1ef
 801fedc:	f006 fea2 	bl	8026c24 <__assert_func>
 801fee0:	4607      	mov	r7, r0
 801fee2:	e7cf      	b.n	801fe84 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 801fee4:	4602      	mov	r2, r0
 801fee6:	4607      	mov	r7, r0
 801fee8:	e7d5      	b.n	801fe96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 801feea:	4602      	mov	r2, r0
 801feec:	e7d3      	b.n	801fe96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 801feee:	4606      	mov	r6, r0
 801fef0:	e7e0      	b.n	801feb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 801fef2:	4606      	mov	r6, r0
 801fef4:	e7e8      	b.n	801fec8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 801fef6:	2c0f      	cmp	r4, #15
 801fef8:	d8eb      	bhi.n	801fed2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 801fefa:	4606      	mov	r6, r0
 801fefc:	043d      	lsls	r5, r7, #16
 801fefe:	fb14 f30c 	smulbb	r3, r4, ip
 801ff02:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 801ff06:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 801ff0a:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801ff0e:	10db      	asrs	r3, r3, #3
 801ff10:	432f      	orrs	r7, r5
 801ff12:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801ff16:	f1cc 0510 	rsb	r5, ip, #16
 801ff1a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ff1e:	1b2d      	subs	r5, r5, r4
 801ff20:	ea4e 0202 	orr.w	r2, lr, r2
 801ff24:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 801ff28:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801ff2c:	4354      	muls	r4, r2
 801ff2e:	fb05 4507 	mla	r5, r5, r7, r4
 801ff32:	0404      	lsls	r4, r0, #16
 801ff34:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801ff38:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801ff3c:	4320      	orrs	r0, r4
 801ff3e:	fb03 5400 	mla	r4, r3, r0, r5
 801ff42:	0430      	lsls	r0, r6, #16
 801ff44:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801ff48:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 801ff4c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801ff50:	4330      	orrs	r0, r6
 801ff52:	fb03 4000 	mla	r0, r3, r0, r4
 801ff56:	0d43      	lsrs	r3, r0, #21
 801ff58:	0940      	lsrs	r0, r0, #5
 801ff5a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ff5e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801ff62:	4318      	orrs	r0, r3
 801ff64:	8008      	strh	r0, [r1, #0]
 801ff66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ff6a:	bf00      	nop
 801ff6c:	0802c82a 	.word	0x0802c82a
 801ff70:	0802ce96 	.word	0x0802ce96
 801ff74:	0802c913 	.word	0x0802c913

0801ff78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ff78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff7c:	ed2d 8b0a 	vpush	{d8-d12}
 801ff80:	b093      	sub	sp, #76	; 0x4c
 801ff82:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 801ff86:	920f      	str	r2, [sp, #60]	; 0x3c
 801ff88:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801ff8a:	9108      	str	r1, [sp, #32]
 801ff8c:	9306      	str	r3, [sp, #24]
 801ff8e:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801ff92:	9010      	str	r0, [sp, #64]	; 0x40
 801ff94:	6850      	ldr	r0, [r2, #4]
 801ff96:	6812      	ldr	r2, [r2, #0]
 801ff98:	fb00 1303 	mla	r3, r0, r3, r1
 801ff9c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801ffa0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ffa2:	681b      	ldr	r3, [r3, #0]
 801ffa4:	9307      	str	r3, [sp, #28]
 801ffa6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ffa8:	685f      	ldr	r7, [r3, #4]
 801ffaa:	eeb0 aa40 	vmov.f32	s20, s0
 801ffae:	eef0 9a60 	vmov.f32	s19, s1
 801ffb2:	eeb0 9a41 	vmov.f32	s18, s2
 801ffb6:	eeb0 8a62 	vmov.f32	s16, s5
 801ffba:	eef0 8a43 	vmov.f32	s17, s6
 801ffbe:	eeb0 ca44 	vmov.f32	s24, s8
 801ffc2:	eef0 ba64 	vmov.f32	s23, s9
 801ffc6:	eeb0 ba45 	vmov.f32	s22, s10
 801ffca:	3704      	adds	r7, #4
 801ffcc:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801ffd0:	9b08      	ldr	r3, [sp, #32]
 801ffd2:	2b00      	cmp	r3, #0
 801ffd4:	dc03      	bgt.n	801ffde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ffd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ffd8:	2b00      	cmp	r3, #0
 801ffda:	f340 81b2 	ble.w	8020342 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801ffde:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ffe0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ffe4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ffe8:	1e48      	subs	r0, r1, #1
 801ffea:	f102 3cff 	add.w	ip, r2, #4294967295
 801ffee:	9b06      	ldr	r3, [sp, #24]
 801fff0:	2b00      	cmp	r3, #0
 801fff2:	f340 80a9 	ble.w	8020148 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801fff6:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801fffa:	ea4f 4326 	mov.w	r3, r6, asr #16
 801fffe:	d406      	bmi.n	802000e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020000:	4586      	cmp	lr, r0
 8020002:	da04      	bge.n	802000e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020004:	2b00      	cmp	r3, #0
 8020006:	db02      	blt.n	802000e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020008:	4563      	cmp	r3, ip
 802000a:	f2c0 809e 	blt.w	802014a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802000e:	f11e 0e01 	adds.w	lr, lr, #1
 8020012:	f100 808f 	bmi.w	8020134 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8020016:	4571      	cmp	r1, lr
 8020018:	f2c0 808c 	blt.w	8020134 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 802001c:	3301      	adds	r3, #1
 802001e:	f100 8089 	bmi.w	8020134 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8020022:	429a      	cmp	r2, r3
 8020024:	f2c0 8086 	blt.w	8020134 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8020028:	f8dd b018 	ldr.w	fp, [sp, #24]
 802002c:	46c8      	mov	r8, r9
 802002e:	f1bb 0f00 	cmp.w	fp, #0
 8020032:	f340 80a6 	ble.w	8020182 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8020036:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8020038:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802003a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802003e:	689b      	ldr	r3, [r3, #8]
 8020040:	1422      	asrs	r2, r4, #16
 8020042:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8020046:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802004a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802004e:	f100 80e3 	bmi.w	8020218 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8020052:	f103 3aff 	add.w	sl, r3, #4294967295
 8020056:	4552      	cmp	r2, sl
 8020058:	f280 80de 	bge.w	8020218 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 802005c:	f1bc 0f00 	cmp.w	ip, #0
 8020060:	f2c0 80da 	blt.w	8020218 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8020064:	f10e 3aff 	add.w	sl, lr, #4294967295
 8020068:	45d4      	cmp	ip, sl
 802006a:	f280 80d5 	bge.w	8020218 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 802006e:	b21b      	sxth	r3, r3
 8020070:	fb0c 2203 	mla	r2, ip, r3, r2
 8020074:	9d07      	ldr	r5, [sp, #28]
 8020076:	eb05 0a02 	add.w	sl, r5, r2
 802007a:	5caa      	ldrb	r2, [r5, r2]
 802007c:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8020080:	2800      	cmp	r0, #0
 8020082:	f000 80c0 	beq.w	8020206 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 8020086:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802008a:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 802008e:	920b      	str	r2, [sp, #44]	; 0x2c
 8020090:	b151      	cbz	r1, 80200a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8020092:	eb0a 0203 	add.w	r2, sl, r3
 8020096:	f81a 3003 	ldrb.w	r3, [sl, r3]
 802009a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802009e:	9309      	str	r3, [sp, #36]	; 0x24
 80200a0:	7853      	ldrb	r3, [r2, #1]
 80200a2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80200a6:	930c      	str	r3, [sp, #48]	; 0x30
 80200a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80200aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80200ac:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80200b0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80200b4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80200b8:	ea4c 0c03 	orr.w	ip, ip, r3
 80200bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80200be:	041b      	lsls	r3, r3, #16
 80200c0:	fb10 f201 	smulbb	r2, r0, r1
 80200c4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80200c8:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80200cc:	10d2      	asrs	r2, r2, #3
 80200ce:	432b      	orrs	r3, r5
 80200d0:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 80200d4:	4353      	muls	r3, r2
 80200d6:	fb0a 330c 	mla	r3, sl, ip, r3
 80200da:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80200de:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80200e2:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80200e6:	ea4c 0e0e 	orr.w	lr, ip, lr
 80200ea:	f1c1 0c10 	rsb	ip, r1, #16
 80200ee:	ebac 0c00 	sub.w	ip, ip, r0
 80200f2:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80200f6:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80200fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80200fc:	0418      	lsls	r0, r3, #16
 80200fe:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020102:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020106:	4318      	orrs	r0, r3
 8020108:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 802010c:	fb02 c200 	mla	r2, r2, r0, ip
 8020110:	0d53      	lsrs	r3, r2, #21
 8020112:	0952      	lsrs	r2, r2, #5
 8020114:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020118:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802011c:	431a      	orrs	r2, r3
 802011e:	f8a8 2000 	strh.w	r2, [r8]
 8020122:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020124:	441c      	add	r4, r3
 8020126:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020128:	f108 0802 	add.w	r8, r8, #2
 802012c:	441e      	add	r6, r3
 802012e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020132:	e77c      	b.n	802002e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8020134:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020136:	441c      	add	r4, r3
 8020138:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802013a:	441e      	add	r6, r3
 802013c:	9b06      	ldr	r3, [sp, #24]
 802013e:	3b01      	subs	r3, #1
 8020140:	9306      	str	r3, [sp, #24]
 8020142:	f109 0902 	add.w	r9, r9, #2
 8020146:	e752      	b.n	801ffee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020148:	d020      	beq.n	802018c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 802014a:	9b06      	ldr	r3, [sp, #24]
 802014c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 802014e:	3b01      	subs	r3, #1
 8020150:	fb00 4003 	mla	r0, r0, r3, r4
 8020154:	1400      	asrs	r0, r0, #16
 8020156:	f53f af67 	bmi.w	8020028 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802015a:	3901      	subs	r1, #1
 802015c:	4288      	cmp	r0, r1
 802015e:	f6bf af63 	bge.w	8020028 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020162:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8020164:	fb01 6303 	mla	r3, r1, r3, r6
 8020168:	141b      	asrs	r3, r3, #16
 802016a:	f53f af5d 	bmi.w	8020028 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802016e:	3a01      	subs	r2, #1
 8020170:	4293      	cmp	r3, r2
 8020172:	f6bf af59 	bge.w	8020028 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020176:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802017a:	46ca      	mov	sl, r9
 802017c:	f1b8 0f00 	cmp.w	r8, #0
 8020180:	dc67      	bgt.n	8020252 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8020182:	9b06      	ldr	r3, [sp, #24]
 8020184:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8020188:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802018c:	9b08      	ldr	r3, [sp, #32]
 802018e:	2b00      	cmp	r3, #0
 8020190:	f340 80d7 	ble.w	8020342 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8020194:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8020198:	ee79 9aab 	vadd.f32	s19, s19, s23
 802019c:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80201a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80201a2:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80201a6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80201aa:	eef0 6a48 	vmov.f32	s13, s16
 80201ae:	ee69 7a27 	vmul.f32	s15, s18, s15
 80201b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80201b6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80201ba:	ee16 4a90 	vmov	r4, s13
 80201be:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80201c2:	eef0 6a68 	vmov.f32	s13, s17
 80201c6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80201ca:	ee18 2a10 	vmov	r2, s16
 80201ce:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80201d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80201d6:	ee18 2a90 	vmov	r2, s17
 80201da:	9329      	str	r3, [sp, #164]	; 0xa4
 80201dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80201de:	fb92 f3f3 	sdiv	r3, r2, r3
 80201e2:	932a      	str	r3, [sp, #168]	; 0xa8
 80201e4:	9b08      	ldr	r3, [sp, #32]
 80201e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80201e8:	3b01      	subs	r3, #1
 80201ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80201ee:	9308      	str	r3, [sp, #32]
 80201f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80201f2:	bf08      	it	eq
 80201f4:	4613      	moveq	r3, r2
 80201f6:	ee16 6a90 	vmov	r6, s13
 80201fa:	9306      	str	r3, [sp, #24]
 80201fc:	eef0 8a67 	vmov.f32	s17, s15
 8020200:	eeb0 8a47 	vmov.f32	s16, s14
 8020204:	e6e4      	b.n	801ffd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8020206:	2900      	cmp	r1, #0
 8020208:	f43f af4e 	beq.w	80200a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 802020c:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8020210:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8020214:	9309      	str	r3, [sp, #36]	; 0x24
 8020216:	e747      	b.n	80200a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8020218:	f112 0a01 	adds.w	sl, r2, #1
 802021c:	d481      	bmi.n	8020122 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802021e:	4553      	cmp	r3, sl
 8020220:	f6ff af7f 	blt.w	8020122 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8020224:	f11c 0a01 	adds.w	sl, ip, #1
 8020228:	f53f af7b 	bmi.w	8020122 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802022c:	45d6      	cmp	lr, sl
 802022e:	f6ff af78 	blt.w	8020122 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8020232:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8020236:	b21b      	sxth	r3, r3
 8020238:	fa0f f28e 	sxth.w	r2, lr
 802023c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8020240:	9201      	str	r2, [sp, #4]
 8020242:	9300      	str	r3, [sp, #0]
 8020244:	9a07      	ldr	r2, [sp, #28]
 8020246:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020248:	463b      	mov	r3, r7
 802024a:	4641      	mov	r1, r8
 802024c:	f7ff fdfe 	bl	801fe4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8020250:	e767      	b.n	8020122 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8020252:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020254:	9d07      	ldr	r5, [sp, #28]
 8020256:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802025a:	1422      	asrs	r2, r4, #16
 802025c:	1431      	asrs	r1, r6, #16
 802025e:	fb03 2101 	mla	r1, r3, r1, r2
 8020262:	9a07      	ldr	r2, [sp, #28]
 8020264:	440a      	add	r2, r1
 8020266:	5c69      	ldrb	r1, [r5, r1]
 8020268:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 802026c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020270:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8020274:	f1be 0f00 	cmp.w	lr, #0
 8020278:	d05c      	beq.n	8020334 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 802027a:	f892 c001 	ldrb.w	ip, [r2, #1]
 802027e:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8020282:	950d      	str	r5, [sp, #52]	; 0x34
 8020284:	b150      	cbz	r0, 802029c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8020286:	eb02 0c03 	add.w	ip, r2, r3
 802028a:	5cd3      	ldrb	r3, [r2, r3]
 802028c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8020290:	930a      	str	r3, [sp, #40]	; 0x28
 8020292:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8020296:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802029a:	930e      	str	r3, [sp, #56]	; 0x38
 802029c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802029e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80202a0:	fb1e f200 	smulbb	r2, lr, r0
 80202a4:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80202a8:	10d2      	asrs	r2, r2, #3
 80202aa:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80202ae:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80202b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80202b6:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 80202ba:	9311      	str	r3, [sp, #68]	; 0x44
 80202bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80202be:	041b      	lsls	r3, r3, #16
 80202c0:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 80202c4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80202c8:	ea43 030b 	orr.w	r3, r3, fp
 80202cc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80202ce:	4353      	muls	r3, r2
 80202d0:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80202d4:	fb05 3c0c 	mla	ip, r5, ip, r3
 80202d8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80202dc:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 80202e0:	ea43 0b01 	orr.w	fp, r3, r1
 80202e4:	f1c0 0110 	rsb	r1, r0, #16
 80202e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80202ea:	eba1 0e0e 	sub.w	lr, r1, lr
 80202ee:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 80202f2:	fb0e cc0b 	mla	ip, lr, fp, ip
 80202f6:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 80202fa:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 80202fe:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020302:	ea4b 0e0e 	orr.w	lr, fp, lr
 8020306:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 802030a:	fb02 cc0e 	mla	ip, r2, lr, ip
 802030e:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8020312:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8020316:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802031a:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802031e:	ea43 0c0c 	orr.w	ip, r3, ip
 8020322:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020324:	f82a cb02 	strh.w	ip, [sl], #2
 8020328:	441c      	add	r4, r3
 802032a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802032c:	f108 38ff 	add.w	r8, r8, #4294967295
 8020330:	441e      	add	r6, r3
 8020332:	e723      	b.n	802017c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8020334:	2800      	cmp	r0, #0
 8020336:	d0b1      	beq.n	802029c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8020338:	5cd3      	ldrb	r3, [r2, r3]
 802033a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802033e:	930a      	str	r3, [sp, #40]	; 0x28
 8020340:	e7ac      	b.n	802029c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8020342:	b013      	add	sp, #76	; 0x4c
 8020344:	ecbd 8b0a 	vpop	{d8-d12}
 8020348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802034c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 802034c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020350:	468b      	mov	fp, r1
 8020352:	8809      	ldrh	r1, [r1, #0]
 8020354:	b089      	sub	sp, #36	; 0x24
 8020356:	10cd      	asrs	r5, r1, #3
 8020358:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 802035c:	ea4f 2921 	mov.w	r9, r1, asr #8
 8020360:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8020364:	00c9      	lsls	r1, r1, #3
 8020366:	9500      	str	r5, [sp, #0]
 8020368:	b2c9      	uxtb	r1, r1
 802036a:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 802036e:	9101      	str	r1, [sp, #4]
 8020370:	9900      	ldr	r1, [sp, #0]
 8020372:	9202      	str	r2, [sp, #8]
 8020374:	fb04 650e 	mla	r5, r4, lr, r6
 8020378:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 802037c:	eb02 0805 	add.w	r8, r2, r5
 8020380:	0209      	lsls	r1, r1, #8
 8020382:	9a01      	ldr	r2, [sp, #4]
 8020384:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8020388:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 802038c:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8020390:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 8020394:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8020398:	4311      	orrs	r1, r2
 802039a:	2c00      	cmp	r4, #0
 802039c:	9107      	str	r1, [sp, #28]
 802039e:	db43      	blt.n	8020428 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 80203a0:	45a2      	cmp	sl, r4
 80203a2:	dd41      	ble.n	8020428 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 80203a4:	2e00      	cmp	r6, #0
 80203a6:	db3d      	blt.n	8020424 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 80203a8:	45b6      	cmp	lr, r6
 80203aa:	dd3b      	ble.n	8020424 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 80203ac:	9a02      	ldr	r2, [sp, #8]
 80203ae:	5d55      	ldrb	r5, [r2, r5]
 80203b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80203b4:	441d      	add	r5, r3
 80203b6:	1c72      	adds	r2, r6, #1
 80203b8:	d439      	bmi.n	802042e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 80203ba:	4596      	cmp	lr, r2
 80203bc:	dd37      	ble.n	802042e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 80203be:	2f00      	cmp	r7, #0
 80203c0:	d035      	beq.n	802042e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 80203c2:	f898 1001 	ldrb.w	r1, [r8, #1]
 80203c6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80203ca:	4419      	add	r1, r3
 80203cc:	3401      	adds	r4, #1
 80203ce:	d432      	bmi.n	8020436 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 80203d0:	45a2      	cmp	sl, r4
 80203d2:	dd30      	ble.n	8020436 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 80203d4:	b378      	cbz	r0, 8020436 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 80203d6:	2e00      	cmp	r6, #0
 80203d8:	db2b      	blt.n	8020432 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 80203da:	45b6      	cmp	lr, r6
 80203dc:	dd29      	ble.n	8020432 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 80203de:	f818 400e 	ldrb.w	r4, [r8, lr]
 80203e2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80203e6:	441c      	add	r4, r3
 80203e8:	3601      	adds	r6, #1
 80203ea:	d427      	bmi.n	802043c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 80203ec:	45b6      	cmp	lr, r6
 80203ee:	dd25      	ble.n	802043c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 80203f0:	b327      	cbz	r7, 802043c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 80203f2:	44c6      	add	lr, r8
 80203f4:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80203f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80203fc:	4413      	add	r3, r2
 80203fe:	782a      	ldrb	r2, [r5, #0]
 8020400:	9202      	str	r2, [sp, #8]
 8020402:	780a      	ldrb	r2, [r1, #0]
 8020404:	9203      	str	r2, [sp, #12]
 8020406:	7822      	ldrb	r2, [r4, #0]
 8020408:	9204      	str	r2, [sp, #16]
 802040a:	2f0f      	cmp	r7, #15
 802040c:	781a      	ldrb	r2, [r3, #0]
 802040e:	9205      	str	r2, [sp, #20]
 8020410:	d801      	bhi.n	8020416 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xca>
 8020412:	280f      	cmp	r0, #15
 8020414:	d914      	bls.n	8020440 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf4>
 8020416:	4b3f      	ldr	r3, [pc, #252]	; (8020514 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c8>)
 8020418:	4a3f      	ldr	r2, [pc, #252]	; (8020518 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 802041a:	4840      	ldr	r0, [pc, #256]	; (802051c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 802041c:	f240 210d 	movw	r1, #525	; 0x20d
 8020420:	f006 fc00 	bl	8026c24 <__assert_func>
 8020424:	ad07      	add	r5, sp, #28
 8020426:	e7c6      	b.n	80203b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6a>
 8020428:	a907      	add	r1, sp, #28
 802042a:	460d      	mov	r5, r1
 802042c:	e7ce      	b.n	80203cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 802042e:	a907      	add	r1, sp, #28
 8020430:	e7cc      	b.n	80203cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 8020432:	ac07      	add	r4, sp, #28
 8020434:	e7d8      	b.n	80203e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9c>
 8020436:	ab07      	add	r3, sp, #28
 8020438:	461c      	mov	r4, r3
 802043a:	e7e0      	b.n	80203fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 802043c:	ab07      	add	r3, sp, #28
 802043e:	e7de      	b.n	80203fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 8020440:	b2ba      	uxth	r2, r7
 8020442:	b280      	uxth	r0, r0
 8020444:	fb02 fa00 	mul.w	sl, r2, r0
 8020448:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802044c:	0112      	lsls	r2, r2, #4
 802044e:	b280      	uxth	r0, r0
 8020450:	f891 8002 	ldrb.w	r8, [r1, #2]
 8020454:	7849      	ldrb	r1, [r1, #1]
 8020456:	78ae      	ldrb	r6, [r5, #2]
 8020458:	786d      	ldrb	r5, [r5, #1]
 802045a:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 802045e:	eba2 020a 	sub.w	r2, r2, sl
 8020462:	b292      	uxth	r2, r2
 8020464:	ebae 0e00 	sub.w	lr, lr, r0
 8020468:	fa1f fe8e 	uxth.w	lr, lr
 802046c:	4351      	muls	r1, r2
 802046e:	fb02 f808 	mul.w	r8, r2, r8
 8020472:	fb0e 8806 	mla	r8, lr, r6, r8
 8020476:	fb0e 1505 	mla	r5, lr, r5, r1
 802047a:	78a6      	ldrb	r6, [r4, #2]
 802047c:	7861      	ldrb	r1, [r4, #1]
 802047e:	fa1f f78c 	uxth.w	r7, ip
 8020482:	fb00 8806 	mla	r8, r0, r6, r8
 8020486:	fb00 5501 	mla	r5, r0, r1, r5
 802048a:	789e      	ldrb	r6, [r3, #2]
 802048c:	7859      	ldrb	r1, [r3, #1]
 802048e:	9b00      	ldr	r3, [sp, #0]
 8020490:	ea6f 0c0c 	mvn.w	ip, ip
 8020494:	fa5f fc8c 	uxtb.w	ip, ip
 8020498:	fb0a 5101 	mla	r1, sl, r1, r5
 802049c:	fb13 f50c 	smulbb	r5, r3, ip
 80204a0:	9b03      	ldr	r3, [sp, #12]
 80204a2:	435a      	muls	r2, r3
 80204a4:	9b02      	ldr	r3, [sp, #8]
 80204a6:	fb0e 2203 	mla	r2, lr, r3, r2
 80204aa:	9b04      	ldr	r3, [sp, #16]
 80204ac:	fb00 2003 	mla	r0, r0, r3, r2
 80204b0:	9b05      	ldr	r3, [sp, #20]
 80204b2:	fb0a 8606 	mla	r6, sl, r6, r8
 80204b6:	fb0a 0a03 	mla	sl, sl, r3, r0
 80204ba:	9b01      	ldr	r3, [sp, #4]
 80204bc:	fb19 f90c 	smulbb	r9, r9, ip
 80204c0:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 80204c4:	fb13 fc0c 	smulbb	ip, r3, ip
 80204c8:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80204cc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80204d0:	fb06 9607 	mla	r6, r6, r7, r9
 80204d4:	fb01 5107 	mla	r1, r1, r7, r5
 80204d8:	fb0a c707 	mla	r7, sl, r7, ip
 80204dc:	b2b6      	uxth	r6, r6
 80204de:	b289      	uxth	r1, r1
 80204e0:	b2bf      	uxth	r7, r7
 80204e2:	f106 0901 	add.w	r9, r6, #1
 80204e6:	f107 0c01 	add.w	ip, r7, #1
 80204ea:	1c4d      	adds	r5, r1, #1
 80204ec:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 80204f0:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 80204f4:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 80204f8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80204fc:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8020500:	0949      	lsrs	r1, r1, #5
 8020502:	433e      	orrs	r6, r7
 8020504:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020508:	430e      	orrs	r6, r1
 802050a:	f8ab 6000 	strh.w	r6, [fp]
 802050e:	b009      	add	sp, #36	; 0x24
 8020510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020514:	0802c82a 	.word	0x0802c82a
 8020518:	0802cded 	.word	0x0802cded
 802051c:	0802c913 	.word	0x0802c913

08020520 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020524:	ed2d 8b08 	vpush	{d8-d11}
 8020528:	b095      	sub	sp, #84	; 0x54
 802052a:	eeb0 aa40 	vmov.f32	s20, s0
 802052e:	9212      	str	r2, [sp, #72]	; 0x48
 8020530:	9309      	str	r3, [sp, #36]	; 0x24
 8020532:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020534:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8020538:	930f      	str	r3, [sp, #60]	; 0x3c
 802053a:	910e      	str	r1, [sp, #56]	; 0x38
 802053c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8020540:	9013      	str	r0, [sp, #76]	; 0x4c
 8020542:	6850      	ldr	r0, [r2, #4]
 8020544:	6812      	ldr	r2, [r2, #0]
 8020546:	fb00 1303 	mla	r3, r0, r3, r1
 802054a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802054e:	930a      	str	r3, [sp, #40]	; 0x28
 8020550:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020552:	681b      	ldr	r3, [r3, #0]
 8020554:	930d      	str	r3, [sp, #52]	; 0x34
 8020556:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020558:	685c      	ldr	r4, [r3, #4]
 802055a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802055c:	43db      	mvns	r3, r3
 802055e:	b2db      	uxtb	r3, r3
 8020560:	eef0 9a60 	vmov.f32	s19, s1
 8020564:	eeb0 9a41 	vmov.f32	s18, s2
 8020568:	eeb0 8a62 	vmov.f32	s16, s5
 802056c:	eef0 8a43 	vmov.f32	s17, s6
 8020570:	eef0 ba44 	vmov.f32	s23, s8
 8020574:	eeb0 ba64 	vmov.f32	s22, s9
 8020578:	eef0 aa45 	vmov.f32	s21, s10
 802057c:	3404      	adds	r4, #4
 802057e:	930b      	str	r3, [sp, #44]	; 0x2c
 8020580:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020582:	2b00      	cmp	r3, #0
 8020584:	dc03      	bgt.n	802058e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020586:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020588:	2b00      	cmp	r3, #0
 802058a:	f340 8258 	ble.w	8020a3e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 802058e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020590:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020594:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020598:	1e48      	subs	r0, r1, #1
 802059a:	1e55      	subs	r5, r2, #1
 802059c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802059e:	2b00      	cmp	r3, #0
 80205a0:	f340 80fc 	ble.w	802079c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80205a4:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80205a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80205a8:	1436      	asrs	r6, r6, #16
 80205aa:	ea4f 4323 	mov.w	r3, r3, asr #16
 80205ae:	d406      	bmi.n	80205be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80205b0:	4286      	cmp	r6, r0
 80205b2:	da04      	bge.n	80205be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80205b4:	2b00      	cmp	r3, #0
 80205b6:	db02      	blt.n	80205be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80205b8:	42ab      	cmp	r3, r5
 80205ba:	f2c0 80f0 	blt.w	802079e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80205be:	3601      	adds	r6, #1
 80205c0:	f100 80dd 	bmi.w	802077e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80205c4:	42b1      	cmp	r1, r6
 80205c6:	f2c0 80da 	blt.w	802077e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80205ca:	3301      	adds	r3, #1
 80205cc:	f100 80d7 	bmi.w	802077e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80205d0:	429a      	cmp	r2, r3
 80205d2:	f2c0 80d4 	blt.w	802077e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80205d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80205d8:	9311      	str	r3, [sp, #68]	; 0x44
 80205da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80205dc:	930c      	str	r3, [sp, #48]	; 0x30
 80205de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80205e0:	2b00      	cmp	r3, #0
 80205e2:	f340 80fd 	ble.w	80207e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 80205e6:	982e      	ldr	r0, [sp, #184]	; 0xb8
 80205e8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80205ea:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80205ec:	68c6      	ldr	r6, [r0, #12]
 80205ee:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80205f0:	141d      	asrs	r5, r3, #16
 80205f2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80205f6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80205f8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80205fa:	1400      	asrs	r0, r0, #16
 80205fc:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8020600:	6892      	ldr	r2, [r2, #8]
 8020602:	f100 8141 	bmi.w	8020888 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8020606:	1e57      	subs	r7, r2, #1
 8020608:	42b8      	cmp	r0, r7
 802060a:	f280 813d 	bge.w	8020888 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802060e:	2d00      	cmp	r5, #0
 8020610:	f2c0 813a 	blt.w	8020888 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8020614:	1e77      	subs	r7, r6, #1
 8020616:	42bd      	cmp	r5, r7
 8020618:	f280 8136 	bge.w	8020888 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802061c:	b212      	sxth	r2, r2
 802061e:	fb05 0002 	mla	r0, r5, r2, r0
 8020622:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020624:	f815 a000 	ldrb.w	sl, [r5, r0]
 8020628:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 802062c:	182e      	adds	r6, r5, r0
 802062e:	eb04 050a 	add.w	r5, r4, sl
 8020632:	2b00      	cmp	r3, #0
 8020634:	f000 811a 	beq.w	802086c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8020638:	f896 c001 	ldrb.w	ip, [r6, #1]
 802063c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8020640:	44a4      	add	ip, r4
 8020642:	2900      	cmp	r1, #0
 8020644:	f000 811a 	beq.w	802087c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8020648:	18b0      	adds	r0, r6, r2
 802064a:	5cb2      	ldrb	r2, [r6, r2]
 802064c:	7840      	ldrb	r0, [r0, #1]
 802064e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020652:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020656:	4422      	add	r2, r4
 8020658:	4420      	add	r0, r4
 802065a:	b29b      	uxth	r3, r3
 802065c:	b289      	uxth	r1, r1
 802065e:	fb03 f901 	mul.w	r9, r3, r1
 8020662:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020666:	011b      	lsls	r3, r3, #4
 8020668:	b289      	uxth	r1, r1
 802066a:	f89c 7002 	ldrb.w	r7, [ip, #2]
 802066e:	f895 b002 	ldrb.w	fp, [r5, #2]
 8020672:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020674:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8020678:	f8b6 e000 	ldrh.w	lr, [r6]
 802067c:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8020680:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8020684:	eba3 0309 	sub.w	r3, r3, r9
 8020688:	b29b      	uxth	r3, r3
 802068a:	eba8 0801 	sub.w	r8, r8, r1
 802068e:	fa1f f888 	uxth.w	r8, r8
 8020692:	435f      	muls	r7, r3
 8020694:	fb08 770b 	mla	r7, r8, fp, r7
 8020698:	f892 b002 	ldrb.w	fp, [r2, #2]
 802069c:	9310      	str	r3, [sp, #64]	; 0x40
 802069e:	fb01 770b 	mla	r7, r1, fp, r7
 80206a2:	f890 b002 	ldrb.w	fp, [r0, #2]
 80206a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80206a8:	fb09 770b 	mla	r7, r9, fp, r7
 80206ac:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 80206b0:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80206b4:	fb1b fb03 	smulbb	fp, fp, r3
 80206b8:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80206bc:	fb07 b706 	mla	r7, r7, r6, fp
 80206c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80206c2:	f895 b001 	ldrb.w	fp, [r5, #1]
 80206c6:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80206ca:	f89c c000 	ldrb.w	ip, [ip]
 80206ce:	435d      	muls	r5, r3
 80206d0:	fb08 550b 	mla	r5, r8, fp, r5
 80206d4:	f892 b001 	ldrb.w	fp, [r2, #1]
 80206d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80206da:	fb01 550b 	mla	r5, r1, fp, r5
 80206de:	f890 b001 	ldrb.w	fp, [r0, #1]
 80206e2:	fb09 550b 	mla	r5, r9, fp, r5
 80206e6:	ea4f 0bee 	mov.w	fp, lr, asr #3
 80206ea:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80206ee:	fb1b fb03 	smulbb	fp, fp, r3
 80206f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80206f4:	fb03 f30c 	mul.w	r3, r3, ip
 80206f8:	f892 c000 	ldrb.w	ip, [r2]
 80206fc:	fb08 330a 	mla	r3, r8, sl, r3
 8020700:	fb01 330c 	mla	r3, r1, ip, r3
 8020704:	f890 c000 	ldrb.w	ip, [r0]
 8020708:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802070c:	fb09 3c0c 	mla	ip, r9, ip, r3
 8020710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020712:	fa5f fe8e 	uxtb.w	lr, lr
 8020716:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802071a:	fb1e fe03 	smulbb	lr, lr, r3
 802071e:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8020722:	fb05 b506 	mla	r5, r5, r6, fp
 8020726:	fb0c ee06 	mla	lr, ip, r6, lr
 802072a:	b2bf      	uxth	r7, r7
 802072c:	b2ad      	uxth	r5, r5
 802072e:	fa1f fe8e 	uxth.w	lr, lr
 8020732:	1c7a      	adds	r2, r7, #1
 8020734:	f10e 0c01 	add.w	ip, lr, #1
 8020738:	f105 0b01 	add.w	fp, r5, #1
 802073c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8020740:	eb0c 2e1e 	add.w	lr, ip, lr, lsr #8
 8020744:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8020748:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 802074c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8020750:	096d      	lsrs	r5, r5, #5
 8020752:	ea47 070e 	orr.w	r7, r7, lr
 8020756:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802075a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802075c:	433d      	orrs	r5, r7
 802075e:	801d      	strh	r5, [r3, #0]
 8020760:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020762:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020764:	3302      	adds	r3, #2
 8020766:	930c      	str	r3, [sp, #48]	; 0x30
 8020768:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802076a:	4413      	add	r3, r2
 802076c:	9327      	str	r3, [sp, #156]	; 0x9c
 802076e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020770:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020772:	4413      	add	r3, r2
 8020774:	9328      	str	r3, [sp, #160]	; 0xa0
 8020776:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020778:	3b01      	subs	r3, #1
 802077a:	9311      	str	r3, [sp, #68]	; 0x44
 802077c:	e72f      	b.n	80205de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 802077e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020780:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8020782:	4433      	add	r3, r6
 8020784:	9327      	str	r3, [sp, #156]	; 0x9c
 8020786:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8020788:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802078a:	4433      	add	r3, r6
 802078c:	9328      	str	r3, [sp, #160]	; 0xa0
 802078e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020790:	3b01      	subs	r3, #1
 8020792:	9309      	str	r3, [sp, #36]	; 0x24
 8020794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020796:	3302      	adds	r3, #2
 8020798:	930a      	str	r3, [sp, #40]	; 0x28
 802079a:	e6ff      	b.n	802059c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802079c:	d027      	beq.n	80207ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ce>
 802079e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80207a0:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80207a2:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80207a4:	3b01      	subs	r3, #1
 80207a6:	fb00 5003 	mla	r0, r0, r3, r5
 80207aa:	1400      	asrs	r0, r0, #16
 80207ac:	f53f af13 	bmi.w	80205d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80207b0:	3901      	subs	r1, #1
 80207b2:	4288      	cmp	r0, r1
 80207b4:	f6bf af0f 	bge.w	80205d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80207b8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80207ba:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80207bc:	fb01 0303 	mla	r3, r1, r3, r0
 80207c0:	141b      	asrs	r3, r3, #16
 80207c2:	f53f af08 	bmi.w	80205d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80207c6:	3a01      	subs	r2, #1
 80207c8:	4293      	cmp	r3, r2
 80207ca:	f6bf af04 	bge.w	80205d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80207ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80207d0:	9311      	str	r3, [sp, #68]	; 0x44
 80207d2:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80207d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80207d8:	930c      	str	r3, [sp, #48]	; 0x30
 80207da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80207dc:	2b00      	cmp	r3, #0
 80207de:	dc70      	bgt.n	80208c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 80207e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80207e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80207e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80207e8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80207ec:	930a      	str	r3, [sp, #40]	; 0x28
 80207ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80207f0:	2b00      	cmp	r3, #0
 80207f2:	f340 8124 	ble.w	8020a3e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 80207f6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80207fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80207fe:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020802:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020804:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020808:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802080c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020810:	eef0 6a48 	vmov.f32	s13, s16
 8020814:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020818:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802081c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020820:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8020824:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020828:	eef0 6a68 	vmov.f32	s13, s17
 802082c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020830:	ee18 2a10 	vmov	r2, s16
 8020834:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020838:	fb92 f3f3 	sdiv	r3, r2, r3
 802083c:	ee18 2a90 	vmov	r2, s17
 8020840:	9329      	str	r3, [sp, #164]	; 0xa4
 8020842:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020844:	fb92 f3f3 	sdiv	r3, r2, r3
 8020848:	932a      	str	r3, [sp, #168]	; 0xa8
 802084a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802084c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802084e:	3b01      	subs	r3, #1
 8020850:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020854:	930e      	str	r3, [sp, #56]	; 0x38
 8020856:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020858:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 802085c:	bf08      	it	eq
 802085e:	4613      	moveq	r3, r2
 8020860:	9309      	str	r3, [sp, #36]	; 0x24
 8020862:	eef0 8a67 	vmov.f32	s17, s15
 8020866:	eeb0 8a47 	vmov.f32	s16, s14
 802086a:	e689      	b.n	8020580 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802086c:	b149      	cbz	r1, 8020882 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802086e:	5cb2      	ldrb	r2, [r6, r2]
 8020870:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020874:	4422      	add	r2, r4
 8020876:	4628      	mov	r0, r5
 8020878:	46ac      	mov	ip, r5
 802087a:	e6ee      	b.n	802065a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 802087c:	4628      	mov	r0, r5
 802087e:	462a      	mov	r2, r5
 8020880:	e6eb      	b.n	802065a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8020882:	4628      	mov	r0, r5
 8020884:	462a      	mov	r2, r5
 8020886:	e7f7      	b.n	8020878 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8020888:	1c47      	adds	r7, r0, #1
 802088a:	f53f af69 	bmi.w	8020760 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802088e:	42ba      	cmp	r2, r7
 8020890:	f6ff af66 	blt.w	8020760 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8020894:	1c6f      	adds	r7, r5, #1
 8020896:	f53f af63 	bmi.w	8020760 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802089a:	42be      	cmp	r6, r7
 802089c:	f6ff af60 	blt.w	8020760 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80208a0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80208a2:	9002      	str	r0, [sp, #8]
 80208a4:	b236      	sxth	r6, r6
 80208a6:	b212      	sxth	r2, r2
 80208a8:	e9cd 1705 	strd	r1, r7, [sp, #20]
 80208ac:	e9cd 5303 	strd	r5, r3, [sp, #12]
 80208b0:	9200      	str	r2, [sp, #0]
 80208b2:	9601      	str	r6, [sp, #4]
 80208b4:	4623      	mov	r3, r4
 80208b6:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80208ba:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80208bc:	f7ff fd46 	bl	802034c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 80208c0:	e74e      	b.n	8020760 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80208c2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80208c4:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80208c6:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80208c8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80208ca:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80208ce:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80208d0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80208d4:	142d      	asrs	r5, r5, #16
 80208d6:	1400      	asrs	r0, r0, #16
 80208d8:	fb02 5000 	mla	r0, r2, r0, r5
 80208dc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80208de:	f815 9000 	ldrb.w	r9, [r5, r0]
 80208e2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80208e6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80208ea:	182e      	adds	r6, r5, r0
 80208ec:	eb04 0509 	add.w	r5, r4, r9
 80208f0:	2b00      	cmp	r3, #0
 80208f2:	f000 8096 	beq.w	8020a22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x502>
 80208f6:	7877      	ldrb	r7, [r6, #1]
 80208f8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80208fc:	4427      	add	r7, r4
 80208fe:	2900      	cmp	r1, #0
 8020900:	f000 8097 	beq.w	8020a32 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8020904:	18b0      	adds	r0, r6, r2
 8020906:	5cb2      	ldrb	r2, [r6, r2]
 8020908:	7840      	ldrb	r0, [r0, #1]
 802090a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802090e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020912:	4422      	add	r2, r4
 8020914:	4420      	add	r0, r4
 8020916:	b29b      	uxth	r3, r3
 8020918:	b289      	uxth	r1, r1
 802091a:	fb03 f801 	mul.w	r8, r3, r1
 802091e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020920:	f895 b002 	ldrb.w	fp, [r5, #2]
 8020924:	f8b6 c000 	ldrh.w	ip, [r6]
 8020928:	78be      	ldrb	r6, [r7, #2]
 802092a:	f814 9009 	ldrb.w	r9, [r4, r9]
 802092e:	011b      	lsls	r3, r3, #4
 8020930:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8020934:	b289      	uxth	r1, r1
 8020936:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802093a:	eba3 0308 	sub.w	r3, r3, r8
 802093e:	b29b      	uxth	r3, r3
 8020940:	ebae 0e01 	sub.w	lr, lr, r1
 8020944:	fa1f fe8e 	uxth.w	lr, lr
 8020948:	435e      	muls	r6, r3
 802094a:	fb0e 660b 	mla	r6, lr, fp, r6
 802094e:	f892 b002 	ldrb.w	fp, [r2, #2]
 8020952:	9310      	str	r3, [sp, #64]	; 0x40
 8020954:	fb01 660b 	mla	r6, r1, fp, r6
 8020958:	f890 b002 	ldrb.w	fp, [r0, #2]
 802095c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802095e:	fb08 660b 	mla	r6, r8, fp, r6
 8020962:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8020966:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 802096a:	fb1b fb03 	smulbb	fp, fp, r3
 802096e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8020972:	fb06 b60a 	mla	r6, r6, sl, fp
 8020976:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020978:	f895 b001 	ldrb.w	fp, [r5, #1]
 802097c:	787d      	ldrb	r5, [r7, #1]
 802097e:	783f      	ldrb	r7, [r7, #0]
 8020980:	435d      	muls	r5, r3
 8020982:	fb0e 550b 	mla	r5, lr, fp, r5
 8020986:	f892 b001 	ldrb.w	fp, [r2, #1]
 802098a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802098c:	fb01 550b 	mla	r5, r1, fp, r5
 8020990:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020994:	fb08 550b 	mla	r5, r8, fp, r5
 8020998:	ea4f 0bec 	mov.w	fp, ip, asr #3
 802099c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80209a0:	fb1b fb03 	smulbb	fp, fp, r3
 80209a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80209a6:	437b      	muls	r3, r7
 80209a8:	7817      	ldrb	r7, [r2, #0]
 80209aa:	fb0e 3309 	mla	r3, lr, r9, r3
 80209ae:	fb01 3307 	mla	r3, r1, r7, r3
 80209b2:	7807      	ldrb	r7, [r0, #0]
 80209b4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80209b8:	fb08 3707 	mla	r7, r8, r7, r3
 80209bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80209be:	fa5f fc8c 	uxtb.w	ip, ip
 80209c2:	fb1c fc03 	smulbb	ip, ip, r3
 80209c6:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80209ca:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80209ce:	fb05 b50a 	mla	r5, r5, sl, fp
 80209d2:	fb07 c70a 	mla	r7, r7, sl, ip
 80209d6:	b2b6      	uxth	r6, r6
 80209d8:	b2ad      	uxth	r5, r5
 80209da:	b2bf      	uxth	r7, r7
 80209dc:	1c73      	adds	r3, r6, #1
 80209de:	1c7a      	adds	r2, r7, #1
 80209e0:	f105 0b01 	add.w	fp, r5, #1
 80209e4:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80209e8:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 80209ec:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80209f0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80209f4:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80209f8:	096d      	lsrs	r5, r5, #5
 80209fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80209fc:	4316      	orrs	r6, r2
 80209fe:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020a02:	432e      	orrs	r6, r5
 8020a04:	f823 6b02 	strh.w	r6, [r3], #2
 8020a08:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020a0a:	930c      	str	r3, [sp, #48]	; 0x30
 8020a0c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020a0e:	4413      	add	r3, r2
 8020a10:	9327      	str	r3, [sp, #156]	; 0x9c
 8020a12:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020a14:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020a16:	4413      	add	r3, r2
 8020a18:	9328      	str	r3, [sp, #160]	; 0xa0
 8020a1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020a1c:	3b01      	subs	r3, #1
 8020a1e:	9311      	str	r3, [sp, #68]	; 0x44
 8020a20:	e6db      	b.n	80207da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8020a22:	b149      	cbz	r1, 8020a38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8020a24:	5cb2      	ldrb	r2, [r6, r2]
 8020a26:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020a2a:	4422      	add	r2, r4
 8020a2c:	4628      	mov	r0, r5
 8020a2e:	462f      	mov	r7, r5
 8020a30:	e771      	b.n	8020916 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8020a32:	4628      	mov	r0, r5
 8020a34:	462a      	mov	r2, r5
 8020a36:	e76e      	b.n	8020916 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8020a38:	4628      	mov	r0, r5
 8020a3a:	462a      	mov	r2, r5
 8020a3c:	e7f7      	b.n	8020a2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50e>
 8020a3e:	b015      	add	sp, #84	; 0x54
 8020a40:	ecbd 8b08 	vpop	{d8-d11}
 8020a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020a48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8020a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a4c:	880e      	ldrh	r6, [r1, #0]
 8020a4e:	b085      	sub	sp, #20
 8020a50:	0230      	lsls	r0, r6, #8
 8020a52:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8020a56:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 8020a5a:	0170      	lsls	r0, r6, #5
 8020a5c:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8020a60:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8020a64:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8020a68:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 8020a6c:	00f6      	lsls	r6, r6, #3
 8020a6e:	ea4b 0000 	orr.w	r0, fp, r0
 8020a72:	b2f6      	uxtb	r6, r6
 8020a74:	4691      	mov	r9, r2
 8020a76:	fb05 7a0c 	mla	sl, r5, ip, r7
 8020a7a:	4306      	orrs	r6, r0
 8020a7c:	2d00      	cmp	r5, #0
 8020a7e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8020a82:	9603      	str	r6, [sp, #12]
 8020a84:	eb09 0e0a 	add.w	lr, r9, sl
 8020a88:	db42      	blt.n	8020b10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 8020a8a:	45a8      	cmp	r8, r5
 8020a8c:	dd40      	ble.n	8020b10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 8020a8e:	2f00      	cmp	r7, #0
 8020a90:	db3c      	blt.n	8020b0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 8020a92:	45bc      	cmp	ip, r7
 8020a94:	dd3a      	ble.n	8020b0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 8020a96:	f819 600a 	ldrb.w	r6, [r9, sl]
 8020a9a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020a9e:	441e      	add	r6, r3
 8020aa0:	1c78      	adds	r0, r7, #1
 8020aa2:	d438      	bmi.n	8020b16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 8020aa4:	4584      	cmp	ip, r0
 8020aa6:	dd36      	ble.n	8020b16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 8020aa8:	b3aa      	cbz	r2, 8020b16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 8020aaa:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8020aae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020ab2:	4418      	add	r0, r3
 8020ab4:	3501      	adds	r5, #1
 8020ab6:	d432      	bmi.n	8020b1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 8020ab8:	45a8      	cmp	r8, r5
 8020aba:	dd30      	ble.n	8020b1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 8020abc:	b37c      	cbz	r4, 8020b1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 8020abe:	2f00      	cmp	r7, #0
 8020ac0:	db2b      	blt.n	8020b1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 8020ac2:	45bc      	cmp	ip, r7
 8020ac4:	dd29      	ble.n	8020b1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 8020ac6:	f81e 500c 	ldrb.w	r5, [lr, ip]
 8020aca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020ace:	441d      	add	r5, r3
 8020ad0:	3701      	adds	r7, #1
 8020ad2:	d427      	bmi.n	8020b24 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 8020ad4:	45bc      	cmp	ip, r7
 8020ad6:	dd25      	ble.n	8020b24 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 8020ad8:	b322      	cbz	r2, 8020b24 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 8020ada:	44f4      	add	ip, lr
 8020adc:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8020ae0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020ae4:	443b      	add	r3, r7
 8020ae6:	781f      	ldrb	r7, [r3, #0]
 8020ae8:	f896 a000 	ldrb.w	sl, [r6]
 8020aec:	f890 b000 	ldrb.w	fp, [r0]
 8020af0:	f895 9000 	ldrb.w	r9, [r5]
 8020af4:	9700      	str	r7, [sp, #0]
 8020af6:	2a0f      	cmp	r2, #15
 8020af8:	d801      	bhi.n	8020afe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb6>
 8020afa:	2c0f      	cmp	r4, #15
 8020afc:	d914      	bls.n	8020b28 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe0>
 8020afe:	4b2c      	ldr	r3, [pc, #176]	; (8020bb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x168>)
 8020b00:	4a2c      	ldr	r2, [pc, #176]	; (8020bb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 8020b02:	482d      	ldr	r0, [pc, #180]	; (8020bb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 8020b04:	f240 210d 	movw	r1, #525	; 0x20d
 8020b08:	f006 f88c 	bl	8026c24 <__assert_func>
 8020b0c:	ae03      	add	r6, sp, #12
 8020b0e:	e7c7      	b.n	8020aa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x58>
 8020b10:	a803      	add	r0, sp, #12
 8020b12:	4606      	mov	r6, r0
 8020b14:	e7ce      	b.n	8020ab4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 8020b16:	a803      	add	r0, sp, #12
 8020b18:	e7cc      	b.n	8020ab4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 8020b1a:	ad03      	add	r5, sp, #12
 8020b1c:	e7d8      	b.n	8020ad0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x88>
 8020b1e:	ab03      	add	r3, sp, #12
 8020b20:	461d      	mov	r5, r3
 8020b22:	e7e0      	b.n	8020ae6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 8020b24:	ab03      	add	r3, sp, #12
 8020b26:	e7de      	b.n	8020ae6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 8020b28:	b292      	uxth	r2, r2
 8020b2a:	b2a4      	uxth	r4, r4
 8020b2c:	fb02 f804 	mul.w	r8, r2, r4
 8020b30:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8020b34:	0112      	lsls	r2, r2, #4
 8020b36:	b2a4      	uxth	r4, r4
 8020b38:	f890 e002 	ldrb.w	lr, [r0, #2]
 8020b3c:	78b7      	ldrb	r7, [r6, #2]
 8020b3e:	7840      	ldrb	r0, [r0, #1]
 8020b40:	7876      	ldrb	r6, [r6, #1]
 8020b42:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8020b46:	eba2 0208 	sub.w	r2, r2, r8
 8020b4a:	b292      	uxth	r2, r2
 8020b4c:	ebac 0c04 	sub.w	ip, ip, r4
 8020b50:	fa1f fc8c 	uxth.w	ip, ip
 8020b54:	fb02 fe0e 	mul.w	lr, r2, lr
 8020b58:	fb0c ee07 	mla	lr, ip, r7, lr
 8020b5c:	78af      	ldrb	r7, [r5, #2]
 8020b5e:	fb04 ee07 	mla	lr, r4, r7, lr
 8020b62:	789f      	ldrb	r7, [r3, #2]
 8020b64:	785b      	ldrb	r3, [r3, #1]
 8020b66:	fb08 e707 	mla	r7, r8, r7, lr
 8020b6a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020b6e:	fb02 fe0b 	mul.w	lr, r2, fp
 8020b72:	4342      	muls	r2, r0
 8020b74:	7868      	ldrb	r0, [r5, #1]
 8020b76:	9701      	str	r7, [sp, #4]
 8020b78:	fb0c ee0a 	mla	lr, ip, sl, lr
 8020b7c:	9f00      	ldr	r7, [sp, #0]
 8020b7e:	fb0c 2206 	mla	r2, ip, r6, r2
 8020b82:	fb04 ee09 	mla	lr, r4, r9, lr
 8020b86:	fb04 2400 	mla	r4, r4, r0, r2
 8020b8a:	fb08 ee07 	mla	lr, r8, r7, lr
 8020b8e:	9f01      	ldr	r7, [sp, #4]
 8020b90:	fb08 4803 	mla	r8, r8, r3, r4
 8020b94:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8020b98:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8020b9c:	ea47 070e 	orr.w	r7, r7, lr
 8020ba0:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8020ba4:	ea47 0708 	orr.w	r7, r7, r8
 8020ba8:	800f      	strh	r7, [r1, #0]
 8020baa:	b005      	add	sp, #20
 8020bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020bb0:	0802c82a 	.word	0x0802c82a
 8020bb4:	0802cded 	.word	0x0802cded
 8020bb8:	0802c913 	.word	0x0802c913

08020bbc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bc0:	ed2d 8b08 	vpush	{d8-d11}
 8020bc4:	b08f      	sub	sp, #60	; 0x3c
 8020bc6:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 8020bca:	920c      	str	r2, [sp, #48]	; 0x30
 8020bcc:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020bce:	910a      	str	r1, [sp, #40]	; 0x28
 8020bd0:	9306      	str	r3, [sp, #24]
 8020bd2:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8020bd6:	900d      	str	r0, [sp, #52]	; 0x34
 8020bd8:	6850      	ldr	r0, [r2, #4]
 8020bda:	6812      	ldr	r2, [r2, #0]
 8020bdc:	fb00 1303 	mla	r3, r0, r3, r1
 8020be0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020be4:	9307      	str	r3, [sp, #28]
 8020be6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020be8:	681b      	ldr	r3, [r3, #0]
 8020bea:	9308      	str	r3, [sp, #32]
 8020bec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020bee:	685c      	ldr	r4, [r3, #4]
 8020bf0:	eeb0 aa40 	vmov.f32	s20, s0
 8020bf4:	eef0 9a60 	vmov.f32	s19, s1
 8020bf8:	eeb0 9a41 	vmov.f32	s18, s2
 8020bfc:	eeb0 8a62 	vmov.f32	s16, s5
 8020c00:	eef0 8a43 	vmov.f32	s17, s6
 8020c04:	eef0 ba44 	vmov.f32	s23, s8
 8020c08:	eeb0 ba64 	vmov.f32	s22, s9
 8020c0c:	eef0 aa45 	vmov.f32	s21, s10
 8020c10:	3404      	adds	r4, #4
 8020c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020c14:	2b00      	cmp	r3, #0
 8020c16:	dc03      	bgt.n	8020c20 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8020c18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020c1a:	2b00      	cmp	r3, #0
 8020c1c:	f340 81d6 	ble.w	8020fcc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8020c20:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020c22:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020c26:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020c2a:	1e48      	subs	r0, r1, #1
 8020c2c:	1e56      	subs	r6, r2, #1
 8020c2e:	9b06      	ldr	r3, [sp, #24]
 8020c30:	2b00      	cmp	r3, #0
 8020c32:	f340 80b7 	ble.w	8020da4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020c36:	ea5f 472b 	movs.w	r7, fp, asr #16
 8020c3a:	ea4f 4325 	mov.w	r3, r5, asr #16
 8020c3e:	d406      	bmi.n	8020c4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020c40:	4287      	cmp	r7, r0
 8020c42:	da04      	bge.n	8020c4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020c44:	2b00      	cmp	r3, #0
 8020c46:	db02      	blt.n	8020c4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020c48:	42b3      	cmp	r3, r6
 8020c4a:	f2c0 80ac 	blt.w	8020da6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8020c4e:	3701      	adds	r7, #1
 8020c50:	f100 809d 	bmi.w	8020d8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8020c54:	42b9      	cmp	r1, r7
 8020c56:	f2c0 809a 	blt.w	8020d8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8020c5a:	3301      	adds	r3, #1
 8020c5c:	f100 8097 	bmi.w	8020d8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8020c60:	429a      	cmp	r2, r3
 8020c62:	f2c0 8094 	blt.w	8020d8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8020c66:	9b06      	ldr	r3, [sp, #24]
 8020c68:	930b      	str	r3, [sp, #44]	; 0x2c
 8020c6a:	9b07      	ldr	r3, [sp, #28]
 8020c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8020c6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020c70:	2b00      	cmp	r3, #0
 8020c72:	f340 80b5 	ble.w	8020de0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8020c76:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8020c78:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8020c7a:	68c7      	ldr	r7, [r0, #12]
 8020c7c:	6892      	ldr	r2, [r2, #8]
 8020c7e:	ea5f 402b 	movs.w	r0, fp, asr #16
 8020c82:	ea4f 4625 	mov.w	r6, r5, asr #16
 8020c86:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8020c8a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020c8e:	f100 80fb 	bmi.w	8020e88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8020c92:	f102 3cff 	add.w	ip, r2, #4294967295
 8020c96:	4560      	cmp	r0, ip
 8020c98:	f280 80f6 	bge.w	8020e88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8020c9c:	2e00      	cmp	r6, #0
 8020c9e:	f2c0 80f3 	blt.w	8020e88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8020ca2:	f107 3cff 	add.w	ip, r7, #4294967295
 8020ca6:	4566      	cmp	r6, ip
 8020ca8:	f280 80ee 	bge.w	8020e88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8020cac:	b212      	sxth	r2, r2
 8020cae:	fb06 0002 	mla	r0, r6, r2, r0
 8020cb2:	9e08      	ldr	r6, [sp, #32]
 8020cb4:	1837      	adds	r7, r6, r0
 8020cb6:	5c30      	ldrb	r0, [r6, r0]
 8020cb8:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8020cbc:	eb04 0c08 	add.w	ip, r4, r8
 8020cc0:	2b00      	cmp	r3, #0
 8020cc2:	f000 80d3 	beq.w	8020e6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020cc6:	787e      	ldrb	r6, [r7, #1]
 8020cc8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020ccc:	4426      	add	r6, r4
 8020cce:	2900      	cmp	r1, #0
 8020cd0:	f000 80d4 	beq.w	8020e7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 8020cd4:	18b8      	adds	r0, r7, r2
 8020cd6:	5cba      	ldrb	r2, [r7, r2]
 8020cd8:	7840      	ldrb	r0, [r0, #1]
 8020cda:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020cde:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020ce2:	4422      	add	r2, r4
 8020ce4:	4420      	add	r0, r4
 8020ce6:	b29b      	uxth	r3, r3
 8020ce8:	b289      	uxth	r1, r1
 8020cea:	fb03 f901 	mul.w	r9, r3, r1
 8020cee:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020cf2:	011b      	lsls	r3, r3, #4
 8020cf4:	b289      	uxth	r1, r1
 8020cf6:	78b7      	ldrb	r7, [r6, #2]
 8020cf8:	f89c a002 	ldrb.w	sl, [ip, #2]
 8020cfc:	f89c c001 	ldrb.w	ip, [ip, #1]
 8020d00:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8020d04:	eba3 0309 	sub.w	r3, r3, r9
 8020d08:	b29b      	uxth	r3, r3
 8020d0a:	ebae 0e01 	sub.w	lr, lr, r1
 8020d0e:	fa1f fe8e 	uxth.w	lr, lr
 8020d12:	435f      	muls	r7, r3
 8020d14:	fb0e 770a 	mla	r7, lr, sl, r7
 8020d18:	f892 a002 	ldrb.w	sl, [r2, #2]
 8020d1c:	fb01 770a 	mla	r7, r1, sl, r7
 8020d20:	f890 a002 	ldrb.w	sl, [r0, #2]
 8020d24:	fb09 7a0a 	mla	sl, r9, sl, r7
 8020d28:	f814 7008 	ldrb.w	r7, [r4, r8]
 8020d2c:	f896 8000 	ldrb.w	r8, [r6]
 8020d30:	7876      	ldrb	r6, [r6, #1]
 8020d32:	fb03 f808 	mul.w	r8, r3, r8
 8020d36:	fb0e 8807 	mla	r8, lr, r7, r8
 8020d3a:	7817      	ldrb	r7, [r2, #0]
 8020d3c:	fb01 8807 	mla	r8, r1, r7, r8
 8020d40:	7807      	ldrb	r7, [r0, #0]
 8020d42:	fb09 8707 	mla	r7, r9, r7, r8
 8020d46:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8020d4a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8020d4e:	ea4a 0707 	orr.w	r7, sl, r7
 8020d52:	4373      	muls	r3, r6
 8020d54:	f892 a001 	ldrb.w	sl, [r2, #1]
 8020d58:	fb0e 330c 	mla	r3, lr, ip, r3
 8020d5c:	fb01 310a 	mla	r1, r1, sl, r3
 8020d60:	f890 a001 	ldrb.w	sl, [r0, #1]
 8020d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020d66:	fb09 1a0a 	mla	sl, r9, sl, r1
 8020d6a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020d6e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020d72:	ea47 070a 	orr.w	r7, r7, sl
 8020d76:	801f      	strh	r7, [r3, #0]
 8020d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020d7a:	3302      	adds	r3, #2
 8020d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8020d7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020d80:	449b      	add	fp, r3
 8020d82:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020d84:	441d      	add	r5, r3
 8020d86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020d88:	3b01      	subs	r3, #1
 8020d8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8020d8c:	e76f      	b.n	8020c6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8020d8e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020d90:	449b      	add	fp, r3
 8020d92:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020d94:	441d      	add	r5, r3
 8020d96:	9b06      	ldr	r3, [sp, #24]
 8020d98:	3b01      	subs	r3, #1
 8020d9a:	9306      	str	r3, [sp, #24]
 8020d9c:	9b07      	ldr	r3, [sp, #28]
 8020d9e:	3302      	adds	r3, #2
 8020da0:	9307      	str	r3, [sp, #28]
 8020da2:	e744      	b.n	8020c2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020da4:	d023      	beq.n	8020dee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8020da6:	9b06      	ldr	r3, [sp, #24]
 8020da8:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8020daa:	3b01      	subs	r3, #1
 8020dac:	fb00 b003 	mla	r0, r0, r3, fp
 8020db0:	1400      	asrs	r0, r0, #16
 8020db2:	f53f af58 	bmi.w	8020c66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8020db6:	3901      	subs	r1, #1
 8020db8:	4288      	cmp	r0, r1
 8020dba:	f6bf af54 	bge.w	8020c66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8020dbe:	9924      	ldr	r1, [sp, #144]	; 0x90
 8020dc0:	fb01 5303 	mla	r3, r1, r3, r5
 8020dc4:	141b      	asrs	r3, r3, #16
 8020dc6:	f53f af4e 	bmi.w	8020c66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8020dca:	3a01      	subs	r2, #1
 8020dcc:	4293      	cmp	r3, r2
 8020dce:	f6bf af4a 	bge.w	8020c66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8020dd2:	9b06      	ldr	r3, [sp, #24]
 8020dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8020dd6:	9b07      	ldr	r3, [sp, #28]
 8020dd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8020dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020ddc:	2b00      	cmp	r3, #0
 8020dde:	dc70      	bgt.n	8020ec2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8020de0:	9b06      	ldr	r3, [sp, #24]
 8020de2:	9a07      	ldr	r2, [sp, #28]
 8020de4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020de8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020dec:	9307      	str	r3, [sp, #28]
 8020dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020df0:	2b00      	cmp	r3, #0
 8020df2:	f340 80eb 	ble.w	8020fcc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8020df6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020dfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020dfe:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020e02:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020e04:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020e08:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020e0c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020e10:	eef0 6a48 	vmov.f32	s13, s16
 8020e14:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020e18:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e1c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020e20:	ee16 ba90 	vmov	fp, s13
 8020e24:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020e28:	eef0 6a68 	vmov.f32	s13, s17
 8020e2c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020e30:	ee18 2a10 	vmov	r2, s16
 8020e34:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020e38:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e3c:	ee18 2a90 	vmov	r2, s17
 8020e40:	9323      	str	r3, [sp, #140]	; 0x8c
 8020e42:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020e44:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e48:	9324      	str	r3, [sp, #144]	; 0x90
 8020e4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020e4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020e4e:	3b01      	subs	r3, #1
 8020e50:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e54:	930a      	str	r3, [sp, #40]	; 0x28
 8020e56:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020e58:	bf08      	it	eq
 8020e5a:	4613      	moveq	r3, r2
 8020e5c:	ee16 5a90 	vmov	r5, s13
 8020e60:	9306      	str	r3, [sp, #24]
 8020e62:	eef0 8a67 	vmov.f32	s17, s15
 8020e66:	eeb0 8a47 	vmov.f32	s16, s14
 8020e6a:	e6d2      	b.n	8020c12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8020e6c:	b149      	cbz	r1, 8020e82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8020e6e:	5cba      	ldrb	r2, [r7, r2]
 8020e70:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020e74:	4422      	add	r2, r4
 8020e76:	4660      	mov	r0, ip
 8020e78:	4666      	mov	r6, ip
 8020e7a:	e734      	b.n	8020ce6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8020e7c:	4660      	mov	r0, ip
 8020e7e:	4662      	mov	r2, ip
 8020e80:	e731      	b.n	8020ce6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8020e82:	4660      	mov	r0, ip
 8020e84:	4662      	mov	r2, ip
 8020e86:	e7f7      	b.n	8020e78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8020e88:	f110 0c01 	adds.w	ip, r0, #1
 8020e8c:	f53f af74 	bmi.w	8020d78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8020e90:	4562      	cmp	r2, ip
 8020e92:	f6ff af71 	blt.w	8020d78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8020e96:	f116 0c01 	adds.w	ip, r6, #1
 8020e9a:	f53f af6d 	bmi.w	8020d78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8020e9e:	4567      	cmp	r7, ip
 8020ea0:	f6ff af6a 	blt.w	8020d78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8020ea4:	b23f      	sxth	r7, r7
 8020ea6:	b212      	sxth	r2, r2
 8020ea8:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8020eac:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8020eb0:	9200      	str	r2, [sp, #0]
 8020eb2:	9701      	str	r7, [sp, #4]
 8020eb4:	4623      	mov	r3, r4
 8020eb6:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8020eba:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020ebc:	f7ff fdc4 	bl	8020a48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8020ec0:	e75a      	b.n	8020d78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8020ec2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8020ec4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8020ec8:	ea4f 462b 	mov.w	r6, fp, asr #16
 8020ecc:	1428      	asrs	r0, r5, #16
 8020ece:	fb02 6000 	mla	r0, r2, r0, r6
 8020ed2:	9e08      	ldr	r6, [sp, #32]
 8020ed4:	f816 8000 	ldrb.w	r8, [r6, r0]
 8020ed8:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8020edc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020ee0:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020ee4:	1837      	adds	r7, r6, r0
 8020ee6:	eb04 0c08 	add.w	ip, r4, r8
 8020eea:	2b00      	cmp	r3, #0
 8020eec:	d060      	beq.n	8020fb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8020eee:	787e      	ldrb	r6, [r7, #1]
 8020ef0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020ef4:	4426      	add	r6, r4
 8020ef6:	2900      	cmp	r1, #0
 8020ef8:	d062      	beq.n	8020fc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8020efa:	18b8      	adds	r0, r7, r2
 8020efc:	5cba      	ldrb	r2, [r7, r2]
 8020efe:	7840      	ldrb	r0, [r0, #1]
 8020f00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020f04:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020f08:	4422      	add	r2, r4
 8020f0a:	4420      	add	r0, r4
 8020f0c:	b29b      	uxth	r3, r3
 8020f0e:	b289      	uxth	r1, r1
 8020f10:	fb03 f901 	mul.w	r9, r3, r1
 8020f14:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020f18:	011b      	lsls	r3, r3, #4
 8020f1a:	b289      	uxth	r1, r1
 8020f1c:	78b7      	ldrb	r7, [r6, #2]
 8020f1e:	f89c a002 	ldrb.w	sl, [ip, #2]
 8020f22:	f89c c001 	ldrb.w	ip, [ip, #1]
 8020f26:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8020f2a:	eba3 0309 	sub.w	r3, r3, r9
 8020f2e:	b29b      	uxth	r3, r3
 8020f30:	ebae 0e01 	sub.w	lr, lr, r1
 8020f34:	fa1f fe8e 	uxth.w	lr, lr
 8020f38:	435f      	muls	r7, r3
 8020f3a:	fb0e 770a 	mla	r7, lr, sl, r7
 8020f3e:	f892 a002 	ldrb.w	sl, [r2, #2]
 8020f42:	fb01 770a 	mla	r7, r1, sl, r7
 8020f46:	f890 a002 	ldrb.w	sl, [r0, #2]
 8020f4a:	fb09 7a0a 	mla	sl, r9, sl, r7
 8020f4e:	f814 7008 	ldrb.w	r7, [r4, r8]
 8020f52:	f896 8000 	ldrb.w	r8, [r6]
 8020f56:	7876      	ldrb	r6, [r6, #1]
 8020f58:	fb03 f808 	mul.w	r8, r3, r8
 8020f5c:	fb0e 8807 	mla	r8, lr, r7, r8
 8020f60:	7817      	ldrb	r7, [r2, #0]
 8020f62:	fb01 8807 	mla	r8, r1, r7, r8
 8020f66:	7807      	ldrb	r7, [r0, #0]
 8020f68:	fb09 8707 	mla	r7, r9, r7, r8
 8020f6c:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8020f70:	4373      	muls	r3, r6
 8020f72:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8020f76:	7856      	ldrb	r6, [r2, #1]
 8020f78:	ea4a 0707 	orr.w	r7, sl, r7
 8020f7c:	fb0e 330c 	mla	r3, lr, ip, r3
 8020f80:	f890 a001 	ldrb.w	sl, [r0, #1]
 8020f84:	fb01 3306 	mla	r3, r1, r6, r3
 8020f88:	fb09 3a0a 	mla	sl, r9, sl, r3
 8020f8c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020f90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020f92:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020f96:	ea47 070a 	orr.w	r7, r7, sl
 8020f9a:	f823 7b02 	strh.w	r7, [r3], #2
 8020f9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8020fa0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020fa2:	449b      	add	fp, r3
 8020fa4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020fa6:	441d      	add	r5, r3
 8020fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020faa:	3b01      	subs	r3, #1
 8020fac:	9309      	str	r3, [sp, #36]	; 0x24
 8020fae:	e714      	b.n	8020dda <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8020fb0:	b149      	cbz	r1, 8020fc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8020fb2:	5cba      	ldrb	r2, [r7, r2]
 8020fb4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020fb8:	4422      	add	r2, r4
 8020fba:	4660      	mov	r0, ip
 8020fbc:	4666      	mov	r6, ip
 8020fbe:	e7a5      	b.n	8020f0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8020fc0:	4660      	mov	r0, ip
 8020fc2:	4662      	mov	r2, ip
 8020fc4:	e7a2      	b.n	8020f0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8020fc6:	4660      	mov	r0, ip
 8020fc8:	4662      	mov	r2, ip
 8020fca:	e7f7      	b.n	8020fbc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8020fcc:	b00f      	add	sp, #60	; 0x3c
 8020fce:	ecbd 8b08 	vpop	{d8-d11}
 8020fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020fd8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8020fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fdc:	880e      	ldrh	r6, [r1, #0]
 8020fde:	b085      	sub	sp, #20
 8020fe0:	ea4f 2e26 	mov.w	lr, r6, asr #8
 8020fe4:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8020fe8:	4691      	mov	r9, r2
 8020fea:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8020fee:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8020ff2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8020ff6:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8020ffa:	f00e 02f8 	and.w	r2, lr, #248	; 0xf8
 8020ffe:	ea4f 0ee6 	mov.w	lr, r6, asr #3
 8021002:	9200      	str	r2, [sp, #0]
 8021004:	00f6      	lsls	r6, r6, #3
 8021006:	f00e 02fc 	and.w	r2, lr, #252	; 0xfc
 802100a:	9201      	str	r2, [sp, #4]
 802100c:	2c00      	cmp	r4, #0
 802100e:	b2f2      	uxtb	r2, r6
 8021010:	fb04 560c 	mla	r6, r4, ip, r5
 8021014:	9202      	str	r2, [sp, #8]
 8021016:	eb09 0e06 	add.w	lr, r9, r6
 802101a:	db3e      	blt.n	802109a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 802101c:	45a0      	cmp	r8, r4
 802101e:	dd3c      	ble.n	802109a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 8021020:	2d00      	cmp	r5, #0
 8021022:	db38      	blt.n	8021096 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8021024:	45ac      	cmp	ip, r5
 8021026:	dd36      	ble.n	8021096 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8021028:	f819 2006 	ldrb.w	r2, [r9, r6]
 802102c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8021030:	1c6e      	adds	r6, r5, #1
 8021032:	d435      	bmi.n	80210a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc8>
 8021034:	45b4      	cmp	ip, r6
 8021036:	dd33      	ble.n	80210a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc8>
 8021038:	b3a0      	cbz	r0, 80210a4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 802103a:	f89e 6001 	ldrb.w	r6, [lr, #1]
 802103e:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8021042:	3401      	adds	r4, #1
 8021044:	d432      	bmi.n	80210ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd4>
 8021046:	45a0      	cmp	r8, r4
 8021048:	dd30      	ble.n	80210ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd4>
 802104a:	b397      	cbz	r7, 80210b2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 802104c:	2d00      	cmp	r5, #0
 802104e:	db2b      	blt.n	80210a8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 8021050:	45ac      	cmp	ip, r5
 8021052:	dd29      	ble.n	80210a8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 8021054:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8021058:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 802105c:	3501      	adds	r5, #1
 802105e:	d42b      	bmi.n	80210b8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe0>
 8021060:	45ac      	cmp	ip, r5
 8021062:	dd29      	ble.n	80210b8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe0>
 8021064:	b350      	cbz	r0, 80210bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe4>
 8021066:	44f4      	add	ip, lr
 8021068:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802106c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8021070:	280f      	cmp	r0, #15
 8021072:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021076:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802107a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802107e:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8021082:	d801      	bhi.n	8021088 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb0>
 8021084:	2f0f      	cmp	r7, #15
 8021086:	d91b      	bls.n	80210c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe8>
 8021088:	4b84      	ldr	r3, [pc, #528]	; (802129c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 802108a:	4a85      	ldr	r2, [pc, #532]	; (80212a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 802108c:	4885      	ldr	r0, [pc, #532]	; (80212a4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 802108e:	f240 210d 	movw	r1, #525	; 0x20d
 8021092:	f005 fdc7 	bl	8026c24 <__assert_func>
 8021096:	2200      	movs	r2, #0
 8021098:	e7ca      	b.n	8021030 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x58>
 802109a:	2600      	movs	r6, #0
 802109c:	4632      	mov	r2, r6
 802109e:	e7d0      	b.n	8021042 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 80210a0:	2600      	movs	r6, #0
 80210a2:	e7ce      	b.n	8021042 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 80210a4:	4606      	mov	r6, r0
 80210a6:	e7cc      	b.n	8021042 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 80210a8:	2400      	movs	r4, #0
 80210aa:	e7d7      	b.n	802105c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x84>
 80210ac:	2300      	movs	r3, #0
 80210ae:	461c      	mov	r4, r3
 80210b0:	e7de      	b.n	8021070 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 80210b2:	463b      	mov	r3, r7
 80210b4:	463c      	mov	r4, r7
 80210b6:	e7db      	b.n	8021070 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 80210b8:	2300      	movs	r3, #0
 80210ba:	e7d9      	b.n	8021070 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 80210bc:	4603      	mov	r3, r0
 80210be:	e7d7      	b.n	8021070 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 80210c0:	b280      	uxth	r0, r0
 80210c2:	b2bf      	uxth	r7, r7
 80210c4:	fb00 fe07 	mul.w	lr, r0, r7
 80210c8:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80210cc:	0100      	lsls	r0, r0, #4
 80210ce:	eba0 0c0e 	sub.w	ip, r0, lr
 80210d2:	b2bf      	uxth	r7, r7
 80210d4:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80210d8:	fa1f fc8c 	uxth.w	ip, ip
 80210dc:	1bed      	subs	r5, r5, r7
 80210de:	b2ad      	uxth	r5, r5
 80210e0:	fb0c f00a 	mul.w	r0, ip, sl
 80210e4:	fb05 000b 	mla	r0, r5, fp, r0
 80210e8:	fb07 0009 	mla	r0, r7, r9, r0
 80210ec:	fb0e 0008 	mla	r0, lr, r8, r0
 80210f0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80210f4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80210f8:	9003      	str	r0, [sp, #12]
 80210fa:	d018      	beq.n	802112e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x156>
 80210fc:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8021100:	fb0b f000 	mul.w	r0, fp, r0
 8021104:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021108:	fb0b fb02 	mul.w	fp, fp, r2
 802110c:	0a02      	lsrs	r2, r0, #8
 802110e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021112:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8021116:	4402      	add	r2, r0
 8021118:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 802111c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8021120:	0a12      	lsrs	r2, r2, #8
 8021122:	0a00      	lsrs	r0, r0, #8
 8021124:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021128:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802112c:	4302      	orrs	r2, r0
 802112e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021132:	d019      	beq.n	8021168 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x190>
 8021134:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8021138:	fb0a fb0b 	mul.w	fp, sl, fp
 802113c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021140:	fb0a fa06 	mul.w	sl, sl, r6
 8021144:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8021148:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802114c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021150:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8021154:	445e      	add	r6, fp
 8021156:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802115a:	0a36      	lsrs	r6, r6, #8
 802115c:	0a00      	lsrs	r0, r0, #8
 802115e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021162:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021166:	4306      	orrs	r6, r0
 8021168:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802116c:	d019      	beq.n	80211a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1ca>
 802116e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021172:	fb09 fa0a 	mul.w	sl, r9, sl
 8021176:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802117a:	fb09 f904 	mul.w	r9, r9, r4
 802117e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021182:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021186:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802118a:	f509 7080 	add.w	r0, r9, #256	; 0x100
 802118e:	4454      	add	r4, sl
 8021190:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8021194:	0a24      	lsrs	r4, r4, #8
 8021196:	0a00      	lsrs	r0, r0, #8
 8021198:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802119c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80211a0:	4304      	orrs	r4, r0
 80211a2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80211a6:	d019      	beq.n	80211dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x204>
 80211a8:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80211ac:	fb08 f909 	mul.w	r9, r8, r9
 80211b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80211b4:	fb08 f803 	mul.w	r8, r8, r3
 80211b8:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80211bc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80211c0:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80211c4:	f508 7080 	add.w	r0, r8, #256	; 0x100
 80211c8:	444b      	add	r3, r9
 80211ca:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80211ce:	0a1b      	lsrs	r3, r3, #8
 80211d0:	0a00      	lsrs	r0, r0, #8
 80211d2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80211d6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80211da:	4303      	orrs	r3, r0
 80211dc:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80211e0:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80211e4:	fb0c f808 	mul.w	r8, ip, r8
 80211e8:	fb05 8800 	mla	r8, r5, r0, r8
 80211ec:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80211f0:	fb07 8800 	mla	r8, r7, r0, r8
 80211f4:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80211f8:	fb0e 8000 	mla	r0, lr, r0, r8
 80211fc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021200:	fb0c f606 	mul.w	r6, ip, r6
 8021204:	0a00      	lsrs	r0, r0, #8
 8021206:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802120a:	fb05 6202 	mla	r2, r5, r2, r6
 802120e:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8021212:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8021216:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 802121a:	fb07 2700 	mla	r7, r7, r0, r2
 802121e:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8021222:	9b03      	ldr	r3, [sp, #12]
 8021224:	9c00      	ldr	r4, [sp, #0]
 8021226:	b2ad      	uxth	r5, r5
 8021228:	436b      	muls	r3, r5
 802122a:	fb0e 7000 	mla	r0, lr, r0, r7
 802122e:	1c5a      	adds	r2, r3, #1
 8021230:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021234:	0a00      	lsrs	r0, r0, #8
 8021236:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802123a:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 802123e:	ea48 0000 	orr.w	r0, r8, r0
 8021242:	b2d2      	uxtb	r2, r2
 8021244:	fb14 f602 	smulbb	r6, r4, r2
 8021248:	0c03      	lsrs	r3, r0, #16
 802124a:	fb03 6305 	mla	r3, r3, r5, r6
 802124e:	b29e      	uxth	r6, r3
 8021250:	9b01      	ldr	r3, [sp, #4]
 8021252:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8021256:	fb13 f302 	smulbb	r3, r3, r2
 802125a:	fb04 3405 	mla	r4, r4, r5, r3
 802125e:	9b02      	ldr	r3, [sp, #8]
 8021260:	b2c0      	uxtb	r0, r0
 8021262:	fb13 f202 	smulbb	r2, r3, r2
 8021266:	fb00 2005 	mla	r0, r0, r5, r2
 802126a:	b280      	uxth	r0, r0
 802126c:	b2a4      	uxth	r4, r4
 802126e:	1c42      	adds	r2, r0, #1
 8021270:	1c73      	adds	r3, r6, #1
 8021272:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021276:	1c62      	adds	r2, r4, #1
 8021278:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 802127c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8021280:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8021284:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8021288:	0952      	lsrs	r2, r2, #5
 802128a:	4303      	orrs	r3, r0
 802128c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021290:	4313      	orrs	r3, r2
 8021292:	800b      	strh	r3, [r1, #0]
 8021294:	b005      	add	sp, #20
 8021296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802129a:	bf00      	nop
 802129c:	0802c82a 	.word	0x0802c82a
 80212a0:	0802cded 	.word	0x0802cded
 80212a4:	0802c913 	.word	0x0802c913

080212a8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80212a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212ac:	ed2d 8b08 	vpush	{d8-d11}
 80212b0:	b09f      	sub	sp, #124	; 0x7c
 80212b2:	eeb0 aa40 	vmov.f32	s20, s0
 80212b6:	921b      	str	r2, [sp, #108]	; 0x6c
 80212b8:	9309      	str	r3, [sp, #36]	; 0x24
 80212ba:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80212bc:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 80212c0:	931c      	str	r3, [sp, #112]	; 0x70
 80212c2:	9119      	str	r1, [sp, #100]	; 0x64
 80212c4:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80212c8:	901d      	str	r0, [sp, #116]	; 0x74
 80212ca:	6850      	ldr	r0, [r2, #4]
 80212cc:	6812      	ldr	r2, [r2, #0]
 80212ce:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 80212d0:	fb00 1303 	mla	r3, r0, r3, r1
 80212d4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80212d8:	930c      	str	r3, [sp, #48]	; 0x30
 80212da:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80212dc:	681b      	ldr	r3, [r3, #0]
 80212de:	9312      	str	r3, [sp, #72]	; 0x48
 80212e0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80212e2:	685e      	ldr	r6, [r3, #4]
 80212e4:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80212e8:	930d      	str	r3, [sp, #52]	; 0x34
 80212ea:	eef0 9a60 	vmov.f32	s19, s1
 80212ee:	eeb0 9a41 	vmov.f32	s18, s2
 80212f2:	eeb0 8a62 	vmov.f32	s16, s5
 80212f6:	eef0 8a43 	vmov.f32	s17, s6
 80212fa:	eef0 ba44 	vmov.f32	s23, s8
 80212fe:	eeb0 ba64 	vmov.f32	s22, s9
 8021302:	eef0 aa45 	vmov.f32	s21, s10
 8021306:	3604      	adds	r6, #4
 8021308:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802130a:	2b00      	cmp	r3, #0
 802130c:	dc03      	bgt.n	8021316 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802130e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8021310:	2b00      	cmp	r3, #0
 8021312:	f340 838e 	ble.w	8021a32 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78a>
 8021316:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8021318:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802131c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021320:	1e48      	subs	r0, r1, #1
 8021322:	1e57      	subs	r7, r2, #1
 8021324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021326:	2b00      	cmp	r3, #0
 8021328:	f340 819b 	ble.w	8021662 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 802132c:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 802132e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8021332:	ea4f 4325 	mov.w	r3, r5, asr #16
 8021336:	d406      	bmi.n	8021346 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8021338:	4584      	cmp	ip, r0
 802133a:	da04      	bge.n	8021346 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802133c:	2b00      	cmp	r3, #0
 802133e:	db02      	blt.n	8021346 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8021340:	42bb      	cmp	r3, r7
 8021342:	f2c0 818f 	blt.w	8021664 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 8021346:	f11c 0c01 	adds.w	ip, ip, #1
 802134a:	f100 817d 	bmi.w	8021648 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 802134e:	4561      	cmp	r1, ip
 8021350:	f2c0 817a 	blt.w	8021648 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 8021354:	3301      	adds	r3, #1
 8021356:	f100 8177 	bmi.w	8021648 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 802135a:	429a      	cmp	r2, r3
 802135c:	f2c0 8174 	blt.w	8021648 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 8021360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021362:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021364:	931a      	str	r3, [sp, #104]	; 0x68
 8021366:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021368:	2b00      	cmp	r3, #0
 802136a:	f340 8199 	ble.w	80216a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802136e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021370:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021374:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8021376:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 802137a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802137c:	141b      	asrs	r3, r3, #16
 802137e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8021382:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021386:	f100 81dc 	bmi.w	8021742 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 802138a:	f100 38ff 	add.w	r8, r0, #4294967295
 802138e:	4543      	cmp	r3, r8
 8021390:	f280 81d7 	bge.w	8021742 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8021394:	f1bc 0f00 	cmp.w	ip, #0
 8021398:	f2c0 81d3 	blt.w	8021742 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 802139c:	f10e 38ff 	add.w	r8, lr, #4294967295
 80213a0:	45c4      	cmp	ip, r8
 80213a2:	f280 81ce 	bge.w	8021742 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 80213a6:	b200      	sxth	r0, r0
 80213a8:	fb0c 3300 	mla	r3, ip, r0, r3
 80213ac:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80213ae:	eb04 0803 	add.w	r8, r4, r3
 80213b2:	5ce3      	ldrb	r3, [r4, r3]
 80213b4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80213b8:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80213bc:	2a00      	cmp	r2, #0
 80213be:	f000 81b5 	beq.w	802172c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 80213c2:	f898 c001 	ldrb.w	ip, [r8, #1]
 80213c6:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80213ca:	940e      	str	r4, [sp, #56]	; 0x38
 80213cc:	0e24      	lsrs	r4, r4, #24
 80213ce:	9415      	str	r4, [sp, #84]	; 0x54
 80213d0:	b179      	cbz	r1, 80213f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80213d2:	eb08 0c00 	add.w	ip, r8, r0
 80213d6:	f818 0000 	ldrb.w	r0, [r8, r0]
 80213da:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80213de:	900a      	str	r0, [sp, #40]	; 0x28
 80213e0:	0e00      	lsrs	r0, r0, #24
 80213e2:	9013      	str	r0, [sp, #76]	; 0x4c
 80213e4:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80213e8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80213ec:	900f      	str	r0, [sp, #60]	; 0x3c
 80213ee:	0e00      	lsrs	r0, r0, #24
 80213f0:	9016      	str	r0, [sp, #88]	; 0x58
 80213f2:	b292      	uxth	r2, r2
 80213f4:	b289      	uxth	r1, r1
 80213f6:	fb02 f901 	mul.w	r9, r2, r1
 80213fa:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80213fe:	0112      	lsls	r2, r2, #4
 8021400:	eba2 0809 	sub.w	r8, r2, r9
 8021404:	b289      	uxth	r1, r1
 8021406:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802140a:	9815      	ldr	r0, [sp, #84]	; 0x54
 802140c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802140e:	fa1f f888 	uxth.w	r8, r8
 8021412:	1a52      	subs	r2, r2, r1
 8021414:	b292      	uxth	r2, r2
 8021416:	fb08 f000 	mul.w	r0, r8, r0
 802141a:	fb02 000e 	mla	r0, r2, lr, r0
 802141e:	fb01 0004 	mla	r0, r1, r4, r0
 8021422:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021424:	fb09 0004 	mla	r0, r9, r4, r0
 8021428:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802142c:	2800      	cmp	r0, #0
 802142e:	f000 8100 	beq.w	8021632 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021432:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021436:	d01b      	beq.n	8021470 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8021438:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802143c:	fb0e fa0a 	mul.w	sl, lr, sl
 8021440:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021444:	fb0e fe03 	mul.w	lr, lr, r3
 8021448:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802144c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021450:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021454:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8021458:	4453      	add	r3, sl
 802145a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802145e:	0a1b      	lsrs	r3, r3, #8
 8021460:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021464:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021468:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802146c:	ea43 030c 	orr.w	r3, r3, ip
 8021470:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021472:	2cff      	cmp	r4, #255	; 0xff
 8021474:	d021      	beq.n	80214ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8021476:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021478:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802147c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802147e:	fb04 fb0b 	mul.w	fp, r4, fp
 8021482:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021484:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021488:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802148a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802148e:	fb04 fa0a 	mul.w	sl, r4, sl
 8021492:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021496:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802149a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802149e:	44de      	add	lr, fp
 80214a0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80214a4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80214a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80214ac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80214b0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80214b4:	ea4e 040a 	orr.w	r4, lr, sl
 80214b8:	940e      	str	r4, [sp, #56]	; 0x38
 80214ba:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80214bc:	2cff      	cmp	r4, #255	; 0xff
 80214be:	d021      	beq.n	8021504 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 80214c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80214c2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80214c6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80214c8:	fb04 fb0b 	mul.w	fp, r4, fp
 80214cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80214ce:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80214d2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80214d4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80214d8:	fb04 fa0a 	mul.w	sl, r4, sl
 80214dc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80214e0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80214e4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80214e8:	44de      	add	lr, fp
 80214ea:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80214ee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80214f2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80214f6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80214fa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80214fe:	ea4e 040a 	orr.w	r4, lr, sl
 8021502:	940a      	str	r4, [sp, #40]	; 0x28
 8021504:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021506:	2cff      	cmp	r4, #255	; 0xff
 8021508:	d021      	beq.n	802154e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 802150a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802150c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021510:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021512:	fb04 fb0b 	mul.w	fp, r4, fp
 8021516:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021518:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802151c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802151e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021522:	fb04 fa0a 	mul.w	sl, r4, sl
 8021526:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802152a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802152e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021532:	44de      	add	lr, fp
 8021534:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021538:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802153c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021540:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021544:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021548:	ea4e 040a 	orr.w	r4, lr, sl
 802154c:	940f      	str	r4, [sp, #60]	; 0x3c
 802154e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021550:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021554:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021556:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802155a:	fb08 fc0c 	mul.w	ip, r8, ip
 802155e:	fb02 cc0e 	mla	ip, r2, lr, ip
 8021562:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021566:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021568:	fb01 cc0e 	mla	ip, r1, lr, ip
 802156c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021570:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021572:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021576:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802157a:	fb08 f80e 	mul.w	r8, r8, lr
 802157e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021582:	fb02 8303 	mla	r3, r2, r3, r8
 8021586:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021588:	f8b7 e000 	ldrh.w	lr, [r7]
 802158c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802158e:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021592:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021594:	fb01 330a 	mla	r3, r1, sl, r3
 8021598:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802159c:	fb09 3901 	mla	r9, r9, r1, r3
 80215a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80215a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80215a4:	4343      	muls	r3, r0
 80215a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80215aa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80215ae:	1c58      	adds	r0, r3, #1
 80215b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80215b4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80215b8:	ea4c 0c09 	orr.w	ip, ip, r9
 80215bc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80215c0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80215c4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80215c8:	ea4f 232e 	mov.w	r3, lr, asr #8
 80215cc:	b2c0      	uxtb	r0, r0
 80215ce:	fb11 f102 	smulbb	r1, r1, r2
 80215d2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80215d6:	fb03 1300 	mla	r3, r3, r0, r1
 80215da:	b299      	uxth	r1, r3
 80215dc:	ea4f 02ee 	mov.w	r2, lr, asr #3
 80215e0:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80215e4:	fb13 f304 	smulbb	r3, r3, r4
 80215e8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80215ec:	fb02 3200 	mla	r2, r2, r0, r3
 80215f0:	fa5f fc8c 	uxtb.w	ip, ip
 80215f4:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 80215f8:	b2db      	uxtb	r3, r3
 80215fa:	fb1c fc04 	smulbb	ip, ip, r4
 80215fe:	fb03 cc00 	mla	ip, r3, r0, ip
 8021602:	b292      	uxth	r2, r2
 8021604:	fa1f fc8c 	uxth.w	ip, ip
 8021608:	1c4b      	adds	r3, r1, #1
 802160a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802160e:	f10c 0001 	add.w	r0, ip, #1
 8021612:	1c51      	adds	r1, r2, #1
 8021614:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 8021618:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802161c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8021620:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021624:	0952      	lsrs	r2, r2, #5
 8021626:	ea43 030c 	orr.w	r3, r3, ip
 802162a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802162e:	4313      	orrs	r3, r2
 8021630:	803b      	strh	r3, [r7, #0]
 8021632:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021634:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8021636:	441a      	add	r2, r3
 8021638:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802163a:	9231      	str	r2, [sp, #196]	; 0xc4
 802163c:	441d      	add	r5, r3
 802163e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021640:	3b01      	subs	r3, #1
 8021642:	3702      	adds	r7, #2
 8021644:	931a      	str	r3, [sp, #104]	; 0x68
 8021646:	e68e      	b.n	8021366 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8021648:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802164a:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 802164c:	441c      	add	r4, r3
 802164e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021650:	9431      	str	r4, [sp, #196]	; 0xc4
 8021652:	441d      	add	r5, r3
 8021654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021656:	3b01      	subs	r3, #1
 8021658:	9309      	str	r3, [sp, #36]	; 0x24
 802165a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802165c:	3302      	adds	r3, #2
 802165e:	930c      	str	r3, [sp, #48]	; 0x30
 8021660:	e660      	b.n	8021324 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021662:	d024      	beq.n	80216ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x406>
 8021664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021666:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8021668:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 802166a:	3b01      	subs	r3, #1
 802166c:	fb00 4003 	mla	r0, r0, r3, r4
 8021670:	1400      	asrs	r0, r0, #16
 8021672:	f53f ae75 	bmi.w	8021360 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8021676:	3901      	subs	r1, #1
 8021678:	4288      	cmp	r0, r1
 802167a:	f6bf ae71 	bge.w	8021360 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802167e:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8021680:	fb01 5303 	mla	r3, r1, r3, r5
 8021684:	141b      	asrs	r3, r3, #16
 8021686:	f53f ae6b 	bmi.w	8021360 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802168a:	3a01      	subs	r2, #1
 802168c:	4293      	cmp	r3, r2
 802168e:	f6bf ae67 	bge.w	8021360 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8021692:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8021696:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 802169a:	f1bb 0f00 	cmp.w	fp, #0
 802169e:	dc70      	bgt.n	8021782 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 80216a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80216a2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80216a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80216a8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80216ac:	930c      	str	r3, [sp, #48]	; 0x30
 80216ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80216b0:	2b00      	cmp	r3, #0
 80216b2:	f340 81be 	ble.w	8021a32 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78a>
 80216b6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80216ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80216be:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80216c2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80216c4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80216c8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80216cc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80216d0:	eef0 6a48 	vmov.f32	s13, s16
 80216d4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80216d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80216dc:	ee37 8a48 	vsub.f32	s16, s14, s16
 80216e0:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 80216e4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80216e8:	eef0 6a68 	vmov.f32	s13, s17
 80216ec:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80216f0:	ee18 2a10 	vmov	r2, s16
 80216f4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80216f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80216fc:	ee18 2a90 	vmov	r2, s17
 8021700:	9333      	str	r3, [sp, #204]	; 0xcc
 8021702:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021704:	fb92 f3f3 	sdiv	r3, r2, r3
 8021708:	9334      	str	r3, [sp, #208]	; 0xd0
 802170a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802170c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 802170e:	3b01      	subs	r3, #1
 8021710:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021714:	9319      	str	r3, [sp, #100]	; 0x64
 8021716:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021718:	bf08      	it	eq
 802171a:	4613      	moveq	r3, r2
 802171c:	ee16 5a90 	vmov	r5, s13
 8021720:	9309      	str	r3, [sp, #36]	; 0x24
 8021722:	eef0 8a67 	vmov.f32	s17, s15
 8021726:	eeb0 8a47 	vmov.f32	s16, s14
 802172a:	e5ed      	b.n	8021308 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802172c:	2900      	cmp	r1, #0
 802172e:	f43f ae60 	beq.w	80213f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8021732:	f818 0000 	ldrb.w	r0, [r8, r0]
 8021736:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802173a:	900a      	str	r0, [sp, #40]	; 0x28
 802173c:	0e00      	lsrs	r0, r0, #24
 802173e:	9013      	str	r0, [sp, #76]	; 0x4c
 8021740:	e657      	b.n	80213f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8021742:	f113 0801 	adds.w	r8, r3, #1
 8021746:	f53f af74 	bmi.w	8021632 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802174a:	4540      	cmp	r0, r8
 802174c:	f6ff af71 	blt.w	8021632 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021750:	f11c 0801 	adds.w	r8, ip, #1
 8021754:	f53f af6d 	bmi.w	8021632 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021758:	45c6      	cmp	lr, r8
 802175a:	f6ff af6a 	blt.w	8021632 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802175e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8021760:	9302      	str	r3, [sp, #8]
 8021762:	b200      	sxth	r0, r0
 8021764:	fa0f f38e 	sxth.w	r3, lr
 8021768:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802176c:	e9cd c203 	strd	ip, r2, [sp, #12]
 8021770:	9301      	str	r3, [sp, #4]
 8021772:	9000      	str	r0, [sp, #0]
 8021774:	4633      	mov	r3, r6
 8021776:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021778:	981d      	ldr	r0, [sp, #116]	; 0x74
 802177a:	4639      	mov	r1, r7
 802177c:	f7ff fc2c 	bl	8020fd8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8021780:	e757      	b.n	8021632 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021782:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021784:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8021786:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802178a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802178c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021790:	1427      	asrs	r7, r4, #16
 8021792:	142b      	asrs	r3, r5, #16
 8021794:	fb01 7303 	mla	r3, r1, r3, r7
 8021798:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802179a:	18e7      	adds	r7, r4, r3
 802179c:	5ce3      	ldrb	r3, [r4, r3]
 802179e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80217a2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80217a6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80217aa:	2a00      	cmp	r2, #0
 80217ac:	f000 8137 	beq.w	8021a1e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x776>
 80217b0:	f897 e001 	ldrb.w	lr, [r7, #1]
 80217b4:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80217b8:	9410      	str	r4, [sp, #64]	; 0x40
 80217ba:	0e24      	lsrs	r4, r4, #24
 80217bc:	9417      	str	r4, [sp, #92]	; 0x5c
 80217be:	b170      	cbz	r0, 80217de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x536>
 80217c0:	eb07 0e01 	add.w	lr, r7, r1
 80217c4:	5c79      	ldrb	r1, [r7, r1]
 80217c6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80217ca:	910b      	str	r1, [sp, #44]	; 0x2c
 80217cc:	0e09      	lsrs	r1, r1, #24
 80217ce:	9114      	str	r1, [sp, #80]	; 0x50
 80217d0:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80217d4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80217d8:	9111      	str	r1, [sp, #68]	; 0x44
 80217da:	0e09      	lsrs	r1, r1, #24
 80217dc:	9118      	str	r1, [sp, #96]	; 0x60
 80217de:	b292      	uxth	r2, r2
 80217e0:	b280      	uxth	r0, r0
 80217e2:	fb02 f800 	mul.w	r8, r2, r0
 80217e6:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80217ea:	0112      	lsls	r2, r2, #4
 80217ec:	eba2 0e08 	sub.w	lr, r2, r8
 80217f0:	b280      	uxth	r0, r0
 80217f2:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80217f6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80217f8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80217fa:	fa1f fe8e 	uxth.w	lr, lr
 80217fe:	1a12      	subs	r2, r2, r0
 8021800:	b292      	uxth	r2, r2
 8021802:	fb0e f101 	mul.w	r1, lr, r1
 8021806:	fb02 110c 	mla	r1, r2, ip, r1
 802180a:	fb00 1104 	mla	r1, r0, r4, r1
 802180e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8021810:	fb08 1104 	mla	r1, r8, r4, r1
 8021814:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021818:	2900      	cmp	r1, #0
 802181a:	f000 80f5 	beq.w	8021a08 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 802181e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021822:	d019      	beq.n	8021858 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b0>
 8021824:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021828:	fb0c fa0a 	mul.w	sl, ip, sl
 802182c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021830:	fb0c fc03 	mul.w	ip, ip, r3
 8021834:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021838:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802183c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021840:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8021844:	4453      	add	r3, sl
 8021846:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802184a:	0a1b      	lsrs	r3, r3, #8
 802184c:	0a3f      	lsrs	r7, r7, #8
 802184e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021852:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021856:	433b      	orrs	r3, r7
 8021858:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802185a:	2cff      	cmp	r4, #255	; 0xff
 802185c:	d020      	beq.n	80218a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f8>
 802185e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021860:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021864:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8021866:	4367      	muls	r7, r4
 8021868:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802186a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802186e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8021870:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021874:	fb04 fa0a 	mul.w	sl, r4, sl
 8021878:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802187c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021880:	44bc      	add	ip, r7
 8021882:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021886:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802188a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802188e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021892:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021896:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802189a:	ea4c 040a 	orr.w	r4, ip, sl
 802189e:	9410      	str	r4, [sp, #64]	; 0x40
 80218a0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80218a2:	2cff      	cmp	r4, #255	; 0xff
 80218a4:	d020      	beq.n	80218e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 80218a6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80218a8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80218ac:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80218ae:	4367      	muls	r7, r4
 80218b0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80218b2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80218b6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80218b8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80218bc:	fb04 fa0a 	mul.w	sl, r4, sl
 80218c0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80218c4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80218c8:	44bc      	add	ip, r7
 80218ca:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80218ce:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80218d2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80218d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80218da:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80218de:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80218e2:	ea4c 040a 	orr.w	r4, ip, sl
 80218e6:	940b      	str	r4, [sp, #44]	; 0x2c
 80218e8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80218ea:	2cff      	cmp	r4, #255	; 0xff
 80218ec:	d020      	beq.n	8021930 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 80218ee:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80218f0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80218f4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80218f6:	4367      	muls	r7, r4
 80218f8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80218fa:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80218fe:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8021900:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021904:	fb04 fa0a 	mul.w	sl, r4, sl
 8021908:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802190c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021910:	44bc      	add	ip, r7
 8021912:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021916:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802191a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802191e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021922:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021926:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802192a:	ea4c 040a 	orr.w	r4, ip, sl
 802192e:	9411      	str	r4, [sp, #68]	; 0x44
 8021930:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021932:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021936:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021938:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802193c:	fb0e f707 	mul.w	r7, lr, r7
 8021940:	fb02 770c 	mla	r7, r2, ip, r7
 8021944:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021948:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802194a:	fb00 770c 	mla	r7, r0, ip, r7
 802194e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021952:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021954:	fb08 770c 	mla	r7, r8, ip, r7
 8021958:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802195c:	fb0e fe0c 	mul.w	lr, lr, ip
 8021960:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021964:	fb02 e303 	mla	r3, r2, r3, lr
 8021968:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802196a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802196c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021970:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021972:	fb00 330a 	mla	r3, r0, sl, r3
 8021976:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802197a:	fb08 3c0c 	mla	ip, r8, ip, r3
 802197e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021980:	f8b9 0000 	ldrh.w	r0, [r9]
 8021984:	434b      	muls	r3, r1
 8021986:	0a3f      	lsrs	r7, r7, #8
 8021988:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802198c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021990:	1c59      	adds	r1, r3, #1
 8021992:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021996:	ea47 070c 	orr.w	r7, r7, ip
 802199a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802199e:	1202      	asrs	r2, r0, #8
 80219a0:	0c3b      	lsrs	r3, r7, #16
 80219a2:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80219a6:	b2c9      	uxtb	r1, r1
 80219a8:	fb13 f304 	smulbb	r3, r3, r4
 80219ac:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80219b0:	fb02 3201 	mla	r2, r2, r1, r3
 80219b4:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80219b8:	10c3      	asrs	r3, r0, #3
 80219ba:	b2ff      	uxtb	r7, r7
 80219bc:	00c0      	lsls	r0, r0, #3
 80219be:	b292      	uxth	r2, r2
 80219c0:	fb1c fc04 	smulbb	ip, ip, r4
 80219c4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80219c8:	b2c0      	uxtb	r0, r0
 80219ca:	fb17 f704 	smulbb	r7, r7, r4
 80219ce:	fb03 c301 	mla	r3, r3, r1, ip
 80219d2:	fb00 7001 	mla	r0, r0, r1, r7
 80219d6:	f102 0c01 	add.w	ip, r2, #1
 80219da:	b280      	uxth	r0, r0
 80219dc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80219e0:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 80219e4:	1c42      	adds	r2, r0, #1
 80219e6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80219ea:	b29b      	uxth	r3, r3
 80219ec:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80219f0:	ea4c 0200 	orr.w	r2, ip, r0
 80219f4:	f103 0c01 	add.w	ip, r3, #1
 80219f8:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80219fc:	095b      	lsrs	r3, r3, #5
 80219fe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021a02:	431a      	orrs	r2, r3
 8021a04:	f8a9 2000 	strh.w	r2, [r9]
 8021a08:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021a0a:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8021a0c:	441a      	add	r2, r3
 8021a0e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021a10:	9231      	str	r2, [sp, #196]	; 0xc4
 8021a12:	f109 0902 	add.w	r9, r9, #2
 8021a16:	441d      	add	r5, r3
 8021a18:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021a1c:	e63d      	b.n	802169a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8021a1e:	2800      	cmp	r0, #0
 8021a20:	f43f aedd 	beq.w	80217de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x536>
 8021a24:	5c79      	ldrb	r1, [r7, r1]
 8021a26:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021a2a:	910b      	str	r1, [sp, #44]	; 0x2c
 8021a2c:	0e09      	lsrs	r1, r1, #24
 8021a2e:	9114      	str	r1, [sp, #80]	; 0x50
 8021a30:	e6d5      	b.n	80217de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x536>
 8021a32:	b01f      	add	sp, #124	; 0x7c
 8021a34:	ecbd 8b08 	vpop	{d8-d11}
 8021a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021a3c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8021a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a40:	880e      	ldrh	r6, [r1, #0]
 8021a42:	b085      	sub	sp, #20
 8021a44:	ea4f 2e26 	mov.w	lr, r6, asr #8
 8021a48:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8021a4c:	4691      	mov	r9, r2
 8021a4e:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8021a52:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8021a56:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8021a5a:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8021a5e:	f00e 02f8 	and.w	r2, lr, #248	; 0xf8
 8021a62:	ea4f 0ee6 	mov.w	lr, r6, asr #3
 8021a66:	9200      	str	r2, [sp, #0]
 8021a68:	00f6      	lsls	r6, r6, #3
 8021a6a:	f00e 02fc 	and.w	r2, lr, #252	; 0xfc
 8021a6e:	9201      	str	r2, [sp, #4]
 8021a70:	2c00      	cmp	r4, #0
 8021a72:	b2f2      	uxtb	r2, r6
 8021a74:	fb04 560c 	mla	r6, r4, ip, r5
 8021a78:	9202      	str	r2, [sp, #8]
 8021a7a:	eb09 0e06 	add.w	lr, r9, r6
 8021a7e:	db3e      	blt.n	8021afe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc2>
 8021a80:	45a0      	cmp	r8, r4
 8021a82:	dd3c      	ble.n	8021afe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc2>
 8021a84:	2d00      	cmp	r5, #0
 8021a86:	db38      	blt.n	8021afa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 8021a88:	45ac      	cmp	ip, r5
 8021a8a:	dd36      	ble.n	8021afa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 8021a8c:	f819 2006 	ldrb.w	r2, [r9, r6]
 8021a90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8021a94:	1c6e      	adds	r6, r5, #1
 8021a96:	d435      	bmi.n	8021b04 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc8>
 8021a98:	45b4      	cmp	ip, r6
 8021a9a:	dd33      	ble.n	8021b04 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc8>
 8021a9c:	b3a0      	cbz	r0, 8021b08 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 8021a9e:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8021aa2:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8021aa6:	3401      	adds	r4, #1
 8021aa8:	d432      	bmi.n	8021b10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd4>
 8021aaa:	45a0      	cmp	r8, r4
 8021aac:	dd30      	ble.n	8021b10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd4>
 8021aae:	b397      	cbz	r7, 8021b16 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 8021ab0:	2d00      	cmp	r5, #0
 8021ab2:	db2b      	blt.n	8021b0c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 8021ab4:	45ac      	cmp	ip, r5
 8021ab6:	dd29      	ble.n	8021b0c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 8021ab8:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8021abc:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8021ac0:	3501      	adds	r5, #1
 8021ac2:	d42b      	bmi.n	8021b1c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe0>
 8021ac4:	45ac      	cmp	ip, r5
 8021ac6:	dd29      	ble.n	8021b1c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe0>
 8021ac8:	b350      	cbz	r0, 8021b20 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe4>
 8021aca:	44f4      	add	ip, lr
 8021acc:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8021ad0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8021ad4:	280f      	cmp	r0, #15
 8021ad6:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021ada:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021ade:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021ae2:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8021ae6:	d801      	bhi.n	8021aec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb0>
 8021ae8:	2f0f      	cmp	r7, #15
 8021aea:	d91b      	bls.n	8021b24 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe8>
 8021aec:	4b7d      	ldr	r3, [pc, #500]	; (8021ce4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a8>)
 8021aee:	4a7e      	ldr	r2, [pc, #504]	; (8021ce8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 8021af0:	487e      	ldr	r0, [pc, #504]	; (8021cec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 8021af2:	f240 210d 	movw	r1, #525	; 0x20d
 8021af6:	f005 f895 	bl	8026c24 <__assert_func>
 8021afa:	2200      	movs	r2, #0
 8021afc:	e7ca      	b.n	8021a94 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 8021afe:	2600      	movs	r6, #0
 8021b00:	4632      	mov	r2, r6
 8021b02:	e7d0      	b.n	8021aa6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8021b04:	2600      	movs	r6, #0
 8021b06:	e7ce      	b.n	8021aa6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8021b08:	4606      	mov	r6, r0
 8021b0a:	e7cc      	b.n	8021aa6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8021b0c:	2400      	movs	r4, #0
 8021b0e:	e7d7      	b.n	8021ac0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x84>
 8021b10:	2300      	movs	r3, #0
 8021b12:	461c      	mov	r4, r3
 8021b14:	e7de      	b.n	8021ad4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 8021b16:	463b      	mov	r3, r7
 8021b18:	463c      	mov	r4, r7
 8021b1a:	e7db      	b.n	8021ad4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 8021b1c:	2300      	movs	r3, #0
 8021b1e:	e7d9      	b.n	8021ad4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 8021b20:	4603      	mov	r3, r0
 8021b22:	e7d7      	b.n	8021ad4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 8021b24:	b280      	uxth	r0, r0
 8021b26:	b2bf      	uxth	r7, r7
 8021b28:	fb00 fe07 	mul.w	lr, r0, r7
 8021b2c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8021b30:	0100      	lsls	r0, r0, #4
 8021b32:	eba0 0c0e 	sub.w	ip, r0, lr
 8021b36:	b2bf      	uxth	r7, r7
 8021b38:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8021b3c:	fa1f fc8c 	uxth.w	ip, ip
 8021b40:	1bed      	subs	r5, r5, r7
 8021b42:	b2ad      	uxth	r5, r5
 8021b44:	fb0c f00a 	mul.w	r0, ip, sl
 8021b48:	fb05 000b 	mla	r0, r5, fp, r0
 8021b4c:	fb07 0009 	mla	r0, r7, r9, r0
 8021b50:	fb0e 0008 	mla	r0, lr, r8, r0
 8021b54:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021b58:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021b5c:	9003      	str	r0, [sp, #12]
 8021b5e:	d018      	beq.n	8021b92 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x156>
 8021b60:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8021b64:	fb0b f000 	mul.w	r0, fp, r0
 8021b68:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021b6c:	fb0b fb02 	mul.w	fp, fp, r2
 8021b70:	0a02      	lsrs	r2, r0, #8
 8021b72:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021b76:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8021b7a:	4402      	add	r2, r0
 8021b7c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8021b80:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8021b84:	0a12      	lsrs	r2, r2, #8
 8021b86:	0a00      	lsrs	r0, r0, #8
 8021b88:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021b8c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021b90:	4302      	orrs	r2, r0
 8021b92:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021b96:	d019      	beq.n	8021bcc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x190>
 8021b98:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8021b9c:	fb0a fb0b 	mul.w	fp, sl, fp
 8021ba0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021ba4:	fb0a fa06 	mul.w	sl, sl, r6
 8021ba8:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8021bac:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021bb0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021bb4:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8021bb8:	445e      	add	r6, fp
 8021bba:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8021bbe:	0a36      	lsrs	r6, r6, #8
 8021bc0:	0a00      	lsrs	r0, r0, #8
 8021bc2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021bc6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021bca:	4306      	orrs	r6, r0
 8021bcc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021bd0:	d019      	beq.n	8021c06 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1ca>
 8021bd2:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021bd6:	fb09 fa0a 	mul.w	sl, r9, sl
 8021bda:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021bde:	fb09 f904 	mul.w	r9, r9, r4
 8021be2:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021be6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021bea:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021bee:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8021bf2:	4454      	add	r4, sl
 8021bf4:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8021bf8:	0a24      	lsrs	r4, r4, #8
 8021bfa:	0a00      	lsrs	r0, r0, #8
 8021bfc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021c00:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021c04:	4304      	orrs	r4, r0
 8021c06:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021c0a:	d019      	beq.n	8021c40 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x204>
 8021c0c:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8021c10:	fb08 f909 	mul.w	r9, r8, r9
 8021c14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021c18:	fb08 f803 	mul.w	r8, r8, r3
 8021c1c:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8021c20:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021c24:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8021c28:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8021c2c:	444b      	add	r3, r9
 8021c2e:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8021c32:	0a1b      	lsrs	r3, r3, #8
 8021c34:	0a00      	lsrs	r0, r0, #8
 8021c36:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021c3a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021c3e:	4303      	orrs	r3, r0
 8021c40:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8021c44:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8021c48:	fb0c f808 	mul.w	r8, ip, r8
 8021c4c:	fb05 8800 	mla	r8, r5, r0, r8
 8021c50:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8021c54:	fb07 8800 	mla	r8, r7, r0, r8
 8021c58:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8021c5c:	fb0e 8000 	mla	r0, lr, r0, r8
 8021c60:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021c64:	0a00      	lsrs	r0, r0, #8
 8021c66:	fb0c f606 	mul.w	r6, ip, r6
 8021c6a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021c6e:	fb05 6202 	mla	r2, r5, r2, r6
 8021c72:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8021c76:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8021c7a:	fb07 2700 	mla	r7, r7, r0, r2
 8021c7e:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8021c82:	9b03      	ldr	r3, [sp, #12]
 8021c84:	9c02      	ldr	r4, [sp, #8]
 8021c86:	9d01      	ldr	r5, [sp, #4]
 8021c88:	fb0e 7000 	mla	r0, lr, r0, r7
 8021c8c:	43da      	mvns	r2, r3
 8021c8e:	9b00      	ldr	r3, [sp, #0]
 8021c90:	b2d2      	uxtb	r2, r2
 8021c92:	0a00      	lsrs	r0, r0, #8
 8021c94:	4353      	muls	r3, r2
 8021c96:	4354      	muls	r4, r2
 8021c98:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021c9c:	ea48 0000 	orr.w	r0, r8, r0
 8021ca0:	4355      	muls	r5, r2
 8021ca2:	4622      	mov	r2, r4
 8021ca4:	1c5c      	adds	r4, r3, #1
 8021ca6:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 8021caa:	0c03      	lsrs	r3, r0, #16
 8021cac:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8021cb0:	4b0f      	ldr	r3, [pc, #60]	; (8021cf0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 8021cb2:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 8021cb6:	1c54      	adds	r4, r2, #1
 8021cb8:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8021cbc:	b2c2      	uxtb	r2, r0
 8021cbe:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8021cc2:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8021cc6:	1c6a      	adds	r2, r5, #1
 8021cc8:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8021ccc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021cd0:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8021cd4:	00c0      	lsls	r0, r0, #3
 8021cd6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021cda:	4318      	orrs	r0, r3
 8021cdc:	8008      	strh	r0, [r1, #0]
 8021cde:	b005      	add	sp, #20
 8021ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ce4:	0802c82a 	.word	0x0802c82a
 8021ce8:	0802cded 	.word	0x0802cded
 8021cec:	0802c913 	.word	0x0802c913
 8021cf0:	fffff800 	.word	0xfffff800

08021cf4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cf8:	ed2d 8b08 	vpush	{d8-d11}
 8021cfc:	b09b      	sub	sp, #108	; 0x6c
 8021cfe:	eeb0 aa40 	vmov.f32	s20, s0
 8021d02:	9218      	str	r2, [sp, #96]	; 0x60
 8021d04:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8021d06:	9116      	str	r1, [sp, #88]	; 0x58
 8021d08:	9307      	str	r3, [sp, #28]
 8021d0a:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8021d0e:	9019      	str	r0, [sp, #100]	; 0x64
 8021d10:	6850      	ldr	r0, [r2, #4]
 8021d12:	6812      	ldr	r2, [r2, #0]
 8021d14:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 8021d16:	fb00 1303 	mla	r3, r0, r3, r1
 8021d1a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021d1e:	930a      	str	r3, [sp, #40]	; 0x28
 8021d20:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021d22:	681b      	ldr	r3, [r3, #0]
 8021d24:	930f      	str	r3, [sp, #60]	; 0x3c
 8021d26:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021d28:	685e      	ldr	r6, [r3, #4]
 8021d2a:	eef0 9a60 	vmov.f32	s19, s1
 8021d2e:	eeb0 9a41 	vmov.f32	s18, s2
 8021d32:	eeb0 8a62 	vmov.f32	s16, s5
 8021d36:	eef0 8a43 	vmov.f32	s17, s6
 8021d3a:	eef0 ba44 	vmov.f32	s23, s8
 8021d3e:	eeb0 ba64 	vmov.f32	s22, s9
 8021d42:	eef0 aa45 	vmov.f32	s21, s10
 8021d46:	3604      	adds	r6, #4
 8021d48:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021d4a:	2b00      	cmp	r3, #0
 8021d4c:	dc03      	bgt.n	8021d56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8021d4e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021d50:	2b00      	cmp	r3, #0
 8021d52:	f340 8371 	ble.w	8022438 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8021d56:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021d58:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021d5c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021d60:	1e48      	subs	r0, r1, #1
 8021d62:	1e57      	subs	r7, r2, #1
 8021d64:	9b07      	ldr	r3, [sp, #28]
 8021d66:	2b00      	cmp	r3, #0
 8021d68:	f340 8189 	ble.w	802207e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021d6c:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8021d6e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8021d72:	ea4f 4325 	mov.w	r3, r5, asr #16
 8021d76:	d406      	bmi.n	8021d86 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021d78:	4584      	cmp	ip, r0
 8021d7a:	da04      	bge.n	8021d86 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021d7c:	2b00      	cmp	r3, #0
 8021d7e:	db02      	blt.n	8021d86 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021d80:	42bb      	cmp	r3, r7
 8021d82:	f2c0 817d 	blt.w	8022080 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8021d86:	f11c 0c01 	adds.w	ip, ip, #1
 8021d8a:	f100 816b 	bmi.w	8022064 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021d8e:	4561      	cmp	r1, ip
 8021d90:	f2c0 8168 	blt.w	8022064 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021d94:	3301      	adds	r3, #1
 8021d96:	f100 8165 	bmi.w	8022064 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021d9a:	429a      	cmp	r2, r3
 8021d9c:	f2c0 8162 	blt.w	8022064 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021da0:	9b07      	ldr	r3, [sp, #28]
 8021da2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021da4:	9317      	str	r3, [sp, #92]	; 0x5c
 8021da6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021da8:	2b00      	cmp	r3, #0
 8021daa:	f340 8187 	ble.w	80220bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8021dae:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8021db0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021db4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021db6:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8021dba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8021dbc:	141b      	asrs	r3, r3, #16
 8021dbe:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8021dc2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021dc6:	f100 81ca 	bmi.w	802215e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8021dca:	f101 38ff 	add.w	r8, r1, #4294967295
 8021dce:	4543      	cmp	r3, r8
 8021dd0:	f280 81c5 	bge.w	802215e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8021dd4:	f1bc 0f00 	cmp.w	ip, #0
 8021dd8:	f2c0 81c1 	blt.w	802215e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8021ddc:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021de0:	45c4      	cmp	ip, r8
 8021de2:	f280 81bc 	bge.w	802215e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8021de6:	b209      	sxth	r1, r1
 8021de8:	fb0c 3301 	mla	r3, ip, r1, r3
 8021dec:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021dee:	eb04 0803 	add.w	r8, r4, r3
 8021df2:	5ce3      	ldrb	r3, [r4, r3]
 8021df4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021df8:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8021dfc:	2a00      	cmp	r2, #0
 8021dfe:	f000 81a3 	beq.w	8022148 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 8021e02:	f898 c001 	ldrb.w	ip, [r8, #1]
 8021e06:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8021e0a:	940b      	str	r4, [sp, #44]	; 0x2c
 8021e0c:	0e24      	lsrs	r4, r4, #24
 8021e0e:	9412      	str	r4, [sp, #72]	; 0x48
 8021e10:	b178      	cbz	r0, 8021e32 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8021e12:	eb08 0c01 	add.w	ip, r8, r1
 8021e16:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021e1a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021e1e:	9108      	str	r1, [sp, #32]
 8021e20:	0e09      	lsrs	r1, r1, #24
 8021e22:	9110      	str	r1, [sp, #64]	; 0x40
 8021e24:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8021e28:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021e2c:	910c      	str	r1, [sp, #48]	; 0x30
 8021e2e:	0e09      	lsrs	r1, r1, #24
 8021e30:	9113      	str	r1, [sp, #76]	; 0x4c
 8021e32:	b292      	uxth	r2, r2
 8021e34:	b280      	uxth	r0, r0
 8021e36:	fb02 f900 	mul.w	r9, r2, r0
 8021e3a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021e3e:	0112      	lsls	r2, r2, #4
 8021e40:	eba2 0809 	sub.w	r8, r2, r9
 8021e44:	b280      	uxth	r0, r0
 8021e46:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8021e4a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021e4c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021e4e:	fa1f f888 	uxth.w	r8, r8
 8021e52:	1a12      	subs	r2, r2, r0
 8021e54:	b292      	uxth	r2, r2
 8021e56:	fb08 f101 	mul.w	r1, r8, r1
 8021e5a:	fb02 110e 	mla	r1, r2, lr, r1
 8021e5e:	fb00 1104 	mla	r1, r0, r4, r1
 8021e62:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021e64:	fb09 1104 	mla	r1, r9, r4, r1
 8021e68:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021e6c:	2900      	cmp	r1, #0
 8021e6e:	f000 80ee 	beq.w	802204e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8021e72:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021e76:	d01b      	beq.n	8021eb0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8021e78:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021e7c:	fb0e fa0a 	mul.w	sl, lr, sl
 8021e80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021e84:	fb0e fe03 	mul.w	lr, lr, r3
 8021e88:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021e8c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021e90:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021e94:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8021e98:	4453      	add	r3, sl
 8021e9a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021e9e:	0a1b      	lsrs	r3, r3, #8
 8021ea0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021ea4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021ea8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021eac:	ea43 030c 	orr.w	r3, r3, ip
 8021eb0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021eb2:	2cff      	cmp	r4, #255	; 0xff
 8021eb4:	d021      	beq.n	8021efa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021eb6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021eb8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021ebc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021ebe:	fb04 fb0b 	mul.w	fp, r4, fp
 8021ec2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021ec4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021ec8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021eca:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021ece:	fb04 fa0a 	mul.w	sl, r4, sl
 8021ed2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021ed6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021eda:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021ede:	44de      	add	lr, fp
 8021ee0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021ee4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021ee8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021eec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021ef0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021ef4:	ea4e 040a 	orr.w	r4, lr, sl
 8021ef8:	940b      	str	r4, [sp, #44]	; 0x2c
 8021efa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021efc:	2cff      	cmp	r4, #255	; 0xff
 8021efe:	d021      	beq.n	8021f44 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8021f00:	9c08      	ldr	r4, [sp, #32]
 8021f02:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021f06:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021f08:	fb04 fb0b 	mul.w	fp, r4, fp
 8021f0c:	9c08      	ldr	r4, [sp, #32]
 8021f0e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021f12:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021f14:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021f18:	fb04 fa0a 	mul.w	sl, r4, sl
 8021f1c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021f20:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021f24:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021f28:	44de      	add	lr, fp
 8021f2a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021f2e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021f32:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021f36:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021f3a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021f3e:	ea4e 040a 	orr.w	r4, lr, sl
 8021f42:	9408      	str	r4, [sp, #32]
 8021f44:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021f46:	2cff      	cmp	r4, #255	; 0xff
 8021f48:	d021      	beq.n	8021f8e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8021f4a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021f4c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021f50:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021f52:	fb04 fb0b 	mul.w	fp, r4, fp
 8021f56:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021f58:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021f5c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021f5e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021f62:	fb04 fa0a 	mul.w	sl, r4, sl
 8021f66:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021f6a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021f6e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021f72:	44de      	add	lr, fp
 8021f74:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021f78:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021f7c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021f80:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021f84:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021f88:	ea4e 040a 	orr.w	r4, lr, sl
 8021f8c:	940c      	str	r4, [sp, #48]	; 0x30
 8021f8e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021f90:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021f94:	9c08      	ldr	r4, [sp, #32]
 8021f96:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8021f9a:	fb08 fc0c 	mul.w	ip, r8, ip
 8021f9e:	fb02 cc0e 	mla	ip, r2, lr, ip
 8021fa2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021fa6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021fa8:	fb00 cc0e 	mla	ip, r0, lr, ip
 8021fac:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021fb0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021fb2:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021fb6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8021fba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021fbe:	fb08 f80e 	mul.w	r8, r8, lr
 8021fc2:	fb02 8303 	mla	r3, r2, r3, r8
 8021fc6:	9a08      	ldr	r2, [sp, #32]
 8021fc8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021fcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021fce:	fb00 330a 	mla	r3, r0, sl, r3
 8021fd2:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8021fd6:	fb09 3900 	mla	r9, r9, r0, r3
 8021fda:	883b      	ldrh	r3, [r7, #0]
 8021fdc:	43c9      	mvns	r1, r1
 8021fde:	1218      	asrs	r0, r3, #8
 8021fe0:	b2c9      	uxtb	r1, r1
 8021fe2:	10da      	asrs	r2, r3, #3
 8021fe4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021fe8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021fec:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021ff0:	00db      	lsls	r3, r3, #3
 8021ff2:	4348      	muls	r0, r1
 8021ff4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021ff8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021ffc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022000:	b2db      	uxtb	r3, r3
 8022002:	434b      	muls	r3, r1
 8022004:	ea4c 0c09 	orr.w	ip, ip, r9
 8022008:	434a      	muls	r2, r1
 802200a:	1c41      	adds	r1, r0, #1
 802200c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8022010:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8022014:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 8022018:	4960      	ldr	r1, [pc, #384]	; (802219c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802201a:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 802201e:	1c59      	adds	r1, r3, #1
 8022020:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022024:	fa5f f38c 	uxtb.w	r3, ip
 8022028:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802202c:	1c51      	adds	r1, r2, #1
 802202e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022032:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8022036:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 802203a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802203e:	ea40 03d3 	orr.w	r3, r0, r3, lsr #3
 8022042:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022046:	ea43 0c0c 	orr.w	ip, r3, ip
 802204a:	f8a7 c000 	strh.w	ip, [r7]
 802204e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8022050:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022052:	441a      	add	r2, r3
 8022054:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022056:	922d      	str	r2, [sp, #180]	; 0xb4
 8022058:	441d      	add	r5, r3
 802205a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802205c:	3b01      	subs	r3, #1
 802205e:	3702      	adds	r7, #2
 8022060:	9317      	str	r3, [sp, #92]	; 0x5c
 8022062:	e6a0      	b.n	8021da6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8022064:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8022066:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8022068:	441c      	add	r4, r3
 802206a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802206c:	942d      	str	r4, [sp, #180]	; 0xb4
 802206e:	441d      	add	r5, r3
 8022070:	9b07      	ldr	r3, [sp, #28]
 8022072:	3b01      	subs	r3, #1
 8022074:	9307      	str	r3, [sp, #28]
 8022076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022078:	3302      	adds	r3, #2
 802207a:	930a      	str	r3, [sp, #40]	; 0x28
 802207c:	e672      	b.n	8021d64 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802207e:	d024      	beq.n	80220ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d6>
 8022080:	9b07      	ldr	r3, [sp, #28]
 8022082:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8022084:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8022086:	3b01      	subs	r3, #1
 8022088:	fb00 4003 	mla	r0, r0, r3, r4
 802208c:	1400      	asrs	r0, r0, #16
 802208e:	f53f ae87 	bmi.w	8021da0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8022092:	3901      	subs	r1, #1
 8022094:	4288      	cmp	r0, r1
 8022096:	f6bf ae83 	bge.w	8021da0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 802209a:	9930      	ldr	r1, [sp, #192]	; 0xc0
 802209c:	fb01 5303 	mla	r3, r1, r3, r5
 80220a0:	141b      	asrs	r3, r3, #16
 80220a2:	f53f ae7d 	bmi.w	8021da0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 80220a6:	3a01      	subs	r2, #1
 80220a8:	4293      	cmp	r3, r2
 80220aa:	f6bf ae79 	bge.w	8021da0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 80220ae:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80220b2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80220b6:	f1bb 0f00 	cmp.w	fp, #0
 80220ba:	dc71      	bgt.n	80221a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 80220bc:	9b07      	ldr	r3, [sp, #28]
 80220be:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80220c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80220c4:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80220c8:	930a      	str	r3, [sp, #40]	; 0x28
 80220ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80220cc:	2b00      	cmp	r3, #0
 80220ce:	f340 81b3 	ble.w	8022438 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 80220d2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80220d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80220da:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80220de:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80220e0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80220e4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80220e8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80220ec:	eef0 6a48 	vmov.f32	s13, s16
 80220f0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80220f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80220f8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80220fc:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8022100:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022104:	eef0 6a68 	vmov.f32	s13, s17
 8022108:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802210c:	ee18 2a10 	vmov	r2, s16
 8022110:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022114:	fb92 f3f3 	sdiv	r3, r2, r3
 8022118:	ee18 2a90 	vmov	r2, s17
 802211c:	932f      	str	r3, [sp, #188]	; 0xbc
 802211e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022120:	fb92 f3f3 	sdiv	r3, r2, r3
 8022124:	9330      	str	r3, [sp, #192]	; 0xc0
 8022126:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022128:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802212a:	3b01      	subs	r3, #1
 802212c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022130:	9316      	str	r3, [sp, #88]	; 0x58
 8022132:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022134:	bf08      	it	eq
 8022136:	4613      	moveq	r3, r2
 8022138:	ee16 5a90 	vmov	r5, s13
 802213c:	9307      	str	r3, [sp, #28]
 802213e:	eef0 8a67 	vmov.f32	s17, s15
 8022142:	eeb0 8a47 	vmov.f32	s16, s14
 8022146:	e5ff      	b.n	8021d48 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8022148:	2800      	cmp	r0, #0
 802214a:	f43f ae72 	beq.w	8021e32 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 802214e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022152:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022156:	9108      	str	r1, [sp, #32]
 8022158:	0e09      	lsrs	r1, r1, #24
 802215a:	9110      	str	r1, [sp, #64]	; 0x40
 802215c:	e669      	b.n	8021e32 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 802215e:	f113 0801 	adds.w	r8, r3, #1
 8022162:	f53f af74 	bmi.w	802204e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8022166:	4541      	cmp	r1, r8
 8022168:	f6ff af71 	blt.w	802204e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802216c:	f11c 0801 	adds.w	r8, ip, #1
 8022170:	f53f af6d 	bmi.w	802204e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8022174:	45c6      	cmp	lr, r8
 8022176:	f6ff af6a 	blt.w	802204e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802217a:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 802217e:	b209      	sxth	r1, r1
 8022180:	fa0f f38e 	sxth.w	r3, lr
 8022184:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8022188:	9301      	str	r3, [sp, #4]
 802218a:	9100      	str	r1, [sp, #0]
 802218c:	4633      	mov	r3, r6
 802218e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022190:	9819      	ldr	r0, [sp, #100]	; 0x64
 8022192:	4639      	mov	r1, r7
 8022194:	f7ff fc52 	bl	8021a3c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8022198:	e759      	b.n	802204e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802219a:	bf00      	nop
 802219c:	fffff800 	.word	0xfffff800
 80221a0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80221a2:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80221a4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80221a8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80221aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80221ae:	1427      	asrs	r7, r4, #16
 80221b0:	142b      	asrs	r3, r5, #16
 80221b2:	fb01 7303 	mla	r3, r1, r3, r7
 80221b6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80221b8:	18e7      	adds	r7, r4, r3
 80221ba:	5ce3      	ldrb	r3, [r4, r3]
 80221bc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80221c0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80221c4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80221c8:	2a00      	cmp	r2, #0
 80221ca:	f000 812b 	beq.w	8022424 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80221ce:	f897 e001 	ldrb.w	lr, [r7, #1]
 80221d2:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80221d6:	940d      	str	r4, [sp, #52]	; 0x34
 80221d8:	0e24      	lsrs	r4, r4, #24
 80221da:	9414      	str	r4, [sp, #80]	; 0x50
 80221dc:	b170      	cbz	r0, 80221fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 80221de:	eb07 0e01 	add.w	lr, r7, r1
 80221e2:	5c79      	ldrb	r1, [r7, r1]
 80221e4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80221e8:	9109      	str	r1, [sp, #36]	; 0x24
 80221ea:	0e09      	lsrs	r1, r1, #24
 80221ec:	9111      	str	r1, [sp, #68]	; 0x44
 80221ee:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80221f2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80221f6:	910e      	str	r1, [sp, #56]	; 0x38
 80221f8:	0e09      	lsrs	r1, r1, #24
 80221fa:	9115      	str	r1, [sp, #84]	; 0x54
 80221fc:	b292      	uxth	r2, r2
 80221fe:	b280      	uxth	r0, r0
 8022200:	fb02 f800 	mul.w	r8, r2, r0
 8022204:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8022208:	0112      	lsls	r2, r2, #4
 802220a:	eba2 0e08 	sub.w	lr, r2, r8
 802220e:	b280      	uxth	r0, r0
 8022210:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8022214:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022216:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022218:	fa1f fe8e 	uxth.w	lr, lr
 802221c:	1a09      	subs	r1, r1, r0
 802221e:	b289      	uxth	r1, r1
 8022220:	fb0e f202 	mul.w	r2, lr, r2
 8022224:	fb01 220c 	mla	r2, r1, ip, r2
 8022228:	fb00 2204 	mla	r2, r0, r4, r2
 802222c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802222e:	fb08 2204 	mla	r2, r8, r4, r2
 8022232:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022236:	2a00      	cmp	r2, #0
 8022238:	f000 80e9 	beq.w	802240e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71a>
 802223c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022240:	d019      	beq.n	8022276 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x582>
 8022242:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8022246:	fb0c fa0a 	mul.w	sl, ip, sl
 802224a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802224e:	fb0c fc03 	mul.w	ip, ip, r3
 8022252:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022256:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802225a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802225e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8022262:	4453      	add	r3, sl
 8022264:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022268:	0a1b      	lsrs	r3, r3, #8
 802226a:	0a3f      	lsrs	r7, r7, #8
 802226c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022270:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022274:	433b      	orrs	r3, r7
 8022276:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022278:	2cff      	cmp	r4, #255	; 0xff
 802227a:	d020      	beq.n	80222be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 802227c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802227e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022282:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022284:	4367      	muls	r7, r4
 8022286:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022288:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802228c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802228e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022292:	fb04 fa0a 	mul.w	sl, r4, sl
 8022296:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802229a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802229e:	44bc      	add	ip, r7
 80222a0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80222a4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80222a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80222ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80222b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80222b4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80222b8:	ea4c 040a 	orr.w	r4, ip, sl
 80222bc:	940d      	str	r4, [sp, #52]	; 0x34
 80222be:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80222c0:	2cff      	cmp	r4, #255	; 0xff
 80222c2:	d020      	beq.n	8022306 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x612>
 80222c4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80222c6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80222ca:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80222cc:	4367      	muls	r7, r4
 80222ce:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80222d0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80222d4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80222d6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80222da:	fb04 fa0a 	mul.w	sl, r4, sl
 80222de:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80222e2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80222e6:	44bc      	add	ip, r7
 80222e8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80222ec:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80222f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80222f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80222f8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80222fc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022300:	ea4c 040a 	orr.w	r4, ip, sl
 8022304:	9409      	str	r4, [sp, #36]	; 0x24
 8022306:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022308:	2cff      	cmp	r4, #255	; 0xff
 802230a:	d020      	beq.n	802234e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 802230c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802230e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022312:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022314:	4367      	muls	r7, r4
 8022316:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022318:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802231c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802231e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022322:	fb04 fa0a 	mul.w	sl, r4, sl
 8022326:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802232a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802232e:	44bc      	add	ip, r7
 8022330:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022334:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022338:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802233c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022340:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022344:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022348:	ea4c 040a 	orr.w	r4, ip, sl
 802234c:	940e      	str	r4, [sp, #56]	; 0x38
 802234e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022350:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022354:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022356:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802235a:	fb0e f707 	mul.w	r7, lr, r7
 802235e:	fb01 770c 	mla	r7, r1, ip, r7
 8022362:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022366:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022368:	fb00 770c 	mla	r7, r0, ip, r7
 802236c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022370:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022372:	fb08 770c 	mla	r7, r8, ip, r7
 8022376:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802237a:	fb0e fe0c 	mul.w	lr, lr, ip
 802237e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022382:	fb01 e303 	mla	r3, r1, r3, lr
 8022386:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022388:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802238c:	990e      	ldr	r1, [sp, #56]	; 0x38
 802238e:	fb00 330a 	mla	r3, r0, sl, r3
 8022392:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8022396:	fb08 3c0c 	mla	ip, r8, ip, r3
 802239a:	f8b9 3000 	ldrh.w	r3, [r9]
 802239e:	43d2      	mvns	r2, r2
 80223a0:	1218      	asrs	r0, r3, #8
 80223a2:	b2d2      	uxtb	r2, r2
 80223a4:	0a3f      	lsrs	r7, r7, #8
 80223a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80223aa:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80223ae:	4350      	muls	r0, r2
 80223b0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80223b4:	10d9      	asrs	r1, r3, #3
 80223b6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80223ba:	00db      	lsls	r3, r3, #3
 80223bc:	ea47 070c 	orr.w	r7, r7, ip
 80223c0:	b2db      	uxtb	r3, r3
 80223c2:	f100 0c01 	add.w	ip, r0, #1
 80223c6:	4353      	muls	r3, r2
 80223c8:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 80223cc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80223d0:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80223d4:	4351      	muls	r1, r2
 80223d6:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 80223da:	4a1a      	ldr	r2, [pc, #104]	; (8022444 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 80223dc:	f103 0c01 	add.w	ip, r3, #1
 80223e0:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80223e4:	fa5f fc87 	uxtb.w	ip, r7
 80223e8:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80223ec:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 80223f0:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 80223f4:	1c4b      	adds	r3, r1, #1
 80223f6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80223fa:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80223fe:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 8022402:	00ff      	lsls	r7, r7, #3
 8022404:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022408:	4338      	orrs	r0, r7
 802240a:	f8a9 0000 	strh.w	r0, [r9]
 802240e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8022410:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022412:	441a      	add	r2, r3
 8022414:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022416:	922d      	str	r2, [sp, #180]	; 0xb4
 8022418:	f109 0902 	add.w	r9, r9, #2
 802241c:	441d      	add	r5, r3
 802241e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022422:	e648      	b.n	80220b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8022424:	2800      	cmp	r0, #0
 8022426:	f43f aee9 	beq.w	80221fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 802242a:	5c79      	ldrb	r1, [r7, r1]
 802242c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022430:	9109      	str	r1, [sp, #36]	; 0x24
 8022432:	0e09      	lsrs	r1, r1, #24
 8022434:	9111      	str	r1, [sp, #68]	; 0x44
 8022436:	e6e1      	b.n	80221fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8022438:	b01b      	add	sp, #108	; 0x6c
 802243a:	ecbd 8b08 	vpop	{d8-d11}
 802243e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022442:	bf00      	nop
 8022444:	fffff800 	.word	0xfffff800

08022448 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8022448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802244c:	b085      	sub	sp, #20
 802244e:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8022452:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8022456:	9103      	str	r1, [sp, #12]
 8022458:	fb05 7106 	mla	r1, r5, r6, r7
 802245c:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 8022460:	2d00      	cmp	r5, #0
 8022462:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8022466:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 802246a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 802246e:	9401      	str	r4, [sp, #4]
 8022470:	eb03 0901 	add.w	r9, r3, r1
 8022474:	f2c0 80c0 	blt.w	80225f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8022478:	45a8      	cmp	r8, r5
 802247a:	f340 80bd 	ble.w	80225f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 802247e:	2f00      	cmp	r7, #0
 8022480:	f2c0 80b6 	blt.w	80225f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 8022484:	42be      	cmp	r6, r7
 8022486:	f340 80b3 	ble.w	80225f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 802248a:	f813 c001 	ldrb.w	ip, [r3, r1]
 802248e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8022492:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022496:	d019      	beq.n	80224cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 8022498:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 802249c:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80224a0:	435a      	muls	r2, r3
 80224a2:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 80224a6:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80224aa:	fb0c f403 	mul.w	r4, ip, r3
 80224ae:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 80224b2:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80224b6:	441a      	add	r2, r3
 80224b8:	f104 0320 	add.w	r3, r4, #32
 80224bc:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 80224c0:	0a1b      	lsrs	r3, r3, #8
 80224c2:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 80224c6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80224ca:	4319      	orrs	r1, r3
 80224cc:	b289      	uxth	r1, r1
 80224ce:	1c7b      	adds	r3, r7, #1
 80224d0:	f100 8097 	bmi.w	8022602 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 80224d4:	429e      	cmp	r6, r3
 80224d6:	f340 8094 	ble.w	8022602 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 80224da:	2800      	cmp	r0, #0
 80224dc:	f000 8094 	beq.w	8022608 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 80224e0:	f899 4001 	ldrb.w	r4, [r9, #1]
 80224e4:	9b01      	ldr	r3, [sp, #4]
 80224e6:	2cff      	cmp	r4, #255	; 0xff
 80224e8:	885b      	ldrh	r3, [r3, #2]
 80224ea:	d01b      	beq.n	8022524 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 80224ec:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 80224f0:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 80224f4:	fb0a f202 	mul.w	r2, sl, r2
 80224f8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80224fc:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8022500:	fb04 fa03 	mul.w	sl, r4, r3
 8022504:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8022508:	f602 0201 	addw	r2, r2, #2049	; 0x801
 802250c:	441a      	add	r2, r3
 802250e:	f10a 0320 	add.w	r3, sl, #32
 8022512:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8022516:	0a1b      	lsrs	r3, r3, #8
 8022518:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 802251c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022520:	ea4b 0303 	orr.w	r3, fp, r3
 8022524:	b29b      	uxth	r3, r3
 8022526:	3501      	adds	r5, #1
 8022528:	d474      	bmi.n	8022614 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 802252a:	45a8      	cmp	r8, r5
 802252c:	dd72      	ble.n	8022614 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 802252e:	f1be 0f00 	cmp.w	lr, #0
 8022532:	f000 8120 	beq.w	8022776 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 8022536:	2f00      	cmp	r7, #0
 8022538:	db69      	blt.n	802260e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 802253a:	42be      	cmp	r6, r7
 802253c:	dd67      	ble.n	802260e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 802253e:	f819 5006 	ldrb.w	r5, [r9, r6]
 8022542:	9a01      	ldr	r2, [sp, #4]
 8022544:	2dff      	cmp	r5, #255	; 0xff
 8022546:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 802254a:	d01c      	beq.n	8022586 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 802254c:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8022550:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8022554:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8022558:	fb05 fa0b 	mul.w	sl, r5, fp
 802255c:	fb08 f802 	mul.w	r8, r8, r2
 8022560:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8022564:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8022568:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802256c:	4490      	add	r8, r2
 802256e:	f10a 0220 	add.w	r2, sl, #32
 8022572:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8022576:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802257a:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 802257e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8022582:	ea4b 0b0a 	orr.w	fp, fp, sl
 8022586:	fa1f fb8b 	uxth.w	fp, fp
 802258a:	3701      	adds	r7, #1
 802258c:	d447      	bmi.n	802261e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 802258e:	42be      	cmp	r6, r7
 8022590:	dd45      	ble.n	802261e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8022592:	2800      	cmp	r0, #0
 8022594:	d046      	beq.n	8022624 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 8022596:	3601      	adds	r6, #1
 8022598:	9a01      	ldr	r2, [sp, #4]
 802259a:	f819 7006 	ldrb.w	r7, [r9, r6]
 802259e:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 80225a2:	2fff      	cmp	r7, #255	; 0xff
 80225a4:	d01a      	beq.n	80225dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 80225a6:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 80225aa:	ea4f 08e7 	mov.w	r8, r7, asr #3
 80225ae:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80225b2:	fb07 f902 	mul.w	r9, r7, r2
 80225b6:	fb08 f806 	mul.w	r8, r8, r6
 80225ba:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80225be:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 80225c2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80225c6:	44b0      	add	r8, r6
 80225c8:	f109 0620 	add.w	r6, r9, #32
 80225cc:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 80225d0:	0a36      	lsrs	r6, r6, #8
 80225d2:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80225d6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80225da:	4332      	orrs	r2, r6
 80225dc:	b292      	uxth	r2, r2
 80225de:	280f      	cmp	r0, #15
 80225e0:	d922      	bls.n	8022628 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 80225e2:	4b69      	ldr	r3, [pc, #420]	; (8022788 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 80225e4:	4a69      	ldr	r2, [pc, #420]	; (802278c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 80225e6:	486a      	ldr	r0, [pc, #424]	; (8022790 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 80225e8:	f240 210d 	movw	r1, #525	; 0x20d
 80225ec:	f004 fb1a 	bl	8026c24 <__assert_func>
 80225f0:	f04f 0c00 	mov.w	ip, #0
 80225f4:	4661      	mov	r1, ip
 80225f6:	e76a      	b.n	80224ce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 80225f8:	2400      	movs	r4, #0
 80225fa:	46a4      	mov	ip, r4
 80225fc:	4623      	mov	r3, r4
 80225fe:	4621      	mov	r1, r4
 8022600:	e791      	b.n	8022526 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8022602:	2400      	movs	r4, #0
 8022604:	4623      	mov	r3, r4
 8022606:	e78e      	b.n	8022526 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8022608:	4604      	mov	r4, r0
 802260a:	4603      	mov	r3, r0
 802260c:	e78b      	b.n	8022526 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 802260e:	2500      	movs	r5, #0
 8022610:	46ab      	mov	fp, r5
 8022612:	e7ba      	b.n	802258a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 8022614:	2700      	movs	r7, #0
 8022616:	463d      	mov	r5, r7
 8022618:	463a      	mov	r2, r7
 802261a:	46bb      	mov	fp, r7
 802261c:	e7df      	b.n	80225de <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 802261e:	2700      	movs	r7, #0
 8022620:	463a      	mov	r2, r7
 8022622:	e7dc      	b.n	80225de <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8022624:	4607      	mov	r7, r0
 8022626:	4602      	mov	r2, r0
 8022628:	f1be 0f0f 	cmp.w	lr, #15
 802262c:	d8d9      	bhi.n	80225e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 802262e:	b286      	uxth	r6, r0
 8022630:	fa1f f98e 	uxth.w	r9, lr
 8022634:	fb06 f809 	mul.w	r8, r6, r9
 8022638:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802263c:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8022640:	0136      	lsls	r6, r6, #4
 8022642:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022646:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802264a:	9601      	str	r6, [sp, #4]
 802264c:	ea4a 0101 	orr.w	r1, sl, r1
 8022650:	fa1f f689 	uxth.w	r6, r9
 8022654:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8022658:	fb10 f90e 	smulbb	r9, r0, lr
 802265c:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8022660:	9602      	str	r6, [sp, #8]
 8022662:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022666:	460e      	mov	r6, r1
 8022668:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802266c:	f1ce 0110 	rsb	r1, lr, #16
 8022670:	1a09      	subs	r1, r1, r0
 8022672:	ea4a 0303 	orr.w	r3, sl, r3
 8022676:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 802267a:	4343      	muls	r3, r0
 802267c:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8022680:	9801      	ldr	r0, [sp, #4]
 8022682:	fb01 3106 	mla	r1, r1, r6, r3
 8022686:	9e02      	ldr	r6, [sp, #8]
 8022688:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 802268c:	1b80      	subs	r0, r0, r6
 802268e:	9e01      	ldr	r6, [sp, #4]
 8022690:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8022694:	eba6 0608 	sub.w	r6, r6, r8
 8022698:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802269c:	b2b6      	uxth	r6, r6
 802269e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80226a2:	ea4a 0202 	orr.w	r2, sl, r2
 80226a6:	b280      	uxth	r0, r0
 80226a8:	4374      	muls	r4, r6
 80226aa:	fb09 1302 	mla	r3, r9, r2, r1
 80226ae:	fb0c 4400 	mla	r4, ip, r0, r4
 80226b2:	9a03      	ldr	r2, [sp, #12]
 80226b4:	9802      	ldr	r0, [sp, #8]
 80226b6:	8811      	ldrh	r1, [r2, #0]
 80226b8:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80226bc:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 80226c0:	fb00 4505 	mla	r5, r0, r5, r4
 80226c4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80226c8:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80226cc:	fb08 5707 	mla	r7, r8, r7, r5
 80226d0:	ea4a 0b0b 	orr.w	fp, sl, fp
 80226d4:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80226d8:	b292      	uxth	r2, r2
 80226da:	fb0e 3e0b 	mla	lr, lr, fp, r3
 80226de:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80226e2:	4357      	muls	r7, r2
 80226e4:	ea4f 535e 	mov.w	r3, lr, lsr #21
 80226e8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80226ec:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80226f0:	f107 0801 	add.w	r8, r7, #1
 80226f4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80226f8:	ea43 0e0e 	orr.w	lr, r3, lr
 80226fc:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8022700:	fa1f f38e 	uxth.w	r3, lr
 8022704:	1208      	asrs	r0, r1, #8
 8022706:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 802270a:	b2ff      	uxtb	r7, r7
 802270c:	121c      	asrs	r4, r3, #8
 802270e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022712:	fb10 f007 	smulbb	r0, r0, r7
 8022716:	10cd      	asrs	r5, r1, #3
 8022718:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802271c:	00c9      	lsls	r1, r1, #3
 802271e:	fb04 0402 	mla	r4, r4, r2, r0
 8022722:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022726:	10d8      	asrs	r0, r3, #3
 8022728:	b2c9      	uxtb	r1, r1
 802272a:	00db      	lsls	r3, r3, #3
 802272c:	fb11 f107 	smulbb	r1, r1, r7
 8022730:	fb15 f507 	smulbb	r5, r5, r7
 8022734:	b2db      	uxtb	r3, r3
 8022736:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802273a:	fb00 5002 	mla	r0, r0, r2, r5
 802273e:	fb03 1202 	mla	r2, r3, r2, r1
 8022742:	b2a4      	uxth	r4, r4
 8022744:	b292      	uxth	r2, r2
 8022746:	1c63      	adds	r3, r4, #1
 8022748:	1c51      	adds	r1, r2, #1
 802274a:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 802274e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022752:	b280      	uxth	r0, r0
 8022754:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022758:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802275c:	4313      	orrs	r3, r2
 802275e:	1c42      	adds	r2, r0, #1
 8022760:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022764:	0940      	lsrs	r0, r0, #5
 8022766:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802276a:	9a03      	ldr	r2, [sp, #12]
 802276c:	4303      	orrs	r3, r0
 802276e:	8013      	strh	r3, [r2, #0]
 8022770:	b005      	add	sp, #20
 8022772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022776:	280f      	cmp	r0, #15
 8022778:	f63f af33 	bhi.w	80225e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 802277c:	4677      	mov	r7, lr
 802277e:	4675      	mov	r5, lr
 8022780:	4672      	mov	r2, lr
 8022782:	46f3      	mov	fp, lr
 8022784:	e753      	b.n	802262e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 8022786:	bf00      	nop
 8022788:	0802c82a 	.word	0x0802c82a
 802278c:	0802cded 	.word	0x0802cded
 8022790:	0802c913 	.word	0x0802c913

08022794 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022798:	ed2d 8b08 	vpush	{d8-d11}
 802279c:	b097      	sub	sp, #92	; 0x5c
 802279e:	eeb0 aa40 	vmov.f32	s20, s0
 80227a2:	9214      	str	r2, [sp, #80]	; 0x50
 80227a4:	9308      	str	r3, [sp, #32]
 80227a6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80227a8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80227ac:	9312      	str	r3, [sp, #72]	; 0x48
 80227ae:	9111      	str	r1, [sp, #68]	; 0x44
 80227b0:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80227b4:	9015      	str	r0, [sp, #84]	; 0x54
 80227b6:	6850      	ldr	r0, [r2, #4]
 80227b8:	6812      	ldr	r2, [r2, #0]
 80227ba:	fb00 1303 	mla	r3, r0, r3, r1
 80227be:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80227c2:	9309      	str	r3, [sp, #36]	; 0x24
 80227c4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80227c6:	681b      	ldr	r3, [r3, #0]
 80227c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80227ca:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80227cc:	685b      	ldr	r3, [r3, #4]
 80227ce:	930c      	str	r3, [sp, #48]	; 0x30
 80227d0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80227d4:	930a      	str	r3, [sp, #40]	; 0x28
 80227d6:	eef0 9a60 	vmov.f32	s19, s1
 80227da:	eeb0 9a41 	vmov.f32	s18, s2
 80227de:	eeb0 8a62 	vmov.f32	s16, s5
 80227e2:	eef0 8a43 	vmov.f32	s17, s6
 80227e6:	eef0 ba44 	vmov.f32	s23, s8
 80227ea:	eeb0 ba64 	vmov.f32	s22, s9
 80227ee:	eef0 aa45 	vmov.f32	s21, s10
 80227f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80227f4:	2b00      	cmp	r3, #0
 80227f6:	dc03      	bgt.n	8022800 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80227f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80227fa:	2b00      	cmp	r3, #0
 80227fc:	f340 83cb 	ble.w	8022f96 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x802>
 8022800:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022802:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022806:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802280a:	1e48      	subs	r0, r1, #1
 802280c:	1e55      	subs	r5, r2, #1
 802280e:	9b08      	ldr	r3, [sp, #32]
 8022810:	2b00      	cmp	r3, #0
 8022812:	f340 81a3 	ble.w	8022b5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8022816:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8022818:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802281a:	1436      	asrs	r6, r6, #16
 802281c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8022820:	d406      	bmi.n	8022830 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8022822:	4286      	cmp	r6, r0
 8022824:	da04      	bge.n	8022830 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8022826:	2b00      	cmp	r3, #0
 8022828:	db02      	blt.n	8022830 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802282a:	42ab      	cmp	r3, r5
 802282c:	f2c0 8197 	blt.w	8022b5e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8022830:	3601      	adds	r6, #1
 8022832:	f100 8184 	bmi.w	8022b3e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8022836:	42b1      	cmp	r1, r6
 8022838:	f2c0 8181 	blt.w	8022b3e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 802283c:	3301      	adds	r3, #1
 802283e:	f100 817e 	bmi.w	8022b3e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8022842:	429a      	cmp	r2, r3
 8022844:	f2c0 817b 	blt.w	8022b3e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8022848:	9b08      	ldr	r3, [sp, #32]
 802284a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802284c:	9313      	str	r3, [sp, #76]	; 0x4c
 802284e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8022852:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022854:	2b00      	cmp	r3, #0
 8022856:	f340 81a4 	ble.w	8022ba2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 802285a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802285c:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 802285e:	1418      	asrs	r0, r3, #16
 8022860:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022862:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8022866:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022868:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 802286c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802286e:	142d      	asrs	r5, r5, #16
 8022870:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8022874:	f100 81f8 	bmi.w	8022c68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8022878:	f102 3eff 	add.w	lr, r2, #4294967295
 802287c:	4575      	cmp	r5, lr
 802287e:	f280 81f3 	bge.w	8022c68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8022882:	2800      	cmp	r0, #0
 8022884:	f2c0 81f0 	blt.w	8022c68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8022888:	f103 3eff 	add.w	lr, r3, #4294967295
 802288c:	4570      	cmp	r0, lr
 802288e:	f280 81eb 	bge.w	8022c68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8022892:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022894:	b212      	sxth	r2, r2
 8022896:	fb00 5002 	mla	r0, r0, r2, r5
 802289a:	fa1f fe81 	uxth.w	lr, r1
 802289e:	eb03 0a00 	add.w	sl, r3, r0
 80228a2:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80228a6:	f813 9000 	ldrb.w	r9, [r3, r0]
 80228aa:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80228ae:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80228b2:	b29b      	uxth	r3, r3
 80228b4:	f1bc 0f00 	cmp.w	ip, #0
 80228b8:	f000 81b9 	beq.w	8022c2e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 80228bc:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80228c0:	940d      	str	r4, [sp, #52]	; 0x34
 80228c2:	eb0a 0b02 	add.w	fp, sl, r2
 80228c6:	fa1f fa8c 	uxth.w	sl, ip
 80228ca:	fb0a fe0e 	mul.w	lr, sl, lr
 80228ce:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80228d2:	fa1f fa8a 	uxth.w	sl, sl
 80228d6:	eba5 050e 	sub.w	r5, r5, lr
 80228da:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80228de:	940e      	str	r4, [sp, #56]	; 0x38
 80228e0:	eba3 030a 	sub.w	r3, r3, sl
 80228e4:	b2ad      	uxth	r5, r5
 80228e6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80228e8:	b29b      	uxth	r3, r3
 80228ea:	fb08 f505 	mul.w	r5, r8, r5
 80228ee:	fb09 5303 	mla	r3, r9, r3, r5
 80228f2:	fb0a 3304 	mla	r3, sl, r4, r3
 80228f6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80228f8:	fb0e 3304 	mla	r3, lr, r4, r3
 80228fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022900:	2b00      	cmp	r3, #0
 8022902:	f000 810f 	beq.w	8022b24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8022906:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022908:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802290c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8022910:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8022914:	f000 8190 	beq.w	8022c38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8022918:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802291c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8022920:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022924:	fb09 f000 	mul.w	r0, r9, r0
 8022928:	fb0a fe0e 	mul.w	lr, sl, lr
 802292c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8022930:	f100 0b20 	add.w	fp, r0, #32
 8022934:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8022938:	44ce      	add	lr, r9
 802293a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802293e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022942:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8022946:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802294a:	ea4e 0909 	orr.w	r9, lr, r9
 802294e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022952:	8868      	ldrh	r0, [r5, #2]
 8022954:	d019      	beq.n	802298a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8022956:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802295a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802295e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022962:	fb08 f800 	mul.w	r8, r8, r0
 8022966:	fb0a fe0e 	mul.w	lr, sl, lr
 802296a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 802296e:	f108 0b20 	add.w	fp, r8, #32
 8022972:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8022976:	4486      	add	lr, r0
 8022978:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 802297c:	0a00      	lsrs	r0, r0, #8
 802297e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8022982:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022986:	ea4e 0000 	orr.w	r0, lr, r0
 802298a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802298e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8022992:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8022996:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802299a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802299e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80229a2:	ea4e 0909 	orr.w	r9, lr, r9
 80229a6:	ea4a 0000 	orr.w	r0, sl, r0
 80229aa:	f1bc 0f00 	cmp.w	ip, #0
 80229ae:	f000 8145 	beq.w	8022c3c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 80229b2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80229b6:	3a01      	subs	r2, #1
 80229b8:	0052      	lsls	r2, r2, #1
 80229ba:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80229bc:	3202      	adds	r2, #2
 80229be:	2cff      	cmp	r4, #255	; 0xff
 80229c0:	eb05 0e02 	add.w	lr, r5, r2
 80229c4:	5aaa      	ldrh	r2, [r5, r2]
 80229c6:	d018      	beq.n	80229fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 80229c8:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80229cc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80229d0:	fb04 fa02 	mul.w	sl, r4, r2
 80229d4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80229d8:	fb08 f805 	mul.w	r8, r8, r5
 80229dc:	f10a 0520 	add.w	r5, sl, #32
 80229e0:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80229e4:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80229e8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80229ec:	4442      	add	r2, r8
 80229ee:	0a2d      	lsrs	r5, r5, #8
 80229f0:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80229f4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80229f8:	432a      	orrs	r2, r5
 80229fa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80229fc:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8022a00:	2cff      	cmp	r4, #255	; 0xff
 8022a02:	d01a      	beq.n	8022a3a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8022a04:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8022a08:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022a0c:	fb04 fa05 	mul.w	sl, r4, r5
 8022a10:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022a14:	fb08 f80e 	mul.w	r8, r8, lr
 8022a18:	f10a 0e20 	add.w	lr, sl, #32
 8022a1c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8022a20:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8022a24:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022a28:	4445      	add	r5, r8
 8022a2a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022a2e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8022a32:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8022a36:	ea45 050e 	orr.w	r5, r5, lr
 8022a3a:	fb1c fe01 	smulbb	lr, ip, r1
 8022a3e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8022a42:	f1cc 0810 	rsb	r8, ip, #16
 8022a46:	eba8 0801 	sub.w	r8, r8, r1
 8022a4a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8022a4e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8022a52:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8022a56:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8022a5a:	4341      	muls	r1, r0
 8022a5c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022a60:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022a64:	ea4a 0202 	orr.w	r2, sl, r2
 8022a68:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8022a6c:	fb09 1108 	mla	r1, r9, r8, r1
 8022a70:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022a74:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8022a78:	fb0c 1102 	mla	r1, ip, r2, r1
 8022a7c:	ea4b 0505 	orr.w	r5, fp, r5
 8022a80:	fb0e 1e05 	mla	lr, lr, r5, r1
 8022a84:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8022a88:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8022a8c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022a90:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022a94:	ea42 0e0e 	orr.w	lr, r2, lr
 8022a98:	fa1f f28e 	uxth.w	r2, lr
 8022a9c:	2bff      	cmp	r3, #255	; 0xff
 8022a9e:	d103      	bne.n	8022aa8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8022aa0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022aa2:	29ff      	cmp	r1, #255	; 0xff
 8022aa4:	f000 80de 	beq.w	8022c64 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 8022aa8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022aaa:	8838      	ldrh	r0, [r7, #0]
 8022aac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022aae:	434b      	muls	r3, r1
 8022ab0:	f103 0c01 	add.w	ip, r3, #1
 8022ab4:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8022ab8:	ea6f 2c23 	mvn.w	ip, r3, asr #8
 8022abc:	1205      	asrs	r5, r0, #8
 8022abe:	fa5f fc8c 	uxtb.w	ip, ip
 8022ac2:	1213      	asrs	r3, r2, #8
 8022ac4:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022ac8:	fb15 f50c 	smulbb	r5, r5, ip
 8022acc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8022ad0:	fb03 5301 	mla	r3, r3, r1, r5
 8022ad4:	b29d      	uxth	r5, r3
 8022ad6:	10c3      	asrs	r3, r0, #3
 8022ad8:	00c0      	lsls	r0, r0, #3
 8022ada:	10d1      	asrs	r1, r2, #3
 8022adc:	b2c0      	uxtb	r0, r0
 8022ade:	00d2      	lsls	r2, r2, #3
 8022ae0:	fb10 f00c 	smulbb	r0, r0, ip
 8022ae4:	b2d2      	uxtb	r2, r2
 8022ae6:	fb02 0204 	mla	r2, r2, r4, r0
 8022aea:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8022aee:	fb13 f30c 	smulbb	r3, r3, ip
 8022af2:	b292      	uxth	r2, r2
 8022af4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022af8:	fb01 3104 	mla	r1, r1, r4, r3
 8022afc:	1c50      	adds	r0, r2, #1
 8022afe:	1c6b      	adds	r3, r5, #1
 8022b00:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8022b04:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022b08:	b289      	uxth	r1, r1
 8022b0a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022b0e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8022b12:	4313      	orrs	r3, r2
 8022b14:	1c4a      	adds	r2, r1, #1
 8022b16:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022b1a:	0949      	lsrs	r1, r1, #5
 8022b1c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022b20:	430b      	orrs	r3, r1
 8022b22:	803b      	strh	r3, [r7, #0]
 8022b24:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022b26:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022b28:	4413      	add	r3, r2
 8022b2a:	9329      	str	r3, [sp, #164]	; 0xa4
 8022b2c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022b2e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022b30:	441a      	add	r2, r3
 8022b32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022b34:	922a      	str	r2, [sp, #168]	; 0xa8
 8022b36:	3b01      	subs	r3, #1
 8022b38:	3702      	adds	r7, #2
 8022b3a:	9313      	str	r3, [sp, #76]	; 0x4c
 8022b3c:	e689      	b.n	8022852 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8022b3e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022b40:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8022b42:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8022b44:	4433      	add	r3, r6
 8022b46:	9329      	str	r3, [sp, #164]	; 0xa4
 8022b48:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022b4a:	441c      	add	r4, r3
 8022b4c:	9b08      	ldr	r3, [sp, #32]
 8022b4e:	942a      	str	r4, [sp, #168]	; 0xa8
 8022b50:	3b01      	subs	r3, #1
 8022b52:	9308      	str	r3, [sp, #32]
 8022b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022b56:	3302      	adds	r3, #2
 8022b58:	9309      	str	r3, [sp, #36]	; 0x24
 8022b5a:	e658      	b.n	802280e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022b5c:	d028      	beq.n	8022bb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 8022b5e:	9b08      	ldr	r3, [sp, #32]
 8022b60:	982b      	ldr	r0, [sp, #172]	; 0xac
 8022b62:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8022b64:	3b01      	subs	r3, #1
 8022b66:	fb00 5003 	mla	r0, r0, r3, r5
 8022b6a:	1400      	asrs	r0, r0, #16
 8022b6c:	f53f ae6c 	bmi.w	8022848 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8022b70:	3901      	subs	r1, #1
 8022b72:	4288      	cmp	r0, r1
 8022b74:	f6bf ae68 	bge.w	8022848 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8022b78:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8022b7a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8022b7c:	fb01 0303 	mla	r3, r1, r3, r0
 8022b80:	141b      	asrs	r3, r3, #16
 8022b82:	f53f ae61 	bmi.w	8022848 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8022b86:	3a01      	subs	r2, #1
 8022b88:	4293      	cmp	r3, r2
 8022b8a:	f6bf ae5d 	bge.w	8022848 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8022b8e:	9b08      	ldr	r3, [sp, #32]
 8022b90:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8022b94:	9313      	str	r3, [sp, #76]	; 0x4c
 8022b96:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8022b9a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022b9c:	2b00      	cmp	r3, #0
 8022b9e:	f300 8082 	bgt.w	8022ca6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8022ba2:	9b08      	ldr	r3, [sp, #32]
 8022ba4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022baa:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8022bae:	9309      	str	r3, [sp, #36]	; 0x24
 8022bb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022bb2:	2b00      	cmp	r3, #0
 8022bb4:	f340 81ef 	ble.w	8022f96 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x802>
 8022bb8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022bbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022bc0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022bc4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022bc6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022bca:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022bce:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022bd2:	eef0 6a48 	vmov.f32	s13, s16
 8022bd6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022bda:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022bde:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022be2:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8022be6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022bea:	eef0 6a68 	vmov.f32	s13, s17
 8022bee:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022bf2:	ee18 2a10 	vmov	r2, s16
 8022bf6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022bfa:	fb92 f3f3 	sdiv	r3, r2, r3
 8022bfe:	ee18 2a90 	vmov	r2, s17
 8022c02:	932b      	str	r3, [sp, #172]	; 0xac
 8022c04:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022c06:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c0a:	932c      	str	r3, [sp, #176]	; 0xb0
 8022c0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022c0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022c10:	3b01      	subs	r3, #1
 8022c12:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022c16:	9311      	str	r3, [sp, #68]	; 0x44
 8022c18:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022c1a:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8022c1e:	bf08      	it	eq
 8022c20:	4613      	moveq	r3, r2
 8022c22:	9308      	str	r3, [sp, #32]
 8022c24:	eef0 8a67 	vmov.f32	s17, s15
 8022c28:	eeb0 8a47 	vmov.f32	s16, s14
 8022c2c:	e5e1      	b.n	80227f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8022c2e:	fb08 f505 	mul.w	r5, r8, r5
 8022c32:	fb09 5303 	mla	r3, r9, r3, r5
 8022c36:	e661      	b.n	80228fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 8022c38:	4681      	mov	r9, r0
 8022c3a:	e688      	b.n	802294e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8022c3c:	f1c1 0210 	rsb	r2, r1, #16
 8022c40:	4341      	muls	r1, r0
 8022c42:	fb09 1902 	mla	r9, r9, r2, r1
 8022c46:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022c4a:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8022c4e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8022c52:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022c56:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022c5a:	ea42 0909 	orr.w	r9, r2, r9
 8022c5e:	fa1f f289 	uxth.w	r2, r9
 8022c62:	e71b      	b.n	8022a9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8022c64:	803a      	strh	r2, [r7, #0]
 8022c66:	e75d      	b.n	8022b24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8022c68:	f115 0e01 	adds.w	lr, r5, #1
 8022c6c:	f53f af5a 	bmi.w	8022b24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8022c70:	4572      	cmp	r2, lr
 8022c72:	f6ff af57 	blt.w	8022b24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8022c76:	f110 0e01 	adds.w	lr, r0, #1
 8022c7a:	f53f af53 	bmi.w	8022b24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8022c7e:	4573      	cmp	r3, lr
 8022c80:	f6ff af50 	blt.w	8022b24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8022c84:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022c86:	9502      	str	r5, [sp, #8]
 8022c88:	b21b      	sxth	r3, r3
 8022c8a:	b212      	sxth	r2, r2
 8022c8c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8022c90:	9301      	str	r3, [sp, #4]
 8022c92:	9200      	str	r2, [sp, #0]
 8022c94:	e9cd c405 	strd	ip, r4, [sp, #20]
 8022c98:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8022c9c:	4639      	mov	r1, r7
 8022c9e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022ca0:	f7ff fbd2 	bl	8022448 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8022ca4:	e73e      	b.n	8022b24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8022ca6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022ca8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022cac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022cae:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8022cb2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022cb4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022cb8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022cba:	141f      	asrs	r7, r3, #16
 8022cbc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022cbe:	141b      	asrs	r3, r3, #16
 8022cc0:	fb01 3707 	mla	r7, r1, r7, r3
 8022cc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022cc6:	fa1f fc82 	uxth.w	ip, r2
 8022cca:	eb03 0a07 	add.w	sl, r3, r7
 8022cce:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8022cd2:	f813 9007 	ldrb.w	r9, [r3, r7]
 8022cd6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8022cda:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8022cde:	b29b      	uxth	r3, r3
 8022ce0:	2d00      	cmp	r5, #0
 8022ce2:	f000 813d 	beq.w	8022f60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8022ce6:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8022cea:	940f      	str	r4, [sp, #60]	; 0x3c
 8022cec:	eb0a 0b01 	add.w	fp, sl, r1
 8022cf0:	fa1f fa85 	uxth.w	sl, r5
 8022cf4:	fb0a fc0c 	mul.w	ip, sl, ip
 8022cf8:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8022cfc:	fa1f fa8a 	uxth.w	sl, sl
 8022d00:	eba0 000c 	sub.w	r0, r0, ip
 8022d04:	eba3 030a 	sub.w	r3, r3, sl
 8022d08:	b280      	uxth	r0, r0
 8022d0a:	fb08 f000 	mul.w	r0, r8, r0
 8022d0e:	b29b      	uxth	r3, r3
 8022d10:	fb09 0303 	mla	r3, r9, r3, r0
 8022d14:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022d16:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8022d1a:	9410      	str	r4, [sp, #64]	; 0x40
 8022d1c:	fb0a 3300 	mla	r3, sl, r0, r3
 8022d20:	fb0c 3304 	mla	r3, ip, r4, r3
 8022d24:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022d28:	2b00      	cmp	r3, #0
 8022d2a:	f000 810b 	beq.w	8022f44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>
 8022d2e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8022d30:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022d32:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022d36:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8022d3a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8022d3e:	f000 8114 	beq.w	8022f6a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d6>
 8022d42:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022d46:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8022d4a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022d4e:	fb09 f707 	mul.w	r7, r9, r7
 8022d52:	fb0a fc0c 	mul.w	ip, sl, ip
 8022d56:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8022d5a:	f107 0b20 	add.w	fp, r7, #32
 8022d5e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8022d62:	44cc      	add	ip, r9
 8022d64:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8022d68:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022d6c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8022d70:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022d74:	ea4c 0909 	orr.w	r9, ip, r9
 8022d78:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022d7c:	8847      	ldrh	r7, [r0, #2]
 8022d7e:	d019      	beq.n	8022db4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x620>
 8022d80:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8022d84:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8022d88:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022d8c:	fb08 f807 	mul.w	r8, r8, r7
 8022d90:	fb0a fc0c 	mul.w	ip, sl, ip
 8022d94:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8022d98:	f108 0b20 	add.w	fp, r8, #32
 8022d9c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8022da0:	44bc      	add	ip, r7
 8022da2:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8022da6:	0a3f      	lsrs	r7, r7, #8
 8022da8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8022dac:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022db0:	ea4c 0707 	orr.w	r7, ip, r7
 8022db4:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8022db8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8022dbc:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022dc0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022dc4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022dc8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022dcc:	ea4c 0909 	orr.w	r9, ip, r9
 8022dd0:	ea4a 0707 	orr.w	r7, sl, r7
 8022dd4:	2d00      	cmp	r5, #0
 8022dd6:	f000 80ca 	beq.w	8022f6e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 8022dda:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8022dde:	3901      	subs	r1, #1
 8022de0:	0049      	lsls	r1, r1, #1
 8022de2:	3102      	adds	r1, #2
 8022de4:	eb00 0c01 	add.w	ip, r0, r1
 8022de8:	5a41      	ldrh	r1, [r0, r1]
 8022dea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022dec:	28ff      	cmp	r0, #255	; 0xff
 8022dee:	d019      	beq.n	8022e24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x690>
 8022df0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022df2:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8022df6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022dfa:	fb04 fa01 	mul.w	sl, r4, r1
 8022dfe:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022e02:	fb08 f800 	mul.w	r8, r8, r0
 8022e06:	f10a 0020 	add.w	r0, sl, #32
 8022e0a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8022e0e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8022e12:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022e16:	4441      	add	r1, r8
 8022e18:	0a00      	lsrs	r0, r0, #8
 8022e1a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8022e1e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022e22:	4301      	orrs	r1, r0
 8022e24:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022e26:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8022e2a:	2cff      	cmp	r4, #255	; 0xff
 8022e2c:	d01a      	beq.n	8022e64 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8022e2e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8022e32:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022e36:	fb04 fa00 	mul.w	sl, r4, r0
 8022e3a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8022e3e:	fb08 f80c 	mul.w	r8, r8, ip
 8022e42:	f10a 0c20 	add.w	ip, sl, #32
 8022e46:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8022e4a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8022e4e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8022e52:	4440      	add	r0, r8
 8022e54:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022e58:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8022e5c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022e60:	ea40 000c 	orr.w	r0, r0, ip
 8022e64:	fb15 fc02 	smulbb	ip, r5, r2
 8022e68:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8022e6c:	f1c5 0810 	rsb	r8, r5, #16
 8022e70:	eba8 0802 	sub.w	r8, r8, r2
 8022e74:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8022e78:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8022e7c:	437a      	muls	r2, r7
 8022e7e:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8022e82:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8022e86:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022e8a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022e8e:	fb09 2208 	mla	r2, r9, r8, r2
 8022e92:	ea4a 0101 	orr.w	r1, sl, r1
 8022e96:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8022e9a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022e9e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022ea2:	fb05 2201 	mla	r2, r5, r1, r2
 8022ea6:	ea4b 0000 	orr.w	r0, fp, r0
 8022eaa:	fb0c 2200 	mla	r2, ip, r0, r2
 8022eae:	0d57      	lsrs	r7, r2, #21
 8022eb0:	0952      	lsrs	r2, r2, #5
 8022eb2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022eb6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022eba:	433a      	orrs	r2, r7
 8022ebc:	2bff      	cmp	r3, #255	; 0xff
 8022ebe:	b292      	uxth	r2, r2
 8022ec0:	d102      	bne.n	8022ec8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 8022ec2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022ec4:	29ff      	cmp	r1, #255	; 0xff
 8022ec6:	d063      	beq.n	8022f90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7fc>
 8022ec8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8022eca:	f8be 1000 	ldrh.w	r1, [lr]
 8022ece:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022ed0:	4343      	muls	r3, r0
 8022ed2:	1c58      	adds	r0, r3, #1
 8022ed4:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8022ed8:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8022edc:	1208      	asrs	r0, r1, #8
 8022ede:	b2db      	uxtb	r3, r3
 8022ee0:	1215      	asrs	r5, r2, #8
 8022ee2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022ee6:	fb10 f003 	smulbb	r0, r0, r3
 8022eea:	10cf      	asrs	r7, r1, #3
 8022eec:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022ef0:	00c9      	lsls	r1, r1, #3
 8022ef2:	fb05 0504 	mla	r5, r5, r4, r0
 8022ef6:	b2c9      	uxtb	r1, r1
 8022ef8:	10d0      	asrs	r0, r2, #3
 8022efa:	00d2      	lsls	r2, r2, #3
 8022efc:	fb11 f103 	smulbb	r1, r1, r3
 8022f00:	b2d2      	uxtb	r2, r2
 8022f02:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022f06:	fb02 1204 	mla	r2, r2, r4, r1
 8022f0a:	fb17 f703 	smulbb	r7, r7, r3
 8022f0e:	b2ad      	uxth	r5, r5
 8022f10:	b292      	uxth	r2, r2
 8022f12:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022f16:	fb00 7004 	mla	r0, r0, r4, r7
 8022f1a:	1c6b      	adds	r3, r5, #1
 8022f1c:	1c57      	adds	r7, r2, #1
 8022f1e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022f22:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8022f26:	b280      	uxth	r0, r0
 8022f28:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022f2c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022f30:	433d      	orrs	r5, r7
 8022f32:	1c47      	adds	r7, r0, #1
 8022f34:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8022f38:	097f      	lsrs	r7, r7, #5
 8022f3a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022f3e:	433d      	orrs	r5, r7
 8022f40:	f8ae 5000 	strh.w	r5, [lr]
 8022f44:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022f46:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022f48:	4413      	add	r3, r2
 8022f4a:	9329      	str	r3, [sp, #164]	; 0xa4
 8022f4c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022f4e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022f50:	441a      	add	r2, r3
 8022f52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022f54:	922a      	str	r2, [sp, #168]	; 0xa8
 8022f56:	3b01      	subs	r3, #1
 8022f58:	f10e 0e02 	add.w	lr, lr, #2
 8022f5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8022f5e:	e61c      	b.n	8022b9a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x406>
 8022f60:	fb08 f000 	mul.w	r0, r8, r0
 8022f64:	fb09 0303 	mla	r3, r9, r3, r0
 8022f68:	e6dc      	b.n	8022d24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x590>
 8022f6a:	46b9      	mov	r9, r7
 8022f6c:	e704      	b.n	8022d78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e4>
 8022f6e:	f1c2 0110 	rsb	r1, r2, #16
 8022f72:	437a      	muls	r2, r7
 8022f74:	fb09 2901 	mla	r9, r9, r1, r2
 8022f78:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8022f7c:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8022f80:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8022f84:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022f88:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022f8c:	4302      	orrs	r2, r0
 8022f8e:	e795      	b.n	8022ebc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8022f90:	f8ae 2000 	strh.w	r2, [lr]
 8022f94:	e7d6      	b.n	8022f44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>
 8022f96:	b017      	add	sp, #92	; 0x5c
 8022f98:	ecbd 8b08 	vpop	{d8-d11}
 8022f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022fa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8022fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022fa4:	b085      	sub	sp, #20
 8022fa6:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8022faa:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8022fae:	9103      	str	r1, [sp, #12]
 8022fb0:	fb05 7106 	mla	r1, r5, r6, r7
 8022fb4:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 8022fb8:	2d00      	cmp	r5, #0
 8022fba:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8022fbe:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8022fc2:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8022fc6:	9401      	str	r4, [sp, #4]
 8022fc8:	eb02 0901 	add.w	r9, r2, r1
 8022fcc:	f2c0 80c0 	blt.w	8023150 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8022fd0:	45a8      	cmp	r8, r5
 8022fd2:	f340 80bd 	ble.w	8023150 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8022fd6:	2f00      	cmp	r7, #0
 8022fd8:	f2c0 80b6 	blt.w	8023148 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8022fdc:	42be      	cmp	r6, r7
 8022fde:	f340 80b3 	ble.w	8023148 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8022fe2:	f812 c001 	ldrb.w	ip, [r2, r1]
 8022fe6:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8022fea:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022fee:	d019      	beq.n	8023024 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 8022ff0:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8022ff4:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8022ff8:	435a      	muls	r2, r3
 8022ffa:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8022ffe:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8023002:	fb0c f403 	mul.w	r4, ip, r3
 8023006:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 802300a:	f602 0201 	addw	r2, r2, #2049	; 0x801
 802300e:	441a      	add	r2, r3
 8023010:	f104 0320 	add.w	r3, r4, #32
 8023014:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8023018:	0a1b      	lsrs	r3, r3, #8
 802301a:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 802301e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023022:	4319      	orrs	r1, r3
 8023024:	b289      	uxth	r1, r1
 8023026:	1c7b      	adds	r3, r7, #1
 8023028:	f100 8097 	bmi.w	802315a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 802302c:	429e      	cmp	r6, r3
 802302e:	f340 8094 	ble.w	802315a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8023032:	2800      	cmp	r0, #0
 8023034:	f000 8094 	beq.w	8023160 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 8023038:	f899 4001 	ldrb.w	r4, [r9, #1]
 802303c:	9b01      	ldr	r3, [sp, #4]
 802303e:	2cff      	cmp	r4, #255	; 0xff
 8023040:	885b      	ldrh	r3, [r3, #2]
 8023042:	d01b      	beq.n	802307c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 8023044:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8023048:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 802304c:	fb0a f202 	mul.w	r2, sl, r2
 8023050:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023054:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8023058:	fb04 fa03 	mul.w	sl, r4, r3
 802305c:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8023060:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8023064:	441a      	add	r2, r3
 8023066:	f10a 0320 	add.w	r3, sl, #32
 802306a:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802306e:	0a1b      	lsrs	r3, r3, #8
 8023070:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8023074:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023078:	ea4b 0303 	orr.w	r3, fp, r3
 802307c:	b29b      	uxth	r3, r3
 802307e:	3501      	adds	r5, #1
 8023080:	d474      	bmi.n	802316c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8023082:	45a8      	cmp	r8, r5
 8023084:	dd72      	ble.n	802316c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8023086:	f1be 0f00 	cmp.w	lr, #0
 802308a:	f000 8111 	beq.w	80232b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x310>
 802308e:	2f00      	cmp	r7, #0
 8023090:	db69      	blt.n	8023166 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8023092:	42be      	cmp	r6, r7
 8023094:	dd67      	ble.n	8023166 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8023096:	f819 5006 	ldrb.w	r5, [r9, r6]
 802309a:	9a01      	ldr	r2, [sp, #4]
 802309c:	2dff      	cmp	r5, #255	; 0xff
 802309e:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 80230a2:	d01c      	beq.n	80230de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 80230a4:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 80230a8:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80230ac:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80230b0:	fb05 fa0b 	mul.w	sl, r5, fp
 80230b4:	fb08 f802 	mul.w	r8, r8, r2
 80230b8:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80230bc:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 80230c0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80230c4:	4490      	add	r8, r2
 80230c6:	f10a 0220 	add.w	r2, sl, #32
 80230ca:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 80230ce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80230d2:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 80230d6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80230da:	ea4b 0b0a 	orr.w	fp, fp, sl
 80230de:	fa1f fb8b 	uxth.w	fp, fp
 80230e2:	3701      	adds	r7, #1
 80230e4:	d447      	bmi.n	8023176 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 80230e6:	42be      	cmp	r6, r7
 80230e8:	dd45      	ble.n	8023176 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 80230ea:	2800      	cmp	r0, #0
 80230ec:	d046      	beq.n	802317c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 80230ee:	3601      	adds	r6, #1
 80230f0:	9a01      	ldr	r2, [sp, #4]
 80230f2:	f819 7006 	ldrb.w	r7, [r9, r6]
 80230f6:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 80230fa:	2fff      	cmp	r7, #255	; 0xff
 80230fc:	d01a      	beq.n	8023134 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 80230fe:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8023102:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8023106:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802310a:	fb07 f902 	mul.w	r9, r7, r2
 802310e:	fb08 f806 	mul.w	r8, r8, r6
 8023112:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8023116:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 802311a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802311e:	44b0      	add	r8, r6
 8023120:	f109 0620 	add.w	r6, r9, #32
 8023124:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8023128:	0a36      	lsrs	r6, r6, #8
 802312a:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 802312e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8023132:	4332      	orrs	r2, r6
 8023134:	b292      	uxth	r2, r2
 8023136:	280f      	cmp	r0, #15
 8023138:	d922      	bls.n	8023180 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 802313a:	4b61      	ldr	r3, [pc, #388]	; (80232c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 802313c:	4a61      	ldr	r2, [pc, #388]	; (80232c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 802313e:	4862      	ldr	r0, [pc, #392]	; (80232c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 8023140:	f240 210d 	movw	r1, #525	; 0x20d
 8023144:	f003 fd6e 	bl	8026c24 <__assert_func>
 8023148:	f04f 0c00 	mov.w	ip, #0
 802314c:	4661      	mov	r1, ip
 802314e:	e76a      	b.n	8023026 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8023150:	2400      	movs	r4, #0
 8023152:	46a4      	mov	ip, r4
 8023154:	4623      	mov	r3, r4
 8023156:	4621      	mov	r1, r4
 8023158:	e791      	b.n	802307e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 802315a:	2400      	movs	r4, #0
 802315c:	4623      	mov	r3, r4
 802315e:	e78e      	b.n	802307e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8023160:	4604      	mov	r4, r0
 8023162:	4603      	mov	r3, r0
 8023164:	e78b      	b.n	802307e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8023166:	2500      	movs	r5, #0
 8023168:	46ab      	mov	fp, r5
 802316a:	e7ba      	b.n	80230e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 802316c:	2700      	movs	r7, #0
 802316e:	463d      	mov	r5, r7
 8023170:	463a      	mov	r2, r7
 8023172:	46bb      	mov	fp, r7
 8023174:	e7df      	b.n	8023136 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8023176:	2700      	movs	r7, #0
 8023178:	463a      	mov	r2, r7
 802317a:	e7dc      	b.n	8023136 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 802317c:	4607      	mov	r7, r0
 802317e:	4602      	mov	r2, r0
 8023180:	f1be 0f0f 	cmp.w	lr, #15
 8023184:	d8d9      	bhi.n	802313a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8023186:	b286      	uxth	r6, r0
 8023188:	fa1f f98e 	uxth.w	r9, lr
 802318c:	fb06 f809 	mul.w	r8, r6, r9
 8023190:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8023194:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8023198:	0136      	lsls	r6, r6, #4
 802319a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802319e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80231a2:	9601      	str	r6, [sp, #4]
 80231a4:	ea4a 0101 	orr.w	r1, sl, r1
 80231a8:	fa1f f689 	uxth.w	r6, r9
 80231ac:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 80231b0:	fb10 f90e 	smulbb	r9, r0, lr
 80231b4:	ea4f 09e9 	mov.w	r9, r9, asr #3
 80231b8:	9602      	str	r6, [sp, #8]
 80231ba:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80231be:	460e      	mov	r6, r1
 80231c0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80231c4:	f1ce 0110 	rsb	r1, lr, #16
 80231c8:	1a09      	subs	r1, r1, r0
 80231ca:	ea4a 0303 	orr.w	r3, sl, r3
 80231ce:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 80231d2:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80231d6:	4343      	muls	r3, r0
 80231d8:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 80231dc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80231e0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80231e4:	fb01 3106 	mla	r1, r1, r6, r3
 80231e8:	ea4a 0202 	orr.w	r2, sl, r2
 80231ec:	fb09 1302 	mla	r3, r9, r2, r1
 80231f0:	9901      	ldr	r1, [sp, #4]
 80231f2:	9802      	ldr	r0, [sp, #8]
 80231f4:	9a03      	ldr	r2, [sp, #12]
 80231f6:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80231fa:	1a09      	subs	r1, r1, r0
 80231fc:	9801      	ldr	r0, [sp, #4]
 80231fe:	8812      	ldrh	r2, [r2, #0]
 8023200:	eba0 0608 	sub.w	r6, r0, r8
 8023204:	b2b6      	uxth	r6, r6
 8023206:	b289      	uxth	r1, r1
 8023208:	4374      	muls	r4, r6
 802320a:	fb0c 4401 	mla	r4, ip, r1, r4
 802320e:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 8023212:	9902      	ldr	r1, [sp, #8]
 8023214:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023218:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802321c:	fb01 4505 	mla	r5, r1, r5, r4
 8023220:	ea4a 0b0b 	orr.w	fp, sl, fp
 8023224:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8023228:	fb0e 3e0b 	mla	lr, lr, fp, r3
 802322c:	fb08 5707 	mla	r7, r8, r7, r5
 8023230:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8023234:	1211      	asrs	r1, r2, #8
 8023236:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802323a:	ea6f 2727 	mvn.w	r7, r7, asr #8
 802323e:	b2ff      	uxtb	r7, r7
 8023240:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023244:	10d0      	asrs	r0, r2, #3
 8023246:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802324a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802324e:	00d2      	lsls	r2, r2, #3
 8023250:	4379      	muls	r1, r7
 8023252:	ea43 0e0e 	orr.w	lr, r3, lr
 8023256:	b2d2      	uxtb	r2, r2
 8023258:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802325c:	fa1f f38e 	uxth.w	r3, lr
 8023260:	4378      	muls	r0, r7
 8023262:	4357      	muls	r7, r2
 8023264:	1c4a      	adds	r2, r1, #1
 8023266:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 802326a:	1219      	asrs	r1, r3, #8
 802326c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023270:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8023274:	4a15      	ldr	r2, [pc, #84]	; (80232cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x32c>)
 8023276:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 802327a:	1c42      	adds	r2, r0, #1
 802327c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023280:	10da      	asrs	r2, r3, #3
 8023282:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023286:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802328a:	00d2      	lsls	r2, r2, #3
 802328c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023290:	430a      	orrs	r2, r1
 8023292:	00db      	lsls	r3, r3, #3
 8023294:	1c79      	adds	r1, r7, #1
 8023296:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 802329a:	b2db      	uxtb	r3, r3
 802329c:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 80232a0:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80232a4:	4313      	orrs	r3, r2
 80232a6:	9a03      	ldr	r2, [sp, #12]
 80232a8:	8013      	strh	r3, [r2, #0]
 80232aa:	b005      	add	sp, #20
 80232ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232b0:	280f      	cmp	r0, #15
 80232b2:	f63f af42 	bhi.w	802313a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 80232b6:	4677      	mov	r7, lr
 80232b8:	4675      	mov	r5, lr
 80232ba:	4672      	mov	r2, lr
 80232bc:	46f3      	mov	fp, lr
 80232be:	e762      	b.n	8023186 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 80232c0:	0802c82a 	.word	0x0802c82a
 80232c4:	0802cded 	.word	0x0802cded
 80232c8:	0802c913 	.word	0x0802c913
 80232cc:	fffff800 	.word	0xfffff800

080232d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80232d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232d4:	ed2d 8b08 	vpush	{d8-d11}
 80232d8:	b093      	sub	sp, #76	; 0x4c
 80232da:	eeb0 aa40 	vmov.f32	s20, s0
 80232de:	9210      	str	r2, [sp, #64]	; 0x40
 80232e0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80232e2:	910e      	str	r1, [sp, #56]	; 0x38
 80232e4:	9306      	str	r3, [sp, #24]
 80232e6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80232ea:	9011      	str	r0, [sp, #68]	; 0x44
 80232ec:	6850      	ldr	r0, [r2, #4]
 80232ee:	6812      	ldr	r2, [r2, #0]
 80232f0:	fb00 1303 	mla	r3, r0, r3, r1
 80232f4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80232f8:	9307      	str	r3, [sp, #28]
 80232fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80232fc:	681b      	ldr	r3, [r3, #0]
 80232fe:	9308      	str	r3, [sp, #32]
 8023300:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023302:	685b      	ldr	r3, [r3, #4]
 8023304:	9309      	str	r3, [sp, #36]	; 0x24
 8023306:	eef0 9a60 	vmov.f32	s19, s1
 802330a:	eeb0 9a41 	vmov.f32	s18, s2
 802330e:	eeb0 8a62 	vmov.f32	s16, s5
 8023312:	eef0 8a43 	vmov.f32	s17, s6
 8023316:	eef0 ba44 	vmov.f32	s23, s8
 802331a:	eeb0 ba64 	vmov.f32	s22, s9
 802331e:	eef0 aa45 	vmov.f32	s21, s10
 8023322:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023324:	2b00      	cmp	r3, #0
 8023326:	dc03      	bgt.n	8023330 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8023328:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802332a:	2b00      	cmp	r3, #0
 802332c:	f340 83b6 	ble.w	8023a9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8023330:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023332:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023336:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802333a:	1e48      	subs	r0, r1, #1
 802333c:	1e55      	subs	r5, r2, #1
 802333e:	9b06      	ldr	r3, [sp, #24]
 8023340:	2b00      	cmp	r3, #0
 8023342:	f340 8199 	ble.w	8023678 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8023346:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8023348:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802334a:	1436      	asrs	r6, r6, #16
 802334c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023350:	d406      	bmi.n	8023360 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023352:	4286      	cmp	r6, r0
 8023354:	da04      	bge.n	8023360 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8023356:	2b00      	cmp	r3, #0
 8023358:	db02      	blt.n	8023360 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802335a:	42ab      	cmp	r3, r5
 802335c:	f2c0 818d 	blt.w	802367a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8023360:	3601      	adds	r6, #1
 8023362:	f100 817a 	bmi.w	802365a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8023366:	42b1      	cmp	r1, r6
 8023368:	f2c0 8177 	blt.w	802365a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802336c:	3301      	adds	r3, #1
 802336e:	f100 8174 	bmi.w	802365a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8023372:	429a      	cmp	r2, r3
 8023374:	f2c0 8171 	blt.w	802365a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8023378:	9b06      	ldr	r3, [sp, #24]
 802337a:	9f07      	ldr	r7, [sp, #28]
 802337c:	930f      	str	r3, [sp, #60]	; 0x3c
 802337e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8023382:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023384:	2b00      	cmp	r3, #0
 8023386:	f340 819a 	ble.w	80236be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 802338a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802338c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 802338e:	1418      	asrs	r0, r3, #16
 8023390:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023392:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8023396:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023398:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 802339c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802339e:	142d      	asrs	r5, r5, #16
 80233a0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80233a4:	f100 81ee 	bmi.w	8023784 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80233a8:	f102 3eff 	add.w	lr, r2, #4294967295
 80233ac:	4575      	cmp	r5, lr
 80233ae:	f280 81e9 	bge.w	8023784 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80233b2:	2800      	cmp	r0, #0
 80233b4:	f2c0 81e6 	blt.w	8023784 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80233b8:	f103 3eff 	add.w	lr, r3, #4294967295
 80233bc:	4570      	cmp	r0, lr
 80233be:	f280 81e1 	bge.w	8023784 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80233c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80233c4:	b212      	sxth	r2, r2
 80233c6:	fb00 5002 	mla	r0, r0, r2, r5
 80233ca:	fa1f fe81 	uxth.w	lr, r1
 80233ce:	eb03 0a00 	add.w	sl, r3, r0
 80233d2:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80233d6:	f813 9000 	ldrb.w	r9, [r3, r0]
 80233da:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80233de:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80233e2:	b29b      	uxth	r3, r3
 80233e4:	f1bc 0f00 	cmp.w	ip, #0
 80233e8:	f000 81af 	beq.w	802374a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80233ec:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80233f0:	940a      	str	r4, [sp, #40]	; 0x28
 80233f2:	eb0a 0b02 	add.w	fp, sl, r2
 80233f6:	fa1f fa8c 	uxth.w	sl, ip
 80233fa:	fb0a fe0e 	mul.w	lr, sl, lr
 80233fe:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8023402:	fa1f fa8a 	uxth.w	sl, sl
 8023406:	eba5 050e 	sub.w	r5, r5, lr
 802340a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802340e:	940b      	str	r4, [sp, #44]	; 0x2c
 8023410:	eba3 030a 	sub.w	r3, r3, sl
 8023414:	b2ad      	uxth	r5, r5
 8023416:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023418:	b29b      	uxth	r3, r3
 802341a:	fb08 f505 	mul.w	r5, r8, r5
 802341e:	fb09 5303 	mla	r3, r9, r3, r5
 8023422:	fb0a 3304 	mla	r3, sl, r4, r3
 8023426:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023428:	fb0e 3304 	mla	r3, lr, r4, r3
 802342c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023430:	2b00      	cmp	r3, #0
 8023432:	f000 8105 	beq.w	8023640 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8023436:	9c08      	ldr	r4, [sp, #32]
 8023438:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802343c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8023440:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8023444:	f000 8186 	beq.w	8023754 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8023448:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802344c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8023450:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023454:	fb09 f000 	mul.w	r0, r9, r0
 8023458:	fb0a fe0e 	mul.w	lr, sl, lr
 802345c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8023460:	f100 0b20 	add.w	fp, r0, #32
 8023464:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8023468:	44ce      	add	lr, r9
 802346a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802346e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023472:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8023476:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802347a:	ea4e 0909 	orr.w	r9, lr, r9
 802347e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023482:	8868      	ldrh	r0, [r5, #2]
 8023484:	d019      	beq.n	80234ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023486:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802348a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802348e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023492:	fb08 f800 	mul.w	r8, r8, r0
 8023496:	fb0a fe0e 	mul.w	lr, sl, lr
 802349a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 802349e:	f108 0b20 	add.w	fp, r8, #32
 80234a2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80234a6:	4486      	add	lr, r0
 80234a8:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80234ac:	0a00      	lsrs	r0, r0, #8
 80234ae:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80234b2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80234b6:	ea4e 0000 	orr.w	r0, lr, r0
 80234ba:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80234be:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80234c2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80234c6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80234ca:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80234ce:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80234d2:	ea4e 0909 	orr.w	r9, lr, r9
 80234d6:	ea4a 0000 	orr.w	r0, sl, r0
 80234da:	f1bc 0f00 	cmp.w	ip, #0
 80234de:	f000 813b 	beq.w	8023758 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 80234e2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80234e6:	3a01      	subs	r2, #1
 80234e8:	0052      	lsls	r2, r2, #1
 80234ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80234ec:	3202      	adds	r2, #2
 80234ee:	2cff      	cmp	r4, #255	; 0xff
 80234f0:	eb05 0e02 	add.w	lr, r5, r2
 80234f4:	5aaa      	ldrh	r2, [r5, r2]
 80234f6:	d018      	beq.n	802352a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80234f8:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80234fc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023500:	fb04 fa02 	mul.w	sl, r4, r2
 8023504:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8023508:	fb08 f805 	mul.w	r8, r8, r5
 802350c:	f10a 0520 	add.w	r5, sl, #32
 8023510:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8023514:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8023518:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802351c:	4442      	add	r2, r8
 802351e:	0a2d      	lsrs	r5, r5, #8
 8023520:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8023524:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023528:	432a      	orrs	r2, r5
 802352a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802352c:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8023530:	2cff      	cmp	r4, #255	; 0xff
 8023532:	d01a      	beq.n	802356a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8023534:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8023538:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802353c:	fb04 fa05 	mul.w	sl, r4, r5
 8023540:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8023544:	fb08 f80e 	mul.w	r8, r8, lr
 8023548:	f10a 0e20 	add.w	lr, sl, #32
 802354c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8023550:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8023554:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8023558:	4445      	add	r5, r8
 802355a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802355e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8023562:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8023566:	ea45 050e 	orr.w	r5, r5, lr
 802356a:	fb1c fe01 	smulbb	lr, ip, r1
 802356e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8023572:	f1cc 0810 	rsb	r8, ip, #16
 8023576:	eba8 0801 	sub.w	r8, r8, r1
 802357a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802357e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8023582:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8023586:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802358a:	4341      	muls	r1, r0
 802358c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023590:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023594:	ea4a 0202 	orr.w	r2, sl, r2
 8023598:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 802359c:	fb09 1108 	mla	r1, r9, r8, r1
 80235a0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80235a4:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80235a8:	fb0c 1102 	mla	r1, ip, r2, r1
 80235ac:	ea4b 0505 	orr.w	r5, fp, r5
 80235b0:	fb0e 1e05 	mla	lr, lr, r5, r1
 80235b4:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80235b8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80235bc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80235c0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80235c4:	ea42 0e0e 	orr.w	lr, r2, lr
 80235c8:	fa1f f28e 	uxth.w	r2, lr
 80235cc:	2bff      	cmp	r3, #255	; 0xff
 80235ce:	f000 80d7 	beq.w	8023780 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80235d2:	f8b7 c000 	ldrh.w	ip, [r7]
 80235d6:	43db      	mvns	r3, r3
 80235d8:	ea4f 202c 	mov.w	r0, ip, asr #8
 80235dc:	fa5f fe83 	uxtb.w	lr, r3
 80235e0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80235e4:	fb00 f00e 	mul.w	r0, r0, lr
 80235e8:	1c41      	adds	r1, r0, #1
 80235ea:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80235ee:	1210      	asrs	r0, r2, #8
 80235f0:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80235f4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80235f8:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 80235fc:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8023600:	496f      	ldr	r1, [pc, #444]	; (80237c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>)
 8023602:	fb05 f50e 	mul.w	r5, r5, lr
 8023606:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 802360a:	1c69      	adds	r1, r5, #1
 802360c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8023610:	10d1      	asrs	r1, r2, #3
 8023612:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023616:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 802361a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802361e:	b2db      	uxtb	r3, r3
 8023620:	00c9      	lsls	r1, r1, #3
 8023622:	fb03 f30e 	mul.w	r3, r3, lr
 8023626:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802362a:	4301      	orrs	r1, r0
 802362c:	1c58      	adds	r0, r3, #1
 802362e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023632:	00d3      	lsls	r3, r2, #3
 8023634:	b2db      	uxtb	r3, r3
 8023636:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802363a:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 802363e:	803b      	strh	r3, [r7, #0]
 8023640:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023642:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8023644:	4413      	add	r3, r2
 8023646:	9325      	str	r3, [sp, #148]	; 0x94
 8023648:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802364a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802364c:	441a      	add	r2, r3
 802364e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023650:	9226      	str	r2, [sp, #152]	; 0x98
 8023652:	3b01      	subs	r3, #1
 8023654:	3702      	adds	r7, #2
 8023656:	930f      	str	r3, [sp, #60]	; 0x3c
 8023658:	e693      	b.n	8023382 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802365a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802365c:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 802365e:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8023660:	4433      	add	r3, r6
 8023662:	9325      	str	r3, [sp, #148]	; 0x94
 8023664:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023666:	441c      	add	r4, r3
 8023668:	9b06      	ldr	r3, [sp, #24]
 802366a:	9426      	str	r4, [sp, #152]	; 0x98
 802366c:	3b01      	subs	r3, #1
 802366e:	9306      	str	r3, [sp, #24]
 8023670:	9b07      	ldr	r3, [sp, #28]
 8023672:	3302      	adds	r3, #2
 8023674:	9307      	str	r3, [sp, #28]
 8023676:	e662      	b.n	802333e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023678:	d028      	beq.n	80236cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 802367a:	9b06      	ldr	r3, [sp, #24]
 802367c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802367e:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8023680:	3b01      	subs	r3, #1
 8023682:	fb00 5003 	mla	r0, r0, r3, r5
 8023686:	1400      	asrs	r0, r0, #16
 8023688:	f53f ae76 	bmi.w	8023378 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802368c:	3901      	subs	r1, #1
 802368e:	4288      	cmp	r0, r1
 8023690:	f6bf ae72 	bge.w	8023378 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8023694:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023696:	9826      	ldr	r0, [sp, #152]	; 0x98
 8023698:	fb01 0303 	mla	r3, r1, r3, r0
 802369c:	141b      	asrs	r3, r3, #16
 802369e:	f53f ae6b 	bmi.w	8023378 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80236a2:	3a01      	subs	r2, #1
 80236a4:	4293      	cmp	r3, r2
 80236a6:	f6bf ae67 	bge.w	8023378 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80236aa:	9b06      	ldr	r3, [sp, #24]
 80236ac:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80236b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80236b2:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80236b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80236b8:	2b00      	cmp	r3, #0
 80236ba:	f300 8083 	bgt.w	80237c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 80236be:	9b06      	ldr	r3, [sp, #24]
 80236c0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80236c4:	9b07      	ldr	r3, [sp, #28]
 80236c6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80236ca:	9307      	str	r3, [sp, #28]
 80236cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80236ce:	2b00      	cmp	r3, #0
 80236d0:	f340 81e4 	ble.w	8023a9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 80236d4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80236d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80236dc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80236e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80236e2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80236e6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80236ea:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80236ee:	eef0 6a48 	vmov.f32	s13, s16
 80236f2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80236f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80236fa:	ee37 8a48 	vsub.f32	s16, s14, s16
 80236fe:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8023702:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023706:	eef0 6a68 	vmov.f32	s13, s17
 802370a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802370e:	ee18 2a10 	vmov	r2, s16
 8023712:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023716:	fb92 f3f3 	sdiv	r3, r2, r3
 802371a:	ee18 2a90 	vmov	r2, s17
 802371e:	9327      	str	r3, [sp, #156]	; 0x9c
 8023720:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023722:	fb92 f3f3 	sdiv	r3, r2, r3
 8023726:	9328      	str	r3, [sp, #160]	; 0xa0
 8023728:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802372a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802372c:	3b01      	subs	r3, #1
 802372e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023732:	930e      	str	r3, [sp, #56]	; 0x38
 8023734:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023736:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 802373a:	bf08      	it	eq
 802373c:	4613      	moveq	r3, r2
 802373e:	9306      	str	r3, [sp, #24]
 8023740:	eef0 8a67 	vmov.f32	s17, s15
 8023744:	eeb0 8a47 	vmov.f32	s16, s14
 8023748:	e5eb      	b.n	8023322 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802374a:	fb08 f505 	mul.w	r5, r8, r5
 802374e:	fb09 5303 	mla	r3, r9, r3, r5
 8023752:	e66b      	b.n	802342c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8023754:	4681      	mov	r9, r0
 8023756:	e692      	b.n	802347e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8023758:	f1c1 0210 	rsb	r2, r1, #16
 802375c:	4341      	muls	r1, r0
 802375e:	fb09 1902 	mla	r9, r9, r2, r1
 8023762:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8023766:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802376a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802376e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023772:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8023776:	ea42 0909 	orr.w	r9, r2, r9
 802377a:	fa1f f289 	uxth.w	r2, r9
 802377e:	e725      	b.n	80235cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8023780:	803a      	strh	r2, [r7, #0]
 8023782:	e75d      	b.n	8023640 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8023784:	f115 0e01 	adds.w	lr, r5, #1
 8023788:	f53f af5a 	bmi.w	8023640 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802378c:	4572      	cmp	r2, lr
 802378e:	f6ff af57 	blt.w	8023640 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8023792:	f110 0e01 	adds.w	lr, r0, #1
 8023796:	f53f af53 	bmi.w	8023640 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802379a:	4573      	cmp	r3, lr
 802379c:	f6ff af50 	blt.w	8023640 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80237a0:	b21b      	sxth	r3, r3
 80237a2:	b212      	sxth	r2, r2
 80237a4:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80237a8:	e9cd 5002 	strd	r5, r0, [sp, #8]
 80237ac:	9301      	str	r3, [sp, #4]
 80237ae:	9200      	str	r2, [sp, #0]
 80237b0:	4639      	mov	r1, r7
 80237b2:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80237b6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80237b8:	f7ff fbf2 	bl	8022fa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80237bc:	e740      	b.n	8023640 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80237be:	bf00      	nop
 80237c0:	fffff800 	.word	0xfffff800
 80237c4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80237c6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80237ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80237cc:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80237d0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80237d2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80237d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80237d8:	141f      	asrs	r7, r3, #16
 80237da:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80237dc:	141b      	asrs	r3, r3, #16
 80237de:	fb01 3707 	mla	r7, r1, r7, r3
 80237e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80237e4:	fa1f fc82 	uxth.w	ip, r2
 80237e8:	eb03 0a07 	add.w	sl, r3, r7
 80237ec:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80237f0:	f813 9007 	ldrb.w	r9, [r3, r7]
 80237f4:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80237f8:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80237fc:	b29b      	uxth	r3, r3
 80237fe:	2d00      	cmp	r5, #0
 8023800:	f000 8131 	beq.w	8023a66 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x796>
 8023804:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8023808:	940c      	str	r4, [sp, #48]	; 0x30
 802380a:	eb0a 0b01 	add.w	fp, sl, r1
 802380e:	fa1f fa85 	uxth.w	sl, r5
 8023812:	fb0a fc0c 	mul.w	ip, sl, ip
 8023816:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 802381a:	fa1f fa8a 	uxth.w	sl, sl
 802381e:	eba0 000c 	sub.w	r0, r0, ip
 8023822:	eba3 030a 	sub.w	r3, r3, sl
 8023826:	b280      	uxth	r0, r0
 8023828:	fb08 f000 	mul.w	r0, r8, r0
 802382c:	b29b      	uxth	r3, r3
 802382e:	fb09 0303 	mla	r3, r9, r3, r0
 8023832:	980c      	ldr	r0, [sp, #48]	; 0x30
 8023834:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8023838:	940d      	str	r4, [sp, #52]	; 0x34
 802383a:	fb0a 3300 	mla	r3, sl, r0, r3
 802383e:	fb0c 3304 	mla	r3, ip, r4, r3
 8023842:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023846:	2b00      	cmp	r3, #0
 8023848:	f000 80ff 	beq.w	8023a4a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77a>
 802384c:	9808      	ldr	r0, [sp, #32]
 802384e:	9c08      	ldr	r4, [sp, #32]
 8023850:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023854:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8023858:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802385c:	f000 8108 	beq.w	8023a70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a0>
 8023860:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8023864:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8023868:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802386c:	fb09 f707 	mul.w	r7, r9, r7
 8023870:	fb0a fc0c 	mul.w	ip, sl, ip
 8023874:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8023878:	f107 0b20 	add.w	fp, r7, #32
 802387c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8023880:	44cc      	add	ip, r9
 8023882:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8023886:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802388a:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802388e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8023892:	ea4c 0909 	orr.w	r9, ip, r9
 8023896:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802389a:	8847      	ldrh	r7, [r0, #2]
 802389c:	d019      	beq.n	80238d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x602>
 802389e:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80238a2:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80238a6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80238aa:	fb08 f807 	mul.w	r8, r8, r7
 80238ae:	fb0a fc0c 	mul.w	ip, sl, ip
 80238b2:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80238b6:	f108 0b20 	add.w	fp, r8, #32
 80238ba:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80238be:	44bc      	add	ip, r7
 80238c0:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80238c4:	0a3f      	lsrs	r7, r7, #8
 80238c6:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80238ca:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80238ce:	ea4c 0707 	orr.w	r7, ip, r7
 80238d2:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80238d6:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80238da:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80238de:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80238e2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80238e6:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80238ea:	ea4c 0909 	orr.w	r9, ip, r9
 80238ee:	ea4a 0707 	orr.w	r7, sl, r7
 80238f2:	2d00      	cmp	r5, #0
 80238f4:	f000 80be 	beq.w	8023a74 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 80238f8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80238fc:	3901      	subs	r1, #1
 80238fe:	0049      	lsls	r1, r1, #1
 8023900:	3102      	adds	r1, #2
 8023902:	eb00 0c01 	add.w	ip, r0, r1
 8023906:	5a41      	ldrh	r1, [r0, r1]
 8023908:	980c      	ldr	r0, [sp, #48]	; 0x30
 802390a:	28ff      	cmp	r0, #255	; 0xff
 802390c:	d019      	beq.n	8023942 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x672>
 802390e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023910:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8023914:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023918:	fb04 fa01 	mul.w	sl, r4, r1
 802391c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8023920:	fb08 f800 	mul.w	r8, r8, r0
 8023924:	f10a 0020 	add.w	r0, sl, #32
 8023928:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802392c:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8023930:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8023934:	4441      	add	r1, r8
 8023936:	0a00      	lsrs	r0, r0, #8
 8023938:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802393c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023940:	4301      	orrs	r1, r0
 8023942:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023944:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8023948:	2cff      	cmp	r4, #255	; 0xff
 802394a:	d01a      	beq.n	8023982 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b2>
 802394c:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8023950:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023954:	fb04 fa00 	mul.w	sl, r4, r0
 8023958:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802395c:	fb08 f80c 	mul.w	r8, r8, ip
 8023960:	f10a 0c20 	add.w	ip, sl, #32
 8023964:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8023968:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802396c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8023970:	4440      	add	r0, r8
 8023972:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023976:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 802397a:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802397e:	ea40 000c 	orr.w	r0, r0, ip
 8023982:	fb15 fc02 	smulbb	ip, r5, r2
 8023986:	ea4f 0cec 	mov.w	ip, ip, asr #3
 802398a:	f1c5 0810 	rsb	r8, r5, #16
 802398e:	eba8 0802 	sub.w	r8, r8, r2
 8023992:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8023996:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 802399a:	437a      	muls	r2, r7
 802399c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80239a0:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80239a4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80239a8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80239ac:	fb09 2208 	mla	r2, r9, r8, r2
 80239b0:	ea4a 0101 	orr.w	r1, sl, r1
 80239b4:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80239b8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80239bc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80239c0:	fb05 2201 	mla	r2, r5, r1, r2
 80239c4:	ea4b 0000 	orr.w	r0, fp, r0
 80239c8:	fb0c 2200 	mla	r2, ip, r0, r2
 80239cc:	0d57      	lsrs	r7, r2, #21
 80239ce:	0952      	lsrs	r2, r2, #5
 80239d0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80239d4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80239d8:	433a      	orrs	r2, r7
 80239da:	2bff      	cmp	r3, #255	; 0xff
 80239dc:	b292      	uxth	r2, r2
 80239de:	d05a      	beq.n	8023a96 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c6>
 80239e0:	f8be 7000 	ldrh.w	r7, [lr]
 80239e4:	4c30      	ldr	r4, [pc, #192]	; (8023aa8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 80239e6:	43db      	mvns	r3, r3
 80239e8:	1238      	asrs	r0, r7, #8
 80239ea:	fa5f fc83 	uxtb.w	ip, r3
 80239ee:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80239f2:	10fd      	asrs	r5, r7, #3
 80239f4:	fb00 f00c 	mul.w	r0, r0, ip
 80239f8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80239fc:	fb05 f10c 	mul.w	r1, r5, ip
 8023a00:	1c45      	adds	r5, r0, #1
 8023a02:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023a06:	1215      	asrs	r5, r2, #8
 8023a08:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023a0c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023a10:	1c4d      	adds	r5, r1, #1
 8023a12:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8023a16:	10d1      	asrs	r1, r2, #3
 8023a18:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023a1c:	00fb      	lsls	r3, r7, #3
 8023a1e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8023a22:	b2db      	uxtb	r3, r3
 8023a24:	00c9      	lsls	r1, r1, #3
 8023a26:	fb03 f30c 	mul.w	r3, r3, ip
 8023a2a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023a2e:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8023a32:	4308      	orrs	r0, r1
 8023a34:	00d2      	lsls	r2, r2, #3
 8023a36:	1c59      	adds	r1, r3, #1
 8023a38:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8023a3c:	b2d1      	uxtb	r1, r2
 8023a3e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8023a42:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 8023a46:	f8ae 0000 	strh.w	r0, [lr]
 8023a4a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023a4c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8023a4e:	4413      	add	r3, r2
 8023a50:	9325      	str	r3, [sp, #148]	; 0x94
 8023a52:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8023a54:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023a56:	441a      	add	r2, r3
 8023a58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023a5a:	9226      	str	r2, [sp, #152]	; 0x98
 8023a5c:	3b01      	subs	r3, #1
 8023a5e:	f10e 0e02 	add.w	lr, lr, #2
 8023a62:	930f      	str	r3, [sp, #60]	; 0x3c
 8023a64:	e627      	b.n	80236b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8023a66:	fb08 f000 	mul.w	r0, r8, r0
 8023a6a:	fb09 0303 	mla	r3, r9, r3, r0
 8023a6e:	e6e8      	b.n	8023842 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x572>
 8023a70:	46b9      	mov	r9, r7
 8023a72:	e710      	b.n	8023896 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8023a74:	f1c2 0110 	rsb	r1, r2, #16
 8023a78:	437a      	muls	r2, r7
 8023a7a:	fb09 2901 	mla	r9, r9, r1, r2
 8023a7e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8023a82:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8023a86:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8023a8a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023a8e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023a92:	4302      	orrs	r2, r0
 8023a94:	e7a1      	b.n	80239da <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 8023a96:	f8ae 2000 	strh.w	r2, [lr]
 8023a9a:	e7d6      	b.n	8023a4a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77a>
 8023a9c:	b013      	add	sp, #76	; 0x4c
 8023a9e:	ecbd 8b08 	vpop	{d8-d11}
 8023aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023aa6:	bf00      	nop
 8023aa8:	fffff800 	.word	0xfffff800

08023aac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8023aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023ab0:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 8023ab4:	fb0c 4e03 	mla	lr, ip, r3, r4
 8023ab8:	f1bc 0f00 	cmp.w	ip, #0
 8023abc:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8023ac0:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8023ac4:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8023ac8:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8023acc:	8808      	ldrh	r0, [r1, #0]
 8023ace:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 8023ad2:	db2f      	blt.n	8023b34 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8023ad4:	45e2      	cmp	sl, ip
 8023ad6:	dd2d      	ble.n	8023b34 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8023ad8:	2c00      	cmp	r4, #0
 8023ada:	db29      	blt.n	8023b30 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8023adc:	42a3      	cmp	r3, r4
 8023ade:	dd27      	ble.n	8023b30 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8023ae0:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 8023ae4:	1c62      	adds	r2, r4, #1
 8023ae6:	d428      	bmi.n	8023b3a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8023ae8:	4293      	cmp	r3, r2
 8023aea:	dd26      	ble.n	8023b3a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8023aec:	b32f      	cbz	r7, 8023b3a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8023aee:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 8023af2:	f11c 0c01 	adds.w	ip, ip, #1
 8023af6:	d424      	bmi.n	8023b42 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8023af8:	45e2      	cmp	sl, ip
 8023afa:	dd22      	ble.n	8023b42 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8023afc:	2e00      	cmp	r6, #0
 8023afe:	f000 809c 	beq.w	8023c3a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18e>
 8023b02:	2c00      	cmp	r4, #0
 8023b04:	db1b      	blt.n	8023b3e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8023b06:	42a3      	cmp	r3, r4
 8023b08:	dd19      	ble.n	8023b3e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8023b0a:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 8023b0e:	3401      	adds	r4, #1
 8023b10:	d41a      	bmi.n	8023b48 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8023b12:	42a3      	cmp	r3, r4
 8023b14:	dd18      	ble.n	8023b48 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8023b16:	b1cf      	cbz	r7, 8023b4c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 8023b18:	3301      	adds	r3, #1
 8023b1a:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 8023b1e:	2f0f      	cmp	r7, #15
 8023b20:	d915      	bls.n	8023b4e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 8023b22:	4b49      	ldr	r3, [pc, #292]	; (8023c48 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 8023b24:	4a49      	ldr	r2, [pc, #292]	; (8023c4c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 8023b26:	484a      	ldr	r0, [pc, #296]	; (8023c50 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 8023b28:	f240 11ef 	movw	r1, #495	; 0x1ef
 8023b2c:	f003 f87a 	bl	8026c24 <__assert_func>
 8023b30:	4681      	mov	r9, r0
 8023b32:	e7d7      	b.n	8023ae4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 8023b34:	4686      	mov	lr, r0
 8023b36:	4681      	mov	r9, r0
 8023b38:	e7db      	b.n	8023af2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8023b3a:	4686      	mov	lr, r0
 8023b3c:	e7d9      	b.n	8023af2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8023b3e:	4684      	mov	ip, r0
 8023b40:	e7e5      	b.n	8023b0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 8023b42:	4603      	mov	r3, r0
 8023b44:	4684      	mov	ip, r0
 8023b46:	e7ea      	b.n	8023b1e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8023b48:	4603      	mov	r3, r0
 8023b4a:	e7e8      	b.n	8023b1e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8023b4c:	4603      	mov	r3, r0
 8023b4e:	2e0f      	cmp	r6, #15
 8023b50:	d8e7      	bhi.n	8023b22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8023b52:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8023b56:	fb17 f806 	smulbb	r8, r7, r6
 8023b5a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8023b5e:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 8023b62:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8023b66:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8023b6a:	ea44 0909 	orr.w	r9, r4, r9
 8023b6e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023b72:	f1c6 0410 	rsb	r4, r6, #16
 8023b76:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023b7a:	1be4      	subs	r4, r4, r7
 8023b7c:	041a      	lsls	r2, r3, #16
 8023b7e:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 8023b82:	ea4a 0e0e 	orr.w	lr, sl, lr
 8023b86:	fb07 fe0e 	mul.w	lr, r7, lr
 8023b8a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023b8e:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8023b92:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023b96:	fb04 e409 	mla	r4, r4, r9, lr
 8023b9a:	4313      	orrs	r3, r2
 8023b9c:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8023ba0:	fb08 4303 	mla	r3, r8, r3, r4
 8023ba4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023ba8:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 8023bac:	4322      	orrs	r2, r4
 8023bae:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8023bb2:	fb06 3202 	mla	r2, r6, r2, r3
 8023bb6:	0d53      	lsrs	r3, r2, #21
 8023bb8:	0952      	lsrs	r2, r2, #5
 8023bba:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023bbe:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023bc2:	431a      	orrs	r2, r3
 8023bc4:	b293      	uxth	r3, r2
 8023bc6:	b2af      	uxth	r7, r5
 8023bc8:	1202      	asrs	r2, r0, #8
 8023bca:	43ed      	mvns	r5, r5
 8023bcc:	b2ed      	uxtb	r5, r5
 8023bce:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8023bd2:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8023bd6:	fb12 f205 	smulbb	r2, r2, r5
 8023bda:	10c6      	asrs	r6, r0, #3
 8023bdc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023be0:	fb0c 2c07 	mla	ip, ip, r7, r2
 8023be4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8023be8:	10da      	asrs	r2, r3, #3
 8023bea:	fb16 f605 	smulbb	r6, r6, r5
 8023bee:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023bf2:	fb02 6207 	mla	r2, r2, r7, r6
 8023bf6:	b296      	uxth	r6, r2
 8023bf8:	00c2      	lsls	r2, r0, #3
 8023bfa:	00dc      	lsls	r4, r3, #3
 8023bfc:	b2d2      	uxtb	r2, r2
 8023bfe:	b2e4      	uxtb	r4, r4
 8023c00:	fb12 f205 	smulbb	r2, r2, r5
 8023c04:	fb04 2207 	mla	r2, r4, r7, r2
 8023c08:	fa1f fc8c 	uxth.w	ip, ip
 8023c0c:	b292      	uxth	r2, r2
 8023c0e:	f10c 0301 	add.w	r3, ip, #1
 8023c12:	1c50      	adds	r0, r2, #1
 8023c14:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8023c18:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8023c1c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023c20:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8023c24:	4313      	orrs	r3, r2
 8023c26:	1c72      	adds	r2, r6, #1
 8023c28:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8023c2c:	0952      	lsrs	r2, r2, #5
 8023c2e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023c32:	4313      	orrs	r3, r2
 8023c34:	800b      	strh	r3, [r1, #0]
 8023c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023c3a:	2f0f      	cmp	r7, #15
 8023c3c:	f63f af71 	bhi.w	8023b22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8023c40:	4603      	mov	r3, r0
 8023c42:	4684      	mov	ip, r0
 8023c44:	e785      	b.n	8023b52 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 8023c46:	bf00      	nop
 8023c48:	0802c82a 	.word	0x0802c82a
 8023c4c:	0802ce96 	.word	0x0802ce96
 8023c50:	0802c913 	.word	0x0802c913

08023c54 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c58:	ed2d 8b08 	vpush	{d8-d11}
 8023c5c:	b093      	sub	sp, #76	; 0x4c
 8023c5e:	461d      	mov	r5, r3
 8023c60:	9210      	str	r2, [sp, #64]	; 0x40
 8023c62:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023c64:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 8023c68:	920b      	str	r2, [sp, #44]	; 0x2c
 8023c6a:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 8023c6e:	910a      	str	r1, [sp, #40]	; 0x28
 8023c70:	6859      	ldr	r1, [r3, #4]
 8023c72:	681b      	ldr	r3, [r3, #0]
 8023c74:	9011      	str	r0, [sp, #68]	; 0x44
 8023c76:	fb01 2707 	mla	r7, r1, r7, r2
 8023c7a:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8023c7e:	9307      	str	r3, [sp, #28]
 8023c80:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023c82:	681b      	ldr	r3, [r3, #0]
 8023c84:	9309      	str	r3, [sp, #36]	; 0x24
 8023c86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023c88:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8023c8c:	43db      	mvns	r3, r3
 8023c8e:	b2db      	uxtb	r3, r3
 8023c90:	eeb0 aa40 	vmov.f32	s20, s0
 8023c94:	eef0 9a60 	vmov.f32	s19, s1
 8023c98:	eeb0 9a41 	vmov.f32	s18, s2
 8023c9c:	eeb0 8a62 	vmov.f32	s16, s5
 8023ca0:	eef0 8a43 	vmov.f32	s17, s6
 8023ca4:	eef0 ba44 	vmov.f32	s23, s8
 8023ca8:	eeb0 ba64 	vmov.f32	s22, s9
 8023cac:	eef0 aa45 	vmov.f32	s21, s10
 8023cb0:	9308      	str	r3, [sp, #32]
 8023cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023cb4:	2b00      	cmp	r3, #0
 8023cb6:	dc03      	bgt.n	8023cc0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8023cb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023cba:	2b00      	cmp	r3, #0
 8023cbc:	f340 8203 	ble.w	80240c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 8023cc0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023cc2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023cc6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023cca:	1e48      	subs	r0, r1, #1
 8023ccc:	f102 3cff 	add.w	ip, r2, #4294967295
 8023cd0:	2d00      	cmp	r5, #0
 8023cd2:	f340 80da 	ble.w	8023e8a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8023cd6:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8023cda:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023cde:	d406      	bmi.n	8023cee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8023ce0:	4586      	cmp	lr, r0
 8023ce2:	da04      	bge.n	8023cee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8023ce4:	2b00      	cmp	r3, #0
 8023ce6:	db02      	blt.n	8023cee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8023ce8:	4563      	cmp	r3, ip
 8023cea:	f2c0 80cf 	blt.w	8023e8c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8023cee:	f11e 0e01 	adds.w	lr, lr, #1
 8023cf2:	f100 80c1 	bmi.w	8023e78 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8023cf6:	4571      	cmp	r1, lr
 8023cf8:	f2c0 80be 	blt.w	8023e78 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8023cfc:	3301      	adds	r3, #1
 8023cfe:	f100 80bb 	bmi.w	8023e78 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8023d02:	429a      	cmp	r2, r3
 8023d04:	f2c0 80b8 	blt.w	8023e78 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8023d08:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8023d0c:	46a9      	mov	r9, r5
 8023d0e:	f1b9 0f00 	cmp.w	r9, #0
 8023d12:	f340 80d8 	ble.w	8023ec6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8023d16:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023d18:	1421      	asrs	r1, r4, #16
 8023d1a:	ea4f 4026 	mov.w	r0, r6, asr #16
 8023d1e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023d22:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8023d26:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8023d2a:	f100 8111 	bmi.w	8023f50 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8023d2e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8023d32:	4551      	cmp	r1, sl
 8023d34:	f280 810c 	bge.w	8023f50 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8023d38:	2800      	cmp	r0, #0
 8023d3a:	f2c0 8109 	blt.w	8023f50 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8023d3e:	f103 3aff 	add.w	sl, r3, #4294967295
 8023d42:	4550      	cmp	r0, sl
 8023d44:	f280 8104 	bge.w	8023f50 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8023d48:	fa0f f38e 	sxth.w	r3, lr
 8023d4c:	fb00 1103 	mla	r1, r0, r3, r1
 8023d50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023d52:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8023d56:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8023d5a:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8023d5e:	f1bc 0f00 	cmp.w	ip, #0
 8023d62:	d007      	beq.n	8023d74 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8023d64:	005b      	lsls	r3, r3, #1
 8023d66:	eb0a 0003 	add.w	r0, sl, r3
 8023d6a:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8023d6e:	930c      	str	r3, [sp, #48]	; 0x30
 8023d70:	8843      	ldrh	r3, [r0, #2]
 8023d72:	930d      	str	r3, [sp, #52]	; 0x34
 8023d74:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8023d78:	fb12 f30c 	smulbb	r3, r2, ip
 8023d7c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023d80:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8023d84:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023d88:	10db      	asrs	r3, r3, #3
 8023d8a:	ea40 000e 	orr.w	r0, r0, lr
 8023d8e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023d92:	f1cc 0e10 	rsb	lr, ip, #16
 8023d96:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023d9a:	ebae 0e02 	sub.w	lr, lr, r2
 8023d9e:	ea4a 0101 	orr.w	r1, sl, r1
 8023da2:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8023da6:	4351      	muls	r1, r2
 8023da8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023daa:	9f08      	ldr	r7, [sp, #32]
 8023dac:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8023db0:	fb0e 1e00 	mla	lr, lr, r0, r1
 8023db4:	0410      	lsls	r0, r2, #16
 8023db6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023dba:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023dbe:	4310      	orrs	r0, r2
 8023dc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023dc2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023dc4:	0412      	lsls	r2, r2, #16
 8023dc6:	fb03 e000 	mla	r0, r3, r0, lr
 8023dca:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023dce:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8023dd2:	ea42 020e 	orr.w	r2, r2, lr
 8023dd6:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8023dda:	fb03 0302 	mla	r3, r3, r2, r0
 8023dde:	0d5a      	lsrs	r2, r3, #21
 8023de0:	095b      	lsrs	r3, r3, #5
 8023de2:	f8b8 c000 	ldrh.w	ip, [r8]
 8023de6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023dea:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023dee:	4313      	orrs	r3, r2
 8023df0:	b29b      	uxth	r3, r3
 8023df2:	ea4f 212c 	mov.w	r1, ip, asr #8
 8023df6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8023dfa:	1218      	asrs	r0, r3, #8
 8023dfc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023e00:	fb11 f107 	smulbb	r1, r1, r7
 8023e04:	ea4f 0eec 	mov.w	lr, ip, asr #3
 8023e08:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023e0c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8023e10:	fb00 1002 	mla	r0, r0, r2, r1
 8023e14:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8023e18:	10d9      	asrs	r1, r3, #3
 8023e1a:	fa5f fc8c 	uxtb.w	ip, ip
 8023e1e:	00db      	lsls	r3, r3, #3
 8023e20:	b2db      	uxtb	r3, r3
 8023e22:	fb1c fc07 	smulbb	ip, ip, r7
 8023e26:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023e2a:	fb1e fe07 	smulbb	lr, lr, r7
 8023e2e:	fb01 e102 	mla	r1, r1, r2, lr
 8023e32:	fb03 c202 	mla	r2, r3, r2, ip
 8023e36:	b280      	uxth	r0, r0
 8023e38:	b292      	uxth	r2, r2
 8023e3a:	1c43      	adds	r3, r0, #1
 8023e3c:	f102 0c01 	add.w	ip, r2, #1
 8023e40:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023e44:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8023e48:	b289      	uxth	r1, r1
 8023e4a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023e4e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8023e52:	4313      	orrs	r3, r2
 8023e54:	1c4a      	adds	r2, r1, #1
 8023e56:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023e5a:	0949      	lsrs	r1, r1, #5
 8023e5c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023e60:	430b      	orrs	r3, r1
 8023e62:	f8a8 3000 	strh.w	r3, [r8]
 8023e66:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023e68:	441c      	add	r4, r3
 8023e6a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023e6c:	f108 0802 	add.w	r8, r8, #2
 8023e70:	441e      	add	r6, r3
 8023e72:	f109 39ff 	add.w	r9, r9, #4294967295
 8023e76:	e74a      	b.n	8023d0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8023e78:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023e7a:	441c      	add	r4, r3
 8023e7c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023e7e:	441e      	add	r6, r3
 8023e80:	9b07      	ldr	r3, [sp, #28]
 8023e82:	3302      	adds	r3, #2
 8023e84:	3d01      	subs	r5, #1
 8023e86:	9307      	str	r3, [sp, #28]
 8023e88:	e722      	b.n	8023cd0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023e8a:	d022      	beq.n	8023ed2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8023e8c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8023e8e:	1e6b      	subs	r3, r5, #1
 8023e90:	fb00 4003 	mla	r0, r0, r3, r4
 8023e94:	1400      	asrs	r0, r0, #16
 8023e96:	f53f af37 	bmi.w	8023d08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8023e9a:	3901      	subs	r1, #1
 8023e9c:	4288      	cmp	r0, r1
 8023e9e:	f6bf af33 	bge.w	8023d08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8023ea2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023ea4:	fb01 6303 	mla	r3, r1, r3, r6
 8023ea8:	141b      	asrs	r3, r3, #16
 8023eaa:	f53f af2d 	bmi.w	8023d08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8023eae:	3a01      	subs	r2, #1
 8023eb0:	4293      	cmp	r3, r2
 8023eb2:	f6bf af29 	bge.w	8023d08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8023eb6:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8023eba:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8023ebe:	46a8      	mov	r8, r5
 8023ec0:	f1b8 0f00 	cmp.w	r8, #0
 8023ec4:	dc5e      	bgt.n	8023f84 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8023ec6:	9b07      	ldr	r3, [sp, #28]
 8023ec8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8023ecc:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8023ed0:	9307      	str	r3, [sp, #28]
 8023ed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023ed4:	2b00      	cmp	r3, #0
 8023ed6:	f340 80f6 	ble.w	80240c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 8023eda:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023ede:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023ee2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023ee6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023ee8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023eec:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023ef0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023ef4:	eef0 6a48 	vmov.f32	s13, s16
 8023ef8:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023efc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023f00:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023f04:	ee16 4a90 	vmov	r4, s13
 8023f08:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023f0c:	eef0 6a68 	vmov.f32	s13, s17
 8023f10:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023f14:	ee18 2a10 	vmov	r2, s16
 8023f18:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023f1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023f20:	ee18 2a90 	vmov	r2, s17
 8023f24:	9327      	str	r3, [sp, #156]	; 0x9c
 8023f26:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023f28:	fb92 f3f3 	sdiv	r3, r2, r3
 8023f2c:	9328      	str	r3, [sp, #160]	; 0xa0
 8023f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023f30:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023f32:	3b01      	subs	r3, #1
 8023f34:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023f38:	930a      	str	r3, [sp, #40]	; 0x28
 8023f3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023f3c:	ee16 6a90 	vmov	r6, s13
 8023f40:	bf14      	ite	ne
 8023f42:	461d      	movne	r5, r3
 8023f44:	4615      	moveq	r5, r2
 8023f46:	eef0 8a67 	vmov.f32	s17, s15
 8023f4a:	eeb0 8a47 	vmov.f32	s16, s14
 8023f4e:	e6b0      	b.n	8023cb2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8023f50:	f111 0a01 	adds.w	sl, r1, #1
 8023f54:	d487      	bmi.n	8023e66 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8023f56:	45d6      	cmp	lr, sl
 8023f58:	db85      	blt.n	8023e66 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8023f5a:	f110 0a01 	adds.w	sl, r0, #1
 8023f5e:	d482      	bmi.n	8023e66 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8023f60:	4553      	cmp	r3, sl
 8023f62:	db80      	blt.n	8023e66 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8023f64:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8023f66:	9101      	str	r1, [sp, #4]
 8023f68:	b21b      	sxth	r3, r3
 8023f6a:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8023f6e:	9300      	str	r3, [sp, #0]
 8023f70:	e9cd c704 	strd	ip, r7, [sp, #16]
 8023f74:	fa0f f38e 	sxth.w	r3, lr
 8023f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023f7a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8023f7c:	4641      	mov	r1, r8
 8023f7e:	f7ff fd95 	bl	8023aac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8023f82:	e770      	b.n	8023e66 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8023f84:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023f86:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023f88:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023f8c:	1430      	asrs	r0, r6, #16
 8023f8e:	1423      	asrs	r3, r4, #16
 8023f90:	fb01 3000 	mla	r0, r1, r0, r3
 8023f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023f96:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8023f9a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8023f9e:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8023fa2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023fa6:	8858      	ldrh	r0, [r3, #2]
 8023fa8:	f1be 0f00 	cmp.w	lr, #0
 8023fac:	d00b      	beq.n	8023fc6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8023fae:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8023fb2:	3901      	subs	r1, #1
 8023fb4:	0049      	lsls	r1, r1, #1
 8023fb6:	3102      	adds	r1, #2
 8023fb8:	eb03 0b01 	add.w	fp, r3, r1
 8023fbc:	5a5b      	ldrh	r3, [r3, r1]
 8023fbe:	930e      	str	r3, [sp, #56]	; 0x38
 8023fc0:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8023fc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8023fc6:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8023fca:	fb12 f30e 	smulbb	r3, r2, lr
 8023fce:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8023fd2:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8023fd6:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8023fda:	10db      	asrs	r3, r3, #3
 8023fdc:	ea41 010c 	orr.w	r1, r1, ip
 8023fe0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023fe4:	f1ce 0c10 	rsb	ip, lr, #16
 8023fe8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023fec:	ebac 0c02 	sub.w	ip, ip, r2
 8023ff0:	ea4b 0000 	orr.w	r0, fp, r0
 8023ff4:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8023ff8:	4350      	muls	r0, r2
 8023ffa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023ffc:	9f08      	ldr	r7, [sp, #32]
 8023ffe:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8024002:	fb0c 0c01 	mla	ip, ip, r1, r0
 8024006:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802400a:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 802400e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024010:	980e      	ldr	r0, [sp, #56]	; 0x38
 8024012:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024016:	0412      	lsls	r2, r2, #16
 8024018:	ea4b 0101 	orr.w	r1, fp, r1
 802401c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024020:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024024:	fb03 c101 	mla	r1, r3, r1, ip
 8024028:	4302      	orrs	r2, r0
 802402a:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 802402e:	fb03 1202 	mla	r2, r3, r2, r1
 8024032:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8024036:	0952      	lsrs	r2, r2, #5
 8024038:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 802403c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8024040:	f8b9 2000 	ldrh.w	r2, [r9]
 8024044:	ea4b 0303 	orr.w	r3, fp, r3
 8024048:	b29b      	uxth	r3, r3
 802404a:	1211      	asrs	r1, r2, #8
 802404c:	1218      	asrs	r0, r3, #8
 802404e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024052:	fb11 f107 	smulbb	r1, r1, r7
 8024056:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 802405a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802405e:	00d2      	lsls	r2, r2, #3
 8024060:	fb00 100a 	mla	r0, r0, sl, r1
 8024064:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8024068:	10d9      	asrs	r1, r3, #3
 802406a:	b2d2      	uxtb	r2, r2
 802406c:	00db      	lsls	r3, r3, #3
 802406e:	fb1c fc07 	smulbb	ip, ip, r7
 8024072:	fb12 f207 	smulbb	r2, r2, r7
 8024076:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802407a:	b2db      	uxtb	r3, r3
 802407c:	b280      	uxth	r0, r0
 802407e:	fb01 c10a 	mla	r1, r1, sl, ip
 8024082:	fb03 230a 	mla	r3, r3, sl, r2
 8024086:	b29b      	uxth	r3, r3
 8024088:	b289      	uxth	r1, r1
 802408a:	1c42      	adds	r2, r0, #1
 802408c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024090:	f101 0c01 	add.w	ip, r1, #1
 8024094:	1c5a      	adds	r2, r3, #1
 8024096:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802409a:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802409e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80240a0:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80240a4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80240a8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80240ac:	4310      	orrs	r0, r2
 80240ae:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80240b2:	441c      	add	r4, r3
 80240b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80240b6:	ea40 000c 	orr.w	r0, r0, ip
 80240ba:	f829 0b02 	strh.w	r0, [r9], #2
 80240be:	441e      	add	r6, r3
 80240c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80240c4:	e6fc      	b.n	8023ec0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80240c6:	b013      	add	sp, #76	; 0x4c
 80240c8:	ecbd 8b08 	vpop	{d8-d11}
 80240cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080240d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 80240d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80240d4:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 80240d8:	fb06 5c03 	mla	ip, r6, r3, r5
 80240dc:	2e00      	cmp	r6, #0
 80240de:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 80240e2:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80240e6:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80240ea:	8808      	ldrh	r0, [r1, #0]
 80240ec:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 80240f0:	db2e      	blt.n	8024150 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 80240f2:	45b0      	cmp	r8, r6
 80240f4:	dd2c      	ble.n	8024150 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 80240f6:	2d00      	cmp	r5, #0
 80240f8:	db28      	blt.n	802414c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 80240fa:	42ab      	cmp	r3, r5
 80240fc:	dd26      	ble.n	802414c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 80240fe:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 8024102:	1c6a      	adds	r2, r5, #1
 8024104:	d427      	bmi.n	8024156 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8024106:	4293      	cmp	r3, r2
 8024108:	dd25      	ble.n	8024156 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 802410a:	b324      	cbz	r4, 8024156 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 802410c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8024110:	3601      	adds	r6, #1
 8024112:	d424      	bmi.n	802415e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8024114:	45b0      	cmp	r8, r6
 8024116:	dd22      	ble.n	802415e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8024118:	b31f      	cbz	r7, 8024162 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 802411a:	2d00      	cmp	r5, #0
 802411c:	db1d      	blt.n	802415a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 802411e:	42ab      	cmp	r3, r5
 8024120:	dd1b      	ble.n	802415a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8024122:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 8024126:	3501      	adds	r5, #1
 8024128:	d405      	bmi.n	8024136 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 802412a:	42ab      	cmp	r3, r5
 802412c:	dd03      	ble.n	8024136 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 802412e:	b124      	cbz	r4, 802413a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 8024130:	3301      	adds	r3, #1
 8024132:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 8024136:	2c0f      	cmp	r4, #15
 8024138:	d801      	bhi.n	802413e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802413a:	2f0f      	cmp	r7, #15
 802413c:	d914      	bls.n	8024168 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 802413e:	4b27      	ldr	r3, [pc, #156]	; (80241dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 8024140:	4a27      	ldr	r2, [pc, #156]	; (80241e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 8024142:	4828      	ldr	r0, [pc, #160]	; (80241e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 8024144:	f240 11ef 	movw	r1, #495	; 0x1ef
 8024148:	f002 fd6c 	bl	8026c24 <__assert_func>
 802414c:	4684      	mov	ip, r0
 802414e:	e7d8      	b.n	8024102 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 8024150:	4602      	mov	r2, r0
 8024152:	4684      	mov	ip, r0
 8024154:	e7dc      	b.n	8024110 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8024156:	4602      	mov	r2, r0
 8024158:	e7da      	b.n	8024110 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 802415a:	4606      	mov	r6, r0
 802415c:	e7e3      	b.n	8024126 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 802415e:	4606      	mov	r6, r0
 8024160:	e7e9      	b.n	8024136 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8024162:	2c0f      	cmp	r4, #15
 8024164:	d8eb      	bhi.n	802413e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8024166:	4606      	mov	r6, r0
 8024168:	ea4f 450c 	mov.w	r5, ip, lsl #16
 802416c:	fb14 f307 	smulbb	r3, r4, r7
 8024170:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8024174:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8024178:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802417c:	10db      	asrs	r3, r3, #3
 802417e:	ea45 0c0c 	orr.w	ip, r5, ip
 8024182:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8024186:	f1c7 0510 	rsb	r5, r7, #16
 802418a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802418e:	1b2d      	subs	r5, r5, r4
 8024190:	ea4e 0202 	orr.w	r2, lr, r2
 8024194:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8024198:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 802419c:	4354      	muls	r4, r2
 802419e:	fb05 450c 	mla	r5, r5, ip, r4
 80241a2:	0404      	lsls	r4, r0, #16
 80241a4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80241a8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80241ac:	4320      	orrs	r0, r4
 80241ae:	fb03 5400 	mla	r4, r3, r0, r5
 80241b2:	0430      	lsls	r0, r6, #16
 80241b4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80241b8:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 80241bc:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 80241c0:	4330      	orrs	r0, r6
 80241c2:	fb07 4000 	mla	r0, r7, r0, r4
 80241c6:	0d43      	lsrs	r3, r0, #21
 80241c8:	0940      	lsrs	r0, r0, #5
 80241ca:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80241ce:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80241d2:	4318      	orrs	r0, r3
 80241d4:	8008      	strh	r0, [r1, #0]
 80241d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80241da:	bf00      	nop
 80241dc:	0802c82a 	.word	0x0802c82a
 80241e0:	0802ce96 	.word	0x0802ce96
 80241e4:	0802c913 	.word	0x0802c913

080241e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80241e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80241ec:	ed2d 8b08 	vpush	{d8-d11}
 80241f0:	b08f      	sub	sp, #60	; 0x3c
 80241f2:	461d      	mov	r5, r3
 80241f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80241f6:	920c      	str	r2, [sp, #48]	; 0x30
 80241f8:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 80241fc:	9107      	str	r1, [sp, #28]
 80241fe:	6859      	ldr	r1, [r3, #4]
 8024200:	681b      	ldr	r3, [r3, #0]
 8024202:	900d      	str	r0, [sp, #52]	; 0x34
 8024204:	fb01 2707 	mla	r7, r1, r7, r2
 8024208:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 802420c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802420e:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8024212:	f8d3 8000 	ldr.w	r8, [r3]
 8024216:	eeb0 aa40 	vmov.f32	s20, s0
 802421a:	eef0 9a60 	vmov.f32	s19, s1
 802421e:	eeb0 9a41 	vmov.f32	s18, s2
 8024222:	eeb0 8a62 	vmov.f32	s16, s5
 8024226:	eef0 8a43 	vmov.f32	s17, s6
 802422a:	eef0 ba44 	vmov.f32	s23, s8
 802422e:	eeb0 ba64 	vmov.f32	s22, s9
 8024232:	eef0 aa45 	vmov.f32	s21, s10
 8024236:	9b07      	ldr	r3, [sp, #28]
 8024238:	2b00      	cmp	r3, #0
 802423a:	dc03      	bgt.n	8024244 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802423c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802423e:	2b00      	cmp	r3, #0
 8024240:	f340 8181 	ble.w	8024546 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8024244:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024246:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802424a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802424e:	1e48      	subs	r0, r1, #1
 8024250:	f102 3cff 	add.w	ip, r2, #4294967295
 8024254:	2d00      	cmp	r5, #0
 8024256:	f340 809b 	ble.w	8024390 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 802425a:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802425e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024262:	d406      	bmi.n	8024272 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024264:	4586      	cmp	lr, r0
 8024266:	da04      	bge.n	8024272 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024268:	2b00      	cmp	r3, #0
 802426a:	db02      	blt.n	8024272 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802426c:	4563      	cmp	r3, ip
 802426e:	f2c0 8090 	blt.w	8024392 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8024272:	f11e 0e01 	adds.w	lr, lr, #1
 8024276:	f100 8084 	bmi.w	8024382 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802427a:	4571      	cmp	r1, lr
 802427c:	f2c0 8081 	blt.w	8024382 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8024280:	3301      	adds	r3, #1
 8024282:	d47e      	bmi.n	8024382 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8024284:	429a      	cmp	r2, r3
 8024286:	db7c      	blt.n	8024382 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8024288:	46aa      	mov	sl, r5
 802428a:	46b9      	mov	r9, r7
 802428c:	f1ba 0f00 	cmp.w	sl, #0
 8024290:	f340 8099 	ble.w	80243c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8024294:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024296:	1421      	asrs	r1, r4, #16
 8024298:	ea4f 4026 	mov.w	r0, r6, asr #16
 802429c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80242a0:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80242a4:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80242a8:	f100 80d0 	bmi.w	802444c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80242ac:	f10e 3bff 	add.w	fp, lr, #4294967295
 80242b0:	4559      	cmp	r1, fp
 80242b2:	f280 80cb 	bge.w	802444c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80242b6:	2800      	cmp	r0, #0
 80242b8:	f2c0 80c8 	blt.w	802444c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80242bc:	f103 3bff 	add.w	fp, r3, #4294967295
 80242c0:	4558      	cmp	r0, fp
 80242c2:	f280 80c3 	bge.w	802444c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80242c6:	fa0f fe8e 	sxth.w	lr, lr
 80242ca:	fb00 110e 	mla	r1, r0, lr, r1
 80242ce:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80242d2:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 80242d6:	8841      	ldrh	r1, [r0, #2]
 80242d8:	f1bc 0f00 	cmp.w	ip, #0
 80242dc:	d00b      	beq.n	80242f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 80242de:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 80242e2:	3b01      	subs	r3, #1
 80242e4:	005b      	lsls	r3, r3, #1
 80242e6:	3302      	adds	r3, #2
 80242e8:	eb00 0e03 	add.w	lr, r0, r3
 80242ec:	5ac3      	ldrh	r3, [r0, r3]
 80242ee:	9308      	str	r3, [sp, #32]
 80242f0:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80242f4:	9309      	str	r3, [sp, #36]	; 0x24
 80242f6:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80242fa:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80242fe:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8024302:	ea40 000b 	orr.w	r0, r0, fp
 8024306:	fb12 f30c 	smulbb	r3, r2, ip
 802430a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802430e:	10db      	asrs	r3, r3, #3
 8024310:	f1cc 0e10 	rsb	lr, ip, #16
 8024314:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024318:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802431c:	ebae 0e02 	sub.w	lr, lr, r2
 8024320:	ea4b 0101 	orr.w	r1, fp, r1
 8024324:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8024328:	4351      	muls	r1, r2
 802432a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802432c:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8024330:	fb0e 1e00 	mla	lr, lr, r0, r1
 8024334:	0410      	lsls	r0, r2, #16
 8024336:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802433a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802433e:	4310      	orrs	r0, r2
 8024340:	9a08      	ldr	r2, [sp, #32]
 8024342:	9908      	ldr	r1, [sp, #32]
 8024344:	0412      	lsls	r2, r2, #16
 8024346:	fb03 e000 	mla	r0, r3, r0, lr
 802434a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802434e:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8024352:	ea42 020e 	orr.w	r2, r2, lr
 8024356:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802435a:	fb03 0302 	mla	r3, r3, r2, r0
 802435e:	0d5a      	lsrs	r2, r3, #21
 8024360:	095b      	lsrs	r3, r3, #5
 8024362:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024366:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802436a:	4313      	orrs	r3, r2
 802436c:	f8a9 3000 	strh.w	r3, [r9]
 8024370:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024372:	441c      	add	r4, r3
 8024374:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024376:	f109 0902 	add.w	r9, r9, #2
 802437a:	441e      	add	r6, r3
 802437c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024380:	e784      	b.n	802428c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8024382:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024384:	441c      	add	r4, r3
 8024386:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024388:	3d01      	subs	r5, #1
 802438a:	441e      	add	r6, r3
 802438c:	3702      	adds	r7, #2
 802438e:	e761      	b.n	8024254 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024390:	d01d      	beq.n	80243ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8024392:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8024394:	1e6b      	subs	r3, r5, #1
 8024396:	fb00 4003 	mla	r0, r0, r3, r4
 802439a:	1400      	asrs	r0, r0, #16
 802439c:	f53f af74 	bmi.w	8024288 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80243a0:	3901      	subs	r1, #1
 80243a2:	4288      	cmp	r0, r1
 80243a4:	f6bf af70 	bge.w	8024288 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80243a8:	9924      	ldr	r1, [sp, #144]	; 0x90
 80243aa:	fb01 6303 	mla	r3, r1, r3, r6
 80243ae:	141b      	asrs	r3, r3, #16
 80243b0:	f53f af6a 	bmi.w	8024288 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80243b4:	3a01      	subs	r2, #1
 80243b6:	4293      	cmp	r3, r2
 80243b8:	f6bf af66 	bge.w	8024288 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80243bc:	46a9      	mov	r9, r5
 80243be:	46ba      	mov	sl, r7
 80243c0:	f1b9 0f00 	cmp.w	r9, #0
 80243c4:	dc5a      	bgt.n	802447c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80243c6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80243ca:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 80243ce:	9b07      	ldr	r3, [sp, #28]
 80243d0:	2b00      	cmp	r3, #0
 80243d2:	f340 80b8 	ble.w	8024546 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 80243d6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80243da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80243de:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80243e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80243e4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80243e8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80243ec:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80243f0:	eef0 6a48 	vmov.f32	s13, s16
 80243f4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80243f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80243fc:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024400:	ee16 4a90 	vmov	r4, s13
 8024404:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024408:	eef0 6a68 	vmov.f32	s13, s17
 802440c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024410:	ee18 2a10 	vmov	r2, s16
 8024414:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024418:	fb92 f3f3 	sdiv	r3, r2, r3
 802441c:	ee18 2a90 	vmov	r2, s17
 8024420:	9323      	str	r3, [sp, #140]	; 0x8c
 8024422:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024424:	fb92 f3f3 	sdiv	r3, r2, r3
 8024428:	9324      	str	r3, [sp, #144]	; 0x90
 802442a:	9b07      	ldr	r3, [sp, #28]
 802442c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802442e:	3b01      	subs	r3, #1
 8024430:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024434:	9307      	str	r3, [sp, #28]
 8024436:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024438:	ee16 6a90 	vmov	r6, s13
 802443c:	bf14      	ite	ne
 802443e:	461d      	movne	r5, r3
 8024440:	4615      	moveq	r5, r2
 8024442:	eef0 8a67 	vmov.f32	s17, s15
 8024446:	eeb0 8a47 	vmov.f32	s16, s14
 802444a:	e6f4      	b.n	8024236 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 802444c:	f111 0b01 	adds.w	fp, r1, #1
 8024450:	d48e      	bmi.n	8024370 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8024452:	45de      	cmp	lr, fp
 8024454:	db8c      	blt.n	8024370 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8024456:	f110 0b01 	adds.w	fp, r0, #1
 802445a:	d489      	bmi.n	8024370 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802445c:	455b      	cmp	r3, fp
 802445e:	db87      	blt.n	8024370 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8024460:	b21b      	sxth	r3, r3
 8024462:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8024466:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 802446a:	9300      	str	r3, [sp, #0]
 802446c:	4642      	mov	r2, r8
 802446e:	fa0f f38e 	sxth.w	r3, lr
 8024472:	4649      	mov	r1, r9
 8024474:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024476:	f7ff fe2b 	bl	80240d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 802447a:	e779      	b.n	8024370 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802447c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802447e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8024482:	1420      	asrs	r0, r4, #16
 8024484:	1431      	asrs	r1, r6, #16
 8024486:	fb03 0101 	mla	r1, r3, r1, r0
 802448a:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 802448e:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8024492:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8024496:	8841      	ldrh	r1, [r0, #2]
 8024498:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802449c:	f1be 0f00 	cmp.w	lr, #0
 80244a0:	d00b      	beq.n	80244ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 80244a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80244a6:	3b01      	subs	r3, #1
 80244a8:	005b      	lsls	r3, r3, #1
 80244aa:	3302      	adds	r3, #2
 80244ac:	eb00 0b03 	add.w	fp, r0, r3
 80244b0:	5ac3      	ldrh	r3, [r0, r3]
 80244b2:	930a      	str	r3, [sp, #40]	; 0x28
 80244b4:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80244b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80244ba:	ea4f 400c 	mov.w	r0, ip, lsl #16
 80244be:	fb12 f30e 	smulbb	r3, r2, lr
 80244c2:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80244c6:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80244ca:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80244ce:	10db      	asrs	r3, r3, #3
 80244d0:	ea40 000c 	orr.w	r0, r0, ip
 80244d4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80244d8:	f1ce 0c10 	rsb	ip, lr, #16
 80244dc:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80244e0:	ebac 0c02 	sub.w	ip, ip, r2
 80244e4:	ea4b 0101 	orr.w	r1, fp, r1
 80244e8:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80244ec:	4351      	muls	r1, r2
 80244ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80244f0:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80244f4:	fb0c 1c00 	mla	ip, ip, r0, r1
 80244f8:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80244fc:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8024500:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024502:	990a      	ldr	r1, [sp, #40]	; 0x28
 8024504:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024508:	0412      	lsls	r2, r2, #16
 802450a:	ea4b 0000 	orr.w	r0, fp, r0
 802450e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024512:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8024516:	fb03 c000 	mla	r0, r3, r0, ip
 802451a:	ea42 0b0b 	orr.w	fp, r2, fp
 802451e:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8024522:	fb03 000b 	mla	r0, r3, fp, r0
 8024526:	0d43      	lsrs	r3, r0, #21
 8024528:	0940      	lsrs	r0, r0, #5
 802452a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802452e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024532:	4318      	orrs	r0, r3
 8024534:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024536:	f82a 0b02 	strh.w	r0, [sl], #2
 802453a:	441c      	add	r4, r3
 802453c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802453e:	f109 39ff 	add.w	r9, r9, #4294967295
 8024542:	441e      	add	r6, r3
 8024544:	e73c      	b.n	80243c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8024546:	b00f      	add	sp, #60	; 0x3c
 8024548:	ecbd 8b08 	vpop	{d8-d11}
 802454c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024550 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8024550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024554:	880e      	ldrh	r6, [r1, #0]
 8024556:	b085      	sub	sp, #20
 8024558:	ea4f 2c26 	mov.w	ip, r6, asr #8
 802455c:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
 8024560:	4690      	mov	r8, r2
 8024562:	f00c 02f8 	and.w	r2, ip, #248	; 0xf8
 8024566:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 802456a:	9200      	str	r2, [sp, #0]
 802456c:	00f6      	lsls	r6, r6, #3
 802456e:	f00c 02fc 	and.w	r2, ip, #252	; 0xfc
 8024572:	9201      	str	r2, [sp, #4]
 8024574:	2c00      	cmp	r4, #0
 8024576:	b2f2      	uxtb	r2, r6
 8024578:	fb04 5603 	mla	r6, r4, r3, r5
 802457c:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8024580:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8024584:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8024588:	9202      	str	r2, [sp, #8]
 802458a:	eb08 0c86 	add.w	ip, r8, r6, lsl #2
 802458e:	db36      	blt.n	80245fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xae>
 8024590:	45a6      	cmp	lr, r4
 8024592:	dd34      	ble.n	80245fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xae>
 8024594:	2d00      	cmp	r5, #0
 8024596:	db30      	blt.n	80245fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xaa>
 8024598:	42ab      	cmp	r3, r5
 802459a:	dd2e      	ble.n	80245fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xaa>
 802459c:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
 80245a0:	1c6e      	adds	r6, r5, #1
 80245a2:	d42f      	bmi.n	8024604 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 80245a4:	42b3      	cmp	r3, r6
 80245a6:	dd2d      	ble.n	8024604 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 80245a8:	b370      	cbz	r0, 8024608 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb8>
 80245aa:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80245ae:	3401      	adds	r4, #1
 80245b0:	d42e      	bmi.n	8024610 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc0>
 80245b2:	45a6      	cmp	lr, r4
 80245b4:	dd2c      	ble.n	8024610 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc0>
 80245b6:	b377      	cbz	r7, 8024616 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc6>
 80245b8:	2d00      	cmp	r5, #0
 80245ba:	db27      	blt.n	802460c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbc>
 80245bc:	42ab      	cmp	r3, r5
 80245be:	dd25      	ble.n	802460c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbc>
 80245c0:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80245c4:	3501      	adds	r5, #1
 80245c6:	d429      	bmi.n	802461c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 80245c8:	42ab      	cmp	r3, r5
 80245ca:	dd27      	ble.n	802461c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 80245cc:	b340      	cbz	r0, 8024620 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 80245ce:	3301      	adds	r3, #1
 80245d0:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80245d4:	280f      	cmp	r0, #15
 80245d6:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80245da:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80245de:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80245e2:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80245e6:	d801      	bhi.n	80245ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 80245e8:	2f0f      	cmp	r7, #15
 80245ea:	d91b      	bls.n	8024624 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd4>
 80245ec:	4b84      	ldr	r3, [pc, #528]	; (8024800 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b0>)
 80245ee:	4a85      	ldr	r2, [pc, #532]	; (8024804 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 80245f0:	4885      	ldr	r0, [pc, #532]	; (8024808 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 80245f2:	f240 210d 	movw	r1, #525	; 0x20d
 80245f6:	f002 fb15 	bl	8026c24 <__assert_func>
 80245fa:	2200      	movs	r2, #0
 80245fc:	e7d0      	b.n	80245a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x50>
 80245fe:	2600      	movs	r6, #0
 8024600:	4632      	mov	r2, r6
 8024602:	e7d4      	b.n	80245ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 8024604:	2600      	movs	r6, #0
 8024606:	e7d2      	b.n	80245ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 8024608:	4606      	mov	r6, r0
 802460a:	e7d0      	b.n	80245ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 802460c:	2400      	movs	r4, #0
 802460e:	e7d9      	b.n	80245c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8024610:	2300      	movs	r3, #0
 8024612:	461c      	mov	r4, r3
 8024614:	e7de      	b.n	80245d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8024616:	463b      	mov	r3, r7
 8024618:	463c      	mov	r4, r7
 802461a:	e7db      	b.n	80245d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 802461c:	2300      	movs	r3, #0
 802461e:	e7d9      	b.n	80245d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8024620:	4603      	mov	r3, r0
 8024622:	e7d7      	b.n	80245d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8024624:	b280      	uxth	r0, r0
 8024626:	b2bf      	uxth	r7, r7
 8024628:	fb00 fe07 	mul.w	lr, r0, r7
 802462c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8024630:	0100      	lsls	r0, r0, #4
 8024632:	eba0 0c0e 	sub.w	ip, r0, lr
 8024636:	b2bf      	uxth	r7, r7
 8024638:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 802463c:	fa1f fc8c 	uxth.w	ip, ip
 8024640:	1bed      	subs	r5, r5, r7
 8024642:	b2ad      	uxth	r5, r5
 8024644:	fb0c f00a 	mul.w	r0, ip, sl
 8024648:	fb05 000b 	mla	r0, r5, fp, r0
 802464c:	fb07 0009 	mla	r0, r7, r9, r0
 8024650:	fb0e 0008 	mla	r0, lr, r8, r0
 8024654:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024658:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802465c:	9003      	str	r0, [sp, #12]
 802465e:	d018      	beq.n	8024692 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x142>
 8024660:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8024664:	fb0b f000 	mul.w	r0, fp, r0
 8024668:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802466c:	fb0b fb02 	mul.w	fp, fp, r2
 8024670:	0a02      	lsrs	r2, r0, #8
 8024672:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024676:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802467a:	4402      	add	r2, r0
 802467c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8024680:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8024684:	0a12      	lsrs	r2, r2, #8
 8024686:	0a00      	lsrs	r0, r0, #8
 8024688:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802468c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024690:	4302      	orrs	r2, r0
 8024692:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8024696:	d019      	beq.n	80246cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x17c>
 8024698:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 802469c:	fb0a fb0b 	mul.w	fp, sl, fp
 80246a0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80246a4:	fb0a fa06 	mul.w	sl, sl, r6
 80246a8:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80246ac:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80246b0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80246b4:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80246b8:	445e      	add	r6, fp
 80246ba:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80246be:	0a36      	lsrs	r6, r6, #8
 80246c0:	0a00      	lsrs	r0, r0, #8
 80246c2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80246c6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80246ca:	4306      	orrs	r6, r0
 80246cc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80246d0:	d019      	beq.n	8024706 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1b6>
 80246d2:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80246d6:	fb09 fa0a 	mul.w	sl, r9, sl
 80246da:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80246de:	fb09 f904 	mul.w	r9, r9, r4
 80246e2:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80246e6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80246ea:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80246ee:	f509 7080 	add.w	r0, r9, #256	; 0x100
 80246f2:	4454      	add	r4, sl
 80246f4:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 80246f8:	0a24      	lsrs	r4, r4, #8
 80246fa:	0a00      	lsrs	r0, r0, #8
 80246fc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024700:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024704:	4304      	orrs	r4, r0
 8024706:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802470a:	d019      	beq.n	8024740 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1f0>
 802470c:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8024710:	fb08 f909 	mul.w	r9, r8, r9
 8024714:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024718:	fb08 f803 	mul.w	r8, r8, r3
 802471c:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8024720:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024724:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8024728:	f508 7080 	add.w	r0, r8, #256	; 0x100
 802472c:	444b      	add	r3, r9
 802472e:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8024732:	0a1b      	lsrs	r3, r3, #8
 8024734:	0a00      	lsrs	r0, r0, #8
 8024736:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802473a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802473e:	4303      	orrs	r3, r0
 8024740:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8024744:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8024748:	fb0c f808 	mul.w	r8, ip, r8
 802474c:	fb05 8800 	mla	r8, r5, r0, r8
 8024750:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8024754:	fb07 8800 	mla	r8, r7, r0, r8
 8024758:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 802475c:	fb0e 8000 	mla	r0, lr, r0, r8
 8024760:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024764:	fb0c f606 	mul.w	r6, ip, r6
 8024768:	0a00      	lsrs	r0, r0, #8
 802476a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802476e:	fb05 6202 	mla	r2, r5, r2, r6
 8024772:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8024776:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 802477a:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 802477e:	fb07 2700 	mla	r7, r7, r0, r2
 8024782:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8024786:	9b03      	ldr	r3, [sp, #12]
 8024788:	9c00      	ldr	r4, [sp, #0]
 802478a:	b2ad      	uxth	r5, r5
 802478c:	436b      	muls	r3, r5
 802478e:	fb0e 7000 	mla	r0, lr, r0, r7
 8024792:	1c5a      	adds	r2, r3, #1
 8024794:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024798:	0a00      	lsrs	r0, r0, #8
 802479a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802479e:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 80247a2:	ea48 0000 	orr.w	r0, r8, r0
 80247a6:	b2d2      	uxtb	r2, r2
 80247a8:	fb14 f602 	smulbb	r6, r4, r2
 80247ac:	0c03      	lsrs	r3, r0, #16
 80247ae:	fb03 6305 	mla	r3, r3, r5, r6
 80247b2:	b29e      	uxth	r6, r3
 80247b4:	9b01      	ldr	r3, [sp, #4]
 80247b6:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80247ba:	fb13 f302 	smulbb	r3, r3, r2
 80247be:	fb04 3405 	mla	r4, r4, r5, r3
 80247c2:	9b02      	ldr	r3, [sp, #8]
 80247c4:	b2c0      	uxtb	r0, r0
 80247c6:	fb13 f202 	smulbb	r2, r3, r2
 80247ca:	fb00 2005 	mla	r0, r0, r5, r2
 80247ce:	b280      	uxth	r0, r0
 80247d0:	b2a4      	uxth	r4, r4
 80247d2:	1c42      	adds	r2, r0, #1
 80247d4:	1c73      	adds	r3, r6, #1
 80247d6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80247da:	1c62      	adds	r2, r4, #1
 80247dc:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 80247e0:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80247e4:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80247e8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80247ec:	0952      	lsrs	r2, r2, #5
 80247ee:	4303      	orrs	r3, r0
 80247f0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80247f4:	4313      	orrs	r3, r2
 80247f6:	800b      	strh	r3, [r1, #0]
 80247f8:	b005      	add	sp, #20
 80247fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80247fe:	bf00      	nop
 8024800:	0802c82a 	.word	0x0802c82a
 8024804:	0802cded 	.word	0x0802cded
 8024808:	0802c913 	.word	0x0802c913

0802480c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802480c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024810:	ed2d 8b08 	vpush	{d8-d11}
 8024814:	b09d      	sub	sp, #116	; 0x74
 8024816:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 802481a:	9219      	str	r2, [sp, #100]	; 0x64
 802481c:	9307      	str	r3, [sp, #28]
 802481e:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8024820:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8024824:	931a      	str	r3, [sp, #104]	; 0x68
 8024826:	9117      	str	r1, [sp, #92]	; 0x5c
 8024828:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 802482c:	901b      	str	r0, [sp, #108]	; 0x6c
 802482e:	6850      	ldr	r0, [r2, #4]
 8024830:	6812      	ldr	r2, [r2, #0]
 8024832:	fb00 1303 	mla	r3, r0, r3, r1
 8024836:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802483a:	930a      	str	r3, [sp, #40]	; 0x28
 802483c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802483e:	681b      	ldr	r3, [r3, #0]
 8024840:	9310      	str	r3, [sp, #64]	; 0x40
 8024842:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8024846:	930b      	str	r3, [sp, #44]	; 0x2c
 8024848:	eeb0 aa40 	vmov.f32	s20, s0
 802484c:	eef0 9a60 	vmov.f32	s19, s1
 8024850:	eeb0 9a41 	vmov.f32	s18, s2
 8024854:	eeb0 8a62 	vmov.f32	s16, s5
 8024858:	eef0 8a43 	vmov.f32	s17, s6
 802485c:	eef0 ba44 	vmov.f32	s23, s8
 8024860:	eeb0 ba64 	vmov.f32	s22, s9
 8024864:	eef0 aa45 	vmov.f32	s21, s10
 8024868:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802486a:	2b00      	cmp	r3, #0
 802486c:	dc03      	bgt.n	8024876 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802486e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024870:	2b00      	cmp	r3, #0
 8024872:	f340 837b 	ble.w	8024f6c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8024876:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8024878:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802487c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024880:	1e48      	subs	r0, r1, #1
 8024882:	1e57      	subs	r7, r2, #1
 8024884:	9b07      	ldr	r3, [sp, #28]
 8024886:	2b00      	cmp	r3, #0
 8024888:	f340 8194 	ble.w	8024bb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 802488c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024890:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024894:	d406      	bmi.n	80248a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8024896:	4584      	cmp	ip, r0
 8024898:	da04      	bge.n	80248a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802489a:	2b00      	cmp	r3, #0
 802489c:	db02      	blt.n	80248a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802489e:	42bb      	cmp	r3, r7
 80248a0:	f2c0 8189 	blt.w	8024bb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80248a4:	f11c 0c01 	adds.w	ip, ip, #1
 80248a8:	f100 8179 	bmi.w	8024b9e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80248ac:	4561      	cmp	r1, ip
 80248ae:	f2c0 8176 	blt.w	8024b9e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80248b2:	3301      	adds	r3, #1
 80248b4:	f100 8173 	bmi.w	8024b9e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80248b8:	429a      	cmp	r2, r3
 80248ba:	f2c0 8170 	blt.w	8024b9e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80248be:	9b07      	ldr	r3, [sp, #28]
 80248c0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80248c2:	9318      	str	r3, [sp, #96]	; 0x60
 80248c4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80248c6:	2b00      	cmp	r3, #0
 80248c8:	f340 8192 	ble.w	8024bf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80248cc:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80248ce:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80248d0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80248d4:	689b      	ldr	r3, [r3, #8]
 80248d6:	1422      	asrs	r2, r4, #16
 80248d8:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80248dc:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80248e0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80248e4:	f100 81d3 	bmi.w	8024c8e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80248e8:	f103 38ff 	add.w	r8, r3, #4294967295
 80248ec:	4542      	cmp	r2, r8
 80248ee:	f280 81ce 	bge.w	8024c8e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80248f2:	f1bc 0f00 	cmp.w	ip, #0
 80248f6:	f2c0 81ca 	blt.w	8024c8e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80248fa:	f10e 38ff 	add.w	r8, lr, #4294967295
 80248fe:	45c4      	cmp	ip, r8
 8024900:	f280 81c5 	bge.w	8024c8e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8024904:	b21b      	sxth	r3, r3
 8024906:	fb0c 2203 	mla	r2, ip, r3, r2
 802490a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802490c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8024910:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8024914:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8024918:	2800      	cmp	r0, #0
 802491a:	f000 81af 	beq.w	8024c7c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 802491e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8024922:	950c      	str	r5, [sp, #48]	; 0x30
 8024924:	0e2d      	lsrs	r5, r5, #24
 8024926:	9513      	str	r5, [sp, #76]	; 0x4c
 8024928:	b181      	cbz	r1, 802494c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802492a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802492e:	3b01      	subs	r3, #1
 8024930:	009b      	lsls	r3, r3, #2
 8024932:	3304      	adds	r3, #4
 8024934:	eb08 0c03 	add.w	ip, r8, r3
 8024938:	f858 3003 	ldr.w	r3, [r8, r3]
 802493c:	9308      	str	r3, [sp, #32]
 802493e:	0e1b      	lsrs	r3, r3, #24
 8024940:	9311      	str	r3, [sp, #68]	; 0x44
 8024942:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8024946:	930d      	str	r3, [sp, #52]	; 0x34
 8024948:	0e1b      	lsrs	r3, r3, #24
 802494a:	9314      	str	r3, [sp, #80]	; 0x50
 802494c:	b280      	uxth	r0, r0
 802494e:	b289      	uxth	r1, r1
 8024950:	fb00 f901 	mul.w	r9, r0, r1
 8024954:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024958:	0100      	lsls	r0, r0, #4
 802495a:	eba0 0809 	sub.w	r8, r0, r9
 802495e:	b289      	uxth	r1, r1
 8024960:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8024964:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8024966:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024968:	fa1f f888 	uxth.w	r8, r8
 802496c:	1a5b      	subs	r3, r3, r1
 802496e:	b29b      	uxth	r3, r3
 8024970:	fb08 f000 	mul.w	r0, r8, r0
 8024974:	fb03 000e 	mla	r0, r3, lr, r0
 8024978:	fb01 0005 	mla	r0, r1, r5, r0
 802497c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802497e:	fb09 0005 	mla	r0, r9, r5, r0
 8024982:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024986:	2800      	cmp	r0, #0
 8024988:	f000 8100 	beq.w	8024b8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 802498c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8024990:	d01b      	beq.n	80249ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8024992:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8024996:	fb0e fa0a 	mul.w	sl, lr, sl
 802499a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802499e:	fb0e fe02 	mul.w	lr, lr, r2
 80249a2:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80249a6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80249aa:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80249ae:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80249b2:	4452      	add	r2, sl
 80249b4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80249b8:	0a12      	lsrs	r2, r2, #8
 80249ba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80249be:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80249c2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80249c6:	ea42 020c 	orr.w	r2, r2, ip
 80249ca:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80249cc:	2dff      	cmp	r5, #255	; 0xff
 80249ce:	d021      	beq.n	8024a14 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80249d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80249d2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80249d6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80249d8:	fb05 fb0b 	mul.w	fp, r5, fp
 80249dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80249de:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80249e2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80249e4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80249e8:	fb05 fa0a 	mul.w	sl, r5, sl
 80249ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80249f0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80249f4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80249f8:	44de      	add	lr, fp
 80249fa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80249fe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024a02:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024a06:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024a0a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024a0e:	ea4e 050a 	orr.w	r5, lr, sl
 8024a12:	950c      	str	r5, [sp, #48]	; 0x30
 8024a14:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024a16:	2dff      	cmp	r5, #255	; 0xff
 8024a18:	d021      	beq.n	8024a5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8024a1a:	9d08      	ldr	r5, [sp, #32]
 8024a1c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8024a20:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024a22:	fb05 fb0b 	mul.w	fp, r5, fp
 8024a26:	9d08      	ldr	r5, [sp, #32]
 8024a28:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024a2c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024a2e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024a32:	fb05 fa0a 	mul.w	sl, r5, sl
 8024a36:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024a3a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024a3e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024a42:	44de      	add	lr, fp
 8024a44:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024a48:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024a4c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024a50:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024a54:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024a58:	ea4e 050a 	orr.w	r5, lr, sl
 8024a5c:	9508      	str	r5, [sp, #32]
 8024a5e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024a60:	2dff      	cmp	r5, #255	; 0xff
 8024a62:	d021      	beq.n	8024aa8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8024a64:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024a66:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8024a6a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024a6c:	fb05 fb0b 	mul.w	fp, r5, fp
 8024a70:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024a72:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024a76:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024a78:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024a7c:	fb05 fa0a 	mul.w	sl, r5, sl
 8024a80:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024a84:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024a88:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024a8c:	44de      	add	lr, fp
 8024a8e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024a92:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024a96:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024a9a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024a9e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024aa2:	ea4e 050a 	orr.w	r5, lr, sl
 8024aa6:	950d      	str	r5, [sp, #52]	; 0x34
 8024aa8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024aaa:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024aae:	9d08      	ldr	r5, [sp, #32]
 8024ab0:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8024ab4:	fb08 fc0c 	mul.w	ip, r8, ip
 8024ab8:	fb03 cc0e 	mla	ip, r3, lr, ip
 8024abc:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8024ac0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024ac2:	fb01 cc0e 	mla	ip, r1, lr, ip
 8024ac6:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8024aca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024acc:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024ad0:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8024ad4:	fb08 f80e 	mul.w	r8, r8, lr
 8024ad8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024adc:	fb03 8202 	mla	r2, r3, r2, r8
 8024ae0:	9b08      	ldr	r3, [sp, #32]
 8024ae2:	f8b7 e000 	ldrh.w	lr, [r7]
 8024ae6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024ae8:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8024aec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024aee:	fb01 220a 	mla	r2, r1, sl, r2
 8024af2:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8024af6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024af8:	fb09 2901 	mla	r9, r9, r1, r2
 8024afc:	4343      	muls	r3, r0
 8024afe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024b02:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024b06:	1c58      	adds	r0, r3, #1
 8024b08:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024b0c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024b10:	ea4c 0c09 	orr.w	ip, ip, r9
 8024b14:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024b18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024b1a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8024b1e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8024b22:	ea4f 232e 	mov.w	r3, lr, asr #8
 8024b26:	b2c0      	uxtb	r0, r0
 8024b28:	fb11 f102 	smulbb	r1, r1, r2
 8024b2c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8024b30:	fb03 1300 	mla	r3, r3, r0, r1
 8024b34:	b299      	uxth	r1, r3
 8024b36:	ea4f 02ee 	mov.w	r2, lr, asr #3
 8024b3a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8024b3e:	fb13 f305 	smulbb	r3, r3, r5
 8024b42:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024b46:	fb02 3200 	mla	r2, r2, r0, r3
 8024b4a:	fa5f fc8c 	uxtb.w	ip, ip
 8024b4e:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8024b52:	b2db      	uxtb	r3, r3
 8024b54:	fb1c fc05 	smulbb	ip, ip, r5
 8024b58:	fb03 cc00 	mla	ip, r3, r0, ip
 8024b5c:	b292      	uxth	r2, r2
 8024b5e:	fa1f fc8c 	uxth.w	ip, ip
 8024b62:	1c4b      	adds	r3, r1, #1
 8024b64:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8024b68:	f10c 0001 	add.w	r0, ip, #1
 8024b6c:	1c51      	adds	r1, r2, #1
 8024b6e:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 8024b72:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024b76:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8024b7a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8024b7e:	0952      	lsrs	r2, r2, #5
 8024b80:	ea43 030c 	orr.w	r3, r3, ip
 8024b84:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024b88:	4313      	orrs	r3, r2
 8024b8a:	803b      	strh	r3, [r7, #0]
 8024b8c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8024b8e:	441c      	add	r4, r3
 8024b90:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024b92:	441e      	add	r6, r3
 8024b94:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024b96:	3b01      	subs	r3, #1
 8024b98:	3702      	adds	r7, #2
 8024b9a:	9318      	str	r3, [sp, #96]	; 0x60
 8024b9c:	e692      	b.n	80248c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024b9e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8024ba0:	441c      	add	r4, r3
 8024ba2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024ba4:	441e      	add	r6, r3
 8024ba6:	9b07      	ldr	r3, [sp, #28]
 8024ba8:	3b01      	subs	r3, #1
 8024baa:	9307      	str	r3, [sp, #28]
 8024bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024bae:	3302      	adds	r3, #2
 8024bb0:	930a      	str	r3, [sp, #40]	; 0x28
 8024bb2:	e667      	b.n	8024884 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024bb4:	d023      	beq.n	8024bfe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8024bb6:	9b07      	ldr	r3, [sp, #28]
 8024bb8:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8024bba:	3b01      	subs	r3, #1
 8024bbc:	fb00 4003 	mla	r0, r0, r3, r4
 8024bc0:	1400      	asrs	r0, r0, #16
 8024bc2:	f53f ae7c 	bmi.w	80248be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8024bc6:	3901      	subs	r1, #1
 8024bc8:	4288      	cmp	r0, r1
 8024bca:	f6bf ae78 	bge.w	80248be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8024bce:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8024bd0:	fb01 6303 	mla	r3, r1, r3, r6
 8024bd4:	141b      	asrs	r3, r3, #16
 8024bd6:	f53f ae72 	bmi.w	80248be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8024bda:	3a01      	subs	r2, #1
 8024bdc:	4293      	cmp	r3, r2
 8024bde:	f6bf ae6e 	bge.w	80248be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8024be2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8024be6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8024bea:	f1bb 0f00 	cmp.w	fp, #0
 8024bee:	dc6c      	bgt.n	8024cca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4be>
 8024bf0:	9b07      	ldr	r3, [sp, #28]
 8024bf2:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8024bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024bf8:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8024bfc:	930a      	str	r3, [sp, #40]	; 0x28
 8024bfe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024c00:	2b00      	cmp	r3, #0
 8024c02:	f340 81b3 	ble.w	8024f6c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8024c06:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024c0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024c0e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024c12:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024c14:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024c18:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024c1c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024c20:	eef0 6a48 	vmov.f32	s13, s16
 8024c24:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024c28:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024c2c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024c30:	ee16 4a90 	vmov	r4, s13
 8024c34:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024c38:	eef0 6a68 	vmov.f32	s13, s17
 8024c3c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024c40:	ee18 2a10 	vmov	r2, s16
 8024c44:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024c48:	fb92 f3f3 	sdiv	r3, r2, r3
 8024c4c:	ee18 2a90 	vmov	r2, s17
 8024c50:	9331      	str	r3, [sp, #196]	; 0xc4
 8024c52:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024c54:	fb92 f3f3 	sdiv	r3, r2, r3
 8024c58:	9332      	str	r3, [sp, #200]	; 0xc8
 8024c5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024c5c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8024c5e:	3b01      	subs	r3, #1
 8024c60:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024c64:	9317      	str	r3, [sp, #92]	; 0x5c
 8024c66:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024c68:	bf08      	it	eq
 8024c6a:	4613      	moveq	r3, r2
 8024c6c:	ee16 6a90 	vmov	r6, s13
 8024c70:	9307      	str	r3, [sp, #28]
 8024c72:	eef0 8a67 	vmov.f32	s17, s15
 8024c76:	eeb0 8a47 	vmov.f32	s16, s14
 8024c7a:	e5f5      	b.n	8024868 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8024c7c:	2900      	cmp	r1, #0
 8024c7e:	f43f ae65 	beq.w	802494c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8024c82:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8024c86:	9308      	str	r3, [sp, #32]
 8024c88:	0e1b      	lsrs	r3, r3, #24
 8024c8a:	9311      	str	r3, [sp, #68]	; 0x44
 8024c8c:	e65e      	b.n	802494c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8024c8e:	f112 0801 	adds.w	r8, r2, #1
 8024c92:	f53f af7b 	bmi.w	8024b8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8024c96:	4543      	cmp	r3, r8
 8024c98:	f6ff af78 	blt.w	8024b8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8024c9c:	f11c 0801 	adds.w	r8, ip, #1
 8024ca0:	f53f af74 	bmi.w	8024b8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8024ca4:	45c6      	cmp	lr, r8
 8024ca6:	f6ff af71 	blt.w	8024b8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8024caa:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8024cac:	9201      	str	r2, [sp, #4]
 8024cae:	fa0f f28e 	sxth.w	r2, lr
 8024cb2:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8024cb6:	e9cd c002 	strd	ip, r0, [sp, #8]
 8024cba:	9200      	str	r2, [sp, #0]
 8024cbc:	b21b      	sxth	r3, r3
 8024cbe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024cc0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8024cc2:	4639      	mov	r1, r7
 8024cc4:	f7ff fc44 	bl	8024550 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8024cc8:	e760      	b.n	8024b8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8024cca:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8024ccc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024cce:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024cd2:	1427      	asrs	r7, r4, #16
 8024cd4:	1433      	asrs	r3, r6, #16
 8024cd6:	fb01 7303 	mla	r3, r1, r3, r7
 8024cda:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8024cde:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8024ce2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024ce6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024cea:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024cee:	2a00      	cmp	r2, #0
 8024cf0:	f000 8133 	beq.w	8024f5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74e>
 8024cf4:	687d      	ldr	r5, [r7, #4]
 8024cf6:	950e      	str	r5, [sp, #56]	; 0x38
 8024cf8:	0e2d      	lsrs	r5, r5, #24
 8024cfa:	9515      	str	r5, [sp, #84]	; 0x54
 8024cfc:	b178      	cbz	r0, 8024d1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8024cfe:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8024d02:	3901      	subs	r1, #1
 8024d04:	0089      	lsls	r1, r1, #2
 8024d06:	3104      	adds	r1, #4
 8024d08:	eb07 0e01 	add.w	lr, r7, r1
 8024d0c:	5879      	ldr	r1, [r7, r1]
 8024d0e:	9109      	str	r1, [sp, #36]	; 0x24
 8024d10:	0e09      	lsrs	r1, r1, #24
 8024d12:	9112      	str	r1, [sp, #72]	; 0x48
 8024d14:	f8de 1004 	ldr.w	r1, [lr, #4]
 8024d18:	910f      	str	r1, [sp, #60]	; 0x3c
 8024d1a:	0e09      	lsrs	r1, r1, #24
 8024d1c:	9116      	str	r1, [sp, #88]	; 0x58
 8024d1e:	b292      	uxth	r2, r2
 8024d20:	b280      	uxth	r0, r0
 8024d22:	fb02 f800 	mul.w	r8, r2, r0
 8024d26:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8024d2a:	0112      	lsls	r2, r2, #4
 8024d2c:	eba2 0e08 	sub.w	lr, r2, r8
 8024d30:	b280      	uxth	r0, r0
 8024d32:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024d36:	9915      	ldr	r1, [sp, #84]	; 0x54
 8024d38:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024d3a:	fa1f fe8e 	uxth.w	lr, lr
 8024d3e:	1a12      	subs	r2, r2, r0
 8024d40:	b292      	uxth	r2, r2
 8024d42:	fb0e f101 	mul.w	r1, lr, r1
 8024d46:	fb02 110c 	mla	r1, r2, ip, r1
 8024d4a:	fb00 1105 	mla	r1, r0, r5, r1
 8024d4e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8024d50:	fb08 1105 	mla	r1, r8, r5, r1
 8024d54:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024d58:	2900      	cmp	r1, #0
 8024d5a:	f000 80f5 	beq.w	8024f48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8024d5e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024d62:	d019      	beq.n	8024d98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 8024d64:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024d68:	fb0c fa0a 	mul.w	sl, ip, sl
 8024d6c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024d70:	fb0c fc03 	mul.w	ip, ip, r3
 8024d74:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024d78:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024d7c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024d80:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8024d84:	4453      	add	r3, sl
 8024d86:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024d8a:	0a1b      	lsrs	r3, r3, #8
 8024d8c:	0a3f      	lsrs	r7, r7, #8
 8024d8e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024d92:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024d96:	433b      	orrs	r3, r7
 8024d98:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024d9a:	2dff      	cmp	r5, #255	; 0xff
 8024d9c:	d020      	beq.n	8024de0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d4>
 8024d9e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024da0:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024da4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024da6:	436f      	muls	r7, r5
 8024da8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024daa:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024dae:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024db0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024db4:	fb05 fa0a 	mul.w	sl, r5, sl
 8024db8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024dbc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024dc0:	44bc      	add	ip, r7
 8024dc2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024dc6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024dca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024dce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024dd2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024dd6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024dda:	ea4c 050a 	orr.w	r5, ip, sl
 8024dde:	950e      	str	r5, [sp, #56]	; 0x38
 8024de0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024de2:	2dff      	cmp	r5, #255	; 0xff
 8024de4:	d020      	beq.n	8024e28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8024de6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024de8:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024dec:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024dee:	436f      	muls	r7, r5
 8024df0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024df2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024df6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024df8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024dfc:	fb05 fa0a 	mul.w	sl, r5, sl
 8024e00:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024e04:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024e08:	44bc      	add	ip, r7
 8024e0a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024e0e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024e12:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024e16:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024e1a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024e1e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024e22:	ea4c 050a 	orr.w	r5, ip, sl
 8024e26:	9509      	str	r5, [sp, #36]	; 0x24
 8024e28:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8024e2a:	2dff      	cmp	r5, #255	; 0xff
 8024e2c:	d020      	beq.n	8024e70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x664>
 8024e2e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024e30:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024e34:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8024e36:	436f      	muls	r7, r5
 8024e38:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024e3a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8024e3e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8024e40:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024e44:	fb05 fa0a 	mul.w	sl, r5, sl
 8024e48:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024e4c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024e50:	44bc      	add	ip, r7
 8024e52:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024e56:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024e5a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024e5e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024e62:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024e66:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024e6a:	ea4c 050a 	orr.w	r5, ip, sl
 8024e6e:	950f      	str	r5, [sp, #60]	; 0x3c
 8024e70:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024e72:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8024e76:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024e78:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024e7c:	fb0e f707 	mul.w	r7, lr, r7
 8024e80:	fb02 770c 	mla	r7, r2, ip, r7
 8024e84:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024e88:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024e8a:	fb00 770c 	mla	r7, r0, ip, r7
 8024e8e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024e92:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024e94:	fb08 770c 	mla	r7, r8, ip, r7
 8024e98:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8024e9c:	fb0e fe0c 	mul.w	lr, lr, ip
 8024ea0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024ea4:	fb02 e303 	mla	r3, r2, r3, lr
 8024ea8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024eaa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024eac:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024eb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024eb2:	fb00 330a 	mla	r3, r0, sl, r3
 8024eb6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8024eba:	fb08 3c0c 	mla	ip, r8, ip, r3
 8024ebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024ec0:	f8b9 0000 	ldrh.w	r0, [r9]
 8024ec4:	4359      	muls	r1, r3
 8024ec6:	0a3f      	lsrs	r7, r7, #8
 8024ec8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024ecc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024ed0:	1c4b      	adds	r3, r1, #1
 8024ed2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024ed6:	ea47 070c 	orr.w	r7, r7, ip
 8024eda:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024ede:	1202      	asrs	r2, r0, #8
 8024ee0:	0c3b      	lsrs	r3, r7, #16
 8024ee2:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8024ee6:	b2c9      	uxtb	r1, r1
 8024ee8:	fb13 f305 	smulbb	r3, r3, r5
 8024eec:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024ef0:	fb02 3201 	mla	r2, r2, r1, r3
 8024ef4:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8024ef8:	10c3      	asrs	r3, r0, #3
 8024efa:	b2ff      	uxtb	r7, r7
 8024efc:	00c0      	lsls	r0, r0, #3
 8024efe:	b2c0      	uxtb	r0, r0
 8024f00:	fb17 f705 	smulbb	r7, r7, r5
 8024f04:	fb00 7001 	mla	r0, r0, r1, r7
 8024f08:	b292      	uxth	r2, r2
 8024f0a:	fb1c fc05 	smulbb	ip, ip, r5
 8024f0e:	b280      	uxth	r0, r0
 8024f10:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8024f14:	fb03 c301 	mla	r3, r3, r1, ip
 8024f18:	1c51      	adds	r1, r2, #1
 8024f1a:	f100 0c01 	add.w	ip, r0, #1
 8024f1e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024f22:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8024f26:	b29b      	uxth	r3, r3
 8024f28:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8024f2c:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8024f30:	ea42 020c 	orr.w	r2, r2, ip
 8024f34:	f103 0c01 	add.w	ip, r3, #1
 8024f38:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8024f3c:	095b      	lsrs	r3, r3, #5
 8024f3e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024f42:	431a      	orrs	r2, r3
 8024f44:	f8a9 2000 	strh.w	r2, [r9]
 8024f48:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8024f4a:	441c      	add	r4, r3
 8024f4c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024f4e:	f109 0902 	add.w	r9, r9, #2
 8024f52:	441e      	add	r6, r3
 8024f54:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024f58:	e647      	b.n	8024bea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8024f5a:	2800      	cmp	r0, #0
 8024f5c:	f43f aedf 	beq.w	8024d1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8024f60:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8024f64:	9109      	str	r1, [sp, #36]	; 0x24
 8024f66:	0e09      	lsrs	r1, r1, #24
 8024f68:	9112      	str	r1, [sp, #72]	; 0x48
 8024f6a:	e6d8      	b.n	8024d1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8024f6c:	b01d      	add	sp, #116	; 0x74
 8024f6e:	ecbd 8b08 	vpop	{d8-d11}
 8024f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08024f78 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8024f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f7c:	880e      	ldrh	r6, [r1, #0]
 8024f7e:	b085      	sub	sp, #20
 8024f80:	ea4f 2c26 	mov.w	ip, r6, asr #8
 8024f84:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
 8024f88:	4690      	mov	r8, r2
 8024f8a:	f00c 02f8 	and.w	r2, ip, #248	; 0xf8
 8024f8e:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 8024f92:	9200      	str	r2, [sp, #0]
 8024f94:	00f6      	lsls	r6, r6, #3
 8024f96:	f00c 02fc 	and.w	r2, ip, #252	; 0xfc
 8024f9a:	9201      	str	r2, [sp, #4]
 8024f9c:	2c00      	cmp	r4, #0
 8024f9e:	b2f2      	uxtb	r2, r6
 8024fa0:	fb04 5603 	mla	r6, r4, r3, r5
 8024fa4:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8024fa8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8024fac:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8024fb0:	9202      	str	r2, [sp, #8]
 8024fb2:	eb08 0c86 	add.w	ip, r8, r6, lsl #2
 8024fb6:	db36      	blt.n	8025026 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8024fb8:	45a6      	cmp	lr, r4
 8024fba:	dd34      	ble.n	8025026 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8024fbc:	2d00      	cmp	r5, #0
 8024fbe:	db30      	blt.n	8025022 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xaa>
 8024fc0:	42ab      	cmp	r3, r5
 8024fc2:	dd2e      	ble.n	8025022 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xaa>
 8024fc4:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
 8024fc8:	1c6e      	adds	r6, r5, #1
 8024fca:	d42f      	bmi.n	802502c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb4>
 8024fcc:	42b3      	cmp	r3, r6
 8024fce:	dd2d      	ble.n	802502c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb4>
 8024fd0:	b370      	cbz	r0, 8025030 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb8>
 8024fd2:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8024fd6:	3401      	adds	r4, #1
 8024fd8:	d42e      	bmi.n	8025038 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc0>
 8024fda:	45a6      	cmp	lr, r4
 8024fdc:	dd2c      	ble.n	8025038 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc0>
 8024fde:	b377      	cbz	r7, 802503e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc6>
 8024fe0:	2d00      	cmp	r5, #0
 8024fe2:	db27      	blt.n	8025034 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbc>
 8024fe4:	42ab      	cmp	r3, r5
 8024fe6:	dd25      	ble.n	8025034 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbc>
 8024fe8:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8024fec:	3501      	adds	r5, #1
 8024fee:	d429      	bmi.n	8025044 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 8024ff0:	42ab      	cmp	r3, r5
 8024ff2:	dd27      	ble.n	8025044 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 8024ff4:	b340      	cbz	r0, 8025048 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 8024ff6:	3301      	adds	r3, #1
 8024ff8:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8024ffc:	280f      	cmp	r0, #15
 8024ffe:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8025002:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8025006:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802500a:	ea4f 6813 	mov.w	r8, r3, lsr #24
 802500e:	d801      	bhi.n	8025014 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9c>
 8025010:	2f0f      	cmp	r7, #15
 8025012:	d91b      	bls.n	802504c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd4>
 8025014:	4b7d      	ldr	r3, [pc, #500]	; (802520c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x294>)
 8025016:	4a7e      	ldr	r2, [pc, #504]	; (8025210 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x298>)
 8025018:	487e      	ldr	r0, [pc, #504]	; (8025214 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 802501a:	f240 210d 	movw	r1, #525	; 0x20d
 802501e:	f001 fe01 	bl	8026c24 <__assert_func>
 8025022:	2200      	movs	r2, #0
 8025024:	e7d0      	b.n	8024fc8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x50>
 8025026:	2600      	movs	r6, #0
 8025028:	4632      	mov	r2, r6
 802502a:	e7d4      	b.n	8024fd6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 802502c:	2600      	movs	r6, #0
 802502e:	e7d2      	b.n	8024fd6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 8025030:	4606      	mov	r6, r0
 8025032:	e7d0      	b.n	8024fd6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 8025034:	2400      	movs	r4, #0
 8025036:	e7d9      	b.n	8024fec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x74>
 8025038:	2300      	movs	r3, #0
 802503a:	461c      	mov	r4, r3
 802503c:	e7de      	b.n	8024ffc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 802503e:	463b      	mov	r3, r7
 8025040:	463c      	mov	r4, r7
 8025042:	e7db      	b.n	8024ffc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 8025044:	2300      	movs	r3, #0
 8025046:	e7d9      	b.n	8024ffc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 8025048:	4603      	mov	r3, r0
 802504a:	e7d7      	b.n	8024ffc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 802504c:	b280      	uxth	r0, r0
 802504e:	b2bf      	uxth	r7, r7
 8025050:	fb00 fe07 	mul.w	lr, r0, r7
 8025054:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8025058:	0100      	lsls	r0, r0, #4
 802505a:	eba0 0c0e 	sub.w	ip, r0, lr
 802505e:	b2bf      	uxth	r7, r7
 8025060:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8025064:	fa1f fc8c 	uxth.w	ip, ip
 8025068:	1bed      	subs	r5, r5, r7
 802506a:	b2ad      	uxth	r5, r5
 802506c:	fb0c f00a 	mul.w	r0, ip, sl
 8025070:	fb05 000b 	mla	r0, r5, fp, r0
 8025074:	fb07 0009 	mla	r0, r7, r9, r0
 8025078:	fb0e 0008 	mla	r0, lr, r8, r0
 802507c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025080:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8025084:	9003      	str	r0, [sp, #12]
 8025086:	d018      	beq.n	80250ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x142>
 8025088:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 802508c:	fb0b f000 	mul.w	r0, fp, r0
 8025090:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025094:	fb0b fb02 	mul.w	fp, fp, r2
 8025098:	0a02      	lsrs	r2, r0, #8
 802509a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802509e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80250a2:	4402      	add	r2, r0
 80250a4:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80250a8:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80250ac:	0a12      	lsrs	r2, r2, #8
 80250ae:	0a00      	lsrs	r0, r0, #8
 80250b0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80250b4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80250b8:	4302      	orrs	r2, r0
 80250ba:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80250be:	d019      	beq.n	80250f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x17c>
 80250c0:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80250c4:	fb0a fb0b 	mul.w	fp, sl, fp
 80250c8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80250cc:	fb0a fa06 	mul.w	sl, sl, r6
 80250d0:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80250d4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80250d8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80250dc:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80250e0:	445e      	add	r6, fp
 80250e2:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80250e6:	0a36      	lsrs	r6, r6, #8
 80250e8:	0a00      	lsrs	r0, r0, #8
 80250ea:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80250ee:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80250f2:	4306      	orrs	r6, r0
 80250f4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80250f8:	d019      	beq.n	802512e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1b6>
 80250fa:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80250fe:	fb09 fa0a 	mul.w	sl, r9, sl
 8025102:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025106:	fb09 f904 	mul.w	r9, r9, r4
 802510a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802510e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025112:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025116:	f509 7080 	add.w	r0, r9, #256	; 0x100
 802511a:	4454      	add	r4, sl
 802511c:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8025120:	0a24      	lsrs	r4, r4, #8
 8025122:	0a00      	lsrs	r0, r0, #8
 8025124:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025128:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802512c:	4304      	orrs	r4, r0
 802512e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025132:	d019      	beq.n	8025168 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1f0>
 8025134:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8025138:	fb08 f909 	mul.w	r9, r8, r9
 802513c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025140:	fb08 f803 	mul.w	r8, r8, r3
 8025144:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8025148:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802514c:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8025150:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8025154:	444b      	add	r3, r9
 8025156:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802515a:	0a1b      	lsrs	r3, r3, #8
 802515c:	0a00      	lsrs	r0, r0, #8
 802515e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025162:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025166:	4303      	orrs	r3, r0
 8025168:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802516c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8025170:	fb0c f808 	mul.w	r8, ip, r8
 8025174:	fb05 8800 	mla	r8, r5, r0, r8
 8025178:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 802517c:	fb07 8800 	mla	r8, r7, r0, r8
 8025180:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8025184:	fb0e 8000 	mla	r0, lr, r0, r8
 8025188:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802518c:	0a00      	lsrs	r0, r0, #8
 802518e:	fb0c f606 	mul.w	r6, ip, r6
 8025192:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025196:	fb05 6202 	mla	r2, r5, r2, r6
 802519a:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 802519e:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 80251a2:	fb07 2700 	mla	r7, r7, r0, r2
 80251a6:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 80251aa:	9b03      	ldr	r3, [sp, #12]
 80251ac:	9c02      	ldr	r4, [sp, #8]
 80251ae:	9d01      	ldr	r5, [sp, #4]
 80251b0:	fb0e 7000 	mla	r0, lr, r0, r7
 80251b4:	43da      	mvns	r2, r3
 80251b6:	9b00      	ldr	r3, [sp, #0]
 80251b8:	b2d2      	uxtb	r2, r2
 80251ba:	0a00      	lsrs	r0, r0, #8
 80251bc:	4353      	muls	r3, r2
 80251be:	4354      	muls	r4, r2
 80251c0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80251c4:	ea48 0000 	orr.w	r0, r8, r0
 80251c8:	4355      	muls	r5, r2
 80251ca:	4622      	mov	r2, r4
 80251cc:	1c5c      	adds	r4, r3, #1
 80251ce:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 80251d2:	0c03      	lsrs	r3, r0, #16
 80251d4:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80251d8:	4b0f      	ldr	r3, [pc, #60]	; (8025218 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 80251da:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 80251de:	1c54      	adds	r4, r2, #1
 80251e0:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 80251e4:	b2c2      	uxtb	r2, r0
 80251e6:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80251ea:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 80251ee:	1c6a      	adds	r2, r5, #1
 80251f0:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 80251f4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80251f8:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80251fc:	00c0      	lsls	r0, r0, #3
 80251fe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025202:	4318      	orrs	r0, r3
 8025204:	8008      	strh	r0, [r1, #0]
 8025206:	b005      	add	sp, #20
 8025208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802520c:	0802c82a 	.word	0x0802c82a
 8025210:	0802cded 	.word	0x0802cded
 8025214:	0802c913 	.word	0x0802c913
 8025218:	fffff800 	.word	0xfffff800

0802521c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802521c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025220:	ed2d 8b08 	vpush	{d8-d11}
 8025224:	b09b      	sub	sp, #108	; 0x6c
 8025226:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 802522a:	9218      	str	r2, [sp, #96]	; 0x60
 802522c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802522e:	9116      	str	r1, [sp, #88]	; 0x58
 8025230:	9307      	str	r3, [sp, #28]
 8025232:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8025236:	9019      	str	r0, [sp, #100]	; 0x64
 8025238:	6850      	ldr	r0, [r2, #4]
 802523a:	6812      	ldr	r2, [r2, #0]
 802523c:	fb00 1303 	mla	r3, r0, r3, r1
 8025240:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025244:	930a      	str	r3, [sp, #40]	; 0x28
 8025246:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025248:	681b      	ldr	r3, [r3, #0]
 802524a:	930f      	str	r3, [sp, #60]	; 0x3c
 802524c:	eeb0 aa40 	vmov.f32	s20, s0
 8025250:	eef0 9a60 	vmov.f32	s19, s1
 8025254:	eeb0 9a41 	vmov.f32	s18, s2
 8025258:	eeb0 8a62 	vmov.f32	s16, s5
 802525c:	eef0 8a43 	vmov.f32	s17, s6
 8025260:	eef0 ba44 	vmov.f32	s23, s8
 8025264:	eeb0 ba64 	vmov.f32	s22, s9
 8025268:	eef0 aa45 	vmov.f32	s21, s10
 802526c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802526e:	2b00      	cmp	r3, #0
 8025270:	dc03      	bgt.n	802527a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8025272:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025274:	2b00      	cmp	r3, #0
 8025276:	f340 838a 	ble.w	802598e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x772>
 802527a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802527c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025280:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025284:	1e48      	subs	r0, r1, #1
 8025286:	1e57      	subs	r7, r2, #1
 8025288:	9b07      	ldr	r3, [sp, #28]
 802528a:	2b00      	cmp	r3, #0
 802528c:	f340 818b 	ble.w	80255a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8025290:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8025294:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025298:	d406      	bmi.n	80252a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802529a:	4584      	cmp	ip, r0
 802529c:	da04      	bge.n	80252a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802529e:	2b00      	cmp	r3, #0
 80252a0:	db02      	blt.n	80252a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80252a2:	42bb      	cmp	r3, r7
 80252a4:	f2c0 8180 	blt.w	80255a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 80252a8:	f11c 0c01 	adds.w	ip, ip, #1
 80252ac:	f100 8170 	bmi.w	8025590 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80252b0:	4561      	cmp	r1, ip
 80252b2:	f2c0 816d 	blt.w	8025590 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80252b6:	3301      	adds	r3, #1
 80252b8:	f100 816a 	bmi.w	8025590 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80252bc:	429a      	cmp	r2, r3
 80252be:	f2c0 8167 	blt.w	8025590 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80252c2:	9b07      	ldr	r3, [sp, #28]
 80252c4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80252c6:	9317      	str	r3, [sp, #92]	; 0x5c
 80252c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80252ca:	2b00      	cmp	r3, #0
 80252cc:	f340 8189 	ble.w	80255e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80252d0:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80252d2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80252d4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80252d8:	689b      	ldr	r3, [r3, #8]
 80252da:	1422      	asrs	r2, r4, #16
 80252dc:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80252e0:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80252e4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80252e8:	f100 81d8 	bmi.w	802569c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 80252ec:	f103 38ff 	add.w	r8, r3, #4294967295
 80252f0:	4542      	cmp	r2, r8
 80252f2:	f280 81d3 	bge.w	802569c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 80252f6:	f1bc 0f00 	cmp.w	ip, #0
 80252fa:	f2c0 81cf 	blt.w	802569c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 80252fe:	f10e 38ff 	add.w	r8, lr, #4294967295
 8025302:	45c4      	cmp	ip, r8
 8025304:	f280 81ca 	bge.w	802569c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8025308:	b21b      	sxth	r3, r3
 802530a:	fb0c 2203 	mla	r2, ip, r3, r2
 802530e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8025310:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8025314:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8025318:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802531c:	2900      	cmp	r1, #0
 802531e:	f000 81a6 	beq.w	802566e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025322:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8025326:	950b      	str	r5, [sp, #44]	; 0x2c
 8025328:	0e2d      	lsrs	r5, r5, #24
 802532a:	9512      	str	r5, [sp, #72]	; 0x48
 802532c:	b180      	cbz	r0, 8025350 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802532e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8025332:	3b01      	subs	r3, #1
 8025334:	009b      	lsls	r3, r3, #2
 8025336:	3304      	adds	r3, #4
 8025338:	eb08 0c03 	add.w	ip, r8, r3
 802533c:	f858 3003 	ldr.w	r3, [r8, r3]
 8025340:	9308      	str	r3, [sp, #32]
 8025342:	0e1b      	lsrs	r3, r3, #24
 8025344:	9310      	str	r3, [sp, #64]	; 0x40
 8025346:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802534a:	930c      	str	r3, [sp, #48]	; 0x30
 802534c:	0e1b      	lsrs	r3, r3, #24
 802534e:	9313      	str	r3, [sp, #76]	; 0x4c
 8025350:	b289      	uxth	r1, r1
 8025352:	b280      	uxth	r0, r0
 8025354:	fb01 f900 	mul.w	r9, r1, r0
 8025358:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802535c:	0109      	lsls	r1, r1, #4
 802535e:	eba1 0809 	sub.w	r8, r1, r9
 8025362:	b280      	uxth	r0, r0
 8025364:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8025368:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802536a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802536c:	fa1f f888 	uxth.w	r8, r8
 8025370:	1a09      	subs	r1, r1, r0
 8025372:	b289      	uxth	r1, r1
 8025374:	fb08 f303 	mul.w	r3, r8, r3
 8025378:	fb01 330e 	mla	r3, r1, lr, r3
 802537c:	fb00 3305 	mla	r3, r0, r5, r3
 8025380:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8025382:	fb09 3305 	mla	r3, r9, r5, r3
 8025386:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802538a:	2b00      	cmp	r3, #0
 802538c:	f000 80f7 	beq.w	802557e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8025390:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8025394:	d01b      	beq.n	80253ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 8025396:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802539a:	fb0e fa0a 	mul.w	sl, lr, sl
 802539e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80253a2:	fb0e fe02 	mul.w	lr, lr, r2
 80253a6:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80253aa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80253ae:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80253b2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80253b6:	4452      	add	r2, sl
 80253b8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80253bc:	0a12      	lsrs	r2, r2, #8
 80253be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80253c2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80253c6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80253ca:	ea42 020c 	orr.w	r2, r2, ip
 80253ce:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80253d0:	2dff      	cmp	r5, #255	; 0xff
 80253d2:	d021      	beq.n	8025418 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80253d4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80253d6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80253da:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80253dc:	fb05 fb0b 	mul.w	fp, r5, fp
 80253e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80253e2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80253e6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80253e8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80253ec:	fb05 fa0a 	mul.w	sl, r5, sl
 80253f0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80253f4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80253f8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80253fc:	44de      	add	lr, fp
 80253fe:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025402:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025406:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802540a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802540e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025412:	ea4e 050a 	orr.w	r5, lr, sl
 8025416:	950b      	str	r5, [sp, #44]	; 0x2c
 8025418:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802541a:	2dff      	cmp	r5, #255	; 0xff
 802541c:	d021      	beq.n	8025462 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 802541e:	9d08      	ldr	r5, [sp, #32]
 8025420:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8025424:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025426:	fb05 fb0b 	mul.w	fp, r5, fp
 802542a:	9d08      	ldr	r5, [sp, #32]
 802542c:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8025430:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025432:	fb05 fa0e 	mul.w	sl, r5, lr
 8025436:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802543a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802543e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025442:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025446:	44de      	add	lr, fp
 8025448:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802544c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025450:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025454:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025458:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802545c:	ea4e 050a 	orr.w	r5, lr, sl
 8025460:	9508      	str	r5, [sp, #32]
 8025462:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8025464:	2dff      	cmp	r5, #255	; 0xff
 8025466:	d021      	beq.n	80254ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8025468:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802546a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802546e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8025470:	fb05 fb0b 	mul.w	fp, r5, fp
 8025474:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025476:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802547a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802547c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025480:	fb05 fa0a 	mul.w	sl, r5, sl
 8025484:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025488:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802548c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025490:	44de      	add	lr, fp
 8025492:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025496:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802549a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802549e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80254a2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80254a6:	ea4e 050a 	orr.w	r5, lr, sl
 80254aa:	950c      	str	r5, [sp, #48]	; 0x30
 80254ac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80254ae:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80254b2:	9d08      	ldr	r5, [sp, #32]
 80254b4:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80254b8:	fb08 fc0c 	mul.w	ip, r8, ip
 80254bc:	fb01 cc0e 	mla	ip, r1, lr, ip
 80254c0:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80254c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80254c6:	fb00 cc0e 	mla	ip, r0, lr, ip
 80254ca:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80254ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80254d0:	fb09 cc0e 	mla	ip, r9, lr, ip
 80254d4:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80254d8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80254dc:	fb08 f80e 	mul.w	r8, r8, lr
 80254e0:	fb01 8202 	mla	r2, r1, r2, r8
 80254e4:	9908      	ldr	r1, [sp, #32]
 80254e6:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80254ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80254ec:	fb00 220a 	mla	r2, r0, sl, r2
 80254f0:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80254f4:	fb09 2900 	mla	r9, r9, r0, r2
 80254f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80254fc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025500:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025504:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025508:	ea4c 0c09 	orr.w	ip, ip, r9
 802550c:	2bff      	cmp	r3, #255	; 0xff
 802550e:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8025512:	f000 80b5 	beq.w	8025680 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 8025516:	8839      	ldrh	r1, [r7, #0]
 8025518:	43db      	mvns	r3, r3
 802551a:	ea4f 2e21 	mov.w	lr, r1, asr #8
 802551e:	fa5f f883 	uxtb.w	r8, r3
 8025522:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8025526:	fb0e fe08 	mul.w	lr, lr, r8
 802552a:	10c8      	asrs	r0, r1, #3
 802552c:	00cb      	lsls	r3, r1, #3
 802552e:	f10e 0101 	add.w	r1, lr, #1
 8025532:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8025536:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 802553a:	eb0e 2e11 	add.w	lr, lr, r1, lsr #8
 802553e:	b2db      	uxtb	r3, r3
 8025540:	4964      	ldr	r1, [pc, #400]	; (80256d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>)
 8025542:	fb03 f308 	mul.w	r3, r3, r8
 8025546:	ea01 2e0e 	and.w	lr, r1, lr, lsl #8
 802554a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802554e:	1c59      	adds	r1, r3, #1
 8025550:	fb00 f008 	mul.w	r0, r0, r8
 8025554:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8025558:	fa5f fc8c 	uxtb.w	ip, ip
 802555c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8025560:	1c43      	adds	r3, r0, #1
 8025562:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8025566:	b2d3      	uxtb	r3, r2
 8025568:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802556c:	00db      	lsls	r3, r3, #3
 802556e:	ea4e 0cdc 	orr.w	ip, lr, ip, lsr #3
 8025572:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025576:	ea4c 0c03 	orr.w	ip, ip, r3
 802557a:	f8a7 c000 	strh.w	ip, [r7]
 802557e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8025580:	441c      	add	r4, r3
 8025582:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025584:	441e      	add	r6, r3
 8025586:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025588:	3b01      	subs	r3, #1
 802558a:	3702      	adds	r7, #2
 802558c:	9317      	str	r3, [sp, #92]	; 0x5c
 802558e:	e69b      	b.n	80252c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8025590:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8025592:	441c      	add	r4, r3
 8025594:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025596:	441e      	add	r6, r3
 8025598:	9b07      	ldr	r3, [sp, #28]
 802559a:	3b01      	subs	r3, #1
 802559c:	9307      	str	r3, [sp, #28]
 802559e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80255a0:	3302      	adds	r3, #2
 80255a2:	930a      	str	r3, [sp, #40]	; 0x28
 80255a4:	e670      	b.n	8025288 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80255a6:	d023      	beq.n	80255f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 80255a8:	9b07      	ldr	r3, [sp, #28]
 80255aa:	982f      	ldr	r0, [sp, #188]	; 0xbc
 80255ac:	3b01      	subs	r3, #1
 80255ae:	fb00 4003 	mla	r0, r0, r3, r4
 80255b2:	1400      	asrs	r0, r0, #16
 80255b4:	f53f ae85 	bmi.w	80252c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80255b8:	3901      	subs	r1, #1
 80255ba:	4288      	cmp	r0, r1
 80255bc:	f6bf ae81 	bge.w	80252c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80255c0:	9930      	ldr	r1, [sp, #192]	; 0xc0
 80255c2:	fb01 6303 	mla	r3, r1, r3, r6
 80255c6:	141b      	asrs	r3, r3, #16
 80255c8:	f53f ae7b 	bmi.w	80252c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80255cc:	3a01      	subs	r2, #1
 80255ce:	4293      	cmp	r3, r2
 80255d0:	f6bf ae77 	bge.w	80252c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80255d4:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80255d8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80255dc:	f1bb 0f00 	cmp.w	fp, #0
 80255e0:	dc7a      	bgt.n	80256d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 80255e2:	9b07      	ldr	r3, [sp, #28]
 80255e4:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80255e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80255ea:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80255ee:	930a      	str	r3, [sp, #40]	; 0x28
 80255f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80255f2:	2b00      	cmp	r3, #0
 80255f4:	f340 81cb 	ble.w	802598e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x772>
 80255f8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80255fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025600:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025604:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025606:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802560a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802560e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025612:	eef0 6a48 	vmov.f32	s13, s16
 8025616:	ee69 7a27 	vmul.f32	s15, s18, s15
 802561a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802561e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025622:	ee16 4a90 	vmov	r4, s13
 8025626:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802562a:	eef0 6a68 	vmov.f32	s13, s17
 802562e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025632:	ee18 2a10 	vmov	r2, s16
 8025636:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802563a:	fb92 f3f3 	sdiv	r3, r2, r3
 802563e:	ee18 2a90 	vmov	r2, s17
 8025642:	932f      	str	r3, [sp, #188]	; 0xbc
 8025644:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025646:	fb92 f3f3 	sdiv	r3, r2, r3
 802564a:	9330      	str	r3, [sp, #192]	; 0xc0
 802564c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802564e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8025650:	3b01      	subs	r3, #1
 8025652:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025656:	9316      	str	r3, [sp, #88]	; 0x58
 8025658:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802565a:	bf08      	it	eq
 802565c:	4613      	moveq	r3, r2
 802565e:	ee16 6a90 	vmov	r6, s13
 8025662:	9307      	str	r3, [sp, #28]
 8025664:	eef0 8a67 	vmov.f32	s17, s15
 8025668:	eeb0 8a47 	vmov.f32	s16, s14
 802566c:	e5fe      	b.n	802526c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 802566e:	2800      	cmp	r0, #0
 8025670:	f43f ae6e 	beq.w	8025350 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8025674:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8025678:	9308      	str	r3, [sp, #32]
 802567a:	0e1b      	lsrs	r3, r3, #24
 802567c:	9310      	str	r3, [sp, #64]	; 0x40
 802567e:	e667      	b.n	8025350 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8025680:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8025684:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8025688:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802568c:	f022 0207 	bic.w	r2, r2, #7
 8025690:	431a      	orrs	r2, r3
 8025692:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8025696:	ea42 0c0c 	orr.w	ip, r2, ip
 802569a:	e76e      	b.n	802557a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 802569c:	f112 0801 	adds.w	r8, r2, #1
 80256a0:	f53f af6d 	bmi.w	802557e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80256a4:	4543      	cmp	r3, r8
 80256a6:	f6ff af6a 	blt.w	802557e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80256aa:	f11c 0801 	adds.w	r8, ip, #1
 80256ae:	f53f af66 	bmi.w	802557e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80256b2:	45c6      	cmp	lr, r8
 80256b4:	f6ff af63 	blt.w	802557e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80256b8:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80256bc:	fa0f f28e 	sxth.w	r2, lr
 80256c0:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80256c4:	9200      	str	r2, [sp, #0]
 80256c6:	b21b      	sxth	r3, r3
 80256c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80256ca:	9819      	ldr	r0, [sp, #100]	; 0x64
 80256cc:	4639      	mov	r1, r7
 80256ce:	f7ff fc53 	bl	8024f78 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 80256d2:	e754      	b.n	802557e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80256d4:	fffff800 	.word	0xfffff800
 80256d8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80256da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80256dc:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 80256e0:	1421      	asrs	r1, r4, #16
 80256e2:	1433      	asrs	r3, r6, #16
 80256e4:	fb07 1303 	mla	r3, r7, r3, r1
 80256e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80256ea:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80256ee:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80256f2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80256f6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80256fa:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80256fe:	2a00      	cmp	r2, #0
 8025700:	f000 812e 	beq.w	8025960 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8025704:	684d      	ldr	r5, [r1, #4]
 8025706:	950d      	str	r5, [sp, #52]	; 0x34
 8025708:	0e2d      	lsrs	r5, r5, #24
 802570a:	9514      	str	r5, [sp, #80]	; 0x50
 802570c:	b178      	cbz	r0, 802572e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 802570e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8025712:	3f01      	subs	r7, #1
 8025714:	00bf      	lsls	r7, r7, #2
 8025716:	3704      	adds	r7, #4
 8025718:	eb01 0e07 	add.w	lr, r1, r7
 802571c:	59c9      	ldr	r1, [r1, r7]
 802571e:	9109      	str	r1, [sp, #36]	; 0x24
 8025720:	0e09      	lsrs	r1, r1, #24
 8025722:	9111      	str	r1, [sp, #68]	; 0x44
 8025724:	f8de 1004 	ldr.w	r1, [lr, #4]
 8025728:	910e      	str	r1, [sp, #56]	; 0x38
 802572a:	0e09      	lsrs	r1, r1, #24
 802572c:	9115      	str	r1, [sp, #84]	; 0x54
 802572e:	b292      	uxth	r2, r2
 8025730:	b280      	uxth	r0, r0
 8025732:	fb02 f900 	mul.w	r9, r2, r0
 8025736:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802573a:	0112      	lsls	r2, r2, #4
 802573c:	eba2 0e09 	sub.w	lr, r2, r9
 8025740:	b280      	uxth	r0, r0
 8025742:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8025746:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025748:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802574a:	fa1f fe8e 	uxth.w	lr, lr
 802574e:	1a09      	subs	r1, r1, r0
 8025750:	b289      	uxth	r1, r1
 8025752:	fb0e f202 	mul.w	r2, lr, r2
 8025756:	fb01 220c 	mla	r2, r1, ip, r2
 802575a:	fb00 2205 	mla	r2, r0, r5, r2
 802575e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8025760:	fb09 2205 	mla	r2, r9, r5, r2
 8025764:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025768:	2a00      	cmp	r2, #0
 802576a:	f000 80f0 	beq.w	802594e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x732>
 802576e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025772:	d019      	beq.n	80257a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 8025774:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025778:	fb0c fa0a 	mul.w	sl, ip, sl
 802577c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025780:	fb0c fc03 	mul.w	ip, ip, r3
 8025784:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025788:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802578c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025790:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8025794:	4453      	add	r3, sl
 8025796:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802579a:	0a1b      	lsrs	r3, r3, #8
 802579c:	0a3f      	lsrs	r7, r7, #8
 802579e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80257a2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80257a6:	433b      	orrs	r3, r7
 80257a8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80257aa:	2dff      	cmp	r5, #255	; 0xff
 80257ac:	d020      	beq.n	80257f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d4>
 80257ae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80257b0:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80257b4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80257b6:	436f      	muls	r7, r5
 80257b8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80257ba:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80257be:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80257c0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80257c4:	fb05 fa0a 	mul.w	sl, r5, sl
 80257c8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80257cc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80257d0:	44bc      	add	ip, r7
 80257d2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80257d6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80257da:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80257de:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80257e2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80257e6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80257ea:	ea4c 050a 	orr.w	r5, ip, sl
 80257ee:	950d      	str	r5, [sp, #52]	; 0x34
 80257f0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80257f2:	2dff      	cmp	r5, #255	; 0xff
 80257f4:	d020      	beq.n	8025838 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 80257f6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80257f8:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80257fc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80257fe:	436f      	muls	r7, r5
 8025800:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8025802:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8025806:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8025808:	fb05 fa0c 	mul.w	sl, r5, ip
 802580c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025810:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025814:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025818:	44bc      	add	ip, r7
 802581a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802581e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025822:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025826:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802582a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802582e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025832:	ea4c 050a 	orr.w	r5, ip, sl
 8025836:	9509      	str	r5, [sp, #36]	; 0x24
 8025838:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802583a:	2dff      	cmp	r5, #255	; 0xff
 802583c:	d020      	beq.n	8025880 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x664>
 802583e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025840:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8025844:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8025846:	436f      	muls	r7, r5
 8025848:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802584a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802584e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8025850:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025854:	fb05 fa0a 	mul.w	sl, r5, sl
 8025858:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802585c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025860:	44bc      	add	ip, r7
 8025862:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025866:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802586a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802586e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025872:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025876:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802587a:	ea4c 050a 	orr.w	r5, ip, sl
 802587e:	950e      	str	r5, [sp, #56]	; 0x38
 8025880:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025882:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8025886:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8025888:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802588c:	fb0e f707 	mul.w	r7, lr, r7
 8025890:	fb01 770c 	mla	r7, r1, ip, r7
 8025894:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8025898:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802589a:	fb00 770c 	mla	r7, r0, ip, r7
 802589e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80258a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80258a4:	fb09 770c 	mla	r7, r9, ip, r7
 80258a8:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80258ac:	fb0e fe0c 	mul.w	lr, lr, ip
 80258b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80258b4:	fb01 e303 	mla	r3, r1, r3, lr
 80258b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80258ba:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80258be:	990e      	ldr	r1, [sp, #56]	; 0x38
 80258c0:	fb00 330a 	mla	r3, r0, sl, r3
 80258c4:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80258c8:	fb09 3c0c 	mla	ip, r9, ip, r3
 80258cc:	0a3f      	lsrs	r7, r7, #8
 80258ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80258d2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80258d6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80258da:	ea47 070c 	orr.w	r7, r7, ip
 80258de:	2aff      	cmp	r2, #255	; 0xff
 80258e0:	ea4f 2317 	mov.w	r3, r7, lsr #8
 80258e4:	d045      	beq.n	8025972 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x756>
 80258e6:	f8b8 1000 	ldrh.w	r1, [r8]
 80258ea:	43d2      	mvns	r2, r2
 80258ec:	ea4f 2c21 	mov.w	ip, r1, asr #8
 80258f0:	fa5f fe82 	uxtb.w	lr, r2
 80258f4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80258f8:	fb0c fc0e 	mul.w	ip, ip, lr
 80258fc:	10c8      	asrs	r0, r1, #3
 80258fe:	00ca      	lsls	r2, r1, #3
 8025900:	f10c 0101 	add.w	r1, ip, #1
 8025904:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 8025908:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802590c:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8025910:	b2d2      	uxtb	r2, r2
 8025912:	4921      	ldr	r1, [pc, #132]	; (8025998 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>)
 8025914:	fb02 f20e 	mul.w	r2, r2, lr
 8025918:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 802591c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025920:	1c51      	adds	r1, r2, #1
 8025922:	fb00 f00e 	mul.w	r0, r0, lr
 8025926:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802592a:	b2ff      	uxtb	r7, r7
 802592c:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8025930:	1c42      	adds	r2, r0, #1
 8025932:	ea4c 0cd7 	orr.w	ip, ip, r7, lsr #3
 8025936:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802593a:	b2df      	uxtb	r7, r3
 802593c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8025940:	00ff      	lsls	r7, r7, #3
 8025942:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025946:	ea4c 0c07 	orr.w	ip, ip, r7
 802594a:	f8a8 c000 	strh.w	ip, [r8]
 802594e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8025950:	441c      	add	r4, r3
 8025952:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025954:	f108 0802 	add.w	r8, r8, #2
 8025958:	441e      	add	r6, r3
 802595a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802595e:	e63d      	b.n	80255dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8025960:	2800      	cmp	r0, #0
 8025962:	f43f aee4 	beq.w	802572e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8025966:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802596a:	9109      	str	r1, [sp, #36]	; 0x24
 802596c:	0e09      	lsrs	r1, r1, #24
 802596e:	9111      	str	r1, [sp, #68]	; 0x44
 8025970:	e6dd      	b.n	802572e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8025972:	097a      	lsrs	r2, r7, #5
 8025974:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8025978:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802597c:	f023 0307 	bic.w	r3, r3, #7
 8025980:	4313      	orrs	r3, r2
 8025982:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8025986:	431f      	orrs	r7, r3
 8025988:	f8a8 7000 	strh.w	r7, [r8]
 802598c:	e7df      	b.n	802594e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x732>
 802598e:	b01b      	add	sp, #108	; 0x6c
 8025990:	ecbd 8b08 	vpop	{d8-d11}
 8025994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025998:	fffff800 	.word	0xfffff800

0802599c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 802599c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80259a0:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 80259a4:	2c00      	cmp	r4, #0
 80259a6:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80259aa:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80259ae:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80259b2:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 80259b6:	fb04 ce03 	mla	lr, r4, r3, ip
 80259ba:	db60      	blt.n	8025a7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 80259bc:	45a1      	cmp	r9, r4
 80259be:	dd5e      	ble.n	8025a7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 80259c0:	f1bc 0f00 	cmp.w	ip, #0
 80259c4:	db59      	blt.n	8025a7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 80259c6:	45e0      	cmp	r8, ip
 80259c8:	dd57      	ble.n	8025a7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 80259ca:	ea4f 005e 	mov.w	r0, lr, lsr #1
 80259ce:	f01e 0f01 	tst.w	lr, #1
 80259d2:	5c16      	ldrb	r6, [r2, r0]
 80259d4:	bf0c      	ite	eq
 80259d6:	f006 060f 	andeq.w	r6, r6, #15
 80259da:	1136      	asrne	r6, r6, #4
 80259dc:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80259e0:	b2f6      	uxtb	r6, r6
 80259e2:	f11c 0001 	adds.w	r0, ip, #1
 80259e6:	d44d      	bmi.n	8025a84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 80259e8:	4580      	cmp	r8, r0
 80259ea:	dd4b      	ble.n	8025a84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 80259ec:	2d00      	cmp	r5, #0
 80259ee:	d04b      	beq.n	8025a88 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 80259f0:	f10e 0a01 	add.w	sl, lr, #1
 80259f4:	ea4f 005a 	mov.w	r0, sl, lsr #1
 80259f8:	f01a 0f01 	tst.w	sl, #1
 80259fc:	5c10      	ldrb	r0, [r2, r0]
 80259fe:	bf0c      	ite	eq
 8025a00:	f000 000f 	andeq.w	r0, r0, #15
 8025a04:	1100      	asrne	r0, r0, #4
 8025a06:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025a0a:	b2c0      	uxtb	r0, r0
 8025a0c:	3401      	adds	r4, #1
 8025a0e:	d43f      	bmi.n	8025a90 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8025a10:	45a1      	cmp	r9, r4
 8025a12:	dd3d      	ble.n	8025a90 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8025a14:	2f00      	cmp	r7, #0
 8025a16:	f000 809e 	beq.w	8025b56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ba>
 8025a1a:	f1bc 0f00 	cmp.w	ip, #0
 8025a1e:	db35      	blt.n	8025a8c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8025a20:	45e0      	cmp	r8, ip
 8025a22:	dd33      	ble.n	8025a8c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8025a24:	eb03 090e 	add.w	r9, r3, lr
 8025a28:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8025a2c:	f019 0f01 	tst.w	r9, #1
 8025a30:	5d14      	ldrb	r4, [r2, r4]
 8025a32:	bf0c      	ite	eq
 8025a34:	f004 040f 	andeq.w	r4, r4, #15
 8025a38:	1124      	asrne	r4, r4, #4
 8025a3a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8025a3e:	b2e4      	uxtb	r4, r4
 8025a40:	f11c 0c01 	adds.w	ip, ip, #1
 8025a44:	d427      	bmi.n	8025a96 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8025a46:	45e0      	cmp	r8, ip
 8025a48:	dd25      	ble.n	8025a96 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8025a4a:	b335      	cbz	r5, 8025a9a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 8025a4c:	3301      	adds	r3, #1
 8025a4e:	449e      	add	lr, r3
 8025a50:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8025a54:	f01e 0f01 	tst.w	lr, #1
 8025a58:	5cd2      	ldrb	r2, [r2, r3]
 8025a5a:	bf0c      	ite	eq
 8025a5c:	f002 020f 	andeq.w	r2, r2, #15
 8025a60:	1112      	asrne	r2, r2, #4
 8025a62:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8025a66:	b2d3      	uxtb	r3, r2
 8025a68:	2d0f      	cmp	r5, #15
 8025a6a:	d917      	bls.n	8025a9c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 8025a6c:	4b3c      	ldr	r3, [pc, #240]	; (8025b60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c4>)
 8025a6e:	4a3d      	ldr	r2, [pc, #244]	; (8025b64 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8025a70:	483d      	ldr	r0, [pc, #244]	; (8025b68 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8025a72:	f240 210d 	movw	r1, #525	; 0x20d
 8025a76:	f001 f8d5 	bl	8026c24 <__assert_func>
 8025a7a:	2600      	movs	r6, #0
 8025a7c:	e7b1      	b.n	80259e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 8025a7e:	2000      	movs	r0, #0
 8025a80:	4606      	mov	r6, r0
 8025a82:	e7c3      	b.n	8025a0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8025a84:	2000      	movs	r0, #0
 8025a86:	e7c1      	b.n	8025a0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8025a88:	4628      	mov	r0, r5
 8025a8a:	e7bf      	b.n	8025a0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8025a8c:	2400      	movs	r4, #0
 8025a8e:	e7d7      	b.n	8025a40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 8025a90:	2300      	movs	r3, #0
 8025a92:	461c      	mov	r4, r3
 8025a94:	e7e8      	b.n	8025a68 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8025a96:	2300      	movs	r3, #0
 8025a98:	e7e6      	b.n	8025a68 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8025a9a:	462b      	mov	r3, r5
 8025a9c:	2f0f      	cmp	r7, #15
 8025a9e:	d8e5      	bhi.n	8025a6c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8025aa0:	b2ad      	uxth	r5, r5
 8025aa2:	b2bf      	uxth	r7, r7
 8025aa4:	fb05 fc07 	mul.w	ip, r5, r7
 8025aa8:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8025aac:	012d      	lsls	r5, r5, #4
 8025aae:	b2bf      	uxth	r7, r7
 8025ab0:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8025ab4:	eba5 050c 	sub.w	r5, r5, ip
 8025ab8:	1bd2      	subs	r2, r2, r7
 8025aba:	b2ad      	uxth	r5, r5
 8025abc:	b292      	uxth	r2, r2
 8025abe:	4368      	muls	r0, r5
 8025ac0:	fb06 0002 	mla	r0, r6, r2, r0
 8025ac4:	fb07 0404 	mla	r4, r7, r4, r0
 8025ac8:	fb0c 4303 	mla	r3, ip, r3, r4
 8025acc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025ad0:	2b00      	cmp	r3, #0
 8025ad2:	d03e      	beq.n	8025b52 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1b6>
 8025ad4:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 8025ad8:	4a24      	ldr	r2, [pc, #144]	; (8025b6c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1d0>)
 8025ada:	4343      	muls	r3, r0
 8025adc:	1c58      	adds	r0, r3, #1
 8025ade:	6816      	ldr	r6, [r2, #0]
 8025ae0:	880a      	ldrh	r2, [r1, #0]
 8025ae2:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025ae6:	1200      	asrs	r0, r0, #8
 8025ae8:	b284      	uxth	r4, r0
 8025aea:	1215      	asrs	r5, r2, #8
 8025aec:	43c0      	mvns	r0, r0
 8025aee:	b2c3      	uxtb	r3, r0
 8025af0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8025af4:	0a30      	lsrs	r0, r6, #8
 8025af6:	fb15 f503 	smulbb	r5, r5, r3
 8025afa:	10d7      	asrs	r7, r2, #3
 8025afc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025b00:	fb00 5004 	mla	r0, r0, r4, r5
 8025b04:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8025b08:	08f5      	lsrs	r5, r6, #3
 8025b0a:	00d2      	lsls	r2, r2, #3
 8025b0c:	fb17 f703 	smulbb	r7, r7, r3
 8025b10:	b2d2      	uxtb	r2, r2
 8025b12:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8025b16:	00f6      	lsls	r6, r6, #3
 8025b18:	fb05 7504 	mla	r5, r5, r4, r7
 8025b1c:	fb12 f303 	smulbb	r3, r2, r3
 8025b20:	b2f6      	uxtb	r6, r6
 8025b22:	fb06 3304 	mla	r3, r6, r4, r3
 8025b26:	b2ad      	uxth	r5, r5
 8025b28:	b29a      	uxth	r2, r3
 8025b2a:	b280      	uxth	r0, r0
 8025b2c:	1c6b      	adds	r3, r5, #1
 8025b2e:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8025b32:	1c44      	adds	r4, r0, #1
 8025b34:	095b      	lsrs	r3, r3, #5
 8025b36:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8025b3a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8025b3e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025b42:	4303      	orrs	r3, r0
 8025b44:	1c50      	adds	r0, r2, #1
 8025b46:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8025b4a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025b4e:	4313      	orrs	r3, r2
 8025b50:	800b      	strh	r3, [r1, #0]
 8025b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025b56:	2d0f      	cmp	r5, #15
 8025b58:	d888      	bhi.n	8025a6c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8025b5a:	463b      	mov	r3, r7
 8025b5c:	463c      	mov	r4, r7
 8025b5e:	e79f      	b.n	8025aa0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 8025b60:	0802c82a 	.word	0x0802c82a
 8025b64:	0802cded 	.word	0x0802cded
 8025b68:	0802c913 	.word	0x0802c913
 8025b6c:	2000a0f8 	.word	0x2000a0f8

08025b70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b74:	ed2d 8b08 	vpush	{d8-d11}
 8025b78:	b097      	sub	sp, #92	; 0x5c
 8025b7a:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 8025b7e:	9214      	str	r2, [sp, #80]	; 0x50
 8025b80:	9309      	str	r3, [sp, #36]	; 0x24
 8025b82:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025b84:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8025b88:	910d      	str	r1, [sp, #52]	; 0x34
 8025b8a:	930e      	str	r3, [sp, #56]	; 0x38
 8025b8c:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8025b90:	9015      	str	r0, [sp, #84]	; 0x54
 8025b92:	6850      	ldr	r0, [r2, #4]
 8025b94:	6812      	ldr	r2, [r2, #0]
 8025b96:	fb00 1303 	mla	r3, r0, r3, r1
 8025b9a:	eb02 0a43 	add.w	sl, r2, r3, lsl #1
 8025b9e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025ba0:	689b      	ldr	r3, [r3, #8]
 8025ba2:	3301      	adds	r3, #1
 8025ba4:	f023 0301 	bic.w	r3, r3, #1
 8025ba8:	930a      	str	r3, [sp, #40]	; 0x28
 8025baa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025bac:	681f      	ldr	r7, [r3, #0]
 8025bae:	eeb0 aa40 	vmov.f32	s20, s0
 8025bb2:	eef0 9a60 	vmov.f32	s19, s1
 8025bb6:	eeb0 9a41 	vmov.f32	s18, s2
 8025bba:	eeb0 8a62 	vmov.f32	s16, s5
 8025bbe:	eef0 8a43 	vmov.f32	s17, s6
 8025bc2:	eef0 ba44 	vmov.f32	s23, s8
 8025bc6:	eeb0 ba64 	vmov.f32	s22, s9
 8025bca:	eef0 aa45 	vmov.f32	s21, s10
 8025bce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025bd0:	2b00      	cmp	r3, #0
 8025bd2:	dc03      	bgt.n	8025bdc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025bd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025bd6:	2b00      	cmp	r3, #0
 8025bd8:	f340 826a 	ble.w	80260b0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>
 8025bdc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025bde:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025be2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025be6:	1e48      	subs	r0, r1, #1
 8025be8:	f102 3cff 	add.w	ip, r2, #4294967295
 8025bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025bee:	2b00      	cmp	r3, #0
 8025bf0:	f340 80f3 	ble.w	8025dda <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8025bf4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8025bf8:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025bfc:	d406      	bmi.n	8025c0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8025bfe:	4586      	cmp	lr, r0
 8025c00:	da04      	bge.n	8025c0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8025c02:	2b00      	cmp	r3, #0
 8025c04:	db02      	blt.n	8025c0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8025c06:	4563      	cmp	r3, ip
 8025c08:	f2c0 80e8 	blt.w	8025ddc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8025c0c:	f11e 0e01 	adds.w	lr, lr, #1
 8025c10:	f100 80d9 	bmi.w	8025dc6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 8025c14:	4571      	cmp	r1, lr
 8025c16:	f2c0 80d6 	blt.w	8025dc6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 8025c1a:	3301      	adds	r3, #1
 8025c1c:	f100 80d3 	bmi.w	8025dc6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 8025c20:	429a      	cmp	r2, r3
 8025c22:	f2c0 80d0 	blt.w	8025dc6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 8025c26:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8025c2a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8025c2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8025c30:	46d0      	mov	r8, sl
 8025c32:	f1b9 0f00 	cmp.w	r9, #0
 8025c36:	f340 80f0 	ble.w	8025e1a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 8025c3a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025c3c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8025c40:	1423      	asrs	r3, r4, #16
 8025c42:	ea4f 4026 	mov.w	r0, r6, asr #16
 8025c46:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025c4a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8025c4e:	f100 8139 	bmi.w	8025ec4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8025c52:	f10c 3bff 	add.w	fp, ip, #4294967295
 8025c56:	455b      	cmp	r3, fp
 8025c58:	f280 8134 	bge.w	8025ec4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8025c5c:	2800      	cmp	r0, #0
 8025c5e:	f2c0 8131 	blt.w	8025ec4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8025c62:	f10e 3bff 	add.w	fp, lr, #4294967295
 8025c66:	4558      	cmp	r0, fp
 8025c68:	f280 812c 	bge.w	8025ec4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8025c6c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8025c6e:	fb00 3305 	mla	r3, r0, r5, r3
 8025c72:	0858      	lsrs	r0, r3, #1
 8025c74:	07dd      	lsls	r5, r3, #31
 8025c76:	f817 c000 	ldrb.w	ip, [r7, r0]
 8025c7a:	bf54      	ite	pl
 8025c7c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025c80:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025c84:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025c88:	fa5f fc8c 	uxtb.w	ip, ip
 8025c8c:	2a00      	cmp	r2, #0
 8025c8e:	f000 8108 	beq.w	8025ea2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8025c92:	1c58      	adds	r0, r3, #1
 8025c94:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8025c98:	07c0      	lsls	r0, r0, #31
 8025c9a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8025c9e:	bf54      	ite	pl
 8025ca0:	f00e 0e0f 	andpl.w	lr, lr, #15
 8025ca4:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8025ca8:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8025cac:	fa5f f08e 	uxtb.w	r0, lr
 8025cb0:	9010      	str	r0, [sp, #64]	; 0x40
 8025cb2:	b1d1      	cbz	r1, 8025cea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8025cb4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8025cb6:	4403      	add	r3, r0
 8025cb8:	0858      	lsrs	r0, r3, #1
 8025cba:	07dd      	lsls	r5, r3, #31
 8025cbc:	5c38      	ldrb	r0, [r7, r0]
 8025cbe:	bf54      	ite	pl
 8025cc0:	f000 000f 	andpl.w	r0, r0, #15
 8025cc4:	1100      	asrmi	r0, r0, #4
 8025cc6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025cca:	3301      	adds	r3, #1
 8025ccc:	b2c0      	uxtb	r0, r0
 8025cce:	900b      	str	r0, [sp, #44]	; 0x2c
 8025cd0:	0858      	lsrs	r0, r3, #1
 8025cd2:	07dd      	lsls	r5, r3, #31
 8025cd4:	f817 e000 	ldrb.w	lr, [r7, r0]
 8025cd8:	bf54      	ite	pl
 8025cda:	f00e 030f 	andpl.w	r3, lr, #15
 8025cde:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8025ce2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025ce6:	b2db      	uxtb	r3, r3
 8025ce8:	9311      	str	r3, [sp, #68]	; 0x44
 8025cea:	b292      	uxth	r2, r2
 8025cec:	b289      	uxth	r1, r1
 8025cee:	fb02 f301 	mul.w	r3, r2, r1
 8025cf2:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8025cf6:	0112      	lsls	r2, r2, #4
 8025cf8:	b289      	uxth	r1, r1
 8025cfa:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8025cfe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025d00:	1ad2      	subs	r2, r2, r3
 8025d02:	1a40      	subs	r0, r0, r1
 8025d04:	b292      	uxth	r2, r2
 8025d06:	436a      	muls	r2, r5
 8025d08:	b280      	uxth	r0, r0
 8025d0a:	fb0c 2c00 	mla	ip, ip, r0, r2
 8025d0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8025d10:	fb01 c102 	mla	r1, r1, r2, ip
 8025d14:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025d16:	fb03 1302 	mla	r3, r3, r2, r1
 8025d1a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025d1e:	2b00      	cmp	r3, #0
 8025d20:	d048      	beq.n	8025db4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8025d22:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025d24:	4a78      	ldr	r2, [pc, #480]	; (8025f08 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>)
 8025d26:	434b      	muls	r3, r1
 8025d28:	1c59      	adds	r1, r3, #1
 8025d2a:	f8d2 e000 	ldr.w	lr, [r2]
 8025d2e:	f8b8 2000 	ldrh.w	r2, [r8]
 8025d32:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8025d36:	121b      	asrs	r3, r3, #8
 8025d38:	b299      	uxth	r1, r3
 8025d3a:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8025d3e:	43db      	mvns	r3, r3
 8025d40:	b2db      	uxtb	r3, r3
 8025d42:	ea4f 201e 	mov.w	r0, lr, lsr #8
 8025d46:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8025d4a:	fb1c fc03 	smulbb	ip, ip, r3
 8025d4e:	ea4f 0be2 	mov.w	fp, r2, asr #3
 8025d52:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025d56:	fb00 c001 	mla	r0, r0, r1, ip
 8025d5a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8025d5e:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 8025d62:	fb1b fb03 	smulbb	fp, fp, r3
 8025d66:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8025d6a:	00d2      	lsls	r2, r2, #3
 8025d6c:	fb0c bc01 	mla	ip, ip, r1, fp
 8025d70:	b2d2      	uxtb	r2, r2
 8025d72:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8025d76:	fb12 f303 	smulbb	r3, r2, r3
 8025d7a:	fa1f fc8c 	uxth.w	ip, ip
 8025d7e:	fa5f fe8e 	uxtb.w	lr, lr
 8025d82:	b280      	uxth	r0, r0
 8025d84:	fb0e 3101 	mla	r1, lr, r1, r3
 8025d88:	f10c 0201 	add.w	r2, ip, #1
 8025d8c:	b289      	uxth	r1, r1
 8025d8e:	1c43      	adds	r3, r0, #1
 8025d90:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 8025d94:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8025d98:	0952      	lsrs	r2, r2, #5
 8025d9a:	1c4b      	adds	r3, r1, #1
 8025d9c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025da0:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8025da4:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8025da8:	4310      	orrs	r0, r2
 8025daa:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8025dae:	4308      	orrs	r0, r1
 8025db0:	f8a8 0000 	strh.w	r0, [r8]
 8025db4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8025db6:	441c      	add	r4, r3
 8025db8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025dba:	f108 0802 	add.w	r8, r8, #2
 8025dbe:	441e      	add	r6, r3
 8025dc0:	f109 39ff 	add.w	r9, r9, #4294967295
 8025dc4:	e735      	b.n	8025c32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8025dc6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8025dc8:	441c      	add	r4, r3
 8025dca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025dcc:	441e      	add	r6, r3
 8025dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025dd0:	3b01      	subs	r3, #1
 8025dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8025dd4:	f10a 0a02 	add.w	sl, sl, #2
 8025dd8:	e708      	b.n	8025bec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8025dda:	d023      	beq.n	8025e24 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8025ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025dde:	982b      	ldr	r0, [sp, #172]	; 0xac
 8025de0:	3b01      	subs	r3, #1
 8025de2:	fb00 4003 	mla	r0, r0, r3, r4
 8025de6:	1400      	asrs	r0, r0, #16
 8025de8:	f53f af1d 	bmi.w	8025c26 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025dec:	3901      	subs	r1, #1
 8025dee:	4288      	cmp	r0, r1
 8025df0:	f6bf af19 	bge.w	8025c26 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025df4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8025df6:	fb01 6303 	mla	r3, r1, r3, r6
 8025dfa:	141b      	asrs	r3, r3, #16
 8025dfc:	f53f af13 	bmi.w	8025c26 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025e00:	3a01      	subs	r2, #1
 8025e02:	4293      	cmp	r3, r2
 8025e04:	f6bf af0f 	bge.w	8025c26 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025e08:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8025e0c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8025e10:	930f      	str	r3, [sp, #60]	; 0x3c
 8025e12:	46d1      	mov	r9, sl
 8025e14:	f1bb 0f00 	cmp.w	fp, #0
 8025e18:	dc78      	bgt.n	8025f0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8025e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025e1c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8025e20:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8025e24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025e26:	2b00      	cmp	r3, #0
 8025e28:	f340 8142 	ble.w	80260b0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>
 8025e2c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025e30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025e34:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025e38:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025e3a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025e3e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025e42:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025e46:	eef0 6a48 	vmov.f32	s13, s16
 8025e4a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025e4e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025e52:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025e56:	ee16 4a90 	vmov	r4, s13
 8025e5a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025e5e:	eef0 6a68 	vmov.f32	s13, s17
 8025e62:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025e66:	ee18 2a10 	vmov	r2, s16
 8025e6a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025e6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025e72:	ee18 2a90 	vmov	r2, s17
 8025e76:	932b      	str	r3, [sp, #172]	; 0xac
 8025e78:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025e7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8025e7e:	932c      	str	r3, [sp, #176]	; 0xb0
 8025e80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025e82:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025e84:	3b01      	subs	r3, #1
 8025e86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025e8a:	930d      	str	r3, [sp, #52]	; 0x34
 8025e8c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025e8e:	bf08      	it	eq
 8025e90:	4613      	moveq	r3, r2
 8025e92:	ee16 6a90 	vmov	r6, s13
 8025e96:	9309      	str	r3, [sp, #36]	; 0x24
 8025e98:	eef0 8a67 	vmov.f32	s17, s15
 8025e9c:	eeb0 8a47 	vmov.f32	s16, s14
 8025ea0:	e695      	b.n	8025bce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8025ea2:	2900      	cmp	r1, #0
 8025ea4:	f43f af21 	beq.w	8025cea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8025ea8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8025eaa:	4418      	add	r0, r3
 8025eac:	0843      	lsrs	r3, r0, #1
 8025eae:	07c0      	lsls	r0, r0, #31
 8025eb0:	5cfb      	ldrb	r3, [r7, r3]
 8025eb2:	bf54      	ite	pl
 8025eb4:	f003 030f 	andpl.w	r3, r3, #15
 8025eb8:	111b      	asrmi	r3, r3, #4
 8025eba:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025ebe:	b2db      	uxtb	r3, r3
 8025ec0:	930b      	str	r3, [sp, #44]	; 0x2c
 8025ec2:	e712      	b.n	8025cea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8025ec4:	f113 0b01 	adds.w	fp, r3, #1
 8025ec8:	f53f af74 	bmi.w	8025db4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8025ecc:	45dc      	cmp	ip, fp
 8025ece:	f6ff af71 	blt.w	8025db4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8025ed2:	f110 0b01 	adds.w	fp, r0, #1
 8025ed6:	f53f af6d 	bmi.w	8025db4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8025eda:	45de      	cmp	lr, fp
 8025edc:	f6ff af6a 	blt.w	8025db4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8025ee0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025ee2:	9302      	str	r3, [sp, #8]
 8025ee4:	fa0f f38e 	sxth.w	r3, lr
 8025ee8:	9301      	str	r3, [sp, #4]
 8025eea:	fa0f f38c 	sxth.w	r3, ip
 8025eee:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8025ef2:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8025ef6:	9300      	str	r3, [sp, #0]
 8025ef8:	463a      	mov	r2, r7
 8025efa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025efc:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025efe:	4641      	mov	r1, r8
 8025f00:	f7ff fd4c 	bl	802599c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8025f04:	e756      	b.n	8025db4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8025f06:	bf00      	nop
 8025f08:	2000a0f8 	.word	0x2000a0f8
 8025f0c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8025f0e:	1422      	asrs	r2, r4, #16
 8025f10:	1433      	asrs	r3, r6, #16
 8025f12:	fb05 2303 	mla	r3, r5, r3, r2
 8025f16:	085a      	lsrs	r2, r3, #1
 8025f18:	07dd      	lsls	r5, r3, #31
 8025f1a:	5cba      	ldrb	r2, [r7, r2]
 8025f1c:	bf54      	ite	pl
 8025f1e:	f002 020f 	andpl.w	r2, r2, #15
 8025f22:	1112      	asrmi	r2, r2, #4
 8025f24:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8025f28:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8025f2c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8025f30:	b2d2      	uxtb	r2, r2
 8025f32:	2900      	cmp	r1, #0
 8025f34:	f000 80a8 	beq.w	8026088 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8025f38:	f103 0e01 	add.w	lr, r3, #1
 8025f3c:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8025f40:	f01e 0f01 	tst.w	lr, #1
 8025f44:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025f48:	bf0c      	ite	eq
 8025f4a:	f00c 0c0f 	andeq.w	ip, ip, #15
 8025f4e:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8025f52:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025f56:	fa5f f58c 	uxtb.w	r5, ip
 8025f5a:	9512      	str	r5, [sp, #72]	; 0x48
 8025f5c:	b300      	cbz	r0, 8025fa0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x430>
 8025f5e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8025f60:	442b      	add	r3, r5
 8025f62:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025f66:	07dd      	lsls	r5, r3, #31
 8025f68:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025f6c:	bf54      	ite	pl
 8025f6e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025f72:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025f76:	3301      	adds	r3, #1
 8025f78:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025f7c:	fa5f f58c 	uxtb.w	r5, ip
 8025f80:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025f84:	950c      	str	r5, [sp, #48]	; 0x30
 8025f86:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025f8a:	07dd      	lsls	r5, r3, #31
 8025f8c:	bf54      	ite	pl
 8025f8e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025f92:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025f96:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025f9a:	fa5f f38c 	uxtb.w	r3, ip
 8025f9e:	9313      	str	r3, [sp, #76]	; 0x4c
 8025fa0:	b289      	uxth	r1, r1
 8025fa2:	b280      	uxth	r0, r0
 8025fa4:	fb01 f300 	mul.w	r3, r1, r0
 8025fa8:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8025fac:	0109      	lsls	r1, r1, #4
 8025fae:	b280      	uxth	r0, r0
 8025fb0:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8025fb4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8025fb6:	1ac9      	subs	r1, r1, r3
 8025fb8:	ebac 0c00 	sub.w	ip, ip, r0
 8025fbc:	b289      	uxth	r1, r1
 8025fbe:	4369      	muls	r1, r5
 8025fc0:	fa1f fc8c 	uxth.w	ip, ip
 8025fc4:	fb02 120c 	mla	r2, r2, ip, r1
 8025fc8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025fca:	fb00 2001 	mla	r0, r0, r1, r2
 8025fce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8025fd0:	fb03 0302 	mla	r3, r3, r2, r0
 8025fd4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025fd8:	2b00      	cmp	r3, #0
 8025fda:	d04c      	beq.n	8026076 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8025fdc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025fde:	4a37      	ldr	r2, [pc, #220]	; (80260bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>)
 8025fe0:	434b      	muls	r3, r1
 8025fe2:	1c59      	adds	r1, r3, #1
 8025fe4:	f8d2 e000 	ldr.w	lr, [r2]
 8025fe8:	f8b9 2000 	ldrh.w	r2, [r9]
 8025fec:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8025ff0:	121b      	asrs	r3, r3, #8
 8025ff2:	b299      	uxth	r1, r3
 8025ff4:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8025ff8:	43db      	mvns	r3, r3
 8025ffa:	b2db      	uxtb	r3, r3
 8025ffc:	ea4f 201e 	mov.w	r0, lr, lsr #8
 8026000:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8026004:	fb1c fc03 	smulbb	ip, ip, r3
 8026008:	ea4f 08e2 	mov.w	r8, r2, asr #3
 802600c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026010:	fb00 c001 	mla	r0, r0, r1, ip
 8026014:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8026018:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 802601c:	fb18 f803 	smulbb	r8, r8, r3
 8026020:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8026024:	00d2      	lsls	r2, r2, #3
 8026026:	fb0c 8c01 	mla	ip, ip, r1, r8
 802602a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802602e:	b2d2      	uxtb	r2, r2
 8026030:	fa1f fc8c 	uxth.w	ip, ip
 8026034:	fa5f fe8e 	uxtb.w	lr, lr
 8026038:	fb12 f203 	smulbb	r2, r2, r3
 802603c:	b280      	uxth	r0, r0
 802603e:	fb0e 2201 	mla	r2, lr, r1, r2
 8026042:	f10c 0801 	add.w	r8, ip, #1
 8026046:	b292      	uxth	r2, r2
 8026048:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 802604c:	f100 0801 	add.w	r8, r0, #1
 8026050:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8026054:	eb08 2010 	add.w	r0, r8, r0, lsr #8
 8026058:	1c51      	adds	r1, r2, #1
 802605a:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802605e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8026062:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8026066:	ea4c 0c00 	orr.w	ip, ip, r0
 802606a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802606e:	ea4c 0c02 	orr.w	ip, ip, r2
 8026072:	f8a9 c000 	strh.w	ip, [r9]
 8026076:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026078:	441c      	add	r4, r3
 802607a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802607c:	f109 0902 	add.w	r9, r9, #2
 8026080:	441e      	add	r6, r3
 8026082:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026086:	e6c5      	b.n	8025e14 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8026088:	2800      	cmp	r0, #0
 802608a:	d089      	beq.n	8025fa0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x430>
 802608c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802608e:	442b      	add	r3, r5
 8026090:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8026094:	07db      	lsls	r3, r3, #31
 8026096:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802609a:	bf54      	ite	pl
 802609c:	f00c 0c0f 	andpl.w	ip, ip, #15
 80260a0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80260a4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80260a8:	fa5f f38c 	uxtb.w	r3, ip
 80260ac:	930c      	str	r3, [sp, #48]	; 0x30
 80260ae:	e777      	b.n	8025fa0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x430>
 80260b0:	b017      	add	sp, #92	; 0x5c
 80260b2:	ecbd 8b08 	vpop	{d8-d11}
 80260b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80260ba:	bf00      	nop
 80260bc:	2000a0f8 	.word	0x2000a0f8

080260c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 80260c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80260c4:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 80260c8:	2c00      	cmp	r4, #0
 80260ca:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80260ce:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80260d2:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80260d6:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 80260da:	fb04 ce03 	mla	lr, r4, r3, ip
 80260de:	db60      	blt.n	80261a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 80260e0:	45a1      	cmp	r9, r4
 80260e2:	dd5e      	ble.n	80261a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 80260e4:	f1bc 0f00 	cmp.w	ip, #0
 80260e8:	db59      	blt.n	802619e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 80260ea:	45e0      	cmp	r8, ip
 80260ec:	dd57      	ble.n	802619e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 80260ee:	ea4f 005e 	mov.w	r0, lr, lsr #1
 80260f2:	f01e 0f01 	tst.w	lr, #1
 80260f6:	5c16      	ldrb	r6, [r2, r0]
 80260f8:	bf0c      	ite	eq
 80260fa:	f006 060f 	andeq.w	r6, r6, #15
 80260fe:	1136      	asrne	r6, r6, #4
 8026100:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8026104:	b2f6      	uxtb	r6, r6
 8026106:	f11c 0001 	adds.w	r0, ip, #1
 802610a:	d44d      	bmi.n	80261a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802610c:	4580      	cmp	r8, r0
 802610e:	dd4b      	ble.n	80261a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8026110:	2d00      	cmp	r5, #0
 8026112:	d04b      	beq.n	80261ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 8026114:	f10e 0a01 	add.w	sl, lr, #1
 8026118:	ea4f 005a 	mov.w	r0, sl, lsr #1
 802611c:	f01a 0f01 	tst.w	sl, #1
 8026120:	5c10      	ldrb	r0, [r2, r0]
 8026122:	bf0c      	ite	eq
 8026124:	f000 000f 	andeq.w	r0, r0, #15
 8026128:	1100      	asrne	r0, r0, #4
 802612a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802612e:	b2c0      	uxtb	r0, r0
 8026130:	3401      	adds	r4, #1
 8026132:	d43f      	bmi.n	80261b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8026134:	45a1      	cmp	r9, r4
 8026136:	dd3d      	ble.n	80261b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8026138:	2f00      	cmp	r7, #0
 802613a:	f000 8097 	beq.w	802626c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1ac>
 802613e:	f1bc 0f00 	cmp.w	ip, #0
 8026142:	db35      	blt.n	80261b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8026144:	45e0      	cmp	r8, ip
 8026146:	dd33      	ble.n	80261b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8026148:	eb03 090e 	add.w	r9, r3, lr
 802614c:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8026150:	f019 0f01 	tst.w	r9, #1
 8026154:	5d14      	ldrb	r4, [r2, r4]
 8026156:	bf0c      	ite	eq
 8026158:	f004 040f 	andeq.w	r4, r4, #15
 802615c:	1124      	asrne	r4, r4, #4
 802615e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8026162:	b2e4      	uxtb	r4, r4
 8026164:	f11c 0c01 	adds.w	ip, ip, #1
 8026168:	d427      	bmi.n	80261ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802616a:	45e0      	cmp	r8, ip
 802616c:	dd25      	ble.n	80261ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802616e:	b335      	cbz	r5, 80261be <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 8026170:	3301      	adds	r3, #1
 8026172:	449e      	add	lr, r3
 8026174:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8026178:	f01e 0f01 	tst.w	lr, #1
 802617c:	5cd2      	ldrb	r2, [r2, r3]
 802617e:	bf0c      	ite	eq
 8026180:	f002 020f 	andeq.w	r2, r2, #15
 8026184:	1112      	asrne	r2, r2, #4
 8026186:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802618a:	b2d3      	uxtb	r3, r2
 802618c:	2d0f      	cmp	r5, #15
 802618e:	d917      	bls.n	80261c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 8026190:	4b39      	ldr	r3, [pc, #228]	; (8026278 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 8026192:	4a3a      	ldr	r2, [pc, #232]	; (802627c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 8026194:	483a      	ldr	r0, [pc, #232]	; (8026280 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c0>)
 8026196:	f240 210d 	movw	r1, #525	; 0x20d
 802619a:	f000 fd43 	bl	8026c24 <__assert_func>
 802619e:	2600      	movs	r6, #0
 80261a0:	e7b1      	b.n	8026106 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 80261a2:	2000      	movs	r0, #0
 80261a4:	4606      	mov	r6, r0
 80261a6:	e7c3      	b.n	8026130 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 80261a8:	2000      	movs	r0, #0
 80261aa:	e7c1      	b.n	8026130 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 80261ac:	4628      	mov	r0, r5
 80261ae:	e7bf      	b.n	8026130 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 80261b0:	2400      	movs	r4, #0
 80261b2:	e7d7      	b.n	8026164 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 80261b4:	2300      	movs	r3, #0
 80261b6:	461c      	mov	r4, r3
 80261b8:	e7e8      	b.n	802618c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 80261ba:	2300      	movs	r3, #0
 80261bc:	e7e6      	b.n	802618c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 80261be:	462b      	mov	r3, r5
 80261c0:	2f0f      	cmp	r7, #15
 80261c2:	d8e5      	bhi.n	8026190 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 80261c4:	b2ad      	uxth	r5, r5
 80261c6:	b2bf      	uxth	r7, r7
 80261c8:	fb05 fc07 	mul.w	ip, r5, r7
 80261cc:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 80261d0:	012d      	lsls	r5, r5, #4
 80261d2:	b2bf      	uxth	r7, r7
 80261d4:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 80261d8:	eba5 050c 	sub.w	r5, r5, ip
 80261dc:	1bd2      	subs	r2, r2, r7
 80261de:	b2ad      	uxth	r5, r5
 80261e0:	b292      	uxth	r2, r2
 80261e2:	4368      	muls	r0, r5
 80261e4:	fb06 0002 	mla	r0, r6, r2, r0
 80261e8:	fb07 0404 	mla	r4, r7, r4, r0
 80261ec:	fb0c 4303 	mla	r3, ip, r3, r4
 80261f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80261f4:	2b00      	cmp	r3, #0
 80261f6:	d037      	beq.n	8026268 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>
 80261f8:	4a22      	ldr	r2, [pc, #136]	; (8026284 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c4>)
 80261fa:	6816      	ldr	r6, [r2, #0]
 80261fc:	880a      	ldrh	r2, [r1, #0]
 80261fe:	b298      	uxth	r0, r3
 8026200:	1215      	asrs	r5, r2, #8
 8026202:	43db      	mvns	r3, r3
 8026204:	b2db      	uxtb	r3, r3
 8026206:	0a34      	lsrs	r4, r6, #8
 8026208:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802620c:	fb15 f503 	smulbb	r5, r5, r3
 8026210:	10d7      	asrs	r7, r2, #3
 8026212:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8026216:	fb04 5400 	mla	r4, r4, r0, r5
 802621a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802621e:	08f5      	lsrs	r5, r6, #3
 8026220:	fb17 f703 	smulbb	r7, r7, r3
 8026224:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8026228:	00d2      	lsls	r2, r2, #3
 802622a:	fb05 7500 	mla	r5, r5, r0, r7
 802622e:	b2d2      	uxtb	r2, r2
 8026230:	00f6      	lsls	r6, r6, #3
 8026232:	fb12 f303 	smulbb	r3, r2, r3
 8026236:	b2ad      	uxth	r5, r5
 8026238:	b2f6      	uxtb	r6, r6
 802623a:	b2a4      	uxth	r4, r4
 802623c:	fb06 3000 	mla	r0, r6, r0, r3
 8026240:	1c6b      	adds	r3, r5, #1
 8026242:	b280      	uxth	r0, r0
 8026244:	1c62      	adds	r2, r4, #1
 8026246:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 802624a:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802624e:	095b      	lsrs	r3, r3, #5
 8026250:	1c42      	adds	r2, r0, #1
 8026252:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026256:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802625a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802625e:	4323      	orrs	r3, r4
 8026260:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8026264:	4303      	orrs	r3, r0
 8026266:	800b      	strh	r3, [r1, #0]
 8026268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802626c:	2d0f      	cmp	r5, #15
 802626e:	d88f      	bhi.n	8026190 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8026270:	463b      	mov	r3, r7
 8026272:	463c      	mov	r4, r7
 8026274:	e7a6      	b.n	80261c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 8026276:	bf00      	nop
 8026278:	0802c82a 	.word	0x0802c82a
 802627c:	0802cded 	.word	0x0802cded
 8026280:	0802c913 	.word	0x0802c913
 8026284:	2000a0f8 	.word	0x2000a0f8

08026288 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802628c:	ed2d 8b08 	vpush	{d8-d11}
 8026290:	b093      	sub	sp, #76	; 0x4c
 8026292:	461d      	mov	r5, r3
 8026294:	920c      	str	r2, [sp, #48]	; 0x30
 8026296:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8026298:	9107      	str	r1, [sp, #28]
 802629a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802629e:	9011      	str	r0, [sp, #68]	; 0x44
 80262a0:	6850      	ldr	r0, [r2, #4]
 80262a2:	6812      	ldr	r2, [r2, #0]
 80262a4:	fb00 1303 	mla	r3, r0, r3, r1
 80262a8:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80262ac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80262ae:	689b      	ldr	r3, [r3, #8]
 80262b0:	3301      	adds	r3, #1
 80262b2:	f023 0301 	bic.w	r3, r3, #1
 80262b6:	9306      	str	r3, [sp, #24]
 80262b8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80262ba:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 80262be:	681f      	ldr	r7, [r3, #0]
 80262c0:	eeb0 aa40 	vmov.f32	s20, s0
 80262c4:	eef0 9a60 	vmov.f32	s19, s1
 80262c8:	eeb0 9a41 	vmov.f32	s18, s2
 80262cc:	eeb0 8a62 	vmov.f32	s16, s5
 80262d0:	eef0 8a43 	vmov.f32	s17, s6
 80262d4:	eef0 ba44 	vmov.f32	s23, s8
 80262d8:	eeb0 ba64 	vmov.f32	s22, s9
 80262dc:	eef0 aa45 	vmov.f32	s21, s10
 80262e0:	9b07      	ldr	r3, [sp, #28]
 80262e2:	2b00      	cmp	r3, #0
 80262e4:	dc03      	bgt.n	80262ee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80262e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80262e8:	2b00      	cmp	r3, #0
 80262ea:	f340 8261 	ble.w	80267b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 80262ee:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80262f0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80262f4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80262f8:	1e48      	subs	r0, r1, #1
 80262fa:	f102 3cff 	add.w	ip, r2, #4294967295
 80262fe:	2d00      	cmp	r5, #0
 8026300:	f340 80ef 	ble.w	80264e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8026304:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8026308:	ea4f 4326 	mov.w	r3, r6, asr #16
 802630c:	d406      	bmi.n	802631c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802630e:	4586      	cmp	lr, r0
 8026310:	da04      	bge.n	802631c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8026312:	2b00      	cmp	r3, #0
 8026314:	db02      	blt.n	802631c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8026316:	4563      	cmp	r3, ip
 8026318:	f2c0 80e4 	blt.w	80264e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 802631c:	f11e 0e01 	adds.w	lr, lr, #1
 8026320:	f100 80d7 	bmi.w	80264d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8026324:	4571      	cmp	r1, lr
 8026326:	f2c0 80d4 	blt.w	80264d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 802632a:	3301      	adds	r3, #1
 802632c:	f100 80d1 	bmi.w	80264d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8026330:	429a      	cmp	r2, r3
 8026332:	f2c0 80ce 	blt.w	80264d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8026336:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802633a:	9509      	str	r5, [sp, #36]	; 0x24
 802633c:	46c8      	mov	r8, r9
 802633e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026340:	2b00      	cmp	r3, #0
 8026342:	f340 80ec 	ble.w	802651e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8026346:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802634a:	9308      	str	r3, [sp, #32]
 802634c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802634e:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8026352:	1423      	asrs	r3, r4, #16
 8026354:	ea4f 4026 	mov.w	r0, r6, asr #16
 8026358:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802635c:	f100 813b 	bmi.w	80265d6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8026360:	f10c 3bff 	add.w	fp, ip, #4294967295
 8026364:	455b      	cmp	r3, fp
 8026366:	f280 8136 	bge.w	80265d6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 802636a:	2800      	cmp	r0, #0
 802636c:	f2c0 8133 	blt.w	80265d6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8026370:	f10e 3bff 	add.w	fp, lr, #4294967295
 8026374:	4558      	cmp	r0, fp
 8026376:	f280 812e 	bge.w	80265d6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 802637a:	9a06      	ldr	r2, [sp, #24]
 802637c:	fb00 3302 	mla	r3, r0, r2, r3
 8026380:	0858      	lsrs	r0, r3, #1
 8026382:	07da      	lsls	r2, r3, #31
 8026384:	f817 c000 	ldrb.w	ip, [r7, r0]
 8026388:	9a08      	ldr	r2, [sp, #32]
 802638a:	bf54      	ite	pl
 802638c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8026390:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8026394:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026398:	fa5f fc8c 	uxtb.w	ip, ip
 802639c:	2a00      	cmp	r2, #0
 802639e:	f000 8101 	beq.w	80265a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80263a2:	1c58      	adds	r0, r3, #1
 80263a4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80263a8:	07c0      	lsls	r0, r0, #31
 80263aa:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80263ae:	bf54      	ite	pl
 80263b0:	f00e 0e0f 	andpl.w	lr, lr, #15
 80263b4:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80263b8:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80263bc:	fa5f fe8e 	uxtb.w	lr, lr
 80263c0:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80263c4:	b1b9      	cbz	r1, 80263f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 80263c6:	4453      	add	r3, sl
 80263c8:	0858      	lsrs	r0, r3, #1
 80263ca:	07da      	lsls	r2, r3, #31
 80263cc:	5c38      	ldrb	r0, [r7, r0]
 80263ce:	bf54      	ite	pl
 80263d0:	f000 000f 	andpl.w	r0, r0, #15
 80263d4:	1100      	asrmi	r0, r0, #4
 80263d6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80263da:	b2c0      	uxtb	r0, r0
 80263dc:	900a      	str	r0, [sp, #40]	; 0x28
 80263de:	1c58      	adds	r0, r3, #1
 80263e0:	0843      	lsrs	r3, r0, #1
 80263e2:	07c2      	lsls	r2, r0, #31
 80263e4:	5cfb      	ldrb	r3, [r7, r3]
 80263e6:	bf54      	ite	pl
 80263e8:	f003 030f 	andpl.w	r3, r3, #15
 80263ec:	111b      	asrmi	r3, r3, #4
 80263ee:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80263f2:	b2db      	uxtb	r3, r3
 80263f4:	930e      	str	r3, [sp, #56]	; 0x38
 80263f6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80263fa:	b289      	uxth	r1, r1
 80263fc:	fb02 f301 	mul.w	r3, r2, r1
 8026400:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8026404:	0112      	lsls	r2, r2, #4
 8026406:	b289      	uxth	r1, r1
 8026408:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802640c:	1a40      	subs	r0, r0, r1
 802640e:	fa1f fe80 	uxth.w	lr, r0
 8026412:	1ad2      	subs	r2, r2, r3
 8026414:	980d      	ldr	r0, [sp, #52]	; 0x34
 8026416:	b292      	uxth	r2, r2
 8026418:	4342      	muls	r2, r0
 802641a:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802641e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026420:	fb01 c102 	mla	r1, r1, r2, ip
 8026424:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026426:	fb03 1302 	mla	r3, r3, r2, r1
 802642a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802642e:	2b00      	cmp	r3, #0
 8026430:	d045      	beq.n	80264be <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8026432:	4a79      	ldr	r2, [pc, #484]	; (8026618 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>)
 8026434:	6811      	ldr	r1, [r2, #0]
 8026436:	2bff      	cmp	r3, #255	; 0xff
 8026438:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 802643c:	ea4f 02d1 	mov.w	r2, r1, lsr #3
 8026440:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8026444:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8026448:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802644c:	b2c9      	uxtb	r1, r1
 802644e:	f000 80ba 	beq.w	80265c6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8026452:	f8b8 c000 	ldrh.w	ip, [r8]
 8026456:	fa1f fb83 	uxth.w	fp, r3
 802645a:	ea4f 202c 	mov.w	r0, ip, asr #8
 802645e:	43db      	mvns	r3, r3
 8026460:	b2db      	uxtb	r3, r3
 8026462:	fb1e fe0b 	smulbb	lr, lr, fp
 8026466:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802646a:	fb00 e003 	mla	r0, r0, r3, lr
 802646e:	ea4f 0eec 	mov.w	lr, ip, asr #3
 8026472:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8026476:	fb12 f20b 	smulbb	r2, r2, fp
 802647a:	fb0e 2203 	mla	r2, lr, r3, r2
 802647e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8026482:	b292      	uxth	r2, r2
 8026484:	fb11 f10b 	smulbb	r1, r1, fp
 8026488:	fa5f fc8c 	uxtb.w	ip, ip
 802648c:	b280      	uxth	r0, r0
 802648e:	fb0c 1303 	mla	r3, ip, r3, r1
 8026492:	f102 0e01 	add.w	lr, r2, #1
 8026496:	b29b      	uxth	r3, r3
 8026498:	1c41      	adds	r1, r0, #1
 802649a:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 802649e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80264a2:	0952      	lsrs	r2, r2, #5
 80264a4:	1c59      	adds	r1, r3, #1
 80264a6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80264aa:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80264ae:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80264b2:	4310      	orrs	r0, r2
 80264b4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80264b8:	4318      	orrs	r0, r3
 80264ba:	f8a8 0000 	strh.w	r0, [r8]
 80264be:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80264c0:	441c      	add	r4, r3
 80264c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80264c4:	441e      	add	r6, r3
 80264c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80264c8:	3b01      	subs	r3, #1
 80264ca:	f108 0802 	add.w	r8, r8, #2
 80264ce:	9309      	str	r3, [sp, #36]	; 0x24
 80264d0:	e735      	b.n	802633e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80264d2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80264d4:	441c      	add	r4, r3
 80264d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80264d8:	3d01      	subs	r5, #1
 80264da:	441e      	add	r6, r3
 80264dc:	f109 0902 	add.w	r9, r9, #2
 80264e0:	e70d      	b.n	80262fe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80264e2:	d020      	beq.n	8026526 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80264e4:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80264e6:	1e6b      	subs	r3, r5, #1
 80264e8:	fb00 4003 	mla	r0, r0, r3, r4
 80264ec:	1400      	asrs	r0, r0, #16
 80264ee:	f53f af22 	bmi.w	8026336 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80264f2:	3901      	subs	r1, #1
 80264f4:	4288      	cmp	r0, r1
 80264f6:	f6bf af1e 	bge.w	8026336 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80264fa:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80264fc:	fb01 6303 	mla	r3, r1, r3, r6
 8026500:	141b      	asrs	r3, r3, #16
 8026502:	f53f af18 	bmi.w	8026336 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8026506:	3a01      	subs	r2, #1
 8026508:	4293      	cmp	r3, r2
 802650a:	f6bf af14 	bge.w	8026336 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802650e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8026512:	9308      	str	r3, [sp, #32]
 8026514:	46aa      	mov	sl, r5
 8026516:	46c8      	mov	r8, r9
 8026518:	f1ba 0f00 	cmp.w	sl, #0
 802651c:	dc7e      	bgt.n	802661c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802651e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8026522:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8026526:	9b07      	ldr	r3, [sp, #28]
 8026528:	2b00      	cmp	r3, #0
 802652a:	f340 8141 	ble.w	80267b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 802652e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026532:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026536:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802653a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802653c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026540:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026544:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026548:	eef0 6a48 	vmov.f32	s13, s16
 802654c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026550:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026554:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026558:	ee16 4a90 	vmov	r4, s13
 802655c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026560:	eef0 6a68 	vmov.f32	s13, s17
 8026564:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026568:	ee18 2a10 	vmov	r2, s16
 802656c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026570:	fb92 f3f3 	sdiv	r3, r2, r3
 8026574:	ee18 2a90 	vmov	r2, s17
 8026578:	9327      	str	r3, [sp, #156]	; 0x9c
 802657a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802657c:	fb92 f3f3 	sdiv	r3, r2, r3
 8026580:	9328      	str	r3, [sp, #160]	; 0xa0
 8026582:	9b07      	ldr	r3, [sp, #28]
 8026584:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026586:	3b01      	subs	r3, #1
 8026588:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802658c:	9307      	str	r3, [sp, #28]
 802658e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026590:	ee16 6a90 	vmov	r6, s13
 8026594:	bf14      	ite	ne
 8026596:	461d      	movne	r5, r3
 8026598:	4615      	moveq	r5, r2
 802659a:	eef0 8a67 	vmov.f32	s17, s15
 802659e:	eeb0 8a47 	vmov.f32	s16, s14
 80265a2:	e69d      	b.n	80262e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80265a4:	2900      	cmp	r1, #0
 80265a6:	f43f af26 	beq.w	80263f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 80265aa:	eb0a 0003 	add.w	r0, sl, r3
 80265ae:	0843      	lsrs	r3, r0, #1
 80265b0:	07c0      	lsls	r0, r0, #31
 80265b2:	5cfb      	ldrb	r3, [r7, r3]
 80265b4:	bf54      	ite	pl
 80265b6:	f003 030f 	andpl.w	r3, r3, #15
 80265ba:	111b      	asrmi	r3, r3, #4
 80265bc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80265c0:	b2db      	uxtb	r3, r3
 80265c2:	930a      	str	r3, [sp, #40]	; 0x28
 80265c4:	e717      	b.n	80263f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 80265c6:	00d2      	lsls	r2, r2, #3
 80265c8:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 80265cc:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 80265d0:	f8a8 1000 	strh.w	r1, [r8]
 80265d4:	e773      	b.n	80264be <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80265d6:	f113 0b01 	adds.w	fp, r3, #1
 80265da:	f53f af70 	bmi.w	80264be <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80265de:	45dc      	cmp	ip, fp
 80265e0:	f6ff af6d 	blt.w	80264be <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80265e4:	f110 0b01 	adds.w	fp, r0, #1
 80265e8:	f53f af69 	bmi.w	80264be <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80265ec:	45de      	cmp	lr, fp
 80265ee:	f6ff af66 	blt.w	80264be <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80265f2:	9a08      	ldr	r2, [sp, #32]
 80265f4:	9302      	str	r3, [sp, #8]
 80265f6:	fa0f f38e 	sxth.w	r3, lr
 80265fa:	9301      	str	r3, [sp, #4]
 80265fc:	fa0f f38c 	sxth.w	r3, ip
 8026600:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8026604:	9105      	str	r1, [sp, #20]
 8026606:	9300      	str	r3, [sp, #0]
 8026608:	463a      	mov	r2, r7
 802660a:	4653      	mov	r3, sl
 802660c:	4641      	mov	r1, r8
 802660e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026610:	f7ff fd56 	bl	80260c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8026614:	e753      	b.n	80264be <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8026616:	bf00      	nop
 8026618:	2000a0f8 	.word	0x2000a0f8
 802661c:	9906      	ldr	r1, [sp, #24]
 802661e:	1422      	asrs	r2, r4, #16
 8026620:	1433      	asrs	r3, r6, #16
 8026622:	fb01 2303 	mla	r3, r1, r3, r2
 8026626:	085a      	lsrs	r2, r3, #1
 8026628:	07d9      	lsls	r1, r3, #31
 802662a:	5cba      	ldrb	r2, [r7, r2]
 802662c:	bf54      	ite	pl
 802662e:	f002 020f 	andpl.w	r2, r2, #15
 8026632:	1112      	asrmi	r2, r2, #4
 8026634:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8026638:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802663c:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026640:	b2d2      	uxtb	r2, r2
 8026642:	2800      	cmp	r0, #0
 8026644:	f000 809b 	beq.w	802677e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f6>
 8026648:	f103 0e01 	add.w	lr, r3, #1
 802664c:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8026650:	f01e 0f01 	tst.w	lr, #1
 8026654:	5c79      	ldrb	r1, [r7, r1]
 8026656:	bf0c      	ite	eq
 8026658:	f001 010f 	andeq.w	r1, r1, #15
 802665c:	1109      	asrne	r1, r1, #4
 802665e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026662:	b2c9      	uxtb	r1, r1
 8026664:	910f      	str	r1, [sp, #60]	; 0x3c
 8026666:	f1bc 0f00 	cmp.w	ip, #0
 802666a:	d019      	beq.n	80266a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 802666c:	9908      	ldr	r1, [sp, #32]
 802666e:	440b      	add	r3, r1
 8026670:	0859      	lsrs	r1, r3, #1
 8026672:	f013 0f01 	tst.w	r3, #1
 8026676:	5c79      	ldrb	r1, [r7, r1]
 8026678:	bf0c      	ite	eq
 802667a:	f001 010f 	andeq.w	r1, r1, #15
 802667e:	1109      	asrne	r1, r1, #4
 8026680:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026684:	b2c9      	uxtb	r1, r1
 8026686:	3301      	adds	r3, #1
 8026688:	910b      	str	r1, [sp, #44]	; 0x2c
 802668a:	0859      	lsrs	r1, r3, #1
 802668c:	07db      	lsls	r3, r3, #31
 802668e:	5c79      	ldrb	r1, [r7, r1]
 8026690:	bf54      	ite	pl
 8026692:	f001 010f 	andpl.w	r1, r1, #15
 8026696:	1109      	asrmi	r1, r1, #4
 8026698:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802669c:	b2c9      	uxtb	r1, r1
 802669e:	9110      	str	r1, [sp, #64]	; 0x40
 80266a0:	b280      	uxth	r0, r0
 80266a2:	fa1f fc8c 	uxth.w	ip, ip
 80266a6:	fb00 f30c 	mul.w	r3, r0, ip
 80266aa:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 80266ae:	0100      	lsls	r0, r0, #4
 80266b0:	fa1f fc8c 	uxth.w	ip, ip
 80266b4:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80266b8:	eba1 010c 	sub.w	r1, r1, ip
 80266bc:	fa1f fe81 	uxth.w	lr, r1
 80266c0:	1ac0      	subs	r0, r0, r3
 80266c2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80266c4:	b280      	uxth	r0, r0
 80266c6:	4348      	muls	r0, r1
 80266c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80266ca:	fb02 020e 	mla	r2, r2, lr, r0
 80266ce:	fb0c 2c01 	mla	ip, ip, r1, r2
 80266d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80266d4:	fb03 c302 	mla	r3, r3, r2, ip
 80266d8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80266dc:	2b00      	cmp	r3, #0
 80266de:	d045      	beq.n	802676c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80266e0:	4a36      	ldr	r2, [pc, #216]	; (80267bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>)
 80266e2:	6811      	ldr	r1, [r2, #0]
 80266e4:	2bff      	cmp	r3, #255	; 0xff
 80266e6:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 80266ea:	ea4f 02d1 	mov.w	r2, r1, lsr #3
 80266ee:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 80266f2:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80266f6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80266fa:	b2c9      	uxtb	r1, r1
 80266fc:	d050      	beq.n	80267a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 80266fe:	f8b8 c000 	ldrh.w	ip, [r8]
 8026702:	fa1f fb83 	uxth.w	fp, r3
 8026706:	ea4f 202c 	mov.w	r0, ip, asr #8
 802670a:	43db      	mvns	r3, r3
 802670c:	b2db      	uxtb	r3, r3
 802670e:	fb1e fe0b 	smulbb	lr, lr, fp
 8026712:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026716:	fb00 e003 	mla	r0, r0, r3, lr
 802671a:	ea4f 0eec 	mov.w	lr, ip, asr #3
 802671e:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8026722:	fb12 f20b 	smulbb	r2, r2, fp
 8026726:	fb0e 2203 	mla	r2, lr, r3, r2
 802672a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802672e:	b292      	uxth	r2, r2
 8026730:	fa5f fc8c 	uxtb.w	ip, ip
 8026734:	fb11 f10b 	smulbb	r1, r1, fp
 8026738:	b280      	uxth	r0, r0
 802673a:	fb0c 1103 	mla	r1, ip, r3, r1
 802673e:	f102 0e01 	add.w	lr, r2, #1
 8026742:	b289      	uxth	r1, r1
 8026744:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8026748:	f100 0e01 	add.w	lr, r0, #1
 802674c:	0952      	lsrs	r2, r2, #5
 802674e:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8026752:	1c4b      	adds	r3, r1, #1
 8026754:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026758:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802675c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8026760:	4302      	orrs	r2, r0
 8026762:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8026766:	430a      	orrs	r2, r1
 8026768:	f8a8 2000 	strh.w	r2, [r8]
 802676c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802676e:	441c      	add	r4, r3
 8026770:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026772:	f108 0802 	add.w	r8, r8, #2
 8026776:	441e      	add	r6, r3
 8026778:	f10a 3aff 	add.w	sl, sl, #4294967295
 802677c:	e6cc      	b.n	8026518 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 802677e:	f1bc 0f00 	cmp.w	ip, #0
 8026782:	d08d      	beq.n	80266a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8026784:	9908      	ldr	r1, [sp, #32]
 8026786:	440b      	add	r3, r1
 8026788:	0859      	lsrs	r1, r3, #1
 802678a:	07db      	lsls	r3, r3, #31
 802678c:	5c79      	ldrb	r1, [r7, r1]
 802678e:	bf54      	ite	pl
 8026790:	f001 010f 	andpl.w	r1, r1, #15
 8026794:	1109      	asrmi	r1, r1, #4
 8026796:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802679a:	b2c9      	uxtb	r1, r1
 802679c:	910b      	str	r1, [sp, #44]	; 0x2c
 802679e:	e77f      	b.n	80266a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 80267a0:	00d2      	lsls	r2, r2, #3
 80267a2:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 80267a6:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 80267aa:	f8a8 1000 	strh.w	r1, [r8]
 80267ae:	e7dd      	b.n	802676c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80267b0:	b013      	add	sp, #76	; 0x4c
 80267b2:	ecbd 8b08 	vpop	{d8-d11}
 80267b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80267ba:	bf00      	nop
 80267bc:	2000a0f8 	.word	0x2000a0f8

080267c0 <CRC_Lock>:
 80267c0:	b530      	push	{r4, r5, lr}
 80267c2:	4a1d      	ldr	r2, [pc, #116]	; (8026838 <CRC_Lock+0x78>)
 80267c4:	6813      	ldr	r3, [r2, #0]
 80267c6:	f023 0301 	bic.w	r3, r3, #1
 80267ca:	6013      	str	r3, [r2, #0]
 80267cc:	4b1b      	ldr	r3, [pc, #108]	; (802683c <CRC_Lock+0x7c>)
 80267ce:	681a      	ldr	r2, [r3, #0]
 80267d0:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80267d4:	4022      	ands	r2, r4
 80267d6:	f24c 2540 	movw	r5, #49728	; 0xc240
 80267da:	42aa      	cmp	r2, r5
 80267dc:	d005      	beq.n	80267ea <CRC_Lock+0x2a>
 80267de:	681b      	ldr	r3, [r3, #0]
 80267e0:	f24c 2270 	movw	r2, #49776	; 0xc270
 80267e4:	4023      	ands	r3, r4
 80267e6:	4293      	cmp	r3, r2
 80267e8:	d11d      	bne.n	8026826 <CRC_Lock+0x66>
 80267ea:	4b15      	ldr	r3, [pc, #84]	; (8026840 <CRC_Lock+0x80>)
 80267ec:	681b      	ldr	r3, [r3, #0]
 80267ee:	b9d3      	cbnz	r3, 8026826 <CRC_Lock+0x66>
 80267f0:	4a14      	ldr	r2, [pc, #80]	; (8026844 <CRC_Lock+0x84>)
 80267f2:	6813      	ldr	r3, [r2, #0]
 80267f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80267f8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80267fc:	d006      	beq.n	802680c <CRC_Lock+0x4c>
 80267fe:	6813      	ldr	r3, [r2, #0]
 8026800:	f240 4283 	movw	r2, #1155	; 0x483
 8026804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026808:	4293      	cmp	r3, r2
 802680a:	d10c      	bne.n	8026826 <CRC_Lock+0x66>
 802680c:	4b0e      	ldr	r3, [pc, #56]	; (8026848 <CRC_Lock+0x88>)
 802680e:	2201      	movs	r2, #1
 8026810:	601a      	str	r2, [r3, #0]
 8026812:	681a      	ldr	r2, [r3, #0]
 8026814:	2a00      	cmp	r2, #0
 8026816:	d1fc      	bne.n	8026812 <CRC_Lock+0x52>
 8026818:	4b0c      	ldr	r3, [pc, #48]	; (802684c <CRC_Lock+0x8c>)
 802681a:	6018      	str	r0, [r3, #0]
 802681c:	6818      	ldr	r0, [r3, #0]
 802681e:	1a43      	subs	r3, r0, r1
 8026820:	4258      	negs	r0, r3
 8026822:	4158      	adcs	r0, r3
 8026824:	bd30      	pop	{r4, r5, pc}
 8026826:	4b0a      	ldr	r3, [pc, #40]	; (8026850 <CRC_Lock+0x90>)
 8026828:	2201      	movs	r2, #1
 802682a:	601a      	str	r2, [r3, #0]
 802682c:	681a      	ldr	r2, [r3, #0]
 802682e:	2a00      	cmp	r2, #0
 8026830:	d1fc      	bne.n	802682c <CRC_Lock+0x6c>
 8026832:	4b08      	ldr	r3, [pc, #32]	; (8026854 <CRC_Lock+0x94>)
 8026834:	e7f1      	b.n	802681a <CRC_Lock+0x5a>
 8026836:	bf00      	nop
 8026838:	e0002000 	.word	0xe0002000
 802683c:	e000ed00 	.word	0xe000ed00
 8026840:	e0042000 	.word	0xe0042000
 8026844:	5c001000 	.word	0x5c001000
 8026848:	58024c08 	.word	0x58024c08
 802684c:	58024c00 	.word	0x58024c00
 8026850:	40023008 	.word	0x40023008
 8026854:	40023000 	.word	0x40023000

08026858 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8026858:	6101      	str	r1, [r0, #16]
 802685a:	4770      	bx	lr

0802685c <_ZN8touchgfx8Gestures4tickEv>:
 802685c:	7b83      	ldrb	r3, [r0, #14]
 802685e:	b14b      	cbz	r3, 8026874 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8026860:	8903      	ldrh	r3, [r0, #8]
 8026862:	3301      	adds	r3, #1
 8026864:	b29b      	uxth	r3, r3
 8026866:	2b07      	cmp	r3, #7
 8026868:	8103      	strh	r3, [r0, #8]
 802686a:	bf81      	itttt	hi
 802686c:	2300      	movhi	r3, #0
 802686e:	8143      	strhhi	r3, [r0, #10]
 8026870:	8183      	strhhi	r3, [r0, #12]
 8026872:	7383      	strbhi	r3, [r0, #14]
 8026874:	4770      	bx	lr
	...

08026878 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8026878:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802687c:	4604      	mov	r4, r0
 802687e:	8880      	ldrh	r0, [r0, #4]
 8026880:	f8ad 0006 	strh.w	r0, [sp, #6]
 8026884:	4698      	mov	r8, r3
 8026886:	eba8 0000 	sub.w	r0, r8, r0
 802688a:	4b1c      	ldr	r3, [pc, #112]	; (80268fc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 802688c:	9300      	str	r3, [sp, #0]
 802688e:	b280      	uxth	r0, r0
 8026890:	2300      	movs	r3, #0
 8026892:	f88d 3004 	strb.w	r3, [sp, #4]
 8026896:	b203      	sxth	r3, r0
 8026898:	2b00      	cmp	r3, #0
 802689a:	bfb8      	it	lt
 802689c:	4240      	neglt	r0, r0
 802689e:	4617      	mov	r7, r2
 80268a0:	8aa2      	ldrh	r2, [r4, #20]
 80268a2:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80268a6:	f8ad 800a 	strh.w	r8, [sp, #10]
 80268aa:	bfb8      	it	lt
 80268ac:	b203      	sxthlt	r3, r0
 80268ae:	460e      	mov	r6, r1
 80268b0:	4293      	cmp	r3, r2
 80268b2:	88e1      	ldrh	r1, [r4, #6]
 80268b4:	f8ad 1008 	strh.w	r1, [sp, #8]
 80268b8:	f8ad 500c 	strh.w	r5, [sp, #12]
 80268bc:	dc08      	bgt.n	80268d0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 80268be:	1a69      	subs	r1, r5, r1
 80268c0:	b289      	uxth	r1, r1
 80268c2:	b20b      	sxth	r3, r1
 80268c4:	2b00      	cmp	r3, #0
 80268c6:	bfbc      	itt	lt
 80268c8:	4249      	neglt	r1, r1
 80268ca:	b20b      	sxthlt	r3, r1
 80268cc:	429a      	cmp	r2, r3
 80268ce:	da13      	bge.n	80268f8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 80268d0:	6920      	ldr	r0, [r4, #16]
 80268d2:	6803      	ldr	r3, [r0, #0]
 80268d4:	4669      	mov	r1, sp
 80268d6:	685b      	ldr	r3, [r3, #4]
 80268d8:	4798      	blx	r3
 80268da:	eba8 0606 	sub.w	r6, r8, r6
 80268de:	2300      	movs	r3, #0
 80268e0:	1bef      	subs	r7, r5, r7
 80268e2:	2001      	movs	r0, #1
 80268e4:	8123      	strh	r3, [r4, #8]
 80268e6:	8166      	strh	r6, [r4, #10]
 80268e8:	81a7      	strh	r7, [r4, #12]
 80268ea:	f8a4 8004 	strh.w	r8, [r4, #4]
 80268ee:	80e5      	strh	r5, [r4, #6]
 80268f0:	73a0      	strb	r0, [r4, #14]
 80268f2:	b004      	add	sp, #16
 80268f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80268f8:	2000      	movs	r0, #0
 80268fa:	e7fa      	b.n	80268f2 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 80268fc:	0802bca8 	.word	0x0802bca8

08026900 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8026900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026902:	461e      	mov	r6, r3
 8026904:	1e4b      	subs	r3, r1, #1
 8026906:	2b01      	cmp	r3, #1
 8026908:	b085      	sub	sp, #20
 802690a:	4604      	mov	r4, r0
 802690c:	460d      	mov	r5, r1
 802690e:	4617      	mov	r7, r2
 8026910:	d84b      	bhi.n	80269aa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8026912:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8026916:	1cd3      	adds	r3, r2, #3
 8026918:	b29b      	uxth	r3, r3
 802691a:	2b06      	cmp	r3, #6
 802691c:	d916      	bls.n	802694c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802691e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80269c0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8026922:	f8cd c004 	str.w	ip, [sp, #4]
 8026926:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802692a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802692e:	6900      	ldr	r0, [r0, #16]
 8026930:	f8ad 100c 	strh.w	r1, [sp, #12]
 8026934:	f04f 0c00 	mov.w	ip, #0
 8026938:	f88d c008 	strb.w	ip, [sp, #8]
 802693c:	f8ad 200a 	strh.w	r2, [sp, #10]
 8026940:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026944:	6803      	ldr	r3, [r0, #0]
 8026946:	a901      	add	r1, sp, #4
 8026948:	689b      	ldr	r3, [r3, #8]
 802694a:	4798      	blx	r3
 802694c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026950:	1cd3      	adds	r3, r2, #3
 8026952:	b29b      	uxth	r3, r3
 8026954:	2b06      	cmp	r3, #6
 8026956:	d916      	bls.n	8026986 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8026958:	f8df c064 	ldr.w	ip, [pc, #100]	; 80269c0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802695c:	f8cd c004 	str.w	ip, [sp, #4]
 8026960:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8026964:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8026968:	6920      	ldr	r0, [r4, #16]
 802696a:	f8ad 100c 	strh.w	r1, [sp, #12]
 802696e:	f04f 0c01 	mov.w	ip, #1
 8026972:	f88d c008 	strb.w	ip, [sp, #8]
 8026976:	f8ad 200a 	strh.w	r2, [sp, #10]
 802697a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802697e:	6803      	ldr	r3, [r0, #0]
 8026980:	a901      	add	r1, sp, #4
 8026982:	689b      	ldr	r3, [r3, #8]
 8026984:	4798      	blx	r3
 8026986:	4b0d      	ldr	r3, [pc, #52]	; (80269bc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8026988:	9301      	str	r3, [sp, #4]
 802698a:	6920      	ldr	r0, [r4, #16]
 802698c:	f88d 5008 	strb.w	r5, [sp, #8]
 8026990:	2300      	movs	r3, #0
 8026992:	f8ad 700a 	strh.w	r7, [sp, #10]
 8026996:	f8ad 600c 	strh.w	r6, [sp, #12]
 802699a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802699e:	6803      	ldr	r3, [r0, #0]
 80269a0:	a901      	add	r1, sp, #4
 80269a2:	681b      	ldr	r3, [r3, #0]
 80269a4:	4798      	blx	r3
 80269a6:	b005      	add	sp, #20
 80269a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80269aa:	2900      	cmp	r1, #0
 80269ac:	d1eb      	bne.n	8026986 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80269ae:	80a2      	strh	r2, [r4, #4]
 80269b0:	80c6      	strh	r6, [r0, #6]
 80269b2:	60a1      	str	r1, [r4, #8]
 80269b4:	81a1      	strh	r1, [r4, #12]
 80269b6:	73a1      	strb	r1, [r4, #14]
 80269b8:	e7e5      	b.n	8026986 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80269ba:	bf00      	nop
 80269bc:	0802bc94 	.word	0x0802bc94
 80269c0:	0802bcbc 	.word	0x0802bcbc

080269c4 <__aeabi_atexit>:
 80269c4:	460b      	mov	r3, r1
 80269c6:	4601      	mov	r1, r0
 80269c8:	4618      	mov	r0, r3
 80269ca:	f000 b953 	b.w	8026c74 <__cxa_atexit>

080269ce <_ZdlPvj>:
 80269ce:	f000 b8f5 	b.w	8026bbc <_ZdlPv>

080269d2 <__cxa_guard_acquire>:
 80269d2:	6803      	ldr	r3, [r0, #0]
 80269d4:	07db      	lsls	r3, r3, #31
 80269d6:	d406      	bmi.n	80269e6 <__cxa_guard_acquire+0x14>
 80269d8:	7843      	ldrb	r3, [r0, #1]
 80269da:	b103      	cbz	r3, 80269de <__cxa_guard_acquire+0xc>
 80269dc:	deff      	udf	#255	; 0xff
 80269de:	2301      	movs	r3, #1
 80269e0:	7043      	strb	r3, [r0, #1]
 80269e2:	4618      	mov	r0, r3
 80269e4:	4770      	bx	lr
 80269e6:	2000      	movs	r0, #0
 80269e8:	4770      	bx	lr

080269ea <__cxa_guard_release>:
 80269ea:	2301      	movs	r3, #1
 80269ec:	6003      	str	r3, [r0, #0]
 80269ee:	4770      	bx	lr

080269f0 <__cxa_pure_virtual>:
 80269f0:	b508      	push	{r3, lr}
 80269f2:	f000 f8f1 	bl	8026bd8 <_ZSt9terminatev>

080269f6 <_ZNSaIcEC1Ev>:
 80269f6:	4770      	bx	lr

080269f8 <_ZNSaIcED1Ev>:
 80269f8:	4770      	bx	lr

080269fa <_ZSt17__throw_bad_allocv>:
 80269fa:	b508      	push	{r3, lr}
 80269fc:	f000 f90a 	bl	8026c14 <abort>

08026a00 <_ZSt19__throw_logic_errorPKc>:
 8026a00:	b508      	push	{r3, lr}
 8026a02:	f000 f907 	bl	8026c14 <abort>

08026a06 <_ZSt20__throw_length_errorPKc>:
 8026a06:	b508      	push	{r3, lr}
 8026a08:	f000 f904 	bl	8026c14 <abort>

08026a0c <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8026a0c:	b10a      	cbz	r2, 8026a12 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8026a0e:	f000 b98b 	b.w	8026d28 <memcpy>
 8026a12:	4770      	bx	lr

08026a14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8026a14:	6001      	str	r1, [r0, #0]
 8026a16:	4770      	bx	lr

08026a18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 8026a18:	6800      	ldr	r0, [r0, #0]
 8026a1a:	4770      	bx	lr

08026a1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 8026a1c:	3008      	adds	r0, #8
 8026a1e:	4770      	bx	lr

08026a20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8026a20:	6081      	str	r1, [r0, #8]
 8026a22:	4770      	bx	lr

08026a24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8026a24:	6803      	ldr	r3, [r0, #0]
 8026a26:	6041      	str	r1, [r0, #4]
 8026a28:	2200      	movs	r2, #0
 8026a2a:	545a      	strb	r2, [r3, r1]
 8026a2c:	4770      	bx	lr
	...

08026a30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8026a30:	b508      	push	{r3, lr}
 8026a32:	680b      	ldr	r3, [r1, #0]
 8026a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8026a38:	d302      	bcc.n	8026a40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8026a3a:	480d      	ldr	r0, [pc, #52]	; (8026a70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8026a3c:	f7ff ffe3 	bl	8026a06 <_ZSt20__throw_length_errorPKc>
 8026a40:	4293      	cmp	r3, r2
 8026a42:	d90b      	bls.n	8026a5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8026a44:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8026a48:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8026a4c:	d206      	bcs.n	8026a5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8026a4e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8026a52:	bf2a      	itet	cs
 8026a54:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8026a58:	6008      	strcc	r0, [r1, #0]
 8026a5a:	600b      	strcs	r3, [r1, #0]
 8026a5c:	6808      	ldr	r0, [r1, #0]
 8026a5e:	3001      	adds	r0, #1
 8026a60:	d501      	bpl.n	8026a66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8026a62:	f7ff ffca 	bl	80269fa <_ZSt17__throw_bad_allocv>
 8026a66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8026a6a:	f000 b8ba 	b.w	8026be2 <_Znwj>
 8026a6e:	bf00      	nop
 8026a70:	0802d087 	.word	0x0802d087

08026a74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8026a74:	f850 3b08 	ldr.w	r3, [r0], #8
 8026a78:	4283      	cmp	r3, r0
 8026a7a:	d002      	beq.n	8026a82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8026a7c:	4618      	mov	r0, r3
 8026a7e:	f000 b89d 	b.w	8026bbc <_ZdlPv>
 8026a82:	4770      	bx	lr

08026a84 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8026a84:	6840      	ldr	r0, [r0, #4]
 8026a86:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8026a8a:	3901      	subs	r1, #1
 8026a8c:	1a09      	subs	r1, r1, r0
 8026a8e:	4291      	cmp	r1, r2
 8026a90:	b508      	push	{r3, lr}
 8026a92:	d202      	bcs.n	8026a9a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8026a94:	4618      	mov	r0, r3
 8026a96:	f7ff ffb6 	bl	8026a06 <_ZSt20__throw_length_errorPKc>
 8026a9a:	bd08      	pop	{r3, pc}

08026a9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8026a9c:	2a01      	cmp	r2, #1
 8026a9e:	b510      	push	{r4, lr}
 8026aa0:	d102      	bne.n	8026aa8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8026aa2:	780a      	ldrb	r2, [r1, #0]
 8026aa4:	7002      	strb	r2, [r0, #0]
 8026aa6:	bd10      	pop	{r4, pc}
 8026aa8:	f7ff ffb0 	bl	8026a0c <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8026aac:	e7fb      	b.n	8026aa6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08026aae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8026aae:	b508      	push	{r3, lr}
 8026ab0:	1a52      	subs	r2, r2, r1
 8026ab2:	f7ff fff3 	bl	8026a9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8026ab6:	bd08      	pop	{r3, pc}

08026ab8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8026ab8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8026abc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8026abe:	461f      	mov	r7, r3
 8026ac0:	6843      	ldr	r3, [r0, #4]
 8026ac2:	eb01 0802 	add.w	r8, r1, r2
 8026ac6:	1ab2      	subs	r2, r6, r2
 8026ac8:	441a      	add	r2, r3
 8026aca:	eba3 0908 	sub.w	r9, r3, r8
 8026ace:	4603      	mov	r3, r0
 8026ad0:	9201      	str	r2, [sp, #4]
 8026ad2:	f853 2b08 	ldr.w	r2, [r3], #8
 8026ad6:	429a      	cmp	r2, r3
 8026ad8:	bf18      	it	ne
 8026ada:	6882      	ldrne	r2, [r0, #8]
 8026adc:	460d      	mov	r5, r1
 8026ade:	bf08      	it	eq
 8026ae0:	220f      	moveq	r2, #15
 8026ae2:	a901      	add	r1, sp, #4
 8026ae4:	4604      	mov	r4, r0
 8026ae6:	f7ff ffa3 	bl	8026a30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8026aea:	4682      	mov	sl, r0
 8026aec:	b11d      	cbz	r5, 8026af6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8026aee:	6821      	ldr	r1, [r4, #0]
 8026af0:	462a      	mov	r2, r5
 8026af2:	f7ff ffd3 	bl	8026a9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8026af6:	b137      	cbz	r7, 8026b06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8026af8:	b12e      	cbz	r6, 8026b06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8026afa:	4632      	mov	r2, r6
 8026afc:	4639      	mov	r1, r7
 8026afe:	eb0a 0005 	add.w	r0, sl, r5
 8026b02:	f7ff ffcb 	bl	8026a9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8026b06:	f1b9 0f00 	cmp.w	r9, #0
 8026b0a:	d007      	beq.n	8026b1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8026b0c:	6821      	ldr	r1, [r4, #0]
 8026b0e:	4435      	add	r5, r6
 8026b10:	464a      	mov	r2, r9
 8026b12:	4441      	add	r1, r8
 8026b14:	eb0a 0005 	add.w	r0, sl, r5
 8026b18:	f7ff ffc0 	bl	8026a9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8026b1c:	4620      	mov	r0, r4
 8026b1e:	f7ff ffa9 	bl	8026a74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8026b22:	9b01      	ldr	r3, [sp, #4]
 8026b24:	f8c4 a000 	str.w	sl, [r4]
 8026b28:	60a3      	str	r3, [r4, #8]
 8026b2a:	b002      	add	sp, #8
 8026b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08026b30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8026b30:	b510      	push	{r4, lr}
 8026b32:	4604      	mov	r4, r0
 8026b34:	f7ff ff9e 	bl	8026a74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8026b38:	4620      	mov	r0, r4
 8026b3a:	bd10      	pop	{r4, pc}

08026b3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8026b3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026b3e:	4604      	mov	r4, r0
 8026b40:	4623      	mov	r3, r4
 8026b42:	6840      	ldr	r0, [r0, #4]
 8026b44:	f853 6b08 	ldr.w	r6, [r3], #8
 8026b48:	429e      	cmp	r6, r3
 8026b4a:	bf18      	it	ne
 8026b4c:	68a3      	ldrne	r3, [r4, #8]
 8026b4e:	eb00 0502 	add.w	r5, r0, r2
 8026b52:	bf08      	it	eq
 8026b54:	230f      	moveq	r3, #15
 8026b56:	429d      	cmp	r5, r3
 8026b58:	d80a      	bhi.n	8026b70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 8026b5a:	b112      	cbz	r2, 8026b62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 8026b5c:	4430      	add	r0, r6
 8026b5e:	f7ff ff9d 	bl	8026a9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8026b62:	6823      	ldr	r3, [r4, #0]
 8026b64:	6065      	str	r5, [r4, #4]
 8026b66:	2200      	movs	r2, #0
 8026b68:	4620      	mov	r0, r4
 8026b6a:	555a      	strb	r2, [r3, r5]
 8026b6c:	b002      	add	sp, #8
 8026b6e:	bd70      	pop	{r4, r5, r6, pc}
 8026b70:	9200      	str	r2, [sp, #0]
 8026b72:	460b      	mov	r3, r1
 8026b74:	2200      	movs	r2, #0
 8026b76:	4601      	mov	r1, r0
 8026b78:	4620      	mov	r0, r4
 8026b7a:	f7ff ff9d 	bl	8026ab8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8026b7e:	e7f0      	b.n	8026b62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

08026b80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8026b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026b82:	4604      	mov	r4, r0
 8026b84:	4608      	mov	r0, r1
 8026b86:	460d      	mov	r5, r1
 8026b88:	f7d9 fb8c 	bl	80002a4 <strlen>
 8026b8c:	4b06      	ldr	r3, [pc, #24]	; (8026ba8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 8026b8e:	9001      	str	r0, [sp, #4]
 8026b90:	4602      	mov	r2, r0
 8026b92:	2100      	movs	r1, #0
 8026b94:	4620      	mov	r0, r4
 8026b96:	f7ff ff75 	bl	8026a84 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8026b9a:	9a01      	ldr	r2, [sp, #4]
 8026b9c:	4629      	mov	r1, r5
 8026b9e:	4620      	mov	r0, r4
 8026ba0:	f7ff ffcc 	bl	8026b3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8026ba4:	b003      	add	sp, #12
 8026ba6:	bd30      	pop	{r4, r5, pc}
 8026ba8:	0802d09f 	.word	0x0802d09f

08026bac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>:
 8026bac:	b508      	push	{r3, lr}
 8026bae:	f7ff ffe7 	bl	8026b80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8026bb2:	bd08      	pop	{r3, pc}

08026bb4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8026bb4:	6800      	ldr	r0, [r0, #0]
 8026bb6:	4770      	bx	lr

08026bb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8026bb8:	6001      	str	r1, [r0, #0]
 8026bba:	4770      	bx	lr

08026bbc <_ZdlPv>:
 8026bbc:	f000 b8ac 	b.w	8026d18 <free>

08026bc0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8026bc0:	b508      	push	{r3, lr}
 8026bc2:	4780      	blx	r0
 8026bc4:	f000 f826 	bl	8026c14 <abort>

08026bc8 <_ZSt13get_terminatev>:
 8026bc8:	4b02      	ldr	r3, [pc, #8]	; (8026bd4 <_ZSt13get_terminatev+0xc>)
 8026bca:	6818      	ldr	r0, [r3, #0]
 8026bcc:	f3bf 8f5b 	dmb	ish
 8026bd0:	4770      	bx	lr
 8026bd2:	bf00      	nop
 8026bd4:	200001a0 	.word	0x200001a0

08026bd8 <_ZSt9terminatev>:
 8026bd8:	b508      	push	{r3, lr}
 8026bda:	f7ff fff5 	bl	8026bc8 <_ZSt13get_terminatev>
 8026bde:	f7ff ffef 	bl	8026bc0 <_ZN10__cxxabiv111__terminateEPFvvE>

08026be2 <_Znwj>:
 8026be2:	2801      	cmp	r0, #1
 8026be4:	bf38      	it	cc
 8026be6:	2001      	movcc	r0, #1
 8026be8:	b510      	push	{r4, lr}
 8026bea:	4604      	mov	r4, r0
 8026bec:	4620      	mov	r0, r4
 8026bee:	f000 f88b 	bl	8026d08 <malloc>
 8026bf2:	b930      	cbnz	r0, 8026c02 <_Znwj+0x20>
 8026bf4:	f000 f806 	bl	8026c04 <_ZSt15get_new_handlerv>
 8026bf8:	b908      	cbnz	r0, 8026bfe <_Znwj+0x1c>
 8026bfa:	f000 f80b 	bl	8026c14 <abort>
 8026bfe:	4780      	blx	r0
 8026c00:	e7f4      	b.n	8026bec <_Znwj+0xa>
 8026c02:	bd10      	pop	{r4, pc}

08026c04 <_ZSt15get_new_handlerv>:
 8026c04:	4b02      	ldr	r3, [pc, #8]	; (8026c10 <_ZSt15get_new_handlerv+0xc>)
 8026c06:	6818      	ldr	r0, [r3, #0]
 8026c08:	f3bf 8f5b 	dmb	ish
 8026c0c:	4770      	bx	lr
 8026c0e:	bf00      	nop
 8026c10:	2000a1ec 	.word	0x2000a1ec

08026c14 <abort>:
 8026c14:	b508      	push	{r3, lr}
 8026c16:	2006      	movs	r0, #6
 8026c18:	f000 fc8e 	bl	8027538 <raise>
 8026c1c:	2001      	movs	r0, #1
 8026c1e:	f7dd fed5 	bl	80049cc <_exit>
	...

08026c24 <__assert_func>:
 8026c24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8026c26:	4614      	mov	r4, r2
 8026c28:	461a      	mov	r2, r3
 8026c2a:	4b09      	ldr	r3, [pc, #36]	; (8026c50 <__assert_func+0x2c>)
 8026c2c:	681b      	ldr	r3, [r3, #0]
 8026c2e:	4605      	mov	r5, r0
 8026c30:	68d8      	ldr	r0, [r3, #12]
 8026c32:	b14c      	cbz	r4, 8026c48 <__assert_func+0x24>
 8026c34:	4b07      	ldr	r3, [pc, #28]	; (8026c54 <__assert_func+0x30>)
 8026c36:	9100      	str	r1, [sp, #0]
 8026c38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8026c3c:	4906      	ldr	r1, [pc, #24]	; (8026c58 <__assert_func+0x34>)
 8026c3e:	462b      	mov	r3, r5
 8026c40:	f000 f82c 	bl	8026c9c <fiprintf>
 8026c44:	f7ff ffe6 	bl	8026c14 <abort>
 8026c48:	4b04      	ldr	r3, [pc, #16]	; (8026c5c <__assert_func+0x38>)
 8026c4a:	461c      	mov	r4, r3
 8026c4c:	e7f3      	b.n	8026c36 <__assert_func+0x12>
 8026c4e:	bf00      	nop
 8026c50:	200001a4 	.word	0x200001a4
 8026c54:	0802d0b4 	.word	0x0802d0b4
 8026c58:	0802d0c1 	.word	0x0802d0c1
 8026c5c:	0802d0ef 	.word	0x0802d0ef

08026c60 <atexit>:
 8026c60:	2300      	movs	r3, #0
 8026c62:	4601      	mov	r1, r0
 8026c64:	461a      	mov	r2, r3
 8026c66:	4618      	mov	r0, r3
 8026c68:	f000 bf5e 	b.w	8027b28 <__register_exitproc>

08026c6c <atoi>:
 8026c6c:	220a      	movs	r2, #10
 8026c6e:	2100      	movs	r1, #0
 8026c70:	f000 be44 	b.w	80278fc <strtol>

08026c74 <__cxa_atexit>:
 8026c74:	b510      	push	{r4, lr}
 8026c76:	4c05      	ldr	r4, [pc, #20]	; (8026c8c <__cxa_atexit+0x18>)
 8026c78:	4613      	mov	r3, r2
 8026c7a:	b12c      	cbz	r4, 8026c88 <__cxa_atexit+0x14>
 8026c7c:	460a      	mov	r2, r1
 8026c7e:	4601      	mov	r1, r0
 8026c80:	2002      	movs	r0, #2
 8026c82:	f000 ff51 	bl	8027b28 <__register_exitproc>
 8026c86:	bd10      	pop	{r4, pc}
 8026c88:	4620      	mov	r0, r4
 8026c8a:	e7fc      	b.n	8026c86 <__cxa_atexit+0x12>
 8026c8c:	08027b29 	.word	0x08027b29

08026c90 <__errno>:
 8026c90:	4b01      	ldr	r3, [pc, #4]	; (8026c98 <__errno+0x8>)
 8026c92:	6818      	ldr	r0, [r3, #0]
 8026c94:	4770      	bx	lr
 8026c96:	bf00      	nop
 8026c98:	200001a4 	.word	0x200001a4

08026c9c <fiprintf>:
 8026c9c:	b40e      	push	{r1, r2, r3}
 8026c9e:	b503      	push	{r0, r1, lr}
 8026ca0:	4601      	mov	r1, r0
 8026ca2:	ab03      	add	r3, sp, #12
 8026ca4:	4805      	ldr	r0, [pc, #20]	; (8026cbc <fiprintf+0x20>)
 8026ca6:	f853 2b04 	ldr.w	r2, [r3], #4
 8026caa:	6800      	ldr	r0, [r0, #0]
 8026cac:	9301      	str	r3, [sp, #4]
 8026cae:	f000 f93f 	bl	8026f30 <_vfiprintf_r>
 8026cb2:	b002      	add	sp, #8
 8026cb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8026cb8:	b003      	add	sp, #12
 8026cba:	4770      	bx	lr
 8026cbc:	200001a4 	.word	0x200001a4

08026cc0 <__libc_init_array>:
 8026cc0:	b570      	push	{r4, r5, r6, lr}
 8026cc2:	4d0d      	ldr	r5, [pc, #52]	; (8026cf8 <__libc_init_array+0x38>)
 8026cc4:	4c0d      	ldr	r4, [pc, #52]	; (8026cfc <__libc_init_array+0x3c>)
 8026cc6:	1b64      	subs	r4, r4, r5
 8026cc8:	10a4      	asrs	r4, r4, #2
 8026cca:	2600      	movs	r6, #0
 8026ccc:	42a6      	cmp	r6, r4
 8026cce:	d109      	bne.n	8026ce4 <__libc_init_array+0x24>
 8026cd0:	4d0b      	ldr	r5, [pc, #44]	; (8026d00 <__libc_init_array+0x40>)
 8026cd2:	4c0c      	ldr	r4, [pc, #48]	; (8026d04 <__libc_init_array+0x44>)
 8026cd4:	f001 ffa6 	bl	8028c24 <_init>
 8026cd8:	1b64      	subs	r4, r4, r5
 8026cda:	10a4      	asrs	r4, r4, #2
 8026cdc:	2600      	movs	r6, #0
 8026cde:	42a6      	cmp	r6, r4
 8026ce0:	d105      	bne.n	8026cee <__libc_init_array+0x2e>
 8026ce2:	bd70      	pop	{r4, r5, r6, pc}
 8026ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8026ce8:	4798      	blx	r3
 8026cea:	3601      	adds	r6, #1
 8026cec:	e7ee      	b.n	8026ccc <__libc_init_array+0xc>
 8026cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8026cf2:	4798      	blx	r3
 8026cf4:	3601      	adds	r6, #1
 8026cf6:	e7f2      	b.n	8026cde <__libc_init_array+0x1e>
 8026cf8:	0806622c 	.word	0x0806622c
 8026cfc:	0806622c 	.word	0x0806622c
 8026d00:	0806622c 	.word	0x0806622c
 8026d04:	08066240 	.word	0x08066240

08026d08 <malloc>:
 8026d08:	4b02      	ldr	r3, [pc, #8]	; (8026d14 <malloc+0xc>)
 8026d0a:	4601      	mov	r1, r0
 8026d0c:	6818      	ldr	r0, [r3, #0]
 8026d0e:	f000 b88b 	b.w	8026e28 <_malloc_r>
 8026d12:	bf00      	nop
 8026d14:	200001a4 	.word	0x200001a4

08026d18 <free>:
 8026d18:	4b02      	ldr	r3, [pc, #8]	; (8026d24 <free+0xc>)
 8026d1a:	4601      	mov	r1, r0
 8026d1c:	6818      	ldr	r0, [r3, #0]
 8026d1e:	f000 b833 	b.w	8026d88 <_free_r>
 8026d22:	bf00      	nop
 8026d24:	200001a4 	.word	0x200001a4

08026d28 <memcpy>:
 8026d28:	440a      	add	r2, r1
 8026d2a:	4291      	cmp	r1, r2
 8026d2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8026d30:	d100      	bne.n	8026d34 <memcpy+0xc>
 8026d32:	4770      	bx	lr
 8026d34:	b510      	push	{r4, lr}
 8026d36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026d3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8026d3e:	4291      	cmp	r1, r2
 8026d40:	d1f9      	bne.n	8026d36 <memcpy+0xe>
 8026d42:	bd10      	pop	{r4, pc}

08026d44 <memmove>:
 8026d44:	4288      	cmp	r0, r1
 8026d46:	b510      	push	{r4, lr}
 8026d48:	eb01 0402 	add.w	r4, r1, r2
 8026d4c:	d902      	bls.n	8026d54 <memmove+0x10>
 8026d4e:	4284      	cmp	r4, r0
 8026d50:	4623      	mov	r3, r4
 8026d52:	d807      	bhi.n	8026d64 <memmove+0x20>
 8026d54:	1e43      	subs	r3, r0, #1
 8026d56:	42a1      	cmp	r1, r4
 8026d58:	d008      	beq.n	8026d6c <memmove+0x28>
 8026d5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026d5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8026d62:	e7f8      	b.n	8026d56 <memmove+0x12>
 8026d64:	4402      	add	r2, r0
 8026d66:	4601      	mov	r1, r0
 8026d68:	428a      	cmp	r2, r1
 8026d6a:	d100      	bne.n	8026d6e <memmove+0x2a>
 8026d6c:	bd10      	pop	{r4, pc}
 8026d6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8026d72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8026d76:	e7f7      	b.n	8026d68 <memmove+0x24>

08026d78 <memset>:
 8026d78:	4402      	add	r2, r0
 8026d7a:	4603      	mov	r3, r0
 8026d7c:	4293      	cmp	r3, r2
 8026d7e:	d100      	bne.n	8026d82 <memset+0xa>
 8026d80:	4770      	bx	lr
 8026d82:	f803 1b01 	strb.w	r1, [r3], #1
 8026d86:	e7f9      	b.n	8026d7c <memset+0x4>

08026d88 <_free_r>:
 8026d88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026d8a:	2900      	cmp	r1, #0
 8026d8c:	d048      	beq.n	8026e20 <_free_r+0x98>
 8026d8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026d92:	9001      	str	r0, [sp, #4]
 8026d94:	2b00      	cmp	r3, #0
 8026d96:	f1a1 0404 	sub.w	r4, r1, #4
 8026d9a:	bfb8      	it	lt
 8026d9c:	18e4      	addlt	r4, r4, r3
 8026d9e:	f001 f967 	bl	8028070 <__malloc_lock>
 8026da2:	4a20      	ldr	r2, [pc, #128]	; (8026e24 <_free_r+0x9c>)
 8026da4:	9801      	ldr	r0, [sp, #4]
 8026da6:	6813      	ldr	r3, [r2, #0]
 8026da8:	4615      	mov	r5, r2
 8026daa:	b933      	cbnz	r3, 8026dba <_free_r+0x32>
 8026dac:	6063      	str	r3, [r4, #4]
 8026dae:	6014      	str	r4, [r2, #0]
 8026db0:	b003      	add	sp, #12
 8026db2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026db6:	f001 b961 	b.w	802807c <__malloc_unlock>
 8026dba:	42a3      	cmp	r3, r4
 8026dbc:	d90b      	bls.n	8026dd6 <_free_r+0x4e>
 8026dbe:	6821      	ldr	r1, [r4, #0]
 8026dc0:	1862      	adds	r2, r4, r1
 8026dc2:	4293      	cmp	r3, r2
 8026dc4:	bf04      	itt	eq
 8026dc6:	681a      	ldreq	r2, [r3, #0]
 8026dc8:	685b      	ldreq	r3, [r3, #4]
 8026dca:	6063      	str	r3, [r4, #4]
 8026dcc:	bf04      	itt	eq
 8026dce:	1852      	addeq	r2, r2, r1
 8026dd0:	6022      	streq	r2, [r4, #0]
 8026dd2:	602c      	str	r4, [r5, #0]
 8026dd4:	e7ec      	b.n	8026db0 <_free_r+0x28>
 8026dd6:	461a      	mov	r2, r3
 8026dd8:	685b      	ldr	r3, [r3, #4]
 8026dda:	b10b      	cbz	r3, 8026de0 <_free_r+0x58>
 8026ddc:	42a3      	cmp	r3, r4
 8026dde:	d9fa      	bls.n	8026dd6 <_free_r+0x4e>
 8026de0:	6811      	ldr	r1, [r2, #0]
 8026de2:	1855      	adds	r5, r2, r1
 8026de4:	42a5      	cmp	r5, r4
 8026de6:	d10b      	bne.n	8026e00 <_free_r+0x78>
 8026de8:	6824      	ldr	r4, [r4, #0]
 8026dea:	4421      	add	r1, r4
 8026dec:	1854      	adds	r4, r2, r1
 8026dee:	42a3      	cmp	r3, r4
 8026df0:	6011      	str	r1, [r2, #0]
 8026df2:	d1dd      	bne.n	8026db0 <_free_r+0x28>
 8026df4:	681c      	ldr	r4, [r3, #0]
 8026df6:	685b      	ldr	r3, [r3, #4]
 8026df8:	6053      	str	r3, [r2, #4]
 8026dfa:	4421      	add	r1, r4
 8026dfc:	6011      	str	r1, [r2, #0]
 8026dfe:	e7d7      	b.n	8026db0 <_free_r+0x28>
 8026e00:	d902      	bls.n	8026e08 <_free_r+0x80>
 8026e02:	230c      	movs	r3, #12
 8026e04:	6003      	str	r3, [r0, #0]
 8026e06:	e7d3      	b.n	8026db0 <_free_r+0x28>
 8026e08:	6825      	ldr	r5, [r4, #0]
 8026e0a:	1961      	adds	r1, r4, r5
 8026e0c:	428b      	cmp	r3, r1
 8026e0e:	bf04      	itt	eq
 8026e10:	6819      	ldreq	r1, [r3, #0]
 8026e12:	685b      	ldreq	r3, [r3, #4]
 8026e14:	6063      	str	r3, [r4, #4]
 8026e16:	bf04      	itt	eq
 8026e18:	1949      	addeq	r1, r1, r5
 8026e1a:	6021      	streq	r1, [r4, #0]
 8026e1c:	6054      	str	r4, [r2, #4]
 8026e1e:	e7c7      	b.n	8026db0 <_free_r+0x28>
 8026e20:	b003      	add	sp, #12
 8026e22:	bd30      	pop	{r4, r5, pc}
 8026e24:	2000a1f0 	.word	0x2000a1f0

08026e28 <_malloc_r>:
 8026e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026e2a:	1ccd      	adds	r5, r1, #3
 8026e2c:	f025 0503 	bic.w	r5, r5, #3
 8026e30:	3508      	adds	r5, #8
 8026e32:	2d0c      	cmp	r5, #12
 8026e34:	bf38      	it	cc
 8026e36:	250c      	movcc	r5, #12
 8026e38:	2d00      	cmp	r5, #0
 8026e3a:	4606      	mov	r6, r0
 8026e3c:	db01      	blt.n	8026e42 <_malloc_r+0x1a>
 8026e3e:	42a9      	cmp	r1, r5
 8026e40:	d903      	bls.n	8026e4a <_malloc_r+0x22>
 8026e42:	230c      	movs	r3, #12
 8026e44:	6033      	str	r3, [r6, #0]
 8026e46:	2000      	movs	r0, #0
 8026e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026e4a:	f001 f911 	bl	8028070 <__malloc_lock>
 8026e4e:	4921      	ldr	r1, [pc, #132]	; (8026ed4 <_malloc_r+0xac>)
 8026e50:	680a      	ldr	r2, [r1, #0]
 8026e52:	4614      	mov	r4, r2
 8026e54:	b99c      	cbnz	r4, 8026e7e <_malloc_r+0x56>
 8026e56:	4f20      	ldr	r7, [pc, #128]	; (8026ed8 <_malloc_r+0xb0>)
 8026e58:	683b      	ldr	r3, [r7, #0]
 8026e5a:	b923      	cbnz	r3, 8026e66 <_malloc_r+0x3e>
 8026e5c:	4621      	mov	r1, r4
 8026e5e:	4630      	mov	r0, r6
 8026e60:	f000 fb32 	bl	80274c8 <_sbrk_r>
 8026e64:	6038      	str	r0, [r7, #0]
 8026e66:	4629      	mov	r1, r5
 8026e68:	4630      	mov	r0, r6
 8026e6a:	f000 fb2d 	bl	80274c8 <_sbrk_r>
 8026e6e:	1c43      	adds	r3, r0, #1
 8026e70:	d123      	bne.n	8026eba <_malloc_r+0x92>
 8026e72:	230c      	movs	r3, #12
 8026e74:	6033      	str	r3, [r6, #0]
 8026e76:	4630      	mov	r0, r6
 8026e78:	f001 f900 	bl	802807c <__malloc_unlock>
 8026e7c:	e7e3      	b.n	8026e46 <_malloc_r+0x1e>
 8026e7e:	6823      	ldr	r3, [r4, #0]
 8026e80:	1b5b      	subs	r3, r3, r5
 8026e82:	d417      	bmi.n	8026eb4 <_malloc_r+0x8c>
 8026e84:	2b0b      	cmp	r3, #11
 8026e86:	d903      	bls.n	8026e90 <_malloc_r+0x68>
 8026e88:	6023      	str	r3, [r4, #0]
 8026e8a:	441c      	add	r4, r3
 8026e8c:	6025      	str	r5, [r4, #0]
 8026e8e:	e004      	b.n	8026e9a <_malloc_r+0x72>
 8026e90:	6863      	ldr	r3, [r4, #4]
 8026e92:	42a2      	cmp	r2, r4
 8026e94:	bf0c      	ite	eq
 8026e96:	600b      	streq	r3, [r1, #0]
 8026e98:	6053      	strne	r3, [r2, #4]
 8026e9a:	4630      	mov	r0, r6
 8026e9c:	f001 f8ee 	bl	802807c <__malloc_unlock>
 8026ea0:	f104 000b 	add.w	r0, r4, #11
 8026ea4:	1d23      	adds	r3, r4, #4
 8026ea6:	f020 0007 	bic.w	r0, r0, #7
 8026eaa:	1ac2      	subs	r2, r0, r3
 8026eac:	d0cc      	beq.n	8026e48 <_malloc_r+0x20>
 8026eae:	1a1b      	subs	r3, r3, r0
 8026eb0:	50a3      	str	r3, [r4, r2]
 8026eb2:	e7c9      	b.n	8026e48 <_malloc_r+0x20>
 8026eb4:	4622      	mov	r2, r4
 8026eb6:	6864      	ldr	r4, [r4, #4]
 8026eb8:	e7cc      	b.n	8026e54 <_malloc_r+0x2c>
 8026eba:	1cc4      	adds	r4, r0, #3
 8026ebc:	f024 0403 	bic.w	r4, r4, #3
 8026ec0:	42a0      	cmp	r0, r4
 8026ec2:	d0e3      	beq.n	8026e8c <_malloc_r+0x64>
 8026ec4:	1a21      	subs	r1, r4, r0
 8026ec6:	4630      	mov	r0, r6
 8026ec8:	f000 fafe 	bl	80274c8 <_sbrk_r>
 8026ecc:	3001      	adds	r0, #1
 8026ece:	d1dd      	bne.n	8026e8c <_malloc_r+0x64>
 8026ed0:	e7cf      	b.n	8026e72 <_malloc_r+0x4a>
 8026ed2:	bf00      	nop
 8026ed4:	2000a1f0 	.word	0x2000a1f0
 8026ed8:	2000a1f4 	.word	0x2000a1f4

08026edc <__sfputc_r>:
 8026edc:	6893      	ldr	r3, [r2, #8]
 8026ede:	3b01      	subs	r3, #1
 8026ee0:	2b00      	cmp	r3, #0
 8026ee2:	b410      	push	{r4}
 8026ee4:	6093      	str	r3, [r2, #8]
 8026ee6:	da08      	bge.n	8026efa <__sfputc_r+0x1e>
 8026ee8:	6994      	ldr	r4, [r2, #24]
 8026eea:	42a3      	cmp	r3, r4
 8026eec:	db01      	blt.n	8026ef2 <__sfputc_r+0x16>
 8026eee:	290a      	cmp	r1, #10
 8026ef0:	d103      	bne.n	8026efa <__sfputc_r+0x1e>
 8026ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026ef6:	f000 bd45 	b.w	8027984 <__swbuf_r>
 8026efa:	6813      	ldr	r3, [r2, #0]
 8026efc:	1c58      	adds	r0, r3, #1
 8026efe:	6010      	str	r0, [r2, #0]
 8026f00:	7019      	strb	r1, [r3, #0]
 8026f02:	4608      	mov	r0, r1
 8026f04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026f08:	4770      	bx	lr

08026f0a <__sfputs_r>:
 8026f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026f0c:	4606      	mov	r6, r0
 8026f0e:	460f      	mov	r7, r1
 8026f10:	4614      	mov	r4, r2
 8026f12:	18d5      	adds	r5, r2, r3
 8026f14:	42ac      	cmp	r4, r5
 8026f16:	d101      	bne.n	8026f1c <__sfputs_r+0x12>
 8026f18:	2000      	movs	r0, #0
 8026f1a:	e007      	b.n	8026f2c <__sfputs_r+0x22>
 8026f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026f20:	463a      	mov	r2, r7
 8026f22:	4630      	mov	r0, r6
 8026f24:	f7ff ffda 	bl	8026edc <__sfputc_r>
 8026f28:	1c43      	adds	r3, r0, #1
 8026f2a:	d1f3      	bne.n	8026f14 <__sfputs_r+0xa>
 8026f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026f30 <_vfiprintf_r>:
 8026f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026f34:	460d      	mov	r5, r1
 8026f36:	b09d      	sub	sp, #116	; 0x74
 8026f38:	4614      	mov	r4, r2
 8026f3a:	4698      	mov	r8, r3
 8026f3c:	4606      	mov	r6, r0
 8026f3e:	b118      	cbz	r0, 8026f48 <_vfiprintf_r+0x18>
 8026f40:	6983      	ldr	r3, [r0, #24]
 8026f42:	b90b      	cbnz	r3, 8026f48 <_vfiprintf_r+0x18>
 8026f44:	f000 ff7c 	bl	8027e40 <__sinit>
 8026f48:	4b89      	ldr	r3, [pc, #548]	; (8027170 <_vfiprintf_r+0x240>)
 8026f4a:	429d      	cmp	r5, r3
 8026f4c:	d11b      	bne.n	8026f86 <_vfiprintf_r+0x56>
 8026f4e:	6875      	ldr	r5, [r6, #4]
 8026f50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026f52:	07d9      	lsls	r1, r3, #31
 8026f54:	d405      	bmi.n	8026f62 <_vfiprintf_r+0x32>
 8026f56:	89ab      	ldrh	r3, [r5, #12]
 8026f58:	059a      	lsls	r2, r3, #22
 8026f5a:	d402      	bmi.n	8026f62 <_vfiprintf_r+0x32>
 8026f5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026f5e:	f001 f80d 	bl	8027f7c <__retarget_lock_acquire_recursive>
 8026f62:	89ab      	ldrh	r3, [r5, #12]
 8026f64:	071b      	lsls	r3, r3, #28
 8026f66:	d501      	bpl.n	8026f6c <_vfiprintf_r+0x3c>
 8026f68:	692b      	ldr	r3, [r5, #16]
 8026f6a:	b9eb      	cbnz	r3, 8026fa8 <_vfiprintf_r+0x78>
 8026f6c:	4629      	mov	r1, r5
 8026f6e:	4630      	mov	r0, r6
 8026f70:	f000 fd6c 	bl	8027a4c <__swsetup_r>
 8026f74:	b1c0      	cbz	r0, 8026fa8 <_vfiprintf_r+0x78>
 8026f76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026f78:	07dc      	lsls	r4, r3, #31
 8026f7a:	d50e      	bpl.n	8026f9a <_vfiprintf_r+0x6a>
 8026f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8026f80:	b01d      	add	sp, #116	; 0x74
 8026f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026f86:	4b7b      	ldr	r3, [pc, #492]	; (8027174 <_vfiprintf_r+0x244>)
 8026f88:	429d      	cmp	r5, r3
 8026f8a:	d101      	bne.n	8026f90 <_vfiprintf_r+0x60>
 8026f8c:	68b5      	ldr	r5, [r6, #8]
 8026f8e:	e7df      	b.n	8026f50 <_vfiprintf_r+0x20>
 8026f90:	4b79      	ldr	r3, [pc, #484]	; (8027178 <_vfiprintf_r+0x248>)
 8026f92:	429d      	cmp	r5, r3
 8026f94:	bf08      	it	eq
 8026f96:	68f5      	ldreq	r5, [r6, #12]
 8026f98:	e7da      	b.n	8026f50 <_vfiprintf_r+0x20>
 8026f9a:	89ab      	ldrh	r3, [r5, #12]
 8026f9c:	0598      	lsls	r0, r3, #22
 8026f9e:	d4ed      	bmi.n	8026f7c <_vfiprintf_r+0x4c>
 8026fa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026fa2:	f000 ffed 	bl	8027f80 <__retarget_lock_release_recursive>
 8026fa6:	e7e9      	b.n	8026f7c <_vfiprintf_r+0x4c>
 8026fa8:	2300      	movs	r3, #0
 8026faa:	9309      	str	r3, [sp, #36]	; 0x24
 8026fac:	2320      	movs	r3, #32
 8026fae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026fb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8026fb6:	2330      	movs	r3, #48	; 0x30
 8026fb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802717c <_vfiprintf_r+0x24c>
 8026fbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026fc0:	f04f 0901 	mov.w	r9, #1
 8026fc4:	4623      	mov	r3, r4
 8026fc6:	469a      	mov	sl, r3
 8026fc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026fcc:	b10a      	cbz	r2, 8026fd2 <_vfiprintf_r+0xa2>
 8026fce:	2a25      	cmp	r2, #37	; 0x25
 8026fd0:	d1f9      	bne.n	8026fc6 <_vfiprintf_r+0x96>
 8026fd2:	ebba 0b04 	subs.w	fp, sl, r4
 8026fd6:	d00b      	beq.n	8026ff0 <_vfiprintf_r+0xc0>
 8026fd8:	465b      	mov	r3, fp
 8026fda:	4622      	mov	r2, r4
 8026fdc:	4629      	mov	r1, r5
 8026fde:	4630      	mov	r0, r6
 8026fe0:	f7ff ff93 	bl	8026f0a <__sfputs_r>
 8026fe4:	3001      	adds	r0, #1
 8026fe6:	f000 80aa 	beq.w	802713e <_vfiprintf_r+0x20e>
 8026fea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026fec:	445a      	add	r2, fp
 8026fee:	9209      	str	r2, [sp, #36]	; 0x24
 8026ff0:	f89a 3000 	ldrb.w	r3, [sl]
 8026ff4:	2b00      	cmp	r3, #0
 8026ff6:	f000 80a2 	beq.w	802713e <_vfiprintf_r+0x20e>
 8026ffa:	2300      	movs	r3, #0
 8026ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8027000:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027004:	f10a 0a01 	add.w	sl, sl, #1
 8027008:	9304      	str	r3, [sp, #16]
 802700a:	9307      	str	r3, [sp, #28]
 802700c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027010:	931a      	str	r3, [sp, #104]	; 0x68
 8027012:	4654      	mov	r4, sl
 8027014:	2205      	movs	r2, #5
 8027016:	f814 1b01 	ldrb.w	r1, [r4], #1
 802701a:	4858      	ldr	r0, [pc, #352]	; (802717c <_vfiprintf_r+0x24c>)
 802701c:	f7d9 f8e8 	bl	80001f0 <memchr>
 8027020:	9a04      	ldr	r2, [sp, #16]
 8027022:	b9d8      	cbnz	r0, 802705c <_vfiprintf_r+0x12c>
 8027024:	06d1      	lsls	r1, r2, #27
 8027026:	bf44      	itt	mi
 8027028:	2320      	movmi	r3, #32
 802702a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802702e:	0713      	lsls	r3, r2, #28
 8027030:	bf44      	itt	mi
 8027032:	232b      	movmi	r3, #43	; 0x2b
 8027034:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027038:	f89a 3000 	ldrb.w	r3, [sl]
 802703c:	2b2a      	cmp	r3, #42	; 0x2a
 802703e:	d015      	beq.n	802706c <_vfiprintf_r+0x13c>
 8027040:	9a07      	ldr	r2, [sp, #28]
 8027042:	4654      	mov	r4, sl
 8027044:	2000      	movs	r0, #0
 8027046:	f04f 0c0a 	mov.w	ip, #10
 802704a:	4621      	mov	r1, r4
 802704c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027050:	3b30      	subs	r3, #48	; 0x30
 8027052:	2b09      	cmp	r3, #9
 8027054:	d94e      	bls.n	80270f4 <_vfiprintf_r+0x1c4>
 8027056:	b1b0      	cbz	r0, 8027086 <_vfiprintf_r+0x156>
 8027058:	9207      	str	r2, [sp, #28]
 802705a:	e014      	b.n	8027086 <_vfiprintf_r+0x156>
 802705c:	eba0 0308 	sub.w	r3, r0, r8
 8027060:	fa09 f303 	lsl.w	r3, r9, r3
 8027064:	4313      	orrs	r3, r2
 8027066:	9304      	str	r3, [sp, #16]
 8027068:	46a2      	mov	sl, r4
 802706a:	e7d2      	b.n	8027012 <_vfiprintf_r+0xe2>
 802706c:	9b03      	ldr	r3, [sp, #12]
 802706e:	1d19      	adds	r1, r3, #4
 8027070:	681b      	ldr	r3, [r3, #0]
 8027072:	9103      	str	r1, [sp, #12]
 8027074:	2b00      	cmp	r3, #0
 8027076:	bfbb      	ittet	lt
 8027078:	425b      	neglt	r3, r3
 802707a:	f042 0202 	orrlt.w	r2, r2, #2
 802707e:	9307      	strge	r3, [sp, #28]
 8027080:	9307      	strlt	r3, [sp, #28]
 8027082:	bfb8      	it	lt
 8027084:	9204      	strlt	r2, [sp, #16]
 8027086:	7823      	ldrb	r3, [r4, #0]
 8027088:	2b2e      	cmp	r3, #46	; 0x2e
 802708a:	d10c      	bne.n	80270a6 <_vfiprintf_r+0x176>
 802708c:	7863      	ldrb	r3, [r4, #1]
 802708e:	2b2a      	cmp	r3, #42	; 0x2a
 8027090:	d135      	bne.n	80270fe <_vfiprintf_r+0x1ce>
 8027092:	9b03      	ldr	r3, [sp, #12]
 8027094:	1d1a      	adds	r2, r3, #4
 8027096:	681b      	ldr	r3, [r3, #0]
 8027098:	9203      	str	r2, [sp, #12]
 802709a:	2b00      	cmp	r3, #0
 802709c:	bfb8      	it	lt
 802709e:	f04f 33ff 	movlt.w	r3, #4294967295
 80270a2:	3402      	adds	r4, #2
 80270a4:	9305      	str	r3, [sp, #20]
 80270a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802718c <_vfiprintf_r+0x25c>
 80270aa:	7821      	ldrb	r1, [r4, #0]
 80270ac:	2203      	movs	r2, #3
 80270ae:	4650      	mov	r0, sl
 80270b0:	f7d9 f89e 	bl	80001f0 <memchr>
 80270b4:	b140      	cbz	r0, 80270c8 <_vfiprintf_r+0x198>
 80270b6:	2340      	movs	r3, #64	; 0x40
 80270b8:	eba0 000a 	sub.w	r0, r0, sl
 80270bc:	fa03 f000 	lsl.w	r0, r3, r0
 80270c0:	9b04      	ldr	r3, [sp, #16]
 80270c2:	4303      	orrs	r3, r0
 80270c4:	3401      	adds	r4, #1
 80270c6:	9304      	str	r3, [sp, #16]
 80270c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80270cc:	482c      	ldr	r0, [pc, #176]	; (8027180 <_vfiprintf_r+0x250>)
 80270ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80270d2:	2206      	movs	r2, #6
 80270d4:	f7d9 f88c 	bl	80001f0 <memchr>
 80270d8:	2800      	cmp	r0, #0
 80270da:	d03f      	beq.n	802715c <_vfiprintf_r+0x22c>
 80270dc:	4b29      	ldr	r3, [pc, #164]	; (8027184 <_vfiprintf_r+0x254>)
 80270de:	bb1b      	cbnz	r3, 8027128 <_vfiprintf_r+0x1f8>
 80270e0:	9b03      	ldr	r3, [sp, #12]
 80270e2:	3307      	adds	r3, #7
 80270e4:	f023 0307 	bic.w	r3, r3, #7
 80270e8:	3308      	adds	r3, #8
 80270ea:	9303      	str	r3, [sp, #12]
 80270ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80270ee:	443b      	add	r3, r7
 80270f0:	9309      	str	r3, [sp, #36]	; 0x24
 80270f2:	e767      	b.n	8026fc4 <_vfiprintf_r+0x94>
 80270f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80270f8:	460c      	mov	r4, r1
 80270fa:	2001      	movs	r0, #1
 80270fc:	e7a5      	b.n	802704a <_vfiprintf_r+0x11a>
 80270fe:	2300      	movs	r3, #0
 8027100:	3401      	adds	r4, #1
 8027102:	9305      	str	r3, [sp, #20]
 8027104:	4619      	mov	r1, r3
 8027106:	f04f 0c0a 	mov.w	ip, #10
 802710a:	4620      	mov	r0, r4
 802710c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027110:	3a30      	subs	r2, #48	; 0x30
 8027112:	2a09      	cmp	r2, #9
 8027114:	d903      	bls.n	802711e <_vfiprintf_r+0x1ee>
 8027116:	2b00      	cmp	r3, #0
 8027118:	d0c5      	beq.n	80270a6 <_vfiprintf_r+0x176>
 802711a:	9105      	str	r1, [sp, #20]
 802711c:	e7c3      	b.n	80270a6 <_vfiprintf_r+0x176>
 802711e:	fb0c 2101 	mla	r1, ip, r1, r2
 8027122:	4604      	mov	r4, r0
 8027124:	2301      	movs	r3, #1
 8027126:	e7f0      	b.n	802710a <_vfiprintf_r+0x1da>
 8027128:	ab03      	add	r3, sp, #12
 802712a:	9300      	str	r3, [sp, #0]
 802712c:	462a      	mov	r2, r5
 802712e:	4b16      	ldr	r3, [pc, #88]	; (8027188 <_vfiprintf_r+0x258>)
 8027130:	a904      	add	r1, sp, #16
 8027132:	4630      	mov	r0, r6
 8027134:	f3af 8000 	nop.w
 8027138:	4607      	mov	r7, r0
 802713a:	1c78      	adds	r0, r7, #1
 802713c:	d1d6      	bne.n	80270ec <_vfiprintf_r+0x1bc>
 802713e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027140:	07d9      	lsls	r1, r3, #31
 8027142:	d405      	bmi.n	8027150 <_vfiprintf_r+0x220>
 8027144:	89ab      	ldrh	r3, [r5, #12]
 8027146:	059a      	lsls	r2, r3, #22
 8027148:	d402      	bmi.n	8027150 <_vfiprintf_r+0x220>
 802714a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802714c:	f000 ff18 	bl	8027f80 <__retarget_lock_release_recursive>
 8027150:	89ab      	ldrh	r3, [r5, #12]
 8027152:	065b      	lsls	r3, r3, #25
 8027154:	f53f af12 	bmi.w	8026f7c <_vfiprintf_r+0x4c>
 8027158:	9809      	ldr	r0, [sp, #36]	; 0x24
 802715a:	e711      	b.n	8026f80 <_vfiprintf_r+0x50>
 802715c:	ab03      	add	r3, sp, #12
 802715e:	9300      	str	r3, [sp, #0]
 8027160:	462a      	mov	r2, r5
 8027162:	4b09      	ldr	r3, [pc, #36]	; (8027188 <_vfiprintf_r+0x258>)
 8027164:	a904      	add	r1, sp, #16
 8027166:	4630      	mov	r0, r6
 8027168:	f000 f880 	bl	802726c <_printf_i>
 802716c:	e7e4      	b.n	8027138 <_vfiprintf_r+0x208>
 802716e:	bf00      	nop
 8027170:	0802d2c8 	.word	0x0802d2c8
 8027174:	0802d2e8 	.word	0x0802d2e8
 8027178:	0802d2a8 	.word	0x0802d2a8
 802717c:	0802d1f8 	.word	0x0802d1f8
 8027180:	0802d202 	.word	0x0802d202
 8027184:	00000000 	.word	0x00000000
 8027188:	08026f0b 	.word	0x08026f0b
 802718c:	0802d1fe 	.word	0x0802d1fe

08027190 <_printf_common>:
 8027190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027194:	4616      	mov	r6, r2
 8027196:	4699      	mov	r9, r3
 8027198:	688a      	ldr	r2, [r1, #8]
 802719a:	690b      	ldr	r3, [r1, #16]
 802719c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80271a0:	4293      	cmp	r3, r2
 80271a2:	bfb8      	it	lt
 80271a4:	4613      	movlt	r3, r2
 80271a6:	6033      	str	r3, [r6, #0]
 80271a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80271ac:	4607      	mov	r7, r0
 80271ae:	460c      	mov	r4, r1
 80271b0:	b10a      	cbz	r2, 80271b6 <_printf_common+0x26>
 80271b2:	3301      	adds	r3, #1
 80271b4:	6033      	str	r3, [r6, #0]
 80271b6:	6823      	ldr	r3, [r4, #0]
 80271b8:	0699      	lsls	r1, r3, #26
 80271ba:	bf42      	ittt	mi
 80271bc:	6833      	ldrmi	r3, [r6, #0]
 80271be:	3302      	addmi	r3, #2
 80271c0:	6033      	strmi	r3, [r6, #0]
 80271c2:	6825      	ldr	r5, [r4, #0]
 80271c4:	f015 0506 	ands.w	r5, r5, #6
 80271c8:	d106      	bne.n	80271d8 <_printf_common+0x48>
 80271ca:	f104 0a19 	add.w	sl, r4, #25
 80271ce:	68e3      	ldr	r3, [r4, #12]
 80271d0:	6832      	ldr	r2, [r6, #0]
 80271d2:	1a9b      	subs	r3, r3, r2
 80271d4:	42ab      	cmp	r3, r5
 80271d6:	dc26      	bgt.n	8027226 <_printf_common+0x96>
 80271d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80271dc:	1e13      	subs	r3, r2, #0
 80271de:	6822      	ldr	r2, [r4, #0]
 80271e0:	bf18      	it	ne
 80271e2:	2301      	movne	r3, #1
 80271e4:	0692      	lsls	r2, r2, #26
 80271e6:	d42b      	bmi.n	8027240 <_printf_common+0xb0>
 80271e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80271ec:	4649      	mov	r1, r9
 80271ee:	4638      	mov	r0, r7
 80271f0:	47c0      	blx	r8
 80271f2:	3001      	adds	r0, #1
 80271f4:	d01e      	beq.n	8027234 <_printf_common+0xa4>
 80271f6:	6823      	ldr	r3, [r4, #0]
 80271f8:	68e5      	ldr	r5, [r4, #12]
 80271fa:	6832      	ldr	r2, [r6, #0]
 80271fc:	f003 0306 	and.w	r3, r3, #6
 8027200:	2b04      	cmp	r3, #4
 8027202:	bf08      	it	eq
 8027204:	1aad      	subeq	r5, r5, r2
 8027206:	68a3      	ldr	r3, [r4, #8]
 8027208:	6922      	ldr	r2, [r4, #16]
 802720a:	bf0c      	ite	eq
 802720c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8027210:	2500      	movne	r5, #0
 8027212:	4293      	cmp	r3, r2
 8027214:	bfc4      	itt	gt
 8027216:	1a9b      	subgt	r3, r3, r2
 8027218:	18ed      	addgt	r5, r5, r3
 802721a:	2600      	movs	r6, #0
 802721c:	341a      	adds	r4, #26
 802721e:	42b5      	cmp	r5, r6
 8027220:	d11a      	bne.n	8027258 <_printf_common+0xc8>
 8027222:	2000      	movs	r0, #0
 8027224:	e008      	b.n	8027238 <_printf_common+0xa8>
 8027226:	2301      	movs	r3, #1
 8027228:	4652      	mov	r2, sl
 802722a:	4649      	mov	r1, r9
 802722c:	4638      	mov	r0, r7
 802722e:	47c0      	blx	r8
 8027230:	3001      	adds	r0, #1
 8027232:	d103      	bne.n	802723c <_printf_common+0xac>
 8027234:	f04f 30ff 	mov.w	r0, #4294967295
 8027238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802723c:	3501      	adds	r5, #1
 802723e:	e7c6      	b.n	80271ce <_printf_common+0x3e>
 8027240:	18e1      	adds	r1, r4, r3
 8027242:	1c5a      	adds	r2, r3, #1
 8027244:	2030      	movs	r0, #48	; 0x30
 8027246:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802724a:	4422      	add	r2, r4
 802724c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8027250:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8027254:	3302      	adds	r3, #2
 8027256:	e7c7      	b.n	80271e8 <_printf_common+0x58>
 8027258:	2301      	movs	r3, #1
 802725a:	4622      	mov	r2, r4
 802725c:	4649      	mov	r1, r9
 802725e:	4638      	mov	r0, r7
 8027260:	47c0      	blx	r8
 8027262:	3001      	adds	r0, #1
 8027264:	d0e6      	beq.n	8027234 <_printf_common+0xa4>
 8027266:	3601      	adds	r6, #1
 8027268:	e7d9      	b.n	802721e <_printf_common+0x8e>
	...

0802726c <_printf_i>:
 802726c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8027270:	460c      	mov	r4, r1
 8027272:	4691      	mov	r9, r2
 8027274:	7e27      	ldrb	r7, [r4, #24]
 8027276:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027278:	2f78      	cmp	r7, #120	; 0x78
 802727a:	4680      	mov	r8, r0
 802727c:	469a      	mov	sl, r3
 802727e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8027282:	d807      	bhi.n	8027294 <_printf_i+0x28>
 8027284:	2f62      	cmp	r7, #98	; 0x62
 8027286:	d80a      	bhi.n	802729e <_printf_i+0x32>
 8027288:	2f00      	cmp	r7, #0
 802728a:	f000 80d8 	beq.w	802743e <_printf_i+0x1d2>
 802728e:	2f58      	cmp	r7, #88	; 0x58
 8027290:	f000 80a3 	beq.w	80273da <_printf_i+0x16e>
 8027294:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8027298:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802729c:	e03a      	b.n	8027314 <_printf_i+0xa8>
 802729e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80272a2:	2b15      	cmp	r3, #21
 80272a4:	d8f6      	bhi.n	8027294 <_printf_i+0x28>
 80272a6:	a001      	add	r0, pc, #4	; (adr r0, 80272ac <_printf_i+0x40>)
 80272a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80272ac:	08027305 	.word	0x08027305
 80272b0:	08027319 	.word	0x08027319
 80272b4:	08027295 	.word	0x08027295
 80272b8:	08027295 	.word	0x08027295
 80272bc:	08027295 	.word	0x08027295
 80272c0:	08027295 	.word	0x08027295
 80272c4:	08027319 	.word	0x08027319
 80272c8:	08027295 	.word	0x08027295
 80272cc:	08027295 	.word	0x08027295
 80272d0:	08027295 	.word	0x08027295
 80272d4:	08027295 	.word	0x08027295
 80272d8:	08027425 	.word	0x08027425
 80272dc:	08027349 	.word	0x08027349
 80272e0:	08027407 	.word	0x08027407
 80272e4:	08027295 	.word	0x08027295
 80272e8:	08027295 	.word	0x08027295
 80272ec:	08027447 	.word	0x08027447
 80272f0:	08027295 	.word	0x08027295
 80272f4:	08027349 	.word	0x08027349
 80272f8:	08027295 	.word	0x08027295
 80272fc:	08027295 	.word	0x08027295
 8027300:	0802740f 	.word	0x0802740f
 8027304:	680b      	ldr	r3, [r1, #0]
 8027306:	1d1a      	adds	r2, r3, #4
 8027308:	681b      	ldr	r3, [r3, #0]
 802730a:	600a      	str	r2, [r1, #0]
 802730c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8027310:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8027314:	2301      	movs	r3, #1
 8027316:	e0a3      	b.n	8027460 <_printf_i+0x1f4>
 8027318:	6825      	ldr	r5, [r4, #0]
 802731a:	6808      	ldr	r0, [r1, #0]
 802731c:	062e      	lsls	r6, r5, #24
 802731e:	f100 0304 	add.w	r3, r0, #4
 8027322:	d50a      	bpl.n	802733a <_printf_i+0xce>
 8027324:	6805      	ldr	r5, [r0, #0]
 8027326:	600b      	str	r3, [r1, #0]
 8027328:	2d00      	cmp	r5, #0
 802732a:	da03      	bge.n	8027334 <_printf_i+0xc8>
 802732c:	232d      	movs	r3, #45	; 0x2d
 802732e:	426d      	negs	r5, r5
 8027330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027334:	485e      	ldr	r0, [pc, #376]	; (80274b0 <_printf_i+0x244>)
 8027336:	230a      	movs	r3, #10
 8027338:	e019      	b.n	802736e <_printf_i+0x102>
 802733a:	f015 0f40 	tst.w	r5, #64	; 0x40
 802733e:	6805      	ldr	r5, [r0, #0]
 8027340:	600b      	str	r3, [r1, #0]
 8027342:	bf18      	it	ne
 8027344:	b22d      	sxthne	r5, r5
 8027346:	e7ef      	b.n	8027328 <_printf_i+0xbc>
 8027348:	680b      	ldr	r3, [r1, #0]
 802734a:	6825      	ldr	r5, [r4, #0]
 802734c:	1d18      	adds	r0, r3, #4
 802734e:	6008      	str	r0, [r1, #0]
 8027350:	0628      	lsls	r0, r5, #24
 8027352:	d501      	bpl.n	8027358 <_printf_i+0xec>
 8027354:	681d      	ldr	r5, [r3, #0]
 8027356:	e002      	b.n	802735e <_printf_i+0xf2>
 8027358:	0669      	lsls	r1, r5, #25
 802735a:	d5fb      	bpl.n	8027354 <_printf_i+0xe8>
 802735c:	881d      	ldrh	r5, [r3, #0]
 802735e:	4854      	ldr	r0, [pc, #336]	; (80274b0 <_printf_i+0x244>)
 8027360:	2f6f      	cmp	r7, #111	; 0x6f
 8027362:	bf0c      	ite	eq
 8027364:	2308      	moveq	r3, #8
 8027366:	230a      	movne	r3, #10
 8027368:	2100      	movs	r1, #0
 802736a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802736e:	6866      	ldr	r6, [r4, #4]
 8027370:	60a6      	str	r6, [r4, #8]
 8027372:	2e00      	cmp	r6, #0
 8027374:	bfa2      	ittt	ge
 8027376:	6821      	ldrge	r1, [r4, #0]
 8027378:	f021 0104 	bicge.w	r1, r1, #4
 802737c:	6021      	strge	r1, [r4, #0]
 802737e:	b90d      	cbnz	r5, 8027384 <_printf_i+0x118>
 8027380:	2e00      	cmp	r6, #0
 8027382:	d04d      	beq.n	8027420 <_printf_i+0x1b4>
 8027384:	4616      	mov	r6, r2
 8027386:	fbb5 f1f3 	udiv	r1, r5, r3
 802738a:	fb03 5711 	mls	r7, r3, r1, r5
 802738e:	5dc7      	ldrb	r7, [r0, r7]
 8027390:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8027394:	462f      	mov	r7, r5
 8027396:	42bb      	cmp	r3, r7
 8027398:	460d      	mov	r5, r1
 802739a:	d9f4      	bls.n	8027386 <_printf_i+0x11a>
 802739c:	2b08      	cmp	r3, #8
 802739e:	d10b      	bne.n	80273b8 <_printf_i+0x14c>
 80273a0:	6823      	ldr	r3, [r4, #0]
 80273a2:	07df      	lsls	r7, r3, #31
 80273a4:	d508      	bpl.n	80273b8 <_printf_i+0x14c>
 80273a6:	6923      	ldr	r3, [r4, #16]
 80273a8:	6861      	ldr	r1, [r4, #4]
 80273aa:	4299      	cmp	r1, r3
 80273ac:	bfde      	ittt	le
 80273ae:	2330      	movle	r3, #48	; 0x30
 80273b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80273b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80273b8:	1b92      	subs	r2, r2, r6
 80273ba:	6122      	str	r2, [r4, #16]
 80273bc:	f8cd a000 	str.w	sl, [sp]
 80273c0:	464b      	mov	r3, r9
 80273c2:	aa03      	add	r2, sp, #12
 80273c4:	4621      	mov	r1, r4
 80273c6:	4640      	mov	r0, r8
 80273c8:	f7ff fee2 	bl	8027190 <_printf_common>
 80273cc:	3001      	adds	r0, #1
 80273ce:	d14c      	bne.n	802746a <_printf_i+0x1fe>
 80273d0:	f04f 30ff 	mov.w	r0, #4294967295
 80273d4:	b004      	add	sp, #16
 80273d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80273da:	4835      	ldr	r0, [pc, #212]	; (80274b0 <_printf_i+0x244>)
 80273dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80273e0:	6823      	ldr	r3, [r4, #0]
 80273e2:	680e      	ldr	r6, [r1, #0]
 80273e4:	061f      	lsls	r7, r3, #24
 80273e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80273ea:	600e      	str	r6, [r1, #0]
 80273ec:	d514      	bpl.n	8027418 <_printf_i+0x1ac>
 80273ee:	07d9      	lsls	r1, r3, #31
 80273f0:	bf44      	itt	mi
 80273f2:	f043 0320 	orrmi.w	r3, r3, #32
 80273f6:	6023      	strmi	r3, [r4, #0]
 80273f8:	b91d      	cbnz	r5, 8027402 <_printf_i+0x196>
 80273fa:	6823      	ldr	r3, [r4, #0]
 80273fc:	f023 0320 	bic.w	r3, r3, #32
 8027400:	6023      	str	r3, [r4, #0]
 8027402:	2310      	movs	r3, #16
 8027404:	e7b0      	b.n	8027368 <_printf_i+0xfc>
 8027406:	6823      	ldr	r3, [r4, #0]
 8027408:	f043 0320 	orr.w	r3, r3, #32
 802740c:	6023      	str	r3, [r4, #0]
 802740e:	2378      	movs	r3, #120	; 0x78
 8027410:	4828      	ldr	r0, [pc, #160]	; (80274b4 <_printf_i+0x248>)
 8027412:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8027416:	e7e3      	b.n	80273e0 <_printf_i+0x174>
 8027418:	065e      	lsls	r6, r3, #25
 802741a:	bf48      	it	mi
 802741c:	b2ad      	uxthmi	r5, r5
 802741e:	e7e6      	b.n	80273ee <_printf_i+0x182>
 8027420:	4616      	mov	r6, r2
 8027422:	e7bb      	b.n	802739c <_printf_i+0x130>
 8027424:	680b      	ldr	r3, [r1, #0]
 8027426:	6826      	ldr	r6, [r4, #0]
 8027428:	6960      	ldr	r0, [r4, #20]
 802742a:	1d1d      	adds	r5, r3, #4
 802742c:	600d      	str	r5, [r1, #0]
 802742e:	0635      	lsls	r5, r6, #24
 8027430:	681b      	ldr	r3, [r3, #0]
 8027432:	d501      	bpl.n	8027438 <_printf_i+0x1cc>
 8027434:	6018      	str	r0, [r3, #0]
 8027436:	e002      	b.n	802743e <_printf_i+0x1d2>
 8027438:	0671      	lsls	r1, r6, #25
 802743a:	d5fb      	bpl.n	8027434 <_printf_i+0x1c8>
 802743c:	8018      	strh	r0, [r3, #0]
 802743e:	2300      	movs	r3, #0
 8027440:	6123      	str	r3, [r4, #16]
 8027442:	4616      	mov	r6, r2
 8027444:	e7ba      	b.n	80273bc <_printf_i+0x150>
 8027446:	680b      	ldr	r3, [r1, #0]
 8027448:	1d1a      	adds	r2, r3, #4
 802744a:	600a      	str	r2, [r1, #0]
 802744c:	681e      	ldr	r6, [r3, #0]
 802744e:	6862      	ldr	r2, [r4, #4]
 8027450:	2100      	movs	r1, #0
 8027452:	4630      	mov	r0, r6
 8027454:	f7d8 fecc 	bl	80001f0 <memchr>
 8027458:	b108      	cbz	r0, 802745e <_printf_i+0x1f2>
 802745a:	1b80      	subs	r0, r0, r6
 802745c:	6060      	str	r0, [r4, #4]
 802745e:	6863      	ldr	r3, [r4, #4]
 8027460:	6123      	str	r3, [r4, #16]
 8027462:	2300      	movs	r3, #0
 8027464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027468:	e7a8      	b.n	80273bc <_printf_i+0x150>
 802746a:	6923      	ldr	r3, [r4, #16]
 802746c:	4632      	mov	r2, r6
 802746e:	4649      	mov	r1, r9
 8027470:	4640      	mov	r0, r8
 8027472:	47d0      	blx	sl
 8027474:	3001      	adds	r0, #1
 8027476:	d0ab      	beq.n	80273d0 <_printf_i+0x164>
 8027478:	6823      	ldr	r3, [r4, #0]
 802747a:	079b      	lsls	r3, r3, #30
 802747c:	d413      	bmi.n	80274a6 <_printf_i+0x23a>
 802747e:	68e0      	ldr	r0, [r4, #12]
 8027480:	9b03      	ldr	r3, [sp, #12]
 8027482:	4298      	cmp	r0, r3
 8027484:	bfb8      	it	lt
 8027486:	4618      	movlt	r0, r3
 8027488:	e7a4      	b.n	80273d4 <_printf_i+0x168>
 802748a:	2301      	movs	r3, #1
 802748c:	4632      	mov	r2, r6
 802748e:	4649      	mov	r1, r9
 8027490:	4640      	mov	r0, r8
 8027492:	47d0      	blx	sl
 8027494:	3001      	adds	r0, #1
 8027496:	d09b      	beq.n	80273d0 <_printf_i+0x164>
 8027498:	3501      	adds	r5, #1
 802749a:	68e3      	ldr	r3, [r4, #12]
 802749c:	9903      	ldr	r1, [sp, #12]
 802749e:	1a5b      	subs	r3, r3, r1
 80274a0:	42ab      	cmp	r3, r5
 80274a2:	dcf2      	bgt.n	802748a <_printf_i+0x21e>
 80274a4:	e7eb      	b.n	802747e <_printf_i+0x212>
 80274a6:	2500      	movs	r5, #0
 80274a8:	f104 0619 	add.w	r6, r4, #25
 80274ac:	e7f5      	b.n	802749a <_printf_i+0x22e>
 80274ae:	bf00      	nop
 80274b0:	0802d209 	.word	0x0802d209
 80274b4:	0802d21a 	.word	0x0802d21a

080274b8 <realloc>:
 80274b8:	4b02      	ldr	r3, [pc, #8]	; (80274c4 <realloc+0xc>)
 80274ba:	460a      	mov	r2, r1
 80274bc:	4601      	mov	r1, r0
 80274be:	6818      	ldr	r0, [r3, #0]
 80274c0:	f000 bde2 	b.w	8028088 <_realloc_r>
 80274c4:	200001a4 	.word	0x200001a4

080274c8 <_sbrk_r>:
 80274c8:	b538      	push	{r3, r4, r5, lr}
 80274ca:	4d06      	ldr	r5, [pc, #24]	; (80274e4 <_sbrk_r+0x1c>)
 80274cc:	2300      	movs	r3, #0
 80274ce:	4604      	mov	r4, r0
 80274d0:	4608      	mov	r0, r1
 80274d2:	602b      	str	r3, [r5, #0]
 80274d4:	f7dd faf2 	bl	8004abc <_sbrk>
 80274d8:	1c43      	adds	r3, r0, #1
 80274da:	d102      	bne.n	80274e2 <_sbrk_r+0x1a>
 80274dc:	682b      	ldr	r3, [r5, #0]
 80274de:	b103      	cbz	r3, 80274e2 <_sbrk_r+0x1a>
 80274e0:	6023      	str	r3, [r4, #0]
 80274e2:	bd38      	pop	{r3, r4, r5, pc}
 80274e4:	2000b144 	.word	0x2000b144

080274e8 <_raise_r>:
 80274e8:	291f      	cmp	r1, #31
 80274ea:	b538      	push	{r3, r4, r5, lr}
 80274ec:	4604      	mov	r4, r0
 80274ee:	460d      	mov	r5, r1
 80274f0:	d904      	bls.n	80274fc <_raise_r+0x14>
 80274f2:	2316      	movs	r3, #22
 80274f4:	6003      	str	r3, [r0, #0]
 80274f6:	f04f 30ff 	mov.w	r0, #4294967295
 80274fa:	bd38      	pop	{r3, r4, r5, pc}
 80274fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80274fe:	b112      	cbz	r2, 8027506 <_raise_r+0x1e>
 8027500:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8027504:	b94b      	cbnz	r3, 802751a <_raise_r+0x32>
 8027506:	4620      	mov	r0, r4
 8027508:	f000 f830 	bl	802756c <_getpid_r>
 802750c:	462a      	mov	r2, r5
 802750e:	4601      	mov	r1, r0
 8027510:	4620      	mov	r0, r4
 8027512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027516:	f000 b817 	b.w	8027548 <_kill_r>
 802751a:	2b01      	cmp	r3, #1
 802751c:	d00a      	beq.n	8027534 <_raise_r+0x4c>
 802751e:	1c59      	adds	r1, r3, #1
 8027520:	d103      	bne.n	802752a <_raise_r+0x42>
 8027522:	2316      	movs	r3, #22
 8027524:	6003      	str	r3, [r0, #0]
 8027526:	2001      	movs	r0, #1
 8027528:	e7e7      	b.n	80274fa <_raise_r+0x12>
 802752a:	2400      	movs	r4, #0
 802752c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8027530:	4628      	mov	r0, r5
 8027532:	4798      	blx	r3
 8027534:	2000      	movs	r0, #0
 8027536:	e7e0      	b.n	80274fa <_raise_r+0x12>

08027538 <raise>:
 8027538:	4b02      	ldr	r3, [pc, #8]	; (8027544 <raise+0xc>)
 802753a:	4601      	mov	r1, r0
 802753c:	6818      	ldr	r0, [r3, #0]
 802753e:	f7ff bfd3 	b.w	80274e8 <_raise_r>
 8027542:	bf00      	nop
 8027544:	200001a4 	.word	0x200001a4

08027548 <_kill_r>:
 8027548:	b538      	push	{r3, r4, r5, lr}
 802754a:	4d07      	ldr	r5, [pc, #28]	; (8027568 <_kill_r+0x20>)
 802754c:	2300      	movs	r3, #0
 802754e:	4604      	mov	r4, r0
 8027550:	4608      	mov	r0, r1
 8027552:	4611      	mov	r1, r2
 8027554:	602b      	str	r3, [r5, #0]
 8027556:	f7dd fa29 	bl	80049ac <_kill>
 802755a:	1c43      	adds	r3, r0, #1
 802755c:	d102      	bne.n	8027564 <_kill_r+0x1c>
 802755e:	682b      	ldr	r3, [r5, #0]
 8027560:	b103      	cbz	r3, 8027564 <_kill_r+0x1c>
 8027562:	6023      	str	r3, [r4, #0]
 8027564:	bd38      	pop	{r3, r4, r5, pc}
 8027566:	bf00      	nop
 8027568:	2000b144 	.word	0x2000b144

0802756c <_getpid_r>:
 802756c:	f7dd ba16 	b.w	800499c <_getpid>

08027570 <sniprintf>:
 8027570:	b40c      	push	{r2, r3}
 8027572:	b530      	push	{r4, r5, lr}
 8027574:	4b17      	ldr	r3, [pc, #92]	; (80275d4 <sniprintf+0x64>)
 8027576:	1e0c      	subs	r4, r1, #0
 8027578:	681d      	ldr	r5, [r3, #0]
 802757a:	b09d      	sub	sp, #116	; 0x74
 802757c:	da08      	bge.n	8027590 <sniprintf+0x20>
 802757e:	238b      	movs	r3, #139	; 0x8b
 8027580:	602b      	str	r3, [r5, #0]
 8027582:	f04f 30ff 	mov.w	r0, #4294967295
 8027586:	b01d      	add	sp, #116	; 0x74
 8027588:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802758c:	b002      	add	sp, #8
 802758e:	4770      	bx	lr
 8027590:	f44f 7302 	mov.w	r3, #520	; 0x208
 8027594:	f8ad 3014 	strh.w	r3, [sp, #20]
 8027598:	bf14      	ite	ne
 802759a:	f104 33ff 	addne.w	r3, r4, #4294967295
 802759e:	4623      	moveq	r3, r4
 80275a0:	9304      	str	r3, [sp, #16]
 80275a2:	9307      	str	r3, [sp, #28]
 80275a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80275a8:	9002      	str	r0, [sp, #8]
 80275aa:	9006      	str	r0, [sp, #24]
 80275ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80275b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80275b2:	ab21      	add	r3, sp, #132	; 0x84
 80275b4:	a902      	add	r1, sp, #8
 80275b6:	4628      	mov	r0, r5
 80275b8:	9301      	str	r3, [sp, #4]
 80275ba:	f000 fde7 	bl	802818c <_svfiprintf_r>
 80275be:	1c43      	adds	r3, r0, #1
 80275c0:	bfbc      	itt	lt
 80275c2:	238b      	movlt	r3, #139	; 0x8b
 80275c4:	602b      	strlt	r3, [r5, #0]
 80275c6:	2c00      	cmp	r4, #0
 80275c8:	d0dd      	beq.n	8027586 <sniprintf+0x16>
 80275ca:	9b02      	ldr	r3, [sp, #8]
 80275cc:	2200      	movs	r2, #0
 80275ce:	701a      	strb	r2, [r3, #0]
 80275d0:	e7d9      	b.n	8027586 <sniprintf+0x16>
 80275d2:	bf00      	nop
 80275d4:	200001a4 	.word	0x200001a4

080275d8 <siprintf>:
 80275d8:	b40e      	push	{r1, r2, r3}
 80275da:	b500      	push	{lr}
 80275dc:	b09c      	sub	sp, #112	; 0x70
 80275de:	ab1d      	add	r3, sp, #116	; 0x74
 80275e0:	9002      	str	r0, [sp, #8]
 80275e2:	9006      	str	r0, [sp, #24]
 80275e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80275e8:	4809      	ldr	r0, [pc, #36]	; (8027610 <siprintf+0x38>)
 80275ea:	9107      	str	r1, [sp, #28]
 80275ec:	9104      	str	r1, [sp, #16]
 80275ee:	4909      	ldr	r1, [pc, #36]	; (8027614 <siprintf+0x3c>)
 80275f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80275f4:	9105      	str	r1, [sp, #20]
 80275f6:	6800      	ldr	r0, [r0, #0]
 80275f8:	9301      	str	r3, [sp, #4]
 80275fa:	a902      	add	r1, sp, #8
 80275fc:	f000 fdc6 	bl	802818c <_svfiprintf_r>
 8027600:	9b02      	ldr	r3, [sp, #8]
 8027602:	2200      	movs	r2, #0
 8027604:	701a      	strb	r2, [r3, #0]
 8027606:	b01c      	add	sp, #112	; 0x70
 8027608:	f85d eb04 	ldr.w	lr, [sp], #4
 802760c:	b003      	add	sp, #12
 802760e:	4770      	bx	lr
 8027610:	200001a4 	.word	0x200001a4
 8027614:	ffff0208 	.word	0xffff0208

08027618 <siscanf>:
 8027618:	b40e      	push	{r1, r2, r3}
 802761a:	b510      	push	{r4, lr}
 802761c:	b09f      	sub	sp, #124	; 0x7c
 802761e:	ac21      	add	r4, sp, #132	; 0x84
 8027620:	f44f 7101 	mov.w	r1, #516	; 0x204
 8027624:	f854 2b04 	ldr.w	r2, [r4], #4
 8027628:	9201      	str	r2, [sp, #4]
 802762a:	f8ad 101c 	strh.w	r1, [sp, #28]
 802762e:	9004      	str	r0, [sp, #16]
 8027630:	9008      	str	r0, [sp, #32]
 8027632:	f7d8 fe37 	bl	80002a4 <strlen>
 8027636:	4b0c      	ldr	r3, [pc, #48]	; (8027668 <siscanf+0x50>)
 8027638:	9005      	str	r0, [sp, #20]
 802763a:	9009      	str	r0, [sp, #36]	; 0x24
 802763c:	930d      	str	r3, [sp, #52]	; 0x34
 802763e:	480b      	ldr	r0, [pc, #44]	; (802766c <siscanf+0x54>)
 8027640:	9a01      	ldr	r2, [sp, #4]
 8027642:	6800      	ldr	r0, [r0, #0]
 8027644:	9403      	str	r4, [sp, #12]
 8027646:	2300      	movs	r3, #0
 8027648:	9311      	str	r3, [sp, #68]	; 0x44
 802764a:	9316      	str	r3, [sp, #88]	; 0x58
 802764c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8027650:	f8ad 301e 	strh.w	r3, [sp, #30]
 8027654:	a904      	add	r1, sp, #16
 8027656:	4623      	mov	r3, r4
 8027658:	f000 fef2 	bl	8028440 <__ssvfiscanf_r>
 802765c:	b01f      	add	sp, #124	; 0x7c
 802765e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027662:	b003      	add	sp, #12
 8027664:	4770      	bx	lr
 8027666:	bf00      	nop
 8027668:	08027693 	.word	0x08027693
 802766c:	200001a4 	.word	0x200001a4

08027670 <__sread>:
 8027670:	b510      	push	{r4, lr}
 8027672:	460c      	mov	r4, r1
 8027674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027678:	f001 f9a6 	bl	80289c8 <_read_r>
 802767c:	2800      	cmp	r0, #0
 802767e:	bfab      	itete	ge
 8027680:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8027682:	89a3      	ldrhlt	r3, [r4, #12]
 8027684:	181b      	addge	r3, r3, r0
 8027686:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802768a:	bfac      	ite	ge
 802768c:	6563      	strge	r3, [r4, #84]	; 0x54
 802768e:	81a3      	strhlt	r3, [r4, #12]
 8027690:	bd10      	pop	{r4, pc}

08027692 <__seofread>:
 8027692:	2000      	movs	r0, #0
 8027694:	4770      	bx	lr

08027696 <__swrite>:
 8027696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802769a:	461f      	mov	r7, r3
 802769c:	898b      	ldrh	r3, [r1, #12]
 802769e:	05db      	lsls	r3, r3, #23
 80276a0:	4605      	mov	r5, r0
 80276a2:	460c      	mov	r4, r1
 80276a4:	4616      	mov	r6, r2
 80276a6:	d505      	bpl.n	80276b4 <__swrite+0x1e>
 80276a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80276ac:	2302      	movs	r3, #2
 80276ae:	2200      	movs	r2, #0
 80276b0:	f000 fc68 	bl	8027f84 <_lseek_r>
 80276b4:	89a3      	ldrh	r3, [r4, #12]
 80276b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80276ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80276be:	81a3      	strh	r3, [r4, #12]
 80276c0:	4632      	mov	r2, r6
 80276c2:	463b      	mov	r3, r7
 80276c4:	4628      	mov	r0, r5
 80276c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80276ca:	f000 b9ad 	b.w	8027a28 <_write_r>

080276ce <__sseek>:
 80276ce:	b510      	push	{r4, lr}
 80276d0:	460c      	mov	r4, r1
 80276d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80276d6:	f000 fc55 	bl	8027f84 <_lseek_r>
 80276da:	1c43      	adds	r3, r0, #1
 80276dc:	89a3      	ldrh	r3, [r4, #12]
 80276de:	bf15      	itete	ne
 80276e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80276e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80276e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80276ea:	81a3      	strheq	r3, [r4, #12]
 80276ec:	bf18      	it	ne
 80276ee:	81a3      	strhne	r3, [r4, #12]
 80276f0:	bd10      	pop	{r4, pc}

080276f2 <__sclose>:
 80276f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80276f6:	f000 ba79 	b.w	8027bec <_close_r>

080276fa <strcpy>:
 80276fa:	4603      	mov	r3, r0
 80276fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8027700:	f803 2b01 	strb.w	r2, [r3], #1
 8027704:	2a00      	cmp	r2, #0
 8027706:	d1f9      	bne.n	80276fc <strcpy+0x2>
 8027708:	4770      	bx	lr

0802770a <strstr>:
 802770a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802770c:	780c      	ldrb	r4, [r1, #0]
 802770e:	b164      	cbz	r4, 802772a <strstr+0x20>
 8027710:	4603      	mov	r3, r0
 8027712:	781a      	ldrb	r2, [r3, #0]
 8027714:	4618      	mov	r0, r3
 8027716:	1c5e      	adds	r6, r3, #1
 8027718:	b90a      	cbnz	r2, 802771e <strstr+0x14>
 802771a:	4610      	mov	r0, r2
 802771c:	e005      	b.n	802772a <strstr+0x20>
 802771e:	4294      	cmp	r4, r2
 8027720:	d108      	bne.n	8027734 <strstr+0x2a>
 8027722:	460d      	mov	r5, r1
 8027724:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8027728:	b902      	cbnz	r2, 802772c <strstr+0x22>
 802772a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802772c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8027730:	4297      	cmp	r7, r2
 8027732:	d0f7      	beq.n	8027724 <strstr+0x1a>
 8027734:	4633      	mov	r3, r6
 8027736:	e7ec      	b.n	8027712 <strstr+0x8>

08027738 <strtok>:
 8027738:	4b16      	ldr	r3, [pc, #88]	; (8027794 <strtok+0x5c>)
 802773a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802773c:	681e      	ldr	r6, [r3, #0]
 802773e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8027740:	4605      	mov	r5, r0
 8027742:	b9fc      	cbnz	r4, 8027784 <strtok+0x4c>
 8027744:	2050      	movs	r0, #80	; 0x50
 8027746:	9101      	str	r1, [sp, #4]
 8027748:	f7ff fade 	bl	8026d08 <malloc>
 802774c:	9901      	ldr	r1, [sp, #4]
 802774e:	65b0      	str	r0, [r6, #88]	; 0x58
 8027750:	4602      	mov	r2, r0
 8027752:	b920      	cbnz	r0, 802775e <strtok+0x26>
 8027754:	4b10      	ldr	r3, [pc, #64]	; (8027798 <strtok+0x60>)
 8027756:	4811      	ldr	r0, [pc, #68]	; (802779c <strtok+0x64>)
 8027758:	2157      	movs	r1, #87	; 0x57
 802775a:	f7ff fa63 	bl	8026c24 <__assert_func>
 802775e:	e9c0 4400 	strd	r4, r4, [r0]
 8027762:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8027766:	e9c0 4404 	strd	r4, r4, [r0, #16]
 802776a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 802776e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8027772:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8027776:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 802777a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 802777e:	6184      	str	r4, [r0, #24]
 8027780:	7704      	strb	r4, [r0, #28]
 8027782:	6244      	str	r4, [r0, #36]	; 0x24
 8027784:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8027786:	2301      	movs	r3, #1
 8027788:	4628      	mov	r0, r5
 802778a:	b002      	add	sp, #8
 802778c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8027790:	f000 b806 	b.w	80277a0 <__strtok_r>
 8027794:	200001a4 	.word	0x200001a4
 8027798:	0802d230 	.word	0x0802d230
 802779c:	0802d247 	.word	0x0802d247

080277a0 <__strtok_r>:
 80277a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80277a2:	b908      	cbnz	r0, 80277a8 <__strtok_r+0x8>
 80277a4:	6810      	ldr	r0, [r2, #0]
 80277a6:	b188      	cbz	r0, 80277cc <__strtok_r+0x2c>
 80277a8:	4604      	mov	r4, r0
 80277aa:	4620      	mov	r0, r4
 80277ac:	f814 5b01 	ldrb.w	r5, [r4], #1
 80277b0:	460f      	mov	r7, r1
 80277b2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80277b6:	b91e      	cbnz	r6, 80277c0 <__strtok_r+0x20>
 80277b8:	b965      	cbnz	r5, 80277d4 <__strtok_r+0x34>
 80277ba:	6015      	str	r5, [r2, #0]
 80277bc:	4628      	mov	r0, r5
 80277be:	e005      	b.n	80277cc <__strtok_r+0x2c>
 80277c0:	42b5      	cmp	r5, r6
 80277c2:	d1f6      	bne.n	80277b2 <__strtok_r+0x12>
 80277c4:	2b00      	cmp	r3, #0
 80277c6:	d1f0      	bne.n	80277aa <__strtok_r+0xa>
 80277c8:	6014      	str	r4, [r2, #0]
 80277ca:	7003      	strb	r3, [r0, #0]
 80277cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80277ce:	461c      	mov	r4, r3
 80277d0:	e00c      	b.n	80277ec <__strtok_r+0x4c>
 80277d2:	b915      	cbnz	r5, 80277da <__strtok_r+0x3a>
 80277d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80277d8:	460e      	mov	r6, r1
 80277da:	f816 5b01 	ldrb.w	r5, [r6], #1
 80277de:	42ab      	cmp	r3, r5
 80277e0:	d1f7      	bne.n	80277d2 <__strtok_r+0x32>
 80277e2:	2b00      	cmp	r3, #0
 80277e4:	d0f3      	beq.n	80277ce <__strtok_r+0x2e>
 80277e6:	2300      	movs	r3, #0
 80277e8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80277ec:	6014      	str	r4, [r2, #0]
 80277ee:	e7ed      	b.n	80277cc <__strtok_r+0x2c>

080277f0 <_strtol_l.isra.0>:
 80277f0:	2b01      	cmp	r3, #1
 80277f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80277f6:	d001      	beq.n	80277fc <_strtol_l.isra.0+0xc>
 80277f8:	2b24      	cmp	r3, #36	; 0x24
 80277fa:	d906      	bls.n	802780a <_strtol_l.isra.0+0x1a>
 80277fc:	f7ff fa48 	bl	8026c90 <__errno>
 8027800:	2316      	movs	r3, #22
 8027802:	6003      	str	r3, [r0, #0]
 8027804:	2000      	movs	r0, #0
 8027806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802780a:	4f3a      	ldr	r7, [pc, #232]	; (80278f4 <_strtol_l.isra.0+0x104>)
 802780c:	468e      	mov	lr, r1
 802780e:	4676      	mov	r6, lr
 8027810:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8027814:	5de5      	ldrb	r5, [r4, r7]
 8027816:	f015 0508 	ands.w	r5, r5, #8
 802781a:	d1f8      	bne.n	802780e <_strtol_l.isra.0+0x1e>
 802781c:	2c2d      	cmp	r4, #45	; 0x2d
 802781e:	d134      	bne.n	802788a <_strtol_l.isra.0+0x9a>
 8027820:	f89e 4000 	ldrb.w	r4, [lr]
 8027824:	f04f 0801 	mov.w	r8, #1
 8027828:	f106 0e02 	add.w	lr, r6, #2
 802782c:	2b00      	cmp	r3, #0
 802782e:	d05c      	beq.n	80278ea <_strtol_l.isra.0+0xfa>
 8027830:	2b10      	cmp	r3, #16
 8027832:	d10c      	bne.n	802784e <_strtol_l.isra.0+0x5e>
 8027834:	2c30      	cmp	r4, #48	; 0x30
 8027836:	d10a      	bne.n	802784e <_strtol_l.isra.0+0x5e>
 8027838:	f89e 4000 	ldrb.w	r4, [lr]
 802783c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8027840:	2c58      	cmp	r4, #88	; 0x58
 8027842:	d14d      	bne.n	80278e0 <_strtol_l.isra.0+0xf0>
 8027844:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8027848:	2310      	movs	r3, #16
 802784a:	f10e 0e02 	add.w	lr, lr, #2
 802784e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8027852:	f10c 3cff 	add.w	ip, ip, #4294967295
 8027856:	2600      	movs	r6, #0
 8027858:	fbbc f9f3 	udiv	r9, ip, r3
 802785c:	4635      	mov	r5, r6
 802785e:	fb03 ca19 	mls	sl, r3, r9, ip
 8027862:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8027866:	2f09      	cmp	r7, #9
 8027868:	d818      	bhi.n	802789c <_strtol_l.isra.0+0xac>
 802786a:	463c      	mov	r4, r7
 802786c:	42a3      	cmp	r3, r4
 802786e:	dd24      	ble.n	80278ba <_strtol_l.isra.0+0xca>
 8027870:	2e00      	cmp	r6, #0
 8027872:	db1f      	blt.n	80278b4 <_strtol_l.isra.0+0xc4>
 8027874:	45a9      	cmp	r9, r5
 8027876:	d31d      	bcc.n	80278b4 <_strtol_l.isra.0+0xc4>
 8027878:	d101      	bne.n	802787e <_strtol_l.isra.0+0x8e>
 802787a:	45a2      	cmp	sl, r4
 802787c:	db1a      	blt.n	80278b4 <_strtol_l.isra.0+0xc4>
 802787e:	fb05 4503 	mla	r5, r5, r3, r4
 8027882:	2601      	movs	r6, #1
 8027884:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8027888:	e7eb      	b.n	8027862 <_strtol_l.isra.0+0x72>
 802788a:	2c2b      	cmp	r4, #43	; 0x2b
 802788c:	bf08      	it	eq
 802788e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8027892:	46a8      	mov	r8, r5
 8027894:	bf08      	it	eq
 8027896:	f106 0e02 	addeq.w	lr, r6, #2
 802789a:	e7c7      	b.n	802782c <_strtol_l.isra.0+0x3c>
 802789c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80278a0:	2f19      	cmp	r7, #25
 80278a2:	d801      	bhi.n	80278a8 <_strtol_l.isra.0+0xb8>
 80278a4:	3c37      	subs	r4, #55	; 0x37
 80278a6:	e7e1      	b.n	802786c <_strtol_l.isra.0+0x7c>
 80278a8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80278ac:	2f19      	cmp	r7, #25
 80278ae:	d804      	bhi.n	80278ba <_strtol_l.isra.0+0xca>
 80278b0:	3c57      	subs	r4, #87	; 0x57
 80278b2:	e7db      	b.n	802786c <_strtol_l.isra.0+0x7c>
 80278b4:	f04f 36ff 	mov.w	r6, #4294967295
 80278b8:	e7e4      	b.n	8027884 <_strtol_l.isra.0+0x94>
 80278ba:	2e00      	cmp	r6, #0
 80278bc:	da05      	bge.n	80278ca <_strtol_l.isra.0+0xda>
 80278be:	2322      	movs	r3, #34	; 0x22
 80278c0:	6003      	str	r3, [r0, #0]
 80278c2:	4665      	mov	r5, ip
 80278c4:	b942      	cbnz	r2, 80278d8 <_strtol_l.isra.0+0xe8>
 80278c6:	4628      	mov	r0, r5
 80278c8:	e79d      	b.n	8027806 <_strtol_l.isra.0+0x16>
 80278ca:	f1b8 0f00 	cmp.w	r8, #0
 80278ce:	d000      	beq.n	80278d2 <_strtol_l.isra.0+0xe2>
 80278d0:	426d      	negs	r5, r5
 80278d2:	2a00      	cmp	r2, #0
 80278d4:	d0f7      	beq.n	80278c6 <_strtol_l.isra.0+0xd6>
 80278d6:	b10e      	cbz	r6, 80278dc <_strtol_l.isra.0+0xec>
 80278d8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80278dc:	6011      	str	r1, [r2, #0]
 80278de:	e7f2      	b.n	80278c6 <_strtol_l.isra.0+0xd6>
 80278e0:	2430      	movs	r4, #48	; 0x30
 80278e2:	2b00      	cmp	r3, #0
 80278e4:	d1b3      	bne.n	802784e <_strtol_l.isra.0+0x5e>
 80278e6:	2308      	movs	r3, #8
 80278e8:	e7b1      	b.n	802784e <_strtol_l.isra.0+0x5e>
 80278ea:	2c30      	cmp	r4, #48	; 0x30
 80278ec:	d0a4      	beq.n	8027838 <_strtol_l.isra.0+0x48>
 80278ee:	230a      	movs	r3, #10
 80278f0:	e7ad      	b.n	802784e <_strtol_l.isra.0+0x5e>
 80278f2:	bf00      	nop
 80278f4:	0802d0f1 	.word	0x0802d0f1

080278f8 <_strtol_r>:
 80278f8:	f7ff bf7a 	b.w	80277f0 <_strtol_l.isra.0>

080278fc <strtol>:
 80278fc:	4613      	mov	r3, r2
 80278fe:	460a      	mov	r2, r1
 8027900:	4601      	mov	r1, r0
 8027902:	4802      	ldr	r0, [pc, #8]	; (802790c <strtol+0x10>)
 8027904:	6800      	ldr	r0, [r0, #0]
 8027906:	f7ff bf73 	b.w	80277f0 <_strtol_l.isra.0>
 802790a:	bf00      	nop
 802790c:	200001a4 	.word	0x200001a4

08027910 <_vsniprintf_r>:
 8027910:	b530      	push	{r4, r5, lr}
 8027912:	1e14      	subs	r4, r2, #0
 8027914:	4605      	mov	r5, r0
 8027916:	b09b      	sub	sp, #108	; 0x6c
 8027918:	4618      	mov	r0, r3
 802791a:	da05      	bge.n	8027928 <_vsniprintf_r+0x18>
 802791c:	238b      	movs	r3, #139	; 0x8b
 802791e:	602b      	str	r3, [r5, #0]
 8027920:	f04f 30ff 	mov.w	r0, #4294967295
 8027924:	b01b      	add	sp, #108	; 0x6c
 8027926:	bd30      	pop	{r4, r5, pc}
 8027928:	f44f 7302 	mov.w	r3, #520	; 0x208
 802792c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8027930:	bf14      	ite	ne
 8027932:	f104 33ff 	addne.w	r3, r4, #4294967295
 8027936:	4623      	moveq	r3, r4
 8027938:	9302      	str	r3, [sp, #8]
 802793a:	9305      	str	r3, [sp, #20]
 802793c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8027940:	9100      	str	r1, [sp, #0]
 8027942:	9104      	str	r1, [sp, #16]
 8027944:	f8ad 300e 	strh.w	r3, [sp, #14]
 8027948:	4602      	mov	r2, r0
 802794a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802794c:	4669      	mov	r1, sp
 802794e:	4628      	mov	r0, r5
 8027950:	f000 fc1c 	bl	802818c <_svfiprintf_r>
 8027954:	1c43      	adds	r3, r0, #1
 8027956:	bfbc      	itt	lt
 8027958:	238b      	movlt	r3, #139	; 0x8b
 802795a:	602b      	strlt	r3, [r5, #0]
 802795c:	2c00      	cmp	r4, #0
 802795e:	d0e1      	beq.n	8027924 <_vsniprintf_r+0x14>
 8027960:	9b00      	ldr	r3, [sp, #0]
 8027962:	2200      	movs	r2, #0
 8027964:	701a      	strb	r2, [r3, #0]
 8027966:	e7dd      	b.n	8027924 <_vsniprintf_r+0x14>

08027968 <vsniprintf>:
 8027968:	b507      	push	{r0, r1, r2, lr}
 802796a:	9300      	str	r3, [sp, #0]
 802796c:	4613      	mov	r3, r2
 802796e:	460a      	mov	r2, r1
 8027970:	4601      	mov	r1, r0
 8027972:	4803      	ldr	r0, [pc, #12]	; (8027980 <vsniprintf+0x18>)
 8027974:	6800      	ldr	r0, [r0, #0]
 8027976:	f7ff ffcb 	bl	8027910 <_vsniprintf_r>
 802797a:	b003      	add	sp, #12
 802797c:	f85d fb04 	ldr.w	pc, [sp], #4
 8027980:	200001a4 	.word	0x200001a4

08027984 <__swbuf_r>:
 8027984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027986:	460e      	mov	r6, r1
 8027988:	4614      	mov	r4, r2
 802798a:	4605      	mov	r5, r0
 802798c:	b118      	cbz	r0, 8027996 <__swbuf_r+0x12>
 802798e:	6983      	ldr	r3, [r0, #24]
 8027990:	b90b      	cbnz	r3, 8027996 <__swbuf_r+0x12>
 8027992:	f000 fa55 	bl	8027e40 <__sinit>
 8027996:	4b21      	ldr	r3, [pc, #132]	; (8027a1c <__swbuf_r+0x98>)
 8027998:	429c      	cmp	r4, r3
 802799a:	d12b      	bne.n	80279f4 <__swbuf_r+0x70>
 802799c:	686c      	ldr	r4, [r5, #4]
 802799e:	69a3      	ldr	r3, [r4, #24]
 80279a0:	60a3      	str	r3, [r4, #8]
 80279a2:	89a3      	ldrh	r3, [r4, #12]
 80279a4:	071a      	lsls	r2, r3, #28
 80279a6:	d52f      	bpl.n	8027a08 <__swbuf_r+0x84>
 80279a8:	6923      	ldr	r3, [r4, #16]
 80279aa:	b36b      	cbz	r3, 8027a08 <__swbuf_r+0x84>
 80279ac:	6923      	ldr	r3, [r4, #16]
 80279ae:	6820      	ldr	r0, [r4, #0]
 80279b0:	1ac0      	subs	r0, r0, r3
 80279b2:	6963      	ldr	r3, [r4, #20]
 80279b4:	b2f6      	uxtb	r6, r6
 80279b6:	4283      	cmp	r3, r0
 80279b8:	4637      	mov	r7, r6
 80279ba:	dc04      	bgt.n	80279c6 <__swbuf_r+0x42>
 80279bc:	4621      	mov	r1, r4
 80279be:	4628      	mov	r0, r5
 80279c0:	f000 f9aa 	bl	8027d18 <_fflush_r>
 80279c4:	bb30      	cbnz	r0, 8027a14 <__swbuf_r+0x90>
 80279c6:	68a3      	ldr	r3, [r4, #8]
 80279c8:	3b01      	subs	r3, #1
 80279ca:	60a3      	str	r3, [r4, #8]
 80279cc:	6823      	ldr	r3, [r4, #0]
 80279ce:	1c5a      	adds	r2, r3, #1
 80279d0:	6022      	str	r2, [r4, #0]
 80279d2:	701e      	strb	r6, [r3, #0]
 80279d4:	6963      	ldr	r3, [r4, #20]
 80279d6:	3001      	adds	r0, #1
 80279d8:	4283      	cmp	r3, r0
 80279da:	d004      	beq.n	80279e6 <__swbuf_r+0x62>
 80279dc:	89a3      	ldrh	r3, [r4, #12]
 80279de:	07db      	lsls	r3, r3, #31
 80279e0:	d506      	bpl.n	80279f0 <__swbuf_r+0x6c>
 80279e2:	2e0a      	cmp	r6, #10
 80279e4:	d104      	bne.n	80279f0 <__swbuf_r+0x6c>
 80279e6:	4621      	mov	r1, r4
 80279e8:	4628      	mov	r0, r5
 80279ea:	f000 f995 	bl	8027d18 <_fflush_r>
 80279ee:	b988      	cbnz	r0, 8027a14 <__swbuf_r+0x90>
 80279f0:	4638      	mov	r0, r7
 80279f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80279f4:	4b0a      	ldr	r3, [pc, #40]	; (8027a20 <__swbuf_r+0x9c>)
 80279f6:	429c      	cmp	r4, r3
 80279f8:	d101      	bne.n	80279fe <__swbuf_r+0x7a>
 80279fa:	68ac      	ldr	r4, [r5, #8]
 80279fc:	e7cf      	b.n	802799e <__swbuf_r+0x1a>
 80279fe:	4b09      	ldr	r3, [pc, #36]	; (8027a24 <__swbuf_r+0xa0>)
 8027a00:	429c      	cmp	r4, r3
 8027a02:	bf08      	it	eq
 8027a04:	68ec      	ldreq	r4, [r5, #12]
 8027a06:	e7ca      	b.n	802799e <__swbuf_r+0x1a>
 8027a08:	4621      	mov	r1, r4
 8027a0a:	4628      	mov	r0, r5
 8027a0c:	f000 f81e 	bl	8027a4c <__swsetup_r>
 8027a10:	2800      	cmp	r0, #0
 8027a12:	d0cb      	beq.n	80279ac <__swbuf_r+0x28>
 8027a14:	f04f 37ff 	mov.w	r7, #4294967295
 8027a18:	e7ea      	b.n	80279f0 <__swbuf_r+0x6c>
 8027a1a:	bf00      	nop
 8027a1c:	0802d2c8 	.word	0x0802d2c8
 8027a20:	0802d2e8 	.word	0x0802d2e8
 8027a24:	0802d2a8 	.word	0x0802d2a8

08027a28 <_write_r>:
 8027a28:	b538      	push	{r3, r4, r5, lr}
 8027a2a:	4d07      	ldr	r5, [pc, #28]	; (8027a48 <_write_r+0x20>)
 8027a2c:	4604      	mov	r4, r0
 8027a2e:	4608      	mov	r0, r1
 8027a30:	4611      	mov	r1, r2
 8027a32:	2200      	movs	r2, #0
 8027a34:	602a      	str	r2, [r5, #0]
 8027a36:	461a      	mov	r2, r3
 8027a38:	f7dc ffef 	bl	8004a1a <_write>
 8027a3c:	1c43      	adds	r3, r0, #1
 8027a3e:	d102      	bne.n	8027a46 <_write_r+0x1e>
 8027a40:	682b      	ldr	r3, [r5, #0]
 8027a42:	b103      	cbz	r3, 8027a46 <_write_r+0x1e>
 8027a44:	6023      	str	r3, [r4, #0]
 8027a46:	bd38      	pop	{r3, r4, r5, pc}
 8027a48:	2000b144 	.word	0x2000b144

08027a4c <__swsetup_r>:
 8027a4c:	4b32      	ldr	r3, [pc, #200]	; (8027b18 <__swsetup_r+0xcc>)
 8027a4e:	b570      	push	{r4, r5, r6, lr}
 8027a50:	681d      	ldr	r5, [r3, #0]
 8027a52:	4606      	mov	r6, r0
 8027a54:	460c      	mov	r4, r1
 8027a56:	b125      	cbz	r5, 8027a62 <__swsetup_r+0x16>
 8027a58:	69ab      	ldr	r3, [r5, #24]
 8027a5a:	b913      	cbnz	r3, 8027a62 <__swsetup_r+0x16>
 8027a5c:	4628      	mov	r0, r5
 8027a5e:	f000 f9ef 	bl	8027e40 <__sinit>
 8027a62:	4b2e      	ldr	r3, [pc, #184]	; (8027b1c <__swsetup_r+0xd0>)
 8027a64:	429c      	cmp	r4, r3
 8027a66:	d10f      	bne.n	8027a88 <__swsetup_r+0x3c>
 8027a68:	686c      	ldr	r4, [r5, #4]
 8027a6a:	89a3      	ldrh	r3, [r4, #12]
 8027a6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027a70:	0719      	lsls	r1, r3, #28
 8027a72:	d42c      	bmi.n	8027ace <__swsetup_r+0x82>
 8027a74:	06dd      	lsls	r5, r3, #27
 8027a76:	d411      	bmi.n	8027a9c <__swsetup_r+0x50>
 8027a78:	2309      	movs	r3, #9
 8027a7a:	6033      	str	r3, [r6, #0]
 8027a7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8027a80:	81a3      	strh	r3, [r4, #12]
 8027a82:	f04f 30ff 	mov.w	r0, #4294967295
 8027a86:	e03e      	b.n	8027b06 <__swsetup_r+0xba>
 8027a88:	4b25      	ldr	r3, [pc, #148]	; (8027b20 <__swsetup_r+0xd4>)
 8027a8a:	429c      	cmp	r4, r3
 8027a8c:	d101      	bne.n	8027a92 <__swsetup_r+0x46>
 8027a8e:	68ac      	ldr	r4, [r5, #8]
 8027a90:	e7eb      	b.n	8027a6a <__swsetup_r+0x1e>
 8027a92:	4b24      	ldr	r3, [pc, #144]	; (8027b24 <__swsetup_r+0xd8>)
 8027a94:	429c      	cmp	r4, r3
 8027a96:	bf08      	it	eq
 8027a98:	68ec      	ldreq	r4, [r5, #12]
 8027a9a:	e7e6      	b.n	8027a6a <__swsetup_r+0x1e>
 8027a9c:	0758      	lsls	r0, r3, #29
 8027a9e:	d512      	bpl.n	8027ac6 <__swsetup_r+0x7a>
 8027aa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027aa2:	b141      	cbz	r1, 8027ab6 <__swsetup_r+0x6a>
 8027aa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027aa8:	4299      	cmp	r1, r3
 8027aaa:	d002      	beq.n	8027ab2 <__swsetup_r+0x66>
 8027aac:	4630      	mov	r0, r6
 8027aae:	f7ff f96b 	bl	8026d88 <_free_r>
 8027ab2:	2300      	movs	r3, #0
 8027ab4:	6363      	str	r3, [r4, #52]	; 0x34
 8027ab6:	89a3      	ldrh	r3, [r4, #12]
 8027ab8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8027abc:	81a3      	strh	r3, [r4, #12]
 8027abe:	2300      	movs	r3, #0
 8027ac0:	6063      	str	r3, [r4, #4]
 8027ac2:	6923      	ldr	r3, [r4, #16]
 8027ac4:	6023      	str	r3, [r4, #0]
 8027ac6:	89a3      	ldrh	r3, [r4, #12]
 8027ac8:	f043 0308 	orr.w	r3, r3, #8
 8027acc:	81a3      	strh	r3, [r4, #12]
 8027ace:	6923      	ldr	r3, [r4, #16]
 8027ad0:	b94b      	cbnz	r3, 8027ae6 <__swsetup_r+0x9a>
 8027ad2:	89a3      	ldrh	r3, [r4, #12]
 8027ad4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8027ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8027adc:	d003      	beq.n	8027ae6 <__swsetup_r+0x9a>
 8027ade:	4621      	mov	r1, r4
 8027ae0:	4630      	mov	r0, r6
 8027ae2:	f000 fa85 	bl	8027ff0 <__smakebuf_r>
 8027ae6:	89a0      	ldrh	r0, [r4, #12]
 8027ae8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027aec:	f010 0301 	ands.w	r3, r0, #1
 8027af0:	d00a      	beq.n	8027b08 <__swsetup_r+0xbc>
 8027af2:	2300      	movs	r3, #0
 8027af4:	60a3      	str	r3, [r4, #8]
 8027af6:	6963      	ldr	r3, [r4, #20]
 8027af8:	425b      	negs	r3, r3
 8027afa:	61a3      	str	r3, [r4, #24]
 8027afc:	6923      	ldr	r3, [r4, #16]
 8027afe:	b943      	cbnz	r3, 8027b12 <__swsetup_r+0xc6>
 8027b00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8027b04:	d1ba      	bne.n	8027a7c <__swsetup_r+0x30>
 8027b06:	bd70      	pop	{r4, r5, r6, pc}
 8027b08:	0781      	lsls	r1, r0, #30
 8027b0a:	bf58      	it	pl
 8027b0c:	6963      	ldrpl	r3, [r4, #20]
 8027b0e:	60a3      	str	r3, [r4, #8]
 8027b10:	e7f4      	b.n	8027afc <__swsetup_r+0xb0>
 8027b12:	2000      	movs	r0, #0
 8027b14:	e7f7      	b.n	8027b06 <__swsetup_r+0xba>
 8027b16:	bf00      	nop
 8027b18:	200001a4 	.word	0x200001a4
 8027b1c:	0802d2c8 	.word	0x0802d2c8
 8027b20:	0802d2e8 	.word	0x0802d2e8
 8027b24:	0802d2a8 	.word	0x0802d2a8

08027b28 <__register_exitproc>:
 8027b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027b2c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8027be8 <__register_exitproc+0xc0>
 8027b30:	4606      	mov	r6, r0
 8027b32:	f8d8 0000 	ldr.w	r0, [r8]
 8027b36:	461f      	mov	r7, r3
 8027b38:	460d      	mov	r5, r1
 8027b3a:	4691      	mov	r9, r2
 8027b3c:	f000 fa1e 	bl	8027f7c <__retarget_lock_acquire_recursive>
 8027b40:	4b25      	ldr	r3, [pc, #148]	; (8027bd8 <__register_exitproc+0xb0>)
 8027b42:	681c      	ldr	r4, [r3, #0]
 8027b44:	b934      	cbnz	r4, 8027b54 <__register_exitproc+0x2c>
 8027b46:	4c25      	ldr	r4, [pc, #148]	; (8027bdc <__register_exitproc+0xb4>)
 8027b48:	601c      	str	r4, [r3, #0]
 8027b4a:	4b25      	ldr	r3, [pc, #148]	; (8027be0 <__register_exitproc+0xb8>)
 8027b4c:	b113      	cbz	r3, 8027b54 <__register_exitproc+0x2c>
 8027b4e:	681b      	ldr	r3, [r3, #0]
 8027b50:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8027b54:	6863      	ldr	r3, [r4, #4]
 8027b56:	2b1f      	cmp	r3, #31
 8027b58:	dd07      	ble.n	8027b6a <__register_exitproc+0x42>
 8027b5a:	f8d8 0000 	ldr.w	r0, [r8]
 8027b5e:	f000 fa0f 	bl	8027f80 <__retarget_lock_release_recursive>
 8027b62:	f04f 30ff 	mov.w	r0, #4294967295
 8027b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027b6a:	b34e      	cbz	r6, 8027bc0 <__register_exitproc+0x98>
 8027b6c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8027b70:	b988      	cbnz	r0, 8027b96 <__register_exitproc+0x6e>
 8027b72:	4b1c      	ldr	r3, [pc, #112]	; (8027be4 <__register_exitproc+0xbc>)
 8027b74:	b923      	cbnz	r3, 8027b80 <__register_exitproc+0x58>
 8027b76:	f8d8 0000 	ldr.w	r0, [r8]
 8027b7a:	f000 fa00 	bl	8027f7e <__retarget_lock_release>
 8027b7e:	e7f0      	b.n	8027b62 <__register_exitproc+0x3a>
 8027b80:	f44f 7084 	mov.w	r0, #264	; 0x108
 8027b84:	f7ff f8c0 	bl	8026d08 <malloc>
 8027b88:	2800      	cmp	r0, #0
 8027b8a:	d0f4      	beq.n	8027b76 <__register_exitproc+0x4e>
 8027b8c:	2300      	movs	r3, #0
 8027b8e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8027b92:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8027b96:	6863      	ldr	r3, [r4, #4]
 8027b98:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8027b9c:	2201      	movs	r2, #1
 8027b9e:	409a      	lsls	r2, r3
 8027ba0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8027ba4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8027ba8:	4313      	orrs	r3, r2
 8027baa:	2e02      	cmp	r6, #2
 8027bac:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8027bb0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8027bb4:	bf02      	ittt	eq
 8027bb6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8027bba:	431a      	orreq	r2, r3
 8027bbc:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8027bc0:	6863      	ldr	r3, [r4, #4]
 8027bc2:	f8d8 0000 	ldr.w	r0, [r8]
 8027bc6:	1c5a      	adds	r2, r3, #1
 8027bc8:	3302      	adds	r3, #2
 8027bca:	6062      	str	r2, [r4, #4]
 8027bcc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8027bd0:	f000 f9d6 	bl	8027f80 <__retarget_lock_release_recursive>
 8027bd4:	2000      	movs	r0, #0
 8027bd6:	e7c6      	b.n	8027b66 <__register_exitproc+0x3e>
 8027bd8:	2000a38c 	.word	0x2000a38c
 8027bdc:	2000a300 	.word	0x2000a300
 8027be0:	0802d22c 	.word	0x0802d22c
 8027be4:	08026d09 	.word	0x08026d09
 8027be8:	20000208 	.word	0x20000208

08027bec <_close_r>:
 8027bec:	b538      	push	{r3, r4, r5, lr}
 8027bee:	4d06      	ldr	r5, [pc, #24]	; (8027c08 <_close_r+0x1c>)
 8027bf0:	2300      	movs	r3, #0
 8027bf2:	4604      	mov	r4, r0
 8027bf4:	4608      	mov	r0, r1
 8027bf6:	602b      	str	r3, [r5, #0]
 8027bf8:	f7dc ff2b 	bl	8004a52 <_close>
 8027bfc:	1c43      	adds	r3, r0, #1
 8027bfe:	d102      	bne.n	8027c06 <_close_r+0x1a>
 8027c00:	682b      	ldr	r3, [r5, #0]
 8027c02:	b103      	cbz	r3, 8027c06 <_close_r+0x1a>
 8027c04:	6023      	str	r3, [r4, #0]
 8027c06:	bd38      	pop	{r3, r4, r5, pc}
 8027c08:	2000b144 	.word	0x2000b144

08027c0c <__sflush_r>:
 8027c0c:	898a      	ldrh	r2, [r1, #12]
 8027c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027c12:	4605      	mov	r5, r0
 8027c14:	0710      	lsls	r0, r2, #28
 8027c16:	460c      	mov	r4, r1
 8027c18:	d458      	bmi.n	8027ccc <__sflush_r+0xc0>
 8027c1a:	684b      	ldr	r3, [r1, #4]
 8027c1c:	2b00      	cmp	r3, #0
 8027c1e:	dc05      	bgt.n	8027c2c <__sflush_r+0x20>
 8027c20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8027c22:	2b00      	cmp	r3, #0
 8027c24:	dc02      	bgt.n	8027c2c <__sflush_r+0x20>
 8027c26:	2000      	movs	r0, #0
 8027c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027c2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027c2e:	2e00      	cmp	r6, #0
 8027c30:	d0f9      	beq.n	8027c26 <__sflush_r+0x1a>
 8027c32:	2300      	movs	r3, #0
 8027c34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8027c38:	682f      	ldr	r7, [r5, #0]
 8027c3a:	602b      	str	r3, [r5, #0]
 8027c3c:	d032      	beq.n	8027ca4 <__sflush_r+0x98>
 8027c3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8027c40:	89a3      	ldrh	r3, [r4, #12]
 8027c42:	075a      	lsls	r2, r3, #29
 8027c44:	d505      	bpl.n	8027c52 <__sflush_r+0x46>
 8027c46:	6863      	ldr	r3, [r4, #4]
 8027c48:	1ac0      	subs	r0, r0, r3
 8027c4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8027c4c:	b10b      	cbz	r3, 8027c52 <__sflush_r+0x46>
 8027c4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027c50:	1ac0      	subs	r0, r0, r3
 8027c52:	2300      	movs	r3, #0
 8027c54:	4602      	mov	r2, r0
 8027c56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027c58:	6a21      	ldr	r1, [r4, #32]
 8027c5a:	4628      	mov	r0, r5
 8027c5c:	47b0      	blx	r6
 8027c5e:	1c43      	adds	r3, r0, #1
 8027c60:	89a3      	ldrh	r3, [r4, #12]
 8027c62:	d106      	bne.n	8027c72 <__sflush_r+0x66>
 8027c64:	6829      	ldr	r1, [r5, #0]
 8027c66:	291d      	cmp	r1, #29
 8027c68:	d82c      	bhi.n	8027cc4 <__sflush_r+0xb8>
 8027c6a:	4a2a      	ldr	r2, [pc, #168]	; (8027d14 <__sflush_r+0x108>)
 8027c6c:	40ca      	lsrs	r2, r1
 8027c6e:	07d6      	lsls	r6, r2, #31
 8027c70:	d528      	bpl.n	8027cc4 <__sflush_r+0xb8>
 8027c72:	2200      	movs	r2, #0
 8027c74:	6062      	str	r2, [r4, #4]
 8027c76:	04d9      	lsls	r1, r3, #19
 8027c78:	6922      	ldr	r2, [r4, #16]
 8027c7a:	6022      	str	r2, [r4, #0]
 8027c7c:	d504      	bpl.n	8027c88 <__sflush_r+0x7c>
 8027c7e:	1c42      	adds	r2, r0, #1
 8027c80:	d101      	bne.n	8027c86 <__sflush_r+0x7a>
 8027c82:	682b      	ldr	r3, [r5, #0]
 8027c84:	b903      	cbnz	r3, 8027c88 <__sflush_r+0x7c>
 8027c86:	6560      	str	r0, [r4, #84]	; 0x54
 8027c88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027c8a:	602f      	str	r7, [r5, #0]
 8027c8c:	2900      	cmp	r1, #0
 8027c8e:	d0ca      	beq.n	8027c26 <__sflush_r+0x1a>
 8027c90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027c94:	4299      	cmp	r1, r3
 8027c96:	d002      	beq.n	8027c9e <__sflush_r+0x92>
 8027c98:	4628      	mov	r0, r5
 8027c9a:	f7ff f875 	bl	8026d88 <_free_r>
 8027c9e:	2000      	movs	r0, #0
 8027ca0:	6360      	str	r0, [r4, #52]	; 0x34
 8027ca2:	e7c1      	b.n	8027c28 <__sflush_r+0x1c>
 8027ca4:	6a21      	ldr	r1, [r4, #32]
 8027ca6:	2301      	movs	r3, #1
 8027ca8:	4628      	mov	r0, r5
 8027caa:	47b0      	blx	r6
 8027cac:	1c41      	adds	r1, r0, #1
 8027cae:	d1c7      	bne.n	8027c40 <__sflush_r+0x34>
 8027cb0:	682b      	ldr	r3, [r5, #0]
 8027cb2:	2b00      	cmp	r3, #0
 8027cb4:	d0c4      	beq.n	8027c40 <__sflush_r+0x34>
 8027cb6:	2b1d      	cmp	r3, #29
 8027cb8:	d001      	beq.n	8027cbe <__sflush_r+0xb2>
 8027cba:	2b16      	cmp	r3, #22
 8027cbc:	d101      	bne.n	8027cc2 <__sflush_r+0xb6>
 8027cbe:	602f      	str	r7, [r5, #0]
 8027cc0:	e7b1      	b.n	8027c26 <__sflush_r+0x1a>
 8027cc2:	89a3      	ldrh	r3, [r4, #12]
 8027cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027cc8:	81a3      	strh	r3, [r4, #12]
 8027cca:	e7ad      	b.n	8027c28 <__sflush_r+0x1c>
 8027ccc:	690f      	ldr	r7, [r1, #16]
 8027cce:	2f00      	cmp	r7, #0
 8027cd0:	d0a9      	beq.n	8027c26 <__sflush_r+0x1a>
 8027cd2:	0793      	lsls	r3, r2, #30
 8027cd4:	680e      	ldr	r6, [r1, #0]
 8027cd6:	bf08      	it	eq
 8027cd8:	694b      	ldreq	r3, [r1, #20]
 8027cda:	600f      	str	r7, [r1, #0]
 8027cdc:	bf18      	it	ne
 8027cde:	2300      	movne	r3, #0
 8027ce0:	eba6 0807 	sub.w	r8, r6, r7
 8027ce4:	608b      	str	r3, [r1, #8]
 8027ce6:	f1b8 0f00 	cmp.w	r8, #0
 8027cea:	dd9c      	ble.n	8027c26 <__sflush_r+0x1a>
 8027cec:	6a21      	ldr	r1, [r4, #32]
 8027cee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8027cf0:	4643      	mov	r3, r8
 8027cf2:	463a      	mov	r2, r7
 8027cf4:	4628      	mov	r0, r5
 8027cf6:	47b0      	blx	r6
 8027cf8:	2800      	cmp	r0, #0
 8027cfa:	dc06      	bgt.n	8027d0a <__sflush_r+0xfe>
 8027cfc:	89a3      	ldrh	r3, [r4, #12]
 8027cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027d02:	81a3      	strh	r3, [r4, #12]
 8027d04:	f04f 30ff 	mov.w	r0, #4294967295
 8027d08:	e78e      	b.n	8027c28 <__sflush_r+0x1c>
 8027d0a:	4407      	add	r7, r0
 8027d0c:	eba8 0800 	sub.w	r8, r8, r0
 8027d10:	e7e9      	b.n	8027ce6 <__sflush_r+0xda>
 8027d12:	bf00      	nop
 8027d14:	20400001 	.word	0x20400001

08027d18 <_fflush_r>:
 8027d18:	b538      	push	{r3, r4, r5, lr}
 8027d1a:	690b      	ldr	r3, [r1, #16]
 8027d1c:	4605      	mov	r5, r0
 8027d1e:	460c      	mov	r4, r1
 8027d20:	b913      	cbnz	r3, 8027d28 <_fflush_r+0x10>
 8027d22:	2500      	movs	r5, #0
 8027d24:	4628      	mov	r0, r5
 8027d26:	bd38      	pop	{r3, r4, r5, pc}
 8027d28:	b118      	cbz	r0, 8027d32 <_fflush_r+0x1a>
 8027d2a:	6983      	ldr	r3, [r0, #24]
 8027d2c:	b90b      	cbnz	r3, 8027d32 <_fflush_r+0x1a>
 8027d2e:	f000 f887 	bl	8027e40 <__sinit>
 8027d32:	4b14      	ldr	r3, [pc, #80]	; (8027d84 <_fflush_r+0x6c>)
 8027d34:	429c      	cmp	r4, r3
 8027d36:	d11b      	bne.n	8027d70 <_fflush_r+0x58>
 8027d38:	686c      	ldr	r4, [r5, #4]
 8027d3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027d3e:	2b00      	cmp	r3, #0
 8027d40:	d0ef      	beq.n	8027d22 <_fflush_r+0xa>
 8027d42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8027d44:	07d0      	lsls	r0, r2, #31
 8027d46:	d404      	bmi.n	8027d52 <_fflush_r+0x3a>
 8027d48:	0599      	lsls	r1, r3, #22
 8027d4a:	d402      	bmi.n	8027d52 <_fflush_r+0x3a>
 8027d4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027d4e:	f000 f915 	bl	8027f7c <__retarget_lock_acquire_recursive>
 8027d52:	4628      	mov	r0, r5
 8027d54:	4621      	mov	r1, r4
 8027d56:	f7ff ff59 	bl	8027c0c <__sflush_r>
 8027d5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027d5c:	07da      	lsls	r2, r3, #31
 8027d5e:	4605      	mov	r5, r0
 8027d60:	d4e0      	bmi.n	8027d24 <_fflush_r+0xc>
 8027d62:	89a3      	ldrh	r3, [r4, #12]
 8027d64:	059b      	lsls	r3, r3, #22
 8027d66:	d4dd      	bmi.n	8027d24 <_fflush_r+0xc>
 8027d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027d6a:	f000 f909 	bl	8027f80 <__retarget_lock_release_recursive>
 8027d6e:	e7d9      	b.n	8027d24 <_fflush_r+0xc>
 8027d70:	4b05      	ldr	r3, [pc, #20]	; (8027d88 <_fflush_r+0x70>)
 8027d72:	429c      	cmp	r4, r3
 8027d74:	d101      	bne.n	8027d7a <_fflush_r+0x62>
 8027d76:	68ac      	ldr	r4, [r5, #8]
 8027d78:	e7df      	b.n	8027d3a <_fflush_r+0x22>
 8027d7a:	4b04      	ldr	r3, [pc, #16]	; (8027d8c <_fflush_r+0x74>)
 8027d7c:	429c      	cmp	r4, r3
 8027d7e:	bf08      	it	eq
 8027d80:	68ec      	ldreq	r4, [r5, #12]
 8027d82:	e7da      	b.n	8027d3a <_fflush_r+0x22>
 8027d84:	0802d2c8 	.word	0x0802d2c8
 8027d88:	0802d2e8 	.word	0x0802d2e8
 8027d8c:	0802d2a8 	.word	0x0802d2a8

08027d90 <std>:
 8027d90:	2300      	movs	r3, #0
 8027d92:	b510      	push	{r4, lr}
 8027d94:	4604      	mov	r4, r0
 8027d96:	e9c0 3300 	strd	r3, r3, [r0]
 8027d9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8027d9e:	6083      	str	r3, [r0, #8]
 8027da0:	8181      	strh	r1, [r0, #12]
 8027da2:	6643      	str	r3, [r0, #100]	; 0x64
 8027da4:	81c2      	strh	r2, [r0, #14]
 8027da6:	6183      	str	r3, [r0, #24]
 8027da8:	4619      	mov	r1, r3
 8027daa:	2208      	movs	r2, #8
 8027dac:	305c      	adds	r0, #92	; 0x5c
 8027dae:	f7fe ffe3 	bl	8026d78 <memset>
 8027db2:	4b05      	ldr	r3, [pc, #20]	; (8027dc8 <std+0x38>)
 8027db4:	6263      	str	r3, [r4, #36]	; 0x24
 8027db6:	4b05      	ldr	r3, [pc, #20]	; (8027dcc <std+0x3c>)
 8027db8:	62a3      	str	r3, [r4, #40]	; 0x28
 8027dba:	4b05      	ldr	r3, [pc, #20]	; (8027dd0 <std+0x40>)
 8027dbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8027dbe:	4b05      	ldr	r3, [pc, #20]	; (8027dd4 <std+0x44>)
 8027dc0:	6224      	str	r4, [r4, #32]
 8027dc2:	6323      	str	r3, [r4, #48]	; 0x30
 8027dc4:	bd10      	pop	{r4, pc}
 8027dc6:	bf00      	nop
 8027dc8:	08027671 	.word	0x08027671
 8027dcc:	08027697 	.word	0x08027697
 8027dd0:	080276cf 	.word	0x080276cf
 8027dd4:	080276f3 	.word	0x080276f3

08027dd8 <_cleanup_r>:
 8027dd8:	4901      	ldr	r1, [pc, #4]	; (8027de0 <_cleanup_r+0x8>)
 8027dda:	f000 b8af 	b.w	8027f3c <_fwalk_reent>
 8027dde:	bf00      	nop
 8027de0:	08027d19 	.word	0x08027d19

08027de4 <__sfmoreglue>:
 8027de4:	b570      	push	{r4, r5, r6, lr}
 8027de6:	1e4a      	subs	r2, r1, #1
 8027de8:	2568      	movs	r5, #104	; 0x68
 8027dea:	4355      	muls	r5, r2
 8027dec:	460e      	mov	r6, r1
 8027dee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8027df2:	f7ff f819 	bl	8026e28 <_malloc_r>
 8027df6:	4604      	mov	r4, r0
 8027df8:	b140      	cbz	r0, 8027e0c <__sfmoreglue+0x28>
 8027dfa:	2100      	movs	r1, #0
 8027dfc:	e9c0 1600 	strd	r1, r6, [r0]
 8027e00:	300c      	adds	r0, #12
 8027e02:	60a0      	str	r0, [r4, #8]
 8027e04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8027e08:	f7fe ffb6 	bl	8026d78 <memset>
 8027e0c:	4620      	mov	r0, r4
 8027e0e:	bd70      	pop	{r4, r5, r6, pc}

08027e10 <__sfp_lock_acquire>:
 8027e10:	4801      	ldr	r0, [pc, #4]	; (8027e18 <__sfp_lock_acquire+0x8>)
 8027e12:	f000 b8b3 	b.w	8027f7c <__retarget_lock_acquire_recursive>
 8027e16:	bf00      	nop
 8027e18:	2000b13c 	.word	0x2000b13c

08027e1c <__sfp_lock_release>:
 8027e1c:	4801      	ldr	r0, [pc, #4]	; (8027e24 <__sfp_lock_release+0x8>)
 8027e1e:	f000 b8af 	b.w	8027f80 <__retarget_lock_release_recursive>
 8027e22:	bf00      	nop
 8027e24:	2000b13c 	.word	0x2000b13c

08027e28 <__sinit_lock_acquire>:
 8027e28:	4801      	ldr	r0, [pc, #4]	; (8027e30 <__sinit_lock_acquire+0x8>)
 8027e2a:	f000 b8a7 	b.w	8027f7c <__retarget_lock_acquire_recursive>
 8027e2e:	bf00      	nop
 8027e30:	2000b13b 	.word	0x2000b13b

08027e34 <__sinit_lock_release>:
 8027e34:	4801      	ldr	r0, [pc, #4]	; (8027e3c <__sinit_lock_release+0x8>)
 8027e36:	f000 b8a3 	b.w	8027f80 <__retarget_lock_release_recursive>
 8027e3a:	bf00      	nop
 8027e3c:	2000b13b 	.word	0x2000b13b

08027e40 <__sinit>:
 8027e40:	b510      	push	{r4, lr}
 8027e42:	4604      	mov	r4, r0
 8027e44:	f7ff fff0 	bl	8027e28 <__sinit_lock_acquire>
 8027e48:	69a3      	ldr	r3, [r4, #24]
 8027e4a:	b11b      	cbz	r3, 8027e54 <__sinit+0x14>
 8027e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027e50:	f7ff bff0 	b.w	8027e34 <__sinit_lock_release>
 8027e54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8027e58:	6523      	str	r3, [r4, #80]	; 0x50
 8027e5a:	4b13      	ldr	r3, [pc, #76]	; (8027ea8 <__sinit+0x68>)
 8027e5c:	4a13      	ldr	r2, [pc, #76]	; (8027eac <__sinit+0x6c>)
 8027e5e:	681b      	ldr	r3, [r3, #0]
 8027e60:	62a2      	str	r2, [r4, #40]	; 0x28
 8027e62:	42a3      	cmp	r3, r4
 8027e64:	bf04      	itt	eq
 8027e66:	2301      	moveq	r3, #1
 8027e68:	61a3      	streq	r3, [r4, #24]
 8027e6a:	4620      	mov	r0, r4
 8027e6c:	f000 f820 	bl	8027eb0 <__sfp>
 8027e70:	6060      	str	r0, [r4, #4]
 8027e72:	4620      	mov	r0, r4
 8027e74:	f000 f81c 	bl	8027eb0 <__sfp>
 8027e78:	60a0      	str	r0, [r4, #8]
 8027e7a:	4620      	mov	r0, r4
 8027e7c:	f000 f818 	bl	8027eb0 <__sfp>
 8027e80:	2200      	movs	r2, #0
 8027e82:	60e0      	str	r0, [r4, #12]
 8027e84:	2104      	movs	r1, #4
 8027e86:	6860      	ldr	r0, [r4, #4]
 8027e88:	f7ff ff82 	bl	8027d90 <std>
 8027e8c:	68a0      	ldr	r0, [r4, #8]
 8027e8e:	2201      	movs	r2, #1
 8027e90:	2109      	movs	r1, #9
 8027e92:	f7ff ff7d 	bl	8027d90 <std>
 8027e96:	68e0      	ldr	r0, [r4, #12]
 8027e98:	2202      	movs	r2, #2
 8027e9a:	2112      	movs	r1, #18
 8027e9c:	f7ff ff78 	bl	8027d90 <std>
 8027ea0:	2301      	movs	r3, #1
 8027ea2:	61a3      	str	r3, [r4, #24]
 8027ea4:	e7d2      	b.n	8027e4c <__sinit+0xc>
 8027ea6:	bf00      	nop
 8027ea8:	0802d1f4 	.word	0x0802d1f4
 8027eac:	08027dd9 	.word	0x08027dd9

08027eb0 <__sfp>:
 8027eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027eb2:	4607      	mov	r7, r0
 8027eb4:	f7ff ffac 	bl	8027e10 <__sfp_lock_acquire>
 8027eb8:	4b1e      	ldr	r3, [pc, #120]	; (8027f34 <__sfp+0x84>)
 8027eba:	681e      	ldr	r6, [r3, #0]
 8027ebc:	69b3      	ldr	r3, [r6, #24]
 8027ebe:	b913      	cbnz	r3, 8027ec6 <__sfp+0x16>
 8027ec0:	4630      	mov	r0, r6
 8027ec2:	f7ff ffbd 	bl	8027e40 <__sinit>
 8027ec6:	3648      	adds	r6, #72	; 0x48
 8027ec8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8027ecc:	3b01      	subs	r3, #1
 8027ece:	d503      	bpl.n	8027ed8 <__sfp+0x28>
 8027ed0:	6833      	ldr	r3, [r6, #0]
 8027ed2:	b30b      	cbz	r3, 8027f18 <__sfp+0x68>
 8027ed4:	6836      	ldr	r6, [r6, #0]
 8027ed6:	e7f7      	b.n	8027ec8 <__sfp+0x18>
 8027ed8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8027edc:	b9d5      	cbnz	r5, 8027f14 <__sfp+0x64>
 8027ede:	4b16      	ldr	r3, [pc, #88]	; (8027f38 <__sfp+0x88>)
 8027ee0:	60e3      	str	r3, [r4, #12]
 8027ee2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8027ee6:	6665      	str	r5, [r4, #100]	; 0x64
 8027ee8:	f000 f847 	bl	8027f7a <__retarget_lock_init_recursive>
 8027eec:	f7ff ff96 	bl	8027e1c <__sfp_lock_release>
 8027ef0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8027ef4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8027ef8:	6025      	str	r5, [r4, #0]
 8027efa:	61a5      	str	r5, [r4, #24]
 8027efc:	2208      	movs	r2, #8
 8027efe:	4629      	mov	r1, r5
 8027f00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8027f04:	f7fe ff38 	bl	8026d78 <memset>
 8027f08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8027f0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8027f10:	4620      	mov	r0, r4
 8027f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027f14:	3468      	adds	r4, #104	; 0x68
 8027f16:	e7d9      	b.n	8027ecc <__sfp+0x1c>
 8027f18:	2104      	movs	r1, #4
 8027f1a:	4638      	mov	r0, r7
 8027f1c:	f7ff ff62 	bl	8027de4 <__sfmoreglue>
 8027f20:	4604      	mov	r4, r0
 8027f22:	6030      	str	r0, [r6, #0]
 8027f24:	2800      	cmp	r0, #0
 8027f26:	d1d5      	bne.n	8027ed4 <__sfp+0x24>
 8027f28:	f7ff ff78 	bl	8027e1c <__sfp_lock_release>
 8027f2c:	230c      	movs	r3, #12
 8027f2e:	603b      	str	r3, [r7, #0]
 8027f30:	e7ee      	b.n	8027f10 <__sfp+0x60>
 8027f32:	bf00      	nop
 8027f34:	0802d1f4 	.word	0x0802d1f4
 8027f38:	ffff0001 	.word	0xffff0001

08027f3c <_fwalk_reent>:
 8027f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027f40:	4606      	mov	r6, r0
 8027f42:	4688      	mov	r8, r1
 8027f44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8027f48:	2700      	movs	r7, #0
 8027f4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8027f4e:	f1b9 0901 	subs.w	r9, r9, #1
 8027f52:	d505      	bpl.n	8027f60 <_fwalk_reent+0x24>
 8027f54:	6824      	ldr	r4, [r4, #0]
 8027f56:	2c00      	cmp	r4, #0
 8027f58:	d1f7      	bne.n	8027f4a <_fwalk_reent+0xe>
 8027f5a:	4638      	mov	r0, r7
 8027f5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027f60:	89ab      	ldrh	r3, [r5, #12]
 8027f62:	2b01      	cmp	r3, #1
 8027f64:	d907      	bls.n	8027f76 <_fwalk_reent+0x3a>
 8027f66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8027f6a:	3301      	adds	r3, #1
 8027f6c:	d003      	beq.n	8027f76 <_fwalk_reent+0x3a>
 8027f6e:	4629      	mov	r1, r5
 8027f70:	4630      	mov	r0, r6
 8027f72:	47c0      	blx	r8
 8027f74:	4307      	orrs	r7, r0
 8027f76:	3568      	adds	r5, #104	; 0x68
 8027f78:	e7e9      	b.n	8027f4e <_fwalk_reent+0x12>

08027f7a <__retarget_lock_init_recursive>:
 8027f7a:	4770      	bx	lr

08027f7c <__retarget_lock_acquire_recursive>:
 8027f7c:	4770      	bx	lr

08027f7e <__retarget_lock_release>:
 8027f7e:	4770      	bx	lr

08027f80 <__retarget_lock_release_recursive>:
 8027f80:	4770      	bx	lr
	...

08027f84 <_lseek_r>:
 8027f84:	b538      	push	{r3, r4, r5, lr}
 8027f86:	4d07      	ldr	r5, [pc, #28]	; (8027fa4 <_lseek_r+0x20>)
 8027f88:	4604      	mov	r4, r0
 8027f8a:	4608      	mov	r0, r1
 8027f8c:	4611      	mov	r1, r2
 8027f8e:	2200      	movs	r2, #0
 8027f90:	602a      	str	r2, [r5, #0]
 8027f92:	461a      	mov	r2, r3
 8027f94:	f7dc fd84 	bl	8004aa0 <_lseek>
 8027f98:	1c43      	adds	r3, r0, #1
 8027f9a:	d102      	bne.n	8027fa2 <_lseek_r+0x1e>
 8027f9c:	682b      	ldr	r3, [r5, #0]
 8027f9e:	b103      	cbz	r3, 8027fa2 <_lseek_r+0x1e>
 8027fa0:	6023      	str	r3, [r4, #0]
 8027fa2:	bd38      	pop	{r3, r4, r5, pc}
 8027fa4:	2000b144 	.word	0x2000b144

08027fa8 <__swhatbuf_r>:
 8027fa8:	b570      	push	{r4, r5, r6, lr}
 8027faa:	460e      	mov	r6, r1
 8027fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027fb0:	2900      	cmp	r1, #0
 8027fb2:	b096      	sub	sp, #88	; 0x58
 8027fb4:	4614      	mov	r4, r2
 8027fb6:	461d      	mov	r5, r3
 8027fb8:	da07      	bge.n	8027fca <__swhatbuf_r+0x22>
 8027fba:	2300      	movs	r3, #0
 8027fbc:	602b      	str	r3, [r5, #0]
 8027fbe:	89b3      	ldrh	r3, [r6, #12]
 8027fc0:	061a      	lsls	r2, r3, #24
 8027fc2:	d410      	bmi.n	8027fe6 <__swhatbuf_r+0x3e>
 8027fc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8027fc8:	e00e      	b.n	8027fe8 <__swhatbuf_r+0x40>
 8027fca:	466a      	mov	r2, sp
 8027fcc:	f000 fe00 	bl	8028bd0 <_fstat_r>
 8027fd0:	2800      	cmp	r0, #0
 8027fd2:	dbf2      	blt.n	8027fba <__swhatbuf_r+0x12>
 8027fd4:	9a01      	ldr	r2, [sp, #4]
 8027fd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8027fda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8027fde:	425a      	negs	r2, r3
 8027fe0:	415a      	adcs	r2, r3
 8027fe2:	602a      	str	r2, [r5, #0]
 8027fe4:	e7ee      	b.n	8027fc4 <__swhatbuf_r+0x1c>
 8027fe6:	2340      	movs	r3, #64	; 0x40
 8027fe8:	2000      	movs	r0, #0
 8027fea:	6023      	str	r3, [r4, #0]
 8027fec:	b016      	add	sp, #88	; 0x58
 8027fee:	bd70      	pop	{r4, r5, r6, pc}

08027ff0 <__smakebuf_r>:
 8027ff0:	898b      	ldrh	r3, [r1, #12]
 8027ff2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027ff4:	079d      	lsls	r5, r3, #30
 8027ff6:	4606      	mov	r6, r0
 8027ff8:	460c      	mov	r4, r1
 8027ffa:	d507      	bpl.n	802800c <__smakebuf_r+0x1c>
 8027ffc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8028000:	6023      	str	r3, [r4, #0]
 8028002:	6123      	str	r3, [r4, #16]
 8028004:	2301      	movs	r3, #1
 8028006:	6163      	str	r3, [r4, #20]
 8028008:	b002      	add	sp, #8
 802800a:	bd70      	pop	{r4, r5, r6, pc}
 802800c:	ab01      	add	r3, sp, #4
 802800e:	466a      	mov	r2, sp
 8028010:	f7ff ffca 	bl	8027fa8 <__swhatbuf_r>
 8028014:	9900      	ldr	r1, [sp, #0]
 8028016:	4605      	mov	r5, r0
 8028018:	4630      	mov	r0, r6
 802801a:	f7fe ff05 	bl	8026e28 <_malloc_r>
 802801e:	b948      	cbnz	r0, 8028034 <__smakebuf_r+0x44>
 8028020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028024:	059a      	lsls	r2, r3, #22
 8028026:	d4ef      	bmi.n	8028008 <__smakebuf_r+0x18>
 8028028:	f023 0303 	bic.w	r3, r3, #3
 802802c:	f043 0302 	orr.w	r3, r3, #2
 8028030:	81a3      	strh	r3, [r4, #12]
 8028032:	e7e3      	b.n	8027ffc <__smakebuf_r+0xc>
 8028034:	4b0d      	ldr	r3, [pc, #52]	; (802806c <__smakebuf_r+0x7c>)
 8028036:	62b3      	str	r3, [r6, #40]	; 0x28
 8028038:	89a3      	ldrh	r3, [r4, #12]
 802803a:	6020      	str	r0, [r4, #0]
 802803c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8028040:	81a3      	strh	r3, [r4, #12]
 8028042:	9b00      	ldr	r3, [sp, #0]
 8028044:	6163      	str	r3, [r4, #20]
 8028046:	9b01      	ldr	r3, [sp, #4]
 8028048:	6120      	str	r0, [r4, #16]
 802804a:	b15b      	cbz	r3, 8028064 <__smakebuf_r+0x74>
 802804c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028050:	4630      	mov	r0, r6
 8028052:	f000 fdcf 	bl	8028bf4 <_isatty_r>
 8028056:	b128      	cbz	r0, 8028064 <__smakebuf_r+0x74>
 8028058:	89a3      	ldrh	r3, [r4, #12]
 802805a:	f023 0303 	bic.w	r3, r3, #3
 802805e:	f043 0301 	orr.w	r3, r3, #1
 8028062:	81a3      	strh	r3, [r4, #12]
 8028064:	89a0      	ldrh	r0, [r4, #12]
 8028066:	4305      	orrs	r5, r0
 8028068:	81a5      	strh	r5, [r4, #12]
 802806a:	e7cd      	b.n	8028008 <__smakebuf_r+0x18>
 802806c:	08027dd9 	.word	0x08027dd9

08028070 <__malloc_lock>:
 8028070:	4801      	ldr	r0, [pc, #4]	; (8028078 <__malloc_lock+0x8>)
 8028072:	f7ff bf83 	b.w	8027f7c <__retarget_lock_acquire_recursive>
 8028076:	bf00      	nop
 8028078:	2000b138 	.word	0x2000b138

0802807c <__malloc_unlock>:
 802807c:	4801      	ldr	r0, [pc, #4]	; (8028084 <__malloc_unlock+0x8>)
 802807e:	f7ff bf7f 	b.w	8027f80 <__retarget_lock_release_recursive>
 8028082:	bf00      	nop
 8028084:	2000b138 	.word	0x2000b138

08028088 <_realloc_r>:
 8028088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802808a:	4607      	mov	r7, r0
 802808c:	4614      	mov	r4, r2
 802808e:	460e      	mov	r6, r1
 8028090:	b921      	cbnz	r1, 802809c <_realloc_r+0x14>
 8028092:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8028096:	4611      	mov	r1, r2
 8028098:	f7fe bec6 	b.w	8026e28 <_malloc_r>
 802809c:	b922      	cbnz	r2, 80280a8 <_realloc_r+0x20>
 802809e:	f7fe fe73 	bl	8026d88 <_free_r>
 80280a2:	4625      	mov	r5, r4
 80280a4:	4628      	mov	r0, r5
 80280a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80280a8:	f000 fdb4 	bl	8028c14 <_malloc_usable_size_r>
 80280ac:	42a0      	cmp	r0, r4
 80280ae:	d20f      	bcs.n	80280d0 <_realloc_r+0x48>
 80280b0:	4621      	mov	r1, r4
 80280b2:	4638      	mov	r0, r7
 80280b4:	f7fe feb8 	bl	8026e28 <_malloc_r>
 80280b8:	4605      	mov	r5, r0
 80280ba:	2800      	cmp	r0, #0
 80280bc:	d0f2      	beq.n	80280a4 <_realloc_r+0x1c>
 80280be:	4631      	mov	r1, r6
 80280c0:	4622      	mov	r2, r4
 80280c2:	f7fe fe31 	bl	8026d28 <memcpy>
 80280c6:	4631      	mov	r1, r6
 80280c8:	4638      	mov	r0, r7
 80280ca:	f7fe fe5d 	bl	8026d88 <_free_r>
 80280ce:	e7e9      	b.n	80280a4 <_realloc_r+0x1c>
 80280d0:	4635      	mov	r5, r6
 80280d2:	e7e7      	b.n	80280a4 <_realloc_r+0x1c>

080280d4 <__ssputs_r>:
 80280d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80280d8:	688e      	ldr	r6, [r1, #8]
 80280da:	429e      	cmp	r6, r3
 80280dc:	4682      	mov	sl, r0
 80280de:	460c      	mov	r4, r1
 80280e0:	4690      	mov	r8, r2
 80280e2:	461f      	mov	r7, r3
 80280e4:	d838      	bhi.n	8028158 <__ssputs_r+0x84>
 80280e6:	898a      	ldrh	r2, [r1, #12]
 80280e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80280ec:	d032      	beq.n	8028154 <__ssputs_r+0x80>
 80280ee:	6825      	ldr	r5, [r4, #0]
 80280f0:	6909      	ldr	r1, [r1, #16]
 80280f2:	eba5 0901 	sub.w	r9, r5, r1
 80280f6:	6965      	ldr	r5, [r4, #20]
 80280f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80280fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8028100:	3301      	adds	r3, #1
 8028102:	444b      	add	r3, r9
 8028104:	106d      	asrs	r5, r5, #1
 8028106:	429d      	cmp	r5, r3
 8028108:	bf38      	it	cc
 802810a:	461d      	movcc	r5, r3
 802810c:	0553      	lsls	r3, r2, #21
 802810e:	d531      	bpl.n	8028174 <__ssputs_r+0xa0>
 8028110:	4629      	mov	r1, r5
 8028112:	f7fe fe89 	bl	8026e28 <_malloc_r>
 8028116:	4606      	mov	r6, r0
 8028118:	b950      	cbnz	r0, 8028130 <__ssputs_r+0x5c>
 802811a:	230c      	movs	r3, #12
 802811c:	f8ca 3000 	str.w	r3, [sl]
 8028120:	89a3      	ldrh	r3, [r4, #12]
 8028122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028126:	81a3      	strh	r3, [r4, #12]
 8028128:	f04f 30ff 	mov.w	r0, #4294967295
 802812c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028130:	6921      	ldr	r1, [r4, #16]
 8028132:	464a      	mov	r2, r9
 8028134:	f7fe fdf8 	bl	8026d28 <memcpy>
 8028138:	89a3      	ldrh	r3, [r4, #12]
 802813a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802813e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8028142:	81a3      	strh	r3, [r4, #12]
 8028144:	6126      	str	r6, [r4, #16]
 8028146:	6165      	str	r5, [r4, #20]
 8028148:	444e      	add	r6, r9
 802814a:	eba5 0509 	sub.w	r5, r5, r9
 802814e:	6026      	str	r6, [r4, #0]
 8028150:	60a5      	str	r5, [r4, #8]
 8028152:	463e      	mov	r6, r7
 8028154:	42be      	cmp	r6, r7
 8028156:	d900      	bls.n	802815a <__ssputs_r+0x86>
 8028158:	463e      	mov	r6, r7
 802815a:	4632      	mov	r2, r6
 802815c:	6820      	ldr	r0, [r4, #0]
 802815e:	4641      	mov	r1, r8
 8028160:	f7fe fdf0 	bl	8026d44 <memmove>
 8028164:	68a3      	ldr	r3, [r4, #8]
 8028166:	6822      	ldr	r2, [r4, #0]
 8028168:	1b9b      	subs	r3, r3, r6
 802816a:	4432      	add	r2, r6
 802816c:	60a3      	str	r3, [r4, #8]
 802816e:	6022      	str	r2, [r4, #0]
 8028170:	2000      	movs	r0, #0
 8028172:	e7db      	b.n	802812c <__ssputs_r+0x58>
 8028174:	462a      	mov	r2, r5
 8028176:	f7ff ff87 	bl	8028088 <_realloc_r>
 802817a:	4606      	mov	r6, r0
 802817c:	2800      	cmp	r0, #0
 802817e:	d1e1      	bne.n	8028144 <__ssputs_r+0x70>
 8028180:	6921      	ldr	r1, [r4, #16]
 8028182:	4650      	mov	r0, sl
 8028184:	f7fe fe00 	bl	8026d88 <_free_r>
 8028188:	e7c7      	b.n	802811a <__ssputs_r+0x46>
	...

0802818c <_svfiprintf_r>:
 802818c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028190:	4698      	mov	r8, r3
 8028192:	898b      	ldrh	r3, [r1, #12]
 8028194:	061b      	lsls	r3, r3, #24
 8028196:	b09d      	sub	sp, #116	; 0x74
 8028198:	4607      	mov	r7, r0
 802819a:	460d      	mov	r5, r1
 802819c:	4614      	mov	r4, r2
 802819e:	d50e      	bpl.n	80281be <_svfiprintf_r+0x32>
 80281a0:	690b      	ldr	r3, [r1, #16]
 80281a2:	b963      	cbnz	r3, 80281be <_svfiprintf_r+0x32>
 80281a4:	2140      	movs	r1, #64	; 0x40
 80281a6:	f7fe fe3f 	bl	8026e28 <_malloc_r>
 80281aa:	6028      	str	r0, [r5, #0]
 80281ac:	6128      	str	r0, [r5, #16]
 80281ae:	b920      	cbnz	r0, 80281ba <_svfiprintf_r+0x2e>
 80281b0:	230c      	movs	r3, #12
 80281b2:	603b      	str	r3, [r7, #0]
 80281b4:	f04f 30ff 	mov.w	r0, #4294967295
 80281b8:	e0d1      	b.n	802835e <_svfiprintf_r+0x1d2>
 80281ba:	2340      	movs	r3, #64	; 0x40
 80281bc:	616b      	str	r3, [r5, #20]
 80281be:	2300      	movs	r3, #0
 80281c0:	9309      	str	r3, [sp, #36]	; 0x24
 80281c2:	2320      	movs	r3, #32
 80281c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80281c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80281cc:	2330      	movs	r3, #48	; 0x30
 80281ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8028378 <_svfiprintf_r+0x1ec>
 80281d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80281d6:	f04f 0901 	mov.w	r9, #1
 80281da:	4623      	mov	r3, r4
 80281dc:	469a      	mov	sl, r3
 80281de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80281e2:	b10a      	cbz	r2, 80281e8 <_svfiprintf_r+0x5c>
 80281e4:	2a25      	cmp	r2, #37	; 0x25
 80281e6:	d1f9      	bne.n	80281dc <_svfiprintf_r+0x50>
 80281e8:	ebba 0b04 	subs.w	fp, sl, r4
 80281ec:	d00b      	beq.n	8028206 <_svfiprintf_r+0x7a>
 80281ee:	465b      	mov	r3, fp
 80281f0:	4622      	mov	r2, r4
 80281f2:	4629      	mov	r1, r5
 80281f4:	4638      	mov	r0, r7
 80281f6:	f7ff ff6d 	bl	80280d4 <__ssputs_r>
 80281fa:	3001      	adds	r0, #1
 80281fc:	f000 80aa 	beq.w	8028354 <_svfiprintf_r+0x1c8>
 8028200:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028202:	445a      	add	r2, fp
 8028204:	9209      	str	r2, [sp, #36]	; 0x24
 8028206:	f89a 3000 	ldrb.w	r3, [sl]
 802820a:	2b00      	cmp	r3, #0
 802820c:	f000 80a2 	beq.w	8028354 <_svfiprintf_r+0x1c8>
 8028210:	2300      	movs	r3, #0
 8028212:	f04f 32ff 	mov.w	r2, #4294967295
 8028216:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802821a:	f10a 0a01 	add.w	sl, sl, #1
 802821e:	9304      	str	r3, [sp, #16]
 8028220:	9307      	str	r3, [sp, #28]
 8028222:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8028226:	931a      	str	r3, [sp, #104]	; 0x68
 8028228:	4654      	mov	r4, sl
 802822a:	2205      	movs	r2, #5
 802822c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028230:	4851      	ldr	r0, [pc, #324]	; (8028378 <_svfiprintf_r+0x1ec>)
 8028232:	f7d7 ffdd 	bl	80001f0 <memchr>
 8028236:	9a04      	ldr	r2, [sp, #16]
 8028238:	b9d8      	cbnz	r0, 8028272 <_svfiprintf_r+0xe6>
 802823a:	06d0      	lsls	r0, r2, #27
 802823c:	bf44      	itt	mi
 802823e:	2320      	movmi	r3, #32
 8028240:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028244:	0711      	lsls	r1, r2, #28
 8028246:	bf44      	itt	mi
 8028248:	232b      	movmi	r3, #43	; 0x2b
 802824a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802824e:	f89a 3000 	ldrb.w	r3, [sl]
 8028252:	2b2a      	cmp	r3, #42	; 0x2a
 8028254:	d015      	beq.n	8028282 <_svfiprintf_r+0xf6>
 8028256:	9a07      	ldr	r2, [sp, #28]
 8028258:	4654      	mov	r4, sl
 802825a:	2000      	movs	r0, #0
 802825c:	f04f 0c0a 	mov.w	ip, #10
 8028260:	4621      	mov	r1, r4
 8028262:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028266:	3b30      	subs	r3, #48	; 0x30
 8028268:	2b09      	cmp	r3, #9
 802826a:	d94e      	bls.n	802830a <_svfiprintf_r+0x17e>
 802826c:	b1b0      	cbz	r0, 802829c <_svfiprintf_r+0x110>
 802826e:	9207      	str	r2, [sp, #28]
 8028270:	e014      	b.n	802829c <_svfiprintf_r+0x110>
 8028272:	eba0 0308 	sub.w	r3, r0, r8
 8028276:	fa09 f303 	lsl.w	r3, r9, r3
 802827a:	4313      	orrs	r3, r2
 802827c:	9304      	str	r3, [sp, #16]
 802827e:	46a2      	mov	sl, r4
 8028280:	e7d2      	b.n	8028228 <_svfiprintf_r+0x9c>
 8028282:	9b03      	ldr	r3, [sp, #12]
 8028284:	1d19      	adds	r1, r3, #4
 8028286:	681b      	ldr	r3, [r3, #0]
 8028288:	9103      	str	r1, [sp, #12]
 802828a:	2b00      	cmp	r3, #0
 802828c:	bfbb      	ittet	lt
 802828e:	425b      	neglt	r3, r3
 8028290:	f042 0202 	orrlt.w	r2, r2, #2
 8028294:	9307      	strge	r3, [sp, #28]
 8028296:	9307      	strlt	r3, [sp, #28]
 8028298:	bfb8      	it	lt
 802829a:	9204      	strlt	r2, [sp, #16]
 802829c:	7823      	ldrb	r3, [r4, #0]
 802829e:	2b2e      	cmp	r3, #46	; 0x2e
 80282a0:	d10c      	bne.n	80282bc <_svfiprintf_r+0x130>
 80282a2:	7863      	ldrb	r3, [r4, #1]
 80282a4:	2b2a      	cmp	r3, #42	; 0x2a
 80282a6:	d135      	bne.n	8028314 <_svfiprintf_r+0x188>
 80282a8:	9b03      	ldr	r3, [sp, #12]
 80282aa:	1d1a      	adds	r2, r3, #4
 80282ac:	681b      	ldr	r3, [r3, #0]
 80282ae:	9203      	str	r2, [sp, #12]
 80282b0:	2b00      	cmp	r3, #0
 80282b2:	bfb8      	it	lt
 80282b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80282b8:	3402      	adds	r4, #2
 80282ba:	9305      	str	r3, [sp, #20]
 80282bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8028388 <_svfiprintf_r+0x1fc>
 80282c0:	7821      	ldrb	r1, [r4, #0]
 80282c2:	2203      	movs	r2, #3
 80282c4:	4650      	mov	r0, sl
 80282c6:	f7d7 ff93 	bl	80001f0 <memchr>
 80282ca:	b140      	cbz	r0, 80282de <_svfiprintf_r+0x152>
 80282cc:	2340      	movs	r3, #64	; 0x40
 80282ce:	eba0 000a 	sub.w	r0, r0, sl
 80282d2:	fa03 f000 	lsl.w	r0, r3, r0
 80282d6:	9b04      	ldr	r3, [sp, #16]
 80282d8:	4303      	orrs	r3, r0
 80282da:	3401      	adds	r4, #1
 80282dc:	9304      	str	r3, [sp, #16]
 80282de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80282e2:	4826      	ldr	r0, [pc, #152]	; (802837c <_svfiprintf_r+0x1f0>)
 80282e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80282e8:	2206      	movs	r2, #6
 80282ea:	f7d7 ff81 	bl	80001f0 <memchr>
 80282ee:	2800      	cmp	r0, #0
 80282f0:	d038      	beq.n	8028364 <_svfiprintf_r+0x1d8>
 80282f2:	4b23      	ldr	r3, [pc, #140]	; (8028380 <_svfiprintf_r+0x1f4>)
 80282f4:	bb1b      	cbnz	r3, 802833e <_svfiprintf_r+0x1b2>
 80282f6:	9b03      	ldr	r3, [sp, #12]
 80282f8:	3307      	adds	r3, #7
 80282fa:	f023 0307 	bic.w	r3, r3, #7
 80282fe:	3308      	adds	r3, #8
 8028300:	9303      	str	r3, [sp, #12]
 8028302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028304:	4433      	add	r3, r6
 8028306:	9309      	str	r3, [sp, #36]	; 0x24
 8028308:	e767      	b.n	80281da <_svfiprintf_r+0x4e>
 802830a:	fb0c 3202 	mla	r2, ip, r2, r3
 802830e:	460c      	mov	r4, r1
 8028310:	2001      	movs	r0, #1
 8028312:	e7a5      	b.n	8028260 <_svfiprintf_r+0xd4>
 8028314:	2300      	movs	r3, #0
 8028316:	3401      	adds	r4, #1
 8028318:	9305      	str	r3, [sp, #20]
 802831a:	4619      	mov	r1, r3
 802831c:	f04f 0c0a 	mov.w	ip, #10
 8028320:	4620      	mov	r0, r4
 8028322:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028326:	3a30      	subs	r2, #48	; 0x30
 8028328:	2a09      	cmp	r2, #9
 802832a:	d903      	bls.n	8028334 <_svfiprintf_r+0x1a8>
 802832c:	2b00      	cmp	r3, #0
 802832e:	d0c5      	beq.n	80282bc <_svfiprintf_r+0x130>
 8028330:	9105      	str	r1, [sp, #20]
 8028332:	e7c3      	b.n	80282bc <_svfiprintf_r+0x130>
 8028334:	fb0c 2101 	mla	r1, ip, r1, r2
 8028338:	4604      	mov	r4, r0
 802833a:	2301      	movs	r3, #1
 802833c:	e7f0      	b.n	8028320 <_svfiprintf_r+0x194>
 802833e:	ab03      	add	r3, sp, #12
 8028340:	9300      	str	r3, [sp, #0]
 8028342:	462a      	mov	r2, r5
 8028344:	4b0f      	ldr	r3, [pc, #60]	; (8028384 <_svfiprintf_r+0x1f8>)
 8028346:	a904      	add	r1, sp, #16
 8028348:	4638      	mov	r0, r7
 802834a:	f3af 8000 	nop.w
 802834e:	1c42      	adds	r2, r0, #1
 8028350:	4606      	mov	r6, r0
 8028352:	d1d6      	bne.n	8028302 <_svfiprintf_r+0x176>
 8028354:	89ab      	ldrh	r3, [r5, #12]
 8028356:	065b      	lsls	r3, r3, #25
 8028358:	f53f af2c 	bmi.w	80281b4 <_svfiprintf_r+0x28>
 802835c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802835e:	b01d      	add	sp, #116	; 0x74
 8028360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028364:	ab03      	add	r3, sp, #12
 8028366:	9300      	str	r3, [sp, #0]
 8028368:	462a      	mov	r2, r5
 802836a:	4b06      	ldr	r3, [pc, #24]	; (8028384 <_svfiprintf_r+0x1f8>)
 802836c:	a904      	add	r1, sp, #16
 802836e:	4638      	mov	r0, r7
 8028370:	f7fe ff7c 	bl	802726c <_printf_i>
 8028374:	e7eb      	b.n	802834e <_svfiprintf_r+0x1c2>
 8028376:	bf00      	nop
 8028378:	0802d1f8 	.word	0x0802d1f8
 802837c:	0802d202 	.word	0x0802d202
 8028380:	00000000 	.word	0x00000000
 8028384:	080280d5 	.word	0x080280d5
 8028388:	0802d1fe 	.word	0x0802d1fe

0802838c <_sungetc_r>:
 802838c:	b538      	push	{r3, r4, r5, lr}
 802838e:	1c4b      	adds	r3, r1, #1
 8028390:	4614      	mov	r4, r2
 8028392:	d103      	bne.n	802839c <_sungetc_r+0x10>
 8028394:	f04f 35ff 	mov.w	r5, #4294967295
 8028398:	4628      	mov	r0, r5
 802839a:	bd38      	pop	{r3, r4, r5, pc}
 802839c:	8993      	ldrh	r3, [r2, #12]
 802839e:	f023 0320 	bic.w	r3, r3, #32
 80283a2:	8193      	strh	r3, [r2, #12]
 80283a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80283a6:	6852      	ldr	r2, [r2, #4]
 80283a8:	b2cd      	uxtb	r5, r1
 80283aa:	b18b      	cbz	r3, 80283d0 <_sungetc_r+0x44>
 80283ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80283ae:	4293      	cmp	r3, r2
 80283b0:	dd08      	ble.n	80283c4 <_sungetc_r+0x38>
 80283b2:	6823      	ldr	r3, [r4, #0]
 80283b4:	1e5a      	subs	r2, r3, #1
 80283b6:	6022      	str	r2, [r4, #0]
 80283b8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80283bc:	6863      	ldr	r3, [r4, #4]
 80283be:	3301      	adds	r3, #1
 80283c0:	6063      	str	r3, [r4, #4]
 80283c2:	e7e9      	b.n	8028398 <_sungetc_r+0xc>
 80283c4:	4621      	mov	r1, r4
 80283c6:	f000 fbc9 	bl	8028b5c <__submore>
 80283ca:	2800      	cmp	r0, #0
 80283cc:	d0f1      	beq.n	80283b2 <_sungetc_r+0x26>
 80283ce:	e7e1      	b.n	8028394 <_sungetc_r+0x8>
 80283d0:	6921      	ldr	r1, [r4, #16]
 80283d2:	6823      	ldr	r3, [r4, #0]
 80283d4:	b151      	cbz	r1, 80283ec <_sungetc_r+0x60>
 80283d6:	4299      	cmp	r1, r3
 80283d8:	d208      	bcs.n	80283ec <_sungetc_r+0x60>
 80283da:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80283de:	42a9      	cmp	r1, r5
 80283e0:	d104      	bne.n	80283ec <_sungetc_r+0x60>
 80283e2:	3b01      	subs	r3, #1
 80283e4:	3201      	adds	r2, #1
 80283e6:	6023      	str	r3, [r4, #0]
 80283e8:	6062      	str	r2, [r4, #4]
 80283ea:	e7d5      	b.n	8028398 <_sungetc_r+0xc>
 80283ec:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80283f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80283f4:	6363      	str	r3, [r4, #52]	; 0x34
 80283f6:	2303      	movs	r3, #3
 80283f8:	63a3      	str	r3, [r4, #56]	; 0x38
 80283fa:	4623      	mov	r3, r4
 80283fc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8028400:	6023      	str	r3, [r4, #0]
 8028402:	2301      	movs	r3, #1
 8028404:	e7dc      	b.n	80283c0 <_sungetc_r+0x34>

08028406 <__ssrefill_r>:
 8028406:	b510      	push	{r4, lr}
 8028408:	460c      	mov	r4, r1
 802840a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802840c:	b169      	cbz	r1, 802842a <__ssrefill_r+0x24>
 802840e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028412:	4299      	cmp	r1, r3
 8028414:	d001      	beq.n	802841a <__ssrefill_r+0x14>
 8028416:	f7fe fcb7 	bl	8026d88 <_free_r>
 802841a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802841c:	6063      	str	r3, [r4, #4]
 802841e:	2000      	movs	r0, #0
 8028420:	6360      	str	r0, [r4, #52]	; 0x34
 8028422:	b113      	cbz	r3, 802842a <__ssrefill_r+0x24>
 8028424:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8028426:	6023      	str	r3, [r4, #0]
 8028428:	bd10      	pop	{r4, pc}
 802842a:	6923      	ldr	r3, [r4, #16]
 802842c:	6023      	str	r3, [r4, #0]
 802842e:	2300      	movs	r3, #0
 8028430:	6063      	str	r3, [r4, #4]
 8028432:	89a3      	ldrh	r3, [r4, #12]
 8028434:	f043 0320 	orr.w	r3, r3, #32
 8028438:	81a3      	strh	r3, [r4, #12]
 802843a:	f04f 30ff 	mov.w	r0, #4294967295
 802843e:	e7f3      	b.n	8028428 <__ssrefill_r+0x22>

08028440 <__ssvfiscanf_r>:
 8028440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028444:	460c      	mov	r4, r1
 8028446:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 802844a:	2100      	movs	r1, #0
 802844c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8028450:	49b2      	ldr	r1, [pc, #712]	; (802871c <__ssvfiscanf_r+0x2dc>)
 8028452:	91a0      	str	r1, [sp, #640]	; 0x280
 8028454:	f10d 0804 	add.w	r8, sp, #4
 8028458:	49b1      	ldr	r1, [pc, #708]	; (8028720 <__ssvfiscanf_r+0x2e0>)
 802845a:	4fb2      	ldr	r7, [pc, #712]	; (8028724 <__ssvfiscanf_r+0x2e4>)
 802845c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8028728 <__ssvfiscanf_r+0x2e8>
 8028460:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8028464:	4606      	mov	r6, r0
 8028466:	91a1      	str	r1, [sp, #644]	; 0x284
 8028468:	9300      	str	r3, [sp, #0]
 802846a:	f892 a000 	ldrb.w	sl, [r2]
 802846e:	f1ba 0f00 	cmp.w	sl, #0
 8028472:	f000 8151 	beq.w	8028718 <__ssvfiscanf_r+0x2d8>
 8028476:	f81a 3007 	ldrb.w	r3, [sl, r7]
 802847a:	f013 0308 	ands.w	r3, r3, #8
 802847e:	f102 0501 	add.w	r5, r2, #1
 8028482:	d019      	beq.n	80284b8 <__ssvfiscanf_r+0x78>
 8028484:	6863      	ldr	r3, [r4, #4]
 8028486:	2b00      	cmp	r3, #0
 8028488:	dd0f      	ble.n	80284aa <__ssvfiscanf_r+0x6a>
 802848a:	6823      	ldr	r3, [r4, #0]
 802848c:	781a      	ldrb	r2, [r3, #0]
 802848e:	5cba      	ldrb	r2, [r7, r2]
 8028490:	0712      	lsls	r2, r2, #28
 8028492:	d401      	bmi.n	8028498 <__ssvfiscanf_r+0x58>
 8028494:	462a      	mov	r2, r5
 8028496:	e7e8      	b.n	802846a <__ssvfiscanf_r+0x2a>
 8028498:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802849a:	3201      	adds	r2, #1
 802849c:	9245      	str	r2, [sp, #276]	; 0x114
 802849e:	6862      	ldr	r2, [r4, #4]
 80284a0:	3301      	adds	r3, #1
 80284a2:	3a01      	subs	r2, #1
 80284a4:	6062      	str	r2, [r4, #4]
 80284a6:	6023      	str	r3, [r4, #0]
 80284a8:	e7ec      	b.n	8028484 <__ssvfiscanf_r+0x44>
 80284aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80284ac:	4621      	mov	r1, r4
 80284ae:	4630      	mov	r0, r6
 80284b0:	4798      	blx	r3
 80284b2:	2800      	cmp	r0, #0
 80284b4:	d0e9      	beq.n	802848a <__ssvfiscanf_r+0x4a>
 80284b6:	e7ed      	b.n	8028494 <__ssvfiscanf_r+0x54>
 80284b8:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80284bc:	f040 8083 	bne.w	80285c6 <__ssvfiscanf_r+0x186>
 80284c0:	9341      	str	r3, [sp, #260]	; 0x104
 80284c2:	9343      	str	r3, [sp, #268]	; 0x10c
 80284c4:	7853      	ldrb	r3, [r2, #1]
 80284c6:	2b2a      	cmp	r3, #42	; 0x2a
 80284c8:	bf02      	ittt	eq
 80284ca:	2310      	moveq	r3, #16
 80284cc:	1c95      	addeq	r5, r2, #2
 80284ce:	9341      	streq	r3, [sp, #260]	; 0x104
 80284d0:	220a      	movs	r2, #10
 80284d2:	46ab      	mov	fp, r5
 80284d4:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80284d8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80284dc:	2b09      	cmp	r3, #9
 80284de:	d91d      	bls.n	802851c <__ssvfiscanf_r+0xdc>
 80284e0:	4891      	ldr	r0, [pc, #580]	; (8028728 <__ssvfiscanf_r+0x2e8>)
 80284e2:	2203      	movs	r2, #3
 80284e4:	f7d7 fe84 	bl	80001f0 <memchr>
 80284e8:	b140      	cbz	r0, 80284fc <__ssvfiscanf_r+0xbc>
 80284ea:	2301      	movs	r3, #1
 80284ec:	eba0 0009 	sub.w	r0, r0, r9
 80284f0:	fa03 f000 	lsl.w	r0, r3, r0
 80284f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80284f6:	4318      	orrs	r0, r3
 80284f8:	9041      	str	r0, [sp, #260]	; 0x104
 80284fa:	465d      	mov	r5, fp
 80284fc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8028500:	2b78      	cmp	r3, #120	; 0x78
 8028502:	d806      	bhi.n	8028512 <__ssvfiscanf_r+0xd2>
 8028504:	2b57      	cmp	r3, #87	; 0x57
 8028506:	d810      	bhi.n	802852a <__ssvfiscanf_r+0xea>
 8028508:	2b25      	cmp	r3, #37	; 0x25
 802850a:	d05c      	beq.n	80285c6 <__ssvfiscanf_r+0x186>
 802850c:	d856      	bhi.n	80285bc <__ssvfiscanf_r+0x17c>
 802850e:	2b00      	cmp	r3, #0
 8028510:	d074      	beq.n	80285fc <__ssvfiscanf_r+0x1bc>
 8028512:	2303      	movs	r3, #3
 8028514:	9347      	str	r3, [sp, #284]	; 0x11c
 8028516:	230a      	movs	r3, #10
 8028518:	9342      	str	r3, [sp, #264]	; 0x108
 802851a:	e081      	b.n	8028620 <__ssvfiscanf_r+0x1e0>
 802851c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802851e:	fb02 1303 	mla	r3, r2, r3, r1
 8028522:	3b30      	subs	r3, #48	; 0x30
 8028524:	9343      	str	r3, [sp, #268]	; 0x10c
 8028526:	465d      	mov	r5, fp
 8028528:	e7d3      	b.n	80284d2 <__ssvfiscanf_r+0x92>
 802852a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 802852e:	2a20      	cmp	r2, #32
 8028530:	d8ef      	bhi.n	8028512 <__ssvfiscanf_r+0xd2>
 8028532:	a101      	add	r1, pc, #4	; (adr r1, 8028538 <__ssvfiscanf_r+0xf8>)
 8028534:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8028538:	0802860b 	.word	0x0802860b
 802853c:	08028513 	.word	0x08028513
 8028540:	08028513 	.word	0x08028513
 8028544:	08028669 	.word	0x08028669
 8028548:	08028513 	.word	0x08028513
 802854c:	08028513 	.word	0x08028513
 8028550:	08028513 	.word	0x08028513
 8028554:	08028513 	.word	0x08028513
 8028558:	08028513 	.word	0x08028513
 802855c:	08028513 	.word	0x08028513
 8028560:	08028513 	.word	0x08028513
 8028564:	0802867f 	.word	0x0802867f
 8028568:	08028655 	.word	0x08028655
 802856c:	080285c3 	.word	0x080285c3
 8028570:	080285c3 	.word	0x080285c3
 8028574:	080285c3 	.word	0x080285c3
 8028578:	08028513 	.word	0x08028513
 802857c:	08028659 	.word	0x08028659
 8028580:	08028513 	.word	0x08028513
 8028584:	08028513 	.word	0x08028513
 8028588:	08028513 	.word	0x08028513
 802858c:	08028513 	.word	0x08028513
 8028590:	0802868f 	.word	0x0802868f
 8028594:	08028661 	.word	0x08028661
 8028598:	08028603 	.word	0x08028603
 802859c:	08028513 	.word	0x08028513
 80285a0:	08028513 	.word	0x08028513
 80285a4:	0802868b 	.word	0x0802868b
 80285a8:	08028513 	.word	0x08028513
 80285ac:	08028655 	.word	0x08028655
 80285b0:	08028513 	.word	0x08028513
 80285b4:	08028513 	.word	0x08028513
 80285b8:	0802860b 	.word	0x0802860b
 80285bc:	3b45      	subs	r3, #69	; 0x45
 80285be:	2b02      	cmp	r3, #2
 80285c0:	d8a7      	bhi.n	8028512 <__ssvfiscanf_r+0xd2>
 80285c2:	2305      	movs	r3, #5
 80285c4:	e02b      	b.n	802861e <__ssvfiscanf_r+0x1de>
 80285c6:	6863      	ldr	r3, [r4, #4]
 80285c8:	2b00      	cmp	r3, #0
 80285ca:	dd0d      	ble.n	80285e8 <__ssvfiscanf_r+0x1a8>
 80285cc:	6823      	ldr	r3, [r4, #0]
 80285ce:	781a      	ldrb	r2, [r3, #0]
 80285d0:	4552      	cmp	r2, sl
 80285d2:	f040 80a1 	bne.w	8028718 <__ssvfiscanf_r+0x2d8>
 80285d6:	3301      	adds	r3, #1
 80285d8:	6862      	ldr	r2, [r4, #4]
 80285da:	6023      	str	r3, [r4, #0]
 80285dc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80285de:	3a01      	subs	r2, #1
 80285e0:	3301      	adds	r3, #1
 80285e2:	6062      	str	r2, [r4, #4]
 80285e4:	9345      	str	r3, [sp, #276]	; 0x114
 80285e6:	e755      	b.n	8028494 <__ssvfiscanf_r+0x54>
 80285e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80285ea:	4621      	mov	r1, r4
 80285ec:	4630      	mov	r0, r6
 80285ee:	4798      	blx	r3
 80285f0:	2800      	cmp	r0, #0
 80285f2:	d0eb      	beq.n	80285cc <__ssvfiscanf_r+0x18c>
 80285f4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80285f6:	2800      	cmp	r0, #0
 80285f8:	f040 8084 	bne.w	8028704 <__ssvfiscanf_r+0x2c4>
 80285fc:	f04f 30ff 	mov.w	r0, #4294967295
 8028600:	e086      	b.n	8028710 <__ssvfiscanf_r+0x2d0>
 8028602:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8028604:	f042 0220 	orr.w	r2, r2, #32
 8028608:	9241      	str	r2, [sp, #260]	; 0x104
 802860a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802860c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8028610:	9241      	str	r2, [sp, #260]	; 0x104
 8028612:	2210      	movs	r2, #16
 8028614:	2b6f      	cmp	r3, #111	; 0x6f
 8028616:	9242      	str	r2, [sp, #264]	; 0x108
 8028618:	bf34      	ite	cc
 802861a:	2303      	movcc	r3, #3
 802861c:	2304      	movcs	r3, #4
 802861e:	9347      	str	r3, [sp, #284]	; 0x11c
 8028620:	6863      	ldr	r3, [r4, #4]
 8028622:	2b00      	cmp	r3, #0
 8028624:	dd41      	ble.n	80286aa <__ssvfiscanf_r+0x26a>
 8028626:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8028628:	0659      	lsls	r1, r3, #25
 802862a:	d404      	bmi.n	8028636 <__ssvfiscanf_r+0x1f6>
 802862c:	6823      	ldr	r3, [r4, #0]
 802862e:	781a      	ldrb	r2, [r3, #0]
 8028630:	5cba      	ldrb	r2, [r7, r2]
 8028632:	0712      	lsls	r2, r2, #28
 8028634:	d440      	bmi.n	80286b8 <__ssvfiscanf_r+0x278>
 8028636:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8028638:	2b02      	cmp	r3, #2
 802863a:	dc4f      	bgt.n	80286dc <__ssvfiscanf_r+0x29c>
 802863c:	466b      	mov	r3, sp
 802863e:	4622      	mov	r2, r4
 8028640:	a941      	add	r1, sp, #260	; 0x104
 8028642:	4630      	mov	r0, r6
 8028644:	f000 f874 	bl	8028730 <_scanf_chars>
 8028648:	2801      	cmp	r0, #1
 802864a:	d065      	beq.n	8028718 <__ssvfiscanf_r+0x2d8>
 802864c:	2802      	cmp	r0, #2
 802864e:	f47f af21 	bne.w	8028494 <__ssvfiscanf_r+0x54>
 8028652:	e7cf      	b.n	80285f4 <__ssvfiscanf_r+0x1b4>
 8028654:	220a      	movs	r2, #10
 8028656:	e7dd      	b.n	8028614 <__ssvfiscanf_r+0x1d4>
 8028658:	2300      	movs	r3, #0
 802865a:	9342      	str	r3, [sp, #264]	; 0x108
 802865c:	2303      	movs	r3, #3
 802865e:	e7de      	b.n	802861e <__ssvfiscanf_r+0x1de>
 8028660:	2308      	movs	r3, #8
 8028662:	9342      	str	r3, [sp, #264]	; 0x108
 8028664:	2304      	movs	r3, #4
 8028666:	e7da      	b.n	802861e <__ssvfiscanf_r+0x1de>
 8028668:	4629      	mov	r1, r5
 802866a:	4640      	mov	r0, r8
 802866c:	f000 f9be 	bl	80289ec <__sccl>
 8028670:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8028672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028676:	9341      	str	r3, [sp, #260]	; 0x104
 8028678:	4605      	mov	r5, r0
 802867a:	2301      	movs	r3, #1
 802867c:	e7cf      	b.n	802861e <__ssvfiscanf_r+0x1de>
 802867e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8028680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028684:	9341      	str	r3, [sp, #260]	; 0x104
 8028686:	2300      	movs	r3, #0
 8028688:	e7c9      	b.n	802861e <__ssvfiscanf_r+0x1de>
 802868a:	2302      	movs	r3, #2
 802868c:	e7c7      	b.n	802861e <__ssvfiscanf_r+0x1de>
 802868e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8028690:	06c3      	lsls	r3, r0, #27
 8028692:	f53f aeff 	bmi.w	8028494 <__ssvfiscanf_r+0x54>
 8028696:	9b00      	ldr	r3, [sp, #0]
 8028698:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802869a:	1d19      	adds	r1, r3, #4
 802869c:	9100      	str	r1, [sp, #0]
 802869e:	681b      	ldr	r3, [r3, #0]
 80286a0:	07c0      	lsls	r0, r0, #31
 80286a2:	bf4c      	ite	mi
 80286a4:	801a      	strhmi	r2, [r3, #0]
 80286a6:	601a      	strpl	r2, [r3, #0]
 80286a8:	e6f4      	b.n	8028494 <__ssvfiscanf_r+0x54>
 80286aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80286ac:	4621      	mov	r1, r4
 80286ae:	4630      	mov	r0, r6
 80286b0:	4798      	blx	r3
 80286b2:	2800      	cmp	r0, #0
 80286b4:	d0b7      	beq.n	8028626 <__ssvfiscanf_r+0x1e6>
 80286b6:	e79d      	b.n	80285f4 <__ssvfiscanf_r+0x1b4>
 80286b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80286ba:	3201      	adds	r2, #1
 80286bc:	9245      	str	r2, [sp, #276]	; 0x114
 80286be:	6862      	ldr	r2, [r4, #4]
 80286c0:	3a01      	subs	r2, #1
 80286c2:	2a00      	cmp	r2, #0
 80286c4:	6062      	str	r2, [r4, #4]
 80286c6:	dd02      	ble.n	80286ce <__ssvfiscanf_r+0x28e>
 80286c8:	3301      	adds	r3, #1
 80286ca:	6023      	str	r3, [r4, #0]
 80286cc:	e7ae      	b.n	802862c <__ssvfiscanf_r+0x1ec>
 80286ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80286d0:	4621      	mov	r1, r4
 80286d2:	4630      	mov	r0, r6
 80286d4:	4798      	blx	r3
 80286d6:	2800      	cmp	r0, #0
 80286d8:	d0a8      	beq.n	802862c <__ssvfiscanf_r+0x1ec>
 80286da:	e78b      	b.n	80285f4 <__ssvfiscanf_r+0x1b4>
 80286dc:	2b04      	cmp	r3, #4
 80286de:	dc06      	bgt.n	80286ee <__ssvfiscanf_r+0x2ae>
 80286e0:	466b      	mov	r3, sp
 80286e2:	4622      	mov	r2, r4
 80286e4:	a941      	add	r1, sp, #260	; 0x104
 80286e6:	4630      	mov	r0, r6
 80286e8:	f000 f87a 	bl	80287e0 <_scanf_i>
 80286ec:	e7ac      	b.n	8028648 <__ssvfiscanf_r+0x208>
 80286ee:	4b0f      	ldr	r3, [pc, #60]	; (802872c <__ssvfiscanf_r+0x2ec>)
 80286f0:	2b00      	cmp	r3, #0
 80286f2:	f43f aecf 	beq.w	8028494 <__ssvfiscanf_r+0x54>
 80286f6:	466b      	mov	r3, sp
 80286f8:	4622      	mov	r2, r4
 80286fa:	a941      	add	r1, sp, #260	; 0x104
 80286fc:	4630      	mov	r0, r6
 80286fe:	f3af 8000 	nop.w
 8028702:	e7a1      	b.n	8028648 <__ssvfiscanf_r+0x208>
 8028704:	89a3      	ldrh	r3, [r4, #12]
 8028706:	f013 0f40 	tst.w	r3, #64	; 0x40
 802870a:	bf18      	it	ne
 802870c:	f04f 30ff 	movne.w	r0, #4294967295
 8028710:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8028714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028718:	9844      	ldr	r0, [sp, #272]	; 0x110
 802871a:	e7f9      	b.n	8028710 <__ssvfiscanf_r+0x2d0>
 802871c:	0802838d 	.word	0x0802838d
 8028720:	08028407 	.word	0x08028407
 8028724:	0802d0f1 	.word	0x0802d0f1
 8028728:	0802d1fe 	.word	0x0802d1fe
 802872c:	00000000 	.word	0x00000000

08028730 <_scanf_chars>:
 8028730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028734:	4615      	mov	r5, r2
 8028736:	688a      	ldr	r2, [r1, #8]
 8028738:	4680      	mov	r8, r0
 802873a:	460c      	mov	r4, r1
 802873c:	b932      	cbnz	r2, 802874c <_scanf_chars+0x1c>
 802873e:	698a      	ldr	r2, [r1, #24]
 8028740:	2a00      	cmp	r2, #0
 8028742:	bf0c      	ite	eq
 8028744:	2201      	moveq	r2, #1
 8028746:	f04f 32ff 	movne.w	r2, #4294967295
 802874a:	608a      	str	r2, [r1, #8]
 802874c:	6822      	ldr	r2, [r4, #0]
 802874e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80287dc <_scanf_chars+0xac>
 8028752:	06d1      	lsls	r1, r2, #27
 8028754:	bf5f      	itttt	pl
 8028756:	681a      	ldrpl	r2, [r3, #0]
 8028758:	1d11      	addpl	r1, r2, #4
 802875a:	6019      	strpl	r1, [r3, #0]
 802875c:	6816      	ldrpl	r6, [r2, #0]
 802875e:	2700      	movs	r7, #0
 8028760:	69a0      	ldr	r0, [r4, #24]
 8028762:	b188      	cbz	r0, 8028788 <_scanf_chars+0x58>
 8028764:	2801      	cmp	r0, #1
 8028766:	d107      	bne.n	8028778 <_scanf_chars+0x48>
 8028768:	682b      	ldr	r3, [r5, #0]
 802876a:	781a      	ldrb	r2, [r3, #0]
 802876c:	6963      	ldr	r3, [r4, #20]
 802876e:	5c9b      	ldrb	r3, [r3, r2]
 8028770:	b953      	cbnz	r3, 8028788 <_scanf_chars+0x58>
 8028772:	bb27      	cbnz	r7, 80287be <_scanf_chars+0x8e>
 8028774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028778:	2802      	cmp	r0, #2
 802877a:	d120      	bne.n	80287be <_scanf_chars+0x8e>
 802877c:	682b      	ldr	r3, [r5, #0]
 802877e:	781b      	ldrb	r3, [r3, #0]
 8028780:	f813 3009 	ldrb.w	r3, [r3, r9]
 8028784:	071b      	lsls	r3, r3, #28
 8028786:	d41a      	bmi.n	80287be <_scanf_chars+0x8e>
 8028788:	6823      	ldr	r3, [r4, #0]
 802878a:	06da      	lsls	r2, r3, #27
 802878c:	bf5e      	ittt	pl
 802878e:	682b      	ldrpl	r3, [r5, #0]
 8028790:	781b      	ldrbpl	r3, [r3, #0]
 8028792:	f806 3b01 	strbpl.w	r3, [r6], #1
 8028796:	682a      	ldr	r2, [r5, #0]
 8028798:	686b      	ldr	r3, [r5, #4]
 802879a:	3201      	adds	r2, #1
 802879c:	602a      	str	r2, [r5, #0]
 802879e:	68a2      	ldr	r2, [r4, #8]
 80287a0:	3b01      	subs	r3, #1
 80287a2:	3a01      	subs	r2, #1
 80287a4:	606b      	str	r3, [r5, #4]
 80287a6:	3701      	adds	r7, #1
 80287a8:	60a2      	str	r2, [r4, #8]
 80287aa:	b142      	cbz	r2, 80287be <_scanf_chars+0x8e>
 80287ac:	2b00      	cmp	r3, #0
 80287ae:	dcd7      	bgt.n	8028760 <_scanf_chars+0x30>
 80287b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80287b4:	4629      	mov	r1, r5
 80287b6:	4640      	mov	r0, r8
 80287b8:	4798      	blx	r3
 80287ba:	2800      	cmp	r0, #0
 80287bc:	d0d0      	beq.n	8028760 <_scanf_chars+0x30>
 80287be:	6823      	ldr	r3, [r4, #0]
 80287c0:	f013 0310 	ands.w	r3, r3, #16
 80287c4:	d105      	bne.n	80287d2 <_scanf_chars+0xa2>
 80287c6:	68e2      	ldr	r2, [r4, #12]
 80287c8:	3201      	adds	r2, #1
 80287ca:	60e2      	str	r2, [r4, #12]
 80287cc:	69a2      	ldr	r2, [r4, #24]
 80287ce:	b102      	cbz	r2, 80287d2 <_scanf_chars+0xa2>
 80287d0:	7033      	strb	r3, [r6, #0]
 80287d2:	6923      	ldr	r3, [r4, #16]
 80287d4:	441f      	add	r7, r3
 80287d6:	6127      	str	r7, [r4, #16]
 80287d8:	2000      	movs	r0, #0
 80287da:	e7cb      	b.n	8028774 <_scanf_chars+0x44>
 80287dc:	0802d0f1 	.word	0x0802d0f1

080287e0 <_scanf_i>:
 80287e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80287e4:	4698      	mov	r8, r3
 80287e6:	4b74      	ldr	r3, [pc, #464]	; (80289b8 <_scanf_i+0x1d8>)
 80287e8:	460c      	mov	r4, r1
 80287ea:	4682      	mov	sl, r0
 80287ec:	4616      	mov	r6, r2
 80287ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80287f2:	b087      	sub	sp, #28
 80287f4:	ab03      	add	r3, sp, #12
 80287f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80287fa:	4b70      	ldr	r3, [pc, #448]	; (80289bc <_scanf_i+0x1dc>)
 80287fc:	69a1      	ldr	r1, [r4, #24]
 80287fe:	4a70      	ldr	r2, [pc, #448]	; (80289c0 <_scanf_i+0x1e0>)
 8028800:	2903      	cmp	r1, #3
 8028802:	bf18      	it	ne
 8028804:	461a      	movne	r2, r3
 8028806:	68a3      	ldr	r3, [r4, #8]
 8028808:	9201      	str	r2, [sp, #4]
 802880a:	1e5a      	subs	r2, r3, #1
 802880c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8028810:	bf88      	it	hi
 8028812:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8028816:	4627      	mov	r7, r4
 8028818:	bf82      	ittt	hi
 802881a:	eb03 0905 	addhi.w	r9, r3, r5
 802881e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8028822:	60a3      	strhi	r3, [r4, #8]
 8028824:	f857 3b1c 	ldr.w	r3, [r7], #28
 8028828:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 802882c:	bf98      	it	ls
 802882e:	f04f 0900 	movls.w	r9, #0
 8028832:	6023      	str	r3, [r4, #0]
 8028834:	463d      	mov	r5, r7
 8028836:	f04f 0b00 	mov.w	fp, #0
 802883a:	6831      	ldr	r1, [r6, #0]
 802883c:	ab03      	add	r3, sp, #12
 802883e:	7809      	ldrb	r1, [r1, #0]
 8028840:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8028844:	2202      	movs	r2, #2
 8028846:	f7d7 fcd3 	bl	80001f0 <memchr>
 802884a:	b328      	cbz	r0, 8028898 <_scanf_i+0xb8>
 802884c:	f1bb 0f01 	cmp.w	fp, #1
 8028850:	d159      	bne.n	8028906 <_scanf_i+0x126>
 8028852:	6862      	ldr	r2, [r4, #4]
 8028854:	b92a      	cbnz	r2, 8028862 <_scanf_i+0x82>
 8028856:	6822      	ldr	r2, [r4, #0]
 8028858:	2308      	movs	r3, #8
 802885a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802885e:	6063      	str	r3, [r4, #4]
 8028860:	6022      	str	r2, [r4, #0]
 8028862:	6822      	ldr	r2, [r4, #0]
 8028864:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8028868:	6022      	str	r2, [r4, #0]
 802886a:	68a2      	ldr	r2, [r4, #8]
 802886c:	1e51      	subs	r1, r2, #1
 802886e:	60a1      	str	r1, [r4, #8]
 8028870:	b192      	cbz	r2, 8028898 <_scanf_i+0xb8>
 8028872:	6832      	ldr	r2, [r6, #0]
 8028874:	1c51      	adds	r1, r2, #1
 8028876:	6031      	str	r1, [r6, #0]
 8028878:	7812      	ldrb	r2, [r2, #0]
 802887a:	f805 2b01 	strb.w	r2, [r5], #1
 802887e:	6872      	ldr	r2, [r6, #4]
 8028880:	3a01      	subs	r2, #1
 8028882:	2a00      	cmp	r2, #0
 8028884:	6072      	str	r2, [r6, #4]
 8028886:	dc07      	bgt.n	8028898 <_scanf_i+0xb8>
 8028888:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 802888c:	4631      	mov	r1, r6
 802888e:	4650      	mov	r0, sl
 8028890:	4790      	blx	r2
 8028892:	2800      	cmp	r0, #0
 8028894:	f040 8085 	bne.w	80289a2 <_scanf_i+0x1c2>
 8028898:	f10b 0b01 	add.w	fp, fp, #1
 802889c:	f1bb 0f03 	cmp.w	fp, #3
 80288a0:	d1cb      	bne.n	802883a <_scanf_i+0x5a>
 80288a2:	6863      	ldr	r3, [r4, #4]
 80288a4:	b90b      	cbnz	r3, 80288aa <_scanf_i+0xca>
 80288a6:	230a      	movs	r3, #10
 80288a8:	6063      	str	r3, [r4, #4]
 80288aa:	6863      	ldr	r3, [r4, #4]
 80288ac:	4945      	ldr	r1, [pc, #276]	; (80289c4 <_scanf_i+0x1e4>)
 80288ae:	6960      	ldr	r0, [r4, #20]
 80288b0:	1ac9      	subs	r1, r1, r3
 80288b2:	f000 f89b 	bl	80289ec <__sccl>
 80288b6:	f04f 0b00 	mov.w	fp, #0
 80288ba:	68a3      	ldr	r3, [r4, #8]
 80288bc:	6822      	ldr	r2, [r4, #0]
 80288be:	2b00      	cmp	r3, #0
 80288c0:	d03d      	beq.n	802893e <_scanf_i+0x15e>
 80288c2:	6831      	ldr	r1, [r6, #0]
 80288c4:	6960      	ldr	r0, [r4, #20]
 80288c6:	f891 c000 	ldrb.w	ip, [r1]
 80288ca:	f810 000c 	ldrb.w	r0, [r0, ip]
 80288ce:	2800      	cmp	r0, #0
 80288d0:	d035      	beq.n	802893e <_scanf_i+0x15e>
 80288d2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80288d6:	d124      	bne.n	8028922 <_scanf_i+0x142>
 80288d8:	0510      	lsls	r0, r2, #20
 80288da:	d522      	bpl.n	8028922 <_scanf_i+0x142>
 80288dc:	f10b 0b01 	add.w	fp, fp, #1
 80288e0:	f1b9 0f00 	cmp.w	r9, #0
 80288e4:	d003      	beq.n	80288ee <_scanf_i+0x10e>
 80288e6:	3301      	adds	r3, #1
 80288e8:	f109 39ff 	add.w	r9, r9, #4294967295
 80288ec:	60a3      	str	r3, [r4, #8]
 80288ee:	6873      	ldr	r3, [r6, #4]
 80288f0:	3b01      	subs	r3, #1
 80288f2:	2b00      	cmp	r3, #0
 80288f4:	6073      	str	r3, [r6, #4]
 80288f6:	dd1b      	ble.n	8028930 <_scanf_i+0x150>
 80288f8:	6833      	ldr	r3, [r6, #0]
 80288fa:	3301      	adds	r3, #1
 80288fc:	6033      	str	r3, [r6, #0]
 80288fe:	68a3      	ldr	r3, [r4, #8]
 8028900:	3b01      	subs	r3, #1
 8028902:	60a3      	str	r3, [r4, #8]
 8028904:	e7d9      	b.n	80288ba <_scanf_i+0xda>
 8028906:	f1bb 0f02 	cmp.w	fp, #2
 802890a:	d1ae      	bne.n	802886a <_scanf_i+0x8a>
 802890c:	6822      	ldr	r2, [r4, #0]
 802890e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8028912:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8028916:	d1bf      	bne.n	8028898 <_scanf_i+0xb8>
 8028918:	2310      	movs	r3, #16
 802891a:	6063      	str	r3, [r4, #4]
 802891c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8028920:	e7a2      	b.n	8028868 <_scanf_i+0x88>
 8028922:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8028926:	6022      	str	r2, [r4, #0]
 8028928:	780b      	ldrb	r3, [r1, #0]
 802892a:	f805 3b01 	strb.w	r3, [r5], #1
 802892e:	e7de      	b.n	80288ee <_scanf_i+0x10e>
 8028930:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8028934:	4631      	mov	r1, r6
 8028936:	4650      	mov	r0, sl
 8028938:	4798      	blx	r3
 802893a:	2800      	cmp	r0, #0
 802893c:	d0df      	beq.n	80288fe <_scanf_i+0x11e>
 802893e:	6823      	ldr	r3, [r4, #0]
 8028940:	05d9      	lsls	r1, r3, #23
 8028942:	d50d      	bpl.n	8028960 <_scanf_i+0x180>
 8028944:	42bd      	cmp	r5, r7
 8028946:	d909      	bls.n	802895c <_scanf_i+0x17c>
 8028948:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802894c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8028950:	4632      	mov	r2, r6
 8028952:	4650      	mov	r0, sl
 8028954:	4798      	blx	r3
 8028956:	f105 39ff 	add.w	r9, r5, #4294967295
 802895a:	464d      	mov	r5, r9
 802895c:	42bd      	cmp	r5, r7
 802895e:	d028      	beq.n	80289b2 <_scanf_i+0x1d2>
 8028960:	6822      	ldr	r2, [r4, #0]
 8028962:	f012 0210 	ands.w	r2, r2, #16
 8028966:	d113      	bne.n	8028990 <_scanf_i+0x1b0>
 8028968:	702a      	strb	r2, [r5, #0]
 802896a:	6863      	ldr	r3, [r4, #4]
 802896c:	9e01      	ldr	r6, [sp, #4]
 802896e:	4639      	mov	r1, r7
 8028970:	4650      	mov	r0, sl
 8028972:	47b0      	blx	r6
 8028974:	f8d8 3000 	ldr.w	r3, [r8]
 8028978:	6821      	ldr	r1, [r4, #0]
 802897a:	1d1a      	adds	r2, r3, #4
 802897c:	f8c8 2000 	str.w	r2, [r8]
 8028980:	f011 0f20 	tst.w	r1, #32
 8028984:	681b      	ldr	r3, [r3, #0]
 8028986:	d00f      	beq.n	80289a8 <_scanf_i+0x1c8>
 8028988:	6018      	str	r0, [r3, #0]
 802898a:	68e3      	ldr	r3, [r4, #12]
 802898c:	3301      	adds	r3, #1
 802898e:	60e3      	str	r3, [r4, #12]
 8028990:	1bed      	subs	r5, r5, r7
 8028992:	44ab      	add	fp, r5
 8028994:	6925      	ldr	r5, [r4, #16]
 8028996:	445d      	add	r5, fp
 8028998:	6125      	str	r5, [r4, #16]
 802899a:	2000      	movs	r0, #0
 802899c:	b007      	add	sp, #28
 802899e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80289a2:	f04f 0b00 	mov.w	fp, #0
 80289a6:	e7ca      	b.n	802893e <_scanf_i+0x15e>
 80289a8:	07ca      	lsls	r2, r1, #31
 80289aa:	bf4c      	ite	mi
 80289ac:	8018      	strhmi	r0, [r3, #0]
 80289ae:	6018      	strpl	r0, [r3, #0]
 80289b0:	e7eb      	b.n	802898a <_scanf_i+0x1aa>
 80289b2:	2001      	movs	r0, #1
 80289b4:	e7f2      	b.n	802899c <_scanf_i+0x1bc>
 80289b6:	bf00      	nop
 80289b8:	08029ffc 	.word	0x08029ffc
 80289bc:	08028b59 	.word	0x08028b59
 80289c0:	080278f9 	.word	0x080278f9
 80289c4:	0802d321 	.word	0x0802d321

080289c8 <_read_r>:
 80289c8:	b538      	push	{r3, r4, r5, lr}
 80289ca:	4d07      	ldr	r5, [pc, #28]	; (80289e8 <_read_r+0x20>)
 80289cc:	4604      	mov	r4, r0
 80289ce:	4608      	mov	r0, r1
 80289d0:	4611      	mov	r1, r2
 80289d2:	2200      	movs	r2, #0
 80289d4:	602a      	str	r2, [r5, #0]
 80289d6:	461a      	mov	r2, r3
 80289d8:	f7dc f802 	bl	80049e0 <_read>
 80289dc:	1c43      	adds	r3, r0, #1
 80289de:	d102      	bne.n	80289e6 <_read_r+0x1e>
 80289e0:	682b      	ldr	r3, [r5, #0]
 80289e2:	b103      	cbz	r3, 80289e6 <_read_r+0x1e>
 80289e4:	6023      	str	r3, [r4, #0]
 80289e6:	bd38      	pop	{r3, r4, r5, pc}
 80289e8:	2000b144 	.word	0x2000b144

080289ec <__sccl>:
 80289ec:	b570      	push	{r4, r5, r6, lr}
 80289ee:	780b      	ldrb	r3, [r1, #0]
 80289f0:	4604      	mov	r4, r0
 80289f2:	2b5e      	cmp	r3, #94	; 0x5e
 80289f4:	bf0b      	itete	eq
 80289f6:	784b      	ldrbeq	r3, [r1, #1]
 80289f8:	1c48      	addne	r0, r1, #1
 80289fa:	1c88      	addeq	r0, r1, #2
 80289fc:	2200      	movne	r2, #0
 80289fe:	bf08      	it	eq
 8028a00:	2201      	moveq	r2, #1
 8028a02:	1e61      	subs	r1, r4, #1
 8028a04:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8028a08:	f801 2f01 	strb.w	r2, [r1, #1]!
 8028a0c:	42a9      	cmp	r1, r5
 8028a0e:	d1fb      	bne.n	8028a08 <__sccl+0x1c>
 8028a10:	b90b      	cbnz	r3, 8028a16 <__sccl+0x2a>
 8028a12:	3801      	subs	r0, #1
 8028a14:	bd70      	pop	{r4, r5, r6, pc}
 8028a16:	f082 0101 	eor.w	r1, r2, #1
 8028a1a:	54e1      	strb	r1, [r4, r3]
 8028a1c:	1c42      	adds	r2, r0, #1
 8028a1e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8028a22:	2d2d      	cmp	r5, #45	; 0x2d
 8028a24:	f102 36ff 	add.w	r6, r2, #4294967295
 8028a28:	4610      	mov	r0, r2
 8028a2a:	d006      	beq.n	8028a3a <__sccl+0x4e>
 8028a2c:	2d5d      	cmp	r5, #93	; 0x5d
 8028a2e:	d0f1      	beq.n	8028a14 <__sccl+0x28>
 8028a30:	b90d      	cbnz	r5, 8028a36 <__sccl+0x4a>
 8028a32:	4630      	mov	r0, r6
 8028a34:	e7ee      	b.n	8028a14 <__sccl+0x28>
 8028a36:	462b      	mov	r3, r5
 8028a38:	e7ef      	b.n	8028a1a <__sccl+0x2e>
 8028a3a:	7816      	ldrb	r6, [r2, #0]
 8028a3c:	2e5d      	cmp	r6, #93	; 0x5d
 8028a3e:	d0fa      	beq.n	8028a36 <__sccl+0x4a>
 8028a40:	42b3      	cmp	r3, r6
 8028a42:	dcf8      	bgt.n	8028a36 <__sccl+0x4a>
 8028a44:	4618      	mov	r0, r3
 8028a46:	3001      	adds	r0, #1
 8028a48:	4286      	cmp	r6, r0
 8028a4a:	5421      	strb	r1, [r4, r0]
 8028a4c:	dcfb      	bgt.n	8028a46 <__sccl+0x5a>
 8028a4e:	43d8      	mvns	r0, r3
 8028a50:	4430      	add	r0, r6
 8028a52:	1c5d      	adds	r5, r3, #1
 8028a54:	42b3      	cmp	r3, r6
 8028a56:	bfa8      	it	ge
 8028a58:	2000      	movge	r0, #0
 8028a5a:	182b      	adds	r3, r5, r0
 8028a5c:	3202      	adds	r2, #2
 8028a5e:	e7de      	b.n	8028a1e <__sccl+0x32>

08028a60 <_strtoul_l.isra.0>:
 8028a60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028a64:	4e3b      	ldr	r6, [pc, #236]	; (8028b54 <_strtoul_l.isra.0+0xf4>)
 8028a66:	4686      	mov	lr, r0
 8028a68:	468c      	mov	ip, r1
 8028a6a:	4660      	mov	r0, ip
 8028a6c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8028a70:	5da5      	ldrb	r5, [r4, r6]
 8028a72:	f015 0508 	ands.w	r5, r5, #8
 8028a76:	d1f8      	bne.n	8028a6a <_strtoul_l.isra.0+0xa>
 8028a78:	2c2d      	cmp	r4, #45	; 0x2d
 8028a7a:	d134      	bne.n	8028ae6 <_strtoul_l.isra.0+0x86>
 8028a7c:	f89c 4000 	ldrb.w	r4, [ip]
 8028a80:	f04f 0801 	mov.w	r8, #1
 8028a84:	f100 0c02 	add.w	ip, r0, #2
 8028a88:	2b00      	cmp	r3, #0
 8028a8a:	d05e      	beq.n	8028b4a <_strtoul_l.isra.0+0xea>
 8028a8c:	2b10      	cmp	r3, #16
 8028a8e:	d10c      	bne.n	8028aaa <_strtoul_l.isra.0+0x4a>
 8028a90:	2c30      	cmp	r4, #48	; 0x30
 8028a92:	d10a      	bne.n	8028aaa <_strtoul_l.isra.0+0x4a>
 8028a94:	f89c 0000 	ldrb.w	r0, [ip]
 8028a98:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8028a9c:	2858      	cmp	r0, #88	; 0x58
 8028a9e:	d14f      	bne.n	8028b40 <_strtoul_l.isra.0+0xe0>
 8028aa0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8028aa4:	2310      	movs	r3, #16
 8028aa6:	f10c 0c02 	add.w	ip, ip, #2
 8028aaa:	f04f 37ff 	mov.w	r7, #4294967295
 8028aae:	2500      	movs	r5, #0
 8028ab0:	fbb7 f7f3 	udiv	r7, r7, r3
 8028ab4:	fb03 f907 	mul.w	r9, r3, r7
 8028ab8:	ea6f 0909 	mvn.w	r9, r9
 8028abc:	4628      	mov	r0, r5
 8028abe:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8028ac2:	2e09      	cmp	r6, #9
 8028ac4:	d818      	bhi.n	8028af8 <_strtoul_l.isra.0+0x98>
 8028ac6:	4634      	mov	r4, r6
 8028ac8:	42a3      	cmp	r3, r4
 8028aca:	dd24      	ble.n	8028b16 <_strtoul_l.isra.0+0xb6>
 8028acc:	2d00      	cmp	r5, #0
 8028ace:	db1f      	blt.n	8028b10 <_strtoul_l.isra.0+0xb0>
 8028ad0:	4287      	cmp	r7, r0
 8028ad2:	d31d      	bcc.n	8028b10 <_strtoul_l.isra.0+0xb0>
 8028ad4:	d101      	bne.n	8028ada <_strtoul_l.isra.0+0x7a>
 8028ad6:	45a1      	cmp	r9, r4
 8028ad8:	db1a      	blt.n	8028b10 <_strtoul_l.isra.0+0xb0>
 8028ada:	fb00 4003 	mla	r0, r0, r3, r4
 8028ade:	2501      	movs	r5, #1
 8028ae0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8028ae4:	e7eb      	b.n	8028abe <_strtoul_l.isra.0+0x5e>
 8028ae6:	2c2b      	cmp	r4, #43	; 0x2b
 8028ae8:	bf08      	it	eq
 8028aea:	f89c 4000 	ldrbeq.w	r4, [ip]
 8028aee:	46a8      	mov	r8, r5
 8028af0:	bf08      	it	eq
 8028af2:	f100 0c02 	addeq.w	ip, r0, #2
 8028af6:	e7c7      	b.n	8028a88 <_strtoul_l.isra.0+0x28>
 8028af8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8028afc:	2e19      	cmp	r6, #25
 8028afe:	d801      	bhi.n	8028b04 <_strtoul_l.isra.0+0xa4>
 8028b00:	3c37      	subs	r4, #55	; 0x37
 8028b02:	e7e1      	b.n	8028ac8 <_strtoul_l.isra.0+0x68>
 8028b04:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8028b08:	2e19      	cmp	r6, #25
 8028b0a:	d804      	bhi.n	8028b16 <_strtoul_l.isra.0+0xb6>
 8028b0c:	3c57      	subs	r4, #87	; 0x57
 8028b0e:	e7db      	b.n	8028ac8 <_strtoul_l.isra.0+0x68>
 8028b10:	f04f 35ff 	mov.w	r5, #4294967295
 8028b14:	e7e4      	b.n	8028ae0 <_strtoul_l.isra.0+0x80>
 8028b16:	2d00      	cmp	r5, #0
 8028b18:	da07      	bge.n	8028b2a <_strtoul_l.isra.0+0xca>
 8028b1a:	2322      	movs	r3, #34	; 0x22
 8028b1c:	f8ce 3000 	str.w	r3, [lr]
 8028b20:	f04f 30ff 	mov.w	r0, #4294967295
 8028b24:	b942      	cbnz	r2, 8028b38 <_strtoul_l.isra.0+0xd8>
 8028b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028b2a:	f1b8 0f00 	cmp.w	r8, #0
 8028b2e:	d000      	beq.n	8028b32 <_strtoul_l.isra.0+0xd2>
 8028b30:	4240      	negs	r0, r0
 8028b32:	2a00      	cmp	r2, #0
 8028b34:	d0f7      	beq.n	8028b26 <_strtoul_l.isra.0+0xc6>
 8028b36:	b10d      	cbz	r5, 8028b3c <_strtoul_l.isra.0+0xdc>
 8028b38:	f10c 31ff 	add.w	r1, ip, #4294967295
 8028b3c:	6011      	str	r1, [r2, #0]
 8028b3e:	e7f2      	b.n	8028b26 <_strtoul_l.isra.0+0xc6>
 8028b40:	2430      	movs	r4, #48	; 0x30
 8028b42:	2b00      	cmp	r3, #0
 8028b44:	d1b1      	bne.n	8028aaa <_strtoul_l.isra.0+0x4a>
 8028b46:	2308      	movs	r3, #8
 8028b48:	e7af      	b.n	8028aaa <_strtoul_l.isra.0+0x4a>
 8028b4a:	2c30      	cmp	r4, #48	; 0x30
 8028b4c:	d0a2      	beq.n	8028a94 <_strtoul_l.isra.0+0x34>
 8028b4e:	230a      	movs	r3, #10
 8028b50:	e7ab      	b.n	8028aaa <_strtoul_l.isra.0+0x4a>
 8028b52:	bf00      	nop
 8028b54:	0802d0f1 	.word	0x0802d0f1

08028b58 <_strtoul_r>:
 8028b58:	f7ff bf82 	b.w	8028a60 <_strtoul_l.isra.0>

08028b5c <__submore>:
 8028b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028b60:	460c      	mov	r4, r1
 8028b62:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8028b64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028b68:	4299      	cmp	r1, r3
 8028b6a:	d11d      	bne.n	8028ba8 <__submore+0x4c>
 8028b6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8028b70:	f7fe f95a 	bl	8026e28 <_malloc_r>
 8028b74:	b918      	cbnz	r0, 8028b7e <__submore+0x22>
 8028b76:	f04f 30ff 	mov.w	r0, #4294967295
 8028b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8028b82:	63a3      	str	r3, [r4, #56]	; 0x38
 8028b84:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8028b88:	6360      	str	r0, [r4, #52]	; 0x34
 8028b8a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8028b8e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8028b92:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8028b96:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8028b9a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8028b9e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8028ba2:	6020      	str	r0, [r4, #0]
 8028ba4:	2000      	movs	r0, #0
 8028ba6:	e7e8      	b.n	8028b7a <__submore+0x1e>
 8028ba8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8028baa:	0077      	lsls	r7, r6, #1
 8028bac:	463a      	mov	r2, r7
 8028bae:	f7ff fa6b 	bl	8028088 <_realloc_r>
 8028bb2:	4605      	mov	r5, r0
 8028bb4:	2800      	cmp	r0, #0
 8028bb6:	d0de      	beq.n	8028b76 <__submore+0x1a>
 8028bb8:	eb00 0806 	add.w	r8, r0, r6
 8028bbc:	4601      	mov	r1, r0
 8028bbe:	4632      	mov	r2, r6
 8028bc0:	4640      	mov	r0, r8
 8028bc2:	f7fe f8b1 	bl	8026d28 <memcpy>
 8028bc6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8028bca:	f8c4 8000 	str.w	r8, [r4]
 8028bce:	e7e9      	b.n	8028ba4 <__submore+0x48>

08028bd0 <_fstat_r>:
 8028bd0:	b538      	push	{r3, r4, r5, lr}
 8028bd2:	4d07      	ldr	r5, [pc, #28]	; (8028bf0 <_fstat_r+0x20>)
 8028bd4:	2300      	movs	r3, #0
 8028bd6:	4604      	mov	r4, r0
 8028bd8:	4608      	mov	r0, r1
 8028bda:	4611      	mov	r1, r2
 8028bdc:	602b      	str	r3, [r5, #0]
 8028bde:	f7db ff44 	bl	8004a6a <_fstat>
 8028be2:	1c43      	adds	r3, r0, #1
 8028be4:	d102      	bne.n	8028bec <_fstat_r+0x1c>
 8028be6:	682b      	ldr	r3, [r5, #0]
 8028be8:	b103      	cbz	r3, 8028bec <_fstat_r+0x1c>
 8028bea:	6023      	str	r3, [r4, #0]
 8028bec:	bd38      	pop	{r3, r4, r5, pc}
 8028bee:	bf00      	nop
 8028bf0:	2000b144 	.word	0x2000b144

08028bf4 <_isatty_r>:
 8028bf4:	b538      	push	{r3, r4, r5, lr}
 8028bf6:	4d06      	ldr	r5, [pc, #24]	; (8028c10 <_isatty_r+0x1c>)
 8028bf8:	2300      	movs	r3, #0
 8028bfa:	4604      	mov	r4, r0
 8028bfc:	4608      	mov	r0, r1
 8028bfe:	602b      	str	r3, [r5, #0]
 8028c00:	f7db ff43 	bl	8004a8a <_isatty>
 8028c04:	1c43      	adds	r3, r0, #1
 8028c06:	d102      	bne.n	8028c0e <_isatty_r+0x1a>
 8028c08:	682b      	ldr	r3, [r5, #0]
 8028c0a:	b103      	cbz	r3, 8028c0e <_isatty_r+0x1a>
 8028c0c:	6023      	str	r3, [r4, #0]
 8028c0e:	bd38      	pop	{r3, r4, r5, pc}
 8028c10:	2000b144 	.word	0x2000b144

08028c14 <_malloc_usable_size_r>:
 8028c14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8028c18:	1f18      	subs	r0, r3, #4
 8028c1a:	2b00      	cmp	r3, #0
 8028c1c:	bfbc      	itt	lt
 8028c1e:	580b      	ldrlt	r3, [r1, r0]
 8028c20:	18c0      	addlt	r0, r0, r3
 8028c22:	4770      	bx	lr

08028c24 <_init>:
 8028c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028c26:	bf00      	nop
 8028c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028c2a:	bc08      	pop	{r3}
 8028c2c:	469e      	mov	lr, r3
 8028c2e:	4770      	bx	lr

08028c30 <_fini>:
 8028c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028c32:	bf00      	nop
 8028c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028c36:	bc08      	pop	{r3}
 8028c38:	469e      	mov	lr, r3
 8028c3a:	4770      	bx	lr
